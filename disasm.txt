
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 b5 9a 00 00       	call   c0009ad5 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 79 27 02 00       	call   c002279e <_init>
c0000025:	c3                   	ret    
c0000026:	bb 22 34 02 c0       	mov    ebx,0xc0023422
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 30 34 02 c0    	cmp    ebx,0xc0023430
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 d8 76 02 c0       	mov    eax,0xc00276d8
c0000049:	3d d8 76 02 c0       	cmp    eax,0xc00276d8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 d8 76 02 c0       	push   0xc00276d8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 d8 76 02 c0       	mov    eax,0xc00276d8
c0000075:	2d d8 76 02 c0       	sub    eax,0xc00276d8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 d8 76 02 c0       	push   0xc00276d8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 60 78 02 c0 00 	cmp    BYTE PTR ds:0xc0027860,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 38 34 02 c0       	mov    ebx,0xc0023438
c00000bb:	81 eb 34 34 02 c0    	sub    ebx,0xc0023434
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 34 34 02 c0       	mov    esi,0xc0023434
c00000ca:	a1 64 78 02 c0       	mov    eax,ds:0xc0027864
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 64 78 02 c0       	mov    ds:0xc0027864,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 64 78 02 c0       	mov    eax,ds:0xc0027864
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 d8 76 02 c0       	push   0xc00276d8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 60 78 02 c0 01 	mov    BYTE PTR ds:0xc0027860,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 68 78 02 c0       	push   0xc0027868
c000012c:	68 d8 76 02 c0       	push   0xc00276d8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	0f 20 c0             	mov    eax,cr0
c00002c7:	0c 08                	or     al,0x8
c00002c9:	0f 22 c0             	mov    cr0,eax
c00002cc:	85 d2                	test   edx,edx
c00002ce:	75 11                	jne    c00002e1 <commonThreadSwitch.firstTime>
c00002d0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002d3:	e8 bc 7b 01 00       	call   c0017e94 <changeTSS>
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	5a                   	pop    edx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	9d                   	popf   
c00002e0:	c3                   	ret    

c00002e1 <commonThreadSwitch.firstTime>:
c00002e1:	fa                   	cli    
c00002e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002e5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002ea:	60                   	pusha  
c00002eb:	e8 7c c7 00 00       	call   c000ca6c <mapVASFirstTime>
c00002f0:	61                   	popa   
c00002f1:	89 c4                	mov    esp,eax
c00002f3:	56                   	push   esi
c00002f4:	52                   	push   edx
c00002f5:	e8 9a 7b 01 00       	call   c0017e94 <changeTSS>
c00002fa:	5a                   	pop    edx
c00002fb:	5e                   	pop    esi
c00002fc:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000303:	5d                   	pop    ebp
c0000304:	5f                   	pop    edi
c0000305:	5e                   	pop    esi
c0000306:	59                   	pop    ecx
c0000307:	59                   	pop    ecx
c0000308:	5b                   	pop    ebx
c0000309:	58                   	pop    eax
c000030a:	81 c4 04 00 00 00    	add    esp,0x4
c0000310:	6a 02                	push   0x2
c0000312:	9d                   	popf   
c0000313:	52                   	push   edx
c0000314:	e8 63 80 01 00       	call   c001837c <taskStartupFunction>
c0000319:	5a                   	pop    edx
c000031a:	50                   	push   eax
c000031b:	ff d2                	call   edx
c000031d:	e8 a6 86 01 00       	call   c00189c8 <taskReturned>
c0000322:	e9 fb ff ff ff       	jmp    c0000322 <commonThreadSwitch.firstTime+0x41>

c0000327 <asmQuickAcquireLock>:
c0000327:	55                   	push   ebp
c0000328:	89 e5                	mov    ebp,esp
c000032a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032d <asmQuickAcquireLock.retry>:
c000032d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000332:	72 02                	jb     c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000334:	fa                   	cli    
c0000335:	c3                   	ret    

c0000336 <asmQuickAcquireLock.spin_with_pause>:
c0000336:	f3 90                	pause  
c0000338:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000033e:	75 f6                	jne    c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000340:	e9 e8 ff ff ff       	jmp    c000032d <asmQuickAcquireLock.retry>

c0000345 <asmQuickReleaseLock>:
c0000345:	55                   	push   ebp
c0000346:	89 e5                	mov    ebp,esp
c0000348:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000034f:	5d                   	pop    ebp
c0000350:	c3                   	ret    

c0000351 <asmAcquireLock>:
c0000351:	55                   	push   ebp
c0000352:	89 e5                	mov    ebp,esp
c0000354:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000357 <asmAcquireLock.retry>:
c0000357:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000035c:	72 05                	jb     c0000363 <asmAcquireLock.spin_with_pause>
c000035e:	9c                   	pushf  
c000035f:	58                   	pop    eax
c0000360:	fa                   	cli    
c0000361:	5d                   	pop    ebp
c0000362:	c3                   	ret    

c0000363 <asmAcquireLock.spin_with_pause>:
c0000363:	f3 90                	pause  
c0000365:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000036b:	75 f6                	jne    c0000363 <asmAcquireLock.spin_with_pause>
c000036d:	e9 e5 ff ff ff       	jmp    c0000357 <asmAcquireLock.retry>

c0000372 <asmReleaseLock>:
c0000372:	55                   	push   ebp
c0000373:	89 e5                	mov    ebp,esp
c0000375:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000378:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000037b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000381:	52                   	push   edx
c0000382:	9d                   	popf   
c0000383:	5d                   	pop    ebp
c0000384:	c3                   	ret    

c0000385 <loadGDT>:
c0000385:	0f 01 15 b0 7c 02 c0 	lgdtd  ds:0xc0027cb0
c000038c:	66 b8 10 00          	mov    ax,0x10
c0000390:	66 8e d8             	mov    ds,ax
c0000393:	66 8e c0             	mov    es,ax
c0000396:	66 8e e0             	mov    fs,ax
c0000399:	66 8e e8             	mov    gs,ax
c000039c:	66 8e d0             	mov    ss,ax
c000039f:	e9 00 00 00 00       	jmp    c00003a4 <flush2>

c00003a4 <flush2>:
c00003a4:	c3                   	ret    

c00003a5 <isr0>:
c00003a5:	fa                   	cli    
c00003a6:	68 00 00 00 00       	push   0x0
c00003ab:	68 00 00 00 00       	push   0x0
c00003b0:	e9 44 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003b5 <isr1>:
c00003b5:	fa                   	cli    
c00003b6:	6a 00                	push   0x0
c00003b8:	6a 01                	push   0x1
c00003ba:	e9 3a 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003bf <isr2>:
c00003bf:	fa                   	cli    
c00003c0:	6a 00                	push   0x0
c00003c2:	6a 02                	push   0x2
c00003c4:	e9 30 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003c9 <isr3>:
c00003c9:	fa                   	cli    
c00003ca:	6a 00                	push   0x0
c00003cc:	6a 03                	push   0x3
c00003ce:	e9 26 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003d3 <isr4>:
c00003d3:	fa                   	cli    
c00003d4:	6a 00                	push   0x0
c00003d6:	6a 04                	push   0x4
c00003d8:	e9 1c 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003dd <isr5>:
c00003dd:	fa                   	cli    
c00003de:	6a 00                	push   0x0
c00003e0:	6a 05                	push   0x5
c00003e2:	e9 12 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003e7 <isr6>:
c00003e7:	fa                   	cli    
c00003e8:	6a 00                	push   0x0
c00003ea:	6a 06                	push   0x6
c00003ec:	e9 08 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003f1 <isr7>:
c00003f1:	fa                   	cli    
c00003f2:	6a 00                	push   0x0
c00003f4:	6a 07                	push   0x7
c00003f6:	e9 fe 00 00 00       	jmp    c00004f9 <int_common_stub>

c00003fb <isr8>:
c00003fb:	fa                   	cli    
c00003fc:	6a 08                	push   0x8
c00003fe:	e9 f6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000403 <isr9>:
c0000403:	fa                   	cli    
c0000404:	6a 00                	push   0x0
c0000406:	6a 09                	push   0x9
c0000408:	e9 ec 00 00 00       	jmp    c00004f9 <int_common_stub>

c000040d <isr10>:
c000040d:	fa                   	cli    
c000040e:	6a 0a                	push   0xa
c0000410:	e9 e4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000415 <isr11>:
c0000415:	fa                   	cli    
c0000416:	6a 0b                	push   0xb
c0000418:	e9 dc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000041d <isr12>:
c000041d:	fa                   	cli    
c000041e:	6a 0c                	push   0xc
c0000420:	e9 d4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000425 <isr13>:
c0000425:	fa                   	cli    
c0000426:	6a 0d                	push   0xd
c0000428:	e9 cc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000042d <isr14>:
c000042d:	fa                   	cli    
c000042e:	6a 0e                	push   0xe
c0000430:	e9 c4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000435 <isr15>:
c0000435:	fa                   	cli    
c0000436:	6a 00                	push   0x0
c0000438:	6a 0f                	push   0xf
c000043a:	e9 ba 00 00 00       	jmp    c00004f9 <int_common_stub>

c000043f <isr16>:
c000043f:	fa                   	cli    
c0000440:	6a 00                	push   0x0
c0000442:	6a 10                	push   0x10
c0000444:	e9 b0 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000449 <isr17>:
c0000449:	fa                   	cli    
c000044a:	6a 00                	push   0x0
c000044c:	6a 11                	push   0x11
c000044e:	e9 a6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000453 <isr18>:
c0000453:	fa                   	cli    
c0000454:	6a 00                	push   0x0
c0000456:	6a 12                	push   0x12
c0000458:	e9 9c 00 00 00       	jmp    c00004f9 <int_common_stub>

c000045d <irq3>:
c000045d:	fa                   	cli    
c000045e:	6a 00                	push   0x0
c0000460:	6a 23                	push   0x23
c0000462:	e9 92 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000467 <irq4>:
c0000467:	fa                   	cli    
c0000468:	6a 00                	push   0x0
c000046a:	6a 24                	push   0x24
c000046c:	e9 88 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000471 <irq5>:
c0000471:	fa                   	cli    
c0000472:	6a 00                	push   0x0
c0000474:	6a 25                	push   0x25
c0000476:	e9 7e 00 00 00       	jmp    c00004f9 <int_common_stub>

c000047b <irq6>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 26                	push   0x26
c0000480:	e9 74 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000485 <irq7>:
c0000485:	fa                   	cli    
c0000486:	6a 00                	push   0x0
c0000488:	6a 27                	push   0x27
c000048a:	e9 6a 00 00 00       	jmp    c00004f9 <int_common_stub>

c000048f <irq8>:
c000048f:	fa                   	cli    
c0000490:	6a 00                	push   0x0
c0000492:	6a 28                	push   0x28
c0000494:	e9 60 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000499 <irq9>:
c0000499:	fa                   	cli    
c000049a:	6a 00                	push   0x0
c000049c:	6a 29                	push   0x29
c000049e:	e9 56 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004a3 <irq10>:
c00004a3:	fa                   	cli    
c00004a4:	6a 00                	push   0x0
c00004a6:	6a 2a                	push   0x2a
c00004a8:	e9 4c 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004ad <irq11>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 2b                	push   0x2b
c00004b2:	e9 42 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004b7 <irq12>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 2c                	push   0x2c
c00004bc:	e9 38 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004c1 <irq13>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 2d                	push   0x2d
c00004c6:	e9 2e 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004cb <irq14>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 2e                	push   0x2e
c00004d0:	e9 24 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004d5 <irq15>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 2f                	push   0x2f
c00004da:	e9 1a 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004df <irq1>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 21                	push   0x21
c00004e4:	eb 13                	jmp    c00004f9 <int_common_stub>

c00004e6 <irq2>:
c00004e6:	fa                   	cli    
c00004e7:	6a 00                	push   0x0
c00004e9:	6a 22                	push   0x22
c00004eb:	eb 0c                	jmp    c00004f9 <int_common_stub>

c00004ed <isr96>:
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 60                	push   0x60
c00004f1:	fb                   	sti    
c00004f2:	eb 05                	jmp    c00004f9 <int_common_stub>

c00004f4 <irq0>:
c00004f4:	fa                   	cli    
c00004f5:	6a 00                	push   0x0
c00004f7:	6a 20                	push   0x20

c00004f9 <int_common_stub>:
c00004f9:	60                   	pusha  
c00004fa:	1e                   	push   ds
c00004fb:	06                   	push   es
c00004fc:	0f a0                	push   fs
c00004fe:	0f a8                	push   gs
c0000500:	66 b8 10 00          	mov    ax,0x10
c0000504:	66 8e d8             	mov    ds,ax
c0000507:	66 8e c0             	mov    es,ax
c000050a:	66 8e e0             	mov    fs,ax
c000050d:	66 8e e8             	mov    gs,ax
c0000510:	54                   	push   esp
c0000511:	fc                   	cld    
c0000512:	e8 4a e5 00 00       	call   c000ea61 <int_handler>
c0000517:	81 c4 04 00 00 00    	add    esp,0x4
c000051d:	0f a9                	pop    gs
c000051f:	0f a1                	pop    fs
c0000521:	07                   	pop    es
c0000522:	1f                   	pop    ds
c0000523:	61                   	popa   
c0000524:	81 c4 08 00 00 00    	add    esp,0x8
c000052a:	cf                   	iret   

c000052b <irq16>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 30                	push   0x30
c0000530:	e9 c4 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000535 <irq17>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 31                	push   0x31
c000053a:	e9 ba ff ff ff       	jmp    c00004f9 <int_common_stub>

c000053f <irq18>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 32                	push   0x32
c0000544:	e9 b0 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000549 <irq19>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 33                	push   0x33
c000054e:	e9 a6 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000553 <irq20>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 34                	push   0x34
c0000558:	e9 9c ff ff ff       	jmp    c00004f9 <int_common_stub>

c000055d <irq21>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 35                	push   0x35
c0000562:	e9 92 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000567 <irq22>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 36                	push   0x36
c000056c:	e9 88 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000571 <irq23>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 37                	push   0x37
c0000576:	e9 7e ff ff ff       	jmp    c00004f9 <int_common_stub>

c000057b <memcpy>:
c000057b:	e9 7a 83 00 00       	jmp    c00088fa <__not_memcpy>

c0000580 <memcmp>:
c0000580:	56                   	push   esi
c0000581:	53                   	push   ebx
c0000582:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000058a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000058e:	85 f6                	test   esi,esi
c0000590:	74 1d                	je     c00005af <memcmp+0x2f>
c0000592:	8a 08                	mov    cl,BYTE PTR [eax]
c0000594:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000597:	38 cb                	cmp    bl,cl
c0000599:	75 19                	jne    c00005b4 <memcmp+0x34>
c000059b:	01 c6                	add    esi,eax
c000059d:	eb 0a                	jmp    c00005a9 <memcmp+0x29>
c000059f:	90                   	nop
c00005a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a5:	38 d9                	cmp    cl,bl
c00005a7:	75 0b                	jne    c00005b4 <memcmp+0x34>
c00005a9:	40                   	inc    eax
c00005aa:	42                   	inc    edx
c00005ab:	39 f0                	cmp    eax,esi
c00005ad:	75 f1                	jne    c00005a0 <memcmp+0x20>
c00005af:	31 c0                	xor    eax,eax
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    
c00005b4:	0f b6 c1             	movzx  eax,cl
c00005b7:	29 d8                	sub    eax,ebx
c00005b9:	5b                   	pop    ebx
c00005ba:	5e                   	pop    esi
c00005bb:	c3                   	ret    

c00005bc <memmove>:
c00005bc:	55                   	push   ebp
c00005bd:	57                   	push   edi
c00005be:	56                   	push   esi
c00005bf:	53                   	push   ebx
c00005c0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005cc:	39 dd                	cmp    ebp,ebx
c00005ce:	0f 83 80 00 00 00    	jae    c0000654 <memmove+0x98>
c00005d4:	85 d2                	test   edx,edx
c00005d6:	74 74                	je     c000064c <memmove+0x90>
c00005d8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005db:	8d 75 04             	lea    esi,[ebp+0x4]
c00005de:	39 cd                	cmp    ebp,ecx
c00005e0:	0f 93 c1             	setae  cl
c00005e3:	39 f3                	cmp    ebx,esi
c00005e5:	0f 93 c0             	setae  al
c00005e8:	89 c6                	mov    esi,eax
c00005ea:	09 ce                	or     esi,ecx
c00005ec:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ef:	89 f0                	mov    eax,esi
c00005f1:	83 f9 0c             	cmp    ecx,0xc
c00005f4:	0f 97 c1             	seta   cl
c00005f7:	84 c8                	test   al,cl
c00005f9:	74 75                	je     c0000670 <memmove+0xb4>
c00005fb:	89 e9                	mov    ecx,ebp
c00005fd:	09 d9                	or     ecx,ebx
c00005ff:	83 e1 03             	and    ecx,0x3
c0000602:	75 6c                	jne    c0000670 <memmove+0xb4>
c0000604:	89 d7                	mov    edi,edx
c0000606:	89 d9                	mov    ecx,ebx
c0000608:	83 e7 fc             	and    edi,0xfffffffc
c000060b:	89 ee                	mov    esi,ebp
c000060d:	01 df                	add    edi,ebx
c000060f:	90                   	nop
c0000610:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000612:	83 c6 04             	add    esi,0x4
c0000615:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000618:	83 c1 04             	add    ecx,0x4
c000061b:	39 f9                	cmp    ecx,edi
c000061d:	75 f1                	jne    c0000610 <memmove+0x54>
c000061f:	89 d1                	mov    ecx,edx
c0000621:	89 d7                	mov    edi,edx
c0000623:	83 e1 fc             	and    ecx,0xfffffffc
c0000626:	29 cf                	sub    edi,ecx
c0000628:	01 cb                	add    ebx,ecx
c000062a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000062e:	39 ca                	cmp    edx,ecx
c0000630:	74 1a                	je     c000064c <memmove+0x90>
c0000632:	8a 03                	mov    al,BYTE PTR [ebx]
c0000634:	83 ff 01             	cmp    edi,0x1
c0000637:	88 06                	mov    BYTE PTR [esi],al
c0000639:	74 11                	je     c000064c <memmove+0x90>
c000063b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000063e:	83 ff 02             	cmp    edi,0x2
c0000641:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000644:	74 06                	je     c000064c <memmove+0x90>
c0000646:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000649:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000064c:	5b                   	pop    ebx
c000064d:	89 e8                	mov    eax,ebp
c000064f:	5e                   	pop    esi
c0000650:	5f                   	pop    edi
c0000651:	5d                   	pop    ebp
c0000652:	c3                   	ret    
c0000653:	90                   	nop
c0000654:	76 f6                	jbe    c000064c <memmove+0x90>
c0000656:	85 d2                	test   edx,edx
c0000658:	74 f2                	je     c000064c <memmove+0x90>
c000065a:	4b                   	dec    ebx
c000065b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000065e:	66 90                	xchg   ax,ax
c0000660:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000663:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000666:	4a                   	dec    edx
c0000667:	75 f7                	jne    c0000660 <memmove+0xa4>
c0000669:	5b                   	pop    ebx
c000066a:	89 e8                	mov    eax,ebp
c000066c:	5e                   	pop    esi
c000066d:	5f                   	pop    edi
c000066e:	5d                   	pop    ebp
c000066f:	c3                   	ret    
c0000670:	01 ea                	add    edx,ebp
c0000672:	89 e9                	mov    ecx,ebp
c0000674:	8a 03                	mov    al,BYTE PTR [ebx]
c0000676:	41                   	inc    ecx
c0000677:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000067a:	43                   	inc    ebx
c000067b:	39 d1                	cmp    ecx,edx
c000067d:	75 f5                	jne    c0000674 <memmove+0xb8>
c000067f:	eb cb                	jmp    c000064c <memmove+0x90>
c0000681:	8d 76 00             	lea    esi,[esi+0x0]

c0000684 <memset>:
c0000684:	57                   	push   edi
c0000685:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000689:	85 c9                	test   ecx,ecx
c000068b:	74 0b                	je     c0000698 <memset+0x14>
c000068d:	fc                   	cld    
c000068e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000692:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000696:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000069c:	5f                   	pop    edi
c000069d:	c3                   	ret    
c000069e:	66 90                	xchg   ax,ax

c00006a0 <strlen>:
c00006a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006a4:	31 c0                	xor    eax,eax
c00006a6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a9:	74 09                	je     c00006b4 <strlen+0x14>
c00006ab:	90                   	nop
c00006ac:	40                   	inc    eax
c00006ad:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b1:	75 f9                	jne    c00006ac <strlen+0xc>
c00006b3:	c3                   	ret    
c00006b4:	c3                   	ret    
c00006b5:	8d 76 00             	lea    esi,[esi+0x0]

c00006b8 <strpbrk>:
c00006b8:	57                   	push   edi
c00006b9:	56                   	push   esi
c00006ba:	53                   	push   ebx
c00006bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006c3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006c5:	84 db                	test   bl,bl
c00006c7:	74 21                	je     c00006ea <strpbrk+0x32>
c00006c9:	8a 07                	mov    al,BYTE PTR [edi]
c00006cb:	84 c0                	test   al,al
c00006cd:	74 14                	je     c00006e3 <strpbrk+0x2b>
c00006cf:	38 d8                	cmp    al,bl
c00006d1:	74 19                	je     c00006ec <strpbrk+0x34>
c00006d3:	89 fa                	mov    edx,edi
c00006d5:	eb 05                	jmp    c00006dc <strpbrk+0x24>
c00006d7:	90                   	nop
c00006d8:	38 d9                	cmp    cl,bl
c00006da:	74 10                	je     c00006ec <strpbrk+0x34>
c00006dc:	42                   	inc    edx
c00006dd:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006df:	84 c9                	test   cl,cl
c00006e1:	75 f5                	jne    c00006d8 <strpbrk+0x20>
c00006e3:	46                   	inc    esi
c00006e4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006e6:	84 db                	test   bl,bl
c00006e8:	75 e1                	jne    c00006cb <strpbrk+0x13>
c00006ea:	31 f6                	xor    esi,esi
c00006ec:	89 f0                	mov    eax,esi
c00006ee:	5b                   	pop    ebx
c00006ef:	5e                   	pop    esi
c00006f0:	5f                   	pop    edi
c00006f1:	c3                   	ret    
c00006f2:	66 90                	xchg   ax,ax

c00006f4 <strtok>:
c00006f4:	56                   	push   esi
c00006f5:	53                   	push   ebx
c00006f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006fe:	85 db                	test   ebx,ebx
c0000700:	75 07                	jne    c0000709 <strtok+0x15>
c0000702:	eb 2c                	jmp    c0000730 <strtok+0x3c>
c0000704:	43                   	inc    ebx
c0000705:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000709:	56                   	push   esi
c000070a:	53                   	push   ebx
c000070b:	e8 a8 ff ff ff       	call   c00006b8 <strpbrk>
c0000710:	5a                   	pop    edx
c0000711:	a3 80 78 02 c0       	mov    ds:0xc0027880,eax
c0000716:	59                   	pop    ecx
c0000717:	39 d8                	cmp    eax,ebx
c0000719:	74 e9                	je     c0000704 <strtok+0x10>
c000071b:	85 c0                	test   eax,eax
c000071d:	74 1b                	je     c000073a <strtok+0x46>
c000071f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000722:	8d 50 01             	lea    edx,[eax+0x1]
c0000725:	89 d8                	mov    eax,ebx
c0000727:	89 15 80 78 02 c0    	mov    DWORD PTR ds:0xc0027880,edx
c000072d:	5b                   	pop    ebx
c000072e:	5e                   	pop    esi
c000072f:	c3                   	ret    
c0000730:	8b 1d 80 78 02 c0    	mov    ebx,DWORD PTR ds:0xc0027880
c0000736:	85 db                	test   ebx,ebx
c0000738:	75 cf                	jne    c0000709 <strtok+0x15>
c000073a:	31 c0                	xor    eax,eax
c000073c:	5b                   	pop    ebx
c000073d:	5e                   	pop    esi
c000073e:	c3                   	ret    
c000073f:	90                   	nop

c0000740 <strcpy>:
c0000740:	53                   	push   ebx
c0000741:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000749:	89 c3                	mov    ebx,eax
c000074b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000074d:	84 d2                	test   dl,dl
c000074f:	74 0d                	je     c000075e <strcpy+0x1e>
c0000751:	8d 76 00             	lea    esi,[esi+0x0]
c0000754:	88 13                	mov    BYTE PTR [ebx],dl
c0000756:	41                   	inc    ecx
c0000757:	43                   	inc    ebx
c0000758:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075a:	84 d2                	test   dl,dl
c000075c:	75 f6                	jne    c0000754 <strcpy+0x14>
c000075e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000761:	5b                   	pop    ebx
c0000762:	c3                   	ret    
c0000763:	90                   	nop

c0000764 <strncpy>:
c0000764:	55                   	push   ebp
c0000765:	57                   	push   edi
c0000766:	56                   	push   esi
c0000767:	53                   	push   ebx
c0000768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000076c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000770:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000774:	85 c0                	test   eax,eax
c0000776:	74 39                	je     c00007b1 <strncpy+0x4d>
c0000778:	8a 1e                	mov    bl,BYTE PTR [esi]
c000077a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000077d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000780:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000783:	84 db                	test   bl,bl
c0000785:	74 31                	je     c00007b8 <strncpy+0x54>
c0000787:	85 c9                	test   ecx,ecx
c0000789:	74 26                	je     c00007b1 <strncpy+0x4d>
c000078b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000078e:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000791:	8d 55 02             	lea    edx,[ebp+0x2]
c0000794:	8d 46 02             	lea    eax,[esi+0x2]
c0000797:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000079a:	84 db                	test   bl,bl
c000079c:	75 0f                	jne    c00007ad <strncpy+0x49>
c000079e:	eb 18                	jmp    c00007b8 <strncpy+0x54>
c00007a0:	40                   	inc    eax
c00007a1:	42                   	inc    edx
c00007a2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007a5:	49                   	dec    ecx
c00007a6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a9:	84 db                	test   bl,bl
c00007ab:	74 0b                	je     c00007b8 <strncpy+0x54>
c00007ad:	85 c9                	test   ecx,ecx
c00007af:	75 ef                	jne    c00007a0 <strncpy+0x3c>
c00007b1:	5b                   	pop    ebx
c00007b2:	89 e8                	mov    eax,ebp
c00007b4:	5e                   	pop    esi
c00007b5:	5f                   	pop    edi
c00007b6:	5d                   	pop    ebp
c00007b7:	c3                   	ret    
c00007b8:	85 c9                	test   ecx,ecx
c00007ba:	74 f5                	je     c00007b1 <strncpy+0x4d>
c00007bc:	fc                   	cld    
c00007bd:	31 c0                	xor    eax,eax
c00007bf:	89 d7                	mov    edi,edx
c00007c1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007c3:	89 e8                	mov    eax,ebp
c00007c5:	5b                   	pop    ebx
c00007c6:	5e                   	pop    esi
c00007c7:	5f                   	pop    edi
c00007c8:	5d                   	pop    ebp
c00007c9:	c3                   	ret    
c00007ca:	66 90                	xchg   ax,ax

c00007cc <strcmp>:
c00007cc:	56                   	push   esi
c00007cd:	53                   	push   ebx
c00007ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007d6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007db:	38 d1                	cmp    cl,dl
c00007dd:	75 1d                	jne    c00007fc <strcmp+0x30>
c00007df:	84 c9                	test   cl,cl
c00007e1:	74 21                	je     c0000804 <strcmp+0x38>
c00007e3:	b8 01 00 00 00       	mov    eax,0x1
c00007e8:	eb 07                	jmp    c00007f1 <strcmp+0x25>
c00007ea:	66 90                	xchg   ax,ax
c00007ec:	40                   	inc    eax
c00007ed:	84 d2                	test   dl,dl
c00007ef:	74 13                	je     c0000804 <strcmp+0x38>
c00007f1:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007f4:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f8:	38 ca                	cmp    dl,cl
c00007fa:	74 f0                	je     c00007ec <strcmp+0x20>
c00007fc:	0f b6 c2             	movzx  eax,dl
c00007ff:	5b                   	pop    ebx
c0000800:	29 c8                	sub    eax,ecx
c0000802:	5e                   	pop    esi
c0000803:	c3                   	ret    
c0000804:	31 c0                	xor    eax,eax
c0000806:	5b                   	pop    ebx
c0000807:	5e                   	pop    esi
c0000808:	c3                   	ret    
c0000809:	8d 76 00             	lea    esi,[esi+0x0]

c000080c <strchr>:
c000080c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000810:	8a 10                	mov    dl,BYTE PTR [eax]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 15                	je     c000082b <strchr+0x1f>
c0000816:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000081a:	38 ca                	cmp    dl,cl
c000081c:	75 06                	jne    c0000824 <strchr+0x18>
c000081e:	eb 0e                	jmp    c000082e <strchr+0x22>
c0000820:	38 ca                	cmp    dl,cl
c0000822:	74 09                	je     c000082d <strchr+0x21>
c0000824:	40                   	inc    eax
c0000825:	8a 10                	mov    dl,BYTE PTR [eax]
c0000827:	84 d2                	test   dl,dl
c0000829:	75 f5                	jne    c0000820 <strchr+0x14>
c000082b:	31 c0                	xor    eax,eax
c000082d:	c3                   	ret    
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncmp>:
c0000830:	57                   	push   edi
c0000831:	56                   	push   esi
c0000832:	53                   	push   ebx
c0000833:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000837:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000083b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000083f:	85 ff                	test   edi,edi
c0000841:	74 28                	je     c000086b <strncmp+0x3b>
c0000843:	8a 16                	mov    dl,BYTE PTR [esi]
c0000845:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000848:	38 d1                	cmp    cl,dl
c000084a:	75 28                	jne    c0000874 <strncmp+0x44>
c000084c:	8d 46 01             	lea    eax,[esi+0x1]
c000084f:	84 c9                	test   cl,cl
c0000851:	74 18                	je     c000086b <strncmp+0x3b>
c0000853:	01 fe                	add    esi,edi
c0000855:	eb 0f                	jmp    c0000866 <strncmp+0x36>
c0000857:	90                   	nop
c0000858:	8a 10                	mov    dl,BYTE PTR [eax]
c000085a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000085d:	38 ca                	cmp    dl,cl
c000085f:	75 13                	jne    c0000874 <strncmp+0x44>
c0000861:	40                   	inc    eax
c0000862:	84 d2                	test   dl,dl
c0000864:	74 05                	je     c000086b <strncmp+0x3b>
c0000866:	43                   	inc    ebx
c0000867:	39 c6                	cmp    esi,eax
c0000869:	75 ed                	jne    c0000858 <strncmp+0x28>
c000086b:	5b                   	pop    ebx
c000086c:	31 c0                	xor    eax,eax
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    
c0000871:	8d 76 00             	lea    esi,[esi+0x0]
c0000874:	5b                   	pop    ebx
c0000875:	0f b6 c2             	movzx  eax,dl
c0000878:	5e                   	pop    esi
c0000879:	29 c8                	sub    eax,ecx
c000087b:	5f                   	pop    edi
c000087c:	c3                   	ret    
c000087d:	8d 76 00             	lea    esi,[esi+0x0]

c0000880 <strcat>:
c0000880:	56                   	push   esi
c0000881:	53                   	push   ebx
c0000882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000886:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000088a:	89 c3                	mov    ebx,eax
c000088c:	eb 04                	jmp    c0000892 <strcat+0x12>
c000088e:	66 90                	xchg   ax,ax
c0000890:	89 d3                	mov    ebx,edx
c0000892:	8d 53 01             	lea    edx,[ebx+0x1]
c0000895:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000899:	75 f5                	jne    c0000890 <strcat+0x10>
c000089b:	31 d2                	xor    edx,edx
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008a3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008a6:	42                   	inc    edx
c00008a7:	84 c9                	test   cl,cl
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	5e                   	pop    esi
c00008ad:	c3                   	ret    
c00008ae:	66 90                	xchg   ax,ax

c00008b0 <strncat>:
c00008b0:	56                   	push   esi
c00008b1:	53                   	push   ebx
c00008b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008be:	85 f6                	test   esi,esi
c00008c0:	74 1e                	je     c00008e0 <strncat+0x30>
c00008c2:	89 c2                	mov    edx,eax
c00008c4:	42                   	inc    edx
c00008c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c9:	75 f9                	jne    c00008c4 <strncat+0x14>
c00008cb:	01 ce                	add    esi,ecx
c00008cd:	eb 06                	jmp    c00008d5 <strncat+0x25>
c00008cf:	90                   	nop
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 10                	je     c00008e4 <strncat+0x34>
c00008d4:	42                   	inc    edx
c00008d5:	41                   	inc    ecx
c00008d6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008dc:	84 db                	test   bl,bl
c00008de:	75 f0                	jne    c00008d0 <strncat+0x20>
c00008e0:	5b                   	pop    ebx
c00008e1:	5e                   	pop    esi
c00008e2:	c3                   	ret    
c00008e3:	90                   	nop
c00008e4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008e7:	5b                   	pop    ebx
c00008e8:	5e                   	pop    esi
c00008e9:	c3                   	ret    
c00008ea:	66 90                	xchg   ax,ax

c00008ec <strstr>:
c00008ec:	57                   	push   edi
c00008ed:	56                   	push   esi
c00008ee:	53                   	push   ebx
c00008ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008f7:	57                   	push   edi
c00008f8:	e8 a3 fd ff ff       	call   c00006a0 <strlen>
c00008fd:	59                   	pop    ecx
c00008fe:	85 c0                	test   eax,eax
c0000900:	74 2a                	je     c000092c <strstr+0x40>
c0000902:	89 c6                	mov    esi,eax
c0000904:	eb 12                	jmp    c0000918 <strstr+0x2c>
c0000906:	66 90                	xchg   ax,ax
c0000908:	56                   	push   esi
c0000909:	57                   	push   edi
c000090a:	53                   	push   ebx
c000090b:	e8 70 fc ff ff       	call   c0000580 <memcmp>
c0000910:	83 c4 0c             	add    esp,0xc
c0000913:	85 c0                	test   eax,eax
c0000915:	74 15                	je     c000092c <strstr+0x40>
c0000917:	43                   	inc    ebx
c0000918:	53                   	push   ebx
c0000919:	e8 82 fd ff ff       	call   c00006a0 <strlen>
c000091e:	5a                   	pop    edx
c000091f:	39 f0                	cmp    eax,esi
c0000921:	73 e5                	jae    c0000908 <strstr+0x1c>
c0000923:	5b                   	pop    ebx
c0000924:	31 c0                	xor    eax,eax
c0000926:	5e                   	pop    esi
c0000927:	5f                   	pop    edi
c0000928:	c3                   	ret    
c0000929:	8d 76 00             	lea    esi,[esi+0x0]
c000092c:	89 d8                	mov    eax,ebx
c000092e:	5b                   	pop    ebx
c000092f:	5e                   	pop    esi
c0000930:	5f                   	pop    edi
c0000931:	c3                   	ret    
c0000932:	66 90                	xchg   ax,ax

c0000934 <toupper>:
c0000934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000938:	0f b6 d0             	movzx  edx,al
c000093b:	f6 82 40 34 02 c0 02 	test   BYTE PTR [edx-0x3ffdcbc0],0x2
c0000942:	74 03                	je     c0000947 <toupper+0x13>
c0000944:	83 e8 20             	sub    eax,0x20
c0000947:	c3                   	ret    

c0000948 <tolower>:
c0000948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000094c:	0f b6 d0             	movzx  edx,al
c000094f:	f6 82 40 34 02 c0 01 	test   BYTE PTR [edx-0x3ffdcbc0],0x1
c0000956:	74 03                	je     c000095b <tolower+0x13>
c0000958:	83 c0 20             	add    eax,0x20
c000095b:	c3                   	ret    

c000095c <simple_strtoul>:
c000095c:	55                   	push   ebp
c000095d:	57                   	push   edi
c000095e:	56                   	push   esi
c000095f:	53                   	push   ebx
c0000960:	83 ec 08             	sub    esp,0x8
c0000963:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000967:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000096b:	90                   	nop
c000096c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000096f:	f6 82 40 34 02 c0 08 	test   BYTE PTR [edx-0x3ffdcbc0],0x8
c0000976:	75 05                	jne    c000097d <simple_strtoul+0x21>
c0000978:	80 fa 09             	cmp    dl,0x9
c000097b:	75 03                	jne    c0000980 <simple_strtoul+0x24>
c000097d:	41                   	inc    ecx
c000097e:	eb ec                	jmp    c000096c <simple_strtoul+0x10>
c0000980:	80 fa 2d             	cmp    dl,0x2d
c0000983:	0f 84 1b 01 00 00    	je     c0000aa4 <simple_strtoul+0x148>
c0000989:	80 fa 2b             	cmp    dl,0x2b
c000098c:	0f 84 c2 00 00 00    	je     c0000a54 <simple_strtoul+0xf8>
c0000992:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000099a:	85 f6                	test   esi,esi
c000099c:	0f 85 c3 00 00 00    	jne    c0000a65 <simple_strtoul+0x109>
c00009a2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009a4:	80 fa 30             	cmp    dl,0x30
c00009a7:	0f 84 47 01 00 00    	je     c0000af4 <simple_strtoul+0x198>
c00009ad:	be 0a 00 00 00       	mov    esi,0xa
c00009b2:	84 d2                	test   dl,dl
c00009b4:	0f 84 6f 01 00 00    	je     c0000b29 <simple_strtoul+0x1cd>
c00009ba:	31 ed                	xor    ebp,ebp
c00009bc:	31 ff                	xor    edi,edi
c00009be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009c5:	eb 2b                	jmp    c00009f2 <simple_strtoul+0x96>
c00009c7:	90                   	nop
c00009c8:	83 eb 30             	sub    ebx,0x30
c00009cb:	39 f3                	cmp    ebx,esi
c00009cd:	73 4d                	jae    c0000a1c <simple_strtoul+0xc0>
c00009cf:	31 d2                	xor    edx,edx
c00009d1:	89 d8                	mov    eax,ebx
c00009d3:	f7 d0                	not    eax
c00009d5:	f7 f6                	div    esi
c00009d7:	39 f8                	cmp    eax,edi
c00009d9:	0f 82 b1 00 00 00    	jb     c0000a90 <simple_strtoul+0x134>
c00009df:	0f af fe             	imul   edi,esi
c00009e2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e9:	01 df                	add    edi,ebx
c00009eb:	41                   	inc    ecx
c00009ec:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009ee:	84 d2                	test   dl,dl
c00009f0:	74 2a                	je     c0000a1c <simple_strtoul+0xc0>
c00009f2:	0f b6 da             	movzx  ebx,dl
c00009f5:	f6 83 40 34 02 c0 04 	test   BYTE PTR [ebx-0x3ffdcbc0],0x4
c00009fc:	75 ca                	jne    c00009c8 <simple_strtoul+0x6c>
c00009fe:	0f be d2             	movsx  edx,dl
c0000a01:	52                   	push   edx
c0000a02:	e8 2d ff ff ff       	call   c0000934 <toupper>
c0000a07:	5b                   	pop    ebx
c0000a08:	0f b6 d0             	movzx  edx,al
c0000a0b:	f6 82 40 34 02 c0 01 	test   BYTE PTR [edx-0x3ffdcbc0],0x1
c0000a12:	74 08                	je     c0000a1c <simple_strtoul+0xc0>
c0000a14:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a17:	39 f3                	cmp    ebx,esi
c0000a19:	72 b4                	jb     c00009cf <simple_strtoul+0x73>
c0000a1b:	90                   	nop
c0000a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a20:	85 c0                	test   eax,eax
c0000a22:	74 14                	je     c0000a38 <simple_strtoul+0xdc>
c0000a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a27:	09 f8                	or     eax,edi
c0000a29:	75 71                	jne    c0000a9c <simple_strtoul+0x140>
c0000a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a33:	31 ff                	xor    edi,edi
c0000a35:	89 30                	mov    DWORD PTR [eax],esi
c0000a37:	90                   	nop
c0000a38:	4d                   	dec    ebp
c0000a39:	75 05                	jne    c0000a40 <simple_strtoul+0xe4>
c0000a3b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a40:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a45:	75 02                	jne    c0000a49 <simple_strtoul+0xed>
c0000a47:	f7 df                	neg    edi
c0000a49:	83 c4 08             	add    esp,0x8
c0000a4c:	89 f8                	mov    eax,edi
c0000a4e:	5b                   	pop    ebx
c0000a4f:	5e                   	pop    esi
c0000a50:	5f                   	pop    edi
c0000a51:	5d                   	pop    ebp
c0000a52:	c3                   	ret    
c0000a53:	90                   	nop
c0000a54:	41                   	inc    ecx
c0000a55:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a5d:	85 f6                	test   esi,esi
c0000a5f:	0f 84 3d ff ff ff    	je     c00009a2 <simple_strtoul+0x46>
c0000a65:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a68:	83 f8 22             	cmp    eax,0x22
c0000a6b:	77 6a                	ja     c0000ad7 <simple_strtoul+0x17b>
c0000a6d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a6f:	83 fe 08             	cmp    esi,0x8
c0000a72:	0f 84 a2 00 00 00    	je     c0000b1a <simple_strtoul+0x1be>
c0000a78:	83 fe 10             	cmp    esi,0x10
c0000a7b:	0f 85 31 ff ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000a81:	80 fa 30             	cmp    dl,0x30
c0000a84:	74 2c                	je     c0000ab2 <simple_strtoul+0x156>
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	e9 22 ff ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000a90:	bd 01 00 00 00       	mov    ebp,0x1
c0000a95:	31 ff                	xor    edi,edi
c0000a97:	e9 4f ff ff ff       	jmp    c00009eb <simple_strtoul+0x8f>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	89 08                	mov    DWORD PTR [eax],ecx
c0000aa2:	eb 94                	jmp    c0000a38 <simple_strtoul+0xdc>
c0000aa4:	41                   	inc    ecx
c0000aa5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aad:	e9 e8 fe ff ff       	jmp    c000099a <simple_strtoul+0x3e>
c0000ab2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab9:	50                   	push   eax
c0000aba:	e8 89 fe ff ff       	call   c0000948 <tolower>
c0000abf:	5e                   	pop    esi
c0000ac0:	83 f8 78             	cmp    eax,0x78
c0000ac3:	0f 84 84 00 00 00    	je     c0000b4d <simple_strtoul+0x1f1>
c0000ac9:	41                   	inc    ecx
c0000aca:	be 10 00 00 00       	mov    esi,0x10
c0000acf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ad2:	e9 db fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000ad7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000adb:	85 ff                	test   edi,edi
c0000add:	74 5c                	je     c0000b3b <simple_strtoul+0x1df>
c0000adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ae3:	85 c9                	test   ecx,ecx
c0000ae5:	75 4e                	jne    c0000b35 <simple_strtoul+0x1d9>
c0000ae7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aed:	31 ff                	xor    edi,edi
c0000aef:	e9 4c ff ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000af4:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af8:	88 04 24             	mov    BYTE PTR [esp],al
c0000afb:	50                   	push   eax
c0000afc:	e8 47 fe ff ff       	call   c0000948 <tolower>
c0000b01:	5d                   	pop    ebp
c0000b02:	83 f8 78             	cmp    eax,0x78
c0000b05:	74 3b                	je     c0000b42 <simple_strtoul+0x1e6>
c0000b07:	41                   	inc    ecx
c0000b08:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b0b:	80 fa 30             	cmp    dl,0x30
c0000b0e:	74 13                	je     c0000b23 <simple_strtoul+0x1c7>
c0000b10:	be 08 00 00 00       	mov    esi,0x8
c0000b15:	e9 98 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000b1a:	80 fa 30             	cmp    dl,0x30
c0000b1d:	0f 85 8f fe ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000b23:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b26:	41                   	inc    ecx
c0000b27:	eb e7                	jmp    c0000b10 <simple_strtoul+0x1b4>
c0000b29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b2d:	85 d2                	test   edx,edx
c0000b2f:	74 0a                	je     c0000b3b <simple_strtoul+0x1df>
c0000b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b35:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b39:	89 30                	mov    DWORD PTR [eax],esi
c0000b3b:	31 ff                	xor    edi,edi
c0000b3d:	e9 fe fe ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000b42:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b45:	83 c1 02             	add    ecx,0x2
c0000b48:	e9 34 ff ff ff       	jmp    c0000a81 <simple_strtoul+0x125>
c0000b4d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b50:	be 10 00 00 00       	mov    esi,0x10
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 55 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>

c0000b5d <largebin_index>:
c0000b5d:	89 c2                	mov    edx,eax
c0000b5f:	c1 ea 08             	shr    edx,0x8
c0000b62:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b68:	77 10                	ja     c0000b7a <largebin_index+0x1d>
c0000b6a:	0f bd d2             	bsr    edx,edx
c0000b6d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b70:	d3 e8                	shr    eax,cl
c0000b72:	83 e0 03             	and    eax,0x3
c0000b75:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b79:	c3                   	ret    
c0000b7a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b7f:	c3                   	ret    

c0000b80 <malloc_init_state>:
c0000b80:	53                   	push   ebx
c0000b81:	8d 50 34             	lea    edx,[eax+0x34]
c0000b84:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b8a:	89 d1                	mov    ecx,edx
c0000b8c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b8f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b92:	83 c2 08             	add    edx,0x8
c0000b95:	39 da                	cmp    edx,ebx
c0000b97:	75 f3                	jne    c0000b8c <malloc_init_state+0xc>
c0000b99:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b9b:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ba5:	83 e2 03             	and    edx,0x3
c0000ba8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bb2:	83 ca 48             	or     edx,0x48
c0000bb5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bbf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bd0:	89 10                	mov    DWORD PTR [eax],edx
c0000bd2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bd5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bdf:	5b                   	pop    ebx
c0000be0:	c3                   	ret    

c0000be1 <malloc_consolidate>:
c0000be1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000be3:	85 d2                	test   edx,edx
c0000be5:	0f 84 d8 00 00 00    	je     c0000cc3 <malloc_consolidate+0xe2>
c0000beb:	55                   	push   ebp
c0000bec:	83 e2 fd             	and    edx,0xfffffffd
c0000bef:	57                   	push   edi
c0000bf0:	89 c5                	mov    ebp,eax
c0000bf2:	56                   	push   esi
c0000bf3:	8d 78 34             	lea    edi,[eax+0x34]
c0000bf6:	53                   	push   ebx
c0000bf7:	83 ec 10             	sub    esp,0x10
c0000bfa:	89 10                	mov    DWORD PTR [eax],edx
c0000bfc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c00:	c1 ea 03             	shr    edx,0x3
c0000c03:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c07:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c0b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c0e:	85 d2                	test   edx,edx
c0000c10:	0f 84 98 00 00 00    	je     c0000cae <malloc_consolidate+0xcd>
c0000c16:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c1d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c20:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c27:	89 f9                	mov    ecx,edi
c0000c29:	83 e1 fe             	and    ecx,0xfffffffe
c0000c2c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c2f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c32:	83 e3 fc             	and    ebx,0xfffffffc
c0000c35:	83 e7 01             	and    edi,0x1
c0000c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c3b:	75 14                	jne    c0000c51 <malloc_consolidate+0x70>
c0000c3d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c3f:	29 fa                	sub    edx,edi
c0000c41:	01 f9                	add    ecx,edi
c0000c43:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c46:	89 fb                	mov    ebx,edi
c0000c48:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c4b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c4e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c51:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c54:	74 40                	je     c0000c96 <malloc_consolidate+0xb5>
c0000c56:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c59:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c5c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c60:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c63:	83 e7 01             	and    edi,0x1
c0000c66:	75 0e                	jne    c0000c76 <malloc_consolidate+0x95>
c0000c68:	01 d9                	add    ecx,ebx
c0000c6a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c6d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c70:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c73:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c76:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c79:	89 ce                	mov    esi,ecx
c0000c7b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c7e:	83 ce 01             	or     esi,0x1
c0000c81:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c84:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c87:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c8a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c8e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c91:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c94:	eb 0c                	jmp    c0000ca2 <malloc_consolidate+0xc1>
c0000c96:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c99:	83 c9 01             	or     ecx,0x1
c0000c9c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c9f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ca2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ca6:	85 d2                	test   edx,edx
c0000ca8:	0f 85 6f ff ff ff    	jne    c0000c1d <malloc_consolidate+0x3c>
c0000cae:	83 c5 04             	add    ebp,0x4
c0000cb1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cb5:	0f 85 50 ff ff ff    	jne    c0000c0b <malloc_consolidate+0x2a>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	5b                   	pop    ebx
c0000cbf:	5e                   	pop    esi
c0000cc0:	5f                   	pop    edi
c0000cc1:	5d                   	pop    ebp
c0000cc2:	c3                   	ret    
c0000cc3:	e9 b8 fe ff ff       	jmp    c0000b80 <malloc_init_state>

c0000cc8 <dlfree>:
c0000cc8:	57                   	push   edi
c0000cc9:	56                   	push   esi
c0000cca:	53                   	push   ebx
c0000ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ccf:	85 db                	test   ebx,ebx
c0000cd1:	0f 84 e2 00 00 00    	je     c0000db9 <dlfree+0xf1>
c0000cd7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cda:	8b 0d a0 78 02 c0    	mov    ecx,DWORD PTR ds:0xc00278a0
c0000ce0:	89 f0                	mov    eax,esi
c0000ce2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ce5:	83 e0 fc             	and    eax,0xfffffffc
c0000ce8:	39 c1                	cmp    ecx,eax
c0000cea:	72 24                	jb     c0000d10 <dlfree+0x48>
c0000cec:	83 c9 03             	or     ecx,0x3
c0000cef:	c1 e8 03             	shr    eax,0x3
c0000cf2:	89 0d a0 78 02 c0    	mov    DWORD PTR ds:0xc00278a0,ecx
c0000cf8:	83 e8 02             	sub    eax,0x2
c0000cfb:	8b 0c 85 a4 78 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd875c]
c0000d02:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d04:	89 14 85 a4 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd875c],edx
c0000d0b:	e9 a9 00 00 00       	jmp    c0000db9 <dlfree+0xf1>
c0000d10:	83 e6 02             	and    esi,0x2
c0000d13:	0f 85 a0 00 00 00    	jne    c0000db9 <dlfree+0xf1>
c0000d19:	83 c9 01             	or     ecx,0x1
c0000d1c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d1f:	89 0d a0 78 02 c0    	mov    DWORD PTR ds:0xc00278a0,ecx
c0000d25:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d28:	83 e1 fc             	and    ecx,0xfffffffc
c0000d2b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d2f:	75 13                	jne    c0000d44 <dlfree+0x7c>
c0000d31:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d34:	29 da                	sub    edx,ebx
c0000d36:	01 d8                	add    eax,ebx
c0000d38:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d3e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d41:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d44:	39 35 cc 78 02 c0    	cmp    DWORD PTR ds:0xc00278cc,esi
c0000d4a:	74 40                	je     c0000d8c <dlfree+0xc4>
c0000d4c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d50:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d53:	80 e3 01             	and    bl,0x1
c0000d56:	75 0e                	jne    c0000d66 <dlfree+0x9e>
c0000d58:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d5b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d5e:	01 c8                	add    eax,ecx
c0000d60:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d63:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d66:	8b 0d dc 78 02 c0    	mov    ecx,DWORD PTR ds:0xc00278dc
c0000d6c:	c7 42 0c d4 78 02 c0 	mov    DWORD PTR [edx+0xc],0xc00278d4
c0000d73:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d76:	89 15 dc 78 02 c0    	mov    DWORD PTR ds:0xc00278dc,edx
c0000d7c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d8a:	eb 10                	jmp    c0000d9c <dlfree+0xd4>
c0000d8c:	01 c8                	add    eax,ecx
c0000d8e:	89 c1                	mov    ecx,eax
c0000d90:	83 c9 01             	or     ecx,0x1
c0000d93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d96:	89 15 cc 78 02 c0    	mov    DWORD PTR ds:0xc00278cc,edx
c0000d9c:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000da1:	76 16                	jbe    c0000db9 <dlfree+0xf1>
c0000da3:	f6 05 a0 78 02 c0 02 	test   BYTE PTR ds:0xc00278a0,0x2
c0000daa:	74 0d                	je     c0000db9 <dlfree+0xf1>
c0000dac:	5b                   	pop    ebx
c0000dad:	b8 a0 78 02 c0       	mov    eax,0xc00278a0
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	e9 28 fe ff ff       	jmp    c0000be1 <malloc_consolidate>
c0000db9:	5b                   	pop    ebx
c0000dba:	5e                   	pop    esi
c0000dbb:	5f                   	pop    edi
c0000dbc:	c3                   	ret    

c0000dbd <sYSMALLOc>:
c0000dbd:	55                   	push   ebp
c0000dbe:	57                   	push   edi
c0000dbf:	56                   	push   esi
c0000dc0:	53                   	push   ebx
c0000dc1:	89 d3                	mov    ebx,edx
c0000dc3:	83 ec 2c             	sub    esp,0x2c
c0000dc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dca:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dd0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dd3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dda:	74 1f                	je     c0000dfb <sYSMALLOc+0x3e>
c0000ddc:	89 d8                	mov    eax,ebx
c0000dde:	e8 fe fd ff ff       	call   c0000be1 <malloc_consolidate>
c0000de3:	83 ec 0c             	sub    esp,0xc
c0000de6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dea:	83 e8 07             	sub    eax,0x7
c0000ded:	50                   	push   eax
c0000dee:	e8 30 02 00 00       	call   c0001023 <dlmalloc>
c0000df3:	83 c4 10             	add    esp,0x10
c0000df6:	e9 20 02 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000dfb:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dfe:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e04:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e07:	83 e0 fc             	and    eax,0xfffffffc
c0000e0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e12:	83 c0 10             	add    eax,0x10
c0000e15:	01 c1                	add    ecx,eax
c0000e17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e1b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e22:	74 04                	je     c0000e28 <sYSMALLOc+0x6b>
c0000e24:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e28:	f7 da                	neg    edx
c0000e2a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e2e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e32:	21 d1                	and    ecx,edx
c0000e34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e38:	7f 07                	jg     c0000e41 <sYSMALLOc+0x84>
c0000e3a:	31 c0                	xor    eax,eax
c0000e3c:	e9 da 01 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000e41:	83 ec 0c             	sub    esp,0xc
c0000e44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e48:	e8 8b 8a 00 00       	call   c00098d8 <sbrk>
c0000e4d:	83 c4 10             	add    esp,0x10
c0000e50:	89 c6                	mov    esi,eax
c0000e52:	83 f8 ff             	cmp    eax,0xffffffff
c0000e55:	74 e3                	je     c0000e3a <sYSMALLOc+0x7d>
c0000e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e5b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e5f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e62:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e68:	39 f1                	cmp    ecx,esi
c0000e6a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e70:	75 13                	jne    c0000e85 <sYSMALLOc+0xc8>
c0000e72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e76:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e7a:	83 c8 01             	or     eax,0x1
c0000e7d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e80:	e9 3e 01 00 00       	jmp    c0000fc3 <sYSMALLOc+0x206>
c0000e85:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e8b:	88 d0                	mov    al,dl
c0000e8d:	83 e0 01             	and    eax,0x1
c0000e90:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e99:	0f 95 c0             	setne  al
c0000e9c:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000ea0:	39 f1                	cmp    ecx,esi
c0000ea2:	76 12                	jbe    c0000eb6 <sYSMALLOc+0xf9>
c0000ea4:	84 c0                	test   al,al
c0000ea6:	74 0e                	je     c0000eb6 <sYSMALLOc+0xf9>
c0000ea8:	83 e2 fe             	and    edx,0xfffffffe
c0000eab:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000eb1:	e9 83 00 00 00       	jmp    c0000f39 <sYSMALLOc+0x17c>
c0000eb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ebb:	74 7c                	je     c0000f39 <sYSMALLOc+0x17c>
c0000ebd:	84 c0                	test   al,al
c0000ebf:	74 0c                	je     c0000ecd <sYSMALLOc+0x110>
c0000ec1:	89 f0                	mov    eax,esi
c0000ec3:	29 c8                	sub    eax,ecx
c0000ec5:	01 e8                	add    eax,ebp
c0000ec7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ecd:	89 f2                	mov    edx,esi
c0000ecf:	83 e2 07             	and    edx,0x7
c0000ed2:	74 0c                	je     c0000ee0 <sYSMALLOc+0x123>
c0000ed4:	b8 08 00 00 00       	mov    eax,0x8
c0000ed9:	29 d0                	sub    eax,edx
c0000edb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ede:	eb 04                	jmp    c0000ee4 <sYSMALLOc+0x127>
c0000ee0:	89 f5                	mov    ebp,esi
c0000ee2:	31 c0                	xor    eax,eax
c0000ee4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000eec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ef0:	01 c1                	add    ecx,eax
c0000ef2:	83 ec 0c             	sub    esp,0xc
c0000ef5:	01 f1                	add    ecx,esi
c0000ef7:	01 ca                	add    edx,ecx
c0000ef9:	29 c8                	sub    eax,ecx
c0000efb:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000eff:	01 c2                	add    edx,eax
c0000f01:	52                   	push   edx
c0000f02:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f06:	e8 cd 89 00 00       	call   c00098d8 <sbrk>
c0000f0b:	83 c4 10             	add    esp,0x10
c0000f0e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f15:	75 0f                	jne    c0000f26 <sYSMALLOc+0x169>
c0000f17:	83 ec 0c             	sub    esp,0xc
c0000f1a:	6a 00                	push   0x0
c0000f1c:	e8 b7 89 00 00       	call   c00098d8 <sbrk>
c0000f21:	83 c4 10             	add    esp,0x10
c0000f24:	eb 30                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f26:	39 c6                	cmp    esi,eax
c0000f28:	76 33                	jbe    c0000f5d <sYSMALLOc+0x1a0>
c0000f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f35:	01 f0                	add    eax,esi
c0000f37:	eb 1d                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f39:	83 ec 0c             	sub    esp,0xc
c0000f3c:	89 f5                	mov    ebp,esi
c0000f3e:	6a 00                	push   0x0
c0000f40:	e8 93 89 00 00       	call   c00098d8 <sbrk>
c0000f45:	89 c2                	mov    edx,eax
c0000f47:	29 f2                	sub    edx,esi
c0000f49:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f4d:	83 c4 10             	add    esp,0x10
c0000f50:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f56:	31 d2                	xor    edx,edx
c0000f58:	83 f8 ff             	cmp    eax,0xffffffff
c0000f5b:	74 66                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f5d:	29 e8                	sub    eax,ebp
c0000f5f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f62:	01 d0                	add    eax,edx
c0000f64:	83 c8 01             	or     eax,0x1
c0000f67:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f6a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f75:	74 4c                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f7b:	83 e8 0c             	sub    eax,0xc
c0000f7e:	83 e0 f8             	and    eax,0xfffffff8
c0000f81:	89 c2                	mov    edx,eax
c0000f83:	83 ca 01             	or     edx,0x1
c0000f86:	83 f8 0f             	cmp    eax,0xf
c0000f89:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f8c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f94:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f9c:	76 25                	jbe    c0000fc3 <sYSMALLOc+0x206>
c0000f9e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fa4:	83 ec 0c             	sub    esp,0xc
c0000fa7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fb1:	83 c7 08             	add    edi,0x8
c0000fb4:	57                   	push   edi
c0000fb5:	e8 0e fd ff ff       	call   c0000cc8 <dlfree>
c0000fba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fcf:	73 06                	jae    c0000fd7 <sYSMALLOc+0x21a>
c0000fd1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fd7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fdd:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fe3:	73 06                	jae    c0000feb <sYSMALLOc+0x22e>
c0000fe5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000feb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff1:	83 e2 fc             	and    edx,0xfffffffc
c0000ff4:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff8:	0f 82 3c fe ff ff    	jb     c0000e3a <sYSMALLOc+0x7d>
c0000ffe:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001002:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001005:	29 fa                	sub    edx,edi
c0001007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000100a:	83 ca 01             	or     edx,0x1
c000100d:	89 fb                	mov    ebx,edi
c000100f:	83 c0 08             	add    eax,0x8
c0001012:	83 cb 01             	or     ebx,0x1
c0001015:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001018:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000101b:	83 c4 2c             	add    esp,0x2c
c000101e:	5b                   	pop    ebx
c000101f:	5e                   	pop    esi
c0001020:	5f                   	pop    edi
c0001021:	5d                   	pop    ebp
c0001022:	c3                   	ret    

c0001023 <dlmalloc>:
c0001023:	55                   	push   ebp
c0001024:	57                   	push   edi
c0001025:	56                   	push   esi
c0001026:	53                   	push   ebx
c0001027:	83 ec 1c             	sub    esp,0x1c
c000102a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000102e:	83 f8 df             	cmp    eax,0xffffffdf
c0001031:	0f 87 70 03 00 00    	ja     c00013a7 <dlmalloc+0x384>
c0001037:	83 c0 0b             	add    eax,0xb
c000103a:	be 10 00 00 00       	mov    esi,0x10
c000103f:	83 f8 0f             	cmp    eax,0xf
c0001042:	76 05                	jbe    c0001049 <dlmalloc+0x26>
c0001044:	83 e0 f8             	and    eax,0xfffffff8
c0001047:	89 c6                	mov    esi,eax
c0001049:	8b 3d a0 78 02 c0    	mov    edi,DWORD PTR ds:0xc00278a0
c000104f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001055:	75 17                	jne    c000106e <dlmalloc+0x4b>
c0001057:	85 ff                	test   edi,edi
c0001059:	0f 85 05 03 00 00    	jne    c0001364 <dlmalloc+0x341>
c000105f:	b8 a0 78 02 c0       	mov    eax,0xc00278a0
c0001064:	e8 78 fb ff ff       	call   c0000be1 <malloc_consolidate>
c0001069:	e9 f6 02 00 00       	jmp    c0001364 <dlmalloc+0x341>
c000106e:	39 f7                	cmp    edi,esi
c0001070:	72 1f                	jb     c0001091 <dlmalloc+0x6e>
c0001072:	89 f2                	mov    edx,esi
c0001074:	c1 ea 03             	shr    edx,0x3
c0001077:	83 ea 02             	sub    edx,0x2
c000107a:	8b 04 95 a4 78 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd875c]
c0001081:	85 c0                	test   eax,eax
c0001083:	74 0c                	je     c0001091 <dlmalloc+0x6e>
c0001085:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001088:	89 0c 95 a4 78 02 c0 	mov    DWORD PTR [edx*4-0x3ffd875c],ecx
c000108f:	eb 30                	jmp    c00010c1 <dlmalloc+0x9e>
c0001091:	89 f0                	mov    eax,esi
c0001093:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001099:	77 2e                	ja     c00010c9 <dlmalloc+0xa6>
c000109b:	c1 e8 03             	shr    eax,0x3
c000109e:	8d 14 c5 d4 78 02 c0 	lea    edx,[eax*8-0x3ffd872c]
c00010a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010ac:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010af:	39 c3                	cmp    ebx,eax
c00010b1:	74 2e                	je     c00010e1 <dlmalloc+0xbe>
c00010b3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010b6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010bb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010be:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010c1:	83 c0 08             	add    eax,0x8
c00010c4:	e9 e0 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c00010c9:	e8 8f fa ff ff       	call   c0000b5d <largebin_index>
c00010ce:	83 e7 02             	and    edi,0x2
c00010d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010d5:	74 0a                	je     c00010e1 <dlmalloc+0xbe>
c00010d7:	b8 a0 78 02 c0       	mov    eax,0xc00278a0
c00010dc:	e8 00 fb ff ff       	call   c0000be1 <malloc_consolidate>
c00010e1:	8d 46 10             	lea    eax,[esi+0x10]
c00010e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e8:	8b 1d e0 78 02 c0    	mov    ebx,DWORD PTR ds:0xc00278e0
c00010ee:	81 fb d4 78 02 c0    	cmp    ebx,0xc00278d4
c00010f4:	0f 84 13 01 00 00    	je     c000120d <dlmalloc+0x1ea>
c00010fa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010fd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001100:	83 e7 fc             	and    edi,0xfffffffc
c0001103:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001109:	77 4c                	ja     c0001157 <dlmalloc+0x134>
c000110b:	3d d4 78 02 c0       	cmp    eax,0xc00278d4
c0001110:	75 45                	jne    c0001157 <dlmalloc+0x134>
c0001112:	39 1d d0 78 02 c0    	cmp    DWORD PTR ds:0xc00278d0,ebx
c0001118:	75 3d                	jne    c0001157 <dlmalloc+0x134>
c000111a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000111e:	73 37                	jae    c0001157 <dlmalloc+0x134>
c0001120:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001123:	89 fa                	mov    edx,edi
c0001125:	a3 dc 78 02 c0       	mov    ds:0xc00278dc,eax
c000112a:	a3 e0 78 02 c0       	mov    ds:0xc00278e0,eax
c000112f:	a3 d0 78 02 c0       	mov    ds:0xc00278d0,eax
c0001134:	29 f2                	sub    edx,esi
c0001136:	c7 40 08 d4 78 02 c0 	mov    DWORD PTR [eax+0x8],0xc00278d4
c000113d:	c7 40 0c d4 78 02 c0 	mov    DWORD PTR [eax+0xc],0xc00278d4
c0001144:	83 ce 01             	or     esi,0x1
c0001147:	89 d1                	mov    ecx,edx
c0001149:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000114c:	83 c9 01             	or     ecx,0x1
c000114f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001152:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001155:	eb 15                	jmp    c000116c <dlmalloc+0x149>
c0001157:	a3 e0 78 02 c0       	mov    ds:0xc00278e0,eax
c000115c:	39 fe                	cmp    esi,edi
c000115e:	c7 40 08 d4 78 02 c0 	mov    DWORD PTR [eax+0x8],0xc00278d4
c0001165:	75 0d                	jne    c0001174 <dlmalloc+0x151>
c0001167:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000116c:	8d 43 08             	lea    eax,[ebx+0x8]
c000116f:	e9 35 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001174:	89 f8                	mov    eax,edi
c0001176:	81 ff ff 00 00 00    	cmp    edi,0xff
c000117c:	77 19                	ja     c0001197 <dlmalloc+0x174>
c000117e:	c1 e8 03             	shr    eax,0x3
c0001181:	8d 14 00             	lea    edx,[eax+eax*1]
c0001184:	83 c2 0d             	add    edx,0xd
c0001187:	8d 2c 95 98 78 02 c0 	lea    ebp,[edx*4-0x3ffd8768]
c000118e:	8b 14 95 a0 78 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8760]
c0001195:	eb 46                	jmp    c00011dd <dlmalloc+0x1ba>
c0001197:	e8 c1 f9 ff ff       	call   c0000b5d <largebin_index>
c000119c:	8d 14 00             	lea    edx,[eax+eax*1]
c000119f:	83 c2 0d             	add    edx,0xd
c00011a2:	8d 0c 95 a0 78 02 c0 	lea    ecx,[edx*4-0x3ffd8760]
c00011a9:	8b 14 95 a0 78 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8760]
c00011b0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011b3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011b7:	89 d5                	mov    ebp,edx
c00011b9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011bd:	74 1e                	je     c00011dd <dlmalloc+0x1ba>
c00011bf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011c2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011c5:	77 12                	ja     c00011d9 <dlmalloc+0x1b6>
c00011c7:	83 cf 01             	or     edi,0x1
c00011ca:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011cd:	76 05                	jbe    c00011d4 <dlmalloc+0x1b1>
c00011cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011d2:	eb f6                	jmp    c00011ca <dlmalloc+0x1a7>
c00011d4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011d7:	eb 04                	jmp    c00011dd <dlmalloc+0x1ba>
c00011d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011dd:	89 c7                	mov    edi,eax
c00011df:	88 c1                	mov    cl,al
c00011e1:	c1 ff 05             	sar    edi,0x5
c00011e4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e8:	bf 01 00 00 00       	mov    edi,0x1
c00011ed:	d3 e7                	shl    edi,cl
c00011ef:	89 f8                	mov    eax,edi
c00011f1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011f5:	09 04 bd d4 7b 02 c0 	or     DWORD PTR [edi*4-0x3ffd842c],eax
c00011fc:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011ff:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001202:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001205:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001208:	e9 db fe ff ff       	jmp    c00010e8 <dlmalloc+0xc5>
c000120d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001213:	76 78                	jbe    c000128d <dlmalloc+0x26a>
c0001215:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001219:	8d 04 c5 d4 78 02 c0 	lea    eax,[eax*8-0x3ffd872c]
c0001220:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001223:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001226:	39 ca                	cmp    edx,ecx
c0001228:	74 63                	je     c000128d <dlmalloc+0x26a>
c000122a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000122d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001230:	83 e3 fc             	and    ebx,0xfffffffc
c0001233:	39 de                	cmp    esi,ebx
c0001235:	77 52                	ja     c0001289 <dlmalloc+0x266>
c0001237:	89 df                	mov    edi,ebx
c0001239:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000123c:	29 f7                	sub    edi,esi
c000123e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001241:	01 d3                	add    ebx,edx
c0001243:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001246:	83 ff 0f             	cmp    edi,0xf
c0001249:	8d 42 08             	lea    eax,[edx+0x8]
c000124c:	77 09                	ja     c0001257 <dlmalloc+0x234>
c000124e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001252:	e9 52 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001257:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000125a:	83 ce 01             	or     esi,0x1
c000125d:	89 0d dc 78 02 c0    	mov    DWORD PTR ds:0xc00278dc,ecx
c0001263:	89 0d e0 78 02 c0    	mov    DWORD PTR ds:0xc00278e0,ecx
c0001269:	c7 41 08 d4 78 02 c0 	mov    DWORD PTR [ecx+0x8],0xc00278d4
c0001270:	c7 41 0c d4 78 02 c0 	mov    DWORD PTR [ecx+0xc],0xc00278d4
c0001277:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000127a:	89 fa                	mov    edx,edi
c000127c:	83 ca 01             	or     edx,0x1
c000127f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001282:	89 3b                	mov    DWORD PTR [ebx],edi
c0001284:	e9 20 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001289:	89 c2                	mov    edx,eax
c000128b:	eb 99                	jmp    c0001226 <dlmalloc+0x203>
c000128d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001291:	b8 01 00 00 00       	mov    eax,0x1
c0001296:	41                   	inc    ecx
c0001297:	89 cb                	mov    ebx,ecx
c0001299:	8d 14 cd cc 78 02 c0 	lea    edx,[ecx*8-0x3ffd8734]
c00012a0:	c1 eb 05             	shr    ebx,0x5
c00012a3:	d3 e0                	shl    eax,cl
c00012a5:	8b 3c 9d d4 7b 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd842c]
c00012ac:	39 f8                	cmp    eax,edi
c00012ae:	77 04                	ja     c00012b4 <dlmalloc+0x291>
c00012b0:	85 c0                	test   eax,eax
c00012b2:	75 26                	jne    c00012da <dlmalloc+0x2b7>
c00012b4:	43                   	inc    ebx
c00012b5:	83 fb 02             	cmp    ebx,0x2
c00012b8:	0f 87 a6 00 00 00    	ja     c0001364 <dlmalloc+0x341>
c00012be:	8b 3c 9d d4 7b 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd842c]
c00012c5:	85 ff                	test   edi,edi
c00012c7:	74 eb                	je     c00012b4 <dlmalloc+0x291>
c00012c9:	89 d8                	mov    eax,ebx
c00012cb:	c1 e0 06             	shl    eax,0x6
c00012ce:	8d 14 85 cc 78 02 c0 	lea    edx,[eax*4-0x3ffd8734]
c00012d5:	b8 01 00 00 00       	mov    eax,0x1
c00012da:	85 f8                	test   eax,edi
c00012dc:	75 07                	jne    c00012e5 <dlmalloc+0x2c2>
c00012de:	83 c2 08             	add    edx,0x8
c00012e1:	01 c0                	add    eax,eax
c00012e3:	eb f5                	jmp    c00012da <dlmalloc+0x2b7>
c00012e5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e8:	39 ca                	cmp    edx,ecx
c00012ea:	75 14                	jne    c0001300 <dlmalloc+0x2dd>
c00012ec:	89 c1                	mov    ecx,eax
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	f7 d1                	not    ecx
c00012f3:	01 c0                	add    eax,eax
c00012f5:	21 cf                	and    edi,ecx
c00012f7:	89 3c 9d d4 7b 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd842c],edi
c00012fe:	eb ac                	jmp    c00012ac <dlmalloc+0x289>
c0001300:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001303:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001306:	83 e0 fc             	and    eax,0xfffffffc
c0001309:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000130c:	89 c3                	mov    ebx,eax
c000130e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001311:	29 f3                	sub    ebx,esi
c0001313:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001316:	83 fb 0f             	cmp    ebx,0xf
c0001319:	8d 41 08             	lea    eax,[ecx+0x8]
c000131c:	77 09                	ja     c0001327 <dlmalloc+0x304>
c000131e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001322:	e9 82 00 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001327:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000132a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001330:	89 3d dc 78 02 c0    	mov    DWORD PTR ds:0xc00278dc,edi
c0001336:	89 3d e0 78 02 c0    	mov    DWORD PTR ds:0xc00278e0,edi
c000133c:	c7 47 08 d4 78 02 c0 	mov    DWORD PTR [edi+0x8],0xc00278d4
c0001343:	c7 47 0c d4 78 02 c0 	mov    DWORD PTR [edi+0xc],0xc00278d4
c000134a:	77 06                	ja     c0001352 <dlmalloc+0x32f>
c000134c:	89 3d d0 78 02 c0    	mov    DWORD PTR ds:0xc00278d0,edi
c0001352:	83 ce 01             	or     esi,0x1
c0001355:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001358:	89 d9                	mov    ecx,ebx
c000135a:	83 c9 01             	or     ecx,0x1
c000135d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001360:	89 1a                	mov    DWORD PTR [edx],ebx
c0001362:	eb 45                	jmp    c00013a9 <dlmalloc+0x386>
c0001364:	a1 cc 78 02 c0       	mov    eax,ds:0xc00278cc
c0001369:	8d 4e 10             	lea    ecx,[esi+0x10]
c000136c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000136f:	83 e2 fc             	and    edx,0xfffffffc
c0001372:	39 d1                	cmp    ecx,edx
c0001374:	77 1e                	ja     c0001394 <dlmalloc+0x371>
c0001376:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001379:	89 f3                	mov    ebx,esi
c000137b:	89 0d cc 78 02 c0    	mov    DWORD PTR ds:0xc00278cc,ecx
c0001381:	83 cb 01             	or     ebx,0x1
c0001384:	29 f2                	sub    edx,esi
c0001386:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001389:	83 ca 01             	or     edx,0x1
c000138c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000138f:	e9 2d fd ff ff       	jmp    c00010c1 <dlmalloc+0x9e>
c0001394:	83 c4 1c             	add    esp,0x1c
c0001397:	89 f0                	mov    eax,esi
c0001399:	5b                   	pop    ebx
c000139a:	ba a0 78 02 c0       	mov    edx,0xc00278a0
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 16 fa ff ff       	jmp    c0000dbd <sYSMALLOc>
c00013a7:	31 c0                	xor    eax,eax
c00013a9:	83 c4 1c             	add    esp,0x1c
c00013ac:	5b                   	pop    ebx
c00013ad:	5e                   	pop    esi
c00013ae:	5f                   	pop    edi
c00013af:	5d                   	pop    ebp
c00013b0:	c3                   	ret    

c00013b1 <iALLOc>:
c00013b1:	55                   	push   ebp
c00013b2:	89 c5                	mov    ebp,eax
c00013b4:	57                   	push   edi
c00013b5:	56                   	push   esi
c00013b6:	53                   	push   ebx
c00013b7:	83 ec 2c             	sub    esp,0x2c
c00013ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013be:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013c6:	83 3d a0 78 02 c0 00 	cmp    DWORD PTR ds:0xc00278a0,0x0
c00013cd:	75 12                	jne    c00013e1 <iALLOc+0x30>
c00013cf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013d3:	b8 a0 78 02 c0       	mov    eax,0xc00278a0
c00013d8:	e8 04 f8 ff ff       	call   c0000be1 <malloc_consolidate>
c00013dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013e6:	74 12                	je     c00013fa <iALLOc+0x49>
c00013e8:	85 ed                	test   ebp,ebp
c00013ea:	0f 84 64 01 00 00    	je     c0001554 <iALLOc+0x1a3>
c00013f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f8:	eb 33                	jmp    c000142d <iALLOc+0x7c>
c00013fa:	85 ed                	test   ebp,ebp
c00013fc:	75 14                	jne    c0001412 <iALLOc+0x61>
c00013fe:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001406:	83 c4 2c             	add    esp,0x2c
c0001409:	5b                   	pop    ebx
c000140a:	5e                   	pop    esi
c000140b:	5f                   	pop    edi
c000140c:	5d                   	pop    ebp
c000140d:	e9 11 fc ff ff       	jmp    c0001023 <dlmalloc>
c0001412:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001419:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001421:	83 f8 0f             	cmp    eax,0xf
c0001424:	76 07                	jbe    c000142d <iALLOc+0x7c>
c0001426:	83 e0 f8             	and    eax,0xfffffff8
c0001429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000142d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001432:	75 09                	jne    c000143d <iALLOc+0x8c>
c0001434:	89 d0                	mov    eax,edx
c0001436:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001439:	31 f6                	xor    esi,esi
c000143b:	eb 3b                	jmp    c0001478 <iALLOc+0xc7>
c000143d:	8b 02                	mov    eax,DWORD PTR [edx]
c000143f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001447:	83 c0 0b             	add    eax,0xb
c000144a:	83 f8 0f             	cmp    eax,0xf
c000144d:	76 07                	jbe    c0001456 <iALLOc+0xa5>
c000144f:	83 e0 f8             	and    eax,0xfffffff8
c0001452:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001456:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000145a:	0f af f5             	imul   esi,ebp
c000145d:	eb 25                	jmp    c0001484 <iALLOc+0xd3>
c000145f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001461:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001464:	bb 10 00 00 00       	mov    ebx,0x10
c0001469:	83 f9 0f             	cmp    ecx,0xf
c000146c:	76 05                	jbe    c0001473 <iALLOc+0xc2>
c000146e:	83 e1 f8             	and    ecx,0xfffffff8
c0001471:	89 cb                	mov    ebx,ecx
c0001473:	01 de                	add    esi,ebx
c0001475:	83 c0 04             	add    eax,0x4
c0001478:	39 c7                	cmp    edi,eax
c000147a:	75 e3                	jne    c000145f <iALLOc+0xae>
c000147c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001484:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001488:	8b 1d f4 7b 02 c0    	mov    ebx,DWORD PTR ds:0xc0027bf4
c000148e:	83 ec 0c             	sub    esp,0xc
c0001491:	c7 05 f4 7b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027bf4,0x0
c000149b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000149f:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014a3:	50                   	push   eax
c00014a4:	e8 7a fb ff ff       	call   c0001023 <dlmalloc>
c00014a9:	83 c4 10             	add    esp,0x10
c00014ac:	89 1d f4 7b 02 c0    	mov    DWORD PTR ds:0xc0027bf4,ebx
c00014b2:	85 c0                	test   eax,eax
c00014b4:	0f 84 92 00 00 00    	je     c000154c <iALLOc+0x19b>
c00014ba:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014bd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014c0:	83 e3 fc             	and    ebx,0xfffffffc
c00014c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014c7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014cc:	74 1e                	je     c00014ec <iALLOc+0x13b>
c00014ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014d2:	89 d9                	mov    ecx,ebx
c00014d4:	52                   	push   edx
c00014d5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d9:	83 e9 04             	sub    ecx,0x4
c00014dc:	51                   	push   ecx
c00014dd:	6a 00                	push   0x0
c00014df:	50                   	push   eax
c00014e0:	e8 9f f1 ff ff       	call   c0000684 <memset>
c00014e5:	83 c4 10             	add    esp,0x10
c00014e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014f1:	75 14                	jne    c0001507 <iALLOc+0x156>
c00014f3:	8d 04 37             	lea    eax,[edi+esi*1]
c00014f6:	29 f3                	sub    ebx,esi
c00014f8:	8d 48 08             	lea    ecx,[eax+0x8]
c00014fb:	83 cb 01             	or     ebx,0x1
c00014fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001502:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001505:	89 f3                	mov    ebx,esi
c0001507:	31 c0                	xor    eax,eax
c0001509:	4d                   	dec    ebp
c000150a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000150d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001511:	39 c5                	cmp    ebp,eax
c0001513:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001516:	74 2c                	je     c0001544 <iALLOc+0x193>
c0001518:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000151c:	85 c9                	test   ecx,ecx
c000151e:	75 15                	jne    c0001535 <iALLOc+0x184>
c0001520:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001523:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001526:	b9 10 00 00 00       	mov    ecx,0x10
c000152b:	83 fe 0f             	cmp    esi,0xf
c000152e:	76 05                	jbe    c0001535 <iALLOc+0x184>
c0001530:	83 e6 f8             	and    esi,0xfffffff8
c0001533:	89 f1                	mov    ecx,esi
c0001535:	89 ce                	mov    esi,ecx
c0001537:	29 cb                	sub    ebx,ecx
c0001539:	83 ce 01             	or     esi,0x1
c000153c:	40                   	inc    eax
c000153d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001540:	01 cf                	add    edi,ecx
c0001542:	eb c6                	jmp    c000150a <iALLOc+0x159>
c0001544:	83 cb 01             	or     ebx,0x1
c0001547:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000154a:	eb 08                	jmp    c0001554 <iALLOc+0x1a3>
c000154c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001558:	83 c4 2c             	add    esp,0x2c
c000155b:	5b                   	pop    ebx
c000155c:	5e                   	pop    esi
c000155d:	5f                   	pop    edi
c000155e:	5d                   	pop    ebp
c000155f:	c3                   	ret    

c0001560 <dlrealloc>:
c0001560:	55                   	push   ebp
c0001561:	57                   	push   edi
c0001562:	56                   	push   esi
c0001563:	53                   	push   ebx
c0001564:	83 ec 1c             	sub    esp,0x1c
c0001567:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000156b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000156f:	85 db                	test   ebx,ebx
c0001571:	75 10                	jne    c0001583 <dlrealloc+0x23>
c0001573:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001577:	83 c4 1c             	add    esp,0x1c
c000157a:	5b                   	pop    ebx
c000157b:	5e                   	pop    esi
c000157c:	5f                   	pop    edi
c000157d:	5d                   	pop    ebp
c000157e:	e9 a0 fa ff ff       	jmp    c0001023 <dlmalloc>
c0001583:	83 f8 df             	cmp    eax,0xffffffdf
c0001586:	76 07                	jbe    c000158f <dlrealloc+0x2f>
c0001588:	31 db                	xor    ebx,ebx
c000158a:	e9 6a 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c000158f:	83 c0 0b             	add    eax,0xb
c0001592:	bd 10 00 00 00       	mov    ebp,0x10
c0001597:	83 f8 0f             	cmp    eax,0xf
c000159a:	76 05                	jbe    c00015a1 <dlrealloc+0x41>
c000159c:	83 e0 f8             	and    eax,0xfffffff8
c000159f:	89 c5                	mov    ebp,eax
c00015a1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015a4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015a7:	89 c6                	mov    esi,eax
c00015a9:	83 e6 fc             	and    esi,0xfffffffc
c00015ac:	a8 02                	test   al,0x2
c00015ae:	75 d8                	jne    c0001588 <dlrealloc+0x28>
c00015b0:	39 f5                	cmp    ebp,esi
c00015b2:	0f 86 04 01 00 00    	jbe    c00016bc <dlrealloc+0x15c>
c00015b8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015bb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015be:	39 15 cc 78 02 c0    	cmp    DWORD PTR ds:0xc00278cc,edx
c00015c4:	75 33                	jne    c00015f9 <dlrealloc+0x99>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015cf:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015d2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015d6:	77 49                	ja     c0001621 <dlrealloc+0xc1>
c00015d8:	01 ef                	add    edi,ebp
c00015da:	83 e0 01             	and    eax,0x1
c00015dd:	09 e8                	or     eax,ebp
c00015df:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015e2:	89 3d cc 78 02 c0    	mov    DWORD PTR ds:0xc00278cc,edi
c00015e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ec:	29 e8                	sub    eax,ebp
c00015ee:	83 c8 01             	or     eax,0x1
c00015f1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015f4:	e9 00 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c00015f9:	89 c8                	mov    eax,ecx
c00015fb:	83 e0 fe             	and    eax,0xfffffffe
c00015fe:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001603:	75 1c                	jne    c0001621 <dlrealloc+0xc1>
c0001605:	83 e1 fc             	and    ecx,0xfffffffc
c0001608:	01 f1                	add    ecx,esi
c000160a:	39 cd                	cmp    ebp,ecx
c000160c:	77 13                	ja     c0001621 <dlrealloc+0xc1>
c000160e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001611:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001614:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001617:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000161a:	89 ce                	mov    esi,ecx
c000161c:	e9 9b 00 00 00       	jmp    c00016bc <dlrealloc+0x15c>
c0001621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001625:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001628:	83 ec 0c             	sub    esp,0xc
c000162b:	50                   	push   eax
c000162c:	e8 f2 f9 ff ff       	call   c0001023 <dlmalloc>
c0001631:	83 c4 10             	add    esp,0x10
c0001634:	85 c0                	test   eax,eax
c0001636:	0f 84 4c ff ff ff    	je     c0001588 <dlrealloc+0x28>
c000163c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000163f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001643:	39 ca                	cmp    edx,ecx
c0001645:	75 0a                	jne    c0001651 <dlrealloc+0xf1>
c0001647:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000164a:	83 e0 fc             	and    eax,0xfffffffc
c000164d:	01 c6                	add    esi,eax
c000164f:	eb 6b                	jmp    c00016bc <dlrealloc+0x15c>
c0001651:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001654:	83 f9 27             	cmp    ecx,0x27
c0001657:	76 08                	jbe    c0001661 <dlrealloc+0x101>
c0001659:	89 de                	mov    esi,ebx
c000165b:	89 c7                	mov    edi,eax
c000165d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000165f:	eb 43                	jmp    c00016a4 <dlrealloc+0x144>
c0001661:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001663:	83 f9 13             	cmp    ecx,0x13
c0001666:	89 10                	mov    DWORD PTR [eax],edx
c0001668:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000166b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000166e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001671:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001674:	76 2e                	jbe    c00016a4 <dlrealloc+0x144>
c0001676:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001679:	83 f9 1b             	cmp    ecx,0x1b
c000167c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000167f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001685:	76 1d                	jbe    c00016a4 <dlrealloc+0x144>
c0001687:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000168a:	83 f9 23             	cmp    ecx,0x23
c000168d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001690:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001693:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001696:	76 0c                	jbe    c00016a4 <dlrealloc+0x144>
c0001698:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000169b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000169e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016a1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a8:	83 ec 0c             	sub    esp,0xc
c00016ab:	53                   	push   ebx
c00016ac:	e8 17 f6 ff ff       	call   c0000cc8 <dlfree>
c00016b1:	83 c4 10             	add    esp,0x10
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	89 c3                	mov    ebx,eax
c00016ba:	eb 3d                	jmp    c00016f9 <dlrealloc+0x199>
c00016bc:	89 f2                	mov    edx,esi
c00016be:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016c1:	29 ea                	sub    edx,ebp
c00016c3:	83 e1 01             	and    ecx,0x1
c00016c6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c9:	83 fa 0f             	cmp    edx,0xf
c00016cc:	77 0b                	ja     c00016d9 <dlrealloc+0x179>
c00016ce:	09 ce                	or     esi,ecx
c00016d0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016d7:	eb 20                	jmp    c00016f9 <dlrealloc+0x199>
c00016d9:	01 ef                	add    edi,ebp
c00016db:	83 ec 0c             	sub    esp,0xc
c00016de:	09 cd                	or     ebp,ecx
c00016e0:	83 ca 01             	or     edx,0x1
c00016e3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016e6:	83 c7 08             	add    edi,0x8
c00016e9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ec:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016f0:	57                   	push   edi
c00016f1:	e8 d2 f5 ff ff       	call   c0000cc8 <dlfree>
c00016f6:	83 c4 10             	add    esp,0x10
c00016f9:	83 c4 1c             	add    esp,0x1c
c00016fc:	89 d8                	mov    eax,ebx
c00016fe:	5b                   	pop    ebx
c00016ff:	5e                   	pop    esi
c0001700:	5f                   	pop    edi
c0001701:	5d                   	pop    ebp
c0001702:	c3                   	ret    

c0001703 <dlmemalign>:
c0001703:	55                   	push   ebp
c0001704:	57                   	push   edi
c0001705:	56                   	push   esi
c0001706:	53                   	push   ebx
c0001707:	83 ec 0c             	sub    esp,0xc
c000170a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000170e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001712:	83 fa 08             	cmp    edx,0x8
c0001715:	77 10                	ja     c0001727 <dlmemalign+0x24>
c0001717:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000171b:	83 c4 0c             	add    esp,0xc
c000171e:	5b                   	pop    ebx
c000171f:	5e                   	pop    esi
c0001720:	5f                   	pop    edi
c0001721:	5d                   	pop    ebp
c0001722:	e9 fc f8 ff ff       	jmp    c0001023 <dlmalloc>
c0001727:	bf 10 00 00 00       	mov    edi,0x10
c000172c:	83 fa 0f             	cmp    edx,0xf
c000172f:	76 13                	jbe    c0001744 <dlmemalign+0x41>
c0001731:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001734:	85 d1                	test   ecx,edx
c0001736:	75 04                	jne    c000173c <dlmemalign+0x39>
c0001738:	89 d7                	mov    edi,edx
c000173a:	eb 08                	jmp    c0001744 <dlmemalign+0x41>
c000173c:	39 d7                	cmp    edi,edx
c000173e:	73 04                	jae    c0001744 <dlmemalign+0x41>
c0001740:	01 ff                	add    edi,edi
c0001742:	eb f8                	jmp    c000173c <dlmemalign+0x39>
c0001744:	83 f8 df             	cmp    eax,0xffffffdf
c0001747:	76 07                	jbe    c0001750 <dlmemalign+0x4d>
c0001749:	31 c0                	xor    eax,eax
c000174b:	e9 ce 00 00 00       	jmp    c000181e <dlmemalign+0x11b>
c0001750:	83 c0 0b             	add    eax,0xb
c0001753:	bd 10 00 00 00       	mov    ebp,0x10
c0001758:	83 f8 0f             	cmp    eax,0xf
c000175b:	76 05                	jbe    c0001762 <dlmemalign+0x5f>
c000175d:	83 e0 f8             	and    eax,0xfffffff8
c0001760:	89 c5                	mov    ebp,eax
c0001762:	83 ec 0c             	sub    esp,0xc
c0001765:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001769:	50                   	push   eax
c000176a:	e8 b4 f8 ff ff       	call   c0001023 <dlmalloc>
c000176f:	83 c4 10             	add    esp,0x10
c0001772:	89 c1                	mov    ecx,eax
c0001774:	85 c0                	test   eax,eax
c0001776:	74 d1                	je     c0001749 <dlmemalign+0x46>
c0001778:	31 d2                	xor    edx,edx
c000177a:	8d 70 f8             	lea    esi,[eax-0x8]
c000177d:	f7 f7                	div    edi
c000177f:	85 d2                	test   edx,edx
c0001781:	74 62                	je     c00017e5 <dlmemalign+0xe2>
c0001783:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001787:	89 f8                	mov    eax,edi
c0001789:	f7 d8                	neg    eax
c000178b:	21 c3                	and    ebx,eax
c000178d:	83 eb 08             	sub    ebx,0x8
c0001790:	89 d8                	mov    eax,ebx
c0001792:	29 f0                	sub    eax,esi
c0001794:	83 f8 0f             	cmp    eax,0xf
c0001797:	77 02                	ja     c000179b <dlmemalign+0x98>
c0001799:	01 fb                	add    ebx,edi
c000179b:	89 d8                	mov    eax,ebx
c000179d:	29 f0                	sub    eax,esi
c000179f:	89 c6                	mov    esi,eax
c00017a1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a4:	89 c2                	mov    edx,eax
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	29 f2                	sub    edx,esi
c00017ab:	a8 02                	test   al,0x2
c00017ad:	74 10                	je     c00017bf <dlmemalign+0xbc>
c00017af:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017b2:	83 ca 02             	or     edx,0x2
c00017b5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ba:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017bd:	eb 5f                	jmp    c000181e <dlmemalign+0x11b>
c00017bf:	83 ec 0c             	sub    esp,0xc
c00017c2:	89 d0                	mov    eax,edx
c00017c4:	83 c8 01             	or     eax,0x1
c00017c7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017ca:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017cf:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 f0                	or     eax,esi
c00017d7:	89 de                	mov    esi,ebx
c00017d9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017dc:	51                   	push   ecx
c00017dd:	e8 e6 f4 ff ff       	call   c0000cc8 <dlfree>
c00017e2:	83 c4 10             	add    esp,0x10
c00017e5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e8:	a8 02                	test   al,0x2
c00017ea:	75 2f                	jne    c000181b <dlmemalign+0x118>
c00017ec:	83 e0 fc             	and    eax,0xfffffffc
c00017ef:	8d 55 10             	lea    edx,[ebp+0x10]
c00017f2:	39 c2                	cmp    edx,eax
c00017f4:	73 25                	jae    c000181b <dlmemalign+0x118>
c00017f6:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f9:	83 ec 0c             	sub    esp,0xc
c00017fc:	29 e8                	sub    eax,ebp
c00017fe:	83 c2 08             	add    edx,0x8
c0001801:	83 c8 01             	or     eax,0x1
c0001804:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001807:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000180a:	83 e0 01             	and    eax,0x1
c000180d:	09 c5                	or     ebp,eax
c000180f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001812:	52                   	push   edx
c0001813:	e8 b0 f4 ff ff       	call   c0000cc8 <dlfree>
c0001818:	83 c4 10             	add    esp,0x10
c000181b:	8d 46 08             	lea    eax,[esi+0x8]
c000181e:	83 c4 0c             	add    esp,0xc
c0001821:	5b                   	pop    ebx
c0001822:	5e                   	pop    esi
c0001823:	5f                   	pop    edi
c0001824:	5d                   	pop    ebp
c0001825:	c3                   	ret    

c0001826 <dlcalloc>:
c0001826:	53                   	push   ebx
c0001827:	83 ec 14             	sub    esp,0x14
c000182a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000182e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001833:	50                   	push   eax
c0001834:	e8 ea f7 ff ff       	call   c0001023 <dlmalloc>
c0001839:	83 c4 10             	add    esp,0x10
c000183c:	89 c3                	mov    ebx,eax
c000183e:	85 c0                	test   eax,eax
c0001840:	74 77                	je     c00018b9 <dlcalloc+0x93>
c0001842:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001845:	89 d0                	mov    eax,edx
c0001847:	83 e0 fc             	and    eax,0xfffffffc
c000184a:	80 e2 02             	and    dl,0x2
c000184d:	75 5a                	jne    c00018a9 <dlcalloc+0x83>
c000184f:	83 e8 04             	sub    eax,0x4
c0001852:	83 f8 27             	cmp    eax,0x27
c0001855:	76 03                	jbe    c000185a <dlcalloc+0x34>
c0001857:	51                   	push   ecx
c0001858:	eb 53                	jmp    c00018ad <dlcalloc+0x87>
c000185a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001860:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001867:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000186e:	83 f8 13             	cmp    eax,0x13
c0001871:	76 46                	jbe    c00018b9 <dlcalloc+0x93>
c0001873:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000187a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001881:	83 f8 1b             	cmp    eax,0x1b
c0001884:	76 33                	jbe    c00018b9 <dlcalloc+0x93>
c0001886:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000188d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001894:	83 f8 23             	cmp    eax,0x23
c0001897:	76 20                	jbe    c00018b9 <dlcalloc+0x93>
c0001899:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018a0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018a7:	eb 10                	jmp    c00018b9 <dlcalloc+0x93>
c00018a9:	83 e8 08             	sub    eax,0x8
c00018ac:	52                   	push   edx
c00018ad:	50                   	push   eax
c00018ae:	6a 00                	push   0x0
c00018b0:	53                   	push   ebx
c00018b1:	e8 ce ed ff ff       	call   c0000684 <memset>
c00018b6:	83 c4 10             	add    esp,0x10
c00018b9:	89 d8                	mov    eax,ebx
c00018bb:	83 c4 08             	add    esp,0x8
c00018be:	5b                   	pop    ebx
c00018bf:	c3                   	ret    

c00018c0 <dlcfree>:
c00018c0:	e9 03 f4 ff ff       	jmp    c0000cc8 <dlfree>

c00018c5 <dlindependent_calloc>:
c00018c5:	83 ec 28             	sub    esp,0x28
c00018c8:	b9 03 00 00 00       	mov    ecx,0x3
c00018cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	e8 cb fa ff ff       	call   c00013b1 <iALLOc>
c00018e6:	83 c4 2c             	add    esp,0x2c
c00018e9:	c3                   	ret    

c00018ea <dlindependent_comalloc>:
c00018ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018f2:	31 c9                	xor    ecx,ecx
c00018f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018fc:	e9 b0 fa ff ff       	jmp    c00013b1 <iALLOc>

c0001901 <dlvalloc>:
c0001901:	83 ec 0c             	sub    esp,0xc
c0001904:	83 3d a0 78 02 c0 00 	cmp    DWORD PTR ds:0xc00278a0,0x0
c000190b:	75 0a                	jne    c0001917 <dlvalloc+0x16>
c000190d:	b8 a0 78 02 c0       	mov    eax,0xc00278a0
c0001912:	e8 ca f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001917:	50                   	push   eax
c0001918:	50                   	push   eax
c0001919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000191d:	ff 35 fc 7b 02 c0    	push   DWORD PTR ds:0xc0027bfc
c0001923:	e8 db fd ff ff       	call   c0001703 <dlmemalign>
c0001928:	83 c4 1c             	add    esp,0x1c
c000192b:	c3                   	ret    

c000192c <dlpvalloc>:
c000192c:	83 ec 0c             	sub    esp,0xc
c000192f:	83 3d a0 78 02 c0 00 	cmp    DWORD PTR ds:0xc00278a0,0x0
c0001936:	75 0a                	jne    c0001942 <dlpvalloc+0x16>
c0001938:	b8 a0 78 02 c0       	mov    eax,0xc00278a0
c000193d:	e8 9f f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001942:	a1 fc 7b 02 c0       	mov    eax,ds:0xc0027bfc
c0001947:	89 c1                	mov    ecx,eax
c0001949:	52                   	push   edx
c000194a:	f7 d9                	neg    ecx
c000194c:	52                   	push   edx
c000194d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001951:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001955:	21 ca                	and    edx,ecx
c0001957:	52                   	push   edx
c0001958:	50                   	push   eax
c0001959:	e8 a5 fd ff ff       	call   c0001703 <dlmemalign>
c000195e:	83 c4 1c             	add    esp,0x1c
c0001961:	c3                   	ret    

c0001962 <dlmalloc_trim>:
c0001962:	b8 a0 78 02 c0       	mov    eax,0xc00278a0
c0001967:	e8 75 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c000196c:	31 c0                	xor    eax,eax
c000196e:	c3                   	ret    

c000196f <dlmalloc_usable_size>:
c000196f:	53                   	push   ebx
c0001970:	31 c0                	xor    eax,eax
c0001972:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001976:	85 c9                	test   ecx,ecx
c0001978:	74 24                	je     c000199e <dlmalloc_usable_size+0x2f>
c000197a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000197d:	f6 c2 02             	test   dl,0x2
c0001980:	74 08                	je     c000198a <dlmalloc_usable_size+0x1b>
c0001982:	83 e2 fc             	and    edx,0xfffffffc
c0001985:	8d 42 f8             	lea    eax,[edx-0x8]
c0001988:	eb 14                	jmp    c000199e <dlmalloc_usable_size+0x2f>
c000198a:	89 d3                	mov    ebx,edx
c000198c:	31 c0                	xor    eax,eax
c000198e:	83 e3 fe             	and    ebx,0xfffffffe
c0001991:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001996:	74 06                	je     c000199e <dlmalloc_usable_size+0x2f>
c0001998:	83 e2 fc             	and    edx,0xfffffffc
c000199b:	8d 42 fc             	lea    eax,[edx-0x4]
c000199e:	5b                   	pop    ebx
c000199f:	c3                   	ret    

c00019a0 <dlmallinfo>:
c00019a0:	55                   	push   ebp
c00019a1:	57                   	push   edi
c00019a2:	56                   	push   esi
c00019a3:	53                   	push   ebx
c00019a4:	83 ec 08             	sub    esp,0x8
c00019a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019ab:	83 3d cc 78 02 c0 00 	cmp    DWORD PTR ds:0xc00278cc,0x0
c00019b2:	75 0a                	jne    c00019be <dlmallinfo+0x1e>
c00019b4:	b8 a0 78 02 c0       	mov    eax,0xc00278a0
c00019b9:	e8 23 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c00019be:	a1 cc 78 02 c0       	mov    eax,ds:0xc00278cc
c00019c3:	31 ed                	xor    ebp,ebp
c00019c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c8:	31 c9                	xor    ecx,ecx
c00019ca:	83 e0 fc             	and    eax,0xfffffffc
c00019cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d1:	31 c0                	xor    eax,eax
c00019d3:	8b 14 85 a4 78 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd875c]
c00019da:	85 d2                	test   edx,edx
c00019dc:	74 0e                	je     c00019ec <dlmallinfo+0x4c>
c00019de:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019e1:	45                   	inc    ebp
c00019e2:	83 e6 fc             	and    esi,0xfffffffc
c00019e5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e8:	01 f1                	add    ecx,esi
c00019ea:	eb ee                	jmp    c00019da <dlmallinfo+0x3a>
c00019ec:	40                   	inc    eax
c00019ed:	83 f8 0a             	cmp    eax,0xa
c00019f0:	75 e1                	jne    c00019d3 <dlmallinfo+0x33>
c00019f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019fd:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a00:	b8 d4 78 02 c0       	mov    eax,0xc00278d4
c0001a05:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a08:	39 f0                	cmp    eax,esi
c0001a0a:	74 10                	je     c0001a1c <dlmallinfo+0x7c>
c0001a0c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a0f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a12:	83 e7 fc             	and    edi,0xfffffffc
c0001a15:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a18:	01 fa                	add    edx,edi
c0001a1a:	eb ec                	jmp    c0001a08 <dlmallinfo+0x68>
c0001a1c:	83 c0 08             	add    eax,0x8
c0001a1f:	3d cc 7b 02 c0       	cmp    eax,0xc0027bcc
c0001a24:	75 df                	jne    c0001a05 <dlmallinfo+0x65>
c0001a26:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a29:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a2c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a2f:	a1 08 7c 02 c0       	mov    eax,ds:0xc0027c08
c0001a34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a37:	89 03                	mov    DWORD PTR [ebx],eax
c0001a39:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a3c:	8b 35 f0 7b 02 c0    	mov    esi,DWORD PTR ds:0xc0027bf0
c0001a42:	29 d0                	sub    eax,edx
c0001a44:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a4a:	8b 35 04 7c 02 c0    	mov    esi,DWORD PTR ds:0xc0027c04
c0001a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a54:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a57:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a5a:	8b 35 14 7c 02 c0    	mov    esi,DWORD PTR ds:0xc0027c14
c0001a60:	89 d8                	mov    eax,ebx
c0001a62:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a65:	83 c4 08             	add    esp,0x8
c0001a68:	5b                   	pop    ebx
c0001a69:	5e                   	pop    esi
c0001a6a:	5f                   	pop    edi
c0001a6b:	5d                   	pop    ebp
c0001a6c:	c2 04 00             	ret    0x4

c0001a6f <dlmalloc_stats>:
c0001a6f:	83 ec 30             	sub    esp,0x30
c0001a72:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a76:	50                   	push   eax
c0001a77:	e8 24 ff ff ff       	call   c00019a0 <dlmallinfo>
c0001a7c:	83 c4 30             	add    esp,0x30
c0001a7f:	c3                   	ret    

c0001a80 <dlmallopt>:
c0001a80:	56                   	push   esi
c0001a81:	b8 a0 78 02 c0       	mov    eax,0xc00278a0
c0001a86:	53                   	push   ebx
c0001a87:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a8f:	e8 4d f1 ff ff       	call   c0000be1 <malloc_consolidate>
c0001a94:	8d 46 04             	lea    eax,[esi+0x4]
c0001a97:	83 f8 05             	cmp    eax,0x5
c0001a9a:	77 67                	ja     c0001b03 <dlmallopt+0x83>
c0001a9c:	ff 24 85 44 35 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdcabc]
c0001aa3:	83 fb 50             	cmp    ebx,0x50
c0001aa6:	77 5b                	ja     c0001b03 <dlmallopt+0x83>
c0001aa8:	ba 08 00 00 00       	mov    edx,0x8
c0001aad:	85 db                	test   ebx,ebx
c0001aaf:	74 12                	je     c0001ac3 <dlmallopt+0x43>
c0001ab1:	83 c3 0b             	add    ebx,0xb
c0001ab4:	ba 10 00 00 00       	mov    edx,0x10
c0001ab9:	83 fb 0f             	cmp    ebx,0xf
c0001abc:	76 05                	jbe    c0001ac3 <dlmallopt+0x43>
c0001abe:	89 da                	mov    edx,ebx
c0001ac0:	83 e2 f8             	and    edx,0xfffffff8
c0001ac3:	a1 a0 78 02 c0       	mov    eax,ds:0xc00278a0
c0001ac8:	83 e0 03             	and    eax,0x3
c0001acb:	09 d0                	or     eax,edx
c0001acd:	a3 a0 78 02 c0       	mov    ds:0xc00278a0,eax
c0001ad2:	eb 31                	jmp    c0001b05 <dlmallopt+0x85>
c0001ad4:	89 1d e4 7b 02 c0    	mov    DWORD PTR ds:0xc0027be4,ebx
c0001ada:	eb 06                	jmp    c0001ae2 <dlmallopt+0x62>
c0001adc:	89 1d e8 7b 02 c0    	mov    DWORD PTR ds:0xc0027be8,ebx
c0001ae2:	be 01 00 00 00       	mov    esi,0x1
c0001ae7:	eb 1c                	jmp    c0001b05 <dlmallopt+0x85>
c0001ae9:	89 1d ec 7b 02 c0    	mov    DWORD PTR ds:0xc0027bec,ebx
c0001aef:	eb f1                	jmp    c0001ae2 <dlmallopt+0x62>
c0001af1:	31 f6                	xor    esi,esi
c0001af3:	85 db                	test   ebx,ebx
c0001af5:	75 0e                	jne    c0001b05 <dlmallopt+0x85>
c0001af7:	c7 05 f4 7b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027bf4,0x0
c0001b01:	eb df                	jmp    c0001ae2 <dlmallopt+0x62>
c0001b03:	31 f6                	xor    esi,esi
c0001b05:	89 f0                	mov    eax,esi
c0001b07:	5b                   	pop    ebx
c0001b08:	5e                   	pop    esi
c0001b09:	c3                   	ret    

c0001b0a <disk_status>:
c0001b0a:	31 c0                	xor    eax,eax
c0001b0c:	c3                   	ret    

c0001b0d <disk_initialize>:
c0001b0d:	31 c0                	xor    eax,eax
c0001b0f:	c3                   	ret    

c0001b10 <disk_read>:
c0001b10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b15:	0f b6 04 85 60 93 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6ca0]
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	e9 a6 9b 01 00       	jmp    c001b6cc <fatWrapperReadDisk>

c0001b26 <disk_write>:
c0001b26:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b2b:	0f b6 04 85 60 93 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6ca0]
c0001b33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b37:	e9 d8 9b 01 00       	jmp    c001b714 <fatWrapperWriteDisk>

c0001b3c <disk_ioctl>:
c0001b3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b45:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b4a:	0f b6 04 85 60 93 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6ca0]
c0001b52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b56:	e9 01 9c 01 00       	jmp    c001b75c <fatWrapperIoctl>

c0001b5b <ld_word>:
c0001b5b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b5f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b62:	c1 e2 08             	shl    edx,0x8
c0001b65:	09 d0                	or     eax,edx
c0001b67:	c3                   	ret    

c0001b68 <ld_dword>:
c0001b68:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b6c:	89 d1                	mov    ecx,edx
c0001b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b72:	c1 e1 08             	shl    ecx,0x8
c0001b75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b78:	09 ca                	or     edx,ecx
c0001b7a:	c1 e2 08             	shl    edx,0x8
c0001b7d:	09 d0                	or     eax,edx
c0001b7f:	c3                   	ret    

c0001b80 <ld_qword>:
c0001b80:	57                   	push   edi
c0001b81:	56                   	push   esi
c0001b82:	53                   	push   ebx
c0001b83:	31 db                	xor    ebx,ebx
c0001b85:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b88:	89 df                	mov    edi,ebx
c0001b8a:	89 ce                	mov    esi,ecx
c0001b8c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b90:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b94:	c1 e6 08             	shl    esi,0x8
c0001b97:	09 f2                	or     edx,esi
c0001b99:	89 d6                	mov    esi,edx
c0001b9b:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b9f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba3:	c1 e6 08             	shl    esi,0x8
c0001ba6:	09 f2                	or     edx,esi
c0001ba8:	89 d6                	mov    esi,edx
c0001baa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bae:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bb5:	c1 e6 08             	shl    esi,0x8
c0001bb8:	89 fb                	mov    ebx,edi
c0001bba:	09 f2                	or     edx,esi
c0001bbc:	89 d1                	mov    ecx,edx
c0001bbe:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bc2:	c1 e1 08             	shl    ecx,0x8
c0001bc5:	89 da                	mov    edx,ebx
c0001bc7:	09 c8                	or     eax,ecx
c0001bc9:	5b                   	pop    ebx
c0001bca:	5e                   	pop    esi
c0001bcb:	5f                   	pop    edi
c0001bcc:	c3                   	ret    

c0001bcd <st_word>:
c0001bcd:	66 89 10             	mov    WORD PTR [eax],dx
c0001bd0:	c3                   	ret    

c0001bd1 <st_dword>:
c0001bd1:	89 10                	mov    DWORD PTR [eax],edx
c0001bd3:	c3                   	ret    

c0001bd4 <st_qword>:
c0001bd4:	89 10                	mov    DWORD PTR [eax],edx
c0001bd6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd9:	c3                   	ret    

c0001bda <mem_cpy>:
c0001bda:	85 c9                	test   ecx,ecx
c0001bdc:	74 10                	je     c0001bee <mem_cpy+0x14>
c0001bde:	57                   	push   edi
c0001bdf:	01 c1                	add    ecx,eax
c0001be1:	56                   	push   esi
c0001be2:	89 c7                	mov    edi,eax
c0001be4:	89 d6                	mov    esi,edx
c0001be6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001be7:	39 f9                	cmp    ecx,edi
c0001be9:	75 fb                	jne    c0001be6 <mem_cpy+0xc>
c0001beb:	5e                   	pop    esi
c0001bec:	5f                   	pop    edi
c0001bed:	c3                   	ret    
c0001bee:	c3                   	ret    

c0001bef <mem_set>:
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	40                   	inc    eax
c0001bf2:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bf5:	39 c8                	cmp    eax,ecx
c0001bf7:	75 f8                	jne    c0001bf1 <mem_set+0x2>
c0001bf9:	c3                   	ret    

c0001bfa <mem_cmp>:
c0001bfa:	57                   	push   edi
c0001bfb:	56                   	push   esi
c0001bfc:	89 c6                	mov    esi,eax
c0001bfe:	53                   	push   ebx
c0001bff:	46                   	inc    esi
c0001c00:	42                   	inc    edx
c0001c01:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c05:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c09:	29 fb                	sub    ebx,edi
c0001c0b:	89 cf                	mov    edi,ecx
c0001c0d:	29 f7                	sub    edi,esi
c0001c0f:	01 c7                	add    edi,eax
c0001c11:	74 04                	je     c0001c17 <mem_cmp+0x1d>
c0001c13:	85 db                	test   ebx,ebx
c0001c15:	74 e8                	je     c0001bff <mem_cmp+0x5>
c0001c17:	89 d8                	mov    eax,ebx
c0001c19:	5b                   	pop    ebx
c0001c1a:	5e                   	pop    esi
c0001c1b:	5f                   	pop    edi
c0001c1c:	c3                   	ret    

c0001c1d <chk_chr>:
c0001c1d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c20:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c23:	74 07                	je     c0001c2c <chk_chr+0xf>
c0001c25:	39 d1                	cmp    ecx,edx
c0001c27:	74 03                	je     c0001c2c <chk_chr+0xf>
c0001c29:	40                   	inc    eax
c0001c2a:	eb f1                	jmp    c0001c1d <chk_chr>
c0001c2c:	89 c8                	mov    eax,ecx
c0001c2e:	c3                   	ret    

c0001c2f <dbc_1st>:
c0001c2f:	31 c0                	xor    eax,eax
c0001c31:	c3                   	ret    

c0001c32 <dbc_2nd>:
c0001c32:	31 c0                	xor    eax,eax
c0001c34:	c3                   	ret    

c0001c35 <tchar2uni>:
c0001c35:	57                   	push   edi
c0001c36:	89 c7                	mov    edi,eax
c0001c38:	56                   	push   esi
c0001c39:	53                   	push   ebx
c0001c3a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c3c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c3e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c41:	84 c9                	test   cl,cl
c0001c43:	78 0a                	js     c0001c4f <tchar2uni+0x1a>
c0001c45:	0f b6 d1             	movzx  edx,cl
c0001c48:	89 f3                	mov    ebx,esi
c0001c4a:	e9 9f 00 00 00       	jmp    c0001cee <tchar2uni+0xb9>
c0001c4f:	88 ca                	mov    dl,cl
c0001c51:	83 e2 e0             	and    edx,0xffffffe0
c0001c54:	80 fa c0             	cmp    dl,0xc0
c0001c57:	75 0c                	jne    c0001c65 <tchar2uni+0x30>
c0001c59:	89 ca                	mov    edx,ecx
c0001c5b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c60:	83 e2 1f             	and    edx,0x1f
c0001c63:	eb 2e                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c65:	88 ca                	mov    dl,cl
c0001c67:	83 e2 f0             	and    edx,0xfffffff0
c0001c6a:	80 fa e0             	cmp    dl,0xe0
c0001c6d:	75 0c                	jne    c0001c7b <tchar2uni+0x46>
c0001c6f:	89 ca                	mov    edx,ecx
c0001c71:	b9 02 00 00 00       	mov    ecx,0x2
c0001c76:	83 e2 0f             	and    edx,0xf
c0001c79:	eb 18                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c7b:	88 ca                	mov    dl,cl
c0001c7d:	83 e2 f8             	and    edx,0xfffffff8
c0001c80:	88 d0                	mov    al,dl
c0001c82:	83 ca ff             	or     edx,0xffffffff
c0001c85:	3c f0                	cmp    al,0xf0
c0001c87:	75 6c                	jne    c0001cf5 <tchar2uni+0xc0>
c0001c89:	89 ca                	mov    edx,ecx
c0001c8b:	b9 03 00 00 00       	mov    ecx,0x3
c0001c90:	83 e2 07             	and    edx,0x7
c0001c93:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c97:	46                   	inc    esi
c0001c98:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c9b:	88 c8                	mov    al,cl
c0001c9d:	83 e0 c0             	and    eax,0xffffffc0
c0001ca0:	3c 80                	cmp    al,0x80
c0001ca2:	75 4e                	jne    c0001cf2 <tchar2uni+0xbd>
c0001ca4:	c1 e2 06             	shl    edx,0x6
c0001ca7:	83 e1 3f             	and    ecx,0x3f
c0001caa:	09 ca                	or     edx,ecx
c0001cac:	39 de                	cmp    esi,ebx
c0001cae:	75 e7                	jne    c0001c97 <tchar2uni+0x62>
c0001cb0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cb3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb9:	77 37                	ja     c0001cf2 <tchar2uni+0xbd>
c0001cbb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cc1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cc7:	76 29                	jbe    c0001cf2 <tchar2uni+0xbd>
c0001cc9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ccf:	76 1d                	jbe    c0001cee <tchar2uni+0xb9>
c0001cd1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001cd7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cdd:	c1 e1 06             	shl    ecx,0x6
c0001ce0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001ce6:	09 ca                	or     edx,ecx
c0001ce8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cee:	89 1f                	mov    DWORD PTR [edi],ebx
c0001cf0:	eb 03                	jmp    c0001cf5 <tchar2uni+0xc0>
c0001cf2:	83 ca ff             	or     edx,0xffffffff
c0001cf5:	5b                   	pop    ebx
c0001cf6:	89 d0                	mov    eax,edx
c0001cf8:	5e                   	pop    esi
c0001cf9:	5f                   	pop    edi
c0001cfa:	c3                   	ret    

c0001cfb <put_utf>:
c0001cfb:	53                   	push   ebx
c0001cfc:	83 f8 7f             	cmp    eax,0x7f
c0001cff:	89 c3                	mov    ebx,eax
c0001d01:	b0 00                	mov    al,0x0
c0001d03:	77 11                	ja     c0001d16 <put_utf+0x1b>
c0001d05:	85 c9                	test   ecx,ecx
c0001d07:	0f 84 e5 00 00 00    	je     c0001df2 <put_utf+0xf7>
c0001d0d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d0f:	b0 01                	mov    al,0x1
c0001d11:	e9 dc 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d16:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d1c:	77 23                	ja     c0001d41 <put_utf+0x46>
c0001d1e:	83 f9 01             	cmp    ecx,0x1
c0001d21:	0f 86 cb 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d27:	89 d8                	mov    eax,ebx
c0001d29:	83 e3 3f             	and    ebx,0x3f
c0001d2c:	c1 e8 06             	shr    eax,0x6
c0001d2f:	83 cb 80             	or     ebx,0xffffff80
c0001d32:	83 c8 c0             	or     eax,0xffffffc0
c0001d35:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d38:	88 02                	mov    BYTE PTR [edx],al
c0001d3a:	b0 02                	mov    al,0x2
c0001d3c:	e9 b1 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d41:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d47:	77 40                	ja     c0001d89 <put_utf+0x8e>
c0001d49:	83 f9 02             	cmp    ecx,0x2
c0001d4c:	0f 86 a0 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d52:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d58:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d5e:	0f 86 8e 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d64:	89 d8                	mov    eax,ebx
c0001d66:	c1 e8 0c             	shr    eax,0xc
c0001d69:	83 c8 e0             	or     eax,0xffffffe0
c0001d6c:	88 02                	mov    BYTE PTR [edx],al
c0001d6e:	89 d8                	mov    eax,ebx
c0001d70:	83 e3 3f             	and    ebx,0x3f
c0001d73:	c1 e8 06             	shr    eax,0x6
c0001d76:	83 cb 80             	or     ebx,0xffffff80
c0001d79:	83 e0 3f             	and    eax,0x3f
c0001d7c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d7f:	83 c8 80             	or     eax,0xffffff80
c0001d82:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d85:	b0 03                	mov    al,0x3
c0001d87:	eb 69                	jmp    c0001df2 <put_utf+0xf7>
c0001d89:	83 f9 03             	cmp    ecx,0x3
c0001d8c:	76 64                	jbe    c0001df2 <put_utf+0xf7>
c0001d8e:	89 d9                	mov    ecx,ebx
c0001d90:	0f b7 c3             	movzx  eax,bx
c0001d93:	66 31 c9             	xor    cx,cx
c0001d96:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d9c:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001da2:	c1 e9 06             	shr    ecx,0x6
c0001da5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dab:	77 43                	ja     c0001df0 <put_utf+0xf5>
c0001dad:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001db3:	77 3b                	ja     c0001df0 <put_utf+0xf5>
c0001db5:	09 cb                	or     ebx,ecx
c0001db7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dbd:	89 d8                	mov    eax,ebx
c0001dbf:	c1 e8 12             	shr    eax,0x12
c0001dc2:	83 c8 f0             	or     eax,0xfffffff0
c0001dc5:	88 02                	mov    BYTE PTR [edx],al
c0001dc7:	89 d8                	mov    eax,ebx
c0001dc9:	c1 e8 0c             	shr    eax,0xc
c0001dcc:	83 e0 3f             	and    eax,0x3f
c0001dcf:	83 c8 80             	or     eax,0xffffff80
c0001dd2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dd5:	89 d8                	mov    eax,ebx
c0001dd7:	83 e3 3f             	and    ebx,0x3f
c0001dda:	c1 e8 06             	shr    eax,0x6
c0001ddd:	83 cb 80             	or     ebx,0xffffff80
c0001de0:	83 e0 3f             	and    eax,0x3f
c0001de3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001de6:	83 c8 80             	or     eax,0xffffff80
c0001de9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dec:	b0 04                	mov    al,0x4
c0001dee:	eb 02                	jmp    c0001df2 <put_utf+0xf7>
c0001df0:	31 c0                	xor    eax,eax
c0001df2:	5b                   	pop    ebx
c0001df3:	c3                   	ret    

c0001df4 <clst2sect>:
c0001df4:	89 c1                	mov    ecx,eax
c0001df6:	83 ea 02             	sub    edx,0x2
c0001df9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001dfc:	83 e8 02             	sub    eax,0x2
c0001dff:	39 d0                	cmp    eax,edx
c0001e01:	76 0d                	jbe    c0001e10 <clst2sect+0x1c>
c0001e03:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e07:	f7 e2                	mul    edx
c0001e09:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e0c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e0f:	c3                   	ret    
c0001e10:	31 c0                	xor    eax,eax
c0001e12:	31 d2                	xor    edx,edx
c0001e14:	c3                   	ret    

c0001e15 <clmt_clust>:
c0001e15:	57                   	push   edi
c0001e16:	89 cf                	mov    edi,ecx
c0001e18:	56                   	push   esi
c0001e19:	89 d6                	mov    esi,edx
c0001e1b:	53                   	push   ebx
c0001e1c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e20:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e23:	89 f2                	mov    edx,esi
c0001e25:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e27:	c1 ef 09             	shr    edi,0x9
c0001e2a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e2e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e31:	89 f9                	mov    ecx,edi
c0001e33:	31 ff                	xor    edi,edi
c0001e35:	57                   	push   edi
c0001e36:	56                   	push   esi
c0001e37:	51                   	push   ecx
c0001e38:	52                   	push   edx
c0001e39:	e8 46 07 02 00       	call   c0022584 <__udivdi3>
c0001e3e:	83 c4 10             	add    esp,0x10
c0001e41:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e43:	85 d2                	test   edx,edx
c0001e45:	74 10                	je     c0001e57 <clmt_clust+0x42>
c0001e47:	39 d0                	cmp    eax,edx
c0001e49:	72 07                	jb     c0001e52 <clmt_clust+0x3d>
c0001e4b:	29 d0                	sub    eax,edx
c0001e4d:	83 c3 08             	add    ebx,0x8
c0001e50:	eb ef                	jmp    c0001e41 <clmt_clust+0x2c>
c0001e52:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e55:	89 c2                	mov    edx,eax
c0001e57:	5b                   	pop    ebx
c0001e58:	89 d0                	mov    eax,edx
c0001e5a:	5e                   	pop    esi
c0001e5b:	5f                   	pop    edi
c0001e5c:	c3                   	ret    

c0001e5d <pick_lfn>:
c0001e5d:	55                   	push   ebp
c0001e5e:	57                   	push   edi
c0001e5f:	56                   	push   esi
c0001e60:	89 d6                	mov    esi,edx
c0001e62:	53                   	push   ebx
c0001e63:	89 c3                	mov    ebx,eax
c0001e65:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e68:	e8 ee fc ff ff       	call   c0001b5b <ld_word>
c0001e6d:	66 85 c0             	test   ax,ax
c0001e70:	74 04                	je     c0001e76 <pick_lfn+0x19>
c0001e72:	31 c0                	xor    eax,eax
c0001e74:	eb 5c                	jmp    c0001ed2 <pick_lfn+0x75>
c0001e76:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e79:	bd 01 00 00 00       	mov    ebp,0x1
c0001e7e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e81:	31 ff                	xor    edi,edi
c0001e83:	49                   	dec    ecx
c0001e84:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e87:	0f b6 87 60 36 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdc9a0]
c0001e8e:	01 f0                	add    eax,esi
c0001e90:	e8 c6 fc ff ff       	call   c0001b5b <ld_word>
c0001e95:	66 85 ed             	test   bp,bp
c0001e98:	74 11                	je     c0001eab <pick_lfn+0x4e>
c0001e9a:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ea0:	77 d0                	ja     c0001e72 <pick_lfn+0x15>
c0001ea2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ea6:	89 c5                	mov    ebp,eax
c0001ea8:	41                   	inc    ecx
c0001ea9:	eb 04                	jmp    c0001eaf <pick_lfn+0x52>
c0001eab:	66 40                	inc    ax
c0001ead:	75 c3                	jne    c0001e72 <pick_lfn+0x15>
c0001eaf:	47                   	inc    edi
c0001eb0:	83 ff 0d             	cmp    edi,0xd
c0001eb3:	75 d2                	jne    c0001e87 <pick_lfn+0x2a>
c0001eb5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb8:	74 13                	je     c0001ecd <pick_lfn+0x70>
c0001eba:	66 85 ed             	test   bp,bp
c0001ebd:	74 0e                	je     c0001ecd <pick_lfn+0x70>
c0001ebf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ec5:	77 ab                	ja     c0001e72 <pick_lfn+0x15>
c0001ec7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ecd:	b8 01 00 00 00       	mov    eax,0x1
c0001ed2:	5b                   	pop    ebx
c0001ed3:	5e                   	pop    esi
c0001ed4:	5f                   	pop    edi
c0001ed5:	5d                   	pop    ebp
c0001ed6:	c3                   	ret    

c0001ed7 <put_lfn>:
c0001ed7:	55                   	push   ebp
c0001ed8:	31 ed                	xor    ebp,ebp
c0001eda:	57                   	push   edi
c0001edb:	89 d7                	mov    edi,edx
c0001edd:	56                   	push   esi
c0001ede:	31 f6                	xor    esi,esi
c0001ee0:	53                   	push   ebx
c0001ee1:	83 ec 08             	sub    esp,0x8
c0001ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ee7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001eeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eef:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ef5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001efb:	31 d2                	xor    edx,edx
c0001efd:	e8 cb fc ff ff       	call   c0001bcd <st_word>
c0001f02:	0f b6 d9             	movzx  ebx,cl
c0001f05:	4b                   	dec    ebx
c0001f06:	6b db 0d             	imul   ebx,ebx,0xd
c0001f09:	66 83 fe ff          	cmp    si,0xffff
c0001f0d:	74 08                	je     c0001f17 <put_lfn+0x40>
c0001f0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f12:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f16:	43                   	inc    ebx
c0001f17:	0f b6 85 60 36 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdc9a0]
c0001f1e:	0f b7 d6             	movzx  edx,si
c0001f21:	01 f8                	add    eax,edi
c0001f23:	e8 a5 fc ff ff       	call   c0001bcd <st_word>
c0001f28:	66 85 f6             	test   si,si
c0001f2b:	75 03                	jne    c0001f30 <put_lfn+0x59>
c0001f2d:	83 ce ff             	or     esi,0xffffffff
c0001f30:	45                   	inc    ebp
c0001f31:	83 fd 0d             	cmp    ebp,0xd
c0001f34:	75 d3                	jne    c0001f09 <put_lfn+0x32>
c0001f36:	66 46                	inc    si
c0001f38:	74 0a                	je     c0001f44 <put_lfn+0x6d>
c0001f3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f3d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f42:	75 09                	jne    c0001f4d <put_lfn+0x76>
c0001f44:	88 c8                	mov    al,cl
c0001f46:	83 c8 40             	or     eax,0x40
c0001f49:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f4d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f51:	88 07                	mov    BYTE PTR [edi],al
c0001f53:	83 c4 08             	add    esp,0x8
c0001f56:	5b                   	pop    ebx
c0001f57:	5e                   	pop    esi
c0001f58:	5f                   	pop    edi
c0001f59:	5d                   	pop    ebp
c0001f5a:	c3                   	ret    

c0001f5b <gen_numname>:
c0001f5b:	57                   	push   edi
c0001f5c:	89 cf                	mov    edi,ecx
c0001f5e:	56                   	push   esi
c0001f5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f64:	53                   	push   ebx
c0001f65:	89 c6                	mov    esi,eax
c0001f67:	83 ec 10             	sub    esp,0x10
c0001f6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f6e:	e8 67 fc ff ff       	call   c0001bda <mem_cpy>
c0001f73:	83 fb 05             	cmp    ebx,0x5
c0001f76:	76 2d                	jbe    c0001fa5 <gen_numname+0x4a>
c0001f78:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 25                	je     c0001fa5 <gen_numname+0x4a>
c0001f80:	83 c7 02             	add    edi,0x2
c0001f83:	ba 10 00 00 00       	mov    edx,0x10
c0001f88:	01 db                	add    ebx,ebx
c0001f8a:	89 c1                	mov    ecx,eax
c0001f8c:	66 d1 e8             	shr    ax,1
c0001f8f:	83 e1 01             	and    ecx,0x1
c0001f92:	01 cb                	add    ebx,ecx
c0001f94:	0f ba e3 10          	bt     ebx,0x10
c0001f98:	73 06                	jae    c0001fa0 <gen_numname+0x45>
c0001f9a:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fa0:	4a                   	dec    edx
c0001fa1:	75 e5                	jne    c0001f88 <gen_numname+0x2d>
c0001fa3:	eb d3                	jmp    c0001f78 <gen_numname+0x1d>
c0001fa5:	b8 07 00 00 00       	mov    eax,0x7
c0001faa:	88 d9                	mov    cl,bl
c0001fac:	83 e1 0f             	and    ecx,0xf
c0001faf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fb2:	80 fa 39             	cmp    dl,0x39
c0001fb5:	76 03                	jbe    c0001fba <gen_numname+0x5f>
c0001fb7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fba:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fbd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fc1:	89 da                	mov    edx,ebx
c0001fc3:	c1 ea 04             	shr    edx,0x4
c0001fc6:	83 fb 0f             	cmp    ebx,0xf
c0001fc9:	76 06                	jbe    c0001fd1 <gen_numname+0x76>
c0001fcb:	89 c8                	mov    eax,ecx
c0001fcd:	89 d3                	mov    ebx,edx
c0001fcf:	eb d9                	jmp    c0001faa <gen_numname+0x4f>
c0001fd1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fd6:	31 d2                	xor    edx,edx
c0001fd8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fdb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fde:	39 ca                	cmp    edx,ecx
c0001fe0:	73 18                	jae    c0001ffa <gen_numname+0x9f>
c0001fe2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fe5:	3c 20                	cmp    al,0x20
c0001fe7:	74 11                	je     c0001ffa <gen_numname+0x9f>
c0001fe9:	e8 41 fc ff ff       	call   c0001c2f <dbc_1st>
c0001fee:	85 c0                	test   eax,eax
c0001ff0:	74 05                	je     c0001ff7 <gen_numname+0x9c>
c0001ff2:	39 d3                	cmp    ebx,edx
c0001ff4:	74 04                	je     c0001ffa <gen_numname+0x9f>
c0001ff6:	42                   	inc    edx
c0001ff7:	42                   	inc    edx
c0001ff8:	eb e1                	jmp    c0001fdb <gen_numname+0x80>
c0001ffa:	b0 20                	mov    al,0x20
c0001ffc:	83 f9 07             	cmp    ecx,0x7
c0001fff:	77 05                	ja     c0002006 <gen_numname+0xab>
c0002001:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002005:	41                   	inc    ecx
c0002006:	42                   	inc    edx
c0002007:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000200b:	83 fa 07             	cmp    edx,0x7
c000200e:	76 ea                	jbe    c0001ffa <gen_numname+0x9f>
c0002010:	83 c4 10             	add    esp,0x10
c0002013:	5b                   	pop    ebx
c0002014:	5e                   	pop    esi
c0002015:	5f                   	pop    edi
c0002016:	c3                   	ret    

c0002017 <sum_sfn>:
c0002017:	31 c9                	xor    ecx,ecx
c0002019:	31 d2                	xor    edx,edx
c000201b:	d0 ca                	ror    dl,1
c000201d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002020:	41                   	inc    ecx
c0002021:	83 f9 0b             	cmp    ecx,0xb
c0002024:	75 f5                	jne    c000201b <sum_sfn+0x4>
c0002026:	88 d0                	mov    al,dl
c0002028:	c3                   	ret    

c0002029 <xdir_sum>:
c0002029:	56                   	push   esi
c000202a:	31 c9                	xor    ecx,ecx
c000202c:	53                   	push   ebx
c000202d:	31 d2                	xor    edx,edx
c000202f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002033:	43                   	inc    ebx
c0002034:	c1 e3 05             	shl    ebx,0x5
c0002037:	83 fa 02             	cmp    edx,0x2
c000203a:	74 0b                	je     c0002047 <xdir_sum+0x1e>
c000203c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002040:	66 d1 c9             	ror    cx,1
c0002043:	01 f1                	add    ecx,esi
c0002045:	eb 05                	jmp    c000204c <xdir_sum+0x23>
c0002047:	ba 03 00 00 00       	mov    edx,0x3
c000204c:	42                   	inc    edx
c000204d:	39 d3                	cmp    ebx,edx
c000204f:	77 e6                	ja     c0002037 <xdir_sum+0xe>
c0002051:	89 c8                	mov    eax,ecx
c0002053:	5b                   	pop    ebx
c0002054:	5e                   	pop    esi
c0002055:	c3                   	ret    

c0002056 <xsum32>:
c0002056:	d1 ca                	ror    edx,1
c0002058:	0f b6 c0             	movzx  eax,al
c000205b:	01 d0                	add    eax,edx
c000205d:	c3                   	ret    

c000205e <get_xfileinfo>:
c000205e:	55                   	push   ebp
c000205f:	31 c9                	xor    ecx,ecx
c0002061:	57                   	push   edi
c0002062:	bd 40 00 00 00       	mov    ebp,0x40
c0002067:	56                   	push   esi
c0002068:	31 ff                	xor    edi,edi
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 0c             	sub    esp,0xc
c0002070:	89 d3                	mov    ebx,edx
c0002072:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002079:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000207d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002080:	76 6d                	jbe    c00020ef <get_xfileinfo+0x91>
c0002082:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002088:	76 0b                	jbe    c0002095 <get_xfileinfo+0x37>
c000208a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000208e:	bf 01 00 00 00       	mov    edi,0x1
c0002093:	eb 63                	jmp    c00020f8 <get_xfileinfo+0x9a>
c0002095:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c000209b:	75 03                	jne    c00020a0 <get_xfileinfo+0x42>
c000209d:	83 c5 02             	add    ebp,0x2
c00020a0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020a3:	83 c5 02             	add    ebp,0x2
c00020a6:	e8 b0 fa ff ff       	call   c0001b5b <ld_word>
c00020ab:	ff 04 24             	inc    DWORD PTR [esp]
c00020ae:	66 85 c9             	test   cx,cx
c00020b1:	75 0d                	jne    c00020c0 <get_xfileinfo+0x62>
c00020b3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020be:	76 2b                	jbe    c00020eb <get_xfileinfo+0x8d>
c00020c0:	c1 e1 10             	shl    ecx,0x10
c00020c3:	ba ff 00 00 00       	mov    edx,0xff
c00020c8:	0f b7 c0             	movzx  eax,ax
c00020cb:	29 fa                	sub    edx,edi
c00020cd:	09 c8                	or     eax,ecx
c00020cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020d3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020db:	e8 1b fc ff ff       	call   c0001cfb <put_utf>
c00020e0:	84 c0                	test   al,al
c00020e2:	74 a6                	je     c000208a <get_xfileinfo+0x2c>
c00020e4:	0f b6 c0             	movzx  eax,al
c00020e7:	01 c7                	add    edi,eax
c00020e9:	31 c0                	xor    eax,eax
c00020eb:	89 c1                	mov    ecx,eax
c00020ed:	eb 8a                	jmp    c0002079 <get_xfileinfo+0x1b>
c00020ef:	85 ff                	test   edi,edi
c00020f1:	74 97                	je     c000208a <get_xfileinfo+0x2c>
c00020f3:	66 85 c9             	test   cx,cx
c00020f6:	75 92                	jne    c000208a <get_xfileinfo+0x2c>
c00020f8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020fd:	31 c0                	xor    eax,eax
c00020ff:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002103:	31 d2                	xor    edx,edx
c0002105:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002108:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000210b:	80 e1 10             	and    cl,0x10
c000210e:	75 08                	jne    c0002118 <get_xfileinfo+0xba>
c0002110:	8d 46 38             	lea    eax,[esi+0x38]
c0002113:	e8 68 fa ff ff       	call   c0001b80 <ld_qword>
c0002118:	89 03                	mov    DWORD PTR [ebx],eax
c000211a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000211d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002120:	e8 36 fa ff ff       	call   c0001b5b <ld_word>
c0002125:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002129:	8d 46 0e             	lea    eax,[esi+0xe]
c000212c:	e8 2a fa ff ff       	call   c0001b5b <ld_word>
c0002131:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002135:	83 c4 0c             	add    esp,0xc
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	5d                   	pop    ebp
c000213c:	c3                   	ret    

c000213d <get_ldnumber>:
c000213d:	8b 10                	mov    edx,DWORD PTR [eax]
c000213f:	85 d2                	test   edx,edx
c0002141:	74 14                	je     c0002157 <get_ldnumber+0x1a>
c0002143:	56                   	push   esi
c0002144:	53                   	push   ebx
c0002145:	89 d3                	mov    ebx,edx
c0002147:	43                   	inc    ebx
c0002148:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214b:	80 f9 1f             	cmp    cl,0x1f
c000214e:	76 0d                	jbe    c000215d <get_ldnumber+0x20>
c0002150:	80 f9 3a             	cmp    cl,0x3a
c0002153:	75 f2                	jne    c0002147 <get_ldnumber+0xa>
c0002155:	eb 0a                	jmp    c0002161 <get_ldnumber+0x24>
c0002157:	83 c9 ff             	or     ecx,0xffffffff
c000215a:	89 c8                	mov    eax,ecx
c000215c:	c3                   	ret    
c000215d:	31 c9                	xor    ecx,ecx
c000215f:	eb 24                	jmp    c0002185 <get_ldnumber+0x48>
c0002161:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002164:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002167:	80 f9 09             	cmp    cl,0x9
c000216a:	77 16                	ja     c0002182 <get_ldnumber+0x45>
c000216c:	83 c2 02             	add    edx,0x2
c000216f:	83 c9 ff             	or     ecx,0xffffffff
c0002172:	39 d3                	cmp    ebx,edx
c0002174:	75 0f                	jne    c0002185 <get_ldnumber+0x48>
c0002176:	89 f2                	mov    edx,esi
c0002178:	89 18                	mov    DWORD PTR [eax],ebx
c000217a:	0f be ca             	movsx  ecx,dl
c000217d:	83 e9 30             	sub    ecx,0x30
c0002180:	eb 03                	jmp    c0002185 <get_ldnumber+0x48>
c0002182:	83 c9 ff             	or     ecx,0xffffffff
c0002185:	89 c8                	mov    eax,ecx
c0002187:	5b                   	pop    ebx
c0002188:	5e                   	pop    esi
c0002189:	c3                   	ret    

c000218a <crc32>:
c000218a:	56                   	push   esi
c000218b:	89 d6                	mov    esi,edx
c000218d:	53                   	push   ebx
c000218e:	b2 01                	mov    dl,0x1
c0002190:	bb 08 00 00 00       	mov    ebx,0x8
c0002195:	89 f1                	mov    ecx,esi
c0002197:	84 d1                	test   cl,dl
c0002199:	0f 95 c1             	setne  cl
c000219c:	0f b6 c9             	movzx  ecx,cl
c000219f:	31 c1                	xor    ecx,eax
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	d1 e8                	shr    eax,1
c00021a5:	80 e1 01             	and    cl,0x1
c00021a8:	74 05                	je     c00021af <crc32+0x25>
c00021aa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021af:	d1 e2                	shl    edx,1
c00021b1:	4b                   	dec    ebx
c00021b2:	75 e1                	jne    c0002195 <crc32+0xb>
c00021b4:	5b                   	pop    ebx
c00021b5:	5e                   	pop    esi
c00021b6:	c3                   	ret    

c00021b7 <test_gpt_header>:
c00021b7:	55                   	push   ebp
c00021b8:	b9 10 00 00 00       	mov    ecx,0x10
c00021bd:	57                   	push   edi
c00021be:	ba 60 35 02 c0       	mov    edx,0xc0023560
c00021c3:	56                   	push   esi
c00021c4:	31 ff                	xor    edi,edi
c00021c6:	53                   	push   ebx
c00021c7:	89 c3                	mov    ebx,eax
c00021c9:	e8 2c fa ff ff       	call   c0001bfa <mem_cmp>
c00021ce:	85 c0                	test   eax,eax
c00021d0:	75 55                	jne    c0002227 <test_gpt_header+0x70>
c00021d2:	89 c7                	mov    edi,eax
c00021d4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d9:	83 ce ff             	or     esi,0xffffffff
c00021dc:	31 d2                	xor    edx,edx
c00021de:	83 fd 03             	cmp    ebp,0x3
c00021e1:	76 05                	jbe    c00021e8 <test_gpt_header+0x31>
c00021e3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e8:	89 f0                	mov    eax,esi
c00021ea:	45                   	inc    ebp
c00021eb:	e8 9a ff ff ff       	call   c000218a <crc32>
c00021f0:	83 fd 4c             	cmp    ebp,0x4c
c00021f3:	89 c6                	mov    esi,eax
c00021f5:	75 e5                	jne    c00021dc <test_gpt_header+0x25>
c00021f7:	8d 43 10             	lea    eax,[ebx+0x10]
c00021fa:	f7 d6                	not    esi
c00021fc:	e8 67 f9 ff ff       	call   c0001b68 <ld_dword>
c0002201:	39 c6                	cmp    esi,eax
c0002203:	75 22                	jne    c0002227 <test_gpt_header+0x70>
c0002205:	8d 43 54             	lea    eax,[ebx+0x54]
c0002208:	e8 5b f9 ff ff       	call   c0001b68 <ld_dword>
c000220d:	83 c0 80             	add    eax,0xffffff80
c0002210:	75 15                	jne    c0002227 <test_gpt_header+0x70>
c0002212:	8d 43 50             	lea    eax,[ebx+0x50]
c0002215:	e8 4e f9 ff ff       	call   c0001b68 <ld_dword>
c000221a:	3d 80 00 00 00       	cmp    eax,0x80
c000221f:	0f 96 c0             	setbe  al
c0002222:	0f b6 c0             	movzx  eax,al
c0002225:	89 c7                	mov    edi,eax
c0002227:	5b                   	pop    ebx
c0002228:	89 f8                	mov    eax,edi
c000222a:	5e                   	pop    esi
c000222b:	5f                   	pop    edi
c000222c:	5d                   	pop    ebp
c000222d:	c3                   	ret    

c000222e <make_rand>:
c000222e:	56                   	push   esi
c000222f:	85 c0                	test   eax,eax
c0002231:	53                   	push   ebx
c0002232:	75 05                	jne    c0002239 <make_rand+0xb>
c0002234:	b8 01 00 00 00       	mov    eax,0x1
c0002239:	01 d1                	add    ecx,edx
c000223b:	bb 08 00 00 00       	mov    ebx,0x8
c0002240:	89 c6                	mov    esi,eax
c0002242:	d1 e8                	shr    eax,1
c0002244:	83 e6 01             	and    esi,0x1
c0002247:	85 f6                	test   esi,esi
c0002249:	74 05                	je     c0002250 <make_rand+0x22>
c000224b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002250:	4b                   	dec    ebx
c0002251:	75 ed                	jne    c0002240 <make_rand+0x12>
c0002253:	42                   	inc    edx
c0002254:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002257:	39 ca                	cmp    edx,ecx
c0002259:	75 e0                	jne    c000223b <make_rand+0xd>
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	c3                   	ret    

c000225e <validate>:
c000225e:	56                   	push   esi
c000225f:	53                   	push   ebx
c0002260:	89 d6                	mov    esi,edx
c0002262:	51                   	push   ecx
c0002263:	85 c0                	test   eax,eax
c0002265:	75 09                	jne    c0002270 <validate+0x12>
c0002267:	b8 09 00 00 00       	mov    eax,0x9
c000226c:	31 c9                	xor    ecx,ecx
c000226e:	eb 2f                	jmp    c000229f <validate+0x41>
c0002270:	89 c3                	mov    ebx,eax
c0002272:	8b 00                	mov    eax,DWORD PTR [eax]
c0002274:	85 c0                	test   eax,eax
c0002276:	74 ef                	je     c0002267 <validate+0x9>
c0002278:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000227b:	74 ea                	je     c0002267 <validate+0x9>
c000227d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002281:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002285:	75 e0                	jne    c0002267 <validate+0x9>
c0002287:	83 ec 0c             	sub    esp,0xc
c000228a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000228e:	50                   	push   eax
c000228f:	e8 76 f8 ff ff       	call   c0001b0a <disk_status>
c0002294:	83 c4 10             	add    esp,0x10
c0002297:	a8 01                	test   al,0x1
c0002299:	75 cc                	jne    c0002267 <validate+0x9>
c000229b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000229d:	31 c0                	xor    eax,eax
c000229f:	89 0e                	mov    DWORD PTR [esi],ecx
c00022a1:	5a                   	pop    edx
c00022a2:	5b                   	pop    ebx
c00022a3:	5e                   	pop    esi
c00022a4:	c3                   	ret    

c00022a5 <sync_window>:
c00022a5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a9:	0f 84 85 00 00 00    	je     c0002334 <sync_window+0x8f>
c00022af:	55                   	push   ebp
c00022b0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022b3:	57                   	push   edi
c00022b4:	56                   	push   esi
c00022b5:	53                   	push   ebx
c00022b6:	89 c3                	mov    ebx,eax
c00022b8:	83 ec 28             	sub    esp,0x28
c00022bb:	6a 01                	push   0x1
c00022bd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022c0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022c3:	55                   	push   ebp
c00022c4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c8:	50                   	push   eax
c00022c9:	e8 58 f8 ff ff       	call   c0001b26 <disk_write>
c00022ce:	83 c4 20             	add    esp,0x20
c00022d1:	ba 01 00 00 00       	mov    edx,0x1
c00022d6:	85 c0                	test   eax,eax
c00022d8:	75 50                	jne    c000232a <sync_window+0x85>
c00022da:	31 ff                	xor    edi,edi
c00022dc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022e3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022e7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022ea:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022ed:	89 c6                	mov    esi,eax
c00022ef:	89 d7                	mov    edi,edx
c00022f1:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022f4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f8:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022fb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022ff:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002303:	73 23                	jae    c0002328 <sync_window+0x83>
c0002305:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002309:	75 1d                	jne    c0002328 <sync_window+0x83>
c000230b:	83 ec 0c             	sub    esp,0xc
c000230e:	6a 01                	push   0x1
c0002310:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002314:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002318:	52                   	push   edx
c0002319:	50                   	push   eax
c000231a:	55                   	push   ebp
c000231b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000231f:	50                   	push   eax
c0002320:	e8 01 f8 ff ff       	call   c0001b26 <disk_write>
c0002325:	83 c4 20             	add    esp,0x20
c0002328:	31 d2                	xor    edx,edx
c000232a:	83 c4 1c             	add    esp,0x1c
c000232d:	89 d0                	mov    eax,edx
c000232f:	5b                   	pop    ebx
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    
c0002334:	31 d2                	xor    edx,edx
c0002336:	89 d0                	mov    eax,edx
c0002338:	c3                   	ret    

c0002339 <move_window>:
c0002339:	56                   	push   esi
c000233a:	53                   	push   ebx
c000233b:	89 c3                	mov    ebx,eax
c000233d:	83 ec 14             	sub    esp,0x14
c0002340:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002343:	75 07                	jne    c000234c <move_window+0x13>
c0002345:	31 f6                	xor    esi,esi
c0002347:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000234a:	74 59                	je     c00023a5 <move_window+0x6c>
c000234c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002350:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002354:	89 d8                	mov    eax,ebx
c0002356:	e8 4a ff ff ff       	call   c00022a5 <sync_window>
c000235b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000235f:	89 c6                	mov    esi,eax
c0002361:	85 c0                	test   eax,eax
c0002363:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002367:	75 3c                	jne    c00023a5 <move_window+0x6c>
c0002369:	83 ec 0c             	sub    esp,0xc
c000236c:	8d 43 54             	lea    eax,[ebx+0x54]
c000236f:	6a 01                	push   0x1
c0002371:	51                   	push   ecx
c0002372:	52                   	push   edx
c0002373:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002377:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000237b:	50                   	push   eax
c000237c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002380:	50                   	push   eax
c0002381:	e8 8a f7 ff ff       	call   c0001b10 <disk_read>
c0002386:	83 c4 20             	add    esp,0x20
c0002389:	85 c0                	test   eax,eax
c000238b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000238f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002393:	74 0a                	je     c000239f <move_window+0x66>
c0002395:	83 ca ff             	or     edx,0xffffffff
c0002398:	be 01 00 00 00       	mov    esi,0x1
c000239d:	89 d1                	mov    ecx,edx
c000239f:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023a2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023a5:	89 f0                	mov    eax,esi
c00023a7:	83 c4 14             	add    esp,0x14
c00023aa:	5b                   	pop    ebx
c00023ab:	5e                   	pop    esi
c00023ac:	c3                   	ret    

c00023ad <check_fs>:
c00023ad:	53                   	push   ebx
c00023ae:	89 c3                	mov    ebx,eax
c00023b0:	83 ec 08             	sub    esp,0x8
c00023b3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023b7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023be:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023c5:	e8 6f ff ff ff       	call   c0002339 <move_window>
c00023ca:	ba 04 00 00 00       	mov    edx,0x4
c00023cf:	85 c0                	test   eax,eax
c00023d1:	0f 85 89 00 00 00    	jne    c0002460 <check_fs+0xb3>
c00023d7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023dd:	e8 79 f7 ff ff       	call   c0001b5b <ld_word>
c00023e2:	ba 03 00 00 00       	mov    edx,0x3
c00023e7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023eb:	75 73                	jne    c0002460 <check_fs+0xb3>
c00023ed:	ba 80 36 02 c0       	mov    edx,0xc0023680
c00023f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00023f5:	b9 0b 00 00 00       	mov    ecx,0xb
c00023fa:	e8 fb f7 ff ff       	call   c0001bfa <mem_cmp>
c00023ff:	ba 01 00 00 00       	mov    edx,0x1
c0002404:	85 c0                	test   eax,eax
c0002406:	74 58                	je     c0002460 <check_fs+0xb3>
c0002408:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000240b:	8d 50 18             	lea    edx,[eax+0x18]
c000240e:	80 fa 01             	cmp    dl,0x1
c0002411:	76 09                	jbe    c000241c <check_fs+0x6f>
c0002413:	ba 02 00 00 00       	mov    edx,0x2
c0002418:	3c eb                	cmp    al,0xeb
c000241a:	75 44                	jne    c0002460 <check_fs+0xb3>
c000241c:	ba bc 60 02 c0       	mov    edx,0xc00260bc
c0002421:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002427:	b9 03 00 00 00       	mov    ecx,0x3
c000242c:	e8 c9 f7 ff ff       	call   c0001bfa <mem_cmp>
c0002431:	31 d2                	xor    edx,edx
c0002433:	85 c0                	test   eax,eax
c0002435:	74 29                	je     c0002460 <check_fs+0xb3>
c0002437:	ba 8c 36 02 c0       	mov    edx,0xc002368c
c000243c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002442:	b9 05 00 00 00       	mov    ecx,0x5
c0002447:	e8 ae f7 ff ff       	call   c0001bfa <mem_cmp>
c000244c:	31 d2                	xor    edx,edx
c000244e:	85 c0                	test   eax,eax
c0002450:	74 0e                	je     c0002460 <check_fs+0xb3>
c0002452:	31 d2                	xor    edx,edx
c0002454:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000245b:	0f 95 c2             	setne  dl
c000245e:	01 d2                	add    edx,edx
c0002460:	89 d0                	mov    eax,edx
c0002462:	83 c4 08             	add    esp,0x8
c0002465:	5b                   	pop    ebx
c0002466:	c3                   	ret    

c0002467 <find_volume>:
c0002467:	55                   	push   ebp
c0002468:	31 c9                	xor    ecx,ecx
c000246a:	57                   	push   edi
c000246b:	56                   	push   esi
c000246c:	89 d6                	mov    esi,edx
c000246e:	53                   	push   ebx
c000246f:	31 d2                	xor    edx,edx
c0002471:	83 ec 3c             	sub    esp,0x3c
c0002474:	89 c3                	mov    ebx,eax
c0002476:	e8 32 ff ff ff       	call   c00023ad <check_fs>
c000247b:	83 f8 02             	cmp    eax,0x2
c000247e:	74 0e                	je     c000248e <find_volume+0x27>
c0002480:	0f 87 5d 01 00 00    	ja     c00025e3 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 84 55 01 00 00    	je     c00025e3 <find_volume+0x17c>
c000248e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002495:	0f 85 dd 00 00 00    	jne    c0002578 <find_volume+0x111>
c000249b:	31 c9                	xor    ecx,ecx
c000249d:	ba 01 00 00 00       	mov    edx,0x1
c00024a2:	89 d8                	mov    eax,ebx
c00024a4:	e8 90 fe ff ff       	call   c0002339 <move_window>
c00024a9:	85 c0                	test   eax,eax
c00024ab:	74 0a                	je     c00024b7 <find_volume+0x50>
c00024ad:	b8 04 00 00 00       	mov    eax,0x4
c00024b2:	e9 2c 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024b7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ba:	89 e8                	mov    eax,ebp
c00024bc:	e8 f6 fc ff ff       	call   c00021b7 <test_gpt_header>
c00024c1:	85 c0                	test   eax,eax
c00024c3:	75 0a                	jne    c00024cf <find_volume+0x68>
c00024c5:	b8 03 00 00 00       	mov    eax,0x3
c00024ca:	e9 14 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024cf:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024d5:	e8 8e f6 ff ff       	call   c0001b68 <ld_dword>
c00024da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024de:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024e4:	e8 97 f6 ff ff       	call   c0001b80 <ld_qword>
c00024e9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002501:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002505:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002509:	74 ba                	je     c00024c5 <find_volume+0x5e>
c000250b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000250f:	31 c9                	xor    ecx,ecx
c0002511:	c1 e7 07             	shl    edi,0x7
c0002514:	89 d8                	mov    eax,ebx
c0002516:	89 fa                	mov    edx,edi
c0002518:	c1 ea 09             	shr    edx,0x9
c000251b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000251f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002523:	e8 11 fe ff ff       	call   c0002339 <move_window>
c0002528:	85 c0                	test   eax,eax
c000252a:	75 81                	jne    c00024ad <find_volume+0x46>
c000252c:	81 e7 80 01 00 00    	and    edi,0x180
c0002532:	b9 10 00 00 00       	mov    ecx,0x10
c0002537:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000253b:	ba 70 36 02 c0       	mov    edx,0xc0023670
c0002540:	e8 b5 f6 ff ff       	call   c0001bfa <mem_cmp>
c0002545:	85 c0                	test   eax,eax
c0002547:	75 29                	jne    c0002572 <find_volume+0x10b>
c0002549:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000254d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002551:	e8 2a f6 ff ff       	call   c0001b80 <ld_qword>
c0002556:	89 d1                	mov    ecx,edx
c0002558:	89 c2                	mov    edx,eax
c000255a:	89 d8                	mov    eax,ebx
c000255c:	e8 4c fe ff ff       	call   c00023ad <check_fs>
c0002561:	85 f6                	test   esi,esi
c0002563:	75 07                	jne    c000256c <find_volume+0x105>
c0002565:	83 f8 01             	cmp    eax,0x1
c0002568:	77 08                	ja     c0002572 <find_volume+0x10b>
c000256a:	eb 77                	jmp    c00025e3 <find_volume+0x17c>
c000256c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002570:	74 71                	je     c00025e3 <find_volume+0x17c>
c0002572:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002576:	eb 89                	jmp    c0002501 <find_volume+0x9a>
c0002578:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000257c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002582:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000258c:	89 cd                	mov    ebp,ecx
c000258e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002592:	89 f8                	mov    eax,edi
c0002594:	83 c7 10             	add    edi,0x10
c0002597:	e8 cc f5 ff ff       	call   c0001b68 <ld_dword>
c000259c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025a0:	89 01                	mov    DWORD PTR [ecx],eax
c00025a2:	83 c1 04             	add    ecx,0x4
c00025a5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a9:	75 e3                	jne    c000258e <find_volume+0x127>
c00025ab:	31 ff                	xor    edi,edi
c00025ad:	85 f6                	test   esi,esi
c00025af:	74 03                	je     c00025b4 <find_volume+0x14d>
c00025b1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025b4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b8:	85 d2                	test   edx,edx
c00025ba:	74 14                	je     c00025d0 <find_volume+0x169>
c00025bc:	31 c9                	xor    ecx,ecx
c00025be:	89 d8                	mov    eax,ebx
c00025c0:	e8 e8 fd ff ff       	call   c00023ad <check_fs>
c00025c5:	83 f8 01             	cmp    eax,0x1
c00025c8:	76 19                	jbe    c00025e3 <find_volume+0x17c>
c00025ca:	85 f6                	test   esi,esi
c00025cc:	74 0f                	je     c00025dd <find_volume+0x176>
c00025ce:	eb 13                	jmp    c00025e3 <find_volume+0x17c>
c00025d0:	85 f6                	test   esi,esi
c00025d2:	0f 85 ed fe ff ff    	jne    c00024c5 <find_volume+0x5e>
c00025d8:	b8 03 00 00 00       	mov    eax,0x3
c00025dd:	47                   	inc    edi
c00025de:	83 ff 03             	cmp    edi,0x3
c00025e1:	76 d1                	jbe    c00025b4 <find_volume+0x14d>
c00025e3:	83 c4 3c             	add    esp,0x3c
c00025e6:	5b                   	pop    ebx
c00025e7:	5e                   	pop    esi
c00025e8:	5f                   	pop    edi
c00025e9:	5d                   	pop    ebp
c00025ea:	c3                   	ret    

c00025eb <mount_volume>:
c00025eb:	55                   	push   ebp
c00025ec:	57                   	push   edi
c00025ed:	89 cf                	mov    edi,ecx
c00025ef:	56                   	push   esi
c00025f0:	53                   	push   ebx
c00025f1:	bb 0b 00 00 00       	mov    ebx,0xb
c00025f6:	83 ec 3c             	sub    esp,0x3c
c00025f9:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002603:	e8 35 fb ff ff       	call   c000213d <get_ldnumber>
c0002608:	85 c0                	test   eax,eax
c000260a:	0f 88 3a 05 00 00    	js     c0002b4a <mount_volume+0x55f>
c0002610:	8b 2c 85 40 7c 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd83c0]
c0002617:	89 c6                	mov    esi,eax
c0002619:	bb 0c 00 00 00       	mov    ebx,0xc
c000261e:	85 ed                	test   ebp,ebp
c0002620:	0f 84 24 05 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000262a:	83 e7 fe             	and    edi,0xfffffffe
c000262d:	89 2a                	mov    DWORD PTR [edx],ebp
c000262f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002633:	74 32                	je     c0002667 <mount_volume+0x7c>
c0002635:	83 ec 0c             	sub    esp,0xc
c0002638:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000263c:	50                   	push   eax
c000263d:	e8 c8 f4 ff ff       	call   c0001b0a <disk_status>
c0002642:	83 c4 10             	add    esp,0x10
c0002645:	a8 01                	test   al,0x1
c0002647:	75 1e                	jne    c0002667 <mount_volume+0x7c>
c0002649:	31 db                	xor    ebx,ebx
c000264b:	89 f9                	mov    ecx,edi
c000264d:	84 c9                	test   cl,cl
c000264f:	0f 84 f5 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002655:	a8 04                	test   al,0x4
c0002657:	0f 84 ed 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c000265d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002662:	e9 e3 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c0002667:	83 ec 0c             	sub    esp,0xc
c000266a:	89 f0                	mov    eax,esi
c000266c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002670:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002673:	0f b6 f0             	movzx  esi,al
c0002676:	bb 03 00 00 00       	mov    ebx,0x3
c000267b:	56                   	push   esi
c000267c:	e8 8c f4 ff ff       	call   c0001b0d <disk_initialize>
c0002681:	83 c4 10             	add    esp,0x10
c0002684:	a8 01                	test   al,0x1
c0002686:	0f 85 be 04 00 00    	jne    c0002b4a <mount_volume+0x55f>
c000268c:	89 f9                	mov    ecx,edi
c000268e:	84 c9                	test   cl,cl
c0002690:	74 04                	je     c0002696 <mount_volume+0xab>
c0002692:	a8 04                	test   al,0x4
c0002694:	75 c7                	jne    c000265d <mount_volume+0x72>
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 e8                	mov    eax,ebp
c000269a:	e8 c8 fd ff ff       	call   c0002467 <find_volume>
c000269f:	83 f8 04             	cmp    eax,0x4
c00026a2:	75 0a                	jne    c00026ae <mount_volume+0xc3>
c00026a4:	bb 01 00 00 00       	mov    ebx,0x1
c00026a9:	e9 9c 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026ae:	83 f8 01             	cmp    eax,0x1
c00026b1:	76 0a                	jbe    c00026bd <mount_volume+0xd2>
c00026b3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b8:	e9 8d 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026bd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026c0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026cb:	75 17                	jne    c00026e4 <mount_volume+0xf9>
c00026cd:	b8 0b 00 00 00       	mov    eax,0xb
c00026d2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026d7:	75 da                	jne    c00026b3 <mount_volume+0xc8>
c00026d9:	40                   	inc    eax
c00026da:	83 f8 40             	cmp    eax,0x40
c00026dd:	75 f3                	jne    c00026d2 <mount_volume+0xe7>
c00026df:	e9 5a 02 00 00       	jmp    c000293e <mount_volume+0x353>
c00026e4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026e7:	e8 6f f4 ff ff       	call   c0001b5b <ld_word>
c00026ec:	66 3d 00 02          	cmp    ax,0x200
c00026f0:	75 c1                	jne    c00026b3 <mount_volume+0xc8>
c00026f2:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026f5:	e8 61 f4 ff ff       	call   c0001b5b <ld_word>
c00026fa:	0f b7 c0             	movzx  eax,ax
c00026fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002701:	85 c0                	test   eax,eax
c0002703:	75 0c                	jne    c0002711 <mount_volume+0x126>
c0002705:	8d 45 78             	lea    eax,[ebp+0x78]
c0002708:	e8 5b f4 ff ff       	call   c0001b68 <ld_dword>
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002715:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002718:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000271b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000271f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002722:	48                   	dec    eax
c0002723:	3c 01                	cmp    al,0x1
c0002725:	77 8c                	ja     c00026b3 <mount_volume+0xc8>
c0002727:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000272b:	89 c3                	mov    ebx,eax
c000272d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002731:	66 85 c0             	test   ax,ax
c0002734:	0f 84 79 ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c000273a:	8d 40 ff             	lea    eax,[eax-0x1]
c000273d:	85 d8                	test   eax,ebx
c000273f:	0f 85 6e ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002745:	8d 45 65             	lea    eax,[ebp+0x65]
c0002748:	e8 0e f4 ff ff       	call   c0001b5b <ld_word>
c000274d:	89 c7                	mov    edi,eax
c000274f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002753:	a8 0f                	test   al,0xf
c0002755:	0f 85 58 ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c000275b:	8d 45 67             	lea    eax,[ebp+0x67]
c000275e:	e8 f8 f3 ff ff       	call   c0001b5b <ld_word>
c0002763:	0f b7 f0             	movzx  esi,ax
c0002766:	85 f6                	test   esi,esi
c0002768:	75 0a                	jne    c0002774 <mount_volume+0x189>
c000276a:	8d 45 74             	lea    eax,[ebp+0x74]
c000276d:	e8 f6 f3 ff ff       	call   c0001b68 <ld_dword>
c0002772:	89 c6                	mov    esi,eax
c0002774:	8d 45 62             	lea    eax,[ebp+0x62]
c0002777:	e8 df f3 ff ff       	call   c0001b5b <ld_word>
c000277c:	66 85 c0             	test   ax,ax
c000277f:	0f 84 2e ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002785:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000278a:	0f b7 c8             	movzx  ecx,ax
c000278d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002796:	89 fa                	mov    edx,edi
c0002798:	66 c1 ea 04          	shr    dx,0x4
c000279c:	0f b7 d2             	movzx  edx,dx
c000279f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027a3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027aa:	39 c6                	cmp    esi,eax
c00027ac:	0f 82 01 ff ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027b2:	29 c6                	sub    esi,eax
c00027b4:	31 d2                	xor    edx,edx
c00027b6:	89 f0                	mov    eax,esi
c00027b8:	f7 f3                	div    ebx
c00027ba:	39 de                	cmp    esi,ebx
c00027bc:	0f 82 f1 fe ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027c2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027c7:	0f 87 e6 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00027cd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027d2:	0f 86 63 03 00 00    	jbe    c0002b3b <mount_volume+0x550>
c00027d8:	bb 03 00 00 00       	mov    ebx,0x3
c00027dd:	8d 70 02             	lea    esi,[eax+0x2]
c00027e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027eb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027ee:	31 d2                	xor    edx,edx
c00027f0:	89 c8                	mov    eax,ecx
c00027f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002801:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002805:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002808:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000280b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000280f:	31 d2                	xor    edx,edx
c0002811:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002815:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002819:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000281f:	83 fb 03             	cmp    ebx,0x3
c0002822:	75 2b                	jne    c000284f <mount_volume+0x264>
c0002824:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002827:	e8 2f f3 ff ff       	call   c0001b5b <ld_word>
c000282c:	66 09 c7             	or     di,ax
c000282f:	0f 85 7e fe ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002835:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000283b:	c1 e6 02             	shl    esi,0x2
c000283e:	e8 25 f3 ff ff       	call   c0001b68 <ld_dword>
c0002843:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000284a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000284d:	eb 30                	jmp    c000287f <mount_volume+0x294>
c000284f:	66 85 ff             	test   di,di
c0002852:	0f 84 5b fe ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002858:	31 d2                	xor    edx,edx
c000285a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000285e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002862:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002866:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002869:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000286c:	83 fb 02             	cmp    ebx,0x2
c000286f:	75 04                	jne    c0002875 <mount_volume+0x28a>
c0002871:	01 f6                	add    esi,esi
c0002873:	eb 0a                	jmp    c000287f <mount_volume+0x294>
c0002875:	8d 04 76             	lea    eax,[esi+esi*2]
c0002878:	83 e6 01             	and    esi,0x1
c000287b:	d1 e8                	shr    eax,1
c000287d:	01 c6                	add    esi,eax
c000287f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002885:	c1 ee 09             	shr    esi,0x9
c0002888:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000288c:	0f 87 21 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c0002892:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002899:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028a0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028a4:	83 fb 03             	cmp    ebx,0x3
c00028a7:	75 7a                	jne    c0002923 <mount_volume+0x338>
c00028a9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028af:	e8 a7 f2 ff ff       	call   c0001b5b <ld_word>
c00028b4:	66 48                	dec    ax
c00028b6:	75 6b                	jne    c0002923 <mount_volume+0x338>
c00028b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028c0:	83 c2 01             	add    edx,0x1
c00028c3:	89 e8                	mov    eax,ebp
c00028c5:	83 d1 00             	adc    ecx,0x0
c00028c8:	e8 6c fa ff ff       	call   c0002339 <move_window>
c00028cd:	85 c0                	test   eax,eax
c00028cf:	75 52                	jne    c0002923 <mount_volume+0x338>
c00028d1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028d5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028db:	e8 7b f2 ff ff       	call   c0001b5b <ld_word>
c00028e0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028e4:	75 3d                	jne    c0002923 <mount_volume+0x338>
c00028e6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e9:	e8 7a f2 ff ff       	call   c0001b68 <ld_dword>
c00028ee:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028f3:	75 2e                	jne    c0002923 <mount_volume+0x338>
c00028f5:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028fb:	e8 68 f2 ff ff       	call   c0001b68 <ld_dword>
c0002900:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002905:	75 1c                	jne    c0002923 <mount_volume+0x338>
c0002907:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000290d:	e8 56 f2 ff ff       	call   c0001b68 <ld_dword>
c0002912:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002915:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000291b:	e8 48 f2 ff ff       	call   c0001b68 <ld_dword>
c0002920:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002923:	66 a1 20 7c 02 c0    	mov    ax,ds:0xc0027c20
c0002929:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000292c:	40                   	inc    eax
c000292d:	31 db                	xor    ebx,ebx
c000292f:	66 a3 20 7c 02 c0    	mov    ds:0xc0027c20,ax
c0002935:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002939:	e9 0c 02 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c000293e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002944:	e8 12 f2 ff ff       	call   c0001b5b <ld_word>
c0002949:	66 3d 00 01          	cmp    ax,0x100
c000294d:	0f 85 60 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002953:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000295a:	0f 85 53 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002960:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002966:	e8 15 f2 ff ff       	call   c0001b80 <ld_qword>
c000296b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000296f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002973:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002979:	e8 ea f1 ff ff       	call   c0001b68 <ld_dword>
c000297e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002981:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002987:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000298a:	fe c8                	dec    al
c000298c:	0f 85 21 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002992:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002999:	bb 01 00 00 00       	mov    ebx,0x1
c000299e:	d3 e3                	shl    ebx,cl
c00029a0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029a4:	66 85 db             	test   bx,bx
c00029a7:	0f 84 06 fd ff ff    	je     c00026b3 <mount_volume+0xc8>
c00029ad:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029b3:	e8 b0 f1 ff ff       	call   c0001b68 <ld_dword>
c00029b8:	89 c6                	mov    esi,eax
c00029ba:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029bf:	0f 87 ee fc ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00029c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c9:	8d 40 02             	lea    eax,[eax+0x2]
c00029cc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029cf:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029d6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029df:	e8 84 f1 ff ff       	call   c0001b68 <ld_dword>
c00029e4:	31 d2                	xor    edx,edx
c00029e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029ea:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029f6:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f9:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029fc:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a02:	e8 61 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a07:	31 d2                	xor    edx,edx
c0002a09:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a11:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a15:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a18:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a1b:	0f b7 c3             	movzx  eax,bx
c0002a1e:	31 d2                	xor    edx,edx
c0002a20:	0f af f0             	imul   esi,eax
c0002a23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a27:	89 f0                	mov    eax,esi
c0002a29:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a2d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a31:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a35:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a39:	39 c1                	cmp    ecx,eax
c0002a3b:	89 df                	mov    edi,ebx
c0002a3d:	19 d7                	sbb    edi,edx
c0002a3f:	0f 82 6e fc ff ff    	jb     c00026b3 <mount_volume+0xc8>
c0002a45:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a4b:	31 db                	xor    ebx,ebx
c0002a4d:	e8 16 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a52:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a59:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a64:	85 db                	test   ebx,ebx
c0002a66:	75 39                	jne    c0002aa1 <mount_volume+0x4b6>
c0002a68:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a6c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a70:	0f 86 3d fc ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002a76:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a79:	31 ff                	xor    edi,edi
c0002a7b:	89 e8                	mov    eax,ebp
c0002a7d:	e8 72 f3 ff ff       	call   c0001df4 <clst2sect>
c0002a82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a86:	01 c6                	add    esi,eax
c0002a88:	89 e8                	mov    eax,ebp
c0002a8a:	11 d7                	adc    edi,edx
c0002a8c:	89 f2                	mov    edx,esi
c0002a8e:	89 f9                	mov    ecx,edi
c0002a90:	e8 a4 f8 ff ff       	call   c0002339 <move_window>
c0002a95:	85 c0                	test   eax,eax
c0002a97:	0f 85 07 fc ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002a9d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002aa1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002aa6:	74 0b                	je     c0002ab3 <mount_volume+0x4c8>
c0002aa8:	83 c3 20             	add    ebx,0x20
c0002aab:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ab1:	eb b1                	jmp    c0002a64 <mount_volume+0x479>
c0002ab3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ab6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aba:	e8 a9 f0 ff ff       	call   c0001b68 <ld_dword>
c0002abf:	89 c3                	mov    ebx,eax
c0002ac1:	83 f8 01             	cmp    eax,0x1
c0002ac4:	0f 86 e9 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002aca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002acd:	0f 86 e0 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002ad3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ad6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ada:	0f af c2             	imul   eax,edx
c0002add:	31 d2                	xor    edx,edx
c0002adf:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ae2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002ae5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002aeb:	31 c9                	xor    ecx,ecx
c0002aed:	89 da                	mov    edx,ebx
c0002aef:	89 e8                	mov    eax,ebp
c0002af1:	c1 ea 07             	shr    edx,0x7
c0002af4:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002af7:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002afa:	e8 3a f8 ff ff       	call   c0002339 <move_window>
c0002aff:	85 c0                	test   eax,eax
c0002b01:	0f 85 9d fb ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002b07:	89 d8                	mov    eax,ebx
c0002b09:	83 e0 7f             	and    eax,0x7f
c0002b0c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b0f:	e8 54 f0 ff ff       	call   c0001b68 <ld_dword>
c0002b14:	83 f8 ff             	cmp    eax,0xffffffff
c0002b17:	74 0a                	je     c0002b23 <mount_volume+0x538>
c0002b19:	43                   	inc    ebx
c0002b1a:	39 d8                	cmp    eax,ebx
c0002b1c:	74 cd                	je     c0002aeb <mount_volume+0x500>
c0002b1e:	e9 90 fb ff ff       	jmp    c00026b3 <mount_volume+0xc8>
c0002b23:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b2a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b31:	bb 04 00 00 00       	mov    ebx,0x4
c0002b36:	e9 e8 fd ff ff       	jmp    c0002923 <mount_volume+0x338>
c0002b3b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b40:	19 db                	sbb    ebx,ebx
c0002b42:	83 c3 02             	add    ebx,0x2
c0002b45:	e9 93 fc ff ff       	jmp    c00027dd <mount_volume+0x1f2>
c0002b4a:	83 c4 3c             	add    esp,0x3c
c0002b4d:	89 d8                	mov    eax,ebx
c0002b4f:	5b                   	pop    ebx
c0002b50:	5e                   	pop    esi
c0002b51:	5f                   	pop    edi
c0002b52:	5d                   	pop    ebp
c0002b53:	c3                   	ret    

c0002b54 <find_bitmap>:
c0002b54:	55                   	push   ebp
c0002b55:	57                   	push   edi
c0002b56:	89 c7                	mov    edi,eax
c0002b58:	56                   	push   esi
c0002b59:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b5c:	53                   	push   ebx
c0002b5d:	83 ec 1c             	sub    esp,0x1c
c0002b60:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b63:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b67:	83 e8 02             	sub    eax,0x2
c0002b6a:	39 f0                	cmp    eax,esi
c0002b6c:	77 02                	ja     c0002b70 <find_bitmap+0x1c>
c0002b6e:	31 f6                	xor    esi,esi
c0002b70:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b74:	89 f3                	mov    ebx,esi
c0002b76:	31 ed                	xor    ebp,ebp
c0002b78:	31 c9                	xor    ecx,ecx
c0002b7a:	89 da                	mov    edx,ebx
c0002b7c:	89 f8                	mov    eax,edi
c0002b7e:	c1 ea 0c             	shr    edx,0xc
c0002b81:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b84:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b87:	e8 ad f7 ff ff       	call   c0002339 <move_window>
c0002b8c:	85 c0                	test   eax,eax
c0002b8e:	75 68                	jne    c0002bf8 <find_bitmap+0xa4>
c0002b90:	89 da                	mov    edx,ebx
c0002b92:	89 d9                	mov    ecx,ebx
c0002b94:	c1 ea 03             	shr    edx,0x3
c0002b97:	83 e1 07             	and    ecx,0x7
c0002b9a:	b8 01 00 00 00       	mov    eax,0x1
c0002b9f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ba5:	d3 e0                	shl    eax,cl
c0002ba7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002baa:	83 e9 02             	sub    ecx,0x2
c0002bad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bb1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bb5:	43                   	inc    ebx
c0002bb6:	21 c1                	and    ecx,eax
c0002bb8:	d1 e0                	shl    eax,1
c0002bba:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bbe:	77 09                	ja     c0002bc9 <find_bitmap+0x75>
c0002bc0:	31 db                	xor    ebx,ebx
c0002bc2:	ba 00 02 00 00       	mov    edx,0x200
c0002bc7:	31 c0                	xor    eax,eax
c0002bc9:	84 c9                	test   cl,cl
c0002bcb:	75 10                	jne    c0002bdd <find_bitmap+0x89>
c0002bcd:	45                   	inc    ebp
c0002bce:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bd2:	75 0f                	jne    c0002be3 <find_bitmap+0x8f>
c0002bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd8:	83 c0 02             	add    eax,0x2
c0002bdb:	eb 22                	jmp    c0002bff <find_bitmap+0xab>
c0002bdd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002be1:	31 ed                	xor    ebp,ebp
c0002be3:	39 de                	cmp    esi,ebx
c0002be5:	74 16                	je     c0002bfd <find_bitmap+0xa9>
c0002be7:	84 c0                	test   al,al
c0002be9:	75 c6                	jne    c0002bb1 <find_bitmap+0x5d>
c0002beb:	42                   	inc    edx
c0002bec:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bf2:	77 84                	ja     c0002b78 <find_bitmap+0x24>
c0002bf4:	b0 01                	mov    al,0x1
c0002bf6:	eb b9                	jmp    c0002bb1 <find_bitmap+0x5d>
c0002bf8:	83 c8 ff             	or     eax,0xffffffff
c0002bfb:	eb 02                	jmp    c0002bff <find_bitmap+0xab>
c0002bfd:	31 c0                	xor    eax,eax
c0002bff:	83 c4 1c             	add    esp,0x1c
c0002c02:	5b                   	pop    ebx
c0002c03:	5e                   	pop    esi
c0002c04:	5f                   	pop    edi
c0002c05:	5d                   	pop    ebp
c0002c06:	c3                   	ret    

c0002c07 <change_bitmap>:
c0002c07:	55                   	push   ebp
c0002c08:	89 cd                	mov    ebp,ecx
c0002c0a:	57                   	push   edi
c0002c0b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c0e:	56                   	push   esi
c0002c0f:	89 c7                	mov    edi,eax
c0002c11:	53                   	push   ebx
c0002c12:	89 c8                	mov    eax,ecx
c0002c14:	83 ec 1c             	sub    esp,0x1c
c0002c17:	31 d2                	xor    edx,edx
c0002c19:	89 ce                	mov    esi,ecx
c0002c1b:	c1 e8 0c             	shr    eax,0xc
c0002c1e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c23:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c26:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c29:	c1 ee 03             	shr    esi,0x3
c0002c2c:	83 e1 07             	and    ecx,0x7
c0002c2f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c35:	d3 e3                	shl    ebx,cl
c0002c37:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c3b:	89 c1                	mov    ecx,eax
c0002c3d:	89 d3                	mov    ebx,edx
c0002c3f:	83 c1 01             	add    ecx,0x1
c0002c42:	83 d3 00             	adc    ebx,0x0
c0002c45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c49:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c4d:	89 d1                	mov    ecx,edx
c0002c4f:	89 c2                	mov    edx,eax
c0002c51:	89 f8                	mov    eax,edi
c0002c53:	e8 e1 f6 ff ff       	call   c0002339 <move_window>
c0002c58:	89 c1                	mov    ecx,eax
c0002c5a:	85 c0                	test   eax,eax
c0002c5c:	75 48                	jne    c0002ca6 <change_bitmap+0x9f>
c0002c5e:	31 d2                	xor    edx,edx
c0002c60:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c64:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c68:	0f 95 c2             	setne  dl
c0002c6b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c6f:	74 3c                	je     c0002cad <change_bitmap+0xa6>
c0002c71:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c75:	4d                   	dec    ebp
c0002c76:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c7e:	74 32                	je     c0002cb2 <change_bitmap+0xab>
c0002c80:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c84:	75 d8                	jne    c0002c5e <change_bitmap+0x57>
c0002c86:	8d 46 01             	lea    eax,[esi+0x1]
c0002c89:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c8e:	89 c3                	mov    ebx,eax
c0002c90:	31 f6                	xor    esi,esi
c0002c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c9a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ca0:	74 99                	je     c0002c3b <change_bitmap+0x34>
c0002ca2:	89 de                	mov    esi,ebx
c0002ca4:	eb b8                	jmp    c0002c5e <change_bitmap+0x57>
c0002ca6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cab:	eb 05                	jmp    c0002cb2 <change_bitmap+0xab>
c0002cad:	b9 02 00 00 00       	mov    ecx,0x2
c0002cb2:	83 c4 1c             	add    esp,0x1c
c0002cb5:	89 c8                	mov    eax,ecx
c0002cb7:	5b                   	pop    ebx
c0002cb8:	5e                   	pop    esi
c0002cb9:	5f                   	pop    edi
c0002cba:	5d                   	pop    ebp
c0002cbb:	c3                   	ret    

c0002cbc <put_fat>:
c0002cbc:	83 fa 01             	cmp    edx,0x1
c0002cbf:	0f 86 7b 01 00 00    	jbe    c0002e40 <put_fat+0x184>
c0002cc5:	55                   	push   ebp
c0002cc6:	57                   	push   edi
c0002cc7:	89 cf                	mov    edi,ecx
c0002cc9:	56                   	push   esi
c0002cca:	b9 02 00 00 00       	mov    ecx,0x2
c0002ccf:	53                   	push   ebx
c0002cd0:	89 c6                	mov    esi,eax
c0002cd2:	83 ec 1c             	sub    esp,0x1c
c0002cd5:	89 d3                	mov    ebx,edx
c0002cd7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cda:	0f 86 68 01 00 00    	jbe    c0002e48 <put_fat+0x18c>
c0002ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0002ce2:	3c 02                	cmp    al,0x2
c0002ce4:	0f 84 c7 00 00 00    	je     c0002db1 <put_fat+0xf5>
c0002cea:	77 09                	ja     c0002cf5 <put_fat+0x39>
c0002cec:	fe c8                	dec    al
c0002cee:	74 17                	je     c0002d07 <put_fat+0x4b>
c0002cf0:	e9 53 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002cf5:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfa:	3c 04                	cmp    al,0x4
c0002cfc:	0f 86 e1 00 00 00    	jbe    c0002de3 <put_fat+0x127>
c0002d02:	e9 41 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002d07:	89 d5                	mov    ebp,edx
c0002d09:	31 c9                	xor    ecx,ecx
c0002d0b:	d1 ed                	shr    ebp,1
c0002d0d:	89 f0                	mov    eax,esi
c0002d0f:	01 d5                	add    ebp,edx
c0002d11:	89 ea                	mov    edx,ebp
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d19:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d1c:	e8 18 f6 ff ff       	call   c0002339 <move_window>
c0002d21:	89 c1                	mov    ecx,eax
c0002d23:	85 c0                	test   eax,eax
c0002d25:	0f 85 1d 01 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d2b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d32:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d35:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d3f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d43:	89 f8                	mov    eax,edi
c0002d45:	83 e3 01             	and    ebx,0x1
c0002d48:	74 0d                	je     c0002d57 <put_fat+0x9b>
c0002d4a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d4d:	89 fa                	mov    edx,edi
c0002d4f:	83 e0 0f             	and    eax,0xf
c0002d52:	c1 e2 04             	shl    edx,0x4
c0002d55:	09 d0                	or     eax,edx
c0002d57:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d5e:	31 c9                	xor    ecx,ecx
c0002d60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d64:	c1 ea 09             	shr    edx,0x9
c0002d67:	89 f0                	mov    eax,esi
c0002d69:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d6c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d6f:	e8 c5 f5 ff ff       	call   c0002339 <move_window>
c0002d74:	89 c1                	mov    ecx,eax
c0002d76:	85 c0                	test   eax,eax
c0002d78:	0f 85 ca 00 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d7e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d82:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d88:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d8c:	85 db                	test   ebx,ebx
c0002d8e:	74 07                	je     c0002d97 <put_fat+0xdb>
c0002d90:	c1 ef 04             	shr    edi,0x4
c0002d93:	89 fa                	mov    edx,edi
c0002d95:	eb 0e                	jmp    c0002da5 <put_fat+0xe9>
c0002d97:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d9a:	c1 ef 08             	shr    edi,0x8
c0002d9d:	83 e2 f0             	and    edx,0xfffffff0
c0002da0:	83 e7 0f             	and    edi,0xf
c0002da3:	09 fa                	or     edx,edi
c0002da5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dac:	e9 97 00 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002db1:	31 c9                	xor    ecx,ecx
c0002db3:	c1 ea 08             	shr    edx,0x8
c0002db6:	89 f0                	mov    eax,esi
c0002db8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dbb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dbe:	e8 76 f5 ff ff       	call   c0002339 <move_window>
c0002dc3:	89 c1                	mov    ecx,eax
c0002dc5:	85 c0                	test   eax,eax
c0002dc7:	75 7f                	jne    c0002e48 <put_fat+0x18c>
c0002dc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dcd:	01 db                	add    ebx,ebx
c0002dcf:	0f b7 d7             	movzx  edx,di
c0002dd2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ddc:	e8 ec ed ff ff       	call   c0001bcd <st_word>
c0002de1:	eb 53                	jmp    c0002e36 <put_fat+0x17a>
c0002de3:	31 c9                	xor    ecx,ecx
c0002de5:	c1 ea 07             	shr    edx,0x7
c0002de8:	89 f0                	mov    eax,esi
c0002dea:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ded:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002df0:	e8 44 f5 ff ff       	call   c0002339 <move_window>
c0002df5:	89 c1                	mov    ecx,eax
c0002df7:	85 c0                	test   eax,eax
c0002df9:	75 4d                	jne    c0002e48 <put_fat+0x18c>
c0002dfb:	c1 e3 02             	shl    ebx,0x2
c0002dfe:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e04:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e07:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e0b:	74 1c                	je     c0002e29 <put_fat+0x16d>
c0002e0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e11:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e17:	89 d8                	mov    eax,ebx
c0002e19:	e8 4a ed ff ff       	call   c0001b68 <ld_dword>
c0002e1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e22:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e27:	09 c7                	or     edi,eax
c0002e29:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e2d:	89 fa                	mov    edx,edi
c0002e2f:	89 d8                	mov    eax,ebx
c0002e31:	e8 9b ed ff ff       	call   c0001bd1 <st_dword>
c0002e36:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e3e:	eb 08                	jmp    c0002e48 <put_fat+0x18c>
c0002e40:	b9 02 00 00 00       	mov    ecx,0x2
c0002e45:	89 c8                	mov    eax,ecx
c0002e47:	c3                   	ret    
c0002e48:	83 c4 1c             	add    esp,0x1c
c0002e4b:	89 c8                	mov    eax,ecx
c0002e4d:	5b                   	pop    ebx
c0002e4e:	5e                   	pop    esi
c0002e4f:	5f                   	pop    edi
c0002e50:	5d                   	pop    ebp
c0002e51:	c3                   	ret    

c0002e52 <fill_last_frag>:
c0002e52:	57                   	push   edi
c0002e53:	89 cf                	mov    edi,ecx
c0002e55:	56                   	push   esi
c0002e56:	89 d6                	mov    esi,edx
c0002e58:	53                   	push   ebx
c0002e59:	89 c3                	mov    ebx,eax
c0002e5b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e5e:	85 c0                	test   eax,eax
c0002e60:	74 21                	je     c0002e83 <fill_last_frag+0x31>
c0002e62:	89 f9                	mov    ecx,edi
c0002e64:	83 f8 01             	cmp    eax,0x1
c0002e67:	76 05                	jbe    c0002e6e <fill_last_frag+0x1c>
c0002e69:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e6c:	29 c1                	sub    ecx,eax
c0002e6e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e71:	29 c2                	sub    edx,eax
c0002e73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e75:	e8 42 fe ff ff       	call   c0002cbc <put_fat>
c0002e7a:	85 c0                	test   eax,eax
c0002e7c:	75 05                	jne    c0002e83 <fill_last_frag+0x31>
c0002e7e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e81:	eb d8                	jmp    c0002e5b <fill_last_frag+0x9>
c0002e83:	5b                   	pop    ebx
c0002e84:	5e                   	pop    esi
c0002e85:	5f                   	pop    edi
c0002e86:	c3                   	ret    

c0002e87 <fill_first_frag>:
c0002e87:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e8b:	75 2d                	jne    c0002eba <fill_first_frag+0x33>
c0002e8d:	57                   	push   edi
c0002e8e:	56                   	push   esi
c0002e8f:	53                   	push   ebx
c0002e90:	89 c3                	mov    ebx,eax
c0002e92:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e95:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e98:	01 d7                	add    edi,edx
c0002e9a:	39 fa                	cmp    edx,edi
c0002e9c:	74 14                	je     c0002eb2 <fill_first_frag+0x2b>
c0002e9e:	8d 72 01             	lea    esi,[edx+0x1]
c0002ea1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ea3:	89 f1                	mov    ecx,esi
c0002ea5:	e8 12 fe ff ff       	call   c0002cbc <put_fat>
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	85 c0                	test   eax,eax
c0002eae:	74 ea                	je     c0002e9a <fill_first_frag+0x13>
c0002eb0:	eb 0b                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eb2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eb6:	31 c0                	xor    eax,eax
c0002eb8:	eb 03                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eba:	31 c0                	xor    eax,eax
c0002ebc:	c3                   	ret    
c0002ebd:	5b                   	pop    ebx
c0002ebe:	5e                   	pop    esi
c0002ebf:	5f                   	pop    edi
c0002ec0:	c3                   	ret    

c0002ec1 <get_fat>:
c0002ec1:	83 fa 01             	cmp    edx,0x1
c0002ec4:	0f 86 db 01 00 00    	jbe    c00030a5 <get_fat+0x1e4>
c0002eca:	55                   	push   ebp
c0002ecb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ed0:	57                   	push   edi
c0002ed1:	56                   	push   esi
c0002ed2:	53                   	push   ebx
c0002ed3:	83 ec 1c             	sub    esp,0x1c
c0002ed6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002edb:	0f 86 cc 01 00 00    	jbe    c00030ad <get_fat+0x1ec>
c0002ee1:	89 c3                	mov    ebx,eax
c0002ee3:	89 d6                	mov    esi,edx
c0002ee5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ee7:	3c 02                	cmp    al,0x2
c0002ee9:	0f 84 99 00 00 00    	je     c0002f88 <get_fat+0xc7>
c0002eef:	77 09                	ja     c0002efa <get_fat+0x39>
c0002ef1:	fe c8                	dec    al
c0002ef3:	74 1a                	je     c0002f0f <get_fat+0x4e>
c0002ef5:	e9 b3 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002efa:	3c 03                	cmp    al,0x3
c0002efc:	0f 84 b5 00 00 00    	je     c0002fb7 <get_fat+0xf6>
c0002f02:	3c 04                	cmp    al,0x4
c0002f04:	0f 84 e3 00 00 00    	je     c0002fed <get_fat+0x12c>
c0002f0a:	e9 9e 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f0f:	89 d3                	mov    ebx,edx
c0002f11:	31 c9                	xor    ecx,ecx
c0002f13:	d1 eb                	shr    ebx,1
c0002f15:	89 f8                	mov    eax,edi
c0002f17:	01 d3                	add    ebx,edx
c0002f19:	89 da                	mov    edx,ebx
c0002f1b:	c1 ea 09             	shr    edx,0x9
c0002f1e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f21:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f24:	e8 10 f4 ff ff       	call   c0002339 <move_window>
c0002f29:	85 c0                	test   eax,eax
c0002f2b:	74 08                	je     c0002f35 <get_fat+0x74>
c0002f2d:	83 c9 ff             	or     ecx,0xffffffff
c0002f30:	e9 78 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f35:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f38:	31 c9                	xor    ecx,ecx
c0002f3a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f40:	89 ea                	mov    edx,ebp
c0002f42:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f46:	c1 ea 09             	shr    edx,0x9
c0002f49:	89 f8                	mov    eax,edi
c0002f4b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f4e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f51:	e8 e3 f3 ff ff       	call   c0002339 <move_window>
c0002f56:	85 c0                	test   eax,eax
c0002f58:	75 d3                	jne    c0002f2d <get_fat+0x6c>
c0002f5a:	0f b6 c3             	movzx  eax,bl
c0002f5d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f63:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f68:	c1 e3 08             	shl    ebx,0x8
c0002f6b:	09 c3                	or     ebx,eax
c0002f6d:	89 d9                	mov    ecx,ebx
c0002f6f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f75:	83 e6 01             	and    esi,0x1
c0002f78:	0f 84 2f 01 00 00    	je     c00030ad <get_fat+0x1ec>
c0002f7e:	89 d9                	mov    ecx,ebx
c0002f80:	c1 e9 04             	shr    ecx,0x4
c0002f83:	e9 25 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f88:	31 c9                	xor    ecx,ecx
c0002f8a:	c1 ea 08             	shr    edx,0x8
c0002f8d:	89 f8                	mov    eax,edi
c0002f8f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f92:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f95:	e8 9f f3 ff ff       	call   c0002339 <move_window>
c0002f9a:	85 c0                	test   eax,eax
c0002f9c:	75 8f                	jne    c0002f2d <get_fat+0x6c>
c0002f9e:	01 f6                	add    esi,esi
c0002fa0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fa6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002faa:	e8 ac eb ff ff       	call   c0001b5b <ld_word>
c0002faf:	0f b7 c8             	movzx  ecx,ax
c0002fb2:	e9 f6 00 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002fb7:	31 c9                	xor    ecx,ecx
c0002fb9:	c1 ea 07             	shr    edx,0x7
c0002fbc:	89 f8                	mov    eax,edi
c0002fbe:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fc1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fc4:	e8 70 f3 ff ff       	call   c0002339 <move_window>
c0002fc9:	85 c0                	test   eax,eax
c0002fcb:	0f 85 5c ff ff ff    	jne    c0002f2d <get_fat+0x6c>
c0002fd1:	c1 e6 02             	shl    esi,0x2
c0002fd4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fda:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fde:	e8 85 eb ff ff       	call   c0001b68 <ld_dword>
c0002fe3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe8:	e9 b4 00 00 00       	jmp    c00030a1 <get_fat+0x1e0>
c0002fed:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ff0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff3:	89 d1                	mov    ecx,edx
c0002ff5:	09 c1                	or     ecx,eax
c0002ff7:	74 06                	je     c0002fff <get_fat+0x13e>
c0002ff9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ffd:	75 0f                	jne    c000300e <get_fat+0x14d>
c0002fff:	b9 01 00 00 00       	mov    ecx,0x1
c0003004:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003008:	0f 85 9f 00 00 00    	jne    c00030ad <get_fat+0x1ec>
c000300e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003012:	89 f5                	mov    ebp,esi
c0003014:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003019:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000301c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000301f:	80 f9 02             	cmp    cl,0x2
c0003022:	75 35                	jne    c0003059 <get_fat+0x198>
c0003024:	83 c0 ff             	add    eax,0xffffffff
c0003027:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000302c:	83 d2 ff             	adc    edx,0xffffffff
c000302f:	31 db                	xor    ebx,ebx
c0003031:	0f ac d0 09          	shrd   eax,edx,0x9
c0003035:	53                   	push   ebx
c0003036:	c1 ea 09             	shr    edx,0x9
c0003039:	51                   	push   ecx
c000303a:	52                   	push   edx
c000303b:	50                   	push   eax
c000303c:	e8 43 f5 01 00       	call   c0022584 <__udivdi3>
c0003041:	83 c4 10             	add    esp,0x10
c0003044:	b9 01 00 00 00       	mov    ecx,0x1
c0003049:	39 c5                	cmp    ebp,eax
c000304b:	77 60                	ja     c00030ad <get_fat+0x1ec>
c000304d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003052:	74 59                	je     c00030ad <get_fat+0x1ec>
c0003054:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003057:	eb 54                	jmp    c00030ad <get_fat+0x1ec>
c0003059:	80 f9 03             	cmp    cl,0x3
c000305c:	75 05                	jne    c0003063 <get_fat+0x1a2>
c000305e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003061:	77 f1                	ja     c0003054 <get_fat+0x193>
c0003063:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003068:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000306c:	75 3f                	jne    c00030ad <get_fat+0x1ec>
c000306e:	31 c9                	xor    ecx,ecx
c0003070:	89 f2                	mov    edx,esi
c0003072:	89 f8                	mov    eax,edi
c0003074:	c1 ea 07             	shr    edx,0x7
c0003077:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000307a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307d:	e8 b7 f2 ff ff       	call   c0002339 <move_window>
c0003082:	85 c0                	test   eax,eax
c0003084:	0f 85 a3 fe ff ff    	jne    c0002f2d <get_fat+0x6c>
c000308a:	c1 e6 02             	shl    esi,0x2
c000308d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003093:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003097:	e8 cc ea ff ff       	call   c0001b68 <ld_dword>
c000309c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030a1:	89 c1                	mov    ecx,eax
c00030a3:	eb 08                	jmp    c00030ad <get_fat+0x1ec>
c00030a5:	b9 01 00 00 00       	mov    ecx,0x1
c00030aa:	89 c8                	mov    eax,ecx
c00030ac:	c3                   	ret    
c00030ad:	83 c4 1c             	add    esp,0x1c
c00030b0:	89 c8                	mov    eax,ecx
c00030b2:	5b                   	pop    ebx
c00030b3:	5e                   	pop    esi
c00030b4:	5f                   	pop    edi
c00030b5:	5d                   	pop    ebp
c00030b6:	c3                   	ret    

c00030b7 <dir_sdi>:
c00030b7:	55                   	push   ebp
c00030b8:	57                   	push   edi
c00030b9:	56                   	push   esi
c00030ba:	53                   	push   ebx
c00030bb:	89 c3                	mov    ebx,eax
c00030bd:	83 ec 1c             	sub    esp,0x1c
c00030c0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030c2:	31 c0                	xor    eax,eax
c00030c4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030c7:	0f 94 c0             	sete   al
c00030ca:	48                   	dec    eax
c00030cb:	25 00 00 20 f0       	and    eax,0xf0200000
c00030d0:	05 00 00 00 10       	add    eax,0x10000000
c00030d5:	39 d0                	cmp    eax,edx
c00030d7:	77 0a                	ja     c00030e3 <dir_sdi+0x2c>
c00030d9:	b8 02 00 00 00       	mov    eax,0x2
c00030de:	e9 c4 00 00 00       	jmp    c00031a7 <dir_sdi+0xf0>
c00030e3:	89 d6                	mov    esi,edx
c00030e5:	f6 c2 1f             	test   dl,0x1f
c00030e8:	75 ef                	jne    c00030d9 <dir_sdi+0x22>
c00030ea:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030ed:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030f0:	85 c9                	test   ecx,ecx
c00030f2:	75 2d                	jne    c0003121 <dir_sdi+0x6a>
c00030f4:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030f7:	77 1b                	ja     c0003114 <dir_sdi+0x5d>
c00030f9:	89 f2                	mov    edx,esi
c00030fb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030ff:	c1 ea 05             	shr    edx,0x5
c0003102:	39 c2                	cmp    edx,eax
c0003104:	73 d3                	jae    c00030d9 <dir_sdi+0x22>
c0003106:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003109:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000310c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000310f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003112:	eb 4b                	jmp    c000315f <dir_sdi+0xa8>
c0003114:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003117:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000311b:	85 c0                	test   eax,eax
c000311d:	74 da                	je     c00030f9 <dir_sdi+0x42>
c000311f:	89 c1                	mov    ecx,eax
c0003121:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003125:	c1 e5 09             	shl    ebp,0x9
c0003128:	89 ca                	mov    edx,ecx
c000312a:	39 ee                	cmp    esi,ebp
c000312c:	72 1c                	jb     c000314a <dir_sdi+0x93>
c000312e:	89 d8                	mov    eax,ebx
c0003130:	e8 8c fd ff ff       	call   c0002ec1 <get_fat>
c0003135:	89 c1                	mov    ecx,eax
c0003137:	83 f8 ff             	cmp    eax,0xffffffff
c000313a:	74 66                	je     c00031a2 <dir_sdi+0xeb>
c000313c:	83 f8 01             	cmp    eax,0x1
c000313f:	76 98                	jbe    c00030d9 <dir_sdi+0x22>
c0003141:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003144:	76 93                	jbe    c00030d9 <dir_sdi+0x22>
c0003146:	29 ee                	sub    esi,ebp
c0003148:	eb de                	jmp    c0003128 <dir_sdi+0x71>
c000314a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000314e:	89 f8                	mov    eax,edi
c0003150:	e8 9f ec ff ff       	call   c0001df4 <clst2sect>
c0003155:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003159:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000315c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000315f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003162:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003165:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003168:	89 d1                	mov    ecx,edx
c000316a:	09 c1                	or     ecx,eax
c000316c:	0f 84 67 ff ff ff    	je     c00030d9 <dir_sdi+0x22>
c0003172:	89 f1                	mov    ecx,esi
c0003174:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000317c:	c1 e9 09             	shr    ecx,0x9
c000317f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003183:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003187:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000318b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000318e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003194:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003197:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000319e:	31 c0                	xor    eax,eax
c00031a0:	eb 05                	jmp    c00031a7 <dir_sdi+0xf0>
c00031a2:	b8 01 00 00 00       	mov    eax,0x1
c00031a7:	83 c4 1c             	add    esp,0x1c
c00031aa:	5b                   	pop    ebx
c00031ab:	5e                   	pop    esi
c00031ac:	5f                   	pop    edi
c00031ad:	5d                   	pop    ebp
c00031ae:	c3                   	ret    

c00031af <create_chain>:
c00031af:	55                   	push   ebp
c00031b0:	89 c5                	mov    ebp,eax
c00031b2:	57                   	push   edi
c00031b3:	56                   	push   esi
c00031b4:	53                   	push   ebx
c00031b5:	83 ec 1c             	sub    esp,0x1c
c00031b8:	85 d2                	test   edx,edx
c00031ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031be:	8b 30                	mov    esi,DWORD PTR [eax]
c00031c0:	75 0e                	jne    c00031d0 <create_chain+0x21>
c00031c2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031c5:	85 ff                	test   edi,edi
c00031c7:	74 39                	je     c0003202 <create_chain+0x53>
c00031c9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031cc:	77 39                	ja     c0003207 <create_chain+0x58>
c00031ce:	eb 32                	jmp    c0003202 <create_chain+0x53>
c00031d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d4:	e8 e8 fc ff ff       	call   c0002ec1 <get_fat>
c00031d9:	89 c3                	mov    ebx,eax
c00031db:	83 f8 01             	cmp    eax,0x1
c00031de:	77 0a                	ja     c00031ea <create_chain+0x3b>
c00031e0:	bb 01 00 00 00       	mov    ebx,0x1
c00031e5:	e9 ba 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c00031ea:	83 f8 ff             	cmp    eax,0xffffffff
c00031ed:	0f 84 62 01 00 00    	je     c0003355 <create_chain+0x1a6>
c00031f3:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031f6:	0f 87 a8 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c00031fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003200:	eb 05                	jmp    c0003207 <create_chain+0x58>
c0003202:	bf 01 00 00 00       	mov    edi,0x1
c0003207:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000320b:	75 07                	jne    c0003214 <create_chain+0x65>
c000320d:	31 db                	xor    ebx,ebx
c000320f:	e9 90 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c0003214:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003217:	75 74                	jne    c000328d <create_chain+0xde>
c0003219:	b9 01 00 00 00       	mov    ecx,0x1
c000321e:	89 fa                	mov    edx,edi
c0003220:	89 f0                	mov    eax,esi
c0003222:	e8 2d f9 ff ff       	call   c0002b54 <find_bitmap>
c0003227:	89 c3                	mov    ebx,eax
c0003229:	8d 40 ff             	lea    eax,[eax-0x1]
c000322c:	83 f8 fd             	cmp    eax,0xfffffffd
c000322f:	0f 87 6f 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c0003235:	83 ec 0c             	sub    esp,0xc
c0003238:	b9 01 00 00 00       	mov    ecx,0x1
c000323d:	6a 01                	push   0x1
c000323f:	89 da                	mov    edx,ebx
c0003241:	89 f0                	mov    eax,esi
c0003243:	e8 bf f9 ff ff       	call   c0002c07 <change_bitmap>
c0003248:	83 c4 10             	add    esp,0x10
c000324b:	83 f8 02             	cmp    eax,0x2
c000324e:	74 90                	je     c00031e0 <create_chain+0x31>
c0003250:	83 f8 01             	cmp    eax,0x1
c0003253:	0f 84 fc 00 00 00    	je     c0003355 <create_chain+0x1a6>
c0003259:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000325e:	75 09                	jne    c0003269 <create_chain+0xba>
c0003260:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003264:	e9 0c 01 00 00       	jmp    c0003375 <create_chain+0x1c6>
c0003269:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000326d:	0f 85 e7 00 00 00    	jne    c000335a <create_chain+0x1ab>
c0003273:	8d 57 01             	lea    edx,[edi+0x1]
c0003276:	39 da                	cmp    edx,ebx
c0003278:	0f 84 f7 00 00 00    	je     c0003375 <create_chain+0x1c6>
c000327e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003281:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003285:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003288:	e9 cd 00 00 00       	jmp    c000335a <create_chain+0x1ab>
c000328d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003291:	75 41                	jne    c00032d4 <create_chain+0x125>
c0003293:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003296:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003299:	77 05                	ja     c00032a0 <create_chain+0xf1>
c000329b:	bb 02 00 00 00       	mov    ebx,0x2
c00032a0:	89 da                	mov    edx,ebx
c00032a2:	89 e8                	mov    eax,ebp
c00032a4:	e8 18 fc ff ff       	call   c0002ec1 <get_fat>
c00032a9:	83 f8 01             	cmp    eax,0x1
c00032ac:	0f 84 2e ff ff ff    	je     c00031e0 <create_chain+0x31>
c00032b2:	83 f8 ff             	cmp    eax,0xffffffff
c00032b5:	0f 84 9a 00 00 00    	je     c0003355 <create_chain+0x1a6>
c00032bb:	85 c0                	test   eax,eax
c00032bd:	74 11                	je     c00032d0 <create_chain+0x121>
c00032bf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032c2:	83 f8 01             	cmp    eax,0x1
c00032c5:	76 0d                	jbe    c00032d4 <create_chain+0x125>
c00032c7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032ca:	76 08                	jbe    c00032d4 <create_chain+0x125>
c00032cc:	89 c7                	mov    edi,eax
c00032ce:	eb 04                	jmp    c00032d4 <create_chain+0x125>
c00032d0:	85 db                	test   ebx,ebx
c00032d2:	75 38                	jne    c000330c <create_chain+0x15d>
c00032d4:	89 fb                	mov    ebx,edi
c00032d6:	43                   	inc    ebx
c00032d7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032da:	77 0e                	ja     c00032ea <create_chain+0x13b>
c00032dc:	83 ff 01             	cmp    edi,0x1
c00032df:	0f 86 28 ff ff ff    	jbe    c000320d <create_chain+0x5e>
c00032e5:	bb 02 00 00 00       	mov    ebx,0x2
c00032ea:	89 da                	mov    edx,ebx
c00032ec:	89 e8                	mov    eax,ebp
c00032ee:	e8 ce fb ff ff       	call   c0002ec1 <get_fat>
c00032f3:	85 c0                	test   eax,eax
c00032f5:	74 15                	je     c000330c <create_chain+0x15d>
c00032f7:	83 f8 01             	cmp    eax,0x1
c00032fa:	0f 84 e0 fe ff ff    	je     c00031e0 <create_chain+0x31>
c0003300:	40                   	inc    eax
c0003301:	74 52                	je     c0003355 <create_chain+0x1a6>
c0003303:	39 fb                	cmp    ebx,edi
c0003305:	75 cf                	jne    c00032d6 <create_chain+0x127>
c0003307:	e9 01 ff ff ff       	jmp    c000320d <create_chain+0x5e>
c000330c:	83 c9 ff             	or     ecx,0xffffffff
c000330f:	89 da                	mov    edx,ebx
c0003311:	89 f0                	mov    eax,esi
c0003313:	e8 a4 f9 ff ff       	call   c0002cbc <put_fat>
c0003318:	85 c0                	test   eax,eax
c000331a:	75 32                	jne    c000334e <create_chain+0x19f>
c000331c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003321:	74 11                	je     c0003334 <create_chain+0x185>
c0003323:	89 d9                	mov    ecx,ebx
c0003325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003329:	89 f0                	mov    eax,esi
c000332b:	e8 8c f9 ff ff       	call   c0002cbc <put_fat>
c0003330:	85 c0                	test   eax,eax
c0003332:	75 1a                	jne    c000334e <create_chain+0x19f>
c0003334:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003337:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000333a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000333d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003340:	39 d0                	cmp    eax,edx
c0003342:	77 04                	ja     c0003348 <create_chain+0x199>
c0003344:	48                   	dec    eax
c0003345:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003348:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000334c:	eb 56                	jmp    c00033a4 <create_chain+0x1f5>
c000334e:	48                   	dec    eax
c000334f:	0f 85 8b fe ff ff    	jne    c00031e0 <create_chain+0x31>
c0003355:	83 cb ff             	or     ebx,0xffffffff
c0003358:	eb 4a                	jmp    c00033a4 <create_chain+0x1f5>
c000335a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003361:	41                   	inc    ecx
c0003362:	39 d9                	cmp    ecx,ebx
c0003364:	75 19                	jne    c000337f <create_chain+0x1d0>
c0003366:	b9 02 00 00 00       	mov    ecx,0x2
c000336b:	85 d2                	test   edx,edx
c000336d:	74 03                	je     c0003372 <create_chain+0x1c3>
c000336f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003372:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003375:	85 c0                	test   eax,eax
c0003377:	0f 85 63 fe ff ff    	jne    c00031e0 <create_chain+0x31>
c000337d:	eb b5                	jmp    c0003334 <create_chain+0x185>
c000337f:	85 d2                	test   edx,edx
c0003381:	75 07                	jne    c000338a <create_chain+0x1db>
c0003383:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000338a:	89 d9                	mov    ecx,ebx
c000338c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003390:	89 e8                	mov    eax,ebp
c0003392:	e8 bb fa ff ff       	call   c0002e52 <fill_last_frag>
c0003397:	85 c0                	test   eax,eax
c0003399:	75 b3                	jne    c000334e <create_chain+0x19f>
c000339b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033a2:	eb 90                	jmp    c0003334 <create_chain+0x185>
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	89 d8                	mov    eax,ebx
c00033a9:	5b                   	pop    ebx
c00033aa:	5e                   	pop    esi
c00033ab:	5f                   	pop    edi
c00033ac:	5d                   	pop    ebp
c00033ad:	c3                   	ret    

c00033ae <remove_chain>:
c00033ae:	55                   	push   ebp
c00033af:	57                   	push   edi
c00033b0:	56                   	push   esi
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	83 fa 01             	cmp    edx,0x1
c00033b8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033bc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033be:	77 0a                	ja     c00033ca <remove_chain+0x1c>
c00033c0:	b8 02 00 00 00       	mov    eax,0x2
c00033c5:	e9 24 01 00 00       	jmp    c00034ee <remove_chain+0x140>
c00033ca:	89 d6                	mov    esi,edx
c00033cc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033cf:	76 ef                	jbe    c00033c0 <remove_chain+0x12>
c00033d1:	89 c7                	mov    edi,eax
c00033d3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d8:	75 06                	jne    c00033e0 <remove_chain+0x32>
c00033da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033de:	eb 54                	jmp    c0003434 <remove_chain+0x86>
c00033e0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033e3:	75 06                	jne    c00033eb <remove_chain+0x3d>
c00033e5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e9:	74 ef                	je     c00033da <remove_chain+0x2c>
c00033eb:	83 c9 ff             	or     ecx,0xffffffff
c00033ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f2:	89 d8                	mov    eax,ebx
c00033f4:	e8 c3 f8 ff ff       	call   c0002cbc <put_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 dd                	je     c00033da <remove_chain+0x2c>
c00033fd:	e9 ec 00 00 00       	jmp    c00034ee <remove_chain+0x140>
c0003402:	83 f8 01             	cmp    eax,0x1
c0003405:	74 b9                	je     c00033c0 <remove_chain+0x12>
c0003407:	83 f8 ff             	cmp    eax,0xffffffff
c000340a:	74 6d                	je     c0003479 <remove_chain+0xcb>
c000340c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000340f:	75 6f                	jne    c0003480 <remove_chain+0xd2>
c0003411:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003414:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003417:	8d 51 fe             	lea    edx,[ecx-0x2]
c000341a:	39 d0                	cmp    eax,edx
c000341c:	73 08                	jae    c0003426 <remove_chain+0x78>
c000341e:	40                   	inc    eax
c000341f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003423:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003426:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003429:	39 e9                	cmp    ecx,ebp
c000342b:	75 64                	jne    c0003491 <remove_chain+0xe3>
c000342d:	89 ee                	mov    esi,ebp
c000342f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003432:	76 0f                	jbe    c0003443 <remove_chain+0x95>
c0003434:	89 f2                	mov    edx,esi
c0003436:	89 f8                	mov    eax,edi
c0003438:	e8 84 fa ff ff       	call   c0002ec1 <get_fat>
c000343d:	89 c5                	mov    ebp,eax
c000343f:	85 c0                	test   eax,eax
c0003441:	75 bf                	jne    c0003402 <remove_chain+0x54>
c0003443:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003446:	0f 85 a0 00 00 00    	jne    c00034ec <remove_chain+0x13e>
c000344c:	eb 6c                	jmp    c00034ba <remove_chain+0x10c>
c000344e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003451:	84 c0                	test   al,al
c0003453:	75 7d                	jne    c00034d2 <remove_chain+0x124>
c0003455:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003458:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000345c:	0f 84 86 00 00 00    	je     c00034e8 <remove_chain+0x13a>
c0003462:	89 da                	mov    edx,ebx
c0003464:	89 f8                	mov    eax,edi
c0003466:	e8 56 fa ff ff       	call   c0002ec1 <get_fat>
c000346b:	83 f8 01             	cmp    eax,0x1
c000346e:	0f 86 4c ff ff ff    	jbe    c00033c0 <remove_chain+0x12>
c0003474:	83 f8 ff             	cmp    eax,0xffffffff
c0003477:	75 4e                	jne    c00034c7 <remove_chain+0x119>
c0003479:	b8 01 00 00 00       	mov    eax,0x1
c000347e:	eb 6e                	jmp    c00034ee <remove_chain+0x140>
c0003480:	31 c9                	xor    ecx,ecx
c0003482:	89 f2                	mov    edx,esi
c0003484:	89 d8                	mov    eax,ebx
c0003486:	e8 31 f8 ff ff       	call   c0002cbc <put_fat>
c000348b:	85 c0                	test   eax,eax
c000348d:	74 82                	je     c0003411 <remove_chain+0x63>
c000348f:	eb 5d                	jmp    c00034ee <remove_chain+0x140>
c0003491:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003494:	75 1b                	jne    c00034b1 <remove_chain+0x103>
c0003496:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000349a:	89 d8                	mov    eax,ebx
c000349c:	83 ec 0c             	sub    esp,0xc
c000349f:	6a 00                	push   0x0
c00034a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034a5:	e8 5d f7 ff ff       	call   c0002c07 <change_bitmap>
c00034aa:	83 c4 10             	add    esp,0x10
c00034ad:	85 c0                	test   eax,eax
c00034af:	75 3d                	jne    c00034ee <remove_chain+0x140>
c00034b1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034b5:	e9 73 ff ff ff       	jmp    c000342d <remove_chain+0x7f>
c00034ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034bf:	75 8d                	jne    c000344e <remove_chain+0xa0>
c00034c1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034c5:	eb 25                	jmp    c00034ec <remove_chain+0x13e>
c00034c7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034ca:	89 c3                	mov    ebx,eax
c00034cc:	39 c2                	cmp    edx,eax
c00034ce:	74 88                	je     c0003458 <remove_chain+0xaa>
c00034d0:	eb 1a                	jmp    c00034ec <remove_chain+0x13e>
c00034d2:	3c 03                	cmp    al,0x3
c00034d4:	75 16                	jne    c00034ec <remove_chain+0x13e>
c00034d6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034dd:	77 0d                	ja     c00034ec <remove_chain+0x13e>
c00034df:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034e2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034e6:	72 04                	jb     c00034ec <remove_chain+0x13e>
c00034e8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034ec:	31 c0                	xor    eax,eax
c00034ee:	83 c4 1c             	add    esp,0x1c
c00034f1:	5b                   	pop    ebx
c00034f2:	5e                   	pop    esi
c00034f3:	5f                   	pop    edi
c00034f4:	5d                   	pop    ebp
c00034f5:	c3                   	ret    

c00034f6 <dir_clear>:
c00034f6:	55                   	push   ebp
c00034f7:	57                   	push   edi
c00034f8:	56                   	push   esi
c00034f9:	89 c6                	mov    esi,eax
c00034fb:	53                   	push   ebx
c00034fc:	83 ec 1c             	sub    esp,0x1c
c00034ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003503:	e8 9d ed ff ff       	call   c00022a5 <sync_window>
c0003508:	85 c0                	test   eax,eax
c000350a:	0f 85 de 00 00 00    	jne    c00035ee <dir_clear+0xf8>
c0003510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003514:	89 f0                	mov    eax,esi
c0003516:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003519:	e8 d6 e8 ff ff       	call   c0001df4 <clst2sect>
c000351e:	b9 00 02 00 00       	mov    ecx,0x200
c0003523:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000352b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000352e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003531:	89 e8                	mov    eax,ebp
c0003533:	31 d2                	xor    edx,edx
c0003535:	e8 b5 e6 ff ff       	call   c0001bef <mem_set>
c000353a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000353e:	c1 e3 09             	shl    ebx,0x9
c0003541:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003547:	76 1f                	jbe    c0003568 <dir_clear+0x72>
c0003549:	bb 00 80 00 00       	mov    ebx,0x8000
c000354e:	eb 18                	jmp    c0003568 <dir_clear+0x72>
c0003550:	83 ec 0c             	sub    esp,0xc
c0003553:	53                   	push   ebx
c0003554:	e8 6b 50 00 00       	call   c00085c4 <ff_memalloc>
c0003559:	83 c4 10             	add    esp,0x10
c000355c:	89 c7                	mov    edi,eax
c000355e:	85 c0                	test   eax,eax
c0003560:	0f 85 8f 00 00 00    	jne    c00035f5 <dir_clear+0xff>
c0003566:	d1 eb                	shr    ebx,1
c0003568:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000356e:	77 e0                	ja     c0003550 <dir_clear+0x5a>
c0003570:	31 db                	xor    ebx,ebx
c0003572:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003576:	39 d8                	cmp    eax,ebx
c0003578:	76 66                	jbe    c00035e0 <dir_clear+0xea>
c000357a:	83 ec 0c             	sub    esp,0xc
c000357d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003581:	6a 01                	push   0x1
c0003583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000358b:	55                   	push   ebp
c000358c:	50                   	push   eax
c000358d:	e8 94 e5 ff ff       	call   c0001b26 <disk_write>
c0003592:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003597:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000359c:	83 c4 20             	add    esp,0x20
c000359f:	85 c0                	test   eax,eax
c00035a1:	75 3d                	jne    c00035e0 <dir_clear+0xea>
c00035a3:	43                   	inc    ebx
c00035a4:	eb cc                	jmp    c0003572 <dir_clear+0x7c>
c00035a6:	83 ec 0c             	sub    esp,0xc
c00035a9:	31 d2                	xor    edx,edx
c00035ab:	55                   	push   ebp
c00035ac:	89 d8                	mov    eax,ebx
c00035ae:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035b2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035b6:	52                   	push   edx
c00035b7:	50                   	push   eax
c00035b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035bc:	57                   	push   edi
c00035bd:	50                   	push   eax
c00035be:	e8 63 e5 ff ff       	call   c0001b26 <disk_write>
c00035c3:	83 c4 20             	add    esp,0x20
c00035c6:	85 c0                	test   eax,eax
c00035c8:	75 0a                	jne    c00035d4 <dir_clear+0xde>
c00035ca:	01 eb                	add    ebx,ebp
c00035cc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035d0:	39 d8                	cmp    eax,ebx
c00035d2:	77 d2                	ja     c00035a6 <dir_clear+0xb0>
c00035d4:	83 ec 0c             	sub    esp,0xc
c00035d7:	57                   	push   edi
c00035d8:	e8 ff 4f 00 00       	call   c00085dc <ff_memfree>
c00035dd:	83 c4 10             	add    esp,0x10
c00035e0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e4:	39 d8                	cmp    eax,ebx
c00035e6:	0f 95 c0             	setne  al
c00035e9:	0f b6 c0             	movzx  eax,al
c00035ec:	eb 19                	jmp    c0003607 <dir_clear+0x111>
c00035ee:	b8 01 00 00 00       	mov    eax,0x1
c00035f3:	eb 12                	jmp    c0003607 <dir_clear+0x111>
c00035f5:	89 d9                	mov    ecx,ebx
c00035f7:	31 d2                	xor    edx,edx
c00035f9:	c1 eb 09             	shr    ebx,0x9
c00035fc:	e8 ee e5 ff ff       	call   c0001bef <mem_set>
c0003601:	89 dd                	mov    ebp,ebx
c0003603:	31 db                	xor    ebx,ebx
c0003605:	eb c5                	jmp    c00035cc <dir_clear+0xd6>
c0003607:	83 c4 1c             	add    esp,0x1c
c000360a:	5b                   	pop    ebx
c000360b:	5e                   	pop    esi
c000360c:	5f                   	pop    edi
c000360d:	5d                   	pop    ebp
c000360e:	c3                   	ret    

c000360f <dir_next>:
c000360f:	55                   	push   ebp
c0003610:	57                   	push   edi
c0003611:	56                   	push   esi
c0003612:	53                   	push   ebx
c0003613:	89 c3                	mov    ebx,eax
c0003615:	83 ec 1c             	sub    esp,0x1c
c0003618:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003621:	8d 78 20             	lea    edi,[eax+0x20]
c0003624:	31 c0                	xor    eax,eax
c0003626:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000362a:	0f 94 c0             	sete   al
c000362d:	48                   	dec    eax
c000362e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003633:	05 00 00 00 10       	add    eax,0x10000000
c0003638:	39 f8                	cmp    eax,edi
c000363a:	77 0e                	ja     c000364a <dir_next+0x3b>
c000363c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003643:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000364a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000364d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003650:	b8 04 00 00 00       	mov    eax,0x4
c0003655:	89 ce                	mov    esi,ecx
c0003657:	09 d6                	or     esi,edx
c0003659:	0f 84 da 00 00 00    	je     c0003739 <dir_next+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	25 ff 01 00 00       	and    eax,0x1ff
c0003666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000366a:	0f 85 b9 00 00 00    	jne    c0003729 <dir_next+0x11a>
c0003670:	83 c2 01             	add    edx,0x1
c0003673:	83 d1 00             	adc    ecx,0x0
c0003676:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003679:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000367c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000367f:	85 d2                	test   edx,edx
c0003681:	75 29                	jne    c00036ac <dir_next+0x9d>
c0003683:	89 fa                	mov    edx,edi
c0003685:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003689:	c1 ea 05             	shr    edx,0x5
c000368c:	39 c2                	cmp    edx,eax
c000368e:	0f 82 95 00 00 00    	jb     c0003729 <dir_next+0x11a>
c0003694:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000369b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036a2:	b8 04 00 00 00       	mov    eax,0x4
c00036a7:	e9 8d 00 00 00       	jmp    c0003739 <dir_next+0x12a>
c00036ac:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036b0:	89 f9                	mov    ecx,edi
c00036b2:	48                   	dec    eax
c00036b3:	c1 e9 09             	shr    ecx,0x9
c00036b6:	85 c8                	test   eax,ecx
c00036b8:	75 6f                	jne    c0003729 <dir_next+0x11a>
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	e8 00 f8 ff ff       	call   c0002ec1 <get_fat>
c00036c1:	89 c6                	mov    esi,eax
c00036c3:	83 f8 01             	cmp    eax,0x1
c00036c6:	77 07                	ja     c00036cf <dir_next+0xc0>
c00036c8:	b8 02 00 00 00       	mov    eax,0x2
c00036cd:	eb 6a                	jmp    c0003739 <dir_next+0x12a>
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	75 07                	jne    c00036db <dir_next+0xcc>
c00036d4:	b8 01 00 00 00       	mov    eax,0x1
c00036d9:	eb 5e                	jmp    c0003739 <dir_next+0x12a>
c00036db:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036de:	77 37                	ja     c0003717 <dir_next+0x108>
c00036e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036e5:	74 ad                	je     c0003694 <dir_next+0x85>
c00036e7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	e8 be fa ff ff       	call   c00031af <create_chain>
c00036f1:	89 c6                	mov    esi,eax
c00036f3:	b8 07 00 00 00       	mov    eax,0x7
c00036f8:	85 f6                	test   esi,esi
c00036fa:	74 3d                	je     c0003739 <dir_next+0x12a>
c00036fc:	83 fe 01             	cmp    esi,0x1
c00036ff:	74 c7                	je     c00036c8 <dir_next+0xb9>
c0003701:	83 fe ff             	cmp    esi,0xffffffff
c0003704:	74 ce                	je     c00036d4 <dir_next+0xc5>
c0003706:	89 f2                	mov    edx,esi
c0003708:	89 e8                	mov    eax,ebp
c000370a:	e8 e7 fd ff ff       	call   c00034f6 <dir_clear>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 c1                	jne    c00036d4 <dir_next+0xc5>
c0003713:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003717:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000371a:	89 f2                	mov    edx,esi
c000371c:	89 e8                	mov    eax,ebp
c000371e:	e8 d1 e6 ff ff       	call   c0001df4 <clst2sect>
c0003723:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003726:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000372d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003730:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003734:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003737:	31 c0                	xor    eax,eax
c0003739:	83 c4 1c             	add    esp,0x1c
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <load_xdir>:
c0003741:	55                   	push   ebp
c0003742:	57                   	push   edi
c0003743:	56                   	push   esi
c0003744:	89 c6                	mov    esi,eax
c0003746:	53                   	push   ebx
c0003747:	83 ec 1c             	sub    esp,0x1c
c000374a:	8b 00                	mov    eax,DWORD PTR [eax]
c000374c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000374f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003752:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003755:	e8 df eb ff ff       	call   c0002339 <move_window>
c000375a:	89 c3                	mov    ebx,eax
c000375c:	85 c0                	test   eax,eax
c000375e:	0f 85 0c 01 00 00    	jne    c0003870 <load_xdir+0x12f>
c0003764:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003767:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000376a:	0f 85 fb 00 00 00    	jne    c000386b <load_xdir+0x12a>
c0003770:	89 f8                	mov    eax,edi
c0003772:	b9 20 00 00 00       	mov    ecx,0x20
c0003777:	e8 5e e4 ff ff       	call   c0001bda <mem_cpy>
c000377c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003780:	40                   	inc    eax
c0003781:	c1 e0 05             	shl    eax,0x5
c0003784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003788:	83 e8 60             	sub    eax,0x60
c000378b:	3d 00 02 00 00       	cmp    eax,0x200
c0003790:	0f 87 d5 00 00 00    	ja     c000386b <load_xdir+0x12a>
c0003796:	31 d2                	xor    edx,edx
c0003798:	89 f0                	mov    eax,esi
c000379a:	e8 70 fe ff ff       	call   c000360f <dir_next>
c000379f:	89 c3                	mov    ebx,eax
c00037a1:	83 f8 04             	cmp    eax,0x4
c00037a4:	0f 84 c1 00 00 00    	je     c000386b <load_xdir+0x12a>
c00037aa:	85 c0                	test   eax,eax
c00037ac:	0f 85 be 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037b2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037b5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ba:	e8 7a eb ff ff       	call   c0002339 <move_window>
c00037bf:	89 c3                	mov    ebx,eax
c00037c1:	85 c0                	test   eax,eax
c00037c3:	0f 85 a7 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037c9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037cc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037cf:	0f 85 96 00 00 00    	jne    c000386b <load_xdir+0x12a>
c00037d5:	8d 47 20             	lea    eax,[edi+0x20]
c00037d8:	b9 20 00 00 00       	mov    ecx,0x20
c00037dd:	e8 f8 e3 ff ff       	call   c0001bda <mem_cpy>
c00037e2:	31 d2                	xor    edx,edx
c00037e4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037ed:	83 c0 2c             	add    eax,0x2c
c00037f0:	f7 f1                	div    ecx
c00037f2:	c1 e0 05             	shl    eax,0x5
c00037f5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f9:	77 70                	ja     c000386b <load_xdir+0x12a>
c00037fb:	bd 40 00 00 00       	mov    ebp,0x40
c0003800:	31 d2                	xor    edx,edx
c0003802:	89 f0                	mov    eax,esi
c0003804:	e8 06 fe ff ff       	call   c000360f <dir_next>
c0003809:	89 c3                	mov    ebx,eax
c000380b:	83 f8 04             	cmp    eax,0x4
c000380e:	74 5b                	je     c000386b <load_xdir+0x12a>
c0003810:	85 c0                	test   eax,eax
c0003812:	75 5c                	jne    c0003870 <load_xdir+0x12f>
c0003814:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003817:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000381a:	8b 06                	mov    eax,DWORD PTR [esi]
c000381c:	e8 18 eb ff ff       	call   c0002339 <move_window>
c0003821:	89 c3                	mov    ebx,eax
c0003823:	85 c0                	test   eax,eax
c0003825:	75 49                	jne    c0003870 <load_xdir+0x12f>
c0003827:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000382a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000382d:	75 3c                	jne    c000386b <load_xdir+0x12a>
c000382f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003835:	77 0d                	ja     c0003844 <load_xdir+0x103>
c0003837:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000383a:	b9 20 00 00 00       	mov    ecx,0x20
c000383f:	e8 96 e3 ff ff       	call   c0001bda <mem_cpy>
c0003844:	83 c5 20             	add    ebp,0x20
c0003847:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000384b:	77 b3                	ja     c0003800 <load_xdir+0xbf>
c000384d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003853:	77 1b                	ja     c0003870 <load_xdir+0x12f>
c0003855:	89 f8                	mov    eax,edi
c0003857:	e8 cd e7 ff ff       	call   c0002029 <xdir_sum>
c000385c:	89 c1                	mov    ecx,eax
c000385e:	8d 47 02             	lea    eax,[edi+0x2]
c0003861:	e8 f5 e2 ff ff       	call   c0001b5b <ld_word>
c0003866:	66 39 c1             	cmp    cx,ax
c0003869:	74 05                	je     c0003870 <load_xdir+0x12f>
c000386b:	bb 02 00 00 00       	mov    ebx,0x2
c0003870:	83 c4 1c             	add    esp,0x1c
c0003873:	89 d8                	mov    eax,ebx
c0003875:	5b                   	pop    ebx
c0003876:	5e                   	pop    esi
c0003877:	5f                   	pop    edi
c0003878:	5d                   	pop    ebp
c0003879:	c3                   	ret    

c000387a <load_obj_xdir>:
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	83 ec 08             	sub    esp,0x8
c0003880:	8b 02                	mov    eax,DWORD PTR [edx]
c0003882:	89 03                	mov    DWORD PTR [ebx],eax
c0003884:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003887:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000388a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003890:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003893:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000389a:	30 c0                	xor    al,al
c000389c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038a6:	89 d8                	mov    eax,ebx
c00038a8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038ab:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038ae:	e8 04 f8 ff ff       	call   c00030b7 <dir_sdi>
c00038b3:	85 c0                	test   eax,eax
c00038b5:	75 0b                	jne    c00038c2 <load_obj_xdir+0x48>
c00038b7:	89 d8                	mov    eax,ebx
c00038b9:	83 c4 08             	add    esp,0x8
c00038bc:	5b                   	pop    ebx
c00038bd:	e9 7f fe ff ff       	jmp    c0003741 <load_xdir>
c00038c2:	83 c4 08             	add    esp,0x8
c00038c5:	5b                   	pop    ebx
c00038c6:	c3                   	ret    

c00038c7 <dir_read>:
c00038c7:	55                   	push   ebp
c00038c8:	bd 04 00 00 00       	mov    ebp,0x4
c00038cd:	57                   	push   edi
c00038ce:	56                   	push   esi
c00038cf:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d4:	53                   	push   ebx
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 ec 1c             	sub    esp,0x1c
c00038da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038de:	8b 38                	mov    edi,DWORD PTR [eax]
c00038e0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038e5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038eb:	89 c8                	mov    eax,ecx
c00038ed:	09 d0                	or     eax,edx
c00038ef:	0f 84 25 01 00 00    	je     c0003a1a <dir_read+0x153>
c00038f5:	89 f8                	mov    eax,edi
c00038f7:	e8 3d ea ff ff       	call   c0002339 <move_window>
c00038fc:	89 c5                	mov    ebp,eax
c00038fe:	85 c0                	test   eax,eax
c0003900:	0f 85 23 01 00 00    	jne    c0003a29 <dir_read+0x162>
c0003906:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003909:	8a 0a                	mov    cl,BYTE PTR [edx]
c000390b:	84 c9                	test   cl,cl
c000390d:	0f 84 11 01 00 00    	je     c0003a24 <dir_read+0x15d>
c0003913:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003916:	75 48                	jne    c0003960 <dir_read+0x99>
c0003918:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000391d:	74 10                	je     c000392f <dir_read+0x68>
c000391f:	80 f9 83             	cmp    cl,0x83
c0003922:	0f 85 dd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003928:	31 ed                	xor    ebp,ebp
c000392a:	e9 08 01 00 00       	jmp    c0003a37 <dir_read+0x170>
c000392f:	80 f9 85             	cmp    cl,0x85
c0003932:	0f 85 cd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003938:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000393b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000393e:	89 d8                	mov    eax,ebx
c0003940:	e8 fc fd ff ff       	call   c0003741 <load_xdir>
c0003945:	89 c5                	mov    ebp,eax
c0003947:	85 c0                	test   eax,eax
c0003949:	0f 85 da 00 00 00    	jne    c0003a29 <dir_read+0x162>
c000394f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003952:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003955:	83 e0 3f             	and    eax,0x3f
c0003958:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000395b:	e9 d7 00 00 00       	jmp    c0003a37 <dir_read+0x170>
c0003960:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003963:	83 e0 3f             	and    eax,0x3f
c0003966:	80 f9 2e             	cmp    cl,0x2e
c0003969:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000396d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003970:	0f 84 8a 00 00 00    	je     c0003a00 <dir_read+0x139>
c0003976:	80 f9 e5             	cmp    cl,0xe5
c0003979:	0f 84 81 00 00 00    	je     c0003a00 <dir_read+0x139>
c000397f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003983:	83 e0 1f             	and    eax,0x1f
c0003986:	83 f8 08             	cmp    eax,0x8
c0003989:	0f 94 c0             	sete   al
c000398c:	0f b6 c0             	movzx  eax,al
c000398f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003993:	75 6b                	jne    c0003a00 <dir_read+0x139>
c0003995:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000399a:	75 44                	jne    c00039e0 <dir_read+0x119>
c000399c:	f6 c1 40             	test   cl,0x40
c000399f:	74 12                	je     c00039b3 <dir_read+0xec>
c00039a1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039a4:	83 e1 bf             	and    ecx,0xffffffbf
c00039a7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039ae:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039b1:	eb 06                	jmp    c00039b9 <dir_read+0xf2>
c00039b3:	89 f0                	mov    eax,esi
c00039b5:	38 c8                	cmp    al,cl
c00039b7:	75 47                	jne    c0003a00 <dir_read+0x139>
c00039b9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039bd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039c2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039c5:	75 3e                	jne    c0003a05 <dir_read+0x13e>
c00039c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039cb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039ce:	e8 8a e4 ff ff       	call   c0001e5d <pick_lfn>
c00039d3:	85 c0                	test   eax,eax
c00039d5:	74 2e                	je     c0003a05 <dir_read+0x13e>
c00039d7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039db:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039de:	eb 25                	jmp    c0003a05 <dir_read+0x13e>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	84 c0                	test   al,al
c00039e4:	75 11                	jne    c00039f7 <dir_read+0x130>
c00039e6:	89 d0                	mov    eax,edx
c00039e8:	e8 2a e6 ff ff       	call   c0002017 <sum_sfn>
c00039ed:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039f1:	0f 84 31 ff ff ff    	je     c0003928 <dir_read+0x61>
c00039f7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039fe:	eb 37                	jmp    c0003a37 <dir_read+0x170>
c0003a00:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	e8 01 fc ff ff       	call   c000360f <dir_next>
c0003a0e:	89 c5                	mov    ebp,eax
c0003a10:	85 c0                	test   eax,eax
c0003a12:	0f 84 cd fe ff ff    	je     c00038e5 <dir_read+0x1e>
c0003a18:	eb 0f                	jmp    c0003a29 <dir_read+0x162>
c0003a1a:	85 ed                	test   ebp,ebp
c0003a1c:	0f 84 06 ff ff ff    	je     c0003928 <dir_read+0x61>
c0003a22:	eb 05                	jmp    c0003a29 <dir_read+0x162>
c0003a24:	bd 04 00 00 00       	mov    ebp,0x4
c0003a29:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a30:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a37:	83 c4 1c             	add    esp,0x1c
c0003a3a:	89 e8                	mov    eax,ebp
c0003a3c:	5b                   	pop    ebx
c0003a3d:	5e                   	pop    esi
c0003a3e:	5f                   	pop    edi
c0003a3f:	5d                   	pop    ebp
c0003a40:	c3                   	ret    

c0003a41 <dir_alloc>:
c0003a41:	55                   	push   ebp
c0003a42:	89 d5                	mov    ebp,edx
c0003a44:	57                   	push   edi
c0003a45:	31 d2                	xor    edx,edx
c0003a47:	56                   	push   esi
c0003a48:	53                   	push   ebx
c0003a49:	89 c3                	mov    ebx,eax
c0003a4b:	83 ec 0c             	sub    esp,0xc
c0003a4e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a50:	e8 62 f6 ff ff       	call   c00030b7 <dir_sdi>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 4e                	jne    c0003aa7 <dir_alloc+0x66>
c0003a59:	31 f6                	xor    esi,esi
c0003a5b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a5e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a61:	89 f8                	mov    eax,edi
c0003a63:	e8 d1 e8 ff ff       	call   c0002339 <move_window>
c0003a68:	85 c0                	test   eax,eax
c0003a6a:	75 3b                	jne    c0003aa7 <dir_alloc+0x66>
c0003a6c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a6f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a72:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a74:	75 07                	jne    c0003a7d <dir_alloc+0x3c>
c0003a76:	f7 d2                	not    edx
c0003a78:	c0 ea 07             	shr    dl,0x7
c0003a7b:	eb 0d                	jmp    c0003a8a <dir_alloc+0x49>
c0003a7d:	84 d2                	test   dl,dl
c0003a7f:	0f 94 c1             	sete   cl
c0003a82:	80 fa e5             	cmp    dl,0xe5
c0003a85:	0f 94 c2             	sete   dl
c0003a88:	09 ca                	or     edx,ecx
c0003a8a:	84 d2                	test   dl,dl
c0003a8c:	74 07                	je     c0003a95 <dir_alloc+0x54>
c0003a8e:	46                   	inc    esi
c0003a8f:	39 ee                	cmp    esi,ebp
c0003a91:	75 04                	jne    c0003a97 <dir_alloc+0x56>
c0003a93:	eb 1c                	jmp    c0003ab1 <dir_alloc+0x70>
c0003a95:	31 f6                	xor    esi,esi
c0003a97:	ba 01 00 00 00       	mov    edx,0x1
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 6c fb ff ff       	call   c000360f <dir_next>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 b4                	je     c0003a5b <dir_alloc+0x1a>
c0003aa7:	83 f8 04             	cmp    eax,0x4
c0003aaa:	75 05                	jne    c0003ab1 <dir_alloc+0x70>
c0003aac:	b8 07 00 00 00       	mov    eax,0x7
c0003ab1:	83 c4 0c             	add    esp,0xc
c0003ab4:	5b                   	pop    ebx
c0003ab5:	5e                   	pop    esi
c0003ab6:	5f                   	pop    edi
c0003ab7:	5d                   	pop    ebp
c0003ab8:	c3                   	ret    

c0003ab9 <store_xdir>:
c0003ab9:	55                   	push   ebp
c0003aba:	57                   	push   edi
c0003abb:	89 c7                	mov    edi,eax
c0003abd:	56                   	push   esi
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 0c             	sub    esp,0xc
c0003ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ac4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ac7:	89 e8                	mov    eax,ebp
c0003ac9:	e8 5b e5 ff ff       	call   c0002029 <xdir_sum>
c0003ace:	0f b7 d0             	movzx  edx,ax
c0003ad1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ad4:	e8 f4 e0 ff ff       	call   c0001bcd <st_word>
c0003ad9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003add:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ae0:	89 f8                	mov    eax,edi
c0003ae2:	e8 d0 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003ae7:	89 c6                	mov    esi,eax
c0003ae9:	85 f6                	test   esi,esi
c0003aeb:	75 3d                	jne    c0003b2a <store_xdir+0x71>
c0003aed:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003af0:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003af3:	8b 07                	mov    eax,DWORD PTR [edi]
c0003af5:	e8 3f e8 ff ff       	call   c0002339 <move_window>
c0003afa:	89 c6                	mov    esi,eax
c0003afc:	85 c0                	test   eax,eax
c0003afe:	75 2a                	jne    c0003b2a <store_xdir+0x71>
c0003b00:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b03:	b9 20 00 00 00       	mov    ecx,0x20
c0003b08:	89 ea                	mov    edx,ebp
c0003b0a:	e8 cb e0 ff ff       	call   c0001bda <mem_cpy>
c0003b0f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b11:	85 db                	test   ebx,ebx
c0003b13:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b17:	74 11                	je     c0003b2a <store_xdir+0x71>
c0003b19:	31 d2                	xor    edx,edx
c0003b1b:	89 f8                	mov    eax,edi
c0003b1d:	83 c5 20             	add    ebp,0x20
c0003b20:	e8 ea fa ff ff       	call   c000360f <dir_next>
c0003b25:	4b                   	dec    ebx
c0003b26:	89 c6                	mov    esi,eax
c0003b28:	eb bf                	jmp    c0003ae9 <store_xdir+0x30>
c0003b2a:	89 f0                	mov    eax,esi
c0003b2c:	83 fe 02             	cmp    esi,0x2
c0003b2f:	76 05                	jbe    c0003b36 <store_xdir+0x7d>
c0003b31:	b8 02 00 00 00       	mov    eax,0x2
c0003b36:	83 c4 0c             	add    esp,0xc
c0003b39:	5b                   	pop    ebx
c0003b3a:	5e                   	pop    esi
c0003b3b:	5f                   	pop    edi
c0003b3c:	5d                   	pop    ebp
c0003b3d:	c3                   	ret    

c0003b3e <dir_remove>:
c0003b3e:	57                   	push   edi
c0003b3f:	56                   	push   esi
c0003b40:	53                   	push   ebx
c0003b41:	89 c3                	mov    ebx,eax
c0003b43:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b46:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b48:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b4b:	83 fa ff             	cmp    edx,0xffffffff
c0003b4e:	74 09                	je     c0003b59 <dir_remove+0x1b>
c0003b50:	e8 62 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003b55:	85 c0                	test   eax,eax
c0003b57:	75 41                	jne    c0003b9a <dir_remove+0x5c>
c0003b59:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b5c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b5f:	89 f0                	mov    eax,esi
c0003b61:	e8 d3 e7 ff ff       	call   c0002339 <move_window>
c0003b66:	85 c0                	test   eax,eax
c0003b68:	75 26                	jne    c0003b90 <dir_remove+0x52>
c0003b6a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b6d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b70:	75 05                	jne    c0003b77 <dir_remove+0x39>
c0003b72:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b75:	eb 03                	jmp    c0003b7a <dir_remove+0x3c>
c0003b77:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b7a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b7e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b81:	73 17                	jae    c0003b9a <dir_remove+0x5c>
c0003b83:	31 d2                	xor    edx,edx
c0003b85:	89 d8                	mov    eax,ebx
c0003b87:	e8 83 fa ff ff       	call   c000360f <dir_next>
c0003b8c:	85 c0                	test   eax,eax
c0003b8e:	74 c9                	je     c0003b59 <dir_remove+0x1b>
c0003b90:	83 f8 04             	cmp    eax,0x4
c0003b93:	75 05                	jne    c0003b9a <dir_remove+0x5c>
c0003b95:	b8 02 00 00 00       	mov    eax,0x2
c0003b9a:	5b                   	pop    ebx
c0003b9b:	5e                   	pop    esi
c0003b9c:	5f                   	pop    edi
c0003b9d:	c3                   	ret    

c0003b9e <create_name>:
c0003b9e:	55                   	push   ebp
c0003b9f:	89 d5                	mov    ebp,edx
c0003ba1:	57                   	push   edi
c0003ba2:	89 c7                	mov    edi,eax
c0003ba4:	56                   	push   esi
c0003ba5:	31 f6                	xor    esi,esi
c0003ba7:	53                   	push   ebx
c0003ba8:	83 ec 3c             	sub    esp,0x3c
c0003bab:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bb1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bbe:	e8 72 e0 ff ff       	call   c0001c35 <tchar2uni>
c0003bc3:	89 c3                	mov    ebx,eax
c0003bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc8:	75 0a                	jne    c0003bd4 <create_name+0x36>
c0003bca:	b8 06 00 00 00       	mov    eax,0x6
c0003bcf:	e9 9e 02 00 00       	jmp    c0003e72 <create_name+0x2d4>
c0003bd4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd9:	76 0c                	jbe    c0003be7 <create_name+0x49>
c0003bdb:	c1 e8 10             	shr    eax,0x10
c0003bde:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003be2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003be6:	46                   	inc    esi
c0003be7:	66 83 fb 1f          	cmp    bx,0x1f
c0003beb:	76 4f                	jbe    c0003c3c <create_name+0x9e>
c0003bed:	66 83 fb 5c          	cmp    bx,0x5c
c0003bf1:	74 35                	je     c0003c28 <create_name+0x8a>
c0003bf3:	66 83 fb 2f          	cmp    bx,0x2f
c0003bf7:	74 2f                	je     c0003c28 <create_name+0x8a>
c0003bf9:	66 83 fb 7f          	cmp    bx,0x7f
c0003bfd:	77 11                	ja     c0003c10 <create_name+0x72>
c0003bff:	0f b7 d3             	movzx  edx,bx
c0003c02:	b8 92 36 02 c0       	mov    eax,0xc0023692
c0003c07:	e8 11 e0 ff ff       	call   c0001c1d <chk_chr>
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	75 ba                	jne    c0003bca <create_name+0x2c>
c0003c10:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c16:	77 b2                	ja     c0003bca <create_name+0x2c>
c0003c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c1c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c20:	46                   	inc    esi
c0003c21:	eb 97                	jmp    c0003bba <create_name+0x1c>
c0003c23:	40                   	inc    eax
c0003c24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c2c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c2e:	80 fa 2f             	cmp    dl,0x2f
c0003c31:	74 f0                	je     c0003c23 <create_name+0x85>
c0003c33:	80 fa 5c             	cmp    dl,0x5c
c0003c36:	74 eb                	je     c0003c23 <create_name+0x85>
c0003c38:	31 db                	xor    ebx,ebx
c0003c3a:	eb 02                	jmp    c0003c3e <create_name+0xa0>
c0003c3c:	b3 04                	mov    bl,0x4
c0003c3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c42:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c45:	85 f6                	test   esi,esi
c0003c47:	74 18                	je     c0003c61 <create_name+0xc3>
c0003c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c4d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c52:	66 83 f8 20          	cmp    ax,0x20
c0003c56:	74 06                	je     c0003c5e <create_name+0xc0>
c0003c58:	66 83 f8 2e          	cmp    ax,0x2e
c0003c5c:	75 03                	jne    c0003c61 <create_name+0xc3>
c0003c5e:	4e                   	dec    esi
c0003c5f:	eb e4                	jmp    c0003c45 <create_name+0xa7>
c0003c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c65:	31 ed                	xor    ebp,ebp
c0003c67:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c6d:	85 f6                	test   esi,esi
c0003c6f:	0f 84 55 ff ff ff    	je     c0003bca <create_name+0x2c>
c0003c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c79:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c7c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c80:	66 83 f8 20          	cmp    ax,0x20
c0003c84:	75 04                	jne    c0003c8a <create_name+0xec>
c0003c86:	89 d5                	mov    ebp,edx
c0003c88:	eb eb                	jmp    c0003c75 <create_name+0xd7>
c0003c8a:	85 ed                	test   ebp,ebp
c0003c8c:	75 06                	jne    c0003c94 <create_name+0xf6>
c0003c8e:	66 83 f8 2e          	cmp    ax,0x2e
c0003c92:	75 08                	jne    c0003c9c <create_name+0xfe>
c0003c94:	83 cb 03             	or     ebx,0x3
c0003c97:	eb 03                	jmp    c0003c9c <create_name+0xfe>
c0003c99:	4e                   	dec    esi
c0003c9a:	74 0c                	je     c0003ca8 <create_name+0x10a>
c0003c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ca0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ca6:	75 f1                	jne    c0003c99 <create_name+0xfb>
c0003ca8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cad:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cb0:	ba 20 00 00 00       	mov    edx,0x20
c0003cb5:	e8 35 df ff ff       	call   c0001bef <mem_set>
c0003cba:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cc2:	31 c9                	xor    ecx,ecx
c0003cc4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003ccc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cd4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd8:	66 85 ed             	test   bp,bp
c0003cdb:	0f 84 30 01 00 00    	je     c0003e11 <create_name+0x273>
c0003ce1:	66 83 fd 20          	cmp    bp,0x20
c0003ce5:	74 10                	je     c0003cf7 <create_name+0x159>
c0003ce7:	66 83 fd 2e          	cmp    bp,0x2e
c0003ceb:	75 13                	jne    c0003d00 <create_name+0x162>
c0003ced:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003cf1:	0f 84 6b 01 00 00    	je     c0003e62 <create_name+0x2c4>
c0003cf7:	83 cb 03             	or     ebx,0x3
c0003cfa:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cfe:	eb c9                	jmp    c0003cc9 <create_name+0x12b>
c0003d00:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d04:	73 0b                	jae    c0003d11 <create_name+0x173>
c0003d06:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d0a:	75 47                	jne    c0003d53 <create_name+0x1b5>
c0003d0c:	e9 51 01 00 00       	jmp    c0003e62 <create_name+0x2c4>
c0003d11:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d16:	75 10                	jne    c0003d28 <create_name+0x18a>
c0003d18:	83 cb 03             	or     ebx,0x3
c0003d1b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d23:	e9 e9 00 00 00       	jmp    c0003e11 <create_name+0x273>
c0003d28:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2c:	74 0d                	je     c0003d3b <create_name+0x19d>
c0003d2e:	83 cb 03             	or     ebx,0x3
c0003d31:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d35:	0f 87 d6 00 00 00    	ja     c0003e11 <create_name+0x273>
c0003d3b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d40:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d44:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d4c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d51:	eb a7                	jmp    c0003cfa <create_name+0x15c>
c0003d53:	66 83 fd 7f          	cmp    bp,0x7f
c0003d57:	76 68                	jbe    c0003dc1 <create_name+0x223>
c0003d59:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d5d:	88 da                	mov    dl,bl
c0003d5f:	83 ca 02             	or     edx,0x2
c0003d62:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d66:	50                   	push   eax
c0003d67:	50                   	push   eax
c0003d68:	68 b5 01 00 00       	push   0x1b5
c0003d6d:	55                   	push   ebp
c0003d6e:	e8 81 48 00 00       	call   c00085f4 <ff_uni2oem>
c0003d73:	83 c4 10             	add    esp,0x10
c0003d76:	89 c5                	mov    ebp,eax
c0003d78:	a8 80                	test   al,0x80
c0003d7a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d7e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d82:	74 0c                	je     c0003d90 <create_name+0x1f2>
c0003d84:	83 e5 7f             	and    ebp,0x7f
c0003d87:	0f b6 ad e0 35 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdca20]
c0003d8e:	eb 2a                	jmp    c0003dba <create_name+0x21c>
c0003d90:	66 3d ff 00          	cmp    ax,0xff
c0003d94:	76 24                	jbe    c0003dba <create_name+0x21c>
c0003d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d9a:	48                   	dec    eax
c0003d9b:	39 c8                	cmp    eax,ecx
c0003d9d:	77 0c                	ja     c0003dab <create_name+0x20d>
c0003d9f:	83 cb 03             	or     ebx,0x3
c0003da2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003da6:	e9 4f ff ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003dab:	89 e8                	mov    eax,ebp
c0003dad:	88 d3                	mov    bl,dl
c0003daf:	66 c1 e8 08          	shr    ax,0x8
c0003db3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003db7:	41                   	inc    ecx
c0003db8:	eb 4b                	jmp    c0003e05 <create_name+0x267>
c0003dba:	88 d3                	mov    bl,dl
c0003dbc:	66 85 ed             	test   bp,bp
c0003dbf:	74 19                	je     c0003dda <create_name+0x23c>
c0003dc1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dc5:	0f b7 d5             	movzx  edx,bp
c0003dc8:	b8 9b 36 02 c0       	mov    eax,0xc002369b
c0003dcd:	e8 4b de ff ff       	call   c0001c1d <chk_chr>
c0003dd2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 0a                	je     c0003de4 <create_name+0x246>
c0003dda:	83 cb 03             	or     ebx,0x3
c0003ddd:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003de2:	eb 21                	jmp    c0003e05 <create_name+0x267>
c0003de4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003de7:	66 83 f8 19          	cmp    ax,0x19
c0003deb:	77 07                	ja     c0003df4 <create_name+0x256>
c0003ded:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003df2:	eb 11                	jmp    c0003e05 <create_name+0x267>
c0003df4:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 08                	ja     c0003e05 <create_name+0x267>
c0003dfd:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e02:	83 ed 20             	sub    ebp,0x20
c0003e05:	89 e8                	mov    eax,ebp
c0003e07:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e0b:	41                   	inc    ecx
c0003e0c:	e9 e9 fe ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003e11:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e15:	75 04                	jne    c0003e1b <create_name+0x27d>
c0003e17:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e1b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e20:	75 05                	jne    c0003e27 <create_name+0x289>
c0003e22:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e27:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2b:	83 e0 0c             	and    eax,0xc
c0003e2e:	3c 0c                	cmp    al,0xc
c0003e30:	74 0b                	je     c0003e3d <create_name+0x29f>
c0003e32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e36:	83 e0 03             	and    eax,0x3
c0003e39:	3c 03                	cmp    al,0x3
c0003e3b:	75 05                	jne    c0003e42 <create_name+0x2a4>
c0003e3d:	83 cb 02             	or     ebx,0x2
c0003e40:	eb 19                	jmp    c0003e5b <create_name+0x2bd>
c0003e42:	f6 c3 02             	test   bl,0x2
c0003e45:	75 14                	jne    c0003e5b <create_name+0x2bd>
c0003e47:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e4c:	74 03                	je     c0003e51 <create_name+0x2b3>
c0003e4e:	83 cb 10             	or     ebx,0x10
c0003e51:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e56:	74 03                	je     c0003e5b <create_name+0x2bd>
c0003e58:	83 cb 08             	or     ebx,0x8
c0003e5b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e5e:	31 c0                	xor    eax,eax
c0003e60:	eb 10                	jmp    c0003e72 <create_name+0x2d4>
c0003e62:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e67:	0f 85 ce fe ff ff    	jne    c0003d3b <create_name+0x19d>
c0003e6d:	e9 a6 fe ff ff       	jmp    c0003d18 <create_name+0x17a>
c0003e72:	83 c4 3c             	add    esp,0x3c
c0003e75:	5b                   	pop    ebx
c0003e76:	5e                   	pop    esi
c0003e77:	5f                   	pop    edi
c0003e78:	5d                   	pop    ebp
c0003e79:	c3                   	ret    

c0003e7a <xname_sum>:
c0003e7a:	56                   	push   esi
c0003e7b:	53                   	push   ebx
c0003e7c:	89 c6                	mov    esi,eax
c0003e7e:	51                   	push   ecx
c0003e7f:	31 db                	xor    ebx,ebx
c0003e81:	83 c6 02             	add    esi,0x2
c0003e84:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e88:	66 85 c0             	test   ax,ax
c0003e8b:	74 1f                	je     c0003eac <xname_sum+0x32>
c0003e8d:	83 ec 0c             	sub    esp,0xc
c0003e90:	66 d1 cb             	ror    bx,1
c0003e93:	50                   	push   eax
c0003e94:	e8 67 48 00 00       	call   c0008700 <ff_wtoupper>
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	0f b6 d0             	movzx  edx,al
c0003e9f:	66 c1 e8 08          	shr    ax,0x8
c0003ea3:	01 d3                	add    ebx,edx
c0003ea5:	66 d1 cb             	ror    bx,1
c0003ea8:	01 c3                	add    ebx,eax
c0003eaa:	eb d5                	jmp    c0003e81 <xname_sum+0x7>
c0003eac:	89 d8                	mov    eax,ebx
c0003eae:	5a                   	pop    edx
c0003eaf:	5b                   	pop    ebx
c0003eb0:	5e                   	pop    esi
c0003eb1:	c3                   	ret    

c0003eb2 <create_xdir>:
c0003eb2:	55                   	push   ebp
c0003eb3:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb8:	57                   	push   edi
c0003eb9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ebe:	56                   	push   esi
c0003ebf:	31 ff                	xor    edi,edi
c0003ec1:	53                   	push   ebx
c0003ec2:	be 40 00 00 00       	mov    esi,0x40
c0003ec7:	89 c3                	mov    ebx,eax
c0003ec9:	83 ec 1c             	sub    esp,0x1c
c0003ecc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ed0:	31 d2                	xor    edx,edx
c0003ed2:	e8 18 dd ff ff       	call   c0001bef <mem_set>
c0003ed7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eda:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ede:	31 c9                	xor    ecx,ecx
c0003ee0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ee3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ee7:	83 c6 02             	add    esi,0x2
c0003eea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003eee:	66 85 ed             	test   bp,bp
c0003ef1:	74 12                	je     c0003f05 <create_xdir+0x53>
c0003ef3:	0f b6 c1             	movzx  eax,cl
c0003ef6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003efa:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003efe:	66 83 fd 01          	cmp    bp,0x1
c0003f02:	80 d9 ff             	sbb    cl,0xff
c0003f05:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f08:	0f b7 d5             	movzx  edx,bp
c0003f0b:	83 c6 02             	add    esi,0x2
c0003f0e:	e8 ba dc ff ff       	call   c0001bcd <st_word>
c0003f13:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f19:	75 d3                	jne    c0003eee <create_xdir+0x3c>
c0003f1b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f26:	0f b6 c1             	movzx  eax,cl
c0003f29:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f2e:	74 07                	je     c0003f37 <create_xdir+0x85>
c0003f30:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f35:	eb a9                	jmp    c0003ee0 <create_xdir+0x2e>
c0003f37:	8d 47 02             	lea    eax,[edi+0x2]
c0003f3a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f3d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f40:	89 d0                	mov    eax,edx
c0003f42:	e8 33 ff ff ff       	call   c0003e7a <xname_sum>
c0003f47:	83 c4 1c             	add    esp,0x1c
c0003f4a:	0f b7 d0             	movzx  edx,ax
c0003f4d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f50:	5b                   	pop    ebx
c0003f51:	5e                   	pop    esi
c0003f52:	5f                   	pop    edi
c0003f53:	5d                   	pop    ebp
c0003f54:	e9 74 dc ff ff       	jmp    c0001bcd <st_word>

c0003f59 <cmp_lfn>:
c0003f59:	55                   	push   ebp
c0003f5a:	57                   	push   edi
c0003f5b:	89 d7                	mov    edi,edx
c0003f5d:	56                   	push   esi
c0003f5e:	53                   	push   ebx
c0003f5f:	83 ec 1c             	sub    esp,0x1c
c0003f62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f66:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f69:	e8 ed db ff ff       	call   c0001b5b <ld_word>
c0003f6e:	66 85 c0             	test   ax,ax
c0003f71:	74 07                	je     c0003f7a <cmp_lfn+0x21>
c0003f73:	31 c0                	xor    eax,eax
c0003f75:	e9 9a 00 00 00       	jmp    c0004014 <cmp_lfn+0xbb>
c0003f7a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f7c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f81:	83 e3 3f             	and    ebx,0x3f
c0003f84:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f8c:	4b                   	dec    ebx
c0003f8d:	6b db 0d             	imul   ebx,ebx,0xd
c0003f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f94:	0f b6 80 60 36 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc9a0]
c0003f9b:	01 f8                	add    eax,edi
c0003f9d:	e8 b9 db ff ff       	call   c0001b5b <ld_word>
c0003fa2:	66 85 ed             	test   bp,bp
c0003fa5:	89 c6                	mov    esi,eax
c0003fa7:	74 3c                	je     c0003fe5 <cmp_lfn+0x8c>
c0003fa9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003faf:	77 c2                	ja     c0003f73 <cmp_lfn+0x1a>
c0003fb1:	83 ec 0c             	sub    esp,0xc
c0003fb4:	0f b7 c0             	movzx  eax,ax
c0003fb7:	50                   	push   eax
c0003fb8:	e8 43 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fbd:	89 c5                	mov    ebp,eax
c0003fbf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fca:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fd1:	e8 2a 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fd6:	83 c4 10             	add    esp,0x10
c0003fd9:	39 c5                	cmp    ebp,eax
c0003fdb:	75 96                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fdd:	89 f5                	mov    ebp,esi
c0003fdf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fe3:	eb 04                	jmp    c0003fe9 <cmp_lfn+0x90>
c0003fe5:	66 46                	inc    si
c0003fe7:	75 8a                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fe9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fed:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ff2:	75 9c                	jne    c0003f90 <cmp_lfn+0x37>
c0003ff4:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ff7:	74 16                	je     c000400f <cmp_lfn+0xb6>
c0003ff9:	66 85 ed             	test   bp,bp
c0003ffc:	74 11                	je     c000400f <cmp_lfn+0xb6>
c0003ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004002:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004007:	0f 94 c0             	sete   al
c000400a:	0f b6 c0             	movzx  eax,al
c000400d:	eb 05                	jmp    c0004014 <cmp_lfn+0xbb>
c000400f:	b8 01 00 00 00       	mov    eax,0x1
c0004014:	83 c4 1c             	add    esp,0x1c
c0004017:	5b                   	pop    ebx
c0004018:	5e                   	pop    esi
c0004019:	5f                   	pop    edi
c000401a:	5d                   	pop    ebp
c000401b:	c3                   	ret    

c000401c <dir_find>:
c000401c:	55                   	push   ebp
c000401d:	31 d2                	xor    edx,edx
c000401f:	57                   	push   edi
c0004020:	56                   	push   esi
c0004021:	53                   	push   ebx
c0004022:	89 c3                	mov    ebx,eax
c0004024:	83 ec 1c             	sub    esp,0x1c
c0004027:	8b 30                	mov    esi,DWORD PTR [eax]
c0004029:	e8 89 f0 ff ff       	call   c00030b7 <dir_sdi>
c000402e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004031:	85 c0                	test   eax,eax
c0004033:	0f 85 9e 01 00 00    	jne    c00041d7 <dir_find+0x1bb>
c0004039:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000403c:	0f 85 8d 00 00 00    	jne    c00040cf <dir_find+0xb3>
c0004042:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004045:	e8 30 fe ff ff       	call   c0003e7a <xname_sum>
c000404a:	89 c7                	mov    edi,eax
c000404c:	31 d2                	xor    edx,edx
c000404e:	89 d8                	mov    eax,ebx
c0004050:	e8 72 f8 ff ff       	call   c00038c7 <dir_read>
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 5e 01 00 00    	jne    c00041bb <dir_find+0x19f>
c000405d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004060:	8d 41 24             	lea    eax,[ecx+0x24]
c0004063:	e8 f3 da ff ff       	call   c0001b5b <ld_word>
c0004068:	66 39 f8             	cmp    ax,di
c000406b:	75 df                	jne    c000404c <dir_find+0x30>
c000406d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004070:	31 ed                	xor    ebp,ebp
c0004072:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004076:	ba 40 00 00 00       	mov    edx,0x40
c000407b:	89 e9                	mov    ecx,ebp
c000407d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004081:	0f 84 42 01 00 00    	je     c00041c9 <dir_find+0x1ad>
c0004087:	f6 c2 1f             	test   dl,0x1f
c000408a:	75 03                	jne    c000408f <dir_find+0x73>
c000408c:	83 c2 02             	add    edx,0x2
c000408f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004093:	89 d0                	mov    eax,edx
c0004095:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004098:	e8 be da ff ff       	call   c0001b5b <ld_word>
c000409d:	83 ec 0c             	sub    esp,0xc
c00040a0:	0f b7 c0             	movzx  eax,ax
c00040a3:	50                   	push   eax
c00040a4:	e8 57 46 00 00       	call   c0008700 <ff_wtoupper>
c00040a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040ad:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040b0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b7:	e8 44 46 00 00       	call   c0008700 <ff_wtoupper>
c00040bc:	83 c4 10             	add    esp,0x10
c00040bf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040c3:	75 87                	jne    c000404c <dir_find+0x30>
c00040c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c9:	45                   	inc    ebp
c00040ca:	83 c2 02             	add    edx,0x2
c00040cd:	eb ac                	jmp    c000407b <dir_find+0x5f>
c00040cf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040d6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040e6:	89 f0                	mov    eax,esi
c00040e8:	e8 4c e2 ff ff       	call   c0002339 <move_window>
c00040ed:	85 c0                	test   eax,eax
c00040ef:	0f 85 c6 00 00 00    	jne    c00041bb <dir_find+0x19f>
c00040f5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f8:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040fb:	84 c9                	test   cl,cl
c00040fd:	0f 84 bd 00 00 00    	je     c00041c0 <dir_find+0x1a4>
c0004103:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004106:	88 d0                	mov    al,dl
c0004108:	83 e0 3f             	and    eax,0x3f
c000410b:	80 f9 e5             	cmp    cl,0xe5
c000410e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004111:	0f 84 87 00 00 00    	je     c000419e <dir_find+0x182>
c0004117:	80 e2 08             	and    dl,0x8
c000411a:	74 06                	je     c0004122 <dir_find+0x106>
c000411c:	3c 0f                	cmp    al,0xf
c000411e:	75 7e                	jne    c000419e <dir_find+0x182>
c0004120:	eb 04                	jmp    c0004126 <dir_find+0x10a>
c0004122:	3c 0f                	cmp    al,0xf
c0004124:	75 4c                	jne    c0004172 <dir_find+0x156>
c0004126:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000412a:	75 7e                	jne    c00041aa <dir_find+0x18e>
c000412c:	f6 c1 40             	test   cl,0x40
c000412f:	74 12                	je     c0004143 <dir_find+0x127>
c0004131:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004134:	83 e1 bf             	and    ecx,0xffffffbf
c0004137:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000413b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000413e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004141:	eb 06                	jmp    c0004149 <dir_find+0x12d>
c0004143:	89 f8                	mov    eax,edi
c0004145:	38 c8                	cmp    al,cl
c0004147:	75 5c                	jne    c00041a5 <dir_find+0x189>
c0004149:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000414d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004152:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004155:	75 53                	jne    c00041aa <dir_find+0x18e>
c0004157:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000415b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000415e:	89 ea                	mov    edx,ebp
c0004160:	e8 f4 fd ff ff       	call   c0003f59 <cmp_lfn>
c0004165:	85 c0                	test   eax,eax
c0004167:	74 41                	je     c00041aa <dir_find+0x18e>
c0004169:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000416d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004170:	eb 38                	jmp    c00041aa <dir_find+0x18e>
c0004172:	89 f8                	mov    eax,edi
c0004174:	84 c0                	test   al,al
c0004176:	75 0d                	jne    c0004185 <dir_find+0x169>
c0004178:	89 e8                	mov    eax,ebp
c000417a:	e8 98 de ff ff       	call   c0002017 <sum_sfn>
c000417f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004183:	74 52                	je     c00041d7 <dir_find+0x1bb>
c0004185:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004189:	75 13                	jne    c000419e <dir_find+0x182>
c000418b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000418e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004193:	89 e8                	mov    eax,ebp
c0004195:	e8 60 da ff ff       	call   c0001bfa <mem_cmp>
c000419a:	85 c0                	test   eax,eax
c000419c:	74 39                	je     c00041d7 <dir_find+0x1bb>
c000419e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041aa:	31 d2                	xor    edx,edx
c00041ac:	89 d8                	mov    eax,ebx
c00041ae:	e8 5c f4 ff ff       	call   c000360f <dir_next>
c00041b3:	85 c0                	test   eax,eax
c00041b5:	0f 84 25 ff ff ff    	je     c00040e0 <dir_find+0xc4>
c00041bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041be:	eb 17                	jmp    c00041d7 <dir_find+0x1bb>
c00041c0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041c7:	eb 0e                	jmp    c00041d7 <dir_find+0x1bb>
c00041c9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041cc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041d1:	0f 85 75 fe ff ff    	jne    c000404c <dir_find+0x30>
c00041d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041da:	83 c4 1c             	add    esp,0x1c
c00041dd:	5b                   	pop    ebx
c00041de:	5e                   	pop    esi
c00041df:	5f                   	pop    edi
c00041e0:	5d                   	pop    ebp
c00041e1:	c3                   	ret    

c00041e2 <dir_register>:
c00041e2:	55                   	push   ebp
c00041e3:	57                   	push   edi
c00041e4:	56                   	push   esi
c00041e5:	be 06 00 00 00       	mov    esi,0x6
c00041ea:	53                   	push   ebx
c00041eb:	83 ec 6c             	sub    esp,0x6c
c00041ee:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041f2:	0f 85 62 02 00 00    	jne    c000445a <dir_register+0x278>
c00041f8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041fa:	31 ff                	xor    edi,edi
c00041fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ff:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004204:	74 03                	je     c0004209 <dir_register+0x27>
c0004206:	47                   	inc    edi
c0004207:	eb f6                	jmp    c00041ff <dir_register+0x1d>
c0004209:	89 c3                	mov    ebx,eax
c000420b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000420f:	0f 85 e1 00 00 00    	jne    c00042f6 <dir_register+0x114>
c0004215:	83 c7 0e             	add    edi,0xe
c0004218:	b9 0f 00 00 00       	mov    ecx,0xf
c000421d:	89 f8                	mov    eax,edi
c000421f:	31 d2                	xor    edx,edx
c0004221:	f7 f1                	div    ecx
c0004223:	8d 50 02             	lea    edx,[eax+0x2]
c0004226:	89 c7                	mov    edi,eax
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 12 f8 ff ff       	call   c0003a41 <dir_alloc>
c000422f:	89 c6                	mov    esi,eax
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 21 02 00 00    	jne    c000445a <dir_register+0x278>
c0004239:	81 c7 01 00 00 08    	add    edi,0x8000001
c000423f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004242:	c1 e7 05             	shl    edi,0x5
c0004245:	29 f8                	sub    eax,edi
c0004247:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000424d:	a8 04                	test   al,0x4
c000424f:	0f 84 91 00 00 00    	je     c00042e6 <dir_register+0x104>
c0004255:	83 e0 fb             	and    eax,0xfffffffb
c0004258:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 25 ec ff ff       	call   c0002e87 <fill_first_frag>
c0004262:	85 c0                	test   eax,eax
c0004264:	0f 85 ee 01 00 00    	jne    c0004458 <dir_register+0x276>
c000426a:	83 c9 ff             	or     ecx,0xffffffff
c000426d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004270:	89 d8                	mov    eax,ebx
c0004272:	e8 db eb ff ff       	call   c0002e52 <fill_last_frag>
c0004277:	85 c0                	test   eax,eax
c0004279:	0f 85 d9 01 00 00    	jne    c0004458 <dir_register+0x276>
c000427f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004283:	74 61                	je     c00042e6 <dir_register+0x104>
c0004285:	89 da                	mov    edx,ebx
c0004287:	8d 44 24 14          	lea    eax,[esp+0x14]
c000428b:	e8 ea f5 ff ff       	call   c000387a <load_obj_xdir>
c0004290:	85 c0                	test   eax,eax
c0004292:	0f 85 c0 01 00 00    	jne    c0004458 <dir_register+0x276>
c0004298:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000429c:	31 c9                	xor    ecx,ecx
c000429e:	c1 e2 09             	shl    edx,0x9
c00042a1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042a4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042a7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042aa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b0:	83 c0 38             	add    eax,0x38
c00042b3:	e8 1c d9 ff ff       	call   c0001bd4 <st_qword>
c00042b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042be:	83 c0 28             	add    eax,0x28
c00042c1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042c4:	e8 0b d9 ff ff       	call   c0001bd4 <st_qword>
c00042c9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042cf:	83 c8 01             	or     eax,0x1
c00042d2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d9:	e8 db f7 ff ff       	call   c0003ab9 <store_xdir>
c00042de:	85 c0                	test   eax,eax
c00042e0:	0f 85 72 01 00 00    	jne    c0004458 <dir_register+0x276>
c00042e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042ec:	e8 c1 fb ff ff       	call   c0003eb2 <create_xdir>
c00042f1:	e9 64 01 00 00       	jmp    c000445a <dir_register+0x278>
c00042f6:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f9:	b9 0c 00 00 00       	mov    ecx,0xc
c00042fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004302:	89 c2                	mov    edx,eax
c0004304:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004308:	e8 cd d8 ff ff       	call   c0001bda <mem_cpy>
c000430d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004312:	74 58                	je     c000436c <dir_register+0x18a>
c0004314:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004318:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004320:	83 ec 0c             	sub    esp,0xc
c0004323:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000432a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000432e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004332:	e8 24 dc ff ff       	call   c0001f5b <gen_numname>
c0004337:	89 d8                	mov    eax,ebx
c0004339:	e8 de fc ff ff       	call   c000401c <dir_find>
c000433e:	83 c4 10             	add    esp,0x10
c0004341:	89 c6                	mov    esi,eax
c0004343:	85 c0                	test   eax,eax
c0004345:	75 15                	jne    c000435c <dir_register+0x17a>
c0004347:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000434b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004350:	75 ce                	jne    c0004320 <dir_register+0x13e>
c0004352:	be 07 00 00 00       	mov    esi,0x7
c0004357:	e9 fe 00 00 00       	jmp    c000445a <dir_register+0x278>
c000435c:	83 f8 04             	cmp    eax,0x4
c000435f:	0f 85 f5 00 00 00    	jne    c000445a <dir_register+0x278>
c0004365:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004369:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000436c:	b9 01 00 00 00       	mov    ecx,0x1
c0004371:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004376:	74 0f                	je     c0004387 <dir_register+0x1a5>
c0004378:	b9 0d 00 00 00       	mov    ecx,0xd
c000437d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004380:	31 d2                	xor    edx,edx
c0004382:	f7 f1                	div    ecx
c0004384:	8d 48 01             	lea    ecx,[eax+0x1]
c0004387:	89 ca                	mov    edx,ecx
c0004389:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000438d:	89 d8                	mov    eax,ebx
c000438f:	e8 ad f6 ff ff       	call   c0003a41 <dir_alloc>
c0004394:	89 c6                	mov    esi,eax
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 bc 00 00 00    	jne    c000445a <dir_register+0x278>
c000439e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043a2:	49                   	dec    ecx
c00043a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043a7:	74 6a                	je     c0004413 <dir_register+0x231>
c00043a9:	89 c8                	mov    eax,ecx
c00043ab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043ae:	c1 e0 05             	shl    eax,0x5
c00043b1:	29 c2                	sub    edx,eax
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 fd ec ff ff       	call   c00030b7 <dir_sdi>
c00043ba:	89 c6                	mov    esi,eax
c00043bc:	85 c0                	test   eax,eax
c00043be:	0f 85 96 00 00 00    	jne    c000445a <dir_register+0x278>
c00043c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c8:	e8 4a dc ff ff       	call   c0002017 <sum_sfn>
c00043cd:	0f b6 f8             	movzx  edi,al
c00043d0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043d3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043d6:	89 e8                	mov    eax,ebp
c00043d8:	e8 5c df ff ff       	call   c0002339 <move_window>
c00043dd:	89 c6                	mov    esi,eax
c00043df:	85 c0                	test   eax,eax
c00043e1:	75 77                	jne    c000445a <dir_register+0x278>
c00043e3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043eb:	83 ec 0c             	sub    esp,0xc
c00043ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043f1:	57                   	push   edi
c00043f2:	e8 e0 da ff ff       	call   c0001ed7 <put_lfn>
c00043f7:	31 d2                	xor    edx,edx
c00043f9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043fd:	89 d8                	mov    eax,ebx
c00043ff:	e8 0b f2 ff ff       	call   c000360f <dir_next>
c0004404:	83 c4 10             	add    esp,0x10
c0004407:	89 c6                	mov    esi,eax
c0004409:	85 c0                	test   eax,eax
c000440b:	75 4d                	jne    c000445a <dir_register+0x278>
c000440d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004411:	75 bd                	jne    c00043d0 <dir_register+0x1ee>
c0004413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004416:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004419:	89 e8                	mov    eax,ebp
c000441b:	e8 19 df ff ff       	call   c0002339 <move_window>
c0004420:	89 c6                	mov    esi,eax
c0004422:	85 c0                	test   eax,eax
c0004424:	75 34                	jne    c000445a <dir_register+0x278>
c0004426:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004429:	b9 20 00 00 00       	mov    ecx,0x20
c000442e:	31 d2                	xor    edx,edx
c0004430:	e8 ba d7 ff ff       	call   c0001bef <mem_set>
c0004435:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004438:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000443c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004441:	e8 94 d7 ff ff       	call   c0001bda <mem_cpy>
c0004446:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004449:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000444c:	83 e0 18             	and    eax,0x18
c000444f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004452:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004456:	eb 02                	jmp    c000445a <dir_register+0x278>
c0004458:	89 c6                	mov    esi,eax
c000445a:	83 c4 6c             	add    esp,0x6c
c000445d:	89 f0                	mov    eax,esi
c000445f:	5b                   	pop    ebx
c0004460:	5e                   	pop    esi
c0004461:	5f                   	pop    edi
c0004462:	5d                   	pop    ebp
c0004463:	c3                   	ret    

c0004464 <sync_fs>:
c0004464:	56                   	push   esi
c0004465:	53                   	push   ebx
c0004466:	53                   	push   ebx
c0004467:	89 c3                	mov    ebx,eax
c0004469:	e8 37 de ff ff       	call   c00022a5 <sync_window>
c000446e:	85 c0                	test   eax,eax
c0004470:	0f 85 b1 00 00 00    	jne    c0004527 <sync_fs+0xc3>
c0004476:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004479:	0f 85 8e 00 00 00    	jne    c000450d <sync_fs+0xa9>
c000447f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004483:	0f 85 84 00 00 00    	jne    c000450d <sync_fs+0xa9>
c0004489:	b9 00 02 00 00       	mov    ecx,0x200
c000448e:	8d 73 54             	lea    esi,[ebx+0x54]
c0004491:	31 d2                	xor    edx,edx
c0004493:	89 f0                	mov    eax,esi
c0004495:	e8 55 d7 ff ff       	call   c0001bef <mem_set>
c000449a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044a0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044a5:	e8 23 d7 ff ff       	call   c0001bcd <st_word>
c00044aa:	ba 52 52 61 41       	mov    edx,0x41615252
c00044af:	89 f0                	mov    eax,esi
c00044b1:	e8 1b d7 ff ff       	call   c0001bd1 <st_dword>
c00044b6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044bc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044c1:	e8 0b d7 ff ff       	call   c0001bd1 <st_dword>
c00044c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044cf:	e8 fd d6 ff ff       	call   c0001bd1 <st_dword>
c00044d4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044d7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044dd:	e8 ef d6 ff ff       	call   c0001bd1 <st_dword>
c00044e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e8:	83 c0 01             	add    eax,0x1
c00044eb:	83 d2 00             	adc    edx,0x0
c00044ee:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044f7:	6a 01                	push   0x1
c00044f9:	52                   	push   edx
c00044fa:	50                   	push   eax
c00044fb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044ff:	56                   	push   esi
c0004500:	50                   	push   eax
c0004501:	e8 20 d6 ff ff       	call   c0001b26 <disk_write>
c0004506:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000450a:	83 c4 20             	add    esp,0x20
c000450d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004511:	51                   	push   ecx
c0004512:	6a 00                	push   0x0
c0004514:	6a 00                	push   0x0
c0004516:	50                   	push   eax
c0004517:	e8 20 d6 ff ff       	call   c0001b3c <disk_ioctl>
c000451c:	83 c4 10             	add    esp,0x10
c000451f:	85 c0                	test   eax,eax
c0004521:	0f 95 c0             	setne  al
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	5a                   	pop    edx
c0004528:	5b                   	pop    ebx
c0004529:	5e                   	pop    esi
c000452a:	c3                   	ret    

c000452b <create_partition>:
c000452b:	55                   	push   ebp
c000452c:	0f b6 c0             	movzx  eax,al
c000452f:	57                   	push   edi
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	83 ec 60             	sub    esp,0x60
c0004535:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004539:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000453d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004541:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004545:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004549:	50                   	push   eax
c000454a:	6a 01                	push   0x1
c000454c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004550:	e8 e7 d5 ff ff       	call   c0001b3c <disk_ioctl>
c0004555:	83 c4 10             	add    esp,0x10
c0004558:	85 c0                	test   eax,eax
c000455a:	74 0a                	je     c0004566 <create_partition+0x3b>
c000455c:	b8 01 00 00 00       	mov    eax,0x1
c0004561:	e9 67 05 00 00       	jmp    c0004acd <create_partition+0x5a2>
c0004566:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000456a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000456e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004572:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004576:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000457b:	0f 86 ed 03 00 00    	jbe    c000496e <create_partition+0x443>
c0004581:	83 c0 df             	add    eax,0xffffffdf
c0004584:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000458c:	83 d2 ff             	adc    edx,0xffffffff
c000458f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004593:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000459b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000459f:	83 c0 bd             	add    eax,0xffffffbd
c00045a2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a9:	83 d2 ff             	adc    edx,0xffffffff
c00045ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045b4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045bc:	be 22 00 00 00       	mov    esi,0x22
c00045c1:	31 ff                	xor    edi,edi
c00045c3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045cb:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045d3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045db:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045df:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e5:	75 0e                	jne    c00045f5 <create_partition+0xca>
c00045e7:	b9 00 02 00 00       	mov    ecx,0x200
c00045ec:	31 d2                	xor    edx,edx
c00045ee:	89 d8                	mov    eax,ebx
c00045f0:	e8 fa d5 ff ff       	call   c0001bef <mem_set>
c00045f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004601:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004604:	0f 84 23 01 00 00    	je     c000472d <create_partition+0x202>
c000460a:	89 f0                	mov    eax,esi
c000460c:	89 fa                	mov    edx,edi
c000460e:	05 ff 07 00 00       	add    eax,0x7ff
c0004613:	83 d2 00             	adc    edx,0x0
c0004616:	89 c1                	mov    ecx,eax
c0004618:	89 d7                	mov    edi,edx
c000461a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004620:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004624:	89 ce                	mov    esi,ecx
c0004626:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000462a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000462e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004632:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004635:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004639:	89 04 24             	mov    DWORD PTR [esp],eax
c000463c:	b8 64 00 00 00       	mov    eax,0x64
c0004641:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004644:	b8 00 00 00 00       	mov    eax,0x0
c0004649:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000464d:	72 41                	jb     c0004690 <create_partition+0x165>
c000464f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004657:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000465b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004660:	01 c1                	add    ecx,eax
c0004662:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004666:	f7 24 24             	mul    DWORD PTR [esp]
c0004669:	6a 00                	push   0x0
c000466b:	01 ca                	add    edx,ecx
c000466d:	6a 64                	push   0x64
c000466f:	52                   	push   edx
c0004670:	50                   	push   eax
c0004671:	e8 0e df 01 00       	call   c0022584 <__udivdi3>
c0004676:	83 c4 10             	add    esp,0x10
c0004679:	05 ff 07 00 00       	add    eax,0x7ff
c000467e:	83 d2 00             	adc    edx,0x0
c0004681:	89 c1                	mov    ecx,eax
c0004683:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004687:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000468d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004690:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004693:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004697:	01 f0                	add    eax,esi
c0004699:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000469d:	11 fa                	adc    edx,edi
c000469f:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046a3:	19 d1                	sbb    ecx,edx
c00046a5:	73 2e                	jae    c00046d5 <create_partition+0x1aa>
c00046a7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046ab:	89 f8                	mov    eax,edi
c00046ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046b4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c0:	73 6b                	jae    c000472d <create_partition+0x202>
c00046c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046ca:	29 f0                	sub    eax,esi
c00046cc:	19 fa                	sbb    edx,edi
c00046ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00046d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046dc:	74 4f                	je     c000472d <create_partition+0x202>
c00046de:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046e1:	b9 10 00 00 00       	mov    ecx,0x10
c00046e6:	ba 70 36 02 c0       	mov    edx,0xc0023670
c00046eb:	e8 ea d4 ff ff       	call   c0001bda <mem_cpy>
c00046f0:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046f4:	b9 10 00 00 00       	mov    ecx,0x10
c00046f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046fd:	e8 2c db ff ff       	call   c000222e <make_rand>
c0004702:	89 f2                	mov    edx,esi
c0004704:	89 f9                	mov    ecx,edi
c0004706:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000470a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000470e:	e8 c1 d4 ff ff       	call   c0001bd4 <st_qword>
c0004713:	03 34 24             	add    esi,DWORD PTR [esp]
c0004716:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000471a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000471e:	89 f2                	mov    edx,esi
c0004720:	89 f9                	mov    ecx,edi
c0004722:	83 c2 ff             	add    edx,0xffffffff
c0004725:	83 d1 ff             	adc    ecx,0xffffffff
c0004728:	e8 a7 d4 ff ff       	call   c0001bd4 <st_qword>
c000472d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004731:	83 e8 80             	sub    eax,0xffffff80
c0004734:	89 c5                	mov    ebp,eax
c0004736:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000473a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004740:	75 6b                	jne    c00047ad <create_partition+0x282>
c0004742:	45                   	inc    ebp
c0004743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004747:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000474c:	e8 39 da ff ff       	call   c000218a <crc32>
c0004751:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004757:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000475b:	75 e5                	jne    c0004742 <create_partition+0x217>
c000475d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004761:	31 d2                	xor    edx,edx
c0004763:	83 ec 0c             	sub    esp,0xc
c0004766:	c1 ed 09             	shr    ebp,0x9
c0004769:	6a 01                	push   0x1
c000476b:	8d 45 02             	lea    eax,[ebp+0x2]
c000476e:	52                   	push   edx
c000476f:	50                   	push   eax
c0004770:	53                   	push   ebx
c0004771:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004775:	e8 ac d3 ff ff       	call   c0001b26 <disk_write>
c000477a:	83 c4 20             	add    esp,0x20
c000477d:	85 c0                	test   eax,eax
c000477f:	0f 85 d7 fd ff ff    	jne    c000455c <create_partition+0x31>
c0004785:	83 ec 0c             	sub    esp,0xc
c0004788:	31 d2                	xor    edx,edx
c000478a:	6a 01                	push   0x1
c000478c:	89 e8                	mov    eax,ebp
c000478e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004792:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004796:	52                   	push   edx
c0004797:	50                   	push   eax
c0004798:	53                   	push   ebx
c0004799:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479d:	e8 84 d3 ff ff       	call   c0001b26 <disk_write>
c00047a2:	83 c4 20             	add    esp,0x20
c00047a5:	85 c0                	test   eax,eax
c00047a7:	0f 85 af fd ff ff    	jne    c000455c <create_partition+0x31>
c00047ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047b5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ba:	74 0d                	je     c00047c9 <create_partition+0x29e>
c00047bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047c4:	e9 12 fe ff ff       	jmp    c00045db <create_partition+0xb0>
c00047c9:	31 d2                	xor    edx,edx
c00047cb:	b9 00 02 00 00       	mov    ecx,0x200
c00047d0:	89 d8                	mov    eax,ebx
c00047d2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047d5:	e8 15 d4 ff ff       	call   c0001bef <mem_set>
c00047da:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047dd:	b9 10 00 00 00       	mov    ecx,0x10
c00047e2:	ba 60 35 02 c0       	mov    edx,0xc0023560
c00047e7:	89 d8                	mov    eax,ebx
c00047e9:	e8 ec d3 ff ff       	call   c0001bda <mem_cpy>
c00047ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047f2:	8d 43 58             	lea    eax,[ebx+0x58]
c00047f5:	f7 d2                	not    edx
c00047f7:	e8 d5 d3 ff ff       	call   c0001bd1 <st_dword>
c00047fc:	8d 43 18             	lea    eax,[ebx+0x18]
c00047ff:	31 c9                	xor    ecx,ecx
c0004801:	89 04 24             	mov    DWORD PTR [esp],eax
c0004804:	ba 01 00 00 00       	mov    edx,0x1
c0004809:	e8 c6 d3 ff ff       	call   c0001bd4 <st_qword>
c000480e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004812:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004816:	83 c2 ff             	add    edx,0xffffffff
c0004819:	89 e8                	mov    eax,ebp
c000481b:	83 d1 ff             	adc    ecx,0xffffffff
c000481e:	e8 b1 d3 ff ff       	call   c0001bd4 <st_qword>
c0004823:	31 c9                	xor    ecx,ecx
c0004825:	8d 43 28             	lea    eax,[ebx+0x28]
c0004828:	ba 22 00 00 00       	mov    edx,0x22
c000482d:	e8 a2 d3 ff ff       	call   c0001bd4 <st_qword>
c0004832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004836:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000483a:	83 c2 de             	add    edx,0xffffffde
c000483d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004840:	83 d1 ff             	adc    ecx,0xffffffff
c0004843:	31 f6                	xor    esi,esi
c0004845:	e8 8a d3 ff ff       	call   c0001bd4 <st_qword>
c000484a:	8d 43 54             	lea    eax,[ebx+0x54]
c000484d:	ba 80 00 00 00       	mov    edx,0x80
c0004852:	e8 7a d3 ff ff       	call   c0001bd1 <st_dword>
c0004857:	8d 43 50             	lea    eax,[ebx+0x50]
c000485a:	ba 80 00 00 00       	mov    edx,0x80
c000485f:	e8 6d d3 ff ff       	call   c0001bd1 <st_dword>
c0004864:	ba 02 00 00 00       	mov    edx,0x2
c0004869:	89 f8                	mov    eax,edi
c000486b:	e8 61 d3 ff ff       	call   c0001bd1 <st_dword>
c0004870:	8d 53 38             	lea    edx,[ebx+0x38]
c0004873:	b9 10 00 00 00       	mov    ecx,0x10
c0004878:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000487c:	e8 ad d9 ff ff       	call   c000222e <make_rand>
c0004881:	83 c8 ff             	or     eax,0xffffffff
c0004884:	46                   	inc    esi
c0004885:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000488a:	e8 fb d8 ff ff       	call   c000218a <crc32>
c000488f:	83 fe 5c             	cmp    esi,0x5c
c0004892:	75 f0                	jne    c0004884 <create_partition+0x359>
c0004894:	f7 d0                	not    eax
c0004896:	8d 73 10             	lea    esi,[ebx+0x10]
c0004899:	89 c2                	mov    edx,eax
c000489b:	89 f0                	mov    eax,esi
c000489d:	e8 2f d3 ff ff       	call   c0001bd1 <st_dword>
c00048a2:	83 ec 0c             	sub    esp,0xc
c00048a5:	6a 01                	push   0x1
c00048a7:	6a 00                	push   0x0
c00048a9:	6a 01                	push   0x1
c00048ab:	53                   	push   ebx
c00048ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048b0:	e8 71 d2 ff ff       	call   c0001b26 <disk_write>
c00048b5:	83 c4 20             	add    esp,0x20
c00048b8:	85 c0                	test   eax,eax
c00048ba:	0f 85 9c fc ff ff    	jne    c000455c <create_partition+0x31>
c00048c0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c8:	83 c2 ff             	add    edx,0xffffffff
c00048cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048ce:	83 d1 ff             	adc    ecx,0xffffffff
c00048d1:	e8 fe d2 ff ff       	call   c0001bd4 <st_qword>
c00048d6:	ba 01 00 00 00       	mov    edx,0x1
c00048db:	31 c9                	xor    ecx,ecx
c00048dd:	89 e8                	mov    eax,ebp
c00048df:	e8 f0 d2 ff ff       	call   c0001bd4 <st_qword>
c00048e4:	89 f8                	mov    eax,edi
c00048e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048ee:	31 ff                	xor    edi,edi
c00048f0:	e8 df d2 ff ff       	call   c0001bd4 <st_qword>
c00048f5:	89 f0                	mov    eax,esi
c00048f7:	31 d2                	xor    edx,edx
c00048f9:	e8 d3 d2 ff ff       	call   c0001bd1 <st_dword>
c00048fe:	83 c8 ff             	or     eax,0xffffffff
c0004901:	47                   	inc    edi
c0004902:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004907:	e8 7e d8 ff ff       	call   c000218a <crc32>
c000490c:	83 ff 5c             	cmp    edi,0x5c
c000490f:	75 f0                	jne    c0004901 <create_partition+0x3d6>
c0004911:	f7 d0                	not    eax
c0004913:	89 c2                	mov    edx,eax
c0004915:	89 f0                	mov    eax,esi
c0004917:	e8 b5 d2 ff ff       	call   c0001bd1 <st_dword>
c000491c:	83 ec 0c             	sub    esp,0xc
c000491f:	6a 01                	push   0x1
c0004921:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004925:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004929:	83 c0 ff             	add    eax,0xffffffff
c000492c:	83 d2 ff             	adc    edx,0xffffffff
c000492f:	52                   	push   edx
c0004930:	50                   	push   eax
c0004931:	53                   	push   ebx
c0004932:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004936:	e8 eb d1 ff ff       	call   c0001b26 <disk_write>
c000493b:	83 c4 20             	add    esp,0x20
c000493e:	85 c0                	test   eax,eax
c0004940:	0f 85 16 fc ff ff    	jne    c000455c <create_partition+0x31>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	b9 00 02 00 00       	mov    ecx,0x200
c000494f:	e8 9b d2 ff ff       	call   c0001bef <mem_set>
c0004954:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000495a:	b9 10 00 00 00       	mov    ecx,0x10
c000495f:	ba 70 35 02 c0       	mov    edx,0xc0023570
c0004964:	e8 71 d2 ff ff       	call   c0001bda <mem_cpy>
c0004969:	e9 21 01 00 00       	jmp    c0004a8f <create_partition+0x564>
c000496e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004972:	b9 05 00 00 00       	mov    ecx,0x5
c0004977:	89 04 24             	mov    DWORD PTR [esp],eax
c000497a:	bf 08 00 00 00       	mov    edi,0x8
c000497f:	89 f8                	mov    eax,edi
c0004981:	31 d2                	xor    edx,edx
c0004983:	0f b6 f0             	movzx  esi,al
c0004986:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004989:	f7 f6                	div    esi
c000498b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004990:	76 0a                	jbe    c000499c <create_partition+0x471>
c0004992:	d1 e7                	shl    edi,1
c0004994:	49                   	dec    ecx
c0004995:	75 e8                	jne    c000497f <create_partition+0x454>
c0004997:	bf ff ff ff ff       	mov    edi,0xffffffff
c000499c:	b9 00 02 00 00       	mov    ecx,0x200
c00049a1:	31 d2                	xor    edx,edx
c00049a3:	89 d8                	mov    eax,ebx
c00049a5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049ab:	e8 3f d2 ff ff       	call   c0001bef <mem_set>
c00049b0:	b9 64 00 00 00       	mov    ecx,0x64
c00049b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b8:	31 d2                	xor    edx,edx
c00049ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049c2:	f7 f1                	div    ecx
c00049c4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049cd:	89 f8                	mov    eax,edi
c00049cf:	0f b6 c0             	movzx  eax,al
c00049d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049d6:	e9 80 00 00 00       	jmp    c0004a5b <create_partition+0x530>
c00049db:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049de:	29 cf                	sub    edi,ecx
c00049e0:	89 ca                	mov    edx,ecx
c00049e2:	89 f0                	mov    eax,esi
c00049e4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e9:	e8 e3 d1 ff ff       	call   c0001bd1 <st_dword>
c00049ee:	8d 46 04             	lea    eax,[esi+0x4]
c00049f1:	89 fa                	mov    edx,edi
c00049f3:	83 c6 10             	add    esi,0x10
c00049f6:	e8 d6 d1 ff ff       	call   c0001bd1 <st_dword>
c00049fb:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049ff:	31 d2                	xor    edx,edx
c0004a01:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a04:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a08:	89 c8                	mov    eax,ecx
c0004a0a:	01 f9                	add    ecx,edi
c0004a0c:	f7 f5                	div    ebp
c0004a0e:	89 d5                	mov    ebp,edx
c0004a10:	31 d2                	xor    edx,edx
c0004a12:	45                   	inc    ebp
c0004a13:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a17:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a1a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a1d:	89 c2                	mov    edx,eax
c0004a1f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a22:	c1 ea 02             	shr    edx,0x2
c0004a25:	83 e2 c0             	and    edx,0xffffffc0
c0004a28:	09 ea                	or     edx,ebp
c0004a2a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a2f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a32:	31 d2                	xor    edx,edx
c0004a34:	f7 f5                	div    ebp
c0004a36:	89 d7                	mov    edi,edx
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	47                   	inc    edi
c0004a3b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a3f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a42:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a45:	89 c5                	mov    ebp,eax
c0004a47:	c1 ed 02             	shr    ebp,0x2
c0004a4a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a4d:	09 ef                	or     edi,ebp
c0004a4f:	89 fa                	mov    edx,edi
c0004a51:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a54:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a59:	74 34                	je     c0004a8f <create_partition+0x564>
c0004a5b:	85 c9                	test   ecx,ecx
c0004a5d:	74 30                	je     c0004a8f <create_partition+0x564>
c0004a5f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a62:	76 2b                	jbe    c0004a8f <create_partition+0x564>
c0004a64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a68:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a6c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a6f:	83 ff 64             	cmp    edi,0x64
c0004a72:	76 4b                	jbe    c0004abf <create_partition+0x594>
c0004a74:	89 f8                	mov    eax,edi
c0004a76:	01 c8                	add    eax,ecx
c0004a78:	0f 82 5d ff ff ff    	jb     c00049db <create_partition+0x4b0>
c0004a7e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a81:	0f 87 54 ff ff ff    	ja     c00049db <create_partition+0x4b0>
c0004a87:	85 ff                	test   edi,edi
c0004a89:	0f 85 51 ff ff ff    	jne    c00049e0 <create_partition+0x4b5>
c0004a8f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a95:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a9a:	e8 2e d1 ff ff       	call   c0001bcd <st_word>
c0004a9f:	83 ec 0c             	sub    esp,0xc
c0004aa2:	6a 01                	push   0x1
c0004aa4:	6a 00                	push   0x0
c0004aa6:	6a 00                	push   0x0
c0004aa8:	53                   	push   ebx
c0004aa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aad:	e8 74 d0 ff ff       	call   c0001b26 <disk_write>
c0004ab2:	83 c4 20             	add    esp,0x20
c0004ab5:	85 c0                	test   eax,eax
c0004ab7:	0f 95 c0             	setne  al
c0004aba:	0f b6 c0             	movzx  eax,al
c0004abd:	eb 0e                	jmp    c0004acd <create_partition+0x5a2>
c0004abf:	74 07                	je     c0004ac8 <create_partition+0x59d>
c0004ac1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ac6:	eb ac                	jmp    c0004a74 <create_partition+0x549>
c0004ac8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004acb:	eb a7                	jmp    c0004a74 <create_partition+0x549>
c0004acd:	83 c4 5c             	add    esp,0x5c
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	5d                   	pop    ebp
c0004ad4:	c3                   	ret    

c0004ad5 <get_fileinfo>:
c0004ad5:	55                   	push   ebp
c0004ad6:	57                   	push   edi
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 1c             	sub    esp,0x1c
c0004adc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ade:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ae2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ae6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004aec:	0f 84 dc 01 00 00    	je     c0004cce <get_fileinfo+0x1f9>
c0004af2:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004af5:	75 0f                	jne    c0004b06 <get_fileinfo+0x31>
c0004af7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004afa:	83 c4 1c             	add    esp,0x1c
c0004afd:	5b                   	pop    ebx
c0004afe:	5e                   	pop    esi
c0004aff:	5f                   	pop    edi
c0004b00:	5d                   	pop    ebp
c0004b01:	e9 58 d5 ff ff       	jmp    c000205e <get_xfileinfo>
c0004b06:	89 d3                	mov    ebx,edx
c0004b08:	89 c6                	mov    esi,eax
c0004b0a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b0e:	74 6a                	je     c0004b7a <get_fileinfo+0xa5>
c0004b10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b18:	31 ed                	xor    ebp,ebp
c0004b1a:	31 ff                	xor    edi,edi
c0004b1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b27:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b2b:	66 85 d2             	test   dx,dx
c0004b2e:	74 3e                	je     c0004b6e <get_fileinfo+0x99>
c0004b30:	66 85 ed             	test   bp,bp
c0004b33:	75 0c                	jne    c0004b41 <get_fileinfo+0x6c>
c0004b35:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b3b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b3f:	76 22                	jbe    c0004b63 <get_fileinfo+0x8e>
c0004b41:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b46:	89 e8                	mov    eax,ebp
c0004b48:	29 f9                	sub    ecx,edi
c0004b4a:	c1 e0 10             	shl    eax,0x10
c0004b4d:	09 d0                	or     eax,edx
c0004b4f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b53:	e8 a3 d1 ff ff       	call   c0001cfb <put_utf>
c0004b58:	84 c0                	test   al,al
c0004b5a:	74 10                	je     c0004b6c <get_fileinfo+0x97>
c0004b5c:	0f b6 c0             	movzx  eax,al
c0004b5f:	31 d2                	xor    edx,edx
c0004b61:	01 c7                	add    edi,eax
c0004b63:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b68:	89 d5                	mov    ebp,edx
c0004b6a:	eb b0                	jmp    c0004b1c <get_fileinfo+0x47>
c0004b6c:	31 ff                	xor    edi,edi
c0004b6e:	66 85 ed             	test   bp,bp
c0004b71:	74 02                	je     c0004b75 <get_fileinfo+0xa0>
c0004b73:	31 ff                	xor    edi,edi
c0004b75:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b7a:	31 ff                	xor    edi,edi
c0004b7c:	31 c9                	xor    ecx,ecx
c0004b7e:	83 f9 0a             	cmp    ecx,0xa
c0004b81:	0f 87 ad 00 00 00    	ja     c0004c34 <get_fileinfo+0x15f>
c0004b87:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b8d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b91:	66 83 fa 20          	cmp    dx,0x20
c0004b95:	0f 84 92 00 00 00    	je     c0004c2d <get_fileinfo+0x158>
c0004b9b:	66 83 fa 05          	cmp    dx,0x5
c0004b9f:	75 05                	jne    c0004ba6 <get_fileinfo+0xd1>
c0004ba1:	ba e5 00 00 00       	mov    edx,0xe5
c0004ba6:	83 ff 0b             	cmp    edi,0xb
c0004ba9:	77 0b                	ja     c0004bb6 <get_fileinfo+0xe1>
c0004bab:	83 fd 09             	cmp    ebp,0x9
c0004bae:	75 06                	jne    c0004bb6 <get_fileinfo+0xe1>
c0004bb0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bb5:	47                   	inc    edi
c0004bb6:	0f b7 c2             	movzx  eax,dx
c0004bb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbd:	e8 6d d0 ff ff       	call   c0001c2f <dbc_1st>
c0004bc2:	85 c0                	test   eax,eax
c0004bc4:	74 2f                	je     c0004bf5 <get_fileinfo+0x120>
c0004bc6:	83 fd 08             	cmp    ebp,0x8
c0004bc9:	74 2a                	je     c0004bf5 <get_fileinfo+0x120>
c0004bcb:	83 fd 0b             	cmp    ebp,0xb
c0004bce:	74 25                	je     c0004bf5 <get_fileinfo+0x120>
c0004bd0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bd7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bdb:	e8 52 d0 ff ff       	call   c0001c32 <dbc_2nd>
c0004be0:	85 c0                	test   eax,eax
c0004be2:	74 11                	je     c0004bf5 <get_fileinfo+0x120>
c0004be4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bed:	c1 e2 08             	shl    edx,0x8
c0004bf0:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004bf3:	09 c2                	or     edx,eax
c0004bf5:	0f b7 d2             	movzx  edx,dx
c0004bf8:	50                   	push   eax
c0004bf9:	50                   	push   eax
c0004bfa:	68 b5 01 00 00       	push   0x1b5
c0004bff:	52                   	push   edx
c0004c00:	e8 87 3a 00 00       	call   c000868c <ff_oem2uni>
c0004c05:	83 c4 10             	add    esp,0x10
c0004c08:	66 85 c0             	test   ax,ax
c0004c0b:	75 04                	jne    c0004c11 <get_fileinfo+0x13c>
c0004c0d:	31 ff                	xor    edi,edi
c0004c0f:	eb 23                	jmp    c0004c34 <get_fileinfo+0x15f>
c0004c11:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c16:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c1a:	29 f9                	sub    ecx,edi
c0004c1c:	0f b7 c0             	movzx  eax,ax
c0004c1f:	e8 d7 d0 ff ff       	call   c0001cfb <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 e5                	je     c0004c0d <get_fileinfo+0x138>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	01 c7                	add    edi,eax
c0004c2d:	89 e9                	mov    ecx,ebp
c0004c2f:	e9 4a ff ff ff       	jmp    c0004b7e <get_fileinfo+0xa9>
c0004c34:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c39:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c3d:	75 54                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c3f:	85 ff                	test   edi,edi
c0004c41:	75 0b                	jne    c0004c4e <get_fileinfo+0x179>
c0004c43:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c47:	ba 01 00 00 00       	mov    edx,0x1
c0004c4c:	eb 33                	jmp    c0004c81 <get_fileinfo+0x1ac>
c0004c4e:	b1 08                	mov    cl,0x8
c0004c50:	31 d2                	xor    edx,edx
c0004c52:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c58:	84 c0                	test   al,al
c0004c5a:	74 25                	je     c0004c81 <get_fileinfo+0x1ac>
c0004c5c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c60:	74 16                	je     c0004c78 <get_fileinfo+0x1a3>
c0004c62:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c65:	66 83 ff 19          	cmp    di,0x19
c0004c69:	77 0f                	ja     c0004c7a <get_fileinfo+0x1a5>
c0004c6b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c6e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c71:	74 07                	je     c0004c7a <get_fileinfo+0x1a5>
c0004c73:	83 c0 20             	add    eax,0x20
c0004c76:	eb 02                	jmp    c0004c7a <get_fileinfo+0x1a5>
c0004c78:	b1 10                	mov    cl,0x10
c0004c7a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c7e:	42                   	inc    edx
c0004c7f:	eb d1                	jmp    c0004c52 <get_fileinfo+0x17d>
c0004c81:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c89:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c8d:	75 04                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c8f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c93:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c96:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c99:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	83 c0 1c             	add    eax,0x1c
c0004ca2:	e8 c1 ce ff ff       	call   c0001b68 <ld_dword>
c0004ca7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cae:	89 03                	mov    DWORD PTR [ebx],eax
c0004cb0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cb3:	83 c0 16             	add    eax,0x16
c0004cb6:	e8 a0 ce ff ff       	call   c0001b5b <ld_word>
c0004cbb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cbf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc2:	83 c0 18             	add    eax,0x18
c0004cc5:	e8 91 ce ff ff       	call   c0001b5b <ld_word>
c0004cca:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cce:	83 c4 1c             	add    esp,0x1c
c0004cd1:	5b                   	pop    ebx
c0004cd2:	5e                   	pop    esi
c0004cd3:	5f                   	pop    edi
c0004cd4:	5d                   	pop    ebp
c0004cd5:	c3                   	ret    

c0004cd6 <ld_clust.isra.0>:
c0004cd6:	56                   	push   esi
c0004cd7:	89 c6                	mov    esi,eax
c0004cd9:	53                   	push   ebx
c0004cda:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cdd:	89 d3                	mov    ebx,edx
c0004cdf:	e8 77 ce ff ff       	call   c0001b5b <ld_word>
c0004ce4:	0f b7 c8             	movzx  ecx,ax
c0004ce7:	89 f0                	mov    eax,esi
c0004ce9:	3c 03                	cmp    al,0x3
c0004ceb:	75 0d                	jne    c0004cfa <ld_clust.isra.0+0x24>
c0004ced:	8d 43 14             	lea    eax,[ebx+0x14]
c0004cf0:	e8 66 ce ff ff       	call   c0001b5b <ld_word>
c0004cf5:	c1 e0 10             	shl    eax,0x10
c0004cf8:	09 c1                	or     ecx,eax
c0004cfa:	89 c8                	mov    eax,ecx
c0004cfc:	5b                   	pop    ebx
c0004cfd:	5e                   	pop    esi
c0004cfe:	c3                   	ret    

c0004cff <st_clust.isra.1>:
c0004cff:	56                   	push   esi
c0004d00:	89 c6                	mov    esi,eax
c0004d02:	53                   	push   ebx
c0004d03:	89 d3                	mov    ebx,edx
c0004d05:	0f b7 d1             	movzx  edx,cx
c0004d08:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d0b:	e8 bd ce ff ff       	call   c0001bcd <st_word>
c0004d10:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d13:	75 0f                	jne    c0004d24 <st_clust.isra.1+0x25>
c0004d15:	c1 e9 10             	shr    ecx,0x10
c0004d18:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d1b:	89 ca                	mov    edx,ecx
c0004d1d:	5b                   	pop    ebx
c0004d1e:	5e                   	pop    esi
c0004d1f:	e9 a9 ce ff ff       	jmp    c0001bcd <st_word>
c0004d24:	5b                   	pop    ebx
c0004d25:	5e                   	pop    esi
c0004d26:	c3                   	ret    

c0004d27 <init_alloc_info.isra.2>:
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	89 d3                	mov    ebx,edx
c0004d2d:	51                   	push   ecx
c0004d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d30:	83 c0 34             	add    eax,0x34
c0004d33:	e8 30 ce ff ff       	call   c0001b68 <ld_dword>
c0004d38:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d3d:	83 c0 38             	add    eax,0x38
c0004d40:	e8 3b ce ff ff       	call   c0001b80 <ld_qword>
c0004d45:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d48:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d50:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d57:	83 e0 02             	and    eax,0x2
c0004d5a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d5d:	5b                   	pop    ebx
c0004d5e:	5b                   	pop    ebx
c0004d5f:	5e                   	pop    esi
c0004d60:	c3                   	ret    

c0004d61 <follow_path>:
c0004d61:	56                   	push   esi
c0004d62:	53                   	push   ebx
c0004d63:	89 c3                	mov    ebx,eax
c0004d65:	83 ec 14             	sub    esp,0x14
c0004d68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d6c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d72:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d74:	80 fa 5c             	cmp    dl,0x5c
c0004d77:	75 07                	jne    c0004d80 <follow_path+0x1f>
c0004d79:	40                   	inc    eax
c0004d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7e:	eb ee                	jmp    c0004d6e <follow_path+0xd>
c0004d80:	80 fa 2f             	cmp    dl,0x2f
c0004d83:	74 f4                	je     c0004d79 <follow_path+0x18>
c0004d85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d8c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d93:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d96:	77 52                	ja     c0004dea <follow_path+0x89>
c0004d98:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d9c:	31 d2                	xor    edx,edx
c0004d9e:	89 d8                	mov    eax,ebx
c0004da0:	e8 12 e3 ff ff       	call   c00030b7 <dir_sdi>
c0004da5:	eb 7c                	jmp    c0004e23 <follow_path+0xc2>
c0004da7:	89 d8                	mov    eax,ebx
c0004da9:	e8 6e f2 ff ff       	call   c000401c <dir_find>
c0004dae:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004db1:	85 c0                	test   eax,eax
c0004db3:	75 46                	jne    c0004dfb <follow_path+0x9a>
c0004db5:	80 e2 04             	and    dl,0x4
c0004db8:	75 69                	jne    c0004e23 <follow_path+0xc2>
c0004dba:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dbe:	74 5e                	je     c0004e1e <follow_path+0xbd>
c0004dc0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dc2:	3c 04                	cmp    al,0x4
c0004dc4:	75 41                	jne    c0004e07 <follow_path+0xa6>
c0004dc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dcd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dd0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dd3:	30 c0                	xor    al,al
c0004dd5:	09 d0                	or     eax,edx
c0004dd7:	89 da                	mov    edx,ebx
c0004dd9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ddc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ddf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004de2:	8d 46 10             	lea    eax,[esi+0x10]
c0004de5:	e8 3d ff ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004dea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dee:	89 d8                	mov    eax,ebx
c0004df0:	e8 a9 ed ff ff       	call   c0003b9e <create_name>
c0004df5:	85 c0                	test   eax,eax
c0004df7:	74 ae                	je     c0004da7 <follow_path+0x46>
c0004df9:	eb 28                	jmp    c0004e23 <follow_path+0xc2>
c0004dfb:	83 f8 04             	cmp    eax,0x4
c0004dfe:	75 23                	jne    c0004e23 <follow_path+0xc2>
c0004e00:	80 e2 04             	and    dl,0x4
c0004e03:	74 19                	je     c0004e1e <follow_path+0xbd>
c0004e05:	eb 1c                	jmp    c0004e23 <follow_path+0xc2>
c0004e07:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e0a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e10:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e14:	e8 bd fe ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0004e19:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e1c:	eb cc                	jmp    c0004dea <follow_path+0x89>
c0004e1e:	b8 05 00 00 00       	mov    eax,0x5
c0004e23:	83 c4 14             	add    esp,0x14
c0004e26:	5b                   	pop    ebx
c0004e27:	5e                   	pop    esi
c0004e28:	c3                   	ret    

c0004e29 <f_mount>:
c0004e29:	53                   	push   ebx
c0004e2a:	83 ec 18             	sub    esp,0x18
c0004e2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e3d:	e8 fb d2 ff ff       	call   c000213d <get_ldnumber>
c0004e42:	89 c2                	mov    edx,eax
c0004e44:	b8 0b 00 00 00       	mov    eax,0xb
c0004e49:	85 d2                	test   edx,edx
c0004e4b:	78 39                	js     c0004e86 <f_mount+0x5d>
c0004e4d:	8b 04 95 40 7c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd83c0]
c0004e54:	85 c0                	test   eax,eax
c0004e56:	74 03                	je     c0004e5b <f_mount+0x32>
c0004e58:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e5f:	85 c0                	test   eax,eax
c0004e61:	74 03                	je     c0004e66 <f_mount+0x3d>
c0004e63:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6a:	89 04 95 40 7c 02 c0 	mov    DWORD PTR [edx*4-0x3ffd83c0],eax
c0004e71:	31 c0                	xor    eax,eax
c0004e73:	84 db                	test   bl,bl
c0004e75:	74 0f                	je     c0004e86 <f_mount+0x5d>
c0004e77:	31 c9                	xor    ecx,ecx
c0004e79:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e7d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e81:	e8 65 d7 ff ff       	call   c00025eb <mount_volume>
c0004e86:	83 c4 18             	add    esp,0x18
c0004e89:	5b                   	pop    ebx
c0004e8a:	c3                   	ret    

c0004e8b <f_open>:
c0004e8b:	55                   	push   ebp
c0004e8c:	bd 09 00 00 00       	mov    ebp,0x9
c0004e91:	57                   	push   edi
c0004e92:	56                   	push   esi
c0004e93:	53                   	push   ebx
c0004e94:	83 ec 7c             	sub    esp,0x7c
c0004e97:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e9e:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ea5:	85 db                	test   ebx,ebx
c0004ea7:	0f 84 10 04 00 00    	je     c00052bd <f_open+0x432>
c0004ead:	89 fe                	mov    esi,edi
c0004eaf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eb3:	83 e6 3f             	and    esi,0x3f
c0004eb6:	89 f0                	mov    eax,esi
c0004eb8:	0f b6 c8             	movzx  ecx,al
c0004ebb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ec2:	e8 24 d7 ff ff       	call   c00025eb <mount_volume>
c0004ec7:	89 c5                	mov    ebp,eax
c0004ec9:	85 c0                	test   eax,eax
c0004ecb:	0f 85 e6 03 00 00    	jne    c00052b7 <f_open+0x42c>
c0004ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ede:	83 ec 0c             	sub    esp,0xc
c0004ee1:	68 60 04 00 00       	push   0x460
c0004ee6:	e8 d9 36 00 00       	call   c00085c4 <ff_memalloc>
c0004eeb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eef:	83 c4 10             	add    esp,0x10
c0004ef2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ef7:	0f 84 c0 03 00 00    	je     c00052bd <f_open+0x432>
c0004efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f01:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f05:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f0b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f0e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f11:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f18:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f1c:	e8 40 fe ff ff       	call   c0004d61 <follow_path>
c0004f21:	89 c5                	mov    ebp,eax
c0004f23:	85 c0                	test   eax,eax
c0004f25:	75 0c                	jne    c0004f33 <f_open+0xa8>
c0004f27:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f2c:	79 05                	jns    c0004f33 <f_open+0xa8>
c0004f2e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f33:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f39:	0f 84 84 01 00 00    	je     c00050c3 <f_open+0x238>
c0004f3f:	85 ed                	test   ebp,ebp
c0004f41:	74 20                	je     c0004f63 <f_open+0xd8>
c0004f43:	83 fd 04             	cmp    ebp,0x4
c0004f46:	0f 85 58 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f50:	83 ce 08             	or     esi,0x8
c0004f53:	e8 8a f2 ff ff       	call   c00041e2 <dir_register>
c0004f58:	89 c5                	mov    ebp,eax
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 2f                	je     c0004f8d <f_open+0x102>
c0004f5e:	e9 41 03 00 00       	jmp    c00052a4 <f_open+0x419>
c0004f63:	bd 07 00 00 00       	mov    ebp,0x7
c0004f68:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f6d:	0f 85 31 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f73:	bd 08 00 00 00       	mov    ebp,0x8
c0004f78:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f7e:	0f 85 20 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f84:	83 e7 08             	and    edi,0x8
c0004f87:	0f 84 65 01 00 00    	je     c00050f2 <f_open+0x267>
c0004f8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f91:	8a 02                	mov    al,BYTE PTR [edx]
c0004f93:	3c 04                	cmp    al,0x4
c0004f95:	0f 85 97 00 00 00    	jne    c0005032 <f_open+0x1a7>
c0004f9b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f9e:	89 13                	mov    DWORD PTR [ebx],edx
c0004fa0:	89 da                	mov    edx,ebx
c0004fa2:	e8 80 fd ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004fa7:	31 d2                	xor    edx,edx
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fb2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fb5:	83 c0 02             	add    eax,0x2
c0004fb8:	e8 32 cc ff ff       	call   c0001bef <mem_set>
c0004fbd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fc2:	31 d2                	xor    edx,edx
c0004fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fcb:	83 c0 26             	add    eax,0x26
c0004fce:	e8 1c cc ff ff       	call   c0001bef <mem_set>
c0004fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fda:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fde:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fe3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fe6:	83 c0 08             	add    eax,0x8
c0004fe9:	e8 e3 cb ff ff       	call   c0001bd1 <st_dword>
c0004fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ff2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff5:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ffd:	e8 b7 ea ff ff       	call   c0003ab9 <store_xdir>
c0005002:	89 c5                	mov    ebp,eax
c0005004:	85 c0                	test   eax,eax
c0005006:	0f 85 98 02 00 00    	jne    c00052a4 <f_open+0x419>
c000500c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500f:	85 d2                	test   edx,edx
c0005011:	0f 84 db 00 00 00    	je     c00050f2 <f_open+0x267>
c0005017:	31 c9                	xor    ecx,ecx
c0005019:	89 d8                	mov    eax,ebx
c000501b:	e8 8e e3 ff ff       	call   c00033ae <remove_chain>
c0005020:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005024:	89 c5                	mov    ebp,eax
c0005026:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005029:	48                   	dec    eax
c000502a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000502d:	e9 b8 00 00 00       	jmp    c00050ea <f_open+0x25f>
c0005032:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005036:	89 ea                	mov    edx,ebp
c0005038:	e8 99 fc ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000503d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005042:	89 c7                	mov    edi,eax
c0005044:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005047:	e8 85 cb ff ff       	call   c0001bd1 <st_dword>
c000504c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005050:	31 c9                	xor    ecx,ecx
c0005052:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000505a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000505e:	e8 9c fc ff ff       	call   c0004cff <st_clust.isra.1>
c0005063:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005067:	31 d2                	xor    edx,edx
c0005069:	83 c0 1c             	add    eax,0x1c
c000506c:	e8 60 cb ff ff       	call   c0001bd1 <st_dword>
c0005071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005075:	85 ff                	test   edi,edi
c0005077:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000507b:	74 75                	je     c00050f2 <f_open+0x267>
c000507d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005081:	31 c9                	xor    ecx,ecx
c0005083:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005086:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000508d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005091:	89 fa                	mov    edx,edi
c0005093:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005097:	e8 12 e3 ff ff       	call   c00033ae <remove_chain>
c000509c:	89 c5                	mov    ebp,eax
c000509e:	85 c0                	test   eax,eax
c00050a0:	0f 85 fe 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	4f                   	dec    edi
c00050b3:	e8 81 d2 ff ff       	call   c0002339 <move_window>
c00050b8:	89 c5                	mov    ebp,eax
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050c1:	eb 27                	jmp    c00050ea <f_open+0x25f>
c00050c3:	85 ed                	test   ebp,ebp
c00050c5:	0f 85 d9 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050cb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050cf:	bd 04 00 00 00       	mov    ebp,0x4
c00050d4:	a8 10                	test   al,0x10
c00050d6:	0f 85 c8 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050dc:	83 e7 02             	and    edi,0x2
c00050df:	74 11                	je     c00050f2 <f_open+0x267>
c00050e1:	bd 07 00 00 00       	mov    ebp,0x7
c00050e6:	a8 01                	test   al,0x1
c00050e8:	eb 02                	jmp    c00050ec <f_open+0x261>
c00050ea:	85 ed                	test   ebp,ebp
c00050ec:	0f 85 b2 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050f2:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f8:	74 03                	je     c00050fd <f_open+0x272>
c00050fa:	83 ce 40             	or     esi,0x40
c00050fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005101:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005104:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005107:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000510a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000510d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005111:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005114:	8a 02                	mov    al,BYTE PTR [edx]
c0005116:	3c 04                	cmp    al,0x4
c0005118:	75 2a                	jne    c0005144 <f_open+0x2b9>
c000511a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000511e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005123:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000512a:	30 c0                	xor    al,al
c000512c:	09 c8                	or     eax,ecx
c000512e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005131:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005135:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005138:	8d 42 10             	lea    eax,[edx+0x10]
c000513b:	89 da                	mov    edx,ebx
c000513d:	e8 e5 fb ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005142:	eb 1c                	jmp    c0005160 <f_open+0x2d5>
c0005144:	89 fa                	mov    edx,edi
c0005146:	e8 8b fb ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000514b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000514e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005151:	e8 12 ca ff ff       	call   c0001b68 <ld_dword>
c0005156:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000515d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005164:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000516b:	89 03                	mov    DWORD PTR [ebx],eax
c000516d:	31 d2                	xor    edx,edx
c000516f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005173:	b9 00 02 00 00       	mov    ecx,0x200
c0005178:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000517c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005180:	89 f0                	mov    eax,esi
c0005182:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005189:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000518c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005193:	8d 43 50             	lea    eax,[ebx+0x50]
c0005196:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000519d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a8:	e8 42 ca ff ff       	call   c0001bef <mem_set>
c00051ad:	83 e6 20             	and    esi,0x20
c00051b0:	75 07                	jne    c00051b9 <f_open+0x32e>
c00051b2:	31 ed                	xor    ebp,ebp
c00051b4:	e9 eb 00 00 00       	jmp    c00052a4 <f_open+0x419>
c00051b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051cb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051cf:	74 e1                	je     c00051b2 <f_open+0x327>
c00051d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051dc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051e3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051e6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051ea:	31 ff                	xor    edi,edi
c00051ec:	c1 e5 09             	shl    ebp,0x9
c00051ef:	89 ee                	mov    esi,ebp
c00051f1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051f5:	89 f8                	mov    eax,edi
c00051f7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051fb:	73 22                	jae    c000521f <f_open+0x394>
c00051fd:	89 d8                	mov    eax,ebx
c00051ff:	e8 bd dc ff ff       	call   c0002ec1 <get_fat>
c0005204:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005208:	89 c2                	mov    edx,eax
c000520a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000520e:	83 f8 01             	cmp    eax,0x1
c0005211:	76 10                	jbe    c0005223 <f_open+0x398>
c0005213:	83 f8 ff             	cmp    eax,0xffffffff
c0005216:	75 d9                	jne    c00051f1 <f_open+0x366>
c0005218:	bd 01 00 00 00       	mov    ebp,0x1
c000521d:	eb 09                	jmp    c0005228 <f_open+0x39d>
c000521f:	31 ed                	xor    ebp,ebp
c0005221:	eb 05                	jmp    c0005228 <f_open+0x39d>
c0005223:	bd 02 00 00 00       	mov    ebp,0x2
c0005228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000522b:	85 ed                	test   ebp,ebp
c000522d:	75 75                	jne    c00052a4 <f_open+0x419>
c000522f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005233:	25 ff 01 00 00       	and    eax,0x1ff
c0005238:	0f 84 74 ff ff ff    	je     c00051b2 <f_open+0x327>
c000523e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005242:	bd 02 00 00 00       	mov    ebp,0x2
c0005247:	89 c8                	mov    eax,ecx
c0005249:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000524d:	e8 a2 cb ff ff       	call   c0001df4 <clst2sect>
c0005252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005256:	89 d7                	mov    edi,edx
c0005258:	09 c7                	or     edi,eax
c000525a:	74 48                	je     c00052a4 <f_open+0x419>
c000525c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005260:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005264:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000526c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005270:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005274:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005278:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000527b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000527f:	83 ec 0c             	sub    esp,0xc
c0005282:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005285:	6a 01                	push   0x1
c0005287:	52                   	push   edx
c0005288:	50                   	push   eax
c0005289:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000528d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005291:	50                   	push   eax
c0005292:	e8 79 c8 ff ff       	call   c0001b10 <disk_read>
c0005297:	83 c4 20             	add    esp,0x20
c000529a:	85 c0                	test   eax,eax
c000529c:	0f 95 c0             	setne  al
c000529f:	0f b6 c0             	movzx  eax,al
c00052a2:	89 c5                	mov    ebp,eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052ab:	e8 2c 33 00 00       	call   c00085dc <ff_memfree>
c00052b0:	83 c4 10             	add    esp,0x10
c00052b3:	85 ed                	test   ebp,ebp
c00052b5:	74 06                	je     c00052bd <f_open+0x432>
c00052b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052bd:	83 c4 7c             	add    esp,0x7c
c00052c0:	89 e8                	mov    eax,ebp
c00052c2:	5b                   	pop    ebx
c00052c3:	5e                   	pop    esi
c00052c4:	5f                   	pop    edi
c00052c5:	5d                   	pop    ebp
c00052c6:	c3                   	ret    

c00052c7 <f_read>:
c00052c7:	55                   	push   ebp
c00052c8:	57                   	push   edi
c00052c9:	56                   	push   esi
c00052ca:	53                   	push   ebx
c00052cb:	83 ec 2c             	sub    esp,0x2c
c00052ce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052dc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e0:	89 d8                	mov    eax,ebx
c00052e2:	e8 77 cf ff ff       	call   c000225e <validate>
c00052e7:	89 c5                	mov    ebp,eax
c00052e9:	85 c0                	test   eax,eax
c00052eb:	0f 85 4c 02 00 00    	jne    c000553d <f_read+0x276>
c00052f1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052f5:	85 ed                	test   ebp,ebp
c00052f7:	0f 85 40 02 00 00    	jne    c000553d <f_read+0x276>
c00052fd:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005301:	0f 84 31 02 00 00    	je     c0005538 <f_read+0x271>
c0005307:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005310:	bf 00 00 00 00       	mov    edi,0x0
c0005315:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005318:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000531c:	89 d1                	mov    ecx,edx
c000531e:	19 f9                	sbb    ecx,edi
c0005320:	0f 83 cf 00 00 00    	jae    c00053f5 <f_read+0x12e>
c0005326:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000532a:	e9 c6 00 00 00       	jmp    c00053f5 <f_read+0x12e>
c000532f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005332:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005335:	89 d0                	mov    eax,edx
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	0f 85 c9 01 00 00    	jne    c000550b <f_read+0x244>
c0005342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005346:	89 d6                	mov    esi,edx
c0005348:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000534c:	89 cf                	mov    edi,ecx
c000534e:	48                   	dec    eax
c000534f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005353:	21 f0                	and    eax,esi
c0005355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005359:	0f 84 a6 00 00 00    	je     c0005405 <f_read+0x13e>
c000535f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005363:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005366:	89 c8                	mov    eax,ecx
c0005368:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000536b:	e8 84 ca ff ff       	call   c0001df4 <clst2sect>
c0005370:	89 d7                	mov    edi,edx
c0005372:	09 c7                	or     edi,eax
c0005374:	0f 84 b4 00 00 00    	je     c000542e <f_read+0x167>
c000537a:	31 ff                	xor    edi,edi
c000537c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005380:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005383:	01 c6                	add    esi,eax
c0005385:	11 d7                	adc    edi,edx
c0005387:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000538f:	0f 86 fd 00 00 00    	jbe    c0005492 <f_read+0x1cb>
c0005395:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005399:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000539d:	c1 e8 09             	shr    eax,0x9
c00053a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053a3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053a7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053aa:	39 c2                	cmp    edx,eax
c00053ac:	76 07                	jbe    c00053b5 <f_read+0xee>
c00053ae:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b5:	83 ec 0c             	sub    esp,0xc
c00053b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053bc:	57                   	push   edi
c00053bd:	56                   	push   esi
c00053be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 44 c7 ff ff       	call   c0001b10 <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	75 6e                	jne    c0005441 <f_read+0x17a>
c00053d3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053d7:	78 7e                	js     c0005457 <f_read+0x190>
c00053d9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053dc:	c1 e6 09             	shl    esi,0x9
c00053df:	31 ff                	xor    edi,edi
c00053e1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053ed:	01 30                	add    DWORD PTR [eax],esi
c00053ef:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053f2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053f5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053fa:	0f 85 2f ff ff ff    	jne    c000532f <f_read+0x68>
c0005400:	e9 38 01 00 00       	jmp    c000553d <f_read+0x276>
c0005405:	89 c8                	mov    eax,ecx
c0005407:	09 d0                	or     eax,edx
c0005409:	75 05                	jne    c0005410 <f_read+0x149>
c000540b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000540e:	eb 19                	jmp    c0005429 <f_read+0x162>
c0005410:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005414:	74 09                	je     c000541f <f_read+0x158>
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f8 c9 ff ff       	call   c0001e15 <clmt_clust>
c000541d:	eb 0a                	jmp    c0005429 <f_read+0x162>
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 d8                	mov    eax,ebx
c0005424:	e8 98 da ff ff       	call   c0002ec1 <get_fat>
c0005429:	83 f8 01             	cmp    eax,0x1
c000542c:	77 0e                	ja     c000543c <f_read+0x175>
c000542e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005432:	bd 02 00 00 00       	mov    ebp,0x2
c0005437:	e9 01 01 00 00       	jmp    c000553d <f_read+0x276>
c000543c:	83 f8 ff             	cmp    eax,0xffffffff
c000543f:	75 0e                	jne    c000544f <f_read+0x188>
c0005441:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005445:	bd 01 00 00 00       	mov    ebp,0x1
c000544a:	e9 ee 00 00 00       	jmp    c000553d <f_read+0x276>
c000544f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005452:	e9 08 ff ff ff       	jmp    c000535f <f_read+0x98>
c0005457:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000545a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000545d:	29 f0                	sub    eax,esi
c000545f:	19 fa                	sbb    edx,edi
c0005461:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005464:	89 d7                	mov    edi,edx
c0005466:	ba 00 00 00 00       	mov    edx,0x0
c000546b:	89 f9                	mov    ecx,edi
c000546d:	19 d1                	sbb    ecx,edx
c000546f:	0f 83 64 ff ff ff    	jae    c00053d9 <f_read+0x112>
c0005475:	89 c7                	mov    edi,eax
c0005477:	8d 53 50             	lea    edx,[ebx+0x50]
c000547a:	c1 e7 09             	shl    edi,0x9
c000547d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005481:	b9 00 02 00 00       	mov    ecx,0x200
c0005486:	01 f8                	add    eax,edi
c0005488:	e8 4d c7 ff ff       	call   c0001bda <mem_cpy>
c000548d:	e9 47 ff ff ff       	jmp    c00053d9 <f_read+0x112>
c0005492:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005495:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005498:	89 04 24             	mov    DWORD PTR [esp],eax
c000549b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000549f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054a3:	75 05                	jne    c00054aa <f_read+0x1e3>
c00054a5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a8:	74 5b                	je     c0005505 <f_read+0x23e>
c00054aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00054ad:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054b5:	79 2a                	jns    c00054e1 <f_read+0x21a>
c00054b7:	83 ec 0c             	sub    esp,0xc
c00054ba:	6a 01                	push   0x1
c00054bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 54 c6 ff ff       	call   c0001b26 <disk_write>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	0f 85 64 ff ff ff    	jne    c0005441 <f_read+0x17a>
c00054dd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054e1:	83 ec 0c             	sub    esp,0xc
c00054e4:	6a 01                	push   0x1
c00054e6:	57                   	push   edi
c00054e7:	56                   	push   esi
c00054e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054f4:	50                   	push   eax
c00054f5:	e8 16 c6 ff ff       	call   c0001b10 <disk_read>
c00054fa:	83 c4 20             	add    esp,0x20
c00054fd:	85 c0                	test   eax,eax
c00054ff:	0f 85 3c ff ff ff    	jne    c0005441 <f_read+0x17a>
c0005505:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005508:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000550b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000550e:	ba 00 02 00 00       	mov    edx,0x200
c0005513:	25 ff 01 00 00       	and    eax,0x1ff
c0005518:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000551c:	29 c2                	sub    edx,eax
c000551e:	39 d6                	cmp    esi,edx
c0005520:	76 02                	jbe    c0005524 <f_read+0x25d>
c0005522:	89 d6                	mov    esi,edx
c0005524:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005528:	89 f1                	mov    ecx,esi
c000552a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000552e:	e8 a7 c6 ff ff       	call   c0001bda <mem_cpy>
c0005533:	e9 a7 fe ff ff       	jmp    c00053df <f_read+0x118>
c0005538:	bd 07 00 00 00       	mov    ebp,0x7
c000553d:	83 c4 2c             	add    esp,0x2c
c0005540:	89 e8                	mov    eax,ebp
c0005542:	5b                   	pop    ebx
c0005543:	5e                   	pop    esi
c0005544:	5f                   	pop    edi
c0005545:	5d                   	pop    ebp
c0005546:	c3                   	ret    

c0005547 <f_write>:
c0005547:	55                   	push   ebp
c0005548:	57                   	push   edi
c0005549:	56                   	push   esi
c000554a:	53                   	push   ebx
c000554b:	83 ec 2c             	sub    esp,0x2c
c000554e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005552:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005556:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000555c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005560:	89 d8                	mov    eax,ebx
c0005562:	e8 f7 cc ff ff       	call   c000225e <validate>
c0005567:	89 c5                	mov    ebp,eax
c0005569:	85 c0                	test   eax,eax
c000556b:	0f 85 86 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c0005571:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005575:	85 ed                	test   ebp,ebp
c0005577:	0f 85 7a 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c000557d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005581:	0f 84 6b 02 00 00    	je     c00057f2 <f_write+0x2ab>
c0005587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000558b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000558e:	0f 84 43 01 00 00    	je     c00056d7 <f_write+0x190>
c0005594:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005597:	89 c1                	mov    ecx,eax
c0005599:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000559d:	0f 83 34 01 00 00    	jae    c00056d7 <f_write+0x190>
c00055a3:	f7 d0                	not    eax
c00055a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a9:	e9 29 01 00 00       	jmp    c00056d7 <f_write+0x190>
c00055ae:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055b1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055b4:	89 d0                	mov    eax,edx
c00055b6:	25 ff 01 00 00       	and    eax,0x1ff
c00055bb:	0f 85 00 02 00 00    	jne    c00057c1 <f_write+0x27a>
c00055c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c5:	89 d6                	mov    esi,edx
c00055c7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055cb:	89 cf                	mov    edi,ecx
c00055cd:	48                   	dec    eax
c00055ce:	0f ac fe 09          	shrd   esi,edi,0x9
c00055d2:	21 f0                	and    eax,esi
c00055d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d8:	0f 84 06 01 00 00    	je     c00056e4 <f_write+0x19d>
c00055de:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055e2:	0f 88 6e 01 00 00    	js     c0005756 <f_write+0x20f>
c00055e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ef:	89 c8                	mov    eax,ecx
c00055f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055f5:	e8 fa c7 ff ff       	call   c0001df4 <clst2sect>
c00055fa:	89 d1                	mov    ecx,edx
c00055fc:	09 c1                	or     ecx,eax
c00055fe:	0f 84 1c 01 00 00    	je     c0005720 <f_write+0x1d9>
c0005604:	31 ff                	xor    edi,edi
c0005606:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000560a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000560e:	01 c6                	add    esi,eax
c0005610:	11 d7                	adc    edi,edx
c0005612:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000561a:	0f 86 63 01 00 00    	jbe    c0005783 <f_write+0x23c>
c0005620:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005624:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005628:	c1 e8 09             	shr    eax,0x9
c000562b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000562f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005633:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005637:	39 c2                	cmp    edx,eax
c0005639:	76 08                	jbe    c0005643 <f_write+0xfc>
c000563b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000563f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000564a:	57                   	push   edi
c000564b:	56                   	push   esi
c000564c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005650:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005654:	50                   	push   eax
c0005655:	e8 cc c4 ff ff       	call   c0001b26 <disk_write>
c000565a:	83 c4 20             	add    esp,0x20
c000565d:	85 c0                	test   eax,eax
c000565f:	0f 85 ce 00 00 00    	jne    c0005733 <f_write+0x1ec>
c0005665:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005668:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000566b:	29 f0                	sub    eax,esi
c000566d:	19 fa                	sbb    edx,edi
c000566f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005673:	89 d7                	mov    edi,edx
c0005675:	ba 00 00 00 00       	mov    edx,0x0
c000567a:	89 f9                	mov    ecx,edi
c000567c:	19 d1                	sbb    ecx,edx
c000567e:	73 1c                	jae    c000569c <f_write+0x155>
c0005680:	89 c7                	mov    edi,eax
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	c1 e7 09             	shl    edi,0x9
c000568a:	8d 43 50             	lea    eax,[ebx+0x50]
c000568d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005691:	89 fa                	mov    edx,edi
c0005693:	e8 42 c5 ff ff       	call   c0001bda <mem_cpy>
c0005698:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000569c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056a0:	c1 e6 09             	shl    esi,0x9
c00056a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a7:	31 ff                	xor    edi,edi
c00056a9:	01 30                	add    DWORD PTR [eax],esi
c00056ab:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056af:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056b6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056bc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056bf:	89 c1                	mov    ecx,eax
c00056c1:	39 f2                	cmp    edx,esi
c00056c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056c6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c9:	19 f9                	sbb    ecx,edi
c00056cb:	73 04                	jae    c00056d1 <f_write+0x18a>
c00056cd:	89 f2                	mov    edx,esi
c00056cf:	89 f8                	mov    eax,edi
c00056d1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056d4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056d7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056dc:	0f 85 cc fe ff ff    	jne    c00055ae <f_write+0x67>
c00056e2:	eb 2e                	jmp    c0005712 <f_write+0x1cb>
c00056e4:	89 c8                	mov    eax,ecx
c00056e6:	09 d0                	or     eax,edx
c00056e8:	75 0b                	jne    c00056f5 <f_write+0x1ae>
c00056ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ed:	31 d2                	xor    edx,edx
c00056ef:	85 c0                	test   eax,eax
c00056f1:	75 28                	jne    c000571b <f_write+0x1d4>
c00056f3:	eb 12                	jmp    c0005707 <f_write+0x1c0>
c00056f5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f9:	74 09                	je     c0005704 <f_write+0x1bd>
c00056fb:	89 d8                	mov    eax,ebx
c00056fd:	e8 13 c7 ff ff       	call   c0001e15 <clmt_clust>
c0005702:	eb 0a                	jmp    c000570e <f_write+0x1c7>
c0005704:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005707:	89 d8                	mov    eax,ebx
c0005709:	e8 a1 da ff ff       	call   c00031af <create_chain>
c000570e:	85 c0                	test   eax,eax
c0005710:	75 09                	jne    c000571b <f_write+0x1d4>
c0005712:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005716:	e9 dc 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000571b:	83 f8 01             	cmp    eax,0x1
c000571e:	75 0e                	jne    c000572e <f_write+0x1e7>
c0005720:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005724:	bd 02 00 00 00       	mov    ebp,0x2
c0005729:	e9 c9 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000572e:	83 f8 ff             	cmp    eax,0xffffffff
c0005731:	75 0e                	jne    c0005741 <f_write+0x1fa>
c0005733:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005737:	bd 01 00 00 00       	mov    ebp,0x1
c000573c:	e9 b6 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c0005741:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005744:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005748:	0f 85 90 fe ff ff    	jne    c00055de <f_write+0x97>
c000574e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005751:	e9 88 fe ff ff       	jmp    c00055de <f_write+0x97>
c0005756:	83 ec 0c             	sub    esp,0xc
c0005759:	8d 43 50             	lea    eax,[ebx+0x50]
c000575c:	6a 01                	push   0x1
c000575e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005761:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005764:	50                   	push   eax
c0005765:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005769:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000576d:	50                   	push   eax
c000576e:	e8 b3 c3 ff ff       	call   c0001b26 <disk_write>
c0005773:	83 c4 20             	add    esp,0x20
c0005776:	85 c0                	test   eax,eax
c0005778:	75 b9                	jne    c0005733 <f_write+0x1ec>
c000577a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000577e:	e9 65 fe ff ff       	jmp    c00055e8 <f_write+0xa1>
c0005783:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005786:	75 05                	jne    c000578d <f_write+0x246>
c0005788:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000578b:	74 2e                	je     c00057bb <f_write+0x274>
c000578d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005790:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005793:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005796:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005799:	73 20                	jae    c00057bb <f_write+0x274>
c000579b:	83 ec 0c             	sub    esp,0xc
c000579e:	8d 43 50             	lea    eax,[ebx+0x50]
c00057a1:	6a 01                	push   0x1
c00057a3:	57                   	push   edi
c00057a4:	56                   	push   esi
c00057a5:	50                   	push   eax
c00057a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057aa:	50                   	push   eax
c00057ab:	e8 60 c3 ff ff       	call   c0001b10 <disk_read>
c00057b0:	83 c4 20             	add    esp,0x20
c00057b3:	85 c0                	test   eax,eax
c00057b5:	0f 85 78 ff ff ff    	jne    c0005733 <f_write+0x1ec>
c00057bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057c4:	ba 00 02 00 00       	mov    edx,0x200
c00057c9:	25 ff 01 00 00       	and    eax,0x1ff
c00057ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057d2:	29 c2                	sub    edx,eax
c00057d4:	39 d6                	cmp    esi,edx
c00057d6:	76 02                	jbe    c00057da <f_write+0x293>
c00057d8:	89 d6                	mov    esi,edx
c00057da:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057de:	89 f1                	mov    ecx,esi
c00057e0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057e4:	e8 f1 c3 ff ff       	call   c0001bda <mem_cpy>
c00057e9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057ed:	e9 b1 fe ff ff       	jmp    c00056a3 <f_write+0x15c>
c00057f2:	bd 07 00 00 00       	mov    ebp,0x7
c00057f7:	83 c4 2c             	add    esp,0x2c
c00057fa:	89 e8                	mov    eax,ebp
c00057fc:	5b                   	pop    ebx
c00057fd:	5e                   	pop    esi
c00057fe:	5f                   	pop    edi
c00057ff:	5d                   	pop    ebp
c0005800:	c3                   	ret    

c0005801 <f_sync>:
c0005801:	56                   	push   esi
c0005802:	53                   	push   ebx
c0005803:	83 ec 64             	sub    esp,0x64
c0005806:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000580a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000580e:	89 d8                	mov    eax,ebx
c0005810:	e8 49 ca ff ff       	call   c000225e <validate>
c0005815:	85 c0                	test   eax,eax
c0005817:	0f 85 ba 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000581d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005820:	f6 c2 40             	test   dl,0x40
c0005823:	0f 84 ae 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c0005829:	84 d2                	test   dl,dl
c000582b:	79 33                	jns    c0005860 <f_sync+0x5f>
c000582d:	83 ec 0c             	sub    esp,0xc
c0005830:	8d 43 50             	lea    eax,[ebx+0x50]
c0005833:	6a 01                	push   0x1
c0005835:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005838:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000583b:	50                   	push   eax
c000583c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005840:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005844:	50                   	push   eax
c0005845:	e8 dc c2 ff ff       	call   c0001b26 <disk_write>
c000584a:	83 c4 20             	add    esp,0x20
c000584d:	89 c2                	mov    edx,eax
c000584f:	b8 01 00 00 00       	mov    eax,0x1
c0005854:	85 d2                	test   edx,edx
c0005856:	0f 85 7b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000585c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005864:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005867:	0f 85 11 01 00 00    	jne    c000597e <f_sync+0x17d>
c000586d:	89 d8                	mov    eax,ebx
c000586f:	e8 13 d6 ff ff       	call   c0002e87 <fill_first_frag>
c0005874:	85 c0                	test   eax,eax
c0005876:	0f 85 5b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000587c:	83 c9 ff             	or     ecx,0xffffffff
c000587f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005882:	89 d8                	mov    eax,ebx
c0005884:	e8 c9 d5 ff ff       	call   c0002e52 <fill_last_frag>
c0005889:	85 c0                	test   eax,eax
c000588b:	0f 85 46 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c0005891:	83 ec 0c             	sub    esp,0xc
c0005894:	68 60 04 00 00       	push   0x460
c0005899:	e8 26 2d 00 00       	call   c00085c4 <ff_memalloc>
c000589e:	83 c4 10             	add    esp,0x10
c00058a1:	89 c6                	mov    esi,eax
c00058a3:	b8 11 00 00 00       	mov    eax,0x11
c00058a8:	85 f6                	test   esi,esi
c00058aa:	0f 84 27 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c00058b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ba:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058bd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058c0:	89 da                	mov    edx,ebx
c00058c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058c6:	e8 af df ff ff       	call   c000387a <load_obj_xdir>
c00058cb:	85 c0                	test   eax,eax
c00058cd:	0f 85 95 00 00 00    	jne    c0005968 <f_sync+0x167>
c00058d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058d7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058da:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058de:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058e1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058e4:	83 ca 01             	or     edx,0x1
c00058e7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058f0:	83 c0 34             	add    eax,0x34
c00058f3:	e8 d9 c2 ff ff       	call   c0001bd1 <st_dword>
c00058f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005902:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005905:	83 c0 38             	add    eax,0x38
c0005908:	e8 c7 c2 ff ff       	call   c0001bd4 <st_qword>
c000590d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005914:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005917:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000591a:	83 c0 28             	add    eax,0x28
c000591d:	e8 b2 c2 ff ff       	call   c0001bd4 <st_qword>
c0005922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005926:	ba 00 00 21 50       	mov    edx,0x50210000
c000592b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592e:	83 c0 0c             	add    eax,0xc
c0005931:	e8 9b c2 ff ff       	call   c0001bd1 <st_dword>
c0005936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000593a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000593d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005941:	31 d2                	xor    edx,edx
c0005943:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005946:	83 c0 10             	add    eax,0x10
c0005949:	e8 83 c2 ff ff       	call   c0001bd1 <st_dword>
c000594e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005952:	e8 62 e1 ff ff       	call   c0003ab9 <store_xdir>
c0005957:	85 c0                	test   eax,eax
c0005959:	75 0d                	jne    c0005968 <f_sync+0x167>
c000595b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000595f:	e8 00 eb ff ff       	call   c0004464 <sync_fs>
c0005964:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000596c:	83 ec 0c             	sub    esp,0xc
c000596f:	56                   	push   esi
c0005970:	e8 67 2c 00 00       	call   c00085dc <ff_memfree>
c0005975:	83 c4 10             	add    esp,0x10
c0005978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000597c:	eb 59                	jmp    c00059d7 <f_sync+0x1d6>
c000597e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005981:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005984:	e8 b0 c9 ff ff       	call   c0002339 <move_window>
c0005989:	85 c0                	test   eax,eax
c000598b:	75 4a                	jne    c00059d7 <f_sync+0x1d6>
c000598d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005990:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005994:	89 f2                	mov    edx,esi
c0005996:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005999:	8b 03                	mov    eax,DWORD PTR [ebx]
c000599b:	e8 5f f3 ff ff       	call   c0004cff <st_clust.isra.1>
c00059a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059a3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059a6:	e8 26 c2 ff ff       	call   c0001bd1 <st_dword>
c00059ab:	8d 46 16             	lea    eax,[esi+0x16]
c00059ae:	ba 00 00 21 50       	mov    edx,0x50210000
c00059b3:	e8 19 c2 ff ff       	call   c0001bd1 <st_dword>
c00059b8:	8d 46 12             	lea    eax,[esi+0x12]
c00059bb:	31 d2                	xor    edx,edx
c00059bd:	e8 0b c2 ff ff       	call   c0001bcd <st_word>
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ce:	e8 91 ea ff ff       	call   c0004464 <sync_fs>
c00059d3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059d7:	83 c4 64             	add    esp,0x64
c00059da:	5b                   	pop    ebx
c00059db:	5e                   	pop    esi
c00059dc:	c3                   	ret    

c00059dd <f_close>:
c00059dd:	53                   	push   ebx
c00059de:	83 ec 24             	sub    esp,0x24
c00059e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059e5:	53                   	push   ebx
c00059e6:	e8 16 fe ff ff       	call   c0005801 <f_sync>
c00059eb:	83 c4 10             	add    esp,0x10
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 15                	jne    c0005a07 <f_close+0x2a>
c00059f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 61 c8 ff ff       	call   c000225e <validate>
c00059fd:	85 c0                	test   eax,eax
c00059ff:	75 06                	jne    c0005a07 <f_close+0x2a>
c0005a01:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a07:	83 c4 18             	add    esp,0x18
c0005a0a:	5b                   	pop    ebx
c0005a0b:	c3                   	ret    

c0005a0c <f_lseek>:
c0005a0c:	55                   	push   ebp
c0005a0d:	57                   	push   edi
c0005a0e:	56                   	push   esi
c0005a0f:	53                   	push   ebx
c0005a10:	83 ec 3c             	sub    esp,0x3c
c0005a13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a17:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a1b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a22:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a26:	89 d8                	mov    eax,ebx
c0005a28:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a2c:	e8 2d c8 ff ff       	call   c000225e <validate>
c0005a31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a35:	85 c0                	test   eax,eax
c0005a37:	0f 85 7a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a3d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 6a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a51:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a54:	74 0c                	je     c0005a62 <f_lseek+0x56>
c0005a56:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a59:	85 c0                	test   eax,eax
c0005a5b:	75 1f                	jne    c0005a7c <f_lseek+0x70>
c0005a5d:	e9 b5 01 00 00       	jmp    c0005c17 <f_lseek+0x20b>
c0005a62:	83 c9 ff             	or     ecx,0xffffffff
c0005a65:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a68:	89 d8                	mov    eax,ebx
c0005a6a:	e8 e3 d3 ff ff       	call   c0002e52 <fill_last_frag>
c0005a6f:	85 c0                	test   eax,eax
c0005a71:	74 e3                	je     c0005a56 <f_lseek+0x4a>
c0005a73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a77:	e9 3b 04 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005a7c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a81:	0f 85 ac 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a87:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a8b:	0f 85 a2 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a91:	8d 78 04             	lea    edi,[eax+0x4]
c0005a94:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a99:	be 02 00 00 00       	mov    esi,0x2
c0005a9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005aa2:	85 ed                	test   ebp,ebp
c0005aa4:	74 73                	je     c0005b19 <f_lseek+0x10d>
c0005aa6:	89 e9                	mov    ecx,ebp
c0005aa8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aaf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ab2:	89 ca                	mov    edx,ecx
c0005ab4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab8:	89 d8                	mov    eax,ebx
c0005aba:	e8 02 d4 ff ff       	call   c0002ec1 <get_fat>
c0005abf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac3:	83 f8 01             	cmp    eax,0x1
c0005ac6:	77 11                	ja     c0005ad9 <f_lseek+0xcd>
c0005ac8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005acc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ad4:	e9 de 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005ad9:	83 f8 ff             	cmp    eax,0xffffffff
c0005adc:	75 11                	jne    c0005aef <f_lseek+0xe3>
c0005ade:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ae2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005aea:	e9 c8 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005aef:	8d 51 01             	lea    edx,[ecx+0x1]
c0005af2:	89 c1                	mov    ecx,eax
c0005af4:	39 c2                	cmp    edx,eax
c0005af6:	74 b7                	je     c0005aaf <f_lseek+0xa3>
c0005af8:	83 c6 02             	add    esi,0x2
c0005afb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005aff:	72 0b                	jb     c0005b0c <f_lseek+0x100>
c0005b01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b04:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b07:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b09:	83 c7 08             	add    edi,0x8
c0005b0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b10:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b13:	76 04                	jbe    c0005b19 <f_lseek+0x10d>
c0005b15:	89 c5                	mov    ebp,eax
c0005b17:	eb 8d                	jmp    c0005aa6 <f_lseek+0x9a>
c0005b19:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b1c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b20:	89 30                	mov    DWORD PTR [eax],esi
c0005b22:	0f 87 87 03 00 00    	ja     c0005eaf <f_lseek+0x4a3>
c0005b28:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b2e:	e9 84 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005b33:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b36:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b45:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b4c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b50:	73 0f                	jae    c0005b61 <f_lseek+0x155>
c0005b52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b6c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b73:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b77:	0f 84 3a 03 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005b7d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b85:	83 c6 ff             	add    esi,0xffffffff
c0005b88:	89 d8                	mov    eax,ebx
c0005b8a:	83 d7 ff             	adc    edi,0xffffffff
c0005b8d:	89 f2                	mov    edx,esi
c0005b8f:	89 f9                	mov    ecx,edi
c0005b91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b95:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b98:	e8 78 c2 ff ff       	call   c0001e15 <clmt_clust>
c0005b9d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ba1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ba4:	89 c2                	mov    edx,eax
c0005ba6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005baa:	89 c8                	mov    eax,ecx
c0005bac:	e8 43 c2 ff ff       	call   c0001df4 <clst2sect>
c0005bb1:	89 d7                	mov    edi,edx
c0005bb3:	09 c7                	or     edi,eax
c0005bb5:	0f 84 0d ff ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005bbb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bbf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bc5:	0f 84 ec 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bcb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bd6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bda:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bde:	4d                   	dec    ebp
c0005bdf:	31 ff                	xor    edi,edi
c0005be1:	21 ee                	and    esi,ebp
c0005be3:	01 c6                	add    esi,eax
c0005be5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be8:	11 d7                	adc    edi,edx
c0005bea:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bed:	39 fa                	cmp    edx,edi
c0005bef:	75 08                	jne    c0005bf9 <f_lseek+0x1ed>
c0005bf1:	39 f0                	cmp    eax,esi
c0005bf3:	0f 84 be 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bf9:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bfc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c00:	0f 89 80 02 00 00    	jns    c0005e86 <f_lseek+0x47a>
c0005c06:	83 ec 0c             	sub    esp,0xc
c0005c09:	6a 01                	push   0x1
c0005c0b:	52                   	push   edx
c0005c0c:	50                   	push   eax
c0005c0d:	55                   	push   ebp
c0005c0e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c12:	e9 5a 02 00 00       	jmp    c0005e71 <f_lseek+0x465>
c0005c17:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c1b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c1e:	74 16                	je     c0005c36 <f_lseek+0x22a>
c0005c20:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c25:	76 0f                	jbe    c0005c36 <f_lseek+0x22a>
c0005c27:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c36:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c39:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c3c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c3f:	89 c7                	mov    edi,eax
c0005c41:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c45:	73 0d                	jae    c0005c54 <f_lseek+0x248>
c0005c47:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c4b:	75 07                	jne    c0005c54 <f_lseek+0x248>
c0005c4d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c54:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c57:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c5a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c5e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c65:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c6c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c6f:	75 09                	jne    c0005c7a <f_lseek+0x26e>
c0005c71:	31 f6                	xor    esi,esi
c0005c73:	31 ff                	xor    edi,edi
c0005c75:	e9 af 01 00 00       	jmp    c0005e29 <f_lseek+0x41d>
c0005c7a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c7e:	89 d7                	mov    edi,edx
c0005c80:	c1 e1 09             	shl    ecx,0x9
c0005c83:	09 c7                	or     edi,eax
c0005c85:	89 cd                	mov    ebp,ecx
c0005c87:	74 6d                	je     c0005cf6 <f_lseek+0x2ea>
c0005c89:	83 c0 ff             	add    eax,0xffffffff
c0005c8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c90:	83 d2 ff             	adc    edx,0xffffffff
c0005c93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c9a:	83 c0 ff             	add    eax,0xffffffff
c0005c9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca1:	83 d2 ff             	adc    edx,0xffffffff
c0005ca4:	31 ff                	xor    edi,edi
c0005ca6:	57                   	push   edi
c0005ca7:	51                   	push   ecx
c0005ca8:	52                   	push   edx
c0005ca9:	50                   	push   eax
c0005caa:	e8 d5 c8 01 00       	call   c0022584 <__udivdi3>
c0005caf:	83 c4 10             	add    esp,0x10
c0005cb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cb6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cba:	57                   	push   edi
c0005cbb:	55                   	push   ebp
c0005cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc4:	e8 bb c8 01 00       	call   c0022584 <__udivdi3>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cd0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005cd4:	19 d1                	sbb    ecx,edx
c0005cd6:	72 1e                	jb     c0005cf6 <f_lseek+0x2ea>
c0005cd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cdc:	89 e9                	mov    ecx,ebp
c0005cde:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005ce1:	f7 d9                	neg    ecx
c0005ce3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005ce6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cea:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ced:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005cf0:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cf4:	eb 28                	jmp    c0005d1e <f_lseek+0x312>
c0005cf6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf9:	85 c0                	test   eax,eax
c0005cfb:	75 1e                	jne    c0005d1b <f_lseek+0x30f>
c0005cfd:	31 d2                	xor    edx,edx
c0005cff:	89 d8                	mov    eax,ebx
c0005d01:	e8 a9 d4 ff ff       	call   c00031af <create_chain>
c0005d06:	83 f8 01             	cmp    eax,0x1
c0005d09:	0f 84 b9 fd ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005d0f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d12:	0f 84 c6 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005d18:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d1b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d1e:	85 c0                	test   eax,eax
c0005d20:	0f 84 4b ff ff ff    	je     c0005c71 <f_lseek+0x265>
c0005d26:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d2a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d32:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d39:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d3c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d3f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d43:	0f 83 9d 00 00 00    	jae    c0005de6 <f_lseek+0x3da>
c0005d49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d51:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d54:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d58:	01 f2                	add    edx,esi
c0005d5a:	11 f9                	adc    ecx,edi
c0005d5c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d64:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d67:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d6a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d6d:	f6 c1 02             	test   cl,0x2
c0005d70:	74 35                	je     c0005da7 <f_lseek+0x39b>
c0005d72:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d76:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d79:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d7c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d80:	73 16                	jae    c0005d98 <f_lseek+0x38c>
c0005d82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d86:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d8a:	88 ca                	mov    dl,cl
c0005d8c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d8f:	83 ca 40             	or     edx,0x40
c0005d92:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d95:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d98:	89 c2                	mov    edx,eax
c0005d9a:	89 d8                	mov    eax,ebx
c0005d9c:	e8 0e d4 ff ff       	call   c00031af <create_chain>
c0005da1:	85 c0                	test   eax,eax
c0005da3:	75 0b                	jne    c0005db0 <f_lseek+0x3a4>
c0005da5:	eb 30                	jmp    c0005dd7 <f_lseek+0x3cb>
c0005da7:	89 c2                	mov    edx,eax
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 11 d1 ff ff       	call   c0002ec1 <get_fat>
c0005db0:	83 f8 ff             	cmp    eax,0xffffffff
c0005db3:	0f 84 25 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005db9:	83 f8 01             	cmp    eax,0x1
c0005dbc:	0f 86 06 fd ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dc2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dc6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc9:	0f 86 f9 fc ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dcf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dd2:	e9 5b ff ff ff       	jmp    c0005d32 <f_lseek+0x326>
c0005dd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dde:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005de6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ded:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005df0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005df3:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005df6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005dfc:	0f 84 6f fe ff ff    	je     c0005c71 <f_lseek+0x265>
c0005e02:	89 c2                	mov    edx,eax
c0005e04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e08:	e8 e7 bf ff ff       	call   c0001df4 <clst2sect>
c0005e0d:	89 d7                	mov    edi,edx
c0005e0f:	09 c7                	or     edi,eax
c0005e11:	0f 84 b1 fc ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005e17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e1b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e1e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e22:	c1 ef 09             	shr    edi,0x9
c0005e25:	01 c6                	add    esi,eax
c0005e27:	11 d7                	adc    edi,edx
c0005e29:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e2c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e2f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e32:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e35:	19 d1                	sbb    ecx,edx
c0005e37:	73 0a                	jae    c0005e43 <f_lseek+0x437>
c0005e39:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e3c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e3f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e43:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e48:	74 6d                	je     c0005eb7 <f_lseek+0x4ab>
c0005e4a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e4d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e50:	39 fa                	cmp    edx,edi
c0005e52:	75 04                	jne    c0005e58 <f_lseek+0x44c>
c0005e54:	39 f0                	cmp    eax,esi
c0005e56:	74 5f                	je     c0005eb7 <f_lseek+0x4ab>
c0005e58:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e5b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e5f:	79 25                	jns    c0005e86 <f_lseek+0x47a>
c0005e61:	83 ec 0c             	sub    esp,0xc
c0005e64:	6a 01                	push   0x1
c0005e66:	52                   	push   edx
c0005e67:	50                   	push   eax
c0005e68:	55                   	push   ebp
c0005e69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e6d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e71:	50                   	push   eax
c0005e72:	e8 af bc ff ff       	call   c0001b26 <disk_write>
c0005e77:	83 c4 20             	add    esp,0x20
c0005e7a:	85 c0                	test   eax,eax
c0005e7c:	0f 85 5c fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005e82:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e86:	83 ec 0c             	sub    esp,0xc
c0005e89:	6a 01                	push   0x1
c0005e8b:	57                   	push   edi
c0005e8c:	56                   	push   esi
c0005e8d:	55                   	push   ebp
c0005e8e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e92:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e96:	50                   	push   eax
c0005e97:	e8 74 bc ff ff       	call   c0001b10 <disk_read>
c0005e9c:	83 c4 20             	add    esp,0x20
c0005e9f:	85 c0                	test   eax,eax
c0005ea1:	0f 85 37 fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005ea7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eaa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ead:	eb 08                	jmp    c0005eb7 <f_lseek+0x4ab>
c0005eaf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ebb:	83 c4 3c             	add    esp,0x3c
c0005ebe:	5b                   	pop    ebx
c0005ebf:	5e                   	pop    esi
c0005ec0:	5f                   	pop    edi
c0005ec1:	5d                   	pop    ebp
c0005ec2:	c3                   	ret    

c0005ec3 <f_opendir>:
c0005ec3:	56                   	push   esi
c0005ec4:	b8 09 00 00 00       	mov    eax,0x9
c0005ec9:	53                   	push   ebx
c0005eca:	83 ec 24             	sub    esp,0x24
c0005ecd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ed1:	85 db                	test   ebx,ebx
c0005ed3:	0f 84 e6 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005ed9:	31 c9                	xor    ecx,ecx
c0005edb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005edf:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ee3:	e8 03 c7 ff ff       	call   c00025eb <mount_volume>
c0005ee8:	85 c0                	test   eax,eax
c0005eea:	0f 85 c9 00 00 00    	jne    c0005fb9 <f_opendir+0xf6>
c0005ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ef4:	83 ec 0c             	sub    esp,0xc
c0005ef7:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef9:	68 60 04 00 00       	push   0x460
c0005efe:	e8 c1 26 00 00       	call   c00085c4 <ff_memalloc>
c0005f03:	83 c4 10             	add    esp,0x10
c0005f06:	89 c6                	mov    esi,eax
c0005f08:	b8 11 00 00 00       	mov    eax,0x11
c0005f0d:	85 f6                	test   esi,esi
c0005f0f:	0f 84 aa 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f29:	89 d8                	mov    eax,ebx
c0005f2b:	e8 31 ee ff ff       	call   c0004d61 <follow_path>
c0005f30:	85 c0                	test   eax,eax
c0005f32:	75 61                	jne    c0005f95 <f_opendir+0xd2>
c0005f34:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f38:	78 46                	js     c0005f80 <f_opendir+0xbd>
c0005f3a:	b8 05 00 00 00       	mov    eax,0x5
c0005f3f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f43:	74 50                	je     c0005f95 <f_opendir+0xd2>
c0005f45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f49:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f4b:	3c 04                	cmp    al,0x4
c0005f4d:	75 26                	jne    c0005f75 <f_opendir+0xb2>
c0005f4f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f52:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f58:	30 d2                	xor    dl,dl
c0005f5a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f5e:	09 c2                	or     edx,eax
c0005f60:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f63:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f66:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f69:	89 da                	mov    edx,ebx
c0005f6b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f6e:	e8 b4 ed ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005f73:	eb 0b                	jmp    c0005f80 <f_opendir+0xbd>
c0005f75:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f78:	e8 59 ed ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0005f7d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f84:	31 d2                	xor    edx,edx
c0005f86:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f8a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f8e:	89 d8                	mov    eax,ebx
c0005f90:	e8 22 d1 ff ff       	call   c00030b7 <dir_sdi>
c0005f95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f99:	83 ec 0c             	sub    esp,0xc
c0005f9c:	56                   	push   esi
c0005f9d:	e8 3a 26 00 00       	call   c00085dc <ff_memfree>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa9:	83 f8 04             	cmp    eax,0x4
c0005fac:	74 06                	je     c0005fb4 <f_opendir+0xf1>
c0005fae:	85 c0                	test   eax,eax
c0005fb0:	74 0d                	je     c0005fbf <f_opendir+0xfc>
c0005fb2:	eb 05                	jmp    c0005fb9 <f_opendir+0xf6>
c0005fb4:	b8 05 00 00 00       	mov    eax,0x5
c0005fb9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fbf:	83 c4 24             	add    esp,0x24
c0005fc2:	5b                   	pop    ebx
c0005fc3:	5e                   	pop    esi
c0005fc4:	c3                   	ret    

c0005fc5 <f_closedir>:
c0005fc5:	53                   	push   ebx
c0005fc6:	83 ec 18             	sub    esp,0x18
c0005fc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fcd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fd1:	89 d8                	mov    eax,ebx
c0005fd3:	e8 86 c2 ff ff       	call   c000225e <validate>
c0005fd8:	85 c0                	test   eax,eax
c0005fda:	75 06                	jne    c0005fe2 <f_closedir+0x1d>
c0005fdc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fe2:	83 c4 18             	add    esp,0x18
c0005fe5:	5b                   	pop    ebx
c0005fe6:	c3                   	ret    

c0005fe7 <f_readdir>:
c0005fe7:	57                   	push   edi
c0005fe8:	56                   	push   esi
c0005fe9:	53                   	push   ebx
c0005fea:	83 ec 20             	sub    esp,0x20
c0005fed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ff1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ff5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff9:	89 d8                	mov    eax,ebx
c0005ffb:	e8 5e c2 ff ff       	call   c000225e <validate>
c0006000:	85 c0                	test   eax,eax
c0006002:	75 77                	jne    c000607b <f_readdir+0x94>
c0006004:	85 ff                	test   edi,edi
c0006006:	75 0b                	jne    c0006013 <f_readdir+0x2c>
c0006008:	31 d2                	xor    edx,edx
c000600a:	89 d8                	mov    eax,ebx
c000600c:	e8 a6 d0 ff ff       	call   c00030b7 <dir_sdi>
c0006011:	eb 68                	jmp    c000607b <f_readdir+0x94>
c0006013:	83 ec 0c             	sub    esp,0xc
c0006016:	68 60 04 00 00       	push   0x460
c000601b:	e8 a4 25 00 00       	call   c00085c4 <ff_memalloc>
c0006020:	83 c4 10             	add    esp,0x10
c0006023:	89 c6                	mov    esi,eax
c0006025:	b8 11 00 00 00       	mov    eax,0x11
c000602a:	85 f6                	test   esi,esi
c000602c:	74 4d                	je     c000607b <f_readdir+0x94>
c000602e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006032:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006038:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000603b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000603e:	31 d2                	xor    edx,edx
c0006040:	89 d8                	mov    eax,ebx
c0006042:	e8 80 d8 ff ff       	call   c00038c7 <dir_read>
c0006047:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000604c:	75 19                	jne    c0006067 <f_readdir+0x80>
c000604e:	89 fa                	mov    edx,edi
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 7e ea ff ff       	call   c0004ad5 <get_fileinfo>
c0006057:	31 d2                	xor    edx,edx
c0006059:	89 d8                	mov    eax,ebx
c000605b:	e8 af d5 ff ff       	call   c000360f <dir_next>
c0006060:	83 f8 04             	cmp    eax,0x4
c0006063:	75 02                	jne    c0006067 <f_readdir+0x80>
c0006065:	31 c0                	xor    eax,eax
c0006067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000606b:	83 ec 0c             	sub    esp,0xc
c000606e:	56                   	push   esi
c000606f:	e8 68 25 00 00       	call   c00085dc <ff_memfree>
c0006074:	83 c4 10             	add    esp,0x10
c0006077:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000607b:	83 c4 20             	add    esp,0x20
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	c3                   	ret    

c0006082 <f_stat>:
c0006082:	57                   	push   edi
c0006083:	31 c9                	xor    ecx,ecx
c0006085:	56                   	push   esi
c0006086:	53                   	push   ebx
c0006087:	83 ec 50             	sub    esp,0x50
c000608a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000608e:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006092:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006096:	e8 50 c5 ff ff       	call   c00025eb <mount_volume>
c000609b:	89 c3                	mov    ebx,eax
c000609d:	85 c0                	test   eax,eax
c000609f:	75 67                	jne    c0006108 <f_stat+0x86>
c00060a1:	83 ec 0c             	sub    esp,0xc
c00060a4:	bb 11 00 00 00       	mov    ebx,0x11
c00060a9:	68 60 04 00 00       	push   0x460
c00060ae:	e8 11 25 00 00       	call   c00085c4 <ff_memalloc>
c00060b3:	83 c4 10             	add    esp,0x10
c00060b6:	89 c6                	mov    esi,eax
c00060b8:	85 c0                	test   eax,eax
c00060ba:	74 4c                	je     c0006108 <f_stat+0x86>
c00060bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060c0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060c6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060cc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060d0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060d4:	e8 88 ec ff ff       	call   c0004d61 <follow_path>
c00060d9:	89 c3                	mov    ebx,eax
c00060db:	85 c0                	test   eax,eax
c00060dd:	75 1d                	jne    c00060fc <f_stat+0x7a>
c00060df:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060e4:	78 11                	js     c00060f7 <f_stat+0x75>
c00060e6:	85 ff                	test   edi,edi
c00060e8:	74 12                	je     c00060fc <f_stat+0x7a>
c00060ea:	89 fa                	mov    edx,edi
c00060ec:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060f0:	e8 e0 e9 ff ff       	call   c0004ad5 <get_fileinfo>
c00060f5:	eb 05                	jmp    c00060fc <f_stat+0x7a>
c00060f7:	bb 06 00 00 00       	mov    ebx,0x6
c00060fc:	83 ec 0c             	sub    esp,0xc
c00060ff:	56                   	push   esi
c0006100:	e8 d7 24 00 00       	call   c00085dc <ff_memfree>
c0006105:	83 c4 10             	add    esp,0x10
c0006108:	83 c4 50             	add    esp,0x50
c000610b:	89 d8                	mov    eax,ebx
c000610d:	5b                   	pop    ebx
c000610e:	5e                   	pop    esi
c000610f:	5f                   	pop    edi
c0006110:	c3                   	ret    

c0006111 <f_getfree>:
c0006111:	55                   	push   ebp
c0006112:	31 c9                	xor    ecx,ecx
c0006114:	57                   	push   edi
c0006115:	56                   	push   esi
c0006116:	53                   	push   ebx
c0006117:	83 ec 5c             	sub    esp,0x5c
c000611a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000611e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006122:	e8 c4 c4 ff ff       	call   c00025eb <mount_volume>
c0006127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000612b:	85 c0                	test   eax,eax
c000612d:	0f 85 9d 01 00 00    	jne    c00062d0 <f_getfree+0x1bf>
c0006133:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006137:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000613b:	89 02                	mov    DWORD PTR [edx],eax
c000613d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006143:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006146:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000614a:	39 f2                	cmp    edx,esi
c000614c:	77 0b                	ja     c0006159 <f_getfree+0x48>
c000614e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006152:	89 10                	mov    DWORD PTR [eax],edx
c0006154:	e9 77 01 00 00       	jmp    c00062d0 <f_getfree+0x1bf>
c0006159:	8a 10                	mov    dl,BYTE PTR [eax]
c000615b:	80 fa 01             	cmp    dl,0x1
c000615e:	75 3a                	jne    c000619a <f_getfree+0x89>
c0006160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006164:	be 02 00 00 00       	mov    esi,0x2
c0006169:	31 db                	xor    ebx,ebx
c000616b:	89 f2                	mov    edx,esi
c000616d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006171:	e8 4b cd ff ff       	call   c0002ec1 <get_fat>
c0006176:	83 f8 ff             	cmp    eax,0xffffffff
c0006179:	0f 84 28 01 00 00    	je     c00062a7 <f_getfree+0x196>
c000617f:	83 f8 01             	cmp    eax,0x1
c0006182:	0f 84 29 01 00 00    	je     c00062b1 <f_getfree+0x1a0>
c0006188:	83 d3 00             	adc    ebx,0x0
c000618b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000618f:	46                   	inc    esi
c0006190:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006193:	77 d6                	ja     c000616b <f_getfree+0x5a>
c0006195:	e9 25 01 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000619a:	80 fa 04             	cmp    dl,0x4
c000619d:	0f 85 88 00 00 00    	jne    c000622b <f_getfree+0x11a>
c00061a3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061a6:	31 ed                	xor    ebp,ebp
c00061a8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061b3:	31 db                	xor    ebx,ebx
c00061b5:	85 ed                	test   ebp,ebp
c00061b7:	75 3f                	jne    c00061f8 <f_getfree+0xe7>
c00061b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061c1:	83 c0 01             	add    eax,0x1
c00061c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c8:	83 d2 00             	adc    edx,0x0
c00061cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061db:	e8 59 c1 ff ff       	call   c0002339 <move_window>
c00061e0:	85 c0                	test   eax,eax
c00061e2:	0f 85 d3 00 00 00    	jne    c00062bb <f_getfree+0x1aa>
c00061e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061fc:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061ff:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006203:	89 cf                	mov    edi,ecx
c0006205:	85 f6                	test   esi,esi
c0006207:	74 12                	je     c000621b <f_getfree+0x10a>
c0006209:	88 c1                	mov    cl,al
c000620b:	83 e1 01             	and    ecx,0x1
c000620e:	80 f9 01             	cmp    cl,0x1
c0006211:	83 d3 00             	adc    ebx,0x0
c0006214:	d0 e8                	shr    al,1
c0006216:	4e                   	dec    esi
c0006217:	39 fe                	cmp    esi,edi
c0006219:	75 ea                	jne    c0006205 <f_getfree+0xf4>
c000621b:	45                   	inc    ebp
c000621c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006222:	85 f6                	test   esi,esi
c0006224:	75 8f                	jne    c00061b5 <f_getfree+0xa4>
c0006226:	e9 94 00 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000622b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000622e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006231:	31 f6                	xor    esi,esi
c0006233:	31 db                	xor    ebx,ebx
c0006235:	85 f6                	test   esi,esi
c0006237:	75 1b                	jne    c0006254 <f_getfree+0x143>
c0006239:	89 d7                	mov    edi,edx
c000623b:	89 cd                	mov    ebp,ecx
c000623d:	83 c7 01             	add    edi,0x1
c0006240:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006244:	83 d5 00             	adc    ebp,0x0
c0006247:	e8 ed c0 ff ff       	call   c0002339 <move_window>
c000624c:	85 c0                	test   eax,eax
c000624e:	75 6b                	jne    c00062bb <f_getfree+0x1aa>
c0006250:	89 fa                	mov    edx,edi
c0006252:	89 e9                	mov    ecx,ebp
c0006254:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006258:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000625c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006260:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006263:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006267:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000626b:	75 11                	jne    c000627e <f_getfree+0x16d>
c000626d:	e8 e9 b8 ff ff       	call   c0001b5b <ld_word>
c0006272:	66 83 f8 01          	cmp    ax,0x1
c0006276:	83 d3 00             	adc    ebx,0x0
c0006279:	83 c6 02             	add    esi,0x2
c000627c:	eb 13                	jmp    c0006291 <f_getfree+0x180>
c000627e:	e8 e5 b8 ff ff       	call   c0001b68 <ld_dword>
c0006283:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006288:	83 f8 01             	cmp    eax,0x1
c000628b:	83 d3 00             	adc    ebx,0x0
c000628e:	83 c6 04             	add    esi,0x4
c0006291:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000629b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000629f:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062a3:	75 90                	jne    c0006235 <f_getfree+0x124>
c00062a5:	eb 18                	jmp    c00062bf <f_getfree+0x1ae>
c00062a7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062af:	eb 0e                	jmp    c00062bf <f_getfree+0x1ae>
c00062b1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b9:	eb 04                	jmp    c00062bf <f_getfree+0x1ae>
c00062bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062bf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062c3:	89 18                	mov    DWORD PTR [eax],ebx
c00062c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062cc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062d4:	83 c4 5c             	add    esp,0x5c
c00062d7:	5b                   	pop    ebx
c00062d8:	5e                   	pop    esi
c00062d9:	5f                   	pop    edi
c00062da:	5d                   	pop    ebp
c00062db:	c3                   	ret    

c00062dc <f_truncate>:
c00062dc:	56                   	push   esi
c00062dd:	53                   	push   ebx
c00062de:	83 ec 14             	sub    esp,0x14
c00062e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e9:	89 d8                	mov    eax,ebx
c00062eb:	e8 6e bf ff ff       	call   c000225e <validate>
c00062f0:	89 c6                	mov    esi,eax
c00062f2:	85 c0                	test   eax,eax
c00062f4:	0f 85 d2 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c00062fa:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062fe:	85 f6                	test   esi,esi
c0006300:	0f 85 c6 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c0006306:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000630a:	0f 84 b7 00 00 00    	je     c00063c7 <f_truncate+0xeb>
c0006310:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006313:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006316:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006319:	89 d1                	mov    ecx,edx
c000631b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000631e:	0f 83 a8 00 00 00    	jae    c00063cc <f_truncate+0xf0>
c0006324:	09 c2                	or     edx,eax
c0006326:	75 15                	jne    c000633d <f_truncate+0x61>
c0006328:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000632b:	31 c9                	xor    ecx,ecx
c000632d:	89 d8                	mov    eax,ebx
c000632f:	e8 7a d0 ff ff       	call   c00033ae <remove_chain>
c0006334:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000633b:	eb 35                	jmp    c0006372 <f_truncate+0x96>
c000633d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006340:	89 d8                	mov    eax,ebx
c0006342:	e8 7a cb ff ff       	call   c0002ec1 <get_fat>
c0006347:	89 c2                	mov    edx,eax
c0006349:	b8 01 00 00 00       	mov    eax,0x1
c000634e:	83 fa ff             	cmp    edx,0xffffffff
c0006351:	74 1f                	je     c0006372 <f_truncate+0x96>
c0006353:	b8 02 00 00 00       	mov    eax,0x2
c0006358:	83 fa 01             	cmp    edx,0x1
c000635b:	74 15                	je     c0006372 <f_truncate+0x96>
c000635d:	31 c0                	xor    eax,eax
c000635f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006363:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006366:	76 0a                	jbe    c0006372 <f_truncate+0x96>
c0006368:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000636b:	89 d8                	mov    eax,ebx
c000636d:	e8 3c d0 ff ff       	call   c00033ae <remove_chain>
c0006372:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006375:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006378:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000637b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000637e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006381:	83 ca 40             	or     edx,0x40
c0006384:	85 c0                	test   eax,eax
c0006386:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006389:	75 35                	jne    c00063c0 <f_truncate+0xe4>
c000638b:	84 d2                	test   dl,dl
c000638d:	79 3d                	jns    c00063cc <f_truncate+0xf0>
c000638f:	83 ec 0c             	sub    esp,0xc
c0006392:	8d 43 50             	lea    eax,[ebx+0x50]
c0006395:	6a 01                	push   0x1
c0006397:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000639a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000639d:	50                   	push   eax
c000639e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063a2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063a6:	50                   	push   eax
c00063a7:	e8 7a b7 ff ff       	call   c0001b26 <disk_write>
c00063ac:	83 c4 20             	add    esp,0x20
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 08                	jne    c00063bb <f_truncate+0xdf>
c00063b3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063b7:	31 f6                	xor    esi,esi
c00063b9:	eb 11                	jmp    c00063cc <f_truncate+0xf0>
c00063bb:	b8 01 00 00 00       	mov    eax,0x1
c00063c0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063c3:	89 c6                	mov    esi,eax
c00063c5:	eb 05                	jmp    c00063cc <f_truncate+0xf0>
c00063c7:	be 07 00 00 00       	mov    esi,0x7
c00063cc:	89 f0                	mov    eax,esi
c00063ce:	83 c4 14             	add    esp,0x14
c00063d1:	5b                   	pop    ebx
c00063d2:	5e                   	pop    esi
c00063d3:	c3                   	ret    

c00063d4 <f_unlink>:
c00063d4:	56                   	push   esi
c00063d5:	b9 02 00 00 00       	mov    ecx,0x2
c00063da:	53                   	push   ebx
c00063db:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063e5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063ec:	e8 fa c1 ff ff       	call   c00025eb <mount_volume>
c00063f1:	85 c0                	test   eax,eax
c00063f3:	0f 85 55 01 00 00    	jne    c000654e <f_unlink+0x17a>
c00063f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063fd:	83 ec 0c             	sub    esp,0xc
c0006400:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006404:	68 60 04 00 00       	push   0x460
c0006409:	e8 b6 21 00 00       	call   c00085c4 <ff_memalloc>
c000640e:	83 c4 10             	add    esp,0x10
c0006411:	89 c3                	mov    ebx,eax
c0006413:	b8 11 00 00 00       	mov    eax,0x11
c0006418:	85 db                	test   ebx,ebx
c000641a:	0f 84 2e 01 00 00    	je     c000654e <f_unlink+0x17a>
c0006420:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006424:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000642a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000642d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006430:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006437:	8d 44 24 48          	lea    eax,[esp+0x48]
c000643b:	e8 21 e9 ff ff       	call   c0004d61 <follow_path>
c0006440:	85 c0                	test   eax,eax
c0006442:	0f 85 f2 00 00 00    	jne    c000653a <f_unlink+0x166>
c0006448:	b8 06 00 00 00       	mov    eax,0x6
c000644d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006455:	0f 88 df 00 00 00    	js     c000653a <f_unlink+0x166>
c000645b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006460:	74 0a                	je     c000646c <f_unlink+0x98>
c0006462:	b8 07 00 00 00       	mov    eax,0x7
c0006467:	e9 ce 00 00 00       	jmp    c000653a <f_unlink+0x166>
c000646c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006470:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006474:	8a 02                	mov    al,BYTE PTR [edx]
c0006476:	3c 04                	cmp    al,0x4
c0006478:	75 12                	jne    c000648c <f_unlink+0xb8>
c000647a:	8d 42 10             	lea    eax,[edx+0x10]
c000647d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006481:	e8 a1 e8 ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0006486:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000648a:	eb 0e                	jmp    c000649a <f_unlink+0xc6>
c000648c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006493:	e8 3e e8 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0006498:	89 c6                	mov    esi,eax
c000649a:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000649f:	75 12                	jne    c00064b3 <f_unlink+0xdf>
c00064a1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064a5:	e8 94 d6 ff ff       	call   c0003b3e <dir_remove>
c00064aa:	85 c0                	test   eax,eax
c00064ac:	74 6c                	je     c000651a <f_unlink+0x146>
c00064ae:	e9 87 00 00 00       	jmp    c000653a <f_unlink+0x166>
c00064b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064b7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064be:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064c5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c8:	75 21                	jne    c00064eb <f_unlink+0x117>
c00064ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064d2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064e0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064e4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064eb:	31 d2                	xor    edx,edx
c00064ed:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064f4:	e8 be cb ff ff       	call   c00030b7 <dir_sdi>
c00064f9:	85 c0                	test   eax,eax
c00064fb:	75 3d                	jne    c000653a <f_unlink+0x166>
c00064fd:	31 d2                	xor    edx,edx
c00064ff:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006506:	e8 bc d3 ff ff       	call   c00038c7 <dir_read>
c000650b:	85 c0                	test   eax,eax
c000650d:	0f 84 4f ff ff ff    	je     c0006462 <f_unlink+0x8e>
c0006513:	83 f8 04             	cmp    eax,0x4
c0006516:	75 22                	jne    c000653a <f_unlink+0x166>
c0006518:	eb 87                	jmp    c00064a1 <f_unlink+0xcd>
c000651a:	85 f6                	test   esi,esi
c000651c:	75 0b                	jne    c0006529 <f_unlink+0x155>
c000651e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006522:	e8 3d df ff ff       	call   c0004464 <sync_fs>
c0006527:	eb 11                	jmp    c000653a <f_unlink+0x166>
c0006529:	31 c9                	xor    ecx,ecx
c000652b:	89 f2                	mov    edx,esi
c000652d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006531:	e8 78 ce ff ff       	call   c00033ae <remove_chain>
c0006536:	85 c0                	test   eax,eax
c0006538:	74 e4                	je     c000651e <f_unlink+0x14a>
c000653a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000653e:	83 ec 0c             	sub    esp,0xc
c0006541:	53                   	push   ebx
c0006542:	e8 95 20 00 00       	call   c00085dc <ff_memfree>
c0006547:	83 c4 10             	add    esp,0x10
c000654a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000654e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006554:	5b                   	pop    ebx
c0006555:	5e                   	pop    esi
c0006556:	c3                   	ret    

c0006557 <f_mkdir>:
c0006557:	57                   	push   edi
c0006558:	b9 02 00 00 00       	mov    ecx,0x2
c000655d:	56                   	push   esi
c000655e:	53                   	push   ebx
c000655f:	83 c4 80             	add    esp,0xffffff80
c0006562:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006566:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000656d:	e8 79 c0 ff ff       	call   c00025eb <mount_volume>
c0006572:	89 c3                	mov    ebx,eax
c0006574:	85 c0                	test   eax,eax
c0006576:	0f 85 fe 01 00 00    	jne    c000677a <f_mkdir+0x223>
c000657c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006580:	bb 11 00 00 00       	mov    ebx,0x11
c0006585:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006589:	83 ec 0c             	sub    esp,0xc
c000658c:	68 60 04 00 00       	push   0x460
c0006591:	e8 2e 20 00 00       	call   c00085c4 <ff_memalloc>
c0006596:	83 c4 10             	add    esp,0x10
c0006599:	89 c7                	mov    edi,eax
c000659b:	85 c0                	test   eax,eax
c000659d:	0f 84 d7 01 00 00    	je     c000677a <f_mkdir+0x223>
c00065a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065ad:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065b3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065be:	e8 9e e7 ff ff       	call   c0004d61 <follow_path>
c00065c3:	89 c3                	mov    ebx,eax
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 3e                	je     c0006607 <f_mkdir+0xb0>
c00065c9:	83 f8 04             	cmp    eax,0x4
c00065cc:	75 3e                	jne    c000660c <f_mkdir+0xb5>
c00065ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d2:	31 d2                	xor    edx,edx
c00065d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065dc:	e8 ce cb ff ff       	call   c00031af <create_chain>
c00065e1:	89 c6                	mov    esi,eax
c00065e3:	85 c0                	test   eax,eax
c00065e5:	74 0c                	je     c00065f3 <f_mkdir+0x9c>
c00065e7:	bb 02 00 00 00       	mov    ebx,0x2
c00065ec:	83 f8 01             	cmp    eax,0x1
c00065ef:	74 07                	je     c00065f8 <f_mkdir+0xa1>
c00065f1:	eb 2a                	jmp    c000661d <f_mkdir+0xc6>
c00065f3:	bb 07 00 00 00       	mov    ebx,0x7
c00065f8:	31 c9                	xor    ecx,ecx
c00065fa:	89 f2                	mov    edx,esi
c00065fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006600:	e8 a9 cd ff ff       	call   c00033ae <remove_chain>
c0006605:	eb 05                	jmp    c000660c <f_mkdir+0xb5>
c0006607:	bb 08 00 00 00       	mov    ebx,0x8
c000660c:	83 ec 0c             	sub    esp,0xc
c000660f:	57                   	push   edi
c0006610:	e8 c7 1f 00 00       	call   c00085dc <ff_memfree>
c0006615:	83 c4 10             	add    esp,0x10
c0006618:	e9 5d 01 00 00       	jmp    c000677a <f_mkdir+0x223>
c000661d:	bb 01 00 00 00       	mov    ebx,0x1
c0006622:	83 f8 ff             	cmp    eax,0xffffffff
c0006625:	74 d1                	je     c00065f8 <f_mkdir+0xa1>
c0006627:	89 f2                	mov    edx,esi
c0006629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000662d:	e8 c4 ce ff ff       	call   c00034f6 <dir_clear>
c0006632:	89 c3                	mov    ebx,eax
c0006634:	85 c0                	test   eax,eax
c0006636:	75 c0                	jne    c00065f8 <f_mkdir+0xa1>
c0006638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000663f:	74 69                	je     c00066aa <f_mkdir+0x153>
c0006641:	b9 0b 00 00 00       	mov    ecx,0xb
c0006646:	83 c0 54             	add    eax,0x54
c0006649:	ba 20 00 00 00       	mov    edx,0x20
c000664e:	e8 9c b5 ff ff       	call   c0001bef <mem_set>
c0006653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006657:	ba 00 00 21 50       	mov    edx,0x50210000
c000665c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006660:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006664:	83 c0 6a             	add    eax,0x6a
c0006667:	e8 65 b5 ff ff       	call   c0001bd1 <st_dword>
c000666c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006670:	89 f1                	mov    ecx,esi
c0006672:	8d 50 54             	lea    edx,[eax+0x54]
c0006675:	e8 85 e6 ff ff       	call   c0004cff <st_clust.isra.1>
c000667a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667e:	b9 20 00 00 00       	mov    ecx,0x20
c0006683:	8d 50 54             	lea    edx,[eax+0x54]
c0006686:	83 c0 74             	add    eax,0x74
c0006689:	e8 4c b5 ff ff       	call   c0001bda <mem_cpy>
c000668e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006692:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006696:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000669a:	8d 50 74             	lea    edx,[eax+0x74]
c000669d:	e8 5d e6 ff ff       	call   c0004cff <st_clust.isra.1>
c00066a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066ae:	e8 2f db ff ff       	call   c00041e2 <dir_register>
c00066b3:	89 c3                	mov    ebx,eax
c00066b5:	85 c0                	test   eax,eax
c00066b7:	0f 85 3b ff ff ff    	jne    c00065f8 <f_mkdir+0xa1>
c00066bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066c1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c4:	75 74                	jne    c000673a <f_mkdir+0x1e3>
c00066c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066ce:	83 c0 0c             	add    eax,0xc
c00066d1:	e8 fb b4 ff ff       	call   c0001bd1 <st_dword>
c00066d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066da:	89 f2                	mov    edx,esi
c00066dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066df:	83 c0 34             	add    eax,0x34
c00066e2:	e8 ea b4 ff ff       	call   c0001bd1 <st_dword>
c00066e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066eb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066f2:	c1 e2 09             	shl    edx,0x9
c00066f5:	83 c0 38             	add    eax,0x38
c00066f8:	e8 d4 b4 ff ff       	call   c0001bd1 <st_dword>
c00066fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006701:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006705:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006708:	c1 e2 09             	shl    edx,0x9
c000670b:	83 c0 28             	add    eax,0x28
c000670e:	e8 be b4 ff ff       	call   c0001bd1 <st_dword>
c0006713:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006717:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000671e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006721:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006725:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006729:	e8 8b d3 ff ff       	call   c0003ab9 <store_xdir>
c000672e:	89 c3                	mov    ebx,eax
c0006730:	85 c0                	test   eax,eax
c0006732:	0f 85 d4 fe ff ff    	jne    c000660c <f_mkdir+0xb5>
c0006738:	eb 30                	jmp    c000676a <f_mkdir+0x213>
c000673a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000673e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006743:	83 c0 16             	add    eax,0x16
c0006746:	e8 86 b4 ff ff       	call   c0001bd1 <st_dword>
c000674b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674f:	89 f1                	mov    ecx,esi
c0006751:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006755:	e8 a5 e5 ff ff       	call   c0004cff <st_clust.isra.1>
c000675a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000675e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000676a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000676e:	e8 f1 dc ff ff       	call   c0004464 <sync_fs>
c0006773:	89 c3                	mov    ebx,eax
c0006775:	e9 92 fe ff ff       	jmp    c000660c <f_mkdir+0xb5>
c000677a:	83 ec 80             	sub    esp,0xffffff80
c000677d:	89 d8                	mov    eax,ebx
c000677f:	5b                   	pop    ebx
c0006780:	5e                   	pop    esi
c0006781:	5f                   	pop    edi
c0006782:	c3                   	ret    

c0006783 <f_rename>:
c0006783:	55                   	push   ebp
c0006784:	57                   	push   edi
c0006785:	56                   	push   esi
c0006786:	53                   	push   ebx
c0006787:	81 ec fc 00 00 00    	sub    esp,0xfc
c000678d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006794:	e8 a4 b9 ff ff       	call   c000213d <get_ldnumber>
c0006799:	b9 02 00 00 00       	mov    ecx,0x2
c000679e:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067a2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a9:	e8 3d be ff ff       	call   c00025eb <mount_volume>
c00067ae:	85 c0                	test   eax,eax
c00067b0:	0f 85 b5 02 00 00    	jne    c0006a6b <f_rename+0x2e8>
c00067b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ba:	83 ec 0c             	sub    esp,0xc
c00067bd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067c1:	68 60 04 00 00       	push   0x460
c00067c6:	e8 f9 1d 00 00       	call   c00085c4 <ff_memalloc>
c00067cb:	83 c4 10             	add    esp,0x10
c00067ce:	89 c3                	mov    ebx,eax
c00067d0:	b8 11 00 00 00       	mov    eax,0x11
c00067d5:	85 db                	test   ebx,ebx
c00067d7:	0f 84 8e 02 00 00    	je     c0006a6b <f_rename+0x2e8>
c00067dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067e7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067ea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067ed:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067f4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f8:	e8 64 e5 ff ff       	call   c0004d61 <follow_path>
c00067fd:	85 c0                	test   eax,eax
c00067ff:	0f 85 52 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006805:	b8 06 00 00 00       	mov    eax,0x6
c000680a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006812:	0f 85 3f 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006818:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000681c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000681f:	0f 85 05 01 00 00    	jne    c000692a <f_rename+0x1a7>
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	b9 40 00 00 00       	mov    ecx,0x40
c000682d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006831:	e8 a4 b3 ff ff       	call   c0001bda <mem_cpy>
c0006836:	b9 4c 00 00 00       	mov    ecx,0x4c
c000683b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000683f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006846:	e8 8f b3 ff ff       	call   c0001bda <mem_cpy>
c000684b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006852:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006859:	e8 03 e5 ff ff       	call   c0004d61 <follow_path>
c000685e:	85 c0                	test   eax,eax
c0006860:	75 29                	jne    c000688b <f_rename+0x108>
c0006862:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006866:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000686d:	74 0a                	je     c0006879 <f_rename+0xf6>
c000686f:	b8 08 00 00 00       	mov    eax,0x8
c0006874:	e9 de 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c0006879:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006880:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006887:	75 e6                	jne    c000686f <f_rename+0xec>
c0006889:	eb 09                	jmp    c0006894 <f_rename+0x111>
c000688b:	83 f8 04             	cmp    eax,0x4
c000688e:	0f 85 c3 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006894:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000689b:	e8 42 d9 ff ff       	call   c00041e2 <dir_register>
c00068a0:	85 c0                	test   eax,eax
c00068a2:	0f 85 af 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00068a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ac:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068af:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068b2:	89 c5                	mov    ebp,eax
c00068b4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068bb:	8d 46 24             	lea    eax,[esi+0x24]
c00068be:	e8 98 b2 ff ff       	call   c0001b5b <ld_word>
c00068c3:	b9 40 00 00 00       	mov    ecx,0x40
c00068c8:	89 c7                	mov    edi,eax
c00068ca:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068ce:	89 f0                	mov    eax,esi
c00068d0:	e8 05 b3 ff ff       	call   c0001bda <mem_cpy>
c00068d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d9:	89 e9                	mov    ecx,ebp
c00068db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068de:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068e1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068ec:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ef:	0f b7 d7             	movzx  edx,di
c00068f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068f5:	83 c0 24             	add    eax,0x24
c00068f8:	e8 d0 b2 ff ff       	call   c0001bcd <st_word>
c00068fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006901:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006904:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006907:	a8 10                	test   al,0x10
c0006909:	75 06                	jne    c0006911 <f_rename+0x18e>
c000690b:	83 c8 20             	or     eax,0x20
c000690e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006911:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006918:	e8 9c d1 ff ff       	call   c0003ab9 <store_xdir>
c000691d:	85 c0                	test   eax,eax
c000691f:	0f 84 1c 01 00 00    	je     c0006a41 <f_rename+0x2be>
c0006925:	e9 2d 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c000692a:	b9 20 00 00 00       	mov    ecx,0x20
c000692f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006936:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693a:	e8 9b b2 ff ff       	call   c0001bda <mem_cpy>
c000693f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006944:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006948:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694f:	e8 86 b2 ff ff       	call   c0001bda <mem_cpy>
c0006954:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000695b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006962:	e8 fa e3 ff ff       	call   c0004d61 <follow_path>
c0006967:	85 c0                	test   eax,eax
c0006969:	75 27                	jne    c0006992 <f_rename+0x20f>
c000696b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006976:	0f 85 f3 fe ff ff    	jne    c000686f <f_rename+0xec>
c000697c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006983:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698a:	0f 85 df fe ff ff    	jne    c000686f <f_rename+0xec>
c0006990:	eb 09                	jmp    c000699b <f_rename+0x218>
c0006992:	83 f8 04             	cmp    eax,0x4
c0006995:	0f 85 bc 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c000699b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a2:	e8 3b d8 ff ff       	call   c00041e2 <dir_register>
c00069a7:	85 c0                	test   eax,eax
c00069a9:	0f 85 a8 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00069af:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069b6:	b9 13 00 00 00       	mov    ecx,0x13
c00069bb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069be:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069c2:	e8 13 b2 ff ff       	call   c0001bda <mem_cpy>
c00069c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069cb:	a8 10                	test   al,0x10
c00069cd:	75 03                	jne    c00069d2 <f_rename+0x24f>
c00069cf:	83 c8 20             	or     eax,0x20
c00069d2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069dd:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069e1:	74 5e                	je     c0006a41 <f_rename+0x2be>
c00069e3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069ea:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069ee:	74 51                	je     c0006a41 <f_rename+0x2be>
c00069f0:	89 f2                	mov    edx,esi
c00069f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069f6:	8a 07                	mov    al,BYTE PTR [edi]
c00069f8:	e8 d9 e2 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c00069fd:	89 c2                	mov    edx,eax
c00069ff:	89 f8                	mov    eax,edi
c0006a01:	e8 ee b3 ff ff       	call   c0001df4 <clst2sect>
c0006a06:	89 c6                	mov    esi,eax
c0006a08:	89 d1                	mov    ecx,edx
c0006a0a:	b8 02 00 00 00       	mov    eax,0x2
c0006a0f:	09 f2                	or     edx,esi
c0006a11:	74 44                	je     c0006a57 <f_rename+0x2d4>
c0006a13:	89 f2                	mov    edx,esi
c0006a15:	89 f8                	mov    eax,edi
c0006a17:	e8 1d b9 ff ff       	call   c0002339 <move_window>
c0006a1c:	85 c0                	test   eax,eax
c0006a1e:	75 37                	jne    c0006a57 <f_rename+0x2d4>
c0006a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a24:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a28:	75 17                	jne    c0006a41 <f_rename+0x2be>
c0006a2a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a2d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a34:	e8 c6 e2 ff ff       	call   c0004cff <st_clust.isra.1>
c0006a39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a41:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a45:	e8 f4 d0 ff ff       	call   c0003b3e <dir_remove>
c0006a4a:	85 c0                	test   eax,eax
c0006a4c:	75 09                	jne    c0006a57 <f_rename+0x2d4>
c0006a4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a52:	e8 0d da ff ff       	call   c0004464 <sync_fs>
c0006a57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a5b:	83 ec 0c             	sub    esp,0xc
c0006a5e:	53                   	push   ebx
c0006a5f:	e8 78 1b 00 00       	call   c00085dc <ff_memfree>
c0006a64:	83 c4 10             	add    esp,0x10
c0006a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a6b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a71:	5b                   	pop    ebx
c0006a72:	5e                   	pop    esi
c0006a73:	5f                   	pop    edi
c0006a74:	5d                   	pop    ebp
c0006a75:	c3                   	ret    

c0006a76 <f_chmod>:
c0006a76:	57                   	push   edi
c0006a77:	b9 02 00 00 00       	mov    ecx,0x2
c0006a7c:	56                   	push   esi
c0006a7d:	53                   	push   ebx
c0006a7e:	83 ec 60             	sub    esp,0x60
c0006a81:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a85:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a89:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a8d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a91:	e8 55 bb ff ff       	call   c00025eb <mount_volume>
c0006a96:	85 c0                	test   eax,eax
c0006a98:	0f 85 af 00 00 00    	jne    c0006b4d <f_chmod+0xd7>
c0006a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa2:	83 ec 0c             	sub    esp,0xc
c0006aa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa9:	68 60 04 00 00       	push   0x460
c0006aae:	e8 11 1b 00 00       	call   c00085c4 <ff_memalloc>
c0006ab3:	83 c4 10             	add    esp,0x10
c0006ab6:	89 c6                	mov    esi,eax
c0006ab8:	b8 11 00 00 00       	mov    eax,0x11
c0006abd:	85 f6                	test   esi,esi
c0006abf:	0f 84 88 00 00 00    	je     c0006b4d <f_chmod+0xd7>
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006acf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ad2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ad5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006add:	e8 7f e2 ff ff       	call   c0004d61 <follow_path>
c0006ae2:	85 c0                	test   eax,eax
c0006ae4:	75 53                	jne    c0006b39 <f_chmod+0xc3>
c0006ae6:	b8 06 00 00 00       	mov    eax,0x6
c0006aeb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006af0:	75 47                	jne    c0006b39 <f_chmod+0xc3>
c0006af2:	89 f9                	mov    ecx,edi
c0006af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af8:	83 e1 27             	and    ecx,0x27
c0006afb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006afe:	75 1d                	jne    c0006b1d <f_chmod+0xa7>
c0006b00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b03:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b06:	21 cb                	and    ebx,ecx
c0006b08:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b0b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b12:	e8 a2 cf ff ff       	call   c0003ab9 <store_xdir>
c0006b17:	85 c0                	test   eax,eax
c0006b19:	75 1e                	jne    c0006b39 <f_chmod+0xc3>
c0006b1b:	eb 13                	jmp    c0006b30 <f_chmod+0xba>
c0006b1d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b21:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b24:	21 cb                	and    ebx,ecx
c0006b26:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b29:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b2c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b34:	e8 2b d9 ff ff       	call   c0004464 <sync_fs>
c0006b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b3d:	83 ec 0c             	sub    esp,0xc
c0006b40:	56                   	push   esi
c0006b41:	e8 96 1a 00 00       	call   c00085dc <ff_memfree>
c0006b46:	83 c4 10             	add    esp,0x10
c0006b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b4d:	83 c4 60             	add    esp,0x60
c0006b50:	5b                   	pop    ebx
c0006b51:	5e                   	pop    esi
c0006b52:	5f                   	pop    edi
c0006b53:	c3                   	ret    

c0006b54 <f_utime>:
c0006b54:	56                   	push   esi
c0006b55:	b9 02 00 00 00       	mov    ecx,0x2
c0006b5a:	53                   	push   ebx
c0006b5b:	83 ec 64             	sub    esp,0x64
c0006b5e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b62:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b66:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b6a:	e8 7c ba ff ff       	call   c00025eb <mount_volume>
c0006b6f:	85 c0                	test   eax,eax
c0006b71:	0f 85 b5 00 00 00    	jne    c0006c2c <f_utime+0xd8>
c0006b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b7b:	83 ec 0c             	sub    esp,0xc
c0006b7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b82:	68 60 04 00 00       	push   0x460
c0006b87:	e8 38 1a 00 00       	call   c00085c4 <ff_memalloc>
c0006b8c:	83 c4 10             	add    esp,0x10
c0006b8f:	89 c3                	mov    ebx,eax
c0006b91:	b8 11 00 00 00       	mov    eax,0x11
c0006b96:	85 db                	test   ebx,ebx
c0006b98:	0f 84 8e 00 00 00    	je     c0006c2c <f_utime+0xd8>
c0006b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bab:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bae:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bb6:	e8 a6 e1 ff ff       	call   c0004d61 <follow_path>
c0006bbb:	85 c0                	test   eax,eax
c0006bbd:	75 59                	jne    c0006c18 <f_utime+0xc4>
c0006bbf:	b8 06 00 00 00       	mov    eax,0x6
c0006bc4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc9:	75 4d                	jne    c0006c18 <f_utime+0xc4>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bd3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bd7:	c1 e2 10             	shl    edx,0x10
c0006bda:	09 ca                	or     edx,ecx
c0006bdc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bdf:	75 1a                	jne    c0006bfb <f_utime+0xa7>
c0006be1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006be4:	83 c0 0c             	add    eax,0xc
c0006be7:	e8 e5 af ff ff       	call   c0001bd1 <st_dword>
c0006bec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bf0:	e8 c4 ce ff ff       	call   c0003ab9 <store_xdir>
c0006bf5:	85 c0                	test   eax,eax
c0006bf7:	75 1f                	jne    c0006c18 <f_utime+0xc4>
c0006bf9:	eb 14                	jmp    c0006c0f <f_utime+0xbb>
c0006bfb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bff:	83 c0 16             	add    eax,0x16
c0006c02:	e8 ca af ff ff       	call   c0001bd1 <st_dword>
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c13:	e8 4c d8 ff ff       	call   c0004464 <sync_fs>
c0006c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c1c:	83 ec 0c             	sub    esp,0xc
c0006c1f:	53                   	push   ebx
c0006c20:	e8 b7 19 00 00       	call   c00085dc <ff_memfree>
c0006c25:	83 c4 10             	add    esp,0x10
c0006c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c2c:	83 c4 64             	add    esp,0x64
c0006c2f:	5b                   	pop    ebx
c0006c30:	5e                   	pop    esi
c0006c31:	c3                   	ret    

c0006c32 <f_getlabel>:
c0006c32:	55                   	push   ebp
c0006c33:	31 c9                	xor    ecx,ecx
c0006c35:	57                   	push   edi
c0006c36:	56                   	push   esi
c0006c37:	53                   	push   ebx
c0006c38:	83 ec 6c             	sub    esp,0x6c
c0006c3b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c46:	e8 a0 b9 ff ff       	call   c00025eb <mount_volume>
c0006c4b:	89 c6                	mov    esi,eax
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	0f 85 c1 01 00 00    	jne    c0006e16 <f_getlabel+0x1e4>
c0006c55:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c5d:	0f 84 5f 01 00 00    	je     c0006dc2 <f_getlabel+0x190>
c0006c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c67:	31 d2                	xor    edx,edx
c0006c69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c6d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c75:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c79:	e8 39 c4 ff ff       	call   c00030b7 <dir_sdi>
c0006c7e:	85 c0                	test   eax,eax
c0006c80:	0f 85 2d 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c86:	ba 01 00 00 00       	mov    edx,0x1
c0006c8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c8f:	e8 33 cc ff ff       	call   c00038c7 <dir_read>
c0006c94:	85 c0                	test   eax,eax
c0006c96:	0f 85 17 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ca3:	74 09                	je     c0006cae <f_getlabel+0x7c>
c0006ca5:	31 db                	xor    ebx,ebx
c0006ca7:	31 c9                	xor    ecx,ecx
c0006ca9:	e9 c8 00 00 00       	jmp    c0006d76 <f_getlabel+0x144>
c0006cae:	31 ed                	xor    ebp,ebp
c0006cb0:	31 db                	xor    ebx,ebx
c0006cb2:	31 ff                	xor    edi,edi
c0006cb4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cbc:	39 fa                	cmp    edx,edi
c0006cbe:	76 4b                	jbe    c0006d0b <f_getlabel+0xd9>
c0006cc0:	47                   	inc    edi
c0006cc1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cc4:	01 d0                	add    eax,edx
c0006cc6:	e8 90 ae ff ff       	call   c0001b5b <ld_word>
c0006ccb:	66 85 ed             	test   bp,bp
c0006cce:	75 0d                	jne    c0006cdd <f_getlabel+0xab>
c0006cd0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cd6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cdb:	76 28                	jbe    c0006d05 <f_getlabel+0xd3>
c0006cdd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ce4:	89 e9                	mov    ecx,ebp
c0006ce6:	01 da                	add    edx,ebx
c0006ce8:	c1 e1 10             	shl    ecx,0x10
c0006ceb:	0f b7 c0             	movzx  eax,ax
c0006cee:	09 c8                	or     eax,ecx
c0006cf0:	b9 04 00 00 00       	mov    ecx,0x4
c0006cf5:	e8 01 b0 ff ff       	call   c0001cfb <put_utf>
c0006cfa:	84 c0                	test   al,al
c0006cfc:	74 0b                	je     c0006d09 <f_getlabel+0xd7>
c0006cfe:	0f b6 c0             	movzx  eax,al
c0006d01:	01 c3                	add    ebx,eax
c0006d03:	31 c0                	xor    eax,eax
c0006d05:	89 c5                	mov    ebp,eax
c0006d07:	eb ab                	jmp    c0006cb4 <f_getlabel+0x82>
c0006d09:	31 db                	xor    ebx,ebx
c0006d0b:	66 85 ed             	test   bp,bp
c0006d0e:	74 02                	je     c0006d12 <f_getlabel+0xe0>
c0006d10:	31 db                	xor    ebx,ebx
c0006d12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d19:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d1d:	e9 a0 00 00 00       	jmp    c0006dc2 <f_getlabel+0x190>
c0006d22:	83 ff 0b             	cmp    edi,0xb
c0006d25:	74 11                	je     c0006d38 <f_getlabel+0x106>
c0006d27:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d30:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d33:	c1 e0 08             	shl    eax,0x8
c0006d36:	09 c2                	or     edx,eax
c0006d38:	0f b7 d2             	movzx  edx,dx
c0006d3b:	50                   	push   eax
c0006d3c:	50                   	push   eax
c0006d3d:	68 b5 01 00 00       	push   0x1b5
c0006d42:	52                   	push   edx
c0006d43:	e8 44 19 00 00       	call   c000868c <ff_oem2uni>
c0006d48:	83 c4 10             	add    esp,0x10
c0006d4b:	66 85 c0             	test   ax,ax
c0006d4e:	74 46                	je     c0006d96 <f_getlabel+0x164>
c0006d50:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d57:	0f b7 c0             	movzx  eax,ax
c0006d5a:	01 da                	add    edx,ebx
c0006d5c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d61:	e8 95 af ff ff       	call   c0001cfb <put_utf>
c0006d66:	84 c0                	test   al,al
c0006d68:	74 2c                	je     c0006d96 <f_getlabel+0x164>
c0006d6a:	0f b6 c0             	movzx  eax,al
c0006d6d:	01 c3                	add    ebx,eax
c0006d6f:	83 ff 0b             	cmp    edi,0xb
c0006d72:	74 24                	je     c0006d98 <f_getlabel+0x166>
c0006d74:	89 f9                	mov    ecx,edi
c0006d76:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d7a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d7d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d82:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d8b:	e8 9f ae ff ff       	call   c0001c2f <dbc_1st>
c0006d90:	85 c0                	test   eax,eax
c0006d92:	74 a4                	je     c0006d38 <f_getlabel+0x106>
c0006d94:	eb 8c                	jmp    c0006d22 <f_getlabel+0xf0>
c0006d96:	31 db                	xor    ebx,ebx
c0006d98:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d9f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006da2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da9:	74 17                	je     c0006dc2 <f_getlabel+0x190>
c0006dab:	4b                   	dec    ebx
c0006dac:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006daf:	74 ee                	je     c0006d9f <f_getlabel+0x16d>
c0006db1:	eb 0f                	jmp    c0006dc2 <f_getlabel+0x190>
c0006db3:	83 f8 04             	cmp    eax,0x4
c0006db6:	75 5c                	jne    c0006e14 <f_getlabel+0x1e2>
c0006db8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dbf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dc2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dca:	74 4a                	je     c0006e16 <f_getlabel+0x1e4>
c0006dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dd0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dd3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dd6:	e8 5e b5 ff ff       	call   c0002339 <move_window>
c0006ddb:	89 c6                	mov    esi,eax
c0006ddd:	85 c0                	test   eax,eax
c0006ddf:	75 35                	jne    c0006e16 <f_getlabel+0x1e4>
c0006de1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006de5:	b8 43 00 00 00       	mov    eax,0x43
c0006dea:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dec:	80 f9 03             	cmp    cl,0x3
c0006def:	74 0f                	je     c0006e00 <f_getlabel+0x1ce>
c0006df1:	31 c0                	xor    eax,eax
c0006df3:	80 f9 04             	cmp    cl,0x4
c0006df6:	0f 94 c0             	sete   al
c0006df9:	48                   	dec    eax
c0006dfa:	83 e0 c3             	and    eax,0xffffffc3
c0006dfd:	83 c0 64             	add    eax,0x64
c0006e00:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e04:	e8 5f ad ff ff       	call   c0001b68 <ld_dword>
c0006e09:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e10:	89 07                	mov    DWORD PTR [edi],eax
c0006e12:	eb 02                	jmp    c0006e16 <f_getlabel+0x1e4>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	83 c4 6c             	add    esp,0x6c
c0006e19:	89 f0                	mov    eax,esi
c0006e1b:	5b                   	pop    ebx
c0006e1c:	5e                   	pop    esi
c0006e1d:	5f                   	pop    edi
c0006e1e:	5d                   	pop    ebp
c0006e1f:	c3                   	ret    

c0006e20 <f_setlabel>:
c0006e20:	56                   	push   esi
c0006e21:	b9 02 00 00 00       	mov    ecx,0x2
c0006e26:	53                   	push   ebx
c0006e27:	83 ec 74             	sub    esp,0x74
c0006e2a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e35:	e8 b1 b7 ff ff       	call   c00025eb <mount_volume>
c0006e3a:	89 c6                	mov    esi,eax
c0006e3c:	85 c0                	test   eax,eax
c0006e3e:	0f 85 41 02 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e4b:	0f 85 8e 00 00 00    	jne    c0006edf <f_setlabel+0xbf>
c0006e51:	b9 16 00 00 00       	mov    ecx,0x16
c0006e56:	31 d2                	xor    edx,edx
c0006e58:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e5c:	31 db                	xor    ebx,ebx
c0006e5e:	e8 8c ad ff ff       	call   c0001bef <mem_set>
c0006e63:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e6a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e6d:	0f 86 0a 01 00 00    	jbe    c0006f7d <f_setlabel+0x15d>
c0006e73:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e7a:	e8 b6 ad ff ff       	call   c0001c35 <tchar2uni>
c0006e7f:	89 c6                	mov    esi,eax
c0006e81:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e86:	76 2a                	jbe    c0006eb2 <f_setlabel+0x92>
c0006e88:	83 f8 ff             	cmp    eax,0xffffffff
c0006e8b:	74 05                	je     c0006e92 <f_setlabel+0x72>
c0006e8d:	83 fb 09             	cmp    ebx,0x9
c0006e90:	76 0a                	jbe    c0006e9c <f_setlabel+0x7c>
c0006e92:	be 06 00 00 00       	mov    esi,0x6
c0006e97:	e9 e9 01 00 00       	jmp    c0007085 <f_setlabel+0x265>
c0006e9c:	89 c2                	mov    edx,eax
c0006e9e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ea2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ea5:	c1 ea 10             	shr    edx,0x10
c0006ea8:	01 c8                	add    eax,ecx
c0006eaa:	43                   	inc    ebx
c0006eab:	e8 1d ad ff ff       	call   c0001bcd <st_word>
c0006eb0:	eb 04                	jmp    c0006eb6 <f_setlabel+0x96>
c0006eb2:	85 c0                	test   eax,eax
c0006eb4:	74 dc                	je     c0006e92 <f_setlabel+0x72>
c0006eb6:	89 f2                	mov    edx,esi
c0006eb8:	b8 b7 35 02 c0       	mov    eax,0xc00235b7
c0006ebd:	e8 5b ad ff ff       	call   c0001c1d <chk_chr>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	75 cc                	jne    c0006e92 <f_setlabel+0x72>
c0006ec6:	83 fb 0a             	cmp    ebx,0xa
c0006ec9:	77 c7                	ja     c0006e92 <f_setlabel+0x72>
c0006ecb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ece:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ed2:	0f b7 d6             	movzx  edx,si
c0006ed5:	01 c8                	add    eax,ecx
c0006ed7:	43                   	inc    ebx
c0006ed8:	e8 f0 ac ff ff       	call   c0001bcd <st_word>
c0006edd:	eb 84                	jmp    c0006e63 <f_setlabel+0x43>
c0006edf:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee4:	ba 20 00 00 00       	mov    edx,0x20
c0006ee9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006eed:	31 db                	xor    ebx,ebx
c0006eef:	e8 fb ac ff ff       	call   c0001bef <mem_set>
c0006ef4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006efb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006efe:	76 60                	jbe    c0006f60 <f_setlabel+0x140>
c0006f00:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f07:	e8 29 ad ff ff       	call   c0001c35 <tchar2uni>
c0006f0c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f11:	0f 87 7b ff ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0006f17:	83 ec 0c             	sub    esp,0xc
c0006f1a:	50                   	push   eax
c0006f1b:	e8 e0 17 00 00       	call   c0008700 <ff_wtoupper>
c0006f20:	5a                   	pop    edx
c0006f21:	59                   	pop    ecx
c0006f22:	68 b5 01 00 00       	push   0x1b5
c0006f27:	50                   	push   eax
c0006f28:	e8 c7 16 00 00       	call   c00085f4 <ff_uni2oem>
c0006f2d:	83 c4 10             	add    esp,0x10
c0006f30:	89 c6                	mov    esi,eax
c0006f32:	66 85 c0             	test   ax,ax
c0006f35:	0f 84 57 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f3b:	0f b7 d0             	movzx  edx,ax
c0006f3e:	b8 b0 35 02 c0       	mov    eax,0xc00235b0
c0006f43:	e8 d5 ac ff ff       	call   c0001c1d <chk_chr>
c0006f48:	85 c0                	test   eax,eax
c0006f4a:	0f 85 42 ff ff ff    	jne    c0006e92 <f_setlabel+0x72>
c0006f50:	66 81 fe ff 00       	cmp    si,0xff
c0006f55:	0f 87 14 01 00 00    	ja     c000706f <f_setlabel+0x24f>
c0006f5b:	e9 fa 00 00 00       	jmp    c000705a <f_setlabel+0x23a>
c0006f60:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f65:	0f 84 27 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f6b:	85 db                	test   ebx,ebx
c0006f6d:	74 0e                	je     c0006f7d <f_setlabel+0x15d>
c0006f6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f72:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f77:	75 04                	jne    c0006f7d <f_setlabel+0x15d>
c0006f79:	89 c3                	mov    ebx,eax
c0006f7b:	eb ee                	jmp    c0006f6b <f_setlabel+0x14b>
c0006f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f81:	31 d2                	xor    edx,edx
c0006f83:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f87:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f93:	e8 1f c1 ff ff       	call   c00030b7 <dir_sdi>
c0006f98:	89 c6                	mov    esi,eax
c0006f9a:	85 c0                	test   eax,eax
c0006f9c:	0f 85 e3 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006fa2:	ba 01 00 00 00       	mov    edx,0x1
c0006fa7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fab:	e8 17 c9 ff ff       	call   c00038c7 <dir_read>
c0006fb0:	85 c0                	test   eax,eax
c0006fb2:	75 21                	jne    c0006fd5 <f_setlabel+0x1b5>
c0006fb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fbc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fbf:	74 5d                	je     c000701e <f_setlabel+0x1fe>
c0006fc1:	85 db                	test   ebx,ebx
c0006fc3:	74 0b                	je     c0006fd0 <f_setlabel+0x1b0>
c0006fc5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fca:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fce:	eb 70                	jmp    c0007040 <f_setlabel+0x220>
c0006fd0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fd3:	eb 70                	jmp    c0007045 <f_setlabel+0x225>
c0006fd5:	83 f8 04             	cmp    eax,0x4
c0006fd8:	75 7c                	jne    c0007056 <f_setlabel+0x236>
c0006fda:	85 db                	test   ebx,ebx
c0006fdc:	0f 84 a3 00 00 00    	je     c0007085 <f_setlabel+0x265>
c0006fe2:	ba 01 00 00 00       	mov    edx,0x1
c0006fe7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006feb:	e8 51 ca ff ff       	call   c0003a41 <dir_alloc>
c0006ff0:	89 c6                	mov    esi,eax
c0006ff2:	85 c0                	test   eax,eax
c0006ff4:	0f 85 8b 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006ffa:	31 d2                	xor    edx,edx
c0006ffc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007000:	b9 20 00 00 00       	mov    ecx,0x20
c0007005:	e8 e5 ab ff ff       	call   c0001bef <mem_set>
c000700a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000700e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007011:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007015:	75 18                	jne    c000702f <f_setlabel+0x20f>
c0007017:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000701a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000701e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007021:	b9 16 00 00 00       	mov    ecx,0x16
c0007026:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702a:	83 c0 02             	add    eax,0x2
c000702d:	eb 9b                	jmp    c0006fca <f_setlabel+0x1aa>
c000702f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007033:	b9 0b 00 00 00       	mov    ecx,0xb
c0007038:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000703c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007040:	e8 95 ab ff ff       	call   c0001bda <mem_cpy>
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000704d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007051:	e8 0e d4 ff ff       	call   c0004464 <sync_fs>
c0007056:	89 c6                	mov    esi,eax
c0007058:	eb 2b                	jmp    c0007085 <f_setlabel+0x265>
c000705a:	83 fb 0a             	cmp    ebx,0xa
c000705d:	0f 87 2f fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007063:	89 f0                	mov    eax,esi
c0007065:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007069:	43                   	inc    ebx
c000706a:	e9 85 fe ff ff       	jmp    c0006ef4 <f_setlabel+0xd4>
c000706f:	83 fb 09             	cmp    ebx,0x9
c0007072:	0f 87 1a fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007078:	89 f0                	mov    eax,esi
c000707a:	66 c1 e8 08          	shr    ax,0x8
c000707e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007082:	43                   	inc    ebx
c0007083:	eb de                	jmp    c0007063 <f_setlabel+0x243>
c0007085:	89 f0                	mov    eax,esi
c0007087:	83 c4 74             	add    esp,0x74
c000708a:	5b                   	pop    ebx
c000708b:	5e                   	pop    esi
c000708c:	c3                   	ret    

c000708d <f_expand>:
c000708d:	55                   	push   ebp
c000708e:	57                   	push   edi
c000708f:	56                   	push   esi
c0007090:	53                   	push   ebx
c0007091:	83 ec 3c             	sub    esp,0x3c
c0007094:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007098:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000709c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ac:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070b4:	89 d8                	mov    eax,ebx
c00070b6:	e8 a3 b1 ff ff       	call   c000225e <validate>
c00070bb:	89 c5                	mov    ebp,eax
c00070bd:	85 c0                	test   eax,eax
c00070bf:	0f 85 f4 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c9:	85 ed                	test   ebp,ebp
c00070cb:	0f 85 e8 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d9:	75 0a                	jne    c00070e5 <f_expand+0x58>
c00070db:	bd 07 00 00 00       	mov    ebp,0x7
c00070e0:	e9 d4 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00070e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070eb:	75 ee                	jne    c00070db <f_expand+0x4e>
c00070ed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070f1:	74 e8                	je     c00070db <f_expand+0x4e>
c00070f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070f7:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f9:	80 f9 04             	cmp    cl,0x4
c00070fc:	74 07                	je     c0007105 <f_expand+0x78>
c00070fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007103:	77 d6                	ja     c00070db <f_expand+0x4e>
c0007105:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007109:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000710d:	c1 e0 09             	shl    eax,0x9
c0007110:	8d 50 ff             	lea    edx,[eax-0x1]
c0007113:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007117:	0f 95 c2             	setne  dl
c000711a:	0f b6 d2             	movzx  edx,dl
c000711d:	89 d7                	mov    edi,edx
c000711f:	31 d2                	xor    edx,edx
c0007121:	52                   	push   edx
c0007122:	50                   	push   eax
c0007123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000712b:	e8 54 b4 01 00       	call   c0022584 <__udivdi3>
c0007130:	83 c4 10             	add    esp,0x10
c0007133:	01 f8                	add    eax,edi
c0007135:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007139:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000713c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007140:	83 ff 01             	cmp    edi,0x1
c0007143:	76 05                	jbe    c000714a <f_expand+0xbd>
c0007145:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007148:	77 05                	ja     c000714f <f_expand+0xc2>
c000714a:	bf 02 00 00 00       	mov    edi,0x2
c000714f:	80 f9 04             	cmp    cl,0x4
c0007152:	75 19                	jne    c000716d <f_expand+0xe0>
c0007154:	89 f0                	mov    eax,esi
c0007156:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000715a:	89 fa                	mov    edx,edi
c000715c:	e8 f3 b9 ff ff       	call   c0002b54 <find_bitmap>
c0007161:	89 c6                	mov    esi,eax
c0007163:	85 c0                	test   eax,eax
c0007165:	0f 84 70 ff ff ff    	je     c00070db <f_expand+0x4e>
c000716b:	eb 7f                	jmp    c00071ec <f_expand+0x15f>
c000716d:	89 fe                	mov    esi,edi
c000716f:	89 f9                	mov    ecx,edi
c0007171:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007179:	89 ca                	mov    edx,ecx
c000717b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000717f:	89 d8                	mov    eax,ebx
c0007181:	e8 3b bd ff ff       	call   c0002ec1 <get_fat>
c0007186:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000718a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000718e:	41                   	inc    ecx
c000718f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007193:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007196:	77 05                	ja     c000719d <f_expand+0x110>
c0007198:	b9 02 00 00 00       	mov    ecx,0x2
c000719d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071a2:	74 3e                	je     c00071e2 <f_expand+0x155>
c00071a4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a9:	75 0a                	jne    c00071b5 <f_expand+0x128>
c00071ab:	bd 01 00 00 00       	mov    ebp,0x1
c00071b0:	e9 04 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071b5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ba:	75 13                	jne    c00071cf <f_expand+0x142>
c00071bc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071c4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c8:	75 0f                	jne    c00071d9 <f_expand+0x14c>
c00071ca:	e9 ce 00 00 00       	jmp    c000729d <f_expand+0x210>
c00071cf:	89 ce                	mov    esi,ecx
c00071d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d9:	39 f9                	cmp    ecx,edi
c00071db:	75 9c                	jne    c0007179 <f_expand+0xec>
c00071dd:	e9 f9 fe ff ff       	jmp    c00070db <f_expand+0x4e>
c00071e2:	bd 02 00 00 00       	mov    ebp,0x2
c00071e7:	e9 cd 00 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071ec:	83 f8 ff             	cmp    eax,0xffffffff
c00071ef:	74 ba                	je     c00071ab <f_expand+0x11e>
c00071f1:	8d 7e ff             	lea    edi,[esi-0x1]
c00071f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007201:	74 51                	je     c0007254 <f_expand+0x1c7>
c0007203:	83 ec 0c             	sub    esp,0xc
c0007206:	89 f2                	mov    edx,esi
c0007208:	6a 01                	push   0x1
c000720a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000720e:	e8 f4 b9 ff ff       	call   c0002c07 <change_bitmap>
c0007213:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007217:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000721b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	85 c0                	test   eax,eax
c0007224:	74 2e                	je     c0007254 <f_expand+0x1c7>
c0007226:	eb 71                	jmp    c0007299 <f_expand+0x20c>
c0007228:	83 c9 ff             	or     ecx,0xffffffff
c000722b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007230:	74 03                	je     c0007235 <f_expand+0x1a8>
c0007232:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007235:	89 fa                	mov    edx,edi
c0007237:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000723b:	e8 7c ba ff ff       	call   c0002cbc <put_fat>
c0007240:	85 c0                	test   eax,eax
c0007242:	75 55                	jne    c0007299 <f_expand+0x20c>
c0007244:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007248:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000724c:	47                   	inc    edi
c000724d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007252:	75 d4                	jne    c0007228 <f_expand+0x19b>
c0007254:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007258:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000725c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007261:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007264:	74 53                	je     c00072b9 <f_expand+0x22c>
c0007266:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007269:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000726d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007271:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007275:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007279:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000727c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000727f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007282:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007285:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007288:	39 ca                	cmp    edx,ecx
c000728a:	77 2d                	ja     c00072b9 <f_expand+0x22c>
c000728c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007290:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007294:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007297:	eb 20                	jmp    c00072b9 <f_expand+0x22c>
c0007299:	89 c5                	mov    ebp,eax
c000729b:	eb 1c                	jmp    c00072b9 <f_expand+0x22c>
c000729d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072a2:	74 0c                	je     c00072b0 <f_expand+0x223>
c00072a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a8:	89 f7                	mov    edi,esi
c00072aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072ae:	eb 9d                	jmp    c000724d <f_expand+0x1c0>
c00072b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072b7:	eb 9b                	jmp    c0007254 <f_expand+0x1c7>
c00072b9:	83 c4 3c             	add    esp,0x3c
c00072bc:	89 e8                	mov    eax,ebp
c00072be:	5b                   	pop    ebx
c00072bf:	5e                   	pop    esi
c00072c0:	5f                   	pop    edi
c00072c1:	5d                   	pop    ebp
c00072c2:	c3                   	ret    

c00072c3 <f_forward>:
c00072c3:	55                   	push   ebp
c00072c4:	57                   	push   edi
c00072c5:	56                   	push   esi
c00072c6:	53                   	push   ebx
c00072c7:	83 ec 2c             	sub    esp,0x2c
c00072ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072ce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072dc:	89 d8                	mov    eax,ebx
c00072de:	e8 7b af ff ff       	call   c000225e <validate>
c00072e3:	89 c5                	mov    ebp,eax
c00072e5:	85 c0                	test   eax,eax
c00072e7:	0f 85 aa 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072ed:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072f1:	85 ed                	test   ebp,ebp
c00072f3:	0f 85 9e 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072f9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072fd:	0f 84 8f 01 00 00    	je     c0007492 <f_forward+0x1cf>
c0007303:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007306:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007309:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000730c:	bf 00 00 00 00       	mov    edi,0x0
c0007311:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007314:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007318:	89 d1                	mov    ecx,edx
c000731a:	19 f9                	sbb    ecx,edi
c000731c:	0f 83 cf 00 00 00    	jae    c00073f1 <f_forward+0x12e>
c0007322:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007326:	e9 c6 00 00 00       	jmp    c00073f1 <f_forward+0x12e>
c000732b:	50                   	push   eax
c000732c:	50                   	push   eax
c000732d:	6a 00                	push   0x0
c000732f:	6a 00                	push   0x0
c0007331:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007335:	83 c4 10             	add    esp,0x10
c0007338:	85 c0                	test   eax,eax
c000733a:	0f 84 57 01 00 00    	je     c0007497 <f_forward+0x1d4>
c0007340:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007343:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007347:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000734a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000734e:	89 d7                	mov    edi,edx
c0007350:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007353:	89 c6                	mov    esi,eax
c0007355:	0f ac fe 09          	shrd   esi,edi,0x9
c0007359:	21 ce                	and    esi,ecx
c000735b:	89 c1                	mov    ecx,eax
c000735d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007363:	0f 84 98 00 00 00    	je     c0007401 <f_forward+0x13e>
c0007369:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000736d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007370:	89 c8                	mov    eax,ecx
c0007372:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007376:	e8 79 aa ff ff       	call   c0001df4 <clst2sect>
c000737b:	89 d7                	mov    edi,edx
c000737d:	09 c7                	or     edi,eax
c000737f:	0f 84 9e 00 00 00    	je     c0007423 <f_forward+0x160>
c0007385:	31 ff                	xor    edi,edi
c0007387:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000738a:	01 c6                	add    esi,eax
c000738c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007390:	11 d7                	adc    edi,edx
c0007392:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007395:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007398:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739c:	39 fa                	cmp    edx,edi
c000739e:	0f 85 a2 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073a4:	39 f0                	cmp    eax,esi
c00073a6:	0f 85 9a 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073af:	ba 00 02 00 00       	mov    edx,0x200
c00073b4:	25 ff 01 00 00       	and    eax,0x1ff
c00073b9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073bd:	29 c2                	sub    edx,eax
c00073bf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073c2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073c5:	39 d1                	cmp    ecx,edx
c00073c7:	76 02                	jbe    c00073cb <f_forward+0x108>
c00073c9:	89 d1                	mov    ecx,edx
c00073cb:	8d 73 50             	lea    esi,[ebx+0x50]
c00073ce:	52                   	push   edx
c00073cf:	01 c6                	add    esi,eax
c00073d1:	52                   	push   edx
c00073d2:	51                   	push   ecx
c00073d3:	56                   	push   esi
c00073d4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d8:	83 c4 10             	add    esp,0x10
c00073db:	85 c0                	test   eax,eax
c00073dd:	74 44                	je     c0007423 <f_forward+0x160>
c00073df:	31 ff                	xor    edi,edi
c00073e1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073e4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073e7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073eb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ef:	01 07                	add    DWORD PTR [edi],eax
c00073f1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073f6:	0f 85 2f ff ff ff    	jne    c000732b <f_forward+0x68>
c00073fc:	e9 96 00 00 00       	jmp    c0007497 <f_forward+0x1d4>
c0007401:	85 f6                	test   esi,esi
c0007403:	0f 85 60 ff ff ff    	jne    c0007369 <f_forward+0xa6>
c0007409:	89 d7                	mov    edi,edx
c000740b:	09 c7                	or     edi,eax
c000740d:	75 05                	jne    c0007414 <f_forward+0x151>
c000740f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007412:	eb 0a                	jmp    c000741e <f_forward+0x15b>
c0007414:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007417:	89 d8                	mov    eax,ebx
c0007419:	e8 a3 ba ff ff       	call   c0002ec1 <get_fat>
c000741e:	83 f8 01             	cmp    eax,0x1
c0007421:	77 0b                	ja     c000742e <f_forward+0x16b>
c0007423:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007427:	bd 02 00 00 00       	mov    ebp,0x2
c000742c:	eb 69                	jmp    c0007497 <f_forward+0x1d4>
c000742e:	83 f8 ff             	cmp    eax,0xffffffff
c0007431:	75 0b                	jne    c000743e <f_forward+0x17b>
c0007433:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007437:	bd 01 00 00 00       	mov    ebp,0x1
c000743c:	eb 59                	jmp    c0007497 <f_forward+0x1d4>
c000743e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007441:	e9 23 ff ff ff       	jmp    c0007369 <f_forward+0xa6>
c0007446:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000744a:	79 20                	jns    c000746c <f_forward+0x1a9>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	6a 01                	push   0x1
c0007451:	52                   	push   edx
c0007452:	50                   	push   eax
c0007453:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007457:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000745b:	50                   	push   eax
c000745c:	e8 c5 a6 ff ff       	call   c0001b26 <disk_write>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	85 c0                	test   eax,eax
c0007466:	75 cb                	jne    c0007433 <f_forward+0x170>
c0007468:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000746c:	83 ec 0c             	sub    esp,0xc
c000746f:	6a 01                	push   0x1
c0007471:	57                   	push   edi
c0007472:	56                   	push   esi
c0007473:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007477:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000747b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000747f:	50                   	push   eax
c0007480:	e8 8b a6 ff ff       	call   c0001b10 <disk_read>
c0007485:	83 c4 20             	add    esp,0x20
c0007488:	85 c0                	test   eax,eax
c000748a:	0f 84 1c ff ff ff    	je     c00073ac <f_forward+0xe9>
c0007490:	eb a1                	jmp    c0007433 <f_forward+0x170>
c0007492:	bd 07 00 00 00       	mov    ebp,0x7
c0007497:	83 c4 2c             	add    esp,0x2c
c000749a:	89 e8                	mov    eax,ebp
c000749c:	5b                   	pop    ebx
c000749d:	5e                   	pop    esi
c000749e:	5f                   	pop    edi
c000749f:	5d                   	pop    ebp
c00074a0:	c3                   	ret    

c00074a1 <f_mkfs>:
c00074a1:	55                   	push   ebp
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074aa:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074b0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074b7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074be:	e8 7a ac ff ff       	call   c000213d <get_ldnumber>
c00074c3:	85 c0                	test   eax,eax
c00074c5:	0f 88 ec 10 00 00    	js     c00085b7 <f_mkfs+0x1116>
c00074cb:	8b 14 85 40 7c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd83c0]
c00074d2:	85 d2                	test   edx,edx
c00074d4:	74 03                	je     c00074d9 <f_mkfs+0x38>
c00074d6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d9:	85 f6                	test   esi,esi
c00074db:	75 05                	jne    c00074e2 <f_mkfs+0x41>
c00074dd:	be a0 35 02 c0       	mov    esi,0xc00235a0
c00074e2:	83 ec 0c             	sub    esp,0xc
c00074e5:	0f b6 c0             	movzx  eax,al
c00074e8:	bb 03 00 00 00       	mov    ebx,0x3
c00074ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074f5:	e8 13 a6 ff ff       	call   c0001b0d <disk_initialize>
c00074fa:	83 c4 10             	add    esp,0x10
c00074fd:	a8 01                	test   al,0x1
c00074ff:	0f 85 b2 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007505:	bb 0a 00 00 00       	mov    ebx,0xa
c000750a:	a8 04                	test   al,0x4
c000750c:	0f 85 a5 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007512:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007515:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007519:	85 c0                	test   eax,eax
c000751b:	75 20                	jne    c000753d <f_mkfs+0x9c>
c000751d:	51                   	push   ecx
c000751e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007522:	50                   	push   eax
c0007523:	6a 03                	push   0x3
c0007525:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007529:	e8 0e a6 ff ff       	call   c0001b3c <disk_ioctl>
c000752e:	83 c4 10             	add    esp,0x10
c0007531:	85 c0                	test   eax,eax
c0007533:	74 08                	je     c000753d <f_mkfs+0x9c>
c0007535:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000753d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007541:	8d 42 ff             	lea    eax,[edx-0x1]
c0007544:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007549:	77 04                	ja     c000754f <f_mkfs+0xae>
c000754b:	85 c2                	test   edx,eax
c000754d:	74 08                	je     c0007557 <f_mkfs+0xb6>
c000754f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007557:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000755a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000755e:	48                   	dec    eax
c000755f:	3c 01                	cmp    al,0x1
c0007561:	76 05                	jbe    c0007568 <f_mkfs+0xc7>
c0007563:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000756b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000756f:	48                   	dec    eax
c0007570:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007575:	77 07                	ja     c000757e <f_mkfs+0xdd>
c0007577:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000757c:	74 08                	je     c0007586 <f_mkfs+0xe5>
c000757e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007586:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007589:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000758f:	77 07                	ja     c0007598 <f_mkfs+0xf7>
c0007591:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007594:	85 d8                	test   eax,ebx
c0007596:	74 02                	je     c000759a <f_mkfs+0xf9>
c0007598:	31 db                	xor    ebx,ebx
c000759a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075a5:	77 0a                	ja     c00075b1 <f_mkfs+0x110>
c00075a7:	bb 11 00 00 00       	mov    ebx,0x11
c00075ac:	e9 06 10 00 00       	jmp    c00085b7 <f_mkfs+0x1116>
c00075b1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ba:	85 ed                	test   ebp,ebp
c00075bc:	75 1e                	jne    c00075dc <f_mkfs+0x13b>
c00075be:	83 ec 0c             	sub    esp,0xc
c00075c1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075cd:	50                   	push   eax
c00075ce:	e8 f1 0f 00 00       	call   c00085c4 <ff_memalloc>
c00075d3:	83 c4 10             	add    esp,0x10
c00075d6:	89 c5                	mov    ebp,eax
c00075d8:	85 c0                	test   eax,eax
c00075da:	74 cb                	je     c00075a7 <f_mkfs+0x106>
c00075dc:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075e4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075ec:	52                   	push   edx
c00075ed:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075f1:	50                   	push   eax
c00075f2:	6a 01                	push   0x1
c00075f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f8:	e8 3f a5 ff ff       	call   c0001b3c <disk_ioctl>
c00075fd:	83 c4 10             	add    esp,0x10
c0007600:	85 c0                	test   eax,eax
c0007602:	0f 85 4a 0f 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007608:	89 f1                	mov    ecx,esi
c000760a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007612:	83 e1 0f             	and    ecx,0xf
c0007615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000761d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007621:	83 e6 08             	and    esi,0x8
c0007624:	75 56                	jne    c000767c <f_mkfs+0x1db>
c0007626:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000762a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000762e:	83 ff 00             	cmp    edi,0x0
c0007631:	76 20                	jbe    c0007653 <f_mkfs+0x1b2>
c0007633:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007638:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007640:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007646:	83 d7 ff             	adc    edi,0xffffffff
c0007649:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000764d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007651:	eb 21                	jmp    c0007674 <f_mkfs+0x1d3>
c0007653:	ba 3f 00 00 00       	mov    edx,0x3f
c0007658:	39 f2                	cmp    edx,esi
c000765a:	19 f8                	sbb    eax,edi
c000765c:	73 1e                	jae    c000767c <f_mkfs+0x1db>
c000765e:	83 c6 c1             	add    esi,0xffffffc1
c0007661:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007669:	83 d7 ff             	adc    edi,0xffffffff
c000766c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007670:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007674:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000767c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007680:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007684:	89 04 24             	mov    DWORD PTR [esp],eax
c0007687:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000768b:	31 c0                	xor    eax,eax
c000768d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007692:	89 c7                	mov    edi,eax
c0007694:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007697:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000769b:	0f 83 c5 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c00076a1:	89 df                	mov    edi,ebx
c00076a3:	c1 ef 09             	shr    edi,0x9
c00076a6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076aa:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076b1:	c1 ef 09             	shr    edi,0x9
c00076b4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076bd:	74 29                	je     c00076e8 <f_mkfs+0x247>
c00076bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076c5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076ca:	0f 97 c2             	seta   dl
c00076cd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076d0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076d4:	0f 92 c0             	setb   al
c00076d7:	08 c2                	or     dl,al
c00076d9:	75 5b                	jne    c0007736 <f_mkfs+0x295>
c00076db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076df:	83 e0 07             	and    eax,0x7
c00076e2:	3c 04                	cmp    al,0x4
c00076e4:	74 50                	je     c0007736 <f_mkfs+0x295>
c00076e6:	eb 1b                	jmp    c0007703 <f_mkfs+0x262>
c00076e8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076ed:	0f 87 73 0a 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00076f3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f9:	76 08                	jbe    c0007703 <f_mkfs+0x262>
c00076fb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007703:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007707:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000770b:	83 e0 01             	and    eax,0x1
c000770e:	80 e1 02             	and    cl,0x2
c0007711:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007715:	74 0d                	je     c0007724 <f_mkfs+0x283>
c0007717:	84 c0                	test   al,al
c0007719:	0f 84 53 09 00 00    	je     c0008072 <f_mkfs+0xbd1>
c000771f:	e9 12 08 00 00       	jmp    c0007f36 <f_mkfs+0xa95>
c0007724:	bb 13 00 00 00       	mov    ebx,0x13
c0007729:	84 c0                	test   al,al
c000772b:	0f 85 05 08 00 00    	jne    c0007f36 <f_mkfs+0xa95>
c0007731:	e9 39 0e 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0007736:	31 c0                	xor    eax,eax
c0007738:	ba ff 0f 00 00       	mov    edx,0xfff
c000773d:	89 c7                	mov    edi,eax
c000773f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007742:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007746:	0f 83 1a 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c000774c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007752:	77 39                	ja     c000778d <f_mkfs+0x2ec>
c0007754:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007759:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007761:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007764:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007768:	73 08                	jae    c0007772 <f_mkfs+0x2d1>
c000776a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007772:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007777:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000777a:	b8 00 00 00 00       	mov    eax,0x0
c000777f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007783:	73 08                	jae    c000778d <f_mkfs+0x2ec>
c0007785:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000778d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007795:	83 c0 20             	add    eax,0x20
c0007798:	83 d2 00             	adc    edx,0x0
c000779b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000779f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a7:	31 d2                	xor    edx,edx
c00077a9:	31 ff                	xor    edi,edi
c00077ab:	52                   	push   edx
c00077ac:	89 fb                	mov    ebx,edi
c00077ae:	50                   	push   eax
c00077af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b7:	e8 c8 ad 01 00       	call   c0022584 <__udivdi3>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	c1 e0 02             	shl    eax,0x2
c00077c2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077c6:	05 07 02 00 00       	add    eax,0x207
c00077cb:	89 f1                	mov    ecx,esi
c00077cd:	c1 e8 09             	shr    eax,0x9
c00077d0:	83 c1 ff             	add    ecx,0xffffffff
c00077d3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077d7:	83 d3 ff             	adc    ebx,0xffffffff
c00077da:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077de:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077e2:	31 d2                	xor    edx,edx
c00077e4:	01 c8                	add    eax,ecx
c00077e6:	11 da                	adc    edx,ebx
c00077e8:	89 c1                	mov    ecx,eax
c00077ea:	f7 de                	neg    esi
c00077ec:	89 d0                	mov    eax,edx
c00077ee:	83 d7 00             	adc    edi,0x0
c00077f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077f5:	f7 df                	neg    edi
c00077f7:	21 f1                	and    ecx,esi
c00077f9:	21 f8                	and    eax,edi
c00077fb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007803:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007807:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000780b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000780f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007812:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007816:	0f ac d0 01          	shrd   eax,edx,0x1
c000781a:	89 df                	mov    edi,ebx
c000781c:	d1 ea                	shr    edx,1
c000781e:	39 c1                	cmp    ecx,eax
c0007820:	19 d7                	sbb    edi,edx
c0007822:	0f 83 3e 09 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c0007828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000782c:	31 d2                	xor    edx,edx
c000782e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007836:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000783a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000783d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007841:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007845:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007849:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000784d:	83 f8 0f             	cmp    eax,0xf
c0007850:	0f 86 10 09 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c0007856:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000785e:	0f 87 02 09 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c0007864:	31 d2                	xor    edx,edx
c0007866:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000786a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007872:	83 c0 07             	add    eax,0x7
c0007875:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000787d:	c1 e8 03             	shr    eax,0x3
c0007880:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007887:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000788b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000788f:	c1 e0 09             	shl    eax,0x9
c0007892:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007896:	48                   	dec    eax
c0007897:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000789b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000789f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078a3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078a7:	31 d2                	xor    edx,edx
c00078a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078ad:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078bd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078c1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078c5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078cd:	31 ff                	xor    edi,edi
c00078cf:	31 f6                	xor    esi,esi
c00078d1:	31 db                	xor    ebx,ebx
c00078d3:	85 ff                	test   edi,edi
c00078d5:	74 05                	je     c00078dc <f_mkfs+0x43b>
c00078d7:	4f                   	dec    edi
c00078d8:	74 44                	je     c000791e <f_mkfs+0x47d>
c00078da:	eb 4f                	jmp    c000792b <f_mkfs+0x48a>
c00078dc:	83 ec 0c             	sub    esp,0xc
c00078df:	0f b7 c3             	movzx  eax,bx
c00078e2:	50                   	push   eax
c00078e3:	e8 18 0e 00 00       	call   c0008700 <ff_wtoupper>
c00078e8:	83 c4 10             	add    esp,0x10
c00078eb:	89 c1                	mov    ecx,eax
c00078ed:	8d 53 01             	lea    edx,[ebx+0x1]
c00078f0:	66 39 c3             	cmp    bx,ax
c00078f3:	75 3e                	jne    c0007933 <f_mkfs+0x492>
c00078f5:	be 01 00 00 00       	mov    esi,0x1
c00078fa:	89 df                	mov    edi,ebx
c00078fc:	66 01 f7             	add    di,si
c00078ff:	75 07                	jne    c0007908 <f_mkfs+0x467>
c0007901:	83 fe 7f             	cmp    esi,0x7f
c0007904:	77 31                	ja     c0007937 <f_mkfs+0x496>
c0007906:	eb 16                	jmp    c000791e <f_mkfs+0x47d>
c0007908:	83 ec 0c             	sub    esp,0xc
c000790b:	0f b7 ff             	movzx  edi,di
c000790e:	57                   	push   edi
c000790f:	e8 ec 0d 00 00       	call   c0008700 <ff_wtoupper>
c0007914:	83 c4 10             	add    esp,0x10
c0007917:	39 c7                	cmp    edi,eax
c0007919:	75 e6                	jne    c0007901 <f_mkfs+0x460>
c000791b:	46                   	inc    esi
c000791c:	eb dc                	jmp    c00078fa <f_mkfs+0x459>
c000791e:	31 c0                	xor    eax,eax
c0007920:	89 d9                	mov    ecx,ebx
c0007922:	4e                   	dec    esi
c0007923:	0f 95 c0             	setne  al
c0007926:	43                   	inc    ebx
c0007927:	89 c7                	mov    edi,eax
c0007929:	eb 14                	jmp    c000793f <f_mkfs+0x49e>
c000792b:	89 f1                	mov    ecx,esi
c000792d:	01 f3                	add    ebx,esi
c000792f:	31 ff                	xor    edi,edi
c0007931:	eb 0c                	jmp    c000793f <f_mkfs+0x49e>
c0007933:	89 d3                	mov    ebx,edx
c0007935:	eb 08                	jmp    c000793f <f_mkfs+0x49e>
c0007937:	bf 02 00 00 00       	mov    edi,0x2
c000793c:	83 c9 ff             	or     ecx,0xffffffff
c000793f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007943:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007946:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000794a:	0f b6 c1             	movzx  eax,cl
c000794d:	e8 04 a7 ff ff       	call   c0002056 <xsum32>
c0007952:	66 c1 e9 08          	shr    cx,0x8
c0007956:	89 c2                	mov    edx,eax
c0007958:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000795b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000795f:	0f b7 c1             	movzx  eax,cx
c0007962:	e8 ef a6 ff ff       	call   c0002056 <xsum32>
c0007967:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000796c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007970:	66 85 db             	test   bx,bx
c0007973:	74 1f                	je     c0007994 <f_mkfs+0x4f3>
c0007975:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007978:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000797f:	83 c0 02             	add    eax,0x2
c0007982:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007988:	39 c2                	cmp    edx,eax
c000798a:	74 08                	je     c0007994 <f_mkfs+0x4f3>
c000798c:	89 04 24             	mov    DWORD PTR [esp],eax
c000798f:	e9 3f ff ff ff       	jmp    c00078d3 <f_mkfs+0x432>
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	83 ec 0c             	sub    esp,0xc
c000799a:	05 01 02 00 00       	add    eax,0x201
c000799f:	c1 e8 09             	shr    eax,0x9
c00079a2:	50                   	push   eax
c00079a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079af:	55                   	push   ebp
c00079b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b4:	e8 6d a1 ff ff       	call   c0001b26 <disk_write>
c00079b9:	83 c4 20             	add    esp,0x20
c00079bc:	85 c0                	test   eax,eax
c00079be:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079c1:	0f 85 8b 0b 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00079c7:	89 d0                	mov    eax,edx
c00079c9:	31 d2                	xor    edx,edx
c00079cb:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079cf:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079d3:	66 85 db             	test   bx,bx
c00079d6:	74 04                	je     c00079dc <f_mkfs+0x53b>
c00079d8:	31 c0                	xor    eax,eax
c00079da:	eb b0                	jmp    c000798c <f_mkfs+0x4eb>
c00079dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079e0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079e4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079ee:	31 d2                	xor    edx,edx
c00079f0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079fb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079ff:	c1 eb 09             	shr    ebx,0x9
c0007a02:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a0d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a15:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a19:	8d 70 01             	lea    esi,[eax+0x1]
c0007a1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a24:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a2b:	31 d2                	xor    edx,edx
c0007a2d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a32:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a35:	89 c1                	mov    ecx,eax
c0007a37:	89 e8                	mov    eax,ebp
c0007a39:	e8 b1 a1 ff ff       	call   c0001bef <mem_set>
c0007a3e:	31 c0                	xor    eax,eax
c0007a40:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a43:	76 10                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a45:	83 fe 07             	cmp    esi,0x7
c0007a48:	76 0b                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a4a:	40                   	inc    eax
c0007a4b:	83 ee 08             	sub    esi,0x8
c0007a4e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a53:	eb eb                	jmp    c0007a40 <f_mkfs+0x59f>
c0007a55:	b2 01                	mov    dl,0x1
c0007a57:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a5b:	85 f6                	test   esi,esi
c0007a5d:	74 0c                	je     c0007a6b <f_mkfs+0x5ca>
c0007a5f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a62:	76 07                	jbe    c0007a6b <f_mkfs+0x5ca>
c0007a64:	08 11                	or     BYTE PTR [ecx],dl
c0007a66:	4e                   	dec    esi
c0007a67:	d1 e2                	shl    edx,1
c0007a69:	eb f0                	jmp    c0007a5b <f_mkfs+0x5ba>
c0007a6b:	89 df                	mov    edi,ebx
c0007a6d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a71:	76 04                	jbe    c0007a77 <f_mkfs+0x5d6>
c0007a73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a77:	83 ec 0c             	sub    esp,0xc
c0007a7a:	57                   	push   edi
c0007a7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a83:	55                   	push   ebp
c0007a84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a88:	e8 99 a0 ff ff       	call   c0001b26 <disk_write>
c0007a8d:	83 c4 20             	add    esp,0x20
c0007a90:	85 c0                	test   eax,eax
c0007a92:	0f 85 ba 0a 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a9e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007aa2:	29 fb                	sub    ebx,edi
c0007aa4:	0f 85 7a ff ff ff    	jne    c0007a24 <f_mkfs+0x583>
c0007aaa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aae:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ab6:	31 f6                	xor    esi,esi
c0007ab8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007abc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007abf:	31 d2                	xor    edx,edx
c0007ac1:	89 e8                	mov    eax,ebp
c0007ac3:	e8 27 a1 ff ff       	call   c0001bef <mem_set>
c0007ac8:	31 c9                	xor    ecx,ecx
c0007aca:	85 db                	test   ebx,ebx
c0007acc:	75 40                	jne    c0007b0e <f_mkfs+0x66d>
c0007ace:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ad3:	89 e8                	mov    eax,ebp
c0007ad5:	bb 02 00 00 00       	mov    ebx,0x2
c0007ada:	e8 f2 a0 ff ff       	call   c0001bd1 <st_dword>
c0007adf:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ae2:	83 ca ff             	or     edx,0xffffffff
c0007ae5:	e8 e7 a0 ff ff       	call   c0001bd1 <st_dword>
c0007aea:	b9 08 00 00 00       	mov    ecx,0x8
c0007aef:	eb 1d                	jmp    c0007b0e <f_mkfs+0x66d>
c0007af1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007af4:	76 3b                	jbe    c0007b31 <f_mkfs+0x690>
c0007af6:	43                   	inc    ebx
c0007af7:	83 fe 01             	cmp    esi,0x1
c0007afa:	89 da                	mov    edx,ebx
c0007afc:	77 03                	ja     c0007b01 <f_mkfs+0x660>
c0007afe:	83 ca ff             	or     edx,0xffffffff
c0007b01:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b05:	4e                   	dec    esi
c0007b06:	e8 c6 a0 ff ff       	call   c0001bd1 <st_dword>
c0007b0b:	83 c1 04             	add    ecx,0x4
c0007b0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b12:	85 f6                	test   esi,esi
c0007b14:	75 db                	jne    c0007af1 <f_mkfs+0x650>
c0007b16:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b1b:	77 14                	ja     c0007b31 <f_mkfs+0x690>
c0007b1d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b21:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b28:	85 f6                	test   esi,esi
c0007b2a:	74 05                	je     c0007b31 <f_mkfs+0x690>
c0007b2c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b2f:	77 dd                	ja     c0007b0e <f_mkfs+0x66d>
c0007b31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b35:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b39:	39 cf                	cmp    edi,ecx
c0007b3b:	76 02                	jbe    c0007b3f <f_mkfs+0x69e>
c0007b3d:	89 cf                	mov    edi,ecx
c0007b3f:	83 ec 0c             	sub    esp,0xc
c0007b42:	57                   	push   edi
c0007b43:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b47:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b4b:	55                   	push   ebp
c0007b4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b50:	e8 d1 9f ff ff       	call   c0001b26 <disk_write>
c0007b55:	83 c4 20             	add    esp,0x20
c0007b58:	85 c0                	test   eax,eax
c0007b5a:	0f 85 f2 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b66:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b6a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b6e:	0f 85 48 ff ff ff    	jne    c0007abc <f_mkfs+0x61b>
c0007b74:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b77:	31 d2                	xor    edx,edx
c0007b79:	89 e8                	mov    eax,ebp
c0007b7b:	31 ff                	xor    edi,edi
c0007b7d:	e8 6d a0 ff ff       	call   c0001bef <mem_set>
c0007b82:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b85:	ba 02 00 00 00       	mov    edx,0x2
c0007b8a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b8e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b92:	e8 3a a0 ff ff       	call   c0001bd1 <st_dword>
c0007b97:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b9a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b9e:	e8 2e a0 ff ff       	call   c0001bd1 <st_dword>
c0007ba3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ba6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007baa:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bae:	e8 1e a0 ff ff       	call   c0001bd1 <st_dword>
c0007bb3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bb6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bbe:	83 c2 02             	add    edx,0x2
c0007bc1:	e8 0b a0 ff ff       	call   c0001bd1 <st_dword>
c0007bc6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bd1:	e8 fb 9f ff ff       	call   c0001bd1 <st_dword>
c0007bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bda:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bdf:	89 c6                	mov    esi,eax
c0007be1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bec:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007bf0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007bf3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bf7:	39 cb                	cmp    ebx,ecx
c0007bf9:	76 02                	jbe    c0007bfd <f_mkfs+0x75c>
c0007bfb:	89 cb                	mov    ebx,ecx
c0007bfd:	83 ec 0c             	sub    esp,0xc
c0007c00:	53                   	push   ebx
c0007c01:	57                   	push   edi
c0007c02:	56                   	push   esi
c0007c03:	55                   	push   ebp
c0007c04:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c08:	e8 19 9f ff ff       	call   c0001b26 <disk_write>
c0007c0d:	83 c4 20             	add    esp,0x20
c0007c10:	85 c0                	test   eax,eax
c0007c12:	0f 85 3a 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007c18:	31 d2                	xor    edx,edx
c0007c1a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c1f:	89 e8                	mov    eax,ebp
c0007c21:	e8 c9 9f ff ff       	call   c0001bef <mem_set>
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	01 de                	add    esi,ebx
c0007c2a:	11 d7                	adc    edi,edx
c0007c2c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c2f:	75 bf                	jne    c0007bf0 <f_mkfs+0x74f>
c0007c31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c39:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c41:	b9 00 02 00 00       	mov    ecx,0x200
c0007c46:	31 d2                	xor    edx,edx
c0007c48:	89 e8                	mov    eax,ebp
c0007c4a:	e8 a0 9f ff ff       	call   c0001bef <mem_set>
c0007c4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c54:	ba 80 36 02 c0       	mov    edx,0xc0023680
c0007c59:	89 e8                	mov    eax,ebp
c0007c5b:	e8 7a 9f ff ff       	call   c0001bda <mem_cpy>
c0007c60:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c67:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c6b:	e8 64 9f ff ff       	call   c0001bd4 <st_qword>
c0007c70:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c74:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c77:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c7b:	e8 54 9f ff ff       	call   c0001bd4 <st_qword>
c0007c80:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c83:	ba 20 00 00 00       	mov    edx,0x20
c0007c88:	e8 44 9f ff ff       	call   c0001bd1 <st_dword>
c0007c8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c95:	e8 37 9f ff ff       	call   c0001bd1 <st_dword>
c0007c9a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ca2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007ca6:	e8 26 9f ff ff       	call   c0001bd1 <st_dword>
c0007cab:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cb2:	e8 1a 9f ff ff       	call   c0001bd1 <st_dword>
c0007cb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cbb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cbe:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cc1:	e8 0b 9f ff ff       	call   c0001bd1 <st_dword>
c0007cc6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cce:	e8 fe 9e ff ff       	call   c0001bd1 <st_dword>
c0007cd3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cd6:	ba 00 01 00 00       	mov    edx,0x100
c0007cdb:	e8 ed 9e ff ff       	call   c0001bcd <st_word>
c0007ce0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007ce4:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce9:	48                   	dec    eax
c0007cea:	74 05                	je     c0007cf1 <f_mkfs+0x850>
c0007cec:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cef:	eb f8                	jmp    c0007ce9 <f_mkfs+0x848>
c0007cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cf5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cfd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d01:	74 05                	je     c0007d08 <f_mkfs+0x867>
c0007d03:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d06:	eb f5                	jmp    c0007cfd <f_mkfs+0x85c>
c0007d08:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d0b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d10:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d16:	31 db                	xor    ebx,ebx
c0007d18:	e8 b0 9e ff ff       	call   c0001bcd <st_word>
c0007d1d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d23:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d28:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d2b:	e8 9d 9e ff ff       	call   c0001bcd <st_word>
c0007d30:	31 c9                	xor    ecx,ecx
c0007d32:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d35:	83 f8 01             	cmp    eax,0x1
c0007d38:	76 13                	jbe    c0007d4d <f_mkfs+0x8ac>
c0007d3a:	83 f9 70             	cmp    ecx,0x70
c0007d3d:	74 0e                	je     c0007d4d <f_mkfs+0x8ac>
c0007d3f:	89 da                	mov    edx,ebx
c0007d41:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d46:	e8 0b a3 ff ff       	call   c0002056 <xsum32>
c0007d4b:	89 c3                	mov    ebx,eax
c0007d4d:	41                   	inc    ecx
c0007d4e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d54:	75 dc                	jne    c0007d32 <f_mkfs+0x891>
c0007d56:	89 f0                	mov    eax,esi
c0007d58:	89 fa                	mov    edx,edi
c0007d5a:	83 c0 01             	add    eax,0x1
c0007d5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d61:	83 d2 00             	adc    edx,0x0
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d6b:	6a 01                	push   0x1
c0007d6d:	57                   	push   edi
c0007d6e:	56                   	push   esi
c0007d6f:	55                   	push   ebp
c0007d70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d74:	e8 ad 9d ff ff       	call   c0001b26 <disk_write>
c0007d79:	83 c4 20             	add    esp,0x20
c0007d7c:	85 c0                	test   eax,eax
c0007d7e:	0f 85 ce 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007d84:	31 d2                	xor    edx,edx
c0007d86:	b9 00 02 00 00       	mov    ecx,0x200
c0007d8b:	89 e8                	mov    eax,ebp
c0007d8d:	e8 5d 9e ff ff       	call   c0001bef <mem_set>
c0007d92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d9a:	e8 2e 9e ff ff       	call   c0001bcd <st_word>
c0007d9f:	89 f0                	mov    eax,esi
c0007da1:	89 fa                	mov    edx,edi
c0007da3:	83 c0 09             	add    eax,0x9
c0007da6:	83 d2 00             	adc    edx,0x0
c0007da9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007db0:	31 c9                	xor    ecx,ecx
c0007db2:	41                   	inc    ecx
c0007db3:	89 da                	mov    edx,ebx
c0007db5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dba:	e8 97 a2 ff ff       	call   c0002056 <xsum32>
c0007dbf:	89 c3                	mov    ebx,eax
c0007dc1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dc7:	75 e9                	jne    c0007db2 <f_mkfs+0x911>
c0007dc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dcd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dd1:	83 c0 01             	add    eax,0x1
c0007dd4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd8:	83 d2 00             	adc    edx,0x0
c0007ddb:	83 ec 0c             	sub    esp,0xc
c0007dde:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007de2:	6a 01                	push   0x1
c0007de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dec:	55                   	push   ebp
c0007ded:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df1:	e8 30 9d ff ff       	call   c0001b26 <disk_write>
c0007df6:	83 c4 20             	add    esp,0x20
c0007df9:	85 c0                	test   eax,eax
c0007dfb:	0f 85 51 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e05:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e09:	75 09                	jne    c0007e14 <f_mkfs+0x973>
c0007e0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e0e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e12:	74 12                	je     c0007e26 <f_mkfs+0x985>
c0007e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e18:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e24:	eb 8a                	jmp    c0007db0 <f_mkfs+0x90f>
c0007e26:	31 d2                	xor    edx,edx
c0007e28:	b9 00 02 00 00       	mov    ecx,0x200
c0007e2d:	89 e8                	mov    eax,ebp
c0007e2f:	e8 bb 9d ff ff       	call   c0001bef <mem_set>
c0007e34:	83 c6 0b             	add    esi,0xb
c0007e37:	83 d7 00             	adc    edi,0x0
c0007e3a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e3e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e42:	31 c9                	xor    ecx,ecx
c0007e44:	41                   	inc    ecx
c0007e45:	89 da                	mov    edx,ebx
c0007e47:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e4c:	e8 05 a2 ff ff       	call   c0002056 <xsum32>
c0007e51:	89 c3                	mov    ebx,eax
c0007e53:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e59:	75 e9                	jne    c0007e44 <f_mkfs+0x9a3>
c0007e5b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e5e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e62:	83 c6 01             	add    esi,0x1
c0007e65:	83 d7 00             	adc    edi,0x0
c0007e68:	83 ec 0c             	sub    esp,0xc
c0007e6b:	6a 01                	push   0x1
c0007e6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e75:	55                   	push   ebp
c0007e76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e7a:	e8 a7 9c ff ff       	call   c0001b26 <disk_write>
c0007e7f:	83 c4 20             	add    esp,0x20
c0007e82:	85 c0                	test   eax,eax
c0007e84:	0f 85 c8 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e8a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e8e:	75 06                	jne    c0007e96 <f_mkfs+0x9f5>
c0007e90:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e94:	74 09                	je     c0007e9f <f_mkfs+0x9fe>
c0007e96:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e99:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e9d:	eb a3                	jmp    c0007e42 <f_mkfs+0x9a1>
c0007e9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007ea3:	89 da                	mov    edx,ebx
c0007ea5:	01 e8                	add    eax,ebp
c0007ea7:	e8 25 9d ff ff       	call   c0001bd1 <st_dword>
c0007eac:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007eb1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb9:	75 e4                	jne    c0007e9f <f_mkfs+0x9fe>
c0007ebb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ebe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ec2:	83 c6 02             	add    esi,0x2
c0007ec5:	83 d7 00             	adc    edi,0x0
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	6a 01                	push   0x1
c0007ecd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed5:	55                   	push   ebp
c0007ed6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eda:	e8 47 9c ff ff       	call   c0001b26 <disk_write>
c0007edf:	83 c4 20             	add    esp,0x20
c0007ee2:	85 c0                	test   eax,eax
c0007ee4:	0f 85 68 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007eea:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eef:	74 0d                	je     c0007efe <f_mkfs+0xa5d>
c0007ef1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef9:	e9 43 fd ff ff       	jmp    c0007c41 <f_mkfs+0x7a0>
c0007efe:	b1 07                	mov    cl,0x7
c0007f00:	e9 e3 05 00 00       	jmp    c00084e8 <f_mkfs+0x1047>
c0007f05:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f0a:	0f 85 4f 02 00 00    	jne    c000815f <f_mkfs+0xcbe>
c0007f10:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f15:	0f 86 22 02 00 00    	jbe    c000813d <f_mkfs+0xc9c>
c0007f1b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f20:	0f 85 81 06 00 00    	jne    c00085a7 <f_mkfs+0x1106>
c0007f26:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f2d:	83 f8 40             	cmp    eax,0x40
c0007f30:	0f 87 51 06 00 00    	ja     c0008587 <f_mkfs+0x10e6>
c0007f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f3a:	85 ff                	test   edi,edi
c0007f3c:	75 1c                	jne    c0007f5a <f_mkfs+0xab9>
c0007f3e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f41:	ba 80 35 02 c0       	mov    edx,0xc0023580
c0007f46:	c1 e9 0c             	shr    ecx,0xc
c0007f49:	bf 01 00 00 00       	mov    edi,0x1
c0007f4e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f51:	66 85 c0             	test   ax,ax
c0007f54:	0f 85 95 01 00 00    	jne    c00080ef <f_mkfs+0xc4e>
c0007f5a:	31 d2                	xor    edx,edx
c0007f5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f5f:	f7 f7                	div    edi
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	0f 86 95 01 00 00    	jbe    c0008101 <f_mkfs+0xc60>
c0007f6c:	83 c0 02             	add    eax,0x2
c0007f6f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f74:	01 c0                	add    eax,eax
c0007f76:	05 ff 01 00 00       	add    eax,0x1ff
c0007f7b:	be 01 00 00 00       	mov    esi,0x1
c0007f80:	c1 e8 09             	shr    eax,0x9
c0007f83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f8b:	c1 e0 05             	shl    eax,0x5
c0007f8e:	c1 e8 09             	shr    eax,0x9
c0007f91:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f95:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f9a:	31 d2                	xor    edx,edx
c0007f9c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fa0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fa4:	89 f0                	mov    eax,esi
c0007fa6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007faa:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fba:	31 d2                	xor    edx,edx
c0007fbc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fc1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fc5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc9:	31 db                	xor    ebx,ebx
c0007fcb:	01 c8                	add    eax,ecx
c0007fcd:	11 da                	adc    edx,ebx
c0007fcf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fd3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fd7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fdb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fdf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fe3:	f7 da                	neg    edx
c0007fe5:	21 d1                	and    ecx,edx
c0007fe7:	29 d9                	sub    ecx,ebx
c0007fe9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fee:	0f 85 20 01 00 00    	jne    c0008114 <f_mkfs+0xc73>
c0007ff4:	31 db                	xor    ebx,ebx
c0007ff6:	01 ce                	add    esi,ecx
c0007ff8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ffc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008000:	31 d2                	xor    edx,edx
c0008002:	89 f8                	mov    eax,edi
c0008004:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008008:	c1 e0 04             	shl    eax,0x4
c000800b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000800f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008013:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008017:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000801b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000801e:	19 d3                	sbb    ebx,edx
c0008020:	0f 82 40 01 00 00    	jb     c0008166 <f_mkfs+0xcc5>
c0008026:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008029:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000802d:	89 c8                	mov    eax,ecx
c000802f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008034:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008038:	29 f0                	sub    eax,esi
c000803a:	29 d0                	sub    eax,edx
c000803c:	31 d2                	xor    edx,edx
c000803e:	f7 f7                	div    edi
c0008040:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008045:	89 c3                	mov    ebx,eax
c0008047:	0f 85 b8 fe ff ff    	jne    c0007f05 <f_mkfs+0xa64>
c000804d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008052:	0f 87 1d 01 00 00    	ja     c0008175 <f_mkfs+0xcd4>
c0008058:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000805d:	0f 85 03 01 00 00    	jne    c0008166 <f_mkfs+0xcc5>
c0008063:	83 ff 01             	cmp    edi,0x1
c0008066:	0f 86 fa 00 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c000806c:	d1 ef                	shr    edi,1
c000806e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008072:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008076:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008079:	85 db                	test   ebx,ebx
c000807b:	75 2d                	jne    c00080aa <f_mkfs+0xc09>
c000807d:	89 cb                	mov    ebx,ecx
c000807f:	ba 90 35 02 c0       	mov    edx,0xc0023590
c0008084:	c1 eb 11             	shr    ebx,0x11
c0008087:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000808f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0008092:	66 85 c0             	test   ax,ax
c0008095:	74 11                	je     c00080a8 <f_mkfs+0xc07>
c0008097:	83 c2 02             	add    edx,0x2
c000809a:	39 d8                	cmp    eax,ebx
c000809c:	77 0a                	ja     c00080a8 <f_mkfs+0xc07>
c000809e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080a2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080a6:	eb e7                	jmp    c000808f <f_mkfs+0xbee>
c00080a8:	31 db                	xor    ebx,ebx
c00080aa:	31 d2                	xor    edx,edx
c00080ac:	89 c8                	mov    eax,ecx
c00080ae:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080b2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080be:	c1 ea 09             	shr    edx,0x9
c00080c1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080c6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080ca:	0f 87 96 00 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00080d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080d4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080dc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080e0:	be 20 00 00 00       	mov    esi,0x20
c00080e5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080ea:	e9 a6 fe ff ff       	jmp    c0007f95 <f_mkfs+0xaf4>
c00080ef:	83 c2 02             	add    edx,0x2
c00080f2:	39 c8                	cmp    eax,ecx
c00080f4:	0f 87 60 fe ff ff    	ja     c0007f5a <f_mkfs+0xab9>
c00080fa:	01 ff                	add    edi,edi
c00080fc:	e9 4d fe ff ff       	jmp    c0007f4e <f_mkfs+0xaad>
c0008101:	8d 04 40             	lea    eax,[eax+eax*2]
c0008104:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008109:	40                   	inc    eax
c000810a:	d1 e8                	shr    eax,1
c000810c:	83 c0 03             	add    eax,0x3
c000810f:	e9 62 fe ff ff       	jmp    c0007f76 <f_mkfs+0xad5>
c0008114:	31 d2                	xor    edx,edx
c0008116:	89 c8                	mov    eax,ecx
c0008118:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000811c:	85 d2                	test   edx,edx
c000811e:	74 0c                	je     c000812c <f_mkfs+0xc8b>
c0008120:	49                   	dec    ecx
c0008121:	46                   	inc    esi
c0008122:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008127:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000812c:	89 c8                	mov    eax,ecx
c000812e:	31 d2                	xor    edx,edx
c0008130:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008134:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008138:	e9 c3 fe ff ff       	jmp    c0008000 <f_mkfs+0xb5f>
c000813d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008142:	77 31                	ja     c0008175 <f_mkfs+0xcd4>
c0008144:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008149:	75 1b                	jne    c0008166 <f_mkfs+0xcc5>
c000814b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000814e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008152:	3d 80 00 00 00       	cmp    eax,0x80
c0008157:	0f 86 d9 fd ff ff    	jbe    c0007f36 <f_mkfs+0xa95>
c000815d:	eb 07                	jmp    c0008166 <f_mkfs+0xcc5>
c000815f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008164:	76 0a                	jbe    c0008170 <f_mkfs+0xccf>
c0008166:	bb 0e 00 00 00       	mov    ebx,0xe
c000816b:	e9 ff 03 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0008170:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008175:	31 d2                	xor    edx,edx
c0008177:	b9 00 02 00 00       	mov    ecx,0x200
c000817c:	89 e8                	mov    eax,ebp
c000817e:	e8 6c 9a ff ff       	call   c0001bef <mem_set>
c0008183:	b9 0b 00 00 00       	mov    ecx,0xb
c0008188:	ba a2 36 02 c0       	mov    edx,0xc00236a2
c000818d:	89 e8                	mov    eax,ebp
c000818f:	e8 46 9a ff ff       	call   c0001bda <mem_cpy>
c0008194:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008197:	ba 00 02 00 00       	mov    edx,0x200
c000819c:	e8 2c 9a ff ff       	call   c0001bcd <st_word>
c00081a1:	89 f8                	mov    eax,edi
c00081a3:	0f b7 d6             	movzx  edx,si
c00081a6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081ac:	e8 1c 9a ff ff       	call   c0001bcd <st_word>
c00081b1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ba:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081bd:	75 08                	jne    c00081c7 <f_mkfs+0xd26>
c00081bf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081c7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081ce:	e8 fa 99 ff ff       	call   c0001bcd <st_word>
c00081d3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081dc:	39 d0                	cmp    eax,edx
c00081de:	b8 00 00 00 00       	mov    eax,0x0
c00081e3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081e7:	72 0a                	jb     c00081f3 <f_mkfs+0xd52>
c00081e9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081ec:	e8 dc 99 ff ff       	call   c0001bcd <st_word>
c00081f1:	eb 08                	jmp    c00081fb <f_mkfs+0xd5a>
c00081f3:	8d 45 20             	lea    eax,[ebp+0x20]
c00081f6:	e8 d6 99 ff ff       	call   c0001bd1 <st_dword>
c00081fb:	8d 45 18             	lea    eax,[ebp+0x18]
c00081fe:	ba 3f 00 00 00       	mov    edx,0x3f
c0008203:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008207:	e8 c1 99 ff ff       	call   c0001bcd <st_word>
c000820c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000820f:	ba ff 00 00 00       	mov    edx,0xff
c0008214:	e8 b4 99 ff ff       	call   c0001bcd <st_word>
c0008219:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000821c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008220:	e8 ac 99 ff ff       	call   c0001bd1 <st_dword>
c0008225:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000822a:	75 57                	jne    c0008283 <f_mkfs+0xde2>
c000822c:	8d 45 43             	lea    eax,[ebp+0x43]
c000822f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008234:	e8 98 99 ff ff       	call   c0001bd1 <st_dword>
c0008239:	8d 45 24             	lea    eax,[ebp+0x24]
c000823c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008240:	e8 8c 99 ff ff       	call   c0001bd1 <st_dword>
c0008245:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008248:	ba 02 00 00 00       	mov    edx,0x2
c000824d:	e8 7f 99 ff ff       	call   c0001bd1 <st_dword>
c0008252:	8d 45 30             	lea    eax,[ebp+0x30]
c0008255:	ba 01 00 00 00       	mov    edx,0x1
c000825a:	e8 6e 99 ff ff       	call   c0001bcd <st_word>
c000825f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008262:	ba 06 00 00 00       	mov    edx,0x6
c0008267:	e8 61 99 ff ff       	call   c0001bcd <st_word>
c000826c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008270:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008274:	8d 45 47             	lea    eax,[ebp+0x47]
c0008277:	b9 13 00 00 00       	mov    ecx,0x13
c000827c:	ba ae 36 02 c0       	mov    edx,0xc00236ae
c0008281:	eb 2f                	jmp    c00082b2 <f_mkfs+0xe11>
c0008283:	8d 45 27             	lea    eax,[ebp+0x27]
c0008286:	ba 00 00 21 50       	mov    edx,0x50210000
c000828b:	e8 41 99 ff ff       	call   c0001bd1 <st_dword>
c0008290:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008295:	8d 45 16             	lea    eax,[ebp+0x16]
c0008298:	e8 30 99 ff ff       	call   c0001bcd <st_word>
c000829d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082a1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082a5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a8:	b9 13 00 00 00       	mov    ecx,0x13
c00082ad:	ba c2 36 02 c0       	mov    edx,0xc00236c2
c00082b2:	e8 23 99 ff ff       	call   c0001bda <mem_cpy>
c00082b7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082bd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082c2:	89 f0                	mov    eax,esi
c00082c4:	e8 04 99 ff ff       	call   c0001bcd <st_word>
c00082c9:	83 ec 0c             	sub    esp,0xc
c00082cc:	6a 01                	push   0x1
c00082ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d6:	55                   	push   ebp
c00082d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082db:	e8 46 98 ff ff       	call   c0001b26 <disk_write>
c00082e0:	83 c4 20             	add    esp,0x20
c00082e3:	85 c0                	test   eax,eax
c00082e5:	0f 85 67 02 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00082eb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f0:	0f 85 b7 00 00 00    	jne    c00083ad <f_mkfs+0xf0c>
c00082f6:	83 ec 0c             	sub    esp,0xc
c00082f9:	6a 01                	push   0x1
c00082fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008303:	83 c0 06             	add    eax,0x6
c0008306:	83 d2 00             	adc    edx,0x0
c0008309:	52                   	push   edx
c000830a:	50                   	push   eax
c000830b:	55                   	push   ebp
c000830c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008310:	e8 11 98 ff ff       	call   c0001b26 <disk_write>
c0008315:	83 c4 20             	add    esp,0x20
c0008318:	b9 00 02 00 00       	mov    ecx,0x200
c000831d:	31 d2                	xor    edx,edx
c000831f:	89 e8                	mov    eax,ebp
c0008321:	e8 c9 98 ff ff       	call   c0001bef <mem_set>
c0008326:	ba 52 52 61 41       	mov    edx,0x41615252
c000832b:	89 e8                	mov    eax,ebp
c000832d:	e8 9f 98 ff ff       	call   c0001bd1 <st_dword>
c0008332:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008338:	ba 72 72 41 61       	mov    edx,0x61417272
c000833d:	e8 8f 98 ff ff       	call   c0001bd1 <st_dword>
c0008342:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008345:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000834b:	e8 81 98 ff ff       	call   c0001bd1 <st_dword>
c0008350:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008356:	ba 02 00 00 00       	mov    edx,0x2
c000835b:	e8 71 98 ff ff       	call   c0001bd1 <st_dword>
c0008360:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008365:	89 f0                	mov    eax,esi
c0008367:	e8 61 98 ff ff       	call   c0001bcd <st_word>
c000836c:	83 ec 0c             	sub    esp,0xc
c000836f:	6a 01                	push   0x1
c0008371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008375:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008379:	83 c0 07             	add    eax,0x7
c000837c:	83 d2 00             	adc    edx,0x0
c000837f:	52                   	push   edx
c0008380:	50                   	push   eax
c0008381:	55                   	push   ebp
c0008382:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008386:	e8 9b 97 ff ff       	call   c0001b26 <disk_write>
c000838b:	83 c4 14             	add    esp,0x14
c000838e:	6a 01                	push   0x1
c0008390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008394:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008398:	83 c0 01             	add    eax,0x1
c000839b:	83 d2 00             	adc    edx,0x0
c000839e:	52                   	push   edx
c000839f:	50                   	push   eax
c00083a0:	55                   	push   ebp
c00083a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a5:	e8 7c 97 ff ff       	call   c0001b26 <disk_write>
c00083aa:	83 c4 20             	add    esp,0x20
c00083ad:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083b4:	31 d2                	xor    edx,edx
c00083b6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083bc:	31 db                	xor    ebx,ebx
c00083be:	89 e8                	mov    eax,ebp
c00083c0:	e8 2a 98 ff ff       	call   c0001bef <mem_set>
c00083c5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083d1:	0f 94 c3             	sete   bl
c00083d4:	4b                   	dec    ebx
c00083d5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083db:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083e1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e6:	75 21                	jne    c0008409 <f_mkfs+0xf68>
c00083e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083ed:	89 e8                	mov    eax,ebp
c00083ef:	e8 dd 97 ff ff       	call   c0001bd1 <st_dword>
c00083f4:	8d 45 04             	lea    eax,[ebp+0x4]
c00083f7:	83 ca ff             	or     edx,0xffffffff
c00083fa:	e8 d2 97 ff ff       	call   c0001bd1 <st_dword>
c00083ff:	8d 45 08             	lea    eax,[ebp+0x8]
c0008402:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008407:	eb 04                	jmp    c000840d <f_mkfs+0xf6c>
c0008409:	89 da                	mov    edx,ebx
c000840b:	89 e8                	mov    eax,ebp
c000840d:	e8 bf 97 ff ff       	call   c0001bd1 <st_dword>
c0008412:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000841a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000841e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008422:	39 ce                	cmp    esi,ecx
c0008424:	76 02                	jbe    c0008428 <f_mkfs+0xf87>
c0008426:	89 ce                	mov    esi,ecx
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	56                   	push   esi
c000842c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008430:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008434:	55                   	push   ebp
c0008435:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008439:	e8 e8 96 ff ff       	call   c0001b26 <disk_write>
c000843e:	83 c4 20             	add    esp,0x20
c0008441:	85 c0                	test   eax,eax
c0008443:	0f 85 09 01 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0008449:	31 d2                	xor    edx,edx
c000844b:	b9 00 02 00 00       	mov    ecx,0x200
c0008450:	89 e8                	mov    eax,ebp
c0008452:	e8 98 97 ff ff       	call   c0001bef <mem_set>
c0008457:	31 d2                	xor    edx,edx
c0008459:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000845d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008461:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008465:	75 b3                	jne    c000841a <f_mkfs+0xf79>
c0008467:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000846a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008471:	40                   	inc    eax
c0008472:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008476:	0f 87 65 ff ff ff    	ja     c00083e1 <f_mkfs+0xf40>
c000847c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008481:	74 04                	je     c0008487 <f_mkfs+0xfe6>
c0008483:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008487:	89 fb                	mov    ebx,edi
c0008489:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000848d:	76 04                	jbe    c0008493 <f_mkfs+0xff2>
c000848f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	53                   	push   ebx
c0008497:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849f:	55                   	push   ebp
c00084a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084a4:	e8 7d 96 ff ff       	call   c0001b26 <disk_write>
c00084a9:	83 c4 20             	add    esp,0x20
c00084ac:	85 c0                	test   eax,eax
c00084ae:	0f 85 9e 00 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00084b4:	31 d2                	xor    edx,edx
c00084b6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ba:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084be:	29 df                	sub    edi,ebx
c00084c0:	75 c5                	jne    c0008487 <f_mkfs+0xfe6>
c00084c2:	b1 0c                	mov    cl,0xc
c00084c4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c9:	74 1d                	je     c00084e8 <f_mkfs+0x1047>
c00084cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00084d0:	b1 06                	mov    cl,0x6
c00084d2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084d6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084da:	72 0c                	jb     c00084e8 <f_mkfs+0x1047>
c00084dc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084e1:	0f 94 c1             	sete   cl
c00084e4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084ed:	75 4c                	jne    c000853b <f_mkfs+0x109a>
c00084ef:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084f3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084f7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084fe:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008505:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008510:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000851b:	0f b6 c9             	movzx  ecx,cl
c000851e:	83 ec 0c             	sub    esp,0xc
c0008521:	55                   	push   ebp
c0008522:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008529:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000852d:	e8 f9 bf ff ff       	call   c000452b <create_partition>
c0008532:	83 c4 10             	add    esp,0x10
c0008535:	89 c3                	mov    ebx,eax
c0008537:	85 c0                	test   eax,eax
c0008539:	75 34                	jne    c000856f <f_mkfs+0x10ce>
c000853b:	31 db                	xor    ebx,ebx
c000853d:	50                   	push   eax
c000853e:	6a 00                	push   0x0
c0008540:	6a 00                	push   0x0
c0008542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008546:	e8 f1 95 ff ff       	call   c0001b3c <disk_ioctl>
c000854b:	83 c4 10             	add    esp,0x10
c000854e:	85 c0                	test   eax,eax
c0008550:	74 1d                	je     c000856f <f_mkfs+0x10ce>
c0008552:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000855a:	75 0c                	jne    c0008568 <f_mkfs+0x10c7>
c000855c:	83 ec 0c             	sub    esp,0xc
c000855f:	55                   	push   ebp
c0008560:	e8 77 00 00 00       	call   c00085dc <ff_memfree>
c0008565:	83 c4 10             	add    esp,0x10
c0008568:	bb 01 00 00 00       	mov    ebx,0x1
c000856d:	eb 48                	jmp    c00085b7 <f_mkfs+0x1116>
c000856f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008577:	75 3e                	jne    c00085b7 <f_mkfs+0x1116>
c0008579:	83 ec 0c             	sub    esp,0xc
c000857c:	55                   	push   ebp
c000857d:	e8 5a 00 00 00       	call   c00085dc <ff_memfree>
c0008582:	83 c4 10             	add    esp,0x10
c0008585:	eb 30                	jmp    c00085b7 <f_mkfs+0x1116>
c0008587:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000858c:	0f 85 eb fa ff ff    	jne    c000807d <f_mkfs+0xbdc>
c0008592:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008596:	81 ff 80 00 00 00    	cmp    edi,0x80
c000859c:	0f 86 b8 f9 ff ff    	jbe    c0007f5a <f_mkfs+0xab9>
c00085a2:	e9 bf fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085a7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085ac:	0f 85 c0 fa ff ff    	jne    c0008072 <f_mkfs+0xbd1>
c00085b2:	e9 af fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085b7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085bd:	89 d8                	mov    eax,ebx
c00085bf:	5b                   	pop    ebx
c00085c0:	5e                   	pop    esi
c00085c1:	5f                   	pop    edi
c00085c2:	5d                   	pop    ebp
c00085c3:	c3                   	ret    

c00085c4 <ff_memalloc>:
c00085c4:	83 ec 0c             	sub    esp,0xc
c00085c7:	83 ec 0c             	sub    esp,0xc
c00085ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085ce:	e8 3c 14 00 00       	call   c0009a0f <malloc>
c00085d3:	83 c4 10             	add    esp,0x10
c00085d6:	83 c4 0c             	add    esp,0xc
c00085d9:	c3                   	ret    
c00085da:	66 90                	xchg   ax,ax

c00085dc <ff_memfree>:
c00085dc:	83 ec 0c             	sub    esp,0xc
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085e6:	e8 34 14 00 00       	call   c0009a1f <free>
c00085eb:	83 c4 10             	add    esp,0x10
c00085ee:	90                   	nop
c00085ef:	83 c4 0c             	add    esp,0xc
c00085f2:	c3                   	ret    
c00085f3:	90                   	nop

c00085f4 <ff_uni2oem>:
c00085f4:	83 ec 14             	sub    esp,0x14
c00085f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085fb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008606:	c7 44 24 0c e0 39 02 c0 	mov    DWORD PTR [esp+0xc],0xc00239e0
c000860e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008613:	77 0b                	ja     c0008620 <ff_uni2oem+0x2c>
c0008615:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008619:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000861e:	eb 60                	jmp    c0008680 <ff_uni2oem+0x8c>
c0008620:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008628:	77 56                	ja     c0008680 <ff_uni2oem+0x8c>
c000862a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008630:	75 4e                	jne    c0008680 <ff_uni2oem+0x8c>
c0008632:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008639:	eb 0d                	jmp    c0008648 <ff_uni2oem+0x54>
c000863b:	90                   	nop
c000863c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008641:	40                   	inc    eax
c0008642:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008647:	90                   	nop
c0008648:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000864e:	77 1c                	ja     c000866c <ff_uni2oem+0x78>
c0008650:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008655:	01 c0                	add    eax,eax
c0008657:	89 c2                	mov    edx,eax
c0008659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000865d:	01 d0                	add    eax,edx
c000865f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008662:	0f b7 c0             	movzx  eax,ax
c0008665:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008669:	75 d1                	jne    c000863c <ff_uni2oem+0x48>
c000866b:	90                   	nop
c000866c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008671:	83 e8 80             	sub    eax,0xffffff80
c0008674:	25 ff 00 00 00       	and    eax,0xff
c0008679:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000867e:	66 90                	xchg   ax,ax
c0008680:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008685:	83 c4 14             	add    esp,0x14
c0008688:	c3                   	ret    
c0008689:	8d 76 00             	lea    esi,[esi+0x0]

c000868c <ff_oem2uni>:
c000868c:	83 ec 18             	sub    esp,0x18
c000868f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008697:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000869c:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086a0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086a7:	c7 44 24 10 e0 39 02 c0 	mov    DWORD PTR [esp+0x10],0xc00239e0
c00086af:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086b5:	77 0d                	ja     c00086c4 <ff_oem2uni+0x38>
c00086b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086bb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086c0:	eb 32                	jmp    c00086f4 <ff_oem2uni+0x68>
c00086c2:	66 90                	xchg   ax,ax
c00086c4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086ca:	75 28                	jne    c00086f4 <ff_oem2uni+0x68>
c00086cc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086d3:	77 1f                	ja     c00086f4 <ff_oem2uni+0x68>
c00086d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086da:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086df:	01 c0                	add    eax,eax
c00086e1:	89 c2                	mov    edx,eax
c00086e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086e7:	01 d0                	add    eax,edx
c00086e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086ec:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086f1:	8d 76 00             	lea    esi,[esi+0x0]
c00086f4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f9:	83 c4 18             	add    esp,0x18
c00086fc:	c3                   	ret    
c00086fd:	8d 76 00             	lea    esi,[esi+0x0]

c0008700 <ff_wtoupper>:
c0008700:	83 ec 10             	sub    esp,0x10
c0008703:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000870b:	0f 87 4f 01 00 00    	ja     c0008860 <ff_wtoupper+0x160>
c0008711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008715:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000871a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008721:	77 09                	ja     c000872c <ff_wtoupper+0x2c>
c0008723:	b8 e0 37 02 c0       	mov    eax,0xc00237e0
c0008728:	eb 0a                	jmp    c0008734 <ff_wtoupper+0x34>
c000872a:	66 90                	xchg   ax,ax
c000872c:	b8 20 37 02 c0       	mov    eax,0xc0023720
c0008731:	8d 76 00             	lea    esi,[esi+0x0]
c0008734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000873c:	8d 50 02             	lea    edx,[eax+0x2]
c000873f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008743:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008746:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000874b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008751:	0f 84 fd 00 00 00    	je     c0008854 <ff_wtoupper+0x154>
c0008757:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000875c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008761:	0f 82 ed 00 00 00    	jb     c0008854 <ff_wtoupper+0x154>
c0008767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000876b:	8d 50 02             	lea    edx,[eax+0x2]
c000876e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008772:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008775:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000877a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000877f:	66 c1 e8 08          	shr    ax,0x8
c0008783:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008788:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000878f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008794:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008799:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000879e:	01 ca                	add    edx,ecx
c00087a0:	39 d0                	cmp    eax,edx
c00087a2:	0f 8d 8c 00 00 00    	jge    c0008834 <ff_wtoupper+0x134>
c00087a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087ad:	83 f8 08             	cmp    eax,0x8
c00087b0:	0f 87 9a 00 00 00    	ja     c0008850 <ff_wtoupper+0x150>
c00087b6:	8b 04 85 e0 36 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc920]
c00087bd:	ff e0                	jmp    eax
c00087bf:	90                   	nop
c00087c0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087c5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087ca:	29 c2                	sub    edx,eax
c00087cc:	89 d0                	mov    eax,edx
c00087ce:	01 c0                	add    eax,eax
c00087d0:	89 c2                	mov    edx,eax
c00087d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087d6:	01 d0                	add    eax,edx
c00087d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087db:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087e0:	eb 4e                	jmp    c0008830 <ff_wtoupper+0x130>
c00087e2:	66 90                	xchg   ax,ax
c00087e4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087ed:	83 e0 01             	and    eax,0x1
c00087f0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087f5:	eb 39                	jmp    c0008830 <ff_wtoupper+0x130>
c00087f7:	90                   	nop
c00087f8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087fe:	eb 30                	jmp    c0008830 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008806:	eb 28                	jmp    c0008830 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000880e:	eb 20                	jmp    c0008830 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008816:	eb 18                	jmp    c0008830 <ff_wtoupper+0x130>
c0008818:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000881e:	eb 10                	jmp    c0008830 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008826:	eb 08                	jmp    c0008830 <ff_wtoupper+0x130>
c0008828:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000882f:	90                   	nop
c0008830:	eb 1e                	jmp    c0008850 <ff_wtoupper+0x150>
c0008832:	66 90                	xchg   ax,ax
c0008834:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000883a:	0f 85 f8 fe ff ff    	jne    c0008738 <ff_wtoupper+0x38>
c0008840:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008845:	01 c0                	add    eax,eax
c0008847:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000884b:	e9 e8 fe ff ff       	jmp    c0008738 <ff_wtoupper+0x38>
c0008850:	90                   	nop
c0008851:	8d 76 00             	lea    esi,[esi+0x0]
c0008854:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008859:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000885d:	8d 76 00             	lea    esi,[esi+0x0]
c0008860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008864:	83 c4 10             	add    esp,0x10
c0008867:	c3                   	ret    

c0008868 <CPU::current()>:
c0008868:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000886d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008873:	c3                   	ret    

c0008874 <operator new(unsigned long)>:
c0008874:	e9 96 11 00 00       	jmp    c0009a0f <malloc>

c0008879 <operator delete(void*)>:
c0008879:	e9 b1 11 00 00       	jmp    c0009a2f <rfree>

c000887e <disableIRQs()>:
c000887e:	fa                   	cli    
c000887f:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0008885:	c3                   	ret    

c0008886 <enableIRQs()>:
c0008886:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000888b:	48                   	dec    eax
c000888c:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0008891:	75 01                	jne    c0008894 <enableIRQs()+0xe>
c0008893:	fb                   	sti    
c0008894:	c3                   	ret    

c0008895 <lockScheduler()>:
c0008895:	fa                   	cli    
c0008896:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c000889c:	c3                   	ret    

c000889d <unlockScheduler()>:
c000889d:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c00088a2:	48                   	dec    eax
c00088a3:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c00088a8:	75 01                	jne    c00088ab <unlockScheduler()+0xe>
c00088aa:	fb                   	sti    
c00088ab:	c3                   	ret    

c00088ac <lockStuff()>:
c00088ac:	fa                   	cli    
c00088ad:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c00088b3:	ff 05 c4 91 02 c0    	inc    DWORD PTR ds:0xc00291c4
c00088b9:	c3                   	ret    

c00088ba <unlockStuff()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c00088c2:	48                   	dec    eax
c00088c3:	a3 c4 91 02 c0       	mov    ds:0xc00291c4,eax
c00088c8:	75 18                	jne    c00088e2 <unlockStuff()+0x28>
c00088ca:	83 3d c0 91 02 c0 00 	cmp    DWORD PTR ds:0xc00291c0,0x0
c00088d1:	74 0f                	je     c00088e2 <unlockStuff()+0x28>
c00088d3:	c7 05 c0 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291c0,0x0
c00088dd:	e8 06 fd 00 00       	call   c00185e8 <schedule()>
c00088e2:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c00088e7:	48                   	dec    eax
c00088e8:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c00088ed:	75 01                	jne    c00088f0 <unlockStuff()+0x36>
c00088ef:	fb                   	sti    
c00088f0:	83 c4 0c             	add    esp,0xc
c00088f3:	c3                   	ret    

c00088f4 <Virt::getAKernelVAS()>:
c00088f4:	a1 d0 7d 02 c0       	mov    eax,ds:0xc0027dd0
c00088f9:	c3                   	ret    

c00088fa <__not_memcpy>:
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008900:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008904:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008908:	89 c7                	mov    edi,eax
c000890a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	c3                   	ret    
c000890f:	90                   	nop

c0008910 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	68 e0 3a 02 c0       	push   0xc0023ae0
c000891b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891f:	e8 a8 7e ff ff       	call   c00007cc <strcmp>
c0008924:	83 c4 10             	add    esp,0x10
c0008927:	85 c0                	test   eax,eax
c0008929:	0f 94 c0             	sete   al
c000892c:	84 c0                	test   al,al
c000892e:	74 0c                	je     c000893c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008930:	b8 a8 7c 02 c0       	mov    eax,0xc0027ca8
c0008935:	e9 ea 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000893a:	66 90                	xchg   ax,ax
c000893c:	83 ec 08             	sub    esp,0x8
c000893f:	68 e9 3a 02 c0       	push   0xc0023ae9
c0008944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008948:	e8 7f 7e ff ff       	call   c00007cc <strcmp>
c000894d:	83 c4 10             	add    esp,0x10
c0008950:	85 c0                	test   eax,eax
c0008952:	0f 94 c0             	sete   al
c0008955:	84 c0                	test   al,al
c0008957:	74 0b                	je     c0008964 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008959:	b8 84 25 02 c0       	mov    eax,0xc0022584
c000895e:	e9 c1 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008963:	90                   	nop
c0008964:	83 ec 08             	sub    esp,0x8
c0008967:	68 f3 3a 02 c0       	push   0xc0023af3
c000896c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008970:	e8 57 7e ff ff       	call   c00007cc <strcmp>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	85 c0                	test   eax,eax
c000897a:	0f 94 c0             	sete   al
c000897d:	84 c0                	test   al,al
c000897f:	74 0b                	je     c000898c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008981:	b8 b8 22 02 c0       	mov    eax,0xc00222b8
c0008986:	e9 99 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000898b:	90                   	nop
c000898c:	83 ec 08             	sub    esp,0x8
c000898f:	68 fc 3a 02 c0       	push   0xc0023afc
c0008994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008998:	e8 2f 7e ff ff       	call   c00007cc <strcmp>
c000899d:	83 c4 10             	add    esp,0x10
c00089a0:	85 c0                	test   eax,eax
c00089a2:	0f 94 c0             	sete   al
c00089a5:	84 c0                	test   al,al
c00089a7:	74 07                	je     c00089b0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a9:	b8 84 26 02 c0       	mov    eax,0xc0022684
c00089ae:	eb 74                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089b0:	83 ec 08             	sub    esp,0x8
c00089b3:	68 06 3b 02 c0       	push   0xc0023b06
c00089b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089bc:	e8 0b 7e ff ff       	call   c00007cc <strcmp>
c00089c1:	83 c4 10             	add    esp,0x10
c00089c4:	85 c0                	test   eax,eax
c00089c6:	0f 94 c0             	sete   al
c00089c9:	84 c0                	test   al,al
c00089cb:	74 07                	je     c00089d4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089cd:	b8 04 24 02 c0       	mov    eax,0xc0022404
c00089d2:	eb 50                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089d4:	83 ec 08             	sub    esp,0x8
c00089d7:	68 0f 3b 02 c0       	push   0xc0023b0f
c00089dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e0:	e8 e7 7d ff ff       	call   c00007cc <strcmp>
c00089e5:	83 c4 10             	add    esp,0x10
c00089e8:	85 c0                	test   eax,eax
c00089ea:	0f 94 c0             	sete   al
c00089ed:	84 c0                	test   al,al
c00089ef:	74 07                	je     c00089f8 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089f1:	b8 ac 7c 02 c0       	mov    eax,0xc0027cac
c00089f6:	eb 2c                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f8:	83 ec 08             	sub    esp,0x8
c00089fb:	68 1c 3b 02 c0       	push   0xc0023b1c
c0008a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a04:	e8 c3 7d ff ff       	call   c00007cc <strcmp>
c0008a09:	83 c4 10             	add    esp,0x10
c0008a0c:	85 c0                	test   eax,eax
c0008a0e:	0f 94 c0             	sete   al
c0008a11:	84 c0                	test   al,al
c0008a13:	74 07                	je     c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a15:	b8 ad 7c 02 c0       	mov    eax,0xc0027cad
c0008a1a:	eb 08                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a1c:	b8 00 00 00 00       	mov    eax,0x0
c0008a21:	8d 76 00             	lea    esi,[esi+0x0]
c0008a24:	83 c4 0c             	add    esp,0xc
c0008a27:	c3                   	ret    

c0008a28 <Computer::close(int, int, void*)>:
c0008a28:	57                   	push   edi
c0008a29:	56                   	push   esi
c0008a2a:	53                   	push   ebx
c0008a2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a33:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a37:	83 ec 0c             	sub    esp,0xc
c0008a3a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a40:	e8 cb 58 00 00       	call   c000e310 <Device::closeAll()>
c0008a45:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a50:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a54:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a5c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a64:	5b                   	pop    ebx
c0008a65:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a68:	5e                   	pop    esi
c0008a69:	5f                   	pop    edi
c0008a6a:	ff e0                	jmp    eax

c0008a6c <Krnl::firstTask()>:
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 14             	sub    esp,0x14
c0008a70:	68 29 3b 02 c0       	push   0xc0023b29
c0008a75:	e8 ef 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008a7a:	fb                   	sti    
c0008a7b:	c7 04 24 40 3b 02 c0 	mov    DWORD PTR [esp],0xc0023b40
c0008a82:	e8 e2 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008a87:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a8e:	e8 7c 0f 00 00       	call   c0009a0f <malloc>
c0008a93:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a9a:	89 c3                	mov    ebx,eax
c0008a9c:	ff 35 f0 91 02 c0    	push   DWORD PTR ds:0xc00291f0
c0008aa2:	68 59 3b 02 c0       	push   0xc0023b59
c0008aa7:	6a 01                	push   0x1
c0008aa9:	50                   	push   eax
c0008aaa:	e8 15 f7 00 00       	call   c00181c4 <Process::Process(bool, char const*, Process*, char**)>
c0008aaf:	83 c4 20             	add    esp,0x20
c0008ab2:	68 ff 00 00 00       	push   0xff
c0008ab7:	6a 00                	push   0x0
c0008ab9:	68 07 94 00 c0       	push   0xc0009407
c0008abe:	53                   	push   ebx
c0008abf:	e8 08 f9 00 00       	call   c00183cc <Process::createThread(void (*)(void*), void*, int)>
c0008ac4:	6a 7a                	push   0x7a
c0008ac6:	6a 00                	push   0x0
c0008ac8:	68 10 8e 01 c0       	push   0xc0018e10
c0008acd:	ff 35 f0 91 02 c0    	push   DWORD PTR ds:0xc00291f0
c0008ad3:	e8 f4 f8 00 00       	call   c00183cc <Process::createThread(void (*)(void*), void*, int)>
c0008ad8:	83 c4 14             	add    esp,0x14
c0008adb:	a3 a8 91 02 c0       	mov    ds:0xc00291a8,eax
c0008ae0:	68 00 3d 02 c0       	push   0xc0023d00
c0008ae5:	c6 05 ad 7c 02 c0 01 	mov    BYTE PTR ds:0xc0027cad,0x1
c0008aec:	e8 78 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008af1:	e8 f5 06 01 00       	call   c00191eb <Vm::initialise8086()>
c0008af6:	e8 9b 45 00 00       	call   c000d096 <Fs::initVFS()>
c0008afb:	c7 04 24 66 3b 02 c0 	mov    DWORD PTR [esp],0xc0023b66
c0008b02:	e8 62 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b07:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0008b0c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b12:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b14:	6a 00                	push   0x0
c0008b16:	6a 00                	push   0x0
c0008b18:	6a 00                	push   0x0
c0008b1a:	50                   	push   eax
c0008b1b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b1e:	83 c4 14             	add    esp,0x14
c0008b21:	68 00 3d 02 c0       	push   0xc0023d00
c0008b26:	e8 3e 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b2b:	e8 02 df 00 00       	call   c0016a32 <Sys::loadSyscalls()>
c0008b30:	e8 71 bc 00 00       	call   c00147a6 <Krnl::loadSystemEnv()>
c0008b35:	e8 f0 c1 00 00       	call   c0014d2a <Krnl::setupPowerManager()>
c0008b3a:	83 c4 0c             	add    esp,0xc
c0008b3d:	6a 3a                	push   0x3a
c0008b3f:	68 80 3b 02 c0       	push   0xc0023b80
c0008b44:	68 89 3b 02 c0       	push   0xc0023b89
c0008b49:	e8 a7 cc 00 00       	call   c00157f5 <Reg::readIntWithDefault(char*, char*, int)>
c0008b4e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b51:	e8 72 50 00 00       	call   c000dbc8 <User::loadClockSettings(int)>
c0008b56:	c7 04 24 24 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d24
c0008b5d:	e8 07 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b62:	58                   	pop    eax
c0008b63:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0008b68:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b6e:	e8 5d 57 00 00       	call   c000e2d0 <Device::loadDriversForAll()>
c0008b73:	c7 04 24 91 3b 02 c0 	mov    DWORD PTR [esp],0xc0023b91
c0008b7a:	e8 ea 0e 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b7f:	e8 8a b7 00 00       	call   c001430e <Krnl::startCPUs()>
c0008b84:	c7 04 24 ab 3b 02 c0 	mov    DWORD PTR [esp],0xc0023bab
c0008b8b:	e8 d9 0e 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b90:	5a                   	pop    edx
c0008b91:	8b 1d a8 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ca8
c0008b97:	59                   	pop    ecx
c0008b98:	6a 01                	push   0x1
c0008b9a:	68 bc 3b 02 c0       	push   0xc0023bbc
c0008b9f:	e8 5e f0 00 00       	call   c0017c02 <Thr::loadDLL(char const*, bool)>
c0008ba4:	5a                   	pop    edx
c0008ba5:	59                   	pop    ecx
c0008ba6:	53                   	push   ebx
c0008ba7:	50                   	push   eax
c0008ba8:	e8 86 f2 00 00       	call   c0017e33 <Thr::executeDLL(unsigned long, void*)>
c0008bad:	83 c4 10             	add    esp,0x10
c0008bb0:	83 ec 0c             	sub    esp,0xc
c0008bb3:	6a 02                	push   0x2
c0008bb5:	e8 26 fc 00 00       	call   c00187e0 <blockTask(TaskState)>
c0008bba:	83 c4 10             	add    esp,0x10
c0008bbd:	eb f1                	jmp    c0008bb0 <Krnl::firstTask()+0x144>
c0008bbf:	90                   	nop

c0008bc0 <Computer::Computer()>:
c0008bc0:	83 ec 0c             	sub    esp,0xc
c0008bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bc7:	83 ec 08             	sub    esp,0x8
c0008bca:	68 d8 3b 02 c0       	push   0xc0023bd8
c0008bcf:	50                   	push   eax
c0008bd0:	e8 b5 57 00 00       	call   c000e38a <Device::Device(char const*)>
c0008bd5:	83 c4 10             	add    esp,0x10
c0008bd8:	ba d4 3d 02 c0       	mov    edx,0xc0023dd4
c0008bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be1:	89 10                	mov    DWORD PTR [eax],edx
c0008be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be7:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008bf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bf5:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c03:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c09:	83 ca 04             	or     edx,0x4
c0008c0c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c16:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c1c:	0f b6 d0             	movzx  edx,al
c0008c1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c23:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c2e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c34:	0f b6 d0             	movzx  edx,al
c0008c37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c44:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c4a:	8d 50 01             	lea    edx,[eax+0x1]
c0008c4d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c51:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c57:	0f b6 d0             	movzx  edx,al
c0008c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c5e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c62:	83 e1 3f             	and    ecx,0x3f
c0008c65:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c73:	0f b6 d0             	movzx  edx,al
c0008c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7a:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c85:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c8b:	0f b6 d0             	movzx  edx,al
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008ca1:	8d 50 01             	lea    edx,[eax+0x1]
c0008ca4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cae:	0f b6 d0             	movzx  edx,al
c0008cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb9:	83 e1 3f             	and    ecx,0x3f
c0008cbc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cca:	0f b6 d0             	movzx  edx,al
c0008ccd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd1:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cdc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008ce2:	0f b6 d0             	movzx  edx,al
c0008ce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce9:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf8:	8d 50 01             	lea    edx,[eax+0x1]
c0008cfb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cff:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008d05:	0f b6 d0             	movzx  edx,al
c0008d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d10:	83 e1 3f             	and    ecx,0x3f
c0008d13:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d17:	90                   	nop
c0008d18:	83 c4 0c             	add    esp,0xc
c0008d1b:	c3                   	ret    

c0008d1c <Computer::setBootMessage(char const*)>:
c0008d1c:	c3                   	ret    
c0008d1d:	90                   	nop

c0008d1e <Computer::detectFeatures()>:
c0008d1e:	55                   	push   ebp
c0008d1f:	57                   	push   edi
c0008d20:	56                   	push   esi
c0008d21:	53                   	push   ebx
c0008d22:	83 ec 1c             	sub    esp,0x1c
c0008d25:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d29:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d33:	e8 e1 74 ff ff       	call   c0000219 <detectCPUID>
c0008d38:	85 c0                	test   eax,eax
c0008d3a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d40:	0f 95 c2             	setne  dl
c0008d43:	83 e0 fd             	and    eax,0xfffffffd
c0008d46:	d1 e2                	shl    edx,1
c0008d48:	09 d0                	or     eax,edx
c0008d4a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d50:	a8 02                	test   al,0x2
c0008d52:	75 46                	jne    c0008d9a <Computer::detectFeatures()+0x7c>
c0008d54:	f6 05 c1 7c 02 c0 04 	test   BYTE PTR ds:0xc0027cc1,0x4
c0008d5b:	74 07                	je     c0008d64 <Computer::detectFeatures()+0x46>
c0008d5d:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d64:	e8 dd 94 01 00       	call   c0022246 <x87Detect>
c0008d69:	83 e0 01             	and    eax,0x1
c0008d6c:	c1 e0 04             	shl    eax,0x4
c0008d6f:	88 c2                	mov    dl,al
c0008d71:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d77:	83 e0 ef             	and    eax,0xffffffef
c0008d7a:	09 d0                	or     eax,edx
c0008d7c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d82:	a8 10                	test   al,0x10
c0008d84:	0f 85 2a 01 00 00    	jne    c0008eb4 <Computer::detectFeatures()+0x196>
c0008d8a:	84 c0                	test   al,al
c0008d8c:	0f 88 45 01 00 00    	js     c0008ed7 <Computer::detectFeatures()+0x1b9>
c0008d92:	83 c4 1c             	add    esp,0x1c
c0008d95:	5b                   	pop    ebx
c0008d96:	5e                   	pop    esi
c0008d97:	5f                   	pop    edi
c0008d98:	5d                   	pop    ebp
c0008d99:	c3                   	ret    
c0008d9a:	83 ec 0c             	sub    esp,0xc
c0008d9d:	6a 20                	push   0x20
c0008d9f:	e8 0e a4 00 00       	call   c00131b2 <CPU::cpuidCheckEDX(unsigned int)>
c0008da4:	83 e0 01             	and    eax,0x1
c0008da7:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008dae:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008db4:	83 e0 f7             	and    eax,0xfffffff7
c0008db7:	09 d0                	or     eax,edx
c0008db9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008dbf:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dc6:	e8 e7 a3 00 00       	call   c00131b2 <CPU::cpuidCheckEDX(unsigned int)>
c0008dcb:	83 e0 01             	and    eax,0x1
c0008dce:	88 c2                	mov    dl,al
c0008dd0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dd6:	83 e0 fe             	and    eax,0xfffffffe
c0008dd9:	09 d0                	or     eax,edx
c0008ddb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008de1:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de8:	e8 c5 a3 00 00       	call   c00131b2 <CPU::cpuidCheckEDX(unsigned int)>
c0008ded:	c1 e0 07             	shl    eax,0x7
c0008df0:	88 c2                	mov    dl,al
c0008df2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df8:	83 e0 7f             	and    eax,0x7f
c0008dfb:	09 d0                	or     eax,edx
c0008dfd:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008e03:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e0a:	e8 a3 a3 00 00       	call   c00131b2 <CPU::cpuidCheckEDX(unsigned int)>
c0008e0f:	83 c4 10             	add    esp,0x10
c0008e12:	83 e0 01             	and    eax,0x1
c0008e15:	c1 e0 05             	shl    eax,0x5
c0008e18:	88 c2                	mov    dl,al
c0008e1a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e20:	83 e0 df             	and    eax,0xffffffdf
c0008e23:	09 d0                	or     eax,edx
c0008e25:	f7 05 c0 7c 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0027cc0,0x401
c0008e2f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e35:	0f 84 c2 00 00 00    	je     c0008efd <Computer::detectFeatures()+0x1df>
c0008e3b:	83 e0 fe             	and    eax,0xfffffffe
c0008e3e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e44:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e4a:	88 c2                	mov    dl,al
c0008e4c:	83 e2 09             	and    edx,0x9
c0008e4f:	fe ca                	dec    dl
c0008e51:	75 09                	jne    c0008e5c <Computer::detectFeatures()+0x13e>
c0008e53:	83 e0 fe             	and    eax,0xfffffffe
c0008e56:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e5c:	83 ec 0c             	sub    esp,0xc
c0008e5f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e63:	50                   	push   eax
c0008e64:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e68:	55                   	push   ebp
c0008e69:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e6d:	57                   	push   edi
c0008e6e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e72:	56                   	push   esi
c0008e73:	68 00 00 00 80       	push   0x80000000
c0008e78:	e8 b1 a2 00 00       	call   c001312e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e7d:	83 c4 20             	add    esp,0x20
c0008e80:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e87:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e8b:	0f 86 c3 fe ff ff    	jbe    c0008d54 <Computer::detectFeatures()+0x36>
c0008e91:	83 ec 0c             	sub    esp,0xc
c0008e94:	50                   	push   eax
c0008e95:	55                   	push   ebp
c0008e96:	57                   	push   edi
c0008e97:	56                   	push   esi
c0008e98:	68 01 00 00 80       	push   0x80000001
c0008e9d:	e8 8c a2 00 00       	call   c001312e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008ea2:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008eac:	83 c4 20             	add    esp,0x20
c0008eaf:	e9 a0 fe ff ff       	jmp    c0008d54 <Computer::detectFeatures()+0x36>
c0008eb4:	e8 47 93 01 00       	call   c0022200 <absolutelyNoChanceInHell>
c0008eb9:	88 c2                	mov    dl,al
c0008ebb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ec1:	c1 e2 07             	shl    edx,0x7
c0008ec4:	83 e0 7f             	and    eax,0x7f
c0008ec7:	09 d0                	or     eax,edx
c0008ec9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ecf:	84 c0                	test   al,al
c0008ed1:	0f 89 bb fe ff ff    	jns    c0008d92 <Computer::detectFeatures()+0x74>
c0008ed7:	e8 04 93 01 00       	call   c00221e0 <avxDetect>
c0008edc:	83 e0 01             	and    eax,0x1
c0008edf:	c1 e0 05             	shl    eax,0x5
c0008ee2:	88 c2                	mov    dl,al
c0008ee4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008eea:	83 e0 df             	and    eax,0xffffffdf
c0008eed:	09 d0                	or     eax,edx
c0008eef:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008ef5:	83 c4 1c             	add    esp,0x1c
c0008ef8:	5b                   	pop    ebx
c0008ef9:	5e                   	pop    esi
c0008efa:	5f                   	pop    edi
c0008efb:	5d                   	pop    ebp
c0008efc:	c3                   	ret    
c0008efd:	83 ec 0c             	sub    esp,0xc
c0008f00:	68 00 02 00 00       	push   0x200
c0008f05:	e8 a8 a2 00 00       	call   c00131b2 <CPU::cpuidCheckEDX(unsigned int)>
c0008f0a:	83 c4 10             	add    esp,0x10
c0008f0d:	83 e0 01             	and    eax,0x1
c0008f10:	88 c2                	mov    dl,al
c0008f12:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f18:	83 e0 fe             	and    eax,0xfffffffe
c0008f1b:	09 d0                	or     eax,edx
c0008f1d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f23:	e9 1c ff ff ff       	jmp    c0008e44 <Computer::detectFeatures()+0x126>

c0008f28 <Computer::displayFeatures()>:
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <Computer::rdmsr(unsigned int)>:
c0008f2a:	83 ec 0c             	sub    esp,0xc
c0008f2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f31:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f38:	74 0a                	je     c0008f44 <Computer::rdmsr(unsigned int)+0x1a>
c0008f3a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f3e:	0f 32                	rdmsr  
c0008f40:	83 c4 0c             	add    esp,0xc
c0008f43:	c3                   	ret    
c0008f44:	83 ec 0c             	sub    esp,0xc
c0008f47:	68 e1 3b 02 c0       	push   0xc0023be1
c0008f4c:	e8 5e b9 00 00       	call   c00148af <Krnl::panic(char const*)>
c0008f51:	83 c4 10             	add    esp,0x10
c0008f54:	eb e4                	jmp    c0008f3a <Computer::rdmsr(unsigned int)+0x10>

c0008f56 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0008f56:	57                   	push   edi
c0008f57:	56                   	push   esi
c0008f58:	52                   	push   edx
c0008f59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f5d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008f61:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008f65:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f6c:	74 0e                	je     c0008f7c <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0008f6e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f72:	89 f0                	mov    eax,esi
c0008f74:	89 fa                	mov    edx,edi
c0008f76:	0f 30                	wrmsr  
c0008f78:	58                   	pop    eax
c0008f79:	5e                   	pop    esi
c0008f7a:	5f                   	pop    edi
c0008f7b:	c3                   	ret    
c0008f7c:	83 ec 0c             	sub    esp,0xc
c0008f7f:	68 e7 3b 02 c0       	push   0xc0023be7
c0008f84:	e8 26 b9 00 00       	call   c00148af <Krnl::panic(char const*)>
c0008f89:	83 c4 10             	add    esp,0x10
c0008f8c:	eb e0                	jmp    c0008f6e <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0008f8e <Computer::shutdown()>:
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f95:	8b 10                	mov    edx,DWORD PTR [eax]
c0008f97:	6a 00                	push   0x0
c0008f99:	6a 00                	push   0x0
c0008f9b:	6a 00                	push   0x0
c0008f9d:	50                   	push   eax
c0008f9e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0008fa1:	83 c4 1c             	add    esp,0x1c
c0008fa4:	c3                   	ret    
c0008fa5:	90                   	nop

c0008fa6 <Computer::restart()>:
c0008fa6:	83 ec 0c             	sub    esp,0xc
c0008fa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fad:	8b 10                	mov    edx,DWORD PTR [eax]
c0008faf:	6a 00                	push   0x0
c0008fb1:	6a 00                	push   0x0
c0008fb3:	6a 01                	push   0x1
c0008fb5:	50                   	push   eax
c0008fb6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0008fb9:	83 c4 1c             	add    esp,0x1c
c0008fbc:	c3                   	ret    
c0008fbd:	90                   	nop

c0008fbe <Computer::sleep()>:
c0008fbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fc2:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008fc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008fcc:	e9 cf 97 00 00       	jmp    c00127a0 <ACPI::sleep()>
c0008fd1:	90                   	nop

c0008fd2 <Computer::nmiEnabled()>:
c0008fd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fd6:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0008fdc:	c3                   	ret    
c0008fdd:	90                   	nop

c0008fde <Computer::readCMOS(unsigned char)>:
c0008fde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fe2:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008fe9:	19 c0                	sbb    eax,eax
c0008feb:	83 e0 80             	and    eax,0xffffff80
c0008fee:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008ff2:	e6 70                	out    0x70,al
c0008ff4:	e4 71                	in     al,0x71
c0008ff6:	c3                   	ret    
c0008ff7:	90                   	nop

c0008ff8 <Computer::enableNMI(bool)>:
c0008ff8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008ffc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009000:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0009006:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000900e:	eb ce                	jmp    c0008fde <Computer::readCMOS(unsigned char)>

c0009010 <Computer::open(int, int, void*)>:
c0009010:	56                   	push   esi
c0009011:	53                   	push   ebx
c0009012:	83 ec 10             	sub    esp,0x10
c0009015:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009019:	68 44 3d 02 c0       	push   0xc0023d44
c000901e:	e8 46 0a 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009023:	58                   	pop    eax
c0009024:	f6 05 c0 7c 02 c0 04 	test   BYTE PTR ds:0xc0027cc0,0x4
c000902b:	5a                   	pop    edx
c000902c:	0f 94 05 80 70 02 c0 	sete   BYTE PTR ds:0xc0027080
c0009033:	68 58 01 00 00       	push   0x158
c0009038:	68 ed 3b 02 c0       	push   0xc0023bed
c000903d:	e8 bd 3c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009042:	59                   	pop    ecx
c0009043:	5e                   	pop    esi
c0009044:	68 14 01 00 00       	push   0x114
c0009049:	68 03 3c 02 c0       	push   0xc0023c03
c000904e:	e8 ac 3c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009053:	58                   	pop    eax
c0009054:	5a                   	pop    edx
c0009055:	6a 14                	push   0x14
c0009057:	68 17 3c 02 c0       	push   0xc0023c17
c000905c:	e8 9e 3c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009061:	59                   	pop    ecx
c0009062:	5e                   	pop    esi
c0009063:	68 1f 07 00 00       	push   0x71f
c0009068:	68 2a 3c 02 c0       	push   0xc0023c2a
c000906d:	e8 8d 3c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009072:	58                   	pop    eax
c0009073:	5a                   	pop    edx
c0009074:	6a 5f                	push   0x5f
c0009076:	68 41 3c 02 c0       	push   0xc0023c41
c000907b:	e8 7f 3c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009080:	c7 04 24 57 3c 02 c0 	mov    DWORD PTR [esp],0xc0023c57
c0009087:	e8 73 3c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000908c:	c7 04 24 69 3c 02 c0 	mov    DWORD PTR [esp],0xc0023c69
c0009093:	e8 d1 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009098:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000909f:	e8 6b 09 00 00       	call   c0009a0f <malloc>
c00090a4:	89 c6                	mov    esi,eax
c00090a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00090a9:	e8 aa 8f 00 00       	call   c0012058 <ACPI::ACPI()>
c00090ae:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c00090b4:	c7 04 24 83 3c 02 c0 	mov    DWORD PTR [esp],0xc0023c83
c00090bb:	e8 a9 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00090c0:	59                   	pop    ecx
c00090c1:	5e                   	pop    esi
c00090c2:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c00090c8:	53                   	push   ebx
c00090c9:	e8 b8 50 00 00       	call   c000e186 <Device::addChild(Device*)>
c00090ce:	c7 04 24 68 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d68
c00090d5:	e8 8f 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00090da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00090dd:	e8 3c fc ff ff       	call   c0008d1e <Computer::detectFeatures()>
c00090e2:	c7 04 24 88 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d88
c00090e9:	e8 7b 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00090ee:	c7 04 24 9d 3c 02 c0 	mov    DWORD PTR [esp],0xc0023c9d
c00090f5:	e8 6f 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00090fa:	58                   	pop    eax
c00090fb:	5a                   	pop    edx
c00090fc:	6a 01                	push   0x1
c00090fe:	53                   	push   ebx
c00090ff:	e8 f4 fe ff ff       	call   c0008ff8 <Computer::enableNMI(bool)>
c0009104:	c7 04 24 91 3b 02 c0 	mov    DWORD PTR [esp],0xc0023b91
c000910b:	e8 59 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009110:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c0009117:	e8 f3 08 00 00       	call   c0009a0f <malloc>
c000911c:	89 04 24             	mov    DWORD PTR [esp],eax
c000911f:	89 c6                	mov    esi,eax
c0009121:	e8 44 a1 00 00       	call   c001326a <CPU::CPU()>
c0009126:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000912c:	59                   	pop    ecx
c000912d:	58                   	pop    eax
c000912e:	56                   	push   esi
c000912f:	53                   	push   ebx
c0009130:	e8 51 50 00 00       	call   c000e186 <Device::addChild(Device*)>
c0009135:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000913b:	8b 10                	mov    edx,DWORD PTR [eax]
c000913d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009141:	6a 00                	push   0x0
c0009143:	6a 00                	push   0x0
c0009145:	50                   	push   eax
c0009146:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0009149:	83 c4 14             	add    esp,0x14
c000914c:	68 a8 3d 02 c0       	push   0xc0023da8
c0009151:	e8 13 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009156:	e8 c7 55 00 00       	call   c000e722 <setupFPU()>
c000915b:	83 c4 10             	add    esp,0x10
c000915e:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0009164:	85 c0                	test   eax,eax
c0009166:	74 1f                	je     c0009187 <Computer::open(int, int, void*)+0x177>
c0009168:	83 ec 08             	sub    esp,0x8
c000916b:	50                   	push   eax
c000916c:	53                   	push   ebx
c000916d:	e8 14 50 00 00       	call   c000e186 <Device::addChild(Device*)>
c0009172:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c0009178:	8b 10                	mov    edx,DWORD PTR [eax]
c000917a:	6a 00                	push   0x0
c000917c:	6a 00                	push   0x0
c000917e:	6a 00                	push   0x0
c0009180:	50                   	push   eax
c0009181:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0009184:	83 c4 20             	add    esp,0x20
c0009187:	83 ec 0c             	sub    esp,0xc
c000918a:	68 ae 3c 02 c0       	push   0xc0023cae
c000918f:	e8 d5 08 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009194:	c7 04 24 6c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a6c
c000919b:	e8 40 f3 00 00       	call   c00184e0 <setupMultitasking(void (*)())>
c00091a0:	83 c4 14             	add    esp,0x14
c00091a3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00091a8:	5b                   	pop    ebx
c00091a9:	5e                   	pop    esi
c00091aa:	c3                   	ret    
c00091ab:	90                   	nop

c00091ac <Computer::disableNMI()>:
c00091ac:	6a 00                	push   0x0
c00091ae:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00091b2:	e8 41 fe ff ff       	call   c0008ff8 <Computer::enableNMI(bool)>
c00091b7:	58                   	pop    eax
c00091b8:	5a                   	pop    edx
c00091b9:	c3                   	ret    

c00091ba <Computer::writeCMOS(unsigned char, unsigned char)>:
c00091ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091be:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c00091c5:	19 c0                	sbb    eax,eax
c00091c7:	83 e0 80             	and    eax,0xffffff80
c00091ca:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00091ce:	e6 70                	out    0x70,al
c00091d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00091d4:	e6 71                	out    0x71,al
c00091d6:	c3                   	ret    
c00091d7:	90                   	nop

c00091d8 <Computer::handleNMI()>:
c00091d8:	56                   	push   esi
c00091d9:	53                   	push   ebx
c00091da:	83 ec 10             	sub    esp,0x10
c00091dd:	e4 92                	in     al,0x92
c00091df:	89 c6                	mov    esi,eax
c00091e1:	e4 61                	in     al,0x61
c00091e3:	68 c9 3c 02 c0       	push   0xc0023cc9
c00091e8:	88 c3                	mov    bl,al
c00091ea:	e8 10 3b 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00091ef:	83 c4 10             	add    esp,0x10
c00091f2:	83 e6 10             	and    esi,0x10
c00091f5:	75 0d                	jne    c0009204 <Computer::handleNMI()+0x2c>
c00091f7:	f6 c3 40             	test   bl,0x40
c00091fa:	75 1d                	jne    c0009219 <Computer::handleNMI()+0x41>
c00091fc:	84 db                	test   bl,bl
c00091fe:	78 2d                	js     c000922d <Computer::handleNMI()+0x55>
c0009200:	58                   	pop    eax
c0009201:	5b                   	pop    ebx
c0009202:	5e                   	pop    esi
c0009203:	c3                   	ret    
c0009204:	83 ec 0c             	sub    esp,0xc
c0009207:	68 da 3c 02 c0       	push   0xc0023cda
c000920c:	e8 9e b6 00 00       	call   c00148af <Krnl::panic(char const*)>
c0009211:	83 c4 10             	add    esp,0x10
c0009214:	f6 c3 40             	test   bl,0x40
c0009217:	74 e3                	je     c00091fc <Computer::handleNMI()+0x24>
c0009219:	83 ec 0c             	sub    esp,0xc
c000921c:	68 e7 3c 02 c0       	push   0xc0023ce7
c0009221:	e8 89 b6 00 00       	call   c00148af <Krnl::panic(char const*)>
c0009226:	83 c4 10             	add    esp,0x10
c0009229:	84 db                	test   bl,bl
c000922b:	79 d3                	jns    c0009200 <Computer::handleNMI()+0x28>
c000922d:	c7 44 24 10 f1 3c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023cf1
c0009235:	5a                   	pop    edx
c0009236:	5b                   	pop    ebx
c0009237:	5e                   	pop    esi
c0009238:	e9 72 b6 00 00       	jmp    c00148af <Krnl::panic(char const*)>
c000923d:	90                   	nop

c000923e <Computer::setDiskActivityLight(int, bool)>:
c000923e:	56                   	push   esi
c000923f:	53                   	push   ebx
c0009240:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009244:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009249:	77 1b                	ja     c0009266 <Computer::setDiskActivityLight(int, bool)+0x28>
c000924b:	e4 92                	in     al,0x92
c000924d:	bb 40 00 00 00       	mov    ebx,0x40
c0009252:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0009256:	89 da                	mov    edx,ebx
c0009258:	d3 e2                	shl    edx,cl
c000925a:	89 f1                	mov    ecx,esi
c000925c:	f7 d2                	not    edx
c000925e:	d3 e3                	shl    ebx,cl
c0009260:	21 d0                	and    eax,edx
c0009262:	09 d8                	or     eax,ebx
c0009264:	e6 92                	out    0x92,al
c0009266:	5b                   	pop    ebx
c0009267:	5e                   	pop    esi
c0009268:	c3                   	ret    
c0009269:	90                   	nop

c000926a <GDTEntry::setBase(unsigned int)>:
c000926a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000926e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009272:	89 c1                	mov    ecx,eax
c0009274:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0009278:	c1 e9 10             	shr    ecx,0x10
c000927b:	c1 e8 18             	shr    eax,0x18
c000927e:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0009281:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0009284:	c3                   	ret    
c0009285:	90                   	nop

c0009286 <GDTEntry::setLimit(unsigned int)>:
c0009286:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000928a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000928e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0009291:	66 89 01             	mov    WORD PTR [ecx],ax
c0009294:	83 e2 f0             	and    edx,0xfffffff0
c0009297:	c1 e8 10             	shr    eax,0x10
c000929a:	83 e0 0f             	and    eax,0xf
c000929d:	09 d0                	or     eax,edx
c000929f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00092a2:	c3                   	ret    
c00092a3:	90                   	nop

c00092a4 <GDT::GDT()>:
c00092a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092a8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00092ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00092b8:	90                   	nop
c00092b9:	c3                   	ret    

c00092ba <GDT::addEntry(GDTEntry)>:
c00092ba:	53                   	push   ebx
c00092bb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00092bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00092c3:	8b 02                	mov    eax,DWORD PTR [edx]
c00092c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00092c9:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00092cd:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00092d1:	8d 48 01             	lea    ecx,[eax+0x1]
c00092d4:	c1 e0 03             	shl    eax,0x3
c00092d7:	89 0a                	mov    DWORD PTR [edx],ecx
c00092d9:	5b                   	pop    ebx
c00092da:	c3                   	ret    
c00092db:	90                   	nop

c00092dc <GDT::getNumberOfEntries()>:
c00092dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00092e2:	c3                   	ret    
c00092e3:	90                   	nop

c00092e4 <GDT::flush()>:
c00092e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092e8:	8b 10                	mov    edx,DWORD PTR [eax]
c00092ea:	83 c0 04             	add    eax,0x4
c00092ed:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00092f4:	a3 b2 7c 02 c0       	mov    ds:0xc0027cb2,eax
c00092f9:	66 89 15 b0 7c 02 c0 	mov    WORD PTR ds:0xc0027cb0,dx
c0009300:	e9 80 70 ff ff       	jmp    c0000385 <loadGDT>
c0009305:	90                   	nop

c0009306 <GDT::setup()>:
c0009306:	55                   	push   ebp
c0009307:	57                   	push   edi
c0009308:	56                   	push   esi
c0009309:	53                   	push   ebx
c000930a:	83 ec 3c             	sub    esp,0x3c
c000930d:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0009311:	6a 00                	push   0x0
c0009313:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0009317:	53                   	push   ebx
c0009318:	e8 4d ff ff ff       	call   c000926a <GDTEntry::setBase(unsigned int)>
c000931d:	6a 00                	push   0x0
c000931f:	53                   	push   ebx
c0009320:	e8 61 ff ff ff       	call   c0009286 <GDTEntry::setLimit(unsigned int)>
c0009325:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000932d:	6a 00                	push   0x0
c000932f:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0009333:	53                   	push   ebx
c0009334:	e8 31 ff ff ff       	call   c000926a <GDTEntry::setBase(unsigned int)>
c0009339:	68 ff ff ff 00       	push   0xffffff
c000933e:	53                   	push   ebx
c000933f:	e8 42 ff ff ff       	call   c0009286 <GDTEntry::setLimit(unsigned int)>
c0009344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0009348:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000934d:	0d 00 9a c0 00       	or     eax,0xc09a00
c0009352:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009356:	83 c4 20             	add    esp,0x20
c0009359:	6a 00                	push   0x0
c000935b:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000935f:	53                   	push   ebx
c0009360:	e8 05 ff ff ff       	call   c000926a <GDTEntry::setBase(unsigned int)>
c0009365:	68 ff ff ff 00       	push   0xffffff
c000936a:	53                   	push   ebx
c000936b:	e8 16 ff ff ff       	call   c0009286 <GDTEntry::setLimit(unsigned int)>
c0009370:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0009374:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009378:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000937c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009380:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009384:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009389:	0d 00 92 c0 00       	or     eax,0xc09200
c000938e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009392:	89 d8                	mov    eax,ebx
c0009394:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009398:	80 cc 60             	or     ah,0x60
c000939b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000939f:	83 c4 0c             	add    esp,0xc
c00093a2:	89 f8                	mov    eax,edi
c00093a4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00093a8:	80 cc 60             	or     ah,0x60
c00093ab:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00093af:	89 c7                	mov    edi,eax
c00093b1:	55                   	push   ebp
c00093b2:	e8 03 ff ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093b7:	83 c4 0c             	add    esp,0xc
c00093ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00093be:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00093c2:	55                   	push   ebp
c00093c3:	e8 f2 fe ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093c8:	83 c4 0c             	add    esp,0xc
c00093cb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00093cf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00093d3:	55                   	push   ebp
c00093d4:	e8 e1 fe ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093d9:	83 c4 0c             	add    esp,0xc
c00093dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00093e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00093e4:	53                   	push   ebx
c00093e5:	51                   	push   ecx
c00093e6:	55                   	push   ebp
c00093e7:	e8 ce fe ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093ec:	83 c4 0c             	add    esp,0xc
c00093ef:	57                   	push   edi
c00093f0:	56                   	push   esi
c00093f1:	55                   	push   ebp
c00093f2:	e8 c3 fe ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093f7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093fa:	e8 e5 fe ff ff       	call   c00092e4 <GDT::flush()>
c00093ff:	83 c4 4c             	add    esp,0x4c
c0009402:	5b                   	pop    ebx
c0009403:	5e                   	pop    esi
c0009404:	5f                   	pop    edi
c0009405:	5d                   	pop    ebp
c0009406:	c3                   	ret    

c0009407 <idleFunction(void*)>:
c0009407:	53                   	push   ebx
c0009408:	83 ec 08             	sub    esp,0x8
c000940b:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0009410:	48                   	dec    eax
c0009411:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0009416:	75 01                	jne    c0009419 <idleFunction(void*)+0x12>
c0009418:	fb                   	sti    
c0009419:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000941e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0009424:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000942b:	74 3c                	je     c0009469 <idleFunction(void*)+0x62>
c000942d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0009434:	74 33                	je     c0009469 <idleFunction(void*)+0x62>
c0009436:	31 db                	xor    ebx,ebx
c0009438:	52                   	push   edx
c0009439:	52                   	push   edx
c000943a:	68 e1 00 00 00       	push   0xe1
c000943f:	50                   	push   eax
c0009440:	e8 e5 fa ff ff       	call   c0008f2a <Computer::rdmsr(unsigned int)>
c0009445:	53                   	push   ebx
c0009446:	83 e0 02             	and    eax,0x2
c0009449:	50                   	push   eax
c000944a:	68 e1 00 00 00       	push   0xe1
c000944f:	ff 35 a8 7c 02 c0    	push   DWORD PTR ds:0xc0027ca8
c0009455:	e8 fc fa ff ff       	call   c0008f56 <Computer::wrmsr(unsigned int, unsigned long long)>
c000945a:	83 c4 20             	add    esp,0x20
c000945d:	e8 52 6d ff ff       	call   c00001b4 <doTPAUSE>
c0009462:	e8 9f 93 01 00       	call   c0022806 <idleCommon()>
c0009467:	eb f4                	jmp    c000945d <idleFunction(void*)+0x56>
c0009469:	fb                   	sti    
c000946a:	f4                   	hlt    
c000946b:	e8 96 93 01 00       	call   c0022806 <idleCommon()>
c0009470:	eb f7                	jmp    c0009469 <idleFunction(void*)+0x62>
c0009472:	66 90                	xchg   ax,ax

c0009474 <IDTEntry::IDTEntry(bool)>:
c0009474:	83 ec 04             	sub    esp,0x4
c0009477:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000947b:	88 04 24             	mov    BYTE PTR [esp],al
c000947e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009482:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0009488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000948c:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009494:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009497:	83 e2 f0             	and    edx,0xfffffff0
c000949a:	83 ca 0e             	or     edx,0xe
c000949d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00094a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094a4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00094a7:	83 e2 ef             	and    edx,0xffffffef
c00094aa:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00094ad:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00094b1:	74 05                	je     c00094b8 <IDTEntry::IDTEntry(bool)+0x44>
c00094b3:	b2 03                	mov    dl,0x3
c00094b5:	eb 05                	jmp    c00094bc <IDTEntry::IDTEntry(bool)+0x48>
c00094b7:	90                   	nop
c00094b8:	b2 00                	mov    dl,0x0
c00094ba:	66 90                	xchg   ax,ax
c00094bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094c0:	83 e2 03             	and    edx,0x3
c00094c3:	88 d1                	mov    cl,dl
c00094c5:	c1 e1 05             	shl    ecx,0x5
c00094c8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00094cb:	83 e2 9f             	and    edx,0xffffff9f
c00094ce:	09 ca                	or     edx,ecx
c00094d0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00094d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094d7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00094da:	83 ca 80             	or     edx,0xffffff80
c00094dd:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00094e0:	90                   	nop
c00094e1:	83 c4 04             	add    esp,0x4
c00094e4:	c3                   	ret    
c00094e5:	90                   	nop

c00094e6 <IDTEntry::setOffset(unsigned int)>:
c00094e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00094ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094ee:	66 89 02             	mov    WORD PTR [edx],ax
c00094f1:	c1 e8 10             	shr    eax,0x10
c00094f4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00094f8:	c3                   	ret    
c00094f9:	90                   	nop
c00094fa:	66 90                	xchg   ax,ax

c00094fc <IDT::IDT()>:
c00094fc:	90                   	nop
c00094fd:	c3                   	ret    

c00094fe <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00094fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009502:	83 c0 30             	add    eax,0x30
c0009505:	c3                   	ret    

c0009506 <IDT::addEntry(IDTEntry, int)>:
c0009506:	53                   	push   ebx
c0009507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000950b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000950f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009513:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009517:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000951a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000951e:	5b                   	pop    ebx
c000951f:	c3                   	ret    

c0009520 <IDT::addEntry(int, void (*)(), bool)>:
c0009520:	53                   	push   ebx
c0009521:	83 ec 10             	sub    esp,0x10
c0009524:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0009529:	50                   	push   eax
c000952a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000952e:	53                   	push   ebx
c000952f:	e8 40 ff ff ff       	call   c0009474 <IDTEntry::IDTEntry(bool)>
c0009534:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009538:	53                   	push   ebx
c0009539:	e8 a8 ff ff ff       	call   c00094e6 <IDTEntry::setOffset(unsigned int)>
c000953e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009542:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009546:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000954a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000954e:	e8 b3 ff ff ff       	call   c0009506 <IDT::addEntry(IDTEntry, int)>
c0009553:	83 c4 30             	add    esp,0x30
c0009556:	5b                   	pop    ebx
c0009557:	c3                   	ret    

c0009558 <IDT::flush()>:
c0009558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000955c:	66 c7 05 b8 7c 02 c0 ff 07 	mov    WORD PTR ds:0xc0027cb8,0x7ff
c0009565:	a3 ba 7c 02 c0       	mov    ds:0xc0027cba,eax
c000956a:	0f 01 1d b8 7c 02 c0 	lidtd  ds:0xc0027cb8
c0009571:	c3                   	ret    

c0009572 <IDT::setup()>:
c0009572:	57                   	push   edi
c0009573:	56                   	push   esi
c0009574:	53                   	push   ebx
c0009575:	83 ec 10             	sub    esp,0x10
c0009578:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000957c:	6a 00                	push   0x0
c000957e:	68 a5 03 00 c0       	push   0xc00003a5
c0009583:	6a 00                	push   0x0
c0009585:	53                   	push   ebx
c0009586:	e8 95 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000958b:	6a 00                	push   0x0
c000958d:	68 b5 03 00 c0       	push   0xc00003b5
c0009592:	6a 01                	push   0x1
c0009594:	53                   	push   ebx
c0009595:	e8 86 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000959a:	83 c4 20             	add    esp,0x20
c000959d:	6a 00                	push   0x0
c000959f:	68 bf 03 00 c0       	push   0xc00003bf
c00095a4:	6a 02                	push   0x2
c00095a6:	53                   	push   ebx
c00095a7:	e8 74 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095ac:	6a 00                	push   0x0
c00095ae:	68 c9 03 00 c0       	push   0xc00003c9
c00095b3:	6a 03                	push   0x3
c00095b5:	53                   	push   ebx
c00095b6:	e8 65 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095bb:	83 c4 20             	add    esp,0x20
c00095be:	6a 00                	push   0x0
c00095c0:	68 d3 03 00 c0       	push   0xc00003d3
c00095c5:	6a 04                	push   0x4
c00095c7:	53                   	push   ebx
c00095c8:	e8 53 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095cd:	6a 00                	push   0x0
c00095cf:	68 dd 03 00 c0       	push   0xc00003dd
c00095d4:	6a 05                	push   0x5
c00095d6:	53                   	push   ebx
c00095d7:	e8 44 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095dc:	83 c4 20             	add    esp,0x20
c00095df:	6a 00                	push   0x0
c00095e1:	68 e7 03 00 c0       	push   0xc00003e7
c00095e6:	6a 06                	push   0x6
c00095e8:	53                   	push   ebx
c00095e9:	e8 32 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095ee:	6a 00                	push   0x0
c00095f0:	68 f1 03 00 c0       	push   0xc00003f1
c00095f5:	6a 07                	push   0x7
c00095f7:	53                   	push   ebx
c00095f8:	e8 23 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095fd:	83 c4 20             	add    esp,0x20
c0009600:	6a 00                	push   0x0
c0009602:	68 fb 03 00 c0       	push   0xc00003fb
c0009607:	6a 08                	push   0x8
c0009609:	53                   	push   ebx
c000960a:	e8 11 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000960f:	6a 00                	push   0x0
c0009611:	68 03 04 00 c0       	push   0xc0000403
c0009616:	6a 09                	push   0x9
c0009618:	53                   	push   ebx
c0009619:	e8 02 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000961e:	83 c4 20             	add    esp,0x20
c0009621:	6a 00                	push   0x0
c0009623:	68 0d 04 00 c0       	push   0xc000040d
c0009628:	6a 0a                	push   0xa
c000962a:	53                   	push   ebx
c000962b:	e8 f0 fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009630:	6a 00                	push   0x0
c0009632:	68 15 04 00 c0       	push   0xc0000415
c0009637:	6a 0b                	push   0xb
c0009639:	53                   	push   ebx
c000963a:	e8 e1 fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000963f:	83 c4 20             	add    esp,0x20
c0009642:	6a 00                	push   0x0
c0009644:	68 1d 04 00 c0       	push   0xc000041d
c0009649:	6a 0c                	push   0xc
c000964b:	53                   	push   ebx
c000964c:	e8 cf fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009651:	6a 00                	push   0x0
c0009653:	68 25 04 00 c0       	push   0xc0000425
c0009658:	6a 0d                	push   0xd
c000965a:	53                   	push   ebx
c000965b:	e8 c0 fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009660:	83 c4 20             	add    esp,0x20
c0009663:	6a 00                	push   0x0
c0009665:	68 2d 04 00 c0       	push   0xc000042d
c000966a:	6a 0e                	push   0xe
c000966c:	53                   	push   ebx
c000966d:	e8 ae fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009672:	6a 00                	push   0x0
c0009674:	68 35 04 00 c0       	push   0xc0000435
c0009679:	6a 0f                	push   0xf
c000967b:	53                   	push   ebx
c000967c:	e8 9f fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009681:	83 c4 20             	add    esp,0x20
c0009684:	6a 00                	push   0x0
c0009686:	68 3f 04 00 c0       	push   0xc000043f
c000968b:	6a 10                	push   0x10
c000968d:	53                   	push   ebx
c000968e:	e8 8d fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009693:	6a 00                	push   0x0
c0009695:	68 49 04 00 c0       	push   0xc0000449
c000969a:	6a 11                	push   0x11
c000969c:	53                   	push   ebx
c000969d:	e8 7e fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096a2:	83 c4 20             	add    esp,0x20
c00096a5:	6a 00                	push   0x0
c00096a7:	68 53 04 00 c0       	push   0xc0000453
c00096ac:	6a 12                	push   0x12
c00096ae:	53                   	push   ebx
c00096af:	e8 6c fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096b4:	6a 01                	push   0x1
c00096b6:	68 ed 04 00 c0       	push   0xc00004ed
c00096bb:	6a 60                	push   0x60
c00096bd:	53                   	push   ebx
c00096be:	e8 5d fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096c3:	83 c4 20             	add    esp,0x20
c00096c6:	6a 00                	push   0x0
c00096c8:	68 f4 04 00 c0       	push   0xc00004f4
c00096cd:	6a 20                	push   0x20
c00096cf:	53                   	push   ebx
c00096d0:	e8 4b fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096d5:	6a 00                	push   0x0
c00096d7:	68 df 04 00 c0       	push   0xc00004df
c00096dc:	6a 21                	push   0x21
c00096de:	53                   	push   ebx
c00096df:	e8 3c fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096e4:	83 c4 20             	add    esp,0x20
c00096e7:	6a 00                	push   0x0
c00096e9:	68 e6 04 00 c0       	push   0xc00004e6
c00096ee:	6a 22                	push   0x22
c00096f0:	53                   	push   ebx
c00096f1:	e8 2a fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096f6:	6a 00                	push   0x0
c00096f8:	68 5d 04 00 c0       	push   0xc000045d
c00096fd:	6a 23                	push   0x23
c00096ff:	53                   	push   ebx
c0009700:	e8 1b fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009705:	83 c4 20             	add    esp,0x20
c0009708:	6a 00                	push   0x0
c000970a:	68 67 04 00 c0       	push   0xc0000467
c000970f:	6a 24                	push   0x24
c0009711:	53                   	push   ebx
c0009712:	e8 09 fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009717:	6a 00                	push   0x0
c0009719:	68 71 04 00 c0       	push   0xc0000471
c000971e:	6a 25                	push   0x25
c0009720:	53                   	push   ebx
c0009721:	e8 fa fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009726:	83 c4 20             	add    esp,0x20
c0009729:	6a 00                	push   0x0
c000972b:	68 7b 04 00 c0       	push   0xc000047b
c0009730:	6a 26                	push   0x26
c0009732:	53                   	push   ebx
c0009733:	e8 e8 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009738:	6a 00                	push   0x0
c000973a:	68 85 04 00 c0       	push   0xc0000485
c000973f:	6a 27                	push   0x27
c0009741:	53                   	push   ebx
c0009742:	e8 d9 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009747:	83 c4 20             	add    esp,0x20
c000974a:	6a 00                	push   0x0
c000974c:	68 8f 04 00 c0       	push   0xc000048f
c0009751:	6a 28                	push   0x28
c0009753:	53                   	push   ebx
c0009754:	e8 c7 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009759:	6a 00                	push   0x0
c000975b:	68 99 04 00 c0       	push   0xc0000499
c0009760:	6a 29                	push   0x29
c0009762:	53                   	push   ebx
c0009763:	e8 b8 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009768:	83 c4 20             	add    esp,0x20
c000976b:	6a 00                	push   0x0
c000976d:	68 a3 04 00 c0       	push   0xc00004a3
c0009772:	6a 2a                	push   0x2a
c0009774:	53                   	push   ebx
c0009775:	e8 a6 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000977a:	6a 00                	push   0x0
c000977c:	68 ad 04 00 c0       	push   0xc00004ad
c0009781:	6a 2b                	push   0x2b
c0009783:	53                   	push   ebx
c0009784:	e8 97 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009789:	83 c4 20             	add    esp,0x20
c000978c:	6a 00                	push   0x0
c000978e:	68 b7 04 00 c0       	push   0xc00004b7
c0009793:	6a 2c                	push   0x2c
c0009795:	53                   	push   ebx
c0009796:	e8 85 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000979b:	6a 00                	push   0x0
c000979d:	68 c1 04 00 c0       	push   0xc00004c1
c00097a2:	6a 2d                	push   0x2d
c00097a4:	53                   	push   ebx
c00097a5:	e8 76 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097aa:	83 c4 20             	add    esp,0x20
c00097ad:	6a 00                	push   0x0
c00097af:	68 cb 04 00 c0       	push   0xc00004cb
c00097b4:	6a 2e                	push   0x2e
c00097b6:	53                   	push   ebx
c00097b7:	e8 64 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097bc:	6a 00                	push   0x0
c00097be:	68 d5 04 00 c0       	push   0xc00004d5
c00097c3:	6a 2f                	push   0x2f
c00097c5:	53                   	push   ebx
c00097c6:	e8 55 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097cb:	83 c4 20             	add    esp,0x20
c00097ce:	6a 00                	push   0x0
c00097d0:	68 2b 05 00 c0       	push   0xc000052b
c00097d5:	6a 30                	push   0x30
c00097d7:	53                   	push   ebx
c00097d8:	e8 43 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097dd:	6a 00                	push   0x0
c00097df:	68 35 05 00 c0       	push   0xc0000535
c00097e4:	6a 31                	push   0x31
c00097e6:	53                   	push   ebx
c00097e7:	e8 34 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097ec:	83 c4 20             	add    esp,0x20
c00097ef:	6a 00                	push   0x0
c00097f1:	68 3f 05 00 c0       	push   0xc000053f
c00097f6:	6a 32                	push   0x32
c00097f8:	53                   	push   ebx
c00097f9:	e8 22 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097fe:	6a 00                	push   0x0
c0009800:	68 49 05 00 c0       	push   0xc0000549
c0009805:	6a 33                	push   0x33
c0009807:	53                   	push   ebx
c0009808:	e8 13 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000980d:	83 c4 20             	add    esp,0x20
c0009810:	6a 00                	push   0x0
c0009812:	68 53 05 00 c0       	push   0xc0000553
c0009817:	6a 34                	push   0x34
c0009819:	53                   	push   ebx
c000981a:	e8 01 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000981f:	6a 00                	push   0x0
c0009821:	68 5d 05 00 c0       	push   0xc000055d
c0009826:	6a 35                	push   0x35
c0009828:	53                   	push   ebx
c0009829:	e8 f2 fc ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000982e:	83 c4 20             	add    esp,0x20
c0009831:	6a 00                	push   0x0
c0009833:	68 67 05 00 c0       	push   0xc0000567
c0009838:	6a 36                	push   0x36
c000983a:	53                   	push   ebx
c000983b:	e8 e0 fc ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009840:	6a 00                	push   0x0
c0009842:	68 71 05 00 c0       	push   0xc0000571
c0009847:	6a 37                	push   0x37
c0009849:	53                   	push   ebx
c000984a:	e8 d1 fc ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000984f:	83 c4 1c             	add    esp,0x1c
c0009852:	6a 03                	push   0x3
c0009854:	6a 02                	push   0x2
c0009856:	ff 35 d0 7d 02 c0    	push   DWORD PTR ds:0xc0027dd0
c000985c:	e8 21 29 00 00       	call   c000c182 <VAS::allocatePages(int, int)>
c0009861:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009868:	89 c6                	mov    esi,eax
c000986a:	e8 a0 01 00 00       	call   c0009a0f <malloc>
c000986f:	81 c6 00 20 00 00    	add    esi,0x2000
c0009875:	89 04 24             	mov    DWORD PTR [esp],eax
c0009878:	89 c7                	mov    edi,eax
c000987a:	e8 9d 1a 00 00       	call   c000b31c <TSS::TSS()>
c000987f:	83 c4 0c             	add    esp,0xc
c0009882:	68 fb 03 00 c0       	push   0xc00003fb
c0009887:	56                   	push   esi
c0009888:	57                   	push   edi
c0009889:	e8 d2 1a 00 00       	call   c000b360 <TSS::setup(unsigned long, unsigned long)>
c000988e:	89 c6                	mov    esi,eax
c0009890:	58                   	pop    eax
c0009891:	5a                   	pop    edx
c0009892:	6a 00                	push   0x0
c0009894:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009898:	50                   	push   eax
c0009899:	e8 d6 fb ff ff       	call   c0009474 <IDTEntry::IDTEntry(bool)>
c000989e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00098a2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00098a7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00098ae:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c00098b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00098b8:	80 ce 05             	or     dh,0x5
c00098bb:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c00098be:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00098c6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00098c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00098cc:	e8 87 fc ff ff       	call   c0009558 <IDT::flush()>
c00098d1:	83 c4 20             	add    esp,0x20
c00098d4:	5b                   	pop    ebx
c00098d5:	5e                   	pop    esi
c00098d6:	5f                   	pop    edi
c00098d7:	c3                   	ret    

c00098d8 <sbrk>:
c00098d8:	55                   	push   ebp
c00098d9:	57                   	push   edi
c00098da:	56                   	push   esi
c00098db:	53                   	push   ebx
c00098dc:	83 ec 24             	sub    esp,0x24
c00098df:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00098e3:	53                   	push   ebx
c00098e4:	68 f8 3d 02 c0       	push   0xc0023df8
c00098e9:	e8 11 34 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00098ee:	83 c4 10             	add    esp,0x10
c00098f1:	85 db                	test   ebx,ebx
c00098f3:	74 5f                	je     c0009954 <sbrk+0x7c>
c00098f5:	78 64                	js     c000995b <sbrk+0x83>
c00098f7:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c00098fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009900:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c0009906:	89 dd                	mov    ebp,ebx
c0009908:	78 69                	js     c0009973 <sbrk+0x9b>
c000990a:	c1 fd 0c             	sar    ebp,0xc
c000990d:	bb 00 00 00 00       	mov    ebx,0x0
c0009912:	8b 35 d0 7d 02 c0    	mov    esi,DWORD PTR ds:0xc0027dd0
c0009918:	8b 3d 04 6f 02 c0    	mov    edi,DWORD PTR ds:0xc0026f04
c000991e:	e8 a3 07 00 00       	call   c000a0c6 <Phys::allocatePage()>
c0009923:	68 01 04 00 00       	push   0x401
c0009928:	57                   	push   edi
c0009929:	50                   	push   eax
c000992a:	56                   	push   esi
c000992b:	e8 50 27 00 00       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009930:	81 05 04 6f 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0026f04,0x1000
c000993a:	43                   	inc    ebx
c000993b:	83 c4 10             	add    esp,0x10
c000993e:	39 dd                	cmp    ebp,ebx
c0009940:	75 d0                	jne    c0009912 <sbrk+0x3a>
c0009942:	0f 20 d8             	mov    eax,cr3
c0009945:	0f 22 d8             	mov    cr3,eax
c0009948:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000994c:	83 c4 1c             	add    esp,0x1c
c000994f:	5b                   	pop    ebx
c0009950:	5e                   	pop    esi
c0009951:	5f                   	pop    edi
c0009952:	5d                   	pop    ebp
c0009953:	c3                   	ret    
c0009954:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c0009959:	eb f1                	jmp    c000994c <sbrk+0x74>
c000995b:	83 ec 08             	sub    esp,0x8
c000995e:	53                   	push   ebx
c000995f:	68 24 3e 02 c0       	push   0xc0023e24
c0009964:	e8 96 33 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009969:	83 c4 10             	add    esp,0x10
c000996c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009971:	eb d9                	jmp    c000994c <sbrk+0x74>
c0009973:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c0009979:	eb 8f                	jmp    c000990a <sbrk+0x32>

c000997b <mmap>:
c000997b:	83 ec 18             	sub    esp,0x18
c000997e:	68 16 3e 02 c0       	push   0xc0023e16
c0009983:	e8 27 af 00 00       	call   c00148af <Krnl::panic(char const*)>
c0009988:	b8 00 00 00 00       	mov    eax,0x0
c000998d:	83 c4 1c             	add    esp,0x1c
c0009990:	c3                   	ret    

c0009991 <munmap>:
c0009991:	83 ec 18             	sub    esp,0x18
c0009994:	68 1b 3e 02 c0       	push   0xc0023e1b
c0009999:	e8 11 af 00 00       	call   c00148af <Krnl::panic(char const*)>
c000999e:	b8 00 00 00 00       	mov    eax,0x0
c00099a3:	83 c4 1c             	add    esp,0x1c
c00099a6:	c3                   	ret    

c00099a7 <liballoc_lock()>:
c00099a7:	fa                   	cli    
c00099a8:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c00099ae:	b8 00 00 00 00       	mov    eax,0x0
c00099b3:	c3                   	ret    

c00099b4 <liballoc_unlock()>:
c00099b4:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c00099b9:	48                   	dec    eax
c00099ba:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c00099bf:	75 01                	jne    c00099c2 <liballoc_unlock()+0xe>
c00099c1:	fb                   	sti    
c00099c2:	b8 00 00 00 00       	mov    eax,0x0
c00099c7:	c3                   	ret    

c00099c8 <liballoc_alloc(int)>:
c00099c8:	83 ec 10             	sub    esp,0x10
c00099cb:	6a 01                	push   0x1
c00099cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00099d1:	ff 35 d0 7d 02 c0    	push   DWORD PTR ds:0xc0027dd0
c00099d7:	e8 a6 27 00 00       	call   c000c182 <VAS::allocatePages(int, int)>
c00099dc:	83 c4 1c             	add    esp,0x1c
c00099df:	c3                   	ret    

c00099e0 <liballoc_free(void*, int)>:
c00099e0:	83 ec 14             	sub    esp,0x14
c00099e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00099e7:	ff 35 d0 7d 02 c0    	push   DWORD PTR ds:0xc0027dd0
c00099ed:	e8 3a 24 00 00       	call   c000be2c <VAS::freeAllocatedPages(unsigned long)>
c00099f2:	b8 00 00 00 00       	mov    eax,0x0
c00099f7:	83 c4 1c             	add    esp,0x1c
c00099fa:	c3                   	ret    

c00099fb <realloc>:
c00099fb:	83 ec 14             	sub    esp,0x14
c00099fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a06:	e8 55 7b ff ff       	call   c0001560 <dlrealloc>
c0009a0b:	83 c4 1c             	add    esp,0x1c
c0009a0e:	c3                   	ret    

c0009a0f <malloc>:
c0009a0f:	83 ec 18             	sub    esp,0x18
c0009a12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a16:	e8 08 76 ff ff       	call   c0001023 <dlmalloc>
c0009a1b:	83 c4 1c             	add    esp,0x1c
c0009a1e:	c3                   	ret    

c0009a1f <free>:
c0009a1f:	83 ec 18             	sub    esp,0x18
c0009a22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a26:	e8 9d 72 ff ff       	call   c0000cc8 <dlfree>
c0009a2b:	83 c4 1c             	add    esp,0x1c
c0009a2e:	c3                   	ret    

c0009a2f <rfree>:
c0009a2f:	83 ec 18             	sub    esp,0x18
c0009a32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a36:	e8 8d 72 ff ff       	call   c0000cc8 <dlfree>
c0009a3b:	83 c4 1c             	add    esp,0x1c
c0009a3e:	c3                   	ret    

c0009a3f <calloc>:
c0009a3f:	56                   	push   esi
c0009a40:	53                   	push   ebx
c0009a41:	83 ec 10             	sub    esp,0x10
c0009a44:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009a48:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009a4d:	53                   	push   ebx
c0009a4e:	e8 bc ff ff ff       	call   c0009a0f <malloc>
c0009a53:	89 c6                	mov    esi,eax
c0009a55:	83 c4 0c             	add    esp,0xc
c0009a58:	53                   	push   ebx
c0009a59:	6a 00                	push   0x0
c0009a5b:	50                   	push   eax
c0009a5c:	e8 23 6c ff ff       	call   c0000684 <memset>
c0009a61:	89 f0                	mov    eax,esi
c0009a63:	83 c4 14             	add    esp,0x14
c0009a66:	5b                   	pop    ebx
c0009a67:	5e                   	pop    esi
c0009a68:	c3                   	ret    

c0009a69 <Krnl::setBootMessage(char const*)>:
c0009a69:	57                   	push   edi
c0009a6a:	56                   	push   esi
c0009a6b:	53                   	push   ebx
c0009a6c:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009a72:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009a79:	68 9e 00 00 00       	push   0x9e
c0009a7e:	6a 00                	push   0x0
c0009a80:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009a84:	56                   	push   esi
c0009a85:	e8 fa 6b ff ff       	call   c0000684 <memset>
c0009a8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009a8d:	e8 0e 6c ff ff       	call   c00006a0 <strlen>
c0009a92:	ba 50 00 00 00       	mov    edx,0x50
c0009a97:	83 c4 10             	add    esp,0x10
c0009a9a:	29 c2                	sub    edx,eax
c0009a9c:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009aa0:	d1 ea                	shr    edx,1
c0009aa2:	84 c0                	test   al,al
c0009aa4:	74 19                	je     c0009abf <Krnl::setBootMessage(char const*)+0x56>
c0009aa6:	01 d2                	add    edx,edx
c0009aa8:	43                   	inc    ebx
c0009aa9:	01 f2                	add    edx,esi
c0009aab:	80 cc 0f             	or     ah,0xf
c0009aae:	83 c2 02             	add    edx,0x2
c0009ab1:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009ab5:	43                   	inc    ebx
c0009ab6:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009abb:	84 c0                	test   al,al
c0009abd:	75 ec                	jne    c0009aab <Krnl::setBootMessage(char const*)+0x42>
c0009abf:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009ac4:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009ac9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009acb:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009ad1:	5b                   	pop    ebx
c0009ad2:	5e                   	pop    esi
c0009ad3:	5f                   	pop    edi
c0009ad4:	c3                   	ret    

c0009ad5 <kernel_main>:
c0009ad5:	57                   	push   edi
c0009ad6:	56                   	push   esi
c0009ad7:	53                   	push   ebx
c0009ad8:	83 ec 20             	sub    esp,0x20
c0009adb:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009ae0:	a3 c0 7c 02 c0       	mov    ds:0xc0027cc0,eax
c0009ae5:	f6 c4 08             	test   ah,0x8
c0009ae8:	0f 85 7a 03 00 00    	jne    c0009e68 <kernel_main+0x393>
c0009aee:	31 f6                	xor    esi,esi
c0009af0:	bf f9 03 00 00       	mov    edi,0x3f9
c0009af5:	89 f0                	mov    eax,esi
c0009af7:	89 fa                	mov    edx,edi
c0009af9:	ee                   	out    dx,al
c0009afa:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009aff:	b0 80                	mov    al,0x80
c0009b01:	89 da                	mov    edx,ebx
c0009b03:	ee                   	out    dx,al
c0009b04:	b1 03                	mov    cl,0x3
c0009b06:	ba f8 03 00 00       	mov    edx,0x3f8
c0009b0b:	88 c8                	mov    al,cl
c0009b0d:	ee                   	out    dx,al
c0009b0e:	89 f0                	mov    eax,esi
c0009b10:	89 fa                	mov    edx,edi
c0009b12:	ee                   	out    dx,al
c0009b13:	88 c8                	mov    al,cl
c0009b15:	89 da                	mov    edx,ebx
c0009b17:	ee                   	out    dx,al
c0009b18:	b0 c7                	mov    al,0xc7
c0009b1a:	ba fa 03 00 00       	mov    edx,0x3fa
c0009b1f:	ee                   	out    dx,al
c0009b20:	b0 0b                	mov    al,0xb
c0009b22:	ba fc 03 00 00       	mov    edx,0x3fc
c0009b27:	ee                   	out    dx,al
c0009b28:	83 ec 0c             	sub    esp,0xc
c0009b2b:	68 54 3e 02 c0       	push   0xc0023e54
c0009b30:	e8 ca 31 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009b35:	83 c4 10             	add    esp,0x10
c0009b38:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0009b3f:	0f 85 eb 02 00 00    	jne    c0009e30 <kernel_main+0x35b>
c0009b45:	e8 d2 0c 00 00       	call   c000a81c <installVgaTextImplementation()>
c0009b4a:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0009b51:	0f 85 94 02 00 00    	jne    c0009deb <kernel_main+0x316>
c0009b57:	0f b6 05 20 6f 02 c0 	movzx  eax,BYTE PTR ds:0xc0026f20
c0009b5e:	84 c0                	test   al,al
c0009b60:	74 7b                	je     c0009bdd <kernel_main+0x108>
c0009b62:	31 db                	xor    ebx,ebx
c0009b64:	bf 0a 00 00 00       	mov    edi,0xa
c0009b69:	be 05 00 00 00       	mov    esi,0x5
c0009b6e:	31 c9                	xor    ecx,ecx
c0009b70:	eb 2a                	jmp    c0009b9c <kernel_main+0xc7>
c0009b72:	3c 0d                	cmp    al,0xd
c0009b74:	74 1a                	je     c0009b90 <kernel_main+0xbb>
c0009b76:	3c 0a                	cmp    al,0xa
c0009b78:	74 40                	je     c0009bba <kernel_main+0xe5>
c0009b7a:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009b7d:	80 cc 0e             	or     ah,0xe
c0009b80:	c1 e2 04             	shl    edx,0x4
c0009b83:	01 ca                	add    edx,ecx
c0009b85:	41                   	inc    ecx
c0009b86:	01 fa                	add    edx,edi
c0009b88:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009b90:	43                   	inc    ebx
c0009b91:	0f b6 83 20 6f 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd90e0]
c0009b98:	84 c0                	test   al,al
c0009b9a:	74 32                	je     c0009bce <kernel_main+0xf9>
c0009b9c:	80 b9 56 6f 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd90aa],0xdb
c0009ba3:	75 cd                	jne    c0009b72 <kernel_main+0x9d>
c0009ba5:	0f b6 91 55 6f 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd90ab]
c0009bac:	83 e2 fe             	and    edx,0xfffffffe
c0009baf:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009bb5:	75 bb                	jne    c0009b72 <kernel_main+0x9d>
c0009bb7:	47                   	inc    edi
c0009bb8:	eb b8                	jmp    c0009b72 <kernel_main+0x9d>
c0009bba:	43                   	inc    ebx
c0009bbb:	46                   	inc    esi
c0009bbc:	31 c9                	xor    ecx,ecx
c0009bbe:	0f b6 83 20 6f 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd90e0]
c0009bc5:	bf 0a 00 00 00       	mov    edi,0xa
c0009bca:	84 c0                	test   al,al
c0009bcc:	75 ce                	jne    c0009b9c <kernel_main+0xc7>
c0009bce:	8b 15 c0 7c 02 c0    	mov    edx,DWORD PTR ds:0xc0027cc0
c0009bd4:	80 e6 08             	and    dh,0x8
c0009bd7:	0f 85 bf 00 00 00    	jne    c0009c9c <kernel_main+0x1c7>
c0009bdd:	83 ec 0c             	sub    esp,0xc
c0009be0:	68 f0 3e 02 c0       	push   0xc0023ef0
c0009be5:	e8 7f fe ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009bea:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009bef:	05 ff 0f 00 00       	add    eax,0xfff
c0009bf4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009bf9:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bfc:	e8 44 06 00 00       	call   c000a245 <Phys::physicalMemorySetup(unsigned int)>
c0009c01:	83 c4 10             	add    esp,0x10
c0009c04:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0009c0b:	0f 85 a2 01 00 00    	jne    c0009db3 <kernel_main+0x2de>
c0009c11:	e8 82 1f 00 00       	call   c000bb98 <Virt::virtualMemorySetup()>
c0009c16:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0009c1d:	0f 85 58 01 00 00    	jne    c0009d7b <kernel_main+0x2a6>
c0009c23:	83 ec 0c             	sub    esp,0xc
c0009c26:	8d 74 24 18          	lea    esi,[esp+0x18]
c0009c2a:	56                   	push   esi
c0009c2b:	e8 24 20 00 00       	call   c000bc54 <VAS::VAS()>
c0009c30:	83 c4 10             	add    esp,0x10
c0009c33:	89 35 d0 7d 02 c0    	mov    DWORD PTR ds:0xc0027dd0,esi
c0009c39:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0009c40:	0f 85 fd 00 00 00    	jne    c0009d43 <kernel_main+0x26e>
c0009c46:	e8 d5 63 ff ff       	call   c0000020 <callGlobalConstructors>
c0009c4b:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0009c52:	0f 85 b3 00 00 00    	jne    c0009d0b <kernel_main+0x236>
c0009c58:	83 ec 0c             	sub    esp,0xc
c0009c5b:	68 ec 01 00 00       	push   0x1ec
c0009c60:	e8 aa fd ff ff       	call   c0009a0f <malloc>
c0009c65:	89 c3                	mov    ebx,eax
c0009c67:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c6a:	e8 51 ef ff ff       	call   c0008bc0 <Computer::Computer()>
c0009c6f:	83 c4 10             	add    esp,0x10
c0009c72:	89 1d a8 7c 02 c0    	mov    DWORD PTR ds:0xc0027ca8,ebx
c0009c78:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0009c7f:	75 53                	jne    c0009cd4 <kernel_main+0x1ff>
c0009c81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009c83:	6a 00                	push   0x0
c0009c85:	6a 00                	push   0x0
c0009c87:	6a 00                	push   0x0
c0009c89:	53                   	push   ebx
c0009c8a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0009c8d:	89 34 24             	mov    DWORD PTR [esp],esi
c0009c90:	e8 6f 22 00 00       	call   c000bf04 <VAS::~VAS()>
c0009c95:	83 c4 30             	add    esp,0x30
c0009c98:	5b                   	pop    ebx
c0009c99:	5e                   	pop    esi
c0009c9a:	5f                   	pop    edi
c0009c9b:	c3                   	ret    
c0009c9c:	83 ec 0c             	sub    esp,0xc
c0009c9f:	68 9f 3e 02 c0       	push   0xc0023e9f
c0009ca4:	e8 c0 fd ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009ca9:	83 c4 10             	add    esp,0x10
c0009cac:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0009cb3:	0f 85 24 ff ff ff    	jne    c0009bdd <kernel_main+0x108>
c0009cb9:	eb 04                	jmp    c0009cbf <kernel_main+0x1ea>
c0009cbb:	3c 1c                	cmp    al,0x1c
c0009cbd:	74 06                	je     c0009cc5 <kernel_main+0x1f0>
c0009cbf:	e4 60                	in     al,0x60
c0009cc1:	3c 5a                	cmp    al,0x5a
c0009cc3:	75 f6                	jne    c0009cbb <kernel_main+0x1e6>
c0009cc5:	e4 60                	in     al,0x60
c0009cc7:	3c 5a                	cmp    al,0x5a
c0009cc9:	74 fa                	je     c0009cc5 <kernel_main+0x1f0>
c0009ccb:	3c 1c                	cmp    al,0x1c
c0009ccd:	74 f6                	je     c0009cc5 <kernel_main+0x1f0>
c0009ccf:	e9 09 ff ff ff       	jmp    c0009bdd <kernel_main+0x108>
c0009cd4:	83 ec 0c             	sub    esp,0xc
c0009cd7:	68 de 3e 02 c0       	push   0xc0023ede
c0009cdc:	e8 88 fd ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0009ceb:	74 0c                	je     c0009cf9 <kernel_main+0x224>
c0009ced:	8b 1d a8 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ca8
c0009cf3:	eb 8c                	jmp    c0009c81 <kernel_main+0x1ac>
c0009cf5:	3c 1c                	cmp    al,0x1c
c0009cf7:	74 06                	je     c0009cff <kernel_main+0x22a>
c0009cf9:	e4 60                	in     al,0x60
c0009cfb:	3c 5a                	cmp    al,0x5a
c0009cfd:	75 f6                	jne    c0009cf5 <kernel_main+0x220>
c0009cff:	e4 60                	in     al,0x60
c0009d01:	3c 5a                	cmp    al,0x5a
c0009d03:	74 fa                	je     c0009cff <kernel_main+0x22a>
c0009d05:	3c 1c                	cmp    al,0x1c
c0009d07:	74 f6                	je     c0009cff <kernel_main+0x22a>
c0009d09:	eb e2                	jmp    c0009ced <kernel_main+0x218>
c0009d0b:	83 ec 0c             	sub    esp,0xc
c0009d0e:	68 cb 3e 02 c0       	push   0xc0023ecb
c0009d13:	e8 51 fd ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009d18:	83 c4 10             	add    esp,0x10
c0009d1b:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0009d22:	0f 85 30 ff ff ff    	jne    c0009c58 <kernel_main+0x183>
c0009d28:	eb 04                	jmp    c0009d2e <kernel_main+0x259>
c0009d2a:	3c 1c                	cmp    al,0x1c
c0009d2c:	74 06                	je     c0009d34 <kernel_main+0x25f>
c0009d2e:	e4 60                	in     al,0x60
c0009d30:	3c 5a                	cmp    al,0x5a
c0009d32:	75 f6                	jne    c0009d2a <kernel_main+0x255>
c0009d34:	e4 60                	in     al,0x60
c0009d36:	3c 5a                	cmp    al,0x5a
c0009d38:	74 fa                	je     c0009d34 <kernel_main+0x25f>
c0009d3a:	3c 1c                	cmp    al,0x1c
c0009d3c:	74 f6                	je     c0009d34 <kernel_main+0x25f>
c0009d3e:	e9 15 ff ff ff       	jmp    c0009c58 <kernel_main+0x183>
c0009d43:	83 ec 0c             	sub    esp,0xc
c0009d46:	68 c1 3e 02 c0       	push   0xc0023ec1
c0009d4b:	e8 19 fd ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009d50:	83 c4 10             	add    esp,0x10
c0009d53:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0009d5a:	0f 85 e6 fe ff ff    	jne    c0009c46 <kernel_main+0x171>
c0009d60:	eb 04                	jmp    c0009d66 <kernel_main+0x291>
c0009d62:	3c 1c                	cmp    al,0x1c
c0009d64:	74 06                	je     c0009d6c <kernel_main+0x297>
c0009d66:	e4 60                	in     al,0x60
c0009d68:	3c 5a                	cmp    al,0x5a
c0009d6a:	75 f6                	jne    c0009d62 <kernel_main+0x28d>
c0009d6c:	e4 60                	in     al,0x60
c0009d6e:	3c 5a                	cmp    al,0x5a
c0009d70:	74 fa                	je     c0009d6c <kernel_main+0x297>
c0009d72:	3c 1c                	cmp    al,0x1c
c0009d74:	74 f6                	je     c0009d6c <kernel_main+0x297>
c0009d76:	e9 cb fe ff ff       	jmp    c0009c46 <kernel_main+0x171>
c0009d7b:	83 ec 0c             	sub    esp,0xc
c0009d7e:	68 b6 3e 02 c0       	push   0xc0023eb6
c0009d83:	e8 e1 fc ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009d88:	83 c4 10             	add    esp,0x10
c0009d8b:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0009d92:	0f 85 8b fe ff ff    	jne    c0009c23 <kernel_main+0x14e>
c0009d98:	eb 04                	jmp    c0009d9e <kernel_main+0x2c9>
c0009d9a:	3c 1c                	cmp    al,0x1c
c0009d9c:	74 06                	je     c0009da4 <kernel_main+0x2cf>
c0009d9e:	e4 60                	in     al,0x60
c0009da0:	3c 5a                	cmp    al,0x5a
c0009da2:	75 f6                	jne    c0009d9a <kernel_main+0x2c5>
c0009da4:	e4 60                	in     al,0x60
c0009da6:	3c 5a                	cmp    al,0x5a
c0009da8:	74 fa                	je     c0009da4 <kernel_main+0x2cf>
c0009daa:	3c 1c                	cmp    al,0x1c
c0009dac:	74 f6                	je     c0009da4 <kernel_main+0x2cf>
c0009dae:	e9 70 fe ff ff       	jmp    c0009c23 <kernel_main+0x14e>
c0009db3:	83 ec 0c             	sub    esp,0xc
c0009db6:	68 ab 3e 02 c0       	push   0xc0023eab
c0009dbb:	e8 a9 fc ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009dc0:	83 c4 10             	add    esp,0x10
c0009dc3:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0009dca:	0f 85 41 fe ff ff    	jne    c0009c11 <kernel_main+0x13c>
c0009dd0:	eb 04                	jmp    c0009dd6 <kernel_main+0x301>
c0009dd2:	3c 1c                	cmp    al,0x1c
c0009dd4:	74 06                	je     c0009ddc <kernel_main+0x307>
c0009dd6:	e4 60                	in     al,0x60
c0009dd8:	3c 5a                	cmp    al,0x5a
c0009dda:	75 f6                	jne    c0009dd2 <kernel_main+0x2fd>
c0009ddc:	e4 60                	in     al,0x60
c0009dde:	3c 5a                	cmp    al,0x5a
c0009de0:	74 fa                	je     c0009ddc <kernel_main+0x307>
c0009de2:	3c 1c                	cmp    al,0x1c
c0009de4:	74 f6                	je     c0009ddc <kernel_main+0x307>
c0009de6:	e9 26 fe ff ff       	jmp    c0009c11 <kernel_main+0x13c>
c0009deb:	83 ec 0c             	sub    esp,0xc
c0009dee:	68 8d 3e 02 c0       	push   0xc0023e8d
c0009df3:	e8 71 fc ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009df8:	8b 15 c0 7c 02 c0    	mov    edx,DWORD PTR ds:0xc0027cc0
c0009dfe:	83 c4 10             	add    esp,0x10
c0009e01:	f6 c2 80             	test   dl,0x80
c0009e04:	74 18                	je     c0009e1e <kernel_main+0x349>
c0009e06:	0f b6 05 20 6f 02 c0 	movzx  eax,BYTE PTR ds:0xc0026f20
c0009e0d:	84 c0                	test   al,al
c0009e0f:	0f 85 4d fd ff ff    	jne    c0009b62 <kernel_main+0x8d>
c0009e15:	e9 ba fd ff ff       	jmp    c0009bd4 <kernel_main+0xff>
c0009e1a:	3c 1c                	cmp    al,0x1c
c0009e1c:	74 06                	je     c0009e24 <kernel_main+0x34f>
c0009e1e:	e4 60                	in     al,0x60
c0009e20:	3c 5a                	cmp    al,0x5a
c0009e22:	75 f6                	jne    c0009e1a <kernel_main+0x345>
c0009e24:	e4 60                	in     al,0x60
c0009e26:	3c 5a                	cmp    al,0x5a
c0009e28:	74 fa                	je     c0009e24 <kernel_main+0x34f>
c0009e2a:	3c 1c                	cmp    al,0x1c
c0009e2c:	74 f6                	je     c0009e24 <kernel_main+0x34f>
c0009e2e:	eb d6                	jmp    c0009e06 <kernel_main+0x331>
c0009e30:	83 ec 0c             	sub    esp,0xc
c0009e33:	68 7e 3e 02 c0       	push   0xc0023e7e
c0009e38:	e8 2c fc ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009e3d:	83 c4 10             	add    esp,0x10
c0009e40:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0009e47:	0f 85 f8 fc ff ff    	jne    c0009b45 <kernel_main+0x70>
c0009e4d:	eb 04                	jmp    c0009e53 <kernel_main+0x37e>
c0009e4f:	3c 1c                	cmp    al,0x1c
c0009e51:	74 06                	je     c0009e59 <kernel_main+0x384>
c0009e53:	e4 60                	in     al,0x60
c0009e55:	3c 5a                	cmp    al,0x5a
c0009e57:	75 f6                	jne    c0009e4f <kernel_main+0x37a>
c0009e59:	e4 60                	in     al,0x60
c0009e5b:	3c 5a                	cmp    al,0x5a
c0009e5d:	74 fa                	je     c0009e59 <kernel_main+0x384>
c0009e5f:	3c 1c                	cmp    al,0x1c
c0009e61:	74 f6                	je     c0009e59 <kernel_main+0x384>
c0009e63:	e9 dd fc ff ff       	jmp    c0009b45 <kernel_main+0x70>
c0009e68:	83 ec 0c             	sub    esp,0xc
c0009e6b:	68 6b 3e 02 c0       	push   0xc0023e6b
c0009e70:	e8 f4 fb ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009e75:	83 c4 10             	add    esp,0x10
c0009e78:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0009e7f:	0f 85 69 fc ff ff    	jne    c0009aee <kernel_main+0x19>
c0009e85:	eb 04                	jmp    c0009e8b <kernel_main+0x3b6>
c0009e87:	3c 1c                	cmp    al,0x1c
c0009e89:	74 06                	je     c0009e91 <kernel_main+0x3bc>
c0009e8b:	e4 60                	in     al,0x60
c0009e8d:	3c 5a                	cmp    al,0x5a
c0009e8f:	75 f6                	jne    c0009e87 <kernel_main+0x3b2>
c0009e91:	e4 60                	in     al,0x60
c0009e93:	3c 5a                	cmp    al,0x5a
c0009e95:	74 fa                	je     c0009e91 <kernel_main+0x3bc>
c0009e97:	3c 1c                	cmp    al,0x1c
c0009e99:	74 f6                	je     c0009e91 <kernel_main+0x3bc>
c0009e9b:	e9 4e fc ff ff       	jmp    c0009aee <kernel_main+0x19>

c0009ea0 <Phys::allocateDMA(unsigned long)>:
c0009ea0:	55                   	push   ebp
c0009ea1:	31 ed                	xor    ebp,ebp
c0009ea3:	57                   	push   edi
c0009ea4:	56                   	push   esi
c0009ea5:	53                   	push   ebx
c0009ea6:	31 db                	xor    ebx,ebx
c0009ea8:	83 ec 28             	sub    esp,0x28
c0009eab:	68 0f 3f 02 c0       	push   0xc0023f0f
c0009eb0:	e8 4a 2e 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009eb5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009eb9:	83 c4 10             	add    esp,0x10
c0009ebc:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0009ec2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009eca:	c1 ef 0c             	shr    edi,0xc
c0009ecd:	31 c0                	xor    eax,eax
c0009ecf:	eb 19                	jmp    c0009eea <Phys::allocateDMA(unsigned long)+0x4a>
c0009ed1:	85 c0                	test   eax,eax
c0009ed3:	75 06                	jne    c0009edb <Phys::allocateDMA(unsigned long)+0x3b>
c0009ed5:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009ed9:	89 dd                	mov    ebp,ebx
c0009edb:	8d 70 01             	lea    esi,[eax+0x1]
c0009ede:	39 f7                	cmp    edi,esi
c0009ee0:	74 3f                	je     c0009f21 <Phys::allocateDMA(unsigned long)+0x81>
c0009ee2:	89 f0                	mov    eax,esi
c0009ee4:	43                   	inc    ebx
c0009ee5:	83 fb 0f             	cmp    ebx,0xf
c0009ee8:	7f 11                	jg     c0009efb <Phys::allocateDMA(unsigned long)+0x5b>
c0009eea:	80 bb dc 7c 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd8324],0x0
c0009ef1:	74 de                	je     c0009ed1 <Phys::allocateDMA(unsigned long)+0x31>
c0009ef3:	31 c0                	xor    eax,eax
c0009ef5:	43                   	inc    ebx
c0009ef6:	83 fb 0f             	cmp    ebx,0xf
c0009ef9:	7e ef                	jle    c0009eea <Phys::allocateDMA(unsigned long)+0x4a>
c0009efb:	83 ec 0c             	sub    esp,0xc
c0009efe:	68 43 3f 02 c0       	push   0xc0023f43
c0009f03:	e8 f7 2d 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009f08:	c7 04 24 00 40 02 c0 	mov    DWORD PTR [esp],0xc0024000
c0009f0f:	e8 9b a9 00 00       	call   c00148af <Krnl::panic(char const*)>
c0009f14:	83 c4 10             	add    esp,0x10
c0009f17:	31 c0                	xor    eax,eax
c0009f19:	83 c4 1c             	add    esp,0x1c
c0009f1c:	5b                   	pop    ebx
c0009f1d:	5e                   	pop    esi
c0009f1e:	5f                   	pop    edi
c0009f1f:	5d                   	pop    ebp
c0009f20:	c3                   	ret    
c0009f21:	89 e9                	mov    ecx,ebp
c0009f23:	c1 f9 04             	sar    ecx,0x4
c0009f26:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009f2a:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0009f2e:	89 ca                	mov    edx,ecx
c0009f30:	4a                   	dec    edx
c0009f31:	79 03                	jns    c0009f36 <Phys::allocateDMA(unsigned long)+0x96>
c0009f33:	8d 51 0e             	lea    edx,[ecx+0xe]
c0009f36:	c1 fa 04             	sar    edx,0x4
c0009f39:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0009f3d:	74 08                	je     c0009f47 <Phys::allocateDMA(unsigned long)+0xa7>
c0009f3f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f43:	31 c0                	xor    eax,eax
c0009f45:	eb ae                	jmp    c0009ef5 <Phys::allocateDMA(unsigned long)+0x55>
c0009f47:	85 f6                	test   esi,esi
c0009f49:	74 15                	je     c0009f60 <Phys::allocateDMA(unsigned long)+0xc0>
c0009f4b:	8d 95 dc 7c 02 c0    	lea    edx,[ebp-0x3ffd8324]
c0009f51:	8d 84 05 dd 7c 02 c0 	lea    eax,[ebp+eax*1-0x3ffd8323]
c0009f58:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0009f5b:	42                   	inc    edx
c0009f5c:	39 d0                	cmp    eax,edx
c0009f5e:	75 f8                	jne    c0009f58 <Phys::allocateDMA(unsigned long)+0xb8>
c0009f60:	83 ec 0c             	sub    esp,0xc
c0009f63:	01 3d d4 7c 02 c0    	add    DWORD PTR ds:0xc0027cd4,edi
c0009f69:	68 28 3f 02 c0       	push   0xc0023f28
c0009f6e:	e8 8c 2d 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009f73:	83 c4 10             	add    esp,0x10
c0009f76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f7a:	85 c0                	test   eax,eax
c0009f7c:	74 23                	je     c0009fa1 <Phys::allocateDMA(unsigned long)+0x101>
c0009f7e:	83 ec 0c             	sub    esp,0xc
c0009f81:	68 3f 3f 02 c0       	push   0xc0023f3f
c0009f86:	e8 74 2d 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009f8b:	c7 04 24 00 40 02 c0 	mov    DWORD PTR [esp],0xc0024000
c0009f92:	e8 18 a9 00 00       	call   c00148af <Krnl::panic(char const*)>
c0009f97:	83 c4 10             	add    esp,0x10
c0009f9a:	89 f0                	mov    eax,esi
c0009f9c:	e9 43 ff ff ff       	jmp    c0009ee4 <Phys::allocateDMA(unsigned long)+0x44>
c0009fa1:	c1 e5 0c             	shl    ebp,0xc
c0009fa4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0009faa:	e9 6a ff ff ff       	jmp    c0009f19 <Phys::allocateDMA(unsigned long)+0x79>

c0009faf <Phys::freeDMA(unsigned long, unsigned long)>:
c0009faf:	83 ec 18             	sub    esp,0x18
c0009fb2:	68 47 3f 02 c0       	push   0xc0023f47
c0009fb7:	e8 43 2d 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009fbc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009fc0:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0009fc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009fca:	c1 ea 0c             	shr    edx,0xc
c0009fcd:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0009fd2:	29 15 d4 7c 02 c0    	sub    DWORD PTR ds:0xc0027cd4,edx
c0009fd8:	c1 e8 0c             	shr    eax,0xc
c0009fdb:	83 c4 10             	add    esp,0x10
c0009fde:	85 d2                	test   edx,edx
c0009fe0:	74 0f                	je     c0009ff1 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c0009fe2:	05 dc 7c 02 c0       	add    eax,0xc0027cdc
c0009fe7:	01 c2                	add    edx,eax
c0009fe9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0009fec:	40                   	inc    eax
c0009fed:	39 d0                	cmp    eax,edx
c0009fef:	75 f8                	jne    c0009fe9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0009ff1:	83 c4 0c             	add    esp,0xc
c0009ff4:	c3                   	ret    

c0009ff5 <Phys::setPageState(unsigned long, bool)>:
c0009ff5:	56                   	push   esi
c0009ff6:	ba 01 00 00 00       	mov    edx,0x1
c0009ffb:	53                   	push   ebx
c0009ffc:	8b 35 64 70 02 c0    	mov    esi,DWORD PTR ds:0xc0027064
c000a002:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a006:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a00a:	89 c8                	mov    eax,ecx
c000a00c:	83 e1 07             	and    ecx,0x7
c000a00f:	c1 e8 03             	shr    eax,0x3
c000a012:	d3 e3                	shl    ebx,cl
c000a014:	01 c6                	add    esi,eax
c000a016:	d3 e2                	shl    edx,cl
c000a018:	f7 d2                	not    edx
c000a01a:	20 16                	and    BYTE PTR [esi],dl
c000a01c:	03 05 64 70 02 c0    	add    eax,DWORD PTR ds:0xc0027064
c000a022:	08 18                	or     BYTE PTR [eax],bl
c000a024:	5b                   	pop    ebx
c000a025:	5e                   	pop    esi
c000a026:	c3                   	ret    

c000a027 <Phys::getPageState(unsigned long)>:
c000a027:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a02b:	8b 15 64 70 02 c0    	mov    edx,DWORD PTR ds:0xc0027064
c000a031:	89 c8                	mov    eax,ecx
c000a033:	83 e1 07             	and    ecx,0x7
c000a036:	c1 e8 03             	shr    eax,0x3
c000a039:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000a03d:	d3 f8                	sar    eax,cl
c000a03f:	83 e0 01             	and    eax,0x1
c000a042:	c3                   	ret    

c000a043 <Phys::freePage(unsigned long)>:
c000a043:	53                   	push   ebx
c000a044:	83 ec 10             	sub    esp,0x10
c000a047:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a04b:	53                   	push   ebx
c000a04c:	68 5d 3f 02 c0       	push   0xc0023f5d
c000a051:	e8 a9 2c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000a056:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c000a05c:	83 c4 10             	add    esp,0x10
c000a05f:	3d ff ff 00 00       	cmp    eax,0xffff
c000a064:	76 3d                	jbe    c000a0a3 <Phys::freePage(unsigned long)+0x60>
c000a066:	83 ec 0c             	sub    esp,0xc
c000a069:	c1 eb 0c             	shr    ebx,0xc
c000a06c:	53                   	push   ebx
c000a06d:	e8 b5 ff ff ff       	call   c000a027 <Phys::getPageState(unsigned long)>
c000a072:	83 c4 10             	add    esp,0x10
c000a075:	84 c0                	test   al,al
c000a077:	74 19                	je     c000a092 <Phys::freePage(unsigned long)+0x4f>
c000a079:	83 ec 08             	sub    esp,0x8
c000a07c:	ff 0d d4 7c 02 c0    	dec    DWORD PTR ds:0xc0027cd4
c000a082:	6a 00                	push   0x0
c000a084:	53                   	push   ebx
c000a085:	e8 6b ff ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a08a:	83 c4 10             	add    esp,0x10
c000a08d:	83 c4 08             	add    esp,0x8
c000a090:	5b                   	pop    ebx
c000a091:	c3                   	ret    
c000a092:	c7 44 24 10 87 3f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023f87
c000a09a:	83 c4 08             	add    esp,0x8
c000a09d:	5b                   	pop    ebx
c000a09e:	e9 0c a8 00 00       	jmp    c00148af <Krnl::panic(char const*)>
c000a0a3:	83 ec 08             	sub    esp,0x8
c000a0a6:	53                   	push   ebx
c000a0a7:	68 70 3f 02 c0       	push   0xc0023f70
c000a0ac:	e8 4e 2c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000a0b1:	58                   	pop    eax
c000a0b2:	5a                   	pop    edx
c000a0b3:	68 00 10 00 00       	push   0x1000
c000a0b8:	53                   	push   ebx
c000a0b9:	e8 f1 fe ff ff       	call   c0009faf <Phys::freeDMA(unsigned long, unsigned long)>
c000a0be:	83 c4 10             	add    esp,0x10
c000a0c1:	83 c4 08             	add    esp,0x8
c000a0c4:	5b                   	pop    ebx
c000a0c5:	c3                   	ret    

c000a0c6 <Phys::allocatePage()>:
c000a0c6:	56                   	push   esi
c000a0c7:	53                   	push   ebx
c000a0c8:	83 ec 14             	sub    esp,0x14
c000a0cb:	8b 35 c8 7c 02 c0    	mov    esi,DWORD PTR ds:0xc0027cc8
c000a0d1:	89 f3                	mov    ebx,esi
c000a0d3:	eb 0a                	jmp    c000a0df <Phys::allocatePage()+0x19>
c000a0d5:	89 1d c8 7c 02 c0    	mov    DWORD PTR ds:0xc0027cc8,ebx
c000a0db:	39 de                	cmp    esi,ebx
c000a0dd:	74 24                	je     c000a103 <Phys::allocatePage()+0x3d>
c000a0df:	53                   	push   ebx
c000a0e0:	e8 42 ff ff ff       	call   c000a027 <Phys::getPageState(unsigned long)>
c000a0e5:	5a                   	pop    edx
c000a0e6:	84 c0                	test   al,al
c000a0e8:	74 69                	je     c000a153 <Phys::allocatePage()+0x8d>
c000a0ea:	43                   	inc    ebx
c000a0eb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a0f1:	75 e2                	jne    c000a0d5 <Phys::allocatePage()+0xf>
c000a0f3:	31 db                	xor    ebx,ebx
c000a0f5:	c7 05 c8 7c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027cc8,0x0
c000a0ff:	39 de                	cmp    esi,ebx
c000a101:	75 dc                	jne    c000a0df <Phys::allocatePage()+0x19>
c000a103:	83 ec 0c             	sub    esp,0xc
c000a106:	80 35 ec 7c 02 c0 01 	xor    BYTE PTR ds:0xc0027cec,0x1
c000a10d:	68 28 40 02 c0       	push   0xc0024028
c000a112:	e8 e8 2b 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000a117:	58                   	pop    eax
c000a118:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a11d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a120:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000a126:	e8 63 28 00 00       	call   c000c98e <VAS::scanForEviction()>
c000a12b:	83 c4 10             	add    esp,0x10
c000a12e:	85 c0                	test   eax,eax
c000a130:	75 62                	jne    c000a194 <Phys::allocatePage()+0xce>
c000a132:	83 ec 0c             	sub    esp,0xc
c000a135:	68 4c 40 02 c0       	push   0xc002404c
c000a13a:	e8 70 a7 00 00       	call   c00148af <Krnl::panic(char const*)>
c000a13f:	83 c4 10             	add    esp,0x10
c000a142:	8b 1d c8 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027cc8
c000a148:	53                   	push   ebx
c000a149:	e8 d9 fe ff ff       	call   c000a027 <Phys::getPageState(unsigned long)>
c000a14e:	5a                   	pop    edx
c000a14f:	84 c0                	test   al,al
c000a151:	75 97                	jne    c000a0ea <Phys::allocatePage()+0x24>
c000a153:	6a 01                	push   0x1
c000a155:	53                   	push   ebx
c000a156:	e8 9a fe ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a15b:	5a                   	pop    edx
c000a15c:	a1 d4 7c 02 c0       	mov    eax,ds:0xc0027cd4
c000a161:	59                   	pop    ecx
c000a162:	40                   	inc    eax
c000a163:	8b 15 c8 7c 02 c0    	mov    edx,DWORD PTR ds:0xc0027cc8
c000a169:	a3 d4 7c 02 c0       	mov    ds:0xc0027cd4,eax
c000a16e:	c1 e2 0c             	shl    edx,0xc
c000a171:	52                   	push   edx
c000a172:	ff 35 d8 7c 02 c0    	push   DWORD PTR ds:0xc0027cd8
c000a178:	50                   	push   eax
c000a179:	68 9d 3f 02 c0       	push   0xc0023f9d
c000a17e:	e8 7c 2b 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000a183:	a1 c8 7c 02 c0       	mov    eax,ds:0xc0027cc8
c000a188:	83 c4 10             	add    esp,0x10
c000a18b:	c1 e0 0c             	shl    eax,0xc
c000a18e:	83 c4 14             	add    esp,0x14
c000a191:	5b                   	pop    ebx
c000a192:	5e                   	pop    esi
c000a193:	c3                   	ret    
c000a194:	83 ec 08             	sub    esp,0x8
c000a197:	89 c2                	mov    edx,eax
c000a199:	6a 01                	push   0x1
c000a19b:	c1 ea 0c             	shr    edx,0xc
c000a19e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1a2:	52                   	push   edx
c000a1a3:	e8 4d fe ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a1a8:	83 c4 10             	add    esp,0x10
c000a1ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1af:	eb dd                	jmp    c000a18e <Phys::allocatePage()+0xc8>

c000a1b1 <Phys::allocateContiguousPages(int)>:
c000a1b1:	57                   	push   edi
c000a1b2:	56                   	push   esi
c000a1b3:	53                   	push   ebx
c000a1b4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a1b8:	fa                   	cli    
c000a1b9:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c000a1bf:	31 db                	xor    ebx,ebx
c000a1c1:	85 db                	test   ebx,ebx
c000a1c3:	75 11                	jne    c000a1d6 <Phys::allocateContiguousPages(int)+0x25>
c000a1c5:	e8 fc fe ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000a1ca:	83 fe 01             	cmp    esi,0x1
c000a1cd:	89 c7                	mov    edi,eax
c000a1cf:	74 21                	je     c000a1f2 <Phys::allocateContiguousPages(int)+0x41>
c000a1d1:	bb 01 00 00 00       	mov    ebx,0x1
c000a1d6:	e8 eb fe ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000a1db:	89 da                	mov    edx,ebx
c000a1dd:	c1 e2 0c             	shl    edx,0xc
c000a1e0:	01 fa                	add    edx,edi
c000a1e2:	39 c2                	cmp    edx,eax
c000a1e4:	74 20                	je     c000a206 <Phys::allocateContiguousPages(int)+0x55>
c000a1e6:	bb 01 00 00 00       	mov    ebx,0x1
c000a1eb:	89 c7                	mov    edi,eax
c000a1ed:	83 fe 01             	cmp    esi,0x1
c000a1f0:	75 e4                	jne    c000a1d6 <Phys::allocateContiguousPages(int)+0x25>
c000a1f2:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000a1f7:	48                   	dec    eax
c000a1f8:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c000a1fd:	75 01                	jne    c000a200 <Phys::allocateContiguousPages(int)+0x4f>
c000a1ff:	fb                   	sti    
c000a200:	89 f8                	mov    eax,edi
c000a202:	5b                   	pop    ebx
c000a203:	5e                   	pop    esi
c000a204:	5f                   	pop    edi
c000a205:	c3                   	ret    
c000a206:	43                   	inc    ebx
c000a207:	39 f3                	cmp    ebx,esi
c000a209:	75 b6                	jne    c000a1c1 <Phys::allocateContiguousPages(int)+0x10>
c000a20b:	eb e5                	jmp    c000a1f2 <Phys::allocateContiguousPages(int)+0x41>

c000a20d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000a20d:	56                   	push   esi
c000a20e:	53                   	push   ebx
c000a20f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a213:	39 1d cc 7c 02 c0    	cmp    DWORD PTR ds:0xc0027ccc,ebx
c000a219:	73 06                	jae    c000a221 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000a21b:	89 1d cc 7c 02 c0    	mov    DWORD PTR ds:0xc0027ccc,ebx
c000a221:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a225:	c1 eb 0c             	shr    ebx,0xc
c000a228:	c1 e8 0c             	shr    eax,0xc
c000a22b:	39 d8                	cmp    eax,ebx
c000a22d:	73 13                	jae    c000a242 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000a22f:	6a 00                	push   0x0
c000a231:	8d 70 01             	lea    esi,[eax+0x1]
c000a234:	50                   	push   eax
c000a235:	e8 bb fd ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a23a:	5a                   	pop    edx
c000a23b:	89 f0                	mov    eax,esi
c000a23d:	59                   	pop    ecx
c000a23e:	39 f3                	cmp    ebx,esi
c000a240:	75 ed                	jne    c000a22f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000a242:	5b                   	pop    ebx
c000a243:	5e                   	pop    esi
c000a244:	c3                   	ret    

c000a245 <Phys::physicalMemorySetup(unsigned int)>:
c000a245:	55                   	push   ebp
c000a246:	57                   	push   edi
c000a247:	56                   	push   esi
c000a248:	53                   	push   ebx
c000a249:	31 db                	xor    ebx,ebx
c000a24b:	83 ec 40             	sub    esp,0x40
c000a24e:	6a 10                	push   0x10
c000a250:	6a 00                	push   0x0
c000a252:	68 dc 7c 02 c0       	push   0xc0027cdc
c000a257:	e8 28 64 ff ff       	call   c0000684 <memset>
c000a25c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a260:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a265:	05 00 10 00 00       	add    eax,0x1000
c000a26a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a26e:	5a                   	pop    edx
c000a26f:	59                   	pop    ecx
c000a270:	50                   	push   eax
c000a271:	68 bb 3f 02 c0       	push   0xc0023fbb
c000a276:	e8 84 2a 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000a27b:	83 c4 10             	add    esp,0x10
c000a27e:	83 ec 08             	sub    esp,0x8
c000a281:	6a 01                	push   0x1
c000a283:	53                   	push   ebx
c000a284:	43                   	inc    ebx
c000a285:	e8 6b fd ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a28a:	83 c4 10             	add    esp,0x10
c000a28d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a293:	75 e9                	jne    c000a27e <Phys::physicalMemorySetup(unsigned int)+0x39>
c000a295:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a29c:	66 85 c0             	test   ax,ax
c000a29f:	0f 84 8e 01 00 00    	je     c000a433 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a2a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a2a9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a2b1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a2b5:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a2ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a2be:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a2c6:	eb 15                	jmp    c000a2dd <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a2c8:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a2cc:	83 c3 18             	add    ebx,0x18
c000a2cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a2d3:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a2d7:	0f 84 66 01 00 00    	je     c000a443 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a2dd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a2e0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a2e3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a2e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a2ea:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a2ee:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a2f0:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a2f3:	01 f0                	add    eax,esi
c000a2f5:	55                   	push   ebp
c000a2f6:	11 fa                	adc    edx,edi
c000a2f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2fc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a300:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a304:	56                   	push   esi
c000a305:	68 7c 40 02 c0       	push   0xc002407c
c000a30a:	e8 f0 29 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000a30f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a313:	83 c4 10             	add    esp,0x10
c000a316:	09 f8                	or     eax,edi
c000a318:	0f 85 25 01 00 00    	jne    c000a443 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a31e:	4d                   	dec    ebp
c000a31f:	75 a7                	jne    c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a321:	ba 00 00 08 00       	mov    edx,0x80000
c000a326:	89 c1                	mov    ecx,eax
c000a328:	39 f2                	cmp    edx,esi
c000a32a:	19 f9                	sbb    ecx,edi
c000a32c:	0f 82 a7 00 00 00    	jb     c000a3d9 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a332:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a336:	89 c1                	mov    ecx,eax
c000a338:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a33c:	0f 83 97 00 00 00    	jae    c000a3d9 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a342:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a347:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a34b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a34f:	39 fa                	cmp    edx,edi
c000a351:	19 e8                	sbb    eax,ebp
c000a353:	0f 82 a5 01 00 00    	jb     c000a4fe <Phys::physicalMemorySetup(unsigned int)+0x2b9>
c000a359:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a35d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a361:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a367:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a36c:	83 d5 ff             	adc    ebp,0xffffffff
c000a36f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a373:	31 c0                	xor    eax,eax
c000a375:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a379:	39 fa                	cmp    edx,edi
c000a37b:	89 c1                	mov    ecx,eax
c000a37d:	19 e9                	sbb    ecx,ebp
c000a37f:	0f 83 43 ff ff ff    	jae    c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a385:	be 00 00 08 00       	mov    esi,0x80000
c000a38a:	57                   	push   edi
c000a38b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a38f:	57                   	push   edi
c000a390:	56                   	push   esi
c000a391:	68 a0 40 02 c0       	push   0xc00240a0
c000a396:	e8 64 29 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000a39b:	5d                   	pop    ebp
c000a39c:	58                   	pop    eax
c000a39d:	57                   	push   edi
c000a39e:	56                   	push   esi
c000a39f:	e8 69 fe ff ff       	call   c000a20d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a3a4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a3a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a3ac:	83 c4 0c             	add    esp,0xc
c000a3af:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a3b3:	03 05 d8 7c 02 c0    	add    eax,DWORD PTR ds:0xc0027cd8
c000a3b9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a3c0:	a3 d8 7c 02 c0       	mov    ds:0xc0027cd8,eax
c000a3c5:	52                   	push   edx
c000a3c6:	50                   	push   eax
c000a3c7:	68 e1 3f 02 c0       	push   0xc0023fe1
c000a3cc:	e8 2e 29 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000a3d1:	83 c4 10             	add    esp,0x10
c000a3d4:	e9 ef fe ff ff       	jmp    c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a3d9:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a3dd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a3e1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a3e5:	39 ea                	cmp    edx,ebp
c000a3e7:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a3eb:	0f 82 d7 fe ff ff    	jb     c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a3f1:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a3f6:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a3fa:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a3fe:	0f 83 c4 fe ff ff    	jae    c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a404:	39 ee                	cmp    esi,ebp
c000a406:	89 f8                	mov    eax,edi
c000a408:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a40c:	0f 83 78 ff ff ff    	jae    c000a38a <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a412:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a416:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a41a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a41e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a422:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a426:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a42a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a42e:	e9 57 ff ff ff       	jmp    c000a38a <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a433:	83 ec 0c             	sub    esp,0xc
c000a436:	68 d3 3f 02 c0       	push   0xc0023fd3
c000a43b:	e8 6f a4 00 00       	call   c00148af <Krnl::panic(char const*)>
c000a440:	83 c4 10             	add    esp,0x10
c000a443:	83 ec 08             	sub    esp,0x8
c000a446:	6a 00                	push   0x0
c000a448:	6a 05                	push   0x5
c000a44a:	e8 a6 fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a44f:	58                   	pop    eax
c000a450:	5a                   	pop    edx
c000a451:	6a 00                	push   0x0
c000a453:	6a 06                	push   0x6
c000a455:	e8 9b fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a45a:	59                   	pop    ecx
c000a45b:	5b                   	pop    ebx
c000a45c:	bb 60 00 00 00       	mov    ebx,0x60
c000a461:	6a 00                	push   0x0
c000a463:	6a 07                	push   0x7
c000a465:	e8 8b fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a46a:	83 05 d8 7c 02 c0 03 	add    DWORD PTR ds:0xc0027cd8,0x3
c000a471:	83 c4 10             	add    esp,0x10
c000a474:	83 ec 08             	sub    esp,0x8
c000a477:	6a 00                	push   0x0
c000a479:	53                   	push   ebx
c000a47a:	43                   	inc    ebx
c000a47b:	e8 75 fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a480:	83 c4 10             	add    esp,0x10
c000a483:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a489:	75 e9                	jne    c000a474 <Phys::physicalMemorySetup(unsigned int)+0x22f>
c000a48b:	a1 d8 7c 02 c0       	mov    eax,ds:0xc0027cd8
c000a490:	bb 40 01 00 00       	mov    ebx,0x140
c000a495:	83 c0 20             	add    eax,0x20
c000a498:	a3 d8 7c 02 c0       	mov    ds:0xc0027cd8,eax
c000a49d:	eb 22                	jmp    c000a4c1 <Phys::physicalMemorySetup(unsigned int)+0x27c>
c000a49f:	83 ec 08             	sub    esp,0x8
c000a4a2:	6a 00                	push   0x0
c000a4a4:	53                   	push   ebx
c000a4a5:	43                   	inc    ebx
c000a4a6:	e8 4a fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a4ab:	a1 d8 7c 02 c0       	mov    eax,ds:0xc0027cd8
c000a4b0:	83 c4 10             	add    esp,0x10
c000a4b3:	40                   	inc    eax
c000a4b4:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a4ba:	a3 d8 7c 02 c0       	mov    ds:0xc0027cd8,eax
c000a4bf:	74 07                	je     c000a4c8 <Phys::physicalMemorySetup(unsigned int)+0x283>
c000a4c1:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a4c6:	7e d7                	jle    c000a49f <Phys::physicalMemorySetup(unsigned int)+0x25a>
c000a4c8:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a4cd:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a4d2:	7f 22                	jg     c000a4f6 <Phys::physicalMemorySetup(unsigned int)+0x2b1>
c000a4d4:	83 ec 08             	sub    esp,0x8
c000a4d7:	6a 00                	push   0x0
c000a4d9:	53                   	push   ebx
c000a4da:	43                   	inc    ebx
c000a4db:	e8 15 fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a4e0:	a1 d8 7c 02 c0       	mov    eax,ds:0xc0027cd8
c000a4e5:	83 c4 10             	add    esp,0x10
c000a4e8:	40                   	inc    eax
c000a4e9:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a4ef:	a3 d8 7c 02 c0       	mov    ds:0xc0027cd8,eax
c000a4f4:	75 d7                	jne    c000a4cd <Phys::physicalMemorySetup(unsigned int)+0x288>
c000a4f6:	83 c4 3c             	add    esp,0x3c
c000a4f9:	5b                   	pop    ebx
c000a4fa:	5e                   	pop    esi
c000a4fb:	5f                   	pop    edi
c000a4fc:	5d                   	pop    ebp
c000a4fd:	c3                   	ret    
c000a4fe:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a506:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a50e:	e9 46 fe ff ff       	jmp    c000a359 <Phys::physicalMemorySetup(unsigned int)+0x114>
c000a513:	90                   	nop

c000a514 <Pipe::isAtty()>:
c000a514:	31 c0                	xor    eax,eax
c000a516:	c3                   	ret    
c000a517:	90                   	nop

c000a518 <Pipe::~Pipe()>:
c000a518:	83 ec 0c             	sub    esp,0xc
c000a51b:	ba 0c 41 02 c0       	mov    edx,0xc002410c
c000a520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a524:	89 10                	mov    DWORD PTR [eax],edx
c000a526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a52a:	83 ec 0c             	sub    esp,0xc
c000a52d:	50                   	push   eax
c000a52e:	e8 45 12 00 00       	call   c000b778 <UnixFile::~UnixFile()>
c000a533:	83 c4 10             	add    esp,0x10
c000a536:	90                   	nop
c000a537:	83 c4 0c             	add    esp,0xc
c000a53a:	c3                   	ret    
c000a53b:	90                   	nop

c000a53c <Pipe::~Pipe()>:
c000a53c:	83 ec 0c             	sub    esp,0xc
c000a53f:	83 ec 0c             	sub    esp,0xc
c000a542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a546:	e8 cd ff ff ff       	call   c000a518 <Pipe::~Pipe()>
c000a54b:	83 c4 10             	add    esp,0x10
c000a54e:	83 ec 08             	sub    esp,0x8
c000a551:	6a 20                	push   0x20
c000a553:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a557:	e8 c2 26 00 00       	call   c000cc1e <operator delete(void*, unsigned long)>
c000a55c:	83 c4 10             	add    esp,0x10
c000a55f:	83 c4 0c             	add    esp,0xc
c000a562:	c3                   	ret    
c000a563:	90                   	nop

c000a564 <Pipe::read(unsigned long long, void*, int*)>:
c000a564:	55                   	push   ebp
c000a565:	57                   	push   edi
c000a566:	56                   	push   esi
c000a567:	53                   	push   ebx
c000a568:	83 ec 1c             	sub    esp,0x1c
c000a56b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a56f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a573:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a577:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a57a:	89 c8                	mov    eax,ecx
c000a57c:	99                   	cdq    
c000a57d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a581:	74 24                	je     c000a5a7 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a583:	39 f9                	cmp    ecx,edi
c000a585:	89 d1                	mov    ecx,edx
c000a587:	19 f1                	sbb    ecx,esi
c000a589:	73 1c                	jae    c000a5a7 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a58b:	fa                   	cli    
c000a58c:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c000a592:	e8 51 e0 00 00       	call   c00185e8 <schedule()>
c000a597:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000a59c:	48                   	dec    eax
c000a59d:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c000a5a2:	75 d3                	jne    c000a577 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a5a4:	fb                   	sti    
c000a5a5:	eb d0                	jmp    c000a577 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a5a7:	39 f8                	cmp    eax,edi
c000a5a9:	89 d1                	mov    ecx,edx
c000a5ab:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a5ae:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a5b2:	19 f1                	sbb    ecx,esi
c000a5b4:	73 07                	jae    c000a5bd <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a5b6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5bd:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a5c0:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a5c3:	29 f7                	sub    edi,esi
c000a5c5:	89 f8                	mov    eax,edi
c000a5c7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a5cb:	99                   	cdq    
c000a5cc:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a5cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a5d3:	19 d0                	sbb    eax,edx
c000a5d5:	73 07                	jae    c000a5de <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a5d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a5da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a5de:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a5e1:	89 ea                	mov    edx,ebp
c000a5e3:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a5e7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a5ec:	74 0d                	je     c000a5fb <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a5ee:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a5f1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a5f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a5f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a5fb:	85 d2                	test   edx,edx
c000a5fd:	74 11                	je     c000a610 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a5ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a603:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a606:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a60a:	89 d1                	mov    ecx,edx
c000a60c:	89 c7                	mov    edi,eax
c000a60e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a610:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a613:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a616:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a619:	99                   	cdq    
c000a61a:	89 f7                	mov    edi,esi
c000a61c:	03 04 24             	add    eax,DWORD PTR [esp]
c000a61f:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a623:	c1 ff 1f             	sar    edi,0x1f
c000a626:	57                   	push   edi
c000a627:	56                   	push   esi
c000a628:	52                   	push   edx
c000a629:	50                   	push   eax
c000a62a:	e8 55 80 01 00       	call   c0022684 <__umoddi3>
c000a62f:	83 c4 10             	add    esp,0x10
c000a632:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a635:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a63a:	75 10                	jne    c000a64c <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a63c:	83 ec 0c             	sub    esp,0xc
c000a63f:	68 c9 40 02 c0       	push   0xc00240c9
c000a644:	e8 66 a2 00 00       	call   c00148af <Krnl::panic(char const*)>
c000a649:	83 c4 10             	add    esp,0x10
c000a64c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a650:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a653:	89 10                	mov    DWORD PTR [eax],edx
c000a655:	83 c4 1c             	add    esp,0x1c
c000a658:	31 c0                	xor    eax,eax
c000a65a:	5b                   	pop    ebx
c000a65b:	5e                   	pop    esi
c000a65c:	5f                   	pop    edi
c000a65d:	5d                   	pop    ebp
c000a65e:	c3                   	ret    
c000a65f:	90                   	nop

c000a660 <Pipe::write(unsigned long long, void*, int*)>:
c000a660:	55                   	push   ebp
c000a661:	57                   	push   edi
c000a662:	56                   	push   esi
c000a663:	53                   	push   ebx
c000a664:	83 ec 1c             	sub    esp,0x1c
c000a667:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a66b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a66f:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a672:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a676:	89 04 24             	mov    DWORD PTR [esp],eax
c000a679:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a67d:	89 d8                	mov    eax,ebx
c000a67f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a682:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a686:	89 d6                	mov    esi,edx
c000a688:	89 d7                	mov    edi,edx
c000a68a:	c1 ff 1f             	sar    edi,0x1f
c000a68d:	03 34 24             	add    esi,DWORD PTR [esp]
c000a690:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a694:	c1 f8 1f             	sar    eax,0x1f
c000a697:	39 f3                	cmp    ebx,esi
c000a699:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a69d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6a1:	19 f8                	sbb    eax,edi
c000a6a3:	b8 01 00 00 00       	mov    eax,0x1
c000a6a8:	72 6e                	jb     c000a718 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a6aa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a6ad:	01 d0                	add    eax,edx
c000a6af:	99                   	cdq    
c000a6b0:	f7 fb                	idiv   ebx
c000a6b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a6b6:	29 d3                	sub    ebx,edx
c000a6b8:	89 d7                	mov    edi,edx
c000a6ba:	89 de                	mov    esi,ebx
c000a6bc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a6bf:	c1 fb 1f             	sar    ebx,0x1f
c000a6c2:	39 f2                	cmp    edx,esi
c000a6c4:	19 d8                	sbb    eax,ebx
c000a6c6:	b8 00 00 00 00       	mov    eax,0x0
c000a6cb:	72 04                	jb     c000a6d1 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a6cd:	89 d0                	mov    eax,edx
c000a6cf:	29 f0                	sub    eax,esi
c000a6d1:	89 d3                	mov    ebx,edx
c000a6d3:	29 c3                	sub    ebx,eax
c000a6d5:	74 0b                	je     c000a6e2 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a6d7:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a6da:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a6de:	89 d9                	mov    ecx,ebx
c000a6e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a6e2:	85 c0                	test   eax,eax
c000a6e4:	74 0d                	je     c000a6f3 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a6e6:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a6ea:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a6ed:	89 de                	mov    esi,ebx
c000a6ef:	89 c1                	mov    ecx,eax
c000a6f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a6f3:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a6f6:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a6fb:	75 10                	jne    c000a70d <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a6fd:	83 ec 0c             	sub    esp,0xc
c000a700:	68 e5 40 02 c0       	push   0xc00240e5
c000a705:	e8 a5 a1 00 00       	call   c00148af <Krnl::panic(char const*)>
c000a70a:	83 c4 10             	add    esp,0x10
c000a70d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a711:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a714:	89 08                	mov    DWORD PTR [eax],ecx
c000a716:	31 c0                	xor    eax,eax
c000a718:	83 c4 1c             	add    esp,0x1c
c000a71b:	5b                   	pop    ebx
c000a71c:	5e                   	pop    esi
c000a71d:	5f                   	pop    edi
c000a71e:	5d                   	pop    ebp
c000a71f:	c3                   	ret    

c000a720 <Pipe::Pipe(int)>:
c000a720:	83 ec 0c             	sub    esp,0xc
c000a723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a727:	83 ec 08             	sub    esp,0x8
c000a72a:	6a 00                	push   0x0
c000a72c:	50                   	push   eax
c000a72d:	e8 64 0e 00 00       	call   c000b596 <UnixFile::UnixFile(int)>
c000a732:	83 c4 10             	add    esp,0x10
c000a735:	ba 0c 41 02 c0       	mov    edx,0xc002410c
c000a73a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a73e:	89 10                	mov    DWORD PTR [eax],edx
c000a740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a744:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a748:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a74b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a74f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a75a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a761:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a765:	83 ec 0c             	sub    esp,0xc
c000a768:	50                   	push   eax
c000a769:	e8 a1 f2 ff ff       	call   c0009a0f <malloc>
c000a76e:	83 c4 10             	add    esp,0x10
c000a771:	89 c2                	mov    edx,eax
c000a773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a777:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a77a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a77e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000a782:	90                   	nop
c000a783:	83 c4 0c             	add    esp,0xc
c000a786:	c3                   	ret    
c000a787:	90                   	nop

c000a788 <VgaText::isAtty()>:
c000a788:	b0 01                	mov    al,0x1
c000a78a:	c3                   	ret    
c000a78b:	90                   	nop

c000a78c <VgaText::~VgaText()>:
c000a78c:	83 ec 0c             	sub    esp,0xc
c000a78f:	ba 94 41 02 c0       	mov    edx,0xc0024194
c000a794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a798:	89 10                	mov    DWORD PTR [eax],edx
c000a79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a79e:	83 ec 0c             	sub    esp,0xc
c000a7a1:	50                   	push   eax
c000a7a2:	e8 d1 0f 00 00       	call   c000b778 <UnixFile::~UnixFile()>
c000a7a7:	83 c4 10             	add    esp,0x10
c000a7aa:	90                   	nop
c000a7ab:	83 c4 0c             	add    esp,0xc
c000a7ae:	c3                   	ret    
c000a7af:	90                   	nop

c000a7b0 <VgaText::~VgaText()>:
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	83 ec 0c             	sub    esp,0xc
c000a7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ba:	e8 cd ff ff ff       	call   c000a78c <VgaText::~VgaText()>
c000a7bf:	83 c4 10             	add    esp,0x10
c000a7c2:	83 ec 08             	sub    esp,0x8
c000a7c5:	68 c4 02 00 00       	push   0x2c4
c000a7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ce:	e8 4b 24 00 00       	call   c000cc1e <operator delete(void*, unsigned long)>
c000a7d3:	83 c4 10             	add    esp,0x10
c000a7d6:	83 c4 0c             	add    esp,0xc
c000a7d9:	c3                   	ret    

c000a7da <VgaText::read(unsigned long long, void*, int*)>:
c000a7da:	83 ec 10             	sub    esp,0x10
c000a7dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a7e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a7e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7e9:	e8 e5 57 00 00       	call   c000ffd3 <readKeyboard(VgaText*, char*, unsigned long)>
c000a7ee:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a7f2:	89 02                	mov    DWORD PTR [edx],eax
c000a7f4:	31 c0                	xor    eax,eax
c000a7f6:	83 c4 1c             	add    esp,0x1c
c000a7f9:	c3                   	ret    

c000a7fa <setTerminalScrollLock(bool)>:
c000a7fa:	c3                   	ret    

c000a7fb <addToTerminalCycle(VgaText*)>:
c000a7fb:	8b 15 20 7d 02 c0    	mov    edx,DWORD PTR ds:0xc0027d20
c000a801:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a805:	85 d2                	test   edx,edx
c000a807:	75 09                	jne    c000a812 <addToTerminalCycle(VgaText*)+0x17>
c000a809:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000a80c:	a3 20 7d 02 c0       	mov    ds:0xc0027d20,eax
c000a811:	c3                   	ret    
c000a812:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000a815:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000a818:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000a81b:	c3                   	ret    

c000a81c <installVgaTextImplementation()>:
c000a81c:	83 ec 10             	sub    esp,0x10
c000a81f:	6a 20                	push   0x20
c000a821:	6a 00                	push   0x0
c000a823:	68 00 7d 02 c0       	push   0xc0027d00
c000a828:	e8 57 5e ff ff       	call   c0000684 <memset>
c000a82d:	83 c4 1c             	add    esp,0x1c
c000a830:	c3                   	ret    

c000a831 <scrollTerminalScrollLock(int)>:
c000a831:	c3                   	ret    

c000a832 <VgaText::updateTitle()>:
c000a832:	53                   	push   ebx
c000a833:	31 c0                	xor    eax,eax
c000a835:	83 ec 58             	sub    esp,0x58
c000a838:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000a83c:	89 e1                	mov    ecx,esp
c000a83e:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000a842:	40                   	inc    eax
c000a843:	83 f8 50             	cmp    eax,0x50
c000a846:	75 f6                	jne    c000a83e <VgaText::updateTitle()+0xc>
c000a848:	31 c0                	xor    eax,eax
c000a84a:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000a851:	84 db                	test   bl,bl
c000a853:	74 06                	je     c000a85b <VgaText::updateTitle()+0x29>
c000a855:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000a858:	40                   	inc    eax
c000a859:	eb ef                	jmp    c000a84a <VgaText::updateTitle()+0x18>
c000a85b:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000a85e:	85 c0                	test   eax,eax
c000a860:	74 09                	je     c000a86b <VgaText::updateTitle()+0x39>
c000a862:	53                   	push   ebx
c000a863:	53                   	push   ebx
c000a864:	51                   	push   ecx
c000a865:	52                   	push   edx
c000a866:	ff d0                	call   eax
c000a868:	83 c4 10             	add    esp,0x10
c000a86b:	83 c4 58             	add    esp,0x58
c000a86e:	5b                   	pop    ebx
c000a86f:	c3                   	ret    

c000a870 <VgaText::load()>:
c000a870:	53                   	push   ebx
c000a871:	31 c0                	xor    eax,eax
c000a873:	83 ec 58             	sub    esp,0x58
c000a876:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000a87a:	89 e2                	mov    edx,esp
c000a87c:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000a880:	40                   	inc    eax
c000a881:	83 f8 50             	cmp    eax,0x50
c000a884:	75 f6                	jne    c000a87c <VgaText::load()+0xc>
c000a886:	31 c0                	xor    eax,eax
c000a888:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000a88f:	84 c9                	test   cl,cl
c000a891:	74 06                	je     c000a899 <VgaText::load()+0x29>
c000a893:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a896:	40                   	inc    eax
c000a897:	eb ef                	jmp    c000a888 <VgaText::load()+0x18>
c000a899:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000a89c:	85 c0                	test   eax,eax
c000a89e:	74 09                	je     c000a8a9 <VgaText::load()+0x39>
c000a8a0:	51                   	push   ecx
c000a8a1:	51                   	push   ecx
c000a8a2:	52                   	push   edx
c000a8a3:	53                   	push   ebx
c000a8a4:	ff d0                	call   eax
c000a8a6:	83 c4 10             	add    esp,0x10
c000a8a9:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000a8ac:	85 c0                	test   eax,eax
c000a8ae:	74 09                	je     c000a8b9 <VgaText::load()+0x49>
c000a8b0:	83 ec 0c             	sub    esp,0xc
c000a8b3:	53                   	push   ebx
c000a8b4:	ff d0                	call   eax
c000a8b6:	83 c4 10             	add    esp,0x10
c000a8b9:	83 c4 58             	add    esp,0x58
c000a8bc:	5b                   	pop    ebx
c000a8bd:	c3                   	ret    

c000a8be <VgaText::updateCursor()>:
c000a8be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8c2:	39 05 24 7d 02 c0    	cmp    DWORD PTR ds:0xc0027d24,eax
c000a8c8:	75 09                	jne    c000a8d3 <VgaText::updateCursor()+0x15>
c000a8ca:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000a8cd:	85 c0                	test   eax,eax
c000a8cf:	74 02                	je     c000a8d3 <VgaText::updateCursor()+0x15>
c000a8d1:	ff e0                	jmp    eax
c000a8d3:	c3                   	ret    

c000a8d4 <VgaText::doANSI_SGR(int)>:
c000a8d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a8d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8dc:	85 d2                	test   edx,edx
c000a8de:	75 0b                	jne    c000a8eb <VgaText::doANSI_SGR(int)+0x17>
c000a8e0:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000a8e3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a8e6:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a8e9:	eb 59                	jmp    c000a944 <VgaText::doANSI_SGR(int)+0x70>
c000a8eb:	83 fa 07             	cmp    edx,0x7
c000a8ee:	75 0b                	jne    c000a8fb <VgaText::doANSI_SGR(int)+0x27>
c000a8f0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000a8f3:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000a8f6:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000a8f9:	eb 49                	jmp    c000a944 <VgaText::doANSI_SGR(int)+0x70>
c000a8fb:	83 fa 1b             	cmp    edx,0x1b
c000a8fe:	74 e0                	je     c000a8e0 <VgaText::doANSI_SGR(int)+0xc>
c000a900:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000a903:	83 f9 07             	cmp    ecx,0x7
c000a906:	77 09                	ja     c000a911 <VgaText::doANSI_SGR(int)+0x3d>
c000a908:	8b 14 8d a0 70 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8f60]
c000a90f:	eb 20                	jmp    c000a931 <VgaText::doANSI_SGR(int)+0x5d>
c000a911:	8d 4a d8             	lea    ecx,[edx-0x28]
c000a914:	83 f9 07             	cmp    ecx,0x7
c000a917:	77 09                	ja     c000a922 <VgaText::doANSI_SGR(int)+0x4e>
c000a919:	8b 14 8d a0 70 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8f60]
c000a920:	eb 22                	jmp    c000a944 <VgaText::doANSI_SGR(int)+0x70>
c000a922:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000a925:	83 f9 07             	cmp    ecx,0x7
c000a928:	77 0b                	ja     c000a935 <VgaText::doANSI_SGR(int)+0x61>
c000a92a:	8b 14 95 58 6f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd90a8]
c000a931:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a934:	c3                   	ret    
c000a935:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000a938:	83 f9 07             	cmp    ecx,0x7
c000a93b:	77 0a                	ja     c000a947 <VgaText::doANSI_SGR(int)+0x73>
c000a93d:	8b 14 95 30 6f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd90d0]
c000a944:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a947:	c3                   	ret    

c000a948 <VgaText::setDefaultBgColour(VgaColour)>:
c000a948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a94c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a950:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a953:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a956:	c3                   	ret    
c000a957:	90                   	nop

c000a958 <VgaText::setDefaultFgColour(VgaColour)>:
c000a958:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a95c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a960:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000a963:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a966:	c3                   	ret    
c000a967:	90                   	nop

c000a968 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000a968:	53                   	push   ebx
c000a969:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a96d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a971:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a975:	51                   	push   ecx
c000a976:	e8 cd ff ff ff       	call   c000a948 <VgaText::setDefaultBgColour(VgaColour)>
c000a97b:	58                   	pop    eax
c000a97c:	5a                   	pop    edx
c000a97d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000a981:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a985:	5b                   	pop    ebx
c000a986:	eb d0                	jmp    c000a958 <VgaText::setDefaultFgColour(VgaColour)>

c000a988 <VgaText::setTitleTextColour(VgaColour)>:
c000a988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a98c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a990:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000a993:	e9 9a fe ff ff       	jmp    c000a832 <VgaText::updateTitle()>

c000a998 <VgaText::setTitleColour(VgaColour)>:
c000a998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a99c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a9a0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a9a3:	e9 8a fe ff ff       	jmp    c000a832 <VgaText::updateTitle()>

c000a9a8 <VgaText::setTitle(char*)>:
c000a9a8:	53                   	push   ebx
c000a9a9:	83 ec 10             	sub    esp,0x10
c000a9ac:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a9b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a9b4:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000a9ba:	50                   	push   eax
c000a9bb:	e8 80 5d ff ff       	call   c0000740 <strcpy>
c000a9c0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a9c4:	83 c4 18             	add    esp,0x18
c000a9c7:	5b                   	pop    ebx
c000a9c8:	e9 65 fe ff ff       	jmp    c000a832 <VgaText::updateTitle()>
c000a9cd:	90                   	nop

c000a9ce <VgaText::combineColours(unsigned char, unsigned char)>:
c000a9ce:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000a9d2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000a9d7:	83 e0 0f             	and    eax,0xf
c000a9da:	c1 e2 04             	shl    edx,0x4
c000a9dd:	09 d0                	or     eax,edx
c000a9df:	c3                   	ret    

c000a9e0 <VgaText::scrollScreen()>:
c000a9e0:	55                   	push   ebp
c000a9e1:	b9 01 00 00 00       	mov    ecx,0x1
c000a9e6:	57                   	push   edi
c000a9e7:	56                   	push   esi
c000a9e8:	53                   	push   ebx
c000a9e9:	83 ec 0c             	sub    esp,0xc
c000a9ec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a9f0:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000a9f6:	31 ff                	xor    edi,edi
c000a9f8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a9fb:	83 f9 17             	cmp    ecx,0x17
c000a9fe:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000aa01:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000aa08:	75 27                	jne    c000aa31 <VgaText::scrollScreen()+0x51>
c000aa0a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000aa0d:	01 f5                	add    ebp,esi
c000aa0f:	f7 c7 01 00 00 00    	test   edi,0x1
c000aa15:	74 16                	je     c000aa2d <VgaText::scrollScreen()+0x4d>
c000aa17:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000aa1b:	50                   	push   eax
c000aa1c:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000aa20:	50                   	push   eax
c000aa21:	e8 a8 ff ff ff       	call   c000a9ce <VgaText::combineColours(unsigned char, unsigned char)>
c000aa26:	5a                   	pop    edx
c000aa27:	5a                   	pop    edx
c000aa28:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000aa2b:	eb 04                	jmp    c000aa31 <VgaText::scrollScreen()+0x51>
c000aa2d:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000aa31:	47                   	inc    edi
c000aa32:	46                   	inc    esi
c000aa33:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000aa39:	75 bd                	jne    c000a9f8 <VgaText::scrollScreen()+0x18>
c000aa3b:	41                   	inc    ecx
c000aa3c:	83 f9 18             	cmp    ecx,0x18
c000aa3f:	75 af                	jne    c000a9f0 <VgaText::scrollScreen()+0x10>
c000aa41:	39 1d 24 7d 02 c0    	cmp    DWORD PTR ds:0xc0027d24,ebx
c000aa47:	75 1b                	jne    c000aa64 <VgaText::scrollScreen()+0x84>
c000aa49:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000aa4d:	74 05                	je     c000aa54 <VgaText::scrollScreen()+0x74>
c000aa4f:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000aa52:	eb 10                	jmp    c000aa64 <VgaText::scrollScreen()+0x84>
c000aa54:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000aa57:	85 c0                	test   eax,eax
c000aa59:	74 09                	je     c000aa64 <VgaText::scrollScreen()+0x84>
c000aa5b:	83 ec 0c             	sub    esp,0xc
c000aa5e:	53                   	push   ebx
c000aa5f:	ff d0                	call   eax
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000aa68:	83 c4 0c             	add    esp,0xc
c000aa6b:	5b                   	pop    ebx
c000aa6c:	5e                   	pop    esi
c000aa6d:	5f                   	pop    edi
c000aa6e:	5d                   	pop    ebp
c000aa6f:	e9 4a fe ff ff       	jmp    c000a8be <VgaText::updateCursor()>

c000aa74 <VgaText::combineCharAndColour(char, unsigned char)>:
c000aa74:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000aa79:	c1 e0 08             	shl    eax,0x8
c000aa7c:	89 c2                	mov    edx,eax
c000aa7e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000aa83:	09 d0                	or     eax,edx
c000aa85:	c3                   	ret    

c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000aa86:	56                   	push   esi
c000aa87:	53                   	push   ebx
c000aa88:	51                   	push   ecx
c000aa89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aa8d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000aa92:	50                   	push   eax
c000aa93:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000aa98:	50                   	push   eax
c000aa99:	e8 30 ff ff ff       	call   c000a9ce <VgaText::combineColours(unsigned char, unsigned char)>
c000aa9e:	5b                   	pop    ebx
c000aa9f:	0f b6 c0             	movzx  eax,al
c000aaa2:	5e                   	pop    esi
c000aaa3:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000aaa8:	50                   	push   eax
c000aaa9:	53                   	push   ebx
c000aaaa:	e8 c5 ff ff ff       	call   c000aa74 <VgaText::combineCharAndColour(char, unsigned char)>
c000aaaf:	5a                   	pop    edx
c000aab0:	5e                   	pop    esi
c000aab1:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000aab4:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000aaba:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000aabe:	0f b7 d2             	movzx  edx,dx
c000aac1:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000aac5:	39 0d 24 7d 02 c0    	cmp    DWORD PTR ds:0xc0027d24,ecx
c000aacb:	75 10                	jne    c000aadd <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000aacd:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000aad0:	85 c0                	test   eax,eax
c000aad2:	74 09                	je     c000aadd <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000aad4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000aad8:	5a                   	pop    edx
c000aad9:	5b                   	pop    ebx
c000aada:	5e                   	pop    esi
c000aadb:	ff e0                	jmp    eax
c000aadd:	58                   	pop    eax
c000aade:	5b                   	pop    ebx
c000aadf:	5e                   	pop    esi
c000aae0:	c3                   	ret    
c000aae1:	90                   	nop

c000aae2 <VgaText::getCursorX()>:
c000aae2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aae6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000aae9:	c3                   	ret    

c000aaea <VgaText::getCursorY()>:
c000aaea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aaee:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000aaf1:	c3                   	ret    

c000aaf2 <VgaText::setCursor(int, int)>:
c000aaf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aaf6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aafa:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000aafd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ab01:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ab04:	e9 b5 fd ff ff       	jmp    c000a8be <VgaText::updateCursor()>

c000ab09 <setActiveTerminal(VgaText*)>:
c000ab09:	53                   	push   ebx
c000ab0a:	83 ec 08             	sub    esp,0x8
c000ab0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab11:	85 db                	test   ebx,ebx
c000ab13:	75 11                	jne    c000ab26 <setActiveTerminal(VgaText*)+0x1d>
c000ab15:	c7 44 24 10 20 41 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024120
c000ab1d:	83 c4 08             	add    esp,0x8
c000ab20:	5b                   	pop    ebx
c000ab21:	e9 89 9d 00 00       	jmp    c00148af <Krnl::panic(char const*)>
c000ab26:	a1 24 7d 02 c0       	mov    eax,ds:0xc0027d24
c000ab2b:	85 c0                	test   eax,eax
c000ab2d:	74 0c                	je     c000ab3b <setActiveTerminal(VgaText*)+0x32>
c000ab2f:	83 ec 0c             	sub    esp,0xc
c000ab32:	50                   	push   eax
c000ab33:	e8 86 fd ff ff       	call   c000a8be <VgaText::updateCursor()>
c000ab38:	83 c4 10             	add    esp,0x10
c000ab3b:	89 1d 24 7d 02 c0    	mov    DWORD PTR ds:0xc0027d24,ebx
c000ab41:	51                   	push   ecx
c000ab42:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ab45:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ab48:	53                   	push   ebx
c000ab49:	e8 a4 ff ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000ab4e:	83 c4 10             	add    esp,0x10
c000ab51:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000ab55:	75 07                	jne    c000ab5e <setActiveTerminal(VgaText*)+0x55>
c000ab57:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000ab5e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab62:	83 c4 08             	add    esp,0x8
c000ab65:	5b                   	pop    ebx
c000ab66:	e9 05 fd ff ff       	jmp    c000a870 <VgaText::load()>

c000ab6b <doTerminalCycle()>:
c000ab6b:	83 ec 18             	sub    esp,0x18
c000ab6e:	a1 20 7d 02 c0       	mov    eax,ds:0xc0027d20
c000ab73:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000ab76:	50                   	push   eax
c000ab77:	a3 20 7d 02 c0       	mov    ds:0xc0027d20,eax
c000ab7c:	e8 88 ff ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c000ab81:	83 c4 1c             	add    esp,0x1c
c000ab84:	c3                   	ret    
c000ab85:	90                   	nop

c000ab86 <VgaText::setCursorX(int)>:
c000ab86:	83 ec 10             	sub    esp,0x10
c000ab89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ab8d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000ab90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab94:	50                   	push   eax
c000ab95:	e8 58 ff ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000ab9a:	83 c4 1c             	add    esp,0x1c
c000ab9d:	c3                   	ret    

c000ab9e <VgaText::setCursorY(int)>:
c000ab9e:	83 ec 10             	sub    esp,0x10
c000aba1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aba5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aba9:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000abac:	50                   	push   eax
c000abad:	e8 40 ff ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000abb2:	83 c4 1c             	add    esp,0x1c
c000abb5:	c3                   	ret    

c000abb6 <VgaText::incrementCursor(bool)>:
c000abb6:	56                   	push   esi
c000abb7:	53                   	push   ebx
c000abb8:	51                   	push   ecx
c000abb9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000abbd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000abc1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000abc4:	40                   	inc    eax
c000abc5:	83 f8 50             	cmp    eax,0x50
c000abc8:	74 05                	je     c000abcf <VgaText::incrementCursor(bool)+0x19>
c000abca:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000abcd:	eb 24                	jmp    c000abf3 <VgaText::incrementCursor(bool)+0x3d>
c000abcf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000abd2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000abd9:	8d 50 01             	lea    edx,[eax+0x1]
c000abdc:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000abdf:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000abe2:	75 0f                	jne    c000abf3 <VgaText::incrementCursor(bool)+0x3d>
c000abe4:	83 ec 0c             	sub    esp,0xc
c000abe7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000abea:	53                   	push   ebx
c000abeb:	e8 f0 fd ff ff       	call   c000a9e0 <VgaText::scrollScreen()>
c000abf0:	83 c4 10             	add    esp,0x10
c000abf3:	89 f0                	mov    eax,esi
c000abf5:	84 c0                	test   al,al
c000abf7:	74 0c                	je     c000ac05 <VgaText::incrementCursor(bool)+0x4f>
c000abf9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000abfd:	5a                   	pop    edx
c000abfe:	5b                   	pop    ebx
c000abff:	5e                   	pop    esi
c000ac00:	e9 b9 fc ff ff       	jmp    c000a8be <VgaText::updateCursor()>
c000ac05:	58                   	pop    eax
c000ac06:	5b                   	pop    ebx
c000ac07:	5e                   	pop    esi
c000ac08:	c3                   	ret    
c000ac09:	90                   	nop

c000ac0a <VgaText::decrementCursor(bool)>:
c000ac0a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ac0e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ac12:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000ac15:	85 c0                	test   eax,eax
c000ac17:	74 04                	je     c000ac1d <VgaText::decrementCursor(bool)+0x13>
c000ac19:	48                   	dec    eax
c000ac1a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000ac1d:	84 c9                	test   cl,cl
c000ac1f:	74 09                	je     c000ac2a <VgaText::decrementCursor(bool)+0x20>
c000ac21:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac25:	e9 94 fc ff ff       	jmp    c000a8be <VgaText::updateCursor()>
c000ac2a:	c3                   	ret    
c000ac2b:	90                   	nop

c000ac2c <VgaText::putchar(char, VgaColour, VgaColour)>:
c000ac2c:	53                   	push   ebx
c000ac2d:	83 ec 08             	sub    esp,0x8
c000ac30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac34:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ac38:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ac3c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ac40:	3c 07                	cmp    al,0x7
c000ac42:	75 2a                	jne    c000ac6e <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000ac44:	a1 d8 7d 02 c0       	mov    eax,ds:0xc0027dd8
c000ac49:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ac51:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000ac59:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000ac61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac65:	83 c4 08             	add    esp,0x8
c000ac68:	5b                   	pop    ebx
c000ac69:	e9 ec 2e 00 00       	jmp    c000db5a <Buzzer::beep(int, int, bool)>
c000ac6e:	3c 0d                	cmp    al,0xd
c000ac70:	75 09                	jne    c000ac7b <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000ac72:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ac79:	eb 2c                	jmp    c000aca7 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000ac7b:	3c 0a                	cmp    al,0xa
c000ac7d:	75 31                	jne    c000acb0 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000ac7f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ac82:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ac89:	8d 50 01             	lea    edx,[eax+0x1]
c000ac8c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000ac8f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000ac92:	75 0f                	jne    c000aca3 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000ac94:	83 ec 0c             	sub    esp,0xc
c000ac97:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000ac9a:	53                   	push   ebx
c000ac9b:	e8 40 fd ff ff       	call   c000a9e0 <VgaText::scrollScreen()>
c000aca0:	83 c4 10             	add    esp,0x10
c000aca3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aca7:	83 c4 08             	add    esp,0x8
c000acaa:	5b                   	pop    ebx
c000acab:	e9 0e fc ff ff       	jmp    c000a8be <VgaText::updateCursor()>
c000acb0:	3c 08                	cmp    al,0x8
c000acb2:	75 25                	jne    c000acd9 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000acb4:	50                   	push   eax
c000acb5:	50                   	push   eax
c000acb6:	6a 01                	push   0x1
c000acb8:	53                   	push   ebx
c000acb9:	e8 4c ff ff ff       	call   c000ac0a <VgaText::decrementCursor(bool)>
c000acbe:	5a                   	pop    edx
c000acbf:	59                   	pop    ecx
c000acc0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000acc3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000acc6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000acc9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000accc:	6a 20                	push   0x20
c000acce:	53                   	push   ebx
c000accf:	e8 b2 fd ff ff       	call   c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000acd4:	83 c4 28             	add    esp,0x28
c000acd7:	5b                   	pop    ebx
c000acd8:	c3                   	ret    
c000acd9:	83 ec 08             	sub    esp,0x8
c000acdc:	0f be c0             	movsx  eax,al
c000acdf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ace2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ace5:	51                   	push   ecx
c000ace6:	52                   	push   edx
c000ace7:	50                   	push   eax
c000ace8:	53                   	push   ebx
c000ace9:	e8 98 fd ff ff       	call   c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000acee:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000acf2:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000acfa:	83 c4 28             	add    esp,0x28
c000acfd:	5b                   	pop    ebx
c000acfe:	e9 b3 fe ff ff       	jmp    c000abb6 <VgaText::incrementCursor(bool)>
c000ad03:	90                   	nop

c000ad04 <VgaText::doUpdate()>:
c000ad04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad08:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000ad0b:	85 c0                	test   eax,eax
c000ad0d:	74 02                	je     c000ad11 <VgaText::doUpdate()+0xd>
c000ad0f:	ff e0                	jmp    eax
c000ad11:	c3                   	ret    

c000ad12 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000ad12:	55                   	push   ebp
c000ad13:	31 ed                	xor    ebp,ebp
c000ad15:	57                   	push   edi
c000ad16:	56                   	push   esi
c000ad17:	53                   	push   ebx
c000ad18:	83 ec 1c             	sub    esp,0x1c
c000ad1b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ad1f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000ad24:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000ad2b:	50                   	push   eax
c000ad2c:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000ad31:	50                   	push   eax
c000ad32:	e8 97 fc ff ff       	call   c000a9ce <VgaText::combineColours(unsigned char, unsigned char)>
c000ad37:	59                   	pop    ecx
c000ad38:	0f b6 c0             	movzx  eax,al
c000ad3b:	5e                   	pop    esi
c000ad3c:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ad41:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ad45:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000ad48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ad4c:	0f b7 f6             	movzx  esi,si
c000ad4f:	01 f6                	add    esi,esi
c000ad51:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ad54:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ad57:	84 c0                	test   al,al
c000ad59:	0f 84 fd 00 00 00    	je     c000ae5c <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000ad5f:	3c 0d                	cmp    al,0xd
c000ad61:	75 0c                	jne    c000ad6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000ad63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ad6a:	e9 e7 00 00 00       	jmp    c000ae56 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000ad6f:	3c 0a                	cmp    al,0xa
c000ad71:	75 47                	jne    c000adba <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000ad73:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ad76:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ad7d:	8d 48 01             	lea    ecx,[eax+0x1]
c000ad80:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000ad83:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000ad86:	75 0f                	jne    c000ad97 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000ad88:	83 ec 0c             	sub    esp,0xc
c000ad8b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000ad8e:	53                   	push   ebx
c000ad8f:	e8 4c fc ff ff       	call   c000a9e0 <VgaText::scrollScreen()>
c000ad94:	83 c4 10             	add    esp,0x10
c000ad97:	83 ec 0c             	sub    esp,0xc
c000ad9a:	31 ed                	xor    ebp,ebp
c000ad9c:	53                   	push   ebx
c000ad9d:	e8 1c fb ff ff       	call   c000a8be <VgaText::updateCursor()>
c000ada2:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ada7:	83 c4 10             	add    esp,0x10
c000adaa:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000adad:	0f b7 f6             	movzx  esi,si
c000adb0:	01 f6                	add    esi,esi
c000adb2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000adb5:	e9 9c 00 00 00       	jmp    c000ae56 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000adba:	3c 08                	cmp    al,0x8
c000adbc:	75 35                	jne    c000adf3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000adbe:	56                   	push   esi
c000adbf:	56                   	push   esi
c000adc0:	6a 01                	push   0x1
c000adc2:	53                   	push   ebx
c000adc3:	e8 42 fe ff ff       	call   c000ac0a <VgaText::decrementCursor(bool)>
c000adc8:	58                   	pop    eax
c000adc9:	5a                   	pop    edx
c000adca:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000adcd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000add0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000add3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000add6:	6a 20                	push   0x20
c000add8:	53                   	push   ebx
c000add9:	e8 a8 fc ff ff       	call   c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000adde:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ade3:	83 c4 20             	add    esp,0x20
c000ade6:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000ade9:	0f b7 f6             	movzx  esi,si
c000adec:	01 f6                	add    esi,esi
c000adee:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000adf1:	eb 63                	jmp    c000ae56 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000adf3:	51                   	push   ecx
c000adf4:	51                   	push   ecx
c000adf5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adf9:	50                   	push   eax
c000adfa:	e8 75 fc ff ff       	call   c000aa74 <VgaText::combineCharAndColour(char, unsigned char)>
c000adff:	83 c4 10             	add    esp,0x10
c000ae02:	66 89 06             	mov    WORD PTR [esi],ax
c000ae05:	39 1d 24 7d 02 c0    	cmp    DWORD PTR ds:0xc0027d24,ebx
c000ae0b:	75 21                	jne    c000ae2e <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ae0d:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000ae10:	85 c0                	test   eax,eax
c000ae12:	74 1a                	je     c000ae2e <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ae14:	52                   	push   edx
c000ae15:	52                   	push   edx
c000ae16:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ae19:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ae1c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae20:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae24:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000ae27:	51                   	push   ecx
c000ae28:	53                   	push   ebx
c000ae29:	ff d0                	call   eax
c000ae2b:	83 c4 20             	add    esp,0x20
c000ae2e:	83 c6 02             	add    esi,0x2
c000ae31:	50                   	push   eax
c000ae32:	50                   	push   eax
c000ae33:	6a 00                	push   0x0
c000ae35:	53                   	push   ebx
c000ae36:	e8 7b fd ff ff       	call   c000abb6 <VgaText::incrementCursor(bool)>
c000ae3b:	83 c4 10             	add    esp,0x10
c000ae3e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000ae42:	75 0d                	jne    c000ae51 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000ae44:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ae49:	0f b7 f6             	movzx  esi,si
c000ae4c:	01 f6                	add    esi,esi
c000ae4e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ae51:	bd 01 00 00 00       	mov    ebp,0x1
c000ae56:	47                   	inc    edi
c000ae57:	e9 f8 fe ff ff       	jmp    c000ad54 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000ae5c:	83 ec 0c             	sub    esp,0xc
c000ae5f:	53                   	push   ebx
c000ae60:	e8 59 fa ff ff       	call   c000a8be <VgaText::updateCursor()>
c000ae65:	83 c4 10             	add    esp,0x10
c000ae68:	89 e8                	mov    eax,ebp
c000ae6a:	84 c0                	test   al,al
c000ae6c:	74 0c                	je     c000ae7a <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000ae6e:	83 ec 0c             	sub    esp,0xc
c000ae71:	53                   	push   ebx
c000ae72:	e8 8d fe ff ff       	call   c000ad04 <VgaText::doUpdate()>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000ae81:	83 c4 1c             	add    esp,0x1c
c000ae84:	5b                   	pop    ebx
c000ae85:	5e                   	pop    esi
c000ae86:	5f                   	pop    edi
c000ae87:	5d                   	pop    ebp
c000ae88:	c3                   	ret    
c000ae89:	90                   	nop

c000ae8a <VgaText::clearScreen()>:
c000ae8a:	57                   	push   edi
c000ae8b:	56                   	push   esi
c000ae8c:	31 f6                	xor    esi,esi
c000ae8e:	53                   	push   ebx
c000ae8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ae93:	52                   	push   edx
c000ae94:	6a 00                	push   0x0
c000ae96:	6a 00                	push   0x0
c000ae98:	53                   	push   ebx
c000ae99:	e8 54 fc ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000ae9e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000aea5:	83 c4 10             	add    esp,0x10
c000aea8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000aeab:	7e 20                	jle    c000aecd <VgaText::clearScreen()+0x43>
c000aead:	31 ff                	xor    edi,edi
c000aeaf:	50                   	push   eax
c000aeb0:	50                   	push   eax
c000aeb1:	56                   	push   esi
c000aeb2:	57                   	push   edi
c000aeb3:	47                   	inc    edi
c000aeb4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000aeb7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000aeba:	6a 20                	push   0x20
c000aebc:	53                   	push   ebx
c000aebd:	e8 c4 fb ff ff       	call   c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000aec2:	83 c4 20             	add    esp,0x20
c000aec5:	83 ff 50             	cmp    edi,0x50
c000aec8:	75 e5                	jne    c000aeaf <VgaText::clearScreen()+0x25>
c000aeca:	46                   	inc    esi
c000aecb:	eb db                	jmp    c000aea8 <VgaText::clearScreen()+0x1e>
c000aecd:	83 ec 0c             	sub    esp,0xc
c000aed0:	53                   	push   ebx
c000aed1:	e8 2e fe ff ff       	call   c000ad04 <VgaText::doUpdate()>
c000aed6:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000aedd:	83 c4 10             	add    esp,0x10
c000aee0:	5b                   	pop    ebx
c000aee1:	5e                   	pop    esi
c000aee2:	5f                   	pop    edi
c000aee3:	c3                   	ret    

c000aee4 <VgaText::putchar(char)>:
c000aee4:	56                   	push   esi
c000aee5:	53                   	push   ebx
c000aee6:	83 ec 14             	sub    esp,0x14
c000aee9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aeed:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000aef1:	3c 5b                	cmp    al,0x5b
c000aef3:	75 18                	jne    c000af0d <VgaText::putchar(char)+0x29>
c000aef5:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000aef9:	74 1f                	je     c000af1a <VgaText::putchar(char)+0x36>
c000aefb:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000af01:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000af08:	e9 bd 00 00 00       	jmp    c000afca <VgaText::putchar(char)+0xe6>
c000af0d:	3c 1b                	cmp    al,0x1b
c000af0f:	75 09                	jne    c000af1a <VgaText::putchar(char)+0x36>
c000af11:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000af15:	e9 b0 00 00 00       	jmp    c000afca <VgaText::putchar(char)+0xe6>
c000af1a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000af1d:	84 c9                	test   cl,cl
c000af1f:	0f 84 92 00 00 00    	je     c000afb7 <VgaText::putchar(char)+0xd3>
c000af25:	8d 50 c0             	lea    edx,[eax-0x40]
c000af28:	80 fa 3e             	cmp    dl,0x3e
c000af2b:	77 76                	ja     c000afa3 <VgaText::putchar(char)+0xbf>
c000af2d:	3c 6d                	cmp    al,0x6d
c000af2f:	75 47                	jne    c000af78 <VgaText::putchar(char)+0x94>
c000af31:	31 f6                	xor    esi,esi
c000af33:	31 d2                	xor    edx,edx
c000af35:	31 c0                	xor    eax,eax
c000af37:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000af3a:	7e 2d                	jle    c000af69 <VgaText::putchar(char)+0x85>
c000af3c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000af41:	80 fa 3b             	cmp    dl,0x3b
c000af44:	75 17                	jne    c000af5d <VgaText::putchar(char)+0x79>
c000af46:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000af4a:	50                   	push   eax
c000af4b:	53                   	push   ebx
c000af4c:	e8 83 f9 ff ff       	call   c000a8d4 <VgaText::doANSI_SGR(int)>
c000af51:	59                   	pop    ecx
c000af52:	31 d2                	xor    edx,edx
c000af54:	58                   	pop    eax
c000af55:	31 c0                	xor    eax,eax
c000af57:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000af5b:	eb 09                	jmp    c000af66 <VgaText::putchar(char)+0x82>
c000af5d:	6b c0 0a             	imul   eax,eax,0xa
c000af60:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000af64:	88 ca                	mov    dl,cl
c000af66:	46                   	inc    esi
c000af67:	eb ce                	jmp    c000af37 <VgaText::putchar(char)+0x53>
c000af69:	84 d2                	test   dl,dl
c000af6b:	74 2e                	je     c000af9b <VgaText::putchar(char)+0xb7>
c000af6d:	50                   	push   eax
c000af6e:	53                   	push   ebx
c000af6f:	e8 60 f9 ff ff       	call   c000a8d4 <VgaText::doANSI_SGR(int)>
c000af74:	58                   	pop    eax
c000af75:	5a                   	pop    edx
c000af76:	eb 23                	jmp    c000af9b <VgaText::putchar(char)+0xb7>
c000af78:	3c 4a                	cmp    al,0x4a
c000af7a:	75 1f                	jne    c000af9b <VgaText::putchar(char)+0xb7>
c000af7c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000af80:	75 19                	jne    c000af9b <VgaText::putchar(char)+0xb7>
c000af82:	83 ec 0c             	sub    esp,0xc
c000af85:	53                   	push   ebx
c000af86:	e8 ff fe ff ff       	call   c000ae8a <VgaText::clearScreen()>
c000af8b:	83 c4 0c             	add    esp,0xc
c000af8e:	6a 00                	push   0x0
c000af90:	6a 00                	push   0x0
c000af92:	53                   	push   ebx
c000af93:	e8 5a fb ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000af98:	83 c4 10             	add    esp,0x10
c000af9b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000afa1:	eb 27                	jmp    c000afca <VgaText::putchar(char)+0xe6>
c000afa3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000afa6:	83 fa 0e             	cmp    edx,0xe
c000afa9:	7f 1f                	jg     c000afca <VgaText::putchar(char)+0xe6>
c000afab:	8d 4a 01             	lea    ecx,[edx+0x1]
c000afae:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000afb1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000afb5:	eb 13                	jmp    c000afca <VgaText::putchar(char)+0xe6>
c000afb7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000afba:	0f be c0             	movsx  eax,al
c000afbd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000afc0:	50                   	push   eax
c000afc1:	53                   	push   ebx
c000afc2:	e8 65 fc ff ff       	call   c000ac2c <VgaText::putchar(char, VgaColour, VgaColour)>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	83 c4 14             	add    esp,0x14
c000afcd:	5b                   	pop    ebx
c000afce:	5e                   	pop    esi
c000afcf:	c3                   	ret    

c000afd0 <VgaText::putx(unsigned int)>:
c000afd0:	57                   	push   edi
c000afd1:	b9 11 00 00 00       	mov    ecx,0x11
c000afd6:	56                   	push   esi
c000afd7:	be 2e 41 02 c0       	mov    esi,0xc002412e
c000afdc:	53                   	push   ebx
c000afdd:	83 ec 20             	sub    esp,0x20
c000afe0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000afe4:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000afe8:	fc                   	cld    
c000afe9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000afeb:	be 08 00 00 00       	mov    esi,0x8
c000aff0:	50                   	push   eax
c000aff1:	50                   	push   eax
c000aff2:	89 d8                	mov    eax,ebx
c000aff4:	c1 e3 04             	shl    ebx,0x4
c000aff7:	c1 e8 1c             	shr    eax,0x1c
c000affa:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000afff:	50                   	push   eax
c000b000:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b004:	e8 db fe ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b009:	83 c4 10             	add    esp,0x10
c000b00c:	4e                   	dec    esi
c000b00d:	75 e1                	jne    c000aff0 <VgaText::putx(unsigned int)+0x20>
c000b00f:	83 c4 20             	add    esp,0x20
c000b012:	5b                   	pop    ebx
c000b013:	5e                   	pop    esi
c000b014:	5f                   	pop    edi
c000b015:	c3                   	ret    

c000b016 <VgaText::puts(char const*)>:
c000b016:	53                   	push   ebx
c000b017:	83 ec 08             	sub    esp,0x8
c000b01a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b01e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000b021:	84 c0                	test   al,al
c000b023:	74 12                	je     c000b037 <VgaText::puts(char const*)+0x21>
c000b025:	43                   	inc    ebx
c000b026:	51                   	push   ecx
c000b027:	51                   	push   ecx
c000b028:	50                   	push   eax
c000b029:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b02d:	e8 b2 fe ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b032:	83 c4 10             	add    esp,0x10
c000b035:	eb e7                	jmp    c000b01e <VgaText::puts(char const*)+0x8>
c000b037:	83 c4 08             	add    esp,0x8
c000b03a:	5b                   	pop    ebx
c000b03b:	c3                   	ret    

c000b03c <VgaText::VgaText(char const*)>:
c000b03c:	57                   	push   edi
c000b03d:	56                   	push   esi
c000b03e:	53                   	push   ebx
c000b03f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b043:	83 ec 08             	sub    esp,0x8
c000b046:	6a 00                	push   0x0
c000b048:	50                   	push   eax
c000b049:	e8 48 05 00 00       	call   c000b596 <UnixFile::UnixFile(int)>
c000b04e:	83 c4 10             	add    esp,0x10
c000b051:	ba 94 41 02 c0       	mov    edx,0xc0024194
c000b056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b05a:	89 10                	mov    DWORD PTR [eax],edx
c000b05c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b060:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b06b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000b072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b076:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000b07a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b07e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000b082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b086:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000b08d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b091:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000b098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b09c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000b0a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0a7:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000b0ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0b2:	8d 50 60             	lea    edx,[eax+0x60]
c000b0b5:	bb 00 7d 02 c0       	mov    ebx,0xc0027d00
c000b0ba:	b8 08 00 00 00       	mov    eax,0x8
c000b0bf:	fc                   	cld    
c000b0c0:	89 d7                	mov    edi,edx
c000b0c2:	89 de                	mov    esi,ebx
c000b0c4:	89 c1                	mov    ecx,eax
c000b0c6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b0c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0cc:	05 82 00 00 00       	add    eax,0x82
c000b0d1:	83 ec 08             	sub    esp,0x8
c000b0d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0d8:	50                   	push   eax
c000b0d9:	e8 62 56 ff ff       	call   c0000740 <strcpy>
c000b0de:	83 c4 10             	add    esp,0x10
c000b0e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0e5:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000b0ec:	83 ec 0c             	sub    esp,0xc
c000b0ef:	6a 01                	push   0x1
c000b0f1:	e8 e3 08 00 00       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c000b0f6:	83 c4 10             	add    esp,0x10
c000b0f9:	89 c2                	mov    edx,eax
c000b0fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0ff:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b102:	8b 1d d0 7d 02 c0    	mov    ebx,DWORD PTR ds:0xc0027dd0
c000b108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b10c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b10f:	89 c6                	mov    esi,eax
c000b111:	e8 b0 ef ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000b116:	68 05 0c 00 00       	push   0xc05
c000b11b:	56                   	push   esi
c000b11c:	50                   	push   eax
c000b11d:	53                   	push   ebx
c000b11e:	e8 5d 0f 00 00       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b123:	83 c4 10             	add    esp,0x10
c000b126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b12a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b12d:	83 ec 04             	sub    esp,0x4
c000b130:	68 00 0f 00 00       	push   0xf00
c000b135:	6a 00                	push   0x0
c000b137:	50                   	push   eax
c000b138:	e8 47 55 ff ff       	call   c0000684 <memset>
c000b13d:	83 c4 10             	add    esp,0x10
c000b140:	83 ec 04             	sub    esp,0x4
c000b143:	6a 00                	push   0x0
c000b145:	6a 07                	push   0x7
c000b147:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b14b:	e8 18 f8 ff ff       	call   c000a968 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	83 ec 04             	sub    esp,0x4
c000b156:	6a 00                	push   0x0
c000b158:	6a 00                	push   0x0
c000b15a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b15e:	e8 8f f9 ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000b163:	83 c4 10             	add    esp,0x10
c000b166:	83 ec 0c             	sub    esp,0xc
c000b169:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b16d:	e8 18 fd ff ff       	call   c000ae8a <VgaText::clearScreen()>
c000b172:	83 c4 10             	add    esp,0x10
c000b175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b179:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000b17d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b181:	05 02 01 00 00       	add    eax,0x102
c000b186:	83 ec 04             	sub    esp,0x4
c000b189:	68 96 00 00 00       	push   0x96
c000b18e:	6a 00                	push   0x0
c000b190:	50                   	push   eax
c000b191:	e8 ee 54 ff ff       	call   c0000684 <memset>
c000b196:	83 c4 10             	add    esp,0x10
c000b199:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b19d:	05 98 01 00 00       	add    eax,0x198
c000b1a2:	83 ec 04             	sub    esp,0x4
c000b1a5:	68 2c 01 00 00       	push   0x12c
c000b1aa:	6a 00                	push   0x0
c000b1ac:	50                   	push   eax
c000b1ad:	e8 d2 54 ff ff       	call   c0000684 <memset>
c000b1b2:	83 c4 10             	add    esp,0x10
c000b1b5:	90                   	nop
c000b1b6:	5b                   	pop    ebx
c000b1b7:	5e                   	pop    esi
c000b1b8:	5f                   	pop    edi
c000b1b9:	c3                   	ret    

c000b1ba <VgaText::receiveKey(unsigned char)>:
c000b1ba:	55                   	push   ebp
c000b1bb:	57                   	push   edi
c000b1bc:	56                   	push   esi
c000b1bd:	53                   	push   ebx
c000b1be:	83 ec 1c             	sub    esp,0x1c
c000b1c1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b1c5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b1c9:	84 db                	test   bl,bl
c000b1cb:	0f 84 c9 00 00 00    	je     c000b29a <VgaText::receiveKey(unsigned char)+0xe0>
c000b1d1:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000b1d7:	80 fb 08             	cmp    bl,0x8
c000b1da:	75 2c                	jne    c000b208 <VgaText::receiveKey(unsigned char)+0x4e>
c000b1dc:	83 ec 0c             	sub    esp,0xc
c000b1df:	57                   	push   edi
c000b1e0:	e8 bb 54 ff ff       	call   c00006a0 <strlen>
c000b1e5:	83 c4 10             	add    esp,0x10
c000b1e8:	85 c0                	test   eax,eax
c000b1ea:	74 41                	je     c000b22d <VgaText::receiveKey(unsigned char)+0x73>
c000b1ec:	50                   	push   eax
c000b1ed:	50                   	push   eax
c000b1ee:	6a 08                	push   0x8
c000b1f0:	56                   	push   esi
c000b1f1:	e8 ee fc ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b1f6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b1f9:	e8 a2 54 ff ff       	call   c00006a0 <strlen>
c000b1fe:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000b206:	eb 22                	jmp    c000b22a <VgaText::receiveKey(unsigned char)+0x70>
c000b208:	0f be c3             	movsx  eax,bl
c000b20b:	52                   	push   edx
c000b20c:	52                   	push   edx
c000b20d:	50                   	push   eax
c000b20e:	56                   	push   esi
c000b20f:	e8 d0 fc ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b214:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000b218:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000b21d:	59                   	pop    ecx
c000b21e:	5d                   	pop    ebp
c000b21f:	8d 44 24 16          	lea    eax,[esp+0x16]
c000b223:	50                   	push   eax
c000b224:	57                   	push   edi
c000b225:	e8 56 56 ff ff       	call   c0000880 <strcat>
c000b22a:	83 c4 10             	add    esp,0x10
c000b22d:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000b234:	75 05                	jne    c000b23b <VgaText::receiveKey(unsigned char)+0x81>
c000b236:	80 fb 0a             	cmp    bl,0xa
c000b239:	75 53                	jne    c000b28e <VgaText::receiveKey(unsigned char)+0xd4>
c000b23b:	83 ec 0c             	sub    esp,0xc
c000b23e:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c000b244:	53                   	push   ebx
c000b245:	e8 56 54 ff ff       	call   c00006a0 <strlen>
c000b24a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b24d:	89 c5                	mov    ebp,eax
c000b24f:	e8 4c 54 ff ff       	call   c00006a0 <strlen>
c000b254:	83 c4 10             	add    esp,0x10
c000b257:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000b25b:	3d 2c 01 00 00       	cmp    eax,0x12c
c000b260:	76 10                	jbe    c000b272 <VgaText::receiveKey(unsigned char)+0xb8>
c000b262:	83 ec 0c             	sub    esp,0xc
c000b265:	68 3f 41 02 c0       	push   0xc002413f
c000b26a:	e8 40 96 00 00       	call   c00148af <Krnl::panic(char const*)>
c000b26f:	83 c4 10             	add    esp,0x10
c000b272:	50                   	push   eax
c000b273:	50                   	push   eax
c000b274:	57                   	push   edi
c000b275:	53                   	push   ebx
c000b276:	e8 05 56 ff ff       	call   c0000880 <strcat>
c000b27b:	83 c4 0c             	add    esp,0xc
c000b27e:	68 96 00 00 00       	push   0x96
c000b283:	6a 00                	push   0x0
c000b285:	57                   	push   edi
c000b286:	e8 f9 53 ff ff       	call   c0000684 <memset>
c000b28b:	83 c4 10             	add    esp,0x10
c000b28e:	83 ec 0c             	sub    esp,0xc
c000b291:	56                   	push   esi
c000b292:	e8 6d fa ff ff       	call   c000ad04 <VgaText::doUpdate()>
c000b297:	83 c4 10             	add    esp,0x10
c000b29a:	83 c4 1c             	add    esp,0x1c
c000b29d:	5b                   	pop    ebx
c000b29e:	5e                   	pop    esi
c000b29f:	5f                   	pop    edi
c000b2a0:	5d                   	pop    ebp
c000b2a1:	c3                   	ret    

c000b2a2 <VgaText::write(unsigned long long, void*, int*)>:
c000b2a2:	55                   	push   ebp
c000b2a3:	57                   	push   edi
c000b2a4:	56                   	push   esi
c000b2a5:	53                   	push   ebx
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b2ad:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b2b1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b2b5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b2bc:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b2bf:	39 eb                	cmp    ebx,ebp
c000b2c1:	74 13                	je     c000b2d6 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b2c3:	43                   	inc    ebx
c000b2c4:	50                   	push   eax
c000b2c5:	50                   	push   eax
c000b2c6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b2ca:	50                   	push   eax
c000b2cb:	56                   	push   esi
c000b2cc:	e8 13 fc ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b2d1:	83 c4 10             	add    esp,0x10
c000b2d4:	eb e9                	jmp    c000b2bf <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b2d6:	83 ec 0c             	sub    esp,0xc
c000b2d9:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b2e0:	56                   	push   esi
c000b2e1:	e8 1e fa ff ff       	call   c000ad04 <VgaText::doUpdate()>
c000b2e6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b2ea:	89 38                	mov    DWORD PTR [eax],edi
c000b2ec:	83 c4 1c             	add    esp,0x1c
c000b2ef:	31 c0                	xor    eax,eax
c000b2f1:	5b                   	pop    ebx
c000b2f2:	5e                   	pop    esi
c000b2f3:	5f                   	pop    edi
c000b2f4:	5d                   	pop    ebp
c000b2f5:	c3                   	ret    

c000b2f6 <newTerminal(char*)>:
c000b2f6:	83 ec 28             	sub    esp,0x28
c000b2f9:	68 c4 02 00 00       	push   0x2c4
c000b2fe:	e8 0c e7 ff ff       	call   c0009a0f <malloc>
c000b303:	5a                   	pop    edx
c000b304:	59                   	pop    ecx
c000b305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b309:	50                   	push   eax
c000b30a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b30e:	e8 29 fd ff ff       	call   c000b03c <VgaText::VgaText(char const*)>
c000b313:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b317:	83 c4 2c             	add    esp,0x2c
c000b31a:	c3                   	ret    
c000b31b:	90                   	nop

c000b31c <TSS::TSS()>:
c000b31c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b320:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b327:	90                   	nop
c000b328:	c3                   	ret    
c000b329:	90                   	nop
c000b32a:	66 90                	xchg   ax,ax

c000b32c <TSS::setESP(unsigned long)>:
c000b32c:	55                   	push   ebp
c000b32d:	89 e5                	mov    ebp,esp
c000b32f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b332:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b335:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b338:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b33b:	90                   	nop
c000b33c:	5d                   	pop    ebp
c000b33d:	c3                   	ret    
c000b33e:	66 90                	xchg   ax,ax

c000b340 <TSS::flush()>:
c000b340:	55                   	push   ebp
c000b341:	89 e5                	mov    ebp,esp
c000b343:	83 ec 10             	sub    esp,0x10
c000b346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b349:	8b 00                	mov    eax,DWORD PTR [eax]
c000b34b:	83 c8 03             	or     eax,0x3
c000b34e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b352:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b356:	66 89 d0             	mov    ax,dx
c000b359:	0f 00 d8             	ltr    ax
c000b35c:	90                   	nop
c000b35d:	c9                   	leave  
c000b35e:	c3                   	ret    
c000b35f:	90                   	nop

c000b360 <TSS::setup(unsigned long, unsigned long)>:
c000b360:	55                   	push   ebp
c000b361:	89 e5                	mov    ebp,esp
c000b363:	83 ec 18             	sub    esp,0x18
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	6a 68                	push   0x68
c000b36b:	e8 9f e6 ff ff       	call   c0009a0f <malloc>
c000b370:	83 c4 10             	add    esp,0x10
c000b373:	89 c2                	mov    edx,eax
c000b375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b378:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b37b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b37e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b381:	83 ec 04             	sub    esp,0x4
c000b384:	6a 68                	push   0x68
c000b386:	6a 00                	push   0x0
c000b388:	50                   	push   eax
c000b389:	e8 f6 52 ff ff       	call   c0000684 <memset>
c000b38e:	83 c4 10             	add    esp,0x10
c000b391:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b394:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b397:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b39d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3a3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b3a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3af:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b3b2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b3b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3bb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b3c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3c7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b3cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3d3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b3d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3df:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b3e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3eb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b3f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3f7:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b3fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b400:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b403:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b406:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b409:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b40c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b40f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b412:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b415:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b418:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b41b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b422:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b425:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b428:	0f 20 da             	mov    edx,cr3
c000b42b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b42e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b431:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b434:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b437:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b43a:	83 ec 08             	sub    esp,0x8
c000b43d:	50                   	push   eax
c000b43e:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b441:	50                   	push   eax
c000b442:	e8 23 de ff ff       	call   c000926a <GDTEntry::setBase(unsigned int)>
c000b447:	83 c4 10             	add    esp,0x10
c000b44a:	83 ec 08             	sub    esp,0x8
c000b44d:	6a 68                	push   0x68
c000b44f:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b452:	50                   	push   eax
c000b453:	e8 2e de ff ff       	call   c0009286 <GDTEntry::setLimit(unsigned int)>
c000b458:	83 c4 10             	add    esp,0x10
c000b45b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b45f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b462:	83 e0 0f             	and    eax,0xf
c000b465:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b468:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b46b:	83 c8 40             	or     eax,0x40
c000b46e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b471:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000b476:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b47c:	05 78 01 00 00       	add    eax,0x178
c000b481:	83 ec 04             	sub    esp,0x4
c000b484:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b487:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b48a:	50                   	push   eax
c000b48b:	e8 2a de ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c000b490:	83 c4 10             	add    esp,0x10
c000b493:	89 c2                	mov    edx,eax
c000b495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b498:	89 10                	mov    DWORD PTR [eax],edx
c000b49a:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000b49f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b4a5:	05 78 01 00 00       	add    eax,0x178
c000b4aa:	83 ec 0c             	sub    esp,0xc
c000b4ad:	50                   	push   eax
c000b4ae:	e8 31 de ff ff       	call   c00092e4 <GDT::flush()>
c000b4b3:	83 c4 10             	add    esp,0x10
c000b4b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b4b9:	8b 00                	mov    eax,DWORD PTR [eax]
c000b4bb:	c9                   	leave  
c000b4bc:	c3                   	ret    
c000b4bd:	90                   	nop

c000b4be <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b4be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b4c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b4c9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b4ce:	75 08                	jne    c000b4d8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b4d0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b4d6:	eb 38                	jmp    c000b510 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b4d8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b4dd:	75 17                	jne    c000b4f6 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b4df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b4e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b4e7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b4ed:	8b 10                	mov    edx,DWORD PTR [eax]
c000b4ef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b4f3:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b4f6:	89 c1                	mov    ecx,eax
c000b4f8:	83 e1 fd             	and    ecx,0xfffffffd
c000b4fb:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b501:	74 cd                	je     c000b4d0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b503:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b508:	83 e0 ef             	and    eax,0xffffffef
c000b50b:	83 f8 08             	cmp    eax,0x8
c000b50e:	76 c0                	jbe    c000b4d0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b510:	31 c0                	xor    eax,eax
c000b512:	c3                   	ret    
c000b513:	90                   	nop

c000b514 <ReservedFilename::isAtty()>:
c000b514:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b518:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b51b:	31 c0                	xor    eax,eax
c000b51d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b523:	74 09                	je     c000b52e <ReservedFilename::isAtty()+0x1a>
c000b525:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b52b:	0f 94 c0             	sete   al
c000b52e:	c3                   	ret    
c000b52f:	90                   	nop

c000b530 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b530:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b534:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b538:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b53b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b53f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b544:	75 08                	jne    c000b54e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b546:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b54c:	eb 3d                	jmp    c000b58b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b54e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b553:	75 17                	jne    c000b56c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b555:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b55a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b55d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b563:	8b 10                	mov    edx,DWORD PTR [eax]
c000b565:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b569:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b56c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b571:	75 04                	jne    c000b577 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b573:	89 0a                	mov    DWORD PTR [edx],ecx
c000b575:	eb 14                	jmp    c000b58b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b577:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b57c:	74 c8                	je     c000b546 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b57e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b583:	83 e0 ef             	and    eax,0xffffffef
c000b586:	83 f8 08             	cmp    eax,0x8
c000b589:	76 bb                	jbe    c000b546 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b58b:	31 c0                	xor    eax,eax
c000b58d:	c3                   	ret    

c000b58e <UnixFile::getFileDescriptor()>:
c000b58e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b592:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b595:	c3                   	ret    

c000b596 <UnixFile::UnixFile(int)>:
c000b596:	53                   	push   ebx
c000b597:	83 ec 28             	sub    esp,0x28
c000b59a:	ba 5c 42 02 c0       	mov    edx,0xc002425c
c000b59f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5a3:	89 10                	mov    DWORD PTR [eax],edx
c000b5a5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b5ad:	0f 8f 8c 01 00 00    	jg     c000b73f <UnixFile::UnixFile(int)+0x1a9>
c000b5b3:	a1 e0 70 02 c0       	mov    eax,ds:0xc00270e0
c000b5b8:	8d 50 01             	lea    edx,[eax+0x1]
c000b5bb:	89 15 e0 70 02 c0    	mov    DWORD PTR ds:0xc00270e0,edx
c000b5c1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b5c5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b5c8:	83 ec 08             	sub    esp,0x8
c000b5cb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b5cf:	68 b8 7d 02 c0       	push   0xc0027db8
c000b5d4:	e8 93 72 01 00       	call   c002286c <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b5d9:	83 c4 10             	add    esp,0x10
c000b5dc:	a0 b4 7d 02 c0       	mov    al,ds:0xc0027db4
c000b5e1:	83 f0 01             	xor    eax,0x1
c000b5e4:	84 c0                	test   al,al
c000b5e6:	0f 84 54 01 00 00    	je     c000b740 <UnixFile::UnixFile(int)+0x1aa>
c000b5ec:	c6 05 b4 7d 02 c0 01 	mov    BYTE PTR ds:0xc0027db4,0x1
c000b5f3:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b5fb:	83 ec 0c             	sub    esp,0xc
c000b5fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b602:	e8 08 e4 ff ff       	call   c0009a0f <malloc>
c000b607:	83 c4 10             	add    esp,0x10
c000b60a:	89 c3                	mov    ebx,eax
c000b60c:	83 ec 08             	sub    esp,0x8
c000b60f:	68 03 ff ff 0f       	push   0xfffff03
c000b614:	53                   	push   ebx
c000b615:	e8 2c 01 00 00       	call   c000b746 <ReservedFilename::ReservedFilename(int)>
c000b61a:	83 c4 10             	add    esp,0x10
c000b61d:	89 1d ac 7d 02 c0    	mov    DWORD PTR ds:0xc0027dac,ebx
c000b623:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b62b:	83 ec 0c             	sub    esp,0xc
c000b62e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b632:	e8 d8 e3 ff ff       	call   c0009a0f <malloc>
c000b637:	83 c4 10             	add    esp,0x10
c000b63a:	89 c3                	mov    ebx,eax
c000b63c:	83 ec 08             	sub    esp,0x8
c000b63f:	68 01 ff ff 0f       	push   0xfffff01
c000b644:	53                   	push   ebx
c000b645:	e8 fc 00 00 00       	call   c000b746 <ReservedFilename::ReservedFilename(int)>
c000b64a:	83 c4 10             	add    esp,0x10
c000b64d:	89 1d b0 7d 02 c0    	mov    DWORD PTR ds:0xc0027db0,ebx
c000b653:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b65b:	83 ec 0c             	sub    esp,0xc
c000b65e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b662:	e8 a8 e3 ff ff       	call   c0009a0f <malloc>
c000b667:	83 c4 10             	add    esp,0x10
c000b66a:	89 c3                	mov    ebx,eax
c000b66c:	83 ec 08             	sub    esp,0x8
c000b66f:	68 00 ff ff 0f       	push   0xfffff00
c000b674:	53                   	push   ebx
c000b675:	e8 cc 00 00 00       	call   c000b746 <ReservedFilename::ReservedFilename(int)>
c000b67a:	83 c4 10             	add    esp,0x10
c000b67d:	89 1d a4 7d 02 c0    	mov    DWORD PTR ds:0xc0027da4,ebx
c000b683:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b68b:	83 ec 0c             	sub    esp,0xc
c000b68e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b692:	e8 78 e3 ff ff       	call   c0009a0f <malloc>
c000b697:	83 c4 10             	add    esp,0x10
c000b69a:	89 c3                	mov    ebx,eax
c000b69c:	83 ec 08             	sub    esp,0x8
c000b69f:	68 02 ff ff 0f       	push   0xfffff02
c000b6a4:	53                   	push   ebx
c000b6a5:	e8 9c 00 00 00       	call   c000b746 <ReservedFilename::ReservedFilename(int)>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	89 1d a8 7d 02 c0    	mov    DWORD PTR ds:0xc0027da8,ebx
c000b6b3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b6bb:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b6c0:	7f 7e                	jg     c000b740 <UnixFile::UnixFile(int)+0x1aa>
c000b6c2:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b6ca:	83 ec 0c             	sub    esp,0xc
c000b6cd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b6d1:	e8 39 e3 ff ff       	call   c0009a0f <malloc>
c000b6d6:	83 c4 10             	add    esp,0x10
c000b6d9:	89 c3                	mov    ebx,eax
c000b6db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6df:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b6e4:	83 ec 08             	sub    esp,0x8
c000b6e7:	50                   	push   eax
c000b6e8:	53                   	push   ebx
c000b6e9:	e8 58 00 00 00       	call   c000b746 <ReservedFilename::ReservedFilename(int)>
c000b6ee:	83 c4 10             	add    esp,0x10
c000b6f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6f5:	89 1c 85 80 7d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8280],ebx
c000b6fc:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b704:	83 ec 0c             	sub    esp,0xc
c000b707:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b70b:	e8 ff e2 ff ff       	call   c0009a0f <malloc>
c000b710:	83 c4 10             	add    esp,0x10
c000b713:	89 c3                	mov    ebx,eax
c000b715:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b719:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b71e:	83 ec 08             	sub    esp,0x8
c000b721:	50                   	push   eax
c000b722:	53                   	push   ebx
c000b723:	e8 1e 00 00 00       	call   c000b746 <ReservedFilename::ReservedFilename(int)>
c000b728:	83 c4 10             	add    esp,0x10
c000b72b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b72f:	89 1c 85 40 7d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd82c0],ebx
c000b736:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b73a:	e9 7c ff ff ff       	jmp    c000b6bb <UnixFile::UnixFile(int)+0x125>
c000b73f:	90                   	nop
c000b740:	83 c4 28             	add    esp,0x28
c000b743:	5b                   	pop    ebx
c000b744:	c3                   	ret    
c000b745:	90                   	nop

c000b746 <ReservedFilename::ReservedFilename(int)>:
c000b746:	83 ec 0c             	sub    esp,0xc
c000b749:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b74d:	83 ec 08             	sub    esp,0x8
c000b750:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b754:	50                   	push   eax
c000b755:	e8 3c fe ff ff       	call   c000b596 <UnixFile::UnixFile(int)>
c000b75a:	83 c4 10             	add    esp,0x10
c000b75d:	ba 78 42 02 c0       	mov    edx,0xc0024278
c000b762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b766:	89 10                	mov    DWORD PTR [eax],edx
c000b768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b76c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b770:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b773:	90                   	nop
c000b774:	83 c4 0c             	add    esp,0xc
c000b777:	c3                   	ret    

c000b778 <UnixFile::~UnixFile()>:
c000b778:	83 ec 1c             	sub    esp,0x1c
c000b77b:	ba 5c 42 02 c0       	mov    edx,0xc002425c
c000b780:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b784:	89 10                	mov    DWORD PTR [eax],edx
c000b786:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b78a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b78d:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000b792:	7f 73                	jg     c000b807 <UnixFile::~UnixFile()+0x8f>
c000b794:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b79c:	83 ec 0c             	sub    esp,0xc
c000b79f:	68 b8 7d 02 c0       	push   0xc0027db8
c000b7a4:	e8 97 71 01 00       	call   c0022940 <LinkedList<UnixFile>::getFirstElement()>
c000b7a9:	83 c4 10             	add    esp,0x10
c000b7ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7b0:	83 ec 0c             	sub    esp,0xc
c000b7b3:	68 b8 7d 02 c0       	push   0xc0027db8
c000b7b8:	e8 8b 71 01 00       	call   c0022948 <LinkedList<UnixFile>::removeFirst()>
c000b7bd:	83 c4 10             	add    esp,0x10
c000b7c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7c4:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000b7c8:	74 40                	je     c000b80a <UnixFile::~UnixFile()+0x92>
c000b7ca:	83 ec 08             	sub    esp,0x8
c000b7cd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b7d1:	68 b8 7d 02 c0       	push   0xc0027db8
c000b7d6:	e8 91 70 01 00       	call   c002286c <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b7db:	83 c4 10             	add    esp,0x10
c000b7de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b7e2:	8d 50 01             	lea    edx,[eax+0x1]
c000b7e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7e9:	3d 88 13 00 00       	cmp    eax,0x1388
c000b7ee:	0f 94 c0             	sete   al
c000b7f1:	84 c0                	test   al,al
c000b7f3:	74 a7                	je     c000b79c <UnixFile::~UnixFile()+0x24>
c000b7f5:	83 ec 0c             	sub    esp,0xc
c000b7f8:	68 34 42 02 c0       	push   0xc0024234
c000b7fd:	e8 ad 90 00 00       	call   c00148af <Krnl::panic(char const*)>
c000b802:	83 c4 10             	add    esp,0x10
c000b805:	eb 95                	jmp    c000b79c <UnixFile::~UnixFile()+0x24>
c000b807:	90                   	nop
c000b808:	eb 01                	jmp    c000b80b <UnixFile::~UnixFile()+0x93>
c000b80a:	90                   	nop
c000b80b:	90                   	nop
c000b80c:	83 c4 1c             	add    esp,0x1c
c000b80f:	c3                   	ret    

c000b810 <UnixFile::~UnixFile()>:
c000b810:	83 ec 0c             	sub    esp,0xc
c000b813:	83 ec 0c             	sub    esp,0xc
c000b816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b81a:	e8 59 ff ff ff       	call   c000b778 <UnixFile::~UnixFile()>
c000b81f:	83 c4 10             	add    esp,0x10
c000b822:	83 ec 08             	sub    esp,0x8
c000b825:	6a 0c                	push   0xc
c000b827:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b82b:	e8 ee 13 00 00       	call   c000cc1e <operator delete(void*, unsigned long)>
c000b830:	83 c4 10             	add    esp,0x10
c000b833:	83 c4 0c             	add    esp,0xc
c000b836:	c3                   	ret    
c000b837:	90                   	nop

c000b838 <ReservedFilename::~ReservedFilename()>:
c000b838:	83 ec 0c             	sub    esp,0xc
c000b83b:	ba 78 42 02 c0       	mov    edx,0xc0024278
c000b840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b844:	89 10                	mov    DWORD PTR [eax],edx
c000b846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b84a:	83 ec 0c             	sub    esp,0xc
c000b84d:	50                   	push   eax
c000b84e:	e8 25 ff ff ff       	call   c000b778 <UnixFile::~UnixFile()>
c000b853:	83 c4 10             	add    esp,0x10
c000b856:	90                   	nop
c000b857:	83 c4 0c             	add    esp,0xc
c000b85a:	c3                   	ret    
c000b85b:	90                   	nop

c000b85c <ReservedFilename::~ReservedFilename()>:
c000b85c:	83 ec 0c             	sub    esp,0xc
c000b85f:	83 ec 0c             	sub    esp,0xc
c000b862:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b866:	e8 cd ff ff ff       	call   c000b838 <ReservedFilename::~ReservedFilename()>
c000b86b:	83 c4 10             	add    esp,0x10
c000b86e:	83 ec 08             	sub    esp,0x8
c000b871:	6a 0c                	push   0xc
c000b873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b877:	e8 a2 13 00 00       	call   c000cc1e <operator delete(void*, unsigned long)>
c000b87c:	83 c4 10             	add    esp,0x10
c000b87f:	83 c4 0c             	add    esp,0xc
c000b882:	c3                   	ret    

c000b883 <getFromFileDescriptor(int)>:
c000b883:	53                   	push   ebx
c000b884:	83 ec 08             	sub    esp,0x8
c000b887:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b88b:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000b891:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000b897:	7f 2c                	jg     c000b8c5 <getFromFileDescriptor(int)+0x42>
c000b899:	83 ec 0c             	sub    esp,0xc
c000b89c:	68 b8 7d 02 c0       	push   0xc0027db8
c000b8a1:	e8 9a 70 01 00       	call   c0022940 <LinkedList<UnixFile>::getFirstElement()>
c000b8a6:	83 c4 10             	add    esp,0x10
c000b8a9:	85 c0                	test   eax,eax
c000b8ab:	75 04                	jne    c000b8b1 <getFromFileDescriptor(int)+0x2e>
c000b8ad:	31 c0                	xor    eax,eax
c000b8af:	eb 6e                	jmp    c000b91f <getFromFileDescriptor(int)+0x9c>
c000b8b1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000b8b4:	74 69                	je     c000b91f <getFromFileDescriptor(int)+0x9c>
c000b8b6:	52                   	push   edx
c000b8b7:	52                   	push   edx
c000b8b8:	50                   	push   eax
c000b8b9:	68 b8 7d 02 c0       	push   0xc0027db8
c000b8be:	e8 27 71 01 00       	call   c00229ea <LinkedList<UnixFile>::getNext(UnixFile*)>
c000b8c3:	eb e1                	jmp    c000b8a6 <getFromFileDescriptor(int)+0x23>
c000b8c5:	a1 ac 7d 02 c0       	mov    eax,ds:0xc0027dac
c000b8ca:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000b8d0:	74 4d                	je     c000b91f <getFromFileDescriptor(int)+0x9c>
c000b8d2:	a1 b0 7d 02 c0       	mov    eax,ds:0xc0027db0
c000b8d7:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000b8dd:	74 40                	je     c000b91f <getFromFileDescriptor(int)+0x9c>
c000b8df:	a1 a8 7d 02 c0       	mov    eax,ds:0xc0027da8
c000b8e4:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000b8ea:	74 33                	je     c000b91f <getFromFileDescriptor(int)+0x9c>
c000b8ec:	a1 a4 7d 02 c0       	mov    eax,ds:0xc0027da4
c000b8f1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000b8f7:	74 26                	je     c000b91f <getFromFileDescriptor(int)+0x9c>
c000b8f9:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000b8ff:	83 f8 08             	cmp    eax,0x8
c000b902:	77 09                	ja     c000b90d <getFromFileDescriptor(int)+0x8a>
c000b904:	8b 04 85 80 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8280]
c000b90b:	eb 12                	jmp    c000b91f <getFromFileDescriptor(int)+0x9c>
c000b90d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000b913:	83 fb 08             	cmp    ebx,0x8
c000b916:	77 95                	ja     c000b8ad <getFromFileDescriptor(int)+0x2a>
c000b918:	8b 04 9d 40 7d 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd82c0]
c000b91f:	83 c4 08             	add    esp,0x8
c000b922:	5b                   	pop    ebx
c000b923:	c3                   	ret    

c000b924 <__static_initialization_and_destruction_0(int, int)>:
c000b924:	83 ec 0c             	sub    esp,0xc
c000b927:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b92c:	75 34                	jne    c000b962 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b92e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000b936:	75 2a                	jne    c000b962 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b938:	83 ec 0c             	sub    esp,0xc
c000b93b:	68 b8 7d 02 c0       	push   0xc0027db8
c000b940:	e8 e5 6e 01 00       	call   c002282a <LinkedList<UnixFile>::LinkedList()>
c000b945:	83 c4 10             	add    esp,0x10
c000b948:	83 ec 04             	sub    esp,0x4
c000b94b:	68 00 6f 02 c0       	push   0xc0026f00
c000b950:	68 b8 7d 02 c0       	push   0xc0027db8
c000b955:	68 28 28 02 c0       	push   0xc0022828
c000b95a:	e8 39 12 00 00       	call   c000cb98 <__cxa_atexit>
c000b95f:	83 c4 10             	add    esp,0x10
c000b962:	90                   	nop
c000b963:	83 c4 0c             	add    esp,0xc
c000b966:	c3                   	ret    

c000b967 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000b967:	83 ec 0c             	sub    esp,0xc
c000b96a:	83 ec 08             	sub    esp,0x8
c000b96d:	68 ff ff 00 00       	push   0xffff
c000b972:	6a 01                	push   0x1
c000b974:	e8 ab ff ff ff       	call   c000b924 <__static_initialization_and_destruction_0(int, int)>
c000b979:	83 c4 10             	add    esp,0x10
c000b97c:	83 c4 0c             	add    esp,0xc
c000b97f:	c3                   	ret    

c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000b980:	53                   	push   ebx
c000b981:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b985:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b989:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000b98f:	89 c8                	mov    eax,ecx
c000b991:	d1 e8                	shr    eax,1
c000b993:	03 05 e8 70 02 c0    	add    eax,DWORD PTR ds:0xc00270e8
c000b999:	83 e1 01             	and    ecx,0x1
c000b99c:	8a 10                	mov    dl,BYTE PTR [eax]
c000b99e:	75 09                	jne    c000b9a9 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000b9a0:	83 e2 f0             	and    edx,0xfffffff0
c000b9a3:	09 da                	or     edx,ebx
c000b9a5:	88 10                	mov    BYTE PTR [eax],dl
c000b9a7:	5b                   	pop    ebx
c000b9a8:	c3                   	ret    
c000b9a9:	c1 e3 04             	shl    ebx,0x4
c000b9ac:	83 e2 0f             	and    edx,0xf
c000b9af:	09 da                	or     edx,ebx
c000b9b1:	88 10                	mov    BYTE PTR [eax],dl
c000b9b3:	5b                   	pop    ebx
c000b9b4:	c3                   	ret    

c000b9b5 <Virt::getPageState(unsigned long)>:
c000b9b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9b9:	8b 0d e8 70 02 c0    	mov    ecx,DWORD PTR ds:0xc00270e8
c000b9bf:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000b9c5:	89 d0                	mov    eax,edx
c000b9c7:	d1 e8                	shr    eax,1
c000b9c9:	83 e2 01             	and    edx,0x1
c000b9cc:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000b9cf:	75 04                	jne    c000b9d5 <Virt::getPageState(unsigned long)+0x20>
c000b9d1:	83 e0 0f             	and    eax,0xf
c000b9d4:	c3                   	ret    
c000b9d5:	c0 e8 04             	shr    al,0x4
c000b9d8:	c3                   	ret    

c000b9d9 <Virt::allocateKernelVirtualPages(int)>:
c000b9d9:	55                   	push   ebp
c000b9da:	31 ed                	xor    ebp,ebp
c000b9dc:	57                   	push   edi
c000b9dd:	56                   	push   esi
c000b9de:	53                   	push   ebx
c000b9df:	31 db                	xor    ebx,ebx
c000b9e1:	83 ec 1c             	sub    esp,0x1c
c000b9e4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b9e8:	8b 3d e4 70 02 c0    	mov    edi,DWORD PTR ds:0xc00270e4
c000b9ee:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000b9f3:	57                   	push   edi
c000b9f4:	e8 bc ff ff ff       	call   c000b9b5 <Virt::getPageState(unsigned long)>
c000b9f9:	5a                   	pop    edx
c000b9fa:	84 c0                	test   al,al
c000b9fc:	75 3a                	jne    c000ba38 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000b9fe:	85 db                	test   ebx,ebx
c000ba00:	75 02                	jne    c000ba04 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000ba02:	89 fd                	mov    ebp,edi
c000ba04:	43                   	inc    ebx
c000ba05:	39 f3                	cmp    ebx,esi
c000ba07:	74 5a                	je     c000ba63 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000ba09:	47                   	inc    edi
c000ba0a:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000ba10:	76 31                	jbe    c000ba43 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000ba12:	c7 05 e4 70 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00270e4,0xc8000
c000ba1c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000ba21:	75 28                	jne    c000ba4b <Virt::allocateKernelVirtualPages(int)+0x72>
c000ba23:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000ba28:	bf 00 80 0c 00       	mov    edi,0xc8000
c000ba2d:	57                   	push   edi
c000ba2e:	e8 82 ff ff ff       	call   c000b9b5 <Virt::getPageState(unsigned long)>
c000ba33:	5a                   	pop    edx
c000ba34:	84 c0                	test   al,al
c000ba36:	74 c6                	je     c000b9fe <Virt::allocateKernelVirtualPages(int)+0x25>
c000ba38:	31 db                	xor    ebx,ebx
c000ba3a:	47                   	inc    edi
c000ba3b:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000ba41:	77 cf                	ja     c000ba12 <Virt::allocateKernelVirtualPages(int)+0x39>
c000ba43:	89 3d e4 70 02 c0    	mov    DWORD PTR ds:0xc00270e4,edi
c000ba49:	eb a8                	jmp    c000b9f3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000ba4b:	83 ec 0c             	sub    esp,0xc
c000ba4e:	68 8c 42 02 c0       	push   0xc002428c
c000ba53:	e8 57 8e 00 00       	call   c00148af <Krnl::panic(char const*)>
c000ba58:	8b 3d e4 70 02 c0    	mov    edi,DWORD PTR ds:0xc00270e4
c000ba5e:	83 c4 10             	add    esp,0x10
c000ba61:	eb 90                	jmp    c000b9f3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000ba63:	89 2d e4 70 02 c0    	mov    DWORD PTR ds:0xc00270e4,ebp
c000ba69:	4b                   	dec    ebx
c000ba6a:	74 5f                	je     c000bacb <Virt::allocateKernelVirtualPages(int)+0xf2>
c000ba6c:	85 f6                	test   esi,esi
c000ba6e:	74 3d                	je     c000baad <Virt::allocateKernelVirtualPages(int)+0xd4>
c000ba70:	89 e8                	mov    eax,ebp
c000ba72:	31 db                	xor    ebx,ebx
c000ba74:	8d 7e ff             	lea    edi,[esi-0x1]
c000ba77:	eb 14                	jmp    c000ba8d <Virt::allocateKernelVirtualPages(int)+0xb4>
c000ba79:	6a 01                	push   0x1
c000ba7b:	43                   	inc    ebx
c000ba7c:	50                   	push   eax
c000ba7d:	e8 fe fe ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000ba82:	58                   	pop    eax
c000ba83:	39 f3                	cmp    ebx,esi
c000ba85:	5a                   	pop    edx
c000ba86:	74 25                	je     c000baad <Virt::allocateKernelVirtualPages(int)+0xd4>
c000ba88:	a1 e4 70 02 c0       	mov    eax,ds:0xc00270e4
c000ba8d:	8d 50 01             	lea    edx,[eax+0x1]
c000ba90:	85 db                	test   ebx,ebx
c000ba92:	89 15 e4 70 02 c0    	mov    DWORD PTR ds:0xc00270e4,edx
c000ba98:	74 20                	je     c000baba <Virt::allocateKernelVirtualPages(int)+0xe1>
c000ba9a:	39 df                	cmp    edi,ebx
c000ba9c:	75 db                	jne    c000ba79 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000ba9e:	6a 03                	push   0x3
c000baa0:	43                   	inc    ebx
c000baa1:	50                   	push   eax
c000baa2:	e8 d9 fe ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000baa7:	59                   	pop    ecx
c000baa8:	39 f3                	cmp    ebx,esi
c000baaa:	58                   	pop    eax
c000baab:	75 db                	jne    c000ba88 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000baad:	83 c4 1c             	add    esp,0x1c
c000bab0:	89 e8                	mov    eax,ebp
c000bab2:	5b                   	pop    ebx
c000bab3:	c1 e0 0c             	shl    eax,0xc
c000bab6:	5e                   	pop    esi
c000bab7:	5f                   	pop    edi
c000bab8:	5d                   	pop    ebp
c000bab9:	c3                   	ret    
c000baba:	6a 02                	push   0x2
c000babc:	bb 01 00 00 00       	mov    ebx,0x1
c000bac1:	50                   	push   eax
c000bac2:	e8 b9 fe ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bac7:	58                   	pop    eax
c000bac8:	5a                   	pop    edx
c000bac9:	eb bd                	jmp    c000ba88 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000bacb:	6a 04                	push   0x4
c000bacd:	8d 45 01             	lea    eax,[ebp+0x1]
c000bad0:	55                   	push   ebp
c000bad1:	a3 e4 70 02 c0       	mov    ds:0xc00270e4,eax
c000bad6:	e8 a5 fe ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000badb:	59                   	pop    ecx
c000badc:	89 e8                	mov    eax,ebp
c000bade:	5b                   	pop    ebx
c000badf:	c1 e0 0c             	shl    eax,0xc
c000bae2:	83 c4 1c             	add    esp,0x1c
c000bae5:	5b                   	pop    ebx
c000bae6:	5e                   	pop    esi
c000bae7:	5f                   	pop    edi
c000bae8:	5d                   	pop    ebp
c000bae9:	c3                   	ret    

c000baea <Virt::freeSwapfilePage(unsigned long)>:
c000baea:	53                   	push   ebx
c000baeb:	8b 15 cc 7d 02 c0    	mov    edx,DWORD PTR ds:0xc0027dcc
c000baf1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000baf5:	b8 01 00 00 00       	mov    eax,0x1
c000bafa:	89 cb                	mov    ebx,ecx
c000bafc:	d3 e0                	shl    eax,cl
c000bafe:	c1 eb 05             	shr    ebx,0x5
c000bb01:	f7 d0                	not    eax
c000bb03:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000bb06:	5b                   	pop    ebx
c000bb07:	c3                   	ret    

c000bb08 <Virt::swapIDToSector(unsigned long)>:
c000bb08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bb0c:	0f af 05 ec 70 02 c0 	imul   eax,DWORD PTR ds:0xc00270ec
c000bb13:	03 05 f4 70 02 c0    	add    eax,DWORD PTR ds:0xc00270f4
c000bb19:	c3                   	ret    

c000bb1a <Virt::allocateSwapfilePage()>:
c000bb1a:	55                   	push   ebp
c000bb1b:	31 d2                	xor    edx,edx
c000bb1d:	57                   	push   edi
c000bb1e:	56                   	push   esi
c000bb1f:	53                   	push   ebx
c000bb20:	83 ec 0c             	sub    esp,0xc
c000bb23:	8b 0d ec 70 02 c0    	mov    ecx,DWORD PTR ds:0xc00270ec
c000bb29:	a1 f0 70 02 c0       	mov    eax,ds:0xc00270f0
c000bb2e:	f7 f1                	div    ecx
c000bb30:	39 0d f0 70 02 c0    	cmp    DWORD PTR ds:0xc00270f0,ecx
c000bb36:	72 2d                	jb     c000bb65 <Virt::allocateSwapfilePage()+0x4b>
c000bb38:	8b 35 cc 7d 02 c0    	mov    esi,DWORD PTR ds:0xc0027dcc
c000bb3e:	8b 16                	mov    edx,DWORD PTR [esi]
c000bb40:	f6 c2 01             	test   dl,0x1
c000bb43:	74 3c                	je     c000bb81 <Virt::allocateSwapfilePage()+0x67>
c000bb45:	31 c9                	xor    ecx,ecx
c000bb47:	bf 01 00 00 00       	mov    edi,0x1
c000bb4c:	eb 12                	jmp    c000bb60 <Virt::allocateSwapfilePage()+0x46>
c000bb4e:	89 fd                	mov    ebp,edi
c000bb50:	89 ca                	mov    edx,ecx
c000bb52:	d3 e5                	shl    ebp,cl
c000bb54:	c1 ea 05             	shr    edx,0x5
c000bb57:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000bb5a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bb5c:	85 ea                	test   edx,ebp
c000bb5e:	74 2a                	je     c000bb8a <Virt::allocateSwapfilePage()+0x70>
c000bb60:	41                   	inc    ecx
c000bb61:	39 c8                	cmp    eax,ecx
c000bb63:	77 e9                	ja     c000bb4e <Virt::allocateSwapfilePage()+0x34>
c000bb65:	83 ec 0c             	sub    esp,0xc
c000bb68:	68 44 44 02 c0       	push   0xc0024444
c000bb6d:	e8 3d 8d 00 00       	call   c00148af <Krnl::panic(char const*)>
c000bb72:	83 c4 10             	add    esp,0x10
c000bb75:	31 c9                	xor    ecx,ecx
c000bb77:	83 c4 0c             	add    esp,0xc
c000bb7a:	89 c8                	mov    eax,ecx
c000bb7c:	5b                   	pop    ebx
c000bb7d:	5e                   	pop    esi
c000bb7e:	5f                   	pop    edi
c000bb7f:	5d                   	pop    ebp
c000bb80:	c3                   	ret    
c000bb81:	89 f3                	mov    ebx,esi
c000bb83:	bd 01 00 00 00       	mov    ebp,0x1
c000bb88:	31 c9                	xor    ecx,ecx
c000bb8a:	09 ea                	or     edx,ebp
c000bb8c:	89 c8                	mov    eax,ecx
c000bb8e:	89 13                	mov    DWORD PTR [ebx],edx
c000bb90:	83 c4 0c             	add    esp,0xc
c000bb93:	5b                   	pop    ebx
c000bb94:	5e                   	pop    esi
c000bb95:	5f                   	pop    edi
c000bb96:	5d                   	pop    ebp
c000bb97:	c3                   	ret    

c000bb98 <Virt::virtualMemorySetup()>:
c000bb98:	53                   	push   ebx
c000bb99:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bb9e:	6a 0f                	push   0xf
c000bba0:	53                   	push   ebx
c000bba1:	43                   	inc    ebx
c000bba2:	e8 d9 fd ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bba7:	58                   	pop    eax
c000bba8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bbae:	5a                   	pop    edx
c000bbaf:	75 ed                	jne    c000bb9e <Virt::virtualMemorySetup()+0x6>
c000bbb1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bbb6:	6a 00                	push   0x0
c000bbb8:	53                   	push   ebx
c000bbb9:	43                   	inc    ebx
c000bbba:	e8 c1 fd ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bbbf:	59                   	pop    ecx
c000bbc0:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bbc6:	58                   	pop    eax
c000bbc7:	75 ed                	jne    c000bbb6 <Virt::virtualMemorySetup()+0x1e>
c000bbc9:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000bbce:	6a 0f                	push   0xf
c000bbd0:	53                   	push   ebx
c000bbd1:	43                   	inc    ebx
c000bbd2:	e8 a9 fd ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bbd7:	58                   	pop    eax
c000bbd8:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000bbde:	5a                   	pop    edx
c000bbdf:	75 ed                	jne    c000bbce <Virt::virtualMemorySetup()+0x36>
c000bbe1:	5b                   	pop    ebx
c000bbe2:	c3                   	ret    

c000bbe3 <Virt::setupPageSwapping(int)>:
c000bbe3:	53                   	push   ebx
c000bbe4:	83 ec 0c             	sub    esp,0xc
c000bbe7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bbeb:	a1 68 82 02 c0       	mov    eax,ds:0xc0028268
c000bbf0:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000bbf6:	8b 10                	mov    edx,DWORD PTR [eax]
c000bbf8:	53                   	push   ebx
c000bbf9:	c1 e3 0b             	shl    ebx,0xb
c000bbfc:	68 5b 44 02 c0       	push   0xc002445b
c000bc01:	50                   	push   eax
c000bc02:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000bc05:	89 1d f0 70 02 c0    	mov    DWORD PTR ds:0xc00270f0,ebx
c000bc0b:	c6 05 f8 70 02 c0 43 	mov    BYTE PTR ds:0xc00270f8,0x43
c000bc12:	c1 eb 08             	shr    ebx,0x8
c000bc15:	a3 f4 70 02 c0       	mov    ds:0xc00270f4,eax
c000bc1a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bc1d:	c7 05 ec 70 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00270ec,0x8
c000bc27:	e8 e3 dd ff ff       	call   c0009a0f <malloc>
c000bc2c:	83 c4 0c             	add    esp,0xc
c000bc2f:	89 c1                	mov    ecx,eax
c000bc31:	a3 cc 7d 02 c0       	mov    ds:0xc0027dcc,eax
c000bc36:	31 d2                	xor    edx,edx
c000bc38:	a1 f0 70 02 c0       	mov    eax,ds:0xc00270f0
c000bc3d:	f7 35 ec 70 02 c0    	div    DWORD PTR ds:0xc00270ec
c000bc43:	c1 e8 05             	shr    eax,0x5
c000bc46:	50                   	push   eax
c000bc47:	6a 00                	push   0x0
c000bc49:	51                   	push   ecx
c000bc4a:	e8 35 4a ff ff       	call   c0000684 <memset>
c000bc4f:	83 c4 18             	add    esp,0x18
c000bc52:	5b                   	pop    ebx
c000bc53:	c3                   	ret    

c000bc54 <VAS::VAS()>:
c000bc54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc58:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc63:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bc6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc6e:	a3 d0 7d 02 c0       	mov    ds:0xc0027dd0,eax
c000bc73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc77:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000bc7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc7f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000bc82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc86:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000bc8d:	90                   	nop
c000bc8e:	c3                   	ret    
c000bc8f:	90                   	nop

c000bc90 <VAS::VAS(VAS*)>:
c000bc90:	83 ec 0c             	sub    esp,0xc
c000bc93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc97:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bca2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bca9:	83 ec 0c             	sub    esp,0xc
c000bcac:	68 ac 42 02 c0       	push   0xc00242ac
c000bcb1:	e8 f9 8b 00 00       	call   c00148af <Krnl::panic(char const*)>
c000bcb6:	83 c4 10             	add    esp,0x10
c000bcb9:	90                   	nop
c000bcba:	83 c4 0c             	add    esp,0xc
c000bcbd:	c3                   	ret    

c000bcbe <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000bcbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bcc2:	89 c2                	mov    edx,eax
c000bcc4:	c1 e8 0a             	shr    eax,0xa
c000bcc7:	c1 ea 16             	shr    edx,0x16
c000bcca:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bccf:	19 c9                	sbb    ecx,ecx
c000bcd1:	c1 e2 0c             	shl    edx,0xc
c000bcd4:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000bcda:	25 fc 0f 00 00       	and    eax,0xffc
c000bcdf:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000bce6:	01 d0                	add    eax,edx
c000bce8:	c3                   	ret    
c000bce9:	90                   	nop

c000bcea <VAS::getPageTableEntry(unsigned long)>:
c000bcea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bcee:	89 ca                	mov    edx,ecx
c000bcf0:	c1 e9 0a             	shr    ecx,0xa
c000bcf3:	c1 ea 16             	shr    edx,0x16
c000bcf6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000bcfc:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000bd02:	c1 e0 0c             	shl    eax,0xc
c000bd05:	8d 04 08             	lea    eax,[eax+ecx*1]
c000bd08:	c3                   	ret    

c000bd09 <Virt::freeKernelVirtualPages(unsigned long)>:
c000bd09:	57                   	push   edi
c000bd0a:	56                   	push   esi
c000bd0b:	be 01 00 00 00       	mov    esi,0x1
c000bd10:	53                   	push   ebx
c000bd11:	83 ec 10             	sub    esp,0x10
c000bd14:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bd18:	c1 eb 0c             	shr    ebx,0xc
c000bd1b:	eb 3f                	jmp    c000bd5c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000bd1d:	83 ec 08             	sub    esp,0x8
c000bd20:	57                   	push   edi
c000bd21:	ff 35 d0 7d 02 c0    	push   DWORD PTR ds:0xc0027dd0
c000bd27:	e8 be ff ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000bd2c:	83 c4 10             	add    esp,0x10
c000bd2f:	8b 00                	mov    eax,DWORD PTR [eax]
c000bd31:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bd35:	f6 c4 04             	test   ah,0x4
c000bd38:	75 5f                	jne    c000bd99 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000bd3a:	80 fa 04             	cmp    dl,0x4
c000bd3d:	74 78                	je     c000bdb7 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000bd3f:	80 fa 02             	cmp    dl,0x2
c000bd42:	0f 84 88 00 00 00    	je     c000bdd0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000bd48:	80 fa 03             	cmp    dl,0x3
c000bd4b:	0f 84 ad 00 00 00    	je     c000bdfe <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000bd51:	fe ca                	dec    dl
c000bd53:	0f 84 92 00 00 00    	je     c000bdeb <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bd59:	43                   	inc    ebx
c000bd5a:	31 f6                	xor    esi,esi
c000bd5c:	53                   	push   ebx
c000bd5d:	89 df                	mov    edi,ebx
c000bd5f:	e8 51 fc ff ff       	call   c000b9b5 <Virt::getPageState(unsigned long)>
c000bd64:	c1 e7 0c             	shl    edi,0xc
c000bd67:	59                   	pop    ecx
c000bd68:	84 c0                	test   al,al
c000bd6a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000bd6e:	75 ad                	jne    c000bd1d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000bd70:	83 ec 0c             	sub    esp,0xc
c000bd73:	68 72 44 02 c0       	push   0xc0024472
c000bd78:	e8 32 8b 00 00       	call   c00148af <Krnl::panic(char const*)>
c000bd7d:	58                   	pop    eax
c000bd7e:	5a                   	pop    edx
c000bd7f:	57                   	push   edi
c000bd80:	ff 35 d0 7d 02 c0    	push   DWORD PTR ds:0xc0027dd0
c000bd86:	e8 5f ff ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000bd8b:	83 c4 10             	add    esp,0x10
c000bd8e:	8b 00                	mov    eax,DWORD PTR [eax]
c000bd90:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bd94:	f6 c4 04             	test   ah,0x4
c000bd97:	74 c0                	je     c000bd59 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bd99:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000bd9d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bda2:	83 ec 0c             	sub    esp,0xc
c000bda5:	50                   	push   eax
c000bda6:	e8 98 e2 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000bdab:	83 c4 10             	add    esp,0x10
c000bdae:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bdb2:	80 fa 04             	cmp    dl,0x4
c000bdb5:	75 88                	jne    c000bd3f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000bdb7:	89 f0                	mov    eax,esi
c000bdb9:	84 c0                	test   al,al
c000bdbb:	75 47                	jne    c000be04 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000bdbd:	c7 44 24 20 d0 42 02 c0 	mov    DWORD PTR [esp+0x20],0xc00242d0
c000bdc5:	83 c4 10             	add    esp,0x10
c000bdc8:	5b                   	pop    ebx
c000bdc9:	5e                   	pop    esi
c000bdca:	5f                   	pop    edi
c000bdcb:	e9 df 8a 00 00       	jmp    c00148af <Krnl::panic(char const*)>
c000bdd0:	89 f0                	mov    eax,esi
c000bdd2:	84 c0                	test   al,al
c000bdd4:	75 15                	jne    c000bdeb <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bdd6:	83 ec 0c             	sub    esp,0xc
c000bdd9:	68 8e 44 02 c0       	push   0xc002448e
c000bdde:	e8 cc 8a 00 00       	call   c00148af <Krnl::panic(char const*)>
c000bde3:	83 c4 10             	add    esp,0x10
c000bde6:	e9 6e ff ff ff       	jmp    c000bd59 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bdeb:	83 ec 08             	sub    esp,0x8
c000bdee:	6a 00                	push   0x0
c000bdf0:	53                   	push   ebx
c000bdf1:	e8 8a fb ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bdf6:	83 c4 10             	add    esp,0x10
c000bdf9:	e9 5b ff ff ff       	jmp    c000bd59 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bdfe:	89 f0                	mov    eax,esi
c000be00:	84 c0                	test   al,al
c000be02:	75 15                	jne    c000be19 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000be04:	83 ec 08             	sub    esp,0x8
c000be07:	6a 00                	push   0x0
c000be09:	53                   	push   ebx
c000be0a:	e8 71 fb ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be0f:	83 c4 10             	add    esp,0x10
c000be12:	83 c4 10             	add    esp,0x10
c000be15:	5b                   	pop    ebx
c000be16:	5e                   	pop    esi
c000be17:	5f                   	pop    edi
c000be18:	c3                   	ret    
c000be19:	c7 44 24 20 aa 44 02 c0 	mov    DWORD PTR [esp+0x20],0xc00244aa
c000be21:	83 c4 10             	add    esp,0x10
c000be24:	5b                   	pop    ebx
c000be25:	5e                   	pop    esi
c000be26:	5f                   	pop    edi
c000be27:	e9 83 8a 00 00       	jmp    c00148af <Krnl::panic(char const*)>

c000be2c <VAS::freeAllocatedPages(unsigned long)>:
c000be2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be30:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000be34:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000be38:	74 09                	je     c000be43 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000be3a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000be3e:	e9 c6 fe ff ff       	jmp    c000bd09 <Virt::freeKernelVirtualPages(unsigned long)>
c000be43:	c7 44 24 04 f4 42 02 c0 	mov    DWORD PTR [esp+0x4],0xc00242f4
c000be4b:	e9 af 0e 00 00       	jmp    c000ccff <Dbg::kprintf(char const*, ...)>

c000be50 <VAS::virtualToPhysical(unsigned long)>:
c000be50:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000be54:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000be58:	e8 8d fe ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000be5d:	5a                   	pop    edx
c000be5e:	8b 00                	mov    eax,DWORD PTR [eax]
c000be60:	59                   	pop    ecx
c000be61:	25 00 f0 ff ff       	and    eax,0xfffff000
c000be66:	c3                   	ret    
c000be67:	90                   	nop

c000be68 <VAS::reflagRange(unsigned long, int, int, int)>:
c000be68:	55                   	push   ebp
c000be69:	57                   	push   edi
c000be6a:	56                   	push   esi
c000be6b:	53                   	push   ebx
c000be6c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be70:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000be74:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000be78:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000be7c:	85 db                	test   ebx,ebx
c000be7e:	7e 22                	jle    c000bea2 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000be80:	c1 e3 0c             	shl    ebx,0xc
c000be83:	01 f3                	add    ebx,esi
c000be85:	56                   	push   esi
c000be86:	81 c6 00 10 00 00    	add    esi,0x1000
c000be8c:	55                   	push   ebp
c000be8d:	e8 58 fe ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000be92:	5a                   	pop    edx
c000be93:	59                   	pop    ecx
c000be94:	8b 08                	mov    ecx,DWORD PTR [eax]
c000be96:	21 f9                	and    ecx,edi
c000be98:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000be9c:	39 f3                	cmp    ebx,esi
c000be9e:	89 08                	mov    DWORD PTR [eax],ecx
c000bea0:	75 e3                	jne    c000be85 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000bea2:	5b                   	pop    ebx
c000bea3:	5e                   	pop    esi
c000bea4:	5f                   	pop    edi
c000bea5:	5d                   	pop    ebp
c000bea6:	c3                   	ret    
c000bea7:	90                   	nop

c000bea8 <VAS::setToWriteCombining(unsigned long, int)>:
c000bea8:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000bead:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000beb3:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000beba:	75 01                	jne    c000bebd <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000bebc:	c3                   	ret    
c000bebd:	68 80 00 00 00       	push   0x80
c000bec2:	6a ff                	push   0xffffffff
c000bec4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000becc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed0:	e8 93 ff ff ff       	call   c000be68 <VAS::reflagRange(unsigned long, int, int, int)>
c000bed5:	83 c4 14             	add    esp,0x14
c000bed8:	c3                   	ret    
c000bed9:	90                   	nop

c000beda <VAS::mapOtherVASIn(bool, VAS*)>:
c000beda:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bedf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bee3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000bee6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000beea:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000beed:	19 c0                	sbb    eax,eax
c000beef:	83 ca 03             	or     edx,0x3
c000bef2:	83 e0 fc             	and    eax,0xfffffffc
c000bef5:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000befc:	0f 20 d8             	mov    eax,cr3
c000beff:	0f 22 d8             	mov    cr3,eax
c000bf02:	c3                   	ret    
c000bf03:	90                   	nop

c000bf04 <VAS::~VAS()>:
c000bf04:	83 ec 2c             	sub    esp,0x2c
c000bf07:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bf0f:	fa                   	cli    
c000bf10:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000bf15:	40                   	inc    eax
c000bf16:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c000bf1b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bf20:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf22:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bf25:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bf2b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bf2f:	6a 01                	push   0x1
c000bf31:	50                   	push   eax
c000bf32:	e8 a3 ff ff ff       	call   c000beda <VAS::mapOtherVASIn(bool, VAS*)>
c000bf37:	83 c4 0c             	add    esp,0xc
c000bf3a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bf42:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000bf4a:	0f 8f d4 00 00 00    	jg     c000c024 <VAS::~VAS()+0x120>
c000bf50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf54:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf57:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bf5b:	c1 e2 02             	shl    edx,0x2
c000bf5e:	01 d0                	add    eax,edx
c000bf60:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf6a:	83 e0 01             	and    eax,0x1
c000bf6d:	0f 84 a8 00 00 00    	je     c000c01b <VAS::~VAS()+0x117>
c000bf73:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bf7b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000bf83:	7f 72                	jg     c000bff7 <VAS::~VAS()+0xf3>
c000bf85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf89:	c1 e0 0a             	shl    eax,0xa
c000bf8c:	89 c2                	mov    edx,eax
c000bf8e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf92:	01 d0                	add    eax,edx
c000bf94:	c1 e0 0c             	shl    eax,0xc
c000bf97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bf9b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bfa0:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfa2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bfa5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bfab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfaf:	6a 01                	push   0x1
c000bfb1:	50                   	push   eax
c000bfb2:	e8 07 fd ff ff       	call   c000bcbe <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000bfb7:	83 c4 0c             	add    esp,0xc
c000bfba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfbe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bfc2:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfc4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bfc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfcc:	25 01 04 00 00       	and    eax,0x401
c000bfd1:	3d 01 04 00 00       	cmp    eax,0x401
c000bfd6:	75 19                	jne    c000bff1 <VAS::~VAS()+0xed>
c000bfd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfdc:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bfe1:	83 ec 0c             	sub    esp,0xc
c000bfe4:	50                   	push   eax
c000bfe5:	e8 59 e0 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000bfea:	83 c4 10             	add    esp,0x10
c000bfed:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bff1:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bff5:	eb 84                	jmp    c000bf7b <VAS::~VAS()+0x77>
c000bff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bffb:	25 00 04 00 00       	and    eax,0x400
c000c000:	74 19                	je     c000c01b <VAS::~VAS()+0x117>
c000c002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c006:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c00b:	83 ec 0c             	sub    esp,0xc
c000c00e:	50                   	push   eax
c000c00f:	e8 2f e0 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000c014:	83 c4 10             	add    esp,0x10
c000c017:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c01b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c01f:	e9 1e ff ff ff       	jmp    c000bf42 <VAS::~VAS()+0x3e>
c000c024:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c028:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c02b:	83 ec 0c             	sub    esp,0xc
c000c02e:	50                   	push   eax
c000c02f:	e8 d5 fc ff ff       	call   c000bd09 <Virt::freeKernelVirtualPages(unsigned long)>
c000c034:	83 c4 10             	add    esp,0x10
c000c037:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c03b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 fc df ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c04e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c052:	c1 e0 02             	shl    eax,0x2
c000c055:	83 ec 08             	sub    esp,0x8
c000c058:	50                   	push   eax
c000c059:	68 18 43 02 c0       	push   0xc0024318
c000c05e:	e8 9c 0c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000c06b:	48                   	dec    eax
c000c06c:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c000c071:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000c076:	85 c0                	test   eax,eax
c000c078:	75 01                	jne    c000c07b <VAS::~VAS()+0x177>
c000c07a:	fb                   	sti    
c000c07b:	90                   	nop
c000c07c:	83 c4 2c             	add    esp,0x2c
c000c07f:	c3                   	ret    

c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000c080:	55                   	push   ebp
c000c081:	57                   	push   edi
c000c082:	56                   	push   esi
c000c083:	53                   	push   ebx
c000c084:	83 ec 1c             	sub    esp,0x1c
c000c087:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c08b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c08f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000c095:	77 08                	ja     c000c09f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000c097:	0f 20 d8             	mov    eax,cr3
c000c09a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000c09d:	75 47                	jne    c000c0e6 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000c09f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c0a3:	09 d8                	or     eax,ebx
c000c0a5:	a9 ff 0f 00 00       	test   eax,0xfff
c000c0aa:	75 57                	jne    c000c103 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000c0ac:	89 de                	mov    esi,ebx
c000c0ae:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c0b1:	c1 ee 16             	shr    esi,0x16
c000c0b4:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000c0bb:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000c0bf:	74 54                	je     c000c115 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000c0c1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c0c5:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000c0cb:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c0cf:	c1 e6 0c             	shl    esi,0xc
c000c0d2:	c1 eb 0a             	shr    ebx,0xa
c000c0d5:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000c0db:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000c0de:	83 c4 1c             	add    esp,0x1c
c000c0e1:	5b                   	pop    ebx
c000c0e2:	5e                   	pop    esi
c000c0e3:	5f                   	pop    edi
c000c0e4:	5d                   	pop    ebp
c000c0e5:	c3                   	ret    
c000c0e6:	83 ec 0c             	sub    esp,0xc
c000c0e9:	68 38 43 02 c0       	push   0xc0024338
c000c0ee:	e8 0c 0c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000c0f3:	83 c4 10             	add    esp,0x10
c000c0f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c0fa:	09 d8                	or     eax,ebx
c000c0fc:	a9 ff 0f 00 00       	test   eax,0xfff
c000c101:	74 a9                	je     c000c0ac <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c103:	83 ec 0c             	sub    esp,0xc
c000c106:	68 a0 43 02 c0       	push   0xc00243a0
c000c10b:	e8 9f 87 00 00       	call   c00148af <Krnl::panic(char const*)>
c000c110:	83 c4 10             	add    esp,0x10
c000c113:	eb 97                	jmp    c000c0ac <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c115:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c119:	e8 a8 df ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c11e:	83 ec 0c             	sub    esp,0xc
c000c121:	89 c5                	mov    ebp,eax
c000c123:	8b 0d d0 7d 02 c0    	mov    ecx,DWORD PTR ds:0xc0027dd0
c000c129:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c12d:	6a 01                	push   0x1
c000c12f:	e8 a5 f8 ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c000c134:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c13b:	6a 01                	push   0x1
c000c13d:	50                   	push   eax
c000c13e:	55                   	push   ebp
c000c13f:	81 cd 07 04 00 00    	or     ebp,0x407
c000c145:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c149:	51                   	push   ecx
c000c14a:	e8 27 02 00 00       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c14f:	83 c4 1c             	add    esp,0x1c
c000c152:	68 00 10 00 00       	push   0x1000
c000c157:	6a 00                	push   0x0
c000c159:	50                   	push   eax
c000c15a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c15e:	e8 21 45 ff ff       	call   c0000684 <memset>
c000c163:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c167:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c16a:	e8 9a fb ff ff       	call   c000bd09 <Virt::freeKernelVirtualPages(unsigned long)>
c000c16f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c173:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c176:	83 c4 10             	add    esp,0x10
c000c179:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000c17c:	e9 40 ff ff ff       	jmp    c000c0c1 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000c181:	90                   	nop

c000c182 <VAS::allocatePages(int, int)>:
c000c182:	55                   	push   ebp
c000c183:	57                   	push   edi
c000c184:	56                   	push   esi
c000c185:	53                   	push   ebx
c000c186:	83 ec 1c             	sub    esp,0x1c
c000c189:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c18d:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000c192:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c198:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c19e:	83 e0 01             	and    eax,0x1
c000c1a1:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000c1a5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c1a9:	0f 85 cc 00 00 00    	jne    c000c27b <VAS::allocatePages(int, int)+0xf9>
c000c1af:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c1b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c1b6:	85 c0                	test   eax,eax
c000c1b8:	0f 84 a1 00 00 00    	je     c000c25f <VAS::allocatePages(int, int)+0xdd>
c000c1be:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c1c2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c1c6:	c1 e6 0c             	shl    esi,0xc
c000c1c9:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000c1cd:	85 c0                	test   eax,eax
c000c1cf:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000c1d2:	7e 33                	jle    c000c207 <VAS::allocatePages(int, int)+0x85>
c000c1d4:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c1d8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c1dc:	81 cd 00 04 00 00    	or     ebp,0x400
c000c1e2:	e8 df de ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c1e7:	55                   	push   ebp
c000c1e8:	53                   	push   ebx
c000c1e9:	50                   	push   eax
c000c1ea:	57                   	push   edi
c000c1eb:	e8 90 fe ff ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c1f0:	83 c4 10             	add    esp,0x10
c000c1f3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c1f8:	74 03                	je     c000c1fd <VAS::allocatePages(int, int)+0x7b>
c000c1fa:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c1fd:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c203:	39 de                	cmp    esi,ebx
c000c205:	75 db                	jne    c000c1e2 <VAS::allocatePages(int, int)+0x60>
c000c207:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c20c:	75 12                	jne    c000c220 <VAS::allocatePages(int, int)+0x9e>
c000c20e:	0f 20 d8             	mov    eax,cr3
c000c211:	0f 22 d8             	mov    cr3,eax
c000c214:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c218:	83 c4 1c             	add    esp,0x1c
c000c21b:	5b                   	pop    ebx
c000c21c:	5e                   	pop    esi
c000c21d:	5f                   	pop    edi
c000c21e:	5d                   	pop    ebp
c000c21f:	c3                   	ret    
c000c220:	c1 ee 0a             	shr    esi,0xa
c000c223:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c227:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000c22d:	c1 eb 0a             	shr    ebx,0xa
c000c230:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000c236:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c23c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c242:	39 c3                	cmp    ebx,eax
c000c244:	77 ce                	ja     c000c214 <VAS::allocatePages(int, int)+0x92>
c000c246:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c249:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c24f:	39 d8                	cmp    eax,ebx
c000c251:	73 f3                	jae    c000c246 <VAS::allocatePages(int, int)+0xc4>
c000c253:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c257:	83 c4 1c             	add    esp,0x1c
c000c25a:	5b                   	pop    ebx
c000c25b:	5e                   	pop    esi
c000c25c:	5f                   	pop    edi
c000c25d:	5d                   	pop    ebp
c000c25e:	c3                   	ret    
c000c25f:	83 ec 0c             	sub    esp,0xc
c000c262:	68 c4 43 02 c0       	push   0xc00243c4
c000c267:	e8 43 86 00 00       	call   c00148af <Krnl::panic(char const*)>
c000c26c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c26f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c273:	83 c4 10             	add    esp,0x10
c000c276:	e9 43 ff ff ff       	jmp    c000c1be <VAS::allocatePages(int, int)+0x3c>
c000c27b:	83 ec 0c             	sub    esp,0xc
c000c27e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c282:	e8 52 f7 ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c000c287:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c28b:	83 c4 10             	add    esp,0x10
c000c28e:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000c293:	0f 87 9b 00 00 00    	ja     c000c334 <VAS::allocatePages(int, int)+0x1b2>
c000c299:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c29d:	85 d2                	test   edx,edx
c000c29f:	7e 3c                	jle    c000c2dd <VAS::allocatePages(int, int)+0x15b>
c000c2a1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c2a5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c2a9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c2ad:	c1 e5 0c             	shl    ebp,0xc
c000c2b0:	81 ce 00 04 00 00    	or     esi,0x400
c000c2b6:	01 dd                	add    ebp,ebx
c000c2b8:	e8 09 de ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c2bd:	56                   	push   esi
c000c2be:	53                   	push   ebx
c000c2bf:	50                   	push   eax
c000c2c0:	57                   	push   edi
c000c2c1:	e8 ba fd ff ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c2c6:	83 c4 10             	add    esp,0x10
c000c2c9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c2ce:	74 03                	je     c000c2d3 <VAS::allocatePages(int, int)+0x151>
c000c2d0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c2d3:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c2d9:	39 dd                	cmp    ebp,ebx
c000c2db:	75 db                	jne    c000c2b8 <VAS::allocatePages(int, int)+0x136>
c000c2dd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c2e2:	0f 84 26 ff ff ff    	je     c000c20e <VAS::allocatePages(int, int)+0x8c>
c000c2e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c2ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c2f0:	89 d3                	mov    ebx,edx
c000c2f2:	c1 e0 0c             	shl    eax,0xc
c000c2f5:	c1 eb 0a             	shr    ebx,0xa
c000c2f8:	01 d0                	add    eax,edx
c000c2fa:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c300:	c1 e8 0a             	shr    eax,0xa
c000c303:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c309:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c30e:	2d 00 00 40 00       	sub    eax,0x400000
c000c313:	39 c3                	cmp    ebx,eax
c000c315:	0f 87 f9 fe ff ff    	ja     c000c214 <VAS::allocatePages(int, int)+0x92>
c000c31b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c31e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c324:	39 d8                	cmp    eax,ebx
c000c326:	73 f3                	jae    c000c31b <VAS::allocatePages(int, int)+0x199>
c000c328:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c32c:	83 c4 1c             	add    esp,0x1c
c000c32f:	5b                   	pop    ebx
c000c330:	5e                   	pop    esi
c000c331:	5f                   	pop    edi
c000c332:	5d                   	pop    ebp
c000c333:	c3                   	ret    
c000c334:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000c339:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c33f:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c346:	0f 84 4d ff ff ff    	je     c000c299 <VAS::allocatePages(int, int)+0x117>
c000c34c:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c354:	e9 40 ff ff ff       	jmp    c000c299 <VAS::allocatePages(int, int)+0x117>
c000c359:	90                   	nop

c000c35a <VAS::setCPUSpecific(unsigned long)>:
c000c35a:	83 ec 0c             	sub    esp,0xc
c000c35d:	6a 05                	push   0x5
c000c35f:	68 00 00 40 c2       	push   0xc2400000
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	e8 0f fd ff ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c371:	83 c4 1c             	add    esp,0x1c
c000c374:	c3                   	ret    
c000c375:	90                   	nop

c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c376:	55                   	push   ebp
c000c377:	57                   	push   edi
c000c378:	56                   	push   esi
c000c379:	53                   	push   ebx
c000c37a:	83 ec 1c             	sub    esp,0x1c
c000c37d:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000c382:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c386:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c38c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c390:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c396:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c39a:	83 e0 01             	and    eax,0x1
c000c39d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c3a1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3a5:	85 c0                	test   eax,eax
c000c3a7:	7e 39                	jle    c000c3e2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c3a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3ad:	89 f3                	mov    ebx,esi
c000c3af:	c1 e0 0c             	shl    eax,0xc
c000c3b2:	01 f0                	add    eax,esi
c000c3b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c3b8:	55                   	push   ebp
c000c3b9:	53                   	push   ebx
c000c3ba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3be:	29 f0                	sub    eax,esi
c000c3c0:	01 d8                	add    eax,ebx
c000c3c2:	50                   	push   eax
c000c3c3:	57                   	push   edi
c000c3c4:	e8 b7 fc ff ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c3c9:	83 c4 10             	add    esp,0x10
c000c3cc:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c3d1:	74 03                	je     c000c3d6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c3d3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c3d6:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c3dc:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c3e0:	75 d6                	jne    c000c3b8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c3e2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c3e7:	75 10                	jne    c000c3f9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c3e9:	0f 20 d8             	mov    eax,cr3
c000c3ec:	0f 22 d8             	mov    cr3,eax
c000c3ef:	83 c4 1c             	add    esp,0x1c
c000c3f2:	89 f0                	mov    eax,esi
c000c3f4:	5b                   	pop    ebx
c000c3f5:	5e                   	pop    esi
c000c3f6:	5f                   	pop    edi
c000c3f7:	5d                   	pop    ebp
c000c3f8:	c3                   	ret    
c000c3f9:	89 f3                	mov    ebx,esi
c000c3fb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3ff:	c1 eb 0a             	shr    ebx,0xa
c000c402:	c1 e0 0c             	shl    eax,0xc
c000c405:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c40b:	01 f0                	add    eax,esi
c000c40d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c413:	c1 e8 0a             	shr    eax,0xa
c000c416:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c41b:	2d 00 00 40 00       	sub    eax,0x400000
c000c420:	39 c3                	cmp    ebx,eax
c000c422:	77 cb                	ja     c000c3ef <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c424:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c427:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c42d:	39 d8                	cmp    eax,ebx
c000c42f:	73 f3                	jae    c000c424 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c431:	83 c4 1c             	add    esp,0x1c
c000c434:	89 f0                	mov    eax,esi
c000c436:	5b                   	pop    ebx
c000c437:	5e                   	pop    esi
c000c438:	5f                   	pop    edi
c000c439:	5d                   	pop    ebp
c000c43a:	c3                   	ret    
c000c43b:	90                   	nop

c000c43c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c43c:	55                   	push   ebp
c000c43d:	57                   	push   edi
c000c43e:	56                   	push   esi
c000c43f:	53                   	push   ebx
c000c440:	83 ec 1c             	sub    esp,0x1c
c000c443:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c447:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c44b:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c44f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c453:	a9 ff 0f 00 00       	test   eax,0xfff
c000c458:	75 4a                	jne    c000c4a4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c45a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c45e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c461:	c1 eb 16             	shr    ebx,0x16
c000c464:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c46b:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c46f:	74 4d                	je     c000c4be <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c471:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c475:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c479:	c1 e8 0a             	shr    eax,0xa
c000c47c:	80 fa 01             	cmp    dl,0x1
c000c47f:	19 d2                	sbb    edx,edx
c000c481:	c1 e3 0c             	shl    ebx,0xc
c000c484:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c488:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c48e:	25 fc 0f 00 00       	and    eax,0xffc
c000c493:	01 d8                	add    eax,ebx
c000c495:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c49c:	83 c4 1c             	add    esp,0x1c
c000c49f:	5b                   	pop    ebx
c000c4a0:	5e                   	pop    esi
c000c4a1:	5f                   	pop    edi
c000c4a2:	5d                   	pop    ebp
c000c4a3:	c3                   	ret    
c000c4a4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c4a8:	83 ec 0c             	sub    esp,0xc
c000c4ab:	68 f0 43 02 c0       	push   0xc00243f0
c000c4b0:	e8 fa 83 00 00       	call   c00148af <Krnl::panic(char const*)>
c000c4b5:	83 c4 10             	add    esp,0x10
c000c4b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c4bc:	eb 9c                	jmp    c000c45a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c4be:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c4c2:	e8 ff db ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c4c7:	83 ec 0c             	sub    esp,0xc
c000c4ca:	89 c5                	mov    ebp,eax
c000c4cc:	8b 0d d0 7d 02 c0    	mov    ecx,DWORD PTR ds:0xc0027dd0
c000c4d2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c4d6:	6a 01                	push   0x1
c000c4d8:	e8 fc f4 ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c000c4dd:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c4e4:	6a 01                	push   0x1
c000c4e6:	50                   	push   eax
c000c4e7:	55                   	push   ebp
c000c4e8:	81 cd 07 04 00 00    	or     ebp,0x407
c000c4ee:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c4f2:	51                   	push   ecx
c000c4f3:	e8 7e fe ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c4f8:	83 c4 1c             	add    esp,0x1c
c000c4fb:	68 00 10 00 00       	push   0x1000
c000c500:	6a 00                	push   0x0
c000c502:	50                   	push   eax
c000c503:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c507:	e8 78 41 ff ff       	call   c0000684 <memset>
c000c50c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c510:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c513:	e8 f1 f7 ff ff       	call   c000bd09 <Virt::freeKernelVirtualPages(unsigned long)>
c000c518:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c51b:	83 c4 10             	add    esp,0x10
c000c51e:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c521:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c525:	e9 47 ff ff ff       	jmp    c000c471 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c52a <VAS::VAS(bool)>:
c000c52a:	53                   	push   ebx
c000c52b:	83 ec 28             	sub    esp,0x28
c000c52e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c532:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c536:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c53a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c541:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c545:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c54c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c550:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c554:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c557:	e8 6a db ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c55c:	89 c2                	mov    edx,eax
c000c55e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c562:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c565:	8b 1d d0 7d 02 c0    	mov    ebx,DWORD PTR ds:0xc0027dd0
c000c56b:	83 ec 0c             	sub    esp,0xc
c000c56e:	6a 01                	push   0x1
c000c570:	e8 64 f4 ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 c2                	mov    edx,eax
c000c57a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c57e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c581:	83 ec 0c             	sub    esp,0xc
c000c584:	6a 03                	push   0x3
c000c586:	6a 01                	push   0x1
c000c588:	52                   	push   edx
c000c589:	50                   	push   eax
c000c58a:	53                   	push   ebx
c000c58b:	e8 e6 fd ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c590:	83 c4 20             	add    esp,0x20
c000c593:	89 c2                	mov    edx,eax
c000c595:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c599:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c59c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c5a4:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c5ac:	7f 1c                	jg     c000c5ca <VAS::VAS(bool)+0xa0>
c000c5ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c5b2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c5b5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c5b9:	c1 e2 02             	shl    edx,0x2
c000c5bc:	01 d0                	add    eax,edx
c000c5be:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c5c4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c5c8:	eb da                	jmp    c000c5a4 <VAS::VAS(bool)+0x7a>
c000c5ca:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c5d2:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c5da:	7f 7a                	jg     c000c656 <VAS::VAS(bool)+0x12c>
c000c5dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c5e0:	2d 00 02 00 00       	sub    eax,0x200
c000c5e5:	c1 e0 0c             	shl    eax,0xc
c000c5e8:	83 c8 03             	or     eax,0x3
c000c5eb:	89 c2                	mov    edx,eax
c000c5ed:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000c5f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c5f8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c5fe:	83 e0 10             	and    eax,0x10
c000c601:	84 c0                	test   al,al
c000c603:	74 07                	je     c000c60c <VAS::VAS(bool)+0xe2>
c000c605:	b8 00 01 00 00       	mov    eax,0x100
c000c60a:	eb 05                	jmp    c000c611 <VAS::VAS(bool)+0xe7>
c000c60c:	b8 00 00 00 00       	mov    eax,0x0
c000c611:	09 d0                	or     eax,edx
c000c613:	89 c1                	mov    ecx,eax
c000c615:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c619:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c61c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c620:	c1 e2 02             	shl    edx,0x2
c000c623:	01 d0                	add    eax,edx
c000c625:	89 ca                	mov    edx,ecx
c000c627:	89 10                	mov    DWORD PTR [eax],edx
c000c629:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c62d:	2d 40 03 00 00       	sub    eax,0x340
c000c632:	83 f8 7f             	cmp    eax,0x7f
c000c635:	77 16                	ja     c000c64d <VAS::VAS(bool)+0x123>
c000c637:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c63b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c63e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c642:	c1 e2 02             	shl    edx,0x2
c000c645:	01 d0                	add    eax,edx
c000c647:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c64d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c651:	e9 7c ff ff ff       	jmp    c000c5d2 <VAS::VAS(bool)+0xa8>
c000c656:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000c65b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c661:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c667:	83 e0 10             	and    eax,0x10
c000c66a:	84 c0                	test   al,al
c000c66c:	74 07                	je     c000c675 <VAS::VAS(bool)+0x14b>
c000c66e:	b8 03 41 00 00       	mov    eax,0x4103
c000c673:	eb 05                	jmp    c000c67a <VAS::VAS(bool)+0x150>
c000c675:	b8 03 40 00 00       	mov    eax,0x4003
c000c67a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c67e:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c681:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c687:	89 02                	mov    DWORD PTR [edx],eax
c000c689:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000c68e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c694:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c69a:	83 ec 08             	sub    esp,0x8
c000c69d:	50                   	push   eax
c000c69e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6a2:	e8 b3 fc ff ff       	call   c000c35a <VAS::setCPUSpecific(unsigned long)>
c000c6a7:	83 c4 10             	add    esp,0x10
c000c6aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c6ae:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c6b1:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000c6b6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c6bc:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c6c2:	83 e0 10             	and    eax,0x10
c000c6c5:	84 c0                	test   al,al
c000c6c7:	74 07                	je     c000c6d0 <VAS::VAS(bool)+0x1a6>
c000c6c9:	b8 00 01 00 00       	mov    eax,0x100
c000c6ce:	eb 05                	jmp    c000c6d5 <VAS::VAS(bool)+0x1ab>
c000c6d0:	b8 00 00 00 00       	mov    eax,0x0
c000c6d5:	09 c2                	or     edx,eax
c000c6d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c6db:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c6de:	05 fc 0f 00 00       	add    eax,0xffc
c000c6e3:	83 ca 03             	or     edx,0x3
c000c6e6:	89 10                	mov    DWORD PTR [eax],edx
c000c6e8:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000c6ed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c6f3:	83 ec 0c             	sub    esp,0xc
c000c6f6:	50                   	push   eax
c000c6f7:	e8 8a 1d 00 00       	call   c000e486 <Device::getName()>
c000c6fc:	83 c4 10             	add    esp,0x10
c000c6ff:	83 ec 08             	sub    esp,0x8
c000c702:	68 c4 44 02 c0       	push   0xc00244c4
c000c707:	50                   	push   eax
c000c708:	e8 bf 40 ff ff       	call   c00007cc <strcmp>
c000c70d:	83 c4 10             	add    esp,0x10
c000c710:	85 c0                	test   eax,eax
c000c712:	0f 94 c0             	sete   al
c000c715:	84 c0                	test   al,al
c000c717:	0f 84 87 00 00 00    	je     c000c7a4 <VAS::VAS(bool)+0x27a>
c000c71d:	fa                   	cli    
c000c71e:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000c723:	40                   	inc    eax
c000c724:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c000c729:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000c72e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c734:	05 7c 09 00 00       	add    eax,0x97c
c000c739:	83 ec 0c             	sub    esp,0xc
c000c73c:	50                   	push   eax
c000c73d:	e8 bc cd ff ff       	call   c00094fe <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c74a:	89 c3                	mov    ebx,eax
c000c74c:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000c751:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c757:	05 7c 09 00 00       	add    eax,0x97c
c000c75c:	83 ec 0c             	sub    esp,0xc
c000c75f:	50                   	push   eax
c000c760:	e8 99 cd ff ff       	call   c00094fe <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c765:	83 c4 10             	add    esp,0x10
c000c768:	83 ec 08             	sub    esp,0x8
c000c76b:	50                   	push   eax
c000c76c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c770:	e8 75 f5 ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000c775:	83 c4 10             	add    esp,0x10
c000c778:	8b 00                	mov    eax,DWORD PTR [eax]
c000c77a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c77f:	6a 11                	push   0x11
c000c781:	53                   	push   ebx
c000c782:	50                   	push   eax
c000c783:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c787:	e8 f4 f8 ff ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c78c:	83 c4 10             	add    esp,0x10
c000c78f:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000c794:	48                   	dec    eax
c000c795:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c000c79a:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000c79f:	85 c0                	test   eax,eax
c000c7a1:	75 01                	jne    c000c7a4 <VAS::VAS(bool)+0x27a>
c000c7a3:	fb                   	sti    
c000c7a4:	90                   	nop
c000c7a5:	83 c4 28             	add    esp,0x28
c000c7a8:	5b                   	pop    ebx
c000c7a9:	c3                   	ret    

c000c7aa <VAS::evict(unsigned long)>:
c000c7aa:	55                   	push   ebp
c000c7ab:	57                   	push   edi
c000c7ac:	56                   	push   esi
c000c7ad:	53                   	push   ebx
c000c7ae:	83 ec 1c             	sub    esp,0x1c
c000c7b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7b5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c7b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7bd:	e8 58 f3 ff ff       	call   c000bb1a <Virt::allocateSwapfilePage()>
c000c7c2:	89 c7                	mov    edi,eax
c000c7c4:	a1 ec 70 02 c0       	mov    eax,ds:0xc00270ec
c000c7c9:	85 c0                	test   eax,eax
c000c7cb:	7e 3d                	jle    c000c80a <VAS::evict(unsigned long)+0x60>
c000c7cd:	89 ee                	mov    esi,ebp
c000c7cf:	31 db                	xor    ebx,ebx
c000c7d1:	83 ec 0c             	sub    esp,0xc
c000c7d4:	57                   	push   edi
c000c7d5:	e8 2e f3 ff ff       	call   c000bb08 <Virt::swapIDToSector(unsigned long)>
c000c7da:	89 34 24             	mov    DWORD PTR [esp],esi
c000c7dd:	01 d8                	add    eax,ebx
c000c7df:	6a 01                	push   0x1
c000c7e1:	31 d2                	xor    edx,edx
c000c7e3:	43                   	inc    ebx
c000c7e4:	52                   	push   edx
c000c7e5:	81 c6 00 02 00 00    	add    esi,0x200
c000c7eb:	50                   	push   eax
c000c7ec:	0f be 05 f8 70 02 c0 	movsx  eax,BYTE PTR ds:0xc00270f8
c000c7f3:	ff 34 85 5c 81 02 c0 	push   DWORD PTR [eax*4-0x3ffd7ea4]
c000c7fa:	e8 cd 3c 00 00       	call   c00104cc <LogicalDisk::write(unsigned long long, int, void*)>
c000c7ff:	83 c4 20             	add    esp,0x20
c000c802:	39 1d ec 70 02 c0    	cmp    DWORD PTR ds:0xc00270ec,ebx
c000c808:	7f c7                	jg     c000c7d1 <VAS::evict(unsigned long)+0x27>
c000c80a:	83 ec 08             	sub    esp,0x8
c000c80d:	c1 e7 0b             	shl    edi,0xb
c000c810:	55                   	push   ebp
c000c811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c815:	e8 d0 f4 ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000c81a:	8b 10                	mov    edx,DWORD PTR [eax]
c000c81c:	89 d3                	mov    ebx,edx
c000c81e:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000c824:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c82a:	09 d7                	or     edi,edx
c000c82c:	89 38                	mov    DWORD PTR [eax],edi
c000c82e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c831:	ff 05 c8 7d 02 c0    	inc    DWORD PTR ds:0xc0027dc8
c000c837:	e8 07 d8 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000c83c:	0f 20 d8             	mov    eax,cr3
c000c83f:	0f 22 d8             	mov    cr3,eax
c000c842:	ff 35 c8 7d 02 c0    	push   DWORD PTR ds:0xc0027dc8
c000c848:	55                   	push   ebp
c000c849:	53                   	push   ebx
c000c84a:	68 14 44 02 c0       	push   0xc0024414
c000c84f:	e8 ab 04 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000c854:	a1 c4 7d 02 c0       	mov    eax,ds:0xc0027dc4
c000c859:	c7 44 24 50 d2 44 02 c0 	mov    DWORD PTR [esp+0x50],0xc00244d2
c000c861:	8d 50 01             	lea    edx,[eax+0x1]
c000c864:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000c868:	89 15 c4 7d 02 c0    	mov    DWORD PTR ds:0xc0027dc4,edx
c000c86e:	83 c4 3c             	add    esp,0x3c
c000c871:	5b                   	pop    ebx
c000c872:	5e                   	pop    esi
c000c873:	5f                   	pop    edi
c000c874:	5d                   	pop    ebp
c000c875:	e9 85 04 00 00       	jmp    c000ccff <Dbg::kprintf(char const*, ...)>

c000c87a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000c87a:	55                   	push   ebp
c000c87b:	57                   	push   edi
c000c87c:	56                   	push   esi
c000c87d:	53                   	push   ebx
c000c87e:	83 ec 14             	sub    esp,0x14
c000c881:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c885:	68 e3 44 02 c0       	push   0xc00244e3
c000c88a:	e8 70 04 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000c88f:	83 c4 10             	add    esp,0x10
c000c892:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000c896:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000c89c:	74 20                	je     c000c8be <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c89e:	83 ec 08             	sub    esp,0x8
c000c8a1:	55                   	push   ebp
c000c8a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c8a6:	e8 3f f4 ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000c8ab:	83 c4 10             	add    esp,0x10
c000c8ae:	89 c3                	mov    ebx,eax
c000c8b0:	85 c0                	test   eax,eax
c000c8b2:	74 0a                	je     c000c8be <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c8b4:	8b 38                	mov    edi,DWORD PTR [eax]
c000c8b6:	f7 c7 01 00 00 00    	test   edi,0x1
c000c8bc:	74 0a                	je     c000c8c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000c8be:	31 c0                	xor    eax,eax
c000c8c0:	83 c4 0c             	add    esp,0xc
c000c8c3:	5b                   	pop    ebx
c000c8c4:	5e                   	pop    esi
c000c8c5:	5f                   	pop    edi
c000c8c6:	5d                   	pop    ebp
c000c8c7:	c3                   	ret    
c000c8c8:	e8 f9 d7 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c8cd:	c1 ef 0b             	shr    edi,0xb
c000c8d0:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c8d2:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000c8d8:	09 c2                	or     edx,eax
c000c8da:	81 ca 01 08 00 00    	or     edx,0x801
c000c8e0:	89 13                	mov    DWORD PTR [ebx],edx
c000c8e2:	8b 0d ec 70 02 c0    	mov    ecx,DWORD PTR ds:0xc00270ec
c000c8e8:	85 c9                	test   ecx,ecx
c000c8ea:	7e 3d                	jle    c000c929 <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000c8ec:	89 ee                	mov    esi,ebp
c000c8ee:	31 db                	xor    ebx,ebx
c000c8f0:	83 ec 0c             	sub    esp,0xc
c000c8f3:	57                   	push   edi
c000c8f4:	e8 0f f2 ff ff       	call   c000bb08 <Virt::swapIDToSector(unsigned long)>
c000c8f9:	89 34 24             	mov    DWORD PTR [esp],esi
c000c8fc:	01 d8                	add    eax,ebx
c000c8fe:	6a 01                	push   0x1
c000c900:	31 d2                	xor    edx,edx
c000c902:	43                   	inc    ebx
c000c903:	52                   	push   edx
c000c904:	81 c6 00 02 00 00    	add    esi,0x200
c000c90a:	50                   	push   eax
c000c90b:	0f be 05 f8 70 02 c0 	movsx  eax,BYTE PTR ds:0xc00270f8
c000c912:	ff 34 85 5c 81 02 c0 	push   DWORD PTR [eax*4-0x3ffd7ea4]
c000c919:	e8 42 3b 00 00       	call   c0010460 <LogicalDisk::read(unsigned long long, int, void*)>
c000c91e:	83 c4 20             	add    esp,0x20
c000c921:	39 1d ec 70 02 c0    	cmp    DWORD PTR ds:0xc00270ec,ebx
c000c927:	7f c7                	jg     c000c8f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000c929:	a1 c8 7d 02 c0       	mov    eax,ds:0xc0027dc8
c000c92e:	48                   	dec    eax
c000c92f:	52                   	push   edx
c000c930:	a3 c8 7d 02 c0       	mov    ds:0xc0027dc8,eax
c000c935:	50                   	push   eax
c000c936:	55                   	push   ebp
c000c937:	68 f6 44 02 c0       	push   0xc00244f6
c000c93c:	e8 be 03 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000c941:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c944:	e8 a1 f1 ff ff       	call   c000baea <Virt::freeSwapfilePage(unsigned long)>
c000c949:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000c94e:	83 c4 10             	add    esp,0x10
c000c951:	48                   	dec    eax
c000c952:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c000c957:	85 c0                	test   eax,eax
c000c959:	74 1d                	je     c000c978 <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000c95b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c95f:	25 ff 0f 00 00       	and    eax,0xfff
c000c964:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000c969:	77 10                	ja     c000c97b <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000c96b:	0f 20 d8             	mov    eax,cr3
c000c96e:	0f 22 d8             	mov    cr3,eax
c000c971:	b0 01                	mov    al,0x1
c000c973:	e9 48 ff ff ff       	jmp    c000c8c0 <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000c978:	fb                   	sti    
c000c979:	eb e0                	jmp    c000c95b <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000c97b:	83 ec 0c             	sub    esp,0xc
c000c97e:	68 0b 45 02 c0       	push   0xc002450b
c000c983:	e8 77 03 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000c988:	83 c4 10             	add    esp,0x10
c000c98b:	eb de                	jmp    c000c96b <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000c98d:	90                   	nop

c000c98e <VAS::scanForEviction()>:
c000c98e:	57                   	push   edi
c000c98f:	31 ff                	xor    edi,edi
c000c991:	56                   	push   esi
c000c992:	53                   	push   ebx
c000c993:	83 ec 10             	sub    esp,0x10
c000c996:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c99a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c99d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c9a3:	75 0e                	jne    c000c9b3 <VAS::scanForEviction()+0x25>
c000c9a5:	89 da                	mov    edx,ebx
c000c9a7:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c9aa:	c1 ea 16             	shr    edx,0x16
c000c9ad:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c9b1:	74 4e                	je     c000ca01 <VAS::scanForEviction()+0x73>
c000c9b3:	53                   	push   ebx
c000c9b4:	56                   	push   esi
c000c9b5:	e8 30 f3 ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000c9ba:	5a                   	pop    edx
c000c9bb:	8b 10                	mov    edx,DWORD PTR [eax]
c000c9bd:	59                   	pop    ecx
c000c9be:	89 d1                	mov    ecx,edx
c000c9c0:	81 e1 01 08 00 00    	and    ecx,0x801
c000c9c6:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000c9cc:	74 3e                	je     c000ca0c <VAS::scanForEviction()+0x7e>
c000c9ce:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c9d4:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000c9da:	76 2b                	jbe    c000ca07 <VAS::scanForEviction()+0x79>
c000c9dc:	47                   	inc    edi
c000c9dd:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000c9e4:	83 ff 03             	cmp    edi,0x3
c000c9e7:	74 32                	je     c000ca1b <VAS::scanForEviction()+0x8d>
c000c9e9:	31 db                	xor    ebx,ebx
c000c9eb:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c9f1:	75 c0                	jne    c000c9b3 <VAS::scanForEviction()+0x25>
c000c9f3:	89 da                	mov    edx,ebx
c000c9f5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c9f8:	c1 ea 16             	shr    edx,0x16
c000c9fb:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c9ff:	75 b2                	jne    c000c9b3 <VAS::scanForEviction()+0x25>
c000ca01:	81 c3 00 00 40 00    	add    ebx,0x400000
c000ca07:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000ca0a:	eb 91                	jmp    c000c99d <VAS::scanForEviction()+0xf>
c000ca0c:	f6 c2 20             	test   dl,0x20
c000ca0f:	74 13                	je     c000ca24 <VAS::scanForEviction()+0x96>
c000ca11:	83 e2 df             	and    edx,0xffffffdf
c000ca14:	89 10                	mov    DWORD PTR [eax],edx
c000ca16:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000ca19:	eb b3                	jmp    c000c9ce <VAS::scanForEviction()+0x40>
c000ca1b:	83 c4 10             	add    esp,0x10
c000ca1e:	31 c0                	xor    eax,eax
c000ca20:	5b                   	pop    ebx
c000ca21:	5e                   	pop    esi
c000ca22:	5f                   	pop    edi
c000ca23:	c3                   	ret    
c000ca24:	83 ec 08             	sub    esp,0x8
c000ca27:	89 d0                	mov    eax,edx
c000ca29:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ca2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ca32:	53                   	push   ebx
c000ca33:	68 1b 45 02 c0       	push   0xc002451b
c000ca38:	e8 c2 02 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ca3d:	58                   	pop    eax
c000ca3e:	5a                   	pop    edx
c000ca3f:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000ca42:	56                   	push   esi
c000ca43:	e8 62 fd ff ff       	call   c000c7aa <VAS::evict(unsigned long)>
c000ca48:	59                   	pop    ecx
c000ca49:	5b                   	pop    ebx
c000ca4a:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000ca4d:	68 2f 45 02 c0       	push   0xc002452f
c000ca52:	e8 a8 02 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ca57:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000ca5e:	83 c4 10             	add    esp,0x10
c000ca61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ca65:	83 c4 10             	add    esp,0x10
c000ca68:	5b                   	pop    ebx
c000ca69:	5e                   	pop    esi
c000ca6a:	5f                   	pop    edi
c000ca6b:	c3                   	ret    

c000ca6c <mapVASFirstTime>:
c000ca6c:	55                   	push   ebp
c000ca6d:	57                   	push   edi
c000ca6e:	56                   	push   esi
c000ca6f:	53                   	push   ebx
c000ca70:	83 ec 0c             	sub    esp,0xc
c000ca73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ca78:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ca7b:	4a                   	dec    edx
c000ca7c:	0f 84 fe 00 00 00    	je     c000cb80 <mapVASFirstTime+0x114>
c000ca82:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000ca85:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000ca88:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000ca8d:	c1 e5 15             	shl    ebp,0x15
c000ca90:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000ca95:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000ca9b:	29 eb                	sub    ebx,ebp
c000ca9d:	29 ef                	sub    edi,ebp
c000ca9f:	83 ec 08             	sub    esp,0x8
c000caa2:	53                   	push   ebx
c000caa3:	68 5b 45 02 c0       	push   0xc002455b
c000caa8:	e8 52 02 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000caad:	e8 14 d6 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000cab2:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000cab9:	6a 01                	push   0x1
c000cabb:	53                   	push   ebx
c000cabc:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cac2:	50                   	push   eax
c000cac3:	56                   	push   esi
c000cac4:	e8 ad f8 ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cac9:	83 c4 20             	add    esp,0x20
c000cacc:	39 fb                	cmp    ebx,edi
c000cace:	75 cf                	jne    c000ca9f <mapVASFirstTime+0x33>
c000cad0:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000cad5:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000cada:	29 eb                	sub    ebx,ebp
c000cadc:	29 ef                	sub    edi,ebp
c000cade:	83 ec 08             	sub    esp,0x8
c000cae1:	53                   	push   ebx
c000cae2:	68 77 45 02 c0       	push   0xc0024577
c000cae7:	e8 13 02 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000caec:	58                   	pop    eax
c000caed:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000caf1:	5a                   	pop    edx
c000caf2:	19 c0                	sbb    eax,eax
c000caf4:	83 e0 04             	and    eax,0x4
c000caf7:	05 03 04 00 00       	add    eax,0x403
c000cafc:	50                   	push   eax
c000cafd:	68 8b 45 02 c0       	push   0xc002458b
c000cb02:	e8 f8 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cb07:	e8 ba d5 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000cb0c:	59                   	pop    ecx
c000cb0d:	89 c5                	mov    ebp,eax
c000cb0f:	58                   	pop    eax
c000cb10:	55                   	push   ebp
c000cb11:	68 99 45 02 c0       	push   0xc0024599
c000cb16:	e8 e4 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cb1b:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000cb1f:	19 d2                	sbb    edx,edx
c000cb21:	83 e2 04             	and    edx,0x4
c000cb24:	81 c2 03 04 00 00    	add    edx,0x403
c000cb2a:	89 14 24             	mov    DWORD PTR [esp],edx
c000cb2d:	6a 01                	push   0x1
c000cb2f:	53                   	push   ebx
c000cb30:	55                   	push   ebp
c000cb31:	56                   	push   esi
c000cb32:	e8 3f f8 ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cb37:	83 c4 18             	add    esp,0x18
c000cb3a:	53                   	push   ebx
c000cb3b:	56                   	push   esi
c000cb3c:	e8 a9 f1 ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000cb41:	5a                   	pop    edx
c000cb42:	59                   	pop    ecx
c000cb43:	ff 30                	push   DWORD PTR [eax]
c000cb45:	68 b5 45 02 c0       	push   0xc00245b5
c000cb4a:	e8 b0 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cb4f:	0f 20 d8             	mov    eax,cr3
c000cb52:	83 c4 0c             	add    esp,0xc
c000cb55:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cb5b:	56                   	push   esi
c000cb5c:	50                   	push   eax
c000cb5d:	68 c0 45 02 c0       	push   0xc00245c0
c000cb62:	e8 98 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cb67:	83 c4 10             	add    esp,0x10
c000cb6a:	39 df                	cmp    edi,ebx
c000cb6c:	0f 85 6c ff ff ff    	jne    c000cade <mapVASFirstTime+0x72>
c000cb72:	0f 20 d8             	mov    eax,cr3
c000cb75:	0f 22 d8             	mov    cr3,eax
c000cb78:	83 c4 0c             	add    esp,0xc
c000cb7b:	5b                   	pop    ebx
c000cb7c:	5e                   	pop    esi
c000cb7d:	5f                   	pop    edi
c000cb7e:	5d                   	pop    ebp
c000cb7f:	c3                   	ret    
c000cb80:	83 ec 0c             	sub    esp,0xc
c000cb83:	68 42 45 02 c0       	push   0xc0024542
c000cb88:	e8 72 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cb8d:	83 c4 10             	add    esp,0x10
c000cb90:	83 c4 0c             	add    esp,0xc
c000cb93:	5b                   	pop    ebx
c000cb94:	5e                   	pop    esi
c000cb95:	5f                   	pop    edi
c000cb96:	5d                   	pop    ebp
c000cb97:	c3                   	ret    

c000cb98 <__cxa_atexit>:
c000cb98:	31 c0                	xor    eax,eax
c000cb9a:	c3                   	ret    

c000cb9b <__cxa_finalize>:
c000cb9b:	c3                   	ret    

c000cb9c <__stack_chk_fail>:
c000cb9c:	55                   	push   ebp
c000cb9d:	89 e5                	mov    ebp,esp
c000cb9f:	83 ec 14             	sub    esp,0x14
c000cba2:	68 d8 45 02 c0       	push   0xc00245d8
c000cba7:	e8 53 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cbac:	58                   	pop    eax
c000cbad:	5a                   	pop    edx
c000cbae:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbb1:	68 28 46 02 c0       	push   0xc0024628
c000cbb6:	e8 44 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cbbb:	59                   	pop    ecx
c000cbbc:	58                   	pop    eax
c000cbbd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbc0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cbc3:	68 28 46 02 c0       	push   0xc0024628
c000cbc8:	e8 32 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cbcd:	5a                   	pop    edx
c000cbce:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbd1:	59                   	pop    ecx
c000cbd2:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbd4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cbd7:	68 28 46 02 c0       	push   0xc0024628
c000cbdc:	e8 1e 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cbe1:	5a                   	pop    edx
c000cbe2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe5:	59                   	pop    ecx
c000cbe6:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbe8:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbea:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cbed:	68 28 46 02 c0       	push   0xc0024628
c000cbf2:	e8 08 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cbf7:	c7 04 24 30 46 02 c0 	mov    DWORD PTR [esp],0xc0024630
c000cbfe:	e8 ac 7c 00 00       	call   c00148af <Krnl::panic(char const*)>
c000cc03:	83 c4 10             	add    esp,0x10
c000cc06:	c9                   	leave  
c000cc07:	c3                   	ret    

c000cc08 <__cxa_pure_virtual>:
c000cc08:	83 ec 18             	sub    esp,0x18
c000cc0b:	68 48 46 02 c0       	push   0xc0024648
c000cc10:	e8 9a 7c 00 00       	call   c00148af <Krnl::panic(char const*)>
c000cc15:	83 c4 1c             	add    esp,0x1c
c000cc18:	c3                   	ret    

c000cc19 <operator new[](unsigned long)>:
c000cc19:	e9 f1 cd ff ff       	jmp    c0009a0f <malloc>

c000cc1e <operator delete(void*, unsigned long)>:
c000cc1e:	e9 0c ce ff ff       	jmp    c0009a2f <rfree>

c000cc23 <operator delete[](void*)>:
c000cc23:	e9 07 ce ff ff       	jmp    c0009a2f <rfree>

c000cc28 <operator delete[](void*, unsigned long)>:
c000cc28:	e9 02 ce ff ff       	jmp    c0009a2f <rfree>

c000cc2d <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000cc2d:	55                   	push   ebp
c000cc2e:	b9 11 00 00 00       	mov    ecx,0x11
c000cc33:	57                   	push   edi
c000cc34:	56                   	push   esi
c000cc35:	be 2e 41 02 c0       	mov    esi,0xc002412e
c000cc3a:	53                   	push   ebx
c000cc3b:	83 ec 20             	sub    esp,0x20
c000cc3e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cc42:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000cc46:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000cc4a:	fc                   	cld    
c000cc4b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cc4d:	89 ee                	mov    esi,ebp
c000cc4f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cc53:	eb 02                	jmp    c000cc57 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000cc55:	89 c6                	mov    esi,eax
c000cc57:	31 d2                	xor    edx,edx
c000cc59:	41                   	inc    ecx
c000cc5a:	89 f0                	mov    eax,esi
c000cc5c:	f7 f3                	div    ebx
c000cc5e:	39 de                	cmp    esi,ebx
c000cc60:	73 f3                	jae    c000cc55 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000cc62:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cc65:	eb 02                	jmp    c000cc69 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000cc67:	89 c5                	mov    ebp,eax
c000cc69:	31 d2                	xor    edx,edx
c000cc6b:	49                   	dec    ecx
c000cc6c:	89 e8                	mov    eax,ebp
c000cc6e:	f7 f3                	div    ebx
c000cc70:	39 dd                	cmp    ebp,ebx
c000cc72:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000cc76:	88 11                	mov    BYTE PTR [ecx],dl
c000cc78:	73 ed                	jae    c000cc67 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000cc7a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc7e:	83 c4 20             	add    esp,0x20
c000cc81:	5b                   	pop    ebx
c000cc82:	5e                   	pop    esi
c000cc83:	5f                   	pop    edi
c000cc84:	5d                   	pop    ebp
c000cc85:	c3                   	ret    

c000cc86 <Dbg::logc(char)>:
c000cc86:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cc8a:	f6 05 c0 7c 02 c0 10 	test   BYTE PTR ds:0xc0027cc0,0x10
c000cc91:	75 12                	jne    c000cca5 <Dbg::logc(char)+0x1f>
c000cc93:	ba fd 03 00 00       	mov    edx,0x3fd
c000cc98:	ec                   	in     al,dx
c000cc99:	a8 20                	test   al,0x20
c000cc9b:	74 fb                	je     c000cc98 <Dbg::logc(char)+0x12>
c000cc9d:	ba f8 03 00 00       	mov    edx,0x3f8
c000cca2:	88 c8                	mov    al,cl
c000cca4:	ee                   	out    dx,al
c000cca5:	c3                   	ret    

c000cca6 <Dbg::logs(char*)>:
c000cca6:	53                   	push   ebx
c000cca7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ccab:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ccae:	84 c0                	test   al,al
c000ccb0:	74 0f                	je     c000ccc1 <Dbg::logs(char*)+0x1b>
c000ccb2:	50                   	push   eax
c000ccb3:	43                   	inc    ebx
c000ccb4:	e8 cd ff ff ff       	call   c000cc86 <Dbg::logc(char)>
c000ccb9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ccbc:	5a                   	pop    edx
c000ccbd:	84 c0                	test   al,al
c000ccbf:	75 f1                	jne    c000ccb2 <Dbg::logs(char*)+0xc>
c000ccc1:	5b                   	pop    ebx
c000ccc2:	c3                   	ret    

c000ccc3 <Dbg::logWriteInt(unsigned int)>:
c000ccc3:	83 ec 10             	sub    esp,0x10
c000ccc6:	6a 0a                	push   0xa
c000ccc8:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cccc:	50                   	push   eax
c000cccd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd1:	e8 57 ff ff ff       	call   c000cc2d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ccd6:	50                   	push   eax
c000ccd7:	e8 ca ff ff ff       	call   c000cca6 <Dbg::logs(char*)>
c000ccdc:	83 c4 20             	add    esp,0x20
c000ccdf:	c3                   	ret    

c000cce0 <Dbg::logWriteIntBase(unsigned int, int)>:
c000cce0:	83 ec 10             	sub    esp,0x10
c000cce3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cce7:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cceb:	50                   	push   eax
c000ccec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccf0:	e8 38 ff ff ff       	call   c000cc2d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ccf5:	50                   	push   eax
c000ccf6:	e8 ab ff ff ff       	call   c000cca6 <Dbg::logs(char*)>
c000ccfb:	83 c4 20             	add    esp,0x20
c000ccfe:	c3                   	ret    

c000ccff <Dbg::kprintf(char const*, ...)>:
c000ccff:	55                   	push   ebp
c000cd00:	57                   	push   edi
c000cd01:	56                   	push   esi
c000cd02:	53                   	push   ebx
c000cd03:	83 ec 0c             	sub    esp,0xc
c000cd06:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cd0a:	f6 05 c0 7c 02 c0 10 	test   BYTE PTR ds:0xc0027cc0,0x10
c000cd11:	74 08                	je     c000cd1b <Dbg::kprintf(char const*, ...)+0x1c>
c000cd13:	83 c4 0c             	add    esp,0xc
c000cd16:	5b                   	pop    ebx
c000cd17:	5e                   	pop    esi
c000cd18:	5f                   	pop    edi
c000cd19:	5d                   	pop    ebp
c000cd1a:	c3                   	ret    
c000cd1b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cd1f:	31 db                	xor    ebx,ebx
c000cd21:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cd25:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cd28:	84 c0                	test   al,al
c000cd2a:	74 e7                	je     c000cd13 <Dbg::kprintf(char const*, ...)+0x14>
c000cd2c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cd2f:	3c 25                	cmp    al,0x25
c000cd31:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cd34:	75 44                	jne    c000cd7a <Dbg::kprintf(char const*, ...)+0x7b>
c000cd36:	83 c3 02             	add    ebx,0x2
c000cd39:	8a 07                	mov    al,BYTE PTR [edi]
c000cd3b:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000cd3e:	83 e8 25             	sub    eax,0x25
c000cd41:	3c 53                	cmp    al,0x53
c000cd43:	0f 87 c9 00 00 00    	ja     c000ce12 <Dbg::kprintf(char const*, ...)+0x113>
c000cd49:	0f b6 c0             	movzx  eax,al
c000cd4c:	ff 24 85 5c 46 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb9a4]
c000cd53:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cd57:	89 c8                	mov    eax,ecx
c000cd59:	83 c1 04             	add    ecx,0x4
c000cd5c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cd60:	ff 30                	push   DWORD PTR [eax]
c000cd62:	e8 5c ff ff ff       	call   c000ccc3 <Dbg::logWriteInt(unsigned int)>
c000cd67:	5f                   	pop    edi
c000cd68:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000cd6c:	84 c0                	test   al,al
c000cd6e:	74 a3                	je     c000cd13 <Dbg::kprintf(char const*, ...)+0x14>
c000cd70:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cd73:	3c 25                	cmp    al,0x25
c000cd75:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cd78:	74 bc                	je     c000cd36 <Dbg::kprintf(char const*, ...)+0x37>
c000cd7a:	50                   	push   eax
c000cd7b:	89 eb                	mov    ebx,ebp
c000cd7d:	e8 04 ff ff ff       	call   c000cc86 <Dbg::logc(char)>
c000cd82:	89 fd                	mov    ebp,edi
c000cd84:	58                   	pop    eax
c000cd85:	eb e1                	jmp    c000cd68 <Dbg::kprintf(char const*, ...)+0x69>
c000cd87:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cd8b:	89 c8                	mov    eax,ecx
c000cd8d:	83 c1 04             	add    ecx,0x4
c000cd90:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cd94:	ff 30                	push   DWORD PTR [eax]
c000cd96:	e8 0b ff ff ff       	call   c000cca6 <Dbg::logs(char*)>
c000cd9b:	58                   	pop    eax
c000cd9c:	eb ca                	jmp    c000cd68 <Dbg::kprintf(char const*, ...)+0x69>
c000cd9e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cda2:	89 d0                	mov    eax,edx
c000cda4:	83 c2 04             	add    edx,0x4
c000cda7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cdab:	ff 30                	push   DWORD PTR [eax]
c000cdad:	e8 11 ff ff ff       	call   c000ccc3 <Dbg::logWriteInt(unsigned int)>
c000cdb2:	58                   	pop    eax
c000cdb3:	eb b3                	jmp    c000cd68 <Dbg::kprintf(char const*, ...)+0x69>
c000cdb5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cdb9:	89 d0                	mov    eax,edx
c000cdbb:	83 c2 04             	add    edx,0x4
c000cdbe:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000cdc1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cdc5:	50                   	push   eax
c000cdc6:	e8 bb fe ff ff       	call   c000cc86 <Dbg::logc(char)>
c000cdcb:	58                   	pop    eax
c000cdcc:	eb 9a                	jmp    c000cd68 <Dbg::kprintf(char const*, ...)+0x69>
c000cdce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cdd2:	89 c8                	mov    eax,ecx
c000cdd4:	83 c1 04             	add    ecx,0x4
c000cdd7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cddb:	6a 10                	push   0x10
c000cddd:	ff 30                	push   DWORD PTR [eax]
c000cddf:	e8 fc fe ff ff       	call   c000cce0 <Dbg::logWriteIntBase(unsigned int, int)>
c000cde4:	59                   	pop    ecx
c000cde5:	5f                   	pop    edi
c000cde6:	eb 80                	jmp    c000cd68 <Dbg::kprintf(char const*, ...)+0x69>
c000cde8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cdec:	89 d0                	mov    eax,edx
c000cdee:	83 c2 08             	add    edx,0x8
c000cdf1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cdf5:	6a 10                	push   0x10
c000cdf7:	ff 30                	push   DWORD PTR [eax]
c000cdf9:	e8 e2 fe ff ff       	call   c000cce0 <Dbg::logWriteIntBase(unsigned int, int)>
c000cdfe:	58                   	pop    eax
c000cdff:	5a                   	pop    edx
c000ce00:	e9 63 ff ff ff       	jmp    c000cd68 <Dbg::kprintf(char const*, ...)+0x69>
c000ce05:	6a 25                	push   0x25
c000ce07:	e8 7a fe ff ff       	call   c000cc86 <Dbg::logc(char)>
c000ce0c:	58                   	pop    eax
c000ce0d:	e9 56 ff ff ff       	jmp    c000cd68 <Dbg::kprintf(char const*, ...)+0x69>
c000ce12:	6a 25                	push   0x25
c000ce14:	e8 6d fe ff ff       	call   c000cc86 <Dbg::logc(char)>
c000ce19:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ce1c:	50                   	push   eax
c000ce1d:	e8 64 fe ff ff       	call   c000cc86 <Dbg::logc(char)>
c000ce22:	5a                   	pop    edx
c000ce23:	59                   	pop    ecx
c000ce24:	e9 3f ff ff ff       	jmp    c000cd68 <Dbg::kprintf(char const*, ...)+0x69>
c000ce29:	90                   	nop

c000ce2a <File::read(unsigned long long, void*, int*)>:
c000ce2a:	53                   	push   ebx
c000ce2b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce2f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ce33:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ce3a:	3c 19                	cmp    al,0x19
c000ce3c:	77 35                	ja     c000ce73 <File::read(unsigned long long, void*, int*)+0x49>
c000ce3e:	8b 04 85 60 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7da0]
c000ce45:	85 c0                	test   eax,eax
c000ce47:	74 2a                	je     c000ce73 <File::read(unsigned long long, void*, int*)+0x49>
c000ce49:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ce4f:	85 c0                	test   eax,eax
c000ce51:	74 20                	je     c000ce73 <File::read(unsigned long long, void*, int*)+0x49>
c000ce53:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ce57:	74 21                	je     c000ce7a <File::read(unsigned long long, void*, int*)+0x50>
c000ce59:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ce5b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce5f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ce65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce69:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce6d:	5b                   	pop    ebx
c000ce6e:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ce71:	ff e0                	jmp    eax
c000ce73:	b8 0b 00 00 00       	mov    eax,0xb
c000ce78:	eb 05                	jmp    c000ce7f <File::read(unsigned long long, void*, int*)+0x55>
c000ce7a:	b8 05 00 00 00       	mov    eax,0x5
c000ce7f:	5b                   	pop    ebx
c000ce80:	c3                   	ret    
c000ce81:	90                   	nop

c000ce82 <File::write(unsigned long long, void*, int*)>:
c000ce82:	53                   	push   ebx
c000ce83:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce87:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ce8b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ce92:	3c 19                	cmp    al,0x19
c000ce94:	77 35                	ja     c000cecb <File::write(unsigned long long, void*, int*)+0x49>
c000ce96:	8b 04 85 60 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7da0]
c000ce9d:	85 c0                	test   eax,eax
c000ce9f:	74 2a                	je     c000cecb <File::write(unsigned long long, void*, int*)+0x49>
c000cea1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cea7:	85 c0                	test   eax,eax
c000cea9:	74 20                	je     c000cecb <File::write(unsigned long long, void*, int*)+0x49>
c000ceab:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ceaf:	74 21                	je     c000ced2 <File::write(unsigned long long, void*, int*)+0x50>
c000ceb1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ceb3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ceb7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cebd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cec1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cec5:	5b                   	pop    ebx
c000cec6:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000cec9:	ff e0                	jmp    eax
c000cecb:	b8 0b 00 00 00       	mov    eax,0xb
c000ced0:	eb 05                	jmp    c000ced7 <File::write(unsigned long long, void*, int*)+0x55>
c000ced2:	b8 05 00 00 00       	mov    eax,0x5
c000ced7:	5b                   	pop    ebx
c000ced8:	c3                   	ret    
c000ced9:	90                   	nop

c000ceda <Directory::read(unsigned long long, void*, int*)>:
c000ceda:	53                   	push   ebx
c000cedb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cedf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cee3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ceea:	3c 19                	cmp    al,0x19
c000ceec:	77 35                	ja     c000cf23 <Directory::read(unsigned long long, void*, int*)+0x49>
c000ceee:	8b 04 85 60 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7da0]
c000cef5:	85 c0                	test   eax,eax
c000cef7:	74 2a                	je     c000cf23 <Directory::read(unsigned long long, void*, int*)+0x49>
c000cef9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ceff:	85 c0                	test   eax,eax
c000cf01:	74 20                	je     c000cf23 <Directory::read(unsigned long long, void*, int*)+0x49>
c000cf03:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cf07:	74 21                	je     c000cf2a <Directory::read(unsigned long long, void*, int*)+0x50>
c000cf09:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cf0b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cf0f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cf15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf1d:	5b                   	pop    ebx
c000cf1e:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000cf21:	ff e0                	jmp    eax
c000cf23:	b8 0b 00 00 00       	mov    eax,0xb
c000cf28:	eb 05                	jmp    c000cf2f <Directory::read(unsigned long long, void*, int*)+0x55>
c000cf2a:	b8 05 00 00 00       	mov    eax,0x5
c000cf2f:	5b                   	pop    ebx
c000cf30:	c3                   	ret    
c000cf31:	90                   	nop

c000cf32 <Directory::write(unsigned long long, void*, int*)>:
c000cf32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf36:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000cf3d:	b8 0b 00 00 00       	mov    eax,0xb
c000cf42:	80 fa 19             	cmp    dl,0x19
c000cf45:	77 18                	ja     c000cf5f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cf47:	8b 14 95 60 82 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7da0]
c000cf4e:	85 d2                	test   edx,edx
c000cf50:	74 0d                	je     c000cf5f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cf52:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000cf59:	19 c0                	sbb    eax,eax
c000cf5b:	83 e0 0a             	and    eax,0xa
c000cf5e:	40                   	inc    eax
c000cf5f:	c3                   	ret    

c000cf60 <File::isAtty()>:
c000cf60:	31 c0                	xor    eax,eax
c000cf62:	c3                   	ret    
c000cf63:	90                   	nop

c000cf64 <Directory::isAtty()>:
c000cf64:	31 c0                	xor    eax,eax
c000cf66:	c3                   	ret    
c000cf67:	90                   	nop

c000cf68 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000cf68:	b8 0a 00 00 00       	mov    eax,0xa
c000cf6d:	c3                   	ret    

c000cf6e <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000cf6e:	b8 0a 00 00 00       	mov    eax,0xa
c000cf73:	c3                   	ret    

c000cf74 <Filesystem::allocateSwapfile(char const*, int)>:
c000cf74:	31 c0                	xor    eax,eax
c000cf76:	31 d2                	xor    edx,edx
c000cf78:	c3                   	ret    
c000cf79:	90                   	nop

c000cf7a <File::~File()>:
c000cf7a:	83 ec 0c             	sub    esp,0xc
c000cf7d:	ba 1c 48 02 c0       	mov    edx,0xc002481c
c000cf82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf86:	89 10                	mov    DWORD PTR [eax],edx
c000cf88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf8c:	83 ec 0c             	sub    esp,0xc
c000cf8f:	50                   	push   eax
c000cf90:	e8 e3 e7 ff ff       	call   c000b778 <UnixFile::~UnixFile()>
c000cf95:	83 c4 10             	add    esp,0x10
c000cf98:	90                   	nop
c000cf99:	83 c4 0c             	add    esp,0xc
c000cf9c:	c3                   	ret    
c000cf9d:	90                   	nop

c000cf9e <File::~File()>:
c000cf9e:	83 ec 0c             	sub    esp,0xc
c000cfa1:	83 ec 0c             	sub    esp,0xc
c000cfa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfa8:	e8 cd ff ff ff       	call   c000cf7a <File::~File()>
c000cfad:	83 c4 10             	add    esp,0x10
c000cfb0:	83 ec 08             	sub    esp,0x8
c000cfb3:	68 14 01 00 00       	push   0x114
c000cfb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfbc:	e8 5d fc ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000cfc1:	83 c4 10             	add    esp,0x10
c000cfc4:	83 c4 0c             	add    esp,0xc
c000cfc7:	c3                   	ret    

c000cfc8 <Directory::~Directory()>:
c000cfc8:	83 ec 0c             	sub    esp,0xc
c000cfcb:	ba 38 48 02 c0       	mov    edx,0xc0024838
c000cfd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfd4:	89 10                	mov    DWORD PTR [eax],edx
c000cfd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfda:	83 ec 0c             	sub    esp,0xc
c000cfdd:	50                   	push   eax
c000cfde:	e8 95 e7 ff ff       	call   c000b778 <UnixFile::~UnixFile()>
c000cfe3:	83 c4 10             	add    esp,0x10
c000cfe6:	90                   	nop
c000cfe7:	83 c4 0c             	add    esp,0xc
c000cfea:	c3                   	ret    
c000cfeb:	90                   	nop

c000cfec <Directory::~Directory()>:
c000cfec:	83 ec 0c             	sub    esp,0xc
c000cfef:	83 ec 0c             	sub    esp,0xc
c000cff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff6:	e8 cd ff ff ff       	call   c000cfc8 <Directory::~Directory()>
c000cffb:	83 c4 10             	add    esp,0x10
c000cffe:	83 ec 08             	sub    esp,0x8
c000d001:	68 14 01 00 00       	push   0x114
c000d006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d00a:	e8 0f fc ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000d00f:	83 c4 10             	add    esp,0x10
c000d012:	83 c4 0c             	add    esp,0xc
c000d015:	c3                   	ret    

c000d016 <Filesystem::Filesystem()>:
c000d016:	ba b4 47 02 c0       	mov    edx,0xc00247b4
c000d01b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d01f:	89 10                	mov    DWORD PTR [eax],edx
c000d021:	8b 15 d4 7d 02 c0    	mov    edx,DWORD PTR ds:0xc0027dd4
c000d027:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d02b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d02e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d032:	a3 d4 7d 02 c0       	mov    ds:0xc0027dd4,eax
c000d037:	90                   	nop
c000d038:	c3                   	ret    
c000d039:	90                   	nop

c000d03a <Filesystem::~Filesystem()>:
c000d03a:	ba b4 47 02 c0       	mov    edx,0xc00247b4
c000d03f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d043:	89 10                	mov    DWORD PTR [eax],edx
c000d045:	90                   	nop
c000d046:	c3                   	ret    
c000d047:	90                   	nop

c000d048 <Filesystem::~Filesystem()>:
c000d048:	83 ec 0c             	sub    esp,0xc
c000d04b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d04f:	e8 e6 ff ff ff       	call   c000d03a <Filesystem::~Filesystem()>
c000d054:	83 c4 04             	add    esp,0x4
c000d057:	83 ec 08             	sub    esp,0x8
c000d05a:	6a 08                	push   0x8
c000d05c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d060:	e8 b9 fb ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000d065:	83 c4 10             	add    esp,0x10
c000d068:	83 c4 0c             	add    esp,0xc
c000d06b:	c3                   	ret    

c000d06c <Fs::getcwd(Process*, char*, int)>:
c000d06c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d070:	31 c0                	xor    eax,eax
c000d072:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d075:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d079:	7d 15                	jge    c000d090 <Fs::getcwd(Process*, char*, int)+0x24>
c000d07b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d07f:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000d086:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000d089:	84 c9                	test   cl,cl
c000d08b:	74 06                	je     c000d093 <Fs::getcwd(Process*, char*, int)+0x27>
c000d08d:	40                   	inc    eax
c000d08e:	eb e2                	jmp    c000d072 <Fs::getcwd(Process*, char*, int)+0x6>
c000d090:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d093:	31 c0                	xor    eax,eax
c000d095:	c3                   	ret    

c000d096 <Fs::initVFS()>:
c000d096:	83 ec 18             	sub    esp,0x18
c000d099:	6a 08                	push   0x8
c000d09b:	e8 6f c9 ff ff       	call   c0009a0f <malloc>
c000d0a0:	89 04 24             	mov    DWORD PTR [esp],eax
c000d0a3:	e8 c4 e7 00 00       	call   c001b86c <FAT::FAT()>
c000d0a8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000d0af:	e8 5b c9 ff ff       	call   c0009a0f <malloc>
c000d0b4:	89 04 24             	mov    DWORD PTR [esp],eax
c000d0b7:	e8 0e fa 00 00       	call   c001caca <ISO9660::ISO9660()>
c000d0bc:	83 c4 1c             	add    esp,0x1c
c000d0bf:	c3                   	ret    

c000d0c0 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000d0c0:	55                   	push   ebp
c000d0c1:	57                   	push   edi
c000d0c2:	56                   	push   esi
c000d0c3:	53                   	push   ebx
c000d0c4:	81 ec 10 04 00 00    	sub    esp,0x410
c000d0ca:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000d0d1:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000d0d8:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000d0df:	68 00 04 00 00       	push   0x400
c000d0e4:	6a 00                	push   0x0
c000d0e6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000d0ea:	56                   	push   esi
c000d0eb:	e8 94 35 ff ff       	call   c0000684 <memset>
c000d0f0:	83 c4 10             	add    esp,0x10
c000d0f3:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000d0f7:	75 0b                	jne    c000d104 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000d0f9:	50                   	push   eax
c000d0fa:	50                   	push   eax
c000d0fb:	57                   	push   edi
c000d0fc:	56                   	push   esi
c000d0fd:	e8 3e 36 ff ff       	call   c0000740 <strcpy>
c000d102:	eb 41                	jmp    c000d145 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000d104:	8a 07                	mov    al,BYTE PTR [edi]
c000d106:	3c 5c                	cmp    al,0x5c
c000d108:	74 04                	je     c000d10e <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000d10a:	3c 2f                	cmp    al,0x2f
c000d10c:	75 18                	jne    c000d126 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000d10e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000d111:	3c 60                	cmp    al,0x60
c000d113:	7e 03                	jle    c000d118 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000d115:	83 e8 20             	sub    eax,0x20
c000d118:	88 04 24             	mov    BYTE PTR [esp],al
c000d11b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d122:	50                   	push   eax
c000d123:	50                   	push   eax
c000d124:	eb 18                	jmp    c000d13e <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000d126:	50                   	push   eax
c000d127:	50                   	push   eax
c000d128:	55                   	push   ebp
c000d129:	56                   	push   esi
c000d12a:	e8 11 36 ff ff       	call   c0000740 <strcpy>
c000d12f:	5a                   	pop    edx
c000d130:	59                   	pop    ecx
c000d131:	68 d2 5d 02 c0       	push   0xc0025dd2
c000d136:	56                   	push   esi
c000d137:	e8 44 37 ff ff       	call   c0000880 <strcat>
c000d13c:	5d                   	pop    ebp
c000d13d:	58                   	pop    eax
c000d13e:	57                   	push   edi
c000d13f:	56                   	push   esi
c000d140:	e8 3b 37 ff ff       	call   c0000880 <strcat>
c000d145:	83 c4 10             	add    esp,0x10
c000d148:	8a 04 24             	mov    al,BYTE PTR [esp]
c000d14b:	3c 60                	cmp    al,0x60
c000d14d:	7e 03                	jle    c000d152 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000d14f:	83 e8 20             	sub    eax,0x20
c000d152:	88 04 24             	mov    BYTE PTR [esp],al
c000d155:	88 03                	mov    BYTE PTR [ebx],al
c000d157:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d15e:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000d164:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000d168:	bf 03 00 00 00       	mov    edi,0x3
c000d16d:	b8 03 00 00 00       	mov    eax,0x3
c000d172:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000d175:	84 d2                	test   dl,dl
c000d177:	0f 84 91 00 00 00    	je     c000d20e <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000d17d:	8d 4f 01             	lea    ecx,[edi+0x1]
c000d180:	80 fa 5c             	cmp    dl,0x5c
c000d183:	74 05                	je     c000d18a <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000d185:	80 fa 2f             	cmp    dl,0x2f
c000d188:	75 12                	jne    c000d19c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d18a:	89 c5                	mov    ebp,eax
c000d18c:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d191:	74 09                	je     c000d19c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d193:	40                   	inc    eax
c000d194:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000d198:	89 cf                	mov    edi,ecx
c000d19a:	eb d6                	jmp    c000d172 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000d19c:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000d1a1:	75 5b                	jne    c000d1fe <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d1a3:	80 fa 2e             	cmp    dl,0x2e
c000d1a6:	75 56                	jne    c000d1fe <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d1a8:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000d1ac:	74 19                	je     c000d1c7 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000d1ae:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d1b3:	74 53                	je     c000d208 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d1b5:	89 f9                	mov    ecx,edi
c000d1b7:	41                   	inc    ecx
c000d1b8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d1bb:	80 fa 2f             	cmp    dl,0x2f
c000d1be:	74 f7                	je     c000d1b7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d1c0:	80 fa 5c             	cmp    dl,0x5c
c000d1c3:	74 f2                	je     c000d1b7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d1c5:	eb d1                	jmp    c000d198 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1c7:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d1cc:	74 3a                	je     c000d208 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d1ce:	83 f8 03             	cmp    eax,0x3
c000d1d1:	74 c5                	je     c000d198 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1d3:	41                   	inc    ecx
c000d1d4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d1d7:	80 fa 2f             	cmp    dl,0x2f
c000d1da:	74 f7                	je     c000d1d3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d1dc:	80 fa 5c             	cmp    dl,0x5c
c000d1df:	74 f2                	je     c000d1d3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d1e1:	48                   	dec    eax
c000d1e2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d1e6:	75 06                	jne    c000d1ee <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d1e8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d1ec:	eb f3                	jmp    c000d1e1 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000d1ee:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d1f2:	74 07                	je     c000d1fb <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000d1f4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d1f8:	48                   	dec    eax
c000d1f9:	eb f3                	jmp    c000d1ee <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d1fb:	40                   	inc    eax
c000d1fc:	eb 9a                	jmp    c000d198 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1fe:	80 fa 2f             	cmp    dl,0x2f
c000d201:	74 95                	je     c000d198 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d203:	80 fa 5c             	cmp    dl,0x5c
c000d206:	74 90                	je     c000d198 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d208:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000d20b:	40                   	inc    eax
c000d20c:	eb 8a                	jmp    c000d198 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d20e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d212:	83 ec 0c             	sub    esp,0xc
c000d215:	53                   	push   ebx
c000d216:	e8 85 34 ff ff       	call   c00006a0 <strlen>
c000d21b:	83 c4 10             	add    esp,0x10
c000d21e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000d223:	75 26                	jne    c000d24b <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000d225:	83 ec 0c             	sub    esp,0xc
c000d228:	53                   	push   ebx
c000d229:	e8 72 34 ff ff       	call   c00006a0 <strlen>
c000d22e:	83 c4 10             	add    esp,0x10
c000d231:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000d236:	74 26                	je     c000d25e <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000d238:	83 ec 0c             	sub    esp,0xc
c000d23b:	53                   	push   ebx
c000d23c:	e8 5f 34 ff ff       	call   c00006a0 <strlen>
c000d241:	83 c4 10             	add    esp,0x10
c000d244:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d249:	eb c7                	jmp    c000d212 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d24b:	83 ec 0c             	sub    esp,0xc
c000d24e:	53                   	push   ebx
c000d24f:	e8 4c 34 ff ff       	call   c00006a0 <strlen>
c000d254:	83 c4 10             	add    esp,0x10
c000d257:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d25c:	74 c7                	je     c000d225 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d25e:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d264:	5b                   	pop    ebx
c000d265:	5e                   	pop    esi
c000d266:	5f                   	pop    edi
c000d267:	5d                   	pop    ebp
c000d268:	c3                   	ret    
c000d269:	90                   	nop

c000d26a <File::File(char const*, Process*)>:
c000d26a:	83 ec 0c             	sub    esp,0xc
c000d26d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d271:	83 ec 08             	sub    esp,0x8
c000d274:	6a 00                	push   0x0
c000d276:	50                   	push   eax
c000d277:	e8 1a e3 ff ff       	call   c000b596 <UnixFile::UnixFile(int)>
c000d27c:	83 c4 10             	add    esp,0x10
c000d27f:	ba 1c 48 02 c0       	mov    edx,0xc002481c
c000d284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d288:	89 10                	mov    DWORD PTR [eax],edx
c000d28a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d28e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d298:	83 c0 0d             	add    eax,0xd
c000d29b:	83 ec 04             	sub    esp,0x4
c000d29e:	52                   	push   edx
c000d29f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2a3:	50                   	push   eax
c000d2a4:	e8 17 fe ff ff       	call   c000d0c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d2a9:	83 c4 10             	add    esp,0x10
c000d2ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2b0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d2b3:	8d 50 bf             	lea    edx,[eax-0x41]
c000d2b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2ba:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d2c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2c4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d2c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2cc:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d2d2:	0f b6 c0             	movzx  eax,al
c000d2d5:	8b 04 85 60 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7da0]
c000d2dc:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d2e2:	85 c0                	test   eax,eax
c000d2e4:	75 20                	jne    c000d306 <File::File(char const*, Process*)+0x9c>
c000d2e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2ea:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d2f0:	0f b6 c0             	movzx  eax,al
c000d2f3:	8b 04 85 60 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7da0]
c000d2fa:	83 ec 0c             	sub    esp,0xc
c000d2fd:	50                   	push   eax
c000d2fe:	e8 9b 30 00 00       	call   c001039e <LogicalDisk::mount()>
c000d303:	83 c4 10             	add    esp,0x10
c000d306:	90                   	nop
c000d307:	83 c4 0c             	add    esp,0xc
c000d30a:	c3                   	ret    
c000d30b:	90                   	nop

c000d30c <File::open(FileOpenMode)>:
c000d30c:	53                   	push   ebx
c000d30d:	b8 0b 00 00 00       	mov    eax,0xb
c000d312:	83 ec 08             	sub    esp,0x8
c000d315:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d319:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d320:	80 fa 19             	cmp    dl,0x19
c000d323:	77 40                	ja     c000d365 <File::open(FileOpenMode)+0x59>
c000d325:	8b 14 95 60 82 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7da0]
c000d32c:	85 d2                	test   edx,edx
c000d32e:	74 35                	je     c000d365 <File::open(FileOpenMode)+0x59>
c000d330:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d336:	85 d2                	test   edx,edx
c000d338:	74 2b                	je     c000d365 <File::open(FileOpenMode)+0x59>
c000d33a:	b8 06 00 00 00       	mov    eax,0x6
c000d33f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d343:	75 20                	jne    c000d365 <File::open(FileOpenMode)+0x59>
c000d345:	8b 02                	mov    eax,DWORD PTR [edx]
c000d347:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d34d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d351:	51                   	push   ecx
c000d352:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d355:	51                   	push   ecx
c000d356:	52                   	push   edx
c000d357:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d35a:	83 c4 10             	add    esp,0x10
c000d35d:	85 c0                	test   eax,eax
c000d35f:	75 04                	jne    c000d365 <File::open(FileOpenMode)+0x59>
c000d361:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d365:	83 c4 08             	add    esp,0x8
c000d368:	5b                   	pop    ebx
c000d369:	c3                   	ret    

c000d36a <File::close()>:
c000d36a:	53                   	push   ebx
c000d36b:	b8 0b 00 00 00       	mov    eax,0xb
c000d370:	83 ec 08             	sub    esp,0x8
c000d373:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d377:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d37e:	80 fa 19             	cmp    dl,0x19
c000d381:	77 41                	ja     c000d3c4 <File::close()+0x5a>
c000d383:	8b 1c 95 60 82 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd7da0]
c000d38a:	85 db                	test   ebx,ebx
c000d38c:	74 36                	je     c000d3c4 <File::close()+0x5a>
c000d38e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d395:	74 2d                	je     c000d3c4 <File::close()+0x5a>
c000d397:	b8 05 00 00 00       	mov    eax,0x5
c000d39c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d3a0:	74 22                	je     c000d3c4 <File::close()+0x5a>
c000d3a2:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d3a6:	8b 04 95 60 82 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7da0]
c000d3ad:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d3b3:	53                   	push   ebx
c000d3b4:	53                   	push   ebx
c000d3b5:	8b 10                	mov    edx,DWORD PTR [eax]
c000d3b7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d3bd:	50                   	push   eax
c000d3be:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d3c1:	83 c4 10             	add    esp,0x10
c000d3c4:	83 c4 08             	add    esp,0x8
c000d3c7:	5b                   	pop    ebx
c000d3c8:	c3                   	ret    
c000d3c9:	90                   	nop

c000d3ca <File::seek(unsigned long long)>:
c000d3ca:	56                   	push   esi
c000d3cb:	53                   	push   ebx
c000d3cc:	b8 0b 00 00 00       	mov    eax,0xb
c000d3d1:	51                   	push   ecx
c000d3d2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d3d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3da:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d3e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d3e5:	80 fa 19             	cmp    dl,0x19
c000d3e8:	77 31                	ja     c000d41b <File::seek(unsigned long long)+0x51>
c000d3ea:	8b 14 95 60 82 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7da0]
c000d3f1:	85 d2                	test   edx,edx
c000d3f3:	74 26                	je     c000d41b <File::seek(unsigned long long)+0x51>
c000d3f5:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d3fb:	85 d2                	test   edx,edx
c000d3fd:	74 1c                	je     c000d41b <File::seek(unsigned long long)+0x51>
c000d3ff:	b8 05 00 00 00       	mov    eax,0x5
c000d404:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d408:	74 11                	je     c000d41b <File::seek(unsigned long long)+0x51>
c000d40a:	8b 02                	mov    eax,DWORD PTR [edx]
c000d40c:	53                   	push   ebx
c000d40d:	51                   	push   ecx
c000d40e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d414:	52                   	push   edx
c000d415:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d418:	83 c4 10             	add    esp,0x10
c000d41b:	5a                   	pop    edx
c000d41c:	5b                   	pop    ebx
c000d41d:	5e                   	pop    esi
c000d41e:	c3                   	ret    
c000d41f:	90                   	nop

c000d420 <File::tell(unsigned long long*)>:
c000d420:	83 ec 0c             	sub    esp,0xc
c000d423:	b8 0b 00 00 00       	mov    eax,0xb
c000d428:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d42c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d433:	80 fa 19             	cmp    dl,0x19
c000d436:	77 34                	ja     c000d46c <File::tell(unsigned long long*)+0x4c>
c000d438:	8b 14 95 60 82 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7da0]
c000d43f:	85 d2                	test   edx,edx
c000d441:	74 29                	je     c000d46c <File::tell(unsigned long long*)+0x4c>
c000d443:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d449:	85 d2                	test   edx,edx
c000d44b:	74 1f                	je     c000d46c <File::tell(unsigned long long*)+0x4c>
c000d44d:	b8 05 00 00 00       	mov    eax,0x5
c000d452:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d456:	74 14                	je     c000d46c <File::tell(unsigned long long*)+0x4c>
c000d458:	50                   	push   eax
c000d459:	8b 02                	mov    eax,DWORD PTR [edx]
c000d45b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d45f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d465:	52                   	push   edx
c000d466:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d469:	83 c4 10             	add    esp,0x10
c000d46c:	83 c4 0c             	add    esp,0xc
c000d46f:	c3                   	ret    

c000d470 <File::rewind()>:
c000d470:	83 ec 10             	sub    esp,0x10
c000d473:	6a 00                	push   0x0
c000d475:	6a 00                	push   0x0
c000d477:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d47b:	e8 4a ff ff ff       	call   c000d3ca <File::seek(unsigned long long)>
c000d480:	83 c4 1c             	add    esp,0x1c
c000d483:	c3                   	ret    

c000d484 <File::unlink()>:
c000d484:	83 ec 0c             	sub    esp,0xc
c000d487:	b8 0b 00 00 00       	mov    eax,0xb
c000d48c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d490:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d497:	80 f9 19             	cmp    cl,0x19
c000d49a:	77 2f                	ja     c000d4cb <File::unlink()+0x47>
c000d49c:	8b 0c 8d 60 82 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7da0]
c000d4a3:	85 c9                	test   ecx,ecx
c000d4a5:	74 24                	je     c000d4cb <File::unlink()+0x47>
c000d4a7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d4ad:	85 c9                	test   ecx,ecx
c000d4af:	74 1a                	je     c000d4cb <File::unlink()+0x47>
c000d4b1:	b8 06 00 00 00       	mov    eax,0x6
c000d4b6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d4ba:	75 0f                	jne    c000d4cb <File::unlink()+0x47>
c000d4bc:	83 c2 0d             	add    edx,0xd
c000d4bf:	50                   	push   eax
c000d4c0:	50                   	push   eax
c000d4c1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d4c3:	52                   	push   edx
c000d4c4:	51                   	push   ecx
c000d4c5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d4c8:	83 c4 10             	add    esp,0x10
c000d4cb:	83 c4 0c             	add    esp,0xc
c000d4ce:	c3                   	ret    
c000d4cf:	90                   	nop

c000d4d0 <File::rename(char const*)>:
c000d4d0:	83 ec 0c             	sub    esp,0xc
c000d4d3:	b8 0b 00 00 00       	mov    eax,0xb
c000d4d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d4dc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d4e3:	80 f9 19             	cmp    cl,0x19
c000d4e6:	77 32                	ja     c000d51a <File::rename(char const*)+0x4a>
c000d4e8:	8b 0c 8d 60 82 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7da0]
c000d4ef:	85 c9                	test   ecx,ecx
c000d4f1:	74 27                	je     c000d51a <File::rename(char const*)+0x4a>
c000d4f3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d4f9:	85 c9                	test   ecx,ecx
c000d4fb:	74 1d                	je     c000d51a <File::rename(char const*)+0x4a>
c000d4fd:	b8 06 00 00 00       	mov    eax,0x6
c000d502:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d506:	75 12                	jne    c000d51a <File::rename(char const*)+0x4a>
c000d508:	83 c2 0d             	add    edx,0xd
c000d50b:	50                   	push   eax
c000d50c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d50e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d512:	52                   	push   edx
c000d513:	51                   	push   ecx
c000d514:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d517:	83 c4 10             	add    esp,0x10
c000d51a:	83 c4 0c             	add    esp,0xc
c000d51d:	c3                   	ret    

c000d51e <File::chfatattr(unsigned char, unsigned char)>:
c000d51e:	57                   	push   edi
c000d51f:	b8 0b 00 00 00       	mov    eax,0xb
c000d524:	56                   	push   esi
c000d525:	53                   	push   ebx
c000d526:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d52a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d52e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d535:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d539:	80 f9 19             	cmp    cl,0x19
c000d53c:	77 37                	ja     c000d575 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d53e:	8b 0c 8d 60 82 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7da0]
c000d545:	85 c9                	test   ecx,ecx
c000d547:	74 2c                	je     c000d575 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d549:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d54f:	85 c9                	test   ecx,ecx
c000d551:	74 22                	je     c000d575 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d553:	b8 06 00 00 00       	mov    eax,0x6
c000d558:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d55c:	75 17                	jne    c000d575 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d55e:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d560:	89 f0                	mov    eax,esi
c000d562:	83 c2 0d             	add    edx,0xd
c000d565:	0f b6 f0             	movzx  esi,al
c000d568:	0f b6 db             	movzx  ebx,bl
c000d56b:	56                   	push   esi
c000d56c:	53                   	push   ebx
c000d56d:	52                   	push   edx
c000d56e:	51                   	push   ecx
c000d56f:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d572:	83 c4 10             	add    esp,0x10
c000d575:	5b                   	pop    ebx
c000d576:	5e                   	pop    esi
c000d577:	5f                   	pop    edi
c000d578:	c3                   	ret    
c000d579:	90                   	nop

c000d57a <File::exists()>:
c000d57a:	83 ec 0c             	sub    esp,0xc
c000d57d:	31 c0                	xor    eax,eax
c000d57f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d583:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d58a:	80 f9 19             	cmp    cl,0x19
c000d58d:	77 24                	ja     c000d5b3 <File::exists()+0x39>
c000d58f:	8b 0c 8d 60 82 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7da0]
c000d596:	85 c9                	test   ecx,ecx
c000d598:	74 19                	je     c000d5b3 <File::exists()+0x39>
c000d59a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d5a0:	85 c9                	test   ecx,ecx
c000d5a2:	74 0f                	je     c000d5b3 <File::exists()+0x39>
c000d5a4:	83 c2 0d             	add    edx,0xd
c000d5a7:	50                   	push   eax
c000d5a8:	50                   	push   eax
c000d5a9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d5ab:	52                   	push   edx
c000d5ac:	51                   	push   ecx
c000d5ad:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	83 c4 0c             	add    esp,0xc
c000d5b6:	c3                   	ret    
c000d5b7:	90                   	nop

c000d5b8 <File::stat(unsigned long long*, bool*)>:
c000d5b8:	56                   	push   esi
c000d5b9:	53                   	push   ebx
c000d5ba:	50                   	push   eax
c000d5bb:	b8 0b 00 00 00       	mov    eax,0xb
c000d5c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d5c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d5cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d5d3:	80 f9 19             	cmp    cl,0x19
c000d5d6:	77 3d                	ja     c000d615 <File::stat(unsigned long long*, bool*)+0x5d>
c000d5d8:	8b 0c 8d 60 82 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7da0]
c000d5df:	85 c9                	test   ecx,ecx
c000d5e1:	74 32                	je     c000d615 <File::stat(unsigned long long*, bool*)+0x5d>
c000d5e3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d5e9:	85 c9                	test   ecx,ecx
c000d5eb:	74 28                	je     c000d615 <File::stat(unsigned long long*, bool*)+0x5d>
c000d5ed:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d5ef:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d5f3:	74 13                	je     c000d608 <File::stat(unsigned long long*, bool*)+0x50>
c000d5f5:	83 ec 04             	sub    esp,0x4
c000d5f8:	56                   	push   esi
c000d5f9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d5ff:	51                   	push   ecx
c000d600:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d603:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d606:	eb 0a                	jmp    c000d612 <File::stat(unsigned long long*, bool*)+0x5a>
c000d608:	53                   	push   ebx
c000d609:	83 c2 0d             	add    edx,0xd
c000d60c:	56                   	push   esi
c000d60d:	52                   	push   edx
c000d60e:	51                   	push   ecx
c000d60f:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d612:	83 c4 10             	add    esp,0x10
c000d615:	5a                   	pop    edx
c000d616:	5b                   	pop    ebx
c000d617:	5e                   	pop    esi
c000d618:	c3                   	ret    

c000d619 <Fs::setcwd(Process*, char*)>:
c000d619:	55                   	push   ebp
c000d61a:	57                   	push   edi
c000d61b:	56                   	push   esi
c000d61c:	53                   	push   ebx
c000d61d:	81 ec 20 02 00 00    	sub    esp,0x220
c000d623:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d62a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d630:	57                   	push   edi
c000d631:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d638:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d63c:	56                   	push   esi
c000d63d:	e8 7e fa ff ff       	call   c000d0c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d642:	89 34 24             	mov    DWORD PTR [esp],esi
c000d645:	e8 56 30 ff ff       	call   c00006a0 <strlen>
c000d64a:	83 c4 10             	add    esp,0x10
c000d64d:	83 f8 02             	cmp    eax,0x2
c000d650:	77 17                	ja     c000d669 <Fs::setcwd(Process*, char*)+0x50>
c000d652:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000d657:	83 e8 41             	sub    eax,0x41
c000d65a:	83 f8 19             	cmp    eax,0x19
c000d65d:	76 24                	jbe    c000d683 <Fs::setcwd(Process*, char*)+0x6a>
c000d65f:	b8 03 00 00 00       	mov    eax,0x3
c000d664:	e9 e0 00 00 00       	jmp    c000d749 <Fs::setcwd(Process*, char*)+0x130>
c000d669:	83 ec 0c             	sub    esp,0xc
c000d66c:	56                   	push   esi
c000d66d:	e8 2e 30 ff ff       	call   c00006a0 <strlen>
c000d672:	83 c4 10             	add    esp,0x10
c000d675:	83 f8 03             	cmp    eax,0x3
c000d678:	75 34                	jne    c000d6ae <Fs::setcwd(Process*, char*)+0x95>
c000d67a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d67f:	75 2d                	jne    c000d6ae <Fs::setcwd(Process*, char*)+0x95>
c000d681:	eb cf                	jmp    c000d652 <Fs::setcwd(Process*, char*)+0x39>
c000d683:	8b 14 85 60 82 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7da0]
c000d68a:	b8 05 00 00 00       	mov    eax,0x5
c000d68f:	85 d2                	test   edx,edx
c000d691:	0f 84 b2 00 00 00    	je     c000d749 <Fs::setcwd(Process*, char*)+0x130>
c000d697:	b8 06 00 00 00       	mov    eax,0x6
c000d69c:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d6a3:	0f 85 92 00 00 00    	jne    c000d73b <Fs::setcwd(Process*, char*)+0x122>
c000d6a9:	e9 9b 00 00 00       	jmp    c000d749 <Fs::setcwd(Process*, char*)+0x130>
c000d6ae:	83 ec 0c             	sub    esp,0xc
c000d6b1:	68 14 01 00 00       	push   0x114
c000d6b6:	e8 54 c3 ff ff       	call   c0009a0f <malloc>
c000d6bb:	83 c4 0c             	add    esp,0xc
c000d6be:	89 c3                	mov    ebx,eax
c000d6c0:	55                   	push   ebp
c000d6c1:	56                   	push   esi
c000d6c2:	50                   	push   eax
c000d6c3:	e8 a2 fb ff ff       	call   c000d26a <File::File(char const*, Process*)>
c000d6c8:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000d6cd:	83 c4 0c             	add    esp,0xc
c000d6d0:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000d6d4:	50                   	push   eax
c000d6d5:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d6d9:	50                   	push   eax
c000d6da:	53                   	push   ebx
c000d6db:	e8 d8 fe ff ff       	call   c000d5b8 <File::stat(unsigned long long*, bool*)>
c000d6e0:	83 c4 10             	add    esp,0x10
c000d6e3:	83 f8 02             	cmp    eax,0x2
c000d6e6:	74 04                	je     c000d6ec <Fs::setcwd(Process*, char*)+0xd3>
c000d6e8:	85 c0                	test   eax,eax
c000d6ea:	74 1c                	je     c000d708 <Fs::setcwd(Process*, char*)+0xef>
c000d6ec:	b8 01 00 00 00       	mov    eax,0x1
c000d6f1:	85 db                	test   ebx,ebx
c000d6f3:	74 54                	je     c000d749 <Fs::setcwd(Process*, char*)+0x130>
c000d6f5:	83 ec 0c             	sub    esp,0xc
c000d6f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d6fa:	53                   	push   ebx
c000d6fb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d6fe:	83 c4 10             	add    esp,0x10
c000d701:	b8 01 00 00 00       	mov    eax,0x1
c000d706:	eb 41                	jmp    c000d749 <Fs::setcwd(Process*, char*)+0x130>
c000d708:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d70d:	75 1c                	jne    c000d72b <Fs::setcwd(Process*, char*)+0x112>
c000d70f:	b8 02 00 00 00       	mov    eax,0x2
c000d714:	85 db                	test   ebx,ebx
c000d716:	74 31                	je     c000d749 <Fs::setcwd(Process*, char*)+0x130>
c000d718:	83 ec 0c             	sub    esp,0xc
c000d71b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d71d:	53                   	push   ebx
c000d71e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d721:	83 c4 10             	add    esp,0x10
c000d724:	b8 02 00 00 00       	mov    eax,0x2
c000d729:	eb 1e                	jmp    c000d749 <Fs::setcwd(Process*, char*)+0x130>
c000d72b:	85 db                	test   ebx,ebx
c000d72d:	74 0c                	je     c000d73b <Fs::setcwd(Process*, char*)+0x122>
c000d72f:	83 ec 0c             	sub    esp,0xc
c000d732:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d734:	53                   	push   ebx
c000d735:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d738:	83 c4 10             	add    esp,0x10
c000d73b:	50                   	push   eax
c000d73c:	50                   	push   eax
c000d73d:	56                   	push   esi
c000d73e:	57                   	push   edi
c000d73f:	e8 fc 2f ff ff       	call   c0000740 <strcpy>
c000d744:	83 c4 10             	add    esp,0x10
c000d747:	31 c0                	xor    eax,eax
c000d749:	81 c4 1c 02 00 00    	add    esp,0x21c
c000d74f:	5b                   	pop    ebx
c000d750:	5e                   	pop    esi
c000d751:	5f                   	pop    edi
c000d752:	5d                   	pop    ebp
c000d753:	c3                   	ret    

c000d754 <Directory::Directory(char const*, Process*)>:
c000d754:	83 ec 0c             	sub    esp,0xc
c000d757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d75b:	83 ec 08             	sub    esp,0x8
c000d75e:	6a 00                	push   0x0
c000d760:	50                   	push   eax
c000d761:	e8 30 de ff ff       	call   c000b596 <UnixFile::UnixFile(int)>
c000d766:	83 c4 10             	add    esp,0x10
c000d769:	ba 38 48 02 c0       	mov    edx,0xc0024838
c000d76e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d772:	89 10                	mov    DWORD PTR [eax],edx
c000d774:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d778:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d77e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d782:	83 c0 0d             	add    eax,0xd
c000d785:	83 ec 04             	sub    esp,0x4
c000d788:	52                   	push   edx
c000d789:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d78d:	50                   	push   eax
c000d78e:	e8 2d f9 ff ff       	call   c000d0c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d793:	83 c4 10             	add    esp,0x10
c000d796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d79a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d79d:	8d 50 bf             	lea    edx,[eax-0x41]
c000d7a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7a4:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d7aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ae:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d7b2:	90                   	nop
c000d7b3:	83 c4 0c             	add    esp,0xc
c000d7b6:	c3                   	ret    
c000d7b7:	90                   	nop

c000d7b8 <Directory::open()>:
c000d7b8:	53                   	push   ebx
c000d7b9:	b8 0b 00 00 00       	mov    eax,0xb
c000d7be:	83 ec 08             	sub    esp,0x8
c000d7c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d7c5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d7cc:	80 fa 19             	cmp    dl,0x19
c000d7cf:	77 3d                	ja     c000d80e <Directory::open()+0x56>
c000d7d1:	8b 14 95 60 82 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7da0]
c000d7d8:	85 d2                	test   edx,edx
c000d7da:	74 32                	je     c000d80e <Directory::open()+0x56>
c000d7dc:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d7e2:	85 d2                	test   edx,edx
c000d7e4:	74 28                	je     c000d80e <Directory::open()+0x56>
c000d7e6:	b8 06 00 00 00       	mov    eax,0x6
c000d7eb:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d7ef:	75 1d                	jne    c000d80e <Directory::open()+0x56>
c000d7f1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d7f7:	50                   	push   eax
c000d7f8:	8b 02                	mov    eax,DWORD PTR [edx]
c000d7fa:	51                   	push   ecx
c000d7fb:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d7fe:	51                   	push   ecx
c000d7ff:	52                   	push   edx
c000d800:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000d803:	83 c4 10             	add    esp,0x10
c000d806:	85 c0                	test   eax,eax
c000d808:	75 04                	jne    c000d80e <Directory::open()+0x56>
c000d80a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d80e:	83 c4 08             	add    esp,0x8
c000d811:	5b                   	pop    ebx
c000d812:	c3                   	ret    
c000d813:	90                   	nop

c000d814 <Directory::close()>:
c000d814:	53                   	push   ebx
c000d815:	b8 0b 00 00 00       	mov    eax,0xb
c000d81a:	83 ec 08             	sub    esp,0x8
c000d81d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d821:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d828:	80 fa 19             	cmp    dl,0x19
c000d82b:	77 41                	ja     c000d86e <Directory::close()+0x5a>
c000d82d:	8b 1c 95 60 82 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd7da0]
c000d834:	85 db                	test   ebx,ebx
c000d836:	74 36                	je     c000d86e <Directory::close()+0x5a>
c000d838:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d83f:	74 2d                	je     c000d86e <Directory::close()+0x5a>
c000d841:	b8 05 00 00 00       	mov    eax,0x5
c000d846:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d84a:	74 22                	je     c000d86e <Directory::close()+0x5a>
c000d84c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d850:	8b 04 95 60 82 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7da0]
c000d857:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d85d:	53                   	push   ebx
c000d85e:	53                   	push   ebx
c000d85f:	8b 10                	mov    edx,DWORD PTR [eax]
c000d861:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d867:	50                   	push   eax
c000d868:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000d86b:	83 c4 10             	add    esp,0x10
c000d86e:	83 c4 08             	add    esp,0x8
c000d871:	5b                   	pop    ebx
c000d872:	c3                   	ret    
c000d873:	90                   	nop

c000d874 <Directory::unlink()>:
c000d874:	83 ec 0c             	sub    esp,0xc
c000d877:	b8 0b 00 00 00       	mov    eax,0xb
c000d87c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d880:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d887:	80 f9 19             	cmp    cl,0x19
c000d88a:	77 2f                	ja     c000d8bb <Directory::unlink()+0x47>
c000d88c:	8b 0c 8d 60 82 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7da0]
c000d893:	85 c9                	test   ecx,ecx
c000d895:	74 24                	je     c000d8bb <Directory::unlink()+0x47>
c000d897:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d89d:	85 c9                	test   ecx,ecx
c000d89f:	74 1a                	je     c000d8bb <Directory::unlink()+0x47>
c000d8a1:	b8 06 00 00 00       	mov    eax,0x6
c000d8a6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d8aa:	75 0f                	jne    c000d8bb <Directory::unlink()+0x47>
c000d8ac:	83 c2 0d             	add    edx,0xd
c000d8af:	50                   	push   eax
c000d8b0:	50                   	push   eax
c000d8b1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d8b3:	52                   	push   edx
c000d8b4:	51                   	push   ecx
c000d8b5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d8b8:	83 c4 10             	add    esp,0x10
c000d8bb:	83 c4 0c             	add    esp,0xc
c000d8be:	c3                   	ret    
c000d8bf:	90                   	nop

c000d8c0 <Directory::rename(char const*)>:
c000d8c0:	83 ec 0c             	sub    esp,0xc
c000d8c3:	b8 0b 00 00 00       	mov    eax,0xb
c000d8c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d8cc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d8d3:	80 f9 19             	cmp    cl,0x19
c000d8d6:	77 32                	ja     c000d90a <Directory::rename(char const*)+0x4a>
c000d8d8:	8b 0c 8d 60 82 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7da0]
c000d8df:	85 c9                	test   ecx,ecx
c000d8e1:	74 27                	je     c000d90a <Directory::rename(char const*)+0x4a>
c000d8e3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d8e9:	85 c9                	test   ecx,ecx
c000d8eb:	74 1d                	je     c000d90a <Directory::rename(char const*)+0x4a>
c000d8ed:	b8 06 00 00 00       	mov    eax,0x6
c000d8f2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d8f6:	75 12                	jne    c000d90a <Directory::rename(char const*)+0x4a>
c000d8f8:	83 c2 0d             	add    edx,0xd
c000d8fb:	50                   	push   eax
c000d8fc:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d8fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d902:	52                   	push   edx
c000d903:	51                   	push   ecx
c000d904:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d907:	83 c4 10             	add    esp,0x10
c000d90a:	83 c4 0c             	add    esp,0xc
c000d90d:	c3                   	ret    

c000d90e <Directory::exists()>:
c000d90e:	83 ec 0c             	sub    esp,0xc
c000d911:	31 c0                	xor    eax,eax
c000d913:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d917:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d91e:	80 f9 19             	cmp    cl,0x19
c000d921:	77 24                	ja     c000d947 <Directory::exists()+0x39>
c000d923:	8b 0c 8d 60 82 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7da0]
c000d92a:	85 c9                	test   ecx,ecx
c000d92c:	74 19                	je     c000d947 <Directory::exists()+0x39>
c000d92e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d934:	85 c9                	test   ecx,ecx
c000d936:	74 0f                	je     c000d947 <Directory::exists()+0x39>
c000d938:	83 c2 0d             	add    edx,0xd
c000d93b:	50                   	push   eax
c000d93c:	50                   	push   eax
c000d93d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d93f:	52                   	push   edx
c000d940:	51                   	push   ecx
c000d941:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d944:	83 c4 10             	add    esp,0x10
c000d947:	83 c4 0c             	add    esp,0xc
c000d94a:	c3                   	ret    
c000d94b:	90                   	nop

c000d94c <Directory::read(dirent*)>:
c000d94c:	83 ec 1c             	sub    esp,0x1c
c000d94f:	b8 0b 00 00 00       	mov    eax,0xb
c000d954:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d958:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d95f:	80 fa 19             	cmp    dl,0x19
c000d962:	77 30                	ja     c000d994 <Directory::read(dirent*)+0x48>
c000d964:	8b 14 95 60 82 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7da0]
c000d96b:	85 d2                	test   edx,edx
c000d96d:	74 25                	je     c000d994 <Directory::read(dirent*)+0x48>
c000d96f:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d976:	74 1c                	je     c000d994 <Directory::read(dirent*)+0x48>
c000d978:	83 ec 0c             	sub    esp,0xc
c000d97b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d97d:	8d 54 24 18          	lea    edx,[esp+0x18]
c000d981:	52                   	push   edx
c000d982:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d986:	6a 00                	push   0x0
c000d988:	68 10 01 00 00       	push   0x110
c000d98d:	51                   	push   ecx
c000d98e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d991:	83 c4 20             	add    esp,0x20
c000d994:	83 c4 1c             	add    esp,0x1c
c000d997:	c3                   	ret    

c000d998 <Directory::create()>:
c000d998:	83 ec 0c             	sub    esp,0xc
c000d99b:	b8 0b 00 00 00       	mov    eax,0xb
c000d9a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d9a4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d9ab:	80 f9 19             	cmp    cl,0x19
c000d9ae:	77 2f                	ja     c000d9df <Directory::create()+0x47>
c000d9b0:	8b 0c 8d 60 82 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7da0]
c000d9b7:	85 c9                	test   ecx,ecx
c000d9b9:	74 24                	je     c000d9df <Directory::create()+0x47>
c000d9bb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d9c1:	85 c9                	test   ecx,ecx
c000d9c3:	74 1a                	je     c000d9df <Directory::create()+0x47>
c000d9c5:	b8 06 00 00 00       	mov    eax,0x6
c000d9ca:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d9ce:	75 0f                	jne    c000d9df <Directory::create()+0x47>
c000d9d0:	83 c2 0d             	add    edx,0xd
c000d9d3:	50                   	push   eax
c000d9d4:	50                   	push   eax
c000d9d5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d9d7:	52                   	push   edx
c000d9d8:	51                   	push   ecx
c000d9d9:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000d9dc:	83 c4 10             	add    esp,0x10
c000d9df:	83 c4 0c             	add    esp,0xc
c000d9e2:	c3                   	ret    
c000d9e3:	90                   	nop

c000d9e4 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000d9e4:	b8 0a 00 00 00       	mov    eax,0xa
c000d9e9:	c3                   	ret    
c000d9ea:	66 90                	xchg   ax,ax

c000d9ec <Bus::Bus(char const*)>:
c000d9ec:	83 ec 0c             	sub    esp,0xc
c000d9ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9f3:	83 ec 08             	sub    esp,0x8
c000d9f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9fa:	50                   	push   eax
c000d9fb:	e8 8a 09 00 00       	call   c000e38a <Device::Device(char const*)>
c000da00:	83 c4 10             	add    esp,0x10
c000da03:	ba 54 48 02 c0       	mov    edx,0xc0024854
c000da08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da0c:	89 10                	mov    DWORD PTR [eax],edx
c000da0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da12:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000da1c:	90                   	nop
c000da1d:	83 c4 0c             	add    esp,0xc
c000da20:	c3                   	ret    
c000da21:	90                   	nop
c000da22:	66 90                	xchg   ax,ax

c000da24 <Bus::~Bus()>:
c000da24:	83 ec 0c             	sub    esp,0xc
c000da27:	ba 54 48 02 c0       	mov    edx,0xc0024854
c000da2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da30:	89 10                	mov    DWORD PTR [eax],edx
c000da32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da36:	83 ec 0c             	sub    esp,0xc
c000da39:	50                   	push   eax
c000da3a:	e8 15 06 00 00       	call   c000e054 <Device::~Device()>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	90                   	nop
c000da43:	83 c4 0c             	add    esp,0xc
c000da46:	c3                   	ret    
c000da47:	90                   	nop

c000da48 <Bus::~Bus()>:
c000da48:	83 ec 0c             	sub    esp,0xc
c000da4b:	83 ec 0c             	sub    esp,0xc
c000da4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da52:	e8 cd ff ff ff       	call   c000da24 <Bus::~Bus()>
c000da57:	83 c4 10             	add    esp,0x10
c000da5a:	83 ec 08             	sub    esp,0x8
c000da5d:	68 58 01 00 00       	push   0x158
c000da62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da66:	e8 b3 f1 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000da6b:	83 c4 10             	add    esp,0x10
c000da6e:	83 c4 0c             	add    esp,0xc
c000da71:	c3                   	ret    
c000da72:	66 90                	xchg   ax,ax

c000da74 <Buzzer::Buzzer(char const*)>:
c000da74:	83 ec 0c             	sub    esp,0xc
c000da77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da7b:	83 ec 08             	sub    esp,0x8
c000da7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da82:	50                   	push   eax
c000da83:	e8 02 09 00 00       	call   c000e38a <Device::Device(char const*)>
c000da88:	83 c4 10             	add    esp,0x10
c000da8b:	ba 80 48 02 c0       	mov    edx,0xc0024880
c000da90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da94:	89 10                	mov    DWORD PTR [eax],edx
c000da96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da9a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000daa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daa8:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000dab2:	90                   	nop
c000dab3:	83 c4 0c             	add    esp,0xc
c000dab6:	c3                   	ret    
c000dab7:	90                   	nop

c000dab8 <Buzzer::~Buzzer()>:
c000dab8:	83 ec 0c             	sub    esp,0xc
c000dabb:	ba 80 48 02 c0       	mov    edx,0xc0024880
c000dac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dac4:	89 10                	mov    DWORD PTR [eax],edx
c000dac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daca:	83 ec 0c             	sub    esp,0xc
c000dacd:	50                   	push   eax
c000dace:	e8 81 05 00 00       	call   c000e054 <Device::~Device()>
c000dad3:	83 c4 10             	add    esp,0x10
c000dad6:	90                   	nop
c000dad7:	83 c4 0c             	add    esp,0xc
c000dada:	c3                   	ret    
c000dadb:	90                   	nop

c000dadc <Buzzer::~Buzzer()>:
c000dadc:	83 ec 0c             	sub    esp,0xc
c000dadf:	83 ec 0c             	sub    esp,0xc
c000dae2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dae6:	e8 cd ff ff ff       	call   c000dab8 <Buzzer::~Buzzer()>
c000daeb:	83 c4 10             	add    esp,0x10
c000daee:	83 ec 08             	sub    esp,0x8
c000daf1:	68 5c 01 00 00       	push   0x15c
c000daf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dafa:	e8 1f f1 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000daff:	83 c4 10             	add    esp,0x10
c000db02:	83 c4 0c             	add    esp,0xc
c000db05:	c3                   	ret    

c000db06 <Buzzer::stop()>:
c000db06:	83 ec 14             	sub    esp,0x14
c000db09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000db0d:	8b 10                	mov    edx,DWORD PTR [eax]
c000db0f:	6a 00                	push   0x0
c000db11:	50                   	push   eax
c000db12:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000db15:	83 c4 1c             	add    esp,0x1c
c000db18:	c3                   	ret    

c000db19 <beepThread(void*)>:
c000db19:	53                   	push   ebx
c000db1a:	83 ec 08             	sub    esp,0x8
c000db1d:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000db22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000db26:	48                   	dec    eax
c000db27:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c000db2c:	75 02                	jne    c000db30 <beepThread(void*)+0x17>
c000db2e:	fb                   	sti    
c000db2f:	90                   	nop
c000db30:	83 ec 0c             	sub    esp,0xc
c000db33:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000db3a:	50                   	push   eax
c000db3b:	e8 a0 ad 00 00       	call   c00188e0 <milliTenthSleep(unsigned int)>
c000db40:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000db43:	e8 be ff ff ff       	call   c000db06 <Buzzer::stop()>
c000db48:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000db50:	83 c4 18             	add    esp,0x18
c000db53:	5b                   	pop    ebx
c000db54:	e9 87 ac 00 00       	jmp    c00187e0 <blockTask(TaskState)>
c000db59:	90                   	nop

c000db5a <Buzzer::beep(int, int, bool)>:
c000db5a:	57                   	push   edi
c000db5b:	56                   	push   esi
c000db5c:	53                   	push   ebx
c000db5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000db61:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000db65:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000db69:	50                   	push   eax
c000db6a:	50                   	push   eax
c000db6b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000db6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db71:	53                   	push   ebx
c000db72:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000db75:	83 c4 10             	add    esp,0x10
c000db78:	89 f8                	mov    eax,edi
c000db7a:	84 c0                	test   al,al
c000db7c:	74 1e                	je     c000db9c <Buzzer::beep(int, int, bool)+0x42>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	6b f6 0a             	imul   esi,esi,0xa
c000db84:	56                   	push   esi
c000db85:	e8 56 ad 00 00       	call   c00188e0 <milliTenthSleep(unsigned int)>
c000db8a:	83 c4 10             	add    esp,0x10
c000db8d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000db91:	5b                   	pop    ebx
c000db92:	5e                   	pop    esi
c000db93:	5f                   	pop    edi
c000db94:	e9 6d ff ff ff       	jmp    c000db06 <Buzzer::stop()>
c000db99:	8d 76 00             	lea    esi,[esi+0x0]
c000db9c:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000dba2:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000dba7:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000dbaf:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dbb3:	c7 44 24 14 19 db 00 c0 	mov    DWORD PTR [esp+0x14],0xc000db19
c000dbbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbbf:	5b                   	pop    ebx
c000dbc0:	5e                   	pop    esi
c000dbc1:	5f                   	pop    edi
c000dbc2:	e9 05 a8 00 00       	jmp    c00183cc <Process::createThread(void (*)(void*), void*, int)>
c000dbc7:	90                   	nop

c000dbc8 <User::loadClockSettings(int)>:
c000dbc8:	53                   	push   ebx
c000dbc9:	83 ec 14             	sub    esp,0x14
c000dbcc:	68 14 01 00 00       	push   0x114
c000dbd1:	e8 39 be ff ff       	call   c0009a0f <malloc>
c000dbd6:	83 c4 0c             	add    esp,0xc
c000dbd9:	89 c3                	mov    ebx,eax
c000dbdb:	ff 35 f0 91 02 c0    	push   DWORD PTR ds:0xc00291f0
c000dbe1:	68 a8 48 02 c0       	push   0xc00248a8
c000dbe6:	50                   	push   eax
c000dbe7:	e8 7e f6 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c000dbec:	58                   	pop    eax
c000dbed:	5a                   	pop    edx
c000dbee:	6a 01                	push   0x1
c000dbf0:	53                   	push   ebx
c000dbf1:	e8 16 f7 ff ff       	call   c000d30c <File::open(FileOpenMode)>
c000dbf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dbf9:	e8 6c f7 ff ff       	call   c000d36a <File::close()>
c000dbfe:	83 c4 10             	add    esp,0x10
c000dc01:	85 db                	test   ebx,ebx
c000dc03:	74 0f                	je     c000dc14 <User::loadClockSettings(int)+0x4c>
c000dc05:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dc07:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000dc0b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000dc0e:	83 c4 08             	add    esp,0x8
c000dc11:	5b                   	pop    ebx
c000dc12:	ff e0                	jmp    eax
c000dc14:	83 c4 08             	add    esp,0x8
c000dc17:	5b                   	pop    ebx
c000dc18:	c3                   	ret    
c000dc19:	90                   	nop

c000dc1a <Clock::Clock(char const*)>:
c000dc1a:	83 ec 0c             	sub    esp,0xc
c000dc1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc21:	83 ec 08             	sub    esp,0x8
c000dc24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc28:	50                   	push   eax
c000dc29:	e8 5c 07 00 00       	call   c000e38a <Device::Device(char const*)>
c000dc2e:	83 c4 10             	add    esp,0x10
c000dc31:	ba d0 48 02 c0       	mov    edx,0xc00248d0
c000dc36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc3a:	89 10                	mov    DWORD PTR [eax],edx
c000dc3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc40:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000dc4a:	90                   	nop
c000dc4b:	83 c4 0c             	add    esp,0xc
c000dc4e:	c3                   	ret    
c000dc4f:	90                   	nop

c000dc50 <Clock::~Clock()>:
c000dc50:	83 ec 0c             	sub    esp,0xc
c000dc53:	ba d0 48 02 c0       	mov    edx,0xc00248d0
c000dc58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc5c:	89 10                	mov    DWORD PTR [eax],edx
c000dc5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc62:	83 ec 0c             	sub    esp,0xc
c000dc65:	50                   	push   eax
c000dc66:	e8 e9 03 00 00       	call   c000e054 <Device::~Device()>
c000dc6b:	83 c4 10             	add    esp,0x10
c000dc6e:	90                   	nop
c000dc6f:	83 c4 0c             	add    esp,0xc
c000dc72:	c3                   	ret    
c000dc73:	90                   	nop

c000dc74 <Clock::~Clock()>:
c000dc74:	83 ec 0c             	sub    esp,0xc
c000dc77:	83 ec 0c             	sub    esp,0xc
c000dc7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc7e:	e8 cd ff ff ff       	call   c000dc50 <Clock::~Clock()>
c000dc83:	83 c4 10             	add    esp,0x10
c000dc86:	83 ec 08             	sub    esp,0x8
c000dc89:	68 58 01 00 00       	push   0x158
c000dc8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc92:	e8 87 ef ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000dc97:	83 c4 10             	add    esp,0x10
c000dc9a:	83 c4 0c             	add    esp,0xc
c000dc9d:	c3                   	ret    

c000dc9e <Clock::timeInSecondsLocal()>:
c000dc9e:	53                   	push   ebx
c000dc9f:	83 ec 14             	sub    esp,0x14
c000dca2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dca6:	8b 10                	mov    edx,DWORD PTR [eax]
c000dca8:	50                   	push   eax
c000dca9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000dcac:	0f b6 0d dc 7d 02 c0 	movzx  ecx,BYTE PTR ds:0xc0027ddc
c000dcb3:	03 0d e0 7d 02 c0    	add    ecx,DWORD PTR ds:0xc0027de0
c000dcb9:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dcbf:	89 cb                	mov    ebx,ecx
c000dcc1:	c1 fb 1f             	sar    ebx,0x1f
c000dcc4:	01 c8                	add    eax,ecx
c000dcc6:	11 da                	adc    edx,ebx
c000dcc8:	83 c4 10             	add    esp,0x10
c000dccb:	31 c9                	xor    ecx,ecx
c000dccd:	80 3d dd 7d 02 c0 00 	cmp    BYTE PTR ds:0xc0027ddd,0x0
c000dcd4:	74 05                	je     c000dcdb <Clock::timeInSecondsLocal()+0x3d>
c000dcd6:	b9 08 07 00 00       	mov    ecx,0x708
c000dcdb:	31 db                	xor    ebx,ebx
c000dcdd:	01 c8                	add    eax,ecx
c000dcdf:	11 da                	adc    edx,ebx
c000dce1:	83 c4 08             	add    esp,0x8
c000dce4:	5b                   	pop    ebx
c000dce5:	c3                   	ret    

c000dce6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000dce6:	57                   	push   edi
c000dce7:	56                   	push   esi
c000dce8:	53                   	push   ebx
c000dce9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dced:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000dcf1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dcf3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000dcf7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000dcfa:	0f b6 05 dc 7d 02 c0 	movzx  eax,BYTE PTR ds:0xc0027ddc
c000dd01:	03 05 e0 7d 02 c0    	add    eax,DWORD PTR ds:0xc0027de0
c000dd07:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000dd0d:	99                   	cdq    
c000dd0e:	29 c6                	sub    esi,eax
c000dd10:	19 d7                	sbb    edi,edx
c000dd12:	89 f0                	mov    eax,esi
c000dd14:	89 fa                	mov    edx,edi
c000dd16:	31 f6                	xor    esi,esi
c000dd18:	80 3d dd 7d 02 c0 00 	cmp    BYTE PTR ds:0xc0027ddd,0x0
c000dd1f:	74 05                	je     c000dd26 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000dd21:	be 08 07 00 00       	mov    esi,0x708
c000dd26:	31 ff                	xor    edi,edi
c000dd28:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000dd2c:	29 f0                	sub    eax,esi
c000dd2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd32:	19 fa                	sbb    edx,edi
c000dd34:	89 d8                	mov    eax,ebx
c000dd36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd3a:	5b                   	pop    ebx
c000dd3b:	5e                   	pop    esi
c000dd3c:	5f                   	pop    edi
c000dd3d:	ff e0                	jmp    eax

c000dd3f <datetimeToSeconds(datetime_t)>:
c000dd3f:	55                   	push   ebp
c000dd40:	57                   	push   edi
c000dd41:	56                   	push   esi
c000dd42:	53                   	push   ebx
c000dd43:	83 ec 14             	sub    esp,0x14
c000dd46:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dd4a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000dd4e:	89 d3                	mov    ebx,edx
c000dd50:	0f b6 c6             	movzx  eax,dh
c000dd53:	c1 eb 10             	shr    ebx,0x10
c000dd56:	48                   	dec    eax
c000dd57:	66 81 eb 6c 07       	sub    bx,0x76c
c000dd5c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000dd60:	0f b6 f5             	movzx  esi,ch
c000dd63:	89 cf                	mov    edi,ecx
c000dd65:	6b f6 3c             	imul   esi,esi,0x3c
c000dd68:	c1 ef 10             	shr    edi,0x10
c000dd6b:	0f b6 c9             	movzx  ecx,cl
c000dd6e:	89 f8                	mov    eax,edi
c000dd70:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dd76:	0f b6 f8             	movzx  edi,al
c000dd79:	0f b6 d2             	movzx  edx,dl
c000dd7c:	01 fe                	add    esi,edi
c000dd7e:	01 f1                	add    ecx,esi
c000dd80:	0f b7 f3             	movzx  esi,bx
c000dd83:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000dd87:	c1 f9 1f             	sar    ecx,0x1f
c000dd8a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000dd8f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dd93:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000dd98:	8b 0c 8d 20 49 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb6e0]
c000dd9f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000dda3:	76 29                	jbe    c000ddce <datetimeToSeconds(datetime_t)+0x8f>
c000dda5:	f6 c3 03             	test   bl,0x3
c000dda8:	75 24                	jne    c000ddce <datetimeToSeconds(datetime_t)+0x8f>
c000ddaa:	31 d2                	xor    edx,edx
c000ddac:	bf 64 00 00 00       	mov    edi,0x64
c000ddb1:	89 d8                	mov    eax,ebx
c000ddb3:	66 f7 f7             	div    di
c000ddb6:	66 85 d2             	test   dx,dx
c000ddb9:	75 12                	jne    c000ddcd <datetimeToSeconds(datetime_t)+0x8e>
c000ddbb:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000ddc1:	bf 90 01 00 00       	mov    edi,0x190
c000ddc6:	99                   	cdq    
c000ddc7:	f7 ff                	idiv   edi
c000ddc9:	85 d2                	test   edx,edx
c000ddcb:	75 01                	jne    c000ddce <datetimeToSeconds(datetime_t)+0x8f>
c000ddcd:	41                   	inc    ecx
c000ddce:	66 83 fb 46          	cmp    bx,0x46
c000ddd2:	76 45                	jbe    c000de19 <datetimeToSeconds(datetime_t)+0xda>
c000ddd4:	bb 46 00 00 00       	mov    ebx,0x46
c000ddd9:	bf 64 00 00 00       	mov    edi,0x64
c000ddde:	bd 90 01 00 00       	mov    ebp,0x190
c000dde3:	b8 6d 01 00 00       	mov    eax,0x16d
c000dde8:	f6 c3 03             	test   bl,0x3
c000ddeb:	75 23                	jne    c000de10 <datetimeToSeconds(datetime_t)+0xd1>
c000dded:	89 d8                	mov    eax,ebx
c000ddef:	99                   	cdq    
c000ddf0:	f7 ff                	idiv   edi
c000ddf2:	b8 6e 01 00 00       	mov    eax,0x16e
c000ddf7:	85 d2                	test   edx,edx
c000ddf9:	75 15                	jne    c000de10 <datetimeToSeconds(datetime_t)+0xd1>
c000ddfb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000de01:	99                   	cdq    
c000de02:	f7 fd                	idiv   ebp
c000de04:	83 fa 01             	cmp    edx,0x1
c000de07:	19 c0                	sbb    eax,eax
c000de09:	f7 d0                	not    eax
c000de0b:	05 6e 01 00 00       	add    eax,0x16e
c000de10:	01 c1                	add    ecx,eax
c000de12:	43                   	inc    ebx
c000de13:	39 f3                	cmp    ebx,esi
c000de15:	7c cc                	jl     c000dde3 <datetimeToSeconds(datetime_t)+0xa4>
c000de17:	eb 35                	jmp    c000de4e <datetimeToSeconds(datetime_t)+0x10f>
c000de19:	74 33                	je     c000de4e <datetimeToSeconds(datetime_t)+0x10f>
c000de1b:	b8 45 00 00 00       	mov    eax,0x45
c000de20:	89 c2                	mov    edx,eax
c000de22:	83 e2 03             	and    edx,0x3
c000de25:	39 f0                	cmp    eax,esi
c000de27:	7e 0f                	jle    c000de38 <datetimeToSeconds(datetime_t)+0xf9>
c000de29:	83 fa 01             	cmp    edx,0x1
c000de2c:	19 d2                	sbb    edx,edx
c000de2e:	48                   	dec    eax
c000de2f:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000de36:	eb e8                	jmp    c000de20 <datetimeToSeconds(datetime_t)+0xe1>
c000de38:	b8 6d 01 00 00       	mov    eax,0x16d
c000de3d:	85 d2                	test   edx,edx
c000de3f:	75 0b                	jne    c000de4c <datetimeToSeconds(datetime_t)+0x10d>
c000de41:	66 83 fb 01          	cmp    bx,0x1
c000de45:	19 c0                	sbb    eax,eax
c000de47:	05 6e 01 00 00       	add    eax,0x16e
c000de4c:	29 c1                	sub    ecx,eax
c000de4e:	b8 80 51 01 00       	mov    eax,0x15180
c000de53:	f7 e9                	imul   ecx
c000de55:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000de59:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000de5d:	83 c4 14             	add    esp,0x14
c000de60:	5b                   	pop    ebx
c000de61:	5e                   	pop    esi
c000de62:	5f                   	pop    edi
c000de63:	5d                   	pop    ebp
c000de64:	c3                   	ret    
c000de65:	90                   	nop

c000de66 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000de66:	57                   	push   edi
c000de67:	56                   	push   esi
c000de68:	53                   	push   ebx
c000de69:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de6d:	8b 06                	mov    eax,DWORD PTR [esi]
c000de6f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000de72:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000de76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000de7a:	e8 c0 fe ff ff       	call   c000dd3f <datetimeToSeconds(datetime_t)>
c000de7f:	59                   	pop    ecx
c000de80:	0f b6 0d dc 7d 02 c0 	movzx  ecx,BYTE PTR ds:0xc0027ddc
c000de87:	5b                   	pop    ebx
c000de88:	03 0d e0 7d 02 c0    	add    ecx,DWORD PTR ds:0xc0027de0
c000de8e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000de94:	89 cb                	mov    ebx,ecx
c000de96:	c1 fb 1f             	sar    ebx,0x1f
c000de99:	29 c8                	sub    eax,ecx
c000de9b:	19 da                	sbb    edx,ebx
c000de9d:	31 c9                	xor    ecx,ecx
c000de9f:	80 3d dd 7d 02 c0 00 	cmp    BYTE PTR ds:0xc0027ddd,0x0
c000dea6:	74 05                	je     c000dead <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000dea8:	b9 08 07 00 00       	mov    ecx,0x708
c000dead:	31 db                	xor    ebx,ebx
c000deaf:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000deb3:	29 c8                	sub    eax,ecx
c000deb5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000deb9:	19 da                	sbb    edx,ebx
c000debb:	89 f8                	mov    eax,edi
c000debd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dec1:	5b                   	pop    ebx
c000dec2:	5e                   	pop    esi
c000dec3:	5f                   	pop    edi
c000dec4:	ff e0                	jmp    eax

c000dec6 <secondsToDatetime(unsigned long long)>:
c000dec6:	55                   	push   ebp
c000dec7:	57                   	push   edi
c000dec8:	56                   	push   esi
c000dec9:	53                   	push   ebx
c000deca:	83 ec 1c             	sub    esp,0x1c
c000decd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ded1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ded5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000ded9:	6a 00                	push   0x0
c000dedb:	68 80 51 01 00       	push   0x15180
c000dee0:	55                   	push   ebp
c000dee1:	57                   	push   edi
c000dee2:	e8 9d 46 01 00       	call   c0022584 <__udivdi3>
c000dee7:	83 c4 10             	add    esp,0x10
c000deea:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000def0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000def4:	6a 00                	push   0x0
c000def6:	68 80 51 01 00       	push   0x15180
c000defb:	55                   	push   ebp
c000defc:	57                   	push   edi
c000defd:	bf 10 0e 00 00       	mov    edi,0xe10
c000df02:	e8 7d 47 01 00       	call   c0022684 <__umoddi3>
c000df07:	83 c4 10             	add    esp,0x10
c000df0a:	99                   	cdq    
c000df0b:	f7 ff                	idiv   edi
c000df0d:	bf 3c 00 00 00       	mov    edi,0x3c
c000df12:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000df15:	89 d0                	mov    eax,edx
c000df17:	99                   	cdq    
c000df18:	f7 ff                	idiv   edi
c000df1a:	85 db                	test   ebx,ebx
c000df1c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000df1f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000df22:	79 11                	jns    c000df35 <secondsToDatetime(unsigned long long)+0x6f>
c000df24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000df28:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000df2e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000df33:	eb 07                	jmp    c000df3c <secondsToDatetime(unsigned long long)+0x76>
c000df35:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000df3a:	89 d8                	mov    eax,ebx
c000df3c:	bf b4 05 00 00       	mov    edi,0x5b4
c000df41:	99                   	cdq    
c000df42:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000df47:	f7 f9                	idiv   ecx
c000df49:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000df4e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df52:	31 d2                	xor    edx,edx
c000df54:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000df5c:	01 c3                	add    ebx,eax
c000df5e:	89 d8                	mov    eax,ebx
c000df60:	f7 f1                	div    ecx
c000df62:	31 d2                	xor    edx,edx
c000df64:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000df67:	89 d8                	mov    eax,ebx
c000df69:	f7 f7                	div    edi
c000df6b:	31 d2                	xor    edx,edx
c000df6d:	29 c1                	sub    ecx,eax
c000df6f:	89 d8                	mov    eax,ebx
c000df71:	f7 f5                	div    ebp
c000df73:	bd 6d 01 00 00       	mov    ebp,0x16d
c000df78:	29 c1                	sub    ecx,eax
c000df7a:	31 d2                	xor    edx,edx
c000df7c:	89 c8                	mov    eax,ecx
c000df7e:	f7 f5                	div    ebp
c000df80:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000df85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000df89:	31 d2                	xor    edx,edx
c000df8b:	89 c8                	mov    eax,ecx
c000df8d:	f7 f5                	div    ebp
c000df8f:	31 d2                	xor    edx,edx
c000df91:	01 c3                	add    ebx,eax
c000df93:	89 c8                	mov    eax,ecx
c000df95:	f7 f7                	div    edi
c000df97:	bf 99 00 00 00       	mov    edi,0x99
c000df9c:	29 c3                	sub    ebx,eax
c000df9e:	31 d2                	xor    edx,edx
c000dfa0:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000dfa8:	29 c3                	sub    ebx,eax
c000dfaa:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000dfad:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000dfb0:	bb 05 00 00 00       	mov    ebx,0x5
c000dfb5:	83 c1 02             	add    ecx,0x2
c000dfb8:	89 c8                	mov    eax,ecx
c000dfba:	f7 f7                	div    edi
c000dfbc:	31 d2                	xor    edx,edx
c000dfbe:	89 c7                	mov    edi,eax
c000dfc0:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000dfc6:	83 c0 02             	add    eax,0x2
c000dfc9:	f7 f3                	div    ebx
c000dfcb:	89 eb                	mov    ebx,ebp
c000dfcd:	29 c3                	sub    ebx,eax
c000dfcf:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000dfd5:	88 1e                	mov    BYTE PTR [esi],bl
c000dfd7:	19 c0                	sbb    eax,eax
c000dfd9:	31 d2                	xor    edx,edx
c000dfdb:	83 e0 0c             	and    eax,0xc
c000dfde:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000dfe2:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000dfea:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dfee:	83 f9 01             	cmp    ecx,0x1
c000dff1:	0f 96 c2             	setbe  dl
c000dff4:	41                   	inc    ecx
c000dff5:	01 d0                	add    eax,edx
c000dff7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000dffa:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000dffe:	83 c4 1c             	add    esp,0x1c
c000e001:	89 f0                	mov    eax,esi
c000e003:	5b                   	pop    ebx
c000e004:	5e                   	pop    esi
c000e005:	5f                   	pop    edi
c000e006:	5d                   	pop    ebp
c000e007:	c2 04 00             	ret    0x4

c000e00a <Clock::timeInDatetimeLocal()>:
c000e00a:	53                   	push   ebx
c000e00b:	83 ec 14             	sub    esp,0x14
c000e00e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e012:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e016:	e8 83 fc ff ff       	call   c000dc9e <Clock::timeInSecondsLocal()>
c000e01b:	83 c4 0c             	add    esp,0xc
c000e01e:	52                   	push   edx
c000e01f:	50                   	push   eax
c000e020:	53                   	push   ebx
c000e021:	e8 a0 fe ff ff       	call   c000dec6 <secondsToDatetime(unsigned long long)>
c000e026:	89 d8                	mov    eax,ebx
c000e028:	83 c4 14             	add    esp,0x14
c000e02b:	5b                   	pop    ebx
c000e02c:	c2 04 00             	ret    0x4
c000e02f:	90                   	nop

c000e030 <Device::hibernate()>:
c000e030:	c3                   	ret    
c000e031:	90                   	nop

c000e032 <Device::wake()>:
c000e032:	c3                   	ret    
c000e033:	90                   	nop

c000e034 <Device::detect()>:
c000e034:	c3                   	ret    
c000e035:	90                   	nop

c000e036 <Device::disableLegacy()>:
c000e036:	c3                   	ret    
c000e037:	90                   	nop

c000e038 <Device::powerSaving(PowerSavingLevel)>:
c000e038:	c3                   	ret    
c000e039:	90                   	nop

c000e03a <DriverlessDevice::close(int, int, void*)>:
c000e03a:	31 c0                	xor    eax,eax
c000e03c:	c3                   	ret    
c000e03d:	90                   	nop

c000e03e <DriverlessDevice::detect()>:
c000e03e:	c3                   	ret    
c000e03f:	90                   	nop

c000e040 <DriverlessDevice::open(int, int, void*)>:
c000e040:	83 ec 18             	sub    esp,0x18
c000e043:	68 50 49 02 c0       	push   0xc0024950
c000e048:	e8 62 68 00 00       	call   c00148af <Krnl::panic(char const*)>
c000e04d:	83 c8 ff             	or     eax,0xffffffff
c000e050:	83 c4 1c             	add    esp,0x1c
c000e053:	c3                   	ret    

c000e054 <Device::~Device()>:
c000e054:	ba b0 49 02 c0       	mov    edx,0xc00249b0
c000e059:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e05d:	89 10                	mov    DWORD PTR [eax],edx
c000e05f:	90                   	nop
c000e060:	c3                   	ret    
c000e061:	90                   	nop

c000e062 <Device::~Device()>:
c000e062:	83 ec 0c             	sub    esp,0xc
c000e065:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e069:	e8 e6 ff ff ff       	call   c000e054 <Device::~Device()>
c000e06e:	83 c4 04             	add    esp,0x4
c000e071:	83 ec 08             	sub    esp,0x8
c000e074:	68 58 01 00 00       	push   0x158
c000e079:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e07d:	e8 9c eb ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000e082:	83 c4 10             	add    esp,0x10
c000e085:	83 c4 0c             	add    esp,0xc
c000e088:	c3                   	ret    
c000e089:	90                   	nop

c000e08a <Device::findAndLoadDriver()>:
c000e08a:	c7 44 24 04 6e 49 02 c0 	mov    DWORD PTR [esp+0x4],0xc002496e
c000e092:	e9 68 ec ff ff       	jmp    c000ccff <Dbg::kprintf(char const*, ...)>
c000e097:	90                   	nop

c000e098 <Device::preOpenPCI(PCIDeviceInfo)>:
c000e098:	57                   	push   edi
c000e099:	b9 09 00 00 00       	mov    ecx,0x9
c000e09e:	56                   	push   esi
c000e09f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e0a3:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e0a7:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000e0b1:	81 c7 18 01 00 00    	add    edi,0x118
c000e0b7:	fc                   	cld    
c000e0b8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e0ba:	5e                   	pop    esi
c000e0bb:	5f                   	pop    edi
c000e0bc:	c3                   	ret    
c000e0bd:	90                   	nop

c000e0be <Device::preOpenACPI(void*, char*, char*)>:
c000e0be:	57                   	push   edi
c000e0bf:	b9 1e 00 00 00       	mov    ecx,0x1e
c000e0c4:	56                   	push   esi
c000e0c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e0c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e0cd:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000e0d7:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000e0dd:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000e0e3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e0e7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e0e9:	b9 0e 00 00 00       	mov    ecx,0xe
c000e0ee:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000e0f4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e0f8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e0fa:	5e                   	pop    esi
c000e0fb:	5f                   	pop    edi
c000e0fc:	c3                   	ret    
c000e0fd:	90                   	nop

c000e0fe <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e0fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e102:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e107:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e10e:	75 0b                	jne    c000e11b <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000e110:	8b 00                	mov    eax,DWORD PTR [eax]
c000e112:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e116:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e119:	eb 1e                	jmp    c000e139 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000e11b:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000e120:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e126:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e12c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e12e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e132:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e136:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000e139:	ff e0                	jmp    eax
c000e13b:	90                   	nop

c000e13c <Device::getParent()>:
c000e13c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e140:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000e146:	c3                   	ret    
c000e147:	90                   	nop

c000e148 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e148:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e14c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e151:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e158:	75 0b                	jne    c000e165 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e15a:	8b 00                	mov    eax,DWORD PTR [eax]
c000e15c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e160:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e163:	eb 1e                	jmp    c000e183 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000e165:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000e16a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e170:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e176:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e178:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e17c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e180:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000e183:	ff e0                	jmp    eax
c000e185:	90                   	nop

c000e186 <Device::addChild(Device*)>:
c000e186:	53                   	push   ebx
c000e187:	83 ec 08             	sub    esp,0x8
c000e18a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e18e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e192:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000e198:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000e19e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e1a0:	85 d2                	test   edx,edx
c000e1a2:	74 04                	je     c000e1a8 <Device::addChild(Device*)+0x22>
c000e1a4:	89 d3                	mov    ebx,edx
c000e1a6:	eb f6                	jmp    c000e19e <Device::addChild(Device*)+0x18>
c000e1a8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e1ab:	83 ec 0c             	sub    esp,0xc
c000e1ae:	6a 08                	push   0x8
c000e1b0:	e8 5a b8 ff ff       	call   c0009a0f <malloc>
c000e1b5:	89 03                	mov    DWORD PTR [ebx],eax
c000e1b7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e1bd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e1c4:	83 c4 18             	add    esp,0x18
c000e1c7:	5b                   	pop    ebx
c000e1c8:	c3                   	ret    
c000e1c9:	90                   	nop

c000e1ca <Device::removeAllChildren()>:
c000e1ca:	56                   	push   esi
c000e1cb:	53                   	push   ebx
c000e1cc:	52                   	push   edx
c000e1cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e1d1:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000e1d7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e1da:	74 17                	je     c000e1f3 <Device::removeAllChildren()+0x29>
c000e1dc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e1df:	85 c0                	test   eax,eax
c000e1e1:	74 0c                	je     c000e1ef <Device::removeAllChildren()+0x25>
c000e1e3:	83 ec 0c             	sub    esp,0xc
c000e1e6:	8b 10                	mov    edx,DWORD PTR [eax]
c000e1e8:	50                   	push   eax
c000e1e9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000e1ec:	83 c4 10             	add    esp,0x10
c000e1ef:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e1f1:	eb e4                	jmp    c000e1d7 <Device::removeAllChildren()+0xd>
c000e1f3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e1f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e1ff:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e205:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e20c:	58                   	pop    eax
c000e20d:	5b                   	pop    ebx
c000e20e:	5e                   	pop    esi
c000e20f:	c3                   	ret    

c000e210 <Device::hibernateAll()>:
c000e210:	53                   	push   ebx
c000e211:	83 ec 14             	sub    esp,0x14
c000e214:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e218:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e21a:	53                   	push   ebx
c000e21b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e21e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e224:	83 c4 10             	add    esp,0x10
c000e227:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e22a:	74 0f                	je     c000e23b <Device::hibernateAll()+0x2b>
c000e22c:	83 ec 0c             	sub    esp,0xc
c000e22f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e232:	e8 d9 ff ff ff       	call   c000e210 <Device::hibernateAll()>
c000e237:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e239:	eb e9                	jmp    c000e224 <Device::hibernateAll()+0x14>
c000e23b:	83 c4 08             	add    esp,0x8
c000e23e:	5b                   	pop    ebx
c000e23f:	c3                   	ret    

c000e240 <Device::wakeAll()>:
c000e240:	53                   	push   ebx
c000e241:	83 ec 14             	sub    esp,0x14
c000e244:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e248:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e24a:	53                   	push   ebx
c000e24b:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000e24e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e254:	83 c4 10             	add    esp,0x10
c000e257:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e25a:	74 0f                	je     c000e26b <Device::wakeAll()+0x2b>
c000e25c:	83 ec 0c             	sub    esp,0xc
c000e25f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e262:	e8 d9 ff ff ff       	call   c000e240 <Device::wakeAll()>
c000e267:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e269:	eb e9                	jmp    c000e254 <Device::wakeAll()+0x14>
c000e26b:	83 c4 08             	add    esp,0x8
c000e26e:	5b                   	pop    ebx
c000e26f:	c3                   	ret    

c000e270 <Device::detectAll()>:
c000e270:	53                   	push   ebx
c000e271:	83 ec 14             	sub    esp,0x14
c000e274:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e278:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e27a:	53                   	push   ebx
c000e27b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e27e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e284:	83 c4 10             	add    esp,0x10
c000e287:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e28a:	74 0f                	je     c000e29b <Device::detectAll()+0x2b>
c000e28c:	83 ec 0c             	sub    esp,0xc
c000e28f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e292:	e8 d9 ff ff ff       	call   c000e270 <Device::detectAll()>
c000e297:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e299:	eb e9                	jmp    c000e284 <Device::detectAll()+0x14>
c000e29b:	83 c4 08             	add    esp,0x8
c000e29e:	5b                   	pop    ebx
c000e29f:	c3                   	ret    

c000e2a0 <Device::disableLegacyAll()>:
c000e2a0:	53                   	push   ebx
c000e2a1:	83 ec 14             	sub    esp,0x14
c000e2a4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e2a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e2aa:	53                   	push   ebx
c000e2ab:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e2ae:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e2b4:	83 c4 10             	add    esp,0x10
c000e2b7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e2ba:	74 0f                	je     c000e2cb <Device::disableLegacyAll()+0x2b>
c000e2bc:	83 ec 0c             	sub    esp,0xc
c000e2bf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e2c2:	e8 d9 ff ff ff       	call   c000e2a0 <Device::disableLegacyAll()>
c000e2c7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e2c9:	eb e9                	jmp    c000e2b4 <Device::disableLegacyAll()+0x14>
c000e2cb:	83 c4 08             	add    esp,0x8
c000e2ce:	5b                   	pop    ebx
c000e2cf:	c3                   	ret    

c000e2d0 <Device::loadDriversForAll()>:
c000e2d0:	53                   	push   ebx
c000e2d1:	83 ec 08             	sub    esp,0x8
c000e2d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e2d8:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e2df:	75 0c                	jne    c000e2ed <Device::loadDriversForAll()+0x1d>
c000e2e1:	83 ec 0c             	sub    esp,0xc
c000e2e4:	53                   	push   ebx
c000e2e5:	e8 a0 fd ff ff       	call   c000e08a <Device::findAndLoadDriver()>
c000e2ea:	83 c4 10             	add    esp,0x10
c000e2ed:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e2f3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e2f6:	74 12                	je     c000e30a <Device::loadDriversForAll()+0x3a>
c000e2f8:	83 ec 0c             	sub    esp,0xc
c000e2fb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e2fe:	e8 cd ff ff ff       	call   c000e2d0 <Device::loadDriversForAll()>
c000e303:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e305:	83 c4 10             	add    esp,0x10
c000e308:	eb e9                	jmp    c000e2f3 <Device::loadDriversForAll()+0x23>
c000e30a:	83 c4 08             	add    esp,0x8
c000e30d:	5b                   	pop    ebx
c000e30e:	c3                   	ret    
c000e30f:	90                   	nop

c000e310 <Device::closeAll()>:
c000e310:	53                   	push   ebx
c000e311:	83 ec 08             	sub    esp,0x8
c000e314:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e318:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e31a:	6a 00                	push   0x0
c000e31c:	6a 00                	push   0x0
c000e31e:	6a 00                	push   0x0
c000e320:	53                   	push   ebx
c000e321:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e324:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e32a:	83 c4 10             	add    esp,0x10
c000e32d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e330:	74 0f                	je     c000e341 <Device::closeAll()+0x31>
c000e332:	83 ec 0c             	sub    esp,0xc
c000e335:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e338:	e8 d3 ff ff ff       	call   c000e310 <Device::closeAll()>
c000e33d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e33f:	eb e9                	jmp    c000e32a <Device::closeAll()+0x1a>
c000e341:	83 c4 08             	add    esp,0x8
c000e344:	5b                   	pop    ebx
c000e345:	c3                   	ret    

c000e346 <Device::powerSavingAll(PowerSavingLevel)>:
c000e346:	56                   	push   esi
c000e347:	53                   	push   ebx
c000e348:	83 ec 0c             	sub    esp,0xc
c000e34b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e34f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e353:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e355:	56                   	push   esi
c000e356:	53                   	push   ebx
c000e357:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e35a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e360:	83 c4 10             	add    esp,0x10
c000e363:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e366:	74 0f                	je     c000e377 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e368:	52                   	push   edx
c000e369:	52                   	push   edx
c000e36a:	56                   	push   esi
c000e36b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e36e:	e8 d3 ff ff ff       	call   c000e346 <Device::powerSavingAll(PowerSavingLevel)>
c000e373:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e375:	eb e9                	jmp    c000e360 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e377:	58                   	pop    eax
c000e378:	5b                   	pop    ebx
c000e379:	5e                   	pop    esi
c000e37a:	c3                   	ret    
c000e37b:	90                   	nop

c000e37c <Device::setName(char const*)>:
c000e37c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e384:	e9 b7 23 ff ff       	jmp    c0000740 <strcpy>
c000e389:	90                   	nop

c000e38a <Device::Device(char const*)>:
c000e38a:	83 ec 1c             	sub    esp,0x1c
c000e38d:	ba b0 49 02 c0       	mov    edx,0xc00249b0
c000e392:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e396:	89 10                	mov    DWORD PTR [eax],edx
c000e398:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e39c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e3a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3aa:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e3b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3b8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e3c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3c6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e3d0:	83 ec 08             	sub    esp,0x8
c000e3d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e3d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e3db:	e8 9c ff ff ff       	call   c000e37c <Device::setName(char const*)>
c000e3e0:	83 c4 10             	add    esp,0x10
c000e3e3:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e3eb:	83 ec 0c             	sub    esp,0xc
c000e3ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e3f2:	e8 18 b6 ff ff       	call   c0009a0f <malloc>
c000e3f7:	83 c4 10             	add    esp,0x10
c000e3fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e400:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e407:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e40b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e411:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e415:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e41b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e421:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e425:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e42b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e432:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e436:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e43d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e441:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e448:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e44c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e456:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e45a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e464:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e468:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e472:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e476:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e480:	90                   	nop
c000e481:	83 c4 1c             	add    esp,0x1c
c000e484:	c3                   	ret    
c000e485:	90                   	nop

c000e486 <Device::getName()>:
c000e486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e48a:	05 d0 00 00 00       	add    eax,0xd0
c000e48f:	c3                   	ret    

c000e490 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e490:	83 ec 0c             	sub    esp,0xc
c000e493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e497:	83 ec 08             	sub    esp,0x8
c000e49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e49e:	50                   	push   eax
c000e49f:	e8 e6 fe ff ff       	call   c000e38a <Device::Device(char const*)>
c000e4a4:	83 c4 10             	add    esp,0x10
c000e4a7:	ba dc 49 02 c0       	mov    edx,0xc00249dc
c000e4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4b0:	89 10                	mov    DWORD PTR [eax],edx
c000e4b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4b6:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e4c0:	90                   	nop
c000e4c1:	83 c4 0c             	add    esp,0xc
c000e4c4:	c3                   	ret    
c000e4c5:	90                   	nop

c000e4c6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e4c6:	57                   	push   edi
c000e4c7:	56                   	push   esi
c000e4c8:	53                   	push   ebx
c000e4c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e4cd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e4d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e4d5:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e4db:	75 0c                	jne    c000e4e9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e4dd:	52                   	push   edx
c000e4de:	52                   	push   edx
c000e4df:	53                   	push   ebx
c000e4e0:	56                   	push   esi
c000e4e1:	e8 50 45 01 00       	call   c0022a36 <LinkedList<Device>::addElement(Device*)>
c000e4e6:	83 c4 10             	add    esp,0x10
c000e4e9:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e4ef:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e4f2:	74 12                	je     c000e506 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e4f4:	50                   	push   eax
c000e4f5:	57                   	push   edi
c000e4f6:	56                   	push   esi
c000e4f7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e4fa:	e8 c7 ff ff ff       	call   c000e4c6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e4ff:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e501:	83 c4 10             	add    esp,0x10
c000e504:	eb e9                	jmp    c000e4ef <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e506:	5b                   	pop    ebx
c000e507:	5e                   	pop    esi
c000e508:	5f                   	pop    edi
c000e509:	c3                   	ret    

c000e50a <getDevicesOfType(DeviceType)>:
c000e50a:	53                   	push   ebx
c000e50b:	83 ec 14             	sub    esp,0x14
c000e50e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e512:	53                   	push   ebx
c000e513:	e8 fa 45 01 00       	call   c0022b12 <LinkedList<Device>::LinkedList()>
c000e518:	83 c4 0c             	add    esp,0xc
c000e51b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e51f:	53                   	push   ebx
c000e520:	ff 35 a8 7c 02 c0    	push   DWORD PTR ds:0xc0027ca8
c000e526:	e8 9b ff ff ff       	call   c000e4c6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e52b:	89 d8                	mov    eax,ebx
c000e52d:	83 c4 18             	add    esp,0x18
c000e530:	5b                   	pop    ebx
c000e531:	c2 04 00             	ret    0x4

c000e534 <HardDiskController::HardDiskController(char const*)>:
c000e534:	83 ec 0c             	sub    esp,0xc
c000e537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e53b:	83 ec 08             	sub    esp,0x8
c000e53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e542:	50                   	push   eax
c000e543:	e8 42 fe ff ff       	call   c000e38a <Device::Device(char const*)>
c000e548:	83 c4 10             	add    esp,0x10
c000e54b:	ba 08 4a 02 c0       	mov    edx,0xc0024a08
c000e550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e554:	89 10                	mov    DWORD PTR [eax],edx
c000e556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e55a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e564:	90                   	nop
c000e565:	83 c4 0c             	add    esp,0xc
c000e568:	c3                   	ret    
c000e569:	90                   	nop
c000e56a:	66 90                	xchg   ax,ax

c000e56c <HardDiskController::~HardDiskController()>:
c000e56c:	83 ec 0c             	sub    esp,0xc
c000e56f:	ba 08 4a 02 c0       	mov    edx,0xc0024a08
c000e574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e578:	89 10                	mov    DWORD PTR [eax],edx
c000e57a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e57e:	83 ec 0c             	sub    esp,0xc
c000e581:	50                   	push   eax
c000e582:	e8 cd fa ff ff       	call   c000e054 <Device::~Device()>
c000e587:	83 c4 10             	add    esp,0x10
c000e58a:	90                   	nop
c000e58b:	83 c4 0c             	add    esp,0xc
c000e58e:	c3                   	ret    
c000e58f:	90                   	nop

c000e590 <HardDiskController::~HardDiskController()>:
c000e590:	83 ec 0c             	sub    esp,0xc
c000e593:	83 ec 0c             	sub    esp,0xc
c000e596:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59a:	e8 cd ff ff ff       	call   c000e56c <HardDiskController::~HardDiskController()>
c000e59f:	83 c4 10             	add    esp,0x10
c000e5a2:	83 ec 08             	sub    esp,0x8
c000e5a5:	68 58 01 00 00       	push   0x158
c000e5aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5ae:	e8 6b e6 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000e5b3:	83 c4 10             	add    esp,0x10
c000e5b6:	83 c4 0c             	add    esp,0xc
c000e5b9:	c3                   	ret    

c000e5ba <PhysicalDisk::eject()>:
c000e5ba:	83 c8 ff             	or     eax,0xffffffff
c000e5bd:	c3                   	ret    

c000e5be <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e5be:	83 ec 0c             	sub    esp,0xc
c000e5c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5c5:	83 ec 08             	sub    esp,0x8
c000e5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5cc:	50                   	push   eax
c000e5cd:	e8 b8 fd ff ff       	call   c000e38a <Device::Device(char const*)>
c000e5d2:	83 c4 10             	add    esp,0x10
c000e5d5:	ba 34 4a 02 c0       	mov    edx,0xc0024a34
c000e5da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5de:	89 10                	mov    DWORD PTR [eax],edx
c000e5e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5e4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e5eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5ef:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e5f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5fa:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e604:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e608:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e60c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e616:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e620:	90                   	nop
c000e621:	83 c4 0c             	add    esp,0xc
c000e624:	c3                   	ret    
c000e625:	90                   	nop

c000e626 <PhysicalDisk::startCache()>:
c000e626:	56                   	push   esi
c000e627:	53                   	push   ebx
c000e628:	83 ec 10             	sub    esp,0x10
c000e62b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e62f:	6a 44                	push   0x44
c000e631:	e8 d9 b3 ff ff       	call   c0009a0f <malloc>
c000e636:	89 c6                	mov    esi,eax
c000e638:	58                   	pop    eax
c000e639:	5a                   	pop    edx
c000e63a:	53                   	push   ebx
c000e63b:	56                   	push   esi
c000e63c:	e8 33 26 00 00       	call   c0010c74 <VCache::VCache(PhysicalDisk*)>
c000e641:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e647:	83 c4 14             	add    esp,0x14
c000e64a:	5b                   	pop    ebx
c000e64b:	5e                   	pop    esi
c000e64c:	c3                   	ret    
c000e64d:	90                   	nop

c000e64e <PhysicalDisk::~PhysicalDisk()>:
c000e64e:	83 ec 0c             	sub    esp,0xc
c000e651:	ba 34 4a 02 c0       	mov    edx,0xc0024a34
c000e656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e65a:	89 10                	mov    DWORD PTR [eax],edx
c000e65c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e660:	83 ec 0c             	sub    esp,0xc
c000e663:	50                   	push   eax
c000e664:	e8 eb f9 ff ff       	call   c000e054 <Device::~Device()>
c000e669:	83 c4 10             	add    esp,0x10
c000e66c:	90                   	nop
c000e66d:	83 c4 0c             	add    esp,0xc
c000e670:	c3                   	ret    
c000e671:	90                   	nop

c000e672 <PhysicalDisk::~PhysicalDisk()>:
c000e672:	83 ec 0c             	sub    esp,0xc
c000e675:	83 ec 0c             	sub    esp,0xc
c000e678:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e67c:	e8 cd ff ff ff       	call   c000e64e <PhysicalDisk::~PhysicalDisk()>
c000e681:	83 c4 10             	add    esp,0x10
c000e684:	83 ec 08             	sub    esp,0x8
c000e687:	68 6c 01 00 00       	push   0x16c
c000e68c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e690:	e8 89 e5 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000e695:	83 c4 10             	add    esp,0x10
c000e698:	83 c4 0c             	add    esp,0xc
c000e69b:	c3                   	ret    

c000e69c <FPU::FPU(char const*)>:
c000e69c:	83 ec 0c             	sub    esp,0xc
c000e69f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6a3:	83 ec 08             	sub    esp,0x8
c000e6a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6aa:	50                   	push   eax
c000e6ab:	e8 da fc ff ff       	call   c000e38a <Device::Device(char const*)>
c000e6b0:	83 c4 10             	add    esp,0x10
c000e6b3:	ba 78 4a 02 c0       	mov    edx,0xc0024a78
c000e6b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6bc:	89 10                	mov    DWORD PTR [eax],edx
c000e6be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6c2:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e6cc:	90                   	nop
c000e6cd:	83 c4 0c             	add    esp,0xc
c000e6d0:	c3                   	ret    
c000e6d1:	90                   	nop
c000e6d2:	66 90                	xchg   ax,ax

c000e6d4 <FPU::~FPU()>:
c000e6d4:	83 ec 0c             	sub    esp,0xc
c000e6d7:	ba 78 4a 02 c0       	mov    edx,0xc0024a78
c000e6dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6e0:	89 10                	mov    DWORD PTR [eax],edx
c000e6e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6e6:	83 ec 0c             	sub    esp,0xc
c000e6e9:	50                   	push   eax
c000e6ea:	e8 65 f9 ff ff       	call   c000e054 <Device::~Device()>
c000e6ef:	83 c4 10             	add    esp,0x10
c000e6f2:	90                   	nop
c000e6f3:	83 c4 0c             	add    esp,0xc
c000e6f6:	c3                   	ret    
c000e6f7:	90                   	nop

c000e6f8 <FPU::~FPU()>:
c000e6f8:	83 ec 0c             	sub    esp,0xc
c000e6fb:	83 ec 0c             	sub    esp,0xc
c000e6fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e702:	e8 cd ff ff ff       	call   c000e6d4 <FPU::~FPU()>
c000e707:	83 c4 10             	add    esp,0x10
c000e70a:	83 ec 08             	sub    esp,0x8
c000e70d:	68 58 01 00 00       	push   0x158
c000e712:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e716:	e8 03 e5 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000e71b:	83 c4 10             	add    esp,0x10
c000e71e:	83 c4 0c             	add    esp,0xc
c000e721:	c3                   	ret    

c000e722 <setupFPU()>:
c000e722:	53                   	push   ebx
c000e723:	83 ec 08             	sub    esp,0x8
c000e726:	8b 15 a8 7c 02 c0    	mov    edx,DWORD PTR ds:0xc0027ca8
c000e72c:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c000e733:	74 1b                	je     c000e750 <setupFPU()+0x2e>
c000e735:	83 ec 0c             	sub    esp,0xc
c000e738:	68 58 01 00 00       	push   0x158
c000e73d:	e8 cd b2 ff ff       	call   c0009a0f <malloc>
c000e742:	89 c3                	mov    ebx,eax
c000e744:	89 04 24             	mov    DWORD PTR [esp],eax
c000e747:	e8 d0 29 01 00       	call   c002111c <AVX::AVX()>
c000e74c:	eb 62                	jmp    c000e7b0 <setupFPU()+0x8e>
c000e74e:	66 90                	xchg   ax,ax
c000e750:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000e756:	84 c0                	test   al,al
c000e758:	79 1a                	jns    c000e774 <setupFPU()+0x52>
c000e75a:	83 ec 0c             	sub    esp,0xc
c000e75d:	68 58 01 00 00       	push   0x158
c000e762:	e8 a8 b2 ff ff       	call   c0009a0f <malloc>
c000e767:	89 c3                	mov    ebx,eax
c000e769:	89 04 24             	mov    DWORD PTR [esp],eax
c000e76c:	e8 db 2a 01 00       	call   c002124c <SSE::SSE()>
c000e771:	eb 3d                	jmp    c000e7b0 <setupFPU()+0x8e>
c000e773:	90                   	nop
c000e774:	a8 20                	test   al,0x20
c000e776:	74 1c                	je     c000e794 <setupFPU()+0x72>
c000e778:	83 ec 0c             	sub    esp,0xc
c000e77b:	68 58 01 00 00       	push   0x158
c000e780:	e8 8a b2 ff ff       	call   c0009a0f <malloc>
c000e785:	89 c3                	mov    ebx,eax
c000e787:	89 04 24             	mov    DWORD PTR [esp],eax
c000e78a:	e8 21 2a 01 00       	call   c00211b0 <MMX::MMX()>
c000e78f:	eb 1f                	jmp    c000e7b0 <setupFPU()+0x8e>
c000e791:	8d 76 00             	lea    esi,[esi+0x0]
c000e794:	a8 10                	test   al,0x10
c000e796:	74 20                	je     c000e7b8 <setupFPU()+0x96>
c000e798:	83 ec 0c             	sub    esp,0xc
c000e79b:	68 58 01 00 00       	push   0x158
c000e7a0:	e8 6a b2 ff ff       	call   c0009a0f <malloc>
c000e7a5:	89 c3                	mov    ebx,eax
c000e7a7:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7aa:	e8 31 2b 01 00       	call   c00212e0 <x87::x87()>
c000e7af:	90                   	nop
c000e7b0:	83 c4 10             	add    esp,0x10
c000e7b3:	eb 27                	jmp    c000e7dc <setupFPU()+0xba>
c000e7b5:	8d 76 00             	lea    esi,[esi+0x0]
c000e7b8:	83 e0 ef             	and    eax,0xffffffef
c000e7bb:	83 ec 0c             	sub    esp,0xc
c000e7be:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000e7c4:	68 64 4a 02 c0       	push   0xc0024a64
c000e7c9:	e8 31 e5 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000e7ce:	0f 20 c0             	mov    eax,cr0
c000e7d1:	83 c8 04             	or     eax,0x4
c000e7d4:	0f 22 c0             	mov    cr0,eax
c000e7d7:	31 db                	xor    ebx,ebx
c000e7d9:	83 c4 10             	add    esp,0x10
c000e7dc:	89 d8                	mov    eax,ebx
c000e7de:	83 c4 08             	add    esp,0x8
c000e7e1:	5b                   	pop    ebx
c000e7e2:	c3                   	ret    
c000e7e3:	90                   	nop

c000e7e4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e7e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e7e8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e7ec:	c1 e0 04             	shl    eax,0x4
c000e7ef:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000e7f3:	8d 50 10             	lea    edx,[eax+0x10]
c000e7f6:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000e7fc:	74 08                	je     c000e806 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000e7fe:	83 c0 04             	add    eax,0x4
c000e801:	39 d0                	cmp    eax,edx
c000e803:	75 f1                	jne    c000e7f6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000e805:	c3                   	ret    
c000e806:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e810:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e81a:	eb e2                	jmp    c000e7fe <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000e81c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e81c:	57                   	push   edi
c000e81d:	31 c0                	xor    eax,eax
c000e81f:	56                   	push   esi
c000e820:	53                   	push   ebx
c000e821:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e825:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e829:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e82d:	89 da                	mov    edx,ebx
c000e82f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e833:	c1 e2 04             	shl    edx,0x4
c000e836:	01 ca                	add    edx,ecx
c000e838:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000e840:	74 16                	je     c000e858 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000e842:	40                   	inc    eax
c000e843:	83 f8 04             	cmp    eax,0x4
c000e846:	75 f0                	jne    c000e838 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000e848:	c7 44 24 10 a8 4a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024aa8
c000e850:	5b                   	pop    ebx
c000e851:	5e                   	pop    esi
c000e852:	5f                   	pop    edi
c000e853:	e9 57 60 00 00       	jmp    c00148af <Krnl::panic(char const*)>
c000e858:	8d 04 98             	lea    eax,[eax+ebx*4]
c000e85b:	8d 04 81             	lea    eax,[ecx+eax*4]
c000e85e:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000e864:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000e86a:	5b                   	pop    ebx
c000e86b:	5e                   	pop    esi
c000e86c:	5f                   	pop    edi
c000e86d:	c3                   	ret    

c000e86e <doubleFault(regs*, void*)>:
c000e86e:	55                   	push   ebp
c000e86f:	89 e5                	mov    ebp,esp
c000e871:	83 ec 08             	sub    esp,0x8
c000e874:	83 ec 0c             	sub    esp,0xc
c000e877:	68 b5 4a 02 c0       	push   0xc0024ab5
c000e87c:	e8 2e 60 00 00       	call   c00148af <Krnl::panic(char const*)>
c000e881:	83 c4 10             	add    esp,0x10
c000e884:	90                   	nop
c000e885:	c9                   	leave  
c000e886:	c3                   	ret    
c000e887:	90                   	nop

c000e888 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e888:	56                   	push   esi
c000e889:	53                   	push   ebx
c000e88a:	50                   	push   eax
c000e88b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e88f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e893:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e898:	75 35                	jne    c000e8cf <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000e89a:	8d 43 20             	lea    eax,[ebx+0x20]
c000e89d:	31 d2                	xor    edx,edx
c000e89f:	89 c1                	mov    ecx,eax
c000e8a1:	c1 e1 04             	shl    ecx,0x4
c000e8a4:	01 f1                	add    ecx,esi
c000e8a6:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000e8ae:	74 3e                	je     c000e8ee <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000e8b0:	42                   	inc    edx
c000e8b1:	83 fa 04             	cmp    edx,0x4
c000e8b4:	75 f0                	jne    c000e8a6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000e8b6:	83 ec 0c             	sub    esp,0xc
c000e8b9:	68 cf 4a 02 c0       	push   0xc0024acf
c000e8be:	e8 ec 5f 00 00       	call   c00148af <Krnl::panic(char const*)>
c000e8c3:	83 c4 10             	add    esp,0x10
c000e8c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e8cb:	5a                   	pop    edx
c000e8cc:	5b                   	pop    ebx
c000e8cd:	5e                   	pop    esi
c000e8ce:	c3                   	ret    
c000e8cf:	83 ec 0c             	sub    esp,0xc
c000e8d2:	56                   	push   esi
c000e8d3:	e8 ae fb ff ff       	call   c000e486 <Device::getName()>
c000e8d8:	83 c4 10             	add    esp,0x10
c000e8db:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e8de:	75 ba                	jne    c000e89a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e8e0:	83 fb 0f             	cmp    ebx,0xf
c000e8e3:	7f 29                	jg     c000e90e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000e8e5:	0f b6 9b a0 73 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd8c60]
c000e8ec:	eb ac                	jmp    c000e89a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e8ee:	8d 04 82             	lea    eax,[edx+eax*4]
c000e8f1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e8f5:	8d 04 86             	lea    eax,[esi+eax*4]
c000e8f8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000e8fe:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e902:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000e908:	89 d8                	mov    eax,ebx
c000e90a:	5a                   	pop    edx
c000e90b:	5b                   	pop    ebx
c000e90c:	5e                   	pop    esi
c000e90d:	c3                   	ret    
c000e90e:	83 ec 0c             	sub    esp,0xc
c000e911:	68 c2 4a 02 c0       	push   0xc0024ac2
c000e916:	e8 94 5f 00 00       	call   c00148af <Krnl::panic(char const*)>
c000e91b:	83 c4 10             	add    esp,0x10
c000e91e:	e9 77 ff ff ff       	jmp    c000e89a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e923:	90                   	nop

c000e924 <InterruptController::clearAllHandlers(int, bool)>:
c000e924:	56                   	push   esi
c000e925:	53                   	push   ebx
c000e926:	52                   	push   edx
c000e927:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e92b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e92f:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e934:	75 61                	jne    c000e997 <InterruptController::clearAllHandlers(int, bool)+0x73>
c000e936:	8d 46 20             	lea    eax,[esi+0x20]
c000e939:	c1 e6 04             	shl    esi,0x4
c000e93c:	c1 e0 04             	shl    eax,0x4
c000e93f:	01 de                	add    esi,ebx
c000e941:	01 d8                	add    eax,ebx
c000e943:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000e94d:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000e957:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000e961:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e96b:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000e975:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000e97f:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000e989:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000e993:	58                   	pop    eax
c000e994:	5b                   	pop    ebx
c000e995:	5e                   	pop    esi
c000e996:	c3                   	ret    
c000e997:	83 ec 0c             	sub    esp,0xc
c000e99a:	53                   	push   ebx
c000e99b:	e8 e6 fa ff ff       	call   c000e486 <Device::getName()>
c000e9a0:	83 c4 10             	add    esp,0x10
c000e9a3:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e9a6:	75 8e                	jne    c000e936 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e9a8:	83 fe 0f             	cmp    esi,0xf
c000e9ab:	7f 09                	jg     c000e9b6 <InterruptController::clearAllHandlers(int, bool)+0x92>
c000e9ad:	0f b6 b6 a0 73 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd8c60]
c000e9b4:	eb 80                	jmp    c000e936 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e9b6:	83 ec 0c             	sub    esp,0xc
c000e9b9:	68 dc 4a 02 c0       	push   0xc0024adc
c000e9be:	e8 ec 5e 00 00       	call   c00148af <Krnl::panic(char const*)>
c000e9c3:	83 c4 10             	add    esp,0x10
c000e9c6:	e9 6b ff ff ff       	jmp    c000e936 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e9cb:	90                   	nop

c000e9cc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e9cc:	56                   	push   esi
c000e9cd:	53                   	push   ebx
c000e9ce:	52                   	push   edx
c000e9cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e9d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e9d7:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e9dc:	75 3a                	jne    c000ea18 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000e9de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9e2:	8d 50 20             	lea    edx,[eax+0x20]
c000e9e5:	c1 e2 04             	shl    edx,0x4
c000e9e8:	8d 04 16             	lea    eax,[esi+edx*1]
c000e9eb:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000e9ef:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000e9f5:	74 0b                	je     c000ea02 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000e9f7:	83 c0 04             	add    eax,0x4
c000e9fa:	39 d0                	cmp    eax,edx
c000e9fc:	75 f1                	jne    c000e9ef <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000e9fe:	58                   	pop    eax
c000e9ff:	5b                   	pop    ebx
c000ea00:	5e                   	pop    esi
c000ea01:	c3                   	ret    
c000ea02:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ea0c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000ea16:	eb df                	jmp    c000e9f7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000ea18:	83 ec 0c             	sub    esp,0xc
c000ea1b:	56                   	push   esi
c000ea1c:	e8 65 fa ff ff       	call   c000e486 <Device::getName()>
c000ea21:	83 c4 10             	add    esp,0x10
c000ea24:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ea27:	75 b5                	jne    c000e9de <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ea29:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000ea2e:	7f 11                	jg     c000ea41 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000ea30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea34:	0f b6 80 a0 73 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd8c60]
c000ea3b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ea3f:	eb 9d                	jmp    c000e9de <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ea41:	83 ec 0c             	sub    esp,0xc
c000ea44:	68 e9 4a 02 c0       	push   0xc0024ae9
c000ea49:	e8 61 5e 00 00       	call   c00148af <Krnl::panic(char const*)>
c000ea4e:	83 c4 10             	add    esp,0x10
c000ea51:	eb 8b                	jmp    c000e9de <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000ea53 <nmiHandler(regs*, void*)>:
c000ea53:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000ea58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ea5c:	e9 77 a7 ff ff       	jmp    c00091d8 <Computer::handleNMI()>

c000ea61 <int_handler>:
c000ea61:	55                   	push   ebp
c000ea62:	57                   	push   edi
c000ea63:	56                   	push   esi
c000ea64:	53                   	push   ebx
c000ea65:	83 ec 0c             	sub    esp,0xc
c000ea68:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ea6c:	80 3d 84 87 02 c0 00 	cmp    BYTE PTR ds:0xc0028784,0x0
c000ea73:	74 0b                	je     c000ea80 <int_handler+0x1f>
c000ea75:	fa                   	cli    
c000ea76:	f4                   	hlt    
c000ea77:	80 3d 84 87 02 c0 00 	cmp    BYTE PTR ds:0xc0028784,0x0
c000ea7e:	75 f5                	jne    c000ea75 <int_handler+0x14>
c000ea80:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000ea85:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000ea88:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ea8e:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000ea94:	8d 43 e0             	lea    eax,[ebx-0x20]
c000ea97:	83 f8 17             	cmp    eax,0x17
c000ea9a:	77 13                	ja     c000eaaf <int_handler+0x4e>
c000ea9c:	83 ec 08             	sub    esp,0x8
c000ea9f:	8b 17                	mov    edx,DWORD PTR [edi]
c000eaa1:	8d 43 e0             	lea    eax,[ebx-0x20]
c000eaa4:	0f b6 c0             	movzx  eax,al
c000eaa7:	50                   	push   eax
c000eaa8:	57                   	push   edi
c000eaa9:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000eaac:	83 c4 10             	add    esp,0x10
c000eaaf:	83 c3 15             	add    ebx,0x15
c000eab2:	c1 e3 04             	shl    ebx,0x4
c000eab5:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000eab9:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000eac0:	31 db                	xor    ebx,ebx
c000eac2:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000eac6:	85 c0                	test   eax,eax
c000eac8:	74 13                	je     c000eadd <int_handler+0x7c>
c000eaca:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000eacd:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000ead1:	74 1c                	je     c000eaef <int_handler+0x8e>
c000ead3:	83 ec 08             	sub    esp,0x8
c000ead6:	52                   	push   edx
c000ead7:	56                   	push   esi
c000ead8:	ff d0                	call   eax
c000eada:	83 c4 10             	add    esp,0x10
c000eadd:	43                   	inc    ebx
c000eade:	83 fb 04             	cmp    ebx,0x4
c000eae1:	75 df                	jne    c000eac2 <int_handler+0x61>
c000eae3:	83 c4 0c             	add    esp,0xc
c000eae6:	31 c0                	xor    eax,eax
c000eae8:	5b                   	pop    ebx
c000eae9:	31 d2                	xor    edx,edx
c000eaeb:	5e                   	pop    esi
c000eaec:	5f                   	pop    edi
c000eaed:	5d                   	pop    ebp
c000eaee:	c3                   	ret    
c000eaef:	83 ec 08             	sub    esp,0x8
c000eaf2:	52                   	push   edx
c000eaf3:	56                   	push   esi
c000eaf4:	ff d0                	call   eax
c000eaf6:	83 c4 10             	add    esp,0x10
c000eaf9:	83 c4 0c             	add    esp,0xc
c000eafc:	5b                   	pop    ebx
c000eafd:	5e                   	pop    esi
c000eafe:	5f                   	pop    edi
c000eaff:	5d                   	pop    ebp
c000eb00:	c3                   	ret    
c000eb01:	90                   	nop

c000eb02 <InterruptController::InterruptController(char const*)>:
c000eb02:	83 ec 1c             	sub    esp,0x1c
c000eb05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eb09:	83 ec 08             	sub    esp,0x8
c000eb0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eb10:	50                   	push   eax
c000eb11:	e8 74 f8 ff ff       	call   c000e38a <Device::Device(char const*)>
c000eb16:	83 c4 10             	add    esp,0x10
c000eb19:	ba a0 4d 02 c0       	mov    edx,0xc0024da0
c000eb1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eb22:	89 10                	mov    DWORD PTR [eax],edx
c000eb24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eb28:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000eb32:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000eb3a:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000eb42:	7f 5e                	jg     c000eba2 <InterruptController::InterruptController(char const*)+0xa0>
c000eb44:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000eb4c:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000eb51:	7f 49                	jg     c000eb9c <InterruptController::InterruptController(char const*)+0x9a>
c000eb53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eb57:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb5b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000eb62:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb66:	01 ca                	add    edx,ecx
c000eb68:	83 c2 54             	add    edx,0x54
c000eb6b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000eb73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eb77:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb7b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000eb82:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb86:	01 ca                	add    edx,ecx
c000eb88:	81 c2 54 04 00 00    	add    edx,0x454
c000eb8e:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000eb96:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000eb9a:	eb b0                	jmp    c000eb4c <InterruptController::InterruptController(char const*)+0x4a>
c000eb9c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000eba0:	eb 98                	jmp    c000eb3a <InterruptController::InterruptController(char const*)+0x38>
c000eba2:	90                   	nop
c000eba3:	83 c4 1c             	add    esp,0x1c
c000eba6:	c3                   	ret    
c000eba7:	90                   	nop

c000eba8 <InterruptController::~InterruptController()>:
c000eba8:	83 ec 0c             	sub    esp,0xc
c000ebab:	ba a0 4d 02 c0       	mov    edx,0xc0024da0
c000ebb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebb4:	89 10                	mov    DWORD PTR [eax],edx
c000ebb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebba:	83 ec 0c             	sub    esp,0xc
c000ebbd:	50                   	push   eax
c000ebbe:	e8 91 f4 ff ff       	call   c000e054 <Device::~Device()>
c000ebc3:	83 c4 10             	add    esp,0x10
c000ebc6:	90                   	nop
c000ebc7:	83 c4 0c             	add    esp,0xc
c000ebca:	c3                   	ret    
c000ebcb:	90                   	nop

c000ebcc <InterruptController::~InterruptController()>:
c000ebcc:	83 ec 0c             	sub    esp,0xc
c000ebcf:	83 ec 0c             	sub    esp,0xc
c000ebd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebd6:	e8 cd ff ff ff       	call   c000eba8 <InterruptController::~InterruptController()>
c000ebdb:	83 c4 10             	add    esp,0x10
c000ebde:	83 ec 08             	sub    esp,0x8
c000ebe1:	68 58 21 00 00       	push   0x2158
c000ebe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebea:	e8 2f e0 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	83 c4 0c             	add    esp,0xc
c000ebf5:	c3                   	ret    

c000ebf6 <displayDebugInfo(regs*)>:
c000ebf6:	55                   	push   ebp
c000ebf7:	57                   	push   edi
c000ebf8:	56                   	push   esi
c000ebf9:	53                   	push   ebx
c000ebfa:	83 ec 24             	sub    esp,0x24
c000ebfd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ec01:	0f 20 c2             	mov    edx,cr0
c000ec04:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ec08:	0f 20 d7             	mov    edi,cr2
c000ec0b:	0f 20 de             	mov    esi,cr3
c000ec0e:	0f 20 e5             	mov    ebp,cr4
c000ec11:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000ec14:	68 f6 4a 02 c0       	push   0xc0024af6
c000ec19:	e8 e1 e0 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ec1e:	59                   	pop    ecx
c000ec1f:	58                   	pop    eax
c000ec20:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000ec23:	68 01 4b 02 c0       	push   0xc0024b01
c000ec28:	e8 d2 e0 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ec2d:	58                   	pop    eax
c000ec2e:	5a                   	pop    edx
c000ec2f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000ec32:	68 0c 4b 02 c0       	push   0xc0024b0c
c000ec37:	e8 c3 e0 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ec3c:	59                   	pop    ecx
c000ec3d:	58                   	pop    eax
c000ec3e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000ec41:	68 17 4b 02 c0       	push   0xc0024b17
c000ec46:	e8 b4 e0 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ec4b:	58                   	pop    eax
c000ec4c:	5a                   	pop    edx
c000ec4d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ec50:	68 22 4b 02 c0       	push   0xc0024b22
c000ec55:	e8 a5 e0 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ec5a:	59                   	pop    ecx
c000ec5b:	58                   	pop    eax
c000ec5c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ec5f:	68 2d 4b 02 c0       	push   0xc0024b2d
c000ec64:	e8 96 e0 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ec69:	58                   	pop    eax
c000ec6a:	5a                   	pop    edx
c000ec6b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ec6e:	68 38 4b 02 c0       	push   0xc0024b38
c000ec73:	e8 87 e0 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ec78:	59                   	pop    ecx
c000ec79:	58                   	pop    eax
c000ec7a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ec7d:	68 43 4b 02 c0       	push   0xc0024b43
c000ec82:	e8 78 e0 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ec87:	58                   	pop    eax
c000ec88:	5a                   	pop    edx
c000ec89:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ec8c:	68 4e 4b 02 c0       	push   0xc0024b4e
c000ec91:	e8 69 e0 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ec96:	59                   	pop    ecx
c000ec97:	58                   	pop    eax
c000ec98:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ec9b:	68 5d 4b 02 c0       	push   0xc0024b5d
c000eca0:	e8 5a e0 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000eca5:	58                   	pop    eax
c000eca6:	5a                   	pop    edx
c000eca7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ecaa:	68 68 4b 02 c0       	push   0xc0024b68
c000ecaf:	e8 4b e0 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ecb4:	59                   	pop    ecx
c000ecb5:	58                   	pop    eax
c000ecb6:	57                   	push   edi
c000ecb7:	68 73 4b 02 c0       	push   0xc0024b73
c000ecbc:	e8 3e e0 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ecc1:	58                   	pop    eax
c000ecc2:	5a                   	pop    edx
c000ecc3:	56                   	push   esi
c000ecc4:	68 7e 4b 02 c0       	push   0xc0024b7e
c000ecc9:	e8 31 e0 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ecce:	59                   	pop    ecx
c000eccf:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000ecd4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecda:	e8 2a be ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c000ecdf:	58                   	pop    eax
c000ece0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000ece3:	5a                   	pop    edx
c000ece4:	c1 e0 05             	shl    eax,0x5
c000ece7:	05 00 71 02 c0       	add    eax,0xc0027100
c000ecec:	50                   	push   eax
c000eced:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000ecf2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecf8:	e8 19 c3 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ecfd:	59                   	pop    ecx
c000ecfe:	58                   	pop    eax
c000ecff:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000ed04:	68 89 4b 02 c0       	push   0xc0024b89
c000ed09:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed0f:	e8 02 c3 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ed14:	58                   	pop    eax
c000ed15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ed1a:	5a                   	pop    edx
c000ed1b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ed1e:	83 c0 0c             	add    eax,0xc
c000ed21:	50                   	push   eax
c000ed22:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000ed27:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed2d:	e8 e4 c2 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ed32:	59                   	pop    ecx
c000ed33:	58                   	pop    eax
c000ed34:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000ed39:	68 92 4b 02 c0       	push   0xc0024b92
c000ed3e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed44:	e8 cd c2 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ed49:	58                   	pop    eax
c000ed4a:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000ed4f:	5a                   	pop    edx
c000ed50:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ed53:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed59:	e8 72 c2 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ed5e:	59                   	pop    ecx
c000ed5f:	58                   	pop    eax
c000ed60:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000ed65:	68 9a 4b 02 c0       	push   0xc0024b9a
c000ed6a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed70:	e8 a1 c2 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ed75:	58                   	pop    eax
c000ed76:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000ed7b:	5a                   	pop    edx
c000ed7c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ed7f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed85:	e8 46 c2 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ed8a:	59                   	pop    ecx
c000ed8b:	58                   	pop    eax
c000ed8c:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000ed91:	68 a2 4b 02 c0       	push   0xc0024ba2
c000ed96:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed9c:	e8 75 c2 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000eda1:	58                   	pop    eax
c000eda2:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000eda7:	5a                   	pop    edx
c000eda8:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000edab:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edb1:	e8 1a c2 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000edb6:	59                   	pop    ecx
c000edb7:	58                   	pop    eax
c000edb8:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000edbd:	68 aa 4b 02 c0       	push   0xc0024baa
c000edc2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edc8:	e8 49 c2 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000edcd:	58                   	pop    eax
c000edce:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000edd3:	5a                   	pop    edx
c000edd4:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000edd7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eddd:	e8 ee c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ede2:	59                   	pop    ecx
c000ede3:	58                   	pop    eax
c000ede4:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000ede9:	68 b2 4b 02 c0       	push   0xc0024bb2
c000edee:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edf4:	e8 1d c2 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000edf9:	58                   	pop    eax
c000edfa:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000edff:	5a                   	pop    edx
c000ee00:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ee03:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee09:	e8 c2 c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ee0e:	59                   	pop    ecx
c000ee0f:	58                   	pop    eax
c000ee10:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000ee15:	68 ba 4b 02 c0       	push   0xc0024bba
c000ee1a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee20:	e8 f1 c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ee25:	58                   	pop    eax
c000ee26:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000ee2b:	5a                   	pop    edx
c000ee2c:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000ee2f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee35:	e8 96 c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ee3a:	59                   	pop    ecx
c000ee3b:	58                   	pop    eax
c000ee3c:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000ee41:	68 c2 4b 02 c0       	push   0xc0024bc2
c000ee46:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee4c:	e8 c5 c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ee51:	58                   	pop    eax
c000ee52:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000ee57:	5a                   	pop    edx
c000ee58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ee5c:	52                   	push   edx
c000ee5d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee63:	e8 68 c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ee68:	59                   	pop    ecx
c000ee69:	58                   	pop    eax
c000ee6a:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000ee6f:	68 cb 4b 02 c0       	push   0xc0024bcb
c000ee74:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee7a:	e8 97 c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ee7f:	58                   	pop    eax
c000ee80:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000ee85:	5a                   	pop    edx
c000ee86:	57                   	push   edi
c000ee87:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee8d:	e8 3e c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ee92:	59                   	pop    ecx
c000ee93:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000ee98:	5f                   	pop    edi
c000ee99:	68 d3 4b 02 c0       	push   0xc0024bd3
c000ee9e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eea4:	e8 6d c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000eea9:	58                   	pop    eax
c000eeaa:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000eeaf:	5a                   	pop    edx
c000eeb0:	56                   	push   esi
c000eeb1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eeb7:	e8 14 c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000eebc:	59                   	pop    ecx
c000eebd:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000eec2:	5e                   	pop    esi
c000eec3:	68 db 4b 02 c0       	push   0xc0024bdb
c000eec8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eece:	e8 43 c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000eed3:	5f                   	pop    edi
c000eed4:	58                   	pop    eax
c000eed5:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000eeda:	55                   	push   ebp
c000eedb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eee1:	e8 ea c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000eee6:	58                   	pop    eax
c000eee7:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000eeec:	5a                   	pop    edx
c000eeed:	68 e3 4b 02 c0       	push   0xc0024be3
c000eef2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eef8:	e8 19 c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000eefd:	0f 21 c0             	mov    eax,db0
c000ef00:	59                   	pop    ecx
c000ef01:	5e                   	pop    esi
c000ef02:	50                   	push   eax
c000ef03:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000ef08:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef0e:	e8 bd c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ef13:	5f                   	pop    edi
c000ef14:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000ef19:	5d                   	pop    ebp
c000ef1a:	68 ec 4b 02 c0       	push   0xc0024bec
c000ef1f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef25:	e8 ec c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ef2a:	0f 21 c8             	mov    eax,db1
c000ef2d:	5a                   	pop    edx
c000ef2e:	59                   	pop    ecx
c000ef2f:	50                   	push   eax
c000ef30:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000ef35:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef3b:	e8 90 c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ef40:	5e                   	pop    esi
c000ef41:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000ef46:	5f                   	pop    edi
c000ef47:	68 f4 4b 02 c0       	push   0xc0024bf4
c000ef4c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef52:	e8 bf c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ef57:	0f 21 d0             	mov    eax,db2
c000ef5a:	5d                   	pop    ebp
c000ef5b:	5a                   	pop    edx
c000ef5c:	50                   	push   eax
c000ef5d:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000ef62:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef68:	e8 63 c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ef6d:	59                   	pop    ecx
c000ef6e:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000ef73:	5e                   	pop    esi
c000ef74:	68 fc 4b 02 c0       	push   0xc0024bfc
c000ef79:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef7f:	e8 92 c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ef84:	0f 21 d8             	mov    eax,db3
c000ef87:	5f                   	pop    edi
c000ef88:	5d                   	pop    ebp
c000ef89:	50                   	push   eax
c000ef8a:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000ef8f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef95:	e8 36 c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ef9a:	58                   	pop    eax
c000ef9b:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000efa0:	5a                   	pop    edx
c000efa1:	68 04 4c 02 c0       	push   0xc0024c04
c000efa6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efac:	e8 65 c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000efb1:	0f 21 f0             	mov    eax,db6
c000efb4:	59                   	pop    ecx
c000efb5:	5e                   	pop    esi
c000efb6:	50                   	push   eax
c000efb7:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000efbc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efc2:	e8 09 c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000efc7:	5f                   	pop    edi
c000efc8:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000efcd:	5d                   	pop    ebp
c000efce:	68 0c 4c 02 c0       	push   0xc0024c0c
c000efd3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efd9:	e8 38 c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000efde:	0f 21 f8             	mov    eax,db7
c000efe1:	5a                   	pop    edx
c000efe2:	59                   	pop    ecx
c000efe3:	50                   	push   eax
c000efe4:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000efe9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efef:	e8 dc bf ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000eff4:	5e                   	pop    esi
c000eff5:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000eff8:	e8 b4 8b 00 00       	call   c0017bb1 <Thr::getDriverNameFromAddress(unsigned long)>
c000effd:	83 c4 10             	add    esp,0x10
c000f000:	85 c0                	test   eax,eax
c000f002:	74 7d                	je     c000f081 <displayDebugInfo(regs*)+0x48b>
c000f004:	89 c6                	mov    esi,eax
c000f006:	50                   	push   eax
c000f007:	50                   	push   eax
c000f008:	56                   	push   esi
c000f009:	68 14 4c 02 c0       	push   0xc0024c14
c000f00e:	e8 ec dc ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f013:	5a                   	pop    edx
c000f014:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000f019:	59                   	pop    ecx
c000f01a:	68 22 4c 02 c0       	push   0xc0024c22
c000f01f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f025:	e8 ec bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f02a:	5f                   	pop    edi
c000f02b:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000f030:	5d                   	pop    ebp
c000f031:	56                   	push   esi
c000f032:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f038:	e8 d9 bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f03d:	58                   	pop    eax
c000f03e:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000f043:	5a                   	pop    edx
c000f044:	68 2e 4c 02 c0       	push   0xc0024c2e
c000f049:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f04f:	e8 c2 bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f054:	59                   	pop    ecx
c000f055:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000f05a:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000f060:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f063:	e8 80 8b 00 00       	call   c0017be8 <Thr::getDriverOffsetFromAddress(unsigned long)>
c000f068:	5b                   	pop    ebx
c000f069:	5d                   	pop    ebp
c000f06a:	50                   	push   eax
c000f06b:	57                   	push   edi
c000f06c:	e8 5f bf ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000f071:	58                   	pop    eax
c000f072:	5a                   	pop    edx
c000f073:	56                   	push   esi
c000f074:	68 3a 4c 02 c0       	push   0xc0024c3a
c000f079:	e8 81 dc ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f07e:	83 c4 10             	add    esp,0x10
c000f081:	fa                   	cli    
c000f082:	f4                   	hlt    
c000f083:	eb fe                	jmp    c000f083 <displayDebugInfo(regs*)+0x48d>

c000f085 <x87EmulHandler(regs*, void*)>:
c000f085:	83 ec 0c             	sub    esp,0xc
c000f088:	0f 20 c2             	mov    edx,cr0
c000f08b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f090:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000f094:	75 4b                	jne    c000f0e1 <x87EmulHandler(regs*, void*)+0x5c>
c000f096:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000f09b:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000f0a1:	85 c0                	test   eax,eax
c000f0a3:	74 05                	je     c000f0aa <x87EmulHandler(regs*, void*)+0x25>
c000f0a5:	83 e2 08             	and    edx,0x8
c000f0a8:	75 17                	jne    c000f0c1 <x87EmulHandler(regs*, void*)+0x3c>
c000f0aa:	83 ec 0c             	sub    esp,0xc
c000f0ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f0b1:	e8 a8 af 00 00       	call   c001a05e <Vm::x87Handler(regs*)>
c000f0b6:	83 c4 10             	add    esp,0x10
c000f0b9:	84 c0                	test   al,al
c000f0bb:	74 24                	je     c000f0e1 <x87EmulHandler(regs*, void*)+0x5c>
c000f0bd:	83 c4 0c             	add    esp,0xc
c000f0c0:	c3                   	ret    
c000f0c1:	83 ec 0c             	sub    esp,0xc
c000f0c4:	68 60 4c 02 c0       	push   0xc0024c60
c000f0c9:	e8 31 dc ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f0ce:	0f 06                	clts   
c000f0d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f0d5:	83 c4 10             	add    esp,0x10
c000f0d8:	a3 e8 7d 02 c0       	mov    ds:0xc0027de8,eax
c000f0dd:	83 c4 0c             	add    esp,0xc
c000f0e0:	c3                   	ret    
c000f0e1:	83 ec 0c             	sub    esp,0xc
c000f0e4:	68 4a 4c 02 c0       	push   0xc0024c4a
c000f0e9:	e8 11 dc ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f0ee:	5a                   	pop    edx
c000f0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f0f3:	e8 fe fa ff ff       	call   c000ebf6 <displayDebugInfo(regs*)>

c000f0f8 <gpFault(regs*, void*)>:
c000f0f8:	53                   	push   ebx
c000f0f9:	83 ec 14             	sub    esp,0x14
c000f0fc:	c7 05 e4 7d 02 c0 1a 95 01 c0 	mov    DWORD PTR ds:0xc0027de4,0xc001951a
c000f106:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000f10a:	53                   	push   ebx
c000f10b:	e8 0a a4 00 00       	call   c001951a <Vm::faultHandler(regs*)>
c000f110:	83 c4 10             	add    esp,0x10
c000f113:	84 c0                	test   al,al
c000f115:	74 05                	je     c000f11c <gpFault(regs*, void*)+0x24>
c000f117:	83 c4 08             	add    esp,0x8
c000f11a:	5b                   	pop    ebx
c000f11b:	c3                   	ret    
c000f11c:	83 ec 0c             	sub    esp,0xc
c000f11f:	68 6d 4c 02 c0       	push   0xc0024c6d
c000f124:	e8 d6 db ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f129:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f12c:	e8 c5 fa ff ff       	call   c000ebf6 <displayDebugInfo(regs*)>

c000f131 <pgFault(regs*, void*)>:
c000f131:	53                   	push   ebx
c000f132:	83 ec 10             	sub    esp,0x10
c000f135:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f139:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f13c:	68 88 4c 02 c0       	push   0xc0024c88
c000f141:	e8 b9 db ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f146:	0f 20 d0             	mov    eax,cr2
c000f149:	5a                   	pop    edx
c000f14a:	59                   	pop    ecx
c000f14b:	50                   	push   eax
c000f14c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f151:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f154:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000f15a:	e8 1b d7 ff ff       	call   c000c87a <VAS::tryLoadBackOffDisk(unsigned long)>
c000f15f:	83 c4 10             	add    esp,0x10
c000f162:	84 c0                	test   al,al
c000f164:	74 05                	je     c000f16b <pgFault(regs*, void*)+0x3a>
c000f166:	83 c4 08             	add    esp,0x8
c000f169:	5b                   	pop    ebx
c000f16a:	c3                   	ret    
c000f16b:	83 ec 0c             	sub    esp,0xc
c000f16e:	68 9d 4c 02 c0       	push   0xc0024c9d
c000f173:	e8 87 db ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f178:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f17b:	e8 76 fa ff ff       	call   c000ebf6 <displayDebugInfo(regs*)>

c000f180 <otherISRHandler(regs*, void*)>:
c000f180:	53                   	push   ebx
c000f181:	83 ec 0c             	sub    esp,0xc
c000f184:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f188:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f18b:	50                   	push   eax
c000f18c:	50                   	push   eax
c000f18d:	68 aa 4c 02 c0       	push   0xc0024caa
c000f192:	e8 68 db ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f197:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f19a:	e8 57 fa ff ff       	call   c000ebf6 <displayDebugInfo(regs*)>

c000f19f <opcodeFault(regs*, void*)>:
c000f19f:	55                   	push   ebp
c000f1a0:	89 e5                	mov    ebp,esp
c000f1a2:	56                   	push   esi
c000f1a3:	53                   	push   ebx
c000f1a4:	83 ec 30             	sub    esp,0x30
c000f1a7:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000f1ac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f1b2:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000f1b8:	84 c0                	test   al,al
c000f1ba:	74 24                	je     c000f1e0 <opcodeFault(regs*, void*)+0x41>
c000f1bc:	83 ec 0c             	sub    esp,0xc
c000f1bf:	68 c8 4c 02 c0       	push   0xc0024cc8
c000f1c4:	e8 36 db ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f1c9:	83 c4 10             	add    esp,0x10
c000f1cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1cf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f1d2:	8d 50 19             	lea    edx,[eax+0x19]
c000f1d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1d8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f1db:	e9 7b 03 00 00       	jmp    c000f55b <opcodeFault(regs*, void*)+0x3bc>
c000f1e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1e3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f1e6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f1e9:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000f1ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1f0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f1f3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f1f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f1f9:	8a 00                	mov    al,BYTE PTR [eax]
c000f1fb:	3c f0                	cmp    al,0xf0
c000f1fd:	75 17                	jne    c000f216 <opcodeFault(regs*, void*)+0x77>
c000f1ff:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f202:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f205:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f208:	8d 50 01             	lea    edx,[eax+0x1]
c000f20b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f20e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f211:	e9 d6 00 00 00       	jmp    c000f2ec <opcodeFault(regs*, void*)+0x14d>
c000f216:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f219:	8a 00                	mov    al,BYTE PTR [eax]
c000f21b:	3c f2                	cmp    al,0xf2
c000f21d:	74 09                	je     c000f228 <opcodeFault(regs*, void*)+0x89>
c000f21f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f222:	8a 00                	mov    al,BYTE PTR [eax]
c000f224:	3c f3                	cmp    al,0xf3
c000f226:	75 1b                	jne    c000f243 <opcodeFault(regs*, void*)+0xa4>
c000f228:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f22c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f22f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f232:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f235:	8d 50 01             	lea    edx,[eax+0x1]
c000f238:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f23b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f23e:	e9 a9 00 00 00       	jmp    c000f2ec <opcodeFault(regs*, void*)+0x14d>
c000f243:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f246:	8a 00                	mov    al,BYTE PTR [eax]
c000f248:	3c 66                	cmp    al,0x66
c000f24a:	75 1b                	jne    c000f267 <opcodeFault(regs*, void*)+0xc8>
c000f24c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f250:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f253:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f256:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f259:	8d 50 01             	lea    edx,[eax+0x1]
c000f25c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f25f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f262:	e9 85 00 00 00       	jmp    c000f2ec <opcodeFault(regs*, void*)+0x14d>
c000f267:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f26a:	8a 00                	mov    al,BYTE PTR [eax]
c000f26c:	3c 67                	cmp    al,0x67
c000f26e:	75 18                	jne    c000f288 <opcodeFault(regs*, void*)+0xe9>
c000f270:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f274:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f277:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f27a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f27d:	8d 50 01             	lea    edx,[eax+0x1]
c000f280:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f283:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f286:	eb 64                	jmp    c000f2ec <opcodeFault(regs*, void*)+0x14d>
c000f288:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f28b:	8a 00                	mov    al,BYTE PTR [eax]
c000f28d:	3c 2e                	cmp    al,0x2e
c000f28f:	74 09                	je     c000f29a <opcodeFault(regs*, void*)+0xfb>
c000f291:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f294:	8a 00                	mov    al,BYTE PTR [eax]
c000f296:	3c 3e                	cmp    al,0x3e
c000f298:	75 18                	jne    c000f2b2 <opcodeFault(regs*, void*)+0x113>
c000f29a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f29e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f2a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2a4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2a7:	8d 50 01             	lea    edx,[eax+0x1]
c000f2aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2ad:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f2b0:	eb 3a                	jmp    c000f2ec <opcodeFault(regs*, void*)+0x14d>
c000f2b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2b5:	8a 00                	mov    al,BYTE PTR [eax]
c000f2b7:	3c 36                	cmp    al,0x36
c000f2b9:	74 1b                	je     c000f2d6 <opcodeFault(regs*, void*)+0x137>
c000f2bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2be:	8a 00                	mov    al,BYTE PTR [eax]
c000f2c0:	3c 26                	cmp    al,0x26
c000f2c2:	74 12                	je     c000f2d6 <opcodeFault(regs*, void*)+0x137>
c000f2c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2c7:	8a 00                	mov    al,BYTE PTR [eax]
c000f2c9:	3c 64                	cmp    al,0x64
c000f2cb:	74 09                	je     c000f2d6 <opcodeFault(regs*, void*)+0x137>
c000f2cd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2d0:	8a 00                	mov    al,BYTE PTR [eax]
c000f2d2:	3c 65                	cmp    al,0x65
c000f2d4:	75 16                	jne    c000f2ec <opcodeFault(regs*, void*)+0x14d>
c000f2d6:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f2da:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f2dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2e0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2e3:	8d 50 01             	lea    edx,[eax+0x1]
c000f2e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2e9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f2ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2ef:	8a 00                	mov    al,BYTE PTR [eax]
c000f2f1:	3c 0f                	cmp    al,0xf
c000f2f3:	0f 85 8d 01 00 00    	jne    c000f486 <opcodeFault(regs*, void*)+0x2e7>
c000f2f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2fc:	40                   	inc    eax
c000f2fd:	8a 00                	mov    al,BYTE PTR [eax]
c000f2ff:	3c c7                	cmp    al,0xc7
c000f301:	0f 85 7f 01 00 00    	jne    c000f486 <opcodeFault(regs*, void*)+0x2e7>
c000f307:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f30a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f30d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f310:	8d 50 01             	lea    edx,[eax+0x1]
c000f313:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f316:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f319:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f31c:	50                   	push   eax
c000f31d:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f320:	50                   	push   eax
c000f321:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f324:	50                   	push   eax
c000f325:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f328:	e8 9b 4c 00 00       	call   c0013fc8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f32d:	83 c4 10             	add    esp,0x10
c000f330:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f333:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f336:	83 f0 01             	xor    eax,0x1
c000f339:	84 c0                	test   al,al
c000f33b:	0f 84 45 01 00 00    	je     c000f486 <opcodeFault(regs*, void*)+0x2e7>
c000f341:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f344:	3c 01                	cmp    al,0x1
c000f346:	0f 85 3a 01 00 00    	jne    c000f486 <opcodeFault(regs*, void*)+0x2e7>
c000f34c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f34f:	83 f0 01             	xor    eax,0x1
c000f352:	84 c0                	test   al,al
c000f354:	0f 84 2c 01 00 00    	je     c000f486 <opcodeFault(regs*, void*)+0x2e7>
c000f35a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f35d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f360:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f363:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f36a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f36d:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f370:	89 c2                	mov    edx,eax
c000f372:	b8 00 00 00 00       	mov    eax,0x0
c000f377:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f37a:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f37d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f380:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f383:	ba 00 00 00 00       	mov    edx,0x0
c000f388:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f38b:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f38e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f391:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f394:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f397:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f39e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f3a1:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f3a4:	89 c2                	mov    edx,eax
c000f3a6:	b8 00 00 00 00       	mov    eax,0x0
c000f3ab:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f3ae:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f3b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3b4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f3b7:	ba 00 00 00 00       	mov    edx,0x0
c000f3bc:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f3bf:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f3c2:	fa                   	cli    
c000f3c3:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000f3c8:	40                   	inc    eax
c000f3c9:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c000f3ce:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f3d1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f3d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3d6:	89 c1                	mov    ecx,eax
c000f3d8:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f3db:	89 cb                	mov    ebx,ecx
c000f3dd:	89 d0                	mov    eax,edx
c000f3df:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f3e2:	89 c6                	mov    esi,eax
c000f3e4:	89 f0                	mov    eax,esi
c000f3e6:	09 d8                	or     eax,ebx
c000f3e8:	85 c0                	test   eax,eax
c000f3ea:	75 21                	jne    c000f40d <opcodeFault(regs*, void*)+0x26e>
c000f3ec:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f3ef:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f3f2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f3f5:	89 01                	mov    DWORD PTR [ecx],eax
c000f3f7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f3fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3fd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f400:	83 c8 40             	or     eax,0x40
c000f403:	89 c2                	mov    edx,eax
c000f405:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f408:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f40b:	eb 3e                	jmp    c000f44b <opcodeFault(regs*, void*)+0x2ac>
c000f40d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f410:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f413:	8b 00                	mov    eax,DWORD PTR [eax]
c000f415:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f418:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f41b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f41e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f421:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f424:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f427:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f42a:	89 d0                	mov    eax,edx
c000f42c:	31 d2                	xor    edx,edx
c000f42e:	89 c3                	mov    ebx,eax
c000f430:	89 d6                	mov    esi,edx
c000f432:	89 da                	mov    edx,ebx
c000f434:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f437:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f43a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f43d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f440:	83 e0 bf             	and    eax,0xffffffbf
c000f443:	89 c2                	mov    edx,eax
c000f445:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f448:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f44b:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000f450:	48                   	dec    eax
c000f451:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c000f456:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000f45b:	85 c0                	test   eax,eax
c000f45d:	75 01                	jne    c000f460 <opcodeFault(regs*, void*)+0x2c1>
c000f45f:	fb                   	sti    
c000f460:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f463:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f466:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f469:	01 c2                	add    edx,eax
c000f46b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f46e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f471:	83 ec 0c             	sub    esp,0xc
c000f474:	68 eb 4c 02 c0       	push   0xc0024ceb
c000f479:	e8 81 d8 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f47e:	83 c4 10             	add    esp,0x10
c000f481:	e9 d5 00 00 00       	jmp    c000f55b <opcodeFault(regs*, void*)+0x3bc>
c000f486:	83 ec 0c             	sub    esp,0xc
c000f489:	68 fe 4c 02 c0       	push   0xc0024cfe
c000f48e:	e8 6c d8 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f493:	83 c4 10             	add    esp,0x10
c000f496:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f499:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f49c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f49f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f4a2:	c1 e0 04             	shl    eax,0x4
c000f4a5:	01 d0                	add    eax,edx
c000f4a7:	83 c0 03             	add    eax,0x3
c000f4aa:	8a 00                	mov    al,BYTE PTR [eax]
c000f4ac:	0f b6 d8             	movzx  ebx,al
c000f4af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4b2:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f4b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4b8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f4bb:	c1 e0 04             	shl    eax,0x4
c000f4be:	01 d0                	add    eax,edx
c000f4c0:	83 c0 02             	add    eax,0x2
c000f4c3:	8a 00                	mov    al,BYTE PTR [eax]
c000f4c5:	0f b6 c8             	movzx  ecx,al
c000f4c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4cb:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f4ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4d1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f4d4:	c1 e0 04             	shl    eax,0x4
c000f4d7:	01 d0                	add    eax,edx
c000f4d9:	40                   	inc    eax
c000f4da:	8a 00                	mov    al,BYTE PTR [eax]
c000f4dc:	0f b6 d0             	movzx  edx,al
c000f4df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4e2:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f4e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4e8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f4eb:	c1 e0 04             	shl    eax,0x4
c000f4ee:	01 f0                	add    eax,esi
c000f4f0:	8a 00                	mov    al,BYTE PTR [eax]
c000f4f2:	0f b6 c0             	movzx  eax,al
c000f4f5:	83 ec 0c             	sub    esp,0xc
c000f4f8:	53                   	push   ebx
c000f4f9:	51                   	push   ecx
c000f4fa:	52                   	push   edx
c000f4fb:	50                   	push   eax
c000f4fc:	68 10 4d 02 c0       	push   0xc0024d10
c000f501:	e8 f9 d7 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f506:	83 c4 20             	add    esp,0x20
c000f509:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f50c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f50f:	83 c0 03             	add    eax,0x3
c000f512:	8a 00                	mov    al,BYTE PTR [eax]
c000f514:	0f b6 d8             	movzx  ebx,al
c000f517:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f51a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f51d:	83 c0 02             	add    eax,0x2
c000f520:	8a 00                	mov    al,BYTE PTR [eax]
c000f522:	0f b6 c8             	movzx  ecx,al
c000f525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f528:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f52b:	40                   	inc    eax
c000f52c:	8a 00                	mov    al,BYTE PTR [eax]
c000f52e:	0f b6 d0             	movzx  edx,al
c000f531:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f534:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f537:	8a 00                	mov    al,BYTE PTR [eax]
c000f539:	0f b6 c0             	movzx  eax,al
c000f53c:	83 ec 0c             	sub    esp,0xc
c000f53f:	53                   	push   ebx
c000f540:	51                   	push   ecx
c000f541:	52                   	push   edx
c000f542:	50                   	push   eax
c000f543:	68 38 4d 02 c0       	push   0xc0024d38
c000f548:	e8 b2 d7 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f54d:	83 c4 20             	add    esp,0x20
c000f550:	83 ec 0c             	sub    esp,0xc
c000f553:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f556:	e8 9b f6 ff ff       	call   c000ebf6 <displayDebugInfo(regs*)>
c000f55b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000f55e:	5b                   	pop    ebx
c000f55f:	5e                   	pop    esi
c000f560:	5d                   	pop    ebp
c000f561:	c3                   	ret    

c000f562 <displayProgramFault(char const*)>:
c000f562:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f567:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f56a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000f570:	85 c0                	test   eax,eax
c000f572:	74 15                	je     c000f589 <displayProgramFault(char const*)+0x27>
c000f574:	83 ec 0c             	sub    esp,0xc
c000f577:	6a 04                	push   0x4
c000f579:	6a 0f                	push   0xf
c000f57b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f57f:	50                   	push   eax
c000f580:	e8 8d b7 ff ff       	call   c000ad12 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f585:	83 c4 1c             	add    esp,0x1c
c000f588:	c3                   	ret    
c000f589:	c3                   	ret    

c000f58a <setupInterruptController()>:
c000f58a:	55                   	push   ebp
c000f58b:	89 e5                	mov    ebp,esp
c000f58d:	53                   	push   ebx
c000f58e:	83 ec 24             	sub    esp,0x24
c000f591:	b8 00 00 00 00       	mov    eax,0x0
c000f596:	85 c0                	test   eax,eax
c000f598:	0f 95 c0             	setne  al
c000f59b:	84 c0                	test   al,al
c000f59d:	74 5b                	je     c000f5fa <setupInterruptController()+0x70>
c000f59f:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000f5a6:	83 ec 0c             	sub    esp,0xc
c000f5a9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f5ac:	e8 5e a4 ff ff       	call   c0009a0f <malloc>
c000f5b1:	83 c4 10             	add    esp,0x10
c000f5b4:	89 c3                	mov    ebx,eax
c000f5b6:	83 ec 0c             	sub    esp,0xc
c000f5b9:	53                   	push   ebx
c000f5ba:	e8 5f 1f 01 00       	call   c002151e <APIC::APIC()>
c000f5bf:	83 c4 10             	add    esp,0x10
c000f5c2:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f5c5:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000f5c8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f5cb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5cd:	83 c0 08             	add    eax,0x8
c000f5d0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5d2:	6a 00                	push   0x0
c000f5d4:	6a 00                	push   0x0
c000f5d6:	6a 00                	push   0x0
c000f5d8:	52                   	push   edx
c000f5d9:	ff d0                	call   eax
c000f5db:	83 c4 10             	add    esp,0x10
c000f5de:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000f5e3:	83 ec 08             	sub    esp,0x8
c000f5e6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f5e9:	50                   	push   eax
c000f5ea:	e8 97 eb ff ff       	call   c000e186 <Device::addChild(Device*)>
c000f5ef:	83 c4 10             	add    esp,0x10
c000f5f2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f5f5:	e9 79 03 00 00       	jmp    c000f973 <setupInterruptController()+0x3e9>
c000f5fa:	a0 c0 85 02 c0       	mov    al,ds:0xc00285c0
c000f5ff:	84 c0                	test   al,al
c000f601:	75 14                	jne    c000f617 <setupInterruptController()+0x8d>
c000f603:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000f608:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000f60e:	83 e2 fe             	and    edx,0xfffffffe
c000f611:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000f617:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000f61c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000f622:	83 e0 01             	and    eax,0x1
c000f625:	84 c0                	test   al,al
c000f627:	0f 95 c0             	setne  al
c000f62a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000f62d:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000f634:	83 ec 0c             	sub    esp,0xc
c000f637:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000f63a:	e8 d0 a3 ff ff       	call   c0009a0f <malloc>
c000f63f:	83 c4 10             	add    esp,0x10
c000f642:	89 c3                	mov    ebx,eax
c000f644:	83 ec 0c             	sub    esp,0xc
c000f647:	53                   	push   ebx
c000f648:	e8 29 24 01 00       	call   c0021a76 <PIC::PIC()>
c000f64d:	83 c4 10             	add    esp,0x10
c000f650:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f653:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f656:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f659:	8b 00                	mov    eax,DWORD PTR [eax]
c000f65b:	83 c0 08             	add    eax,0x8
c000f65e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f660:	6a 00                	push   0x0
c000f662:	6a 00                	push   0x0
c000f664:	6a 00                	push   0x0
c000f666:	52                   	push   edx
c000f667:	ff d0                	call   eax
c000f669:	83 c4 10             	add    esp,0x10
c000f66c:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000f670:	74 73                	je     c000f6e5 <setupInterruptController()+0x15b>
c000f672:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f675:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f678:	8b 00                	mov    eax,DWORD PTR [eax]
c000f67a:	83 c0 0c             	add    eax,0xc
c000f67d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f67f:	6a 00                	push   0x0
c000f681:	6a 00                	push   0x0
c000f683:	6a 00                	push   0x0
c000f685:	52                   	push   edx
c000f686:	ff d0                	call   eax
c000f688:	83 c4 10             	add    esp,0x10
c000f68b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f68f:	74 15                	je     c000f6a6 <setupInterruptController()+0x11c>
c000f691:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f694:	8b 00                	mov    eax,DWORD PTR [eax]
c000f696:	83 c0 04             	add    eax,0x4
c000f699:	8b 00                	mov    eax,DWORD PTR [eax]
c000f69b:	83 ec 0c             	sub    esp,0xc
c000f69e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f6a1:	ff d0                	call   eax
c000f6a3:	83 c4 10             	add    esp,0x10
c000f6a6:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000f6ad:	83 ec 0c             	sub    esp,0xc
c000f6b0:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f6b3:	e8 57 a3 ff ff       	call   c0009a0f <malloc>
c000f6b8:	83 c4 10             	add    esp,0x10
c000f6bb:	89 c3                	mov    ebx,eax
c000f6bd:	83 ec 0c             	sub    esp,0xc
c000f6c0:	53                   	push   ebx
c000f6c1:	e8 58 1e 01 00       	call   c002151e <APIC::APIC()>
c000f6c6:	83 c4 10             	add    esp,0x10
c000f6c9:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f6cc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f6cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6d2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6d4:	83 c0 08             	add    eax,0x8
c000f6d7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6d9:	6a 00                	push   0x0
c000f6db:	6a 00                	push   0x0
c000f6dd:	6a 00                	push   0x0
c000f6df:	52                   	push   edx
c000f6e0:	ff d0                	call   eax
c000f6e2:	83 c4 10             	add    esp,0x10
c000f6e5:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c000f6ea:	83 ec 08             	sub    esp,0x8
c000f6ed:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f6f0:	50                   	push   eax
c000f6f1:	e8 90 ea ff ff       	call   c000e186 <Device::addChild(Device*)>
c000f6f6:	83 c4 10             	add    esp,0x10
c000f6f9:	c7 05 e8 7d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027de8,0x0
c000f703:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f706:	8b 00                	mov    eax,DWORD PTR [eax]
c000f708:	83 c0 24             	add    eax,0x24
c000f70b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f70d:	6a 00                	push   0x0
c000f70f:	68 80 f1 00 c0       	push   0xc000f180
c000f714:	6a 00                	push   0x0
c000f716:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f719:	ff d0                	call   eax
c000f71b:	83 c4 10             	add    esp,0x10
c000f71e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f721:	8b 00                	mov    eax,DWORD PTR [eax]
c000f723:	83 c0 24             	add    eax,0x24
c000f726:	8b 00                	mov    eax,DWORD PTR [eax]
c000f728:	6a 00                	push   0x0
c000f72a:	68 80 f1 00 c0       	push   0xc000f180
c000f72f:	6a 01                	push   0x1
c000f731:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f734:	ff d0                	call   eax
c000f736:	83 c4 10             	add    esp,0x10
c000f739:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f73c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f73e:	83 c0 24             	add    eax,0x24
c000f741:	8b 00                	mov    eax,DWORD PTR [eax]
c000f743:	6a 00                	push   0x0
c000f745:	68 53 ea 00 c0       	push   0xc000ea53
c000f74a:	6a 02                	push   0x2
c000f74c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f74f:	ff d0                	call   eax
c000f751:	83 c4 10             	add    esp,0x10
c000f754:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f757:	8b 00                	mov    eax,DWORD PTR [eax]
c000f759:	83 c0 24             	add    eax,0x24
c000f75c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f75e:	6a 00                	push   0x0
c000f760:	68 80 f1 00 c0       	push   0xc000f180
c000f765:	6a 03                	push   0x3
c000f767:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f76a:	ff d0                	call   eax
c000f76c:	83 c4 10             	add    esp,0x10
c000f76f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f772:	8b 00                	mov    eax,DWORD PTR [eax]
c000f774:	83 c0 24             	add    eax,0x24
c000f777:	8b 00                	mov    eax,DWORD PTR [eax]
c000f779:	6a 00                	push   0x0
c000f77b:	68 80 f1 00 c0       	push   0xc000f180
c000f780:	6a 04                	push   0x4
c000f782:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f785:	ff d0                	call   eax
c000f787:	83 c4 10             	add    esp,0x10
c000f78a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f78d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f78f:	83 c0 24             	add    eax,0x24
c000f792:	8b 00                	mov    eax,DWORD PTR [eax]
c000f794:	6a 00                	push   0x0
c000f796:	68 80 f1 00 c0       	push   0xc000f180
c000f79b:	6a 05                	push   0x5
c000f79d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7a0:	ff d0                	call   eax
c000f7a2:	83 c4 10             	add    esp,0x10
c000f7a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7a8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7aa:	83 c0 24             	add    eax,0x24
c000f7ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7af:	6a 00                	push   0x0
c000f7b1:	68 9f f1 00 c0       	push   0xc000f19f
c000f7b6:	6a 06                	push   0x6
c000f7b8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7bb:	ff d0                	call   eax
c000f7bd:	83 c4 10             	add    esp,0x10
c000f7c0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7c3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7c5:	83 c0 24             	add    eax,0x24
c000f7c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7ca:	6a 00                	push   0x0
c000f7cc:	68 85 f0 00 c0       	push   0xc000f085
c000f7d1:	6a 07                	push   0x7
c000f7d3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7d6:	ff d0                	call   eax
c000f7d8:	83 c4 10             	add    esp,0x10
c000f7db:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7de:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7e0:	83 c0 24             	add    eax,0x24
c000f7e3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7e5:	6a 00                	push   0x0
c000f7e7:	68 6e e8 00 c0       	push   0xc000e86e
c000f7ec:	6a 08                	push   0x8
c000f7ee:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7f1:	ff d0                	call   eax
c000f7f3:	83 c4 10             	add    esp,0x10
c000f7f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7f9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7fb:	83 c0 24             	add    eax,0x24
c000f7fe:	8b 00                	mov    eax,DWORD PTR [eax]
c000f800:	6a 00                	push   0x0
c000f802:	68 80 f1 00 c0       	push   0xc000f180
c000f807:	6a 09                	push   0x9
c000f809:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f80c:	ff d0                	call   eax
c000f80e:	83 c4 10             	add    esp,0x10
c000f811:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f814:	8b 00                	mov    eax,DWORD PTR [eax]
c000f816:	83 c0 24             	add    eax,0x24
c000f819:	8b 00                	mov    eax,DWORD PTR [eax]
c000f81b:	6a 00                	push   0x0
c000f81d:	68 80 f1 00 c0       	push   0xc000f180
c000f822:	6a 0a                	push   0xa
c000f824:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f827:	ff d0                	call   eax
c000f829:	83 c4 10             	add    esp,0x10
c000f82c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f82f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f831:	83 c0 24             	add    eax,0x24
c000f834:	8b 00                	mov    eax,DWORD PTR [eax]
c000f836:	6a 00                	push   0x0
c000f838:	68 80 f1 00 c0       	push   0xc000f180
c000f83d:	6a 0b                	push   0xb
c000f83f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f842:	ff d0                	call   eax
c000f844:	83 c4 10             	add    esp,0x10
c000f847:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f84a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f84c:	83 c0 24             	add    eax,0x24
c000f84f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f851:	6a 00                	push   0x0
c000f853:	68 80 f1 00 c0       	push   0xc000f180
c000f858:	6a 0c                	push   0xc
c000f85a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f85d:	ff d0                	call   eax
c000f85f:	83 c4 10             	add    esp,0x10
c000f862:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f865:	8b 00                	mov    eax,DWORD PTR [eax]
c000f867:	83 c0 24             	add    eax,0x24
c000f86a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f86c:	6a 00                	push   0x0
c000f86e:	68 f8 f0 00 c0       	push   0xc000f0f8
c000f873:	6a 0d                	push   0xd
c000f875:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f878:	ff d0                	call   eax
c000f87a:	83 c4 10             	add    esp,0x10
c000f87d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f880:	8b 00                	mov    eax,DWORD PTR [eax]
c000f882:	83 c0 24             	add    eax,0x24
c000f885:	8b 00                	mov    eax,DWORD PTR [eax]
c000f887:	6a 00                	push   0x0
c000f889:	68 31 f1 00 c0       	push   0xc000f131
c000f88e:	6a 0e                	push   0xe
c000f890:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f893:	ff d0                	call   eax
c000f895:	83 c4 10             	add    esp,0x10
c000f898:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f89b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f89d:	83 c0 24             	add    eax,0x24
c000f8a0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8a2:	6a 00                	push   0x0
c000f8a4:	68 80 f1 00 c0       	push   0xc000f180
c000f8a9:	6a 0f                	push   0xf
c000f8ab:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8ae:	ff d0                	call   eax
c000f8b0:	83 c4 10             	add    esp,0x10
c000f8b3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8b6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8b8:	83 c0 24             	add    eax,0x24
c000f8bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8bd:	6a 00                	push   0x0
c000f8bf:	68 80 f1 00 c0       	push   0xc000f180
c000f8c4:	6a 10                	push   0x10
c000f8c6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8c9:	ff d0                	call   eax
c000f8cb:	83 c4 10             	add    esp,0x10
c000f8ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8d1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8d3:	83 c0 24             	add    eax,0x24
c000f8d6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8d8:	6a 00                	push   0x0
c000f8da:	68 80 f1 00 c0       	push   0xc000f180
c000f8df:	6a 11                	push   0x11
c000f8e1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8e4:	ff d0                	call   eax
c000f8e6:	83 c4 10             	add    esp,0x10
c000f8e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8ec:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8ee:	83 c0 24             	add    eax,0x24
c000f8f1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8f3:	6a 00                	push   0x0
c000f8f5:	68 80 f1 00 c0       	push   0xc000f180
c000f8fa:	6a 12                	push   0x12
c000f8fc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8ff:	ff d0                	call   eax
c000f901:	83 c4 10             	add    esp,0x10
c000f904:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f907:	8b 00                	mov    eax,DWORD PTR [eax]
c000f909:	83 c0 24             	add    eax,0x24
c000f90c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f90e:	6a 00                	push   0x0
c000f910:	68 80 f1 00 c0       	push   0xc000f180
c000f915:	6a 13                	push   0x13
c000f917:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f91a:	ff d0                	call   eax
c000f91c:	83 c4 10             	add    esp,0x10
c000f91f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f922:	8b 00                	mov    eax,DWORD PTR [eax]
c000f924:	83 c0 24             	add    eax,0x24
c000f927:	8b 00                	mov    eax,DWORD PTR [eax]
c000f929:	6a 00                	push   0x0
c000f92b:	68 80 f1 00 c0       	push   0xc000f180
c000f930:	6a 14                	push   0x14
c000f932:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f935:	ff d0                	call   eax
c000f937:	83 c4 10             	add    esp,0x10
c000f93a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f93d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f93f:	83 c0 24             	add    eax,0x24
c000f942:	8b 00                	mov    eax,DWORD PTR [eax]
c000f944:	6a 00                	push   0x0
c000f946:	68 80 f1 00 c0       	push   0xc000f180
c000f94b:	6a 1e                	push   0x1e
c000f94d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f950:	ff d0                	call   eax
c000f952:	83 c4 10             	add    esp,0x10
c000f955:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f958:	8b 00                	mov    eax,DWORD PTR [eax]
c000f95a:	83 c0 24             	add    eax,0x24
c000f95d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f95f:	6a 00                	push   0x0
c000f961:	68 27 6c 01 c0       	push   0xc0016c27
c000f966:	6a 60                	push   0x60
c000f968:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f96b:	ff d0                	call   eax
c000f96d:	83 c4 10             	add    esp,0x10
c000f970:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f973:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f976:	c9                   	leave  
c000f977:	c3                   	ret    

c000f978 <InterruptController::convertLegacyIRQNumber(int)>:
c000f978:	55                   	push   ebp
c000f979:	89 e5                	mov    ebp,esp
c000f97b:	83 ec 08             	sub    esp,0x8
c000f97e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f981:	83 ec 0c             	sub    esp,0xc
c000f984:	50                   	push   eax
c000f985:	e8 fc ea ff ff       	call   c000e486 <Device::getName()>
c000f98a:	83 c4 10             	add    esp,0x10
c000f98d:	8a 00                	mov    al,BYTE PTR [eax]
c000f98f:	3c 41                	cmp    al,0x41
c000f991:	0f 94 c0             	sete   al
c000f994:	84 c0                	test   al,al
c000f996:	74 28                	je     c000f9c0 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f998:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000f99c:	7f 12                	jg     c000f9b0 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000f99e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f9a1:	05 a0 73 02 c0       	add    eax,0xc00273a0
c000f9a6:	8a 00                	mov    al,BYTE PTR [eax]
c000f9a8:	0f b6 c0             	movzx  eax,al
c000f9ab:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000f9ae:	eb 10                	jmp    c000f9c0 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f9b0:	83 ec 0c             	sub    esp,0xc
c000f9b3:	68 60 4d 02 c0       	push   0xc0024d60
c000f9b8:	e8 f2 4e 00 00       	call   c00148af <Krnl::panic(char const*)>
c000f9bd:	83 c4 10             	add    esp,0x10
c000f9c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f9c3:	c9                   	leave  
c000f9c4:	c3                   	ret    
c000f9c5:	90                   	nop

c000f9c6 <startGUI(void*)>:
c000f9c6:	55                   	push   ebp
c000f9c7:	89 e5                	mov    ebp,esp
c000f9c9:	53                   	push   ebx
c000f9ca:	83 ec 04             	sub    esp,0x4
c000f9cd:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000f9d2:	48                   	dec    eax
c000f9d3:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c000f9d8:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000f9dd:	85 c0                	test   eax,eax
c000f9df:	75 01                	jne    c000f9e2 <startGUI(void*)+0x1c>
c000f9e1:	fb                   	sti    
c000f9e2:	8b 1d a8 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ca8
c000f9e8:	83 ec 08             	sub    esp,0x8
c000f9eb:	6a 01                	push   0x1
c000f9ed:	68 e0 4d 02 c0       	push   0xc0024de0
c000f9f2:	e8 0b 82 00 00       	call   c0017c02 <Thr::loadDLL(char const*, bool)>
c000f9f7:	83 c4 10             	add    esp,0x10
c000f9fa:	83 ec 08             	sub    esp,0x8
c000f9fd:	53                   	push   ebx
c000f9fe:	50                   	push   eax
c000f9ff:	e8 2f 84 00 00       	call   c0017e33 <Thr::executeDLL(unsigned long, void*)>
c000fa04:	83 c4 10             	add    esp,0x10
c000fa07:	8b 1d a8 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ca8
c000fa0d:	83 ec 08             	sub    esp,0x8
c000fa10:	6a 01                	push   0x1
c000fa12:	68 fa 4d 02 c0       	push   0xc0024dfa
c000fa17:	e8 e6 81 00 00       	call   c0017c02 <Thr::loadDLL(char const*, bool)>
c000fa1c:	83 c4 10             	add    esp,0x10
c000fa1f:	83 ec 08             	sub    esp,0x8
c000fa22:	53                   	push   ebx
c000fa23:	50                   	push   eax
c000fa24:	e8 0a 84 00 00       	call   c0017e33 <Thr::executeDLL(unsigned long, void*)>
c000fa29:	83 c4 10             	add    esp,0x10
c000fa2c:	90                   	nop
c000fa2d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fa30:	c9                   	leave  
c000fa31:	c3                   	ret    

c000fa32 <startGUIVESA(void*)>:
c000fa32:	55                   	push   ebp
c000fa33:	89 e5                	mov    ebp,esp
c000fa35:	53                   	push   ebx
c000fa36:	83 ec 04             	sub    esp,0x4
c000fa39:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000fa3e:	48                   	dec    eax
c000fa3f:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c000fa44:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000fa49:	85 c0                	test   eax,eax
c000fa4b:	75 01                	jne    c000fa4e <startGUIVESA(void*)+0x1c>
c000fa4d:	fb                   	sti    
c000fa4e:	8b 1d a8 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ca8
c000fa54:	83 ec 08             	sub    esp,0x8
c000fa57:	6a 01                	push   0x1
c000fa59:	68 14 4e 02 c0       	push   0xc0024e14
c000fa5e:	e8 9f 81 00 00       	call   c0017c02 <Thr::loadDLL(char const*, bool)>
c000fa63:	83 c4 10             	add    esp,0x10
c000fa66:	83 ec 08             	sub    esp,0x8
c000fa69:	53                   	push   ebx
c000fa6a:	50                   	push   eax
c000fa6b:	e8 c3 83 00 00       	call   c0017e33 <Thr::executeDLL(unsigned long, void*)>
c000fa70:	83 c4 10             	add    esp,0x10
c000fa73:	8b 1d a8 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ca8
c000fa79:	83 ec 08             	sub    esp,0x8
c000fa7c:	6a 01                	push   0x1
c000fa7e:	68 fa 4d 02 c0       	push   0xc0024dfa
c000fa83:	e8 7a 81 00 00       	call   c0017c02 <Thr::loadDLL(char const*, bool)>
c000fa88:	83 c4 10             	add    esp,0x10
c000fa8b:	83 ec 08             	sub    esp,0x8
c000fa8e:	53                   	push   ebx
c000fa8f:	50                   	push   eax
c000fa90:	e8 9e 83 00 00       	call   c0017e33 <Thr::executeDLL(unsigned long, void*)>
c000fa95:	83 c4 10             	add    esp,0x10
c000fa98:	90                   	nop
c000fa99:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fa9c:	c9                   	leave  
c000fa9d:	c3                   	ret    

c000fa9e <sendKeyToTerminal(unsigned char)>:
c000fa9e:	55                   	push   ebp
c000fa9f:	89 e5                	mov    ebp,esp
c000faa1:	83 ec 28             	sub    esp,0x28
c000faa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faa7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000faaa:	a1 24 7d 02 c0       	mov    eax,ds:0xc0027d24
c000faaf:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000fab3:	83 ec 08             	sub    esp,0x8
c000fab6:	52                   	push   edx
c000fab7:	50                   	push   eax
c000fab8:	e8 fd b6 ff ff       	call   c000b1ba <VgaText::receiveKey(unsigned char)>
c000fabd:	83 c4 10             	add    esp,0x10
c000fac0:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000fac4:	0f 85 8f 00 00 00    	jne    c000fb59 <sendKeyToTerminal(unsigned char)+0xbb>
c000faca:	fa                   	cli    
c000facb:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000fad0:	40                   	inc    eax
c000fad1:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c000fad6:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c000fadb:	40                   	inc    eax
c000fadc:	a3 c4 91 02 c0       	mov    ds:0xc00291c4,eax
c000fae1:	a1 00 7e 02 c0       	mov    eax,ds:0xc0027e00
c000fae6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000fae9:	c7 05 00 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027e00,0x0
c000faf3:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000faf7:	74 1f                	je     c000fb18 <sendKeyToTerminal(unsigned char)+0x7a>
c000faf9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fafc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000faff:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fb02:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000fb05:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000fb08:	83 ec 0c             	sub    esp,0xc
c000fb0b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fb0e:	e8 91 8f 00 00       	call   c0018aa4 <unblockTask(ThreadControlBlock*)>
c000fb13:	83 c4 10             	add    esp,0x10
c000fb16:	eb db                	jmp    c000faf3 <sendKeyToTerminal(unsigned char)+0x55>
c000fb18:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c000fb1d:	48                   	dec    eax
c000fb1e:	a3 c4 91 02 c0       	mov    ds:0xc00291c4,eax
c000fb23:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c000fb28:	85 c0                	test   eax,eax
c000fb2a:	75 18                	jne    c000fb44 <sendKeyToTerminal(unsigned char)+0xa6>
c000fb2c:	a1 c0 91 02 c0       	mov    eax,ds:0xc00291c0
c000fb31:	85 c0                	test   eax,eax
c000fb33:	74 0f                	je     c000fb44 <sendKeyToTerminal(unsigned char)+0xa6>
c000fb35:	c7 05 c0 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291c0,0x0
c000fb3f:	e8 a4 8a 00 00       	call   c00185e8 <schedule()>
c000fb44:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000fb49:	48                   	dec    eax
c000fb4a:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c000fb4f:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c000fb54:	85 c0                	test   eax,eax
c000fb56:	75 01                	jne    c000fb59 <sendKeyToTerminal(unsigned char)+0xbb>
c000fb58:	fb                   	sti    
c000fb59:	90                   	nop
c000fb5a:	c9                   	leave  
c000fb5b:	c3                   	ret    

c000fb5c <sendKeyboardToken(KeyboardToken)>:
c000fb5c:	55                   	push   ebp
c000fb5d:	89 e5                	mov    ebp,esp
c000fb5f:	83 ec 18             	sub    esp,0x18
c000fb62:	e8 4e 51 00 00       	call   c0014cb5 <Krnl::userIOReceived()>
c000fb67:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000fb6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb6d:	0f b7 c0             	movzx  eax,ax
c000fb70:	83 f2 01             	xor    edx,0x1
c000fb73:	88 90 20 7e 02 c0    	mov    BYTE PTR [eax-0x3ffd81e0],dl
c000fb79:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000fb7e:	85 c0                	test   eax,eax
c000fb80:	74 24                	je     c000fba6 <sendKeyboardToken(KeyboardToken)+0x4a>
c000fb82:	8b 0d 08 7e 02 c0    	mov    ecx,DWORD PTR ds:0xc0027e08
c000fb88:	83 ec 04             	sub    esp,0x4
c000fb8b:	68 20 7e 02 c0       	push   0xc0027e20
c000fb90:	83 ec 08             	sub    esp,0x8
c000fb93:	89 e2                	mov    edx,esp
c000fb95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb98:	89 02                	mov    DWORD PTR [edx],eax
c000fb9a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fb9d:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000fba1:	ff d1                	call   ecx
c000fba3:	83 c4 10             	add    esp,0x10
c000fba6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fba9:	66 3d 03 02          	cmp    ax,0x203
c000fbad:	75 07                	jne    c000fbb6 <sendKeyboardToken(KeyboardToken)+0x5a>
c000fbaf:	a0 20 7f 02 c0       	mov    al,ds:0xc0027f20
c000fbb4:	84 c0                	test   al,al
c000fbb6:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fbba:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000fbbd:	a0 28 82 02 c0       	mov    al,ds:0xc0028228
c000fbc2:	38 c2                	cmp    dl,al
c000fbc4:	74 1c                	je     c000fbe2 <sendKeyboardToken(KeyboardToken)+0x86>
c000fbc6:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000fbc9:	a2 28 82 02 c0       	mov    ds:0xc0028228,al
c000fbce:	a0 28 82 02 c0       	mov    al,ds:0xc0028228
c000fbd3:	0f b6 c0             	movzx  eax,al
c000fbd6:	83 ec 0c             	sub    esp,0xc
c000fbd9:	50                   	push   eax
c000fbda:	e8 1b ac ff ff       	call   c000a7fa <setTerminalScrollLock(bool)>
c000fbdf:	83 c4 10             	add    esp,0x10
c000fbe2:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000fbe5:	84 c0                	test   al,al
c000fbe7:	0f 84 ae 00 00 00    	je     c000fc9b <sendKeyboardToken(KeyboardToken)+0x13f>
c000fbed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbf0:	66 3d 10 03          	cmp    ax,0x310
c000fbf4:	75 06                	jne    c000fbfc <sendKeyboardToken(KeyboardToken)+0xa0>
c000fbf6:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000fbfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbff:	66 3d 11 03          	cmp    ax,0x311
c000fc03:	75 06                	jne    c000fc0b <sendKeyboardToken(KeyboardToken)+0xaf>
c000fc05:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000fc0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc0e:	66 3d 12 03          	cmp    ax,0x312
c000fc12:	75 06                	jne    c000fc1a <sendKeyboardToken(KeyboardToken)+0xbe>
c000fc14:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000fc1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc1d:	66 3d 13 03          	cmp    ax,0x313
c000fc21:	75 06                	jne    c000fc29 <sendKeyboardToken(KeyboardToken)+0xcd>
c000fc23:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000fc29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc2c:	66 3d 14 03          	cmp    ax,0x314
c000fc30:	75 06                	jne    c000fc38 <sendKeyboardToken(KeyboardToken)+0xdc>
c000fc32:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000fc38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc3b:	66 3d 15 03          	cmp    ax,0x315
c000fc3f:	75 06                	jne    c000fc47 <sendKeyboardToken(KeyboardToken)+0xeb>
c000fc41:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fc47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc4a:	66 3d 16 03          	cmp    ax,0x316
c000fc4e:	75 06                	jne    c000fc56 <sendKeyboardToken(KeyboardToken)+0xfa>
c000fc50:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000fc56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc59:	66 3d 17 03          	cmp    ax,0x317
c000fc5d:	75 06                	jne    c000fc65 <sendKeyboardToken(KeyboardToken)+0x109>
c000fc5f:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000fc65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc68:	66 3d 18 03          	cmp    ax,0x318
c000fc6c:	75 06                	jne    c000fc74 <sendKeyboardToken(KeyboardToken)+0x118>
c000fc6e:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000fc74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc77:	66 3d 19 03          	cmp    ax,0x319
c000fc7b:	75 06                	jne    c000fc83 <sendKeyboardToken(KeyboardToken)+0x127>
c000fc7d:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000fc83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc86:	66 3d 1a 03          	cmp    ax,0x31a
c000fc8a:	0f 85 c9 00 00 00    	jne    c000fd59 <sendKeyboardToken(KeyboardToken)+0x1fd>
c000fc90:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000fc96:	e9 be 00 00 00       	jmp    c000fd59 <sendKeyboardToken(KeyboardToken)+0x1fd>
c000fc9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc9e:	66 3d 10 03          	cmp    ax,0x310
c000fca2:	75 0a                	jne    c000fcae <sendKeyboardToken(KeyboardToken)+0x152>
c000fca4:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000fcaa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fcae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcb1:	66 3d 11 03          	cmp    ax,0x311
c000fcb5:	75 0a                	jne    c000fcc1 <sendKeyboardToken(KeyboardToken)+0x165>
c000fcb7:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000fcbd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fcc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcc4:	66 3d 12 03          	cmp    ax,0x312
c000fcc8:	75 0a                	jne    c000fcd4 <sendKeyboardToken(KeyboardToken)+0x178>
c000fcca:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000fcd0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fcd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcd7:	66 3d 13 03          	cmp    ax,0x313
c000fcdb:	75 0a                	jne    c000fce7 <sendKeyboardToken(KeyboardToken)+0x18b>
c000fcdd:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000fce3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fce7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcea:	66 3d 14 03          	cmp    ax,0x314
c000fcee:	75 0a                	jne    c000fcfa <sendKeyboardToken(KeyboardToken)+0x19e>
c000fcf0:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000fcf6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fcfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcfd:	66 3d 15 03          	cmp    ax,0x315
c000fd01:	75 0a                	jne    c000fd0d <sendKeyboardToken(KeyboardToken)+0x1b1>
c000fd03:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fd09:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd10:	66 3d 16 03          	cmp    ax,0x316
c000fd14:	75 0a                	jne    c000fd20 <sendKeyboardToken(KeyboardToken)+0x1c4>
c000fd16:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000fd1c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd23:	66 3d 17 03          	cmp    ax,0x317
c000fd27:	75 0a                	jne    c000fd33 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000fd29:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000fd2f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd36:	66 3d 18 03          	cmp    ax,0x318
c000fd3a:	75 0a                	jne    c000fd46 <sendKeyboardToken(KeyboardToken)+0x1ea>
c000fd3c:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000fd42:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd49:	66 3d 19 03          	cmp    ax,0x319
c000fd4d:	75 0a                	jne    c000fd59 <sendKeyboardToken(KeyboardToken)+0x1fd>
c000fd4f:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000fd55:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd5c:	66 3d 00 02          	cmp    ax,0x200
c000fd60:	75 2c                	jne    c000fd8e <sendKeyboardToken(KeyboardToken)+0x232>
c000fd62:	a0 20 82 02 c0       	mov    al,ds:0xc0028220
c000fd67:	83 f0 01             	xor    eax,0x1
c000fd6a:	84 c0                	test   al,al
c000fd6c:	74 20                	je     c000fd8e <sendKeyboardToken(KeyboardToken)+0x232>
c000fd6e:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000fd73:	6a 01                	push   0x1
c000fd75:	6a 00                	push   0x0
c000fd77:	68 c6 f9 00 c0       	push   0xc000f9c6
c000fd7c:	50                   	push   eax
c000fd7d:	e8 4a 86 00 00       	call   c00183cc <Process::createThread(void (*)(void*), void*, int)>
c000fd82:	83 c4 10             	add    esp,0x10
c000fd85:	c6 05 20 82 02 c0 01 	mov    BYTE PTR ds:0xc0028220,0x1
c000fd8c:	eb 33                	jmp    c000fdc1 <sendKeyboardToken(KeyboardToken)+0x265>
c000fd8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd91:	66 3d 01 02          	cmp    ax,0x201
c000fd95:	75 2a                	jne    c000fdc1 <sendKeyboardToken(KeyboardToken)+0x265>
c000fd97:	a0 20 82 02 c0       	mov    al,ds:0xc0028220
c000fd9c:	83 f0 01             	xor    eax,0x1
c000fd9f:	84 c0                	test   al,al
c000fda1:	74 1e                	je     c000fdc1 <sendKeyboardToken(KeyboardToken)+0x265>
c000fda3:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c000fda8:	6a 01                	push   0x1
c000fdaa:	6a 00                	push   0x0
c000fdac:	68 32 fa 00 c0       	push   0xc000fa32
c000fdb1:	50                   	push   eax
c000fdb2:	e8 15 86 00 00       	call   c00183cc <Process::createThread(void (*)(void*), void*, int)>
c000fdb7:	83 c4 10             	add    esp,0x10
c000fdba:	c6 05 20 82 02 c0 01 	mov    BYTE PTR ds:0xc0028220,0x1
c000fdc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdc4:	66 3d 1d 03          	cmp    ax,0x31d
c000fdc8:	75 06                	jne    c000fdd0 <sendKeyboardToken(KeyboardToken)+0x274>
c000fdca:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000fdd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdd3:	66 3d 1c 03          	cmp    ax,0x31c
c000fdd7:	75 06                	jne    c000fddf <sendKeyboardToken(KeyboardToken)+0x283>
c000fdd9:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000fddf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fde2:	66 3d 1b 03          	cmp    ax,0x31b
c000fde6:	75 06                	jne    c000fdee <sendKeyboardToken(KeyboardToken)+0x292>
c000fde8:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000fdee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdf1:	66 3d 1e 03          	cmp    ax,0x31e
c000fdf5:	75 06                	jne    c000fdfd <sendKeyboardToken(KeyboardToken)+0x2a1>
c000fdf7:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000fdfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe00:	66 3d 1f 03          	cmp    ax,0x31f
c000fe04:	75 06                	jne    c000fe0c <sendKeyboardToken(KeyboardToken)+0x2b0>
c000fe06:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000fe0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe0f:	66 3d 1a 03          	cmp    ax,0x31a
c000fe13:	75 06                	jne    c000fe1b <sendKeyboardToken(KeyboardToken)+0x2bf>
c000fe15:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000fe1b:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000fe1f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fe22:	83 f0 01             	xor    eax,0x1
c000fe25:	84 c0                	test   al,al
c000fe27:	74 77                	je     c000fea0 <sendKeyboardToken(KeyboardToken)+0x344>
c000fe29:	a0 21 7f 02 c0       	mov    al,ds:0xc0027f21
c000fe2e:	84 c0                	test   al,al
c000fe30:	74 41                	je     c000fe73 <sendKeyboardToken(KeyboardToken)+0x317>
c000fe32:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fe36:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000fe3a:	74 2b                	je     c000fe67 <sendKeyboardToken(KeyboardToken)+0x30b>
c000fe3c:	8b 15 24 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028224
c000fe42:	89 d0                	mov    eax,edx
c000fe44:	c1 e0 02             	shl    eax,0x2
c000fe47:	01 d0                	add    eax,edx
c000fe49:	01 c0                	add    eax,eax
c000fe4b:	a3 24 82 02 c0       	mov    ds:0xc0028224,eax
c000fe50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe53:	0f b7 c0             	movzx  eax,ax
c000fe56:	8d 50 d0             	lea    edx,[eax-0x30]
c000fe59:	a1 24 82 02 c0       	mov    eax,ds:0xc0028224
c000fe5e:	01 d0                	add    eax,edx
c000fe60:	a3 24 82 02 c0       	mov    ds:0xc0028224,eax
c000fe65:	eb 6d                	jmp    c000fed4 <sendKeyboardToken(KeyboardToken)+0x378>
c000fe67:	c7 05 24 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028224,0x0
c000fe71:	eb 61                	jmp    c000fed4 <sendKeyboardToken(KeyboardToken)+0x378>
c000fe73:	a1 24 82 02 c0       	mov    eax,ds:0xc0028224
c000fe78:	85 c0                	test   eax,eax
c000fe7a:	74 18                	je     c000fe94 <sendKeyboardToken(KeyboardToken)+0x338>
c000fe7c:	a1 24 82 02 c0       	mov    eax,ds:0xc0028224
c000fe81:	0f b6 c0             	movzx  eax,al
c000fe84:	83 ec 0c             	sub    esp,0xc
c000fe87:	50                   	push   eax
c000fe88:	e8 11 fc ff ff       	call   c000fa9e <sendKeyToTerminal(unsigned char)>
c000fe8d:	83 c4 10             	add    esp,0x10
c000fe90:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fe94:	c7 05 24 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028224,0x0
c000fe9e:	eb 34                	jmp    c000fed4 <sendKeyboardToken(KeyboardToken)+0x378>
c000fea0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fea3:	66 3d 01 01          	cmp    ax,0x101
c000fea7:	75 2b                	jne    c000fed4 <sendKeyboardToken(KeyboardToken)+0x378>
c000fea9:	a1 24 82 02 c0       	mov    eax,ds:0xc0028224
c000feae:	85 c0                	test   eax,eax
c000feb0:	74 18                	je     c000feca <sendKeyboardToken(KeyboardToken)+0x36e>
c000feb2:	a1 24 82 02 c0       	mov    eax,ds:0xc0028224
c000feb7:	0f b6 c0             	movzx  eax,al
c000feba:	83 ec 0c             	sub    esp,0xc
c000febd:	50                   	push   eax
c000febe:	e8 db fb ff ff       	call   c000fa9e <sendKeyToTerminal(unsigned char)>
c000fec3:	83 c4 10             	add    esp,0x10
c000fec6:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000feca:	c7 05 24 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028224,0x0
c000fed4:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fed7:	83 f0 01             	xor    eax,0x1
c000feda:	84 c0                	test   al,al
c000fedc:	74 4c                	je     c000ff2a <sendKeyboardToken(KeyboardToken)+0x3ce>
c000fede:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fee1:	83 f0 01             	xor    eax,0x1
c000fee4:	84 c0                	test   al,al
c000fee6:	74 42                	je     c000ff2a <sendKeyboardToken(KeyboardToken)+0x3ce>
c000fee8:	a0 20 7f 02 c0       	mov    al,ds:0xc0027f20
c000feed:	83 f0 01             	xor    eax,0x1
c000fef0:	84 c0                	test   al,al
c000fef2:	74 36                	je     c000ff2a <sendKeyboardToken(KeyboardToken)+0x3ce>
c000fef4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fef7:	66 83 f8 1f          	cmp    ax,0x1f
c000fefb:	76 09                	jbe    c000ff06 <sendKeyboardToken(KeyboardToken)+0x3aa>
c000fefd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff00:	66 83 f8 7e          	cmp    ax,0x7e
c000ff04:	76 12                	jbe    c000ff18 <sendKeyboardToken(KeyboardToken)+0x3bc>
c000ff06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff09:	66 83 f8 0a          	cmp    ax,0xa
c000ff0d:	74 09                	je     c000ff18 <sendKeyboardToken(KeyboardToken)+0x3bc>
c000ff0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff12:	66 83 f8 08          	cmp    ax,0x8
c000ff16:	75 12                	jne    c000ff2a <sendKeyboardToken(KeyboardToken)+0x3ce>
c000ff18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff1b:	0f b6 c0             	movzx  eax,al
c000ff1e:	83 ec 0c             	sub    esp,0xc
c000ff21:	50                   	push   eax
c000ff22:	e8 77 fb ff ff       	call   c000fa9e <sendKeyToTerminal(unsigned char)>
c000ff27:	83 c4 10             	add    esp,0x10
c000ff2a:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ff2d:	83 f0 01             	xor    eax,0x1
c000ff30:	84 c0                	test   al,al
c000ff32:	74 4f                	je     c000ff83 <sendKeyboardToken(KeyboardToken)+0x427>
c000ff34:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ff37:	83 f0 01             	xor    eax,0x1
c000ff3a:	84 c0                	test   al,al
c000ff3c:	74 45                	je     c000ff83 <sendKeyboardToken(KeyboardToken)+0x427>
c000ff3e:	a0 20 7f 02 c0       	mov    al,ds:0xc0027f20
c000ff43:	84 c0                	test   al,al
c000ff45:	74 3c                	je     c000ff83 <sendKeyboardToken(KeyboardToken)+0x427>
c000ff47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff4a:	66 83 f8 3f          	cmp    ax,0x3f
c000ff4e:	76 33                	jbe    c000ff83 <sendKeyboardToken(KeyboardToken)+0x427>
c000ff50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff53:	66 83 f8 7f          	cmp    ax,0x7f
c000ff57:	77 2a                	ja     c000ff83 <sendKeyboardToken(KeyboardToken)+0x427>
c000ff59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff5c:	88 c2                	mov    dl,al
c000ff5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff61:	66 83 f8 5f          	cmp    ax,0x5f
c000ff65:	76 04                	jbe    c000ff6b <sendKeyboardToken(KeyboardToken)+0x40f>
c000ff67:	b0 20                	mov    al,0x20
c000ff69:	eb 02                	jmp    c000ff6d <sendKeyboardToken(KeyboardToken)+0x411>
c000ff6b:	b0 00                	mov    al,0x0
c000ff6d:	29 c2                	sub    edx,eax
c000ff6f:	88 d0                	mov    al,dl
c000ff71:	83 e8 40             	sub    eax,0x40
c000ff74:	0f b6 c0             	movzx  eax,al
c000ff77:	83 ec 0c             	sub    esp,0xc
c000ff7a:	50                   	push   eax
c000ff7b:	e8 1e fb ff ff       	call   c000fa9e <sendKeyToTerminal(unsigned char)>
c000ff80:	83 c4 10             	add    esp,0x10
c000ff83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff86:	66 3d 00 03          	cmp    ax,0x300
c000ff8a:	75 0f                	jne    c000ff9b <sendKeyboardToken(KeyboardToken)+0x43f>
c000ff8c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ff8f:	83 f0 01             	xor    eax,0x1
c000ff92:	84 c0                	test   al,al
c000ff94:	74 05                	je     c000ff9b <sendKeyboardToken(KeyboardToken)+0x43f>
c000ff96:	e8 d0 ab ff ff       	call   c000ab6b <doTerminalCycle()>
c000ff9b:	90                   	nop
c000ff9c:	c9                   	leave  
c000ff9d:	c3                   	ret    

c000ff9e <clearInternalKeybuffer(VgaText*)>:
c000ff9e:	55                   	push   ebp
c000ff9f:	89 e5                	mov    ebp,esp
c000ffa1:	83 ec 08             	sub    esp,0x8
c000ffa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffa7:	05 98 01 00 00       	add    eax,0x198
c000ffac:	83 ec 0c             	sub    esp,0xc
c000ffaf:	50                   	push   eax
c000ffb0:	e8 eb 06 ff ff       	call   c00006a0 <strlen>
c000ffb5:	83 c4 10             	add    esp,0x10
c000ffb8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ffbb:	81 c2 98 01 00 00    	add    edx,0x198
c000ffc1:	83 ec 04             	sub    esp,0x4
c000ffc4:	50                   	push   eax
c000ffc5:	6a 00                	push   0x0
c000ffc7:	52                   	push   edx
c000ffc8:	e8 b7 06 ff ff       	call   c0000684 <memset>
c000ffcd:	83 c4 10             	add    esp,0x10
c000ffd0:	90                   	nop
c000ffd1:	c9                   	leave  
c000ffd2:	c3                   	ret    

c000ffd3 <readKeyboard(VgaText*, char*, unsigned long)>:
c000ffd3:	55                   	push   ebp
c000ffd4:	89 e5                	mov    ebp,esp
c000ffd6:	83 ec 18             	sub    esp,0x18
c000ffd9:	a1 08 7e 02 c0       	mov    eax,ds:0xc0027e08
c000ffde:	85 c0                	test   eax,eax
c000ffe0:	74 2a                	je     c001000c <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000ffe2:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000ffe8:	8b 0d 08 7e 02 c0    	mov    ecx,DWORD PTR ds:0xc0027e08
c000ffee:	83 ec 04             	sub    esp,0x4
c000fff1:	68 20 7e 02 c0       	push   0xc0027e20
c000fff6:	83 ec 08             	sub    esp,0x8
c000fff9:	89 e2                	mov    edx,esp
c000fffb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000fffe:	89 02                	mov    DWORD PTR [edx],eax
c0010000:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0010003:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0010007:	ff d1                	call   ecx
c0010009:	83 c4 10             	add    esp,0x10
c001000c:	fb                   	sti    
c001000d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0010014:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0010018:	0f 84 a1 00 00 00    	je     c00100bf <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c001001e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010021:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0010027:	84 c0                	test   al,al
c0010029:	75 28                	jne    c0010053 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c001002b:	fa                   	cli    
c001002c:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0010031:	40                   	inc    eax
c0010032:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0010037:	e8 ac 85 00 00       	call   c00185e8 <schedule()>
c001003c:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0010041:	48                   	dec    eax
c0010042:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0010047:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c001004c:	85 c0                	test   eax,eax
c001004e:	75 ce                	jne    c001001e <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0010050:	fb                   	sti    
c0010051:	eb cb                	jmp    c001001e <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0010053:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0010056:	8d 50 01             	lea    edx,[eax+0x1]
c0010059:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001005c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001005f:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0010065:	88 10                	mov    BYTE PTR [eax],dl
c0010067:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001006a:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0010070:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0010073:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010076:	05 98 01 00 00       	add    eax,0x198
c001007b:	83 ec 0c             	sub    esp,0xc
c001007e:	50                   	push   eax
c001007f:	e8 1c 06 ff ff       	call   c00006a0 <strlen>
c0010084:	83 c4 10             	add    esp,0x10
c0010087:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001008a:	81 c2 98 01 00 00    	add    edx,0x198
c0010090:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010093:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010096:	81 c2 98 01 00 00    	add    edx,0x198
c001009c:	83 ec 04             	sub    esp,0x4
c001009f:	50                   	push   eax
c00100a0:	51                   	push   ecx
c00100a1:	52                   	push   edx
c00100a2:	e8 15 05 ff ff       	call   c00005bc <memmove>
c00100a7:	83 c4 10             	add    esp,0x10
c00100aa:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00100ad:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00100b0:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00100b4:	0f 85 5a ff ff ff    	jne    c0010014 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c00100ba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00100bd:	eb 03                	jmp    c00100c2 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c00100bf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00100c2:	c9                   	leave  
c00100c3:	c3                   	ret    

c00100c4 <Keyboard::Keyboard(char const*)>:
c00100c4:	83 ec 0c             	sub    esp,0xc
c00100c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100cb:	83 ec 08             	sub    esp,0x8
c00100ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100d2:	50                   	push   eax
c00100d3:	e8 b2 e2 ff ff       	call   c000e38a <Device::Device(char const*)>
c00100d8:	83 c4 10             	add    esp,0x10
c00100db:	ba 38 4e 02 c0       	mov    edx,0xc0024e38
c00100e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100e4:	89 10                	mov    DWORD PTR [eax],edx
c00100e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100ea:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00100f4:	c6 05 04 7e 02 c0 01 	mov    BYTE PTR ds:0xc0027e04,0x1
c00100fb:	90                   	nop
c00100fc:	83 c4 0c             	add    esp,0xc
c00100ff:	c3                   	ret    

c0010100 <Keyboard::~Keyboard()>:
c0010100:	83 ec 0c             	sub    esp,0xc
c0010103:	ba 38 4e 02 c0       	mov    edx,0xc0024e38
c0010108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001010c:	89 10                	mov    DWORD PTR [eax],edx
c001010e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010112:	83 ec 0c             	sub    esp,0xc
c0010115:	50                   	push   eax
c0010116:	e8 39 df ff ff       	call   c000e054 <Device::~Device()>
c001011b:	83 c4 10             	add    esp,0x10
c001011e:	90                   	nop
c001011f:	83 c4 0c             	add    esp,0xc
c0010122:	c3                   	ret    
c0010123:	90                   	nop

c0010124 <Keyboard::~Keyboard()>:
c0010124:	83 ec 0c             	sub    esp,0xc
c0010127:	83 ec 0c             	sub    esp,0xc
c001012a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001012e:	e8 cd ff ff ff       	call   c0010100 <Keyboard::~Keyboard()>
c0010133:	83 c4 10             	add    esp,0x10
c0010136:	83 ec 08             	sub    esp,0x8
c0010139:	68 5c 01 00 00       	push   0x15c
c001013e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010142:	e8 d7 ca ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0010147:	83 c4 10             	add    esp,0x10
c001014a:	83 c4 0c             	add    esp,0xc
c001014d:	c3                   	ret    

c001014e <LogicalDisk::close(int, int, void*)>:
c001014e:	83 c8 ff             	or     eax,0xffffffff
c0010151:	c3                   	ret    

c0010152 <LogicalDisk::~LogicalDisk()>:
c0010152:	83 ec 0c             	sub    esp,0xc
c0010155:	ba b0 4e 02 c0       	mov    edx,0xc0024eb0
c001015a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001015e:	89 10                	mov    DWORD PTR [eax],edx
c0010160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010164:	83 ec 0c             	sub    esp,0xc
c0010167:	50                   	push   eax
c0010168:	e8 e7 de ff ff       	call   c000e054 <Device::~Device()>
c001016d:	83 c4 10             	add    esp,0x10
c0010170:	90                   	nop
c0010171:	83 c4 0c             	add    esp,0xc
c0010174:	c3                   	ret    
c0010175:	90                   	nop

c0010176 <LogicalDisk::~LogicalDisk()>:
c0010176:	83 ec 0c             	sub    esp,0xc
c0010179:	83 ec 0c             	sub    esp,0xc
c001017c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010180:	e8 cd ff ff ff       	call   c0010152 <LogicalDisk::~LogicalDisk()>
c0010185:	83 c4 10             	add    esp,0x10
c0010188:	83 ec 08             	sub    esp,0x8
c001018b:	68 74 01 00 00       	push   0x174
c0010190:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010194:	e8 85 ca ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0010199:	83 c4 10             	add    esp,0x10
c001019c:	83 c4 0c             	add    esp,0xc
c001019f:	c3                   	ret    

c00101a0 <LogicalDisk::open(int, int, void*)>:
c00101a0:	83 ec 18             	sub    esp,0x18
c00101a3:	68 64 4e 02 c0       	push   0xc0024e64
c00101a8:	e8 02 47 00 00       	call   c00148af <Krnl::panic(char const*)>
c00101ad:	83 c8 ff             	or     eax,0xffffffff
c00101b0:	83 c4 1c             	add    esp,0x1c
c00101b3:	c3                   	ret    

c00101b4 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00101b4:	53                   	push   ebx
c00101b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00101b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00101bd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00101c1:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00101c7:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00101cd:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00101d3:	77 10                	ja     c00101e5 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00101d5:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00101db:	89 d3                	mov    ebx,edx
c00101dd:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00101e3:	72 05                	jb     c00101ea <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00101e5:	83 c8 ff             	or     eax,0xffffffff
c00101e8:	89 c2                	mov    edx,eax
c00101ea:	5b                   	pop    ebx
c00101eb:	c3                   	ret    

c00101ec <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00101ec:	56                   	push   esi
c00101ed:	83 c8 ff             	or     eax,0xffffffff
c00101f0:	53                   	push   ebx
c00101f1:	89 c2                	mov    edx,eax
c00101f3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00101f7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00101fb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00101ff:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010205:	77 27                	ja     c001022e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0010207:	89 d8                	mov    eax,ebx
c0010209:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001020f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0010215:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001021a:	89 c2                	mov    edx,eax
c001021c:	73 10                	jae    c001022e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001021e:	89 c8                	mov    eax,ecx
c0010220:	89 da                	mov    edx,ebx
c0010222:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0010228:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001022e:	5b                   	pop    ebx
c001022f:	5e                   	pop    esi
c0010230:	c3                   	ret    
c0010231:	90                   	nop

c0010232 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0010232:	83 ec 1c             	sub    esp,0x1c
c0010235:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010239:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001023d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010241:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010245:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010249:	89 04 24             	mov    DWORD PTR [esp],eax
c001024c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010250:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010254:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010258:	83 ec 08             	sub    esp,0x8
c001025b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001025f:	50                   	push   eax
c0010260:	e8 25 e1 ff ff       	call   c000e38a <Device::Device(char const*)>
c0010265:	83 c4 10             	add    esp,0x10
c0010268:	ba b0 4e 02 c0       	mov    edx,0xc0024eb0
c001026d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010271:	89 10                	mov    DWORD PTR [eax],edx
c0010273:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010277:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001027e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010282:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010289:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001028d:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0010297:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001029b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001029f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00102a3:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00102a9:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00102af:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00102b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00102b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00102ba:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00102c0:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00102c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00102ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00102ce:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00102d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00102d8:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00102e2:	90                   	nop
c00102e3:	83 c4 1c             	add    esp,0x1c
c00102e6:	c3                   	ret    
c00102e7:	90                   	nop

c00102e8 <LogicalDisk::assignDriveLetter()>:
c00102e8:	55                   	push   ebp
c00102e9:	57                   	push   edi
c00102ea:	56                   	push   esi
c00102eb:	53                   	push   ebx
c00102ec:	83 ec 14             	sub    esp,0x14
c00102ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00102f3:	8b 3d 40 82 02 c0    	mov    edi,DWORD PTR ds:0xc0028240
c00102f9:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00102ff:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010303:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0010309:	8b 3d 44 82 02 c0    	mov    edi,DWORD PTR ds:0xc0028244
c001030f:	3c 01                	cmp    al,0x1
c0010311:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0010315:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010319:	19 c0                	sbb    eax,eax
c001031b:	83 e0 02             	and    eax,0x2
c001031e:	83 c0 41             	add    eax,0x41
c0010321:	0f be e8             	movsx  ebp,al
c0010324:	3c 43                	cmp    al,0x43
c0010326:	75 10                	jne    c0010338 <LogicalDisk::assignDriveLetter()+0x50>
c0010328:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001032f:	75 5d                	jne    c001038e <LogicalDisk::assignDriveLetter()+0xa6>
c0010331:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0010336:	75 56                	jne    c001038e <LogicalDisk::assignDriveLetter()+0xa6>
c0010338:	8d 75 bf             	lea    esi,[ebp-0x41]
c001033b:	ba 01 00 00 00       	mov    edx,0x1
c0010340:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010344:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0010348:	d3 e2                	shl    edx,cl
c001034a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001034e:	89 d7                	mov    edi,edx
c0010350:	89 d6                	mov    esi,edx
c0010352:	c1 ff 1f             	sar    edi,0x1f
c0010355:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0010359:	21 f9                	and    ecx,edi
c001035b:	09 d1                	or     ecx,edx
c001035d:	75 2f                	jne    c001038e <LogicalDisk::assignDriveLetter()+0xa6>
c001035f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0010363:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010367:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001036d:	09 f2                	or     edx,esi
c001036f:	89 15 40 82 02 c0    	mov    DWORD PTR ds:0xc0028240,edx
c0010375:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010379:	09 fa                	or     edx,edi
c001037b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001037f:	89 15 44 82 02 c0    	mov    DWORD PTR ds:0xc0028244,edx
c0010385:	89 1c bd 60 82 02 c0 	mov    DWORD PTR [edi*4-0x3ffd7da0],ebx
c001038c:	eb 08                	jmp    c0010396 <LogicalDisk::assignDriveLetter()+0xae>
c001038e:	45                   	inc    ebp
c001038f:	40                   	inc    eax
c0010390:	3c 5b                	cmp    al,0x5b
c0010392:	75 90                	jne    c0010324 <LogicalDisk::assignDriveLetter()+0x3c>
c0010394:	31 c0                	xor    eax,eax
c0010396:	83 c4 14             	add    esp,0x14
c0010399:	5b                   	pop    ebx
c001039a:	5e                   	pop    esi
c001039b:	5f                   	pop    edi
c001039c:	5d                   	pop    ebp
c001039d:	c3                   	ret    

c001039e <LogicalDisk::mount()>:
c001039e:	56                   	push   esi
c001039f:	53                   	push   ebx
c00103a0:	53                   	push   ebx
c00103a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00103a5:	8b 1d d4 7d 02 c0    	mov    ebx,DWORD PTR ds:0xc0027dd4
c00103ab:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00103b5:	85 db                	test   ebx,ebx
c00103b7:	74 27                	je     c00103e0 <LogicalDisk::mount()+0x42>
c00103b9:	51                   	push   ecx
c00103ba:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00103c1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00103c3:	83 e8 41             	sub    eax,0x41
c00103c6:	50                   	push   eax
c00103c7:	56                   	push   esi
c00103c8:	53                   	push   ebx
c00103c9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00103cc:	83 c4 10             	add    esp,0x10
c00103cf:	84 c0                	test   al,al
c00103d1:	74 08                	je     c00103db <LogicalDisk::mount()+0x3d>
c00103d3:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00103d9:	eb 07                	jmp    c00103e2 <LogicalDisk::mount()+0x44>
c00103db:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00103de:	eb d5                	jmp    c00103b5 <LogicalDisk::mount()+0x17>
c00103e0:	31 c0                	xor    eax,eax
c00103e2:	5a                   	pop    edx
c00103e3:	5b                   	pop    ebx
c00103e4:	5e                   	pop    esi
c00103e5:	c3                   	ret    

c00103e6 <LogicalDisk::unmount()>:
c00103e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103ea:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00103f4:	c3                   	ret    
c00103f5:	90                   	nop

c00103f6 <LogicalDisk::eject()>:
c00103f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103fa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0010400:	8b 10                	mov    edx,DWORD PTR [eax]
c0010402:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010406:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0010409:	90                   	nop

c001040a <LogicalDisk::unassignDriveLetter()>:
c001040a:	57                   	push   edi
c001040b:	56                   	push   esi
c001040c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010410:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0010417:	84 c9                	test   cl,cl
c0010419:	75 0f                	jne    c001042a <LogicalDisk::unassignDriveLetter()+0x20>
c001041b:	c7 44 24 0c 88 4e 02 c0 	mov    DWORD PTR [esp+0xc],0xc0024e88
c0010423:	5e                   	pop    esi
c0010424:	5f                   	pop    edi
c0010425:	e9 85 44 00 00       	jmp    c00148af <Krnl::panic(char const*)>
c001042a:	83 e9 41             	sub    ecx,0x41
c001042d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0010434:	b8 01 00 00 00       	mov    eax,0x1
c0010439:	c7 04 8d 60 82 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7da0],0x0
c0010444:	d3 e0                	shl    eax,cl
c0010446:	89 c7                	mov    edi,eax
c0010448:	f7 d0                	not    eax
c001044a:	c1 ff 1f             	sar    edi,0x1f
c001044d:	21 05 40 82 02 c0    	and    DWORD PTR ds:0xc0028240,eax
c0010453:	89 fe                	mov    esi,edi
c0010455:	f7 d6                	not    esi
c0010457:	21 35 44 82 02 c0    	and    DWORD PTR ds:0xc0028244,esi
c001045d:	5e                   	pop    esi
c001045e:	5f                   	pop    edi
c001045f:	c3                   	ret    

c0010460 <LogicalDisk::read(unsigned long long, int, void*)>:
c0010460:	57                   	push   edi
c0010461:	56                   	push   esi
c0010462:	53                   	push   ebx
c0010463:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010467:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001046b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001046f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010473:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010479:	77 41                	ja     c00104bc <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001047b:	99                   	cdq    
c001047c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010482:	01 c8                	add    eax,ecx
c0010484:	11 da                	adc    edx,ebx
c0010486:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001048c:	19 d7                	sbb    edi,edx
c001048e:	72 33                	jb     c00104c3 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0010490:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010496:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001049c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00104a0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00104a4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00104aa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00104b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00104b4:	5b                   	pop    ebx
c00104b5:	5e                   	pop    esi
c00104b6:	5f                   	pop    edi
c00104b7:	e9 e2 0a 00 00       	jmp    c0010f9e <VCache::read(unsigned long long, int, void*)>
c00104bc:	b8 05 00 00 00       	mov    eax,0x5
c00104c1:	eb 05                	jmp    c00104c8 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00104c3:	b8 07 00 00 00       	mov    eax,0x7
c00104c8:	5b                   	pop    ebx
c00104c9:	5e                   	pop    esi
c00104ca:	5f                   	pop    edi
c00104cb:	c3                   	ret    

c00104cc <LogicalDisk::write(unsigned long long, int, void*)>:
c00104cc:	57                   	push   edi
c00104cd:	56                   	push   esi
c00104ce:	53                   	push   ebx
c00104cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00104d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00104d7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00104db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00104df:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00104e5:	77 41                	ja     c0010528 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00104e7:	99                   	cdq    
c00104e8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00104ee:	01 c8                	add    eax,ecx
c00104f0:	11 da                	adc    edx,ebx
c00104f2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00104f8:	19 d7                	sbb    edi,edx
c00104fa:	72 33                	jb     c001052f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00104fc:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010502:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010508:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001050c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010510:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010516:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001051c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010520:	5b                   	pop    ebx
c0010521:	5e                   	pop    esi
c0010522:	5f                   	pop    edi
c0010523:	e9 7c 09 00 00       	jmp    c0010ea4 <VCache::write(unsigned long long, int, void*)>
c0010528:	b8 05 00 00 00       	mov    eax,0x5
c001052d:	eb 05                	jmp    c0010534 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001052f:	b8 07 00 00 00       	mov    eax,0x7
c0010534:	5b                   	pop    ebx
c0010535:	5e                   	pop    esi
c0010536:	5f                   	pop    edi
c0010537:	c3                   	ret    

c0010538 <Mouse::Mouse(char const*)>:
c0010538:	83 ec 0c             	sub    esp,0xc
c001053b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001053f:	83 ec 08             	sub    esp,0x8
c0010542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010546:	50                   	push   eax
c0010547:	e8 3e de ff ff       	call   c000e38a <Device::Device(char const*)>
c001054c:	83 c4 10             	add    esp,0x10
c001054f:	ba dc 4e 02 c0       	mov    edx,0xc0024edc
c0010554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010558:	89 10                	mov    DWORD PTR [eax],edx
c001055a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001055e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0010568:	90                   	nop
c0010569:	83 c4 0c             	add    esp,0xc
c001056c:	c3                   	ret    
c001056d:	90                   	nop
c001056e:	66 90                	xchg   ax,ax

c0010570 <Mouse::~Mouse()>:
c0010570:	83 ec 0c             	sub    esp,0xc
c0010573:	ba dc 4e 02 c0       	mov    edx,0xc0024edc
c0010578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001057c:	89 10                	mov    DWORD PTR [eax],edx
c001057e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010582:	83 ec 0c             	sub    esp,0xc
c0010585:	50                   	push   eax
c0010586:	e8 c9 da ff ff       	call   c000e054 <Device::~Device()>
c001058b:	83 c4 10             	add    esp,0x10
c001058e:	90                   	nop
c001058f:	83 c4 0c             	add    esp,0xc
c0010592:	c3                   	ret    
c0010593:	90                   	nop

c0010594 <Mouse::~Mouse()>:
c0010594:	83 ec 0c             	sub    esp,0xc
c0010597:	83 ec 0c             	sub    esp,0xc
c001059a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001059e:	e8 cd ff ff ff       	call   c0010570 <Mouse::~Mouse()>
c00105a3:	83 c4 10             	add    esp,0x10
c00105a6:	83 ec 08             	sub    esp,0x8
c00105a9:	68 58 01 00 00       	push   0x158
c00105ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105b2:	e8 67 c6 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00105b7:	83 c4 10             	add    esp,0x10
c00105ba:	83 c4 0c             	add    esp,0xc
c00105bd:	c3                   	ret    

c00105be <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00105be:	55                   	push   ebp
c00105bf:	57                   	push   edi
c00105c0:	56                   	push   esi
c00105c1:	53                   	push   ebx
c00105c2:	81 ec 28 01 00 00    	sub    esp,0x128
c00105c8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00105cf:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00105d6:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00105dd:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00105e4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00105e8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00105ec:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00105f3:	e8 8e de ff ff       	call   c000e486 <Device::getName()>
c00105f8:	5a                   	pop    edx
c00105f9:	59                   	pop    ecx
c00105fa:	50                   	push   eax
c00105fb:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00105ff:	55                   	push   ebp
c0010600:	e8 3b 01 ff ff       	call   c0000740 <strcpy>
c0010605:	5b                   	pop    ebx
c0010606:	58                   	pop    eax
c0010607:	68 00 4f 02 c0       	push   0xc0024f00
c001060c:	55                   	push   ebp
c001060d:	e8 6e 02 ff ff       	call   c0000880 <strcat>
c0010612:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0010619:	e8 f1 93 ff ff       	call   c0009a0f <malloc>
c001061e:	83 c4 0c             	add    esp,0xc
c0010621:	89 c3                	mov    ebx,eax
c0010623:	57                   	push   edi
c0010624:	56                   	push   esi
c0010625:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010629:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001062d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0010634:	55                   	push   ebp
c0010635:	50                   	push   eax
c0010636:	e8 f7 fb ff ff       	call   c0010232 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001063b:	83 c4 14             	add    esp,0x14
c001063e:	53                   	push   ebx
c001063f:	e8 a4 fc ff ff       	call   c00102e8 <LogicalDisk::assignDriveLetter()>
c0010644:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010647:	e8 52 fd ff ff       	call   c001039e <LogicalDisk::mount()>
c001064c:	58                   	pop    eax
c001064d:	5a                   	pop    edx
c001064e:	53                   	push   ebx
c001064f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010656:	e8 2b db ff ff       	call   c000e186 <Device::addChild(Device*)>
c001065b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010661:	5b                   	pop    ebx
c0010662:	5e                   	pop    esi
c0010663:	5f                   	pop    edi
c0010664:	5d                   	pop    ebp
c0010665:	c3                   	ret    

c0010666 <createPartitionsForDisk(PhysicalDisk*)>:
c0010666:	55                   	push   ebp
c0010667:	57                   	push   edi
c0010668:	56                   	push   esi
c0010669:	53                   	push   ebx
c001066a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010670:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0010677:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001067d:	3d 00 02 00 00       	cmp    eax,0x200
c0010682:	74 27                	je     c00106ab <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0010684:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001068a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0010690:	83 ec 10             	sub    esp,0x10
c0010693:	0f a4 f7 0a          	shld   edi,esi,0xa
c0010697:	99                   	cdq    
c0010698:	c1 e6 0a             	shl    esi,0xa
c001069b:	52                   	push   edx
c001069c:	89 fd                	mov    ebp,edi
c001069e:	50                   	push   eax
c001069f:	55                   	push   ebp
c00106a0:	56                   	push   esi
c00106a1:	e8 de 1e 01 00       	call   c0022584 <__udivdi3>
c00106a6:	e9 b1 00 00 00       	jmp    c001075c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00106ab:	83 ec 0c             	sub    esp,0xc
c00106ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106b0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00106b4:	56                   	push   esi
c00106b5:	6a 01                	push   0x1
c00106b7:	6a 00                	push   0x0
c00106b9:	6a 00                	push   0x0
c00106bb:	53                   	push   ebx
c00106bc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00106bf:	83 c4 20             	add    esp,0x20
c00106c2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00106ca:	75 0a                	jne    c00106d6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00106cc:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00106d4:	74 2c                	je     c0010702 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00106d6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00106dc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00106e2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00106e8:	83 ec 10             	sub    esp,0x10
c00106eb:	0f a4 c2 0a          	shld   edx,eax,0xa
c00106ef:	89 f7                	mov    edi,esi
c00106f1:	c1 e0 0a             	shl    eax,0xa
c00106f4:	c1 ff 1f             	sar    edi,0x1f
c00106f7:	57                   	push   edi
c00106f8:	56                   	push   esi
c00106f9:	52                   	push   edx
c00106fa:	50                   	push   eax
c00106fb:	e8 84 1e 01 00       	call   c0022584 <__udivdi3>
c0010700:	eb 5a                	jmp    c001075c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010702:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0010709:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0010710:	83 e1 7f             	and    ecx,0x7f
c0010713:	83 e0 7f             	and    eax,0x7f
c0010716:	01 c1                	add    ecx,eax
c0010718:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001071f:	83 e0 7f             	and    eax,0x7f
c0010722:	01 c1                	add    ecx,eax
c0010724:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001072b:	83 e0 7f             	and    eax,0x7f
c001072e:	00 c1                	add    cl,al
c0010730:	74 41                	je     c0010773 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0010732:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010738:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001073e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010744:	83 ec 10             	sub    esp,0x10
c0010747:	0f a4 c2 0a          	shld   edx,eax,0xa
c001074b:	89 f7                	mov    edi,esi
c001074d:	c1 e0 0a             	shl    eax,0xa
c0010750:	c1 ff 1f             	sar    edi,0x1f
c0010753:	57                   	push   edi
c0010754:	56                   	push   esi
c0010755:	52                   	push   edx
c0010756:	50                   	push   eax
c0010757:	e8 28 1e 01 00       	call   c0022584 <__udivdi3>
c001075c:	83 c4 14             	add    esp,0x14
c001075f:	52                   	push   edx
c0010760:	50                   	push   eax
c0010761:	6a 00                	push   0x0
c0010763:	6a 00                	push   0x0
c0010765:	53                   	push   ebx
c0010766:	e8 53 fe ff ff       	call   c00105be <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001076b:	83 c4 20             	add    esp,0x20
c001076e:	e9 79 01 00 00       	jmp    c00108ec <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0010773:	89 f0                	mov    eax,esi
c0010775:	31 f6                	xor    esi,esi
c0010777:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001077e:	75 02                	jne    c0010782 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0010780:	89 f1                	mov    ecx,esi
c0010782:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0010789:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0010790:	c1 e2 08             	shl    edx,0x8
c0010793:	c1 e7 10             	shl    edi,0x10
c0010796:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001079e:	09 fa                	or     edx,edi
c00107a0:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00107a8:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00107af:	83 c0 10             	add    eax,0x10
c00107b2:	09 fa                	or     edx,edi
c00107b4:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00107bb:	c1 e7 18             	shl    edi,0x18
c00107be:	09 fa                	or     edx,edi
c00107c0:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00107c7:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00107cb:	c1 e7 10             	shl    edi,0x10
c00107ce:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00107d5:	c1 e2 08             	shl    edx,0x8
c00107d8:	09 fa                	or     edx,edi
c00107da:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00107e1:	09 fa                	or     edx,edi
c00107e3:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00107ea:	c1 e7 18             	shl    edi,0x18
c00107ed:	09 fa                	or     edx,edi
c00107ef:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00107f3:	46                   	inc    esi
c00107f4:	83 fe 04             	cmp    esi,0x4
c00107f7:	0f 85 7a ff ff ff    	jne    c0010777 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00107fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010801:	83 f0 01             	xor    eax,0x1
c0010804:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010808:	75 57                	jne    c0010861 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001080a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001080e:	83 f0 01             	xor    eax,0x1
c0010811:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0010815:	75 4a                	jne    c0010861 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010817:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001081b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0010823:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001082b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010831:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010837:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001083d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010841:	89 f7                	mov    edi,esi
c0010843:	c1 e0 0a             	shl    eax,0xa
c0010846:	c1 ff 1f             	sar    edi,0x1f
c0010849:	57                   	push   edi
c001084a:	56                   	push   esi
c001084b:	52                   	push   edx
c001084c:	50                   	push   eax
c001084d:	e8 32 1d 01 00       	call   c0022584 <__udivdi3>
c0010852:	83 c4 10             	add    esp,0x10
c0010855:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010859:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001085d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010861:	84 c9                	test   cl,cl
c0010863:	74 53                	je     c00108b8 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0010865:	0f b6 c9             	movzx  ecx,cl
c0010868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001086c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010870:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010874:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010878:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001087c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010880:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0010884:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0010888:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001088c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010890:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010894:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010898:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c001089c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00108a0:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00108a4:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00108a8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00108ac:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00108b0:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00108b4:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00108b8:	31 ed                	xor    ebp,ebp
c00108ba:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00108be:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00108c2:	89 f8                	mov    eax,edi
c00108c4:	09 f0                	or     eax,esi
c00108c6:	74 1e                	je     c00108e6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00108c8:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00108cc:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00108d0:	89 d1                	mov    ecx,edx
c00108d2:	09 c1                	or     ecx,eax
c00108d4:	74 10                	je     c00108e6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00108d6:	83 ec 0c             	sub    esp,0xc
c00108d9:	57                   	push   edi
c00108da:	56                   	push   esi
c00108db:	52                   	push   edx
c00108dc:	50                   	push   eax
c00108dd:	53                   	push   ebx
c00108de:	e8 db fc ff ff       	call   c00105be <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00108e3:	83 c4 20             	add    esp,0x20
c00108e6:	45                   	inc    ebp
c00108e7:	83 fd 04             	cmp    ebp,0x4
c00108ea:	75 ce                	jne    c00108ba <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00108ec:	81 c4 5c 02 00 00    	add    esp,0x25c
c00108f2:	5b                   	pop    ebx
c00108f3:	5e                   	pop    esi
c00108f4:	5f                   	pop    edi
c00108f5:	5d                   	pop    ebp
c00108f6:	c3                   	ret    
c00108f7:	90                   	nop

c00108f8 <Serial::Serial(char const*)>:
c00108f8:	83 ec 0c             	sub    esp,0xc
c00108fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ff:	83 ec 08             	sub    esp,0x8
c0010902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010906:	50                   	push   eax
c0010907:	e8 7e da ff ff       	call   c000e38a <Device::Device(char const*)>
c001090c:	83 c4 10             	add    esp,0x10
c001090f:	ba 14 4f 02 c0       	mov    edx,0xc0024f14
c0010914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010918:	89 10                	mov    DWORD PTR [eax],edx
c001091a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001091e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0010928:	90                   	nop
c0010929:	83 c4 0c             	add    esp,0xc
c001092c:	c3                   	ret    
c001092d:	90                   	nop
c001092e:	66 90                	xchg   ax,ax

c0010930 <Serial::~Serial()>:
c0010930:	83 ec 0c             	sub    esp,0xc
c0010933:	ba 14 4f 02 c0       	mov    edx,0xc0024f14
c0010938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001093c:	89 10                	mov    DWORD PTR [eax],edx
c001093e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010942:	83 ec 0c             	sub    esp,0xc
c0010945:	50                   	push   eax
c0010946:	e8 09 d7 ff ff       	call   c000e054 <Device::~Device()>
c001094b:	83 c4 10             	add    esp,0x10
c001094e:	90                   	nop
c001094f:	83 c4 0c             	add    esp,0xc
c0010952:	c3                   	ret    
c0010953:	90                   	nop

c0010954 <Serial::~Serial()>:
c0010954:	83 ec 0c             	sub    esp,0xc
c0010957:	83 ec 0c             	sub    esp,0xc
c001095a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001095e:	e8 cd ff ff ff       	call   c0010930 <Serial::~Serial()>
c0010963:	83 c4 10             	add    esp,0x10
c0010966:	83 ec 08             	sub    esp,0x8
c0010969:	68 58 01 00 00       	push   0x158
c001096e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010972:	e8 a7 c2 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0010977:	83 c4 10             	add    esp,0x10
c001097a:	83 c4 0c             	add    esp,0xc
c001097d:	c3                   	ret    
c001097e:	66 90                	xchg   ax,ax

c0010980 <Timer::Timer(char const*)>:
c0010980:	83 ec 0c             	sub    esp,0xc
c0010983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010987:	83 ec 08             	sub    esp,0x8
c001098a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001098e:	50                   	push   eax
c001098f:	e8 f6 d9 ff ff       	call   c000e38a <Device::Device(char const*)>
c0010994:	83 c4 10             	add    esp,0x10
c0010997:	ba 58 4f 02 c0       	mov    edx,0xc0024f58
c001099c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a0:	89 10                	mov    DWORD PTR [eax],edx
c00109a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a6:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00109b0:	90                   	nop
c00109b1:	83 c4 0c             	add    esp,0xc
c00109b4:	c3                   	ret    
c00109b5:	90                   	nop
c00109b6:	66 90                	xchg   ax,ax

c00109b8 <Timer::~Timer()>:
c00109b8:	83 ec 0c             	sub    esp,0xc
c00109bb:	ba 58 4f 02 c0       	mov    edx,0xc0024f58
c00109c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c4:	89 10                	mov    DWORD PTR [eax],edx
c00109c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ca:	83 ec 0c             	sub    esp,0xc
c00109cd:	50                   	push   eax
c00109ce:	e8 81 d6 ff ff       	call   c000e054 <Device::~Device()>
c00109d3:	83 c4 10             	add    esp,0x10
c00109d6:	90                   	nop
c00109d7:	83 c4 0c             	add    esp,0xc
c00109da:	c3                   	ret    
c00109db:	90                   	nop

c00109dc <Timer::~Timer()>:
c00109dc:	83 ec 0c             	sub    esp,0xc
c00109df:	83 ec 0c             	sub    esp,0xc
c00109e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109e6:	e8 cd ff ff ff       	call   c00109b8 <Timer::~Timer()>
c00109eb:	83 c4 10             	add    esp,0x10
c00109ee:	83 ec 08             	sub    esp,0x8
c00109f1:	68 5c 01 00 00       	push   0x15c
c00109f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109fa:	e8 1f c2 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00109ff:	83 c4 10             	add    esp,0x10
c0010a02:	83 c4 0c             	add    esp,0xc
c0010a05:	c3                   	ret    

c0010a06 <Timer::read()>:
c0010a06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a0a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010a10:	c3                   	ret    

c0010a11 <timerHandler(unsigned int)>:
c0010a11:	56                   	push   esi
c0010a12:	53                   	push   ebx
c0010a13:	51                   	push   ecx
c0010a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a18:	01 05 cc 82 02 c0    	add    DWORD PTR ds:0xc00282cc,eax
c0010a1e:	80 3d ad 7c 02 c0 00 	cmp    BYTE PTR ds:0xc0027cad,0x0
c0010a25:	0f 84 49 01 00 00    	je     c0010b74 <timerHandler(unsigned int)+0x163>
c0010a2b:	fa                   	cli    
c0010a2c:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0010a32:	83 ec 0c             	sub    esp,0xc
c0010a35:	ff 05 c4 91 02 c0    	inc    DWORD PTR ds:0xc00291c4
c0010a3b:	68 d8 91 02 c0       	push   0xc00291d8
c0010a40:	e8 0f 21 01 00       	call   c0022b54 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010a45:	83 c4 10             	add    esp,0x10
c0010a48:	84 c0                	test   al,al
c0010a4a:	0f 85 a0 00 00 00    	jne    c0010af0 <timerHandler(unsigned int)+0xdf>
c0010a50:	83 ec 0c             	sub    esp,0xc
c0010a53:	68 d8 91 02 c0       	push   0xc00291d8
c0010a58:	e8 13 21 01 00       	call   c0022b70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010a5d:	83 c4 10             	add    esp,0x10
c0010a60:	89 c6                	mov    esi,eax
c0010a62:	66 90                	xchg   ax,ax
c0010a64:	83 ec 0c             	sub    esp,0xc
c0010a67:	68 d8 91 02 c0       	push   0xc00291d8
c0010a6c:	e8 ff 20 01 00       	call   c0022b70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010a71:	c7 04 24 d8 91 02 c0 	mov    DWORD PTR [esp],0xc00291d8
c0010a78:	89 c3                	mov    ebx,eax
c0010a7a:	e8 f9 20 01 00       	call   c0022b78 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0010a7f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010a82:	83 c4 10             	add    esp,0x10
c0010a85:	3b 05 cc 82 02 c0    	cmp    eax,DWORD PTR ds:0xc00282cc
c0010a8b:	77 23                	ja     c0010ab0 <timerHandler(unsigned int)+0x9f>
c0010a8d:	83 ec 0c             	sub    esp,0xc
c0010a90:	53                   	push   ebx
c0010a91:	e8 0e 80 00 00       	call   c0018aa4 <unblockTask(ThreadControlBlock*)>
c0010a96:	83 c4 10             	add    esp,0x10
c0010a99:	39 de                	cmp    esi,ebx
c0010a9b:	75 27                	jne    c0010ac4 <timerHandler(unsigned int)+0xb3>
c0010a9d:	83 ec 0c             	sub    esp,0xc
c0010aa0:	68 d8 91 02 c0       	push   0xc00291d8
c0010aa5:	e8 c6 20 01 00       	call   c0022b70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010aaa:	89 c6                	mov    esi,eax
c0010aac:	eb 12                	jmp    c0010ac0 <timerHandler(unsigned int)+0xaf>
c0010aae:	66 90                	xchg   ax,ax
c0010ab0:	52                   	push   edx
c0010ab1:	52                   	push   edx
c0010ab2:	53                   	push   ebx
c0010ab3:	68 d8 91 02 c0       	push   0xc00291d8
c0010ab8:	e8 73 21 01 00       	call   c0022c30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0010abd:	8d 76 00             	lea    esi,[esi+0x0]
c0010ac0:	83 c4 10             	add    esp,0x10
c0010ac3:	90                   	nop
c0010ac4:	83 ec 0c             	sub    esp,0xc
c0010ac7:	68 d8 91 02 c0       	push   0xc00291d8
c0010acc:	e8 83 20 01 00       	call   c0022b54 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010ad1:	83 c4 10             	add    esp,0x10
c0010ad4:	84 c0                	test   al,al
c0010ad6:	75 18                	jne    c0010af0 <timerHandler(unsigned int)+0xdf>
c0010ad8:	83 ec 0c             	sub    esp,0xc
c0010adb:	68 d8 91 02 c0       	push   0xc00291d8
c0010ae0:	e8 8b 20 01 00       	call   c0022b70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010ae5:	83 c4 10             	add    esp,0x10
c0010ae8:	39 f0                	cmp    eax,esi
c0010aea:	0f 85 74 ff ff ff    	jne    c0010a64 <timerHandler(unsigned int)+0x53>
c0010af0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010af5:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c0010af9:	74 41                	je     c0010b3c <timerHandler(unsigned int)+0x12b>
c0010afb:	80 3d ac 7c 02 c0 00 	cmp    BYTE PTR ds:0xc0027cac,0x0
c0010b02:	74 38                	je     c0010b3c <timerHandler(unsigned int)+0x12b>
c0010b04:	fa                   	cli    
c0010b05:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0010b0b:	a1 cc 82 02 c0       	mov    eax,ds:0xc00282cc
c0010b10:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010b16:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c0010b19:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010b1f:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c0010b22:	72 08                	jb     c0010b2c <timerHandler(unsigned int)+0x11b>
c0010b24:	e8 bf 7a 00 00       	call   c00185e8 <schedule()>
c0010b29:	8d 76 00             	lea    esi,[esi+0x0]
c0010b2c:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0010b31:	48                   	dec    eax
c0010b32:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0010b37:	75 03                	jne    c0010b3c <timerHandler(unsigned int)+0x12b>
c0010b39:	fb                   	sti    
c0010b3a:	66 90                	xchg   ax,ax
c0010b3c:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c0010b41:	48                   	dec    eax
c0010b42:	a3 c4 91 02 c0       	mov    ds:0xc00291c4,eax
c0010b47:	75 1b                	jne    c0010b64 <timerHandler(unsigned int)+0x153>
c0010b49:	83 3d c0 91 02 c0 00 	cmp    DWORD PTR ds:0xc00291c0,0x0
c0010b50:	74 12                	je     c0010b64 <timerHandler(unsigned int)+0x153>
c0010b52:	c7 05 c0 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291c0,0x0
c0010b5c:	e8 87 7a 00 00       	call   c00185e8 <schedule()>
c0010b61:	8d 76 00             	lea    esi,[esi+0x0]
c0010b64:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0010b69:	48                   	dec    eax
c0010b6a:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0010b6f:	75 03                	jne    c0010b74 <timerHandler(unsigned int)+0x163>
c0010b71:	fb                   	sti    
c0010b72:	66 90                	xchg   ax,ax
c0010b74:	58                   	pop    eax
c0010b75:	5b                   	pop    ebx
c0010b76:	5e                   	pop    esi
c0010b77:	c3                   	ret    

c0010b78 <setupTimer(int)>:
c0010b78:	57                   	push   edi
c0010b79:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0010b7e:	56                   	push   esi
c0010b7f:	53                   	push   ebx
c0010b80:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010b84:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010b8a:	83 ec 0c             	sub    esp,0xc
c0010b8d:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010b93:	e8 ee d8 ff ff       	call   c000e486 <Device::getName()>
c0010b98:	83 c4 10             	add    esp,0x10
c0010b9b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010b9e:	0f 85 94 00 00 00    	jne    c0010c38 <setupTimer(int)+0xc0>
c0010ba4:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0010ba9:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0010bb0:	0f 84 82 00 00 00    	je     c0010c38 <setupTimer(int)+0xc0>
c0010bb6:	83 ec 0c             	sub    esp,0xc
c0010bb9:	68 5c 01 00 00       	push   0x15c
c0010bbe:	e8 4c 8e ff ff       	call   c0009a0f <malloc>
c0010bc3:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bc6:	89 c3                	mov    ebx,eax
c0010bc8:	e8 93 15 01 00       	call   c0022160 <PIT::PIT()>
c0010bcd:	59                   	pop    ecx
c0010bce:	5f                   	pop    edi
c0010bcf:	53                   	push   ebx
c0010bd0:	ff 35 a8 7c 02 c0    	push   DWORD PTR ds:0xc0027ca8
c0010bd6:	e8 ab d5 ff ff       	call   c000e186 <Device::addChild(Device*)>
c0010bdb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010bdd:	6a 00                	push   0x0
c0010bdf:	6a 00                	push   0x0
c0010be1:	56                   	push   esi
c0010be2:	53                   	push   ebx
c0010be3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010be6:	83 c4 14             	add    esp,0x14
c0010be9:	68 60 01 00 00       	push   0x160
c0010bee:	e8 1c 8e ff ff       	call   c0009a0f <malloc>
c0010bf3:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bf6:	89 c7                	mov    edi,eax
c0010bf8:	e8 17 14 01 00       	call   c0022014 <APICTimer::APICTimer()>
c0010bfd:	6a 00                	push   0x0
c0010bff:	6a 00                	push   0x0
c0010c01:	56                   	push   esi
c0010c02:	57                   	push   edi
c0010c03:	e8 0c 13 01 00       	call   c0021f14 <APICTimer::open(int, int, void*)>
c0010c08:	83 c4 20             	add    esp,0x20
c0010c0b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010c0d:	6a 00                	push   0x0
c0010c0f:	6a 00                	push   0x0
c0010c11:	6a 00                	push   0x0
c0010c13:	53                   	push   ebx
c0010c14:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010c17:	58                   	pop    eax
c0010c18:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0010c1d:	5a                   	pop    edx
c0010c1e:	57                   	push   edi
c0010c1f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010c25:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010c2b:	e8 56 d5 ff ff       	call   c000e186 <Device::addChild(Device*)>
c0010c30:	83 c4 10             	add    esp,0x10
c0010c33:	eb 37                	jmp    c0010c6c <setupTimer(int)+0xf4>
c0010c35:	8d 76 00             	lea    esi,[esi+0x0]
c0010c38:	83 ec 0c             	sub    esp,0xc
c0010c3b:	68 5c 01 00 00       	push   0x15c
c0010c40:	e8 ca 8d ff ff       	call   c0009a0f <malloc>
c0010c45:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c48:	89 c3                	mov    ebx,eax
c0010c4a:	e8 11 15 01 00       	call   c0022160 <PIT::PIT()>
c0010c4f:	58                   	pop    eax
c0010c50:	5a                   	pop    edx
c0010c51:	53                   	push   ebx
c0010c52:	ff 35 a8 7c 02 c0    	push   DWORD PTR ds:0xc0027ca8
c0010c58:	e8 29 d5 ff ff       	call   c000e186 <Device::addChild(Device*)>
c0010c5d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010c5f:	6a 00                	push   0x0
c0010c61:	6a 00                	push   0x0
c0010c63:	56                   	push   esi
c0010c64:	53                   	push   ebx
c0010c65:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010c68:	83 c4 20             	add    esp,0x20
c0010c6b:	90                   	nop
c0010c6c:	89 d8                	mov    eax,ebx
c0010c6e:	5b                   	pop    ebx
c0010c6f:	5e                   	pop    esi
c0010c70:	5f                   	pop    edi
c0010c71:	c3                   	ret    
c0010c72:	66 90                	xchg   ax,ax

c0010c74 <VCache::VCache(PhysicalDisk*)>:
c0010c74:	53                   	push   ebx
c0010c75:	83 ec 18             	sub    esp,0x18
c0010c78:	ba 88 4f 02 c0       	mov    edx,0xc0024f88
c0010c7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c81:	89 10                	mov    DWORD PTR [eax],edx
c0010c83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c87:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0010c8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c92:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0010c99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c9d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0010ca4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0010cab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010caf:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0010cb6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010cbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cc1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0010cc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ccc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cd4:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0010cdb:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0010ce2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ce6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010cea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cee:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0010cf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cf6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010cfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cfe:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010d05:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0010d0d:	83 ec 0c             	sub    esp,0xc
c0010d10:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010d14:	e8 f6 8c ff ff       	call   c0009a0f <malloc>
c0010d19:	83 c4 10             	add    esp,0x10
c0010d1c:	89 c3                	mov    ebx,eax
c0010d1e:	83 ec 0c             	sub    esp,0xc
c0010d21:	53                   	push   ebx
c0010d22:	e8 91 76 00 00       	call   c00183b8 <Mutex::Mutex()>
c0010d27:	83 c4 10             	add    esp,0x10
c0010d2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d2e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010d31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d35:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010d39:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010d3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d40:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0010d47:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010d4b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0010d51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d55:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010d58:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010d5c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0010d62:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010d68:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010d6c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0010d6f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0010d72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d76:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010d7a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010d7e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010d84:	05 00 01 00 00       	add    eax,0x100
c0010d89:	c1 e0 04             	shl    eax,0x4
c0010d8c:	83 ec 0c             	sub    esp,0xc
c0010d8f:	50                   	push   eax
c0010d90:	e8 7a 8c ff ff       	call   c0009a0f <malloc>
c0010d95:	83 c4 10             	add    esp,0x10
c0010d98:	89 c2                	mov    edx,eax
c0010d9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d9e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010da1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010da5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010dac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010db0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010db4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010db8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010dbe:	c1 e0 06             	shl    eax,0x6
c0010dc1:	83 ec 0c             	sub    esp,0xc
c0010dc4:	50                   	push   eax
c0010dc5:	e8 45 8c ff ff       	call   c0009a0f <malloc>
c0010dca:	83 c4 10             	add    esp,0x10
c0010dcd:	89 c2                	mov    edx,eax
c0010dcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dd3:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010dd6:	90                   	nop
c0010dd7:	83 c4 18             	add    esp,0x18
c0010dda:	5b                   	pop    ebx
c0010ddb:	c3                   	ret    

c0010ddc <VCache::invalidateReadBuffer()>:
c0010ddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010de0:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0010de6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010dea:	c3                   	ret    
c0010deb:	90                   	nop

c0010dec <VCache::writeWriteBuffer()>:
c0010dec:	53                   	push   ebx
c0010ded:	83 ec 14             	sub    esp,0x14
c0010df0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010df4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010df7:	8b 10                	mov    edx,DWORD PTR [eax]
c0010df9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010dfc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010dff:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010e02:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010e05:	50                   	push   eax
c0010e06:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010e09:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0010e10:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0010e17:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0010e1b:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0010e22:	83 c4 28             	add    esp,0x28
c0010e25:	5b                   	pop    ebx
c0010e26:	c3                   	ret    
c0010e27:	90                   	nop

c0010e28 <VCache::~VCache()>:
c0010e28:	83 ec 0c             	sub    esp,0xc
c0010e2b:	ba 88 4f 02 c0       	mov    edx,0xc0024f88
c0010e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e34:	89 10                	mov    DWORD PTR [eax],edx
c0010e36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e3a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0010e3d:	84 c0                	test   al,al
c0010e3f:	74 0f                	je     c0010e50 <VCache::~VCache()+0x28>
c0010e41:	83 ec 0c             	sub    esp,0xc
c0010e44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e48:	e8 9f ff ff ff       	call   c0010dec <VCache::writeWriteBuffer()>
c0010e4d:	83 c4 10             	add    esp,0x10
c0010e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e54:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010e57:	83 ec 0c             	sub    esp,0xc
c0010e5a:	50                   	push   eax
c0010e5b:	e8 bf 8b ff ff       	call   c0009a1f <free>
c0010e60:	83 c4 10             	add    esp,0x10
c0010e63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e67:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0010e6a:	83 ec 0c             	sub    esp,0xc
c0010e6d:	50                   	push   eax
c0010e6e:	e8 ac 8b ff ff       	call   c0009a1f <free>
c0010e73:	83 c4 10             	add    esp,0x10
c0010e76:	90                   	nop
c0010e77:	83 c4 0c             	add    esp,0xc
c0010e7a:	c3                   	ret    
c0010e7b:	90                   	nop

c0010e7c <VCache::~VCache()>:
c0010e7c:	83 ec 0c             	sub    esp,0xc
c0010e7f:	83 ec 0c             	sub    esp,0xc
c0010e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e86:	e8 9d ff ff ff       	call   c0010e28 <VCache::~VCache()>
c0010e8b:	83 c4 10             	add    esp,0x10
c0010e8e:	83 ec 08             	sub    esp,0x8
c0010e91:	6a 44                	push   0x44
c0010e93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e97:	e8 82 bd ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0010e9c:	83 c4 10             	add    esp,0x10
c0010e9f:	83 c4 0c             	add    esp,0xc
c0010ea2:	c3                   	ret    
c0010ea3:	90                   	nop

c0010ea4 <VCache::write(unsigned long long, int, void*)>:
c0010ea4:	55                   	push   ebp
c0010ea5:	31 c0                	xor    eax,eax
c0010ea7:	57                   	push   edi
c0010ea8:	56                   	push   esi
c0010ea9:	53                   	push   ebx
c0010eaa:	83 ec 0c             	sub    esp,0xc
c0010ead:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010eb1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010eb5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0010ebc:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0010ec0:	7d 1a                	jge    c0010edc <VCache::write(unsigned long long, int, void*)+0x38>
c0010ec2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010ec5:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010ecb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010ecf:	0f af c8             	imul   ecx,eax
c0010ed2:	01 ca                	add    edx,ecx
c0010ed4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010ed6:	40                   	inc    eax
c0010ed7:	eb e3                	jmp    c0010ebc <VCache::write(unsigned long long, int, void*)+0x18>
c0010ed9:	8d 76 00             	lea    esi,[esi+0x0]
c0010edc:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010ee0:	74 0a                	je     c0010eec <VCache::write(unsigned long long, int, void*)+0x48>
c0010ee2:	53                   	push   ebx
c0010ee3:	e8 f4 fe ff ff       	call   c0010ddc <VCache::invalidateReadBuffer()>
c0010ee8:	58                   	pop    eax
c0010ee9:	8d 76 00             	lea    esi,[esi+0x0]
c0010eec:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010ef0:	74 5e                	je     c0010f50 <VCache::write(unsigned long long, int, void*)+0xac>
c0010ef2:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0010ef5:	89 e8                	mov    eax,ebp
c0010ef7:	99                   	cdq    
c0010ef8:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0010efb:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0010efe:	89 c1                	mov    ecx,eax
c0010f00:	89 d0                	mov    eax,edx
c0010f02:	31 f1                	xor    ecx,esi
c0010f04:	31 f8                	xor    eax,edi
c0010f06:	09 c1                	or     ecx,eax
c0010f08:	75 3a                	jne    c0010f44 <VCache::write(unsigned long long, int, void*)+0xa0>
c0010f0a:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0010f0f:	75 33                	jne    c0010f44 <VCache::write(unsigned long long, int, void*)+0xa0>
c0010f11:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010f14:	89 ef                	mov    edi,ebp
c0010f16:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010f1c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010f20:	0f af f9             	imul   edi,ecx
c0010f23:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0010f26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f28:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010f2b:	40                   	inc    eax
c0010f2c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010f2f:	83 f8 40             	cmp    eax,0x40
c0010f32:	75 60                	jne    c0010f94 <VCache::write(unsigned long long, int, void*)+0xf0>
c0010f34:	83 ec 0c             	sub    esp,0xc
c0010f37:	53                   	push   ebx
c0010f38:	e8 af fe ff ff       	call   c0010dec <VCache::writeWriteBuffer()>
c0010f3d:	83 c4 10             	add    esp,0x10
c0010f40:	eb 52                	jmp    c0010f94 <VCache::write(unsigned long long, int, void*)+0xf0>
c0010f42:	66 90                	xchg   ax,ax
c0010f44:	83 ec 0c             	sub    esp,0xc
c0010f47:	53                   	push   ebx
c0010f48:	e8 9f fe ff ff       	call   c0010dec <VCache::writeWriteBuffer()>
c0010f4d:	83 c4 10             	add    esp,0x10
c0010f50:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010f53:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c0010f58:	7f 22                	jg     c0010f7c <VCache::write(unsigned long long, int, void*)+0xd8>
c0010f5a:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0010f5d:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0010f60:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010f64:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0010f68:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0010f6b:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010f6e:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010f74:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010f78:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f7a:	eb 18                	jmp    c0010f94 <VCache::write(unsigned long long, int, void*)+0xf0>
c0010f7c:	83 ec 0c             	sub    esp,0xc
c0010f7f:	8b 10                	mov    edx,DWORD PTR [eax]
c0010f81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010f85:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010f89:	57                   	push   edi
c0010f8a:	56                   	push   esi
c0010f8b:	50                   	push   eax
c0010f8c:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010f8f:	83 c4 20             	add    esp,0x20
c0010f92:	66 90                	xchg   ax,ax
c0010f94:	83 c4 0c             	add    esp,0xc
c0010f97:	31 c0                	xor    eax,eax
c0010f99:	5b                   	pop    ebx
c0010f9a:	5e                   	pop    esi
c0010f9b:	5f                   	pop    edi
c0010f9c:	5d                   	pop    ebp
c0010f9d:	c3                   	ret    

c0010f9e <VCache::read(unsigned long long, int, void*)>:
c0010f9e:	55                   	push   ebp
c0010f9f:	31 c0                	xor    eax,eax
c0010fa1:	57                   	push   edi
c0010fa2:	56                   	push   esi
c0010fa3:	53                   	push   ebx
c0010fa4:	83 ec 1c             	sub    esp,0x1c
c0010fa7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010fab:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010faf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0010fb3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010fb7:	90                   	nop
c0010fb8:	39 e8                	cmp    eax,ebp
c0010fba:	7d 18                	jge    c0010fd4 <VCache::read(unsigned long long, int, void*)+0x36>
c0010fbc:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010fbf:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010fc5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0010fc9:	0f af c8             	imul   ecx,eax
c0010fcc:	01 ca                	add    edx,ecx
c0010fce:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010fd0:	40                   	inc    eax
c0010fd1:	eb e5                	jmp    c0010fb8 <VCache::read(unsigned long long, int, void*)+0x1a>
c0010fd3:	90                   	nop
c0010fd4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010fd8:	74 0e                	je     c0010fe8 <VCache::read(unsigned long long, int, void*)+0x4a>
c0010fda:	83 ec 0c             	sub    esp,0xc
c0010fdd:	53                   	push   ebx
c0010fde:	e8 09 fe ff ff       	call   c0010dec <VCache::writeWriteBuffer()>
c0010fe3:	83 c4 10             	add    esp,0x10
c0010fe6:	66 90                	xchg   ax,ax
c0010fe8:	83 fd 01             	cmp    ebp,0x1
c0010feb:	0f 85 87 00 00 00    	jne    c0011078 <VCache::read(unsigned long long, int, void*)+0xda>
c0010ff1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010ff4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010ff8:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0010fff:	75 77                	jne    c0011078 <VCache::read(unsigned long long, int, void*)+0xda>
c0011001:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0011004:	89 e9                	mov    ecx,ebp
c0011006:	f7 d9                	neg    ecx
c0011008:	89 c8                	mov    eax,ecx
c001100a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001100e:	c1 f8 1f             	sar    eax,0x1f
c0011011:	21 f1                	and    ecx,esi
c0011013:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011017:	89 c8                	mov    eax,ecx
c0011019:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001101d:	21 f9                	and    ecx,edi
c001101f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0011023:	89 ca                	mov    edx,ecx
c0011025:	74 0d                	je     c0011034 <VCache::read(unsigned long long, int, void*)+0x96>
c0011027:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001102a:	75 08                	jne    c0011034 <VCache::read(unsigned long long, int, void*)+0x96>
c001102c:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c001102f:	74 27                	je     c0011058 <VCache::read(unsigned long long, int, void*)+0xba>
c0011031:	8d 76 00             	lea    esi,[esi+0x0]
c0011034:	83 ec 0c             	sub    esp,0xc
c0011037:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001103b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001103f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0011042:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0011045:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0011047:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001104a:	55                   	push   ebp
c001104b:	52                   	push   edx
c001104c:	50                   	push   eax
c001104d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011051:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0011054:	83 c4 20             	add    esp,0x20
c0011057:	90                   	nop
c0011058:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001105b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001105f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011065:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0011068:	48                   	dec    eax
c0011069:	21 c6                	and    esi,eax
c001106b:	0f af f1             	imul   esi,ecx
c001106e:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0011071:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011073:	eb 23                	jmp    c0011098 <VCache::read(unsigned long long, int, void*)+0xfa>
c0011075:	8d 76 00             	lea    esi,[esi+0x0]
c0011078:	83 ec 0c             	sub    esp,0xc
c001107b:	53                   	push   ebx
c001107c:	e8 5b fd ff ff       	call   c0010ddc <VCache::invalidateReadBuffer()>
c0011081:	5a                   	pop    edx
c0011082:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011085:	8b 10                	mov    edx,DWORD PTR [eax]
c0011087:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001108b:	55                   	push   ebp
c001108c:	57                   	push   edi
c001108d:	56                   	push   esi
c001108e:	50                   	push   eax
c001108f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0011092:	83 c4 20             	add    esp,0x20
c0011095:	8d 76 00             	lea    esi,[esi+0x0]
c0011098:	83 c4 1c             	add    esp,0x1c
c001109b:	31 c0                	xor    eax,eax
c001109d:	5b                   	pop    ebx
c001109e:	5e                   	pop    esi
c001109f:	5f                   	pop    edi
c00110a0:	5d                   	pop    ebp
c00110a1:	c3                   	ret    

c00110a2 <Video::putrect(int, int, int, int, unsigned int)>:
c00110a2:	55                   	push   ebp
c00110a3:	57                   	push   edi
c00110a4:	56                   	push   esi
c00110a5:	53                   	push   ebx
c00110a6:	83 ec 1c             	sub    esp,0x1c
c00110a9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00110ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00110b1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00110b5:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00110b9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00110bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00110c1:	01 df                	add    edi,ebx
c00110c3:	39 fb                	cmp    ebx,edi
c00110c5:	7d 1f                	jge    c00110e6 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00110c7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00110cb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00110cf:	7d 12                	jge    c00110e3 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00110d1:	8b 16                	mov    edx,DWORD PTR [esi]
c00110d3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00110d7:	53                   	push   ebx
c00110d8:	55                   	push   ebp
c00110d9:	45                   	inc    ebp
c00110da:	56                   	push   esi
c00110db:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00110de:	83 c4 10             	add    esp,0x10
c00110e1:	eb e8                	jmp    c00110cb <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00110e3:	43                   	inc    ebx
c00110e4:	eb dd                	jmp    c00110c3 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00110e6:	83 c4 1c             	add    esp,0x1c
c00110e9:	5b                   	pop    ebx
c00110ea:	5e                   	pop    esi
c00110eb:	5f                   	pop    edi
c00110ec:	5d                   	pop    ebp
c00110ed:	c3                   	ret    

c00110ee <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00110ee:	55                   	push   ebp
c00110ef:	57                   	push   edi
c00110f0:	31 ff                	xor    edi,edi
c00110f2:	56                   	push   esi
c00110f3:	53                   	push   ebx
c00110f4:	83 ec 1c             	sub    esp,0x1c
c00110f7:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00110fb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00110ff:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0011106:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001110b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001110f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0011113:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011117:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001111a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001111e:	01 f9                	add    ecx,edi
c0011120:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0011124:	7d 2f                	jge    c0011155 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0011126:	31 f6                	xor    esi,esi
c0011128:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001112c:	01 f2                	add    edx,esi
c001112e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0011132:	7d 1a                	jge    c001114e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0011134:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011137:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001113a:	46                   	inc    esi
c001113b:	51                   	push   ecx
c001113c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011140:	52                   	push   edx
c0011141:	55                   	push   ebp
c0011142:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011145:	83 c4 10             	add    esp,0x10
c0011148:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001114c:	eb da                	jmp    c0011128 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001114e:	47                   	inc    edi
c001114f:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0011153:	eb c5                	jmp    c001111a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0011155:	83 c4 1c             	add    esp,0x1c
c0011158:	5b                   	pop    ebx
c0011159:	5e                   	pop    esi
c001115a:	5f                   	pop    edi
c001115b:	5d                   	pop    ebp
c001115c:	c3                   	ret    
c001115d:	90                   	nop

c001115e <Video::blit(unsigned int*, int, int, int, int)>:
c001115e:	55                   	push   ebp
c001115f:	57                   	push   edi
c0011160:	56                   	push   esi
c0011161:	53                   	push   ebx
c0011162:	83 ec 1c             	sub    esp,0x1c
c0011165:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011169:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001116d:	85 c0                	test   eax,eax
c001116f:	79 02                	jns    c0011173 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0011171:	31 c0                	xor    eax,eax
c0011173:	c1 e0 02             	shl    eax,0x2
c0011176:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001117a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001117e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011182:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0011186:	39 d8                	cmp    eax,ebx
c0011188:	7e 49                	jle    c00111d3 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001118a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0011190:	7c 41                	jl     c00111d3 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0011192:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011196:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001119a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001119e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00111a2:	39 f9                	cmp    ecx,edi
c00111a4:	7e 22                	jle    c00111c8 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00111a6:	83 c5 04             	add    ebp,0x4
c00111a9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00111af:	7c 14                	jl     c00111c5 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00111b1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00111b3:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00111b6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00111ba:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00111be:	56                   	push   esi
c00111bf:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00111c2:	83 c4 10             	add    esp,0x10
c00111c5:	47                   	inc    edi
c00111c6:	eb d2                	jmp    c001119a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00111c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00111cc:	43                   	inc    ebx
c00111cd:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00111d1:	eb ab                	jmp    c001117e <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00111d3:	83 c4 1c             	add    esp,0x1c
c00111d6:	5b                   	pop    ebx
c00111d7:	5e                   	pop    esi
c00111d8:	5f                   	pop    edi
c00111d9:	5d                   	pop    ebp
c00111da:	c3                   	ret    
c00111db:	90                   	nop

c00111dc <Video::clearScreen(unsigned int)>:
c00111dc:	57                   	push   edi
c00111dd:	56                   	push   esi
c00111de:	53                   	push   ebx
c00111df:	31 db                	xor    ebx,ebx
c00111e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00111e5:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00111eb:	7e 1f                	jle    c001120c <Video::clearScreen(unsigned int)+0x30>
c00111ed:	31 ff                	xor    edi,edi
c00111ef:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00111f5:	7e 12                	jle    c0011209 <Video::clearScreen(unsigned int)+0x2d>
c00111f7:	8b 06                	mov    eax,DWORD PTR [esi]
c00111f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00111fd:	53                   	push   ebx
c00111fe:	57                   	push   edi
c00111ff:	47                   	inc    edi
c0011200:	56                   	push   esi
c0011201:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011204:	83 c4 10             	add    esp,0x10
c0011207:	eb e6                	jmp    c00111ef <Video::clearScreen(unsigned int)+0x13>
c0011209:	43                   	inc    ebx
c001120a:	eb d9                	jmp    c00111e5 <Video::clearScreen(unsigned int)+0x9>
c001120c:	5b                   	pop    ebx
c001120d:	5e                   	pop    esi
c001120e:	5f                   	pop    edi
c001120f:	c3                   	ret    

c0011210 <Video::putpixel(int, int, unsigned int)>:
c0011210:	c7 44 24 04 90 4f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024f90
c0011218:	e9 92 36 00 00       	jmp    c00148af <Krnl::panic(char const*)>
c001121d:	90                   	nop

c001121e <Video::Video(char const*)>:
c001121e:	83 ec 0c             	sub    esp,0xc
c0011221:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011225:	83 ec 08             	sub    esp,0x8
c0011228:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001122c:	50                   	push   eax
c001122d:	e8 58 d1 ff ff       	call   c000e38a <Device::Device(char const*)>
c0011232:	83 c4 10             	add    esp,0x10
c0011235:	ba 00 50 02 c0       	mov    edx,0xc0025000
c001123a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001123e:	89 10                	mov    DWORD PTR [eax],edx
c0011240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011244:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001124e:	90                   	nop
c001124f:	83 c4 0c             	add    esp,0xc
c0011252:	c3                   	ret    
c0011253:	90                   	nop

c0011254 <Video::~Video()>:
c0011254:	83 ec 0c             	sub    esp,0xc
c0011257:	ba 00 50 02 c0       	mov    edx,0xc0025000
c001125c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011260:	89 10                	mov    DWORD PTR [eax],edx
c0011262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011266:	83 ec 0c             	sub    esp,0xc
c0011269:	50                   	push   eax
c001126a:	e8 e5 cd ff ff       	call   c000e054 <Device::~Device()>
c001126f:	83 c4 10             	add    esp,0x10
c0011272:	90                   	nop
c0011273:	83 c4 0c             	add    esp,0xc
c0011276:	c3                   	ret    
c0011277:	90                   	nop

c0011278 <Video::~Video()>:
c0011278:	83 ec 0c             	sub    esp,0xc
c001127b:	83 ec 0c             	sub    esp,0xc
c001127e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011282:	e8 cd ff ff ff       	call   c0011254 <Video::~Video()>
c0011287:	83 c4 10             	add    esp,0x10
c001128a:	83 ec 08             	sub    esp,0x8
c001128d:	68 64 01 00 00       	push   0x164
c0011292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011296:	e8 83 b9 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c001129b:	83 c4 10             	add    esp,0x10
c001129e:	83 c4 0c             	add    esp,0xc
c00112a1:	c3                   	ret    

c00112a2 <Video::isMonochrome()>:
c00112a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112a6:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00112ac:	c3                   	ret    
c00112ad:	90                   	nop

c00112ae <Video::getWidth()>:
c00112ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112b2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00112b8:	c3                   	ret    
c00112b9:	90                   	nop

c00112ba <Video::getHeight()>:
c00112ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112be:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00112c4:	c3                   	ret    
c00112c5:	90                   	nop

c00112c6 <Video::drawCursor(int, int, unsigned char*, int)>:
c00112c6:	55                   	push   ebp
c00112c7:	57                   	push   edi
c00112c8:	56                   	push   esi
c00112c9:	53                   	push   ebx
c00112ca:	83 ec 2c             	sub    esp,0x2c
c00112cd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00112d1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00112d5:	83 f8 01             	cmp    eax,0x1
c00112d8:	19 c9                	sbb    ecx,ecx
c00112da:	31 db                	xor    ebx,ebx
c00112dc:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00112e0:	89 cd                	mov    ebp,ecx
c00112e2:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00112ea:	f7 d5                	not    ebp
c00112ec:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00112f2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00112f6:	01 d8                	add    eax,ebx
c00112f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00112fc:	56                   	push   esi
c00112fd:	e8 b8 ff ff ff       	call   c00112ba <Video::getHeight()>
c0011302:	59                   	pop    ecx
c0011303:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0011307:	7e 70                	jle    c0011379 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0011309:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001130d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0011311:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0011314:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011318:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001131c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0011323:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011327:	89 f8                	mov    eax,edi
c0011329:	83 c0 20             	add    eax,0x20
c001132c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011330:	56                   	push   esi
c0011331:	e8 78 ff ff ff       	call   c00112ae <Video::getWidth()>
c0011336:	5a                   	pop    edx
c0011337:	39 c7                	cmp    edi,eax
c0011339:	7d 34                	jge    c001136f <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001133b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0011340:	74 05                	je     c0011347 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0011342:	8b 06                	mov    eax,DWORD PTR [esi]
c0011344:	55                   	push   ebp
c0011345:	eb 0d                	jmp    c0011354 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0011347:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001134c:	74 12                	je     c0011360 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001134e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011350:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011354:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011358:	57                   	push   edi
c0011359:	56                   	push   esi
c001135a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001135d:	83 c4 10             	add    esp,0x10
c0011360:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0011364:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0011368:	47                   	inc    edi
c0011369:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001136d:	75 c1                	jne    c0011330 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001136f:	43                   	inc    ebx
c0011370:	83 fb 20             	cmp    ebx,0x20
c0011373:	0f 85 79 ff ff ff    	jne    c00112f2 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0011379:	83 c4 2c             	add    esp,0x2c
c001137c:	5b                   	pop    ebx
c001137d:	5e                   	pop    esi
c001137e:	5f                   	pop    edi
c001137f:	5d                   	pop    ebp
c0011380:	c3                   	ret    
c0011381:	90                   	nop

c0011382 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0011382:	55                   	push   ebp
c0011383:	57                   	push   edi
c0011384:	56                   	push   esi
c0011385:	53                   	push   ebx
c0011386:	83 ec 28             	sub    esp,0x28
c0011389:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001138d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0011391:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0011395:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0011399:	c1 e6 08             	shl    esi,0x8
c001139c:	01 c6                	add    esi,eax
c001139e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00113a2:	c1 e0 08             	shl    eax,0x8
c00113a5:	01 d0                	add    eax,edx
c00113a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00113ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00113af:	0f af c6             	imul   eax,esi
c00113b2:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00113b9:	50                   	push   eax
c00113ba:	e8 50 86 ff ff       	call   c0009a0f <malloc>
c00113bf:	83 c4 10             	add    esp,0x10
c00113c2:	89 c7                	mov    edi,eax
c00113c4:	85 c0                	test   eax,eax
c00113c6:	75 10                	jne    c00113d8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c00113c8:	83 ec 0c             	sub    esp,0xc
c00113cb:	68 b1 4f 02 c0       	push   0xc0024fb1
c00113d0:	e8 da 34 00 00       	call   c00148af <Krnl::panic(char const*)>
c00113d5:	83 c4 10             	add    esp,0x10
c00113d8:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00113db:	ba 12 00 00 00       	mov    edx,0x12
c00113e0:	84 c0                	test   al,al
c00113e2:	74 11                	je     c00113f5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c00113e4:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c00113e8:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c00113ec:	c1 fa 03             	sar    edx,0x3
c00113ef:	0f af d1             	imul   edx,ecx
c00113f2:	83 c2 12             	add    edx,0x12
c00113f5:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00113f9:	74 04                	je     c00113ff <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c00113fb:	85 f6                	test   esi,esi
c00113fd:	75 12                	jne    c0011411 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c00113ff:	83 ec 0c             	sub    esp,0xc
c0011402:	68 c1 4f 02 c0       	push   0xc0024fc1
c0011407:	e8 f3 b8 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001140c:	e9 b8 00 00 00       	jmp    c00114c9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0011411:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0011415:	80 f9 02             	cmp    cl,0x2
c0011418:	0f 85 96 00 00 00    	jne    c00114b4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c001141e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0011423:	75 0e                	jne    c0011433 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011425:	84 c0                	test   al,al
c0011427:	75 0a                	jne    c0011433 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011429:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001142c:	83 e8 18             	sub    eax,0x18
c001142f:	a8 f7                	test   al,0xf7
c0011431:	74 0a                	je     c001143d <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0011433:	83 ec 0c             	sub    esp,0xc
c0011436:	68 d6 4f 02 c0       	push   0xc0024fd6
c001143b:	eb 7f                	jmp    c00114bc <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c001143d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011445:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001144d:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0011451:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011459:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001145d:	75 0c                	jne    c001146b <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001145f:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0011464:	c1 e0 18             	shl    eax,0x18
c0011467:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001146b:	45                   	inc    ebp
c001146c:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0011471:	c1 e1 10             	shl    ecx,0x10
c0011474:	89 c8                	mov    eax,ecx
c0011476:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c001147b:	c1 e1 08             	shl    ecx,0x8
c001147e:	09 c1                	or     ecx,eax
c0011480:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0011484:	09 c1                	or     ecx,eax
c0011486:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c001148a:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c001148e:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0011492:	c1 f8 03             	sar    eax,0x3
c0011495:	01 c2                	add    edx,eax
c0011497:	89 e8                	mov    eax,ebp
c0011499:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001149d:	39 c6                	cmp    esi,eax
c001149f:	7f b0                	jg     c0011451 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c00114a1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00114a5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00114a9:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00114ac:	7e 22                	jle    c00114d0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c00114ae:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c00114b2:	eb 99                	jmp    c001144d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00114b4:	50                   	push   eax
c00114b5:	50                   	push   eax
c00114b6:	51                   	push   ecx
c00114b7:	68 e4 4f 02 c0       	push   0xc0024fe4
c00114bc:	e8 3e b8 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00114c1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114c4:	e8 56 85 ff ff       	call   c0009a1f <free>
c00114c9:	83 c4 10             	add    esp,0x10
c00114cc:	31 ff                	xor    edi,edi
c00114ce:	eb 0f                	jmp    c00114df <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c00114d0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00114d4:	89 30                	mov    DWORD PTR [eax],esi
c00114d6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00114da:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00114dd:	89 30                	mov    DWORD PTR [eax],esi
c00114df:	83 c4 1c             	add    esp,0x1c
c00114e2:	89 f8                	mov    eax,edi
c00114e4:	5b                   	pop    ebx
c00114e5:	5e                   	pop    esi
c00114e6:	5f                   	pop    edi
c00114e7:	5d                   	pop    ebp
c00114e8:	c3                   	ret    
c00114e9:	90                   	nop

c00114ea <Video::putTGA(int, int, unsigned char*, int)>:
c00114ea:	55                   	push   ebp
c00114eb:	57                   	push   edi
c00114ec:	56                   	push   esi
c00114ed:	53                   	push   ebx
c00114ee:	83 ec 28             	sub    esp,0x28
c00114f1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00114f5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00114f9:	50                   	push   eax
c00114fa:	8d 44 24 18          	lea    eax,[esp+0x18]
c00114fe:	50                   	push   eax
c00114ff:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011503:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011507:	56                   	push   esi
c0011508:	e8 75 fe ff ff       	call   c0011382 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001150d:	83 c4 20             	add    esp,0x20
c0011510:	85 c0                	test   eax,eax
c0011512:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011516:	74 35                	je     c001154d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011518:	89 c7                	mov    edi,eax
c001151a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001151e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0011522:	39 d8                	cmp    eax,ebx
c0011524:	7e 27                	jle    c001154d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011526:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001152a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001152e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0011532:	39 e8                	cmp    eax,ebp
c0011534:	7e 14                	jle    c001154a <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0011536:	8b 06                	mov    eax,DWORD PTR [esi]
c0011538:	83 c7 04             	add    edi,0x4
c001153b:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001153e:	53                   	push   ebx
c001153f:	55                   	push   ebp
c0011540:	45                   	inc    ebp
c0011541:	56                   	push   esi
c0011542:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011545:	83 c4 10             	add    esp,0x10
c0011548:	eb e0                	jmp    c001152a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001154a:	43                   	inc    ebx
c001154b:	eb cd                	jmp    c001151a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001154d:	83 c4 1c             	add    esp,0x1c
c0011550:	5b                   	pop    ebx
c0011551:	5e                   	pop    esi
c0011552:	5f                   	pop    edi
c0011553:	5d                   	pop    ebp
c0011554:	c3                   	ret    
c0011555:	66 90                	xchg   ax,ax
c0011557:	90                   	nop

c0011558 <ACPI::close(int, int, void*)>:
c0011558:	83 ec 1c             	sub    esp,0x1c
c001155b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0011563:	74 0b                	je     c0011570 <ACPI::close(int, int, void*)+0x18>
c0011565:	b8 00 00 00 00       	mov    eax,0x0
c001156a:	e9 99 00 00 00       	jmp    c0011608 <ACPI::close(int, int, void*)+0xb0>
c001156f:	90                   	nop
c0011570:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0011575:	75 29                	jne    c00115a0 <ACPI::close(int, int, void*)+0x48>
c0011577:	a1 e8 82 02 c0       	mov    eax,ds:0xc00282e8
c001157c:	85 c0                	test   eax,eax
c001157e:	74 08                	je     c0011588 <ACPI::close(int, int, void*)+0x30>
c0011580:	a1 e8 82 02 c0       	mov    eax,ds:0xc00282e8
c0011585:	ff d0                	call   eax
c0011587:	90                   	nop
c0011588:	83 ec 0c             	sub    esp,0xc
c001158b:	68 40 50 02 c0       	push   0xc0025040
c0011590:	e8 1a 33 00 00       	call   c00148af <Krnl::panic(char const*)>
c0011595:	83 c4 10             	add    esp,0x10
c0011598:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001159d:	eb 69                	jmp    c0011608 <ACPI::close(int, int, void*)+0xb0>
c001159f:	90                   	nop
c00115a0:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00115a5:	75 59                	jne    c0011600 <ACPI::close(int, int, void*)+0xa8>
c00115a7:	a1 e4 82 02 c0       	mov    eax,ds:0xc00282e4
c00115ac:	85 c0                	test   eax,eax
c00115ae:	74 08                	je     c00115b8 <ACPI::close(int, int, void*)+0x60>
c00115b0:	a1 e4 82 02 c0       	mov    eax,ds:0xc00282e4
c00115b5:	ff d0                	call   eax
c00115b7:	90                   	nop
c00115b8:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00115bd:	8d 76 00             	lea    esi,[esi+0x0]
c00115c0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00115c5:	83 e0 02             	and    eax,0x2
c00115c8:	74 1e                	je     c00115e8 <ACPI::close(int, int, void*)+0x90>
c00115ca:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00115d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115d5:	89 c2                	mov    edx,eax
c00115d7:	ec                   	in     al,dx
c00115d8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00115dc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00115e0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00115e4:	eb da                	jmp    c00115c0 <ACPI::close(int, int, void*)+0x68>
c00115e6:	66 90                	xchg   ax,ax
c00115e8:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00115ef:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00115f4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00115f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00115fc:	ee                   	out    dx,al
c00115fd:	8d 76 00             	lea    esi,[esi+0x0]
c0011600:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011605:	8d 76 00             	lea    esi,[esi+0x0]
c0011608:	83 c4 1c             	add    esp,0x1c
c001160b:	c3                   	ret    

c001160c <findRSDP()>:
c001160c:	83 ec 1c             	sub    esp,0x1c
c001160f:	83 ec 0c             	sub    esp,0xc
c0011612:	68 63 51 02 c0       	push   0xc0025163
c0011617:	e8 4d 84 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001161c:	83 c4 10             	add    esp,0x10
c001161f:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0011624:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001162a:	83 e0 04             	and    eax,0x4
c001162d:	84 c0                	test   al,al
c001162f:	75 0b                	jne    c001163c <findRSDP()+0x30>
c0011631:	b8 00 00 00 00       	mov    eax,0x0
c0011636:	e9 a1 00 00 00       	jmp    c00116dc <findRSDP()+0xd0>
c001163b:	90                   	nop
c001163c:	a1 d8 7c 02 c0       	mov    eax,ds:0xc0027cd8
c0011641:	3d ff 07 00 00       	cmp    eax,0x7ff
c0011646:	7f 1c                	jg     c0011664 <findRSDP()+0x58>
c0011648:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c001164d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011653:	83 e2 fb             	and    edx,0xfffffffb
c0011656:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001165c:	b8 00 00 00 00       	mov    eax,0x0
c0011661:	eb 79                	jmp    c00116dc <findRSDP()+0xd0>
c0011663:	90                   	nop
c0011664:	83 ec 0c             	sub    esp,0xc
c0011667:	68 73 51 02 c0       	push   0xc0025173
c001166c:	e8 f8 83 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011671:	83 c4 10             	add    esp,0x10
c0011674:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001167c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0011684:	77 3e                	ja     c00116c4 <findRSDP()+0xb8>
c0011686:	83 ec 04             	sub    esp,0x4
c0011689:	6a 08                	push   0x8
c001168b:	68 8c 51 02 c0       	push   0xc002518c
c0011690:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011694:	e8 e7 ee fe ff       	call   c0000580 <memcmp>
c0011699:	83 c4 10             	add    esp,0x10
c001169c:	85 c0                	test   eax,eax
c001169e:	0f 94 c0             	sete   al
c00116a1:	84 c0                	test   al,al
c00116a3:	74 17                	je     c00116bc <findRSDP()+0xb0>
c00116a5:	83 ec 0c             	sub    esp,0xc
c00116a8:	68 95 51 02 c0       	push   0xc0025195
c00116ad:	e8 b7 83 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00116b2:	83 c4 10             	add    esp,0x10
c00116b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00116b9:	eb 21                	jmp    c00116dc <findRSDP()+0xd0>
c00116bb:	90                   	nop
c00116bc:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00116c1:	eb b9                	jmp    c001167c <findRSDP()+0x70>
c00116c3:	90                   	nop
c00116c4:	83 ec 0c             	sub    esp,0xc
c00116c7:	68 a3 51 02 c0       	push   0xc00251a3
c00116cc:	e8 98 83 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00116d1:	83 c4 10             	add    esp,0x10
c00116d4:	b8 00 00 00 00       	mov    eax,0x0
c00116d9:	8d 76 00             	lea    esi,[esi+0x0]
c00116dc:	83 c4 1c             	add    esp,0x1c
c00116df:	c3                   	ret    

c00116e0 <loadACPITables(unsigned char*)>:
c00116e0:	57                   	push   edi
c00116e1:	56                   	push   esi
c00116e2:	53                   	push   ebx
c00116e3:	83 ec 60             	sub    esp,0x60
c00116e6:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c00116eb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00116f1:	83 e0 04             	and    eax,0x4
c00116f4:	84 c0                	test   al,al
c00116f6:	0f 84 3c 02 00 00    	je     c0011938 <loadACPITables(unsigned char*)+0x258>
c00116fc:	a0 00 85 02 c0       	mov    al,ds:0xc0028500
c0011701:	84 c0                	test   al,al
c0011703:	74 77                	je     c001177c <loadACPITables(unsigned char*)+0x9c>
c0011705:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011709:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001170d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011711:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011714:	83 e8 24             	sub    eax,0x24
c0011717:	c1 e8 03             	shr    eax,0x3
c001171a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001171e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0011726:	66 90                	xchg   ax,ax
c0011728:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001172c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0011730:	0f 8d b6 00 00 00    	jge    c00117ec <loadACPITables(unsigned char*)+0x10c>
c0011736:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001173a:	83 c0 24             	add    eax,0x24
c001173d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0011741:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011745:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011749:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001174d:	c1 e0 03             	shl    eax,0x3
c0011750:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0011754:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011758:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001175b:	8b 00                	mov    eax,DWORD PTR [eax]
c001175d:	89 c1                	mov    ecx,eax
c001175f:	a1 ec 82 02 c0       	mov    eax,ds:0xc00282ec
c0011764:	8d 50 01             	lea    edx,[eax+0x1]
c0011767:	89 15 ec 82 02 c0    	mov    DWORD PTR ds:0xc00282ec,edx
c001176d:	89 ca                	mov    edx,ecx
c001176f:	89 14 c5 04 83 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7cfc],edx
c0011776:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001177a:	eb ac                	jmp    c0011728 <loadACPITables(unsigned char*)+0x48>
c001177c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011780:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011784:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011788:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001178b:	83 e8 24             	sub    eax,0x24
c001178e:	c1 e8 02             	shr    eax,0x2
c0011791:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011795:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001179d:	8d 76 00             	lea    esi,[esi+0x0]
c00117a0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00117a4:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00117a8:	7d 42                	jge    c00117ec <loadACPITables(unsigned char*)+0x10c>
c00117aa:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00117ae:	83 c0 24             	add    eax,0x24
c00117b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00117b5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00117b9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00117bd:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00117c1:	c1 e0 02             	shl    eax,0x2
c00117c4:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00117c8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00117cc:	8b 08                	mov    ecx,DWORD PTR [eax]
c00117ce:	a1 ec 82 02 c0       	mov    eax,ds:0xc00282ec
c00117d3:	8d 50 01             	lea    edx,[eax+0x1]
c00117d6:	89 15 ec 82 02 c0    	mov    DWORD PTR ds:0xc00282ec,edx
c00117dc:	89 ca                	mov    edx,ecx
c00117de:	89 14 c5 04 83 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7cfc],edx
c00117e5:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00117e9:	eb b5                	jmp    c00117a0 <loadACPITables(unsigned char*)+0xc0>
c00117eb:	90                   	nop
c00117ec:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00117f4:	a1 ec 82 02 c0       	mov    eax,ds:0xc00282ec
c00117f9:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00117fd:	0f 8d 39 01 00 00    	jge    c001193c <loadACPITables(unsigned char*)+0x25c>
c0011803:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011807:	8b 04 c5 04 83 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd7cfc]
c001180e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011812:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011816:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001181a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001181e:	25 ff 0f 00 00       	and    eax,0xfff
c0011823:	89 c6                	mov    esi,eax
c0011825:	8b 1d d0 7d 02 c0    	mov    ebx,DWORD PTR ds:0xc0027dd0
c001182b:	83 ec 0c             	sub    esp,0xc
c001182e:	6a 01                	push   0x1
c0011830:	e8 a4 a1 ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c0011835:	83 c4 10             	add    esp,0x10
c0011838:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001183c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011842:	83 ec 0c             	sub    esp,0xc
c0011845:	6a 01                	push   0x1
c0011847:	6a 01                	push   0x1
c0011849:	50                   	push   eax
c001184a:	52                   	push   edx
c001184b:	53                   	push   ebx
c001184c:	e8 25 ab ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011851:	83 c4 20             	add    esp,0x20
c0011854:	09 f0                	or     eax,esi
c0011856:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001185a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001185e:	c1 e0 03             	shl    eax,0x3
c0011861:	05 00 83 02 c0       	add    eax,0xc0028300
c0011866:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001186a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001186e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011872:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001187a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001187e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011882:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011886:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001188a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001188e:	89 c6                	mov    esi,eax
c0011890:	89 d7                	mov    edi,edx
c0011892:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011894:	89 c8                	mov    eax,ecx
c0011896:	89 fa                	mov    edx,edi
c0011898:	89 f3                	mov    ebx,esi
c001189a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001189e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00118a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118ad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00118b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00118b5:	05 00 10 00 00       	add    eax,0x1000
c00118ba:	c1 e8 0c             	shr    eax,0xc
c00118bd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00118c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00118c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118cd:	25 ff 0f 00 00       	and    eax,0xfff
c00118d2:	89 c6                	mov    esi,eax
c00118d4:	8b 1d d0 7d 02 c0    	mov    ebx,DWORD PTR ds:0xc0027dd0
c00118da:	83 ec 0c             	sub    esp,0xc
c00118dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00118e1:	e8 f3 a0 ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c00118e6:	83 c4 10             	add    esp,0x10
c00118e9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00118ed:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00118f3:	83 ec 0c             	sub    esp,0xc
c00118f6:	6a 01                	push   0x1
c00118f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00118fc:	50                   	push   eax
c00118fd:	52                   	push   edx
c00118fe:	53                   	push   ebx
c00118ff:	e8 72 aa ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011904:	83 c4 20             	add    esp,0x20
c0011907:	09 f0                	or     eax,esi
c0011909:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001190d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011911:	83 ec 0c             	sub    esp,0xc
c0011914:	50                   	push   eax
c0011915:	e8 ef a3 ff ff       	call   c000bd09 <Virt::freeKernelVirtualPages(unsigned long)>
c001191a:	83 c4 10             	add    esp,0x10
c001191d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011921:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011925:	89 14 c5 04 83 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7cfc],edx
c001192c:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0011930:	e9 bf fe ff ff       	jmp    c00117f4 <loadACPITables(unsigned char*)+0x114>
c0011935:	8d 76 00             	lea    esi,[esi+0x0]
c0011938:	90                   	nop
c0011939:	8d 76 00             	lea    esi,[esi+0x0]
c001193c:	83 c4 60             	add    esp,0x60
c001193f:	5b                   	pop    ebx
c0011940:	5e                   	pop    esi
c0011941:	5f                   	pop    edi
c0011942:	c3                   	ret    
c0011943:	90                   	nop

c0011944 <findRSDT(unsigned char*)>:
c0011944:	57                   	push   edi
c0011945:	56                   	push   esi
c0011946:	53                   	push   ebx
c0011947:	83 ec 50             	sub    esp,0x50
c001194a:	83 ec 0c             	sub    esp,0xc
c001194d:	68 b7 51 02 c0       	push   0xc00251b7
c0011952:	e8 12 81 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011957:	83 c4 10             	add    esp,0x10
c001195a:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c001195f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011965:	83 e0 04             	and    eax,0x4
c0011968:	84 c0                	test   al,al
c001196a:	75 0c                	jne    c0011978 <findRSDT(unsigned char*)+0x34>
c001196c:	b8 00 00 00 00       	mov    eax,0x0
c0011971:	e9 86 01 00 00       	jmp    c0011afc <findRSDT(unsigned char*)+0x1b8>
c0011976:	66 90                	xchg   ax,ax
c0011978:	83 ec 0c             	sub    esp,0xc
c001197b:	68 c9 51 02 c0       	push   0xc00251c9
c0011980:	e8 e4 80 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011985:	83 c4 10             	add    esp,0x10
c0011988:	89 e0                	mov    eax,esp
c001198a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001198e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0011992:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011996:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001199e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00119a2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00119a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00119aa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00119ae:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00119b2:	89 c6                	mov    esi,eax
c00119b4:	89 d7                	mov    edi,edx
c00119b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00119b8:	89 c8                	mov    eax,ecx
c00119ba:	89 fa                	mov    edx,edi
c00119bc:	89 f3                	mov    ebx,esi
c00119be:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00119c2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00119c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00119ca:	83 ec 0c             	sub    esp,0xc
c00119cd:	68 db 51 02 c0       	push   0xc00251db
c00119d2:	e8 92 80 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00119d7:	83 c4 10             	add    esp,0x10
c00119da:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00119de:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c00119e2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c00119ea:	83 ec 0c             	sub    esp,0xc
c00119ed:	68 ed 51 02 c0       	push   0xc00251ed
c00119f2:	e8 72 80 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00119f7:	83 c4 10             	add    esp,0x10
c00119fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00119fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011a02:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a0a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011a0e:	83 ec 04             	sub    esp,0x4
c0011a11:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011a15:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011a19:	68 64 50 02 c0       	push   0xc0025064
c0011a1e:	e8 dc b2 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0011a23:	83 c4 10             	add    esp,0x10
c0011a26:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011a2a:	25 ff 0f 00 00       	and    eax,0xfff
c0011a2f:	89 c6                	mov    esi,eax
c0011a31:	8b 1d d0 7d 02 c0    	mov    ebx,DWORD PTR ds:0xc0027dd0
c0011a37:	83 ec 0c             	sub    esp,0xc
c0011a3a:	6a 02                	push   0x2
c0011a3c:	e8 98 9f ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c0011a41:	83 c4 10             	add    esp,0x10
c0011a44:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011a48:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011a4e:	83 ec 0c             	sub    esp,0xc
c0011a51:	6a 01                	push   0x1
c0011a53:	6a 02                	push   0x2
c0011a55:	50                   	push   eax
c0011a56:	52                   	push   edx
c0011a57:	53                   	push   ebx
c0011a58:	e8 19 a9 ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a5d:	83 c4 20             	add    esp,0x20
c0011a60:	09 f0                	or     eax,esi
c0011a62:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011a66:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011a6a:	25 ff 0f 00 00       	and    eax,0xfff
c0011a6f:	89 c6                	mov    esi,eax
c0011a71:	8b 1d d0 7d 02 c0    	mov    ebx,DWORD PTR ds:0xc0027dd0
c0011a77:	83 ec 0c             	sub    esp,0xc
c0011a7a:	6a 02                	push   0x2
c0011a7c:	e8 58 9f ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c0011a81:	83 c4 10             	add    esp,0x10
c0011a84:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011a88:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011a8e:	83 ec 0c             	sub    esp,0xc
c0011a91:	6a 01                	push   0x1
c0011a93:	6a 02                	push   0x2
c0011a95:	50                   	push   eax
c0011a96:	52                   	push   edx
c0011a97:	53                   	push   ebx
c0011a98:	e8 d9 a8 ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a9d:	83 c4 20             	add    esp,0x20
c0011aa0:	09 f0                	or     eax,esi
c0011aa2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011aa6:	83 ec 04             	sub    esp,0x4
c0011aa9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011aad:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011ab1:	68 84 50 02 c0       	push   0xc0025084
c0011ab6:	e8 44 b2 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0011abb:	83 c4 10             	add    esp,0x10
c0011abe:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0011ac3:	75 13                	jne    c0011ad8 <findRSDT(unsigned char*)+0x194>
c0011ac5:	c6 05 00 85 02 c0 00 	mov    BYTE PTR ds:0xc0028500,0x0
c0011acc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011ad0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011ad4:	eb 22                	jmp    c0011af8 <findRSDT(unsigned char*)+0x1b4>
c0011ad6:	66 90                	xchg   ax,ax
c0011ad8:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0011add:	75 11                	jne    c0011af0 <findRSDT(unsigned char*)+0x1ac>
c0011adf:	c6 05 00 85 02 c0 01 	mov    BYTE PTR ds:0xc0028500,0x1
c0011ae6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011aea:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011aee:	eb 08                	jmp    c0011af8 <findRSDT(unsigned char*)+0x1b4>
c0011af0:	b8 00 00 00 00       	mov    eax,0x0
c0011af5:	eb 05                	jmp    c0011afc <findRSDT(unsigned char*)+0x1b8>
c0011af7:	90                   	nop
c0011af8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011afc:	83 c4 50             	add    esp,0x50
c0011aff:	5b                   	pop    ebx
c0011b00:	5e                   	pop    esi
c0011b01:	5f                   	pop    edi
c0011b02:	c3                   	ret    
c0011b03:	90                   	nop

c0011b04 <findDataTable(unsigned char*, char*)>:
c0011b04:	83 ec 1c             	sub    esp,0x1c
c0011b07:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0011b0c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011b12:	83 e0 04             	and    eax,0x4
c0011b15:	84 c0                	test   al,al
c0011b17:	75 07                	jne    c0011b20 <findDataTable(unsigned char*, char*)+0x1c>
c0011b19:	b8 00 00 00 00       	mov    eax,0x0
c0011b1e:	eb 58                	jmp    c0011b78 <findDataTable(unsigned char*, char*)+0x74>
c0011b20:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011b28:	a1 ec 82 02 c0       	mov    eax,ds:0xc00282ec
c0011b2d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0011b31:	7d 3d                	jge    c0011b70 <findDataTable(unsigned char*, char*)+0x6c>
c0011b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b37:	c1 e0 03             	shl    eax,0x3
c0011b3a:	05 00 83 02 c0       	add    eax,0xc0028300
c0011b3f:	83 ec 04             	sub    esp,0x4
c0011b42:	6a 04                	push   0x4
c0011b44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011b48:	50                   	push   eax
c0011b49:	e8 32 ea fe ff       	call   c0000580 <memcmp>
c0011b4e:	83 c4 10             	add    esp,0x10
c0011b51:	85 c0                	test   eax,eax
c0011b53:	0f 94 c0             	sete   al
c0011b56:	84 c0                	test   al,al
c0011b58:	74 0e                	je     c0011b68 <findDataTable(unsigned char*, char*)+0x64>
c0011b5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b5e:	8b 04 c5 04 83 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd7cfc]
c0011b65:	eb 11                	jmp    c0011b78 <findDataTable(unsigned char*, char*)+0x74>
c0011b67:	90                   	nop
c0011b68:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011b6c:	eb ba                	jmp    c0011b28 <findDataTable(unsigned char*, char*)+0x24>
c0011b6e:	66 90                	xchg   ax,ax
c0011b70:	b8 00 00 00 00       	mov    eax,0x0
c0011b75:	8d 76 00             	lea    esi,[esi+0x0]
c0011b78:	83 c4 1c             	add    esp,0x1c
c0011b7b:	c3                   	ret    

c0011b7c <scanMADT()>:
c0011b7c:	53                   	push   ebx
c0011b7d:	83 ec 38             	sub    esp,0x38
c0011b80:	83 ec 0c             	sub    esp,0xc
c0011b83:	68 ff 51 02 c0       	push   0xc00251ff
c0011b88:	e8 dc 7e ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011b8d:	83 c4 10             	add    esp,0x10
c0011b90:	a1 c0 7c 02 c0       	mov    eax,ds:0xc0027cc0
c0011b95:	25 00 04 00 00       	and    eax,0x400
c0011b9a:	74 14                	je     c0011bb0 <scanMADT()+0x34>
c0011b9c:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0011ba1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011ba7:	83 e2 fb             	and    edx,0xfffffffb
c0011baa:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011bb0:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0011bb5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011bbb:	83 e0 04             	and    eax,0x4
c0011bbe:	84 c0                	test   al,al
c0011bc0:	0f 84 82 04 00 00    	je     c0012048 <scanMADT()+0x4cc>
c0011bc6:	83 ec 0c             	sub    esp,0xc
c0011bc9:	68 0c 52 02 c0       	push   0xc002520c
c0011bce:	e8 96 7e ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011bd3:	83 c4 10             	add    esp,0x10
c0011bd6:	e8 31 fa ff ff       	call   c001160c <findRSDP()>
c0011bdb:	a3 0c 85 02 c0       	mov    ds:0xc002850c,eax
c0011be0:	a1 0c 85 02 c0       	mov    eax,ds:0xc002850c
c0011be5:	85 c0                	test   eax,eax
c0011be7:	75 1b                	jne    c0011c04 <scanMADT()+0x88>
c0011be9:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0011bee:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011bf4:	83 e2 fb             	and    edx,0xfffffffb
c0011bf7:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011bfd:	e9 4e 04 00 00       	jmp    c0012050 <scanMADT()+0x4d4>
c0011c02:	66 90                	xchg   ax,ax
c0011c04:	83 ec 0c             	sub    esp,0xc
c0011c07:	68 1e 52 02 c0       	push   0xc002521e
c0011c0c:	e8 58 7e ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011c11:	83 c4 10             	add    esp,0x10
c0011c14:	a1 0c 85 02 c0       	mov    eax,ds:0xc002850c
c0011c19:	83 ec 0c             	sub    esp,0xc
c0011c1c:	50                   	push   eax
c0011c1d:	e8 22 fd ff ff       	call   c0011944 <findRSDT(unsigned char*)>
c0011c22:	83 c4 10             	add    esp,0x10
c0011c25:	a3 08 85 02 c0       	mov    ds:0xc0028508,eax
c0011c2a:	a1 08 85 02 c0       	mov    eax,ds:0xc0028508
c0011c2f:	85 c0                	test   eax,eax
c0011c31:	75 19                	jne    c0011c4c <scanMADT()+0xd0>
c0011c33:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0011c38:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011c3e:	83 e2 fb             	and    edx,0xfffffffb
c0011c41:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011c47:	e9 04 04 00 00       	jmp    c0012050 <scanMADT()+0x4d4>
c0011c4c:	83 ec 0c             	sub    esp,0xc
c0011c4f:	68 2e 52 02 c0       	push   0xc002522e
c0011c54:	e8 10 7e ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011c59:	83 c4 10             	add    esp,0x10
c0011c5c:	a1 08 85 02 c0       	mov    eax,ds:0xc0028508
c0011c61:	83 ec 0c             	sub    esp,0xc
c0011c64:	50                   	push   eax
c0011c65:	e8 76 fa ff ff       	call   c00116e0 <loadACPITables(unsigned char*)>
c0011c6a:	83 c4 10             	add    esp,0x10
c0011c6d:	a1 08 85 02 c0       	mov    eax,ds:0xc0028508
c0011c72:	83 ec 08             	sub    esp,0x8
c0011c75:	68 46 52 02 c0       	push   0xc0025246
c0011c7a:	50                   	push   eax
c0011c7b:	e8 84 fe ff ff       	call   c0011b04 <findDataTable(unsigned char*, char*)>
c0011c80:	83 c4 10             	add    esp,0x10
c0011c83:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011c87:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011c8c:	75 1a                	jne    c0011ca8 <scanMADT()+0x12c>
c0011c8e:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0011c93:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011c99:	83 e2 fe             	and    edx,0xfffffffe
c0011c9c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011ca2:	e9 a9 03 00 00       	jmp    c0012050 <scanMADT()+0x4d4>
c0011ca7:	90                   	nop
c0011ca8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011cb0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011cb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011cb7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0011cbb:	0f 87 8f 03 00 00    	ja     c0012050 <scanMADT()+0x4d4>
c0011cc1:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0011cc9:	0f 87 81 03 00 00    	ja     c0012050 <scanMADT()+0x4d4>
c0011ccf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cd3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011cd7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cdb:	8d 50 01             	lea    edx,[eax+0x1]
c0011cde:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011ce2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011ce6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011cea:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0011cee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cf2:	8d 50 01             	lea    edx,[eax+0x1]
c0011cf5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011cf9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011cfd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011d01:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0011d05:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0011d0a:	0f 86 3c 03 00 00    	jbe    c001204c <scanMADT()+0x4d0>
c0011d10:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0011d15:	75 59                	jne    c0011d70 <scanMADT()+0x1f4>
c0011d17:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d1b:	8d 50 01             	lea    edx,[eax+0x1]
c0011d1e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011d22:	8a 15 00 87 02 c0    	mov    dl,BYTE PTR ds:0xc0028700
c0011d28:	0f b6 d2             	movzx  edx,dl
c0011d2b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011d2f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011d33:	88 82 40 87 02 c0    	mov    BYTE PTR [edx-0x3ffd78c0],al
c0011d39:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d3d:	8d 50 01             	lea    edx,[eax+0x1]
c0011d40:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011d44:	8a 15 00 87 02 c0    	mov    dl,BYTE PTR ds:0xc0028700
c0011d4a:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011d4d:	88 0d 00 87 02 c0    	mov    BYTE PTR ds:0xc0028700,cl
c0011d53:	0f b6 d2             	movzx  edx,dl
c0011d56:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011d5a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011d5e:	88 82 20 87 02 c0    	mov    BYTE PTR [edx-0x3ffd78e0],al
c0011d64:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011d69:	e9 c6 02 00 00       	jmp    c0012034 <scanMADT()+0x4b8>
c0011d6e:	66 90                	xchg   ax,ax
c0011d70:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0011d75:	0f 85 15 01 00 00    	jne    c0011e90 <scanMADT()+0x314>
c0011d7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d7f:	8d 50 01             	lea    edx,[eax+0x1]
c0011d82:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011d86:	8a 15 c0 85 02 c0    	mov    dl,BYTE PTR ds:0xc00285c0
c0011d8c:	0f b6 d2             	movzx  edx,dl
c0011d8f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011d93:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011d97:	88 82 e0 85 02 c0    	mov    BYTE PTR [edx-0x3ffd7a20],al
c0011d9d:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011da1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011da5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011da9:	01 d0                	add    eax,edx
c0011dab:	83 c0 2c             	add    eax,0x2c
c0011dae:	8a 00                	mov    al,BYTE PTR [eax]
c0011db0:	0f b6 d0             	movzx  edx,al
c0011db3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011db7:	8d 48 01             	lea    ecx,[eax+0x1]
c0011dba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011dbe:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011dc2:	0f b6 c0             	movzx  eax,al
c0011dc5:	c1 e0 08             	shl    eax,0x8
c0011dc8:	89 d1                	mov    ecx,edx
c0011dca:	09 c1                	or     ecx,eax
c0011dcc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011dd0:	8d 50 02             	lea    edx,[eax+0x2]
c0011dd3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011dd7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011ddb:	0f b6 c0             	movzx  eax,al
c0011dde:	c1 e0 10             	shl    eax,0x10
c0011de1:	09 c1                	or     ecx,eax
c0011de3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011de7:	8d 50 03             	lea    edx,[eax+0x3]
c0011dea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011dee:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011df2:	0f b6 c0             	movzx  eax,al
c0011df5:	c1 e0 18             	shl    eax,0x18
c0011df8:	09 c1                	or     ecx,eax
c0011dfa:	89 ca                	mov    edx,ecx
c0011dfc:	a0 c0 85 02 c0       	mov    al,ds:0xc00285c0
c0011e01:	0f b6 c0             	movzx  eax,al
c0011e04:	89 14 85 00 86 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7a00],edx
c0011e0b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011e10:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011e14:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e18:	01 d0                	add    eax,edx
c0011e1a:	83 c0 2c             	add    eax,0x2c
c0011e1d:	8a 00                	mov    al,BYTE PTR [eax]
c0011e1f:	0f b6 d0             	movzx  edx,al
c0011e22:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e26:	8d 48 01             	lea    ecx,[eax+0x1]
c0011e29:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e2d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011e31:	0f b6 c0             	movzx  eax,al
c0011e34:	c1 e0 08             	shl    eax,0x8
c0011e37:	89 d1                	mov    ecx,edx
c0011e39:	09 c1                	or     ecx,eax
c0011e3b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e3f:	8d 50 02             	lea    edx,[eax+0x2]
c0011e42:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e46:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011e4a:	0f b6 c0             	movzx  eax,al
c0011e4d:	c1 e0 10             	shl    eax,0x10
c0011e50:	09 c1                	or     ecx,eax
c0011e52:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e56:	8d 50 03             	lea    edx,[eax+0x3]
c0011e59:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e5d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011e61:	0f b6 c0             	movzx  eax,al
c0011e64:	c1 e0 18             	shl    eax,0x18
c0011e67:	09 c1                	or     ecx,eax
c0011e69:	89 ca                	mov    edx,ecx
c0011e6b:	a0 c0 85 02 c0       	mov    al,ds:0xc00285c0
c0011e70:	0f b6 c0             	movzx  eax,al
c0011e73:	89 14 85 80 86 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7980],edx
c0011e7a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011e7f:	a0 c0 85 02 c0       	mov    al,ds:0xc00285c0
c0011e84:	40                   	inc    eax
c0011e85:	a2 c0 85 02 c0       	mov    ds:0xc00285c0,al
c0011e8a:	e9 a5 01 00 00       	jmp    c0012034 <scanMADT()+0x4b8>
c0011e8f:	90                   	nop
c0011e90:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0011e95:	0f 85 e9 00 00 00    	jne    c0011f84 <scanMADT()+0x408>
c0011e9b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e9f:	8d 50 01             	lea    edx,[eax+0x1]
c0011ea2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011ea6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011eaa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011eae:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0011eb2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011eb6:	8d 50 01             	lea    edx,[eax+0x1]
c0011eb9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011ebd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011ec1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011ec5:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0011ec9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011ecd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ed1:	01 d0                	add    eax,edx
c0011ed3:	83 c0 2c             	add    eax,0x2c
c0011ed6:	8a 00                	mov    al,BYTE PTR [eax]
c0011ed8:	0f b6 d0             	movzx  edx,al
c0011edb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011edf:	8d 48 01             	lea    ecx,[eax+0x1]
c0011ee2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ee6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011eea:	0f b6 c0             	movzx  eax,al
c0011eed:	c1 e0 08             	shl    eax,0x8
c0011ef0:	89 d1                	mov    ecx,edx
c0011ef2:	09 c1                	or     ecx,eax
c0011ef4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ef8:	8d 50 02             	lea    edx,[eax+0x2]
c0011efb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011eff:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011f03:	0f b6 c0             	movzx  eax,al
c0011f06:	c1 e0 10             	shl    eax,0x10
c0011f09:	09 c1                	or     ecx,eax
c0011f0b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f0f:	8d 50 03             	lea    edx,[eax+0x3]
c0011f12:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f16:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011f1a:	0f b6 c0             	movzx  eax,al
c0011f1d:	c1 e0 18             	shl    eax,0x18
c0011f20:	09 c8                	or     eax,ecx
c0011f22:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f26:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011f2b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011f2f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f33:	01 d0                	add    eax,edx
c0011f35:	83 c0 2c             	add    eax,0x2c
c0011f38:	8a 00                	mov    al,BYTE PTR [eax]
c0011f3a:	0f b6 c0             	movzx  eax,al
c0011f3d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011f41:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011f44:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011f48:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0011f4c:	0f b6 d2             	movzx  edx,dl
c0011f4f:	c1 e2 08             	shl    edx,0x8
c0011f52:	09 d0                	or     eax,edx
c0011f54:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0011f59:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011f5e:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0011f63:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011f67:	88 90 a0 73 02 c0    	mov    BYTE PTR [eax-0x3ffd8c60],dl
c0011f6d:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0011f72:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0011f77:	66 89 84 12 a0 85 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd7a60],ax
c0011f7f:	e9 b0 00 00 00       	jmp    c0012034 <scanMADT()+0x4b8>
c0011f84:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0011f89:	0f 85 99 00 00 00    	jne    c0012028 <scanMADT()+0x4ac>
c0011f8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f93:	8d 50 01             	lea    edx,[eax+0x1]
c0011f96:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011f9a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011f9e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011fa2:	0f b6 c0             	movzx  eax,al
c0011fa5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011fa9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011fad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fb1:	01 d0                	add    eax,edx
c0011fb3:	83 c0 2c             	add    eax,0x2c
c0011fb6:	8a 00                	mov    al,BYTE PTR [eax]
c0011fb8:	0f b6 d0             	movzx  edx,al
c0011fbb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fbf:	8d 48 01             	lea    ecx,[eax+0x1]
c0011fc2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011fc6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011fca:	0f b6 c0             	movzx  eax,al
c0011fcd:	c1 e0 08             	shl    eax,0x8
c0011fd0:	09 d0                	or     eax,edx
c0011fd2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011fd6:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011fdb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fdf:	8d 50 01             	lea    edx,[eax+0x1]
c0011fe2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011fe6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011fea:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011fee:	0f b6 c0             	movzx  eax,al
c0011ff1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ff9:	c1 e0 08             	shl    eax,0x8
c0011ffc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012000:	89 c1                	mov    ecx,eax
c0012002:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012006:	c1 e0 18             	shl    eax,0x18
c0012009:	89 c3                	mov    ebx,eax
c001200b:	a1 10 85 02 c0       	mov    eax,ds:0xc0028510
c0012010:	8d 50 01             	lea    edx,[eax+0x1]
c0012013:	89 15 10 85 02 c0    	mov    DWORD PTR ds:0xc0028510,edx
c0012019:	09 d9                	or     ecx,ebx
c001201b:	89 ca                	mov    edx,ecx
c001201d:	89 14 85 20 85 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7ae0],edx
c0012024:	eb 0e                	jmp    c0012034 <scanMADT()+0x4b8>
c0012026:	66 90                	xchg   ax,ax
c0012028:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c001202d:	75 05                	jne    c0012034 <scanMADT()+0x4b8>
c001202f:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0012034:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0012039:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001203d:	01 d0                	add    eax,edx
c001203f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012043:	e9 68 fc ff ff       	jmp    c0011cb0 <scanMADT()+0x134>
c0012048:	90                   	nop
c0012049:	eb 05                	jmp    c0012050 <scanMADT()+0x4d4>
c001204b:	90                   	nop
c001204c:	90                   	nop
c001204d:	8d 76 00             	lea    esi,[esi+0x0]
c0012050:	83 c4 38             	add    esp,0x38
c0012053:	5b                   	pop    ebx
c0012054:	c3                   	ret    
c0012055:	90                   	nop
c0012056:	66 90                	xchg   ax,ax

c0012058 <ACPI::ACPI()>:
c0012058:	83 ec 0c             	sub    esp,0xc
c001205b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001205f:	83 ec 08             	sub    esp,0x8
c0012062:	68 4b 52 02 c0       	push   0xc002524b
c0012067:	50                   	push   eax
c0012068:	e8 1d c3 ff ff       	call   c000e38a <Device::Device(char const*)>
c001206d:	83 c4 10             	add    esp,0x10
c0012070:	ba e4 53 02 c0       	mov    edx,0xc00253e4
c0012075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012079:	89 10                	mov    DWORD PTR [eax],edx
c001207b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001207f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0012086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001208a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0012094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012098:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00120a2:	83 ec 0c             	sub    esp,0xc
c00120a5:	68 50 52 02 c0       	push   0xc0025250
c00120aa:	e8 ba 79 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00120af:	83 c4 10             	add    esp,0x10
c00120b2:	e8 c5 fa ff ff       	call   c0011b7c <scanMADT()>
c00120b7:	90                   	nop
c00120b8:	83 c4 0c             	add    esp,0xc
c00120bb:	c3                   	ret    

c00120bc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00120bc:	83 ec 2c             	sub    esp,0x2c
c00120bf:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00120c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00120c7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00120cb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00120cf:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00120d4:	88 d0                	mov    al,dl
c00120d6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00120da:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00120df:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00120e7:	90                   	nop
c00120e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00120ec:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00120f2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00120f6:	0f 8d 9c 00 00 00    	jge    c0012198 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c00120fc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012100:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012104:	83 c2 2a             	add    edx,0x2a
c0012107:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001210b:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0012110:	75 7a                	jne    c001218c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0012112:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012116:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001211a:	83 c2 2a             	add    edx,0x2a
c001211d:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0012121:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0012125:	75 65                	jne    c001218c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0012127:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001212c:	74 3a                	je     c0012168 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c001212e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012132:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012136:	83 c2 2a             	add    edx,0x2a
c0012139:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001213d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012141:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012144:	39 c2                	cmp    edx,eax
c0012146:	74 10                	je     c0012158 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c0012148:	83 ec 0c             	sub    esp,0xc
c001214b:	68 a4 50 02 c0       	push   0xc00250a4
c0012150:	e8 5a 27 00 00       	call   c00148af <Krnl::panic(char const*)>
c0012155:	83 c4 10             	add    esp,0x10
c0012158:	83 ec 0c             	sub    esp,0xc
c001215b:	68 5e 52 02 c0       	push   0xc002525e
c0012160:	e8 4a 27 00 00       	call   c00148af <Krnl::panic(char const*)>
c0012165:	83 c4 10             	add    esp,0x10
c0012168:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001216c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012170:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012174:	83 c2 2a             	add    edx,0x2a
c0012177:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001217b:	8b 02                	mov    eax,DWORD PTR [edx]
c001217d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0012180:	89 01                	mov    DWORD PTR [ecx],eax
c0012182:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0012185:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001218a:	66 90                	xchg   ax,ax
c001218c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012190:	e9 53 ff ff ff       	jmp    c00120e8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0012195:	8d 76 00             	lea    esi,[esi+0x0]
c0012198:	90                   	nop
c0012199:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001219d:	83 c4 2c             	add    esp,0x2c
c00121a0:	c2 04 00             	ret    0x4
c00121a3:	90                   	nop

c00121a4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00121a4:	83 ec 1c             	sub    esp,0x1c
c00121a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00121ab:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00121af:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00121b3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00121b8:	88 c8                	mov    al,cl
c00121ba:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00121be:	88 d0                	mov    al,dl
c00121c0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00121c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121c8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00121ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121d2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00121d5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00121d9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00121dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121e1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00121e7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00121eb:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00121ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121f2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00121f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121fb:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012201:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0012205:	8d 48 01             	lea    ecx,[eax+0x1]
c0012208:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001220c:	83 c2 2a             	add    edx,0x2a
c001220f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0012213:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012217:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001221d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012221:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0012224:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012228:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001222c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012230:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012236:	8d 50 01             	lea    edx,[eax+0x1]
c0012239:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001223d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0012243:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012247:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001224d:	3d 00 02 00 00       	cmp    eax,0x200
c0012252:	75 10                	jne    c0012264 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0012254:	83 ec 0c             	sub    esp,0xc
c0012257:	68 6d 52 02 c0       	push   0xc002526d
c001225c:	e8 4e 26 00 00       	call   c00148af <Krnl::panic(char const*)>
c0012261:	83 c4 10             	add    esp,0x10
c0012264:	90                   	nop
c0012265:	83 c4 1c             	add    esp,0x1c
c0012268:	c3                   	ret    
c0012269:	90                   	nop
c001226a:	66 90                	xchg   ax,ax

c001226c <ACPI::setScreenBrightnessLevel(void*, int)>:
c001226c:	b8 00 00 00 00       	mov    eax,0x0
c0012271:	c3                   	ret    
c0012272:	66 90                	xchg   ax,ax

c0012274 <ACPI::detectPCI()>:
c0012274:	53                   	push   ebx
c0012275:	83 ec 68             	sub    esp,0x68
c0012278:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c001227d:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c0012282:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0012287:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001228d:	83 e0 04             	and    eax,0x4
c0012290:	84 c0                	test   al,al
c0012292:	74 2c                	je     c00122c0 <ACPI::detectPCI()+0x4c>
c0012294:	a1 08 85 02 c0       	mov    eax,ds:0xc0028508
c0012299:	83 ec 08             	sub    esp,0x8
c001229c:	68 8a 52 02 c0       	push   0xc002528a
c00122a1:	50                   	push   eax
c00122a2:	e8 5d f8 ff ff       	call   c0011b04 <findDataTable(unsigned char*, char*)>
c00122a7:	83 c4 10             	add    esp,0x10
c00122aa:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00122ae:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c00122b3:	74 0b                	je     c00122c0 <ACPI::detectPCI()+0x4c>
c00122b5:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00122ba:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00122bf:	90                   	nop
c00122c0:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c00122c8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00122cc:	8a 00                	mov    al,BYTE PTR [eax]
c00122ce:	3c 01                	cmp    al,0x1
c00122d0:	75 0e                	jne    c00122e0 <ACPI::detectPCI()+0x6c>
c00122d2:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00122d7:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00122dc:	eb 2a                	jmp    c0012308 <ACPI::detectPCI()+0x94>
c00122de:	66 90                	xchg   ax,ax
c00122e0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00122e4:	8a 00                	mov    al,BYTE PTR [eax]
c00122e6:	3c 02                	cmp    al,0x2
c00122e8:	75 1e                	jne    c0012308 <ACPI::detectPCI()+0x94>
c00122ea:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00122ef:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00122f4:	74 12                	je     c0012308 <ACPI::detectPCI()+0x94>
c00122f6:	83 ec 0c             	sub    esp,0xc
c00122f9:	68 d4 50 02 c0       	push   0xc00250d4
c00122fe:	e8 ac 25 00 00       	call   c00148af <Krnl::panic(char const*)>
c0012303:	83 c4 10             	add    esp,0x10
c0012306:	66 90                	xchg   ax,ax
c0012308:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c001230c:	83 f0 01             	xor    eax,0x1
c001230f:	84 c0                	test   al,al
c0012311:	74 41                	je     c0012354 <ACPI::detectPCI()+0xe0>
c0012313:	e8 38 de fe ff       	call   c0000150 <manualPCIProbe>
c0012318:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001231c:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c0012321:	75 0d                	jne    c0012330 <ACPI::detectPCI()+0xbc>
c0012323:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012328:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c001232d:	eb 25                	jmp    c0012354 <ACPI::detectPCI()+0xe0>
c001232f:	90                   	nop
c0012330:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c0012335:	75 1d                	jne    c0012354 <ACPI::detectPCI()+0xe0>
c0012337:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001233c:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012341:	74 11                	je     c0012354 <ACPI::detectPCI()+0xe0>
c0012343:	83 ec 0c             	sub    esp,0xc
c0012346:	68 d4 50 02 c0       	push   0xc00250d4
c001234b:	e8 5f 25 00 00       	call   c00148af <Krnl::panic(char const*)>
c0012350:	83 c4 10             	add    esp,0x10
c0012353:	90                   	nop
c0012354:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c0012359:	0f 84 49 03 00 00    	je     c00126a8 <ACPI::detectPCI()+0x434>
c001235f:	83 ec 0c             	sub    esp,0xc
c0012362:	68 8f 52 02 c0       	push   0xc002528f
c0012367:	e8 fd 76 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001236c:	83 c4 10             	add    esp,0x10
c001236f:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012374:	0f 84 8e 00 00 00    	je     c0012408 <ACPI::detectPCI()+0x194>
c001237a:	a1 c0 7c 02 c0       	mov    eax,ds:0xc0027cc0
c001237f:	25 00 08 00 00       	and    eax,0x800
c0012384:	0f 84 16 01 00 00    	je     c00124a0 <ACPI::detectPCI()+0x22c>
c001238a:	83 ec 0c             	sub    esp,0xc
c001238d:	68 fc 50 02 c0       	push   0xc00250fc
c0012392:	e8 d2 76 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012397:	83 c4 10             	add    esp,0x10
c001239a:	a1 c0 7c 02 c0       	mov    eax,ds:0xc0027cc0
c001239f:	25 80 00 00 00       	and    eax,0x80
c00123a4:	0f 85 f6 00 00 00    	jne    c00124a0 <ACPI::detectPCI()+0x22c>
c00123aa:	66 90                	xchg   ax,ax
c00123ac:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c00123b3:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c00123b8:	89 c2                	mov    edx,eax
c00123ba:	ec                   	in     al,dx
c00123bb:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c00123bf:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c00123c3:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c00123c7:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c00123cc:	74 0a                	je     c00123d8 <ACPI::detectPCI()+0x164>
c00123ce:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c00123d3:	74 03                	je     c00123d8 <ACPI::detectPCI()+0x164>
c00123d5:	eb d5                	jmp    c00123ac <ACPI::detectPCI()+0x138>
c00123d7:	90                   	nop
c00123d8:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c00123df:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c00123e4:	89 c2                	mov    edx,eax
c00123e6:	ec                   	in     al,dx
c00123e7:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c00123eb:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c00123ef:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c00123f3:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c00123f8:	74 de                	je     c00123d8 <ACPI::detectPCI()+0x164>
c00123fa:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c00123ff:	0f 85 93 00 00 00    	jne    c0012498 <ACPI::detectPCI()+0x224>
c0012405:	eb d1                	jmp    c00123d8 <ACPI::detectPCI()+0x164>
c0012407:	90                   	nop
c0012408:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c001240c:	83 f0 01             	xor    eax,0x1
c001240f:	84 c0                	test   al,al
c0012411:	0f 84 89 00 00 00    	je     c00124a0 <ACPI::detectPCI()+0x22c>
c0012417:	a1 c0 7c 02 c0       	mov    eax,ds:0xc0027cc0
c001241c:	25 00 08 00 00       	and    eax,0x800
c0012421:	74 7d                	je     c00124a0 <ACPI::detectPCI()+0x22c>
c0012423:	83 ec 0c             	sub    esp,0xc
c0012426:	68 20 51 02 c0       	push   0xc0025120
c001242b:	e8 39 76 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012430:	83 c4 10             	add    esp,0x10
c0012433:	a1 c0 7c 02 c0       	mov    eax,ds:0xc0027cc0
c0012438:	25 80 00 00 00       	and    eax,0x80
c001243d:	75 61                	jne    c00124a0 <ACPI::detectPCI()+0x22c>
c001243f:	90                   	nop
c0012440:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c0012447:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c001244c:	89 c2                	mov    edx,eax
c001244e:	ec                   	in     al,dx
c001244f:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0012453:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c0012457:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c001245b:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c0012460:	74 0a                	je     c001246c <ACPI::detectPCI()+0x1f8>
c0012462:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c0012467:	74 03                	je     c001246c <ACPI::detectPCI()+0x1f8>
c0012469:	eb d5                	jmp    c0012440 <ACPI::detectPCI()+0x1cc>
c001246b:	90                   	nop
c001246c:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c0012473:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c0012478:	89 c2                	mov    edx,eax
c001247a:	ec                   	in     al,dx
c001247b:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001247f:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c0012483:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c0012487:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c001248c:	74 de                	je     c001246c <ACPI::detectPCI()+0x1f8>
c001248e:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c0012493:	75 07                	jne    c001249c <ACPI::detectPCI()+0x228>
c0012495:	eb d5                	jmp    c001246c <ACPI::detectPCI()+0x1f8>
c0012497:	90                   	nop
c0012498:	90                   	nop
c0012499:	eb 05                	jmp    c00124a0 <ACPI::detectPCI()+0x22c>
c001249b:	90                   	nop
c001249c:	90                   	nop
c001249d:	8d 76 00             	lea    esi,[esi+0x0]
c00124a0:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c00124a8:	83 ec 0c             	sub    esp,0xc
c00124ab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00124af:	e8 5b 75 ff ff       	call   c0009a0f <malloc>
c00124b4:	83 c4 10             	add    esp,0x10
c00124b7:	89 c3                	mov    ebx,eax
c00124b9:	83 ec 0c             	sub    esp,0xc
c00124bc:	53                   	push   ebx
c00124bd:	e8 e4 ac 00 00       	call   c001d1a6 <PCI::PCI()>
c00124c2:	83 c4 10             	add    esp,0x10
c00124c5:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c00124c9:	a1 c0 7c 02 c0       	mov    eax,ds:0xc0027cc0
c00124ce:	25 00 08 00 00       	and    eax,0x800
c00124d3:	74 7b                	je     c0012550 <ACPI::detectPCI()+0x2dc>
c00124d5:	83 ec 0c             	sub    esp,0xc
c00124d8:	68 a7 52 02 c0       	push   0xc00252a7
c00124dd:	e8 87 75 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00124e2:	83 c4 10             	add    esp,0x10
c00124e5:	a1 c0 7c 02 c0       	mov    eax,ds:0xc0027cc0
c00124ea:	25 80 00 00 00       	and    eax,0x80
c00124ef:	75 5f                	jne    c0012550 <ACPI::detectPCI()+0x2dc>
c00124f1:	8d 76 00             	lea    esi,[esi+0x0]
c00124f4:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c00124fb:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0012500:	89 c2                	mov    edx,eax
c0012502:	ec                   	in     al,dx
c0012503:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c0012507:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c001250b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001250f:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c0012514:	74 0a                	je     c0012520 <ACPI::detectPCI()+0x2ac>
c0012516:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c001251b:	74 03                	je     c0012520 <ACPI::detectPCI()+0x2ac>
c001251d:	eb d5                	jmp    c00124f4 <ACPI::detectPCI()+0x280>
c001251f:	90                   	nop
c0012520:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c0012527:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c001252c:	89 c2                	mov    edx,eax
c001252e:	ec                   	in     al,dx
c001252f:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0012533:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c0012537:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001253b:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c0012540:	74 de                	je     c0012520 <ACPI::detectPCI()+0x2ac>
c0012542:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c0012547:	75 03                	jne    c001254c <ACPI::detectPCI()+0x2d8>
c0012549:	eb d5                	jmp    c0012520 <ACPI::detectPCI()+0x2ac>
c001254b:	90                   	nop
c001254c:	90                   	nop
c001254d:	8d 76 00             	lea    esi,[esi+0x0]
c0012550:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012554:	83 ec 08             	sub    esp,0x8
c0012557:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001255b:	50                   	push   eax
c001255c:	e8 25 bc ff ff       	call   c000e186 <Device::addChild(Device*)>
c0012561:	83 c4 10             	add    esp,0x10
c0012564:	a1 c0 7c 02 c0       	mov    eax,ds:0xc0027cc0
c0012569:	25 00 08 00 00       	and    eax,0x800
c001256e:	74 78                	je     c00125e8 <ACPI::detectPCI()+0x374>
c0012570:	83 ec 0c             	sub    esp,0xc
c0012573:	68 ad 52 02 c0       	push   0xc00252ad
c0012578:	e8 ec 74 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001257d:	83 c4 10             	add    esp,0x10
c0012580:	a1 c0 7c 02 c0       	mov    eax,ds:0xc0027cc0
c0012585:	25 80 00 00 00       	and    eax,0x80
c001258a:	75 5c                	jne    c00125e8 <ACPI::detectPCI()+0x374>
c001258c:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c0012593:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0012598:	89 c2                	mov    edx,eax
c001259a:	ec                   	in     al,dx
c001259b:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c001259f:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c00125a3:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c00125a7:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c00125ac:	74 0a                	je     c00125b8 <ACPI::detectPCI()+0x344>
c00125ae:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c00125b3:	74 03                	je     c00125b8 <ACPI::detectPCI()+0x344>
c00125b5:	eb d5                	jmp    c001258c <ACPI::detectPCI()+0x318>
c00125b7:	90                   	nop
c00125b8:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c00125bf:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00125c4:	89 c2                	mov    edx,eax
c00125c6:	ec                   	in     al,dx
c00125c7:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c00125cb:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c00125cf:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c00125d3:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c00125d8:	74 de                	je     c00125b8 <ACPI::detectPCI()+0x344>
c00125da:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c00125df:	75 03                	jne    c00125e4 <ACPI::detectPCI()+0x370>
c00125e1:	eb d5                	jmp    c00125b8 <ACPI::detectPCI()+0x344>
c00125e3:	90                   	nop
c00125e4:	90                   	nop
c00125e5:	8d 76 00             	lea    esi,[esi+0x0]
c00125e8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00125ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00125ee:	83 c0 08             	add    eax,0x8
c00125f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00125f3:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00125f8:	74 0a                	je     c0012604 <ACPI::detectPCI()+0x390>
c00125fa:	ba 01 00 00 00       	mov    edx,0x1
c00125ff:	eb 0b                	jmp    c001260c <ACPI::detectPCI()+0x398>
c0012601:	8d 76 00             	lea    esi,[esi+0x0]
c0012604:	ba 02 00 00 00       	mov    edx,0x2
c0012609:	8d 76 00             	lea    esi,[esi+0x0]
c001260c:	6a 00                	push   0x0
c001260e:	6a 00                	push   0x0
c0012610:	52                   	push   edx
c0012611:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012615:	ff d0                	call   eax
c0012617:	83 c4 10             	add    esp,0x10
c001261a:	a1 c0 7c 02 c0       	mov    eax,ds:0xc0027cc0
c001261f:	25 00 08 00 00       	and    eax,0x800
c0012624:	0f 84 26 01 00 00    	je     c0012750 <ACPI::detectPCI()+0x4dc>
c001262a:	83 ec 0c             	sub    esp,0xc
c001262d:	68 b3 52 02 c0       	push   0xc00252b3
c0012632:	e8 32 74 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012637:	83 c4 10             	add    esp,0x10
c001263a:	a1 c0 7c 02 c0       	mov    eax,ds:0xc0027cc0
c001263f:	25 80 00 00 00       	and    eax,0x80
c0012644:	0f 85 06 01 00 00    	jne    c0012750 <ACPI::detectPCI()+0x4dc>
c001264a:	66 90                	xchg   ax,ax
c001264c:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c0012653:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012658:	89 c2                	mov    edx,eax
c001265a:	ec                   	in     al,dx
c001265b:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001265f:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0012663:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0012667:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c001266c:	74 0a                	je     c0012678 <ACPI::detectPCI()+0x404>
c001266e:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c0012673:	74 03                	je     c0012678 <ACPI::detectPCI()+0x404>
c0012675:	eb d5                	jmp    c001264c <ACPI::detectPCI()+0x3d8>
c0012677:	90                   	nop
c0012678:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c001267f:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0012684:	89 c2                	mov    edx,eax
c0012686:	ec                   	in     al,dx
c0012687:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001268b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001268f:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c0012693:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c0012698:	74 de                	je     c0012678 <ACPI::detectPCI()+0x404>
c001269a:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c001269f:	0f 85 a7 00 00 00    	jne    c001274c <ACPI::detectPCI()+0x4d8>
c00126a5:	eb d1                	jmp    c0012678 <ACPI::detectPCI()+0x404>
c00126a7:	90                   	nop
c00126a8:	83 ec 0c             	sub    esp,0xc
c00126ab:	68 b9 52 02 c0       	push   0xc00252b9
c00126b0:	e8 4a a6 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00126b5:	83 c4 10             	add    esp,0x10
c00126b8:	83 ec 0c             	sub    esp,0xc
c00126bb:	68 c4 52 02 c0       	push   0xc00252c4
c00126c0:	e8 a4 73 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00126c5:	83 c4 10             	add    esp,0x10
c00126c8:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c00126d0:	83 ec 0c             	sub    esp,0xc
c00126d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00126d7:	e8 33 73 ff ff       	call   c0009a0f <malloc>
c00126dc:	83 c4 10             	add    esp,0x10
c00126df:	89 c3                	mov    ebx,eax
c00126e1:	83 ec 0c             	sub    esp,0xc
c00126e4:	53                   	push   ebx
c00126e5:	e8 26 bc 00 00       	call   c001e310 <IDE::IDE()>
c00126ea:	83 c4 10             	add    esp,0x10
c00126ed:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c00126f1:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00126f5:	83 ec 08             	sub    esp,0x8
c00126f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00126fc:	50                   	push   eax
c00126fd:	e8 84 ba ff ff       	call   c000e186 <Device::addChild(Device*)>
c0012702:	83 c4 10             	add    esp,0x10
c0012705:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012709:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0012713:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012717:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0012720:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012724:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c001272d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012731:	8b 00                	mov    eax,DWORD PTR [eax]
c0012733:	83 c0 08             	add    eax,0x8
c0012736:	8b 00                	mov    eax,DWORD PTR [eax]
c0012738:	6a 00                	push   0x0
c001273a:	6a 00                	push   0x0
c001273c:	6a 00                	push   0x0
c001273e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012742:	ff d0                	call   eax
c0012744:	83 c4 10             	add    esp,0x10
c0012747:	eb 07                	jmp    c0012750 <ACPI::detectPCI()+0x4dc>
c0012749:	8d 76 00             	lea    esi,[esi+0x0]
c001274c:	90                   	nop
c001274d:	8d 76 00             	lea    esi,[esi+0x0]
c0012750:	90                   	nop
c0012751:	83 c4 68             	add    esp,0x68
c0012754:	5b                   	pop    ebx
c0012755:	c3                   	ret    
c0012756:	66 90                	xchg   ax,ax

c0012758 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0012758:	83 ec 1c             	sub    esp,0x1c
c001275b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001275f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0012762:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012766:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c001276b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012770:	83 ec 08             	sub    esp,0x8
c0012773:	52                   	push   edx
c0012774:	50                   	push   eax
c0012775:	e8 64 68 ff ff       	call   c0008fde <Computer::readCMOS(unsigned char)>
c001277a:	83 c4 10             	add    esp,0x10
c001277d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0012781:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0012786:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001278b:	83 ec 04             	sub    esp,0x4
c001278e:	6a 01                	push   0x1
c0012790:	52                   	push   edx
c0012791:	50                   	push   eax
c0012792:	e8 23 6a ff ff       	call   c00091ba <Computer::writeCMOS(unsigned char, unsigned char)>
c0012797:	83 c4 10             	add    esp,0x10
c001279a:	90                   	nop
c001279b:	83 c4 1c             	add    esp,0x1c
c001279e:	c3                   	ret    
c001279f:	90                   	nop

c00127a0 <ACPI::sleep()>:
c00127a0:	83 ec 0c             	sub    esp,0xc
c00127a3:	a1 e0 82 02 c0       	mov    eax,ds:0xc00282e0
c00127a8:	85 c0                	test   eax,eax
c00127aa:	74 08                	je     c00127b4 <ACPI::sleep()+0x14>
c00127ac:	a1 e0 82 02 c0       	mov    eax,ds:0xc00282e0
c00127b1:	ff d0                	call   eax
c00127b3:	90                   	nop
c00127b4:	90                   	nop
c00127b5:	83 c4 0c             	add    esp,0xc
c00127b8:	c3                   	ret    
c00127b9:	90                   	nop
c00127ba:	66 90                	xchg   ax,ax

c00127bc <ACPI::open(int, int, void*)>:
c00127bc:	57                   	push   edi
c00127bd:	56                   	push   esi
c00127be:	53                   	push   ebx
c00127bf:	81 ec 70 01 00 00    	sub    esp,0x170
c00127c5:	83 ec 0c             	sub    esp,0xc
c00127c8:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c00127cf:	e8 a0 fa ff ff       	call   c0012274 <ACPI::detectPCI()>
c00127d4:	83 c4 10             	add    esp,0x10
c00127d7:	83 ec 0c             	sub    esp,0xc
c00127da:	68 44 51 02 c0       	push   0xc0025144
c00127df:	e8 85 72 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00127e4:	83 c4 10             	add    esp,0x10
c00127e7:	83 ec 0c             	sub    esp,0xc
c00127ea:	68 d9 52 02 c0       	push   0xc00252d9
c00127ef:	e8 97 49 00 00       	call   c001718b <Thr::loadKernelSymbolTable(char const*)>
c00127f4:	83 c4 10             	add    esp,0x10
c00127f7:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c00127ff:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c001280a:	83 ec 0c             	sub    esp,0xc
c001280d:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012814:	e8 f6 71 ff ff       	call   c0009a0f <malloc>
c0012819:	83 c4 10             	add    esp,0x10
c001281c:	89 c3                	mov    ebx,eax
c001281e:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0012823:	83 ec 04             	sub    esp,0x4
c0012826:	50                   	push   eax
c0012827:	68 f7 52 02 c0       	push   0xc00252f7
c001282c:	53                   	push   ebx
c001282d:	e8 38 aa ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0012832:	83 c4 10             	add    esp,0x10
c0012835:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c001283c:	83 ec 08             	sub    esp,0x8
c001283f:	6a 01                	push   0x1
c0012841:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012848:	e8 bf aa ff ff       	call   c000d30c <File::open(FileOpenMode)>
c001284d:	83 c4 10             	add    esp,0x10
c0012850:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c0012857:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c001285f:	75 17                	jne    c0012878 <ACPI::open(int, int, void*)+0xbc>
c0012861:	83 ec 0c             	sub    esp,0xc
c0012864:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001286b:	e8 fa aa ff ff       	call   c000d36a <File::close()>
c0012870:	83 c4 10             	add    esp,0x10
c0012873:	eb 0b                	jmp    c0012880 <ACPI::open(int, int, void*)+0xc4>
c0012875:	8d 76 00             	lea    esi,[esi+0x0]
c0012878:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0012880:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c0012888:	74 1e                	je     c00128a8 <ACPI::open(int, int, void*)+0xec>
c001288a:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0012891:	8b 00                	mov    eax,DWORD PTR [eax]
c0012893:	83 c0 08             	add    eax,0x8
c0012896:	8b 00                	mov    eax,DWORD PTR [eax]
c0012898:	83 ec 0c             	sub    esp,0xc
c001289b:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c00128a2:	ff d0                	call   eax
c00128a4:	83 c4 10             	add    esp,0x10
c00128a7:	90                   	nop
c00128a8:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c00128af:	83 f0 01             	xor    eax,0x1
c00128b2:	84 c0                	test   al,al
c00128b4:	74 42                	je     c00128f8 <ACPI::open(int, int, void*)+0x13c>
c00128b6:	83 ec 0c             	sub    esp,0xc
c00128b9:	68 15 53 02 c0       	push   0xc0025315
c00128be:	e8 a6 71 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00128c3:	83 c4 10             	add    esp,0x10
c00128c6:	83 ec 04             	sub    esp,0x4
c00128c9:	6a 0c                	push   0xc
c00128cb:	68 30 53 02 c0       	push   0xc0025330
c00128d0:	68 41 53 02 c0       	push   0xc0025341
c00128d5:	e8 1b 2f 00 00       	call   c00157f5 <Reg::readIntWithDefault(char*, char*, int)>
c00128da:	83 c4 10             	add    esp,0x10
c00128dd:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c00128e4:	83 ec 0c             	sub    esp,0xc
c00128e7:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c00128ee:	e8 f0 92 ff ff       	call   c000bbe3 <Virt::setupPageSwapping(int)>
c00128f3:	83 c4 10             	add    esp,0x10
c00128f6:	66 90                	xchg   ax,ax
c00128f8:	83 ec 0c             	sub    esp,0xc
c00128fb:	68 66 3b 02 c0       	push   0xc0023b66
c0012900:	e8 64 71 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012905:	83 c4 10             	add    esp,0x10
c0012908:	8b 1d a8 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ca8
c001290e:	83 ec 08             	sub    esp,0x8
c0012911:	6a 01                	push   0x1
c0012913:	68 48 53 02 c0       	push   0xc0025348
c0012918:	e8 e5 52 00 00       	call   c0017c02 <Thr::loadDLL(char const*, bool)>
c001291d:	83 c4 10             	add    esp,0x10
c0012920:	83 ec 08             	sub    esp,0x8
c0012923:	53                   	push   ebx
c0012924:	50                   	push   eax
c0012925:	e8 09 55 00 00       	call   c0017e33 <Thr::executeDLL(unsigned long, void*)>
c001292a:	83 c4 10             	add    esp,0x10
c001292d:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0012934:	83 ec 08             	sub    esp,0x8
c0012937:	6a 12                	push   0x12
c0012939:	50                   	push   eax
c001293a:	e8 cb bb ff ff       	call   c000e50a <getDevicesOfType(DeviceType)>
c001293f:	83 c4 0c             	add    esp,0xc
c0012942:	66 90                	xchg   ax,ax
c0012944:	83 ec 0c             	sub    esp,0xc
c0012947:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001294e:	50                   	push   eax
c001294f:	e8 0c 04 01 00       	call   c0022d60 <LinkedList<Device>::isEmpty()>
c0012954:	83 c4 10             	add    esp,0x10
c0012957:	83 f0 01             	xor    eax,0x1
c001295a:	84 c0                	test   al,al
c001295c:	0f 84 46 01 00 00    	je     c0012aa8 <ACPI::open(int, int, void*)+0x2ec>
c0012962:	83 ec 0c             	sub    esp,0xc
c0012965:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001296c:	50                   	push   eax
c001296d:	e8 0a 04 01 00       	call   c0022d7c <LinkedList<Device>::getFirstElement()>
c0012972:	83 c4 10             	add    esp,0x10
c0012975:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c001297c:	83 ec 0c             	sub    esp,0xc
c001297f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012986:	50                   	push   eax
c0012987:	e8 f8 03 01 00       	call   c0022d84 <LinkedList<Device>::removeFirst()>
c001298c:	83 c4 10             	add    esp,0x10
c001298f:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0012996:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c001299d:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c00129a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00129a8:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c00129ae:	ba 09 00 00 00       	mov    edx,0x9
c00129b3:	fc                   	cld    
c00129b4:	89 c7                	mov    edi,eax
c00129b6:	89 de                	mov    esi,ebx
c00129b8:	89 d1                	mov    ecx,edx
c00129ba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00129bc:	83 ec 08             	sub    esp,0x8
c00129bf:	8d 44 24 38          	lea    eax,[esp+0x38]
c00129c3:	50                   	push   eax
c00129c4:	83 ec 24             	sub    esp,0x24
c00129c7:	89 e0                	mov    eax,esp
c00129c9:	89 c3                	mov    ebx,eax
c00129cb:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00129cf:	ba 09 00 00 00       	mov    edx,0x9
c00129d4:	89 df                	mov    edi,ebx
c00129d6:	89 c6                	mov    esi,eax
c00129d8:	89 d1                	mov    ecx,edx
c00129da:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00129dc:	e8 a3 ac 00 00       	call   c001d684 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c00129e1:	83 c4 30             	add    esp,0x30
c00129e4:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c00129eb:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c00129f3:	0f 84 4b ff ff ff    	je     c0012944 <ACPI::open(int, int, void*)+0x188>
c00129f9:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0012a04:	83 ec 0c             	sub    esp,0xc
c0012a07:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0012a0e:	e8 fc 6f ff ff       	call   c0009a0f <malloc>
c0012a13:	83 c4 10             	add    esp,0x10
c0012a16:	89 c3                	mov    ebx,eax
c0012a18:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0012a1d:	83 ec 04             	sub    esp,0x4
c0012a20:	50                   	push   eax
c0012a21:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012a28:	53                   	push   ebx
c0012a29:	e8 3c a8 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0012a2e:	83 c4 10             	add    esp,0x10
c0012a31:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0012a38:	83 ec 0c             	sub    esp,0xc
c0012a3b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012a42:	e8 33 ab ff ff       	call   c000d57a <File::exists()>
c0012a47:	83 c4 10             	add    esp,0x10
c0012a4a:	84 c0                	test   al,al
c0012a4c:	74 2a                	je     c0012a78 <ACPI::open(int, int, void*)+0x2bc>
c0012a4e:	83 ec 08             	sub    esp,0x8
c0012a51:	6a 01                	push   0x1
c0012a53:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012a5a:	e8 a3 51 00 00       	call   c0017c02 <Thr::loadDLL(char const*, bool)>
c0012a5f:	83 c4 10             	add    esp,0x10
c0012a62:	83 ec 08             	sub    esp,0x8
c0012a65:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012a6c:	50                   	push   eax
c0012a6d:	e8 c1 53 00 00       	call   c0017e33 <Thr::executeDLL(unsigned long, void*)>
c0012a72:	83 c4 10             	add    esp,0x10
c0012a75:	8d 76 00             	lea    esi,[esi+0x0]
c0012a78:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0012a80:	0f 84 be fe ff ff    	je     c0012944 <ACPI::open(int, int, void*)+0x188>
c0012a86:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0012a8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a8f:	83 c0 08             	add    eax,0x8
c0012a92:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a94:	83 ec 0c             	sub    esp,0xc
c0012a97:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012a9e:	ff d0                	call   eax
c0012aa0:	83 c4 10             	add    esp,0x10
c0012aa3:	e9 9c fe ff ff       	jmp    c0012944 <ACPI::open(int, int, void*)+0x188>
c0012aa8:	83 ec 0c             	sub    esp,0xc
c0012aab:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012ab2:	50                   	push   eax
c0012ab3:	e8 a4 02 01 00       	call   c0022d5c <LinkedList<Device>::~LinkedList()>
c0012ab8:	83 c4 10             	add    esp,0x10
c0012abb:	8b 1d a8 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ca8
c0012ac1:	83 ec 08             	sub    esp,0x8
c0012ac4:	6a 01                	push   0x1
c0012ac6:	68 63 53 02 c0       	push   0xc0025363
c0012acb:	e8 32 51 00 00       	call   c0017c02 <Thr::loadDLL(char const*, bool)>
c0012ad0:	83 c4 10             	add    esp,0x10
c0012ad3:	83 ec 08             	sub    esp,0x8
c0012ad6:	53                   	push   ebx
c0012ad7:	50                   	push   eax
c0012ad8:	e8 56 53 00 00       	call   c0017e33 <Thr::executeDLL(unsigned long, void*)>
c0012add:	83 c4 10             	add    esp,0x10
c0012ae0:	8b 1d a8 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ca8
c0012ae6:	83 ec 08             	sub    esp,0x8
c0012ae9:	6a 01                	push   0x1
c0012aeb:	68 80 53 02 c0       	push   0xc0025380
c0012af0:	e8 0d 51 00 00       	call   c0017c02 <Thr::loadDLL(char const*, bool)>
c0012af5:	83 c4 10             	add    esp,0x10
c0012af8:	83 ec 08             	sub    esp,0x8
c0012afb:	53                   	push   ebx
c0012afc:	50                   	push   eax
c0012afd:	e8 31 53 00 00       	call   c0017e33 <Thr::executeDLL(unsigned long, void*)>
c0012b02:	83 c4 10             	add    esp,0x10
c0012b05:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0012b0a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012b10:	83 e0 04             	and    eax,0x4
c0012b13:	84 c0                	test   al,al
c0012b15:	0f 84 15 01 00 00    	je     c0012c30 <ACPI::open(int, int, void*)+0x474>
c0012b1b:	83 ec 0c             	sub    esp,0xc
c0012b1e:	68 9d 53 02 c0       	push   0xc002539d
c0012b23:	e8 41 6f ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012b28:	83 c4 10             	add    esp,0x10
c0012b2b:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0012b36:	83 ec 0c             	sub    esp,0xc
c0012b39:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0012b40:	e8 ca 6e ff ff       	call   c0009a0f <malloc>
c0012b45:	83 c4 10             	add    esp,0x10
c0012b48:	89 c3                	mov    ebx,eax
c0012b4a:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0012b4f:	83 ec 04             	sub    esp,0x4
c0012b52:	50                   	push   eax
c0012b53:	68 ba 53 02 c0       	push   0xc00253ba
c0012b58:	53                   	push   ebx
c0012b59:	e8 0c a7 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0012b5e:	83 c4 10             	add    esp,0x10
c0012b61:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0012b68:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012b70:	74 1a                	je     c0012b8c <ACPI::open(int, int, void*)+0x3d0>
c0012b72:	83 ec 0c             	sub    esp,0xc
c0012b75:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012b7c:	e8 f9 a9 ff ff       	call   c000d57a <File::exists()>
c0012b81:	83 c4 10             	add    esp,0x10
c0012b84:	84 c0                	test   al,al
c0012b86:	74 04                	je     c0012b8c <ACPI::open(int, int, void*)+0x3d0>
c0012b88:	b0 01                	mov    al,0x1
c0012b8a:	eb 04                	jmp    c0012b90 <ACPI::open(int, int, void*)+0x3d4>
c0012b8c:	b0 00                	mov    al,0x0
c0012b8e:	66 90                	xchg   ax,ax
c0012b90:	84 c0                	test   al,al
c0012b92:	74 28                	je     c0012bbc <ACPI::open(int, int, void*)+0x400>
c0012b94:	83 ec 08             	sub    esp,0x8
c0012b97:	6a 01                	push   0x1
c0012b99:	68 ba 53 02 c0       	push   0xc00253ba
c0012b9e:	e8 5f 50 00 00       	call   c0017c02 <Thr::loadDLL(char const*, bool)>
c0012ba3:	83 c4 10             	add    esp,0x10
c0012ba6:	83 ec 08             	sub    esp,0x8
c0012ba9:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0012bb0:	50                   	push   eax
c0012bb1:	e8 7d 52 00 00       	call   c0017e33 <Thr::executeDLL(unsigned long, void*)>
c0012bb6:	83 c4 10             	add    esp,0x10
c0012bb9:	8d 76 00             	lea    esi,[esi+0x0]
c0012bbc:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012bc4:	74 2a                	je     c0012bf0 <ACPI::open(int, int, void*)+0x434>
c0012bc6:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012bce:	74 20                	je     c0012bf0 <ACPI::open(int, int, void*)+0x434>
c0012bd0:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0012bd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0012bd9:	83 c0 08             	add    eax,0x8
c0012bdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0012bde:	83 ec 0c             	sub    esp,0xc
c0012be1:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012be8:	ff d0                	call   eax
c0012bea:	83 c4 10             	add    esp,0x10
c0012bed:	8d 76 00             	lea    esi,[esi+0x0]
c0012bf0:	a1 08 85 02 c0       	mov    eax,ds:0xc0028508
c0012bf5:	83 ec 08             	sub    esp,0x8
c0012bf8:	68 d7 53 02 c0       	push   0xc00253d7
c0012bfd:	50                   	push   eax
c0012bfe:	e8 01 ef ff ff       	call   c0011b04 <findDataTable(unsigned char*, char*)>
c0012c03:	83 c4 10             	add    esp,0x10
c0012c06:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0012c0d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0012c15:	74 19                	je     c0012c30 <ACPI::open(int, int, void*)+0x474>
c0012c17:	83 ec 08             	sub    esp,0x8
c0012c1a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012c21:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012c28:	e8 2b fb ff ff       	call   c0012758 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0012c2d:	83 c4 10             	add    esp,0x10
c0012c30:	b8 00 00 00 00       	mov    eax,0x0
c0012c35:	81 c4 70 01 00 00    	add    esp,0x170
c0012c3b:	5b                   	pop    ebx
c0012c3c:	5e                   	pop    esi
c0012c3d:	5f                   	pop    edi
c0012c3e:	c3                   	ret    
c0012c3f:	90                   	nop

c0012c40 <CPU::close(int, int, void*)>:
c0012c40:	31 c0                	xor    eax,eax
c0012c42:	c3                   	ret    
c0012c43:	90                   	nop

c0012c44 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0012c44:	55                   	push   ebp
c0012c45:	57                   	push   edi
c0012c46:	56                   	push   esi
c0012c47:	53                   	push   ebx
c0012c48:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012c4c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012c50:	89 ce                	mov    esi,ecx
c0012c52:	89 d5                	mov    ebp,edx
c0012c54:	80 f9 04             	cmp    cl,0x4
c0012c57:	75 28                	jne    c0012c81 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0012c59:	8d 42 f9             	lea    eax,[edx-0x7]
c0012c5c:	3c 03                	cmp    al,0x3
c0012c5e:	0f 86 63 01 00 00    	jbe    c0012dc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012c64:	80 fa 03             	cmp    dl,0x3
c0012c67:	0f 84 5a 01 00 00    	je     c0012dc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012c6d:	8d 7a f2             	lea    edi,[edx-0xe]
c0012c70:	b8 70 75 02 c0       	mov    eax,0xc0027570
c0012c75:	89 fb                	mov    ebx,edi
c0012c77:	80 fb 01             	cmp    bl,0x1
c0012c7a:	77 4e                	ja     c0012cca <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0012c7c:	e9 52 01 00 00       	jmp    c0012dd3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012c81:	80 f9 05             	cmp    cl,0x5
c0012c84:	75 4d                	jne    c0012cd3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0012c86:	b8 80 75 02 c0       	mov    eax,0xc0027580
c0012c8b:	80 fa 03             	cmp    dl,0x3
c0012c8e:	0f 86 3f 01 00 00    	jbe    c0012dd3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012c94:	8d 7a fa             	lea    edi,[edx-0x6]
c0012c97:	b8 90 75 02 c0       	mov    eax,0xc0027590
c0012c9c:	89 fb                	mov    ebx,edi
c0012c9e:	80 fb 01             	cmp    bl,0x1
c0012ca1:	0f 86 2c 01 00 00    	jbe    c0012dd3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ca7:	b8 a0 75 02 c0       	mov    eax,0xc00275a0
c0012cac:	80 fa 08             	cmp    dl,0x8
c0012caf:	0f 84 1e 01 00 00    	je     c0012dd3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012cb5:	89 d7                	mov    edi,edx
c0012cb7:	b8 b0 75 02 c0       	mov    eax,0xc00275b0
c0012cbc:	83 e7 fb             	and    edi,0xfffffffb
c0012cbf:	89 fb                	mov    ebx,edi
c0012cc1:	80 fb 09             	cmp    bl,0x9
c0012cc4:	0f 84 09 01 00 00    	je     c0012dd3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012cca:	31 c0                	xor    eax,eax
c0012ccc:	89 eb                	mov    ebx,ebp
c0012cce:	0f b6 fb             	movzx  edi,bl
c0012cd1:	eb 30                	jmp    c0012d03 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0012cd3:	31 c0                	xor    eax,eax
c0012cd5:	80 f9 06             	cmp    cl,0x6
c0012cd8:	75 f2                	jne    c0012ccc <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012cda:	80 fa 0a             	cmp    dl,0xa
c0012cdd:	77 ed                	ja     c0012ccc <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012cdf:	bf de 05 00 00       	mov    edi,0x5de
c0012ce4:	0f a3 d7             	bt     edi,edx
c0012ce7:	73 e3                	jae    c0012ccc <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012ce9:	b8 c0 75 02 c0       	mov    eax,0xc00275c0
c0012cee:	e9 e0 00 00 00       	jmp    c0012dd3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012cf3:	39 c7                	cmp    edi,eax
c0012cf5:	0f 84 d3 00 00 00    	je     c0012dce <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012cfb:	40                   	inc    eax
c0012cfc:	3d d0 00 00 00       	cmp    eax,0xd0
c0012d01:	74 09                	je     c0012d0c <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0012d03:	89 f3                	mov    ebx,esi
c0012d05:	80 fb 0f             	cmp    bl,0xf
c0012d08:	75 f1                	jne    c0012cfb <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0012d0a:	eb e7                	jmp    c0012cf3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0012d0c:	80 f9 10             	cmp    cl,0x10
c0012d0f:	75 14                	jne    c0012d25 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0012d11:	8d 42 fc             	lea    eax,[edx-0x4]
c0012d14:	83 e0 fb             	and    eax,0xfffffffb
c0012d17:	3c 02                	cmp    al,0x2
c0012d19:	76 34                	jbe    c0012d4f <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0012d1b:	b8 5d 55 02 c0       	mov    eax,0xc002555d
c0012d20:	80 fa 02             	cmp    dl,0x2
c0012d23:	eb 24                	jmp    c0012d49 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0012d25:	80 f9 11             	cmp    cl,0x11
c0012d28:	75 13                	jne    c0012d3d <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0012d2a:	b8 5d 55 02 c0       	mov    eax,0xc002555d
c0012d2f:	80 fa 03             	cmp    dl,0x3
c0012d32:	0f 85 9b 00 00 00    	jne    c0012dd3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d38:	e9 91 00 00 00       	jmp    c0012dce <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012d3d:	80 f9 12             	cmp    cl,0x12
c0012d40:	75 14                	jne    c0012d56 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0012d42:	b8 5d 55 02 c0       	mov    eax,0xc002555d
c0012d47:	fe ca                	dec    dl
c0012d49:	0f 85 84 00 00 00    	jne    c0012dd3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d4f:	b8 e0 75 02 c0       	mov    eax,0xc00275e0
c0012d54:	eb 7d                	jmp    c0012dd3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d56:	80 f9 14             	cmp    cl,0x14
c0012d59:	75 12                	jne    c0012d6d <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0012d5b:	4a                   	dec    edx
c0012d5c:	b8 5d 55 02 c0       	mov    eax,0xc002555d
c0012d61:	80 fa 01             	cmp    dl,0x1
c0012d64:	77 6d                	ja     c0012dd3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d66:	b8 f0 75 02 c0       	mov    eax,0xc00275f0
c0012d6b:	eb 66                	jmp    c0012dd3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d6d:	80 f9 15             	cmp    cl,0x15
c0012d70:	75 31                	jne    c0012da3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0012d72:	b8 00 76 02 c0       	mov    eax,0xc0027600
c0012d77:	80 fa 01             	cmp    dl,0x1
c0012d7a:	74 57                	je     c0012dd3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d7c:	b8 5d 55 02 c0       	mov    eax,0xc002555d
c0012d81:	80 fa 13             	cmp    dl,0x13
c0012d84:	76 0c                	jbe    c0012d92 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0012d86:	80 fa 30             	cmp    dl,0x30
c0012d89:	75 48                	jne    c0012dd3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d8b:	b8 20 76 02 c0       	mov    eax,0xc0027620
c0012d90:	eb 41                	jmp    c0012dd3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d92:	b9 04 00 09 00       	mov    ecx,0x90004
c0012d97:	0f a3 d1             	bt     ecx,edx
c0012d9a:	73 37                	jae    c0012dd3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d9c:	b8 10 76 02 c0       	mov    eax,0xc0027610
c0012da1:	eb 30                	jmp    c0012dd3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012da3:	b8 5d 55 02 c0       	mov    eax,0xc002555d
c0012da8:	80 f9 16             	cmp    cl,0x16
c0012dab:	75 26                	jne    c0012dd3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012dad:	b8 30 76 02 c0       	mov    eax,0xc0027630
c0012db2:	84 d2                	test   dl,dl
c0012db4:	74 1d                	je     c0012dd3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012db6:	b8 5d 55 02 c0       	mov    eax,0xc002555d
c0012dbb:	80 fa 30             	cmp    dl,0x30
c0012dbe:	75 13                	jne    c0012dd3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012dc0:	b8 40 76 02 c0       	mov    eax,0xc0027640
c0012dc5:	eb 0c                	jmp    c0012dd3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012dc7:	b8 60 75 02 c0       	mov    eax,0xc0027560
c0012dcc:	eb 05                	jmp    c0012dd3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012dce:	b8 d0 75 02 c0       	mov    eax,0xc00275d0
c0012dd3:	5b                   	pop    ebx
c0012dd4:	5e                   	pop    esi
c0012dd5:	5f                   	pop    edi
c0012dd6:	5d                   	pop    ebp
c0012dd7:	c3                   	ret    

c0012dd8 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0012dd8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ddc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012de0:	80 f9 04             	cmp    cl,0x4
c0012de3:	75 6b                	jne    c0012e50 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0012de5:	b8 c0 73 02 c0       	mov    eax,0xc00273c0
c0012dea:	80 fa 01             	cmp    dl,0x1
c0012ded:	0f 86 92 02 00 00    	jbe    c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012df3:	b8 d0 73 02 c0       	mov    eax,0xc00273d0
c0012df8:	80 fa 02             	cmp    dl,0x2
c0012dfb:	0f 84 84 02 00 00    	je     c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e01:	b8 e0 73 02 c0       	mov    eax,0xc00273e0
c0012e06:	80 fa 03             	cmp    dl,0x3
c0012e09:	0f 84 76 02 00 00    	je     c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e0f:	b8 f0 73 02 c0       	mov    eax,0xc00273f0
c0012e14:	80 fa 04             	cmp    dl,0x4
c0012e17:	0f 84 68 02 00 00    	je     c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e1d:	b8 00 74 02 c0       	mov    eax,0xc0027400
c0012e22:	80 fa 05             	cmp    dl,0x5
c0012e25:	0f 84 5a 02 00 00    	je     c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e2b:	b8 e0 73 02 c0       	mov    eax,0xc00273e0
c0012e30:	80 fa 07             	cmp    dl,0x7
c0012e33:	0f 84 4c 02 00 00    	je     c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e39:	83 ea 08             	sub    edx,0x8
c0012e3c:	b8 5d 55 02 c0       	mov    eax,0xc002555d
c0012e41:	80 fa 01             	cmp    dl,0x1
c0012e44:	0f 87 3b 02 00 00    	ja     c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e4a:	b8 10 74 02 c0       	mov    eax,0xc0027410
c0012e4f:	c3                   	ret    
c0012e50:	80 f9 05             	cmp    cl,0x5
c0012e53:	75 45                	jne    c0012e9a <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0012e55:	8d 4a ff             	lea    ecx,[edx-0x1]
c0012e58:	b8 20 74 02 c0       	mov    eax,0xc0027420
c0012e5d:	80 f9 02             	cmp    cl,0x2
c0012e60:	0f 86 1f 02 00 00    	jbe    c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e66:	80 fa 04             	cmp    dl,0x4
c0012e69:	0f 84 f3 01 00 00    	je     c0013062 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0012e6f:	80 fa 07             	cmp    dl,0x7
c0012e72:	0f 84 0d 02 00 00    	je     c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e78:	b8 30 74 02 c0       	mov    eax,0xc0027430
c0012e7d:	80 fa 08             	cmp    dl,0x8
c0012e80:	0f 84 ff 01 00 00    	je     c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e86:	b8 5d 55 02 c0       	mov    eax,0xc002555d
c0012e8b:	80 fa 09             	cmp    dl,0x9
c0012e8e:	0f 85 f1 01 00 00    	jne    c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e94:	b8 40 74 02 c0       	mov    eax,0xc0027440
c0012e99:	c3                   	ret    
c0012e9a:	80 f9 06             	cmp    cl,0x6
c0012e9d:	0f 85 85 01 00 00    	jne    c0013028 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0012ea3:	b8 50 74 02 c0       	mov    eax,0xc0027450
c0012ea8:	80 fa 01             	cmp    dl,0x1
c0012eab:	0f 84 d4 01 00 00    	je     c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012eb1:	8d 42 fb             	lea    eax,[edx-0x5]
c0012eb4:	3c 01                	cmp    al,0x1
c0012eb6:	0f 86 ac 01 00 00    	jbe    c0013068 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012ebc:	80 fa 03             	cmp    dl,0x3
c0012ebf:	0f 84 a3 01 00 00    	je     c0013068 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012ec5:	8d 4a f9             	lea    ecx,[edx-0x7]
c0012ec8:	b8 70 74 02 c0       	mov    eax,0xc0027470
c0012ecd:	80 f9 01             	cmp    cl,0x1
c0012ed0:	0f 86 af 01 00 00    	jbe    c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ed6:	80 fa 09             	cmp    dl,0x9
c0012ed9:	0f 84 8f 01 00 00    	je     c001306e <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0012edf:	8d 4a f6             	lea    ecx,[edx-0xa]
c0012ee2:	80 f9 01             	cmp    cl,0x1
c0012ee5:	0f 86 9a 01 00 00    	jbe    c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012eeb:	b8 80 74 02 c0       	mov    eax,0xc0027480
c0012ef0:	80 fa 0d             	cmp    dl,0xd
c0012ef3:	0f 84 8c 01 00 00    	je     c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ef9:	b8 90 74 02 c0       	mov    eax,0xc0027490
c0012efe:	80 fa 0e             	cmp    dl,0xe
c0012f01:	0f 84 7e 01 00 00    	je     c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f07:	b8 a0 74 02 c0       	mov    eax,0xc00274a0
c0012f0c:	80 fa 0f             	cmp    dl,0xf
c0012f0f:	0f 84 70 01 00 00    	je     c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f15:	b8 80 74 02 c0       	mov    eax,0xc0027480
c0012f1a:	80 fa 15             	cmp    dl,0x15
c0012f1d:	0f 84 62 01 00 00    	je     c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f23:	8d 4a ea             	lea    ecx,[edx-0x16]
c0012f26:	b8 a0 74 02 c0       	mov    eax,0xc00274a0
c0012f2b:	80 f9 01             	cmp    cl,0x1
c0012f2e:	0f 86 51 01 00 00    	jbe    c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f34:	80 fa 1a             	cmp    dl,0x1a
c0012f37:	0f 84 37 01 00 00    	je     c0013074 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0012f3d:	80 fa 1c             	cmp    dl,0x1c
c0012f40:	0f 84 34 01 00 00    	je     c001307a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0012f46:	80 fa 1d             	cmp    dl,0x1d
c0012f49:	0f 84 36 01 00 00    	je     c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f4f:	b8 d0 74 02 c0       	mov    eax,0xc00274d0
c0012f54:	80 fa 25             	cmp    dl,0x25
c0012f57:	0f 84 28 01 00 00    	je     c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f5d:	8d 4a da             	lea    ecx,[edx-0x26]
c0012f60:	b8 c0 74 02 c0       	mov    eax,0xc00274c0
c0012f65:	80 f9 01             	cmp    cl,0x1
c0012f68:	0f 86 17 01 00 00    	jbe    c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f6e:	b8 e0 74 02 c0       	mov    eax,0xc00274e0
c0012f73:	80 fa 2a             	cmp    dl,0x2a
c0012f76:	0f 84 09 01 00 00    	je     c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f7c:	b8 d0 74 02 c0       	mov    eax,0xc00274d0
c0012f81:	80 fa 2c             	cmp    dl,0x2c
c0012f84:	0f 84 fb 00 00 00    	je     c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f8a:	b8 e0 74 02 c0       	mov    eax,0xc00274e0
c0012f8f:	80 fa 2d             	cmp    dl,0x2d
c0012f92:	0f 84 ed 00 00 00    	je     c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f98:	b8 b0 74 02 c0       	mov    eax,0xc00274b0
c0012f9d:	80 fa 2e             	cmp    dl,0x2e
c0012fa0:	0f 84 df 00 00 00    	je     c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fa6:	b8 d0 74 02 c0       	mov    eax,0xc00274d0
c0012fab:	80 fa 2f             	cmp    dl,0x2f
c0012fae:	0f 84 d1 00 00 00    	je     c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fb4:	8d 4a cb             	lea    ecx,[edx-0x35]
c0012fb7:	b8 c0 74 02 c0       	mov    eax,0xc00274c0
c0012fbc:	80 f9 01             	cmp    cl,0x1
c0012fbf:	0f 86 c0 00 00 00    	jbe    c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fc5:	b8 f0 74 02 c0       	mov    eax,0xc00274f0
c0012fca:	80 fa 37             	cmp    dl,0x37
c0012fcd:	0f 84 b2 00 00 00    	je     c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fd3:	b8 00 75 02 c0       	mov    eax,0xc0027500
c0012fd8:	80 fa 3a             	cmp    dl,0x3a
c0012fdb:	0f 84 a4 00 00 00    	je     c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fe1:	b8 10 75 02 c0       	mov    eax,0xc0027510
c0012fe6:	80 fa 3c             	cmp    dl,0x3c
c0012fe9:	0f 84 96 00 00 00    	je     c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fef:	b8 20 75 02 c0       	mov    eax,0xc0027520
c0012ff4:	80 fa 3d             	cmp    dl,0x3d
c0012ff7:	0f 84 88 00 00 00    	je     c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ffd:	b8 00 75 02 c0       	mov    eax,0xc0027500
c0013002:	80 fa 3e             	cmp    dl,0x3e
c0013005:	74 7e                	je     c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013007:	8d 42 bb             	lea    eax,[edx-0x45]
c001300a:	3c 01                	cmp    al,0x1
c001300c:	76 72                	jbe    c0013080 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001300e:	80 fa 3f             	cmp    dl,0x3f
c0013011:	74 6d                	je     c0013080 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0013013:	80 fa 4a             	cmp    dl,0x4a
c0013016:	74 0a                	je     c0013022 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0013018:	b8 5d 55 02 c0       	mov    eax,0xc002555d
c001301d:	80 fa 4d             	cmp    dl,0x4d
c0013020:	75 63                	jne    c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013022:	b8 f0 74 02 c0       	mov    eax,0xc00274f0
c0013027:	c3                   	ret    
c0013028:	b8 5d 55 02 c0       	mov    eax,0xc002555d
c001302d:	80 f9 0b             	cmp    cl,0xb
c0013030:	75 0a                	jne    c001303c <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0013032:	fe ca                	dec    dl
c0013034:	75 4f                	jne    c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013036:	b8 30 75 02 c0       	mov    eax,0xc0027530
c001303b:	c3                   	ret    
c001303c:	80 f9 0f             	cmp    cl,0xf
c001303f:	75 44                	jne    c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013041:	b8 40 75 02 c0       	mov    eax,0xc0027540
c0013046:	80 fa 02             	cmp    dl,0x2
c0013049:	76 3a                	jbe    c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001304b:	8d 42 fd             	lea    eax,[edx-0x3]
c001304e:	3c 01                	cmp    al,0x1
c0013050:	76 0a                	jbe    c001305c <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0013052:	b8 5d 55 02 c0       	mov    eax,0xc002555d
c0013057:	80 fa 06             	cmp    dl,0x6
c001305a:	75 29                	jne    c0013085 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001305c:	b8 50 75 02 c0       	mov    eax,0xc0027550
c0013061:	c3                   	ret    
c0013062:	b8 30 74 02 c0       	mov    eax,0xc0027430
c0013067:	c3                   	ret    
c0013068:	b8 60 74 02 c0       	mov    eax,0xc0027460
c001306d:	c3                   	ret    
c001306e:	b8 80 74 02 c0       	mov    eax,0xc0027480
c0013073:	c3                   	ret    
c0013074:	b8 b0 74 02 c0       	mov    eax,0xc00274b0
c0013079:	c3                   	ret    
c001307a:	b8 c0 74 02 c0       	mov    eax,0xc00274c0
c001307f:	c3                   	ret    
c0013080:	b8 10 75 02 c0       	mov    eax,0xc0027510
c0013085:	c3                   	ret    

c0013086 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0013086:	60                   	pusha  
c0013087:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001308b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001308f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013093:	9c                   	pushf  
c0013094:	fa                   	cli    
c0013095:	0f 09                	wbinvd 
c0013097:	0f 30                	wrmsr  
c0013099:	9d                   	popf   
c001309a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001309e:	89 02                	mov    DWORD PTR [edx],eax
c00130a0:	61                   	popa   
c00130a1:	c3                   	ret    

c00130a2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00130a2:	60                   	pusha  
c00130a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00130a7:	9c                   	pushf  
c00130a8:	fa                   	cli    
c00130a9:	0f 09                	wbinvd 
c00130ab:	31 c0                	xor    eax,eax
c00130ad:	31 d2                	xor    edx,edx
c00130af:	0f 32                	rdmsr  
c00130b1:	9d                   	popf   
c00130b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130b6:	89 02                	mov    DWORD PTR [edx],eax
c00130b8:	61                   	popa   
c00130b9:	c3                   	ret    

c00130ba <CPU::AMD_K6_writeback(int, int, int)>:
c00130ba:	56                   	push   esi
c00130bb:	53                   	push   ebx
c00130bc:	83 ec 10             	sub    esp,0x10
c00130bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00130c3:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00130c8:	75 5d                	jne    c0013127 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00130ca:	83 f8 08             	cmp    eax,0x8
c00130cd:	75 09                	jne    c00130d8 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00130cf:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00130d4:	7e 13                	jle    c00130e9 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00130d6:	eb 30                	jmp    c0013108 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00130d8:	83 f8 06             	cmp    eax,0x6
c00130db:	7c 4a                	jl     c0013127 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00130dd:	83 f8 07             	cmp    eax,0x7
c00130e0:	7e 07                	jle    c00130e9 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00130e2:	83 f8 09             	cmp    eax,0x9
c00130e5:	74 21                	je     c0013108 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00130e7:	eb 3e                	jmp    c0013127 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00130e9:	89 e6                	mov    esi,esp
c00130eb:	8b 1d cc 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ccc
c00130f1:	56                   	push   esi
c00130f2:	c1 eb 15             	shr    ebx,0x15
c00130f5:	68 82 00 00 c0       	push   0xc0000082
c00130fa:	83 e3 7e             	and    ebx,0x7e
c00130fd:	e8 a0 ff ff ff       	call   c00130a2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0013102:	56                   	push   esi
c0013103:	6a 00                	push   0x0
c0013105:	53                   	push   ebx
c0013106:	eb 12                	jmp    c001311a <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0013108:	89 e3                	mov    ebx,esp
c001310a:	53                   	push   ebx
c001310b:	68 82 00 00 c0       	push   0xc0000082
c0013110:	e8 8d ff ff ff       	call   c00130a2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0013115:	53                   	push   ebx
c0013116:	6a 00                	push   0x0
c0013118:	6a 00                	push   0x0
c001311a:	68 82 00 00 c0       	push   0xc0000082
c001311f:	e8 62 ff ff ff       	call   c0013086 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0013124:	83 c4 18             	add    esp,0x18
c0013127:	83 c4 10             	add    esp,0x10
c001312a:	5b                   	pop    ebx
c001312b:	5e                   	pop    esi
c001312c:	c3                   	ret    
c001312d:	90                   	nop

c001312e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001312e:	55                   	push   ebp
c001312f:	57                   	push   edi
c0013130:	56                   	push   esi
c0013131:	53                   	push   ebx
c0013132:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013136:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001313a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001313e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013142:	39 05 60 76 02 c0    	cmp    DWORD PTR ds:0xc0027660,eax
c0013148:	75 23                	jne    c001316d <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001314a:	a1 6c 87 02 c0       	mov    eax,ds:0xc002876c
c001314f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013153:	89 06                	mov    DWORD PTR [esi],eax
c0013155:	a1 68 87 02 c0       	mov    eax,ds:0xc0028768
c001315a:	89 07                	mov    DWORD PTR [edi],eax
c001315c:	a1 64 87 02 c0       	mov    eax,ds:0xc0028764
c0013161:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013164:	a1 60 87 02 c0       	mov    eax,ds:0xc0028760
c0013169:	89 02                	mov    DWORD PTR [edx],eax
c001316b:	eb 3f                	jmp    c00131ac <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001316d:	31 c9                	xor    ecx,ecx
c001316f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013173:	0f a2                	cpuid  
c0013175:	89 06                	mov    DWORD PTR [esi],eax
c0013177:	89 1f                	mov    DWORD PTR [edi],ebx
c0013179:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001317d:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0013180:	89 10                	mov    DWORD PTR [eax],edx
c0013182:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013186:	a3 60 76 02 c0       	mov    ds:0xc0027660,eax
c001318b:	8b 06                	mov    eax,DWORD PTR [esi]
c001318d:	a3 6c 87 02 c0       	mov    ds:0xc002876c,eax
c0013192:	8b 07                	mov    eax,DWORD PTR [edi]
c0013194:	a3 68 87 02 c0       	mov    ds:0xc0028768,eax
c0013199:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001319c:	a3 64 87 02 c0       	mov    ds:0xc0028764,eax
c00131a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00131a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00131a7:	a3 60 87 02 c0       	mov    ds:0xc0028760,eax
c00131ac:	5b                   	pop    ebx
c00131ad:	5e                   	pop    esi
c00131ae:	5f                   	pop    edi
c00131af:	5d                   	pop    ebp
c00131b0:	c3                   	ret    
c00131b1:	90                   	nop

c00131b2 <CPU::cpuidCheckEDX(unsigned int)>:
c00131b2:	83 ec 10             	sub    esp,0x10
c00131b5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00131b9:	50                   	push   eax
c00131ba:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00131be:	50                   	push   eax
c00131bf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00131c3:	50                   	push   eax
c00131c4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00131c8:	50                   	push   eax
c00131c9:	6a 01                	push   0x1
c00131cb:	e8 5e ff ff ff       	call   c001312e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00131d0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00131d4:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00131d8:	0f 95 c0             	setne  al
c00131db:	83 c4 24             	add    esp,0x24
c00131de:	c3                   	ret    
c00131df:	90                   	nop

c00131e0 <CPU::cpuidCheckECX(unsigned int)>:
c00131e0:	83 ec 10             	sub    esp,0x10
c00131e3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00131e7:	50                   	push   eax
c00131e8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00131ec:	50                   	push   eax
c00131ed:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00131f1:	50                   	push   eax
c00131f2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00131f6:	50                   	push   eax
c00131f7:	6a 01                	push   0x1
c00131f9:	e8 30 ff ff ff       	call   c001312e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00131fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013202:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013206:	0f 95 c0             	setne  al
c0013209:	83 c4 24             	add    esp,0x24
c001320c:	c3                   	ret    
c001320d:	90                   	nop

c001320e <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001320e:	83 ec 10             	sub    esp,0x10
c0013211:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013215:	50                   	push   eax
c0013216:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001321a:	50                   	push   eax
c001321b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001321f:	50                   	push   eax
c0013220:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013224:	50                   	push   eax
c0013225:	6a 07                	push   0x7
c0013227:	e8 02 ff ff ff       	call   c001312e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001322c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013230:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0013234:	0f 95 c0             	setne  al
c0013237:	83 c4 24             	add    esp,0x24
c001323a:	c3                   	ret    
c001323b:	90                   	nop

c001323c <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001323c:	83 ec 10             	sub    esp,0x10
c001323f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013243:	50                   	push   eax
c0013244:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013248:	50                   	push   eax
c0013249:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001324d:	50                   	push   eax
c001324e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013252:	50                   	push   eax
c0013253:	6a 07                	push   0x7
c0013255:	e8 d4 fe ff ff       	call   c001312e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001325a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001325e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013262:	0f 95 c0             	setne  al
c0013265:	83 c4 24             	add    esp,0x24
c0013268:	c3                   	ret    
c0013269:	90                   	nop

c001326a <CPU::CPU()>:
c001326a:	83 ec 0c             	sub    esp,0xc
c001326d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013271:	83 ec 08             	sub    esp,0x8
c0013274:	68 5d 55 02 c0       	push   0xc002555d
c0013279:	50                   	push   eax
c001327a:	e8 0b b1 ff ff       	call   c000e38a <Device::Device(char const*)>
c001327f:	83 c4 10             	add    esp,0x10
c0013282:	ba c0 57 02 c0       	mov    edx,0xc00257c0
c0013287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001328b:	89 10                	mov    DWORD PTR [eax],edx
c001328d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013291:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001329b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001329f:	05 78 01 00 00       	add    eax,0x178
c00132a4:	83 ec 0c             	sub    esp,0xc
c00132a7:	50                   	push   eax
c00132a8:	e8 f7 5f ff ff       	call   c00092a4 <GDT::GDT()>
c00132ad:	83 c4 10             	add    esp,0x10
c00132b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132b4:	05 7c 09 00 00       	add    eax,0x97c
c00132b9:	83 ec 0c             	sub    esp,0xc
c00132bc:	50                   	push   eax
c00132bd:	e8 3a 62 ff ff       	call   c00094fc <IDT::IDT()>
c00132c2:	83 c4 10             	add    esp,0x10
c00132c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132c9:	05 7c 11 00 00       	add    eax,0x117c
c00132ce:	83 ec 0c             	sub    esp,0xc
c00132d1:	50                   	push   eax
c00132d2:	e8 45 80 ff ff       	call   c000b31c <TSS::TSS()>
c00132d7:	83 c4 10             	add    esp,0x10
c00132da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132de:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00132e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132e9:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00132f3:	90                   	nop
c00132f4:	83 c4 0c             	add    esp,0xc
c00132f7:	c3                   	ret    

c00132f8 <CPU::displayFeatures()>:
c00132f8:	c3                   	ret    
c00132f9:	90                   	nop

c00132fa <CPU::detectFeatures()>:
c00132fa:	55                   	push   ebp
c00132fb:	57                   	push   edi
c00132fc:	56                   	push   esi
c00132fd:	53                   	push   ebx
c00132fe:	83 ec 50             	sub    esp,0x50
c0013301:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0013305:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001330f:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0013316:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001331c:	6a 0d                	push   0xd
c001331e:	6a 00                	push   0x0
c0013320:	55                   	push   ebp
c0013321:	e8 5e d3 fe ff       	call   c0000684 <memset>
c0013326:	83 c4 10             	add    esp,0x10
c0013329:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c001332e:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0013335:	0f 84 22 09 00 00    	je     c0013c5d <CPU::detectFeatures()+0x963>
c001333b:	83 ec 0c             	sub    esp,0xc
c001333e:	89 ef                	mov    edi,ebp
c0013340:	6a 10                	push   0x10
c0013342:	e8 6b fe ff ff       	call   c00131b2 <CPU::cpuidCheckEDX(unsigned int)>
c0013347:	83 e0 01             	and    eax,0x1
c001334a:	8d 14 00             	lea    edx,[eax+eax*1]
c001334d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013353:	83 e0 fd             	and    eax,0xfffffffd
c0013356:	09 d0                	or     eax,edx
c0013358:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001335e:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0013365:	e8 48 fe ff ff       	call   c00131b2 <CPU::cpuidCheckEDX(unsigned int)>
c001336a:	83 e0 01             	and    eax,0x1
c001336d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013374:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001337a:	83 e0 fb             	and    eax,0xfffffffb
c001337d:	09 d0                	or     eax,edx
c001337f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013385:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001338c:	e8 21 fe ff ff       	call   c00131b2 <CPU::cpuidCheckEDX(unsigned int)>
c0013391:	83 e0 01             	and    eax,0x1
c0013394:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001339b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00133a1:	83 e0 f7             	and    eax,0xfffffff7
c00133a4:	09 d0                	or     eax,edx
c00133a6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00133ac:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00133b3:	e8 fa fd ff ff       	call   c00131b2 <CPU::cpuidCheckEDX(unsigned int)>
c00133b8:	83 e0 01             	and    eax,0x1
c00133bb:	c1 e0 04             	shl    eax,0x4
c00133be:	88 c2                	mov    dl,al
c00133c0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00133c6:	83 e0 ef             	and    eax,0xffffffef
c00133c9:	09 d0                	or     eax,edx
c00133cb:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00133d1:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00133d8:	e8 d5 fd ff ff       	call   c00131b2 <CPU::cpuidCheckEDX(unsigned int)>
c00133dd:	83 e0 01             	and    eax,0x1
c00133e0:	c1 e0 05             	shl    eax,0x5
c00133e3:	88 c2                	mov    dl,al
c00133e5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00133eb:	83 e0 df             	and    eax,0xffffffdf
c00133ee:	09 d0                	or     eax,edx
c00133f0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00133f6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00133fd:	e8 b0 fd ff ff       	call   c00131b2 <CPU::cpuidCheckEDX(unsigned int)>
c0013402:	83 e0 01             	and    eax,0x1
c0013405:	8d 14 00             	lea    edx,[eax+eax*1]
c0013408:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001340e:	83 e0 fd             	and    eax,0xfffffffd
c0013411:	09 d0                	or     eax,edx
c0013413:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013419:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0013420:	e8 8d fd ff ff       	call   c00131b2 <CPU::cpuidCheckEDX(unsigned int)>
c0013425:	83 e0 01             	and    eax,0x1
c0013428:	c1 e0 06             	shl    eax,0x6
c001342b:	88 c2                	mov    dl,al
c001342d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013433:	83 e0 bf             	and    eax,0xffffffbf
c0013436:	09 d0                	or     eax,edx
c0013438:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001343e:	58                   	pop    eax
c001343f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013443:	50                   	push   eax
c0013444:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013448:	50                   	push   eax
c0013449:	8d 74 24 28          	lea    esi,[esp+0x28]
c001344d:	56                   	push   esi
c001344e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013452:	50                   	push   eax
c0013453:	6a 00                	push   0x0
c0013455:	e8 d4 fc ff ff       	call   c001312e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001345a:	b8 04 00 00 00       	mov    eax,0x4
c001345f:	89 c1                	mov    ecx,eax
c0013461:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013463:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0013469:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001346d:	89 c1                	mov    ecx,eax
c001346f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013471:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0013477:	8d 74 24 38          	lea    esi,[esp+0x38]
c001347b:	89 c1                	mov    ecx,eax
c001347d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001347f:	83 c4 18             	add    esp,0x18
c0013482:	68 08 54 02 c0       	push   0xc0025408
c0013487:	55                   	push   ebp
c0013488:	e8 3f d3 fe ff       	call   c00007cc <strcmp>
c001348d:	83 c4 10             	add    esp,0x10
c0013490:	85 c0                	test   eax,eax
c0013492:	75 0f                	jne    c00134a3 <CPU::detectFeatures()+0x1a9>
c0013494:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001349e:	e9 22 02 00 00       	jmp    c00136c5 <CPU::detectFeatures()+0x3cb>
c00134a3:	50                   	push   eax
c00134a4:	50                   	push   eax
c00134a5:	68 15 54 02 c0       	push   0xc0025415
c00134aa:	55                   	push   ebp
c00134ab:	e8 1c d3 fe ff       	call   c00007cc <strcmp>
c00134b0:	83 c4 10             	add    esp,0x10
c00134b3:	85 c0                	test   eax,eax
c00134b5:	74 dd                	je     c0013494 <CPU::detectFeatures()+0x19a>
c00134b7:	50                   	push   eax
c00134b8:	50                   	push   eax
c00134b9:	68 22 54 02 c0       	push   0xc0025422
c00134be:	55                   	push   ebp
c00134bf:	e8 08 d3 fe ff       	call   c00007cc <strcmp>
c00134c4:	83 c4 10             	add    esp,0x10
c00134c7:	85 c0                	test   eax,eax
c00134c9:	74 2a                	je     c00134f5 <CPU::detectFeatures()+0x1fb>
c00134cb:	50                   	push   eax
c00134cc:	50                   	push   eax
c00134cd:	68 2f 54 02 c0       	push   0xc002542f
c00134d2:	55                   	push   ebp
c00134d3:	e8 f4 d2 fe ff       	call   c00007cc <strcmp>
c00134d8:	83 c4 10             	add    esp,0x10
c00134db:	85 c0                	test   eax,eax
c00134dd:	74 16                	je     c00134f5 <CPU::detectFeatures()+0x1fb>
c00134df:	50                   	push   eax
c00134e0:	50                   	push   eax
c00134e1:	68 3c 54 02 c0       	push   0xc002543c
c00134e6:	55                   	push   ebp
c00134e7:	e8 e0 d2 fe ff       	call   c00007cc <strcmp>
c00134ec:	83 c4 10             	add    esp,0x10
c00134ef:	85 c0                	test   eax,eax
c00134f1:	74 48                	je     c001353b <CPU::detectFeatures()+0x241>
c00134f3:	eb 0f                	jmp    c0013504 <CPU::detectFeatures()+0x20a>
c00134f5:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00134ff:	e9 c1 01 00 00       	jmp    c00136c5 <CPU::detectFeatures()+0x3cb>
c0013504:	50                   	push   eax
c0013505:	50                   	push   eax
c0013506:	68 49 54 02 c0       	push   0xc0025449
c001350b:	55                   	push   ebp
c001350c:	e8 bb d2 fe ff       	call   c00007cc <strcmp>
c0013511:	83 c4 10             	add    esp,0x10
c0013514:	85 c0                	test   eax,eax
c0013516:	74 23                	je     c001353b <CPU::detectFeatures()+0x241>
c0013518:	57                   	push   edi
c0013519:	57                   	push   edi
c001351a:	68 56 54 02 c0       	push   0xc0025456
c001351f:	55                   	push   ebp
c0013520:	e8 a7 d2 fe ff       	call   c00007cc <strcmp>
c0013525:	83 c4 10             	add    esp,0x10
c0013528:	85 c0                	test   eax,eax
c001352a:	75 1e                	jne    c001354a <CPU::detectFeatures()+0x250>
c001352c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013536:	e9 8a 01 00 00       	jmp    c00136c5 <CPU::detectFeatures()+0x3cb>
c001353b:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0013545:	e9 7b 01 00 00       	jmp    c00136c5 <CPU::detectFeatures()+0x3cb>
c001354a:	56                   	push   esi
c001354b:	56                   	push   esi
c001354c:	68 63 54 02 c0       	push   0xc0025463
c0013551:	55                   	push   ebp
c0013552:	e8 75 d2 fe ff       	call   c00007cc <strcmp>
c0013557:	83 c4 10             	add    esp,0x10
c001355a:	85 c0                	test   eax,eax
c001355c:	75 0f                	jne    c001356d <CPU::detectFeatures()+0x273>
c001355e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0013568:	e9 58 01 00 00       	jmp    c00136c5 <CPU::detectFeatures()+0x3cb>
c001356d:	51                   	push   ecx
c001356e:	51                   	push   ecx
c001356f:	68 22 54 02 c0       	push   0xc0025422
c0013574:	55                   	push   ebp
c0013575:	e8 52 d2 fe ff       	call   c00007cc <strcmp>
c001357a:	83 c4 10             	add    esp,0x10
c001357d:	85 c0                	test   eax,eax
c001357f:	75 0f                	jne    c0013590 <CPU::detectFeatures()+0x296>
c0013581:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001358b:	e9 35 01 00 00       	jmp    c00136c5 <CPU::detectFeatures()+0x3cb>
c0013590:	52                   	push   edx
c0013591:	52                   	push   edx
c0013592:	68 70 54 02 c0       	push   0xc0025470
c0013597:	55                   	push   ebp
c0013598:	e8 2f d2 fe ff       	call   c00007cc <strcmp>
c001359d:	83 c4 10             	add    esp,0x10
c00135a0:	85 c0                	test   eax,eax
c00135a2:	75 0f                	jne    c00135b3 <CPU::detectFeatures()+0x2b9>
c00135a4:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00135ae:	e9 12 01 00 00       	jmp    c00136c5 <CPU::detectFeatures()+0x3cb>
c00135b3:	50                   	push   eax
c00135b4:	50                   	push   eax
c00135b5:	68 7d 54 02 c0       	push   0xc002547d
c00135ba:	55                   	push   ebp
c00135bb:	e8 0c d2 fe ff       	call   c00007cc <strcmp>
c00135c0:	83 c4 10             	add    esp,0x10
c00135c3:	85 c0                	test   eax,eax
c00135c5:	75 0f                	jne    c00135d6 <CPU::detectFeatures()+0x2dc>
c00135c7:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00135d1:	e9 ef 00 00 00       	jmp    c00136c5 <CPU::detectFeatures()+0x3cb>
c00135d6:	50                   	push   eax
c00135d7:	50                   	push   eax
c00135d8:	68 8a 54 02 c0       	push   0xc002548a
c00135dd:	55                   	push   ebp
c00135de:	e8 e9 d1 fe ff       	call   c00007cc <strcmp>
c00135e3:	83 c4 10             	add    esp,0x10
c00135e6:	85 c0                	test   eax,eax
c00135e8:	75 0f                	jne    c00135f9 <CPU::detectFeatures()+0x2ff>
c00135ea:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00135f4:	e9 cc 00 00 00       	jmp    c00136c5 <CPU::detectFeatures()+0x3cb>
c00135f9:	50                   	push   eax
c00135fa:	50                   	push   eax
c00135fb:	68 97 54 02 c0       	push   0xc0025497
c0013600:	55                   	push   ebp
c0013601:	e8 c6 d1 fe ff       	call   c00007cc <strcmp>
c0013606:	83 c4 10             	add    esp,0x10
c0013609:	85 c0                	test   eax,eax
c001360b:	75 0f                	jne    c001361c <CPU::detectFeatures()+0x322>
c001360d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0013617:	e9 a9 00 00 00       	jmp    c00136c5 <CPU::detectFeatures()+0x3cb>
c001361c:	50                   	push   eax
c001361d:	50                   	push   eax
c001361e:	68 a4 54 02 c0       	push   0xc00254a4
c0013623:	55                   	push   ebp
c0013624:	e8 a3 d1 fe ff       	call   c00007cc <strcmp>
c0013629:	83 c4 10             	add    esp,0x10
c001362c:	85 c0                	test   eax,eax
c001362e:	75 0f                	jne    c001363f <CPU::detectFeatures()+0x345>
c0013630:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001363a:	e9 86 00 00 00       	jmp    c00136c5 <CPU::detectFeatures()+0x3cb>
c001363f:	50                   	push   eax
c0013640:	50                   	push   eax
c0013641:	68 b1 54 02 c0       	push   0xc00254b1
c0013646:	55                   	push   ebp
c0013647:	e8 80 d1 fe ff       	call   c00007cc <strcmp>
c001364c:	83 c4 10             	add    esp,0x10
c001364f:	85 c0                	test   eax,eax
c0013651:	75 0c                	jne    c001365f <CPU::detectFeatures()+0x365>
c0013653:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001365d:	eb 66                	jmp    c00136c5 <CPU::detectFeatures()+0x3cb>
c001365f:	50                   	push   eax
c0013660:	50                   	push   eax
c0013661:	68 be 54 02 c0       	push   0xc00254be
c0013666:	55                   	push   ebp
c0013667:	e8 60 d1 fe ff       	call   c00007cc <strcmp>
c001366c:	83 c4 10             	add    esp,0x10
c001366f:	85 c0                	test   eax,eax
c0013671:	75 0c                	jne    c001367f <CPU::detectFeatures()+0x385>
c0013673:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001367d:	eb 46                	jmp    c00136c5 <CPU::detectFeatures()+0x3cb>
c001367f:	57                   	push   edi
c0013680:	57                   	push   edi
c0013681:	68 cb 54 02 c0       	push   0xc00254cb
c0013686:	55                   	push   ebp
c0013687:	e8 40 d1 fe ff       	call   c00007cc <strcmp>
c001368c:	83 c4 10             	add    esp,0x10
c001368f:	85 c0                	test   eax,eax
c0013691:	74 e0                	je     c0013673 <CPU::detectFeatures()+0x379>
c0013693:	56                   	push   esi
c0013694:	56                   	push   esi
c0013695:	68 d8 54 02 c0       	push   0xc00254d8
c001369a:	55                   	push   ebp
c001369b:	e8 2c d1 fe ff       	call   c00007cc <strcmp>
c00136a0:	83 c4 10             	add    esp,0x10
c00136a3:	85 c0                	test   eax,eax
c00136a5:	74 cc                	je     c0013673 <CPU::detectFeatures()+0x379>
c00136a7:	51                   	push   ecx
c00136a8:	51                   	push   ecx
c00136a9:	68 e5 54 02 c0       	push   0xc00254e5
c00136ae:	55                   	push   ebp
c00136af:	e8 18 d1 fe ff       	call   c00007cc <strcmp>
c00136b4:	83 c4 10             	add    esp,0x10
c00136b7:	85 c0                	test   eax,eax
c00136b9:	74 b8                	je     c0013673 <CPU::detectFeatures()+0x379>
c00136bb:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00136c5:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00136ca:	0f 86 be 00 00 00    	jbe    c001378e <CPU::detectFeatures()+0x494>
c00136d0:	83 ec 0c             	sub    esp,0xc
c00136d3:	68 80 00 00 00       	push   0x80
c00136d8:	e8 31 fb ff ff       	call   c001320e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00136dd:	83 e0 01             	and    eax,0x1
c00136e0:	c1 e0 06             	shl    eax,0x6
c00136e3:	88 c2                	mov    dl,al
c00136e5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00136eb:	83 e0 bf             	and    eax,0xffffffbf
c00136ee:	09 d0                	or     eax,edx
c00136f0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00136f6:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00136fd:	e8 0c fb ff ff       	call   c001320e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013702:	83 e0 01             	and    eax,0x1
c0013705:	c1 e0 04             	shl    eax,0x4
c0013708:	88 c2                	mov    dl,al
c001370a:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013710:	83 e0 ef             	and    eax,0xffffffef
c0013713:	09 d0                	or     eax,edx
c0013715:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001371b:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0013722:	e8 e7 fa ff ff       	call   c001320e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013727:	c1 e0 07             	shl    eax,0x7
c001372a:	88 c2                	mov    dl,al
c001372c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013732:	83 e0 7f             	and    eax,0x7f
c0013735:	09 d0                	or     eax,edx
c0013737:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001373d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013744:	e8 f3 fa ff ff       	call   c001323c <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013749:	83 e0 01             	and    eax,0x1
c001374c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013753:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013759:	83 e0 f7             	and    eax,0xfffffff7
c001375c:	09 d0                	or     eax,edx
c001375e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013764:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001376b:	e8 cc fa ff ff       	call   c001323c <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013770:	83 c4 10             	add    esp,0x10
c0013773:	83 e0 01             	and    eax,0x1
c0013776:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001377d:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013783:	83 e0 fb             	and    eax,0xfffffffb
c0013786:	09 d0                	or     eax,edx
c0013788:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001378e:	83 ec 0c             	sub    esp,0xc
c0013791:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013795:	50                   	push   eax
c0013796:	8d 44 24 28          	lea    eax,[esp+0x28]
c001379a:	50                   	push   eax
c001379b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001379f:	56                   	push   esi
c00137a0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00137a4:	50                   	push   eax
c00137a5:	6a 01                	push   0x1
c00137a7:	e8 82 f9 ff ff       	call   c001312e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00137ac:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00137b0:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00137b6:	88 ca                	mov    dl,cl
c00137b8:	83 e0 f0             	and    eax,0xfffffff0
c00137bb:	83 e2 0f             	and    edx,0xf
c00137be:	09 d0                	or     eax,edx
c00137c0:	88 ca                	mov    dl,cl
c00137c2:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00137c8:	c0 ea 04             	shr    dl,0x4
c00137cb:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00137cf:	0f b6 c2             	movzx  eax,dl
c00137d2:	83 c4 20             	add    esp,0x20
c00137d5:	c1 e0 06             	shl    eax,0x6
c00137d8:	89 c7                	mov    edi,eax
c00137da:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00137e0:	66 25 3f c0          	and    ax,0xc03f
c00137e4:	09 f8                	or     eax,edi
c00137e6:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00137ed:	89 c8                	mov    eax,ecx
c00137ef:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c00137f6:	c1 e8 08             	shr    eax,0x8
c00137f9:	83 e5 3f             	and    ebp,0x3f
c00137fc:	83 e0 0f             	and    eax,0xf
c00137ff:	89 c7                	mov    edi,eax
c0013801:	c1 e7 06             	shl    edi,0x6
c0013804:	09 ef                	or     edi,ebp
c0013806:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c001380d:	89 fa                	mov    edx,edi
c001380f:	83 e5 c0             	and    ebp,0xffffffc0
c0013812:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0013818:	88 c2                	mov    dl,al
c001381a:	c0 ea 02             	shr    dl,0x2
c001381d:	89 d7                	mov    edi,edx
c001381f:	09 ef                	or     edi,ebp
c0013821:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0013827:	89 fa                	mov    edx,edi
c0013829:	83 e5 cf             	and    ebp,0xffffffcf
c001382c:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0013832:	89 cf                	mov    edi,ecx
c0013834:	c1 ef 0c             	shr    edi,0xc
c0013837:	83 e7 03             	and    edi,0x3
c001383a:	c1 e7 04             	shl    edi,0x4
c001383d:	09 ef                	or     edi,ebp
c001383f:	3c 06                	cmp    al,0x6
c0013841:	89 fa                	mov    edx,edi
c0013843:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0013849:	74 04                	je     c001384f <CPU::detectFeatures()+0x555>
c001384b:	3c 0f                	cmp    al,0xf
c001384d:	75 5c                	jne    c00138ab <CPU::detectFeatures()+0x5b1>
c001384f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0013853:	89 cf                	mov    edi,ecx
c0013855:	c1 ef 10             	shr    edi,0x10
c0013858:	c1 e7 04             	shl    edi,0x4
c001385b:	09 fa                	or     edx,edi
c001385d:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0013863:	0f b6 d2             	movzx  edx,dl
c0013866:	66 81 e7 3f c0       	and    di,0xc03f
c001386b:	c1 e2 06             	shl    edx,0x6
c001386e:	09 fa                	or     edx,edi
c0013870:	3c 0f                	cmp    al,0xf
c0013872:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0013879:	75 30                	jne    c00138ab <CPU::detectFeatures()+0x5b1>
c001387b:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0013881:	c1 e9 14             	shr    ecx,0x14
c0013884:	83 e0 3f             	and    eax,0x3f
c0013887:	83 c1 0f             	add    ecx,0xf
c001388a:	88 ca                	mov    dl,cl
c001388c:	c0 e9 02             	shr    cl,0x2
c001388f:	c1 e2 06             	shl    edx,0x6
c0013892:	09 d0                	or     eax,edx
c0013894:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001389a:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00138a0:	83 e0 c0             	and    eax,0xffffffc0
c00138a3:	09 c1                	or     ecx,eax
c00138a5:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00138ab:	83 ec 0c             	sub    esp,0xc
c00138ae:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00138b5:	8d 44 24 28          	lea    eax,[esp+0x28]
c00138b9:	50                   	push   eax
c00138ba:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00138be:	55                   	push   ebp
c00138bf:	56                   	push   esi
c00138c0:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00138c4:	57                   	push   edi
c00138c5:	68 00 00 00 80       	push   0x80000000
c00138ca:	e8 5f f8 ff ff       	call   c001312e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00138cf:	83 c4 20             	add    esp,0x20
c00138d2:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00138da:	76 22                	jbe    c00138fe <CPU::detectFeatures()+0x604>
c00138dc:	83 ec 0c             	sub    esp,0xc
c00138df:	8d 44 24 28          	lea    eax,[esp+0x28]
c00138e3:	50                   	push   eax
c00138e4:	55                   	push   ebp
c00138e5:	56                   	push   esi
c00138e6:	57                   	push   edi
c00138e7:	68 01 00 00 80       	push   0x80000001
c00138ec:	e8 3d f8 ff ff       	call   c001312e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00138f1:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00138fb:	83 c4 20             	add    esp,0x20
c00138fe:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0013904:	83 f8 01             	cmp    eax,0x1
c0013907:	75 6f                	jne    c0013978 <CPU::detectFeatures()+0x67e>
c0013909:	51                   	push   ecx
c001390a:	51                   	push   ecx
c001390b:	68 f1 54 02 c0       	push   0xc00254f1
c0013910:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013914:	56                   	push   esi
c0013915:	e8 26 ce fe ff       	call   c0000740 <strcpy>
c001391a:	5f                   	pop    edi
c001391b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013921:	5d                   	pop    ebp
c0013922:	66 c1 e8 06          	shr    ax,0x6
c0013926:	0f b6 c0             	movzx  eax,al
c0013929:	50                   	push   eax
c001392a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013930:	c1 e8 0e             	shr    eax,0xe
c0013933:	0f b6 c0             	movzx  eax,al
c0013936:	50                   	push   eax
c0013937:	e8 9c f4 ff ff       	call   c0012dd8 <CPU::lookupIntelName(unsigned char, unsigned char)>
c001393c:	5a                   	pop    edx
c001393d:	59                   	pop    ecx
c001393e:	50                   	push   eax
c001393f:	56                   	push   esi
c0013940:	e8 3b cf fe ff       	call   c0000880 <strcat>
c0013945:	5f                   	pop    edi
c0013946:	5d                   	pop    ebp
c0013947:	56                   	push   esi
c0013948:	53                   	push   ebx
c0013949:	e8 2e aa ff ff       	call   c000e37c <Device::setName(char const*)>
c001394e:	58                   	pop    eax
c001394f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013955:	5a                   	pop    edx
c0013956:	68 f8 54 02 c0       	push   0xc00254f8
c001395b:	50                   	push   eax
c001395c:	e8 6b ce fe ff       	call   c00007cc <strcmp>
c0013961:	83 c4 10             	add    esp,0x10
c0013964:	85 c0                	test   eax,eax
c0013966:	0f 85 71 03 00 00    	jne    c0013cdd <CPU::detectFeatures()+0x9e3>
c001396c:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0013973:	e9 65 03 00 00       	jmp    c0013cdd <CPU::detectFeatures()+0x9e3>
c0013978:	83 f8 02             	cmp    eax,0x2
c001397b:	0f 85 b5 00 00 00    	jne    c0013a36 <CPU::detectFeatures()+0x73c>
c0013981:	57                   	push   edi
c0013982:	57                   	push   edi
c0013983:	68 0a 55 02 c0       	push   0xc002550a
c0013988:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001398c:	56                   	push   esi
c001398d:	e8 ae cd fe ff       	call   c0000740 <strcpy>
c0013992:	5d                   	pop    ebp
c0013993:	58                   	pop    eax
c0013994:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001399a:	66 c1 e8 06          	shr    ax,0x6
c001399e:	0f b6 c0             	movzx  eax,al
c00139a1:	50                   	push   eax
c00139a2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00139a8:	c1 e8 0e             	shr    eax,0xe
c00139ab:	0f b6 c0             	movzx  eax,al
c00139ae:	50                   	push   eax
c00139af:	e8 90 f2 ff ff       	call   c0012c44 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00139b4:	5a                   	pop    edx
c00139b5:	59                   	pop    ecx
c00139b6:	50                   	push   eax
c00139b7:	56                   	push   esi
c00139b8:	e8 c3 ce fe ff       	call   c0000880 <strcat>
c00139bd:	5f                   	pop    edi
c00139be:	5d                   	pop    ebp
c00139bf:	56                   	push   esi
c00139c0:	53                   	push   ebx
c00139c1:	e8 b6 a9 ff ff       	call   c000e37c <Device::setName(char const*)>
c00139c6:	58                   	pop    eax
c00139c7:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00139cd:	5a                   	pop    edx
c00139ce:	68 0f 55 02 c0       	push   0xc002550f
c00139d3:	50                   	push   eax
c00139d4:	e8 f3 cd fe ff       	call   c00007cc <strcmp>
c00139d9:	83 c4 10             	add    esp,0x10
c00139dc:	85 c0                	test   eax,eax
c00139de:	75 20                	jne    c0013a00 <CPU::detectFeatures()+0x706>
c00139e0:	8b 15 a8 7c 02 c0    	mov    edx,DWORD PTR ds:0xc0027ca8
c00139e6:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00139ec:	a8 01                	test   al,0x1
c00139ee:	74 10                	je     c0013a00 <CPU::detectFeatures()+0x706>
c00139f0:	83 e0 fe             	and    eax,0xfffffffe
c00139f3:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00139f9:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0013a00:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013a06:	c1 e8 0e             	shr    eax,0xe
c0013a09:	3c 05                	cmp    al,0x5
c0013a0b:	0f 85 cc 02 00 00    	jne    c0013cdd <CPU::detectFeatures()+0x9e3>
c0013a11:	56                   	push   esi
c0013a12:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013a18:	83 e0 0f             	and    eax,0xf
c0013a1b:	50                   	push   eax
c0013a1c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013a22:	66 c1 e8 06          	shr    ax,0x6
c0013a26:	0f b6 c0             	movzx  eax,al
c0013a29:	50                   	push   eax
c0013a2a:	6a 05                	push   0x5
c0013a2c:	e8 89 f6 ff ff       	call   c00130ba <CPU::AMD_K6_writeback(int, int, int)>
c0013a31:	e9 1f 02 00 00       	jmp    c0013c55 <CPU::detectFeatures()+0x95b>
c0013a36:	8d 50 fd             	lea    edx,[eax-0x3]
c0013a39:	83 fa 01             	cmp    edx,0x1
c0013a3c:	76 09                	jbe    c0013a47 <CPU::detectFeatures()+0x74d>
c0013a3e:	83 f8 06             	cmp    eax,0x6
c0013a41:	0f 85 91 01 00 00    	jne    c0013bd8 <CPU::detectFeatures()+0x8de>
c0013a47:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013a4d:	c1 ea 0e             	shr    edx,0xe
c0013a50:	80 fa 05             	cmp    dl,0x5
c0013a53:	75 7b                	jne    c0013ad0 <CPU::detectFeatures()+0x7d6>
c0013a55:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013a5b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013a60:	66 81 fa 00 01       	cmp    dx,0x100
c0013a65:	75 0c                	jne    c0013a73 <CPU::detectFeatures()+0x779>
c0013a67:	51                   	push   ecx
c0013a68:	51                   	push   ecx
c0013a69:	68 16 55 02 c0       	push   0xc0025516
c0013a6e:	e9 dc 01 00 00       	jmp    c0013c4f <CPU::detectFeatures()+0x955>
c0013a73:	66 81 fa 00 02       	cmp    dx,0x200
c0013a78:	75 0c                	jne    c0013a86 <CPU::detectFeatures()+0x78c>
c0013a7a:	52                   	push   edx
c0013a7b:	52                   	push   edx
c0013a7c:	68 29 55 02 c0       	push   0xc0025529
c0013a81:	e9 c9 01 00 00       	jmp    c0013c4f <CPU::detectFeatures()+0x955>
c0013a86:	66 81 fa 40 02       	cmp    dx,0x240
c0013a8b:	75 0c                	jne    c0013a99 <CPU::detectFeatures()+0x79f>
c0013a8d:	50                   	push   eax
c0013a8e:	50                   	push   eax
c0013a8f:	68 3b 55 02 c0       	push   0xc002553b
c0013a94:	e9 b6 01 00 00       	jmp    c0013c4f <CPU::detectFeatures()+0x955>
c0013a99:	83 f8 06             	cmp    eax,0x6
c0013a9c:	75 0c                	jne    c0013aaa <CPU::detectFeatures()+0x7b0>
c0013a9e:	50                   	push   eax
c0013a9f:	50                   	push   eax
c0013aa0:	68 4d 55 02 c0       	push   0xc002554d
c0013aa5:	e9 a5 01 00 00       	jmp    c0013c4f <CPU::detectFeatures()+0x955>
c0013aaa:	83 f8 04             	cmp    eax,0x4
c0013aad:	75 0c                	jne    c0013abb <CPU::detectFeatures()+0x7c1>
c0013aaf:	50                   	push   eax
c0013ab0:	50                   	push   eax
c0013ab1:	68 59 55 02 c0       	push   0xc0025559
c0013ab6:	e9 94 01 00 00       	jmp    c0013c4f <CPU::detectFeatures()+0x955>
c0013abb:	83 f8 03             	cmp    eax,0x3
c0013abe:	0f 85 19 02 00 00    	jne    c0013cdd <CPU::detectFeatures()+0x9e3>
c0013ac4:	50                   	push   eax
c0013ac5:	50                   	push   eax
c0013ac6:	68 61 55 02 c0       	push   0xc0025561
c0013acb:	e9 7f 01 00 00       	jmp    c0013c4f <CPU::detectFeatures()+0x955>
c0013ad0:	80 fa 06             	cmp    dl,0x6
c0013ad3:	0f 85 db 00 00 00    	jne    c0013bb4 <CPU::detectFeatures()+0x8ba>
c0013ad9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013adf:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013ae4:	66 81 fa 80 01       	cmp    dx,0x180
c0013ae9:	75 0c                	jne    c0013af7 <CPU::detectFeatures()+0x7fd>
c0013aeb:	50                   	push   eax
c0013aec:	50                   	push   eax
c0013aed:	68 6c 55 02 c0       	push   0xc002556c
c0013af2:	e9 58 01 00 00       	jmp    c0013c4f <CPU::detectFeatures()+0x955>
c0013af7:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0013afd:	66 f7 c1 80 ff       	test   cx,0xff80
c0013b02:	75 0c                	jne    c0013b10 <CPU::detectFeatures()+0x816>
c0013b04:	50                   	push   eax
c0013b05:	50                   	push   eax
c0013b06:	68 7c 55 02 c0       	push   0xc002557c
c0013b0b:	e9 3f 01 00 00       	jmp    c0013c4f <CPU::detectFeatures()+0x955>
c0013b10:	66 81 fa 40 02       	cmp    dx,0x240
c0013b15:	75 0c                	jne    c0013b23 <CPU::detectFeatures()+0x829>
c0013b17:	55                   	push   ebp
c0013b18:	55                   	push   ebp
c0013b19:	68 83 55 02 c0       	push   0xc0025583
c0013b1e:	e9 2c 01 00 00       	jmp    c0013c4f <CPU::detectFeatures()+0x955>
c0013b23:	66 81 fa 80 02       	cmp    dx,0x280
c0013b28:	75 0c                	jne    c0013b36 <CPU::detectFeatures()+0x83c>
c0013b2a:	57                   	push   edi
c0013b2b:	57                   	push   edi
c0013b2c:	68 8c 55 02 c0       	push   0xc002558c
c0013b31:	e9 19 01 00 00       	jmp    c0013c4f <CPU::detectFeatures()+0x955>
c0013b36:	66 81 fa 40 03       	cmp    dx,0x340
c0013b3b:	74 ed                	je     c0013b2a <CPU::detectFeatures()+0x830>
c0013b3d:	66 81 fa c0 03       	cmp    dx,0x3c0
c0013b42:	75 0c                	jne    c0013b50 <CPU::detectFeatures()+0x856>
c0013b44:	56                   	push   esi
c0013b45:	56                   	push   esi
c0013b46:	68 93 55 02 c0       	push   0xc0025593
c0013b4b:	e9 ff 00 00 00       	jmp    c0013c4f <CPU::detectFeatures()+0x955>
c0013b50:	83 f8 06             	cmp    eax,0x6
c0013b53:	0f 84 45 ff ff ff    	je     c0013a9e <CPU::detectFeatures()+0x7a4>
c0013b59:	83 f8 04             	cmp    eax,0x4
c0013b5c:	0f 84 4d ff ff ff    	je     c0013aaf <CPU::detectFeatures()+0x7b5>
c0013b62:	83 f8 03             	cmp    eax,0x3
c0013b65:	0f 85 72 01 00 00    	jne    c0013cdd <CPU::detectFeatures()+0x9e3>
c0013b6b:	51                   	push   ecx
c0013b6c:	51                   	push   ecx
c0013b6d:	68 9c 55 02 c0       	push   0xc002559c
c0013b72:	53                   	push   ebx
c0013b73:	e8 04 a8 ff ff       	call   c000e37c <Device::setName(char const*)>
c0013b78:	b1 c1                	mov    cl,0xc1
c0013b7a:	88 c8                	mov    al,cl
c0013b7c:	e6 22                	out    0x22,al
c0013b7e:	e4 23                	in     al,0x23
c0013b80:	88 c2                	mov    dl,al
c0013b82:	88 c8                	mov    al,cl
c0013b84:	e6 22                	out    0x22,al
c0013b86:	88 d0                	mov    al,dl
c0013b88:	83 c8 10             	or     eax,0x10
c0013b8b:	e6 23                	out    0x23,al
c0013b8d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0013b94:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0013b97:	89 d0                	mov    eax,edx
c0013b99:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0013b9f:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0013ba3:	40                   	inc    eax
c0013ba4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0013baa:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0013baf:	e9 a1 00 00 00       	jmp    c0013c55 <CPU::detectFeatures()+0x95b>
c0013bb4:	83 f8 06             	cmp    eax,0x6
c0013bb7:	0f 84 e1 fe ff ff    	je     c0013a9e <CPU::detectFeatures()+0x7a4>
c0013bbd:	83 f8 04             	cmp    eax,0x4
c0013bc0:	0f 84 e9 fe ff ff    	je     c0013aaf <CPU::detectFeatures()+0x7b5>
c0013bc6:	83 f8 03             	cmp    eax,0x3
c0013bc9:	0f 85 0e 01 00 00    	jne    c0013cdd <CPU::detectFeatures()+0x9e3>
c0013bcf:	52                   	push   edx
c0013bd0:	52                   	push   edx
c0013bd1:	68 a7 55 02 c0       	push   0xc00255a7
c0013bd6:	eb 77                	jmp    c0013c4f <CPU::detectFeatures()+0x955>
c0013bd8:	83 f8 07             	cmp    eax,0x7
c0013bdb:	75 09                	jne    c0013be6 <CPU::detectFeatures()+0x8ec>
c0013bdd:	50                   	push   eax
c0013bde:	50                   	push   eax
c0013bdf:	68 b1 55 02 c0       	push   0xc00255b1
c0013be4:	eb 69                	jmp    c0013c4f <CPU::detectFeatures()+0x955>
c0013be6:	83 f8 0a             	cmp    eax,0xa
c0013be9:	75 09                	jne    c0013bf4 <CPU::detectFeatures()+0x8fa>
c0013beb:	50                   	push   eax
c0013bec:	50                   	push   eax
c0013bed:	68 bc 55 02 c0       	push   0xc00255bc
c0013bf2:	eb 5b                	jmp    c0013c4f <CPU::detectFeatures()+0x955>
c0013bf4:	83 f8 0b             	cmp    eax,0xb
c0013bf7:	75 09                	jne    c0013c02 <CPU::detectFeatures()+0x908>
c0013bf9:	50                   	push   eax
c0013bfa:	50                   	push   eax
c0013bfb:	68 c4 55 02 c0       	push   0xc00255c4
c0013c00:	eb 4d                	jmp    c0013c4f <CPU::detectFeatures()+0x955>
c0013c02:	83 f8 08             	cmp    eax,0x8
c0013c05:	75 09                	jne    c0013c10 <CPU::detectFeatures()+0x916>
c0013c07:	50                   	push   eax
c0013c08:	50                   	push   eax
c0013c09:	68 cd 55 02 c0       	push   0xc00255cd
c0013c0e:	eb 3f                	jmp    c0013c4f <CPU::detectFeatures()+0x955>
c0013c10:	83 f8 09             	cmp    eax,0x9
c0013c13:	75 09                	jne    c0013c1e <CPU::detectFeatures()+0x924>
c0013c15:	50                   	push   eax
c0013c16:	50                   	push   eax
c0013c17:	68 d5 55 02 c0       	push   0xc00255d5
c0013c1c:	eb 31                	jmp    c0013c4f <CPU::detectFeatures()+0x955>
c0013c1e:	83 f8 05             	cmp    eax,0x5
c0013c21:	75 09                	jne    c0013c2c <CPU::detectFeatures()+0x932>
c0013c23:	50                   	push   eax
c0013c24:	50                   	push   eax
c0013c25:	68 dd 55 02 c0       	push   0xc00255dd
c0013c2a:	eb 23                	jmp    c0013c4f <CPU::detectFeatures()+0x955>
c0013c2c:	83 f8 0c             	cmp    eax,0xc
c0013c2f:	75 09                	jne    c0013c3a <CPU::detectFeatures()+0x940>
c0013c31:	55                   	push   ebp
c0013c32:	55                   	push   ebp
c0013c33:	68 eb 55 02 c0       	push   0xc00255eb
c0013c38:	eb 15                	jmp    c0013c4f <CPU::detectFeatures()+0x955>
c0013c3a:	83 f8 0d             	cmp    eax,0xd
c0013c3d:	75 09                	jne    c0013c48 <CPU::detectFeatures()+0x94e>
c0013c3f:	57                   	push   edi
c0013c40:	57                   	push   edi
c0013c41:	68 f6 55 02 c0       	push   0xc00255f6
c0013c46:	eb 07                	jmp    c0013c4f <CPU::detectFeatures()+0x955>
c0013c48:	56                   	push   esi
c0013c49:	56                   	push   esi
c0013c4a:	68 0a 56 02 c0       	push   0xc002560a
c0013c4f:	53                   	push   ebx
c0013c50:	e8 27 a7 ff ff       	call   c000e37c <Device::setName(char const*)>
c0013c55:	83 c4 10             	add    esp,0x10
c0013c58:	e9 80 00 00 00       	jmp    c0013cdd <CPU::detectFeatures()+0x9e3>
c0013c5d:	51                   	push   ecx
c0013c5e:	51                   	push   ecx
c0013c5f:	68 56 54 02 c0       	push   0xc0025456
c0013c64:	55                   	push   ebp
c0013c65:	e8 d6 ca fe ff       	call   c0000740 <strcpy>
c0013c6a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013c74:	e8 6a c5 fe ff       	call   c00001e3 <is486>
c0013c79:	83 c4 10             	add    esp,0x10
c0013c7c:	85 c0                	test   eax,eax
c0013c7e:	74 2b                	je     c0013cab <CPU::detectFeatures()+0x9b1>
c0013c80:	52                   	push   edx
c0013c81:	52                   	push   edx
c0013c82:	68 16 56 02 c0       	push   0xc0025616
c0013c87:	53                   	push   ebx
c0013c88:	e8 ef a6 ff ff       	call   c000e37c <Device::setName(char const*)>
c0013c8d:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013c94:	0f 20 c0             	mov    eax,cr0
c0013c97:	83 e0 14             	and    eax,0x14
c0013c9a:	83 c4 10             	add    esp,0x10
c0013c9d:	83 f8 04             	cmp    eax,0x4
c0013ca0:	75 1f                	jne    c0013cc1 <CPU::detectFeatures()+0x9c7>
c0013ca2:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0013ca9:	eb 32                	jmp    c0013cdd <CPU::detectFeatures()+0x9e3>
c0013cab:	50                   	push   eax
c0013cac:	50                   	push   eax
c0013cad:	68 21 56 02 c0       	push   0xc0025621
c0013cb2:	53                   	push   ebx
c0013cb3:	e8 c4 a6 ff ff       	call   c000e37c <Device::setName(char const*)>
c0013cb8:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0013cbf:	eb d3                	jmp    c0013c94 <CPU::detectFeatures()+0x99a>
c0013cc1:	e8 f8 c4 fe ff       	call   c00001be <hasLegacyFPU>
c0013cc6:	83 e0 01             	and    eax,0x1
c0013cc9:	8d 14 00             	lea    edx,[eax+eax*1]
c0013ccc:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013cd2:	83 e0 fd             	and    eax,0xfffffffd
c0013cd5:	09 d0                	or     eax,edx
c0013cd7:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013cdd:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0013ce4:	83 c4 4c             	add    esp,0x4c
c0013ce7:	5b                   	pop    ebx
c0013ce8:	5e                   	pop    esi
c0013ce9:	5f                   	pop    edi
c0013cea:	5d                   	pop    ebp
c0013ceb:	c3                   	ret    

c0013cec <CPU::setupSMEP()>:
c0013cec:	0f 20 e0             	mov    eax,cr4
c0013cef:	0d 00 00 10 00       	or     eax,0x100000
c0013cf4:	0f 22 e0             	mov    cr4,eax
c0013cf7:	c3                   	ret    

c0013cf8 <CPU::setupUMIP()>:
c0013cf8:	0f 20 e0             	mov    eax,cr4
c0013cfb:	80 cc 08             	or     ah,0x8
c0013cfe:	0f 22 e0             	mov    cr4,eax
c0013d01:	c3                   	ret    

c0013d02 <CPU::setupTSC()>:
c0013d02:	0f 20 e0             	mov    eax,cr4
c0013d05:	83 c8 04             	or     eax,0x4
c0013d08:	0f 22 e0             	mov    cr4,eax
c0013d0b:	c3                   	ret    

c0013d0c <CPU::setupLargePages()>:
c0013d0c:	0f 20 e0             	mov    eax,cr4
c0013d0f:	83 c8 10             	or     eax,0x10
c0013d12:	0f 22 e0             	mov    cr4,eax
c0013d15:	c3                   	ret    

c0013d16 <CPU::setupPAT()>:
c0013d16:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0013d1b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013d22:	74 2c                	je     c0013d50 <CPU::setupPAT()+0x3a>
c0013d24:	53                   	push   ebx
c0013d25:	83 ec 10             	sub    esp,0x10
c0013d28:	68 77 02 00 00       	push   0x277
c0013d2d:	50                   	push   eax
c0013d2e:	e8 f7 51 ff ff       	call   c0008f2a <Computer::rdmsr(unsigned int)>
c0013d33:	83 e2 f8             	and    edx,0xfffffff8
c0013d36:	83 ca 01             	or     edx,0x1
c0013d39:	52                   	push   edx
c0013d3a:	50                   	push   eax
c0013d3b:	68 77 02 00 00       	push   0x277
c0013d40:	ff 35 a8 7c 02 c0    	push   DWORD PTR ds:0xc0027ca8
c0013d46:	e8 0b 52 ff ff       	call   c0008f56 <Computer::wrmsr(unsigned int, unsigned long long)>
c0013d4b:	83 c4 28             	add    esp,0x28
c0013d4e:	5b                   	pop    ebx
c0013d4f:	c3                   	ret    
c0013d50:	c3                   	ret    
c0013d51:	90                   	nop

c0013d52 <CPU::setupMTRR()>:
c0013d52:	c3                   	ret    
c0013d53:	90                   	nop

c0013d54 <CPU::setupGlobalPages()>:
c0013d54:	0f 20 e0             	mov    eax,cr4
c0013d57:	0c 80                	or     al,0x80
c0013d59:	0f 22 e0             	mov    cr4,eax
c0013d5c:	c3                   	ret    
c0013d5d:	90                   	nop

c0013d5e <CPU::allowUsermodeDataAccess()>:
c0013d5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d62:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013d69:	74 03                	je     c0013d6e <CPU::allowUsermodeDataAccess()+0x10>
c0013d6b:	0f 01 cb             	stac   
c0013d6e:	c3                   	ret    
c0013d6f:	90                   	nop

c0013d70 <CPU::prohibitUsermodeDataAccess()>:
c0013d70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d74:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013d7b:	74 03                	je     c0013d80 <CPU::prohibitUsermodeDataAccess()+0x10>
c0013d7d:	0f 01 ca             	clac   
c0013d80:	c3                   	ret    
c0013d81:	90                   	nop

c0013d82 <CPU::setupSMAP()>:
c0013d82:	0f 20 e0             	mov    eax,cr4
c0013d85:	0d 00 00 20 00       	or     eax,0x200000
c0013d8a:	0f 22 e0             	mov    cr4,eax
c0013d8d:	eb e1                	jmp    c0013d70 <CPU::prohibitUsermodeDataAccess()>
c0013d8f:	90                   	nop

c0013d90 <CPU::setupFeatures()>:
c0013d90:	53                   	push   ebx
c0013d91:	83 ec 08             	sub    esp,0x8
c0013d94:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d98:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0013d9f:	74 18                	je     c0013db9 <CPU::setupFeatures()+0x29>
c0013da1:	83 ec 0c             	sub    esp,0xc
c0013da4:	68 2c 56 02 c0       	push   0xc002562c
c0013da9:	e8 51 8f ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0013dae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013db1:	e8 42 ff ff ff       	call   c0013cf8 <CPU::setupUMIP()>
c0013db6:	83 c4 10             	add    esp,0x10
c0013db9:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0013dc0:	74 18                	je     c0013dda <CPU::setupFeatures()+0x4a>
c0013dc2:	83 ec 0c             	sub    esp,0xc
c0013dc5:	68 36 56 02 c0       	push   0xc0025636
c0013dca:	e8 30 8f ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0013dcf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013dd2:	e8 2b ff ff ff       	call   c0013d02 <CPU::setupTSC()>
c0013dd7:	83 c4 10             	add    esp,0x10
c0013dda:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0013de1:	74 18                	je     c0013dfb <CPU::setupFeatures()+0x6b>
c0013de3:	83 ec 0c             	sub    esp,0xc
c0013de6:	68 3f 56 02 c0       	push   0xc002563f
c0013deb:	e8 0f 8f ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0013df0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013df3:	e8 14 ff ff ff       	call   c0013d0c <CPU::setupLargePages()>
c0013df8:	83 c4 10             	add    esp,0x10
c0013dfb:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0013e02:	74 18                	je     c0013e1c <CPU::setupFeatures()+0x8c>
c0013e04:	83 ec 0c             	sub    esp,0xc
c0013e07:	68 48 56 02 c0       	push   0xc0025648
c0013e0c:	e8 ee 8e ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0013e11:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e14:	e8 3b ff ff ff       	call   c0013d54 <CPU::setupGlobalPages()>
c0013e19:	83 c4 10             	add    esp,0x10
c0013e1c:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0013e23:	74 18                	je     c0013e3d <CPU::setupFeatures()+0xad>
c0013e25:	83 ec 0c             	sub    esp,0xc
c0013e28:	68 5a 56 02 c0       	push   0xc002565a
c0013e2d:	e8 cd 8e ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0013e32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e35:	e8 dc fe ff ff       	call   c0013d16 <CPU::setupPAT()>
c0013e3a:	83 c4 10             	add    esp,0x10
c0013e3d:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0013e44:	74 11                	je     c0013e57 <CPU::setupFeatures()+0xc7>
c0013e46:	c7 44 24 10 63 56 02 c0 	mov    DWORD PTR [esp+0x10],0xc0025663
c0013e4e:	83 c4 08             	add    esp,0x8
c0013e51:	5b                   	pop    ebx
c0013e52:	e9 a8 8e ff ff       	jmp    c000ccff <Dbg::kprintf(char const*, ...)>
c0013e57:	83 c4 08             	add    esp,0x8
c0013e5a:	5b                   	pop    ebx
c0013e5b:	c3                   	ret    

c0013e5c <CPU::open(int, int, void*)>:
c0013e5c:	57                   	push   edi
c0013e5d:	56                   	push   esi
c0013e5e:	53                   	push   ebx
c0013e5f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e63:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e67:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0013e6d:	83 ec 0c             	sub    esp,0xc
c0013e70:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0013e76:	68 6d 56 02 c0       	push   0xc002566d
c0013e7b:	e8 e9 5b ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013e80:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0013e86:	89 04 24             	mov    DWORD PTR [esp],eax
c0013e89:	e8 78 54 ff ff       	call   c0009306 <GDT::setup()>
c0013e8e:	c7 04 24 7f 56 02 c0 	mov    DWORD PTR [esp],0xc002567f
c0013e95:	e8 cf 5b ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013e9a:	83 c4 0c             	add    esp,0xc
c0013e9d:	6a 00                	push   0x0
c0013e9f:	68 ef be ad de       	push   0xdeadbeef
c0013ea4:	57                   	push   edi
c0013ea5:	e8 b6 74 ff ff       	call   c000b360 <TSS::setup(unsigned long, unsigned long)>
c0013eaa:	c7 04 24 91 56 02 c0 	mov    DWORD PTR [esp],0xc0025691
c0013eb1:	e8 b3 5b ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013eb6:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013eb9:	e8 82 74 ff ff       	call   c000b340 <TSS::flush()>
c0013ebe:	c7 04 24 a5 56 02 c0 	mov    DWORD PTR [esp],0xc00256a5
c0013ec5:	e8 9f 5b ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013eca:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0013ed0:	89 04 24             	mov    DWORD PTR [esp],eax
c0013ed3:	e8 9a 56 ff ff       	call   c0009572 <IDT::setup()>
c0013ed8:	c7 04 24 b7 56 02 c0 	mov    DWORD PTR [esp],0xc00256b7
c0013edf:	e8 85 5b ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013ee4:	b8 00 04 00 00       	mov    eax,0x400
c0013ee9:	0f 23 f8             	mov    db7,eax
c0013eec:	c7 04 24 d5 56 02 c0 	mov    DWORD PTR [esp],0xc00256d5
c0013ef3:	e8 71 5b ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013ef8:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0013f02:	e8 bf 61 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c0013f07:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0013f0d:	89 30                	mov    DWORD PTR [eax],esi
c0013f0f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0013f15:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0013f18:	c7 04 24 f7 56 02 c0 	mov    DWORD PTR [esp],0xc00256f7
c0013f1f:	e8 45 5b ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013f24:	58                   	pop    eax
c0013f25:	5a                   	pop    edx
c0013f26:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0013f2c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013f30:	e8 25 84 ff ff       	call   c000c35a <VAS::setCPUSpecific(unsigned long)>
c0013f35:	c7 04 24 1f 57 02 c0 	mov    DWORD PTR [esp],0xc002571f
c0013f3c:	e8 28 5b ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013f41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f44:	e8 b1 f3 ff ff       	call   c00132fa <CPU::detectFeatures()>
c0013f49:	c7 04 24 42 57 02 c0 	mov    DWORD PTR [esp],0xc0025742
c0013f50:	e8 14 5b ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013f55:	e8 30 b6 ff ff       	call   c000f58a <setupInterruptController()>
c0013f5a:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0013f60:	c7 04 24 66 57 02 c0 	mov    DWORD PTR [esp],0xc0025766
c0013f67:	e8 fd 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013f6c:	a1 c0 7c 02 c0       	mov    eax,ds:0xc0027cc0
c0013f71:	83 e0 10             	and    eax,0x10
c0013f74:	83 f8 01             	cmp    eax,0x1
c0013f77:	19 c0                	sbb    eax,eax
c0013f79:	83 e0 46             	and    eax,0x46
c0013f7c:	83 c0 1e             	add    eax,0x1e
c0013f7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0013f82:	e8 f1 cb ff ff       	call   c0010b78 <setupTimer(int)>
c0013f87:	83 c4 10             	add    esp,0x10
c0013f8a:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0013f90:	f6 05 c0 7c 02 c0 20 	test   BYTE PTR ds:0xc0027cc0,0x20
c0013f97:	74 18                	je     c0013fb1 <CPU::open(int, int, void*)+0x155>
c0013f99:	83 ec 0c             	sub    esp,0xc
c0013f9c:	68 81 57 02 c0       	push   0xc0025781
c0013fa1:	e8 c3 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013fa6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013fa9:	e8 e2 fd ff ff       	call   c0013d90 <CPU::setupFeatures()>
c0013fae:	83 c4 10             	add    esp,0x10
c0013fb1:	83 ec 0c             	sub    esp,0xc
c0013fb4:	68 9c 57 02 c0       	push   0xc002579c
c0013fb9:	e8 ab 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013fbe:	83 c4 10             	add    esp,0x10
c0013fc1:	31 c0                	xor    eax,eax
c0013fc3:	5b                   	pop    ebx
c0013fc4:	5e                   	pop    esi
c0013fc5:	5f                   	pop    edi
c0013fc6:	c3                   	ret    
c0013fc7:	90                   	nop

c0013fc8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0013fc8:	57                   	push   edi
c0013fc9:	56                   	push   esi
c0013fca:	53                   	push   ebx
c0013fcb:	51                   	push   ecx
c0013fcc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013fd0:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0013fd3:	0f 02 c0             	lar    eax,ax
c0013fd6:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0013fd9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013fdd:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0013fe0:	88 ca                	mov    dl,cl
c0013fe2:	c0 ea 06             	shr    dl,0x6
c0013fe5:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0013fe9:	89 ca                	mov    edx,ecx
c0013feb:	66 c1 ea 03          	shr    dx,0x3
c0013fef:	83 e2 07             	and    edx,0x7
c0013ff2:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0013ff7:	88 17                	mov    BYTE PTR [edi],dl
c0013ff9:	0f 84 a6 01 00 00    	je     c00141a5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0013fff:	83 e1 07             	and    ecx,0x7
c0014002:	80 f9 04             	cmp    cl,0x4
c0014005:	0f 84 98 00 00 00    	je     c00140a3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001400b:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014010:	0f 95 c0             	setne  al
c0014013:	80 f9 05             	cmp    cl,0x5
c0014016:	0f 95 c2             	setne  dl
c0014019:	08 c2                	or     dl,al
c001401b:	74 79                	je     c0014096 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001401d:	84 c9                	test   cl,cl
c001401f:	75 05                	jne    c0014026 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0014021:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0014024:	eb 3c                	jmp    c0014062 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014026:	80 f9 01             	cmp    cl,0x1
c0014029:	75 05                	jne    c0014030 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001402b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001402e:	eb 32                	jmp    c0014062 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014030:	80 f9 02             	cmp    cl,0x2
c0014033:	75 05                	jne    c001403a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0014035:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0014038:	eb 28                	jmp    c0014062 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001403a:	31 c0                	xor    eax,eax
c001403c:	80 f9 03             	cmp    cl,0x3
c001403f:	75 05                	jne    c0014046 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0014041:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0014044:	eb 1c                	jmp    c0014062 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014046:	80 f9 05             	cmp    cl,0x5
c0014049:	75 05                	jne    c0014050 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001404b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001404e:	eb 12                	jmp    c0014062 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014050:	80 f9 06             	cmp    cl,0x6
c0014053:	75 05                	jne    c001405a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0014055:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014058:	eb 08                	jmp    c0014062 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001405a:	80 f9 07             	cmp    cl,0x7
c001405d:	75 03                	jne    c0014062 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001405f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014062:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0014067:	75 10                	jne    c0014079 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0014069:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001406d:	b9 03 00 00 00       	mov    ecx,0x3
c0014072:	01 d0                	add    eax,edx
c0014074:	e9 37 01 00 00       	jmp    c00141b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014079:	b9 02 00 00 00       	mov    ecx,0x2
c001407e:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0014083:	0f 85 27 01 00 00    	jne    c00141b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014089:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001408c:	b9 06 00 00 00       	mov    ecx,0x6
c0014091:	e9 1a 01 00 00       	jmp    c00141b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014096:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0014099:	b9 06 00 00 00       	mov    ecx,0x6
c001409e:	e9 0f 01 00 00       	jmp    c00141b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00140a3:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00140a6:	88 ca                	mov    dl,cl
c00140a8:	c0 ea 06             	shr    dl,0x6
c00140ab:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00140af:	89 ca                	mov    edx,ecx
c00140b1:	66 c1 ea 03          	shr    dx,0x3
c00140b5:	83 e2 07             	and    edx,0x7
c00140b8:	80 e1 07             	and    cl,0x7
c00140bb:	75 05                	jne    c00140c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00140bd:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00140c0:	eb 4c                	jmp    c001410e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00140c2:	80 f9 01             	cmp    cl,0x1
c00140c5:	75 05                	jne    c00140cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00140c7:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00140ca:	eb 42                	jmp    c001410e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00140cc:	80 f9 02             	cmp    cl,0x2
c00140cf:	75 05                	jne    c00140d6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00140d1:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00140d4:	eb 38                	jmp    c001410e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00140d6:	80 f9 03             	cmp    cl,0x3
c00140d9:	75 05                	jne    c00140e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00140db:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00140de:	eb 2e                	jmp    c001410e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00140e0:	80 f9 04             	cmp    cl,0x4
c00140e3:	75 12                	jne    c00140f7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00140e5:	f6 c4 60             	test   ah,0x60
c00140e8:	75 08                	jne    c00140f2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00140ea:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00140ed:	8d 78 14             	lea    edi,[eax+0x14]
c00140f0:	eb 1c                	jmp    c001410e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00140f2:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00140f5:	eb 17                	jmp    c001410e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00140f7:	80 f9 05             	cmp    cl,0x5
c00140fa:	75 05                	jne    c0014101 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c00140fc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00140ff:	eb 0d                	jmp    c001410e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014101:	80 f9 06             	cmp    cl,0x6
c0014104:	75 05                	jne    c001410b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0014106:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0014109:	eb 03                	jmp    c001410e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001410b:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001410e:	84 d2                	test   dl,dl
c0014110:	75 05                	jne    c0014117 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0014112:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0014115:	eb 3c                	jmp    c0014153 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014117:	80 fa 01             	cmp    dl,0x1
c001411a:	75 05                	jne    c0014121 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001411c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001411f:	eb 32                	jmp    c0014153 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014121:	80 fa 02             	cmp    dl,0x2
c0014124:	75 05                	jne    c001412b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0014126:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0014129:	eb 28                	jmp    c0014153 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001412b:	80 fa 03             	cmp    dl,0x3
c001412e:	75 05                	jne    c0014135 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0014130:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0014133:	eb 1e                	jmp    c0014153 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014135:	31 c0                	xor    eax,eax
c0014137:	80 fa 04             	cmp    dl,0x4
c001413a:	74 17                	je     c0014153 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001413c:	80 fa 05             	cmp    dl,0x5
c001413f:	75 05                	jne    c0014146 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0014141:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0014144:	eb 0d                	jmp    c0014153 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014146:	80 fa 06             	cmp    dl,0x6
c0014149:	75 05                	jne    c0014150 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001414b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001414e:	eb 03                	jmp    c0014153 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014150:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014153:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014158:	0f 94 c2             	sete   dl
c001415b:	80 f9 05             	cmp    cl,0x5
c001415e:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0014162:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0014167:	d3 e0                	shl    eax,cl
c0014169:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001416d:	74 0a                	je     c0014179 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001416f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0014172:	b9 07 00 00 00       	mov    ecx,0x7
c0014177:	eb 37                	jmp    c00141b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014179:	01 f8                	add    eax,edi
c001417b:	b9 03 00 00 00       	mov    ecx,0x3
c0014180:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014185:	74 2b                	je     c00141b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014187:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001418c:	75 0d                	jne    c001419b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001418e:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0014192:	01 c8                	add    eax,ecx
c0014194:	b9 04 00 00 00       	mov    ecx,0x4
c0014199:	eb 17                	jmp    c00141b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001419b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001419e:	b9 07 00 00 00       	mov    ecx,0x7
c00141a3:	eb 0d                	jmp    c00141b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00141a5:	b9 02 00 00 00       	mov    ecx,0x2
c00141aa:	b2 01                	mov    dl,0x1
c00141ac:	31 c0                	xor    eax,eax
c00141ae:	eb 02                	jmp    c00141b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00141b0:	31 d2                	xor    edx,edx
c00141b2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00141b6:	89 0b                	mov    DWORD PTR [ebx],ecx
c00141b8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00141bc:	88 11                	mov    BYTE PTR [ecx],dl
c00141be:	5a                   	pop    edx
c00141bf:	5b                   	pop    ebx
c00141c0:	5e                   	pop    esi
c00141c1:	5f                   	pop    edi
c00141c2:	c3                   	ret    

c00141c3 <Krnl::smpEntry()>:
c00141c3:	eb fe                	jmp    c00141c3 <Krnl::smpEntry()>

c00141c5 <Krnl::startCPU(int)>:
c00141c5:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c00141ca:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00141d1:	0f 84 36 01 00 00    	je     c001430d <Krnl::startCPU(int)+0x148>
c00141d7:	53                   	push   ebx
c00141d8:	83 ec 10             	sub    esp,0x10
c00141db:	fa                   	cli    
c00141dc:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c00141e2:	6a 1b                	push   0x1b
c00141e4:	ff 35 a8 7c 02 c0    	push   DWORD PTR ds:0xc0027ca8
c00141ea:	e8 3b 4d ff ff       	call   c0008f2a <Computer::rdmsr(unsigned int)>
c00141ef:	25 00 f0 ff ff       	and    eax,0xfffff000
c00141f4:	89 c3                	mov    ebx,eax
c00141f6:	58                   	pop    eax
c00141f7:	5a                   	pop    edx
c00141f8:	53                   	push   ebx
c00141f9:	68 e4 57 02 c0       	push   0xc00257e4
c00141fe:	e8 fc 8a ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0014203:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001420d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014211:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001421b:	c1 e0 18             	shl    eax,0x18
c001421e:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0014224:	83 c4 10             	add    esp,0x10
c0014227:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001422d:	09 c2                	or     edx,eax
c001422f:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0014235:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001423b:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014241:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0014247:	80 cd c5             	or     ch,0xc5
c001424a:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014250:	f3 90                	pause  
c0014252:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014254:	0f ba e1 0c          	bt     ecx,0xc
c0014258:	72 f6                	jb     c0014250 <Krnl::startCPU(int)+0x8b>
c001425a:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014260:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014266:	09 c1                	or     ecx,eax
c0014268:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001426e:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014274:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001427a:	80 cd 85             	or     ch,0x85
c001427d:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014283:	f3 90                	pause  
c0014285:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014287:	0f ba e1 0c          	bt     ecx,0xc
c001428b:	72 f6                	jb     c0014283 <Krnl::startCPU(int)+0xbe>
c001428d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014297:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001429d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00142a3:	09 c1                	or     ecx,eax
c00142a5:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00142ab:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00142b1:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c00142b7:	81 c9 02 06 00 00    	or     ecx,0x602
c00142bd:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00142c3:	f3 90                	pause  
c00142c5:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00142c7:	0f ba e1 0c          	bt     ecx,0xc
c00142cb:	72 f6                	jb     c00142c3 <Krnl::startCPU(int)+0xfe>
c00142cd:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00142d7:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00142dd:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00142e3:	09 c8                	or     eax,ecx
c00142e5:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c00142eb:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c00142f1:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c00142f6:	0d 02 06 00 00       	or     eax,0x602
c00142fb:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0014301:	f3 90                	pause  
c0014303:	8b 02                	mov    eax,DWORD PTR [edx]
c0014305:	0f ba e0 0c          	bt     eax,0xc
c0014309:	72 f6                	jb     c0014301 <Krnl::startCPU(int)+0x13c>
c001430b:	eb fe                	jmp    c001430b <Krnl::startCPU(int)+0x146>
c001430d:	c3                   	ret    

c001430e <Krnl::startCPUs()>:
c001430e:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0014313:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014319:	88 c2                	mov    dl,al
c001431b:	83 e2 0a             	and    edx,0xa
c001431e:	80 fa 0a             	cmp    dl,0xa
c0014321:	75 09                	jne    c001432c <Krnl::startCPUs()+0x1e>
c0014323:	a8 01                	test   al,0x1
c0014325:	74 05                	je     c001432c <Krnl::startCPUs()+0x1e>
c0014327:	e9 6f be fe ff       	jmp    c000019b <prepareTramp>
c001432c:	c3                   	ret    
c001432d:	90                   	nop

c001432e <EnvVarContainer::getEnv(char const*)>:
c001432e:	57                   	push   edi
c001432f:	56                   	push   esi
c0014330:	53                   	push   ebx
c0014331:	31 db                	xor    ebx,ebx
c0014333:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014337:	39 1e                	cmp    DWORD PTR [esi],ebx
c0014339:	7e 2b                	jle    c0014366 <EnvVarContainer::getEnv(char const*)+0x38>
c001433b:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0014342:	50                   	push   eax
c0014343:	50                   	push   eax
c0014344:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014347:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001434a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001434e:	e8 79 c4 fe ff       	call   c00007cc <strcmp>
c0014353:	83 c4 10             	add    esp,0x10
c0014356:	85 c0                	test   eax,eax
c0014358:	75 09                	jne    c0014363 <EnvVarContainer::getEnv(char const*)+0x35>
c001435a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001435d:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0014361:	eb 05                	jmp    c0014368 <EnvVarContainer::getEnv(char const*)+0x3a>
c0014363:	43                   	inc    ebx
c0014364:	eb d1                	jmp    c0014337 <EnvVarContainer::getEnv(char const*)+0x9>
c0014366:	31 c0                	xor    eax,eax
c0014368:	5b                   	pop    ebx
c0014369:	5e                   	pop    esi
c001436a:	5f                   	pop    edi
c001436b:	c3                   	ret    

c001436c <EnvVarContainer::setEnv(char const*, char const*)>:
c001436c:	55                   	push   ebp
c001436d:	57                   	push   edi
c001436e:	56                   	push   esi
c001436f:	53                   	push   ebx
c0014370:	83 ec 28             	sub    esp,0x28
c0014373:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0014377:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001437b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001437f:	56                   	push   esi
c0014380:	e8 1b c3 fe ff       	call   c00006a0 <strlen>
c0014385:	40                   	inc    eax
c0014386:	89 04 24             	mov    DWORD PTR [esp],eax
c0014389:	e8 81 56 ff ff       	call   c0009a0f <malloc>
c001438e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014391:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014395:	e8 06 c3 fe ff       	call   c00006a0 <strlen>
c001439a:	40                   	inc    eax
c001439b:	89 04 24             	mov    DWORD PTR [esp],eax
c001439e:	e8 6c 56 ff ff       	call   c0009a0f <malloc>
c00143a3:	89 34 24             	mov    DWORD PTR [esp],esi
c00143a6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00143aa:	e8 f1 c2 fe ff       	call   c00006a0 <strlen>
c00143af:	83 c4 0c             	add    esp,0xc
c00143b2:	40                   	inc    eax
c00143b3:	50                   	push   eax
c00143b4:	6a 00                	push   0x0
c00143b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00143ba:	e8 c5 c2 fe ff       	call   c0000684 <memset>
c00143bf:	89 34 24             	mov    DWORD PTR [esp],esi
c00143c2:	e8 d9 c2 fe ff       	call   c00006a0 <strlen>
c00143c7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00143cb:	8d 48 01             	lea    ecx,[eax+0x1]
c00143ce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00143d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00143d3:	89 de                	mov    esi,ebx
c00143d5:	e8 c6 c2 fe ff       	call   c00006a0 <strlen>
c00143da:	83 c4 0c             	add    esp,0xc
c00143dd:	40                   	inc    eax
c00143de:	50                   	push   eax
c00143df:	6a 00                	push   0x0
c00143e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00143e5:	e8 9a c2 fe ff       	call   c0000684 <memset>
c00143ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00143ed:	e8 ae c2 fe ff       	call   c00006a0 <strlen>
c00143f2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00143f6:	8d 48 01             	lea    ecx,[eax+0x1]
c00143f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00143fb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00143fe:	40                   	inc    eax
c00143ff:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014402:	c1 e0 03             	shl    eax,0x3
c0014405:	5a                   	pop    edx
c0014406:	59                   	pop    ecx
c0014407:	50                   	push   eax
c0014408:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001440b:	e8 eb 55 ff ff       	call   c00099fb <realloc>
c0014410:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014414:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014417:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001441a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001441e:	b9 08 00 00 00       	mov    ecx,0x8
c0014423:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014425:	83 c4 2c             	add    esp,0x2c
c0014428:	5b                   	pop    ebx
c0014429:	5e                   	pop    esi
c001442a:	5f                   	pop    edi
c001442b:	5d                   	pop    ebp
c001442c:	c3                   	ret    
c001442d:	90                   	nop

c001442e <EnvVarContainer::deleteEnv(char const*)>:
c001442e:	c3                   	ret    
c001442f:	90                   	nop

c0014430 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0014430:	55                   	push   ebp
c0014431:	57                   	push   edi
c0014432:	56                   	push   esi
c0014433:	53                   	push   ebx
c0014434:	81 ec 38 01 00 00    	sub    esp,0x138
c001443a:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0014441:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0014448:	68 14 01 00 00       	push   0x114
c001444d:	e8 bd 55 ff ff       	call   c0009a0f <malloc>
c0014452:	83 c4 0c             	add    esp,0xc
c0014455:	89 c3                	mov    ebx,eax
c0014457:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001445a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0014461:	50                   	push   eax
c0014462:	e8 03 8e ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0014467:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001446a:	e8 0b 91 ff ff       	call   c000d57a <File::exists()>
c001446f:	83 c4 10             	add    esp,0x10
c0014472:	84 c0                	test   al,al
c0014474:	75 31                	jne    c00144a7 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0014476:	50                   	push   eax
c0014477:	50                   	push   eax
c0014478:	6a 12                	push   0x12
c001447a:	53                   	push   ebx
c001447b:	e8 8c 8e ff ff       	call   c000d30c <File::open(FileOpenMode)>
c0014480:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014482:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0014485:	89 34 24             	mov    DWORD PTR [esp],esi
c0014488:	e8 13 c2 fe ff       	call   c00006a0 <strlen>
c001448d:	5a                   	pop    edx
c001448e:	31 d2                	xor    edx,edx
c0014490:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014494:	51                   	push   ecx
c0014495:	56                   	push   esi
c0014496:	52                   	push   edx
c0014497:	50                   	push   eax
c0014498:	53                   	push   ebx
c0014499:	ff d7                	call   edi
c001449b:	83 c4 14             	add    esp,0x14
c001449e:	53                   	push   ebx
c001449f:	e8 c6 8e ff ff       	call   c000d36a <File::close()>
c00144a4:	83 c4 10             	add    esp,0x10
c00144a7:	56                   	push   esi
c00144a8:	31 f6                	xor    esi,esi
c00144aa:	68 00 01 00 00       	push   0x100
c00144af:	6a 00                	push   0x0
c00144b1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00144b5:	50                   	push   eax
c00144b6:	e8 c9 c1 fe ff       	call   c0000684 <memset>
c00144bb:	5f                   	pop    edi
c00144bc:	58                   	pop    eax
c00144bd:	6a 01                	push   0x1
c00144bf:	53                   	push   ebx
c00144c0:	e8 47 8e ff ff       	call   c000d30c <File::open(FileOpenMode)>
c00144c5:	83 c4 10             	add    esp,0x10
c00144c8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00144d0:	83 ec 0c             	sub    esp,0xc
c00144d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144d5:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00144d9:	51                   	push   ecx
c00144da:	8d 54 24 23          	lea    edx,[esp+0x23]
c00144de:	52                   	push   edx
c00144df:	6a 00                	push   0x0
c00144e1:	6a 01                	push   0x1
c00144e3:	53                   	push   ebx
c00144e4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00144e7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00144eb:	83 c4 20             	add    esp,0x20
c00144ee:	3c 0d                	cmp    al,0xd
c00144f0:	0f 84 09 01 00 00    	je     c00145ff <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00144f6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00144fb:	0f 84 ef 00 00 00    	je     c00145f0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014501:	3c 0a                	cmp    al,0xa
c0014503:	74 13                	je     c0014518 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014505:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001450a:	74 0c                	je     c0014518 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c001450c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0014512:	0f 8e d8 00 00 00    	jle    c00145f0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014518:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001451c:	83 ec 0c             	sub    esp,0xc
c001451f:	8d 78 01             	lea    edi,[eax+0x1]
c0014522:	57                   	push   edi
c0014523:	e8 e7 54 ff ff       	call   c0009a0f <malloc>
c0014528:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001452c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014530:	8d 56 04             	lea    edx,[esi+0x4]
c0014533:	89 14 24             	mov    DWORD PTR [esp],edx
c0014536:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001453a:	e8 d0 54 ff ff       	call   c0009a0f <malloc>
c001453f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014543:	83 c4 0c             	add    esp,0xc
c0014546:	57                   	push   edi
c0014547:	6a 00                	push   0x0
c0014549:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001454d:	e8 32 c1 fe ff       	call   c0000684 <memset>
c0014552:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014556:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001455a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001455e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014560:	83 c4 0c             	add    esp,0xc
c0014563:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014567:	52                   	push   edx
c0014568:	6a 00                	push   0x0
c001456a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001456e:	e8 11 c1 fe ff       	call   c0000684 <memset>
c0014573:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014577:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001457b:	89 34 24             	mov    DWORD PTR [esp],esi
c001457e:	e8 1d c1 fe ff       	call   c00006a0 <strlen>
c0014583:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0014587:	89 c1                	mov    ecx,eax
c0014589:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001458b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001458e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0014591:	40                   	inc    eax
c0014592:	83 c4 10             	add    esp,0x10
c0014595:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014598:	85 d2                	test   edx,edx
c001459a:	75 0c                	jne    c00145a8 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c001459c:	83 ec 0c             	sub    esp,0xc
c001459f:	6a 08                	push   0x8
c00145a1:	e8 69 54 ff ff       	call   c0009a0f <malloc>
c00145a6:	eb 0c                	jmp    c00145b4 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c00145a8:	c1 e0 03             	shl    eax,0x3
c00145ab:	51                   	push   ecx
c00145ac:	51                   	push   ecx
c00145ad:	50                   	push   eax
c00145ae:	52                   	push   edx
c00145af:	e8 47 54 ff ff       	call   c00099fb <realloc>
c00145b4:	83 c4 10             	add    esp,0x10
c00145b7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00145ba:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00145bd:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00145c0:	8d 74 24 18          	lea    esi,[esp+0x18]
c00145c4:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00145c8:	b9 08 00 00 00       	mov    ecx,0x8
c00145cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00145cf:	31 f6                	xor    esi,esi
c00145d1:	50                   	push   eax
c00145d2:	68 00 01 00 00       	push   0x100
c00145d7:	6a 00                	push   0x0
c00145d9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00145dd:	50                   	push   eax
c00145de:	e8 a1 c0 fe ff       	call   c0000684 <memset>
c00145e3:	83 c4 10             	add    esp,0x10
c00145e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00145ee:	eb 0f                	jmp    c00145ff <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00145f0:	3c 3d                	cmp    al,0x3d
c00145f2:	74 07                	je     c00145fb <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c00145f4:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c00145f8:	46                   	inc    esi
c00145f9:	eb 04                	jmp    c00145ff <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00145fb:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00145ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014604:	0f 85 c6 fe ff ff    	jne    c00144d0 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001460a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014610:	5b                   	pop    ebx
c0014611:	5e                   	pop    esi
c0014612:	5f                   	pop    edi
c0014613:	5d                   	pop    ebp
c0014614:	c3                   	ret    
c0014615:	90                   	nop

c0014616 <EnvVarContainer::__loadSystem()>:
c0014616:	83 ec 10             	sub    esp,0x10
c0014619:	68 80 76 02 c0       	push   0xc0027680
c001461e:	68 f5 57 02 c0       	push   0xc00257f5
c0014623:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014627:	e8 04 fe ff ff       	call   c0014430 <EnvVarContainer::loadFrom(char const*, char const*)>
c001462c:	83 c4 1c             	add    esp,0x1c
c001462f:	c3                   	ret    

c0014630 <EnvVarContainer::__loadUser()>:
c0014630:	c3                   	ret    
c0014631:	90                   	nop

c0014632 <EnvVarContainer::EnvVarContainer(Process*)>:
c0014632:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014636:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001463c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014640:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014644:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0014647:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001464b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014652:	90                   	nop
c0014653:	c3                   	ret    

c0014654 <EnvVarContainer::~EnvVarContainer()>:
c0014654:	83 ec 0c             	sub    esp,0xc
c0014657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001465b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001465e:	85 c0                	test   eax,eax
c0014660:	74 1d                	je     c001467f <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014666:	8b 00                	mov    eax,DWORD PTR [eax]
c0014668:	85 c0                	test   eax,eax
c001466a:	74 13                	je     c001467f <EnvVarContainer::~EnvVarContainer()+0x2b>
c001466c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014670:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014673:	83 ec 0c             	sub    esp,0xc
c0014676:	50                   	push   eax
c0014677:	e8 a3 53 ff ff       	call   c0009a1f <free>
c001467c:	83 c4 10             	add    esp,0x10
c001467f:	90                   	nop
c0014680:	83 c4 0c             	add    esp,0xc
c0014683:	c3                   	ret    

c0014684 <Krnl::getEnv(Process*, char const*)>:
c0014684:	53                   	push   ebx
c0014685:	83 ec 08             	sub    esp,0x8
c0014688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001468c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014690:	39 05 f0 91 02 c0    	cmp    DWORD PTR ds:0xc00291f0,eax
c0014696:	74 04                	je     c001469c <Krnl::getEnv(Process*, char const*)+0x18>
c0014698:	85 c0                	test   eax,eax
c001469a:	75 0b                	jne    c00146a7 <Krnl::getEnv(Process*, char const*)+0x23>
c001469c:	a1 74 87 02 c0       	mov    eax,ds:0xc0028774
c00146a1:	85 c0                	test   eax,eax
c00146a3:	75 19                	jne    c00146be <Krnl::getEnv(Process*, char const*)+0x3a>
c00146a5:	eb 27                	jmp    c00146ce <Krnl::getEnv(Process*, char const*)+0x4a>
c00146a7:	52                   	push   edx
c00146a8:	52                   	push   edx
c00146a9:	53                   	push   ebx
c00146aa:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00146b0:	e8 79 fc ff ff       	call   c001432e <EnvVarContainer::getEnv(char const*)>
c00146b5:	83 c4 10             	add    esp,0x10
c00146b8:	85 c0                	test   eax,eax
c00146ba:	75 28                	jne    c00146e4 <Krnl::getEnv(Process*, char const*)+0x60>
c00146bc:	eb de                	jmp    c001469c <Krnl::getEnv(Process*, char const*)+0x18>
c00146be:	52                   	push   edx
c00146bf:	52                   	push   edx
c00146c0:	53                   	push   ebx
c00146c1:	50                   	push   eax
c00146c2:	e8 67 fc ff ff       	call   c001432e <EnvVarContainer::getEnv(char const*)>
c00146c7:	83 c4 10             	add    esp,0x10
c00146ca:	85 c0                	test   eax,eax
c00146cc:	75 16                	jne    c00146e4 <Krnl::getEnv(Process*, char const*)+0x60>
c00146ce:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00146d2:	a1 78 87 02 c0       	mov    eax,ds:0xc0028778
c00146d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00146db:	83 c4 08             	add    esp,0x8
c00146de:	5b                   	pop    ebx
c00146df:	e9 4a fc ff ff       	jmp    c001432e <EnvVarContainer::getEnv(char const*)>
c00146e4:	83 c4 08             	add    esp,0x8
c00146e7:	5b                   	pop    ebx
c00146e8:	c3                   	ret    

c00146e9 <Krnl::setEnvSystem(char const*, char const*)>:
c00146e9:	83 ec 10             	sub    esp,0x10
c00146ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146f4:	ff 35 78 87 02 c0    	push   DWORD PTR ds:0xc0028778
c00146fa:	e8 6d fc ff ff       	call   c001436c <EnvVarContainer::setEnv(char const*, char const*)>
c00146ff:	83 c4 1c             	add    esp,0x1c
c0014702:	c3                   	ret    

c0014703 <Krnl::setEnvUser(char const*, char const*)>:
c0014703:	a1 74 87 02 c0       	mov    eax,ds:0xc0028774
c0014708:	85 c0                	test   eax,eax
c001470a:	74 15                	je     c0014721 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001470c:	83 ec 10             	sub    esp,0x10
c001470f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014713:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014717:	50                   	push   eax
c0014718:	e8 4f fc ff ff       	call   c001436c <EnvVarContainer::setEnv(char const*, char const*)>
c001471d:	83 c4 1c             	add    esp,0x1c
c0014720:	c3                   	ret    
c0014721:	c3                   	ret    

c0014722 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0014722:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014726:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c001472c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014730:	e9 37 fc ff ff       	jmp    c001436c <EnvVarContainer::setEnv(char const*, char const*)>

c0014735 <Krnl::deleteEnvSystem(char const*)>:
c0014735:	c3                   	ret    

c0014736 <Krnl::deleteEnvUser(char const*)>:
c0014736:	c3                   	ret    

c0014737 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0014737:	c3                   	ret    

c0014738 <Krnl::newProcessEnv(Process*)>:
c0014738:	83 ec 28             	sub    esp,0x28
c001473b:	6a 0c                	push   0xc
c001473d:	e8 cd 52 ff ff       	call   c0009a0f <malloc>
c0014742:	5a                   	pop    edx
c0014743:	59                   	pop    ecx
c0014744:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014748:	50                   	push   eax
c0014749:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001474d:	e8 e0 fe ff ff       	call   c0014632 <EnvVarContainer::EnvVarContainer(Process*)>
c0014752:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014756:	83 c4 2c             	add    esp,0x2c
c0014759:	c3                   	ret    

c001475a <Krnl::copyProcessEnv(Process*, Process*)>:
c001475a:	57                   	push   edi
c001475b:	56                   	push   esi
c001475c:	53                   	push   ebx
c001475d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014761:	83 ec 0c             	sub    esp,0xc
c0014764:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001476a:	6a 0c                	push   0xc
c001476c:	e8 9e 52 ff ff       	call   c0009a0f <malloc>
c0014771:	89 c3                	mov    ebx,eax
c0014773:	58                   	pop    eax
c0014774:	5a                   	pop    edx
c0014775:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014779:	53                   	push   ebx
c001477a:	e8 b3 fe ff ff       	call   c0014632 <EnvVarContainer::EnvVarContainer(Process*)>
c001477f:	8b 07                	mov    eax,DWORD PTR [edi]
c0014781:	89 03                	mov    DWORD PTR [ebx],eax
c0014783:	c1 e0 03             	shl    eax,0x3
c0014786:	89 04 24             	mov    DWORD PTR [esp],eax
c0014789:	e8 81 52 ff ff       	call   c0009a0f <malloc>
c001478e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014791:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014793:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0014796:	c1 e1 03             	shl    ecx,0x3
c0014799:	89 c7                	mov    edi,eax
c001479b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001479d:	83 c4 10             	add    esp,0x10
c00147a0:	89 d8                	mov    eax,ebx
c00147a2:	5b                   	pop    ebx
c00147a3:	5e                   	pop    esi
c00147a4:	5f                   	pop    edi
c00147a5:	c3                   	ret    

c00147a6 <Krnl::loadSystemEnv()>:
c00147a6:	53                   	push   ebx
c00147a7:	83 ec 14             	sub    esp,0x14
c00147aa:	6a 0c                	push   0xc
c00147ac:	e8 5e 52 ff ff       	call   c0009a0f <malloc>
c00147b1:	89 c3                	mov    ebx,eax
c00147b3:	58                   	pop    eax
c00147b4:	5a                   	pop    edx
c00147b5:	ff 35 f0 91 02 c0    	push   DWORD PTR ds:0xc00291f0
c00147bb:	53                   	push   ebx
c00147bc:	e8 71 fe ff ff       	call   c0014632 <EnvVarContainer::EnvVarContainer(Process*)>
c00147c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00147c4:	89 1d 78 87 02 c0    	mov    DWORD PTR ds:0xc0028778,ebx
c00147ca:	e8 47 fe ff ff       	call   c0014616 <EnvVarContainer::__loadSystem()>
c00147cf:	83 c4 18             	add    esp,0x18
c00147d2:	5b                   	pop    ebx
c00147d3:	c3                   	ret    

c00147d4 <Krnl::loadUserEnv()>:
c00147d4:	53                   	push   ebx
c00147d5:	83 ec 14             	sub    esp,0x14
c00147d8:	6a 0c                	push   0xc
c00147da:	e8 30 52 ff ff       	call   c0009a0f <malloc>
c00147df:	89 c3                	mov    ebx,eax
c00147e1:	58                   	pop    eax
c00147e2:	5a                   	pop    edx
c00147e3:	ff 35 f0 91 02 c0    	push   DWORD PTR ds:0xc00291f0
c00147e9:	53                   	push   ebx
c00147ea:	e8 43 fe ff ff       	call   c0014632 <EnvVarContainer::EnvVarContainer(Process*)>
c00147ef:	89 1d 74 87 02 c0    	mov    DWORD PTR ds:0xc0028774,ebx
c00147f5:	83 c4 18             	add    esp,0x18
c00147f8:	5b                   	pop    ebx
c00147f9:	c3                   	ret    

c00147fa <Krnl::flushEnv()>:
c00147fa:	c3                   	ret    

c00147fb <Krnl::getProcessTotalEnvCount(Process*)>:
c00147fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00147ff:	8b 15 74 87 02 c0    	mov    edx,DWORD PTR ds:0xc0028774
c0014805:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001480b:	a1 78 87 02 c0       	mov    eax,ds:0xc0028778
c0014810:	8b 00                	mov    eax,DWORD PTR [eax]
c0014812:	03 01                	add    eax,DWORD PTR [ecx]
c0014814:	85 d2                	test   edx,edx
c0014816:	74 02                	je     c001481a <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0014818:	03 02                	add    eax,DWORD PTR [edx]
c001481a:	c3                   	ret    

c001481b <Krnl::getProcessEnvPair(Process*, int)>:
c001481b:	57                   	push   edi
c001481c:	56                   	push   esi
c001481d:	8b 35 74 87 02 c0    	mov    esi,DWORD PTR ds:0xc0028774
c0014823:	53                   	push   ebx
c0014824:	85 f6                	test   esi,esi
c0014826:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001482a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001482e:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014834:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014838:	8b 01                	mov    eax,DWORD PTR [ecx]
c001483a:	75 16                	jne    c0014852 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c001483c:	39 c2                	cmp    edx,eax
c001483e:	7c 16                	jl     c0014856 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014840:	8b 0d 78 87 02 c0    	mov    ecx,DWORD PTR ds:0xc0028778
c0014846:	8b 31                	mov    esi,DWORD PTR [ecx]
c0014848:	01 c6                	add    esi,eax
c001484a:	39 d6                	cmp    esi,edx
c001484c:	7e 3c                	jle    c001488a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001484e:	29 c2                	sub    edx,eax
c0014850:	eb 04                	jmp    c0014856 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014852:	39 c2                	cmp    edx,eax
c0014854:	7d 05                	jge    c001485b <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0014856:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0014859:	eb 20                	jmp    c001487b <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001485b:	8b 3e                	mov    edi,DWORD PTR [esi]
c001485d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0014860:	39 d1                	cmp    ecx,edx
c0014862:	7e 04                	jle    c0014868 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0014864:	29 c2                	sub    edx,eax
c0014866:	eb 10                	jmp    c0014878 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0014868:	8b 35 78 87 02 c0    	mov    esi,DWORD PTR ds:0xc0028778
c001486e:	03 0e                	add    ecx,DWORD PTR [esi]
c0014870:	39 d1                	cmp    ecx,edx
c0014872:	7e 16                	jle    c001488a <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014874:	29 c2                	sub    edx,eax
c0014876:	29 fa                	sub    edx,edi
c0014878:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001487b:	8d 14 d0             	lea    edx,[eax+edx*8]
c001487e:	8b 02                	mov    eax,DWORD PTR [edx]
c0014880:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0014883:	89 03                	mov    DWORD PTR [ebx],eax
c0014885:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0014888:	eb 1d                	jmp    c00148a7 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001488a:	83 ec 0c             	sub    esp,0xc
c001488d:	68 17 58 02 c0       	push   0xc0025817
c0014892:	e8 18 00 00 00       	call   c00148af <Krnl::panic(char const*)>
c0014897:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001489d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00148a4:	83 c4 10             	add    esp,0x10
c00148a7:	89 d8                	mov    eax,ebx
c00148a9:	5b                   	pop    ebx
c00148aa:	5e                   	pop    esi
c00148ab:	5f                   	pop    edi
c00148ac:	c2 04 00             	ret    0x4

c00148af <Krnl::panic(char const*)>:
c00148af:	55                   	push   ebp
c00148b0:	89 e5                	mov    ebp,esp
c00148b2:	53                   	push   ebx
c00148b3:	83 ec 10             	sub    esp,0x10
c00148b6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00148b9:	fa                   	cli    
c00148ba:	c6 05 84 87 02 c0 01 	mov    BYTE PTR ds:0xc0028784,0x1
c00148c1:	53                   	push   ebx
c00148c2:	e8 a2 51 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00148c7:	58                   	pop    eax
c00148c8:	c6 05 80 70 02 c0 00 	mov    BYTE PTR ds:0xc0027080,0x0
c00148cf:	5a                   	pop    edx
c00148d0:	53                   	push   ebx
c00148d1:	68 31 58 02 c0       	push   0xc0025831
c00148d6:	e8 24 84 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00148db:	59                   	pop    ecx
c00148dc:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c00148e1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00148e7:	e8 1d 62 ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c00148ec:	83 c4 0c             	add    esp,0xc
c00148ef:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c00148f4:	6a 01                	push   0x1
c00148f6:	6a 0f                	push   0xf
c00148f8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00148fe:	e8 65 60 ff ff       	call   c000a968 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014903:	58                   	pop    eax
c0014904:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0014909:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001490f:	e8 76 65 ff ff       	call   c000ae8a <VgaText::clearScreen()>
c0014914:	58                   	pop    eax
c0014915:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c001491a:	5a                   	pop    edx
c001491b:	68 4a 58 02 c0       	push   0xc002584a
c0014920:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014926:	e8 eb 66 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c001492b:	59                   	pop    ecx
c001492c:	58                   	pop    eax
c001492d:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0014932:	68 f0 58 02 c0       	push   0xc00258f0
c0014937:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001493d:	e8 d4 66 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014942:	58                   	pop    eax
c0014943:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0014948:	5a                   	pop    edx
c0014949:	68 66 58 02 c0       	push   0xc0025866
c001494e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014954:	e8 bd 66 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014959:	59                   	pop    ecx
c001495a:	58                   	pop    eax
c001495b:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0014960:	53                   	push   ebx
c0014961:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014967:	e8 aa 66 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c001496c:	58                   	pop    eax
c001496d:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0014972:	5a                   	pop    edx
c0014973:	68 86 58 02 c0       	push   0xc0025886
c0014978:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001497e:	e8 93 66 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014983:	a1 80 87 02 c0       	mov    eax,ds:0xc0028780
c0014988:	83 c4 10             	add    esp,0x10
c001498b:	85 c0                	test   eax,eax
c001498d:	74 02                	je     c0014991 <Krnl::panic(char const*)+0xe2>
c001498f:	ff d0                	call   eax
c0014991:	83 ec 0c             	sub    esp,0xc
c0014994:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014997:	e8 15 32 00 00       	call   c0017bb1 <Thr::getDriverNameFromAddress(unsigned long)>
c001499c:	83 c4 10             	add    esp,0x10
c001499f:	89 c3                	mov    ebx,eax
c00149a1:	85 c0                	test   eax,eax
c00149a3:	0f 84 4e 02 00 00    	je     c0014bf7 <Krnl::panic(char const*)+0x348>
c00149a9:	83 ec 08             	sub    esp,0x8
c00149ac:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c00149b1:	68 2c 59 02 c0       	push   0xc002592c
c00149b6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00149bc:	e8 55 66 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c00149c1:	58                   	pop    eax
c00149c2:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c00149c7:	5a                   	pop    edx
c00149c8:	68 66 58 02 c0       	push   0xc0025866
c00149cd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00149d3:	e8 3e 66 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c00149d8:	59                   	pop    ecx
c00149d9:	58                   	pop    eax
c00149da:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c00149df:	53                   	push   ebx
c00149e0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00149e6:	e8 2b 66 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c00149eb:	83 c4 10             	add    esp,0x10
c00149ee:	83 ec 08             	sub    esp,0x8
c00149f1:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c00149f6:	68 85 58 02 c0       	push   0xc0025885
c00149fb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a01:	e8 10 66 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a06:	58                   	pop    eax
c0014a07:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0014a0c:	5a                   	pop    edx
c0014a0d:	68 84 59 02 c0       	push   0xc0025984
c0014a12:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a18:	e8 f9 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a1d:	59                   	pop    ecx
c0014a1e:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0014a23:	5b                   	pop    ebx
c0014a24:	68 c4 59 02 c0       	push   0xc00259c4
c0014a29:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a2f:	e8 e2 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a34:	58                   	pop    eax
c0014a35:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0014a3a:	5a                   	pop    edx
c0014a3b:	68 71 58 02 c0       	push   0xc0025871
c0014a40:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a46:	e8 cb 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a4b:	59                   	pop    ecx
c0014a4c:	5b                   	pop    ebx
c0014a4d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014a50:	68 89 58 02 c0       	push   0xc0025889
c0014a55:	e8 a5 82 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0014a5a:	58                   	pop    eax
c0014a5b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014a5e:	5a                   	pop    edx
c0014a5f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014a62:	68 92 58 02 c0       	push   0xc0025892
c0014a67:	e8 93 82 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0014a6c:	59                   	pop    ecx
c0014a6d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014a70:	5b                   	pop    ebx
c0014a71:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a73:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014a76:	68 9b 58 02 c0       	push   0xc002589b
c0014a7b:	e8 7f 82 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0014a80:	58                   	pop    eax
c0014a81:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0014a86:	5a                   	pop    edx
c0014a87:	68 08 5a 02 c0       	push   0xc0025a08
c0014a8c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a92:	e8 7f 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a97:	59                   	pop    ecx
c0014a98:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0014a9d:	5b                   	pop    ebx
c0014a9e:	68 a4 58 02 c0       	push   0xc00258a4
c0014aa3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014aa9:	e8 68 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014aae:	0f 20 c0             	mov    eax,cr0
c0014ab1:	5a                   	pop    edx
c0014ab2:	59                   	pop    ecx
c0014ab3:	50                   	push   eax
c0014ab4:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0014ab9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014abf:	e8 0c 65 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014ac4:	5b                   	pop    ebx
c0014ac5:	58                   	pop    eax
c0014ac6:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0014acb:	68 ae 58 02 c0       	push   0xc00258ae
c0014ad0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014ad6:	e8 3b 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014adb:	0f 20 d0             	mov    eax,cr2
c0014ade:	5a                   	pop    edx
c0014adf:	59                   	pop    ecx
c0014ae0:	50                   	push   eax
c0014ae1:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0014ae6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014aec:	e8 df 64 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014af1:	5b                   	pop    ebx
c0014af2:	58                   	pop    eax
c0014af3:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0014af8:	68 b8 58 02 c0       	push   0xc00258b8
c0014afd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b03:	e8 0e 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014b08:	0f 20 d8             	mov    eax,cr3
c0014b0b:	5a                   	pop    edx
c0014b0c:	59                   	pop    ecx
c0014b0d:	50                   	push   eax
c0014b0e:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0014b13:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b19:	e8 b2 64 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014b1e:	5b                   	pop    ebx
c0014b1f:	58                   	pop    eax
c0014b20:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0014b25:	68 cb 58 02 c0       	push   0xc00258cb
c0014b2a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b30:	e8 e1 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014b35:	0f 20 e0             	mov    eax,cr4
c0014b38:	5a                   	pop    edx
c0014b39:	59                   	pop    ecx
c0014b3a:	50                   	push   eax
c0014b3b:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0014b40:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b46:	e8 85 64 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014b4b:	5b                   	pop    ebx
c0014b4c:	58                   	pop    eax
c0014b4d:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0014b52:	68 d5 58 02 c0       	push   0xc00258d5
c0014b57:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b5d:	e8 b4 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014b62:	5a                   	pop    edx
c0014b63:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0014b68:	59                   	pop    ecx
c0014b69:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b6f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014b72:	50                   	push   eax
c0014b73:	e8 58 64 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014b78:	5b                   	pop    ebx
c0014b79:	58                   	pop    eax
c0014b7a:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0014b7f:	68 ec 58 02 c0       	push   0xc00258ec
c0014b84:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b8a:	e8 87 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014b8f:	5a                   	pop    edx
c0014b90:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0014b95:	59                   	pop    ecx
c0014b96:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b9c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014b9f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014ba2:	50                   	push   eax
c0014ba3:	e8 28 64 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014ba8:	5b                   	pop    ebx
c0014ba9:	58                   	pop    eax
c0014baa:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0014baf:	68 ec 58 02 c0       	push   0xc00258ec
c0014bb4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014bba:	e8 57 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014bbf:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0014bc4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014bc7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014bcd:	8b 12                	mov    edx,DWORD PTR [edx]
c0014bcf:	59                   	pop    ecx
c0014bd0:	5b                   	pop    ebx
c0014bd1:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014bd4:	50                   	push   eax
c0014bd5:	e8 f6 63 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014bda:	83 c4 10             	add    esp,0x10
c0014bdd:	b2 fe                	mov    dl,0xfe
c0014bdf:	e4 60                	in     al,0x60
c0014be1:	3c 1c                	cmp    al,0x1c
c0014be3:	74 04                	je     c0014be9 <Krnl::panic(char const*)+0x33a>
c0014be5:	3c 5a                	cmp    al,0x5a
c0014be7:	75 f6                	jne    c0014bdf <Krnl::panic(char const*)+0x330>
c0014be9:	e4 64                	in     al,0x64
c0014beb:	a8 02                	test   al,0x2
c0014bed:	75 fa                	jne    c0014be9 <Krnl::panic(char const*)+0x33a>
c0014bef:	88 d0                	mov    al,dl
c0014bf1:	e6 64                	out    0x64,al
c0014bf3:	fa                   	cli    
c0014bf4:	f4                   	hlt    
c0014bf5:	eb e8                	jmp    c0014bdf <Krnl::panic(char const*)+0x330>
c0014bf7:	50                   	push   eax
c0014bf8:	50                   	push   eax
c0014bf9:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0014bfe:	68 58 59 02 c0       	push   0xc0025958
c0014c03:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014c09:	e8 08 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014c0e:	58                   	pop    eax
c0014c0f:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0014c14:	5a                   	pop    edx
c0014c15:	68 66 58 02 c0       	push   0xc0025866
c0014c1a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014c20:	e8 f1 63 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014c25:	59                   	pop    ecx
c0014c26:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c2b:	5b                   	pop    ebx
c0014c2c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014c2f:	83 c0 0c             	add    eax,0xc
c0014c32:	50                   	push   eax
c0014c33:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c0014c38:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014c3e:	e8 d3 63 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014c43:	83 c4 10             	add    esp,0x10
c0014c46:	e9 a3 fd ff ff       	jmp    c00149ee <Krnl::panic(char const*)+0x13f>

c0014c4b <Krnl::powerThread(void*)>:
c0014c4b:	53                   	push   ebx
c0014c4c:	83 ec 08             	sub    esp,0x8
c0014c4f:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0014c54:	48                   	dec    eax
c0014c55:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0014c5a:	75 01                	jne    c0014c5d <Krnl::powerThread(void*)+0x12>
c0014c5c:	fb                   	sti    
c0014c5d:	83 ec 0c             	sub    esp,0xc
c0014c60:	8b 1d d4 87 02 c0    	mov    ebx,DWORD PTR ds:0xc00287d4
c0014c66:	6a 0a                	push   0xa
c0014c68:	c6 05 a0 87 02 c0 00 	mov    BYTE PTR ds:0xc00287a0,0x0
c0014c6f:	e8 7c 3c 00 00       	call   c00188f0 <sleep(unsigned int)>
c0014c74:	a1 e4 87 02 c0       	mov    eax,ds:0xc00287e4
c0014c79:	83 c4 10             	add    esp,0x10
c0014c7c:	83 c0 0a             	add    eax,0xa
c0014c7f:	85 db                	test   ebx,ebx
c0014c81:	a3 e4 87 02 c0       	mov    ds:0xc00287e4,eax
c0014c86:	74 d5                	je     c0014c5d <Krnl::powerThread(void*)+0x12>
c0014c88:	39 d8                	cmp    eax,ebx
c0014c8a:	7e d1                	jle    c0014c5d <Krnl::powerThread(void*)+0x12>
c0014c8c:	83 ec 0c             	sub    esp,0xc
c0014c8f:	ff 35 a8 7c 02 c0    	push   DWORD PTR ds:0xc0027ca8
c0014c95:	e8 24 43 ff ff       	call   c0008fbe <Computer::sleep()>
c0014c9a:	83 c4 10             	add    esp,0x10
c0014c9d:	eb be                	jmp    c0014c5d <Krnl::powerThread(void*)+0x12>

c0014c9f <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0014c9f:	57                   	push   edi
c0014ca0:	b9 09 00 00 00       	mov    ecx,0x9
c0014ca5:	56                   	push   esi
c0014ca6:	bf c0 87 02 c0       	mov    edi,0xc00287c0
c0014cab:	fc                   	cld    
c0014cac:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014cb0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014cb2:	5e                   	pop    esi
c0014cb3:	5f                   	pop    edi
c0014cb4:	c3                   	ret    

c0014cb5 <Krnl::userIOReceived()>:
c0014cb5:	c7 05 e4 87 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00287e4,0x0
c0014cbf:	c3                   	ret    

c0014cc0 <Krnl::handlePowerButton()>:
c0014cc0:	83 ec 0c             	sub    esp,0xc
c0014cc3:	a1 c0 87 02 c0       	mov    eax,ds:0xc00287c0
c0014cc8:	83 f8 02             	cmp    eax,0x2
c0014ccb:	75 10                	jne    c0014cdd <Krnl::handlePowerButton()+0x1d>
c0014ccd:	83 ec 0c             	sub    esp,0xc
c0014cd0:	ff 35 a8 7c 02 c0    	push   DWORD PTR ds:0xc0027ca8
c0014cd6:	e8 b3 42 ff ff       	call   c0008f8e <Computer::shutdown()>
c0014cdb:	eb 11                	jmp    c0014cee <Krnl::handlePowerButton()+0x2e>
c0014cdd:	48                   	dec    eax
c0014cde:	75 11                	jne    c0014cf1 <Krnl::handlePowerButton()+0x31>
c0014ce0:	83 ec 0c             	sub    esp,0xc
c0014ce3:	ff 35 a8 7c 02 c0    	push   DWORD PTR ds:0xc0027ca8
c0014ce9:	e8 d0 42 ff ff       	call   c0008fbe <Computer::sleep()>
c0014cee:	83 c4 10             	add    esp,0x10
c0014cf1:	83 c4 0c             	add    esp,0xc
c0014cf4:	c3                   	ret    

c0014cf5 <Krnl::handleSleepButton()>:
c0014cf5:	83 ec 0c             	sub    esp,0xc
c0014cf8:	a1 c4 87 02 c0       	mov    eax,ds:0xc00287c4
c0014cfd:	83 f8 02             	cmp    eax,0x2
c0014d00:	75 10                	jne    c0014d12 <Krnl::handleSleepButton()+0x1d>
c0014d02:	83 ec 0c             	sub    esp,0xc
c0014d05:	ff 35 a8 7c 02 c0    	push   DWORD PTR ds:0xc0027ca8
c0014d0b:	e8 7e 42 ff ff       	call   c0008f8e <Computer::shutdown()>
c0014d10:	eb 11                	jmp    c0014d23 <Krnl::handleSleepButton()+0x2e>
c0014d12:	48                   	dec    eax
c0014d13:	75 11                	jne    c0014d26 <Krnl::handleSleepButton()+0x31>
c0014d15:	83 ec 0c             	sub    esp,0xc
c0014d18:	ff 35 a8 7c 02 c0    	push   DWORD PTR ds:0xc0027ca8
c0014d1e:	e8 9b 42 ff ff       	call   c0008fbe <Computer::sleep()>
c0014d23:	83 c4 10             	add    esp,0x10
c0014d26:	83 c4 0c             	add    esp,0xc
c0014d29:	c3                   	ret    

c0014d2a <Krnl::setupPowerManager()>:
c0014d2a:	83 ec 0c             	sub    esp,0xc
c0014d2d:	c7 05 e4 87 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00287e4,0x0
c0014d37:	68 f0 00 00 00       	push   0xf0
c0014d3c:	c6 05 a0 87 02 c0 00 	mov    BYTE PTR ds:0xc00287a0,0x0
c0014d43:	6a 00                	push   0x0
c0014d45:	68 4b 4c 01 c0       	push   0xc0014c4b
c0014d4a:	ff 35 f0 91 02 c0    	push   DWORD PTR ds:0xc00291f0
c0014d50:	e8 77 36 00 00       	call   c00183cc <Process::createThread(void (*)(void*), void*, int)>
c0014d55:	c7 05 c0 87 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc00287c0,0x2
c0014d5f:	c7 05 c4 87 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00287c4,0x1
c0014d69:	c7 05 c8 87 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc00287c8,0x3
c0014d73:	c7 05 cc 87 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00287cc,0x0
c0014d7d:	c7 05 d8 87 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00287d8,0x0
c0014d87:	c7 05 d0 87 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00287d0,0x0
c0014d91:	c7 05 dc 87 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00287dc,0x0
c0014d9b:	c7 05 d4 87 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00287d4,0x3c
c0014da5:	c7 05 e0 87 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00287e0,0x3c
c0014daf:	83 c4 1c             	add    esp,0x1c
c0014db2:	c3                   	ret    
c0014db3:	90                   	nop

c0014db4 <Net::switchEndian16(unsigned short)>:
c0014db4:	83 ec 04             	sub    esp,0x4
c0014db7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014dbb:	66 89 04 24          	mov    WORD PTR [esp],ax
c0014dbf:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0014dc3:	c1 f8 08             	sar    eax,0x8
c0014dc6:	89 c2                	mov    edx,eax
c0014dc8:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0014dcc:	c1 e0 08             	shl    eax,0x8
c0014dcf:	09 d0                	or     eax,edx
c0014dd1:	83 c4 04             	add    esp,0x4
c0014dd4:	c3                   	ret    
c0014dd5:	8d 76 00             	lea    esi,[esi+0x0]

c0014dd8 <Net::switchEndian32(unsigned int)>:
c0014dd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ddc:	c1 e8 18             	shr    eax,0x18
c0014ddf:	89 c2                	mov    edx,eax
c0014de1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014de5:	c1 e0 08             	shl    eax,0x8
c0014de8:	25 00 00 ff 00       	and    eax,0xff0000
c0014ded:	09 c2                	or     edx,eax
c0014def:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014df3:	c1 e8 08             	shr    eax,0x8
c0014df6:	25 00 ff 00 00       	and    eax,0xff00
c0014dfb:	09 c2                	or     edx,eax
c0014dfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e01:	c1 e0 18             	shl    eax,0x18
c0014e04:	09 d0                	or     eax,edx
c0014e06:	c3                   	ret    
c0014e07:	90                   	nop

c0014e08 <Net::crc32Calc(unsigned char*, int)>:
c0014e08:	83 ec 10             	sub    esp,0x10
c0014e0b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014e10:	75 0a                	jne    c0014e1c <Net::crc32Calc(unsigned char*, int)+0x14>
c0014e12:	b8 00 00 00 00       	mov    eax,0x0
c0014e17:	e9 8c 00 00 00       	jmp    c0014ea8 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0014e1c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014e21:	7f 09                	jg     c0014e2c <Net::crc32Calc(unsigned char*, int)+0x24>
c0014e23:	b8 00 00 00 00       	mov    eax,0x0
c0014e28:	eb 7e                	jmp    c0014ea8 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0014e2a:	66 90                	xchg   ax,ax
c0014e2c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0014e34:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014e3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014e40:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0014e44:	7d 5a                	jge    c0014ea0 <Net::crc32Calc(unsigned char*, int)+0x98>
c0014e46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014e4a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014e4e:	01 d0                	add    eax,edx
c0014e50:	8a 00                	mov    al,BYTE PTR [eax]
c0014e52:	0f b6 c0             	movzx  eax,al
c0014e55:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0014e59:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014e61:	8d 76 00             	lea    esi,[esi+0x0]
c0014e64:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0014e69:	7f 2d                	jg     c0014e98 <Net::crc32Calc(unsigned char*, int)+0x90>
c0014e6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e6f:	83 e0 01             	and    eax,0x1
c0014e72:	74 10                	je     c0014e84 <Net::crc32Calc(unsigned char*, int)+0x7c>
c0014e74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e78:	d1 e8                	shr    eax,1
c0014e7a:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0014e7f:	eb 0b                	jmp    c0014e8c <Net::crc32Calc(unsigned char*, int)+0x84>
c0014e81:	8d 76 00             	lea    esi,[esi+0x0]
c0014e84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e88:	d1 e8                	shr    eax,1
c0014e8a:	66 90                	xchg   ax,ax
c0014e8c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014e90:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014e94:	eb ce                	jmp    c0014e64 <Net::crc32Calc(unsigned char*, int)+0x5c>
c0014e96:	66 90                	xchg   ax,ax
c0014e98:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014e9c:	eb 9e                	jmp    c0014e3c <Net::crc32Calc(unsigned char*, int)+0x34>
c0014e9e:	66 90                	xchg   ax,ax
c0014ea0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ea4:	f7 d0                	not    eax
c0014ea6:	66 90                	xchg   ax,ax
c0014ea8:	83 c4 10             	add    esp,0x10
c0014eab:	c3                   	ret    

c0014eac <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0014eac:	57                   	push   edi
c0014ead:	56                   	push   esi
c0014eae:	53                   	push   ebx
c0014eaf:	83 ec 60             	sub    esp,0x60
c0014eb2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014eb9:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0014ebd:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0014ec5:	8d 76 00             	lea    esi,[esi+0x0]
c0014ec8:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c0014ecd:	7f 1d                	jg     c0014eec <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c0014ecf:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014ed6:	8d 50 01             	lea    edx,[eax+0x1]
c0014ed9:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014ee0:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c0014ee3:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0014ee7:	eb df                	jmp    c0014ec8 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c0014ee9:	8d 76 00             	lea    esi,[esi+0x0]
c0014eec:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014ef3:	8d 50 01             	lea    edx,[eax+0x1]
c0014ef6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014efd:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0014f00:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014f07:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014f0b:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c0014f0f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014f13:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c0014f1b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014f23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014f27:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014f2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014f2f:	89 c6                	mov    esi,eax
c0014f31:	89 d7                	mov    edi,edx
c0014f33:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014f35:	89 c8                	mov    eax,ecx
c0014f37:	89 fa                	mov    edx,edi
c0014f39:	89 f3                	mov    ebx,esi
c0014f3b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014f3f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014f43:	89 04 24             	mov    DWORD PTR [esp],eax
c0014f46:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0014f4e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014f55:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014f59:	8d 44 24 78          	lea    eax,[esp+0x78]
c0014f5d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014f61:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0014f69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014f6d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014f71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f75:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014f79:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014f7d:	89 c6                	mov    esi,eax
c0014f7f:	89 d7                	mov    edi,edx
c0014f81:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014f83:	89 c8                	mov    eax,ecx
c0014f85:	89 fa                	mov    edx,edi
c0014f87:	89 f3                	mov    ebx,esi
c0014f89:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0014f8d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0014f91:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014f95:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0014f9d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014fa4:	0f b7 c0             	movzx  eax,ax
c0014fa7:	c1 f8 08             	sar    eax,0x8
c0014faa:	89 c1                	mov    ecx,eax
c0014fac:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014fb3:	8d 50 01             	lea    edx,[eax+0x1]
c0014fb6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014fbd:	88 ca                	mov    dl,cl
c0014fbf:	88 10                	mov    BYTE PTR [eax],dl
c0014fc1:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0014fc8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014fcf:	8d 48 01             	lea    ecx,[eax+0x1]
c0014fd2:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c0014fd9:	88 10                	mov    BYTE PTR [eax],dl
c0014fdb:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0014fdf:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0014fe3:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c0014fea:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c0014fee:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0014ff2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0014ff6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014ffa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014ffe:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015002:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0015006:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001500a:	89 c6                	mov    esi,eax
c001500c:	89 d7                	mov    edi,edx
c001500e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015010:	89 c8                	mov    eax,ecx
c0015012:	89 fa                	mov    edx,edi
c0015014:	89 f3                	mov    ebx,esi
c0015016:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001501a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001501e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0015022:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0015026:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001502d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015034:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c0015038:	50                   	push   eax
c0015039:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001503d:	e8 c6 fd ff ff       	call   c0014e08 <Net::crc32Calc(unsigned char*, int)>
c0015042:	83 c4 08             	add    esp,0x8
c0015045:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0015049:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001504d:	c1 e8 18             	shr    eax,0x18
c0015050:	89 c1                	mov    ecx,eax
c0015052:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015059:	8d 50 01             	lea    edx,[eax+0x1]
c001505c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015063:	88 ca                	mov    dl,cl
c0015065:	88 10                	mov    BYTE PTR [eax],dl
c0015067:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001506b:	c1 e8 10             	shr    eax,0x10
c001506e:	89 c1                	mov    ecx,eax
c0015070:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015077:	8d 50 01             	lea    edx,[eax+0x1]
c001507a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015081:	88 ca                	mov    dl,cl
c0015083:	88 10                	mov    BYTE PTR [eax],dl
c0015085:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015089:	c1 e8 08             	shr    eax,0x8
c001508c:	89 c1                	mov    ecx,eax
c001508e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015095:	8d 50 01             	lea    edx,[eax+0x1]
c0015098:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001509f:	88 ca                	mov    dl,cl
c00150a1:	88 10                	mov    BYTE PTR [eax],dl
c00150a3:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00150aa:	8d 50 01             	lea    edx,[eax+0x1]
c00150ad:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00150b4:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00150b8:	88 10                	mov    BYTE PTR [eax],dl
c00150ba:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00150be:	83 c4 60             	add    esp,0x60
c00150c1:	5b                   	pop    ebx
c00150c2:	5e                   	pop    esi
c00150c3:	5f                   	pop    edi
c00150c4:	c3                   	ret    
c00150c5:	8d 76 00             	lea    esi,[esi+0x0]

c00150c8 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c00150c8:	57                   	push   edi
c00150c9:	56                   	push   esi
c00150ca:	53                   	push   ebx
c00150cb:	83 ec 70             	sub    esp,0x70
c00150ce:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00150d5:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00150d9:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c00150e1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00150e8:	83 c0 0e             	add    eax,0xe
c00150eb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00150ef:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00150f6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00150fa:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0015102:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015106:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001510a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001510e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015112:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015116:	89 c6                	mov    esi,eax
c0015118:	89 d7                	mov    edi,edx
c001511a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001511c:	89 c8                	mov    eax,ecx
c001511e:	89 fa                	mov    edx,edi
c0015120:	89 f3                	mov    ebx,esi
c0015122:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0015126:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001512a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001512e:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0015136:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001513d:	83 c0 08             	add    eax,0x8
c0015140:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0015144:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001514b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001514f:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c0015157:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001515b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001515f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015163:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0015167:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001516b:	89 c6                	mov    esi,eax
c001516d:	89 d7                	mov    edi,edx
c001516f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015171:	89 c8                	mov    eax,ecx
c0015173:	89 fa                	mov    edx,edi
c0015175:	89 f3                	mov    ebx,esi
c0015177:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001517b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001517f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0015183:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001518b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015192:	8d 50 01             	lea    edx,[eax+0x1]
c0015195:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001519c:	8a 00                	mov    al,BYTE PTR [eax]
c001519e:	0f b6 c0             	movzx  eax,al
c00151a1:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c00151a6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00151ad:	8d 50 01             	lea    edx,[eax+0x1]
c00151b0:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00151b7:	8a 00                	mov    al,BYTE PTR [eax]
c00151b9:	0f b6 c0             	movzx  eax,al
c00151bc:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c00151c1:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c00151c6:	c1 e0 08             	shl    eax,0x8
c00151c9:	89 c2                	mov    edx,eax
c00151cb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00151cf:	09 d0                	or     eax,edx
c00151d1:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00151d8:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c00151dc:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c00151e4:	75 46                	jne    c001522c <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c00151e6:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00151ed:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00151f0:	66 3d dc 05          	cmp    ax,0x5dc
c00151f4:	77 16                	ja     c001520c <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c00151f6:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00151fd:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015200:	0f b7 c0             	movzx  eax,ax
c0015203:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001520a:	eb 20                	jmp    c001522c <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001520c:	83 ec 0c             	sub    esp,0xc
c001520f:	68 30 5a 02 c0       	push   0xc0025a30
c0015214:	e8 e6 7a ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0015219:	83 c4 10             	add    esp,0x10
c001521c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015223:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0015227:	e9 18 01 00 00       	jmp    c0015344 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c001522c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015233:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001523a:	8b 12                	mov    edx,DWORD PTR [edx]
c001523c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015240:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0015247:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001524b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001524f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015253:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015257:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001525b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001525f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015263:	89 c6                	mov    esi,eax
c0015265:	89 d7                	mov    edi,edx
c0015267:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015269:	89 c8                	mov    eax,ecx
c001526b:	89 fa                	mov    edx,edi
c001526d:	89 f3                	mov    ebx,esi
c001526f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0015273:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015277:	89 04 24             	mov    DWORD PTR [esp],eax
c001527a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015281:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c0015288:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001528f:	8d 50 01             	lea    edx,[eax+0x1]
c0015292:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015299:	8a 00                	mov    al,BYTE PTR [eax]
c001529b:	0f b6 c0             	movzx  eax,al
c001529e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00152a2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00152a9:	8d 50 01             	lea    edx,[eax+0x1]
c00152ac:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00152b3:	8a 00                	mov    al,BYTE PTR [eax]
c00152b5:	0f b6 c0             	movzx  eax,al
c00152b8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00152bc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00152c3:	8d 50 01             	lea    edx,[eax+0x1]
c00152c6:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00152cd:	8a 00                	mov    al,BYTE PTR [eax]
c00152cf:	0f b6 c0             	movzx  eax,al
c00152d2:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c00152d6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00152dd:	8d 50 01             	lea    edx,[eax+0x1]
c00152e0:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00152e7:	8a 00                	mov    al,BYTE PTR [eax]
c00152e9:	0f b6 c0             	movzx  eax,al
c00152ec:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00152f0:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00152f4:	c1 e0 18             	shl    eax,0x18
c00152f7:	89 c2                	mov    edx,eax
c00152f9:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00152fd:	c1 e0 10             	shl    eax,0x10
c0015300:	09 c2                	or     edx,eax
c0015302:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0015306:	c1 e0 08             	shl    eax,0x8
c0015309:	09 d0                	or     eax,edx
c001530b:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001530f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0015313:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001531a:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001531e:	83 e8 04             	sub    eax,0x4
c0015321:	83 ec 08             	sub    esp,0x8
c0015324:	50                   	push   eax
c0015325:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015329:	e8 da fa ff ff       	call   c0014e08 <Net::crc32Calc(unsigned char*, int)>
c001532e:	83 c4 10             	add    esp,0x10
c0015331:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0015335:	0f 94 c2             	sete   dl
c0015338:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001533f:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0015342:	90                   	nop
c0015343:	90                   	nop
c0015344:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001534b:	83 c4 70             	add    esp,0x70
c001534e:	5b                   	pop    ebx
c001534f:	5e                   	pop    esi
c0015350:	5f                   	pop    edi
c0015351:	c2 04 00             	ret    0x4

c0015354 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015354:	55                   	push   ebp
c0015355:	57                   	push   edi
c0015356:	56                   	push   esi
c0015357:	53                   	push   ebx
c0015358:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001535e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015365:	8a 1e                	mov    bl,BYTE PTR [esi]
c0015367:	8d 6e 01             	lea    ebp,[esi+0x1]
c001536a:	80 fb 40             	cmp    bl,0x40
c001536d:	75 1b                	jne    c001538a <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001536f:	8a 16                	mov    dl,BYTE PTR [esi]
c0015371:	84 d2                	test   dl,dl
c0015373:	0f 84 f1 00 00 00    	je     c001546a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015379:	8d 46 01             	lea    eax,[esi+0x1]
c001537c:	80 fa 3a             	cmp    dl,0x3a
c001537f:	74 04                	je     c0015385 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0015381:	89 c6                	mov    esi,eax
c0015383:	eb ea                	jmp    c001536f <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0015385:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015388:	89 c6                	mov    esi,eax
c001538a:	50                   	push   eax
c001538b:	6a 40                	push   0x40
c001538d:	6a 00                	push   0x0
c001538f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015393:	50                   	push   eax
c0015394:	e8 eb b2 fe ff       	call   c0000684 <memset>
c0015399:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00153a0:	31 c0                	xor    eax,eax
c00153a2:	83 c4 10             	add    esp,0x10
c00153a5:	8a 0f                	mov    cl,BYTE PTR [edi]
c00153a7:	84 c9                	test   cl,cl
c00153a9:	0f 84 bb 00 00 00    	je     c001546a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00153af:	3d c7 00 00 00       	cmp    eax,0xc7
c00153b4:	0f 8f b0 00 00 00    	jg     c001546a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00153ba:	80 f9 0a             	cmp    cl,0xa
c00153bd:	0f 85 98 00 00 00    	jne    c001545b <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00153c3:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00153c8:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00153cc:	a8 df                	test   al,0xdf
c00153ce:	0f 94 c1             	sete   cl
c00153d1:	3c 23                	cmp    al,0x23
c00153d3:	0f 94 c2             	sete   dl
c00153d6:	08 d1                	or     cl,dl
c00153d8:	75 4a                	jne    c0015424 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00153da:	8d 50 f7             	lea    edx,[eax-0x9]
c00153dd:	80 fa 01             	cmp    dl,0x1
c00153e0:	76 42                	jbe    c0015424 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00153e2:	3c 5b                	cmp    al,0x5b
c00153e4:	75 42                	jne    c0015428 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00153e6:	80 fb 40             	cmp    bl,0x40
c00153e9:	75 39                	jne    c0015424 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00153eb:	83 ec 0c             	sub    esp,0xc
c00153ee:	8d 54 24 65          	lea    edx,[esp+0x65]
c00153f2:	52                   	push   edx
c00153f3:	e8 a8 b2 fe ff       	call   c00006a0 <strlen>
c00153f8:	83 c4 10             	add    esp,0x10
c00153fb:	83 f8 3f             	cmp    eax,0x3f
c00153fe:	77 6a                	ja     c001546a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015400:	50                   	push   eax
c0015401:	50                   	push   eax
c0015402:	8d 54 24 61          	lea    edx,[esp+0x61]
c0015406:	52                   	push   edx
c0015407:	8d 54 24 24          	lea    edx,[esp+0x24]
c001540b:	52                   	push   edx
c001540c:	e8 2f b3 fe ff       	call   c0000740 <strcpy>
c0015411:	58                   	pop    eax
c0015412:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015416:	52                   	push   edx
c0015417:	e8 84 b2 fe ff       	call   c00006a0 <strlen>
c001541c:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015421:	83 c4 10             	add    esp,0x10
c0015424:	31 d2                	xor    edx,edx
c0015426:	eb 3a                	jmp    c0015462 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0015428:	80 fb 40             	cmp    bl,0x40
c001542b:	74 06                	je     c0015433 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001542d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015431:	eb 20                	jmp    c0015453 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0015433:	50                   	push   eax
c0015434:	50                   	push   eax
c0015435:	55                   	push   ebp
c0015436:	8d 44 24 24          	lea    eax,[esp+0x24]
c001543a:	50                   	push   eax
c001543b:	e8 8c b3 fe ff       	call   c00007cc <strcmp>
c0015440:	83 c4 10             	add    esp,0x10
c0015443:	85 c0                	test   eax,eax
c0015445:	75 dd                	jne    c0015424 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015447:	eb e4                	jmp    c001542d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0015449:	8d 50 01             	lea    edx,[eax+0x1]
c001544c:	80 f9 3d             	cmp    cl,0x3d
c001544f:	74 1d                	je     c001546e <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0015451:	89 d0                	mov    eax,edx
c0015453:	8a 08                	mov    cl,BYTE PTR [eax]
c0015455:	84 c9                	test   cl,cl
c0015457:	75 f0                	jne    c0015449 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0015459:	eb 0f                	jmp    c001546a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001545b:	8d 50 01             	lea    edx,[eax+0x1]
c001545e:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0015462:	47                   	inc    edi
c0015463:	89 d0                	mov    eax,edx
c0015465:	e9 3b ff ff ff       	jmp    c00153a5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001546a:	31 c0                	xor    eax,eax
c001546c:	eb 33                	jmp    c00154a1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001546e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015472:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015475:	50                   	push   eax
c0015476:	50                   	push   eax
c0015477:	8d 44 24 60          	lea    eax,[esp+0x60]
c001547b:	50                   	push   eax
c001547c:	56                   	push   esi
c001547d:	e8 4a b3 fe ff       	call   c00007cc <strcmp>
c0015482:	83 c4 10             	add    esp,0x10
c0015485:	85 c0                	test   eax,eax
c0015487:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001548b:	75 97                	jne    c0015424 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001548d:	51                   	push   ecx
c001548e:	51                   	push   ecx
c001548f:	52                   	push   edx
c0015490:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015497:	e8 a4 b2 fe ff       	call   c0000740 <strcpy>
c001549c:	83 c4 10             	add    esp,0x10
c001549f:	b0 01                	mov    al,0x1
c00154a1:	81 c4 2c 01 00 00    	add    esp,0x12c
c00154a7:	5b                   	pop    ebx
c00154a8:	5e                   	pop    esi
c00154a9:	5f                   	pop    edi
c00154aa:	5d                   	pop    ebp
c00154ab:	c3                   	ret    

c00154ac <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00154ac:	57                   	push   edi
c00154ad:	56                   	push   esi
c00154ae:	53                   	push   ebx
c00154af:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00154b5:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00154bc:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00154c3:	53                   	push   ebx
c00154c4:	e8 d7 b1 fe ff       	call   c00006a0 <strlen>
c00154c9:	89 34 24             	mov    DWORD PTR [esp],esi
c00154cc:	89 c7                	mov    edi,eax
c00154ce:	e8 cd b1 fe ff       	call   c00006a0 <strlen>
c00154d3:	83 c4 10             	add    esp,0x10
c00154d6:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00154da:	3d ff 00 00 00       	cmp    eax,0xff
c00154df:	0f 87 d3 00 00 00    	ja     c00155b8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00154e5:	57                   	push   edi
c00154e6:	57                   	push   edi
c00154e7:	56                   	push   esi
c00154e8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00154ec:	56                   	push   esi
c00154ed:	e8 4e b2 fe ff       	call   c0000740 <strcpy>
c00154f2:	58                   	pop    eax
c00154f3:	5a                   	pop    edx
c00154f4:	68 d2 5d 02 c0       	push   0xc0025dd2
c00154f9:	56                   	push   esi
c00154fa:	e8 81 b3 fe ff       	call   c0000880 <strcat>
c00154ff:	59                   	pop    ecx
c0015500:	5f                   	pop    edi
c0015501:	53                   	push   ebx
c0015502:	56                   	push   esi
c0015503:	e8 78 b3 fe ff       	call   c0000880 <strcat>
c0015508:	58                   	pop    eax
c0015509:	5a                   	pop    edx
c001550a:	68 7c 5a 02 c0       	push   0xc0025a7c
c001550f:	56                   	push   esi
c0015510:	e8 6b b3 fe ff       	call   c0000880 <strcat>
c0015515:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001551c:	e8 ee 44 ff ff       	call   c0009a0f <malloc>
c0015521:	83 c4 0c             	add    esp,0xc
c0015524:	89 c3                	mov    ebx,eax
c0015526:	ff 35 f0 91 02 c0    	push   DWORD PTR ds:0xc00291f0
c001552c:	56                   	push   esi
c001552d:	50                   	push   eax
c001552e:	e8 37 7d ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0015533:	83 c4 10             	add    esp,0x10
c0015536:	85 db                	test   ebx,ebx
c0015538:	74 7e                	je     c00155b8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001553a:	51                   	push   ecx
c001553b:	51                   	push   ecx
c001553c:	6a 01                	push   0x1
c001553e:	53                   	push   ebx
c001553f:	e8 c8 7d ff ff       	call   c000d30c <File::open(FileOpenMode)>
c0015544:	83 c4 10             	add    esp,0x10
c0015547:	85 c0                	test   eax,eax
c0015549:	74 08                	je     c0015553 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001554b:	83 ec 0c             	sub    esp,0xc
c001554e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015550:	53                   	push   ebx
c0015551:	eb 5f                	jmp    c00155b2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015553:	52                   	push   edx
c0015554:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015558:	50                   	push   eax
c0015559:	8d 44 24 20          	lea    eax,[esp+0x20]
c001555d:	50                   	push   eax
c001555e:	53                   	push   ebx
c001555f:	e8 54 80 ff ff       	call   c000d5b8 <File::stat(unsigned long long*, bool*)>
c0015564:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015568:	83 c4 10             	add    esp,0x10
c001556b:	89 c1                	mov    ecx,eax
c001556d:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0015571:	74 31                	je     c00155a4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0015573:	83 ec 0c             	sub    esp,0xc
c0015576:	50                   	push   eax
c0015577:	e8 93 44 ff ff       	call   c0009a0f <malloc>
c001557c:	89 c6                	mov    esi,eax
c001557e:	58                   	pop    eax
c001557f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015581:	8d 54 24 20          	lea    edx,[esp+0x20]
c0015585:	52                   	push   edx
c0015586:	56                   	push   esi
c0015587:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001558b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001558f:	53                   	push   ebx
c0015590:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015593:	83 c4 20             	add    esp,0x20
c0015596:	85 c0                	test   eax,eax
c0015598:	75 0a                	jne    c00155a4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001559a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001559e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00155a2:	74 18                	je     c00155bc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00155a4:	83 ec 0c             	sub    esp,0xc
c00155a7:	53                   	push   ebx
c00155a8:	e8 bd 7d ff ff       	call   c000d36a <File::close()>
c00155ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c00155af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00155b2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00155b5:	83 c4 10             	add    esp,0x10
c00155b8:	31 c0                	xor    eax,eax
c00155ba:	eb 3b                	jmp    c00155f7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00155bc:	83 ec 0c             	sub    esp,0xc
c00155bf:	53                   	push   ebx
c00155c0:	e8 a5 7d ff ff       	call   c000d36a <File::close()>
c00155c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00155c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00155ca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00155cd:	83 c4 0c             	add    esp,0xc
c00155d0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00155d7:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00155de:	56                   	push   esi
c00155df:	e8 70 fd ff ff       	call   c0015354 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00155e4:	89 34 24             	mov    DWORD PTR [esp],esi
c00155e7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00155eb:	e8 2f 44 ff ff       	call   c0009a1f <free>
c00155f0:	83 c4 10             	add    esp,0x10
c00155f3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00155f7:	81 c4 20 01 00 00    	add    esp,0x120
c00155fd:	5b                   	pop    ebx
c00155fe:	5e                   	pop    esi
c00155ff:	5f                   	pop    edi
c0015600:	c3                   	ret    

c0015601 <Reg::getLine(char*, char*, char*)>:
c0015601:	57                   	push   edi
c0015602:	56                   	push   esi
c0015603:	53                   	push   ebx
c0015604:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015608:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001560c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015610:	57                   	push   edi
c0015611:	56                   	push   esi
c0015612:	53                   	push   ebx
c0015613:	68 81 5a 02 c0       	push   0xc0025a81
c0015618:	e8 8f fe ff ff       	call   c00154ac <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001561d:	83 c4 10             	add    esp,0x10
c0015620:	84 c0                	test   al,al
c0015622:	75 10                	jne    c0015634 <Reg::getLine(char*, char*, char*)+0x33>
c0015624:	57                   	push   edi
c0015625:	56                   	push   esi
c0015626:	53                   	push   ebx
c0015627:	68 a6 5a 02 c0       	push   0xc0025aa6
c001562c:	e8 7b fe ff ff       	call   c00154ac <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015631:	83 c4 10             	add    esp,0x10
c0015634:	5b                   	pop    ebx
c0015635:	5e                   	pop    esi
c0015636:	5f                   	pop    edi
c0015637:	c3                   	ret    

c0015638 <Reg::readInt(char*, char*, int*)>:
c0015638:	55                   	push   ebp
c0015639:	57                   	push   edi
c001563a:	56                   	push   esi
c001563b:	53                   	push   ebx
c001563c:	81 ec f0 00 00 00    	sub    esp,0xf0
c0015642:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0015646:	57                   	push   edi
c0015647:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001564e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015655:	e8 a7 ff ff ff       	call   c0015601 <Reg::getLine(char*, char*, char*)>
c001565a:	83 c4 10             	add    esp,0x10
c001565d:	84 c0                	test   al,al
c001565f:	0f 84 b3 00 00 00    	je     c0015718 <Reg::readInt(char*, char*, int*)+0xe0>
c0015665:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0015669:	80 fa 2b             	cmp    dl,0x2b
c001566c:	74 0c                	je     c001567a <Reg::readInt(char*, char*, int*)+0x42>
c001566e:	80 fa 2d             	cmp    dl,0x2d
c0015671:	75 0e                	jne    c0015681 <Reg::readInt(char*, char*, int*)+0x49>
c0015673:	ba 01 00 00 00       	mov    edx,0x1
c0015678:	eb 0b                	jmp    c0015685 <Reg::readInt(char*, char*, int*)+0x4d>
c001567a:	ba 01 00 00 00       	mov    edx,0x1
c001567f:	eb 02                	jmp    c0015683 <Reg::readInt(char*, char*, int*)+0x4b>
c0015681:	31 d2                	xor    edx,edx
c0015683:	31 c0                	xor    eax,eax
c0015685:	be 0a 00 00 00       	mov    esi,0xa
c001568a:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001568f:	75 20                	jne    c00156b1 <Reg::readInt(char*, char*, int*)+0x79>
c0015691:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0015695:	80 f9 78             	cmp    cl,0x78
c0015698:	75 0a                	jne    c00156a4 <Reg::readInt(char*, char*, int*)+0x6c>
c001569a:	83 c2 02             	add    edx,0x2
c001569d:	be 10 00 00 00       	mov    esi,0x10
c00156a2:	eb 0d                	jmp    c00156b1 <Reg::readInt(char*, char*, int*)+0x79>
c00156a4:	80 f9 62             	cmp    cl,0x62
c00156a7:	75 08                	jne    c00156b1 <Reg::readInt(char*, char*, int*)+0x79>
c00156a9:	83 c2 02             	add    edx,0x2
c00156ac:	be 02 00 00 00       	mov    esi,0x2
c00156b1:	01 d7                	add    edi,edx
c00156b3:	31 d2                	xor    edx,edx
c00156b5:	8a 1f                	mov    bl,BYTE PTR [edi]
c00156b7:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00156bb:	80 fb 0d             	cmp    bl,0xd
c00156be:	0f 94 c3             	sete   bl
c00156c1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00156c6:	0f 94 c1             	sete   cl
c00156c9:	08 cb                	or     bl,cl
c00156cb:	75 3a                	jne    c0015707 <Reg::readInt(char*, char*, int*)+0xcf>
c00156cd:	0f af d6             	imul   edx,esi
c00156d0:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00156d5:	83 fe 10             	cmp    esi,0x10
c00156d8:	75 26                	jne    c0015700 <Reg::readInt(char*, char*, int*)+0xc8>
c00156da:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00156de:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00156e1:	89 e9                	mov    ecx,ebp
c00156e3:	80 f9 05             	cmp    cl,0x5
c00156e6:	77 06                	ja     c00156ee <Reg::readInt(char*, char*, int*)+0xb6>
c00156e8:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00156ec:	eb 16                	jmp    c0015704 <Reg::readInt(char*, char*, int*)+0xcc>
c00156ee:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00156f2:	83 e9 61             	sub    ecx,0x61
c00156f5:	80 f9 05             	cmp    cl,0x5
c00156f8:	77 06                	ja     c0015700 <Reg::readInt(char*, char*, int*)+0xc8>
c00156fa:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00156fe:	eb 04                	jmp    c0015704 <Reg::readInt(char*, char*, int*)+0xcc>
c0015700:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0015704:	47                   	inc    edi
c0015705:	eb ae                	jmp    c00156b5 <Reg::readInt(char*, char*, int*)+0x7d>
c0015707:	84 c0                	test   al,al
c0015709:	74 02                	je     c001570d <Reg::readInt(char*, char*, int*)+0xd5>
c001570b:	f7 da                	neg    edx
c001570d:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0015714:	89 10                	mov    DWORD PTR [eax],edx
c0015716:	88 d8                	mov    al,bl
c0015718:	81 c4 ec 00 00 00    	add    esp,0xec
c001571e:	5b                   	pop    ebx
c001571f:	5e                   	pop    esi
c0015720:	5f                   	pop    edi
c0015721:	5d                   	pop    ebp
c0015722:	c3                   	ret    

c0015723 <Reg::readString(char*, char*, char*, int)>:
c0015723:	57                   	push   edi
c0015724:	56                   	push   esi
c0015725:	53                   	push   ebx
c0015726:	81 ec d4 00 00 00    	sub    esp,0xd4
c001572c:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0015733:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0015737:	57                   	push   edi
c0015738:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001573f:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015746:	e8 b6 fe ff ff       	call   c0015601 <Reg::getLine(char*, char*, char*)>
c001574b:	83 c4 10             	add    esp,0x10
c001574e:	89 c6                	mov    esi,eax
c0015750:	84 c0                	test   al,al
c0015752:	74 44                	je     c0015798 <Reg::readString(char*, char*, char*, int)+0x75>
c0015754:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001575b:	31 c0                	xor    eax,eax
c001575d:	4a                   	dec    edx
c001575e:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0015761:	84 c9                	test   cl,cl
c0015763:	74 0f                	je     c0015774 <Reg::readString(char*, char*, char*, int)+0x51>
c0015765:	39 c2                	cmp    edx,eax
c0015767:	7e 0b                	jle    c0015774 <Reg::readString(char*, char*, char*, int)+0x51>
c0015769:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001576c:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0015771:	40                   	inc    eax
c0015772:	eb ea                	jmp    c001575e <Reg::readString(char*, char*, char*, int)+0x3b>
c0015774:	83 ec 0c             	sub    esp,0xc
c0015777:	53                   	push   ebx
c0015778:	e8 23 af fe ff       	call   c00006a0 <strlen>
c001577d:	83 c4 10             	add    esp,0x10
c0015780:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0015785:	75 11                	jne    c0015798 <Reg::readString(char*, char*, char*, int)+0x75>
c0015787:	83 ec 0c             	sub    esp,0xc
c001578a:	53                   	push   ebx
c001578b:	e8 10 af fe ff       	call   c00006a0 <strlen>
c0015790:	83 c4 10             	add    esp,0x10
c0015793:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0015798:	81 c4 d0 00 00 00    	add    esp,0xd0
c001579e:	89 f0                	mov    eax,esi
c00157a0:	5b                   	pop    ebx
c00157a1:	5e                   	pop    esi
c00157a2:	5f                   	pop    edi
c00157a3:	c3                   	ret    

c00157a4 <Reg::readBool(char*, char*, bool*)>:
c00157a4:	83 ec 20             	sub    esp,0x20
c00157a7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00157ab:	50                   	push   eax
c00157ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00157b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00157b4:	e8 7f fe ff ff       	call   c0015638 <Reg::readInt(char*, char*, int*)>
c00157b9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00157be:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00157c2:	0f 95 02             	setne  BYTE PTR [edx]
c00157c5:	83 c4 2c             	add    esp,0x2c
c00157c8:	c3                   	ret    

c00157c9 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00157c9:	53                   	push   ebx
c00157ca:	83 ec 1c             	sub    esp,0x1c
c00157cd:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00157d1:	8d 44 24 13          	lea    eax,[esp+0x13]
c00157d5:	50                   	push   eax
c00157d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00157da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00157de:	e8 c1 ff ff ff       	call   c00157a4 <Reg::readBool(char*, char*, bool*)>
c00157e3:	83 c4 10             	add    esp,0x10
c00157e6:	84 c0                	test   al,al
c00157e8:	74 04                	je     c00157ee <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00157ea:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00157ee:	88 d8                	mov    al,bl
c00157f0:	83 c4 18             	add    esp,0x18
c00157f3:	5b                   	pop    ebx
c00157f4:	c3                   	ret    

c00157f5 <Reg::readIntWithDefault(char*, char*, int)>:
c00157f5:	53                   	push   ebx
c00157f6:	83 ec 1c             	sub    esp,0x1c
c00157f9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00157fd:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015801:	50                   	push   eax
c0015802:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015806:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001580a:	e8 29 fe ff ff       	call   c0015638 <Reg::readInt(char*, char*, int*)>
c001580f:	83 c4 10             	add    esp,0x10
c0015812:	84 c0                	test   al,al
c0015814:	74 04                	je     c001581a <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0015816:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001581a:	89 d8                	mov    eax,ebx
c001581c:	83 c4 18             	add    esp,0x18
c001581f:	5b                   	pop    ebx
c0015820:	c3                   	ret    

c0015821 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0015821:	57                   	push   edi
c0015822:	56                   	push   esi
c0015823:	56                   	push   esi
c0015824:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015828:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001582c:	56                   	push   esi
c001582d:	57                   	push   edi
c001582e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015836:	e8 e8 fe ff ff       	call   c0015723 <Reg::readString(char*, char*, char*, int)>
c001583b:	83 c4 10             	add    esp,0x10
c001583e:	84 c0                	test   al,al
c0015840:	75 1a                	jne    c001585c <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0015842:	51                   	push   ecx
c0015843:	56                   	push   esi
c0015844:	6a 00                	push   0x0
c0015846:	57                   	push   edi
c0015847:	e8 38 ae fe ff       	call   c0000684 <memset>
c001584c:	8d 4e ff             	lea    ecx,[esi-0x1]
c001584f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015853:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015855:	83 c4 10             	add    esp,0x10
c0015858:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001585c:	89 f8                	mov    eax,edi
c001585e:	5a                   	pop    edx
c001585f:	5e                   	pop    esi
c0015860:	5f                   	pop    edi
c0015861:	c3                   	ret    

c0015862 <Sys::eject(regs*)>:
c0015862:	83 ec 0c             	sub    esp,0xc
c0015865:	83 ca ff             	or     edx,0xffffffff
c0015868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001586c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001586f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015874:	83 e9 41             	sub    ecx,0x41
c0015877:	83 f9 19             	cmp    ecx,0x19
c001587a:	77 18                	ja     c0015894 <Sys::eject(regs*)+0x32>
c001587c:	8b 0c 8d 60 82 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7da0]
c0015883:	85 c9                	test   ecx,ecx
c0015885:	74 0d                	je     c0015894 <Sys::eject(regs*)+0x32>
c0015887:	83 ec 0c             	sub    esp,0xc
c001588a:	51                   	push   ecx
c001588b:	e8 66 ab ff ff       	call   c00103f6 <LogicalDisk::eject()>
c0015890:	83 c4 10             	add    esp,0x10
c0015893:	99                   	cdq    
c0015894:	83 c4 0c             	add    esp,0xc
c0015897:	c3                   	ret    

c0015898 <Sys::exit(regs*)>:
c0015898:	83 ec 18             	sub    esp,0x18
c001589b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001589f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00158a2:	e8 59 36 00 00       	call   c0018f00 <terminateTask(int)>
c00158a7:	83 c8 ff             	or     eax,0xffffffff
c00158aa:	83 c4 1c             	add    esp,0x1c
c00158ad:	89 c2                	mov    edx,eax
c00158af:	c3                   	ret    

c00158b0 <Sys::getCwd(regs*)>:
c00158b0:	83 ec 10             	sub    esp,0x10
c00158b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00158b7:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00158ba:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00158bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158c2:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00158c5:	e8 a2 77 ff ff       	call   c000d06c <Fs::getcwd(Process*, char*, int)>
c00158ca:	83 c4 1c             	add    esp,0x1c
c00158cd:	99                   	cdq    
c00158ce:	c3                   	ret    

c00158cf <Sys::getPID(regs*)>:
c00158cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158d4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00158d9:	99                   	cdq    
c00158da:	c3                   	ret    

c00158db <Sys::getRAMData(regs*)>:
c00158db:	8b 0d d8 7c 02 c0    	mov    ecx,DWORD PTR ds:0xc0027cd8
c00158e1:	69 05 d4 7c 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0027cd4,0xc8
c00158eb:	99                   	cdq    
c00158ec:	f7 f9                	idiv   ecx
c00158ee:	c1 e0 18             	shl    eax,0x18
c00158f1:	09 c8                	or     eax,ecx
c00158f3:	99                   	cdq    
c00158f4:	c3                   	ret    

c00158f5 <Sys::getVGAPtr(regs*)>:
c00158f5:	55                   	push   ebp
c00158f6:	57                   	push   edi
c00158f7:	56                   	push   esi
c00158f8:	53                   	push   ebx
c00158f9:	83 ec 18             	sub    esp,0x18
c00158fc:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0015900:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0015903:	e8 fc 30 00 00       	call   c0018a04 <Thr::processFromPID(int)>
c0015908:	83 c4 10             	add    esp,0x10
c001590b:	89 c1                	mov    ecx,eax
c001590d:	b8 01 00 00 00       	mov    eax,0x1
c0015912:	85 c9                	test   ecx,ecx
c0015914:	74 59                	je     c001596f <Sys::getVGAPtr(regs*)+0x7a>
c0015916:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c001591c:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0015920:	74 0c                	je     c001592e <Sys::getVGAPtr(regs*)+0x39>
c0015922:	83 ec 0c             	sub    esp,0xc
c0015925:	53                   	push   ebx
c0015926:	e8 de 51 ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c001592b:	83 c4 10             	add    esp,0x10
c001592e:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0015931:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0015934:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0015939:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001593b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001593e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015941:	81 c3 82 00 00 00    	add    ebx,0x82
c0015947:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001594d:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015950:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c0015953:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0015959:	50                   	push   eax
c001595a:	50                   	push   eax
c001595b:	53                   	push   ebx
c001595c:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001595f:	05 a8 0f 00 00       	add    eax,0xfa8
c0015964:	50                   	push   eax
c0015965:	e8 d6 ad fe ff       	call   c0000740 <strcpy>
c001596a:	83 c4 10             	add    esp,0x10
c001596d:	31 c0                	xor    eax,eax
c001596f:	83 c4 0c             	add    esp,0xc
c0015972:	31 d2                	xor    edx,edx
c0015974:	5b                   	pop    ebx
c0015975:	5e                   	pop    esi
c0015976:	5f                   	pop    edi
c0015977:	5d                   	pop    ebp
c0015978:	c3                   	ret    

c0015979 <Sys::loadDLL(regs*)>:
c0015979:	56                   	push   esi
c001597a:	53                   	push   ebx
c001597b:	31 d2                	xor    edx,edx
c001597d:	51                   	push   ecx
c001597e:	b8 01 00 00 00       	mov    eax,0x1
c0015983:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015987:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001598b:	0f 84 8c 00 00 00    	je     c0015a1d <Sys::loadDLL(regs*)+0xa4>
c0015991:	83 ec 0c             	sub    esp,0xc
c0015994:	68 14 01 00 00       	push   0x114
c0015999:	e8 71 40 ff ff       	call   c0009a0f <malloc>
c001599e:	83 c4 0c             	add    esp,0xc
c00159a1:	89 c3                	mov    ebx,eax
c00159a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159a8:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00159ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00159ae:	53                   	push   ebx
c00159af:	e8 b6 78 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c00159b4:	83 c4 10             	add    esp,0x10
c00159b7:	31 d2                	xor    edx,edx
c00159b9:	b8 02 00 00 00       	mov    eax,0x2
c00159be:	85 db                	test   ebx,ebx
c00159c0:	74 5b                	je     c0015a1d <Sys::loadDLL(regs*)+0xa4>
c00159c2:	83 ec 0c             	sub    esp,0xc
c00159c5:	53                   	push   ebx
c00159c6:	e8 af 7b ff ff       	call   c000d57a <File::exists()>
c00159cb:	83 c4 10             	add    esp,0x10
c00159ce:	84 c0                	test   al,al
c00159d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00159d2:	75 11                	jne    c00159e5 <Sys::loadDLL(regs*)+0x6c>
c00159d4:	83 ec 0c             	sub    esp,0xc
c00159d7:	53                   	push   ebx
c00159d8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00159db:	83 c4 10             	add    esp,0x10
c00159de:	b8 03 00 00 00       	mov    eax,0x3
c00159e3:	eb 36                	jmp    c0015a1b <Sys::loadDLL(regs*)+0xa2>
c00159e5:	83 ec 0c             	sub    esp,0xc
c00159e8:	53                   	push   ebx
c00159e9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00159ec:	58                   	pop    eax
c00159ed:	5a                   	pop    edx
c00159ee:	6a 00                	push   0x0
c00159f0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00159f3:	e8 0a 22 00 00       	call   c0017c02 <Thr::loadDLL(char const*, bool)>
c00159f8:	83 c4 10             	add    esp,0x10
c00159fb:	89 c1                	mov    ecx,eax
c00159fd:	31 d2                	xor    edx,edx
c00159ff:	b8 04 00 00 00       	mov    eax,0x4
c0015a04:	85 c9                	test   ecx,ecx
c0015a06:	74 15                	je     c0015a1d <Sys::loadDLL(regs*)+0xa4>
c0015a08:	53                   	push   ebx
c0015a09:	53                   	push   ebx
c0015a0a:	ff 35 a8 7c 02 c0    	push   DWORD PTR ds:0xc0027ca8
c0015a10:	51                   	push   ecx
c0015a11:	e8 1d 24 00 00       	call   c0017e33 <Thr::executeDLL(unsigned long, void*)>
c0015a16:	83 c4 10             	add    esp,0x10
c0015a19:	31 c0                	xor    eax,eax
c0015a1b:	31 d2                	xor    edx,edx
c0015a1d:	59                   	pop    ecx
c0015a1e:	5b                   	pop    ebx
c0015a1f:	5e                   	pop    esi
c0015a20:	c3                   	ret    

c0015a21 <Sys::read(regs*)>:
c0015a21:	57                   	push   edi
c0015a22:	56                   	push   esi
c0015a23:	53                   	push   ebx
c0015a24:	83 ec 10             	sub    esp,0x10
c0015a27:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015a2b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015a2e:	83 f8 02             	cmp    eax,0x2
c0015a31:	77 10                	ja     c0015a43 <Sys::read(regs*)+0x22>
c0015a33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a38:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015a3b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015a41:	eb 0e                	jmp    c0015a51 <Sys::read(regs*)+0x30>
c0015a43:	83 ec 0c             	sub    esp,0xc
c0015a46:	50                   	push   eax
c0015a47:	e8 37 5e ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c0015a4c:	83 c4 10             	add    esp,0x10
c0015a4f:	89 c1                	mov    ecx,eax
c0015a51:	83 c8 ff             	or     eax,0xffffffff
c0015a54:	85 c9                	test   ecx,ecx
c0015a56:	89 c2                	mov    edx,eax
c0015a58:	74 28                	je     c0015a82 <Sys::read(regs*)+0x61>
c0015a5a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015a62:	31 ff                	xor    edi,edi
c0015a64:	83 ec 0c             	sub    esp,0xc
c0015a67:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015a69:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015a6d:	52                   	push   edx
c0015a6e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015a71:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015a74:	57                   	push   edi
c0015a75:	56                   	push   esi
c0015a76:	51                   	push   ecx
c0015a77:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015a7a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015a7e:	83 c4 20             	add    esp,0x20
c0015a81:	99                   	cdq    
c0015a82:	83 c4 10             	add    esp,0x10
c0015a85:	5b                   	pop    ebx
c0015a86:	5e                   	pop    esi
c0015a87:	5f                   	pop    edi
c0015a88:	c3                   	ret    

c0015a89 <Sys::sbrk(regs*)>:
c0015a89:	56                   	push   esi
c0015a8a:	53                   	push   ebx
c0015a8b:	50                   	push   eax
c0015a8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a91:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015a95:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015a98:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0015a9b:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0015aa1:	85 db                	test   ebx,ebx
c0015aa3:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0015aa6:	74 02                	je     c0015aaa <Sys::sbrk(regs*)+0x21>
c0015aa8:	79 06                	jns    c0015ab0 <Sys::sbrk(regs*)+0x27>
c0015aaa:	89 f0                	mov    eax,esi
c0015aac:	31 d2                	xor    edx,edx
c0015aae:	eb 2a                	jmp    c0015ada <Sys::sbrk(regs*)+0x51>
c0015ab0:	83 c8 ff             	or     eax,0xffffffff
c0015ab3:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0015ab9:	89 c2                	mov    edx,eax
c0015abb:	77 1d                	ja     c0015ada <Sys::sbrk(regs*)+0x51>
c0015abd:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0015ac3:	50                   	push   eax
c0015ac4:	c1 ea 0c             	shr    edx,0xc
c0015ac7:	68 07 0c 00 00       	push   0xc07
c0015acc:	52                   	push   edx
c0015acd:	51                   	push   ecx
c0015ace:	e8 af 66 ff ff       	call   c000c182 <VAS::allocatePages(int, int)>
c0015ad3:	89 f0                	mov    eax,esi
c0015ad5:	31 d2                	xor    edx,edx
c0015ad7:	83 c4 10             	add    esp,0x10
c0015ada:	59                   	pop    ecx
c0015adb:	5b                   	pop    ebx
c0015adc:	5e                   	pop    esi
c0015add:	c3                   	ret    

c0015ade <Sys::setCwd(regs*)>:
c0015ade:	83 ec 14             	sub    esp,0x14
c0015ae1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015ae5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015ae8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015aed:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015af0:	e8 24 7b ff ff       	call   c000d619 <Fs::setcwd(Process*, char*)>
c0015af5:	83 c4 1c             	add    esp,0x1c
c0015af8:	99                   	cdq    
c0015af9:	c3                   	ret    

c0015afa <Sys::setTime(regs*)>:
c0015afa:	55                   	push   ebp
c0015afb:	31 c9                	xor    ecx,ecx
c0015afd:	57                   	push   edi
c0015afe:	bd 0c 00 00 00       	mov    ebp,0xc
c0015b03:	56                   	push   esi
c0015b04:	53                   	push   ebx
c0015b05:	31 db                	xor    ebx,ebx
c0015b07:	83 ec 10             	sub    esp,0x10
c0015b0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015b0e:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0015b11:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0015b14:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0015b17:	89 c2                	mov    edx,eax
c0015b19:	66 81 ef 6c 07       	sub    di,0x76c
c0015b1e:	83 e2 1f             	and    edx,0x1f
c0015b21:	c1 e7 10             	shl    edi,0x10
c0015b24:	42                   	inc    edx
c0015b25:	c1 e8 05             	shr    eax,0x5
c0015b28:	88 d1                	mov    cl,dl
c0015b2a:	31 d2                	xor    edx,edx
c0015b2c:	f7 f5                	div    ebp
c0015b2e:	89 dd                	mov    ebp,ebx
c0015b30:	88 d5                	mov    ch,dl
c0015b32:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0015b38:	0f b7 c1             	movzx  eax,cx
c0015b3b:	31 d2                	xor    edx,edx
c0015b3d:	09 f8                	or     eax,edi
c0015b3f:	bf 3c 00 00 00       	mov    edi,0x3c
c0015b44:	89 c1                	mov    ecx,eax
c0015b46:	89 f0                	mov    eax,esi
c0015b48:	f7 f7                	div    edi
c0015b4a:	c1 e2 10             	shl    edx,0x10
c0015b4d:	09 d5                	or     ebp,edx
c0015b4f:	31 d2                	xor    edx,edx
c0015b51:	89 eb                	mov    ebx,ebp
c0015b53:	f7 f7                	div    edi
c0015b55:	bf 10 0e 00 00       	mov    edi,0xe10
c0015b5a:	88 d7                	mov    bh,dl
c0015b5c:	89 f0                	mov    eax,esi
c0015b5e:	31 d2                	xor    edx,edx
c0015b60:	f7 f7                	div    edi
c0015b62:	bf 18 00 00 00       	mov    edi,0x18
c0015b67:	31 d2                	xor    edx,edx
c0015b69:	f7 f7                	div    edi
c0015b6b:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0015b70:	88 d3                	mov    bl,dl
c0015b72:	53                   	push   ebx
c0015b73:	51                   	push   ecx
c0015b74:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0015b7a:	e8 e7 82 ff ff       	call   c000de66 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0015b7f:	83 c4 1c             	add    esp,0x1c
c0015b82:	83 f0 01             	xor    eax,0x1
c0015b85:	5b                   	pop    ebx
c0015b86:	0f b6 c0             	movzx  eax,al
c0015b89:	5e                   	pop    esi
c0015b8a:	31 d2                	xor    edx,edx
c0015b8c:	5f                   	pop    edi
c0015b8d:	5d                   	pop    ebp
c0015b8e:	c3                   	ret    

c0015b8f <Sys::timezone(regs*)>:
c0015b8f:	53                   	push   ebx
c0015b90:	83 ec 08             	sub    esp,0x8
c0015b93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015b97:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0015b9b:	75 17                	jne    c0015bb4 <Sys::timezone(regs*)+0x25>
c0015b9d:	83 ec 0c             	sub    esp,0xc
c0015ba0:	68 c1 5a 02 c0       	push   0xc0025ac1
c0015ba5:	e8 55 71 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0015baa:	83 c8 ff             	or     eax,0xffffffff
c0015bad:	83 c4 10             	add    esp,0x10
c0015bb0:	89 c2                	mov    edx,eax
c0015bb2:	eb 20                	jmp    c0015bd4 <Sys::timezone(regs*)+0x45>
c0015bb4:	83 ec 0c             	sub    esp,0xc
c0015bb7:	68 d6 5a 02 c0       	push   0xc0025ad6
c0015bbc:	e8 3e 71 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0015bc1:	58                   	pop    eax
c0015bc2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015bc5:	e8 fe 7f ff ff       	call   c000dbc8 <User::loadClockSettings(int)>
c0015bca:	83 c4 10             	add    esp,0x10
c0015bcd:	b8 01 00 00 00       	mov    eax,0x1
c0015bd2:	31 d2                	xor    edx,edx
c0015bd4:	83 c4 08             	add    esp,0x8
c0015bd7:	5b                   	pop    ebx
c0015bd8:	c3                   	ret    

c0015bd9 <Sys::write(regs*)>:
c0015bd9:	57                   	push   edi
c0015bda:	56                   	push   esi
c0015bdb:	53                   	push   ebx
c0015bdc:	83 ec 10             	sub    esp,0x10
c0015bdf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015be3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015be6:	83 f8 02             	cmp    eax,0x2
c0015be9:	77 10                	ja     c0015bfb <Sys::write(regs*)+0x22>
c0015beb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015bf0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015bf3:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015bf9:	eb 0e                	jmp    c0015c09 <Sys::write(regs*)+0x30>
c0015bfb:	83 ec 0c             	sub    esp,0xc
c0015bfe:	50                   	push   eax
c0015bff:	e8 7f 5c ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c0015c04:	83 c4 10             	add    esp,0x10
c0015c07:	89 c1                	mov    ecx,eax
c0015c09:	83 c8 ff             	or     eax,0xffffffff
c0015c0c:	85 c9                	test   ecx,ecx
c0015c0e:	89 c2                	mov    edx,eax
c0015c10:	74 28                	je     c0015c3a <Sys::write(regs*)+0x61>
c0015c12:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015c1a:	31 ff                	xor    edi,edi
c0015c1c:	83 ec 0c             	sub    esp,0xc
c0015c1f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015c21:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015c25:	52                   	push   edx
c0015c26:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015c29:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015c2c:	57                   	push   edi
c0015c2d:	56                   	push   esi
c0015c2e:	51                   	push   ecx
c0015c2f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015c32:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015c36:	83 c4 20             	add    esp,0x20
c0015c39:	99                   	cdq    
c0015c3a:	83 c4 10             	add    esp,0x10
c0015c3d:	5b                   	pop    ebx
c0015c3e:	5e                   	pop    esi
c0015c3f:	5f                   	pop    edi
c0015c40:	c3                   	ret    

c0015c41 <Sys::wsbe(regs*)>:
c0015c41:	57                   	push   edi
c0015c42:	b9 0b 00 00 00       	mov    ecx,0xb
c0015c47:	56                   	push   esi
c0015c48:	be 15 5b 02 c0       	mov    esi,0xc0025b15
c0015c4d:	53                   	push   ebx
c0015c4e:	83 ec 30             	sub    esp,0x30
c0015c51:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0015c55:	fc                   	cld    
c0015c56:	83 ec 0c             	sub    esp,0xc
c0015c59:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015c5b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0015c5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c64:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015c67:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0015c6d:	8b 06                	mov    eax,DWORD PTR [esi]
c0015c6f:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0015c72:	57                   	push   edi
c0015c73:	e8 28 aa fe ff       	call   c00006a0 <strlen>
c0015c78:	5a                   	pop    edx
c0015c79:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015c7d:	52                   	push   edx
c0015c7e:	31 d2                	xor    edx,edx
c0015c80:	57                   	push   edi
c0015c81:	52                   	push   edx
c0015c82:	50                   	push   eax
c0015c83:	56                   	push   esi
c0015c84:	ff d3                	call   ebx
c0015c86:	83 c4 14             	add    esp,0x14
c0015c89:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015c8d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015c90:	e8 6b 32 00 00       	call   c0018f00 <terminateTask(int)>
c0015c95:	83 c4 40             	add    esp,0x40
c0015c98:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015c9d:	5b                   	pop    ebx
c0015c9e:	31 d2                	xor    edx,edx
c0015ca0:	5e                   	pop    esi
c0015ca1:	5f                   	pop    edi
c0015ca2:	c3                   	ret    

c0015ca3 <Sys::yield(regs*)>:
c0015ca3:	83 ec 0c             	sub    esp,0xc
c0015ca6:	fa                   	cli    
c0015ca7:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0015cad:	e8 36 29 00 00       	call   c00185e8 <schedule()>
c0015cb2:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0015cb7:	48                   	dec    eax
c0015cb8:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0015cbd:	75 01                	jne    c0015cc0 <Sys::yield(regs*)+0x1d>
c0015cbf:	fb                   	sti    
c0015cc0:	8b 15 cc 82 02 c0    	mov    edx,DWORD PTR ds:0xc00282cc
c0015cc6:	83 c4 0c             	add    esp,0xc
c0015cc9:	89 d0                	mov    eax,edx
c0015ccb:	c1 ea 11             	shr    edx,0x11
c0015cce:	c1 e0 07             	shl    eax,0x7
c0015cd1:	25 80 30 0f 00       	and    eax,0xf3080
c0015cd6:	31 d0                	xor    eax,edx
c0015cd8:	31 d2                	xor    edx,edx
c0015cda:	c3                   	ret    

c0015cdb <sysCallSeekDir(regs*)>:
c0015cdb:	31 c0                	xor    eax,eax
c0015cdd:	31 d2                	xor    edx,edx
c0015cdf:	c3                   	ret    

c0015ce0 <sysCallTellDir(regs*)>:
c0015ce0:	31 c0                	xor    eax,eax
c0015ce2:	31 d2                	xor    edx,edx
c0015ce4:	c3                   	ret    

c0015ce5 <sysCallVerify(regs*)>:
c0015ce5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ce9:	31 d2                	xor    edx,edx
c0015ceb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015cee:	c3                   	ret    

c0015cef <sysCallGetArgc(regs*)>:
c0015cef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cf4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015cf7:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0015cfd:	99                   	cdq    
c0015cfe:	c3                   	ret    

c0015cff <sysFormatDisk(regs*)>:
c0015cff:	56                   	push   esi
c0015d00:	53                   	push   ebx
c0015d01:	53                   	push   ebx
c0015d02:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d06:	8b 1d d4 7d 02 c0    	mov    ebx,DWORD PTR ds:0xc0027dd4
c0015d0c:	eb 25                	jmp    c0015d33 <sysFormatDisk(regs*)+0x34>
c0015d0e:	83 ec 0c             	sub    esp,0xc
c0015d11:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015d14:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015d16:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015d19:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015d1c:	50                   	push   eax
c0015d1d:	ff 34 85 60 82 02 c0 	push   DWORD PTR [eax*4-0x3ffd7da0]
c0015d24:	53                   	push   ebx
c0015d25:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0015d28:	83 c4 20             	add    esp,0x20
c0015d2b:	83 f8 08             	cmp    eax,0x8
c0015d2e:	75 12                	jne    c0015d42 <sysFormatDisk(regs*)+0x43>
c0015d30:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015d33:	85 db                	test   ebx,ebx
c0015d35:	75 d7                	jne    c0015d0e <sysFormatDisk(regs*)+0xf>
c0015d37:	59                   	pop    ecx
c0015d38:	b8 03 00 00 00       	mov    eax,0x3
c0015d3d:	31 d2                	xor    edx,edx
c0015d3f:	5b                   	pop    ebx
c0015d40:	5e                   	pop    esi
c0015d41:	c3                   	ret    
c0015d42:	85 c0                	test   eax,eax
c0015d44:	74 1b                	je     c0015d61 <sysFormatDisk(regs*)+0x62>
c0015d46:	83 f8 09             	cmp    eax,0x9
c0015d49:	74 0b                	je     c0015d56 <sysFormatDisk(regs*)+0x57>
c0015d4b:	59                   	pop    ecx
c0015d4c:	b8 02 00 00 00       	mov    eax,0x2
c0015d51:	31 d2                	xor    edx,edx
c0015d53:	5b                   	pop    ebx
c0015d54:	5e                   	pop    esi
c0015d55:	c3                   	ret    
c0015d56:	59                   	pop    ecx
c0015d57:	b8 01 00 00 00       	mov    eax,0x1
c0015d5c:	31 d2                	xor    edx,edx
c0015d5e:	5b                   	pop    ebx
c0015d5f:	5e                   	pop    esi
c0015d60:	c3                   	ret    
c0015d61:	59                   	pop    ecx
c0015d62:	31 c0                	xor    eax,eax
c0015d64:	31 d2                	xor    edx,edx
c0015d66:	5b                   	pop    ebx
c0015d67:	5e                   	pop    esi
c0015d68:	c3                   	ret    

c0015d69 <sysSetDiskVolumeLabel(regs*)>:
c0015d69:	56                   	push   esi
c0015d6a:	53                   	push   ebx
c0015d6b:	53                   	push   ebx
c0015d6c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d70:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015d73:	83 f8 19             	cmp    eax,0x19
c0015d76:	77 2d                	ja     c0015da5 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015d78:	8b 0c 85 60 82 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7da0]
c0015d7f:	85 c9                	test   ecx,ecx
c0015d81:	74 22                	je     c0015da5 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015d83:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0015d86:	85 db                	test   ebx,ebx
c0015d88:	74 1b                	je     c0015da5 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015d8a:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0015d90:	85 d2                	test   edx,edx
c0015d92:	74 11                	je     c0015da5 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015d94:	8b 32                	mov    esi,DWORD PTR [edx]
c0015d96:	53                   	push   ebx
c0015d97:	50                   	push   eax
c0015d98:	51                   	push   ecx
c0015d99:	52                   	push   edx
c0015d9a:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0015d9d:	83 c4 10             	add    esp,0x10
c0015da0:	99                   	cdq    
c0015da1:	59                   	pop    ecx
c0015da2:	5b                   	pop    ebx
c0015da3:	5e                   	pop    esi
c0015da4:	c3                   	ret    
c0015da5:	59                   	pop    ecx
c0015da6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015dab:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015db0:	5b                   	pop    ebx
c0015db1:	5e                   	pop    esi
c0015db2:	c3                   	ret    

c0015db3 <sysGetDiskVolumeLabel(regs*)>:
c0015db3:	57                   	push   edi
c0015db4:	56                   	push   esi
c0015db5:	53                   	push   ebx
c0015db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dba:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015dbd:	83 fa 19             	cmp    edx,0x19
c0015dc0:	77 38                	ja     c0015dfa <sysGetDiskVolumeLabel(regs*)+0x47>
c0015dc2:	8b 0c 95 60 82 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7da0]
c0015dc9:	85 c9                	test   ecx,ecx
c0015dcb:	74 2d                	je     c0015dfa <sysGetDiskVolumeLabel(regs*)+0x47>
c0015dcd:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0015dd0:	85 db                	test   ebx,ebx
c0015dd2:	74 26                	je     c0015dfa <sysGetDiskVolumeLabel(regs*)+0x47>
c0015dd4:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0015dd7:	85 f6                	test   esi,esi
c0015dd9:	74 1f                	je     c0015dfa <sysGetDiskVolumeLabel(regs*)+0x47>
c0015ddb:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0015de1:	85 c0                	test   eax,eax
c0015de3:	74 15                	je     c0015dfa <sysGetDiskVolumeLabel(regs*)+0x47>
c0015de5:	83 ec 0c             	sub    esp,0xc
c0015de8:	8b 38                	mov    edi,DWORD PTR [eax]
c0015dea:	56                   	push   esi
c0015deb:	53                   	push   ebx
c0015dec:	52                   	push   edx
c0015ded:	51                   	push   ecx
c0015dee:	50                   	push   eax
c0015def:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0015df2:	83 c4 20             	add    esp,0x20
c0015df5:	99                   	cdq    
c0015df6:	5b                   	pop    ebx
c0015df7:	5e                   	pop    esi
c0015df8:	5f                   	pop    edi
c0015df9:	c3                   	ret    
c0015dfa:	5b                   	pop    ebx
c0015dfb:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015e00:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015e05:	5e                   	pop    esi
c0015e06:	5f                   	pop    edi
c0015e07:	c3                   	ret    

c0015e08 <sysShutdown(regs*)>:
c0015e08:	83 ec 0c             	sub    esp,0xc
c0015e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e0f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e12:	85 c0                	test   eax,eax
c0015e14:	74 18                	je     c0015e2e <sysShutdown(regs*)+0x26>
c0015e16:	83 f8 01             	cmp    eax,0x1
c0015e19:	74 38                	je     c0015e53 <sysShutdown(regs*)+0x4b>
c0015e1b:	83 f8 02             	cmp    eax,0x2
c0015e1e:	74 24                	je     c0015e44 <sysShutdown(regs*)+0x3c>
c0015e20:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015e25:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015e2a:	83 c4 0c             	add    esp,0xc
c0015e2d:	c3                   	ret    
c0015e2e:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0015e33:	8b 10                	mov    edx,DWORD PTR [eax]
c0015e35:	6a 00                	push   0x0
c0015e37:	6a 00                	push   0x0
c0015e39:	6a 00                	push   0x0
c0015e3b:	50                   	push   eax
c0015e3c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015e3f:	83 c4 10             	add    esp,0x10
c0015e42:	eb dc                	jmp    c0015e20 <sysShutdown(regs*)+0x18>
c0015e44:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0015e49:	8b 10                	mov    edx,DWORD PTR [eax]
c0015e4b:	6a 00                	push   0x0
c0015e4d:	6a 00                	push   0x0
c0015e4f:	6a 01                	push   0x1
c0015e51:	eb e8                	jmp    c0015e3b <sysShutdown(regs*)+0x33>
c0015e53:	a1 e0 82 02 c0       	mov    eax,ds:0xc00282e0
c0015e58:	85 c0                	test   eax,eax
c0015e5a:	74 02                	je     c0015e5e <sysShutdown(regs*)+0x56>
c0015e5c:	ff d0                	call   eax
c0015e5e:	31 c0                	xor    eax,eax
c0015e60:	31 d2                	xor    edx,edx
c0015e62:	83 c4 0c             	add    esp,0xc
c0015e65:	c3                   	ret    

c0015e66 <sysCallRealpath(regs*)>:
c0015e66:	83 ec 0c             	sub    esp,0xc
c0015e69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e6d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015e70:	85 d2                	test   edx,edx
c0015e72:	74 07                	je     c0015e7b <sysCallRealpath(regs*)+0x15>
c0015e74:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015e77:	85 c0                	test   eax,eax
c0015e79:	75 0b                	jne    c0015e86 <sysCallRealpath(regs*)+0x20>
c0015e7b:	b8 01 00 00 00       	mov    eax,0x1
c0015e80:	31 d2                	xor    edx,edx
c0015e82:	83 c4 0c             	add    esp,0xc
c0015e85:	c3                   	ret    
c0015e86:	51                   	push   ecx
c0015e87:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015e8d:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0015e90:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0015e96:	51                   	push   ecx
c0015e97:	52                   	push   edx
c0015e98:	50                   	push   eax
c0015e99:	e8 22 72 ff ff       	call   c000d0c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0015e9e:	83 c4 10             	add    esp,0x10
c0015ea1:	31 c0                	xor    eax,eax
c0015ea3:	31 d2                	xor    edx,edx
c0015ea5:	83 c4 0c             	add    esp,0xc
c0015ea8:	c3                   	ret    

c0015ea9 <sysCallReadDir(regs*)>:
c0015ea9:	53                   	push   ebx
c0015eaa:	83 ec 18             	sub    esp,0x18
c0015ead:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015eb1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015eb4:	83 f8 02             	cmp    eax,0x2
c0015eb7:	76 60                	jbe    c0015f19 <sysCallReadDir(regs*)+0x70>
c0015eb9:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0015ec0:	77 48                	ja     c0015f0a <sysCallReadDir(regs*)+0x61>
c0015ec2:	83 ec 0c             	sub    esp,0xc
c0015ec5:	50                   	push   eax
c0015ec6:	e8 b8 59 ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c0015ecb:	83 c4 10             	add    esp,0x10
c0015ece:	85 c0                	test   eax,eax
c0015ed0:	74 38                	je     c0015f0a <sysCallReadDir(regs*)+0x61>
c0015ed2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015eda:	83 ec 0c             	sub    esp,0xc
c0015edd:	8b 10                	mov    edx,DWORD PTR [eax]
c0015edf:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0015ee3:	51                   	push   ecx
c0015ee4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015ee7:	6a 00                	push   0x0
c0015ee9:	68 10 01 00 00       	push   0x110
c0015eee:	50                   	push   eax
c0015eef:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015ef2:	83 c4 20             	add    esp,0x20
c0015ef5:	85 c0                	test   eax,eax
c0015ef7:	74 29                	je     c0015f22 <sysCallReadDir(regs*)+0x79>
c0015ef9:	83 f8 07             	cmp    eax,0x7
c0015efc:	74 1b                	je     c0015f19 <sysCallReadDir(regs*)+0x70>
c0015efe:	b8 02 00 00 00       	mov    eax,0x2
c0015f03:	31 d2                	xor    edx,edx
c0015f05:	83 c4 18             	add    esp,0x18
c0015f08:	5b                   	pop    ebx
c0015f09:	c3                   	ret    
c0015f0a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f0f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015f14:	83 c4 18             	add    esp,0x18
c0015f17:	5b                   	pop    ebx
c0015f18:	c3                   	ret    
c0015f19:	b8 01 00 00 00       	mov    eax,0x1
c0015f1e:	31 d2                	xor    edx,edx
c0015f20:	eb e3                	jmp    c0015f05 <sysCallReadDir(regs*)+0x5c>
c0015f22:	31 c0                	xor    eax,eax
c0015f24:	31 d2                	xor    edx,edx
c0015f26:	eb dd                	jmp    c0015f05 <sysCallReadDir(regs*)+0x5c>

c0015f28 <sysCallIsATTY(regs*)>:
c0015f28:	83 ec 0c             	sub    esp,0xc
c0015f2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f2f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015f32:	83 f8 02             	cmp    eax,0x2
c0015f35:	76 07                	jbe    c0015f3e <sysCallIsATTY(regs*)+0x16>
c0015f37:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015f3c:	75 26                	jne    c0015f64 <sysCallIsATTY(regs*)+0x3c>
c0015f3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f43:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015f46:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015f4c:	85 c0                	test   eax,eax
c0015f4e:	74 24                	je     c0015f74 <sysCallIsATTY(regs*)+0x4c>
c0015f50:	83 ec 0c             	sub    esp,0xc
c0015f53:	8b 10                	mov    edx,DWORD PTR [eax]
c0015f55:	50                   	push   eax
c0015f56:	ff 12                	call   DWORD PTR [edx]
c0015f58:	31 d2                	xor    edx,edx
c0015f5a:	0f b6 c0             	movzx  eax,al
c0015f5d:	83 c4 10             	add    esp,0x10
c0015f60:	83 c4 0c             	add    esp,0xc
c0015f63:	c3                   	ret    
c0015f64:	83 ec 0c             	sub    esp,0xc
c0015f67:	50                   	push   eax
c0015f68:	e8 16 59 ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c0015f6d:	83 c4 10             	add    esp,0x10
c0015f70:	85 c0                	test   eax,eax
c0015f72:	75 dc                	jne    c0015f50 <sysCallIsATTY(regs*)+0x28>
c0015f74:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f79:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015f7e:	83 c4 0c             	add    esp,0xc
c0015f81:	c3                   	ret    

c0015f82 <sysCallSeek(regs*)>:
c0015f82:	53                   	push   ebx
c0015f83:	83 ec 08             	sub    esp,0x8
c0015f86:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015f8a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015f8d:	8d 50 fd             	lea    edx,[eax-0x3]
c0015f90:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0015f96:	77 32                	ja     c0015fca <sysCallSeek(regs*)+0x48>
c0015f98:	83 ec 0c             	sub    esp,0xc
c0015f9b:	50                   	push   eax
c0015f9c:	e8 e2 58 ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c0015fa1:	83 c4 0c             	add    esp,0xc
c0015fa4:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015fa7:	31 db                	xor    ebx,ebx
c0015fa9:	53                   	push   ebx
c0015faa:	51                   	push   ecx
c0015fab:	50                   	push   eax
c0015fac:	e8 19 74 ff ff       	call   c000d3ca <File::seek(unsigned long long)>
c0015fb1:	83 c4 10             	add    esp,0x10
c0015fb4:	85 c0                	test   eax,eax
c0015fb6:	0f 95 c0             	setne  al
c0015fb9:	31 d2                	xor    edx,edx
c0015fbb:	0f b6 c0             	movzx  eax,al
c0015fbe:	f7 d8                	neg    eax
c0015fc0:	83 d2 00             	adc    edx,0x0
c0015fc3:	83 c4 08             	add    esp,0x8
c0015fc6:	f7 da                	neg    edx
c0015fc8:	5b                   	pop    ebx
c0015fc9:	c3                   	ret    
c0015fca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015fcf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015fd4:	83 c4 08             	add    esp,0x8
c0015fd7:	5b                   	pop    ebx
c0015fd8:	c3                   	ret    

c0015fd9 <sysCallTell(regs*)>:
c0015fd9:	53                   	push   ebx
c0015fda:	83 ec 08             	sub    esp,0x8
c0015fdd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015fe1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015fe4:	83 f8 02             	cmp    eax,0x2
c0015fe7:	76 4d                	jbe    c0016036 <sysCallTell(regs*)+0x5d>
c0015fe9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015fee:	76 19                	jbe    c0016009 <sysCallTell(regs*)+0x30>
c0015ff0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015ff3:	31 d2                	xor    edx,edx
c0015ff5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015ffb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016002:	31 c0                	xor    eax,eax
c0016004:	83 c4 08             	add    esp,0x8
c0016007:	5b                   	pop    ebx
c0016008:	c3                   	ret    
c0016009:	83 ec 0c             	sub    esp,0xc
c001600c:	50                   	push   eax
c001600d:	e8 71 58 ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c0016012:	5a                   	pop    edx
c0016013:	59                   	pop    ecx
c0016014:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016017:	50                   	push   eax
c0016018:	e8 03 74 ff ff       	call   c000d420 <File::tell(unsigned long long*)>
c001601d:	83 c4 10             	add    esp,0x10
c0016020:	85 c0                	test   eax,eax
c0016022:	0f 95 c0             	setne  al
c0016025:	31 d2                	xor    edx,edx
c0016027:	0f b6 c0             	movzx  eax,al
c001602a:	f7 d8                	neg    eax
c001602c:	83 d2 00             	adc    edx,0x0
c001602f:	83 c4 08             	add    esp,0x8
c0016032:	f7 da                	neg    edx
c0016034:	5b                   	pop    ebx
c0016035:	c3                   	ret    
c0016036:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001603b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016040:	83 c4 08             	add    esp,0x8
c0016043:	5b                   	pop    ebx
c0016044:	c3                   	ret    

c0016045 <sysCallSize(regs*)>:
c0016045:	53                   	push   ebx
c0016046:	83 ec 18             	sub    esp,0x18
c0016049:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001604d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016050:	83 f8 02             	cmp    eax,0x2
c0016053:	76 53                	jbe    c00160a8 <sysCallSize(regs*)+0x63>
c0016055:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001605a:	76 19                	jbe    c0016075 <sysCallSize(regs*)+0x30>
c001605c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001605f:	31 d2                	xor    edx,edx
c0016061:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016067:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001606e:	31 c0                	xor    eax,eax
c0016070:	83 c4 18             	add    esp,0x18
c0016073:	5b                   	pop    ebx
c0016074:	c3                   	ret    
c0016075:	83 ec 0c             	sub    esp,0xc
c0016078:	50                   	push   eax
c0016079:	e8 05 58 ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c001607e:	83 c4 0c             	add    esp,0xc
c0016081:	8d 54 24 13          	lea    edx,[esp+0x13]
c0016085:	52                   	push   edx
c0016086:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016089:	50                   	push   eax
c001608a:	e8 29 75 ff ff       	call   c000d5b8 <File::stat(unsigned long long*, bool*)>
c001608f:	83 c4 10             	add    esp,0x10
c0016092:	85 c0                	test   eax,eax
c0016094:	0f 95 c0             	setne  al
c0016097:	31 d2                	xor    edx,edx
c0016099:	0f b6 c0             	movzx  eax,al
c001609c:	f7 d8                	neg    eax
c001609e:	83 d2 00             	adc    edx,0x0
c00160a1:	83 c4 18             	add    esp,0x18
c00160a4:	f7 da                	neg    edx
c00160a6:	5b                   	pop    ebx
c00160a7:	c3                   	ret    
c00160a8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00160ad:	ba ff ff ff ff       	mov    edx,0xffffffff
c00160b2:	83 c4 18             	add    esp,0x18
c00160b5:	5b                   	pop    ebx
c00160b6:	c3                   	ret    

c00160b7 <sysCallSizeFromFilename(regs*)>:
c00160b7:	57                   	push   edi
c00160b8:	56                   	push   esi
c00160b9:	53                   	push   ebx
c00160ba:	83 ec 20             	sub    esp,0x20
c00160bd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00160c1:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00160c4:	83 fb 02             	cmp    ebx,0x2
c00160c7:	0f 86 88 00 00 00    	jbe    c0016155 <sysCallSizeFromFilename(regs*)+0x9e>
c00160cd:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00160d3:	76 1b                	jbe    c00160f0 <sysCallSizeFromFilename(regs*)+0x39>
c00160d5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00160d8:	31 d2                	xor    edx,edx
c00160da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00160e0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00160e7:	83 c4 20             	add    esp,0x20
c00160ea:	31 c0                	xor    eax,eax
c00160ec:	5b                   	pop    ebx
c00160ed:	5e                   	pop    esi
c00160ee:	5f                   	pop    edi
c00160ef:	c3                   	ret    
c00160f0:	83 ec 0c             	sub    esp,0xc
c00160f3:	68 14 01 00 00       	push   0x114
c00160f8:	e8 12 39 ff ff       	call   c0009a0f <malloc>
c00160fd:	83 c4 0c             	add    esp,0xc
c0016100:	89 c7                	mov    edi,eax
c0016102:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016107:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001610a:	53                   	push   ebx
c001610b:	57                   	push   edi
c001610c:	e8 59 71 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0016111:	83 c4 0c             	add    esp,0xc
c0016114:	8d 44 24 23          	lea    eax,[esp+0x23]
c0016118:	50                   	push   eax
c0016119:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001611c:	57                   	push   edi
c001611d:	e8 96 74 ff ff       	call   c000d5b8 <File::stat(unsigned long long*, bool*)>
c0016122:	83 c4 10             	add    esp,0x10
c0016125:	85 ff                	test   edi,edi
c0016127:	74 14                	je     c001613d <sysCallSizeFromFilename(regs*)+0x86>
c0016129:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001612d:	8b 17                	mov    edx,DWORD PTR [edi]
c001612f:	83 ec 0c             	sub    esp,0xc
c0016132:	57                   	push   edi
c0016133:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016136:	83 c4 10             	add    esp,0x10
c0016139:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001613d:	85 c0                	test   eax,eax
c001613f:	0f 95 c0             	setne  al
c0016142:	31 d2                	xor    edx,edx
c0016144:	0f b6 c0             	movzx  eax,al
c0016147:	f7 d8                	neg    eax
c0016149:	83 d2 00             	adc    edx,0x0
c001614c:	83 c4 20             	add    esp,0x20
c001614f:	f7 da                	neg    edx
c0016151:	5b                   	pop    ebx
c0016152:	5e                   	pop    esi
c0016153:	5f                   	pop    edi
c0016154:	c3                   	ret    
c0016155:	83 c4 20             	add    esp,0x20
c0016158:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001615d:	5b                   	pop    ebx
c001615e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016163:	5e                   	pop    esi
c0016164:	5f                   	pop    edi
c0016165:	c3                   	ret    

c0016166 <sysCallClose(regs*)>:
c0016166:	53                   	push   ebx
c0016167:	83 ec 08             	sub    esp,0x8
c001616a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001616e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016171:	83 f8 02             	cmp    eax,0x2
c0016174:	76 41                	jbe    c00161b7 <sysCallClose(regs*)+0x51>
c0016176:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001617c:	83 fa 01             	cmp    edx,0x1
c001617f:	76 2d                	jbe    c00161ae <sysCallClose(regs*)+0x48>
c0016181:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016186:	77 2f                	ja     c00161b7 <sysCallClose(regs*)+0x51>
c0016188:	83 ec 0c             	sub    esp,0xc
c001618b:	50                   	push   eax
c001618c:	e8 f2 56 ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c0016191:	89 c3                	mov    ebx,eax
c0016193:	89 04 24             	mov    DWORD PTR [esp],eax
c0016196:	e8 cf 71 ff ff       	call   c000d36a <File::close()>
c001619b:	83 c4 10             	add    esp,0x10
c001619e:	85 db                	test   ebx,ebx
c00161a0:	74 0c                	je     c00161ae <sysCallClose(regs*)+0x48>
c00161a2:	83 ec 0c             	sub    esp,0xc
c00161a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00161a7:	53                   	push   ebx
c00161a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00161ab:	83 c4 10             	add    esp,0x10
c00161ae:	31 c0                	xor    eax,eax
c00161b0:	31 d2                	xor    edx,edx
c00161b2:	83 c4 08             	add    esp,0x8
c00161b5:	5b                   	pop    ebx
c00161b6:	c3                   	ret    
c00161b7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00161bc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00161c1:	83 c4 08             	add    esp,0x8
c00161c4:	5b                   	pop    ebx
c00161c5:	c3                   	ret    

c00161c6 <sysCallOpenDir(regs*)>:
c00161c6:	56                   	push   esi
c00161c7:	53                   	push   ebx
c00161c8:	53                   	push   ebx
c00161c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00161cd:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00161d0:	85 f6                	test   esi,esi
c00161d2:	74 59                	je     c001622d <sysCallOpenDir(regs*)+0x67>
c00161d4:	83 ec 0c             	sub    esp,0xc
c00161d7:	68 14 01 00 00       	push   0x114
c00161dc:	e8 2e 38 ff ff       	call   c0009a0f <malloc>
c00161e1:	83 c4 0c             	add    esp,0xc
c00161e4:	89 c6                	mov    esi,eax
c00161e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161eb:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00161ee:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00161f1:	56                   	push   esi
c00161f2:	e8 5d 75 ff ff       	call   c000d754 <Directory::Directory(char const*, Process*)>
c00161f7:	83 c4 10             	add    esp,0x10
c00161fa:	85 f6                	test   esi,esi
c00161fc:	74 2f                	je     c001622d <sysCallOpenDir(regs*)+0x67>
c00161fe:	83 ec 0c             	sub    esp,0xc
c0016201:	56                   	push   esi
c0016202:	e8 b1 75 ff ff       	call   c000d7b8 <Directory::open()>
c0016207:	83 c4 10             	add    esp,0x10
c001620a:	85 c0                	test   eax,eax
c001620c:	75 1f                	jne    c001622d <sysCallOpenDir(regs*)+0x67>
c001620e:	83 ec 0c             	sub    esp,0xc
c0016211:	56                   	push   esi
c0016212:	e8 77 53 ff ff       	call   c000b58e <UnixFile::getFileDescriptor()>
c0016217:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001621a:	83 c4 10             	add    esp,0x10
c001621d:	89 02                	mov    DWORD PTR [edx],eax
c001621f:	c1 f8 1f             	sar    eax,0x1f
c0016222:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016225:	31 c0                	xor    eax,eax
c0016227:	59                   	pop    ecx
c0016228:	31 d2                	xor    edx,edx
c001622a:	5b                   	pop    ebx
c001622b:	5e                   	pop    esi
c001622c:	c3                   	ret    
c001622d:	59                   	pop    ecx
c001622e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016233:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016238:	5b                   	pop    ebx
c0016239:	5e                   	pop    esi
c001623a:	c3                   	ret    

c001623b <sysCallCloseDir(regs*)>:
c001623b:	53                   	push   ebx
c001623c:	83 ec 08             	sub    esp,0x8
c001623f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016243:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016246:	8d 50 fd             	lea    edx,[eax-0x3]
c0016249:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001624f:	77 2f                	ja     c0016280 <sysCallCloseDir(regs*)+0x45>
c0016251:	83 ec 0c             	sub    esp,0xc
c0016254:	50                   	push   eax
c0016255:	e8 29 56 ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c001625a:	89 c3                	mov    ebx,eax
c001625c:	89 04 24             	mov    DWORD PTR [esp],eax
c001625f:	e8 b0 75 ff ff       	call   c000d814 <Directory::close()>
c0016264:	83 c4 10             	add    esp,0x10
c0016267:	85 db                	test   ebx,ebx
c0016269:	74 0c                	je     c0016277 <sysCallCloseDir(regs*)+0x3c>
c001626b:	83 ec 0c             	sub    esp,0xc
c001626e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016270:	53                   	push   ebx
c0016271:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016274:	83 c4 10             	add    esp,0x10
c0016277:	31 c0                	xor    eax,eax
c0016279:	31 d2                	xor    edx,edx
c001627b:	83 c4 08             	add    esp,0x8
c001627e:	5b                   	pop    ebx
c001627f:	c3                   	ret    
c0016280:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016285:	ba ff ff ff ff       	mov    edx,0xffffffff
c001628a:	83 c4 08             	add    esp,0x8
c001628d:	5b                   	pop    ebx
c001628e:	c3                   	ret    

c001628f <sysCallMakeDir(regs*)>:
c001628f:	56                   	push   esi
c0016290:	53                   	push   ebx
c0016291:	83 ec 10             	sub    esp,0x10
c0016294:	68 14 01 00 00       	push   0x114
c0016299:	e8 71 37 ff ff       	call   c0009a0f <malloc>
c001629e:	83 c4 0c             	add    esp,0xc
c00162a1:	89 c3                	mov    ebx,eax
c00162a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162a8:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00162ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00162af:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00162b2:	53                   	push   ebx
c00162b3:	e8 9c 74 ff ff       	call   c000d754 <Directory::Directory(char const*, Process*)>
c00162b8:	83 c4 10             	add    esp,0x10
c00162bb:	85 db                	test   ebx,ebx
c00162bd:	74 32                	je     c00162f1 <sysCallMakeDir(regs*)+0x62>
c00162bf:	83 ec 0c             	sub    esp,0xc
c00162c2:	53                   	push   ebx
c00162c3:	e8 d0 76 ff ff       	call   c000d998 <Directory::create()>
c00162c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00162cb:	89 c6                	mov    esi,eax
c00162cd:	e8 42 75 ff ff       	call   c000d814 <Directory::close()>
c00162d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00162d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00162d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00162da:	83 c4 10             	add    esp,0x10
c00162dd:	31 c0                	xor    eax,eax
c00162df:	59                   	pop    ecx
c00162e0:	85 f6                	test   esi,esi
c00162e2:	5b                   	pop    ebx
c00162e3:	0f 95 c0             	setne  al
c00162e6:	5e                   	pop    esi
c00162e7:	31 d2                	xor    edx,edx
c00162e9:	f7 d8                	neg    eax
c00162eb:	83 d2 00             	adc    edx,0x0
c00162ee:	f7 da                	neg    edx
c00162f0:	c3                   	ret    
c00162f1:	59                   	pop    ecx
c00162f2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00162f7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00162fc:	5b                   	pop    ebx
c00162fd:	5e                   	pop    esi
c00162fe:	c3                   	ret    

c00162ff <sysCallWait(regs*)>:
c00162ff:	83 ec 10             	sub    esp,0x10
c0016302:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016306:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0016309:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001630c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001630f:	e8 fc 24 00 00       	call   c0018810 <waitTask(int, int*, int)>
c0016314:	83 c4 1c             	add    esp,0x1c
c0016317:	99                   	cdq    
c0016318:	c3                   	ret    

c0016319 <sysCallNotImpl(regs*)>:
c0016319:	83 ec 18             	sub    esp,0x18
c001631c:	68 41 5b 02 c0       	push   0xc0025b41
c0016321:	e8 89 e5 ff ff       	call   c00148af <Krnl::panic(char const*)>
c0016326:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001632b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016330:	83 c4 1c             	add    esp,0x1c
c0016333:	c3                   	ret    

c0016334 <sysPanic(regs*)>:
c0016334:	83 ec 18             	sub    esp,0x18
c0016337:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001633b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001633e:	e8 6c e5 ff ff       	call   c00148af <Krnl::panic(char const*)>
c0016343:	b8 01 00 00 00       	mov    eax,0x1
c0016348:	31 d2                	xor    edx,edx
c001634a:	83 c4 1c             	add    esp,0x1c
c001634d:	c3                   	ret    

c001634e <sysCallRmdir(regs*)>:
c001634e:	56                   	push   esi
c001634f:	53                   	push   ebx
c0016350:	83 ec 20             	sub    esp,0x20
c0016353:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016357:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001635a:	68 14 01 00 00       	push   0x114
c001635f:	e8 ab 36 ff ff       	call   c0009a0f <malloc>
c0016364:	83 c4 0c             	add    esp,0xc
c0016367:	89 c3                	mov    ebx,eax
c0016369:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001636e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016371:	56                   	push   esi
c0016372:	53                   	push   ebx
c0016373:	e8 f2 6e ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0016378:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001637b:	e8 04 71 ff ff       	call   c000d484 <File::unlink()>
c0016380:	83 c4 10             	add    esp,0x10
c0016383:	85 db                	test   ebx,ebx
c0016385:	74 14                	je     c001639b <sysCallRmdir(regs*)+0x4d>
c0016387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001638b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001638d:	83 ec 0c             	sub    esp,0xc
c0016390:	53                   	push   ebx
c0016391:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016394:	83 c4 10             	add    esp,0x10
c0016397:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001639b:	85 c0                	test   eax,eax
c001639d:	0f 95 c0             	setne  al
c00163a0:	31 d2                	xor    edx,edx
c00163a2:	0f b6 c0             	movzx  eax,al
c00163a5:	f7 d8                	neg    eax
c00163a7:	83 d2 00             	adc    edx,0x0
c00163aa:	83 c4 14             	add    esp,0x14
c00163ad:	f7 da                	neg    edx
c00163af:	5b                   	pop    ebx
c00163b0:	5e                   	pop    esi
c00163b1:	c3                   	ret    

c00163b2 <sysCallUnlink(regs*)>:
c00163b2:	56                   	push   esi
c00163b3:	53                   	push   ebx
c00163b4:	83 ec 20             	sub    esp,0x20
c00163b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00163bb:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00163be:	68 14 01 00 00       	push   0x114
c00163c3:	e8 47 36 ff ff       	call   c0009a0f <malloc>
c00163c8:	83 c4 0c             	add    esp,0xc
c00163cb:	89 c3                	mov    ebx,eax
c00163cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163d2:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00163d5:	56                   	push   esi
c00163d6:	53                   	push   ebx
c00163d7:	e8 8e 6e ff ff       	call   c000d26a <File::File(char const*, Process*)>
c00163dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00163df:	e8 a0 70 ff ff       	call   c000d484 <File::unlink()>
c00163e4:	83 c4 10             	add    esp,0x10
c00163e7:	85 db                	test   ebx,ebx
c00163e9:	74 14                	je     c00163ff <sysCallUnlink(regs*)+0x4d>
c00163eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00163ef:	8b 13                	mov    edx,DWORD PTR [ebx]
c00163f1:	83 ec 0c             	sub    esp,0xc
c00163f4:	53                   	push   ebx
c00163f5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00163f8:	83 c4 10             	add    esp,0x10
c00163fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00163ff:	85 c0                	test   eax,eax
c0016401:	0f 95 c0             	setne  al
c0016404:	31 d2                	xor    edx,edx
c0016406:	0f b6 c0             	movzx  eax,al
c0016409:	f7 d8                	neg    eax
c001640b:	83 d2 00             	adc    edx,0x0
c001640e:	83 c4 14             	add    esp,0x14
c0016411:	f7 da                	neg    edx
c0016413:	5b                   	pop    ebx
c0016414:	5e                   	pop    esi
c0016415:	c3                   	ret    

c0016416 <sysCallGetArgv(regs*)>:
c0016416:	83 ec 0c             	sub    esp,0xc
c0016419:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001641d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016420:	85 c0                	test   eax,eax
c0016422:	78 2b                	js     c001644f <sysCallGetArgv(regs*)+0x39>
c0016424:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001642a:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001642d:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0016433:	7d 1a                	jge    c001644f <sysCallGetArgv(regs*)+0x39>
c0016435:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c001643c:	85 c0                	test   eax,eax
c001643e:	74 17                	je     c0016457 <sysCallGetArgv(regs*)+0x41>
c0016440:	83 ec 08             	sub    esp,0x8
c0016443:	50                   	push   eax
c0016444:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0016447:	e8 f4 a2 fe ff       	call   c0000740 <strcpy>
c001644c:	83 c4 10             	add    esp,0x10
c001644f:	31 c0                	xor    eax,eax
c0016451:	31 d2                	xor    edx,edx
c0016453:	83 c4 0c             	add    esp,0xc
c0016456:	c3                   	ret    
c0016457:	b8 01 00 00 00       	mov    eax,0x1
c001645c:	31 d2                	xor    edx,edx
c001645e:	83 c4 0c             	add    esp,0xc
c0016461:	c3                   	ret    

c0016462 <sysCallTTYName(regs*)>:
c0016462:	56                   	push   esi
c0016463:	53                   	push   ebx
c0016464:	53                   	push   ebx
c0016465:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016469:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001646c:	85 c0                	test   eax,eax
c001646e:	74 5f                	je     c00164cf <sysCallTTYName(regs*)+0x6d>
c0016470:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016473:	83 f8 02             	cmp    eax,0x2
c0016476:	77 3e                	ja     c00164b6 <sysCallTTYName(regs*)+0x54>
c0016478:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001647d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016480:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0016486:	85 db                	test   ebx,ebx
c0016488:	74 45                	je     c00164cf <sysCallTTYName(regs*)+0x6d>
c001648a:	83 ec 0c             	sub    esp,0xc
c001648d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001648f:	53                   	push   ebx
c0016490:	ff 10                	call   DWORD PTR [eax]
c0016492:	83 c4 10             	add    esp,0x10
c0016495:	84 c0                	test   al,al
c0016497:	74 41                	je     c00164da <sysCallTTYName(regs*)+0x78>
c0016499:	83 ec 08             	sub    esp,0x8
c001649c:	81 c3 82 00 00 00    	add    ebx,0x82
c00164a2:	53                   	push   ebx
c00164a3:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00164a6:	e8 95 a2 fe ff       	call   c0000740 <strcpy>
c00164ab:	83 c4 10             	add    esp,0x10
c00164ae:	31 c0                	xor    eax,eax
c00164b0:	59                   	pop    ecx
c00164b1:	31 d2                	xor    edx,edx
c00164b3:	5b                   	pop    ebx
c00164b4:	5e                   	pop    esi
c00164b5:	c3                   	ret    
c00164b6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00164bb:	74 bb                	je     c0016478 <sysCallTTYName(regs*)+0x16>
c00164bd:	83 ec 0c             	sub    esp,0xc
c00164c0:	50                   	push   eax
c00164c1:	e8 bd 53 ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c00164c6:	83 c4 10             	add    esp,0x10
c00164c9:	89 c3                	mov    ebx,eax
c00164cb:	85 db                	test   ebx,ebx
c00164cd:	75 bb                	jne    c001648a <sysCallTTYName(regs*)+0x28>
c00164cf:	59                   	pop    ecx
c00164d0:	b8 01 00 00 00       	mov    eax,0x1
c00164d5:	31 d2                	xor    edx,edx
c00164d7:	5b                   	pop    ebx
c00164d8:	5e                   	pop    esi
c00164d9:	c3                   	ret    
c00164da:	59                   	pop    ecx
c00164db:	b8 02 00 00 00       	mov    eax,0x2
c00164e0:	31 d2                	xor    edx,edx
c00164e2:	5b                   	pop    ebx
c00164e3:	5e                   	pop    esi
c00164e4:	c3                   	ret    

c00164e5 <sysCallUSleep(regs*)>:
c00164e5:	83 ec 1c             	sub    esp,0x1c
c00164e8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00164ec:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00164ef:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00164f2:	6a 00                	push   0x0
c00164f4:	6a 64                	push   0x64
c00164f6:	52                   	push   edx
c00164f7:	50                   	push   eax
c00164f8:	e8 87 c0 00 00       	call   c0022584 <__udivdi3>
c00164fd:	83 c4 14             	add    esp,0x14
c0016500:	50                   	push   eax
c0016501:	e8 da 23 00 00       	call   c00188e0 <milliTenthSleep(unsigned int)>
c0016506:	31 c0                	xor    eax,eax
c0016508:	31 d2                	xor    edx,edx
c001650a:	83 c4 1c             	add    esp,0x1c
c001650d:	c3                   	ret    

c001650e <sysCallSpawn(regs*)>:
c001650e:	56                   	push   esi
c001650f:	53                   	push   ebx
c0016510:	50                   	push   eax
c0016511:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016515:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016518:	85 c0                	test   eax,eax
c001651a:	75 08                	jne    c0016524 <sysCallSpawn(regs*)+0x16>
c001651c:	59                   	pop    ecx
c001651d:	31 c0                	xor    eax,eax
c001651f:	31 d2                	xor    edx,edx
c0016521:	5b                   	pop    ebx
c0016522:	5e                   	pop    esi
c0016523:	c3                   	ret    
c0016524:	83 ec 0c             	sub    esp,0xc
c0016527:	68 1f 07 00 00       	push   0x71f
c001652c:	e8 de 34 ff ff       	call   c0009a0f <malloc>
c0016531:	83 c4 10             	add    esp,0x10
c0016534:	89 c6                	mov    esi,eax
c0016536:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016539:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001653c:	85 c0                	test   eax,eax
c001653e:	75 32                	jne    c0016572 <sysCallSpawn(regs*)+0x64>
c0016540:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016545:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016548:	52                   	push   edx
c0016549:	50                   	push   eax
c001654a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001654d:	56                   	push   esi
c001654e:	e8 85 1a 00 00       	call   c0017fd8 <Process::Process(char const*, Process*, char**)>
c0016553:	83 c4 10             	add    esp,0x10
c0016556:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001655d:	75 bd                	jne    c001651c <sysCallSpawn(regs*)+0xe>
c001655f:	83 ec 0c             	sub    esp,0xc
c0016562:	56                   	push   esi
c0016563:	e8 5c 1f 00 00       	call   c00184c4 <Process::createUserThread()>
c0016568:	8b 06                	mov    eax,DWORD PTR [esi]
c001656a:	83 c4 10             	add    esp,0x10
c001656d:	99                   	cdq    
c001656e:	59                   	pop    ecx
c001656f:	5b                   	pop    ebx
c0016570:	5e                   	pop    esi
c0016571:	c3                   	ret    
c0016572:	31 c0                	xor    eax,eax
c0016574:	eb d2                	jmp    c0016548 <sysCallSpawn(regs*)+0x3a>

c0016576 <sysCallGetEnv(regs*)>:
c0016576:	57                   	push   edi
c0016577:	56                   	push   esi
c0016578:	53                   	push   ebx
c0016579:	83 ec 1c             	sub    esp,0x1c
c001657c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016580:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016585:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0016588:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001658b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001658e:	e8 68 e2 ff ff       	call   c00147fb <Krnl::getProcessTotalEnvCount(Process*)>
c0016593:	83 c4 10             	add    esp,0x10
c0016596:	39 c7                	cmp    edi,eax
c0016598:	7c 14                	jl     c00165ae <sysCallGetEnv(regs*)+0x38>
c001659a:	85 f6                	test   esi,esi
c001659c:	75 0b                	jne    c00165a9 <sysCallGetEnv(regs*)+0x33>
c001659e:	83 c4 10             	add    esp,0x10
c00165a1:	31 c0                	xor    eax,eax
c00165a3:	5b                   	pop    ebx
c00165a4:	31 d2                	xor    edx,edx
c00165a6:	5e                   	pop    esi
c00165a7:	5f                   	pop    edi
c00165a8:	c3                   	ret    
c00165a9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00165ac:	eb f0                	jmp    c001659e <sysCallGetEnv(regs*)+0x28>
c00165ae:	8d 44 24 08          	lea    eax,[esp+0x8]
c00165b2:	52                   	push   edx
c00165b3:	57                   	push   edi
c00165b4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00165ba:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c00165bd:	50                   	push   eax
c00165be:	e8 58 e2 ff ff       	call   c001481b <Krnl::getProcessEnvPair(Process*, int)>
c00165c3:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00165c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00165ca:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00165ce:	83 c4 0c             	add    esp,0xc
c00165d1:	85 c9                	test   ecx,ecx
c00165d3:	75 23                	jne    c00165f8 <sysCallGetEnv(regs*)+0x82>
c00165d5:	83 ec 0c             	sub    esp,0xc
c00165d8:	50                   	push   eax
c00165d9:	e8 c2 a0 fe ff       	call   c00006a0 <strlen>
c00165de:	89 3c 24             	mov    DWORD PTR [esp],edi
c00165e1:	89 c3                	mov    ebx,eax
c00165e3:	e8 b8 a0 fe ff       	call   c00006a0 <strlen>
c00165e8:	83 c4 10             	add    esp,0x10
c00165eb:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00165ef:	83 c4 10             	add    esp,0x10
c00165f2:	31 d2                	xor    edx,edx
c00165f4:	5b                   	pop    ebx
c00165f5:	5e                   	pop    esi
c00165f6:	5f                   	pop    edi
c00165f7:	c3                   	ret    
c00165f8:	83 ec 08             	sub    esp,0x8
c00165fb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00165fe:	50                   	push   eax
c00165ff:	56                   	push   esi
c0016600:	e8 3b a1 fe ff       	call   c0000740 <strcpy>
c0016605:	58                   	pop    eax
c0016606:	5a                   	pop    edx
c0016607:	68 5b 5b 02 c0       	push   0xc0025b5b
c001660c:	56                   	push   esi
c001660d:	e8 6e a2 fe ff       	call   c0000880 <strcat>
c0016612:	59                   	pop    ecx
c0016613:	5b                   	pop    ebx
c0016614:	57                   	push   edi
c0016615:	56                   	push   esi
c0016616:	e8 65 a2 fe ff       	call   c0000880 <strcat>
c001661b:	83 c4 10             	add    esp,0x10
c001661e:	e9 7b ff ff ff       	jmp    c001659e <sysCallGetEnv(regs*)+0x28>

c0016623 <sysAppSettings(regs*)>:
c0016623:	57                   	push   edi
c0016624:	56                   	push   esi
c0016625:	56                   	push   esi
c0016626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001662a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001662d:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0016633:	25 e0 1f 00 00       	and    eax,0x1fe0
c0016638:	66 3d c0 09          	cmp    ax,0x9c0
c001663c:	75 2e                	jne    c001666c <sysAppSettings(regs*)+0x49>
c001663e:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0016644:	83 e0 1f             	and    eax,0x1f
c0016647:	3c 01                	cmp    al,0x1
c0016649:	74 2c                	je     c0016677 <sysAppSettings(regs*)+0x54>
c001664b:	3c 07                	cmp    al,0x7
c001664d:	0f 84 b3 00 00 00    	je     c0016706 <sysAppSettings(regs*)+0xe3>
c0016653:	84 c0                	test   al,al
c0016655:	0f 84 d2 00 00 00    	je     c001672d <sysAppSettings(regs*)+0x10a>
c001665b:	3c 08                	cmp    al,0x8
c001665d:	74 63                	je     c00166c2 <sysAppSettings(regs*)+0x9f>
c001665f:	59                   	pop    ecx
c0016660:	0f b6 c0             	movzx  eax,al
c0016663:	5e                   	pop    esi
c0016664:	05 e8 03 00 00       	add    eax,0x3e8
c0016669:	5f                   	pop    edi
c001666a:	99                   	cdq    
c001666b:	c3                   	ret    
c001666c:	b8 01 00 00 00       	mov    eax,0x1
c0016671:	59                   	pop    ecx
c0016672:	31 d2                	xor    edx,edx
c0016674:	5e                   	pop    esi
c0016675:	5f                   	pop    edi
c0016676:	c3                   	ret    
c0016677:	50                   	push   eax
c0016678:	68 00 01 00 00       	push   0x100
c001667d:	6a 00                	push   0x0
c001667f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016684:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016687:	83 c0 0c             	add    eax,0xc
c001668a:	50                   	push   eax
c001668b:	e8 f4 9f fe ff       	call   c0000684 <memset>
c0016690:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016695:	b9 ff 00 00 00       	mov    ecx,0xff
c001669a:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c001669d:	83 c7 0c             	add    edi,0xc
c00166a0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00166a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166a7:	5a                   	pop    edx
c00166a8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00166ab:	59                   	pop    ecx
c00166ac:	8d 50 0c             	lea    edx,[eax+0xc]
c00166af:	52                   	push   edx
c00166b0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00166b6:	e8 ed 42 ff ff       	call   c000a9a8 <VgaText::setTitle(char*)>
c00166bb:	83 c4 10             	add    esp,0x10
c00166be:	31 c0                	xor    eax,eax
c00166c0:	eb af                	jmp    c0016671 <sysAppSettings(regs*)+0x4e>
c00166c2:	83 ec 08             	sub    esp,0x8
c00166c5:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c00166cb:	83 e0 0f             	and    eax,0xf
c00166ce:	50                   	push   eax
c00166cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166d4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00166d7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00166dd:	e8 b6 42 ff ff       	call   c000a998 <VgaText::setTitleColour(VgaColour)>
c00166e2:	5f                   	pop    edi
c00166e3:	58                   	pop    eax
c00166e4:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c00166ea:	c1 e8 04             	shr    eax,0x4
c00166ed:	83 e0 0f             	and    eax,0xf
c00166f0:	50                   	push   eax
c00166f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166f6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00166f9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00166ff:	e8 84 42 ff ff       	call   c000a988 <VgaText::setTitleTextColour(VgaColour)>
c0016704:	eb b5                	jmp    c00166bb <sysAppSettings(regs*)+0x98>
c0016706:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001670b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001670e:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016714:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001671a:	c0 e8 06             	shr    al,0x6
c001671d:	83 e0 01             	and    eax,0x1
c0016720:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c0016726:	31 c0                	xor    eax,eax
c0016728:	e9 44 ff ff ff       	jmp    c0016671 <sysAppSettings(regs*)+0x4e>
c001672d:	b8 02 00 00 00       	mov    eax,0x2
c0016732:	e9 3a ff ff ff       	jmp    c0016671 <sysAppSettings(regs*)+0x4e>

c0016737 <sysSetFatAttrib(regs*)>:
c0016737:	57                   	push   edi
c0016738:	56                   	push   esi
c0016739:	53                   	push   ebx
c001673a:	83 ec 1c             	sub    esp,0x1c
c001673d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016741:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016744:	68 14 01 00 00       	push   0x114
c0016749:	e8 c1 32 ff ff       	call   c0009a0f <malloc>
c001674e:	83 c4 0c             	add    esp,0xc
c0016751:	89 c3                	mov    ebx,eax
c0016753:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016758:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001675b:	57                   	push   edi
c001675c:	53                   	push   ebx
c001675d:	e8 08 6b ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0016762:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016765:	83 c4 0c             	add    esp,0xc
c0016768:	0f b6 d4             	movzx  edx,ah
c001676b:	0f b6 c0             	movzx  eax,al
c001676e:	52                   	push   edx
c001676f:	50                   	push   eax
c0016770:	53                   	push   ebx
c0016771:	e8 a8 6d ff ff       	call   c000d51e <File::chfatattr(unsigned char, unsigned char)>
c0016776:	83 c4 10             	add    esp,0x10
c0016779:	85 db                	test   ebx,ebx
c001677b:	74 14                	je     c0016791 <sysSetFatAttrib(regs*)+0x5a>
c001677d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016781:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016783:	83 ec 0c             	sub    esp,0xc
c0016786:	53                   	push   ebx
c0016787:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001678a:	83 c4 10             	add    esp,0x10
c001678d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016791:	85 c0                	test   eax,eax
c0016793:	0f 95 c0             	setne  al
c0016796:	31 d2                	xor    edx,edx
c0016798:	0f b6 c0             	movzx  eax,al
c001679b:	f7 d8                	neg    eax
c001679d:	83 d2 00             	adc    edx,0x0
c00167a0:	83 c4 10             	add    esp,0x10
c00167a3:	f7 da                	neg    edx
c00167a5:	5b                   	pop    ebx
c00167a6:	5e                   	pop    esi
c00167a7:	5f                   	pop    edi
c00167a8:	c3                   	ret    

c00167a9 <sysPipe(regs*)>:
c00167a9:	57                   	push   edi
c00167aa:	56                   	push   esi
c00167ab:	53                   	push   ebx
c00167ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167b0:	83 ec 0c             	sub    esp,0xc
c00167b3:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00167b6:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00167b9:	6a 20                	push   0x20
c00167bb:	e8 4f 32 ff ff       	call   c0009a0f <malloc>
c00167c0:	89 c3                	mov    ebx,eax
c00167c2:	58                   	pop    eax
c00167c3:	5a                   	pop    edx
c00167c4:	68 00 50 00 00       	push   0x5000
c00167c9:	53                   	push   ebx
c00167ca:	e8 51 3f ff ff       	call   c000a720 <Pipe::Pipe(int)>
c00167cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00167d2:	e8 b7 4d ff ff       	call   c000b58e <UnixFile::getFileDescriptor()>
c00167d7:	89 07                	mov    DWORD PTR [edi],eax
c00167d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00167dc:	e8 ad 4d ff ff       	call   c000b58e <UnixFile::getFileDescriptor()>
c00167e1:	83 c4 10             	add    esp,0x10
c00167e4:	89 06                	mov    DWORD PTR [esi],eax
c00167e6:	31 d2                	xor    edx,edx
c00167e8:	5b                   	pop    ebx
c00167e9:	31 c0                	xor    eax,eax
c00167eb:	5e                   	pop    esi
c00167ec:	5f                   	pop    edi
c00167ed:	c3                   	ret    

c00167ee <sysGetUnixTime(regs*)>:
c00167ee:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c00167f3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00167f9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167fd:	e9 9c 74 ff ff       	jmp    c000dc9e <Clock::timeInSecondsLocal()>

c0016802 <string_ends_with(char const*, char const*)>:
c0016802:	57                   	push   edi
c0016803:	56                   	push   esi
c0016804:	53                   	push   ebx
c0016805:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016809:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001680d:	83 ec 0c             	sub    esp,0xc
c0016810:	53                   	push   ebx
c0016811:	e8 8a 9e fe ff       	call   c00006a0 <strlen>
c0016816:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016819:	89 c6                	mov    esi,eax
c001681b:	e8 80 9e fe ff       	call   c00006a0 <strlen>
c0016820:	83 c4 10             	add    esp,0x10
c0016823:	39 c6                	cmp    esi,eax
c0016825:	7d 06                	jge    c001682d <string_ends_with(char const*, char const*)+0x2b>
c0016827:	5b                   	pop    ebx
c0016828:	31 c0                	xor    eax,eax
c001682a:	5e                   	pop    esi
c001682b:	5f                   	pop    edi
c001682c:	c3                   	ret    
c001682d:	83 ec 08             	sub    esp,0x8
c0016830:	29 c6                	sub    esi,eax
c0016832:	57                   	push   edi
c0016833:	01 f3                	add    ebx,esi
c0016835:	53                   	push   ebx
c0016836:	e8 91 9f fe ff       	call   c00007cc <strcmp>
c001683b:	83 c4 10             	add    esp,0x10
c001683e:	85 c0                	test   eax,eax
c0016840:	5b                   	pop    ebx
c0016841:	0f 94 c0             	sete   al
c0016844:	5e                   	pop    esi
c0016845:	0f b6 c0             	movzx  eax,al
c0016848:	5f                   	pop    edi
c0016849:	c3                   	ret    

c001684a <sysCallOpen(regs*)>:
c001684a:	56                   	push   esi
c001684b:	53                   	push   ebx
c001684c:	81 ec 04 01 00 00    	sub    esp,0x104
c0016852:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0016859:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001685c:	85 c9                	test   ecx,ecx
c001685e:	0f 84 ad 01 00 00    	je     c0016a11 <sysCallOpen(regs*)+0x1c7>
c0016864:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016867:	85 c0                	test   eax,eax
c0016869:	0f 84 a2 01 00 00    	je     c0016a11 <sysCallOpen(regs*)+0x1c7>
c001686f:	52                   	push   edx
c0016870:	68 5d 5b 02 c0       	push   0xc0025b5d
c0016875:	50                   	push   eax
c0016876:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001687a:	56                   	push   esi
c001687b:	e8 40 68 ff ff       	call   c000d0c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0016880:	89 34 24             	mov    DWORD PTR [esp],esi
c0016883:	e8 18 9e fe ff       	call   c00006a0 <strlen>
c0016888:	83 c4 10             	add    esp,0x10
c001688b:	48                   	dec    eax
c001688c:	74 1d                	je     c00168ab <sysCallOpen(regs*)+0x61>
c001688e:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016891:	eb 0f                	jmp    c00168a2 <sysCallOpen(regs*)+0x58>
c0016893:	80 fa 3a             	cmp    dl,0x3a
c0016896:	74 0f                	je     c00168a7 <sysCallOpen(regs*)+0x5d>
c0016898:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001689c:	48                   	dec    eax
c001689d:	74 0c                	je     c00168ab <sysCallOpen(regs*)+0x61>
c001689f:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00168a2:	80 fa 2e             	cmp    dl,0x2e
c00168a5:	75 ec                	jne    c0016893 <sysCallOpen(regs*)+0x49>
c00168a7:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00168ab:	83 ec 08             	sub    esp,0x8
c00168ae:	68 61 5b 02 c0       	push   0xc0025b61
c00168b3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00168b6:	e8 47 ff ff ff       	call   c0016802 <string_ends_with(char const*, char const*)>
c00168bb:	83 c4 10             	add    esp,0x10
c00168be:	85 c0                	test   eax,eax
c00168c0:	74 1d                	je     c00168df <sysCallOpen(regs*)+0x95>
c00168c2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00168c5:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00168cb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00168d2:	81 c4 04 01 00 00    	add    esp,0x104
c00168d8:	31 c0                	xor    eax,eax
c00168da:	31 d2                	xor    edx,edx
c00168dc:	5b                   	pop    ebx
c00168dd:	5e                   	pop    esi
c00168de:	c3                   	ret    
c00168df:	83 ec 08             	sub    esp,0x8
c00168e2:	68 66 5b 02 c0       	push   0xc0025b66
c00168e7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00168ea:	e8 13 ff ff ff       	call   c0016802 <string_ends_with(char const*, char const*)>
c00168ef:	83 c4 10             	add    esp,0x10
c00168f2:	85 c0                	test   eax,eax
c00168f4:	75 cc                	jne    c00168c2 <sysCallOpen(regs*)+0x78>
c00168f6:	83 ec 08             	sub    esp,0x8
c00168f9:	68 62 5b 02 c0       	push   0xc0025b62
c00168fe:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016901:	e8 c6 9e fe ff       	call   c00007cc <strcmp>
c0016906:	83 c4 10             	add    esp,0x10
c0016909:	85 c0                	test   eax,eax
c001690b:	74 b5                	je     c00168c2 <sysCallOpen(regs*)+0x78>
c001690d:	83 ec 08             	sub    esp,0x8
c0016910:	68 61 5b 02 c0       	push   0xc0025b61
c0016915:	56                   	push   esi
c0016916:	e8 e7 fe ff ff       	call   c0016802 <string_ends_with(char const*, char const*)>
c001691b:	83 c4 10             	add    esp,0x10
c001691e:	85 c0                	test   eax,eax
c0016920:	75 a0                	jne    c00168c2 <sysCallOpen(regs*)+0x78>
c0016922:	83 ec 08             	sub    esp,0x8
c0016925:	68 6b 5b 02 c0       	push   0xc0025b6b
c001692a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001692d:	e8 d0 fe ff ff       	call   c0016802 <string_ends_with(char const*, char const*)>
c0016932:	83 c4 10             	add    esp,0x10
c0016935:	85 c0                	test   eax,eax
c0016937:	0f 85 e7 00 00 00    	jne    c0016a24 <sysCallOpen(regs*)+0x1da>
c001693d:	83 ec 08             	sub    esp,0x8
c0016940:	68 70 5b 02 c0       	push   0xc0025b70
c0016945:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016948:	e8 b5 fe ff ff       	call   c0016802 <string_ends_with(char const*, char const*)>
c001694d:	83 c4 10             	add    esp,0x10
c0016950:	85 c0                	test   eax,eax
c0016952:	0f 85 cc 00 00 00    	jne    c0016a24 <sysCallOpen(regs*)+0x1da>
c0016958:	83 ec 08             	sub    esp,0x8
c001695b:	68 6c 5b 02 c0       	push   0xc0025b6c
c0016960:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016963:	e8 64 9e fe ff       	call   c00007cc <strcmp>
c0016968:	83 c4 10             	add    esp,0x10
c001696b:	85 c0                	test   eax,eax
c001696d:	0f 84 b1 00 00 00    	je     c0016a24 <sysCallOpen(regs*)+0x1da>
c0016973:	83 ec 08             	sub    esp,0x8
c0016976:	68 6b 5b 02 c0       	push   0xc0025b6b
c001697b:	56                   	push   esi
c001697c:	e8 81 fe ff ff       	call   c0016802 <string_ends_with(char const*, char const*)>
c0016981:	83 c4 10             	add    esp,0x10
c0016984:	85 c0                	test   eax,eax
c0016986:	0f 85 98 00 00 00    	jne    c0016a24 <sysCallOpen(regs*)+0x1da>
c001698c:	83 ec 0c             	sub    esp,0xc
c001698f:	68 14 01 00 00       	push   0x114
c0016994:	e8 76 30 ff ff       	call   c0009a0f <malloc>
c0016999:	83 c4 0c             	add    esp,0xc
c001699c:	89 c6                	mov    esi,eax
c001699e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00169a3:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00169a6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00169a9:	56                   	push   esi
c00169aa:	e8 bb 68 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c00169af:	83 c4 10             	add    esp,0x10
c00169b2:	85 f6                	test   esi,esi
c00169b4:	74 5b                	je     c0016a11 <sysCallOpen(regs*)+0x1c7>
c00169b6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00169b9:	0f b6 c2             	movzx  eax,dl
c00169bc:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00169bf:	89 d0                	mov    eax,edx
c00169c1:	83 e0 01             	and    eax,0x1
c00169c4:	f6 c2 02             	test   dl,0x2
c00169c7:	74 03                	je     c00169cc <sysCallOpen(regs*)+0x182>
c00169c9:	83 c8 02             	or     eax,0x2
c00169cc:	f6 c2 04             	test   dl,0x4
c00169cf:	74 03                	je     c00169d4 <sysCallOpen(regs*)+0x18a>
c00169d1:	83 c8 04             	or     eax,0x4
c00169d4:	f6 c2 08             	test   dl,0x8
c00169d7:	74 03                	je     c00169dc <sysCallOpen(regs*)+0x192>
c00169d9:	83 c8 0a             	or     eax,0xa
c00169dc:	83 e2 10             	and    edx,0x10
c00169df:	74 03                	je     c00169e4 <sysCallOpen(regs*)+0x19a>
c00169e1:	83 c8 12             	or     eax,0x12
c00169e4:	83 ec 08             	sub    esp,0x8
c00169e7:	50                   	push   eax
c00169e8:	56                   	push   esi
c00169e9:	e8 1e 69 ff ff       	call   c000d30c <File::open(FileOpenMode)>
c00169ee:	83 c4 10             	add    esp,0x10
c00169f1:	85 c0                	test   eax,eax
c00169f3:	75 1c                	jne    c0016a11 <sysCallOpen(regs*)+0x1c7>
c00169f5:	83 ec 0c             	sub    esp,0xc
c00169f8:	56                   	push   esi
c00169f9:	e8 90 4b ff ff       	call   c000b58e <UnixFile::getFileDescriptor()>
c00169fe:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016a01:	83 c4 10             	add    esp,0x10
c0016a04:	89 02                	mov    DWORD PTR [edx],eax
c0016a06:	c1 f8 1f             	sar    eax,0x1f
c0016a09:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016a0c:	e9 c1 fe ff ff       	jmp    c00168d2 <sysCallOpen(regs*)+0x88>
c0016a11:	81 c4 04 01 00 00    	add    esp,0x104
c0016a17:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016a1c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016a21:	5b                   	pop    ebx
c0016a22:	5e                   	pop    esi
c0016a23:	c3                   	ret    
c0016a24:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016a27:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0016a2d:	e9 99 fe ff ff       	jmp    c00168cb <sysCallOpen(regs*)+0x81>

c0016a32 <Sys::loadSyscalls()>:
c0016a32:	c7 05 00 88 02 c0 a3 5c 01 c0 	mov    DWORD PTR ds:0xc0028800,0xc0015ca3
c0016a3c:	c7 05 04 88 02 c0 98 58 01 c0 	mov    DWORD PTR ds:0xc0028804,0xc0015898
c0016a46:	c7 05 08 88 02 c0 89 5a 01 c0 	mov    DWORD PTR ds:0xc0028808,0xc0015a89
c0016a50:	c7 05 0c 88 02 c0 d9 5b 01 c0 	mov    DWORD PTR ds:0xc002880c,0xc0015bd9
c0016a5a:	c7 05 10 88 02 c0 21 5a 01 c0 	mov    DWORD PTR ds:0xc0028810,0xc0015a21
c0016a64:	c7 05 14 88 02 c0 cf 58 01 c0 	mov    DWORD PTR ds:0xc0028814,0xc00158cf
c0016a6e:	c7 05 18 88 02 c0 b0 58 01 c0 	mov    DWORD PTR ds:0xc0028818,0xc00158b0
c0016a78:	c7 05 1c 88 02 c0 de 5a 01 c0 	mov    DWORD PTR ds:0xc002881c,0xc0015ade
c0016a82:	c7 05 24 88 02 c0 66 61 01 c0 	mov    DWORD PTR ds:0xc0028824,0xc0016166
c0016a8c:	c7 05 20 88 02 c0 4a 68 01 c0 	mov    DWORD PTR ds:0xc0028820,0xc001684a
c0016a96:	c7 05 28 88 02 c0 c6 61 01 c0 	mov    DWORD PTR ds:0xc0028828,0xc00161c6
c0016aa0:	c7 05 2c 88 02 c0 a9 5e 01 c0 	mov    DWORD PTR ds:0xc002882c,0xc0015ea9
c0016aaa:	c7 05 30 88 02 c0 db 5c 01 c0 	mov    DWORD PTR ds:0xc0028830,0xc0015cdb
c0016ab4:	c7 05 34 88 02 c0 e0 5c 01 c0 	mov    DWORD PTR ds:0xc0028834,0xc0015ce0
c0016abe:	c7 05 38 88 02 c0 8f 62 01 c0 	mov    DWORD PTR ds:0xc0028838,0xc001628f
c0016ac8:	c7 05 3c 88 02 c0 3b 62 01 c0 	mov    DWORD PTR ds:0xc002883c,0xc001623b
c0016ad2:	c7 05 40 88 02 c0 82 5f 01 c0 	mov    DWORD PTR ds:0xc0028840,0xc0015f82
c0016adc:	c7 05 44 88 02 c0 d9 5f 01 c0 	mov    DWORD PTR ds:0xc0028844,0xc0015fd9
c0016ae6:	c7 05 48 88 02 c0 45 60 01 c0 	mov    DWORD PTR ds:0xc0028848,0xc0016045
c0016af0:	c7 05 4c 88 02 c0 e5 5c 01 c0 	mov    DWORD PTR ds:0xc002884c,0xc0015ce5
c0016afa:	c7 05 50 88 02 c0 ff 62 01 c0 	mov    DWORD PTR ds:0xc0028850,0xc00162ff
c0016b04:	c7 05 54 88 02 c0 19 63 01 c0 	mov    DWORD PTR ds:0xc0028854,0xc0016319
c0016b0e:	c7 05 58 88 02 c0 19 63 01 c0 	mov    DWORD PTR ds:0xc0028858,0xc0016319
c0016b18:	c7 05 5c 88 02 c0 4e 63 01 c0 	mov    DWORD PTR ds:0xc002885c,0xc001634e
c0016b22:	c7 05 60 88 02 c0 b2 63 01 c0 	mov    DWORD PTR ds:0xc0028860,0xc00163b2
c0016b2c:	c7 05 64 88 02 c0 ef 5c 01 c0 	mov    DWORD PTR ds:0xc0028864,0xc0015cef
c0016b36:	c7 05 68 88 02 c0 16 64 01 c0 	mov    DWORD PTR ds:0xc0028868,0xc0016416
c0016b40:	c7 05 6c 88 02 c0 66 5e 01 c0 	mov    DWORD PTR ds:0xc002886c,0xc0015e66
c0016b4a:	c7 05 70 88 02 c0 62 64 01 c0 	mov    DWORD PTR ds:0xc0028870,0xc0016462
c0016b54:	c7 05 74 88 02 c0 28 5f 01 c0 	mov    DWORD PTR ds:0xc0028874,0xc0015f28
c0016b5e:	c7 05 78 88 02 c0 e5 64 01 c0 	mov    DWORD PTR ds:0xc0028878,0xc00164e5
c0016b68:	c7 05 7c 88 02 c0 b7 60 01 c0 	mov    DWORD PTR ds:0xc002887c,0xc00160b7
c0016b72:	c7 05 80 88 02 c0 0e 65 01 c0 	mov    DWORD PTR ds:0xc0028880,0xc001650e
c0016b7c:	c7 05 84 88 02 c0 76 65 01 c0 	mov    DWORD PTR ds:0xc0028884,0xc0016576
c0016b86:	c7 05 88 88 02 c0 23 66 01 c0 	mov    DWORD PTR ds:0xc0028888,0xc0016623
c0016b90:	c7 05 8c 88 02 c0 ff 5c 01 c0 	mov    DWORD PTR ds:0xc002888c,0xc0015cff
c0016b9a:	c7 05 90 88 02 c0 69 5d 01 c0 	mov    DWORD PTR ds:0xc0028890,0xc0015d69
c0016ba4:	c7 05 94 88 02 c0 b3 5d 01 c0 	mov    DWORD PTR ds:0xc0028894,0xc0015db3
c0016bae:	c7 05 98 88 02 c0 37 67 01 c0 	mov    DWORD PTR ds:0xc0028898,0xc0016737
c0016bb8:	c7 05 9c 88 02 c0 34 63 01 c0 	mov    DWORD PTR ds:0xc002889c,0xc0016334
c0016bc2:	c7 05 a0 88 02 c0 08 5e 01 c0 	mov    DWORD PTR ds:0xc00288a0,0xc0015e08
c0016bcc:	c7 05 a4 88 02 c0 a9 67 01 c0 	mov    DWORD PTR ds:0xc00288a4,0xc00167a9
c0016bd6:	c7 05 a8 88 02 c0 ee 67 01 c0 	mov    DWORD PTR ds:0xc00288a8,0xc00167ee
c0016be0:	c7 05 ac 88 02 c0 79 59 01 c0 	mov    DWORD PTR ds:0xc00288ac,0xc0015979
c0016bea:	c7 05 b0 88 02 c0 fa 5a 01 c0 	mov    DWORD PTR ds:0xc00288b0,0xc0015afa
c0016bf4:	c7 05 b4 88 02 c0 8f 5b 01 c0 	mov    DWORD PTR ds:0xc00288b4,0xc0015b8f
c0016bfe:	c7 05 b8 88 02 c0 62 58 01 c0 	mov    DWORD PTR ds:0xc00288b8,0xc0015862
c0016c08:	c7 05 bc 88 02 c0 41 5c 01 c0 	mov    DWORD PTR ds:0xc00288bc,0xc0015c41
c0016c12:	c7 05 c0 88 02 c0 db 58 01 c0 	mov    DWORD PTR ds:0xc00288c0,0xc00158db
c0016c1c:	c7 05 c4 88 02 c0 f5 58 01 c0 	mov    DWORD PTR ds:0xc00288c4,0xc00158f5
c0016c26:	c3                   	ret    

c0016c27 <Sys::systemCall(regs*, void*)>:
c0016c27:	53                   	push   ebx
c0016c28:	83 ec 08             	sub    esp,0x8
c0016c2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016c2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016c32:	83 f8 7f             	cmp    eax,0x7f
c0016c35:	77 16                	ja     c0016c4d <Sys::systemCall(regs*, void*)+0x26>
c0016c37:	8b 14 85 00 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7800]
c0016c3e:	85 d2                	test   edx,edx
c0016c40:	74 0b                	je     c0016c4d <Sys::systemCall(regs*, void*)+0x26>
c0016c42:	83 ec 0c             	sub    esp,0xc
c0016c45:	53                   	push   ebx
c0016c46:	ff d2                	call   edx
c0016c48:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016c4b:	eb 0d                	jmp    c0016c5a <Sys::systemCall(regs*, void*)+0x33>
c0016c4d:	52                   	push   edx
c0016c4e:	52                   	push   edx
c0016c4f:	50                   	push   eax
c0016c50:	68 75 5b 02 c0       	push   0xc0025b75
c0016c55:	e8 a5 60 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0016c5a:	83 c4 10             	add    esp,0x10
c0016c5d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016c62:	31 d2                	xor    edx,edx
c0016c64:	83 c4 08             	add    esp,0x8
c0016c67:	5b                   	pop    ebx
c0016c68:	c3                   	ret    

c0016c69 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0016c69:	55                   	push   ebp
c0016c6a:	57                   	push   edi
c0016c6b:	56                   	push   esi
c0016c6c:	53                   	push   ebx
c0016c6d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0016c73:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016c7a:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0016c81:	85 c0                	test   eax,eax
c0016c83:	0f 95 c1             	setne  cl
c0016c86:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0016c8e:	0f 94 c2             	sete   dl
c0016c91:	84 d1                	test   cl,dl
c0016c93:	74 23                	je     c0016cb8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016c95:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c0016c9b:	74 1b                	je     c0016cb8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016c9d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016ca3:	89 da                	mov    edx,ebx
c0016ca5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0016cab:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0016cb1:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0016cb8:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c0016cbf:	05 ff 0f 00 00       	add    eax,0xfff
c0016cc4:	83 ec 0c             	sub    esp,0xc
c0016cc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ccb:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c0016cd1:	c1 e8 0c             	shr    eax,0xc
c0016cd4:	89 fe                	mov    esi,edi
c0016cd6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016cda:	c1 ee 0c             	shr    esi,0xc
c0016cdd:	6a 01                	push   0x1
c0016cdf:	e8 f5 4c ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c0016ce4:	89 c5                	mov    ebp,eax
c0016ce6:	58                   	pop    eax
c0016ce7:	5a                   	pop    edx
c0016ce8:	56                   	push   esi
c0016ce9:	68 89 5b 02 c0       	push   0xc0025b89
c0016cee:	e8 0c 60 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0016cf3:	59                   	pop    ecx
c0016cf4:	58                   	pop    eax
c0016cf5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016cf9:	68 9b 5b 02 c0       	push   0xc0025b9b
c0016cfe:	e8 fc 5f ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0016d03:	83 c4 10             	add    esp,0x10
c0016d06:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0016d0c:	0f 86 31 01 00 00    	jbe    c0016e43 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c0016d12:	c1 e6 0c             	shl    esi,0xc
c0016d15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016d18:	8d 04 1e             	lea    eax,[esi+ebx*1]
c0016d1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d1f:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0016d26:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016d29:	01 df                	add    edi,ebx
c0016d2b:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0016d2e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016d32:	0f 84 08 01 00 00    	je     c0016e40 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c0016d38:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0016d3e:	76 05                	jbe    c0016d45 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0016d40:	bf 00 10 00 00       	mov    edi,0x1000
c0016d45:	83 ec 0c             	sub    esp,0xc
c0016d48:	31 d2                	xor    edx,edx
c0016d4a:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016d51:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016d53:	8d 44 24 28          	lea    eax,[esp+0x28]
c0016d57:	50                   	push   eax
c0016d58:	8d 74 24 30          	lea    esi,[esp+0x30]
c0016d5c:	56                   	push   esi
c0016d5d:	52                   	push   edx
c0016d5e:	57                   	push   edi
c0016d5f:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0016d66:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016d69:	83 c4 20             	add    esp,0x20
c0016d6c:	85 c0                	test   eax,eax
c0016d6e:	74 0a                	je     c0016d7a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0016d70:	53                   	push   ebx
c0016d71:	53                   	push   ebx
c0016d72:	50                   	push   eax
c0016d73:	68 ad 5b 02 c0       	push   0xc0025bad
c0016d78:	eb 0f                	jmp    c0016d89 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c0016d7a:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016d7e:	74 20                	je     c0016da0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0016d80:	51                   	push   ecx
c0016d81:	51                   	push   ecx
c0016d82:	6a 00                	push   0x0
c0016d84:	68 d8 5b 02 c0       	push   0xc0025bd8
c0016d89:	e8 71 5f ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0016d8e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016d91:	e8 73 4f ff ff       	call   c000bd09 <Virt::freeKernelVirtualPages(unsigned long)>
c0016d96:	83 c4 10             	add    esp,0x10
c0016d99:	31 c0                	xor    eax,eax
c0016d9b:	e9 68 01 00 00       	jmp    c0016f08 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c0016da0:	fa                   	cli    
c0016da1:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0016da7:	e8 1a 33 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c0016dac:	6a 07                	push   0x7
c0016dae:	89 c7                	mov    edi,eax
c0016db0:	55                   	push   ebp
c0016db1:	50                   	push   eax
c0016db2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016db7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016dba:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016dc0:	e8 bb 52 ff ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016dc5:	83 c4 0c             	add    esp,0xc
c0016dc8:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016dcf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016dd5:	6a 00                	push   0x0
c0016dd7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ddc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016ddf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016de5:	e8 f0 50 ff ff       	call   c000beda <VAS::mapOtherVASIn(bool, VAS*)>
c0016dea:	58                   	pop    eax
c0016deb:	5a                   	pop    edx
c0016dec:	68 07 0c 00 00       	push   0xc07
c0016df1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016df5:	57                   	push   edi
c0016df6:	89 ef                	mov    edi,ebp
c0016df8:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016dff:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016e05:	6a 00                	push   0x0
c0016e07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e0c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016e0f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016e15:	e8 22 56 ff ff       	call   c000c43c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016e1a:	b9 00 10 00 00       	mov    ecx,0x1000
c0016e1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e21:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0016e26:	83 c4 20             	add    esp,0x20
c0016e29:	48                   	dec    eax
c0016e2a:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0016e2f:	85 c0                	test   eax,eax
c0016e31:	75 01                	jne    c0016e34 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c0016e33:	fb                   	sti    
c0016e34:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c0016e3b:	e9 df fe ff ff       	jmp    c0016d1f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0016e40:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0016e43:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c0016e4b:	0f 86 a9 00 00 00    	jbe    c0016efa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016e51:	fa                   	cli    
c0016e52:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0016e58:	51                   	push   ecx
c0016e59:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016e60:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016e66:	6a 00                	push   0x0
c0016e68:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e6d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016e70:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016e76:	e8 5f 50 ff ff       	call   c000beda <VAS::mapOtherVASIn(bool, VAS*)>
c0016e7b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016e7f:	c1 e6 0c             	shl    esi,0xc
c0016e82:	01 de                	add    esi,ebx
c0016e84:	83 c4 10             	add    esp,0x10
c0016e87:	39 de                	cmp    esi,ebx
c0016e89:	74 61                	je     c0016eec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0016e8b:	e8 36 32 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c0016e90:	6a 07                	push   0x7
c0016e92:	89 c7                	mov    edi,eax
c0016e94:	55                   	push   ebp
c0016e95:	50                   	push   eax
c0016e96:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e9b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016e9e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016ea4:	e8 d7 51 ff ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016ea9:	58                   	pop    eax
c0016eaa:	5a                   	pop    edx
c0016eab:	68 07 0c 00 00       	push   0xc07
c0016eb0:	53                   	push   ebx
c0016eb1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016eb7:	57                   	push   edi
c0016eb8:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016ebf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016ec5:	6a 00                	push   0x0
c0016ec7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ecc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016ecf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016ed5:	e8 62 55 ff ff       	call   c000c43c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016eda:	83 c4 1c             	add    esp,0x1c
c0016edd:	68 00 10 00 00       	push   0x1000
c0016ee2:	6a 00                	push   0x0
c0016ee4:	55                   	push   ebp
c0016ee5:	e8 9a 97 fe ff       	call   c0000684 <memset>
c0016eea:	eb 98                	jmp    c0016e84 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0016eec:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0016ef1:	48                   	dec    eax
c0016ef2:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0016ef7:	75 01                	jne    c0016efa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016ef9:	fb                   	sti    
c0016efa:	83 ec 0c             	sub    esp,0xc
c0016efd:	55                   	push   ebp
c0016efe:	e8 06 4e ff ff       	call   c000bd09 <Virt::freeKernelVirtualPages(unsigned long)>
c0016f03:	83 c4 10             	add    esp,0x10
c0016f06:	b0 01                	mov    al,0x1
c0016f08:	81 c4 2c 10 00 00    	add    esp,0x102c
c0016f0e:	5b                   	pop    ebx
c0016f0f:	5e                   	pop    esi
c0016f10:	5f                   	pop    edi
c0016f11:	5d                   	pop    ebp
c0016f12:	c3                   	ret    

c0016f13 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0016f13:	55                   	push   ebp
c0016f14:	57                   	push   edi
c0016f15:	56                   	push   esi
c0016f16:	53                   	push   ebx
c0016f17:	83 ec 48             	sub    esp,0x48
c0016f1a:	68 14 01 00 00       	push   0x114
c0016f1f:	e8 eb 2a ff ff       	call   c0009a0f <malloc>
c0016f24:	83 c4 0c             	add    esp,0xc
c0016f27:	89 c6                	mov    esi,eax
c0016f29:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016f2d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0016f31:	50                   	push   eax
c0016f32:	e8 33 63 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0016f37:	58                   	pop    eax
c0016f38:	5a                   	pop    edx
c0016f39:	6a 01                	push   0x1
c0016f3b:	56                   	push   esi
c0016f3c:	e8 cb 63 ff ff       	call   c000d30c <File::open(FileOpenMode)>
c0016f41:	83 c4 10             	add    esp,0x10
c0016f44:	85 c0                	test   eax,eax
c0016f46:	0f 85 47 01 00 00    	jne    c0017093 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016f4c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016f54:	83 ec 0c             	sub    esp,0xc
c0016f57:	6a 34                	push   0x34
c0016f59:	e8 b1 2a ff ff       	call   c0009a0f <malloc>
c0016f5e:	89 c3                	mov    ebx,eax
c0016f60:	58                   	pop    eax
c0016f61:	8b 06                	mov    eax,DWORD PTR [esi]
c0016f63:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0016f67:	57                   	push   edi
c0016f68:	53                   	push   ebx
c0016f69:	6a 00                	push   0x0
c0016f6b:	6a 34                	push   0x34
c0016f6d:	56                   	push   esi
c0016f6e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016f71:	83 c4 20             	add    esp,0x20
c0016f74:	85 c0                	test   eax,eax
c0016f76:	0f 85 17 01 00 00    	jne    c0017093 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016f7c:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0016f82:	0f 85 0b 01 00 00    	jne    c0017093 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016f88:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016f8b:	85 c0                	test   eax,eax
c0016f8d:	0f 84 00 01 00 00    	je     c0017093 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016f93:	31 d2                	xor    edx,edx
c0016f95:	55                   	push   ebp
c0016f96:	52                   	push   edx
c0016f97:	50                   	push   eax
c0016f98:	56                   	push   esi
c0016f99:	e8 2c 64 ff ff       	call   c000d3ca <File::seek(unsigned long long)>
c0016f9e:	83 c4 10             	add    esp,0x10
c0016fa1:	85 c0                	test   eax,eax
c0016fa3:	0f 85 ea 00 00 00    	jne    c0017093 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016fa9:	83 ec 0c             	sub    esp,0xc
c0016fac:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016faf:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016fb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016fb7:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016fbb:	0f af c2             	imul   eax,edx
c0016fbe:	50                   	push   eax
c0016fbf:	e8 4b 2a ff ff       	call   c0009a0f <malloc>
c0016fc4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016fc6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016fca:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016fcd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016fd1:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016fd5:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016fd9:	0f af c2             	imul   eax,edx
c0016fdc:	99                   	cdq    
c0016fdd:	52                   	push   edx
c0016fde:	50                   	push   eax
c0016fdf:	56                   	push   esi
c0016fe0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016fe3:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0016fe6:	83 c4 20             	add    esp,0x20
c0016fe9:	85 c0                	test   eax,eax
c0016feb:	0f 84 a2 00 00 00    	je     c0017093 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016ff1:	31 d2                	xor    edx,edx
c0016ff3:	51                   	push   ecx
c0016ff4:	52                   	push   edx
c0016ff5:	50                   	push   eax
c0016ff6:	56                   	push   esi
c0016ff7:	e8 ce 63 ff ff       	call   c000d3ca <File::seek(unsigned long long)>
c0016ffc:	83 c4 10             	add    esp,0x10
c0016fff:	85 c0                	test   eax,eax
c0017001:	0f 85 8c 00 00 00    	jne    c0017093 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017007:	83 ec 0c             	sub    esp,0xc
c001700a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001700e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017012:	31 ed                	xor    ebp,ebp
c0017014:	0f af c2             	imul   eax,edx
c0017017:	50                   	push   eax
c0017018:	e8 f2 29 ff ff       	call   c0009a0f <malloc>
c001701d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001701f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017023:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001702a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001702e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017032:	0f af c2             	imul   eax,edx
c0017035:	99                   	cdq    
c0017036:	52                   	push   edx
c0017037:	50                   	push   eax
c0017038:	56                   	push   esi
c0017039:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001703c:	83 c4 20             	add    esp,0x20
c001703f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017047:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001704b:	0f 86 80 00 00 00    	jbe    c00170d1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0017051:	0f b7 fd             	movzx  edi,bp
c0017054:	c1 e7 05             	shl    edi,0x5
c0017057:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001705b:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001705e:	75 6b                	jne    c00170cb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017060:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0017063:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017067:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001706a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001706e:	52                   	push   edx
c001706f:	31 d2                	xor    edx,edx
c0017071:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0017074:	52                   	push   edx
c0017075:	50                   	push   eax
c0017076:	56                   	push   esi
c0017077:	e8 4e 63 ff ff       	call   c000d3ca <File::seek(unsigned long long)>
c001707c:	83 c4 10             	add    esp,0x10
c001707f:	85 c0                	test   eax,eax
c0017081:	74 17                	je     c001709a <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0017083:	83 ec 0c             	sub    esp,0xc
c0017086:	68 04 5c 02 c0       	push   0xc0025c04
c001708b:	e8 6f 5c ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0017090:	83 c4 10             	add    esp,0x10
c0017093:	31 c0                	xor    eax,eax
c0017095:	e9 87 00 00 00       	jmp    c0017121 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001709a:	83 ec 0c             	sub    esp,0xc
c001709d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00170a0:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00170a3:	50                   	push   eax
c00170a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00170a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00170ac:	56                   	push   esi
c00170ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00170b1:	e8 b3 fb ff ff       	call   c0016c69 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00170b6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00170ba:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00170be:	83 c4 20             	add    esp,0x20
c00170c1:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00170c5:	73 04                	jae    c00170cb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00170c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00170cb:	45                   	inc    ebp
c00170cc:	e9 76 ff ff ff       	jmp    c0017047 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00170d1:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00170d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00170d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00170dd:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00170e3:	83 ec 0c             	sub    esp,0xc
c00170e6:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00170ec:	25 00 f0 ff ff       	and    eax,0xfffff000
c00170f1:	05 00 10 00 00       	add    eax,0x1000
c00170f6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00170f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170fd:	e8 1d 29 ff ff       	call   c0009a1f <free>
c0017102:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017105:	e8 15 29 ff ff       	call   c0009a1f <free>
c001710a:	58                   	pop    eax
c001710b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001710f:	e8 0b 29 ff ff       	call   c0009a1f <free>
c0017114:	89 34 24             	mov    DWORD PTR [esp],esi
c0017117:	e8 4e 62 ff ff       	call   c000d36a <File::close()>
c001711c:	83 c4 10             	add    esp,0x10
c001711f:	b0 01                	mov    al,0x1
c0017121:	83 c4 3c             	add    esp,0x3c
c0017124:	5b                   	pop    ebx
c0017125:	5e                   	pop    esi
c0017126:	5f                   	pop    edi
c0017127:	5d                   	pop    ebp
c0017128:	c3                   	ret    

c0017129 <Thr::runtimeReferenceHelper()>:
c0017129:	83 ec 18             	sub    esp,0x18
c001712c:	68 0c 5c 02 c0       	push   0xc0025c0c
c0017131:	e8 c9 5b ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0017136:	fa                   	cli    
c0017137:	83 c4 10             	add    esp,0x10
c001713a:	eb fe                	jmp    c001713a <Thr::runtimeReferenceHelper()+0x11>

c001713c <Thr::getAddressOfKernelSymbol(char const*)>:
c001713c:	57                   	push   edi
c001713d:	56                   	push   esi
c001713e:	53                   	push   ebx
c001713f:	31 db                	xor    ebx,ebx
c0017141:	39 1d a0 91 02 c0    	cmp    DWORD PTR ds:0xc00291a0,ebx
c0017147:	7e 3c                	jle    c0017185 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0017149:	8b 34 9d 20 91 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd6ee0]
c0017150:	31 ff                	xor    edi,edi
c0017152:	39 3c 9d 20 90 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6fe0],edi
c0017159:	7e 27                	jle    c0017182 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001715b:	50                   	push   eax
c001715c:	50                   	push   eax
c001715d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017161:	8b 06                	mov    eax,DWORD PTR [esi]
c0017163:	03 04 9d a0 90 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6f60]
c001716a:	50                   	push   eax
c001716b:	e8 5c 96 fe ff       	call   c00007cc <strcmp>
c0017170:	83 c4 10             	add    esp,0x10
c0017173:	85 c0                	test   eax,eax
c0017175:	75 05                	jne    c001717c <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0017177:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001717a:	eb 0b                	jmp    c0017187 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001717c:	83 c6 10             	add    esi,0x10
c001717f:	47                   	inc    edi
c0017180:	eb d0                	jmp    c0017152 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0017182:	43                   	inc    ebx
c0017183:	eb bc                	jmp    c0017141 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0017185:	31 c0                	xor    eax,eax
c0017187:	5b                   	pop    ebx
c0017188:	5e                   	pop    esi
c0017189:	5f                   	pop    edi
c001718a:	c3                   	ret    

c001718b <Thr::loadKernelSymbolTable(char const*)>:
c001718b:	55                   	push   ebp
c001718c:	57                   	push   edi
c001718d:	56                   	push   esi
c001718e:	53                   	push   ebx
c001718f:	83 ec 68             	sub    esp,0x68
c0017192:	8b 35 f0 91 02 c0    	mov    esi,DWORD PTR ds:0xc00291f0
c0017198:	68 14 01 00 00       	push   0x114
c001719d:	e8 6d 28 ff ff       	call   c0009a0f <malloc>
c00171a2:	83 c4 0c             	add    esp,0xc
c00171a5:	89 c3                	mov    ebx,eax
c00171a7:	56                   	push   esi
c00171a8:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00171ac:	50                   	push   eax
c00171ad:	e8 b8 60 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c00171b2:	5e                   	pop    esi
c00171b3:	5f                   	pop    edi
c00171b4:	6a 01                	push   0x1
c00171b6:	53                   	push   ebx
c00171b7:	e8 50 61 ff ff       	call   c000d30c <File::open(FileOpenMode)>
c00171bc:	83 c4 10             	add    esp,0x10
c00171bf:	85 c0                	test   eax,eax
c00171c1:	74 0a                	je     c00171cd <Thr::loadKernelSymbolTable(char const*)+0x42>
c00171c3:	83 ec 0c             	sub    esp,0xc
c00171c6:	68 2e 5c 02 c0       	push   0xc0025c2e
c00171cb:	eb 34                	jmp    c0017201 <Thr::loadKernelSymbolTable(char const*)+0x76>
c00171cd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00171d5:	83 ec 0c             	sub    esp,0xc
c00171d8:	6a 34                	push   0x34
c00171da:	e8 30 28 ff ff       	call   c0009a0f <malloc>
c00171df:	59                   	pop    ecx
c00171e0:	89 c7                	mov    edi,eax
c00171e2:	8d 74 24 34          	lea    esi,[esp+0x34]
c00171e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00171e8:	56                   	push   esi
c00171e9:	57                   	push   edi
c00171ea:	6a 00                	push   0x0
c00171ec:	6a 34                	push   0x34
c00171ee:	53                   	push   ebx
c00171ef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00171f2:	83 c4 20             	add    esp,0x20
c00171f5:	85 c0                	test   eax,eax
c00171f7:	74 17                	je     c0017210 <Thr::loadKernelSymbolTable(char const*)+0x85>
c00171f9:	83 ec 0c             	sub    esp,0xc
c00171fc:	68 45 5c 02 c0       	push   0xc0025c45
c0017201:	e8 a9 d6 ff ff       	call   c00148af <Krnl::panic(char const*)>
c0017206:	83 c4 10             	add    esp,0x10
c0017209:	31 c0                	xor    eax,eax
c001720b:	e9 31 02 00 00       	jmp    c0017441 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0017210:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017216:	75 e1                	jne    c00171f9 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017218:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001721b:	85 c0                	test   eax,eax
c001721d:	74 da                	je     c00171f9 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001721f:	52                   	push   edx
c0017220:	31 d2                	xor    edx,edx
c0017222:	52                   	push   edx
c0017223:	50                   	push   eax
c0017224:	53                   	push   ebx
c0017225:	e8 a0 61 ff ff       	call   c000d3ca <File::seek(unsigned long long)>
c001722a:	83 c4 10             	add    esp,0x10
c001722d:	85 c0                	test   eax,eax
c001722f:	75 c8                	jne    c00171f9 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017231:	83 ec 0c             	sub    esp,0xc
c0017234:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017238:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001723c:	31 ed                	xor    ebp,ebp
c001723e:	0f af c2             	imul   eax,edx
c0017241:	50                   	push   eax
c0017242:	e8 c8 27 ff ff       	call   c0009a0f <malloc>
c0017247:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017249:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001724d:	89 34 24             	mov    DWORD PTR [esp],esi
c0017250:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017254:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017258:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001725c:	0f af c2             	imul   eax,edx
c001725f:	99                   	cdq    
c0017260:	52                   	push   edx
c0017261:	50                   	push   eax
c0017262:	53                   	push   ebx
c0017263:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017266:	83 c4 20             	add    esp,0x20
c0017269:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017271:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017279:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017281:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017289:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001728d:	0f 86 aa 00 00 00    	jbe    c001733d <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0017293:	0f b7 f5             	movzx  esi,bp
c0017296:	6b f6 28             	imul   esi,esi,0x28
c0017299:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001729d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00172a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00172a4:	50                   	push   eax
c00172a5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00172a9:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00172ad:	8b 16                	mov    edx,DWORD PTR [esi]
c00172af:	6b c0 28             	imul   eax,eax,0x28
c00172b2:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00172b6:	89 d0                	mov    eax,edx
c00172b8:	31 d2                	xor    edx,edx
c00172ba:	52                   	push   edx
c00172bb:	50                   	push   eax
c00172bc:	53                   	push   ebx
c00172bd:	e8 08 61 ff ff       	call   c000d3ca <File::seek(unsigned long long)>
c00172c2:	83 c4 0c             	add    esp,0xc
c00172c5:	6a 20                	push   0x20
c00172c7:	6a 00                	push   0x0
c00172c9:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00172cd:	52                   	push   edx
c00172ce:	e8 b1 93 fe ff       	call   c0000684 <memset>
c00172d3:	58                   	pop    eax
c00172d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00172d6:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00172da:	51                   	push   ecx
c00172db:	8d 54 24 40          	lea    edx,[esp+0x40]
c00172df:	52                   	push   edx
c00172e0:	6a 00                	push   0x0
c00172e2:	6a 1f                	push   0x1f
c00172e4:	53                   	push   ebx
c00172e5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00172e8:	83 c4 18             	add    esp,0x18
c00172eb:	68 5c 5c 02 c0       	push   0xc0025c5c
c00172f0:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00172f4:	52                   	push   edx
c00172f5:	e8 d2 94 fe ff       	call   c00007cc <strcmp>
c00172fa:	83 c4 10             	add    esp,0x10
c00172fd:	85 c0                	test   eax,eax
c00172ff:	75 0f                	jne    c0017310 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0017301:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017304:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017308:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001730c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017310:	50                   	push   eax
c0017311:	50                   	push   eax
c0017312:	68 64 5c 02 c0       	push   0xc0025c64
c0017317:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001731b:	50                   	push   eax
c001731c:	e8 ab 94 fe ff       	call   c00007cc <strcmp>
c0017321:	83 c4 10             	add    esp,0x10
c0017324:	85 c0                	test   eax,eax
c0017326:	75 0f                	jne    c0017337 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0017328:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001732b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001732f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017333:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017337:	45                   	inc    ebp
c0017338:	e9 4c ff ff ff       	jmp    c0017289 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001733d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017342:	75 10                	jne    c0017354 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0017344:	83 ec 0c             	sub    esp,0xc
c0017347:	68 6c 5c 02 c0       	push   0xc0025c6c
c001734c:	e8 5e d5 ff ff       	call   c00148af <Krnl::panic(char const*)>
c0017351:	83 c4 10             	add    esp,0x10
c0017354:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0017359:	75 10                	jne    c001736b <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001735b:	83 ec 0c             	sub    esp,0xc
c001735e:	68 6c 5c 02 c0       	push   0xc0025c6c
c0017363:	e8 47 d5 ff ff       	call   c00148af <Krnl::panic(char const*)>
c0017368:	83 c4 10             	add    esp,0x10
c001736b:	31 d2                	xor    edx,edx
c001736d:	50                   	push   eax
c001736e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017372:	52                   	push   edx
c0017373:	50                   	push   eax
c0017374:	53                   	push   ebx
c0017375:	e8 50 60 ff ff       	call   c000d3ca <File::seek(unsigned long long)>
c001737a:	5a                   	pop    edx
c001737b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001737f:	e8 8b 26 ff ff       	call   c0009a0f <malloc>
c0017384:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017388:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001738c:	31 c9                	xor    ecx,ecx
c001738e:	5e                   	pop    esi
c001738f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017391:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017395:	55                   	push   ebp
c0017396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001739a:	51                   	push   ecx
c001739b:	52                   	push   edx
c001739c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00173a0:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00173a4:	53                   	push   ebx
c00173a5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00173a8:	83 c4 14             	add    esp,0x14
c00173ab:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00173af:	e8 5b 26 ff ff       	call   c0009a0f <malloc>
c00173b4:	89 c6                	mov    esi,eax
c00173b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00173b8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00173bb:	56                   	push   esi
c00173bc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00173c0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00173c4:	51                   	push   ecx
c00173c5:	52                   	push   edx
c00173c6:	53                   	push   ebx
c00173c7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00173ca:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00173ce:	8b 15 a0 91 02 c0    	mov    edx,DWORD PTR ds:0xc00291a0
c00173d4:	83 c4 1c             	add    esp,0x1c
c00173d7:	c1 e8 04             	shr    eax,0x4
c00173da:	89 04 95 20 90 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6fe0],eax
c00173e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00173e5:	31 d2                	xor    edx,edx
c00173e7:	52                   	push   edx
c00173e8:	50                   	push   eax
c00173e9:	53                   	push   ebx
c00173ea:	e8 db 5f ff ff       	call   c000d3ca <File::seek(unsigned long long)>
c00173ef:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00173f1:	31 d2                	xor    edx,edx
c00173f3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00173f6:	56                   	push   esi
c00173f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173fb:	52                   	push   edx
c00173fc:	50                   	push   eax
c00173fd:	53                   	push   ebx
c00173fe:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017401:	83 c4 14             	add    esp,0x14
c0017404:	53                   	push   ebx
c0017405:	e8 60 5f ff ff       	call   c000d36a <File::close()>
c001740a:	5d                   	pop    ebp
c001740b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001740f:	e8 0b 26 ff ff       	call   c0009a1f <free>
c0017414:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017417:	e8 03 26 ff ff       	call   c0009a1f <free>
c001741c:	a1 a0 91 02 c0       	mov    eax,ds:0xc00291a0
c0017421:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017425:	8d 50 01             	lea    edx,[eax+0x1]
c0017428:	89 0c 85 20 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ee0],ecx
c001742f:	89 34 85 a0 90 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6f60],esi
c0017436:	89 15 a0 91 02 c0    	mov    DWORD PTR ds:0xc00291a0,edx
c001743c:	83 c4 10             	add    esp,0x10
c001743f:	b0 01                	mov    al,0x1
c0017441:	83 c4 5c             	add    esp,0x5c
c0017444:	5b                   	pop    ebx
c0017445:	5e                   	pop    esi
c0017446:	5f                   	pop    edi
c0017447:	5d                   	pop    ebp
c0017448:	c3                   	ret    

c0017449 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017449:	55                   	push   ebp
c001744a:	57                   	push   edi
c001744b:	56                   	push   esi
c001744c:	53                   	push   ebx
c001744d:	81 ec 68 03 00 00    	sub    esp,0x368
c0017453:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001745a:	8b 1d f0 91 02 c0    	mov    ebx,DWORD PTR ds:0xc00291f0
c0017460:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017464:	68 14 01 00 00       	push   0x114
c0017469:	e8 a1 25 ff ff       	call   c0009a0f <malloc>
c001746e:	83 c4 0c             	add    esp,0xc
c0017471:	89 c5                	mov    ebp,eax
c0017473:	53                   	push   ebx
c0017474:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001747b:	50                   	push   eax
c001747c:	e8 e9 5d ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0017481:	5e                   	pop    esi
c0017482:	5f                   	pop    edi
c0017483:	6a 01                	push   0x1
c0017485:	55                   	push   ebp
c0017486:	e8 81 5e ff ff       	call   c000d30c <File::open(FileOpenMode)>
c001748b:	83 c4 10             	add    esp,0x10
c001748e:	85 c0                	test   eax,eax
c0017490:	0f 85 a7 06 00 00    	jne    c0017b3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017496:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001749e:	83 ec 0c             	sub    esp,0xc
c00174a1:	6a 34                	push   0x34
c00174a3:	e8 67 25 ff ff       	call   c0009a0f <malloc>
c00174a8:	5b                   	pop    ebx
c00174a9:	89 c7                	mov    edi,eax
c00174ab:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00174af:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00174b2:	53                   	push   ebx
c00174b3:	57                   	push   edi
c00174b4:	6a 00                	push   0x0
c00174b6:	6a 34                	push   0x34
c00174b8:	55                   	push   ebp
c00174b9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00174bc:	83 c4 20             	add    esp,0x20
c00174bf:	85 c0                	test   eax,eax
c00174c1:	0f 85 76 06 00 00    	jne    c0017b3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00174c7:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00174cd:	0f 85 6a 06 00 00    	jne    c0017b3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00174d3:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00174d6:	85 c0                	test   eax,eax
c00174d8:	0f 84 5f 06 00 00    	je     c0017b3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00174de:	31 d2                	xor    edx,edx
c00174e0:	51                   	push   ecx
c00174e1:	52                   	push   edx
c00174e2:	50                   	push   eax
c00174e3:	55                   	push   ebp
c00174e4:	e8 e1 5e ff ff       	call   c000d3ca <File::seek(unsigned long long)>
c00174e9:	83 c4 10             	add    esp,0x10
c00174ec:	85 c0                	test   eax,eax
c00174ee:	0f 85 49 06 00 00    	jne    c0017b3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00174f4:	83 ec 0c             	sub    esp,0xc
c00174f7:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00174fa:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00174fe:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017502:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017506:	0f af c2             	imul   eax,edx
c0017509:	50                   	push   eax
c001750a:	e8 00 25 ff ff       	call   c0009a0f <malloc>
c001750f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017512:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017516:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017519:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001751d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017521:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017525:	0f af c2             	imul   eax,edx
c0017528:	99                   	cdq    
c0017529:	52                   	push   edx
c001752a:	50                   	push   eax
c001752b:	55                   	push   ebp
c001752c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001752f:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0017532:	83 c4 20             	add    esp,0x20
c0017535:	85 c0                	test   eax,eax
c0017537:	0f 84 00 06 00 00    	je     c0017b3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001753d:	52                   	push   edx
c001753e:	31 d2                	xor    edx,edx
c0017540:	52                   	push   edx
c0017541:	50                   	push   eax
c0017542:	55                   	push   ebp
c0017543:	e8 82 5e ff ff       	call   c000d3ca <File::seek(unsigned long long)>
c0017548:	83 c4 10             	add    esp,0x10
c001754b:	85 c0                	test   eax,eax
c001754d:	0f 85 ea 05 00 00    	jne    c0017b3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017553:	83 ec 0c             	sub    esp,0xc
c0017556:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001755a:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001755e:	31 f6                	xor    esi,esi
c0017560:	0f af c2             	imul   eax,edx
c0017563:	50                   	push   eax
c0017564:	e8 a6 24 ff ff       	call   c0009a0f <malloc>
c0017569:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001756c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017570:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017573:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017577:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001757b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001757f:	0f af c2             	imul   eax,edx
c0017582:	99                   	cdq    
c0017583:	52                   	push   edx
c0017584:	50                   	push   eax
c0017585:	55                   	push   ebp
c0017586:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017589:	83 c4 20             	add    esp,0x20
c001758c:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0017590:	0f 86 8a 00 00 00    	jbe    c0017620 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0017596:	0f b7 de             	movzx  ebx,si
c0017599:	c1 e3 05             	shl    ebx,0x5
c001759c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00175a0:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00175a3:	75 75                	jne    c001761a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00175a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00175a8:	31 d2                	xor    edx,edx
c00175aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00175ae:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00175b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175b5:	50                   	push   eax
c00175b6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00175b9:	52                   	push   edx
c00175ba:	50                   	push   eax
c00175bb:	55                   	push   ebp
c00175bc:	e8 09 5e ff ff       	call   c000d3ca <File::seek(unsigned long long)>
c00175c1:	83 c4 10             	add    esp,0x10
c00175c4:	85 c0                	test   eax,eax
c00175c6:	0f 85 71 05 00 00    	jne    c0017b3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00175cc:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00175d3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00175d6:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00175da:	31 d2                	xor    edx,edx
c00175dc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00175e0:	83 ec 0c             	sub    esp,0xc
c00175e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00175e7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00175ee:	50                   	push   eax
c00175ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00175f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175f7:	52                   	push   edx
c00175f8:	50                   	push   eax
c00175f9:	55                   	push   ebp
c00175fa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00175fd:	83 c4 1c             	add    esp,0x1c
c0017600:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017603:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017606:	50                   	push   eax
c0017607:	6a 00                	push   0x0
c0017609:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001760d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017611:	50                   	push   eax
c0017612:	e8 6d 90 fe ff       	call   c0000684 <memset>
c0017617:	83 c4 10             	add    esp,0x10
c001761a:	46                   	inc    esi
c001761b:	e9 6c ff ff ff       	jmp    c001758c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0017620:	53                   	push   ebx
c0017621:	31 db                	xor    ebx,ebx
c0017623:	68 00 01 00 00       	push   0x100
c0017628:	6a 00                	push   0x0
c001762a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001762e:	50                   	push   eax
c001762f:	e8 50 90 fe ff       	call   c0000684 <memset>
c0017634:	83 c4 0c             	add    esp,0xc
c0017637:	68 00 01 00 00       	push   0x100
c001763c:	6a 00                	push   0x0
c001763e:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017645:	50                   	push   eax
c0017646:	e8 39 90 fe ff       	call   c0000684 <memset>
c001764b:	83 c4 10             	add    esp,0x10
c001764e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017656:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001765e:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0017666:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001766e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017676:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001767a:	0f 86 30 01 00 00    	jbe    c00177b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0017680:	0f b7 f3             	movzx  esi,bx
c0017683:	6b f6 28             	imul   esi,esi,0x28
c0017686:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001768a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001768d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017691:	52                   	push   edx
c0017692:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017696:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001769a:	8b 06                	mov    eax,DWORD PTR [esi]
c001769c:	6b d2 28             	imul   edx,edx,0x28
c001769f:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00176a3:	31 d2                	xor    edx,edx
c00176a5:	52                   	push   edx
c00176a6:	50                   	push   eax
c00176a7:	55                   	push   ebp
c00176a8:	e8 1d 5d ff ff       	call   c000d3ca <File::seek(unsigned long long)>
c00176ad:	83 c4 0c             	add    esp,0xc
c00176b0:	6a 20                	push   0x20
c00176b2:	6a 00                	push   0x0
c00176b4:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00176bb:	51                   	push   ecx
c00176bc:	e8 c3 8f fe ff       	call   c0000684 <memset>
c00176c1:	59                   	pop    ecx
c00176c2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00176c5:	8d 54 24 58          	lea    edx,[esp+0x58]
c00176c9:	52                   	push   edx
c00176ca:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00176d1:	51                   	push   ecx
c00176d2:	6a 00                	push   0x0
c00176d4:	6a 1f                	push   0x1f
c00176d6:	55                   	push   ebp
c00176d7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00176da:	83 c4 1c             	add    esp,0x1c
c00176dd:	6a 09                	push   0x9
c00176df:	68 86 5c 02 c0       	push   0xc0025c86
c00176e4:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00176eb:	51                   	push   ecx
c00176ec:	e8 8f 8e fe ff       	call   c0000580 <memcmp>
c00176f1:	83 c4 10             	add    esp,0x10
c00176f4:	85 c0                	test   eax,eax
c00176f6:	75 21                	jne    c0017719 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00176f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00176fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017700:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017704:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017708:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001770b:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017712:	89 d0                	mov    eax,edx
c0017714:	40                   	inc    eax
c0017715:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017719:	50                   	push   eax
c001771a:	6a 09                	push   0x9
c001771c:	68 90 5c 02 c0       	push   0xc0025c90
c0017721:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017728:	50                   	push   eax
c0017729:	e8 52 8e fe ff       	call   c0000580 <memcmp>
c001772e:	83 c4 10             	add    esp,0x10
c0017731:	85 c0                	test   eax,eax
c0017733:	75 21                	jne    c0017756 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0017735:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017739:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001773d:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017741:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017745:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017748:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001774f:	89 d0                	mov    eax,edx
c0017751:	40                   	inc    eax
c0017752:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017756:	50                   	push   eax
c0017757:	50                   	push   eax
c0017758:	68 5c 5c 02 c0       	push   0xc0025c5c
c001775d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017764:	50                   	push   eax
c0017765:	e8 62 90 fe ff       	call   c00007cc <strcmp>
c001776a:	83 c4 10             	add    esp,0x10
c001776d:	85 c0                	test   eax,eax
c001776f:	75 0f                	jne    c0017780 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0017771:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017774:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017778:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001777c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017780:	50                   	push   eax
c0017781:	50                   	push   eax
c0017782:	68 64 5c 02 c0       	push   0xc0025c64
c0017787:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001778e:	50                   	push   eax
c001778f:	e8 38 90 fe ff       	call   c00007cc <strcmp>
c0017794:	83 c4 10             	add    esp,0x10
c0017797:	85 c0                	test   eax,eax
c0017799:	75 0f                	jne    c00177aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001779b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001779e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00177a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00177a6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00177aa:	43                   	inc    ebx
c00177ab:	e9 c6 fe ff ff       	jmp    c0017676 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00177b0:	31 d2                	xor    edx,edx
c00177b2:	50                   	push   eax
c00177b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00177b7:	52                   	push   edx
c00177b8:	50                   	push   eax
c00177b9:	55                   	push   ebp
c00177ba:	e8 0b 5c ff ff       	call   c000d3ca <File::seek(unsigned long long)>
c00177bf:	58                   	pop    eax
c00177c0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00177c4:	e8 46 22 ff ff       	call   c0009a0f <malloc>
c00177c9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00177cc:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00177d0:	31 d2                	xor    edx,edx
c00177d2:	58                   	pop    eax
c00177d3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00177d7:	53                   	push   ebx
c00177d8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00177dc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177e0:	52                   	push   edx
c00177e1:	50                   	push   eax
c00177e2:	55                   	push   ebp
c00177e3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00177e6:	83 c4 14             	add    esp,0x14
c00177e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00177ed:	e8 1d 22 ff ff       	call   c0009a0f <malloc>
c00177f2:	31 d2                	xor    edx,edx
c00177f4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00177f8:	83 c4 0c             	add    esp,0xc
c00177fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177ff:	52                   	push   edx
c0017800:	50                   	push   eax
c0017801:	55                   	push   ebp
c0017802:	e8 c3 5b ff ff       	call   c000d3ca <File::seek(unsigned long long)>
c0017807:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001780a:	31 d2                	xor    edx,edx
c001780c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001780f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017813:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017817:	52                   	push   edx
c0017818:	50                   	push   eax
c0017819:	55                   	push   ebp
c001781a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001781d:	83 c4 20             	add    esp,0x20
c0017820:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017828:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001782c:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0017830:	0f 84 0b 03 00 00    	je     c0017b41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0017836:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001783d:	31 d2                	xor    edx,edx
c001783f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017843:	c1 e8 03             	shr    eax,0x3
c0017846:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001784a:	51                   	push   ecx
c001784b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001784f:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0017853:	52                   	push   edx
c0017854:	50                   	push   eax
c0017855:	55                   	push   ebp
c0017856:	e8 6f 5b ff ff       	call   c000d3ca <File::seek(unsigned long long)>
c001785b:	5b                   	pop    ebx
c001785c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017860:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0017867:	e8 a3 21 ff ff       	call   c0009a0f <malloc>
c001786c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001786f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017873:	31 d2                	xor    edx,edx
c0017875:	5e                   	pop    esi
c0017876:	8d 44 24 58          	lea    eax,[esp+0x58]
c001787a:	50                   	push   eax
c001787b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001787f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017883:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001788a:	52                   	push   edx
c001788b:	50                   	push   eax
c001788c:	55                   	push   ebp
c001788d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017890:	83 c4 20             	add    esp,0x20
c0017893:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001789b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001789f:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c00178a3:	0f 8d 7c 02 00 00    	jge    c0017b25 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c00178a9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00178ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178b1:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c00178b6:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c00178b9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00178bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178c1:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c00178c5:	89 d8                	mov    eax,ebx
c00178c7:	c1 e8 08             	shr    eax,0x8
c00178ca:	89 c6                	mov    esi,eax
c00178cc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00178d0:	c1 e6 04             	shl    esi,0x4
c00178d3:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00178d7:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00178da:	85 d2                	test   edx,edx
c00178dc:	0f 85 bf 00 00 00    	jne    c00179a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00178e2:	83 ec 0c             	sub    esp,0xc
c00178e5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00178e9:	03 06                	add    eax,DWORD PTR [esi]
c00178eb:	50                   	push   eax
c00178ec:	e8 4b f8 ff ff       	call   c001713c <Thr::getAddressOfKernelSymbol(char const*)>
c00178f1:	83 c4 10             	add    esp,0x10
c00178f4:	89 c2                	mov    edx,eax
c00178f6:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c00178fb:	85 c0                	test   eax,eax
c00178fd:	0f 85 9e 00 00 00    	jne    c00179a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017903:	83 ec 0c             	sub    esp,0xc
c0017906:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001790a:	03 06                	add    eax,DWORD PTR [esi]
c001790c:	50                   	push   eax
c001790d:	e8 fe 0f ff ff       	call   c0008910 <Krnl::resolveCompatibilitySymbol(char*)>
c0017912:	83 c4 10             	add    esp,0x10
c0017915:	89 c2                	mov    edx,eax
c0017917:	85 c0                	test   eax,eax
c0017919:	0f 85 82 00 00 00    	jne    c00179a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001791f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017923:	50                   	push   eax
c0017924:	50                   	push   eax
c0017925:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017929:	03 06                	add    eax,DWORD PTR [esi]
c001792b:	50                   	push   eax
c001792c:	68 9a 5c 02 c0       	push   0xc0025c9a
c0017931:	e8 c9 53 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0017936:	58                   	pop    eax
c0017937:	5a                   	pop    edx
c0017938:	68 b4 5c 02 c0       	push   0xc0025cb4
c001793d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017944:	50                   	push   eax
c0017945:	e8 f6 8d fe ff       	call   c0000740 <strcpy>
c001794a:	59                   	pop    ecx
c001794b:	58                   	pop    eax
c001794c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017950:	03 06                	add    eax,DWORD PTR [esi]
c0017952:	50                   	push   eax
c0017953:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001795a:	50                   	push   eax
c001795b:	e8 20 8f fe ff       	call   c0000880 <strcat>
c0017960:	58                   	pop    eax
c0017961:	5a                   	pop    edx
c0017962:	68 4a 5d 02 c0       	push   0xc0025d4a
c0017967:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001796e:	50                   	push   eax
c001796f:	e8 0c 8f fe ff       	call   c0000880 <strcat>
c0017974:	83 c4 10             	add    esp,0x10
c0017977:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001797c:	0f 84 5d 01 00 00    	je     c0017adf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017982:	83 ec 0c             	sub    esp,0xc
c0017985:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001798c:	50                   	push   eax
c001798d:	e8 1d cf ff ff       	call   c00148af <Krnl::panic(char const*)>
c0017992:	83 c4 10             	add    esp,0x10
c0017995:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017999:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001799d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00179a1:	80 fb 01             	cmp    bl,0x1
c00179a4:	0f 85 88 00 00 00    	jne    c0017a32 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c00179aa:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00179b1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00179b5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c00179b9:	01 ce                	add    esi,ecx
c00179bb:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00179c1:	0f 94 c0             	sete   al
c00179c4:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00179ca:	0f 94 c3             	sete   bl
c00179cd:	09 c3                	or     ebx,eax
c00179cf:	8b 06                	mov    eax,DWORD PTR [esi]
c00179d1:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00179d6:	74 41                	je     c0017a19 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c00179d8:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00179db:	84 db                	test   bl,bl
c00179dd:	75 15                	jne    c00179f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c00179df:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00179e3:	66 83 f8 0c          	cmp    ax,0xc
c00179e7:	76 05                	jbe    c00179ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c00179e9:	b8 0c 00 00 00       	mov    eax,0xc
c00179ee:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00179f2:	76 37                	jbe    c0017a2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00179f4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00179f8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00179fd:	0f 84 dc 00 00 00    	je     c0017adf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017a03:	83 ec 0c             	sub    esp,0xc
c0017a06:	68 cb 5c 02 c0       	push   0xc0025ccb
c0017a0b:	e8 9f ce ff ff       	call   c00148af <Krnl::panic(char const*)>
c0017a10:	83 c4 10             	add    esp,0x10
c0017a13:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0017a17:	eb 12                	jmp    c0017a2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017a19:	01 c1                	add    ecx,eax
c0017a1b:	84 db                	test   bl,bl
c0017a1d:	75 0c                	jne    c0017a2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017a1f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017a23:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0017a27:	77 02                	ja     c0017a2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017a29:	01 d1                	add    ecx,edx
c0017a2b:	89 0e                	mov    DWORD PTR [esi],ecx
c0017a2d:	e9 ea 00 00 00       	jmp    c0017b1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017a32:	80 fb 02             	cmp    bl,0x2
c0017a35:	75 7c                	jne    c0017ab3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0017a37:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0017a3e:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0017a42:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0017a46:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017a4c:	74 20                	je     c0017a6e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0017a4e:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017a54:	74 18                	je     c0017a6e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0017a56:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017a5a:	b9 0a 00 00 00       	mov    ecx,0xa
c0017a5f:	66 83 f8 0e          	cmp    ax,0xe
c0017a63:	77 03                	ja     c0017a68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0017a65:	8d 48 fc             	lea    ecx,[eax-0x4]
c0017a68:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0017a6c:	76 1f                	jbe    c0017a8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0017a6e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0017a72:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017a77:	74 66                	je     c0017adf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017a79:	83 ec 0c             	sub    esp,0xc
c0017a7c:	68 e7 5c 02 c0       	push   0xc0025ce7
c0017a81:	e8 29 ce ff ff       	call   c00148af <Krnl::panic(char const*)>
c0017a86:	83 c4 10             	add    esp,0x10
c0017a89:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017a8d:	8b 06                	mov    eax,DWORD PTR [esi]
c0017a8f:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017a94:	74 13                	je     c0017aa9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0017a96:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a9a:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0017aa1:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0017aa5:	01 c8                	add    eax,ecx
c0017aa7:	eb 04                	jmp    c0017aad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0017aa9:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0017aad:	01 c2                	add    edx,eax
c0017aaf:	89 16                	mov    DWORD PTR [esi],edx
c0017ab1:	eb 69                	jmp    c0017b1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017ab3:	0f b6 db             	movzx  ebx,bl
c0017ab6:	50                   	push   eax
c0017ab7:	50                   	push   eax
c0017ab8:	53                   	push   ebx
c0017ab9:	68 03 5d 02 c0       	push   0xc0025d03
c0017abe:	e8 3c 52 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0017ac3:	83 c4 10             	add    esp,0x10
c0017ac6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017acb:	74 12                	je     c0017adf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017acd:	83 ec 0c             	sub    esp,0xc
c0017ad0:	68 0e 5d 02 c0       	push   0xc0025d0e
c0017ad5:	e8 d5 cd ff ff       	call   c00148af <Krnl::panic(char const*)>
c0017ada:	83 c4 10             	add    esp,0x10
c0017add:	eb 3d                	jmp    c0017b1c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017adf:	83 ec 0c             	sub    esp,0xc
c0017ae2:	55                   	push   ebp
c0017ae3:	e8 82 58 ff ff       	call   c000d36a <File::close()>
c0017ae8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017aeb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017aee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017af1:	59                   	pop    ecx
c0017af2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017af6:	e8 24 1f ff ff       	call   c0009a1f <free>
c0017afb:	5b                   	pop    ebx
c0017afc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b00:	e8 1a 1f ff ff       	call   c0009a1f <free>
c0017b05:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017b08:	e8 12 1f ff ff       	call   c0009a1f <free>
c0017b0d:	5e                   	pop    esi
c0017b0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b12:	e8 08 1f ff ff       	call   c0009a1f <free>
c0017b17:	83 c4 10             	add    esp,0x10
c0017b1a:	eb 21                	jmp    c0017b3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017b1c:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0017b20:	e9 76 fd ff ff       	jmp    c001789b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0017b25:	83 ec 0c             	sub    esp,0xc
c0017b28:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b2c:	e8 ee 1e ff ff       	call   c0009a1f <free>
c0017b31:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0017b35:	83 c4 10             	add    esp,0x10
c0017b38:	e9 eb fc ff ff       	jmp    c0017828 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0017b3d:	31 c0                	xor    eax,eax
c0017b3f:	eb 33                	jmp    c0017b74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0017b41:	83 ec 0c             	sub    esp,0xc
c0017b44:	55                   	push   ebp
c0017b45:	e8 20 58 ff ff       	call   c000d36a <File::close()>
c0017b4a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017b4d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017b50:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017b53:	58                   	pop    eax
c0017b54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b58:	e8 c2 1e ff ff       	call   c0009a1f <free>
c0017b5d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017b60:	e8 ba 1e ff ff       	call   c0009a1f <free>
c0017b65:	5a                   	pop    edx
c0017b66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b6a:	e8 b0 1e ff ff       	call   c0009a1f <free>
c0017b6f:	83 c4 10             	add    esp,0x10
c0017b72:	b0 01                	mov    al,0x1
c0017b74:	81 c4 5c 03 00 00    	add    esp,0x35c
c0017b7a:	5b                   	pop    ebx
c0017b7b:	5e                   	pop    esi
c0017b7c:	5f                   	pop    edi
c0017b7d:	5d                   	pop    ebp
c0017b7e:	c3                   	ret    

c0017b7f <Thr::getDriverBaseFromAddress(unsigned long)>:
c0017b7f:	56                   	push   esi
c0017b80:	31 d2                	xor    edx,edx
c0017b82:	53                   	push   ebx
c0017b83:	8b 1d 00 8a 02 c0    	mov    ebx,DWORD PTR ds:0xc0028a00
c0017b89:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017b8d:	39 d3                	cmp    ebx,edx
c0017b8f:	7e 1b                	jle    c0017bac <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0017b91:	8b 04 95 20 8c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd73e0]
c0017b98:	39 c8                	cmp    eax,ecx
c0017b9a:	77 0d                	ja     c0017ba9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0017b9c:	8b 34 95 20 8a 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd75e0]
c0017ba3:	01 c6                	add    esi,eax
c0017ba5:	39 ce                	cmp    esi,ecx
c0017ba7:	77 05                	ja     c0017bae <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0017ba9:	42                   	inc    edx
c0017baa:	eb e1                	jmp    c0017b8d <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0017bac:	31 c0                	xor    eax,eax
c0017bae:	5b                   	pop    ebx
c0017baf:	5e                   	pop    esi
c0017bb0:	c3                   	ret    

c0017bb1 <Thr::getDriverNameFromAddress(unsigned long)>:
c0017bb1:	53                   	push   ebx
c0017bb2:	31 c0                	xor    eax,eax
c0017bb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017bb8:	8b 1d 00 8a 02 c0    	mov    ebx,DWORD PTR ds:0xc0028a00
c0017bbe:	39 c3                	cmp    ebx,eax
c0017bc0:	7e 22                	jle    c0017be4 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0017bc2:	8b 14 85 20 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd73e0]
c0017bc9:	39 ca                	cmp    edx,ecx
c0017bcb:	77 14                	ja     c0017be1 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017bcd:	03 14 85 20 8a 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd75e0]
c0017bd4:	39 ca                	cmp    edx,ecx
c0017bd6:	76 09                	jbe    c0017be1 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017bd8:	8b 04 85 20 8e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd71e0]
c0017bdf:	eb 05                	jmp    c0017be6 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0017be1:	40                   	inc    eax
c0017be2:	eb da                	jmp    c0017bbe <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0017be4:	31 c0                	xor    eax,eax
c0017be6:	5b                   	pop    ebx
c0017be7:	c3                   	ret    

c0017be8 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0017be8:	53                   	push   ebx
c0017be9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017bed:	53                   	push   ebx
c0017bee:	e8 8c ff ff ff       	call   c0017b7f <Thr::getDriverBaseFromAddress(unsigned long)>
c0017bf3:	5a                   	pop    edx
c0017bf4:	31 d2                	xor    edx,edx
c0017bf6:	85 c0                	test   eax,eax
c0017bf8:	74 04                	je     c0017bfe <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0017bfa:	89 da                	mov    edx,ebx
c0017bfc:	29 c2                	sub    edx,eax
c0017bfe:	89 d0                	mov    eax,edx
c0017c00:	5b                   	pop    ebx
c0017c01:	c3                   	ret    

c0017c02 <Thr::loadDLL(char const*, bool)>:
c0017c02:	55                   	push   ebp
c0017c03:	57                   	push   edi
c0017c04:	56                   	push   esi
c0017c05:	53                   	push   ebx
c0017c06:	81 ec 34 01 00 00    	sub    esp,0x134
c0017c0c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0017c13:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0017c1a:	56                   	push   esi
c0017c1b:	68 26 5d 02 c0       	push   0xc0025d26
c0017c20:	e8 da 50 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0017c25:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017c2c:	e8 de 1d ff ff       	call   c0009a0f <malloc>
c0017c31:	83 c4 0c             	add    esp,0xc
c0017c34:	89 c3                	mov    ebx,eax
c0017c36:	ff 35 f0 91 02 c0    	push   DWORD PTR ds:0xc00291f0
c0017c3c:	56                   	push   esi
c0017c3d:	50                   	push   eax
c0017c3e:	e8 27 56 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0017c43:	83 c4 10             	add    esp,0x10
c0017c46:	85 db                	test   ebx,ebx
c0017c48:	75 3c                	jne    c0017c86 <Thr::loadDLL(char const*, bool)+0x84>
c0017c4a:	89 f8                	mov    eax,edi
c0017c4c:	84 c0                	test   al,al
c0017c4e:	0f 84 d2 01 00 00    	je     c0017e26 <Thr::loadDLL(char const*, bool)+0x224>
c0017c54:	55                   	push   ebp
c0017c55:	55                   	push   ebp
c0017c56:	68 37 5d 02 c0       	push   0xc0025d37
c0017c5b:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0017c5f:	55                   	push   ebp
c0017c60:	e8 db 8a fe ff       	call   c0000740 <strcpy>
c0017c65:	58                   	pop    eax
c0017c66:	5a                   	pop    edx
c0017c67:	56                   	push   esi
c0017c68:	55                   	push   ebp
c0017c69:	e8 12 8c fe ff       	call   c0000880 <strcat>
c0017c6e:	59                   	pop    ecx
c0017c6f:	58                   	pop    eax
c0017c70:	68 4a 5d 02 c0       	push   0xc0025d4a
c0017c75:	55                   	push   ebp
c0017c76:	e8 05 8c fe ff       	call   c0000880 <strcat>
c0017c7b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017c7e:	e8 2c cc ff ff       	call   c00148af <Krnl::panic(char const*)>
c0017c83:	83 c4 10             	add    esp,0x10
c0017c86:	51                   	push   ecx
c0017c87:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0017c8b:	50                   	push   eax
c0017c8c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017c90:	50                   	push   eax
c0017c91:	53                   	push   ebx
c0017c92:	e8 21 59 ff ff       	call   c000d5b8 <File::stat(unsigned long long*, bool*)>
c0017c97:	83 c4 10             	add    esp,0x10
c0017c9a:	85 db                	test   ebx,ebx
c0017c9c:	74 0c                	je     c0017caa <Thr::loadDLL(char const*, bool)+0xa8>
c0017c9e:	83 ec 0c             	sub    esp,0xc
c0017ca1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ca3:	53                   	push   ebx
c0017ca4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017ca7:	83 c4 10             	add    esp,0x10
c0017caa:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0017caf:	75 0a                	jne    c0017cbb <Thr::loadDLL(char const*, bool)+0xb9>
c0017cb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017cb5:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0017cb9:	75 3c                	jne    c0017cf7 <Thr::loadDLL(char const*, bool)+0xf5>
c0017cbb:	89 f8                	mov    eax,edi
c0017cbd:	84 c0                	test   al,al
c0017cbf:	0f 84 49 01 00 00    	je     c0017e0e <Thr::loadDLL(char const*, bool)+0x20c>
c0017cc5:	51                   	push   ecx
c0017cc6:	51                   	push   ecx
c0017cc7:	68 37 5d 02 c0       	push   0xc0025d37
c0017ccc:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0017cd0:	53                   	push   ebx
c0017cd1:	e8 6a 8a fe ff       	call   c0000740 <strcpy>
c0017cd6:	5d                   	pop    ebp
c0017cd7:	58                   	pop    eax
c0017cd8:	56                   	push   esi
c0017cd9:	53                   	push   ebx
c0017cda:	e8 a1 8b fe ff       	call   c0000880 <strcat>
c0017cdf:	58                   	pop    eax
c0017ce0:	5a                   	pop    edx
c0017ce1:	68 4a 5d 02 c0       	push   0xc0025d4a
c0017ce6:	53                   	push   ebx
c0017ce7:	e8 94 8b fe ff       	call   c0000880 <strcat>
c0017cec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017cef:	e8 bb cb ff ff       	call   c00148af <Krnl::panic(char const*)>
c0017cf4:	83 c4 10             	add    esp,0x10
c0017cf7:	52                   	push   edx
c0017cf8:	6a 03                	push   0x3
c0017cfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cfe:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017d02:	05 ff 0f 00 00       	add    eax,0xfff
c0017d07:	83 d2 00             	adc    edx,0x0
c0017d0a:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017d0e:	50                   	push   eax
c0017d0f:	ff 35 d0 7d 02 c0    	push   DWORD PTR ds:0xc0027dd0
c0017d15:	e8 68 44 ff ff       	call   c000c182 <VAS::allocatePages(int, int)>
c0017d1a:	59                   	pop    ecx
c0017d1b:	89 c3                	mov    ebx,eax
c0017d1d:	5d                   	pop    ebp
c0017d1e:	50                   	push   eax
c0017d1f:	68 c6 3f 02 c0       	push   0xc0023fc6
c0017d24:	e8 d6 4f ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0017d29:	89 34 24             	mov    DWORD PTR [esp],esi
c0017d2c:	e8 6f 89 fe ff       	call   c00006a0 <strlen>
c0017d31:	8b 2d 00 8a 02 c0    	mov    ebp,DWORD PTR ds:0xc0028a00
c0017d37:	40                   	inc    eax
c0017d38:	89 04 24             	mov    DWORD PTR [esp],eax
c0017d3b:	e8 cf 1c ff ff       	call   c0009a0f <malloc>
c0017d40:	89 04 ad 20 8e 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd71e0],eax
c0017d47:	58                   	pop    eax
c0017d48:	a1 00 8a 02 c0       	mov    eax,ds:0xc0028a00
c0017d4d:	5a                   	pop    edx
c0017d4e:	56                   	push   esi
c0017d4f:	ff 34 85 20 8e 02 c0 	push   DWORD PTR [eax*4-0x3ffd71e0]
c0017d56:	e8 e5 89 fe ff       	call   c0000740 <strcpy>
c0017d5b:	a1 00 8a 02 c0       	mov    eax,ds:0xc0028a00
c0017d60:	8d 50 01             	lea    edx,[eax+0x1]
c0017d63:	89 1c 85 20 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd73e0],ebx
c0017d6a:	89 15 00 8a 02 c0    	mov    DWORD PTR ds:0xc0028a00,edx
c0017d70:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d74:	83 c4 0c             	add    esp,0xc
c0017d77:	89 14 85 20 8a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd75e0],edx
c0017d7e:	6a 01                	push   0x1
c0017d80:	53                   	push   ebx
c0017d81:	56                   	push   esi
c0017d82:	e8 c2 f6 ff ff       	call   c0017449 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0017d87:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0017d8b:	83 c4 10             	add    esp,0x10
c0017d8e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017d93:	0f 85 89 00 00 00    	jne    c0017e22 <Thr::loadDLL(char const*, bool)+0x220>
c0017d99:	89 f8                	mov    eax,edi
c0017d9b:	84 c0                	test   al,al
c0017d9d:	74 73                	je     c0017e12 <Thr::loadDLL(char const*, bool)+0x210>
c0017d9f:	83 ec 0c             	sub    esp,0xc
c0017da2:	68 4c 5d 02 c0       	push   0xc0025d4c
c0017da7:	e8 03 cb ff ff       	call   c00148af <Krnl::panic(char const*)>
c0017dac:	83 c4 10             	add    esp,0x10
c0017daf:	eb 61                	jmp    c0017e12 <Thr::loadDLL(char const*, bool)+0x210>
c0017db1:	50                   	push   eax
c0017db2:	50                   	push   eax
c0017db3:	89 e8                	mov    eax,ebp
c0017db5:	c1 e0 0c             	shl    eax,0xc
c0017db8:	01 d8                	add    eax,ebx
c0017dba:	50                   	push   eax
c0017dbb:	ff 35 d0 7d 02 c0    	push   DWORD PTR ds:0xc0027dd0
c0017dc1:	e8 24 3f ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c0017dc6:	83 c4 10             	add    esp,0x10
c0017dc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0017dcb:	a8 60                	test   al,0x60
c0017dcd:	75 11                	jne    c0017de0 <Thr::loadDLL(char const*, bool)+0x1de>
c0017dcf:	83 ec 0c             	sub    esp,0xc
c0017dd2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017dd7:	50                   	push   eax
c0017dd8:	e8 66 22 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c0017ddd:	83 c4 10             	add    esp,0x10
c0017de0:	45                   	inc    ebp
c0017de1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017de5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017de9:	05 ff 0f 00 00       	add    eax,0xfff
c0017dee:	bf 00 00 00 00       	mov    edi,0x0
c0017df3:	83 d2 00             	adc    edx,0x0
c0017df6:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017dfa:	c1 ea 0c             	shr    edx,0xc
c0017dfd:	39 c5                	cmp    ebp,eax
c0017dff:	89 d1                	mov    ecx,edx
c0017e01:	89 f8                	mov    eax,edi
c0017e03:	19 c8                	sbb    eax,ecx
c0017e05:	72 aa                	jb     c0017db1 <Thr::loadDLL(char const*, bool)+0x1af>
c0017e07:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017e0c:	75 18                	jne    c0017e26 <Thr::loadDLL(char const*, bool)+0x224>
c0017e0e:	31 db                	xor    ebx,ebx
c0017e10:	eb 14                	jmp    c0017e26 <Thr::loadDLL(char const*, bool)+0x224>
c0017e12:	83 ec 0c             	sub    esp,0xc
c0017e15:	68 6b 5d 02 c0       	push   0xc0025d6b
c0017e1a:	e8 90 ca ff ff       	call   c00148af <Krnl::panic(char const*)>
c0017e1f:	83 c4 10             	add    esp,0x10
c0017e22:	31 ed                	xor    ebp,ebp
c0017e24:	eb bb                	jmp    c0017de1 <Thr::loadDLL(char const*, bool)+0x1df>
c0017e26:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017e2c:	89 d8                	mov    eax,ebx
c0017e2e:	5b                   	pop    ebx
c0017e2f:	5e                   	pop    esi
c0017e30:	5f                   	pop    edi
c0017e31:	5d                   	pop    ebp
c0017e32:	c3                   	ret    

c0017e33 <Thr::executeDLL(unsigned long, void*)>:
c0017e33:	56                   	push   esi
c0017e34:	53                   	push   ebx
c0017e35:	52                   	push   edx
c0017e36:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017e3a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017e3e:	85 db                	test   ebx,ebx
c0017e40:	75 10                	jne    c0017e52 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0017e42:	83 ec 0c             	sub    esp,0xc
c0017e45:	68 87 5d 02 c0       	push   0xc0025d87
c0017e4a:	e8 60 ca ff ff       	call   c00148af <Krnl::panic(char const*)>
c0017e4f:	83 c4 10             	add    esp,0x10
c0017e52:	50                   	push   eax
c0017e53:	50                   	push   eax
c0017e54:	53                   	push   ebx
c0017e55:	68 b1 5d 02 c0       	push   0xc0025db1
c0017e5a:	e8 a0 4e ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0017e5f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017e63:	89 d8                	mov    eax,ebx
c0017e65:	83 c4 14             	add    esp,0x14
c0017e68:	5b                   	pop    ebx
c0017e69:	5e                   	pop    esi
c0017e6a:	ff e0                	jmp    eax

c0017e6c <userModeEntryPoint(void*)>:
c0017e6c:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0017e71:	48                   	dec    eax
c0017e72:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0017e77:	75 03                	jne    c0017e7c <userModeEntryPoint(void*)+0x10>
c0017e79:	fb                   	sti    
c0017e7a:	66 90                	xchg   ax,ax
c0017e7c:	fb                   	sti    
c0017e7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017e82:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017e85:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0017e8b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017e8f:	e9 cb 83 fe ff       	jmp    c000025f <goToUsermode>

c0017e94 <changeTSS>:
c0017e94:	83 ec 14             	sub    esp,0x14
c0017e97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017e9c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017e9f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0017ea4:	c1 e2 15             	shl    edx,0x15
c0017ea7:	29 d0                	sub    eax,edx
c0017ea9:	50                   	push   eax
c0017eaa:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0017eaf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017eb5:	05 7c 11 00 00       	add    eax,0x117c
c0017eba:	50                   	push   eax
c0017ebb:	e8 6c 34 ff ff       	call   c000b32c <TSS::setESP(unsigned long)>
c0017ec0:	83 c4 1c             	add    esp,0x1c
c0017ec3:	c3                   	ret    

c0017ec4 <switchToThread(ThreadControlBlock*)>:
c0017ec4:	57                   	push   edi
c0017ec5:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c0017eca:	56                   	push   esi
c0017ecb:	85 c0                	test   eax,eax
c0017ecd:	53                   	push   ebx
c0017ece:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017ed2:	0f 85 90 00 00 00    	jne    c0017f68 <switchToThread(ThreadControlBlock*)+0xa4>
c0017ed8:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c0017edb:	3c ff                	cmp    al,0xff
c0017edd:	0f 84 81 00 00 00    	je     c0017f64 <switchToThread(ThreadControlBlock*)+0xa0>
c0017ee3:	0f b6 d0             	movzx  edx,al
c0017ee6:	b8 00 04 00 00       	mov    eax,0x400
c0017eeb:	29 d0                	sub    eax,edx
c0017eed:	d1 f8                	sar    eax,1
c0017eef:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c0017ef2:	66 90                	xchg   ax,ax
c0017ef4:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c0017ef7:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0017efc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017f02:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0017f09:	74 4d                	je     c0017f58 <switchToThread(ThreadControlBlock*)+0x94>
c0017f0b:	0f 31                	rdtsc  
c0017f0d:	a3 08 92 02 c0       	mov    ds:0xc0029208,eax
c0017f12:	89 c6                	mov    esi,eax
c0017f14:	89 d7                	mov    edi,edx
c0017f16:	2b 35 f8 91 02 c0    	sub    esi,DWORD PTR ds:0xc00291f8
c0017f1c:	89 15 0c 92 02 c0    	mov    DWORD PTR ds:0xc002920c,edx
c0017f22:	1b 3d fc 91 02 c0    	sbb    edi,DWORD PTR ds:0xc00291fc
c0017f28:	89 35 00 92 02 c0    	mov    DWORD PTR ds:0xc0029200,esi
c0017f2e:	a3 f8 91 02 c0       	mov    ds:0xc00291f8,eax
c0017f33:	89 3d 04 92 02 c0    	mov    DWORD PTR ds:0xc0029204,edi
c0017f39:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017f3f:	89 15 fc 91 02 c0    	mov    DWORD PTR ds:0xc00291fc,edx
c0017f45:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017f48:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0017f4b:	01 c6                	add    esi,eax
c0017f4d:	11 d7                	adc    edi,edx
c0017f4f:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0017f52:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0017f55:	8d 76 00             	lea    esi,[esi+0x0]
c0017f58:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0017f5c:	5b                   	pop    ebx
c0017f5d:	5e                   	pop    esi
c0017f5e:	5f                   	pop    edi
c0017f5f:	e9 33 83 fe ff       	jmp    c0000297 <switchToThreadASM>
c0017f64:	31 c0                	xor    eax,eax
c0017f66:	eb 8c                	jmp    c0017ef4 <switchToThread(ThreadControlBlock*)+0x30>
c0017f68:	5b                   	pop    ebx
c0017f69:	c7 05 c0 91 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00291c0,0x1
c0017f73:	5e                   	pop    esi
c0017f74:	5f                   	pop    edi
c0017f75:	c3                   	ret    
c0017f76:	66 90                	xchg   ax,ax

c0017f78 <Process::addArgs(char**)>:
c0017f78:	57                   	push   edi
c0017f79:	56                   	push   esi
c0017f7a:	53                   	push   ebx
c0017f7b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017f7f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017f83:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0017f8d:	85 ff                	test   edi,edi
c0017f8f:	74 43                	je     c0017fd4 <Process::addArgs(char**)+0x5c>
c0017f91:	8b 07                	mov    eax,DWORD PTR [edi]
c0017f93:	85 c0                	test   eax,eax
c0017f95:	74 3d                	je     c0017fd4 <Process::addArgs(char**)+0x5c>
c0017f97:	31 db                	xor    ebx,ebx
c0017f99:	8d 76 00             	lea    esi,[esi+0x0]
c0017f9c:	83 ec 0c             	sub    esp,0xc
c0017f9f:	50                   	push   eax
c0017fa0:	e8 fb 86 fe ff       	call   c00006a0 <strlen>
c0017fa5:	40                   	inc    eax
c0017fa6:	89 04 24             	mov    DWORD PTR [esp],eax
c0017fa9:	e8 61 1a ff ff       	call   c0009a0f <malloc>
c0017fae:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0017fb5:	5a                   	pop    edx
c0017fb6:	59                   	pop    ecx
c0017fb7:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0017fba:	43                   	inc    ebx
c0017fbb:	50                   	push   eax
c0017fbc:	e8 7f 87 fe ff       	call   c0000740 <strcpy>
c0017fc1:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0017fc7:	83 c4 10             	add    esp,0x10
c0017fca:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017fcd:	85 c0                	test   eax,eax
c0017fcf:	75 cb                	jne    c0017f9c <Process::addArgs(char**)+0x24>
c0017fd1:	8d 76 00             	lea    esi,[esi+0x0]
c0017fd4:	5b                   	pop    ebx
c0017fd5:	5e                   	pop    esi
c0017fd6:	5f                   	pop    edi
c0017fd7:	c3                   	ret    

c0017fd8 <Process::Process(char const*, Process*, char**)>:
c0017fd8:	56                   	push   esi
c0017fd9:	53                   	push   ebx
c0017fda:	83 ec 14             	sub    esp,0x14
c0017fdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fe1:	05 0c 02 00 00       	add    eax,0x20c
c0017fe6:	bb 07 00 00 00       	mov    ebx,0x7
c0017feb:	89 c6                	mov    esi,eax
c0017fed:	8d 76 00             	lea    esi,[esi+0x0]
c0017ff0:	85 db                	test   ebx,ebx
c0017ff2:	78 14                	js     c0018008 <Process::Process(char const*, Process*, char**)+0x30>
c0017ff4:	83 ec 0c             	sub    esp,0xc
c0017ff7:	56                   	push   esi
c0017ff8:	e8 93 ae 00 00       	call   c0022e90 <ThreadControlBlock::ThreadControlBlock()>
c0017ffd:	83 c4 10             	add    esp,0x10
c0018000:	83 c6 5f             	add    esi,0x5f
c0018003:	4b                   	dec    ebx
c0018004:	eb ea                	jmp    c0017ff0 <Process::Process(char const*, Process*, char**)+0x18>
c0018006:	66 90                	xchg   ax,ax
c0018008:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001800c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0018013:	83 ec 0c             	sub    esp,0xc
c0018016:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001801a:	e8 19 c7 ff ff       	call   c0014738 <Krnl::newProcessEnv(Process*)>
c001801f:	83 c4 10             	add    esp,0x10
c0018022:	89 c2                	mov    edx,eax
c0018024:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018028:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001802e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018032:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001803b:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c0018040:	8d 50 01             	lea    edx,[eax+0x1]
c0018043:	89 15 d0 76 02 c0    	mov    DWORD PTR ds:0xc00276d0,edx
c0018049:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001804d:	89 02                	mov    DWORD PTR [edx],eax
c001804f:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0018057:	83 ec 0c             	sub    esp,0xc
c001805a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001805e:	e8 ac 19 ff ff       	call   c0009a0f <malloc>
c0018063:	83 c4 10             	add    esp,0x10
c0018066:	89 c3                	mov    ebx,eax
c0018068:	83 ec 08             	sub    esp,0x8
c001806b:	6a 00                	push   0x0
c001806d:	53                   	push   ebx
c001806e:	e8 b7 44 ff ff       	call   c000c52a <VAS::VAS(bool)>
c0018073:	83 c4 10             	add    esp,0x10
c0018076:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001807a:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0018080:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018084:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001808e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018092:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018096:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001809c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180a0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00180a6:	85 c0                	test   eax,eax
c00180a8:	74 42                	je     c00180ec <Process::Process(char const*, Process*, char**)+0x114>
c00180aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180ae:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00180b4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00180ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180be:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00180c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180c8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00180ce:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00180d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180d8:	05 0c 01 00 00       	add    eax,0x10c
c00180dd:	83 ec 08             	sub    esp,0x8
c00180e0:	52                   	push   edx
c00180e1:	50                   	push   eax
c00180e2:	e8 59 86 fe ff       	call   c0000740 <strcpy>
c00180e7:	83 c4 10             	add    esp,0x10
c00180ea:	eb 64                	jmp    c0018150 <Process::Process(char const*, Process*, char**)+0x178>
c00180ec:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c00180f4:	83 ec 0c             	sub    esp,0xc
c00180f7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00180fb:	e8 0f 19 ff ff       	call   c0009a0f <malloc>
c0018100:	83 c4 10             	add    esp,0x10
c0018103:	89 c3                	mov    ebx,eax
c0018105:	83 ec 08             	sub    esp,0x8
c0018108:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001810c:	53                   	push   ebx
c001810d:	e8 2a 2f ff ff       	call   c000b03c <VgaText::VgaText(char const*)>
c0018112:	83 c4 10             	add    esp,0x10
c0018115:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018119:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001811f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018123:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018129:	83 ec 0c             	sub    esp,0xc
c001812c:	50                   	push   eax
c001812d:	e8 c9 26 ff ff       	call   c000a7fb <addToTerminalCycle(VgaText*)>
c0018132:	83 c4 10             	add    esp,0x10
c0018135:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018139:	05 0c 01 00 00       	add    eax,0x10c
c001813e:	83 ec 08             	sub    esp,0x8
c0018141:	68 d0 5d 02 c0       	push   0xc0025dd0
c0018146:	50                   	push   eax
c0018147:	e8 f4 85 fe ff       	call   c0000740 <strcpy>
c001814c:	83 c4 10             	add    esp,0x10
c001814f:	90                   	nop
c0018150:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018154:	83 c0 0c             	add    eax,0xc
c0018157:	83 ec 08             	sub    esp,0x8
c001815a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001815e:	50                   	push   eax
c001815f:	e8 dc 85 fe ff       	call   c0000740 <strcpy>
c0018164:	83 c4 10             	add    esp,0x10
c0018167:	83 ec 08             	sub    esp,0x8
c001816a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001816e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018172:	e8 01 fe ff ff       	call   c0017f78 <Process::addArgs(char**)>
c0018177:	83 c4 10             	add    esp,0x10
c001817a:	83 ec 08             	sub    esp,0x8
c001817d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018181:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018185:	e8 89 ed ff ff       	call   c0016f13 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001818a:	83 c4 10             	add    esp,0x10
c001818d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018191:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018195:	83 f0 01             	xor    eax,0x1
c0018198:	88 c2                	mov    dl,al
c001819a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001819e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00181a4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00181a9:	83 ec 08             	sub    esp,0x8
c00181ac:	50                   	push   eax
c00181ad:	68 28 5e 02 c0       	push   0xc0025e28
c00181b2:	e8 48 4b ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00181b7:	83 c4 10             	add    esp,0x10
c00181ba:	90                   	nop
c00181bb:	83 c4 14             	add    esp,0x14
c00181be:	5b                   	pop    ebx
c00181bf:	5e                   	pop    esi
c00181c0:	c3                   	ret    
c00181c1:	90                   	nop
c00181c2:	66 90                	xchg   ax,ax

c00181c4 <Process::Process(bool, char const*, Process*, char**)>:
c00181c4:	56                   	push   esi
c00181c5:	53                   	push   ebx
c00181c6:	83 ec 24             	sub    esp,0x24
c00181c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00181cd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00181d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00181d5:	05 0c 02 00 00       	add    eax,0x20c
c00181da:	bb 07 00 00 00       	mov    ebx,0x7
c00181df:	89 c6                	mov    esi,eax
c00181e1:	8d 76 00             	lea    esi,[esi+0x0]
c00181e4:	85 db                	test   ebx,ebx
c00181e6:	78 14                	js     c00181fc <Process::Process(bool, char const*, Process*, char**)+0x38>
c00181e8:	83 ec 0c             	sub    esp,0xc
c00181eb:	56                   	push   esi
c00181ec:	e8 9f ac 00 00       	call   c0022e90 <ThreadControlBlock::ThreadControlBlock()>
c00181f1:	83 c4 10             	add    esp,0x10
c00181f4:	83 c6 5f             	add    esi,0x5f
c00181f7:	4b                   	dec    ebx
c00181f8:	eb ea                	jmp    c00181e4 <Process::Process(bool, char const*, Process*, char**)+0x20>
c00181fa:	66 90                	xchg   ax,ax
c00181fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018200:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0018207:	83 ec 0c             	sub    esp,0xc
c001820a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001820e:	e8 25 c5 ff ff       	call   c0014738 <Krnl::newProcessEnv(Process*)>
c0018213:	83 c4 10             	add    esp,0x10
c0018216:	89 c2                	mov    edx,eax
c0018218:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001821c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0018222:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018226:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001822f:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c0018234:	8d 50 01             	lea    edx,[eax+0x1]
c0018237:	89 15 d0 76 02 c0    	mov    DWORD PTR ds:0xc00276d0,edx
c001823d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018241:	89 02                	mov    DWORD PTR [edx],eax
c0018243:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001824b:	83 ec 0c             	sub    esp,0xc
c001824e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018252:	e8 b8 17 ff ff       	call   c0009a0f <malloc>
c0018257:	83 c4 10             	add    esp,0x10
c001825a:	89 c3                	mov    ebx,eax
c001825c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018261:	83 ec 08             	sub    esp,0x8
c0018264:	50                   	push   eax
c0018265:	53                   	push   ebx
c0018266:	e8 bf 42 ff ff       	call   c000c52a <VAS::VAS(bool)>
c001826b:	83 c4 10             	add    esp,0x10
c001826e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018272:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0018278:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001827c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018286:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001828a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001828e:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0018294:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018298:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001829e:	85 c0                	test   eax,eax
c00182a0:	74 42                	je     c00182e4 <Process::Process(bool, char const*, Process*, char**)+0x120>
c00182a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182a6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00182ac:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00182b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182b6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00182bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182c0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00182c6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00182cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182d0:	05 0c 01 00 00       	add    eax,0x10c
c00182d5:	83 ec 08             	sub    esp,0x8
c00182d8:	52                   	push   edx
c00182d9:	50                   	push   eax
c00182da:	e8 61 84 fe ff       	call   c0000740 <strcpy>
c00182df:	83 c4 10             	add    esp,0x10
c00182e2:	eb 64                	jmp    c0018348 <Process::Process(bool, char const*, Process*, char**)+0x184>
c00182e4:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c00182ec:	83 ec 0c             	sub    esp,0xc
c00182ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00182f3:	e8 17 17 ff ff       	call   c0009a0f <malloc>
c00182f8:	83 c4 10             	add    esp,0x10
c00182fb:	89 c3                	mov    ebx,eax
c00182fd:	83 ec 08             	sub    esp,0x8
c0018300:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018304:	53                   	push   ebx
c0018305:	e8 32 2d ff ff       	call   c000b03c <VgaText::VgaText(char const*)>
c001830a:	83 c4 10             	add    esp,0x10
c001830d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018311:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0018317:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001831b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018321:	83 ec 0c             	sub    esp,0xc
c0018324:	50                   	push   eax
c0018325:	e8 d1 24 ff ff       	call   c000a7fb <addToTerminalCycle(VgaText*)>
c001832a:	83 c4 10             	add    esp,0x10
c001832d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018331:	05 0c 01 00 00       	add    eax,0x10c
c0018336:	83 ec 08             	sub    esp,0x8
c0018339:	68 d0 5d 02 c0       	push   0xc0025dd0
c001833e:	50                   	push   eax
c001833f:	e8 fc 83 fe ff       	call   c0000740 <strcpy>
c0018344:	83 c4 10             	add    esp,0x10
c0018347:	90                   	nop
c0018348:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001834c:	83 c0 0c             	add    eax,0xc
c001834f:	83 ec 08             	sub    esp,0x8
c0018352:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018356:	50                   	push   eax
c0018357:	e8 e4 83 fe ff       	call   c0000740 <strcpy>
c001835c:	83 c4 10             	add    esp,0x10
c001835f:	83 ec 08             	sub    esp,0x8
c0018362:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018366:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001836a:	e8 09 fc ff ff       	call   c0017f78 <Process::addArgs(char**)>
c001836f:	83 c4 10             	add    esp,0x10
c0018372:	90                   	nop
c0018373:	83 c4 24             	add    esp,0x24
c0018376:	5b                   	pop    ebx
c0018377:	5e                   	pop    esi
c0018378:	c3                   	ret    
c0018379:	8d 76 00             	lea    esi,[esi+0x0]

c001837c <taskStartupFunction>:
c001837c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018381:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0018384:	c3                   	ret    
c0018385:	90                   	nop
c0018386:	66 90                	xchg   ax,ax

c0018388 <Semaphore::Semaphore(int)>:
c0018388:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001838c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018390:	89 10                	mov    DWORD PTR [eax],edx
c0018392:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018396:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001839d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183a1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00183a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183ac:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00183b3:	90                   	nop
c00183b4:	c3                   	ret    
c00183b5:	90                   	nop
c00183b6:	66 90                	xchg   ax,ax

c00183b8 <Mutex::Mutex()>:
c00183b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183bc:	6a 01                	push   0x1
c00183be:	50                   	push   eax
c00183bf:	e8 c4 ff ff ff       	call   c0018388 <Semaphore::Semaphore(int)>
c00183c4:	83 c4 08             	add    esp,0x8
c00183c7:	90                   	nop
c00183c8:	c3                   	ret    
c00183c9:	90                   	nop
c00183ca:	66 90                	xchg   ax,ax

c00183cc <Process::createThread(void (*)(void*), void*, int)>:
c00183cc:	57                   	push   edi
c00183cd:	31 c9                	xor    ecx,ecx
c00183cf:	56                   	push   esi
c00183d0:	53                   	push   ebx
c00183d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00183d5:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00183dc:	89 f2                	mov    edx,esi
c00183de:	66 90                	xchg   ax,ax
c00183e0:	0f b7 c2             	movzx  eax,dx
c00183e3:	83 e2 01             	and    edx,0x1
c00183e6:	74 14                	je     c00183fc <Process::createThread(void (*)(void*), void*, int)+0x30>
c00183e8:	d1 f8                	sar    eax,1
c00183ea:	41                   	inc    ecx
c00183eb:	89 c2                	mov    edx,eax
c00183ed:	83 f9 10             	cmp    ecx,0x10
c00183f0:	75 ee                	jne    c00183e0 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00183f2:	31 db                	xor    ebx,ebx
c00183f4:	89 d8                	mov    eax,ebx
c00183f6:	5b                   	pop    ebx
c00183f7:	5e                   	pop    esi
c00183f8:	5f                   	pop    edi
c00183f9:	c3                   	ret    
c00183fa:	66 90                	xchg   ax,ax
c00183fc:	b8 01 00 00 00       	mov    eax,0x1
c0018401:	d3 e0                	shl    eax,cl
c0018403:	09 c6                	or     esi,eax
c0018405:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018408:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001840f:	01 c0                	add    eax,eax
c0018411:	01 c8                	add    eax,ecx
c0018413:	8d 04 80             	lea    eax,[eax+eax*4]
c0018416:	01 d8                	add    eax,ebx
c0018418:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001841f:	75 0b                	jne    c001842c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0018421:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001842b:	90                   	nop
c001842c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018432:	83 ec 08             	sub    esp,0x8
c0018435:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018438:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001843b:	01 c0                	add    eax,eax
c001843d:	01 c8                	add    eax,ecx
c001843f:	8d 3c 80             	lea    edi,[eax+eax*4]
c0018442:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0018445:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001844b:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0018451:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018455:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001845b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0018461:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0018468:	89 ca                	mov    edx,ecx
c001846a:	f7 da                	neg    edx
c001846c:	c1 e2 15             	shl    edx,0x15
c001846f:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0018475:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001847b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001847f:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018489:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c001848f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018493:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018499:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00184a3:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00184ad:	53                   	push   ebx
c00184ae:	68 e4 91 02 c0       	push   0xc00291e4
c00184b3:	e8 78 a7 00 00       	call   c0022c30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00184b8:	83 c4 10             	add    esp,0x10
c00184bb:	89 d8                	mov    eax,ebx
c00184bd:	5b                   	pop    ebx
c00184be:	5e                   	pop    esi
c00184bf:	5f                   	pop    edi
c00184c0:	c3                   	ret    
c00184c1:	90                   	nop
c00184c2:	66 90                	xchg   ax,ax

c00184c4 <Process::createUserThread()>:
c00184c4:	83 ec 0c             	sub    esp,0xc
c00184c7:	68 80 00 00 00       	push   0x80
c00184cc:	6a 00                	push   0x0
c00184ce:	68 6c 7e 01 c0       	push   0xc0017e6c
c00184d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00184d7:	e8 f0 fe ff ff       	call   c00183cc <Process::createThread(void (*)(void*), void*, int)>
c00184dc:	83 c4 1c             	add    esp,0x1c
c00184df:	c3                   	ret    

c00184e0 <setupMultitasking(void (*)())>:
c00184e0:	56                   	push   esi
c00184e1:	53                   	push   ebx
c00184e2:	51                   	push   ecx
c00184e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00184e7:	eb 13                	jmp    c00184fc <setupMultitasking(void (*)())+0x1c>
c00184e9:	8d 76 00             	lea    esi,[esi+0x0]
c00184ec:	83 ec 0c             	sub    esp,0xc
c00184ef:	68 e4 91 02 c0       	push   0xc00291e4
c00184f4:	e8 7f a6 00 00       	call   c0022b78 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00184f9:	83 c4 10             	add    esp,0x10
c00184fc:	83 ec 0c             	sub    esp,0xc
c00184ff:	68 e4 91 02 c0       	push   0xc00291e4
c0018504:	e8 4b a6 00 00       	call   c0022b54 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018509:	83 c4 10             	add    esp,0x10
c001850c:	84 c0                	test   al,al
c001850e:	74 dc                	je     c00184ec <setupMultitasking(void (*)())+0xc>
c0018510:	83 ec 0c             	sub    esp,0xc
c0018513:	68 1f 07 00 00       	push   0x71f
c0018518:	e8 f2 14 ff ff       	call   c0009a0f <malloc>
c001851d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018524:	89 c3                	mov    ebx,eax
c0018526:	6a 00                	push   0x0
c0018528:	68 d4 5d 02 c0       	push   0xc0025dd4
c001852d:	6a 01                	push   0x1
c001852f:	50                   	push   eax
c0018530:	e8 8f fc ff ff       	call   c00181c4 <Process::Process(bool, char const*, Process*, char**)>
c0018535:	83 c4 14             	add    esp,0x14
c0018538:	89 1d f0 91 02 c0    	mov    DWORD PTR ds:0xc00291f0,ebx
c001853e:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0018544:	e8 c0 25 ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c0018549:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0018551:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c001855b:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018561:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018564:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c001856e:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018574:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001857a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018584:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c001858e:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018598:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001859e:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00185a8:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00185ae:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00185b8:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00185be:	58                   	pop    eax
c00185bf:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00185c5:	5a                   	pop    edx
c00185c6:	68 d0 5d 02 c0       	push   0xc0025dd0
c00185cb:	50                   	push   eax
c00185cc:	e8 6f 81 fe ff       	call   c0000740 <strcpy>
c00185d1:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00185d8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00185dc:	83 c4 14             	add    esp,0x14
c00185df:	5b                   	pop    ebx
c00185e0:	5e                   	pop    esi
c00185e1:	e9 a3 7c fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c00185e6:	66 90                	xchg   ax,ax

c00185e8 <schedule()>:
c00185e8:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c00185ed:	85 c0                	test   eax,eax
c00185ef:	74 0b                	je     c00185fc <schedule()+0x14>
c00185f1:	c7 05 c0 91 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00291c0,0x1
c00185fb:	c3                   	ret    
c00185fc:	53                   	push   ebx
c00185fd:	83 ec 14             	sub    esp,0x14
c0018600:	68 e4 91 02 c0       	push   0xc00291e4
c0018605:	e8 4a a5 00 00       	call   c0022b54 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001860a:	83 c4 10             	add    esp,0x10
c001860d:	84 c0                	test   al,al
c001860f:	75 3b                	jne    c001864c <schedule()+0x64>
c0018611:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018616:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018619:	4a                   	dec    edx
c001861a:	74 38                	je     c0018654 <schedule()+0x6c>
c001861c:	83 ec 0c             	sub    esp,0xc
c001861f:	68 e4 91 02 c0       	push   0xc00291e4
c0018624:	e8 47 a5 00 00       	call   c0022b70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018629:	c7 04 24 e4 91 02 c0 	mov    DWORD PTR [esp],0xc00291e4
c0018630:	89 c3                	mov    ebx,eax
c0018632:	e8 41 a5 00 00       	call   c0022b78 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018637:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001863e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018641:	e8 7e f8 ff ff       	call   c0017ec4 <switchToThread(ThreadControlBlock*)>
c0018646:	83 c4 10             	add    esp,0x10
c0018649:	8d 76 00             	lea    esi,[esi+0x0]
c001864c:	83 c4 08             	add    esp,0x8
c001864f:	5b                   	pop    ebx
c0018650:	c3                   	ret    
c0018651:	8d 76 00             	lea    esi,[esi+0x0]
c0018654:	83 ec 08             	sub    esp,0x8
c0018657:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001865e:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018664:	68 e4 91 02 c0       	push   0xc00291e4
c0018669:	e8 c2 a5 00 00       	call   c0022c30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001866e:	83 c4 10             	add    esp,0x10
c0018671:	eb a9                	jmp    c001861c <schedule()+0x34>
c0018673:	90                   	nop

c0018674 <Semaphore::tryAcquire()>:
c0018674:	53                   	push   ebx
c0018675:	83 ec 08             	sub    esp,0x8
c0018678:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001867c:	fa                   	cli    
c001867d:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0018682:	8d 50 01             	lea    edx,[eax+0x1]
c0018685:	89 15 c8 91 02 c0    	mov    DWORD PTR ds:0xc00291c8,edx
c001868b:	8b 15 c4 91 02 c0    	mov    edx,DWORD PTR ds:0xc00291c4
c0018691:	8d 5a 01             	lea    ebx,[edx+0x1]
c0018694:	89 1d c4 91 02 c0    	mov    DWORD PTR ds:0xc00291c4,ebx
c001869a:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001869d:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001869f:	7c 33                	jl     c00186d4 <Semaphore::tryAcquire()+0x60>
c00186a1:	89 15 c4 91 02 c0    	mov    DWORD PTR ds:0xc00291c4,edx
c00186a7:	85 d2                	test   edx,edx
c00186a9:	75 0d                	jne    c00186b8 <Semaphore::tryAcquire()+0x44>
c00186ab:	8b 15 c0 91 02 c0    	mov    edx,DWORD PTR ds:0xc00291c0
c00186b1:	85 d2                	test   edx,edx
c00186b3:	75 6b                	jne    c0018720 <Semaphore::tryAcquire()+0xac>
c00186b5:	8d 76 00             	lea    esi,[esi+0x0]
c00186b8:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c00186bd:	85 c0                	test   eax,eax
c00186bf:	74 0b                	je     c00186cc <Semaphore::tryAcquire()+0x58>
c00186c1:	8d 76 00             	lea    esi,[esi+0x0]
c00186c4:	31 c0                	xor    eax,eax
c00186c6:	83 c4 08             	add    esp,0x8
c00186c9:	5b                   	pop    ebx
c00186ca:	c3                   	ret    
c00186cb:	90                   	nop
c00186cc:	fb                   	sti    
c00186cd:	83 c4 08             	add    esp,0x8
c00186d0:	5b                   	pop    ebx
c00186d1:	c3                   	ret    
c00186d2:	66 90                	xchg   ax,ax
c00186d4:	43                   	inc    ebx
c00186d5:	89 15 c4 91 02 c0    	mov    DWORD PTR ds:0xc00291c4,edx
c00186db:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00186de:	85 d2                	test   edx,edx
c00186e0:	75 22                	jne    c0018704 <Semaphore::tryAcquire()+0x90>
c00186e2:	8b 0d c0 91 02 c0    	mov    ecx,DWORD PTR ds:0xc00291c0
c00186e8:	85 c9                	test   ecx,ecx
c00186ea:	74 18                	je     c0018704 <Semaphore::tryAcquire()+0x90>
c00186ec:	c7 05 c0 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291c0,0x0
c00186f6:	e8 ed fe ff ff       	call   c00185e8 <schedule()>
c00186fb:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0018700:	48                   	dec    eax
c0018701:	8d 76 00             	lea    esi,[esi+0x0]
c0018704:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0018709:	85 c0                	test   eax,eax
c001870b:	75 0b                	jne    c0018718 <Semaphore::tryAcquire()+0xa4>
c001870d:	fb                   	sti    
c001870e:	b0 01                	mov    al,0x1
c0018710:	83 c4 08             	add    esp,0x8
c0018713:	5b                   	pop    ebx
c0018714:	c3                   	ret    
c0018715:	8d 76 00             	lea    esi,[esi+0x0]
c0018718:	b0 01                	mov    al,0x1
c001871a:	83 c4 08             	add    esp,0x8
c001871d:	5b                   	pop    ebx
c001871e:	c3                   	ret    
c001871f:	90                   	nop
c0018720:	c7 05 c0 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291c0,0x0
c001872a:	e8 b9 fe ff ff       	call   c00185e8 <schedule()>
c001872f:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0018734:	48                   	dec    eax
c0018735:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c001873a:	85 c0                	test   eax,eax
c001873c:	75 86                	jne    c00186c4 <Semaphore::tryAcquire()+0x50>
c001873e:	eb 8c                	jmp    c00186cc <Semaphore::tryAcquire()+0x58>

c0018740 <Semaphore::assertLocked(char const*)>:
c0018740:	83 ec 0c             	sub    esp,0xc
c0018743:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018747:	fa                   	cli    
c0018748:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c001874e:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c0018753:	8d 48 01             	lea    ecx,[eax+0x1]
c0018756:	89 0d c4 91 02 c0    	mov    DWORD PTR ds:0xc00291c4,ecx
c001875c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001875e:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0018761:	7c 29                	jl     c001878c <Semaphore::assertLocked(char const*)+0x4c>
c0018763:	90                   	nop
c0018764:	a3 c4 91 02 c0       	mov    ds:0xc00291c4,eax
c0018769:	85 c0                	test   eax,eax
c001876b:	75 0b                	jne    c0018778 <Semaphore::assertLocked(char const*)+0x38>
c001876d:	a1 c0 91 02 c0       	mov    eax,ds:0xc00291c0
c0018772:	85 c0                	test   eax,eax
c0018774:	75 2e                	jne    c00187a4 <Semaphore::assertLocked(char const*)+0x64>
c0018776:	66 90                	xchg   ax,ax
c0018778:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c001877d:	48                   	dec    eax
c001877e:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0018783:	75 03                	jne    c0018788 <Semaphore::assertLocked(char const*)+0x48>
c0018785:	fb                   	sti    
c0018786:	66 90                	xchg   ax,ax
c0018788:	83 c4 0c             	add    esp,0xc
c001878b:	c3                   	ret    
c001878c:	83 ec 0c             	sub    esp,0xc
c001878f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018793:	e8 17 c1 ff ff       	call   c00148af <Krnl::panic(char const*)>
c0018798:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c001879d:	83 c4 10             	add    esp,0x10
c00187a0:	48                   	dec    eax
c00187a1:	eb c1                	jmp    c0018764 <Semaphore::assertLocked(char const*)+0x24>
c00187a3:	90                   	nop
c00187a4:	c7 05 c0 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291c0,0x0
c00187ae:	e8 35 fe ff ff       	call   c00185e8 <schedule()>
c00187b3:	eb c3                	jmp    c0018778 <Semaphore::assertLocked(char const*)+0x38>
c00187b5:	8d 76 00             	lea    esi,[esi+0x0]

c00187b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00187b8:	83 ec 0c             	sub    esp,0xc
c00187bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00187c4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00187c7:	e8 1c fe ff ff       	call   c00185e8 <schedule()>
c00187cc:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c00187d1:	48                   	dec    eax
c00187d2:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c00187d7:	75 03                	jne    c00187dc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00187d9:	fb                   	sti    
c00187da:	66 90                	xchg   ax,ax
c00187dc:	83 c4 0c             	add    esp,0xc
c00187df:	c3                   	ret    

c00187e0 <blockTask(TaskState)>:
c00187e0:	83 ec 0c             	sub    esp,0xc
c00187e3:	fa                   	cli    
c00187e4:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c00187ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00187ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187f3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00187f6:	e8 ed fd ff ff       	call   c00185e8 <schedule()>
c00187fb:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0018800:	48                   	dec    eax
c0018801:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0018806:	75 04                	jne    c001880c <blockTask(TaskState)+0x2c>
c0018808:	fb                   	sti    
c0018809:	8d 76 00             	lea    esi,[esi+0x0]
c001880c:	83 c4 0c             	add    esp,0xc
c001880f:	c3                   	ret    

c0018810 <waitTask(int, int*, int)>:
c0018810:	83 ec 18             	sub    esp,0x18
c0018813:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018818:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001881c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001881f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018823:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018828:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001882b:	6a 07                	push   0x7
c001882d:	e8 ae ff ff ff       	call   c00187e0 <blockTask(TaskState)>
c0018832:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018837:	83 c4 10             	add    esp,0x10
c001883a:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c001883d:	85 d2                	test   edx,edx
c001883f:	74 0b                	je     c001884c <waitTask(int, int*, int)+0x3c>
c0018841:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0018844:	89 02                	mov    DWORD PTR [edx],eax
c0018846:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001884b:	90                   	nop
c001884c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001884f:	83 c4 0c             	add    esp,0xc
c0018852:	c3                   	ret    
c0018853:	90                   	nop

c0018854 <milliTenthSleepUntil(unsigned int)>:
c0018854:	83 ec 0c             	sub    esp,0xc
c0018857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001885b:	39 05 cc 82 02 c0    	cmp    DWORD PTR ds:0xc00282cc,eax
c0018861:	76 05                	jbe    c0018868 <milliTenthSleepUntil(unsigned int)+0x14>
c0018863:	90                   	nop
c0018864:	83 c4 0c             	add    esp,0xc
c0018867:	c3                   	ret    
c0018868:	fa                   	cli    
c0018869:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c001886f:	83 ec 08             	sub    esp,0x8
c0018872:	ff 05 c4 91 02 c0    	inc    DWORD PTR ds:0xc00291c4
c0018878:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001887e:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0018881:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0018887:	68 d8 91 02 c0       	push   0xc00291d8
c001888c:	e8 9f a3 00 00       	call   c0022c30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018891:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018898:	e8 43 ff ff ff       	call   c00187e0 <blockTask(TaskState)>
c001889d:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c00188a2:	83 c4 10             	add    esp,0x10
c00188a5:	48                   	dec    eax
c00188a6:	a3 c4 91 02 c0       	mov    ds:0xc00291c4,eax
c00188ab:	85 c0                	test   eax,eax
c00188ad:	75 09                	jne    c00188b8 <milliTenthSleepUntil(unsigned int)+0x64>
c00188af:	a1 c0 91 02 c0       	mov    eax,ds:0xc00291c0
c00188b4:	85 c0                	test   eax,eax
c00188b6:	75 14                	jne    c00188cc <milliTenthSleepUntil(unsigned int)+0x78>
c00188b8:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c00188bd:	48                   	dec    eax
c00188be:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c00188c3:	75 9f                	jne    c0018864 <milliTenthSleepUntil(unsigned int)+0x10>
c00188c5:	fb                   	sti    
c00188c6:	83 c4 0c             	add    esp,0xc
c00188c9:	c3                   	ret    
c00188ca:	66 90                	xchg   ax,ax
c00188cc:	c7 05 c0 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291c0,0x0
c00188d6:	e8 0d fd ff ff       	call   c00185e8 <schedule()>
c00188db:	eb db                	jmp    c00188b8 <milliTenthSleepUntil(unsigned int)+0x64>
c00188dd:	8d 76 00             	lea    esi,[esi+0x0]

c00188e0 <milliTenthSleep(unsigned int)>:
c00188e0:	a1 cc 82 02 c0       	mov    eax,ds:0xc00282cc
c00188e5:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00188e9:	e9 66 ff ff ff       	jmp    c0018854 <milliTenthSleepUntil(unsigned int)>
c00188ee:	66 90                	xchg   ax,ax

c00188f0 <sleep(unsigned int)>:
c00188f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00188f4:	8d 04 80             	lea    eax,[eax+eax*4]
c00188f7:	8d 04 80             	lea    eax,[eax+eax*4]
c00188fa:	8d 04 80             	lea    eax,[eax+eax*4]
c00188fd:	8d 04 80             	lea    eax,[eax+eax*4]
c0018900:	c1 e0 04             	shl    eax,0x4
c0018903:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018907:	eb d7                	jmp    c00188e0 <milliTenthSleep(unsigned int)>
c0018909:	90                   	nop
c001890a:	66 90                	xchg   ax,ax

c001890c <Semaphore::acquire()>:
c001890c:	83 ec 0c             	sub    esp,0xc
c001890f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018913:	fa                   	cli    
c0018914:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c0018919:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c001891f:	8d 48 01             	lea    ecx,[eax+0x1]
c0018922:	89 0d c4 91 02 c0    	mov    DWORD PTR ds:0xc00291c4,ecx
c0018928:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001892b:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001892d:	7d 2d                	jge    c001895c <Semaphore::acquire()+0x50>
c001892f:	41                   	inc    ecx
c0018930:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0018933:	90                   	nop
c0018934:	a3 c4 91 02 c0       	mov    ds:0xc00291c4,eax
c0018939:	85 c0                	test   eax,eax
c001893b:	75 0b                	jne    c0018948 <Semaphore::acquire()+0x3c>
c001893d:	a1 c0 91 02 c0       	mov    eax,ds:0xc00291c0
c0018942:	85 c0                	test   eax,eax
c0018944:	75 62                	jne    c00189a8 <Semaphore::acquire()+0x9c>
c0018946:	66 90                	xchg   ax,ax
c0018948:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c001894d:	48                   	dec    eax
c001894e:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0018953:	75 03                	jne    c0018958 <Semaphore::acquire()+0x4c>
c0018955:	fb                   	sti    
c0018956:	66 90                	xchg   ax,ax
c0018958:	83 c4 0c             	add    esp,0xc
c001895b:	c3                   	ret    
c001895c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018961:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0018968:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001896b:	85 c9                	test   ecx,ecx
c001896d:	74 4d                	je     c00189bc <Semaphore::acquire()+0xb0>
c001896f:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0018972:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018978:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001897b:	90                   	nop
c001897c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018981:	83 ec 0c             	sub    esp,0xc
c0018984:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0018987:	68 50 5e 02 c0       	push   0xc0025e50
c001898c:	e8 6e 43 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0018991:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0018998:	e8 43 fe ff ff       	call   c00187e0 <blockTask(TaskState)>
c001899d:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c00189a2:	83 c4 10             	add    esp,0x10
c00189a5:	48                   	dec    eax
c00189a6:	eb 8c                	jmp    c0018934 <Semaphore::acquire()+0x28>
c00189a8:	c7 05 c0 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291c0,0x0
c00189b2:	e8 31 fc ff ff       	call   c00185e8 <schedule()>
c00189b7:	eb 8f                	jmp    c0018948 <Semaphore::acquire()+0x3c>
c00189b9:	8d 76 00             	lea    esi,[esi+0x0]
c00189bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00189c1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00189c4:	eb b6                	jmp    c001897c <Semaphore::acquire()+0x70>
c00189c6:	66 90                	xchg   ax,ax

c00189c8 <taskReturned>:
c00189c8:	83 ec 18             	sub    esp,0x18
c00189cb:	68 70 5e 02 c0       	push   0xc0025e70
c00189d0:	e8 da be ff ff       	call   c00148af <Krnl::panic(char const*)>
c00189d5:	83 c4 10             	add    esp,0x10
c00189d8:	83 ec 0c             	sub    esp,0xc
c00189db:	6a 02                	push   0x2
c00189dd:	e8 fe fd ff ff       	call   c00187e0 <blockTask(TaskState)>
c00189e2:	fa                   	cli    
c00189e3:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c00189e9:	e8 fa fb ff ff       	call   c00185e8 <schedule()>
c00189ee:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c00189f3:	83 c4 10             	add    esp,0x10
c00189f6:	48                   	dec    eax
c00189f7:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c00189fc:	85 c0                	test   eax,eax
c00189fe:	75 d8                	jne    c00189d8 <taskReturned+0x10>
c0018a00:	fb                   	sti    
c0018a01:	eb d5                	jmp    c00189d8 <taskReturned+0x10>
c0018a03:	90                   	nop

c0018a04 <Thr::processFromPID(int)>:
c0018a04:	57                   	push   edi
c0018a05:	56                   	push   esi
c0018a06:	53                   	push   ebx
c0018a07:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018a0b:	fa                   	cli    
c0018a0c:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0018a12:	83 ec 0c             	sub    esp,0xc
c0018a15:	68 e4 91 02 c0       	push   0xc00291e4
c0018a1a:	e8 51 a1 00 00       	call   c0022b70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018a1f:	83 c4 10             	add    esp,0x10
c0018a22:	89 c7                	mov    edi,eax
c0018a24:	eb 16                	jmp    c0018a3c <Thr::processFromPID(int)+0x38>
c0018a26:	66 90                	xchg   ax,ax
c0018a28:	83 ec 0c             	sub    esp,0xc
c0018a2b:	68 e4 91 02 c0       	push   0xc00291e4
c0018a30:	e8 3b a1 00 00       	call   c0022b70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018a35:	83 c4 10             	add    esp,0x10
c0018a38:	39 f8                	cmp    eax,edi
c0018a3a:	74 4c                	je     c0018a88 <Thr::processFromPID(int)+0x84>
c0018a3c:	83 ec 0c             	sub    esp,0xc
c0018a3f:	68 e4 91 02 c0       	push   0xc00291e4
c0018a44:	e8 27 a1 00 00       	call   c0022b70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018a49:	c7 04 24 e4 91 02 c0 	mov    DWORD PTR [esp],0xc00291e4
c0018a50:	89 c3                	mov    ebx,eax
c0018a52:	e8 21 a1 00 00       	call   c0022b78 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018a57:	58                   	pop    eax
c0018a58:	5a                   	pop    edx
c0018a59:	53                   	push   ebx
c0018a5a:	68 e4 91 02 c0       	push   0xc00291e4
c0018a5f:	e8 cc a1 00 00       	call   c0022c30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018a64:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018a67:	83 c4 10             	add    esp,0x10
c0018a6a:	39 30                	cmp    DWORD PTR [eax],esi
c0018a6c:	75 ba                	jne    c0018a28 <Thr::processFromPID(int)+0x24>
c0018a6e:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0018a73:	48                   	dec    eax
c0018a74:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0018a79:	74 09                	je     c0018a84 <Thr::processFromPID(int)+0x80>
c0018a7b:	90                   	nop
c0018a7c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018a7f:	5b                   	pop    ebx
c0018a80:	5e                   	pop    esi
c0018a81:	5f                   	pop    edi
c0018a82:	c3                   	ret    
c0018a83:	90                   	nop
c0018a84:	fb                   	sti    
c0018a85:	eb f5                	jmp    c0018a7c <Thr::processFromPID(int)+0x78>
c0018a87:	90                   	nop
c0018a88:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0018a8d:	48                   	dec    eax
c0018a8e:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0018a93:	75 07                	jne    c0018a9c <Thr::processFromPID(int)+0x98>
c0018a95:	fb                   	sti    
c0018a96:	5b                   	pop    ebx
c0018a97:	5e                   	pop    esi
c0018a98:	5f                   	pop    edi
c0018a99:	c3                   	ret    
c0018a9a:	66 90                	xchg   ax,ax
c0018a9c:	5b                   	pop    ebx
c0018a9d:	31 c0                	xor    eax,eax
c0018a9f:	5e                   	pop    esi
c0018aa0:	5f                   	pop    edi
c0018aa1:	c3                   	ret    
c0018aa2:	66 90                	xchg   ax,ax

c0018aa4 <unblockTask(ThreadControlBlock*)>:
c0018aa4:	53                   	push   ebx
c0018aa5:	83 ec 08             	sub    esp,0x8
c0018aa8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018aac:	fa                   	cli    
c0018aad:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0018ab3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018ab6:	85 c0                	test   eax,eax
c0018ab8:	74 66                	je     c0018b20 <unblockTask(ThreadControlBlock*)+0x7c>
c0018aba:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018abd:	48                   	dec    eax
c0018abe:	74 38                	je     c0018af8 <unblockTask(ThreadControlBlock*)+0x54>
c0018ac0:	83 ec 0c             	sub    esp,0xc
c0018ac3:	68 e4 91 02 c0       	push   0xc00291e4
c0018ac8:	e8 a3 a0 00 00       	call   c0022b70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018acd:	83 c4 10             	add    esp,0x10
c0018ad0:	85 c0                	test   eax,eax
c0018ad2:	75 1c                	jne    c0018af0 <unblockTask(ThreadControlBlock*)+0x4c>
c0018ad4:	eb 5e                	jmp    c0018b34 <unblockTask(ThreadControlBlock*)+0x90>
c0018ad6:	66 90                	xchg   ax,ax
c0018ad8:	83 ec 08             	sub    esp,0x8
c0018adb:	50                   	push   eax
c0018adc:	68 e4 91 02 c0       	push   0xc00291e4
c0018ae1:	e8 3a a4 00 00       	call   c0022f20 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018ae6:	83 c4 10             	add    esp,0x10
c0018ae9:	85 c0                	test   eax,eax
c0018aeb:	74 47                	je     c0018b34 <unblockTask(ThreadControlBlock*)+0x90>
c0018aed:	8d 76 00             	lea    esi,[esi+0x0]
c0018af0:	39 c3                	cmp    ebx,eax
c0018af2:	75 e4                	jne    c0018ad8 <unblockTask(ThreadControlBlock*)+0x34>
c0018af4:	eb 12                	jmp    c0018b08 <unblockTask(ThreadControlBlock*)+0x64>
c0018af6:	66 90                	xchg   ax,ax
c0018af8:	83 ec 0c             	sub    esp,0xc
c0018afb:	68 f2 5d 02 c0       	push   0xc0025df2
c0018b00:	e8 fa 41 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0018b05:	83 c4 10             	add    esp,0x10
c0018b08:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0018b0d:	48                   	dec    eax
c0018b0e:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0018b13:	75 03                	jne    c0018b18 <unblockTask(ThreadControlBlock*)+0x74>
c0018b15:	fb                   	sti    
c0018b16:	66 90                	xchg   ax,ax
c0018b18:	83 c4 08             	add    esp,0x8
c0018b1b:	5b                   	pop    ebx
c0018b1c:	c3                   	ret    
c0018b1d:	8d 76 00             	lea    esi,[esi+0x0]
c0018b20:	83 ec 0c             	sub    esp,0xc
c0018b23:	68 db 5d 02 c0       	push   0xc0025ddb
c0018b28:	e8 d2 41 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0018b2d:	83 c4 10             	add    esp,0x10
c0018b30:	eb d6                	jmp    c0018b08 <unblockTask(ThreadControlBlock*)+0x64>
c0018b32:	66 90                	xchg   ax,ax
c0018b34:	83 ec 08             	sub    esp,0x8
c0018b37:	53                   	push   ebx
c0018b38:	68 e4 91 02 c0       	push   0xc00291e4
c0018b3d:	e8 ee a0 00 00       	call   c0022c30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018b42:	83 c4 10             	add    esp,0x10
c0018b45:	eb c1                	jmp    c0018b08 <unblockTask(ThreadControlBlock*)+0x64>
c0018b47:	90                   	nop

c0018b48 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0018b48:	55                   	push   ebp
c0018b49:	57                   	push   edi
c0018b4a:	56                   	push   esi
c0018b4b:	53                   	push   ebx
c0018b4c:	83 ec 1c             	sub    esp,0x1c
c0018b4f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018b53:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018b56:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0018b5c:	85 ff                	test   edi,edi
c0018b5e:	7e 24                	jle    c0018b84 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0018b60:	31 f6                	xor    esi,esi
c0018b62:	66 90                	xchg   ax,ax
c0018b64:	83 ec 0c             	sub    esp,0xc
c0018b67:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c0018b6e:	46                   	inc    esi
c0018b6f:	e8 ab 0e ff ff       	call   c0009a1f <free>
c0018b74:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018b77:	83 c4 10             	add    esp,0x10
c0018b7a:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0018b80:	7f e2                	jg     c0018b64 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0018b82:	66 90                	xchg   ax,ax
c0018b84:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018b8e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0018b93:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0018b96:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0018b99:	d3 c0                	rol    eax,cl
c0018b9b:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0018ba2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018ba5:	89 f7                	mov    edi,esi
c0018ba7:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0018baf:	0f 85 73 01 00 00    	jne    c0018d28 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018bb5:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0018bbb:	85 ed                	test   ebp,ebp
c0018bbd:	74 1d                	je     c0018bdc <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0018bbf:	83 ec 0c             	sub    esp,0xc
c0018bc2:	55                   	push   ebp
c0018bc3:	e8 8c ba ff ff       	call   c0014654 <EnvVarContainer::~EnvVarContainer()>
c0018bc8:	59                   	pop    ecx
c0018bc9:	5e                   	pop    esi
c0018bca:	6a 0c                	push   0xc
c0018bcc:	55                   	push   ebp
c0018bcd:	e8 4c 40 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0018bd2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018bd5:	83 c4 10             	add    esp,0x10
c0018bd8:	89 f7                	mov    edi,esi
c0018bda:	66 90                	xchg   ax,ax
c0018bdc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018be2:	85 c0                	test   eax,eax
c0018be4:	0f 84 b2 00 00 00    	je     c0018c9c <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018bea:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0018bed:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018bf1:	31 c9                	xor    ecx,ecx
c0018bf3:	eb 17                	jmp    c0018c0c <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0018bf5:	8d 76 00             	lea    esi,[esi+0x0]
c0018bf8:	41                   	inc    ecx
c0018bf9:	83 f9 10             	cmp    ecx,0x10
c0018bfc:	0f 84 9a 00 00 00    	je     c0018c9c <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018c02:	66 90                	xchg   ax,ax
c0018c04:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018c0a:	66 90                	xchg   ax,ax
c0018c0c:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0018c13:	d3 fa                	sar    edx,cl
c0018c15:	83 e2 01             	and    edx,0x1
c0018c18:	74 de                	je     c0018bf8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018c1a:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0018c1d:	01 d2                	add    edx,edx
c0018c1f:	01 ca                	add    edx,ecx
c0018c21:	8d 14 92             	lea    edx,[edx+edx*4]
c0018c24:	01 d0                	add    eax,edx
c0018c26:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0018c2c:	83 fd 07             	cmp    ebp,0x7
c0018c2f:	75 c7                	jne    c0018bf8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018c31:	05 40 02 00 00       	add    eax,0x240
c0018c36:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0018c39:	83 fd ff             	cmp    ebp,0xffffffff
c0018c3c:	0f 8c ee 00 00 00    	jl     c0018d30 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0018c42:	0f 84 ac 01 00 00    	je     c0018df4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0018c48:	85 ed                	test   ebp,ebp
c0018c4a:	0f 84 90 01 00 00    	je     c0018de0 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0018c50:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0018c52:	75 a4                	jne    c0018bf8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018c54:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018c5a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018c5e:	01 d0                	add    eax,edx
c0018c60:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018c64:	83 ec 0c             	sub    esp,0xc
c0018c67:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0018c6d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018c70:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018c76:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0018c7d:	50                   	push   eax
c0018c7e:	e8 21 fe ff ff       	call   c0018aa4 <unblockTask(ThreadControlBlock*)>
c0018c83:	83 c4 10             	add    esp,0x10
c0018c86:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018c89:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018c8d:	89 f7                	mov    edi,esi
c0018c8f:	41                   	inc    ecx
c0018c90:	83 f9 10             	cmp    ecx,0x10
c0018c93:	0f 85 6b ff ff ff    	jne    c0018c04 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0018c99:	8d 76 00             	lea    esi,[esi+0x0]
c0018c9c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0018ca2:	85 c0                	test   eax,eax
c0018ca4:	74 62                	je     c0018d08 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018ca6:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0018cac:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0018cb2:	74 54                	je     c0018d08 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018cb4:	83 ec 0c             	sub    esp,0xc
c0018cb7:	68 e4 91 02 c0       	push   0xc00291e4
c0018cbc:	e8 af 9e 00 00       	call   c0022b70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018cc1:	c7 04 24 e4 91 02 c0 	mov    DWORD PTR [esp],0xc00291e4
c0018cc8:	89 c7                	mov    edi,eax
c0018cca:	e8 85 9e 00 00       	call   c0022b54 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018ccf:	83 c4 10             	add    esp,0x10
c0018cd2:	84 c0                	test   al,al
c0018cd4:	0f 84 ce 00 00 00    	je     c0018da8 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c0018cda:	66 90                	xchg   ax,ax
c0018cdc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018cdf:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018ce5:	85 d2                	test   edx,edx
c0018ce7:	74 0f                	je     c0018cf8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0018ce9:	83 ec 0c             	sub    esp,0xc
c0018cec:	8b 02                	mov    eax,DWORD PTR [edx]
c0018cee:	52                   	push   edx
c0018cef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018cf2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018cf5:	83 c4 10             	add    esp,0x10
c0018cf8:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0018d02:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0018d05:	8d 76 00             	lea    esi,[esi+0x0]
c0018d08:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0018d0e:	85 db                	test   ebx,ebx
c0018d10:	74 16                	je     c0018d28 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018d12:	83 ec 0c             	sub    esp,0xc
c0018d15:	53                   	push   ebx
c0018d16:	e8 e9 31 ff ff       	call   c000bf04 <VAS::~VAS()>
c0018d1b:	58                   	pop    eax
c0018d1c:	5a                   	pop    edx
c0018d1d:	6a 14                	push   0x14
c0018d1f:	53                   	push   ebx
c0018d20:	e8 f9 3e ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0018d25:	83 c4 10             	add    esp,0x10
c0018d28:	83 c4 1c             	add    esp,0x1c
c0018d2b:	5b                   	pop    ebx
c0018d2c:	5e                   	pop    esi
c0018d2d:	5f                   	pop    edi
c0018d2e:	5d                   	pop    ebp
c0018d2f:	c3                   	ret    
c0018d30:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018d34:	83 ec 0c             	sub    esp,0xc
c0018d37:	68 a4 5e 02 c0       	push   0xc0025ea4
c0018d3c:	e8 6e bb ff ff       	call   c00148af <Krnl::panic(char const*)>
c0018d41:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018d44:	83 c4 10             	add    esp,0x10
c0018d47:	89 f7                	mov    edi,esi
c0018d49:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018d4d:	e9 a6 fe ff ff       	jmp    c0018bf8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018d52:	66 90                	xchg   ax,ax
c0018d54:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018d5a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0018d60:	75 1e                	jne    c0018d80 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018d62:	83 ec 0c             	sub    esp,0xc
c0018d65:	68 0c 5f 02 c0       	push   0xc0025f0c
c0018d6a:	e8 90 3f ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0018d6f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018d76:	e8 65 fa ff ff       	call   c00187e0 <blockTask(TaskState)>
c0018d7b:	83 c4 10             	add    esp,0x10
c0018d7e:	66 90                	xchg   ax,ax
c0018d80:	83 ec 08             	sub    esp,0x8
c0018d83:	56                   	push   esi
c0018d84:	68 e4 91 02 c0       	push   0xc00291e4
c0018d89:	e8 a2 9e 00 00       	call   c0022c30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018d8e:	c7 04 24 e4 91 02 c0 	mov    DWORD PTR [esp],0xc00291e4
c0018d95:	e8 d6 9d 00 00       	call   c0022b70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018d9a:	83 c4 10             	add    esp,0x10
c0018d9d:	39 f8                	cmp    eax,edi
c0018d9f:	0f 84 37 ff ff ff    	je     c0018cdc <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c0018da5:	8d 76 00             	lea    esi,[esi+0x0]
c0018da8:	83 ec 0c             	sub    esp,0xc
c0018dab:	68 e4 91 02 c0       	push   0xc00291e4
c0018db0:	e8 bb 9d 00 00       	call   c0022b70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018db5:	c7 04 24 e4 91 02 c0 	mov    DWORD PTR [esp],0xc00291e4
c0018dbc:	89 c6                	mov    esi,eax
c0018dbe:	e8 b5 9d 00 00       	call   c0022b78 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018dc3:	83 c4 10             	add    esp,0x10
c0018dc6:	39 f3                	cmp    ebx,esi
c0018dc8:	74 b6                	je     c0018d80 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018dca:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0018dcd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018dd0:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0018dd6:	75 a8                	jne    c0018d80 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018dd8:	e9 77 ff ff ff       	jmp    c0018d54 <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0018ddd:	8d 76 00             	lea    esi,[esi+0x0]
c0018de0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018de4:	83 ec 0c             	sub    esp,0xc
c0018de7:	68 d8 5e 02 c0       	push   0xc0025ed8
c0018dec:	e9 4b ff ff ff       	jmp    c0018d3c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0018df1:	8d 76 00             	lea    esi,[esi+0x0]
c0018df4:	8b 36                	mov    esi,DWORD PTR [esi]
c0018df6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018dfa:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0018dfd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018e00:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0018e06:	01 d7                	add    edi,edx
c0018e08:	89 f8                	mov    eax,edi
c0018e0a:	e9 51 fe ff ff       	jmp    c0018c60 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c0018e0f:	90                   	nop

c0018e10 <cleanerTaskFunction(void*)>:
c0018e10:	53                   	push   ebx
c0018e11:	83 ec 08             	sub    esp,0x8
c0018e14:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0018e19:	48                   	dec    eax
c0018e1a:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0018e1f:	75 03                	jne    c0018e24 <cleanerTaskFunction(void*)+0x14>
c0018e21:	fb                   	sti    
c0018e22:	66 90                	xchg   ax,ax
c0018e24:	fa                   	cli    
c0018e25:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0018e2a:	80 3d ac 91 02 c0 00 	cmp    BYTE PTR ds:0xc00291ac,0x0
c0018e31:	8d 50 01             	lea    edx,[eax+0x1]
c0018e34:	89 15 c8 91 02 c0    	mov    DWORD PTR ds:0xc00291c8,edx
c0018e3a:	0f 84 ac 00 00 00    	je     c0018eec <cleanerTaskFunction(void*)+0xdc>
c0018e40:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0018e45:	85 c0                	test   eax,eax
c0018e47:	75 03                	jne    c0018e4c <cleanerTaskFunction(void*)+0x3c>
c0018e49:	fb                   	sti    
c0018e4a:	66 90                	xchg   ax,ax
c0018e4c:	c6 05 ac 91 02 c0 00 	mov    BYTE PTR ds:0xc00291ac,0x0
c0018e53:	fa                   	cli    
c0018e54:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0018e5a:	ff 05 c4 91 02 c0    	inc    DWORD PTR ds:0xc00291c4
c0018e60:	fa                   	cli    
c0018e61:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0018e67:	eb 2b                	jmp    c0018e94 <cleanerTaskFunction(void*)+0x84>
c0018e69:	8d 76 00             	lea    esi,[esi+0x0]
c0018e6c:	83 ec 0c             	sub    esp,0xc
c0018e6f:	68 cc 91 02 c0       	push   0xc00291cc
c0018e74:	e8 f7 9c 00 00       	call   c0022b70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018e79:	c7 04 24 cc 91 02 c0 	mov    DWORD PTR [esp],0xc00291cc
c0018e80:	89 c3                	mov    ebx,eax
c0018e82:	e8 f1 9c 00 00       	call   c0022b78 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018e87:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018e8a:	e8 b9 fc ff ff       	call   c0018b48 <cleanupTerminatedTask(ThreadControlBlock*)>
c0018e8f:	83 c4 10             	add    esp,0x10
c0018e92:	66 90                	xchg   ax,ax
c0018e94:	83 ec 0c             	sub    esp,0xc
c0018e97:	68 cc 91 02 c0       	push   0xc00291cc
c0018e9c:	e8 b3 9c 00 00       	call   c0022b54 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018ea1:	83 c4 10             	add    esp,0x10
c0018ea4:	84 c0                	test   al,al
c0018ea6:	74 c4                	je     c0018e6c <cleanerTaskFunction(void*)+0x5c>
c0018ea8:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0018ead:	48                   	dec    eax
c0018eae:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0018eb3:	75 03                	jne    c0018eb8 <cleanerTaskFunction(void*)+0xa8>
c0018eb5:	fb                   	sti    
c0018eb6:	66 90                	xchg   ax,ax
c0018eb8:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c0018ebd:	48                   	dec    eax
c0018ebe:	a3 c4 91 02 c0       	mov    ds:0xc00291c4,eax
c0018ec3:	0f 85 4b ff ff ff    	jne    c0018e14 <cleanerTaskFunction(void*)+0x4>
c0018ec9:	a1 c0 91 02 c0       	mov    eax,ds:0xc00291c0
c0018ece:	85 c0                	test   eax,eax
c0018ed0:	0f 84 3e ff ff ff    	je     c0018e14 <cleanerTaskFunction(void*)+0x4>
c0018ed6:	c7 05 c0 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291c0,0x0
c0018ee0:	e8 03 f7 ff ff       	call   c00185e8 <schedule()>
c0018ee5:	e9 2a ff ff ff       	jmp    c0018e14 <cleanerTaskFunction(void*)+0x4>
c0018eea:	66 90                	xchg   ax,ax
c0018eec:	83 ec 0c             	sub    esp,0xc
c0018eef:	6a 02                	push   0x2
c0018ef1:	e8 c2 f8 ff ff       	call   c00187b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018ef6:	83 c4 10             	add    esp,0x10
c0018ef9:	e9 4e ff ff ff       	jmp    c0018e4c <cleanerTaskFunction(void*)+0x3c>
c0018efe:	66 90                	xchg   ax,ax

c0018f00 <terminateTask(int)>:
c0018f00:	83 ec 14             	sub    esp,0x14
c0018f03:	fa                   	cli    
c0018f04:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0018f0a:	ff 05 c4 91 02 c0    	inc    DWORD PTR ds:0xc00291c4
c0018f10:	fa                   	cli    
c0018f11:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0018f17:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018f1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f20:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0018f23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f28:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0018f2b:	50                   	push   eax
c0018f2c:	68 cc 91 02 c0       	push   0xc00291cc
c0018f31:	e8 fa 9c 00 00       	call   c0022c30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018f36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f3b:	83 c4 10             	add    esp,0x10
c0018f3e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0018f45:	a1 a8 91 02 c0       	mov    eax,ds:0xc00291a8
c0018f4a:	85 c0                	test   eax,eax
c0018f4c:	74 5e                	je     c0018fac <terminateTask(int)+0xac>
c0018f4e:	83 ec 0c             	sub    esp,0xc
c0018f51:	c6 05 ac 91 02 c0 01 	mov    BYTE PTR ds:0xc00291ac,0x1
c0018f58:	50                   	push   eax
c0018f59:	e8 46 fb ff ff       	call   c0018aa4 <unblockTask(ThreadControlBlock*)>
c0018f5e:	83 c4 10             	add    esp,0x10
c0018f61:	8d 76 00             	lea    esi,[esi+0x0]
c0018f64:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0018f69:	48                   	dec    eax
c0018f6a:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0018f6f:	75 03                	jne    c0018f74 <terminateTask(int)+0x74>
c0018f71:	fb                   	sti    
c0018f72:	66 90                	xchg   ax,ax
c0018f74:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c0018f79:	48                   	dec    eax
c0018f7a:	a3 c4 91 02 c0       	mov    ds:0xc00291c4,eax
c0018f7f:	75 0b                	jne    c0018f8c <terminateTask(int)+0x8c>
c0018f81:	83 3d c0 91 02 c0 00 	cmp    DWORD PTR ds:0xc00291c0,0x0
c0018f88:	75 36                	jne    c0018fc0 <terminateTask(int)+0xc0>
c0018f8a:	66 90                	xchg   ax,ax
c0018f8c:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0018f91:	48                   	dec    eax
c0018f92:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0018f97:	75 03                	jne    c0018f9c <terminateTask(int)+0x9c>
c0018f99:	fb                   	sti    
c0018f9a:	66 90                	xchg   ax,ax
c0018f9c:	fa                   	cli    
c0018f9d:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0018fa3:	90                   	nop
c0018fa4:	e8 3f f6 ff ff       	call   c00185e8 <schedule()>
c0018fa9:	eb e1                	jmp    c0018f8c <terminateTask(int)+0x8c>
c0018fab:	90                   	nop
c0018fac:	83 ec 0c             	sub    esp,0xc
c0018faf:	68 09 5e 02 c0       	push   0xc0025e09
c0018fb4:	e8 46 3d ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0018fb9:	83 c4 10             	add    esp,0x10
c0018fbc:	eb a6                	jmp    c0018f64 <terminateTask(int)+0x64>
c0018fbe:	66 90                	xchg   ax,ax
c0018fc0:	c7 05 c0 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291c0,0x0
c0018fca:	eb d8                	jmp    c0018fa4 <terminateTask(int)+0xa4>

c0018fcc <Thr::terminateFromIRQ(int)>:
c0018fcc:	83 ec 18             	sub    esp,0x18
c0018fcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018fd3:	e8 28 ff ff ff       	call   c0018f00 <terminateTask(int)>

c0018fd8 <Semaphore::release()>:
c0018fd8:	83 ec 0c             	sub    esp,0xc
c0018fdb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018fdf:	fa                   	cli    
c0018fe0:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c0018fe5:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0018feb:	8d 48 01             	lea    ecx,[eax+0x1]
c0018fee:	89 0d c4 91 02 c0    	mov    DWORD PTR ds:0xc00291c4,ecx
c0018ff4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0018ff7:	85 c9                	test   ecx,ecx
c0018ff9:	74 41                	je     c001903c <Semaphore::release()+0x64>
c0018ffb:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0018ffe:	83 ec 0c             	sub    esp,0xc
c0019001:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0019004:	51                   	push   ecx
c0019005:	e8 9a fa ff ff       	call   c0018aa4 <unblockTask(ThreadControlBlock*)>
c001900a:	a1 c4 91 02 c0       	mov    eax,ds:0xc00291c4
c001900f:	83 c4 10             	add    esp,0x10
c0019012:	48                   	dec    eax
c0019013:	90                   	nop
c0019014:	a3 c4 91 02 c0       	mov    ds:0xc00291c4,eax
c0019019:	85 c0                	test   eax,eax
c001901b:	75 0b                	jne    c0019028 <Semaphore::release()+0x50>
c001901d:	a1 c0 91 02 c0       	mov    eax,ds:0xc00291c0
c0019022:	85 c0                	test   eax,eax
c0019024:	75 1e                	jne    c0019044 <Semaphore::release()+0x6c>
c0019026:	66 90                	xchg   ax,ax
c0019028:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c001902d:	48                   	dec    eax
c001902e:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0019033:	75 03                	jne    c0019038 <Semaphore::release()+0x60>
c0019035:	fb                   	sti    
c0019036:	66 90                	xchg   ax,ax
c0019038:	83 c4 0c             	add    esp,0xc
c001903b:	c3                   	ret    
c001903c:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001903f:	eb d3                	jmp    c0019014 <Semaphore::release()+0x3c>
c0019041:	8d 76 00             	lea    esi,[esi+0x0]
c0019044:	c7 05 c0 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291c0,0x0
c001904e:	e8 95 f5 ff ff       	call   c00185e8 <schedule()>
c0019053:	eb d3                	jmp    c0019028 <Semaphore::release()+0x50>
c0019055:	8d 76 00             	lea    esi,[esi+0x0]

c0019058 <__static_initialization_and_destruction_0(int, int)>:
c0019058:	83 ec 0c             	sub    esp,0xc
c001905b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0019060:	0f 85 8e 00 00 00    	jne    c00190f4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0019066:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001906e:	0f 85 80 00 00 00    	jne    c00190f4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0019074:	83 ec 0c             	sub    esp,0xc
c0019077:	68 e4 91 02 c0       	push   0xc00291e4
c001907c:	e8 5b 9e 00 00       	call   c0022edc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019081:	83 c4 10             	add    esp,0x10
c0019084:	83 ec 04             	sub    esp,0x4
c0019087:	68 00 6f 02 c0       	push   0xc0026f00
c001908c:	68 e4 91 02 c0       	push   0xc00291e4
c0019091:	68 8c 2e 02 c0       	push   0xc0022e8c
c0019096:	e8 fd 3a ff ff       	call   c000cb98 <__cxa_atexit>
c001909b:	83 c4 10             	add    esp,0x10
c001909e:	83 ec 0c             	sub    esp,0xc
c00190a1:	68 d8 91 02 c0       	push   0xc00291d8
c00190a6:	e8 31 9e 00 00       	call   c0022edc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00190ab:	83 c4 10             	add    esp,0x10
c00190ae:	83 ec 04             	sub    esp,0x4
c00190b1:	68 00 6f 02 c0       	push   0xc0026f00
c00190b6:	68 d8 91 02 c0       	push   0xc00291d8
c00190bb:	68 8c 2e 02 c0       	push   0xc0022e8c
c00190c0:	e8 d3 3a ff ff       	call   c000cb98 <__cxa_atexit>
c00190c5:	83 c4 10             	add    esp,0x10
c00190c8:	83 ec 0c             	sub    esp,0xc
c00190cb:	68 cc 91 02 c0       	push   0xc00291cc
c00190d0:	e8 07 9e 00 00       	call   c0022edc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00190d5:	83 c4 10             	add    esp,0x10
c00190d8:	83 ec 04             	sub    esp,0x4
c00190db:	68 00 6f 02 c0       	push   0xc0026f00
c00190e0:	68 cc 91 02 c0       	push   0xc00291cc
c00190e5:	68 8c 2e 02 c0       	push   0xc0022e8c
c00190ea:	e8 a9 3a ff ff       	call   c000cb98 <__cxa_atexit>
c00190ef:	83 c4 10             	add    esp,0x10
c00190f2:	66 90                	xchg   ax,ax
c00190f4:	90                   	nop
c00190f5:	83 c4 0c             	add    esp,0xc
c00190f8:	c3                   	ret    
c00190f9:	8d 76 00             	lea    esi,[esi+0x0]

c00190fc <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00190fc:	83 ec 0c             	sub    esp,0xc
c00190ff:	83 ec 08             	sub    esp,0x8
c0019102:	68 ff ff 00 00       	push   0xffff
c0019107:	6a 01                	push   0x1
c0019109:	e8 4a ff ff ff       	call   c0019058 <__static_initialization_and_destruction_0(int, int)>
c001910e:	83 c4 10             	add    esp,0x10
c0019111:	83 c4 0c             	add    esp,0xc
c0019114:	c3                   	ret    

c0019115 <Vm::inbv(unsigned short)>:
c0019115:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019119:	66 81 fa fe fe       	cmp    dx,0xfefe
c001911e:	75 06                	jne    c0019126 <Vm::inbv(unsigned short)+0x11>
c0019120:	a0 2c 92 02 c0       	mov    al,ds:0xc002922c
c0019125:	c3                   	ret    
c0019126:	ec                   	in     al,dx
c0019127:	c3                   	ret    

c0019128 <Vm::outbv(unsigned short, unsigned char)>:
c0019128:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001912c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019130:	66 81 fa fe fe       	cmp    dx,0xfefe
c0019135:	75 25                	jne    c001915c <Vm::outbv(unsigned short, unsigned char)+0x34>
c0019137:	8b 0d 2c 92 02 c0    	mov    ecx,DWORD PTR ds:0xc002922c
c001913d:	8d 51 01             	lea    edx,[ecx+0x1]
c0019140:	88 81 40 92 02 c0    	mov    BYTE PTR [ecx-0x3ffd6dc0],al
c0019146:	89 15 2c 92 02 c0    	mov    DWORD PTR ds:0xc002922c,edx
c001914c:	83 fa 20             	cmp    edx,0x20
c001914f:	75 0c                	jne    c001915d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0019151:	c7 05 2c 92 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002922c,0x1f
c001915b:	c3                   	ret    
c001915c:	ee                   	out    dx,al
c001915d:	c3                   	ret    

c001915e <Vm::realToLinear(unsigned short, unsigned short)>:
c001915e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019163:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019168:	c1 e0 04             	shl    eax,0x4
c001916b:	01 d0                	add    eax,edx
c001916d:	c3                   	ret    

c001916e <Vm::getSegment(unsigned int)>:
c001916e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019172:	c1 e8 10             	shr    eax,0x10
c0019175:	c3                   	ret    

c0019176 <Vm::getOffset(unsigned int)>:
c0019176:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001917a:	c3                   	ret    

c001917b <Vm::mainloop2()>:
c001917b:	83 ec 18             	sub    esp,0x18
c001917e:	fa                   	cli    
c001917f:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0019185:	6a 02                	push   0x2
c0019187:	c6 05 25 92 02 c0 01 	mov    BYTE PTR ds:0xc0029225,0x1
c001918e:	e8 25 f6 ff ff       	call   c00187b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0019193:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019198:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001919c:	52                   	push   edx
c001919d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00191a1:	52                   	push   edx
c00191a2:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00191a6:	52                   	push   edx
c00191a7:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00191ab:	50                   	push   eax
c00191ac:	e8 7e 70 fe ff       	call   c000022f <goToVM86>
c00191b1:	83 c4 2c             	add    esp,0x2c
c00191b4:	c3                   	ret    

c00191b5 <Vm::mainVm8086Loop(void*)>:
c00191b5:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c00191ba:	48                   	dec    eax
c00191bb:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c00191c0:	75 01                	jne    c00191c3 <Vm::mainVm8086Loop(void*)+0xe>
c00191c2:	fb                   	sti    
c00191c3:	eb b6                	jmp    c001917b <Vm::mainloop2()>

c00191c5 <Vm::mainloop3(unsigned long)>:
c00191c5:	83 ec 18             	sub    esp,0x18
c00191c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00191cc:	fa                   	cli    
c00191cd:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c00191d3:	6a 02                	push   0x2
c00191d5:	c6 05 24 92 02 c0 01 	mov    BYTE PTR ds:0xc0029224,0x1
c00191dc:	a3 20 92 02 c0       	mov    ds:0xc0029220,eax
c00191e1:	e8 d2 f5 ff ff       	call   c00187b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00191e6:	83 c4 1c             	add    esp,0x1c
c00191e9:	eb 90                	jmp    c001917b <Vm::mainloop2()>

c00191eb <Vm::initialise8086()>:
c00191eb:	83 ec 0c             	sub    esp,0xc
c00191ee:	68 80 00 00 00       	push   0x80
c00191f3:	6a 00                	push   0x0
c00191f5:	68 b5 91 01 c0       	push   0xc00191b5
c00191fa:	ff 35 f0 91 02 c0    	push   DWORD PTR ds:0xc00291f0
c0019200:	e8 c7 f1 ff ff       	call   c00183cc <Process::createThread(void (*)(void*), void*, int)>
c0019205:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001920c:	a3 28 92 02 c0       	mov    ds:0xc0029228,eax
c0019211:	68 00 01 00 00       	push   0x100
c0019216:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c001921b:	6a 00                	push   0x0
c001921d:	6a 00                	push   0x0
c001921f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0019225:	e8 4c 31 ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001922a:	83 c4 2c             	add    esp,0x2c
c001922d:	c3                   	ret    

c001922e <Vm::finish8086()>:
c001922e:	53                   	push   ebx
c001922f:	83 ec 08             	sub    esp,0x8
c0019232:	fa                   	cli    
c0019233:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0019239:	80 3d 24 92 02 c0 00 	cmp    BYTE PTR ds:0xc0029224,0x0
c0019240:	75 15                	jne    c0019257 <Vm::finish8086()+0x29>
c0019242:	e8 a1 f3 ff ff       	call   c00185e8 <schedule()>
c0019247:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c001924c:	48                   	dec    eax
c001924d:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0019252:	75 de                	jne    c0019232 <Vm::finish8086()+0x4>
c0019254:	fb                   	sti    
c0019255:	eb db                	jmp    c0019232 <Vm::finish8086()+0x4>
c0019257:	83 ec 0c             	sub    esp,0xc
c001925a:	8b 1d 20 92 02 c0    	mov    ebx,DWORD PTR ds:0xc0029220
c0019260:	ff 35 28 92 02 c0    	push   DWORD PTR ds:0xc0029228
c0019266:	c6 05 24 92 02 c0 00 	mov    BYTE PTR ds:0xc0029224,0x0
c001926d:	e8 32 f8 ff ff       	call   c0018aa4 <unblockTask(ThreadControlBlock*)>
c0019272:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0019277:	83 c4 10             	add    esp,0x10
c001927a:	8d 50 ff             	lea    edx,[eax-0x1]
c001927d:	89 15 c8 91 02 c0    	mov    DWORD PTR ds:0xc00291c8,edx
c0019283:	85 d2                	test   edx,edx
c0019285:	75 01                	jne    c0019288 <Vm::finish8086()+0x5a>
c0019287:	fb                   	sti    
c0019288:	89 d8                	mov    eax,ebx
c001928a:	83 c4 08             	add    esp,0x8
c001928d:	5b                   	pop    ebx
c001928e:	c3                   	ret    

c001928f <Vm::getOutput8086(unsigned char*)>:
c001928f:	57                   	push   edi
c0019290:	8b 0d 2c 92 02 c0    	mov    ecx,DWORD PTR ds:0xc002922c
c0019296:	56                   	push   esi
c0019297:	be 40 92 02 c0       	mov    esi,0xc0029240
c001929c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00192a0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00192a2:	a1 2c 92 02 c0       	mov    eax,ds:0xc002922c
c00192a7:	5e                   	pop    esi
c00192a8:	c7 05 2c 92 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002922c,0x0
c00192b2:	5f                   	pop    edi
c00192b3:	c3                   	ret    

c00192b4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00192b4:	55                   	push   ebp
c00192b5:	57                   	push   edi
c00192b6:	56                   	push   esi
c00192b7:	53                   	push   ebx
c00192b8:	83 ec 2c             	sub    esp,0x2c
c00192bb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00192bf:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00192c3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00192c7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00192cb:	fa                   	cli    
c00192cc:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c00192d2:	0f b6 35 25 92 02 c0 	movzx  esi,BYTE PTR ds:0xc0029225
c00192d9:	89 f0                	mov    eax,esi
c00192db:	84 c0                	test   al,al
c00192dd:	75 1d                	jne    c00192fc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c00192df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00192e3:	e8 00 f3 ff ff       	call   c00185e8 <schedule()>
c00192e8:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c00192ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00192f1:	48                   	dec    eax
c00192f2:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c00192f7:	75 d2                	jne    c00192cb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00192f9:	fb                   	sti    
c00192fa:	eb cf                	jmp    c00192cb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00192fc:	a1 28 92 02 c0       	mov    eax,ds:0xc0029228
c0019301:	c7 05 2c 92 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002922c,0x0
c001930b:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c001930f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0019313:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0019317:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c001931b:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001931f:	50                   	push   eax
c0019320:	6a 20                	push   0x20
c0019322:	6a 00                	push   0x0
c0019324:	68 40 92 02 c0       	push   0xc0029240
c0019329:	e8 56 73 fe ff       	call   c0000684 <memset>
c001932e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019335:	e8 d5 06 ff ff       	call   c0009a0f <malloc>
c001933a:	83 c4 0c             	add    esp,0xc
c001933d:	89 c3                	mov    ebx,eax
c001933f:	ff 35 f0 91 02 c0    	push   DWORD PTR ds:0xc00291f0
c0019345:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019349:	50                   	push   eax
c001934a:	e8 1b 3f ff ff       	call   c000d26a <File::File(char const*, Process*)>
c001934f:	83 c4 10             	add    esp,0x10
c0019352:	85 db                	test   ebx,ebx
c0019354:	75 0a                	jne    c0019360 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0019356:	83 ec 0c             	sub    esp,0xc
c0019359:	68 34 5f 02 c0       	push   0xc0025f34
c001935e:	eb 3e                	jmp    c001939e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0019360:	50                   	push   eax
c0019361:	8d 44 24 17          	lea    eax,[esp+0x17]
c0019365:	50                   	push   eax
c0019366:	8d 44 24 20          	lea    eax,[esp+0x20]
c001936a:	50                   	push   eax
c001936b:	53                   	push   ebx
c001936c:	e8 47 42 ff ff       	call   c000d5b8 <File::stat(unsigned long long*, bool*)>
c0019371:	83 c4 10             	add    esp,0x10
c0019374:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0019379:	74 0a                	je     c0019385 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001937b:	83 ec 0c             	sub    esp,0xc
c001937e:	68 48 5f 02 c0       	push   0xc0025f48
c0019383:	eb 19                	jmp    c001939e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0019385:	51                   	push   ecx
c0019386:	51                   	push   ecx
c0019387:	6a 01                	push   0x1
c0019389:	53                   	push   ebx
c001938a:	e8 7d 3f ff ff       	call   c000d30c <File::open(FileOpenMode)>
c001938f:	83 c4 10             	add    esp,0x10
c0019392:	85 c0                	test   eax,eax
c0019394:	74 24                	je     c00193ba <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0019396:	83 ec 0c             	sub    esp,0xc
c0019399:	68 61 5f 02 c0       	push   0xc0025f61
c001939e:	e8 0c b5 ff ff       	call   c00148af <Krnl::panic(char const*)>
c00193a3:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c00193a8:	83 c4 10             	add    esp,0x10
c00193ab:	48                   	dec    eax
c00193ac:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c00193b1:	85 c0                	test   eax,eax
c00193b3:	75 01                	jne    c00193b6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c00193b5:	fb                   	sti    
c00193b6:	31 f6                	xor    esi,esi
c00193b8:	eb 58                	jmp    c0019412 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c00193ba:	0f b7 ed             	movzx  ebp,bp
c00193bd:	50                   	push   eax
c00193be:	0f b7 ff             	movzx  edi,di
c00193c1:	50                   	push   eax
c00193c2:	55                   	push   ebp
c00193c3:	57                   	push   edi
c00193c4:	e8 95 fd ff ff       	call   c001915e <Vm::realToLinear(unsigned short, unsigned short)>
c00193c9:	5a                   	pop    edx
c00193ca:	8b 13                	mov    edx,DWORD PTR [ebx]
c00193cc:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00193d0:	51                   	push   ecx
c00193d1:	50                   	push   eax
c00193d2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00193d6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00193da:	53                   	push   ebx
c00193db:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00193de:	83 c4 14             	add    esp,0x14
c00193e1:	53                   	push   ebx
c00193e2:	e8 83 3f ff ff       	call   c000d36a <File::close()>
c00193e7:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c00193ec:	83 c4 10             	add    esp,0x10
c00193ef:	48                   	dec    eax
c00193f0:	c6 05 25 92 02 c0 00 	mov    BYTE PTR ds:0xc0029225,0x0
c00193f7:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c00193fc:	85 c0                	test   eax,eax
c00193fe:	75 01                	jne    c0019401 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0019400:	fb                   	sti    
c0019401:	83 ec 0c             	sub    esp,0xc
c0019404:	ff 35 28 92 02 c0    	push   DWORD PTR ds:0xc0029228
c001940a:	e8 95 f6 ff ff       	call   c0018aa4 <unblockTask(ThreadControlBlock*)>
c001940f:	83 c4 10             	add    esp,0x10
c0019412:	83 c4 2c             	add    esp,0x2c
c0019415:	89 f0                	mov    eax,esi
c0019417:	5b                   	pop    ebx
c0019418:	5e                   	pop    esi
c0019419:	5f                   	pop    edi
c001941a:	5d                   	pop    ebp
c001941b:	c3                   	ret    

c001941c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001941c:	57                   	push   edi
c001941d:	56                   	push   esi
c001941e:	53                   	push   ebx
c001941f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019423:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019427:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001942b:	83 e8 06             	sub    eax,0x6
c001942e:	0f b7 c0             	movzx  eax,ax
c0019431:	50                   	push   eax
c0019432:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0019437:	50                   	push   eax
c0019438:	e8 21 fd ff ff       	call   c001915e <Vm::realToLinear(unsigned short, unsigned short)>
c001943d:	5a                   	pop    edx
c001943e:	5e                   	pop    esi
c001943f:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0019442:	8d 56 fa             	lea    edx,[esi-0x6]
c0019445:	81 e2 ff ff 00 00    	and    edx,0xffff
c001944b:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001944e:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0019451:	83 c2 02             	add    edx,0x2
c0019454:	66 89 10             	mov    WORD PTR [eax],dx
c0019457:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001945a:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001945e:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0019461:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0019465:	89 d6                	mov    esi,edx
c0019467:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001946d:	66 81 e6 ff fd       	and    si,0xfdff
c0019472:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0019476:	74 07                	je     c001947f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0019478:	89 d6                	mov    esi,edx
c001947a:	66 81 ce 00 02       	or     si,0x200
c001947f:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0019483:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019488:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001948c:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019494:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0019497:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001949f:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00194a2:	5b                   	pop    ebx
c00194a3:	5e                   	pop    esi
c00194a4:	5f                   	pop    edi
c00194a5:	c3                   	ret    

c00194a6 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00194a6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00194ab:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00194b0:	c1 e0 04             	shl    eax,0x4
c00194b3:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00194b6:	c3                   	ret    

c00194b7 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00194b7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00194bc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00194c1:	c1 e0 04             	shl    eax,0x4
c00194c4:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00194c8:	c3                   	ret    

c00194c9 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00194c9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00194ce:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00194d3:	c1 e0 04             	shl    eax,0x4
c00194d6:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00194d9:	c3                   	ret    

c00194da <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00194da:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00194df:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00194e4:	c1 e0 04             	shl    eax,0x4
c00194e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00194eb:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00194ee:	c3                   	ret    

c00194ef <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00194ef:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00194f4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00194f9:	c1 e0 04             	shl    eax,0x4
c00194fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019500:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0019504:	c3                   	ret    

c0019505 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0019505:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001950a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001950f:	c1 e0 04             	shl    eax,0x4
c0019512:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019516:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0019519:	c3                   	ret    

c001951a <Vm::faultHandler(regs*)>:
c001951a:	55                   	push   ebp
c001951b:	57                   	push   edi
c001951c:	56                   	push   esi
c001951d:	53                   	push   ebx
c001951e:	83 ec 1c             	sub    esp,0x1c
c0019521:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019525:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019528:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001952c:	0f b7 f8             	movzx  edi,ax
c001952f:	52                   	push   edx
c0019530:	0f b7 c0             	movzx  eax,ax
c0019533:	50                   	push   eax
c0019534:	e8 25 fc ff ff       	call   c001915e <Vm::realToLinear(unsigned short, unsigned short)>
c0019539:	5a                   	pop    edx
c001953a:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001953d:	59                   	pop    ecx
c001953e:	89 c1                	mov    ecx,eax
c0019540:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019543:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019547:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001954c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019550:	0f b7 c5             	movzx  eax,bp
c0019553:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019557:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001955b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001955f:	e8 fa fb ff ff       	call   c001915e <Vm::realToLinear(unsigned short, unsigned short)>
c0019564:	5e                   	pop    esi
c0019565:	be 06 00 00 00       	mov    esi,0x6
c001956a:	5a                   	pop    edx
c001956b:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0019570:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0019575:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0019578:	80 fa 9d             	cmp    dl,0x9d
c001957b:	0f 84 2c 02 00 00    	je     c00197ad <Vm::faultHandler(regs*)+0x293>
c0019581:	0f 87 91 00 00 00    	ja     c0019618 <Vm::faultHandler(regs*)+0xfe>
c0019587:	80 fa 66             	cmp    dl,0x66
c001958a:	0f 84 98 01 00 00    	je     c0019728 <Vm::faultHandler(regs*)+0x20e>
c0019590:	77 47                	ja     c00195d9 <Vm::faultHandler(regs*)+0xbf>
c0019592:	80 fa 36             	cmp    dl,0x36
c0019595:	0f 84 80 01 00 00    	je     c001971b <Vm::faultHandler(regs*)+0x201>
c001959b:	77 1a                	ja     c00195b7 <Vm::faultHandler(regs*)+0x9d>
c001959d:	80 fa 26             	cmp    dl,0x26
c00195a0:	0f 84 4e 01 00 00    	je     c00196f4 <Vm::faultHandler(regs*)+0x1da>
c00195a6:	80 fa 2e             	cmp    dl,0x2e
c00195a9:	0f 85 e2 05 00 00    	jne    c0019b91 <Vm::faultHandler(regs*)+0x677>
c00195af:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00195b2:	31 f6                	xor    esi,esi
c00195b4:	41                   	inc    ecx
c00195b5:	eb be                	jmp    c0019575 <Vm::faultHandler(regs*)+0x5b>
c00195b7:	80 fa 64             	cmp    dl,0x64
c00195ba:	0f 84 41 01 00 00    	je     c0019701 <Vm::faultHandler(regs*)+0x1e7>
c00195c0:	0f 87 48 01 00 00    	ja     c001970e <Vm::faultHandler(regs*)+0x1f4>
c00195c6:	80 fa 3e             	cmp    dl,0x3e
c00195c9:	0f 85 c2 05 00 00    	jne    c0019b91 <Vm::faultHandler(regs*)+0x677>
c00195cf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00195d2:	be 01 00 00 00       	mov    esi,0x1
c00195d7:	eb db                	jmp    c00195b4 <Vm::faultHandler(regs*)+0x9a>
c00195d9:	80 fa 6d             	cmp    dl,0x6d
c00195dc:	0f 84 ec 02 00 00    	je     c00198ce <Vm::faultHandler(regs*)+0x3b4>
c00195e2:	77 17                	ja     c00195fb <Vm::faultHandler(regs*)+0xe1>
c00195e4:	80 fa 67             	cmp    dl,0x67
c00195e7:	0f 84 48 01 00 00    	je     c0019735 <Vm::faultHandler(regs*)+0x21b>
c00195ed:	80 fa 6c             	cmp    dl,0x6c
c00195f0:	0f 84 69 02 00 00    	je     c001985f <Vm::faultHandler(regs*)+0x345>
c00195f6:	e9 96 05 00 00       	jmp    c0019b91 <Vm::faultHandler(regs*)+0x677>
c00195fb:	80 fa 6f             	cmp    dl,0x6f
c00195fe:	0f 84 f4 03 00 00    	je     c00199f8 <Vm::faultHandler(regs*)+0x4de>
c0019604:	0f 82 59 03 00 00    	jb     c0019963 <Vm::faultHandler(regs*)+0x449>
c001960a:	80 fa 9c             	cmp    dl,0x9c
c001960d:	0f 84 2f 01 00 00    	je     c0019742 <Vm::faultHandler(regs*)+0x228>
c0019613:	e9 79 05 00 00       	jmp    c0019b91 <Vm::faultHandler(regs*)+0x677>
c0019618:	80 fa ec             	cmp    dl,0xec
c001961b:	0f 84 14 05 00 00    	je     c0019b35 <Vm::faultHandler(regs*)+0x61b>
c0019621:	77 7b                	ja     c001969e <Vm::faultHandler(regs*)+0x184>
c0019623:	80 fa e4             	cmp    dl,0xe4
c0019626:	0f 84 93 04 00 00    	je     c0019abf <Vm::faultHandler(regs*)+0x5a5>
c001962c:	77 53                	ja     c0019681 <Vm::faultHandler(regs*)+0x167>
c001962e:	80 fa cd             	cmp    dl,0xcd
c0019631:	0f 84 d9 01 00 00    	je     c0019810 <Vm::faultHandler(regs*)+0x2f6>
c0019637:	80 fa cf             	cmp    dl,0xcf
c001963a:	0f 85 51 05 00 00    	jne    c0019b91 <Vm::faultHandler(regs*)+0x677>
c0019640:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019643:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0019646:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001964a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001964d:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0019651:	81 ca 00 02 02 00    	or     edx,0x20200
c0019657:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001965a:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001965e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019664:	66 c1 e8 09          	shr    ax,0x9
c0019668:	83 e0 01             	and    eax,0x1
c001966b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001966e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019671:	83 c0 06             	add    eax,0x6
c0019674:	25 ff ff 00 00       	and    eax,0xffff
c0019679:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001967c:	e9 0c 05 00 00       	jmp    c0019b8d <Vm::faultHandler(regs*)+0x673>
c0019681:	80 fa e6             	cmp    dl,0xe6
c0019684:	0f 84 7f 04 00 00    	je     c0019b09 <Vm::faultHandler(regs*)+0x5ef>
c001968a:	0f 82 4b 04 00 00    	jb     c0019adb <Vm::faultHandler(regs*)+0x5c1>
c0019690:	80 fa e7             	cmp    dl,0xe7
c0019693:	0f 84 87 04 00 00    	je     c0019b20 <Vm::faultHandler(regs*)+0x606>
c0019699:	e9 f3 04 00 00       	jmp    c0019b91 <Vm::faultHandler(regs*)+0x677>
c001969e:	80 fa ef             	cmp    dl,0xef
c00196a1:	0f 84 d1 04 00 00    	je     c0019b78 <Vm::faultHandler(regs*)+0x65e>
c00196a7:	77 28                	ja     c00196d1 <Vm::faultHandler(regs*)+0x1b7>
c00196a9:	80 fa ed             	cmp    dl,0xed
c00196ac:	0f 84 9f 04 00 00    	je     c0019b51 <Vm::faultHandler(regs*)+0x637>
c00196b2:	80 fa ee             	cmp    dl,0xee
c00196b5:	0f 85 d6 04 00 00    	jne    c0019b91 <Vm::faultHandler(regs*)+0x677>
c00196bb:	50                   	push   eax
c00196bc:	50                   	push   eax
c00196bd:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00196c1:	50                   	push   eax
c00196c2:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00196c6:	50                   	push   eax
c00196c7:	e8 5c fa ff ff       	call   c0019128 <Vm::outbv(unsigned short, unsigned char)>
c00196cc:	e9 9f 04 00 00       	jmp    c0019b70 <Vm::faultHandler(regs*)+0x656>
c00196d1:	80 fa fa             	cmp    dl,0xfa
c00196d4:	0f 84 69 01 00 00    	je     c0019843 <Vm::faultHandler(regs*)+0x329>
c00196da:	80 fa fb             	cmp    dl,0xfb
c00196dd:	0f 84 6e 01 00 00    	je     c0019851 <Vm::faultHandler(regs*)+0x337>
c00196e3:	80 fa f3             	cmp    dl,0xf3
c00196e6:	0f 85 a5 04 00 00    	jne    c0019b91 <Vm::faultHandler(regs*)+0x677>
c00196ec:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00196ef:	e9 c0 fe ff ff       	jmp    c00195b4 <Vm::faultHandler(regs*)+0x9a>
c00196f4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00196f7:	be 02 00 00 00       	mov    esi,0x2
c00196fc:	e9 b3 fe ff ff       	jmp    c00195b4 <Vm::faultHandler(regs*)+0x9a>
c0019701:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019704:	be 03 00 00 00       	mov    esi,0x3
c0019709:	e9 a6 fe ff ff       	jmp    c00195b4 <Vm::faultHandler(regs*)+0x9a>
c001970e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019711:	be 04 00 00 00       	mov    esi,0x4
c0019716:	e9 99 fe ff ff       	jmp    c00195b4 <Vm::faultHandler(regs*)+0x9a>
c001971b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001971e:	be 05 00 00 00       	mov    esi,0x5
c0019723:	e9 8c fe ff ff       	jmp    c00195b4 <Vm::faultHandler(regs*)+0x9a>
c0019728:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001972b:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019730:	e9 7f fe ff ff       	jmp    c00195b4 <Vm::faultHandler(regs*)+0x9a>
c0019735:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019738:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001973d:	e9 72 fe ff ff       	jmp    c00195b4 <Vm::faultHandler(regs*)+0x9a>
c0019742:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019745:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019749:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001974e:	74 30                	je     c0019780 <Vm::faultHandler(regs*)+0x266>
c0019750:	83 e9 04             	sub    ecx,0x4
c0019753:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019759:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001975f:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019762:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019765:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001976b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001976f:	0f 84 15 04 00 00    	je     c0019b8a <Vm::faultHandler(regs*)+0x670>
c0019775:	80 ce 02             	or     dh,0x2
c0019778:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001977b:	e9 0a 04 00 00       	jmp    c0019b8a <Vm::faultHandler(regs*)+0x670>
c0019780:	83 e9 02             	sub    ecx,0x2
c0019783:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019789:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001978c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019790:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019796:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001979a:	74 05                	je     c00197a1 <Vm::faultHandler(regs*)+0x287>
c001979c:	80 ce 02             	or     dh,0x2
c001979f:	eb 03                	jmp    c00197a4 <Vm::faultHandler(regs*)+0x28a>
c00197a1:	80 e6 fd             	and    dh,0xfd
c00197a4:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00197a8:	e9 dd 03 00 00       	jmp    c0019b8a <Vm::faultHandler(regs*)+0x670>
c00197ad:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00197b2:	74 2a                	je     c00197de <Vm::faultHandler(regs*)+0x2c4>
c00197b4:	8b 10                	mov    edx,DWORD PTR [eax]
c00197b6:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00197bc:	81 ca 00 02 02 00    	or     edx,0x20200
c00197c2:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00197c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00197c7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00197cd:	c1 e8 09             	shr    eax,0x9
c00197d0:	83 e0 01             	and    eax,0x1
c00197d3:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00197d6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00197d9:	83 c0 04             	add    eax,0x4
c00197dc:	eb 25                	jmp    c0019803 <Vm::faultHandler(regs*)+0x2e9>
c00197de:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00197e1:	81 ca 00 02 02 00    	or     edx,0x20200
c00197e7:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00197ea:	66 8b 00             	mov    ax,WORD PTR [eax]
c00197ed:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00197f3:	66 c1 e8 09          	shr    ax,0x9
c00197f7:	83 e0 01             	and    eax,0x1
c00197fa:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00197fd:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019800:	83 c0 02             	add    eax,0x2
c0019803:	25 ff ff 00 00       	and    eax,0xffff
c0019808:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001980b:	e9 7a 03 00 00       	jmp    c0019b8a <Vm::faultHandler(regs*)+0x670>
c0019810:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019814:	3c ee                	cmp    al,0xee
c0019816:	75 10                	jne    c0019828 <Vm::faultHandler(regs*)+0x30e>
c0019818:	83 ec 0c             	sub    esp,0xc
c001981b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001981e:	e8 a2 f9 ff ff       	call   c00191c5 <Vm::mainloop3(unsigned long)>
c0019823:	e9 4b 03 00 00       	jmp    c0019b73 <Vm::faultHandler(regs*)+0x659>
c0019828:	83 ec 0c             	sub    esp,0xc
c001982b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001982f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019833:	51                   	push   ecx
c0019834:	50                   	push   eax
c0019835:	53                   	push   ebx
c0019836:	e8 e1 fb ff ff       	call   c001941c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001983b:	83 c4 20             	add    esp,0x20
c001983e:	e9 4a 03 00 00       	jmp    c0019b8d <Vm::faultHandler(regs*)+0x673>
c0019843:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019848:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001984c:	e9 39 03 00 00       	jmp    c0019b8a <Vm::faultHandler(regs*)+0x670>
c0019851:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019856:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001985a:	e9 2b 03 00 00       	jmp    c0019b8a <Vm::faultHandler(regs*)+0x670>
c001985f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019862:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019867:	74 2b                	je     c0019894 <Vm::faultHandler(regs*)+0x37a>
c0019869:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0019870:	76 22                	jbe    c0019894 <Vm::faultHandler(regs*)+0x37a>
c0019872:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019876:	50                   	push   eax
c0019877:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001987b:	50                   	push   eax
c001987c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019880:	50                   	push   eax
c0019881:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019885:	50                   	push   eax
c0019886:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001988a:	50                   	push   eax
c001988b:	6a 6c                	push   0x6c
c001988d:	6a 6c                	push   0x6c
c001988f:	e9 b9 01 00 00       	jmp    c0019a4d <Vm::faultHandler(regs*)+0x533>
c0019894:	83 ec 0c             	sub    esp,0xc
c0019897:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001989b:	0f b7 f6             	movzx  esi,si
c001989e:	50                   	push   eax
c001989f:	e8 71 f8 ff ff       	call   c0019115 <Vm::inbv(unsigned short)>
c00198a4:	83 c4 0c             	add    esp,0xc
c00198a7:	0f b6 c0             	movzx  eax,al
c00198aa:	50                   	push   eax
c00198ab:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00198af:	50                   	push   eax
c00198b0:	56                   	push   esi
c00198b1:	e8 24 fc ff ff       	call   c00194da <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00198b6:	83 c4 10             	add    esp,0x10
c00198b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00198bc:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00198c0:	74 03                	je     c00198c5 <Vm::faultHandler(regs*)+0x3ab>
c00198c2:	48                   	dec    eax
c00198c3:	eb 01                	jmp    c00198c6 <Vm::faultHandler(regs*)+0x3ac>
c00198c5:	40                   	inc    eax
c00198c6:	0f b7 c0             	movzx  eax,ax
c00198c9:	e9 8d 00 00 00       	jmp    c001995b <Vm::faultHandler(regs*)+0x441>
c00198ce:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00198d1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00198d4:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00198d9:	74 29                	je     c0019904 <Vm::faultHandler(regs*)+0x3ea>
c00198db:	3d ff ff 00 00       	cmp    eax,0xffff
c00198e0:	76 22                	jbe    c0019904 <Vm::faultHandler(regs*)+0x3ea>
c00198e2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00198e6:	50                   	push   eax
c00198e7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00198eb:	50                   	push   eax
c00198ec:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00198f0:	50                   	push   eax
c00198f1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00198f5:	50                   	push   eax
c00198f6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00198fa:	50                   	push   eax
c00198fb:	6a 6d                	push   0x6d
c00198fd:	6a 6d                	push   0x6d
c00198ff:	e9 49 01 00 00       	jmp    c0019a4d <Vm::faultHandler(regs*)+0x533>
c0019904:	0f b7 c8             	movzx  ecx,ax
c0019907:	0f b7 f6             	movzx  esi,si
c001990a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001990d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019912:	74 20                	je     c0019934 <Vm::faultHandler(regs*)+0x41a>
c0019914:	ed                   	in     eax,dx
c0019915:	55                   	push   ebp
c0019916:	50                   	push   eax
c0019917:	51                   	push   ecx
c0019918:	56                   	push   esi
c0019919:	e8 e7 fb ff ff       	call   c0019505 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001991e:	83 c4 10             	add    esp,0x10
c0019921:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019924:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019928:	74 05                	je     c001992f <Vm::faultHandler(regs*)+0x415>
c001992a:	83 e8 04             	sub    eax,0x4
c001992d:	eb 27                	jmp    c0019956 <Vm::faultHandler(regs*)+0x43c>
c001992f:	83 c0 04             	add    eax,0x4
c0019932:	eb 22                	jmp    c0019956 <Vm::faultHandler(regs*)+0x43c>
c0019934:	66 ed                	in     ax,dx
c0019936:	0f b7 c0             	movzx  eax,ax
c0019939:	57                   	push   edi
c001993a:	50                   	push   eax
c001993b:	51                   	push   ecx
c001993c:	56                   	push   esi
c001993d:	e8 ad fb ff ff       	call   c00194ef <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019942:	83 c4 10             	add    esp,0x10
c0019945:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019948:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001994c:	74 05                	je     c0019953 <Vm::faultHandler(regs*)+0x439>
c001994e:	83 e8 02             	sub    eax,0x2
c0019951:	eb 03                	jmp    c0019956 <Vm::faultHandler(regs*)+0x43c>
c0019953:	83 c0 02             	add    eax,0x2
c0019956:	25 ff ff 00 00       	and    eax,0xffff
c001995b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001995e:	e9 27 02 00 00       	jmp    c0019b8a <Vm::faultHandler(regs*)+0x670>
c0019963:	8d 46 ff             	lea    eax,[esi-0x1]
c0019966:	3c 05                	cmp    al,0x5
c0019968:	77 24                	ja     c001998e <Vm::faultHandler(regs*)+0x474>
c001996a:	0f b6 c0             	movzx  eax,al
c001996d:	ff 24 85 d4 5f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffda02c]
c0019974:	0f b7 fd             	movzx  edi,bp
c0019977:	eb 15                	jmp    c001998e <Vm::faultHandler(regs*)+0x474>
c0019979:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001997d:	eb 0f                	jmp    c001998e <Vm::faultHandler(regs*)+0x474>
c001997f:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0019983:	eb 09                	jmp    c001998e <Vm::faultHandler(regs*)+0x474>
c0019985:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0019989:	eb 03                	jmp    c001998e <Vm::faultHandler(regs*)+0x474>
c001998b:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001998e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019991:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019996:	74 29                	je     c00199c1 <Vm::faultHandler(regs*)+0x4a7>
c0019998:	3d ff ff 00 00       	cmp    eax,0xffff
c001999d:	76 22                	jbe    c00199c1 <Vm::faultHandler(regs*)+0x4a7>
c001999f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00199a3:	50                   	push   eax
c00199a4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00199a8:	50                   	push   eax
c00199a9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00199ad:	50                   	push   eax
c00199ae:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00199b2:	50                   	push   eax
c00199b3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00199b7:	50                   	push   eax
c00199b8:	6a 6e                	push   0x6e
c00199ba:	6a 6e                	push   0x6e
c00199bc:	e9 8c 00 00 00       	jmp    c0019a4d <Vm::faultHandler(regs*)+0x533>
c00199c1:	0f b7 c0             	movzx  eax,ax
c00199c4:	52                   	push   edx
c00199c5:	52                   	push   edx
c00199c6:	50                   	push   eax
c00199c7:	57                   	push   edi
c00199c8:	e8 d9 fa ff ff       	call   c00194a6 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00199cd:	59                   	pop    ecx
c00199ce:	0f b6 c0             	movzx  eax,al
c00199d1:	5e                   	pop    esi
c00199d2:	50                   	push   eax
c00199d3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00199d7:	50                   	push   eax
c00199d8:	e8 4b f7 ff ff       	call   c0019128 <Vm::outbv(unsigned short, unsigned char)>
c00199dd:	83 c4 10             	add    esp,0x10
c00199e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00199e3:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00199e7:	74 03                	je     c00199ec <Vm::faultHandler(regs*)+0x4d2>
c00199e9:	48                   	dec    eax
c00199ea:	eb 01                	jmp    c00199ed <Vm::faultHandler(regs*)+0x4d3>
c00199ec:	40                   	inc    eax
c00199ed:	0f b7 c0             	movzx  eax,ax
c00199f0:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00199f3:	e9 92 01 00 00       	jmp    c0019b8a <Vm::faultHandler(regs*)+0x670>
c00199f8:	8d 46 ff             	lea    eax,[esi-0x1]
c00199fb:	3c 05                	cmp    al,0x5
c00199fd:	77 1f                	ja     c0019a1e <Vm::faultHandler(regs*)+0x504>
c00199ff:	0f b6 c0             	movzx  eax,al
c0019a02:	ff 24 85 ec 5f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffda014]
c0019a09:	89 ef                	mov    edi,ebp
c0019a0b:	eb 11                	jmp    c0019a1e <Vm::faultHandler(regs*)+0x504>
c0019a0d:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0019a10:	eb 0c                	jmp    c0019a1e <Vm::faultHandler(regs*)+0x504>
c0019a12:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0019a15:	eb 07                	jmp    c0019a1e <Vm::faultHandler(regs*)+0x504>
c0019a17:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0019a1a:	eb 02                	jmp    c0019a1e <Vm::faultHandler(regs*)+0x504>
c0019a1c:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0019a1e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0019a21:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019a26:	74 37                	je     c0019a5f <Vm::faultHandler(regs*)+0x545>
c0019a28:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0019a2e:	76 2f                	jbe    c0019a5f <Vm::faultHandler(regs*)+0x545>
c0019a30:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019a34:	50                   	push   eax
c0019a35:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019a39:	50                   	push   eax
c0019a3a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019a3e:	50                   	push   eax
c0019a3f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019a43:	50                   	push   eax
c0019a44:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019a48:	50                   	push   eax
c0019a49:	6a 6f                	push   0x6f
c0019a4b:	6a 6f                	push   0x6f
c0019a4d:	68 7a 5f 02 c0       	push   0xc0025f7a
c0019a52:	e8 a8 32 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0019a57:	83 c4 20             	add    esp,0x20
c0019a5a:	e9 86 01 00 00       	jmp    c0019be5 <Vm::faultHandler(regs*)+0x6cb>
c0019a5f:	0f b7 d7             	movzx  edx,di
c0019a62:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0019a65:	0f b7 c6             	movzx  eax,si
c0019a68:	81 e1 00 04 00 00    	and    ecx,0x400
c0019a6e:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0019a71:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019a76:	74 1d                	je     c0019a95 <Vm::faultHandler(regs*)+0x57b>
c0019a78:	55                   	push   ebp
c0019a79:	55                   	push   ebp
c0019a7a:	50                   	push   eax
c0019a7b:	52                   	push   edx
c0019a7c:	e8 48 fa ff ff       	call   c00194c9 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019a81:	83 c4 10             	add    esp,0x10
c0019a84:	89 fa                	mov    edx,edi
c0019a86:	ef                   	out    dx,eax
c0019a87:	85 c9                	test   ecx,ecx
c0019a89:	74 05                	je     c0019a90 <Vm::faultHandler(regs*)+0x576>
c0019a8b:	83 ee 04             	sub    esi,0x4
c0019a8e:	eb 21                	jmp    c0019ab1 <Vm::faultHandler(regs*)+0x597>
c0019a90:	83 c6 04             	add    esi,0x4
c0019a93:	eb 1c                	jmp    c0019ab1 <Vm::faultHandler(regs*)+0x597>
c0019a95:	55                   	push   ebp
c0019a96:	55                   	push   ebp
c0019a97:	50                   	push   eax
c0019a98:	52                   	push   edx
c0019a99:	e8 19 fa ff ff       	call   c00194b7 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019a9e:	83 c4 10             	add    esp,0x10
c0019aa1:	89 fa                	mov    edx,edi
c0019aa3:	66 ef                	out    dx,ax
c0019aa5:	85 c9                	test   ecx,ecx
c0019aa7:	74 05                	je     c0019aae <Vm::faultHandler(regs*)+0x594>
c0019aa9:	83 ee 02             	sub    esi,0x2
c0019aac:	eb 03                	jmp    c0019ab1 <Vm::faultHandler(regs*)+0x597>
c0019aae:	83 c6 02             	add    esi,0x2
c0019ab1:	81 e6 ff ff 00 00    	and    esi,0xffff
c0019ab7:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0019aba:	e9 cb 00 00 00       	jmp    c0019b8a <Vm::faultHandler(regs*)+0x670>
c0019abf:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019ac6:	83 ec 0c             	sub    esp,0xc
c0019ac9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019acd:	50                   	push   eax
c0019ace:	e8 42 f6 ff ff       	call   c0019115 <Vm::inbv(unsigned short)>
c0019ad3:	0f b6 c0             	movzx  eax,al
c0019ad6:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019ad9:	eb 3f                	jmp    c0019b1a <Vm::faultHandler(regs*)+0x600>
c0019adb:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019ae0:	74 07                	je     c0019ae9 <Vm::faultHandler(regs*)+0x5cf>
c0019ae2:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019ae6:	ed                   	in     eax,dx
c0019ae7:	eb 14                	jmp    c0019afd <Vm::faultHandler(regs*)+0x5e3>
c0019ae9:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0019aec:	66 31 f6             	xor    si,si
c0019aef:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0019af2:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019af6:	66 ed                	in     ax,dx
c0019af8:	0f b7 c0             	movzx  eax,ax
c0019afb:	09 f0                	or     eax,esi
c0019afd:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019b00:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019b04:	e9 84 00 00 00       	jmp    c0019b8d <Vm::faultHandler(regs*)+0x673>
c0019b09:	52                   	push   edx
c0019b0a:	52                   	push   edx
c0019b0b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019b0f:	50                   	push   eax
c0019b10:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019b14:	50                   	push   eax
c0019b15:	e8 0e f6 ff ff       	call   c0019128 <Vm::outbv(unsigned short, unsigned char)>
c0019b1a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019b1e:	eb 53                	jmp    c0019b73 <Vm::faultHandler(regs*)+0x659>
c0019b20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019b23:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019b27:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019b2c:	74 03                	je     c0019b31 <Vm::faultHandler(regs*)+0x617>
c0019b2e:	ef                   	out    dx,eax
c0019b2f:	eb cf                	jmp    c0019b00 <Vm::faultHandler(regs*)+0x5e6>
c0019b31:	66 ef                	out    dx,ax
c0019b33:	eb cb                	jmp    c0019b00 <Vm::faultHandler(regs*)+0x5e6>
c0019b35:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019b3c:	83 ec 0c             	sub    esp,0xc
c0019b3f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019b43:	50                   	push   eax
c0019b44:	e8 cc f5 ff ff       	call   c0019115 <Vm::inbv(unsigned short)>
c0019b49:	0f b6 c0             	movzx  eax,al
c0019b4c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019b4f:	eb 1f                	jmp    c0019b70 <Vm::faultHandler(regs*)+0x656>
c0019b51:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019b54:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019b59:	74 03                	je     c0019b5e <Vm::faultHandler(regs*)+0x644>
c0019b5b:	ed                   	in     eax,dx
c0019b5c:	eb 0d                	jmp    c0019b6b <Vm::faultHandler(regs*)+0x651>
c0019b5e:	66 ed                	in     ax,dx
c0019b60:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019b63:	0f b7 c0             	movzx  eax,ax
c0019b66:	66 31 d2             	xor    dx,dx
c0019b69:	09 d0                	or     eax,edx
c0019b6b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019b6e:	eb 1a                	jmp    c0019b8a <Vm::faultHandler(regs*)+0x670>
c0019b70:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019b73:	83 c4 10             	add    esp,0x10
c0019b76:	eb 15                	jmp    c0019b8d <Vm::faultHandler(regs*)+0x673>
c0019b78:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019b7b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019b7e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019b83:	74 03                	je     c0019b88 <Vm::faultHandler(regs*)+0x66e>
c0019b85:	ef                   	out    dx,eax
c0019b86:	eb 02                	jmp    c0019b8a <Vm::faultHandler(regs*)+0x670>
c0019b88:	66 ef                	out    dx,ax
c0019b8a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019b8d:	b0 01                	mov    al,0x1
c0019b8f:	eb 56                	jmp    c0019be7 <Vm::faultHandler(regs*)+0x6cd>
c0019b91:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019b95:	50                   	push   eax
c0019b96:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019b9a:	50                   	push   eax
c0019b9b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019b9f:	50                   	push   eax
c0019ba0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019ba4:	50                   	push   eax
c0019ba5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019ba9:	50                   	push   eax
c0019baa:	52                   	push   edx
c0019bab:	52                   	push   edx
c0019bac:	68 a7 5f 02 c0       	push   0xc0025fa7
c0019bb1:	e8 49 31 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0019bb6:	83 c4 20             	add    esp,0x20
c0019bb9:	83 ec 0c             	sub    esp,0xc
c0019bbc:	6a 60                	push   0x60
c0019bbe:	e8 52 f5 ff ff       	call   c0019115 <Vm::inbv(unsigned short)>
c0019bc3:	83 c4 10             	add    esp,0x10
c0019bc6:	3c 1c                	cmp    al,0x1c
c0019bc8:	74 04                	je     c0019bce <Vm::faultHandler(regs*)+0x6b4>
c0019bca:	3c 5a                	cmp    al,0x5a
c0019bcc:	75 eb                	jne    c0019bb9 <Vm::faultHandler(regs*)+0x69f>
c0019bce:	3c 5a                	cmp    al,0x5a
c0019bd0:	74 04                	je     c0019bd6 <Vm::faultHandler(regs*)+0x6bc>
c0019bd2:	3c 1c                	cmp    al,0x1c
c0019bd4:	75 0f                	jne    c0019be5 <Vm::faultHandler(regs*)+0x6cb>
c0019bd6:	83 ec 0c             	sub    esp,0xc
c0019bd9:	6a 60                	push   0x60
c0019bdb:	e8 35 f5 ff ff       	call   c0019115 <Vm::inbv(unsigned short)>
c0019be0:	83 c4 10             	add    esp,0x10
c0019be3:	eb e9                	jmp    c0019bce <Vm::faultHandler(regs*)+0x6b4>
c0019be5:	31 c0                	xor    eax,eax
c0019be7:	83 c4 1c             	add    esp,0x1c
c0019bea:	5b                   	pop    ebx
c0019beb:	5e                   	pop    esi
c0019bec:	5f                   	pop    edi
c0019bed:	5d                   	pop    ebp
c0019bee:	c3                   	ret    
c0019bef:	90                   	nop

c0019bf0 <Vm::fpuInternalTo32(unsigned long long)>:
c0019bf0:	57                   	push   edi
c0019bf1:	56                   	push   esi
c0019bf2:	53                   	push   ebx
c0019bf3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bfb:	89 d6                	mov    esi,edx
c0019bfd:	89 d7                	mov    edi,edx
c0019bff:	89 c1                	mov    ecx,eax
c0019c01:	c1 ef 14             	shr    edi,0x14
c0019c04:	89 d3                	mov    ebx,edx
c0019c06:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0019c0c:	31 d2                	xor    edx,edx
c0019c0e:	89 f8                	mov    eax,edi
c0019c10:	81 e6 00 00 00 80    	and    esi,0x80000000
c0019c16:	bf ff 00 00 00       	mov    edi,0xff
c0019c1b:	05 80 fc ff ff       	add    eax,0xfffffc80
c0019c20:	83 d2 ff             	adc    edx,0xffffffff
c0019c23:	39 c7                	cmp    edi,eax
c0019c25:	bf 00 00 00 00       	mov    edi,0x0
c0019c2a:	19 d7                	sbb    edi,edx
c0019c2c:	72 16                	jb     c0019c44 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c0019c2e:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c0019c32:	c1 e0 17             	shl    eax,0x17
c0019c35:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c0019c3b:	09 f1                	or     ecx,esi
c0019c3d:	09 c1                	or     ecx,eax
c0019c3f:	89 cf                	mov    edi,ecx
c0019c41:	eb 05                	jmp    c0019c48 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c0019c43:	90                   	nop
c0019c44:	31 ff                	xor    edi,edi
c0019c46:	66 90                	xchg   ax,ax
c0019c48:	89 f8                	mov    eax,edi
c0019c4a:	5b                   	pop    ebx
c0019c4b:	5e                   	pop    esi
c0019c4c:	5f                   	pop    edi
c0019c4d:	c3                   	ret    

c0019c4e <Vm::fpuInternalTo64(unsigned long long)>:
c0019c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019c56:	c3                   	ret    

c0019c57 <Vm::fpu32ToInternal(unsigned int)>:
c0019c57:	57                   	push   edi
c0019c58:	31 ff                	xor    edi,edi
c0019c5a:	56                   	push   esi
c0019c5b:	53                   	push   ebx
c0019c5c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019c60:	89 cb                	mov    ebx,ecx
c0019c62:	89 ce                	mov    esi,ecx
c0019c64:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0019c6a:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c0019c70:	c1 e9 17             	shr    ecx,0x17
c0019c73:	89 f0                	mov    eax,esi
c0019c75:	0f b6 d1             	movzx  edx,cl
c0019c78:	81 c2 80 03 00 00    	add    edx,0x380
c0019c7e:	89 d1                	mov    ecx,edx
c0019c80:	89 fa                	mov    edx,edi
c0019c82:	c1 e1 14             	shl    ecx,0x14
c0019c85:	0f a4 c2 1d          	shld   edx,eax,0x1d
c0019c89:	c1 e0 1d             	shl    eax,0x1d
c0019c8c:	89 d7                	mov    edi,edx
c0019c8e:	89 c6                	mov    esi,eax
c0019c90:	89 ca                	mov    edx,ecx
c0019c92:	89 f0                	mov    eax,esi
c0019c94:	09 fa                	or     edx,edi
c0019c96:	09 da                	or     edx,ebx
c0019c98:	5b                   	pop    ebx
c0019c99:	5e                   	pop    esi
c0019c9a:	5f                   	pop    edi
c0019c9b:	c3                   	ret    

c0019c9c <Vm::fpu64ToInternal(unsigned long long)>:
c0019c9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ca0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ca4:	c3                   	ret    

c0019ca5 <Vm::fpuFloatToLong(unsigned long long)>:
c0019ca5:	57                   	push   edi
c0019ca6:	31 c0                	xor    eax,eax
c0019ca8:	56                   	push   esi
c0019ca9:	31 d2                	xor    edx,edx
c0019cab:	53                   	push   ebx
c0019cac:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019cb0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019cb4:	89 d9                	mov    ecx,ebx
c0019cb6:	c1 e9 14             	shr    ecx,0x14
c0019cb9:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0019cbf:	89 cf                	mov    edi,ecx
c0019cc1:	81 ef ff 03 00 00    	sub    edi,0x3ff
c0019cc7:	78 37                	js     c0019d00 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019cc9:	89 d9                	mov    ecx,ebx
c0019ccb:	89 f0                	mov    eax,esi
c0019ccd:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019cd3:	81 c9 00 00 10 00    	or     ecx,0x100000
c0019cd9:	89 ca                	mov    edx,ecx
c0019cdb:	b9 34 00 00 00       	mov    ecx,0x34
c0019ce0:	29 f9                	sub    ecx,edi
c0019ce2:	0f ad d0             	shrd   eax,edx,cl
c0019ce5:	d3 fa                	sar    edx,cl
c0019ce7:	f6 c1 20             	test   cl,0x20
c0019cea:	74 08                	je     c0019cf4 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c0019cec:	89 d0                	mov    eax,edx
c0019cee:	c1 fa 1f             	sar    edx,0x1f
c0019cf1:	8d 76 00             	lea    esi,[esi+0x0]
c0019cf4:	85 db                	test   ebx,ebx
c0019cf6:	79 08                	jns    c0019d00 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019cf8:	f7 d8                	neg    eax
c0019cfa:	83 d2 00             	adc    edx,0x0
c0019cfd:	f7 da                	neg    edx
c0019cff:	90                   	nop
c0019d00:	5b                   	pop    ebx
c0019d01:	5e                   	pop    esi
c0019d02:	5f                   	pop    edi
c0019d03:	c3                   	ret    

c0019d04 <Vm::fpuULongToFloat(unsigned long long)>:
c0019d04:	57                   	push   edi
c0019d05:	31 c9                	xor    ecx,ecx
c0019d07:	56                   	push   esi
c0019d08:	53                   	push   ebx
c0019d09:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019d0d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019d11:	8d 76 00             	lea    esi,[esi+0x0]
c0019d14:	0f ba e7 14          	bt     edi,0x14
c0019d18:	72 0a                	jb     c0019d24 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c0019d1a:	01 f6                	add    esi,esi
c0019d1c:	11 ff                	adc    edi,edi
c0019d1e:	41                   	inc    ecx
c0019d1f:	eb f3                	jmp    c0019d14 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c0019d21:	8d 76 00             	lea    esi,[esi+0x0]
c0019d24:	89 fa                	mov    edx,edi
c0019d26:	89 f0                	mov    eax,esi
c0019d28:	bb 33 04 00 00       	mov    ebx,0x433
c0019d2d:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0019d33:	29 cb                	sub    ebx,ecx
c0019d35:	89 d9                	mov    ecx,ebx
c0019d37:	5b                   	pop    ebx
c0019d38:	c1 e1 14             	shl    ecx,0x14
c0019d3b:	5e                   	pop    esi
c0019d3c:	09 ca                	or     edx,ecx
c0019d3e:	5f                   	pop    edi
c0019d3f:	c3                   	ret    

c0019d40 <Vm::fpuLongToFloat(long long)>:
c0019d40:	56                   	push   esi
c0019d41:	31 c0                	xor    eax,eax
c0019d43:	53                   	push   ebx
c0019d44:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019d48:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019d4c:	39 c8                	cmp    eax,ecx
c0019d4e:	19 d8                	sbb    eax,ebx
c0019d50:	7d 06                	jge    c0019d58 <Vm::fpuLongToFloat(long long)+0x18>
c0019d52:	31 f6                	xor    esi,esi
c0019d54:	eb 0e                	jmp    c0019d64 <Vm::fpuLongToFloat(long long)+0x24>
c0019d56:	66 90                	xchg   ax,ax
c0019d58:	f7 d9                	neg    ecx
c0019d5a:	be 01 00 00 00       	mov    esi,0x1
c0019d5f:	83 d3 00             	adc    ebx,0x0
c0019d62:	f7 db                	neg    ebx
c0019d64:	31 c0                	xor    eax,eax
c0019d66:	66 90                	xchg   ax,ax
c0019d68:	0f ba e3 14          	bt     ebx,0x14
c0019d6c:	72 0a                	jb     c0019d78 <Vm::fpuLongToFloat(long long)+0x38>
c0019d6e:	01 c9                	add    ecx,ecx
c0019d70:	11 db                	adc    ebx,ebx
c0019d72:	40                   	inc    eax
c0019d73:	eb f3                	jmp    c0019d68 <Vm::fpuLongToFloat(long long)+0x28>
c0019d75:	8d 76 00             	lea    esi,[esi+0x0]
c0019d78:	ba 33 04 00 00       	mov    edx,0x433
c0019d7d:	29 c2                	sub    edx,eax
c0019d7f:	89 c8                	mov    eax,ecx
c0019d81:	c1 e2 14             	shl    edx,0x14
c0019d84:	89 d9                	mov    ecx,ebx
c0019d86:	89 f3                	mov    ebx,esi
c0019d88:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019d8e:	09 ca                	or     edx,ecx
c0019d90:	84 db                	test   bl,bl
c0019d92:	74 08                	je     c0019d9c <Vm::fpuLongToFloat(long long)+0x5c>
c0019d94:	81 ca 00 00 00 80    	or     edx,0x80000000
c0019d9a:	66 90                	xchg   ax,ax
c0019d9c:	5b                   	pop    ebx
c0019d9d:	5e                   	pop    esi
c0019d9e:	c3                   	ret    

c0019d9f <Vm::fpuGet0()>:
c0019d9f:	31 c0                	xor    eax,eax
c0019da1:	31 d2                	xor    edx,edx
c0019da3:	c3                   	ret    

c0019da4 <Vm::fpuGet1()>:
c0019da4:	b8 01 00 00 00       	mov    eax,0x1
c0019da9:	31 d2                	xor    edx,edx
c0019dab:	c3                   	ret    

c0019dac <Vm::fpuGetPi()>:
c0019dac:	b8 03 00 00 00       	mov    eax,0x3
c0019db1:	31 d2                	xor    edx,edx
c0019db3:	c3                   	ret    

c0019db4 <Vm::fpuGetLog2E()>:
c0019db4:	83 ec 18             	sub    esp,0x18
c0019db7:	68 04 60 02 c0       	push   0xc0026004
c0019dbc:	e8 ee aa ff ff       	call   c00148af <Krnl::panic(char const*)>
c0019dc1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019dc6:	31 d2                	xor    edx,edx
c0019dc8:	83 c4 1c             	add    esp,0x1c
c0019dcb:	c3                   	ret    

c0019dcc <Vm::fpuGetLogE2()>:
c0019dcc:	83 ec 18             	sub    esp,0x18
c0019dcf:	68 10 60 02 c0       	push   0xc0026010
c0019dd4:	e8 d6 aa ff ff       	call   c00148af <Krnl::panic(char const*)>
c0019dd9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019dde:	31 d2                	xor    edx,edx
c0019de0:	83 c4 1c             	add    esp,0x1c
c0019de3:	c3                   	ret    

c0019de4 <Vm::fpuGetLog210()>:
c0019de4:	83 ec 18             	sub    esp,0x18
c0019de7:	68 1c 60 02 c0       	push   0xc002601c
c0019dec:	e8 be aa ff ff       	call   c00148af <Krnl::panic(char const*)>
c0019df1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019df6:	31 d2                	xor    edx,edx
c0019df8:	83 c4 1c             	add    esp,0x1c
c0019dfb:	c3                   	ret    

c0019dfc <Vm::fpuGetLog102()>:
c0019dfc:	83 ec 18             	sub    esp,0x18
c0019dff:	68 29 60 02 c0       	push   0xc0026029
c0019e04:	e8 a6 aa ff ff       	call   c00148af <Krnl::panic(char const*)>
c0019e09:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019e0e:	31 d2                	xor    edx,edx
c0019e10:	83 c4 1c             	add    esp,0x1c
c0019e13:	c3                   	ret    

c0019e14 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0019e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019e18:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019e1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019e20:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0019e24:	0f 92 c0             	setb   al
c0019e27:	c3                   	ret    

c0019e28 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0019e28:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019e2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e30:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0019e34:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c0019e38:	09 c2                	or     edx,eax
c0019e3a:	0f 94 c0             	sete   al
c0019e3d:	c3                   	ret    

c0019e3e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0019e3e:	57                   	push   edi
c0019e3f:	56                   	push   esi
c0019e40:	53                   	push   ebx
c0019e41:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019e45:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019e49:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019e4d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019e51:	57                   	push   edi
c0019e52:	56                   	push   esi
c0019e53:	53                   	push   ebx
c0019e54:	51                   	push   ecx
c0019e55:	e8 ce ff ff ff       	call   c0019e28 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c0019e5a:	83 c4 10             	add    esp,0x10
c0019e5d:	88 c2                	mov    dl,al
c0019e5f:	31 c0                	xor    eax,eax
c0019e61:	84 d2                	test   dl,dl
c0019e63:	75 0f                	jne    c0019e74 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c0019e65:	57                   	push   edi
c0019e66:	56                   	push   esi
c0019e67:	53                   	push   ebx
c0019e68:	51                   	push   ecx
c0019e69:	e8 a6 ff ff ff       	call   c0019e14 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0019e6e:	83 c4 10             	add    esp,0x10
c0019e71:	8d 76 00             	lea    esi,[esi+0x0]
c0019e74:	83 e0 01             	and    eax,0x1
c0019e77:	5b                   	pop    ebx
c0019e78:	88 c1                	mov    cl,al
c0019e7a:	83 e2 01             	and    edx,0x1
c0019e7d:	a0 61 92 02 c0       	mov    al,ds:0xc0029261
c0019e82:	c1 e2 06             	shl    edx,0x6
c0019e85:	83 e0 ba             	and    eax,0xffffffba
c0019e88:	5e                   	pop    esi
c0019e89:	09 c8                	or     eax,ecx
c0019e8b:	5f                   	pop    edi
c0019e8c:	09 d0                	or     eax,edx
c0019e8e:	a2 61 92 02 c0       	mov    ds:0xc0029261,al
c0019e93:	c3                   	ret    

c0019e94 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c0019e94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019e98:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019e9c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0019ea0:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c0019ea4:	c3                   	ret    

c0019ea5 <Vm::fpuAbs(unsigned long long)>:
c0019ea5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ea9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ead:	c3                   	ret    

c0019eae <Vm::fpuChs(unsigned long long)>:
c0019eae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019eb2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019eb6:	f7 d8                	neg    eax
c0019eb8:	83 d2 00             	adc    edx,0x0
c0019ebb:	f7 da                	neg    edx
c0019ebd:	c3                   	ret    

c0019ebe <Vm::fpuSub(unsigned long long, unsigned long long)>:
c0019ebe:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c0019ec2:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c0019ec7:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c0019ecb:	eb c7                	jmp    c0019e94 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c0019ecd <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c0019ecd:	53                   	push   ebx
c0019ece:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ed2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019ed6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019eda:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019ede:	0f af ca             	imul   ecx,edx
c0019ee1:	0f af d8             	imul   ebx,eax
c0019ee4:	f7 e2                	mul    edx
c0019ee6:	01 d9                	add    ecx,ebx
c0019ee8:	5b                   	pop    ebx
c0019ee9:	01 ca                	add    edx,ecx
c0019eeb:	c3                   	ret    

c0019eec <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c0019eec:	83 ec 0c             	sub    esp,0xc
c0019eef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ef3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ef7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019efb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019eff:	e8 80 86 00 00       	call   c0022584 <__udivdi3>
c0019f04:	83 c4 1c             	add    esp,0x1c
c0019f07:	c3                   	ret    

c0019f08 <Vm::fpuSquare(unsigned long long)>:
c0019f08:	50                   	push   eax
c0019f09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019f11:	52                   	push   edx
c0019f12:	50                   	push   eax
c0019f13:	52                   	push   edx
c0019f14:	50                   	push   eax
c0019f15:	e8 b3 ff ff ff       	call   c0019ecd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019f1a:	83 c4 14             	add    esp,0x14
c0019f1d:	c3                   	ret    

c0019f1e <Vm::fpuGetReg(int)>:
c0019f1e:	83 ec 0c             	sub    esp,0xc
c0019f21:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019f26:	76 10                	jbe    c0019f38 <Vm::fpuGetReg(int)+0x1a>
c0019f28:	83 ec 0c             	sub    esp,0xc
c0019f2b:	68 36 60 02 c0       	push   0xc0026036
c0019f30:	e8 7a a9 ff ff       	call   c00148af <Krnl::panic(char const*)>
c0019f35:	83 c4 10             	add    esp,0x10
c0019f38:	a0 61 92 02 c0       	mov    al,ds:0xc0029261
c0019f3d:	b9 08 00 00 00       	mov    ecx,0x8
c0019f42:	c0 e8 03             	shr    al,0x3
c0019f45:	83 e0 07             	and    eax,0x7
c0019f48:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0019f4c:	99                   	cdq    
c0019f4d:	f7 f9                	idiv   ecx
c0019f4f:	8b 04 d5 64 92 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd6d9c]
c0019f56:	8b 14 d5 68 92 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd6d98]
c0019f5d:	83 c4 0c             	add    esp,0xc
c0019f60:	c3                   	ret    

c0019f61 <Vm::fpuSetReg(int, unsigned long long)>:
c0019f61:	57                   	push   edi
c0019f62:	56                   	push   esi
c0019f63:	52                   	push   edx
c0019f64:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019f68:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019f6c:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019f71:	76 11                	jbe    c0019f84 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c0019f73:	83 ec 0c             	sub    esp,0xc
c0019f76:	68 49 60 02 c0       	push   0xc0026049
c0019f7b:	e8 2f a9 ff ff       	call   c00148af <Krnl::panic(char const*)>
c0019f80:	83 c4 10             	add    esp,0x10
c0019f83:	90                   	nop
c0019f84:	a0 61 92 02 c0       	mov    al,ds:0xc0029261
c0019f89:	b9 08 00 00 00       	mov    ecx,0x8
c0019f8e:	c0 e8 03             	shr    al,0x3
c0019f91:	83 e0 07             	and    eax,0x7
c0019f94:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0019f98:	99                   	cdq    
c0019f99:	f7 f9                	idiv   ecx
c0019f9b:	89 34 d5 64 92 02 c0 	mov    DWORD PTR [edx*8-0x3ffd6d9c],esi
c0019fa2:	89 3c d5 68 92 02 c0 	mov    DWORD PTR [edx*8-0x3ffd6d98],edi
c0019fa9:	58                   	pop    eax
c0019faa:	5e                   	pop    esi
c0019fab:	5f                   	pop    edi
c0019fac:	c3                   	ret    

c0019fad <Vm::fpuPush(unsigned long long)>:
c0019fad:	a0 61 92 02 c0       	mov    al,ds:0xc0029261
c0019fb2:	c0 e8 03             	shr    al,0x3
c0019fb5:	83 e0 07             	and    eax,0x7
c0019fb8:	83 c0 07             	add    eax,0x7
c0019fbb:	88 c2                	mov    dl,al
c0019fbd:	83 e0 07             	and    eax,0x7
c0019fc0:	83 e2 07             	and    edx,0x7
c0019fc3:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c0019fca:	8a 15 61 92 02 c0    	mov    dl,BYTE PTR ds:0xc0029261
c0019fd0:	83 e2 c7             	and    edx,0xffffffc7
c0019fd3:	09 ca                	or     edx,ecx
c0019fd5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019fd9:	88 15 61 92 02 c0    	mov    BYTE PTR ds:0xc0029261,dl
c0019fdf:	89 0c c5 68 92 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6d98],ecx
c0019fe6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019fea:	89 14 c5 64 92 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6d9c],edx
c0019ff1:	a1 a4 92 02 c0       	mov    eax,ds:0xc00292a4
c0019ff6:	83 f8 08             	cmp    eax,0x8
c0019ff9:	75 09                	jne    c001a004 <Vm::fpuPush(unsigned long long)+0x57>
c0019ffb:	80 0d 60 92 02 c0 40 	or     BYTE PTR ds:0xc0029260,0x40
c001a002:	c3                   	ret    
c001a003:	90                   	nop
c001a004:	40                   	inc    eax
c001a005:	a3 a4 92 02 c0       	mov    ds:0xc00292a4,eax
c001a00a:	c3                   	ret    

c001a00b <Vm::fpuPop()>:
c001a00b:	8a 0d 61 92 02 c0    	mov    cl,BYTE PTR ds:0xc0029261
c001a011:	53                   	push   ebx
c001a012:	c0 e9 03             	shr    cl,0x3
c001a015:	8a 1d 61 92 02 c0    	mov    bl,BYTE PTR ds:0xc0029261
c001a01b:	83 e1 07             	and    ecx,0x7
c001a01e:	83 e3 c7             	and    ebx,0xffffffc7
c001a021:	8b 04 cd 64 92 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd6d9c]
c001a028:	8b 14 cd 68 92 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd6d98]
c001a02f:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001a036:	83 e1 38             	and    ecx,0x38
c001a039:	09 d9                	or     ecx,ebx
c001a03b:	88 0d 61 92 02 c0    	mov    BYTE PTR ds:0xc0029261,cl
c001a041:	8b 0d a4 92 02 c0    	mov    ecx,DWORD PTR ds:0xc00292a4
c001a047:	85 c9                	test   ecx,ecx
c001a049:	74 09                	je     c001a054 <Vm::fpuPop()+0x49>
c001a04b:	49                   	dec    ecx
c001a04c:	89 0d a4 92 02 c0    	mov    DWORD PTR ds:0xc00292a4,ecx
c001a052:	eb 08                	jmp    c001a05c <Vm::fpuPop()+0x51>
c001a054:	80 0d 60 92 02 c0 40 	or     BYTE PTR ds:0xc0029260,0x40
c001a05b:	90                   	nop
c001a05c:	5b                   	pop    ebx
c001a05d:	c3                   	ret    

c001a05e <Vm::x87Handler(regs*)>:
c001a05e:	55                   	push   ebp
c001a05f:	57                   	push   edi
c001a060:	56                   	push   esi
c001a061:	53                   	push   ebx
c001a062:	83 ec 1c             	sub    esp,0x1c
c001a065:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a069:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001a06e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001a071:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001a079:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001a07d:	50                   	push   eax
c001a07e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001a082:	50                   	push   eax
c001a083:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a087:	50                   	push   eax
c001a088:	53                   	push   ebx
c001a089:	e8 3a 9f ff ff       	call   c0013fc8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001a08e:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001a091:	83 c4 10             	add    esp,0x10
c001a094:	89 c6                	mov    esi,eax
c001a096:	80 fa d9             	cmp    dl,0xd9
c001a099:	0f 85 79 01 00 00    	jne    c001a218 <Vm::x87Handler(regs*)+0x1ba>
c001a09f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a0a3:	8d 50 20             	lea    edx,[eax+0x20]
c001a0a6:	80 fa 0e             	cmp    dl,0xe
c001a0a9:	0f 87 a5 00 00 00    	ja     c001a154 <Vm::x87Handler(regs*)+0xf6>
c001a0af:	0f b6 d2             	movzx  edx,dl
c001a0b2:	ff 24 95 5c 60 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9fa4]
c001a0b9:	8d 76 00             	lea    esi,[esi+0x0]
c001a0bc:	e8 de fc ff ff       	call   c0019d9f <Vm::fpuGet0()>
c001a0c1:	eb 09                	jmp    c001a0cc <Vm::x87Handler(regs*)+0x6e>
c001a0c3:	90                   	nop
c001a0c4:	e8 db fc ff ff       	call   c0019da4 <Vm::fpuGet1()>
c001a0c9:	8d 76 00             	lea    esi,[esi+0x0]
c001a0cc:	57                   	push   edi
c001a0cd:	57                   	push   edi
c001a0ce:	66 90                	xchg   ax,ax
c001a0d0:	52                   	push   edx
c001a0d1:	50                   	push   eax
c001a0d2:	e8 d6 fe ff ff       	call   c0019fad <Vm::fpuPush(unsigned long long)>
c001a0d7:	90                   	nop
c001a0d8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a0dc:	83 c4 10             	add    esp,0x10
c001a0df:	90                   	nop
c001a0e0:	b0 01                	mov    al,0x1
c001a0e2:	e9 89 0a 00 00       	jmp    c001ab70 <Vm::x87Handler(regs*)+0xb12>
c001a0e7:	90                   	nop
c001a0e8:	83 ec 0c             	sub    esp,0xc
c001a0eb:	6a 00                	push   0x0
c001a0ed:	e8 2c fe ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a0f2:	59                   	pop    ecx
c001a0f3:	5e                   	pop    esi
c001a0f4:	52                   	push   edx
c001a0f5:	50                   	push   eax
c001a0f6:	e8 b3 fd ff ff       	call   c0019eae <Vm::fpuChs(unsigned long long)>
c001a0fb:	eb 17                	jmp    c001a114 <Vm::x87Handler(regs*)+0xb6>
c001a0fd:	8d 76 00             	lea    esi,[esi+0x0]
c001a100:	83 ec 0c             	sub    esp,0xc
c001a103:	6a 00                	push   0x0
c001a105:	e8 14 fe ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a10a:	5f                   	pop    edi
c001a10b:	5d                   	pop    ebp
c001a10c:	52                   	push   edx
c001a10d:	50                   	push   eax
c001a10e:	e8 92 fd ff ff       	call   c0019ea5 <Vm::fpuAbs(unsigned long long)>
c001a113:	90                   	nop
c001a114:	83 c4 0c             	add    esp,0xc
c001a117:	90                   	nop
c001a118:	52                   	push   edx
c001a119:	50                   	push   eax
c001a11a:	66 90                	xchg   ax,ax
c001a11c:	6a 00                	push   0x0
c001a11e:	66 90                	xchg   ax,ax
c001a120:	e8 3c fe ff ff       	call   c0019f61 <Vm::fpuSetReg(int, unsigned long long)>
c001a125:	eb b1                	jmp    c001a0d8 <Vm::x87Handler(regs*)+0x7a>
c001a127:	90                   	nop
c001a128:	e8 b7 fc ff ff       	call   c0019de4 <Vm::fpuGetLog210()>
c001a12d:	eb 9d                	jmp    c001a0cc <Vm::x87Handler(regs*)+0x6e>
c001a12f:	90                   	nop
c001a130:	e8 7f fc ff ff       	call   c0019db4 <Vm::fpuGetLog2E()>
c001a135:	eb 95                	jmp    c001a0cc <Vm::x87Handler(regs*)+0x6e>
c001a137:	90                   	nop
c001a138:	e8 6f fc ff ff       	call   c0019dac <Vm::fpuGetPi()>
c001a13d:	eb 8d                	jmp    c001a0cc <Vm::x87Handler(regs*)+0x6e>
c001a13f:	90                   	nop
c001a140:	e8 b7 fc ff ff       	call   c0019dfc <Vm::fpuGetLog102()>
c001a145:	eb 85                	jmp    c001a0cc <Vm::x87Handler(regs*)+0x6e>
c001a147:	90                   	nop
c001a148:	e8 7f fc ff ff       	call   c0019dcc <Vm::fpuGetLogE2()>
c001a14d:	e9 7a ff ff ff       	jmp    c001a0cc <Vm::x87Handler(regs*)+0x6e>
c001a152:	66 90                	xchg   ax,ax
c001a154:	8d 50 40             	lea    edx,[eax+0x40]
c001a157:	80 fa 07             	cmp    dl,0x7
c001a15a:	77 18                	ja     c001a174 <Vm::x87Handler(regs*)+0x116>
c001a15c:	83 ec 0c             	sub    esp,0xc
c001a15f:	2d c0 00 00 00       	sub    eax,0xc0
c001a164:	50                   	push   eax
c001a165:	e8 b4 fd ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a16a:	59                   	pop    ecx
c001a16b:	5e                   	pop    esi
c001a16c:	e9 5f ff ff ff       	jmp    c001a0d0 <Vm::x87Handler(regs*)+0x72>
c001a171:	8d 76 00             	lea    esi,[esi+0x0]
c001a174:	8d 50 38             	lea    edx,[eax+0x38]
c001a177:	80 fa 07             	cmp    dl,0x7
c001a17a:	77 3c                	ja     c001a1b8 <Vm::x87Handler(regs*)+0x15a>
c001a17c:	83 ec 0c             	sub    esp,0xc
c001a17f:	2d c8 00 00 00       	sub    eax,0xc8
c001a184:	50                   	push   eax
c001a185:	e8 94 fd ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a18a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a191:	89 c6                	mov    esi,eax
c001a193:	89 d7                	mov    edi,edx
c001a195:	e8 84 fd ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a19a:	83 c4 0c             	add    esp,0xc
c001a19d:	52                   	push   edx
c001a19e:	50                   	push   eax
c001a19f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a1a3:	2d c8 00 00 00       	sub    eax,0xc8
c001a1a8:	50                   	push   eax
c001a1a9:	e8 b3 fd ff ff       	call   c0019f61 <Vm::fpuSetReg(int, unsigned long long)>
c001a1ae:	83 c4 0c             	add    esp,0xc
c001a1b1:	57                   	push   edi
c001a1b2:	56                   	push   esi
c001a1b3:	e9 64 ff ff ff       	jmp    c001a11c <Vm::x87Handler(regs*)+0xbe>
c001a1b8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a1bc:	84 d2                	test   dl,dl
c001a1be:	75 10                	jne    c001a1d0 <Vm::x87Handler(regs*)+0x172>
c001a1c0:	83 ec 0c             	sub    esp,0xc
c001a1c3:	ff 36                	push   DWORD PTR [esi]
c001a1c5:	e8 8d fa ff ff       	call   c0019c57 <Vm::fpu32ToInternal(unsigned int)>
c001a1ca:	e9 c9 00 00 00       	jmp    c001a298 <Vm::x87Handler(regs*)+0x23a>
c001a1cf:	90                   	nop
c001a1d0:	80 fa 03             	cmp    dl,0x3
c001a1d3:	75 13                	jne    c001a1e8 <Vm::x87Handler(regs*)+0x18a>
c001a1d5:	e8 31 fe ff ff       	call   c001a00b <Vm::fpuPop()>
c001a1da:	55                   	push   ebp
c001a1db:	55                   	push   ebp
c001a1dc:	52                   	push   edx
c001a1dd:	50                   	push   eax
c001a1de:	e8 0d fa ff ff       	call   c0019bf0 <Vm::fpuInternalTo32(unsigned long long)>
c001a1e3:	e9 90 00 00 00       	jmp    c001a278 <Vm::x87Handler(regs*)+0x21a>
c001a1e8:	80 fa 05             	cmp    dl,0x5
c001a1eb:	75 0f                	jne    c001a1fc <Vm::x87Handler(regs*)+0x19e>
c001a1ed:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a1f0:	66 a3 62 92 02 c0    	mov    ds:0xc0029262,ax
c001a1f6:	e9 ed 00 00 00       	jmp    c001a2e8 <Vm::x87Handler(regs*)+0x28a>
c001a1fb:	90                   	nop
c001a1fc:	31 c0                	xor    eax,eax
c001a1fe:	80 fa 07             	cmp    dl,0x7
c001a201:	0f 85 69 09 00 00    	jne    c001ab70 <Vm::x87Handler(regs*)+0xb12>
c001a207:	66 a1 62 92 02 c0    	mov    ax,ds:0xc0029262
c001a20d:	66 89 06             	mov    WORD PTR [esi],ax
c001a210:	e9 d3 00 00 00       	jmp    c001a2e8 <Vm::x87Handler(regs*)+0x28a>
c001a215:	8d 76 00             	lea    esi,[esi+0x0]
c001a218:	80 fa d8             	cmp    dl,0xd8
c001a21b:	0f 84 d3 00 00 00    	je     c001a2f4 <Vm::x87Handler(regs*)+0x296>
c001a221:	80 fa dc             	cmp    dl,0xdc
c001a224:	0f 84 2a 02 00 00    	je     c001a454 <Vm::x87Handler(regs*)+0x3f6>
c001a22a:	80 fa de             	cmp    dl,0xde
c001a22d:	0f 84 f1 02 00 00    	je     c001a524 <Vm::x87Handler(regs*)+0x4c6>
c001a233:	80 fa dd             	cmp    dl,0xdd
c001a236:	0f 84 94 04 00 00    	je     c001a6d0 <Vm::x87Handler(regs*)+0x672>
c001a23c:	80 fa da             	cmp    dl,0xda
c001a23f:	0f 84 5f 05 00 00    	je     c001a7a4 <Vm::x87Handler(regs*)+0x746>
c001a245:	80 fa df             	cmp    dl,0xdf
c001a248:	0f 84 aa 05 00 00    	je     c001a7f8 <Vm::x87Handler(regs*)+0x79a>
c001a24e:	31 c0                	xor    eax,eax
c001a250:	80 fa db             	cmp    dl,0xdb
c001a253:	0f 85 17 09 00 00    	jne    c001ab70 <Vm::x87Handler(regs*)+0xb12>
c001a259:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a25d:	80 fa 03             	cmp    dl,0x3
c001a260:	0f 85 c2 06 00 00    	jne    c001a928 <Vm::x87Handler(regs*)+0x8ca>
c001a266:	e8 a0 fd ff ff       	call   c001a00b <Vm::fpuPop()>
c001a26b:	55                   	push   ebp
c001a26c:	55                   	push   ebp
c001a26d:	8d 76 00             	lea    esi,[esi+0x0]
c001a270:	52                   	push   edx
c001a271:	50                   	push   eax
c001a272:	e8 2e fa ff ff       	call   c0019ca5 <Vm::fpuFloatToLong(unsigned long long)>
c001a277:	90                   	nop
c001a278:	83 c4 10             	add    esp,0x10
c001a27b:	89 06                	mov    DWORD PTR [esi],eax
c001a27d:	eb 69                	jmp    c001a2e8 <Vm::x87Handler(regs*)+0x28a>
c001a27f:	90                   	nop
c001a280:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a284:	84 d2                	test   dl,dl
c001a286:	0f 85 2c 06 00 00    	jne    c001a8b8 <Vm::x87Handler(regs*)+0x85a>
c001a28c:	57                   	push   edi
c001a28d:	57                   	push   edi
c001a28e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a291:	ff 36                	push   DWORD PTR [esi]
c001a293:	e8 04 fa ff ff       	call   c0019c9c <Vm::fpu64ToInternal(unsigned long long)>
c001a298:	5e                   	pop    esi
c001a299:	5f                   	pop    edi
c001a29a:	52                   	push   edx
c001a29b:	50                   	push   eax
c001a29c:	e8 0c fd ff ff       	call   c0019fad <Vm::fpuPush(unsigned long long)>
c001a2a1:	8d 76 00             	lea    esi,[esi+0x0]
c001a2a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a2a8:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a2ab:	e9 2c fe ff ff       	jmp    c001a0dc <Vm::x87Handler(regs*)+0x7e>
c001a2b0:	80 fa 03             	cmp    dl,0x3
c001a2b3:	0f 85 2b 07 00 00    	jne    c001a9e4 <Vm::x87Handler(regs*)+0x986>
c001a2b9:	57                   	push   edi
c001a2ba:	57                   	push   edi
c001a2bb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a2be:	ff 36                	push   DWORD PTR [esi]
c001a2c0:	e8 d7 f9 ff ff       	call   c0019c9c <Vm::fpu64ToInternal(unsigned long long)>
c001a2c5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a2cc:	89 c6                	mov    esi,eax
c001a2ce:	89 d7                	mov    edi,edx
c001a2d0:	e8 49 fc ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a2d5:	57                   	push   edi
c001a2d6:	56                   	push   esi
c001a2d7:	52                   	push   edx
c001a2d8:	50                   	push   eax
c001a2d9:	e8 60 fb ff ff       	call   c0019e3e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a2de:	83 c4 20             	add    esp,0x20
c001a2e1:	e8 25 fd ff ff       	call   c001a00b <Vm::fpuPop()>
c001a2e6:	66 90                	xchg   ax,ax
c001a2e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a2ec:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a2ef:	e9 ec fd ff ff       	jmp    c001a0e0 <Vm::x87Handler(regs*)+0x82>
c001a2f4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a2f8:	8d 50 40             	lea    edx,[eax+0x40]
c001a2fb:	80 fa 07             	cmp    dl,0x7
c001a2fe:	77 2c                	ja     c001a32c <Vm::x87Handler(regs*)+0x2ce>
c001a300:	83 ec 0c             	sub    esp,0xc
c001a303:	2d c0 00 00 00       	sub    eax,0xc0
c001a308:	50                   	push   eax
c001a309:	e8 10 fc ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a30e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a315:	89 c6                	mov    esi,eax
c001a317:	89 d7                	mov    edi,edx
c001a319:	e8 00 fc ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a31e:	57                   	push   edi
c001a31f:	56                   	push   esi
c001a320:	52                   	push   edx
c001a321:	50                   	push   eax
c001a322:	e8 6d fb ff ff       	call   c0019e94 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a327:	eb 33                	jmp    c001a35c <Vm::x87Handler(regs*)+0x2fe>
c001a329:	8d 76 00             	lea    esi,[esi+0x0]
c001a32c:	8d 50 38             	lea    edx,[eax+0x38]
c001a32f:	80 fa 07             	cmp    dl,0x7
c001a332:	77 30                	ja     c001a364 <Vm::x87Handler(regs*)+0x306>
c001a334:	83 ec 0c             	sub    esp,0xc
c001a337:	2d c8 00 00 00       	sub    eax,0xc8
c001a33c:	50                   	push   eax
c001a33d:	e8 dc fb ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a342:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a349:	89 c6                	mov    esi,eax
c001a34b:	89 d7                	mov    edi,edx
c001a34d:	e8 cc fb ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a352:	57                   	push   edi
c001a353:	56                   	push   esi
c001a354:	52                   	push   edx
c001a355:	50                   	push   eax
c001a356:	e8 72 fb ff ff       	call   c0019ecd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a35b:	90                   	nop
c001a35c:	83 c4 1c             	add    esp,0x1c
c001a35f:	e9 b4 fd ff ff       	jmp    c001a118 <Vm::x87Handler(regs*)+0xba>
c001a364:	8d 50 30             	lea    edx,[eax+0x30]
c001a367:	80 fa 07             	cmp    dl,0x7
c001a36a:	77 10                	ja     c001a37c <Vm::x87Handler(regs*)+0x31e>
c001a36c:	83 ec 0c             	sub    esp,0xc
c001a36f:	2d d0 00 00 00       	sub    eax,0xd0
c001a374:	e9 c3 03 00 00       	jmp    c001a73c <Vm::x87Handler(regs*)+0x6de>
c001a379:	8d 76 00             	lea    esi,[esi+0x0]
c001a37c:	8d 50 28             	lea    edx,[eax+0x28]
c001a37f:	80 fa 07             	cmp    dl,0x7
c001a382:	77 10                	ja     c001a394 <Vm::x87Handler(regs*)+0x336>
c001a384:	83 ec 0c             	sub    esp,0xc
c001a387:	2d d8 00 00 00       	sub    eax,0xd8
c001a38c:	e9 e7 03 00 00       	jmp    c001a778 <Vm::x87Handler(regs*)+0x71a>
c001a391:	8d 76 00             	lea    esi,[esi+0x0]
c001a394:	8d 50 20             	lea    edx,[eax+0x20]
c001a397:	80 fa 07             	cmp    dl,0x7
c001a39a:	77 1c                	ja     c001a3b8 <Vm::x87Handler(regs*)+0x35a>
c001a39c:	83 ec 0c             	sub    esp,0xc
c001a39f:	2d e0 00 00 00       	sub    eax,0xe0
c001a3a4:	50                   	push   eax
c001a3a5:	e8 74 fb ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a3aa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a3b1:	89 c6                	mov    esi,eax
c001a3b3:	89 d7                	mov    edi,edx
c001a3b5:	eb 25                	jmp    c001a3dc <Vm::x87Handler(regs*)+0x37e>
c001a3b7:	90                   	nop
c001a3b8:	8d 50 18             	lea    edx,[eax+0x18]
c001a3bb:	80 fa 07             	cmp    dl,0x7
c001a3be:	77 30                	ja     c001a3f0 <Vm::x87Handler(regs*)+0x392>
c001a3c0:	83 ec 0c             	sub    esp,0xc
c001a3c3:	6a 00                	push   0x0
c001a3c5:	e8 54 fb ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a3ca:	89 c6                	mov    esi,eax
c001a3cc:	89 d7                	mov    edi,edx
c001a3ce:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a3d2:	2d e8 00 00 00       	sub    eax,0xe8
c001a3d7:	89 04 24             	mov    DWORD PTR [esp],eax
c001a3da:	66 90                	xchg   ax,ax
c001a3dc:	e8 3d fb ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a3e1:	57                   	push   edi
c001a3e2:	56                   	push   esi
c001a3e3:	52                   	push   edx
c001a3e4:	50                   	push   eax
c001a3e5:	e8 d4 fa ff ff       	call   c0019ebe <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a3ea:	e9 6d ff ff ff       	jmp    c001a35c <Vm::x87Handler(regs*)+0x2fe>
c001a3ef:	90                   	nop
c001a3f0:	8d 50 10             	lea    edx,[eax+0x10]
c001a3f3:	80 fa 07             	cmp    dl,0x7
c001a3f6:	77 1c                	ja     c001a414 <Vm::x87Handler(regs*)+0x3b6>
c001a3f8:	83 ec 0c             	sub    esp,0xc
c001a3fb:	2d f0 00 00 00       	sub    eax,0xf0
c001a400:	50                   	push   eax
c001a401:	e8 18 fb ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a406:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a40d:	89 c6                	mov    esi,eax
c001a40f:	89 d7                	mov    edi,edx
c001a411:	eb 25                	jmp    c001a438 <Vm::x87Handler(regs*)+0x3da>
c001a413:	90                   	nop
c001a414:	3c f7                	cmp    al,0xf7
c001a416:	0f 86 00 04 00 00    	jbe    c001a81c <Vm::x87Handler(regs*)+0x7be>
c001a41c:	83 ec 0c             	sub    esp,0xc
c001a41f:	6a 00                	push   0x0
c001a421:	e8 f8 fa ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a426:	89 c6                	mov    esi,eax
c001a428:	89 d7                	mov    edi,edx
c001a42a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a42e:	2d f8 00 00 00       	sub    eax,0xf8
c001a433:	89 04 24             	mov    DWORD PTR [esp],eax
c001a436:	66 90                	xchg   ax,ax
c001a438:	e8 e1 fa ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a43d:	57                   	push   edi
c001a43e:	56                   	push   esi
c001a43f:	52                   	push   edx
c001a440:	50                   	push   eax
c001a441:	e8 a6 fa ff ff       	call   c0019eec <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a446:	83 c4 1c             	add    esp,0x1c
c001a449:	52                   	push   edx
c001a44a:	50                   	push   eax
c001a44b:	6a 00                	push   0x0
c001a44d:	e9 6a 02 00 00       	jmp    c001a6bc <Vm::x87Handler(regs*)+0x65e>
c001a452:	66 90                	xchg   ax,ax
c001a454:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a458:	8d 50 40             	lea    edx,[eax+0x40]
c001a45b:	80 fa 07             	cmp    dl,0x7
c001a45e:	77 38                	ja     c001a498 <Vm::x87Handler(regs*)+0x43a>
c001a460:	83 ec 0c             	sub    esp,0xc
c001a463:	2d c0 00 00 00       	sub    eax,0xc0
c001a468:	50                   	push   eax
c001a469:	e8 b0 fa ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a46e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a475:	89 c6                	mov    esi,eax
c001a477:	89 d7                	mov    edi,edx
c001a479:	e8 a0 fa ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a47e:	57                   	push   edi
c001a47f:	56                   	push   esi
c001a480:	52                   	push   edx
c001a481:	50                   	push   eax
c001a482:	e8 0d fa ff ff       	call   c0019e94 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a487:	83 c4 1c             	add    esp,0x1c
c001a48a:	52                   	push   edx
c001a48b:	50                   	push   eax
c001a48c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a490:	2d c0 00 00 00       	sub    eax,0xc0
c001a495:	eb 41                	jmp    c001a4d8 <Vm::x87Handler(regs*)+0x47a>
c001a497:	90                   	nop
c001a498:	8d 50 38             	lea    edx,[eax+0x38]
c001a49b:	80 fa 07             	cmp    dl,0x7
c001a49e:	77 40                	ja     c001a4e0 <Vm::x87Handler(regs*)+0x482>
c001a4a0:	83 ec 0c             	sub    esp,0xc
c001a4a3:	2d c8 00 00 00       	sub    eax,0xc8
c001a4a8:	50                   	push   eax
c001a4a9:	e8 70 fa ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a4ae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a4b5:	89 c6                	mov    esi,eax
c001a4b7:	89 d7                	mov    edi,edx
c001a4b9:	e8 60 fa ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a4be:	57                   	push   edi
c001a4bf:	56                   	push   esi
c001a4c0:	52                   	push   edx
c001a4c1:	50                   	push   eax
c001a4c2:	e8 06 fa ff ff       	call   c0019ecd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a4c7:	83 c4 1c             	add    esp,0x1c
c001a4ca:	52                   	push   edx
c001a4cb:	50                   	push   eax
c001a4cc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a4d0:	2d c8 00 00 00       	sub    eax,0xc8
c001a4d5:	8d 76 00             	lea    esi,[esi+0x0]
c001a4d8:	50                   	push   eax
c001a4d9:	e9 42 fc ff ff       	jmp    c001a120 <Vm::x87Handler(regs*)+0xc2>
c001a4de:	66 90                	xchg   ax,ax
c001a4e0:	83 c0 18             	add    eax,0x18
c001a4e3:	3c 07                	cmp    al,0x7
c001a4e5:	0f 87 6d 04 00 00    	ja     c001a958 <Vm::x87Handler(regs*)+0x8fa>
c001a4eb:	83 ec 0c             	sub    esp,0xc
c001a4ee:	6a 00                	push   0x0
c001a4f0:	e8 29 fa ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a4f5:	89 c6                	mov    esi,eax
c001a4f7:	89 d7                	mov    edi,edx
c001a4f9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a4fd:	2d e8 00 00 00       	sub    eax,0xe8
c001a502:	89 04 24             	mov    DWORD PTR [esp],eax
c001a505:	e8 14 fa ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a50a:	57                   	push   edi
c001a50b:	56                   	push   esi
c001a50c:	52                   	push   edx
c001a50d:	50                   	push   eax
c001a50e:	e8 ab f9 ff ff       	call   c0019ebe <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a513:	83 c4 1c             	add    esp,0x1c
c001a516:	52                   	push   edx
c001a517:	50                   	push   eax
c001a518:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a51c:	2d e8 00 00 00       	sub    eax,0xe8
c001a521:	eb b5                	jmp    c001a4d8 <Vm::x87Handler(regs*)+0x47a>
c001a523:	90                   	nop
c001a524:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a528:	8d 50 40             	lea    edx,[eax+0x40]
c001a52b:	80 fa 07             	cmp    dl,0x7
c001a52e:	77 3c                	ja     c001a56c <Vm::x87Handler(regs*)+0x50e>
c001a530:	83 ec 0c             	sub    esp,0xc
c001a533:	2d c0 00 00 00       	sub    eax,0xc0
c001a538:	50                   	push   eax
c001a539:	e8 e0 f9 ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a53e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a545:	89 c6                	mov    esi,eax
c001a547:	89 d7                	mov    edi,edx
c001a549:	e8 d0 f9 ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a54e:	57                   	push   edi
c001a54f:	56                   	push   esi
c001a550:	52                   	push   edx
c001a551:	50                   	push   eax
c001a552:	e8 3d f9 ff ff       	call   c0019e94 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a557:	83 c4 1c             	add    esp,0x1c
c001a55a:	52                   	push   edx
c001a55b:	50                   	push   eax
c001a55c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a560:	2d c0 00 00 00       	sub    eax,0xc0
c001a565:	e9 b2 01 00 00       	jmp    c001a71c <Vm::x87Handler(regs*)+0x6be>
c001a56a:	66 90                	xchg   ax,ax
c001a56c:	8d 50 20             	lea    edx,[eax+0x20]
c001a56f:	80 fa 07             	cmp    dl,0x7
c001a572:	77 3c                	ja     c001a5b0 <Vm::x87Handler(regs*)+0x552>
c001a574:	83 ec 0c             	sub    esp,0xc
c001a577:	2d e0 00 00 00       	sub    eax,0xe0
c001a57c:	50                   	push   eax
c001a57d:	e8 9c f9 ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a582:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a589:	89 c6                	mov    esi,eax
c001a58b:	89 d7                	mov    edi,edx
c001a58d:	e8 8c f9 ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a592:	57                   	push   edi
c001a593:	56                   	push   esi
c001a594:	52                   	push   edx
c001a595:	50                   	push   eax
c001a596:	e8 23 f9 ff ff       	call   c0019ebe <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a59b:	83 c4 1c             	add    esp,0x1c
c001a59e:	52                   	push   edx
c001a59f:	50                   	push   eax
c001a5a0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a5a4:	2d e0 00 00 00       	sub    eax,0xe0
c001a5a9:	e9 6e 01 00 00       	jmp    c001a71c <Vm::x87Handler(regs*)+0x6be>
c001a5ae:	66 90                	xchg   ax,ax
c001a5b0:	8d 50 18             	lea    edx,[eax+0x18]
c001a5b3:	80 fa 07             	cmp    dl,0x7
c001a5b6:	77 3c                	ja     c001a5f4 <Vm::x87Handler(regs*)+0x596>
c001a5b8:	83 ec 0c             	sub    esp,0xc
c001a5bb:	6a 00                	push   0x0
c001a5bd:	e8 5c f9 ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a5c2:	89 c6                	mov    esi,eax
c001a5c4:	89 d7                	mov    edi,edx
c001a5c6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a5ca:	2d e8 00 00 00       	sub    eax,0xe8
c001a5cf:	89 04 24             	mov    DWORD PTR [esp],eax
c001a5d2:	e8 47 f9 ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a5d7:	57                   	push   edi
c001a5d8:	56                   	push   esi
c001a5d9:	52                   	push   edx
c001a5da:	50                   	push   eax
c001a5db:	e8 de f8 ff ff       	call   c0019ebe <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a5e0:	83 c4 1c             	add    esp,0x1c
c001a5e3:	52                   	push   edx
c001a5e4:	50                   	push   eax
c001a5e5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a5e9:	2d e8 00 00 00       	sub    eax,0xe8
c001a5ee:	e9 29 01 00 00       	jmp    c001a71c <Vm::x87Handler(regs*)+0x6be>
c001a5f3:	90                   	nop
c001a5f4:	8d 50 38             	lea    edx,[eax+0x38]
c001a5f7:	80 fa 07             	cmp    dl,0x7
c001a5fa:	77 3c                	ja     c001a638 <Vm::x87Handler(regs*)+0x5da>
c001a5fc:	83 ec 0c             	sub    esp,0xc
c001a5ff:	2d c8 00 00 00       	sub    eax,0xc8
c001a604:	50                   	push   eax
c001a605:	e8 14 f9 ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a60a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a611:	89 c6                	mov    esi,eax
c001a613:	89 d7                	mov    edi,edx
c001a615:	e8 04 f9 ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a61a:	57                   	push   edi
c001a61b:	56                   	push   esi
c001a61c:	52                   	push   edx
c001a61d:	50                   	push   eax
c001a61e:	e8 aa f8 ff ff       	call   c0019ecd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a623:	83 c4 1c             	add    esp,0x1c
c001a626:	52                   	push   edx
c001a627:	50                   	push   eax
c001a628:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a62c:	2d c8 00 00 00       	sub    eax,0xc8
c001a631:	e9 82 00 00 00       	jmp    c001a6b8 <Vm::x87Handler(regs*)+0x65a>
c001a636:	66 90                	xchg   ax,ax
c001a638:	3c f7                	cmp    al,0xf7
c001a63a:	76 38                	jbe    c001a674 <Vm::x87Handler(regs*)+0x616>
c001a63c:	83 ec 0c             	sub    esp,0xc
c001a63f:	6a 00                	push   0x0
c001a641:	e8 d8 f8 ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a646:	89 c6                	mov    esi,eax
c001a648:	89 d7                	mov    edi,edx
c001a64a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a64e:	2d f8 00 00 00       	sub    eax,0xf8
c001a653:	89 04 24             	mov    DWORD PTR [esp],eax
c001a656:	e8 c3 f8 ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a65b:	57                   	push   edi
c001a65c:	56                   	push   esi
c001a65d:	52                   	push   edx
c001a65e:	50                   	push   eax
c001a65f:	e8 88 f8 ff ff       	call   c0019eec <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a664:	83 c4 1c             	add    esp,0x1c
c001a667:	52                   	push   edx
c001a668:	50                   	push   eax
c001a669:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a66d:	2d f8 00 00 00       	sub    eax,0xf8
c001a672:	eb 44                	jmp    c001a6b8 <Vm::x87Handler(regs*)+0x65a>
c001a674:	8d 50 10             	lea    edx,[eax+0x10]
c001a677:	80 fa 07             	cmp    dl,0x7
c001a67a:	0f 87 6c 01 00 00    	ja     c001a7ec <Vm::x87Handler(regs*)+0x78e>
c001a680:	83 ec 0c             	sub    esp,0xc
c001a683:	2d f0 00 00 00       	sub    eax,0xf0
c001a688:	50                   	push   eax
c001a689:	e8 90 f8 ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a68e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a695:	89 c6                	mov    esi,eax
c001a697:	89 d7                	mov    edi,edx
c001a699:	e8 80 f8 ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a69e:	57                   	push   edi
c001a69f:	56                   	push   esi
c001a6a0:	52                   	push   edx
c001a6a1:	50                   	push   eax
c001a6a2:	e8 45 f8 ff ff       	call   c0019eec <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a6a7:	83 c4 1c             	add    esp,0x1c
c001a6aa:	52                   	push   edx
c001a6ab:	50                   	push   eax
c001a6ac:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a6b0:	2d f0 00 00 00       	sub    eax,0xf0
c001a6b5:	8d 76 00             	lea    esi,[esi+0x0]
c001a6b8:	50                   	push   eax
c001a6b9:	8d 76 00             	lea    esi,[esi+0x0]
c001a6bc:	e8 a0 f8 ff ff       	call   c0019f61 <Vm::fpuSetReg(int, unsigned long long)>
c001a6c1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a6c5:	e8 41 f9 ff ff       	call   c001a00b <Vm::fpuPop()>
c001a6ca:	e9 0d fa ff ff       	jmp    c001a0dc <Vm::x87Handler(regs*)+0x7e>
c001a6cf:	90                   	nop
c001a6d0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a6d4:	8d 50 30             	lea    edx,[eax+0x30]
c001a6d7:	80 fa 07             	cmp    dl,0x7
c001a6da:	77 20                	ja     c001a6fc <Vm::x87Handler(regs*)+0x69e>
c001a6dc:	83 ec 0c             	sub    esp,0xc
c001a6df:	6a 00                	push   0x0
c001a6e1:	e8 38 f8 ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a6e6:	83 c4 0c             	add    esp,0xc
c001a6e9:	52                   	push   edx
c001a6ea:	50                   	push   eax
c001a6eb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a6ef:	2d d0 00 00 00       	sub    eax,0xd0
c001a6f4:	e9 df fd ff ff       	jmp    c001a4d8 <Vm::x87Handler(regs*)+0x47a>
c001a6f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a6fc:	8d 50 28             	lea    edx,[eax+0x28]
c001a6ff:	80 fa 07             	cmp    dl,0x7
c001a702:	77 28                	ja     c001a72c <Vm::x87Handler(regs*)+0x6ce>
c001a704:	83 ec 0c             	sub    esp,0xc
c001a707:	6a 00                	push   0x0
c001a709:	e8 10 f8 ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a70e:	83 c4 0c             	add    esp,0xc
c001a711:	52                   	push   edx
c001a712:	50                   	push   eax
c001a713:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a717:	2d d8 00 00 00       	sub    eax,0xd8
c001a71c:	50                   	push   eax
c001a71d:	e8 3f f8 ff ff       	call   c0019f61 <Vm::fpuSetReg(int, unsigned long long)>
c001a722:	e8 e4 f8 ff ff       	call   c001a00b <Vm::fpuPop()>
c001a727:	e9 ac f9 ff ff       	jmp    c001a0d8 <Vm::x87Handler(regs*)+0x7a>
c001a72c:	8d 50 20             	lea    edx,[eax+0x20]
c001a72f:	80 fa 07             	cmp    dl,0x7
c001a732:	77 30                	ja     c001a764 <Vm::x87Handler(regs*)+0x706>
c001a734:	83 ec 0c             	sub    esp,0xc
c001a737:	2d e0 00 00 00       	sub    eax,0xe0
c001a73c:	50                   	push   eax
c001a73d:	e8 dc f7 ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a742:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a749:	89 c6                	mov    esi,eax
c001a74b:	89 d7                	mov    edi,edx
c001a74d:	e8 cc f7 ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a752:	57                   	push   edi
c001a753:	56                   	push   esi
c001a754:	52                   	push   edx
c001a755:	50                   	push   eax
c001a756:	e8 e3 f6 ff ff       	call   c0019e3e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a75b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a75f:	e9 78 02 00 00       	jmp    c001a9dc <Vm::x87Handler(regs*)+0x97e>
c001a764:	8d 50 18             	lea    edx,[eax+0x18]
c001a767:	80 fa 07             	cmp    dl,0x7
c001a76a:	0f 87 10 fb ff ff    	ja     c001a280 <Vm::x87Handler(regs*)+0x222>
c001a770:	83 ec 0c             	sub    esp,0xc
c001a773:	2d e8 00 00 00       	sub    eax,0xe8
c001a778:	50                   	push   eax
c001a779:	e8 a0 f7 ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a77e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a785:	89 c6                	mov    esi,eax
c001a787:	89 d7                	mov    edi,edx
c001a789:	e8 90 f7 ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a78e:	57                   	push   edi
c001a78f:	56                   	push   esi
c001a790:	52                   	push   edx
c001a791:	50                   	push   eax
c001a792:	e8 a7 f6 ff ff       	call   c0019e3e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a797:	83 c4 20             	add    esp,0x20
c001a79a:	e8 6c f8 ff ff       	call   c001a00b <Vm::fpuPop()>
c001a79f:	eb 6f                	jmp    c001a810 <Vm::x87Handler(regs*)+0x7b2>
c001a7a1:	8d 76 00             	lea    esi,[esi+0x0]
c001a7a4:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001a7a8:	0f 85 22 01 00 00    	jne    c001a8d0 <Vm::x87Handler(regs*)+0x872>
c001a7ae:	66 90                	xchg   ax,ax
c001a7b0:	83 ec 0c             	sub    esp,0xc
c001a7b3:	6a 01                	push   0x1
c001a7b5:	e8 64 f7 ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a7ba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a7c1:	89 c6                	mov    esi,eax
c001a7c3:	89 d7                	mov    edi,edx
c001a7c5:	e8 54 f7 ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a7ca:	57                   	push   edi
c001a7cb:	56                   	push   esi
c001a7cc:	52                   	push   edx
c001a7cd:	50                   	push   eax
c001a7ce:	e8 6b f6 ff ff       	call   c0019e3e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a7d3:	83 c4 20             	add    esp,0x20
c001a7d6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a7da:	e8 2c f8 ff ff       	call   c001a00b <Vm::fpuPop()>
c001a7df:	e8 27 f8 ff ff       	call   c001a00b <Vm::fpuPop()>
c001a7e4:	e9 f7 f8 ff ff       	jmp    c001a0e0 <Vm::x87Handler(regs*)+0x82>
c001a7e9:	8d 76 00             	lea    esi,[esi+0x0]
c001a7ec:	3c d9                	cmp    al,0xd9
c001a7ee:	0f 85 e8 02 00 00    	jne    c001aadc <Vm::x87Handler(regs*)+0xa7e>
c001a7f4:	eb ba                	jmp    c001a7b0 <Vm::x87Handler(regs*)+0x752>
c001a7f6:	66 90                	xchg   ax,ax
c001a7f8:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001a7fc:	0f 85 2a 03 00 00    	jne    c001ab2c <Vm::x87Handler(regs*)+0xace>
c001a802:	0f b7 05 60 92 02 c0 	movzx  eax,WORD PTR ds:0xc0029260
c001a809:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001a80d:	8d 76 00             	lea    esi,[esi+0x0]
c001a810:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a814:	e9 c7 f8 ff ff       	jmp    c001a0e0 <Vm::x87Handler(regs*)+0x82>
c001a819:	8d 76 00             	lea    esi,[esi+0x0]
c001a81c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a820:	84 d2                	test   dl,dl
c001a822:	75 10                	jne    c001a834 <Vm::x87Handler(regs*)+0x7d6>
c001a824:	83 ec 0c             	sub    esp,0xc
c001a827:	ff 36                	push   DWORD PTR [esi]
c001a829:	e8 29 f4 ff ff       	call   c0019c57 <Vm::fpu32ToInternal(unsigned int)>
c001a82e:	e9 39 01 00 00       	jmp    c001a96c <Vm::x87Handler(regs*)+0x90e>
c001a833:	90                   	nop
c001a834:	80 fa 01             	cmp    dl,0x1
c001a837:	75 0f                	jne    c001a848 <Vm::x87Handler(regs*)+0x7ea>
c001a839:	83 ec 0c             	sub    esp,0xc
c001a83c:	ff 36                	push   DWORD PTR [esi]
c001a83e:	e8 14 f4 ff ff       	call   c0019c57 <Vm::fpu32ToInternal(unsigned int)>
c001a843:	e9 b4 02 00 00       	jmp    c001aafc <Vm::x87Handler(regs*)+0xa9e>
c001a848:	80 fa 04             	cmp    dl,0x4
c001a84b:	75 0f                	jne    c001a85c <Vm::x87Handler(regs*)+0x7fe>
c001a84d:	83 ec 0c             	sub    esp,0xc
c001a850:	ff 36                	push   DWORD PTR [esi]
c001a852:	e8 00 f4 ff ff       	call   c0019c57 <Vm::fpu32ToInternal(unsigned int)>
c001a857:	e9 9c 01 00 00       	jmp    c001a9f8 <Vm::x87Handler(regs*)+0x99a>
c001a85c:	80 fa 05             	cmp    dl,0x5
c001a85f:	75 1b                	jne    c001a87c <Vm::x87Handler(regs*)+0x81e>
c001a861:	83 ec 0c             	sub    esp,0xc
c001a864:	6a 00                	push   0x0
c001a866:	e8 b3 f6 ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a86b:	89 c7                	mov    edi,eax
c001a86d:	89 d5                	mov    ebp,edx
c001a86f:	58                   	pop    eax
c001a870:	ff 36                	push   DWORD PTR [esi]
c001a872:	e8 e0 f3 ff ff       	call   c0019c57 <Vm::fpu32ToInternal(unsigned int)>
c001a877:	e9 bc 01 00 00       	jmp    c001aa38 <Vm::x87Handler(regs*)+0x9da>
c001a87c:	80 fa 06             	cmp    dl,0x6
c001a87f:	75 0f                	jne    c001a890 <Vm::x87Handler(regs*)+0x832>
c001a881:	83 ec 0c             	sub    esp,0xc
c001a884:	ff 36                	push   DWORD PTR [esi]
c001a886:	e8 cc f3 ff ff       	call   c0019c57 <Vm::fpu32ToInternal(unsigned int)>
c001a88b:	e9 cc 01 00 00       	jmp    c001aa5c <Vm::x87Handler(regs*)+0x9fe>
c001a890:	31 c0                	xor    eax,eax
c001a892:	80 fa 07             	cmp    dl,0x7
c001a895:	0f 85 d5 02 00 00    	jne    c001ab70 <Vm::x87Handler(regs*)+0xb12>
c001a89b:	83 ec 0c             	sub    esp,0xc
c001a89e:	6a 00                	push   0x0
c001a8a0:	e8 79 f6 ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a8a5:	89 c7                	mov    edi,eax
c001a8a7:	89 d5                	mov    ebp,edx
c001a8a9:	58                   	pop    eax
c001a8aa:	ff 36                	push   DWORD PTR [esi]
c001a8ac:	e8 a6 f3 ff ff       	call   c0019c57 <Vm::fpu32ToInternal(unsigned int)>
c001a8b1:	e9 ee 01 00 00       	jmp    c001aaa4 <Vm::x87Handler(regs*)+0xa46>
c001a8b6:	66 90                	xchg   ax,ax
c001a8b8:	80 fa 03             	cmp    dl,0x3
c001a8bb:	0f 85 f7 01 00 00    	jne    c001aab8 <Vm::x87Handler(regs*)+0xa5a>
c001a8c1:	e8 45 f7 ff ff       	call   c001a00b <Vm::fpuPop()>
c001a8c6:	51                   	push   ecx
c001a8c7:	51                   	push   ecx
c001a8c8:	e9 03 02 00 00       	jmp    c001aad0 <Vm::x87Handler(regs*)+0xa72>
c001a8cd:	8d 76 00             	lea    esi,[esi+0x0]
c001a8d0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a8d4:	80 fa 01             	cmp    dl,0x1
c001a8d7:	75 0b                	jne    c001a8e4 <Vm::x87Handler(regs*)+0x886>
c001a8d9:	57                   	push   edi
c001a8da:	57                   	push   edi
c001a8db:	8b 06                	mov    eax,DWORD PTR [esi]
c001a8dd:	e9 0e 02 00 00       	jmp    c001aaf0 <Vm::x87Handler(regs*)+0xa92>
c001a8e2:	66 90                	xchg   ax,ax
c001a8e4:	80 fa 04             	cmp    dl,0x4
c001a8e7:	75 13                	jne    c001a8fc <Vm::x87Handler(regs*)+0x89e>
c001a8e9:	31 d2                	xor    edx,edx
c001a8eb:	51                   	push   ecx
c001a8ec:	51                   	push   ecx
c001a8ed:	8b 06                	mov    eax,DWORD PTR [esi]
c001a8ef:	52                   	push   edx
c001a8f0:	50                   	push   eax
c001a8f1:	e8 4a f4 ff ff       	call   c0019d40 <Vm::fpuLongToFloat(long long)>
c001a8f6:	e9 fd 00 00 00       	jmp    c001a9f8 <Vm::x87Handler(regs*)+0x99a>
c001a8fb:	90                   	nop
c001a8fc:	31 c0                	xor    eax,eax
c001a8fe:	80 fa 07             	cmp    dl,0x7
c001a901:	0f 85 69 02 00 00    	jne    c001ab70 <Vm::x87Handler(regs*)+0xb12>
c001a907:	83 ec 0c             	sub    esp,0xc
c001a90a:	6a 00                	push   0x0
c001a90c:	e8 0d f6 ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a911:	89 c7                	mov    edi,eax
c001a913:	89 d5                	mov    ebp,edx
c001a915:	58                   	pop    eax
c001a916:	8b 06                	mov    eax,DWORD PTR [esi]
c001a918:	5a                   	pop    edx
c001a919:	31 d2                	xor    edx,edx
c001a91b:	52                   	push   edx
c001a91c:	50                   	push   eax
c001a91d:	e8 1e f4 ff ff       	call   c0019d40 <Vm::fpuLongToFloat(long long)>
c001a922:	e9 7d 01 00 00       	jmp    c001aaa4 <Vm::x87Handler(regs*)+0xa46>
c001a927:	90                   	nop
c001a928:	84 d2                	test   dl,dl
c001a92a:	75 10                	jne    c001a93c <Vm::x87Handler(regs*)+0x8de>
c001a92c:	31 d2                	xor    edx,edx
c001a92e:	55                   	push   ebp
c001a92f:	55                   	push   ebp
c001a930:	8b 06                	mov    eax,DWORD PTR [esi]
c001a932:	52                   	push   edx
c001a933:	50                   	push   eax
c001a934:	e9 03 02 00 00       	jmp    c001ab3c <Vm::x87Handler(regs*)+0xade>
c001a939:	8d 76 00             	lea    esi,[esi+0x0]
c001a93c:	31 c0                	xor    eax,eax
c001a93e:	80 fa 02             	cmp    dl,0x2
c001a941:	0f 85 29 02 00 00    	jne    c001ab70 <Vm::x87Handler(regs*)+0xb12>
c001a947:	83 ec 0c             	sub    esp,0xc
c001a94a:	6a 00                	push   0x0
c001a94c:	e8 cd f5 ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a951:	59                   	pop    ecx
c001a952:	5f                   	pop    edi
c001a953:	e9 18 f9 ff ff       	jmp    c001a270 <Vm::x87Handler(regs*)+0x212>
c001a958:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a95c:	84 d2                	test   dl,dl
c001a95e:	75 2c                	jne    c001a98c <Vm::x87Handler(regs*)+0x92e>
c001a960:	50                   	push   eax
c001a961:	50                   	push   eax
c001a962:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a965:	ff 36                	push   DWORD PTR [esi]
c001a967:	e8 30 f3 ff ff       	call   c0019c9c <Vm::fpu64ToInternal(unsigned long long)>
c001a96c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a973:	89 c6                	mov    esi,eax
c001a975:	89 d7                	mov    edi,edx
c001a977:	e8 a2 f5 ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a97c:	57                   	push   edi
c001a97d:	56                   	push   esi
c001a97e:	52                   	push   edx
c001a97f:	50                   	push   eax
c001a980:	e8 0f f5 ff ff       	call   c0019e94 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a985:	e9 8e 01 00 00       	jmp    c001ab18 <Vm::x87Handler(regs*)+0xaba>
c001a98a:	66 90                	xchg   ax,ax
c001a98c:	80 fa 01             	cmp    dl,0x1
c001a98f:	75 13                	jne    c001a9a4 <Vm::x87Handler(regs*)+0x946>
c001a991:	50                   	push   eax
c001a992:	50                   	push   eax
c001a993:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a996:	ff 36                	push   DWORD PTR [esi]
c001a998:	e8 ff f2 ff ff       	call   c0019c9c <Vm::fpu64ToInternal(unsigned long long)>
c001a99d:	e9 5a 01 00 00       	jmp    c001aafc <Vm::x87Handler(regs*)+0xa9e>
c001a9a2:	66 90                	xchg   ax,ax
c001a9a4:	80 fa 02             	cmp    dl,0x2
c001a9a7:	0f 85 03 f9 ff ff    	jne    c001a2b0 <Vm::x87Handler(regs*)+0x252>
c001a9ad:	55                   	push   ebp
c001a9ae:	55                   	push   ebp
c001a9af:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a9b2:	ff 36                	push   DWORD PTR [esi]
c001a9b4:	e8 e3 f2 ff ff       	call   c0019c9c <Vm::fpu64ToInternal(unsigned long long)>
c001a9b9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a9c0:	89 c6                	mov    esi,eax
c001a9c2:	89 d7                	mov    edi,edx
c001a9c4:	e8 55 f5 ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001a9c9:	57                   	push   edi
c001a9ca:	56                   	push   esi
c001a9cb:	52                   	push   edx
c001a9cc:	50                   	push   eax
c001a9cd:	e8 6c f4 ff ff       	call   c0019e3e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a9d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a9d6:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a9d9:	8d 76 00             	lea    esi,[esi+0x0]
c001a9dc:	83 c4 20             	add    esp,0x20
c001a9df:	e9 fc f6 ff ff       	jmp    c001a0e0 <Vm::x87Handler(regs*)+0x82>
c001a9e4:	80 fa 04             	cmp    dl,0x4
c001a9e7:	75 2f                	jne    c001aa18 <Vm::x87Handler(regs*)+0x9ba>
c001a9e9:	51                   	push   ecx
c001a9ea:	51                   	push   ecx
c001a9eb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a9ee:	ff 36                	push   DWORD PTR [esi]
c001a9f0:	e8 a7 f2 ff ff       	call   c0019c9c <Vm::fpu64ToInternal(unsigned long long)>
c001a9f5:	8d 76 00             	lea    esi,[esi+0x0]
c001a9f8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a9ff:	89 c6                	mov    esi,eax
c001aa01:	89 d7                	mov    edi,edx
c001aa03:	e8 16 f5 ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001aa08:	57                   	push   edi
c001aa09:	56                   	push   esi
c001aa0a:	52                   	push   edx
c001aa0b:	50                   	push   eax
c001aa0c:	e8 ad f4 ff ff       	call   c0019ebe <Vm::fpuSub(unsigned long long, unsigned long long)>
c001aa11:	e9 02 01 00 00       	jmp    c001ab18 <Vm::x87Handler(regs*)+0xaba>
c001aa16:	66 90                	xchg   ax,ax
c001aa18:	80 fa 05             	cmp    dl,0x5
c001aa1b:	75 2b                	jne    c001aa48 <Vm::x87Handler(regs*)+0x9ea>
c001aa1d:	83 ec 0c             	sub    esp,0xc
c001aa20:	6a 00                	push   0x0
c001aa22:	e8 f7 f4 ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001aa27:	89 c7                	mov    edi,eax
c001aa29:	89 d5                	mov    ebp,edx
c001aa2b:	58                   	pop    eax
c001aa2c:	5a                   	pop    edx
c001aa2d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001aa30:	ff 36                	push   DWORD PTR [esi]
c001aa32:	e8 65 f2 ff ff       	call   c0019c9c <Vm::fpu64ToInternal(unsigned long long)>
c001aa37:	90                   	nop
c001aa38:	83 c4 10             	add    esp,0x10
c001aa3b:	55                   	push   ebp
c001aa3c:	57                   	push   edi
c001aa3d:	52                   	push   edx
c001aa3e:	50                   	push   eax
c001aa3f:	e8 7a f4 ff ff       	call   c0019ebe <Vm::fpuSub(unsigned long long, unsigned long long)>
c001aa44:	eb 6a                	jmp    c001aab0 <Vm::x87Handler(regs*)+0xa52>
c001aa46:	66 90                	xchg   ax,ax
c001aa48:	80 fa 06             	cmp    dl,0x6
c001aa4b:	75 2f                	jne    c001aa7c <Vm::x87Handler(regs*)+0xa1e>
c001aa4d:	51                   	push   ecx
c001aa4e:	51                   	push   ecx
c001aa4f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001aa52:	ff 36                	push   DWORD PTR [esi]
c001aa54:	e8 43 f2 ff ff       	call   c0019c9c <Vm::fpu64ToInternal(unsigned long long)>
c001aa59:	8d 76 00             	lea    esi,[esi+0x0]
c001aa5c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aa63:	89 c6                	mov    esi,eax
c001aa65:	89 d7                	mov    edi,edx
c001aa67:	e8 b2 f4 ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001aa6c:	57                   	push   edi
c001aa6d:	56                   	push   esi
c001aa6e:	52                   	push   edx
c001aa6f:	50                   	push   eax
c001aa70:	e8 77 f4 ff ff       	call   c0019eec <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001aa75:	e9 9e 00 00 00       	jmp    c001ab18 <Vm::x87Handler(regs*)+0xaba>
c001aa7a:	66 90                	xchg   ax,ax
c001aa7c:	31 c0                	xor    eax,eax
c001aa7e:	80 fa 07             	cmp    dl,0x7
c001aa81:	0f 85 e9 00 00 00    	jne    c001ab70 <Vm::x87Handler(regs*)+0xb12>
c001aa87:	83 ec 0c             	sub    esp,0xc
c001aa8a:	6a 00                	push   0x0
c001aa8c:	e8 8d f4 ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001aa91:	89 c7                	mov    edi,eax
c001aa93:	89 d5                	mov    ebp,edx
c001aa95:	58                   	pop    eax
c001aa96:	5a                   	pop    edx
c001aa97:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001aa9a:	ff 36                	push   DWORD PTR [esi]
c001aa9c:	e8 fb f1 ff ff       	call   c0019c9c <Vm::fpu64ToInternal(unsigned long long)>
c001aaa1:	8d 76 00             	lea    esi,[esi+0x0]
c001aaa4:	83 c4 10             	add    esp,0x10
c001aaa7:	55                   	push   ebp
c001aaa8:	57                   	push   edi
c001aaa9:	52                   	push   edx
c001aaaa:	50                   	push   eax
c001aaab:	e8 3c f4 ff ff       	call   c0019eec <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001aab0:	83 c4 0c             	add    esp,0xc
c001aab3:	eb 67                	jmp    c001ab1c <Vm::x87Handler(regs*)+0xabe>
c001aab5:	8d 76 00             	lea    esi,[esi+0x0]
c001aab8:	31 c0                	xor    eax,eax
c001aaba:	80 fa 02             	cmp    dl,0x2
c001aabd:	0f 85 ad 00 00 00    	jne    c001ab70 <Vm::x87Handler(regs*)+0xb12>
c001aac3:	83 ec 0c             	sub    esp,0xc
c001aac6:	6a 00                	push   0x0
c001aac8:	e8 51 f4 ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001aacd:	59                   	pop    ecx
c001aace:	5f                   	pop    edi
c001aacf:	90                   	nop
c001aad0:	52                   	push   edx
c001aad1:	50                   	push   eax
c001aad2:	e8 77 f1 ff ff       	call   c0019c4e <Vm::fpuInternalTo64(unsigned long long)>
c001aad7:	e9 84 00 00 00       	jmp    c001ab60 <Vm::x87Handler(regs*)+0xb02>
c001aadc:	31 c0                	xor    eax,eax
c001aade:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001aae3:	0f 85 87 00 00 00    	jne    c001ab70 <Vm::x87Handler(regs*)+0xb12>
c001aae9:	50                   	push   eax
c001aaea:	50                   	push   eax
c001aaeb:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001aaee:	66 90                	xchg   ax,ax
c001aaf0:	31 d2                	xor    edx,edx
c001aaf2:	52                   	push   edx
c001aaf3:	50                   	push   eax
c001aaf4:	e8 47 f2 ff ff       	call   c0019d40 <Vm::fpuLongToFloat(long long)>
c001aaf9:	8d 76 00             	lea    esi,[esi+0x0]
c001aafc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ab03:	89 c6                	mov    esi,eax
c001ab05:	89 d7                	mov    edi,edx
c001ab07:	e8 12 f4 ff ff       	call   c0019f1e <Vm::fpuGetReg(int)>
c001ab0c:	57                   	push   edi
c001ab0d:	56                   	push   esi
c001ab0e:	52                   	push   edx
c001ab0f:	50                   	push   eax
c001ab10:	e8 b8 f3 ff ff       	call   c0019ecd <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ab15:	8d 76 00             	lea    esi,[esi+0x0]
c001ab18:	83 c4 1c             	add    esp,0x1c
c001ab1b:	90                   	nop
c001ab1c:	52                   	push   edx
c001ab1d:	50                   	push   eax
c001ab1e:	6a 00                	push   0x0
c001ab20:	e8 3c f4 ff ff       	call   c0019f61 <Vm::fpuSetReg(int, unsigned long long)>
c001ab25:	e9 7a f7 ff ff       	jmp    c001a2a4 <Vm::x87Handler(regs*)+0x246>
c001ab2a:	66 90                	xchg   ax,ax
c001ab2c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ab30:	80 fa 05             	cmp    dl,0x5
c001ab33:	75 13                	jne    c001ab48 <Vm::x87Handler(regs*)+0xaea>
c001ab35:	55                   	push   ebp
c001ab36:	55                   	push   ebp
c001ab37:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ab3a:	ff 36                	push   DWORD PTR [esi]
c001ab3c:	e8 c3 f1 ff ff       	call   c0019d04 <Vm::fpuULongToFloat(unsigned long long)>
c001ab41:	e9 52 f7 ff ff       	jmp    c001a298 <Vm::x87Handler(regs*)+0x23a>
c001ab46:	66 90                	xchg   ax,ax
c001ab48:	31 c0                	xor    eax,eax
c001ab4a:	80 fa 07             	cmp    dl,0x7
c001ab4d:	75 21                	jne    c001ab70 <Vm::x87Handler(regs*)+0xb12>
c001ab4f:	e8 b7 f4 ff ff       	call   c001a00b <Vm::fpuPop()>
c001ab54:	51                   	push   ecx
c001ab55:	51                   	push   ecx
c001ab56:	52                   	push   edx
c001ab57:	50                   	push   eax
c001ab58:	e8 48 f1 ff ff       	call   c0019ca5 <Vm::fpuFloatToLong(unsigned long long)>
c001ab5d:	8d 76 00             	lea    esi,[esi+0x0]
c001ab60:	83 c4 10             	add    esp,0x10
c001ab63:	89 06                	mov    DWORD PTR [esi],eax
c001ab65:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001ab68:	e9 7b f7 ff ff       	jmp    c001a2e8 <Vm::x87Handler(regs*)+0x28a>
c001ab6d:	8d 76 00             	lea    esi,[esi+0x0]
c001ab70:	83 c4 1c             	add    esp,0x1c
c001ab73:	5b                   	pop    ebx
c001ab74:	5e                   	pop    esi
c001ab75:	5f                   	pop    edi
c001ab76:	5d                   	pop    ebp
c001ab77:	c3                   	ret    

c001ab78 <__static_initialization_and_destruction_0(int, int)>:
c001ab78:	83 ec 0c             	sub    esp,0xc
c001ab7b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ab80:	75 1a                	jne    c001ab9c <__static_initialization_and_destruction_0(int, int)+0x24>
c001ab82:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ab8a:	75 10                	jne    c001ab9c <__static_initialization_and_destruction_0(int, int)+0x24>
c001ab8c:	83 ec 0c             	sub    esp,0xc
c001ab8f:	68 60 92 02 c0       	push   0xc0029260
c001ab94:	e8 8f 83 00 00       	call   c0022f28 <Vm::_FPUState::_FPUState()>
c001ab99:	83 c4 10             	add    esp,0x10
c001ab9c:	90                   	nop
c001ab9d:	83 c4 0c             	add    esp,0xc
c001aba0:	c3                   	ret    
c001aba1:	8d 76 00             	lea    esi,[esi+0x0]

c001aba4 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001aba4:	83 ec 0c             	sub    esp,0xc
c001aba7:	83 ec 08             	sub    esp,0x8
c001abaa:	68 ff ff 00 00       	push   0xffff
c001abaf:	6a 01                	push   0x1
c001abb1:	e8 c2 ff ff ff       	call   c001ab78 <__static_initialization_and_destruction_0(int, int)>
c001abb6:	83 c4 10             	add    esp,0x10
c001abb9:	83 c4 0c             	add    esp,0xc
c001abbc:	c3                   	ret    
c001abbd:	66 90                	xchg   ax,ax
c001abbf:	90                   	nop

c001abc0 <FAT::getName()>:
c001abc0:	b8 98 60 02 c0       	mov    eax,0xc0026098
c001abc5:	c3                   	ret    
c001abc6:	66 90                	xchg   ax,ax

c001abc8 <FAT::tell(void*, unsigned long long*)>:
c001abc8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001abcd:	75 09                	jne    c001abd8 <FAT::tell(void*, unsigned long long*)+0x10>
c001abcf:	b8 04 00 00 00       	mov    eax,0x4
c001abd4:	c3                   	ret    
c001abd5:	8d 76 00             	lea    esi,[esi+0x0]
c001abd8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001abdd:	75 09                	jne    c001abe8 <FAT::tell(void*, unsigned long long*)+0x20>
c001abdf:	b8 04 00 00 00       	mov    eax,0x4
c001abe4:	c3                   	ret    
c001abe5:	8d 76 00             	lea    esi,[esi+0x0]
c001abe8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001abec:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001abef:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001abf2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001abf6:	89 01                	mov    DWORD PTR [ecx],eax
c001abf8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001abfb:	b8 00 00 00 00       	mov    eax,0x0
c001ac00:	c3                   	ret    
c001ac01:	90                   	nop
c001ac02:	66 90                	xchg   ax,ax

c001ac04 <FAT::stat(void*, unsigned long long*)>:
c001ac04:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ac09:	75 09                	jne    c001ac14 <FAT::stat(void*, unsigned long long*)+0x10>
c001ac0b:	b8 04 00 00 00       	mov    eax,0x4
c001ac10:	c3                   	ret    
c001ac11:	8d 76 00             	lea    esi,[esi+0x0]
c001ac14:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ac19:	75 09                	jne    c001ac24 <FAT::stat(void*, unsigned long long*)+0x20>
c001ac1b:	b8 04 00 00 00       	mov    eax,0x4
c001ac20:	c3                   	ret    
c001ac21:	8d 76 00             	lea    esi,[esi+0x0]
c001ac24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac28:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001ac2b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ac2e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ac32:	89 01                	mov    DWORD PTR [ecx],eax
c001ac34:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ac37:	b8 00 00 00 00       	mov    eax,0x0
c001ac3c:	c3                   	ret    
c001ac3d:	90                   	nop
c001ac3e:	66 90                	xchg   ax,ax

c001ac40 <FAT::~FAT()>:
c001ac40:	83 ec 0c             	sub    esp,0xc
c001ac43:	ba e4 60 02 c0       	mov    edx,0xc00260e4
c001ac48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac4c:	89 10                	mov    DWORD PTR [eax],edx
c001ac4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac52:	83 ec 0c             	sub    esp,0xc
c001ac55:	50                   	push   eax
c001ac56:	e8 df 23 ff ff       	call   c000d03a <Filesystem::~Filesystem()>
c001ac5b:	83 c4 10             	add    esp,0x10
c001ac5e:	90                   	nop
c001ac5f:	83 c4 0c             	add    esp,0xc
c001ac62:	c3                   	ret    
c001ac63:	90                   	nop

c001ac64 <FAT::~FAT()>:
c001ac64:	83 ec 0c             	sub    esp,0xc
c001ac67:	83 ec 0c             	sub    esp,0xc
c001ac6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac6e:	e8 cd ff ff ff       	call   c001ac40 <FAT::~FAT()>
c001ac73:	83 c4 10             	add    esp,0x10
c001ac76:	83 ec 08             	sub    esp,0x8
c001ac79:	6a 08                	push   0x8
c001ac7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac7f:	e8 9a 1f ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c001ac84:	83 c4 10             	add    esp,0x10
c001ac87:	83 c4 0c             	add    esp,0xc
c001ac8a:	c3                   	ret    
c001ac8b:	90                   	nop

c001ac8c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001ac8c:	83 ec 1c             	sub    esp,0x1c
c001ac8f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001ac96:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001ac9b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ac9f:	8b 04 85 e0 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6d20]
c001aca6:	83 f8 ff             	cmp    eax,0xffffffff
c001aca9:	75 35                	jne    c001ace0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001acab:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001acaf:	88 c2                	mov    dl,al
c001acb1:	a1 c0 92 02 c0       	mov    eax,ds:0xc00292c0
c001acb6:	01 d0                	add    eax,edx
c001acb8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001acbc:	8b 15 c0 92 02 c0    	mov    edx,DWORD PTR ds:0xc00292c0
c001acc2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001acc6:	89 14 85 e0 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6d20],edx
c001accd:	a1 c0 92 02 c0       	mov    eax,ds:0xc00292c0
c001acd2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001acd6:	89 14 85 60 93 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ca0],edx
c001acdd:	eb 19                	jmp    c001acf8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001acdf:	90                   	nop
c001ace0:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ace4:	88 c2                	mov    dl,al
c001ace6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001acea:	8b 04 85 e0 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6d20]
c001acf1:	01 d0                	add    eax,edx
c001acf3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001acf7:	90                   	nop
c001acf8:	83 ec 04             	sub    esp,0x4
c001acfb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001acff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ad03:	8d 44 24 15          	lea    eax,[esp+0x15]
c001ad07:	50                   	push   eax
c001ad08:	e8 25 bf fe ff       	call   c0006c32 <f_getlabel>
c001ad0d:	83 c4 10             	add    esp,0x10
c001ad10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad14:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ad19:	75 09                	jne    c001ad24 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001ad1b:	b8 00 00 00 00       	mov    eax,0x0
c001ad20:	eb 0a                	jmp    c001ad2c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001ad22:	66 90                	xchg   ax,ax
c001ad24:	b8 01 00 00 00       	mov    eax,0x1
c001ad29:	8d 76 00             	lea    esi,[esi+0x0]
c001ad2c:	83 c4 1c             	add    esp,0x1c
c001ad2f:	c3                   	ret    

c001ad30 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001ad30:	57                   	push   edi
c001ad31:	83 ec 58             	sub    esp,0x58
c001ad34:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001ad3c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ad40:	b9 0f 00 00 00       	mov    ecx,0xf
c001ad45:	b8 00 00 00 00       	mov    eax,0x0
c001ad4a:	fc                   	cld    
c001ad4b:	89 d7                	mov    edi,edx
c001ad4d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ad4f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ad53:	8b 04 85 e0 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6d20]
c001ad5a:	83 f8 ff             	cmp    eax,0xffffffff
c001ad5d:	75 35                	jne    c001ad94 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001ad5f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ad63:	88 c2                	mov    dl,al
c001ad65:	a1 c0 92 02 c0       	mov    eax,ds:0xc00292c0
c001ad6a:	01 d0                	add    eax,edx
c001ad6c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ad70:	8b 15 c0 92 02 c0    	mov    edx,DWORD PTR ds:0xc00292c0
c001ad76:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ad7a:	89 14 85 e0 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6d20],edx
c001ad81:	a1 c0 92 02 c0       	mov    eax,ds:0xc00292c0
c001ad86:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001ad8a:	89 14 85 60 93 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ca0],edx
c001ad91:	eb 19                	jmp    c001adac <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001ad93:	90                   	nop
c001ad94:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ad98:	88 c2                	mov    dl,al
c001ad9a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ad9e:	8b 04 85 e0 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6d20]
c001ada5:	01 d0                	add    eax,edx
c001ada7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001adab:	90                   	nop
c001adac:	83 ec 08             	sub    esp,0x8
c001adaf:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001adb3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001adb7:	50                   	push   eax
c001adb8:	e8 c3 5a fe ff       	call   c0000880 <strcat>
c001adbd:	83 c4 10             	add    esp,0x10
c001adc0:	83 ec 0c             	sub    esp,0xc
c001adc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001adc7:	50                   	push   eax
c001adc8:	e8 53 c0 fe ff       	call   c0006e20 <f_setlabel>
c001adcd:	83 c4 10             	add    esp,0x10
c001add0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001add4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001add9:	75 09                	jne    c001ade4 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001addb:	b8 00 00 00 00       	mov    eax,0x0
c001ade0:	eb 0a                	jmp    c001adec <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001ade2:	66 90                	xchg   ax,ax
c001ade4:	b8 01 00 00 00       	mov    eax,0x1
c001ade9:	8d 76 00             	lea    esi,[esi+0x0]
c001adec:	83 c4 58             	add    esp,0x58
c001adef:	5f                   	pop    edi
c001adf0:	c3                   	ret    
c001adf1:	90                   	nop
c001adf2:	66 90                	xchg   ax,ax

c001adf4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001adf4:	83 ec 2c             	sub    esp,0x2c
c001adf7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001adff:	83 ec 08             	sub    esp,0x8
c001ae02:	68 bc 60 02 c0       	push   0xc00260bc
c001ae07:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ae0b:	e8 bc 59 fe ff       	call   c00007cc <strcmp>
c001ae10:	83 c4 10             	add    esp,0x10
c001ae13:	85 c0                	test   eax,eax
c001ae15:	0f 94 c0             	sete   al
c001ae18:	84 c0                	test   al,al
c001ae1a:	74 10                	je     c001ae2c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001ae1c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ae24:	e9 b3 00 00 00       	jmp    c001aedc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001ae29:	8d 76 00             	lea    esi,[esi+0x0]
c001ae2c:	83 ec 08             	sub    esp,0x8
c001ae2f:	68 ae 60 02 c0       	push   0xc00260ae
c001ae34:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ae38:	e8 8f 59 fe ff       	call   c00007cc <strcmp>
c001ae3d:	83 c4 10             	add    esp,0x10
c001ae40:	85 c0                	test   eax,eax
c001ae42:	0f 94 c0             	sete   al
c001ae45:	84 c0                	test   al,al
c001ae47:	74 0f                	je     c001ae58 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001ae49:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ae51:	e9 86 00 00 00       	jmp    c001aedc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001ae56:	66 90                	xchg   ax,ax
c001ae58:	83 ec 08             	sub    esp,0x8
c001ae5b:	68 b4 60 02 c0       	push   0xc00260b4
c001ae60:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ae64:	e8 63 59 fe ff       	call   c00007cc <strcmp>
c001ae69:	83 c4 10             	add    esp,0x10
c001ae6c:	85 c0                	test   eax,eax
c001ae6e:	0f 94 c0             	sete   al
c001ae71:	84 c0                	test   al,al
c001ae73:	74 0b                	je     c001ae80 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001ae75:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ae7d:	eb 5d                	jmp    c001aedc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001ae7f:	90                   	nop
c001ae80:	83 ec 08             	sub    esp,0x8
c001ae83:	68 8c 36 02 c0       	push   0xc002368c
c001ae88:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ae8c:	e8 3b 59 fe ff       	call   c00007cc <strcmp>
c001ae91:	83 c4 10             	add    esp,0x10
c001ae94:	85 c0                	test   eax,eax
c001ae96:	0f 94 c0             	sete   al
c001ae99:	84 c0                	test   al,al
c001ae9b:	74 0b                	je     c001aea8 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001ae9d:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001aea5:	eb 35                	jmp    c001aedc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001aea7:	90                   	nop
c001aea8:	83 ec 08             	sub    esp,0x8
c001aeab:	68 ba 60 02 c0       	push   0xc00260ba
c001aeb0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001aeb4:	e8 13 59 fe ff       	call   c00007cc <strcmp>
c001aeb9:	83 c4 10             	add    esp,0x10
c001aebc:	85 c0                	test   eax,eax
c001aebe:	0f 94 c0             	sete   al
c001aec1:	84 c0                	test   al,al
c001aec3:	74 0b                	je     c001aed0 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001aec5:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001aecd:	eb 0d                	jmp    c001aedc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001aecf:	90                   	nop
c001aed0:	b8 08 00 00 00       	mov    eax,0x8
c001aed5:	e9 ea 00 00 00       	jmp    c001afc4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001aeda:	66 90                	xchg   ax,ax
c001aedc:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001aee3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001aee8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aeec:	8b 04 85 e0 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6d20]
c001aef3:	83 f8 ff             	cmp    eax,0xffffffff
c001aef6:	75 34                	jne    c001af2c <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001aef8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001aefc:	88 c2                	mov    dl,al
c001aefe:	a1 c0 92 02 c0       	mov    eax,ds:0xc00292c0
c001af03:	01 d0                	add    eax,edx
c001af05:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001af09:	8b 15 c0 92 02 c0    	mov    edx,DWORD PTR ds:0xc00292c0
c001af0f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001af13:	89 14 85 e0 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6d20],edx
c001af1a:	a1 c0 92 02 c0       	mov    eax,ds:0xc00292c0
c001af1f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001af23:	89 14 85 60 93 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ca0],edx
c001af2a:	eb 18                	jmp    c001af44 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001af2c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001af30:	88 c2                	mov    dl,al
c001af32:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001af36:	8b 04 85 e0 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6d20]
c001af3d:	01 d0                	add    eax,edx
c001af3f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001af43:	90                   	nop
c001af44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af48:	88 04 24             	mov    BYTE PTR [esp],al
c001af4b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001af4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af53:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001af5b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001af60:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001af68:	83 ec 0c             	sub    esp,0xc
c001af6b:	68 00 20 00 00       	push   0x2000
c001af70:	e8 9a ea fe ff       	call   c0009a0f <malloc>
c001af75:	83 c4 10             	add    esp,0x10
c001af78:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001af7c:	68 00 20 00 00       	push   0x2000
c001af81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af85:	8d 44 24 08          	lea    eax,[esp+0x8]
c001af89:	50                   	push   eax
c001af8a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001af8e:	50                   	push   eax
c001af8f:	e8 0d c5 fe ff       	call   c00074a1 <f_mkfs>
c001af94:	83 c4 10             	add    esp,0x10
c001af97:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001af9b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001afa0:	75 0a                	jne    c001afac <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001afa2:	b8 00 00 00 00       	mov    eax,0x0
c001afa7:	eb 1b                	jmp    c001afc4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001afa9:	8d 76 00             	lea    esi,[esi+0x0]
c001afac:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001afb1:	75 09                	jne    c001afbc <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001afb3:	b8 09 00 00 00       	mov    eax,0x9
c001afb8:	eb 0a                	jmp    c001afc4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001afba:	66 90                	xchg   ax,ax
c001afbc:	b8 01 00 00 00       	mov    eax,0x1
c001afc1:	8d 76 00             	lea    esi,[esi+0x0]
c001afc4:	83 c4 2c             	add    esp,0x2c
c001afc7:	c3                   	ret    

c001afc8 <FAT::tryMount(LogicalDisk*, int)>:
c001afc8:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001afce:	a1 c0 92 02 c0       	mov    eax,ds:0xc00292c0
c001afd3:	83 f8 14             	cmp    eax,0x14
c001afd6:	75 18                	jne    c001aff0 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001afd8:	83 ec 0c             	sub    esp,0xc
c001afdb:	68 c0 60 02 c0       	push   0xc00260c0
c001afe0:	e8 ca 98 ff ff       	call   c00148af <Krnl::panic(char const*)>
c001afe5:	83 c4 10             	add    esp,0x10
c001afe8:	b0 00                	mov    al,0x0
c001afea:	e9 e9 01 00 00       	jmp    c001b1d8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001afef:	90                   	nop
c001aff0:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001aff7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001affd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b003:	3d 00 02 00 00       	cmp    eax,0x200
c001b008:	74 0a                	je     c001b014 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001b00a:	b0 00                	mov    al,0x0
c001b00c:	e9 c7 01 00 00       	jmp    c001b1d8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b011:	8d 76 00             	lea    esi,[esi+0x0]
c001b014:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001b01c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b023:	8b 04 85 e0 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6d20]
c001b02a:	83 f8 ff             	cmp    eax,0xffffffff
c001b02d:	74 09                	je     c001b038 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001b02f:	b0 01                	mov    al,0x1
c001b031:	e9 a2 01 00 00       	jmp    c001b1d8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b036:	66 90                	xchg   ax,ax
c001b038:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001b042:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001b04a:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001b051:	88 c2                	mov    dl,al
c001b053:	a1 c0 92 02 c0       	mov    eax,ds:0xc00292c0
c001b058:	01 d0                	add    eax,edx
c001b05a:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001b061:	8b 15 c0 92 02 c0    	mov    edx,DWORD PTR ds:0xc00292c0
c001b067:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b06e:	89 14 85 e0 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6d20],edx
c001b075:	a1 c0 92 02 c0       	mov    eax,ds:0xc00292c0
c001b07a:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001b081:	89 14 85 60 93 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ca0],edx
c001b088:	83 ec 0c             	sub    esp,0xc
c001b08b:	68 54 02 00 00       	push   0x254
c001b090:	e8 7a e9 fe ff       	call   c0009a0f <malloc>
c001b095:	83 c4 10             	add    esp,0x10
c001b098:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001b09f:	83 ec 04             	sub    esp,0x4
c001b0a2:	6a 00                	push   0x0
c001b0a4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b0ab:	50                   	push   eax
c001b0ac:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b0b3:	e8 71 9d fe ff       	call   c0004e29 <f_mount>
c001b0b8:	83 c4 10             	add    esp,0x10
c001b0bb:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b0c2:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001b0ca:	74 1c                	je     c001b0e8 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001b0cc:	83 ec 0c             	sub    esp,0xc
c001b0cf:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b0d6:	e8 54 e9 fe ff       	call   c0009a2f <rfree>
c001b0db:	83 c4 10             	add    esp,0x10
c001b0de:	b0 00                	mov    al,0x0
c001b0e0:	e9 f3 00 00 00       	jmp    c001b1d8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b0e5:	8d 76 00             	lea    esi,[esi+0x0]
c001b0e8:	83 ec 04             	sub    esp,0x4
c001b0eb:	68 00 01 00 00       	push   0x100
c001b0f0:	6a 00                	push   0x0
c001b0f2:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b0f9:	50                   	push   eax
c001b0fa:	e8 85 55 fe ff       	call   c0000684 <memset>
c001b0ff:	83 c4 10             	add    esp,0x10
c001b102:	83 ec 08             	sub    esp,0x8
c001b105:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b10c:	50                   	push   eax
c001b10d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b114:	50                   	push   eax
c001b115:	e8 66 57 fe ff       	call   c0000880 <strcat>
c001b11a:	83 c4 10             	add    esp,0x10
c001b11d:	83 ec 08             	sub    esp,0x8
c001b120:	68 ce 60 02 c0       	push   0xc00260ce
c001b125:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b12c:	50                   	push   eax
c001b12d:	e8 4e 57 fe ff       	call   c0000880 <strcat>
c001b132:	83 c4 10             	add    esp,0x10
c001b135:	83 ec 04             	sub    esp,0x4
c001b138:	6a 01                	push   0x1
c001b13a:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001b141:	50                   	push   eax
c001b142:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b146:	50                   	push   eax
c001b147:	e8 3f 9d fe ff       	call   c0004e8b <f_open>
c001b14c:	83 c4 10             	add    esp,0x10
c001b14f:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b156:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001b15d:	85 c0                	test   eax,eax
c001b15f:	74 0b                	je     c001b16c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001b161:	78 31                	js     c001b194 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b163:	83 e8 04             	sub    eax,0x4
c001b166:	83 f8 01             	cmp    eax,0x1
c001b169:	77 29                	ja     c001b194 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b16b:	90                   	nop
c001b16c:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001b174:	83 ec 0c             	sub    esp,0xc
c001b177:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b17b:	50                   	push   eax
c001b17c:	e8 5c a8 fe ff       	call   c00059dd <f_close>
c001b181:	83 c4 10             	add    esp,0x10
c001b184:	90                   	nop
c001b185:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001b18d:	74 41                	je     c001b1d0 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001b18f:	eb 33                	jmp    c001b1c4 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001b191:	8d 76 00             	lea    esi,[esi+0x0]
c001b194:	83 ec 0c             	sub    esp,0xc
c001b197:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b19e:	e8 8c e8 fe ff       	call   c0009a2f <rfree>
c001b1a3:	83 c4 10             	add    esp,0x10
c001b1a6:	83 ec 04             	sub    esp,0x4
c001b1a9:	6a 00                	push   0x0
c001b1ab:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b1b2:	50                   	push   eax
c001b1b3:	6a 00                	push   0x0
c001b1b5:	e8 6f 9c fe ff       	call   c0004e29 <f_mount>
c001b1ba:	83 c4 10             	add    esp,0x10
c001b1bd:	b0 00                	mov    al,0x0
c001b1bf:	eb 17                	jmp    c001b1d8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b1c1:	8d 76 00             	lea    esi,[esi+0x0]
c001b1c4:	a1 c0 92 02 c0       	mov    eax,ds:0xc00292c0
c001b1c9:	40                   	inc    eax
c001b1ca:	a3 c0 92 02 c0       	mov    ds:0xc00292c0,eax
c001b1cf:	90                   	nop
c001b1d0:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001b1d7:	90                   	nop
c001b1d8:	81 c4 6c 03 00 00    	add    esp,0x36c
c001b1de:	c3                   	ret    
c001b1df:	90                   	nop

c001b1e0 <FAT::allocateSwapfile(char const*, int)>:
c001b1e0:	55                   	push   ebp
c001b1e1:	57                   	push   edi
c001b1e2:	56                   	push   esi
c001b1e3:	53                   	push   ebx
c001b1e4:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001b1ea:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001b1f5:	83 ec 0c             	sub    esp,0xc
c001b1f8:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001b1ff:	e8 0b e8 fe ff       	call   c0009a0f <malloc>
c001b204:	83 c4 10             	add    esp,0x10
c001b207:	89 c7                	mov    edi,eax
c001b209:	a1 f0 91 02 c0       	mov    eax,ds:0xc00291f0
c001b20e:	83 ec 04             	sub    esp,0x4
c001b211:	50                   	push   eax
c001b212:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001b219:	57                   	push   edi
c001b21a:	e8 4b 20 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c001b21f:	83 c4 10             	add    esp,0x10
c001b222:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001b229:	83 ec 04             	sub    esp,0x4
c001b22c:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b230:	50                   	push   eax
c001b231:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b235:	50                   	push   eax
c001b236:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b23d:	e8 76 23 ff ff       	call   c000d5b8 <File::stat(unsigned long long*, bool*)>
c001b242:	83 c4 10             	add    esp,0x10
c001b245:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b24c:	c1 e0 14             	shl    eax,0x14
c001b24f:	89 c7                	mov    edi,eax
c001b251:	89 c5                	mov    ebp,eax
c001b253:	c1 fd 1f             	sar    ebp,0x1f
c001b256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b25a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b25e:	89 f9                	mov    ecx,edi
c001b260:	31 c1                	xor    ecx,eax
c001b262:	89 cb                	mov    ebx,ecx
c001b264:	89 e9                	mov    ecx,ebp
c001b266:	31 d1                	xor    ecx,edx
c001b268:	89 ce                	mov    esi,ecx
c001b26a:	89 f0                	mov    eax,esi
c001b26c:	09 d8                	or     eax,ebx
c001b26e:	0f 84 98 00 00 00    	je     c001b30c <FAT::allocateSwapfile(char const*, int)+0x12c>
c001b274:	83 ec 0c             	sub    esp,0xc
c001b277:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b27e:	e8 01 22 ff ff       	call   c000d484 <File::unlink()>
c001b283:	83 c4 10             	add    esp,0x10
c001b286:	83 ec 08             	sub    esp,0x8
c001b289:	6a 12                	push   0x12
c001b28b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b292:	e8 75 20 ff ff       	call   c000d30c <File::open(FileOpenMode)>
c001b297:	83 c4 10             	add    esp,0x10
c001b29a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b2a1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b2a7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b2ae:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b2b5:	c1 e0 14             	shl    eax,0x14
c001b2b8:	99                   	cdq    
c001b2b9:	6a 01                	push   0x1
c001b2bb:	52                   	push   edx
c001b2bc:	50                   	push   eax
c001b2bd:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001b2c4:	e8 c4 bd fe ff       	call   c000708d <f_expand>
c001b2c9:	83 c4 10             	add    esp,0x10
c001b2cc:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b2d3:	8b 00                	mov    eax,DWORD PTR [eax]
c001b2d5:	83 c0 10             	add    eax,0x10
c001b2d8:	8b 00                	mov    eax,DWORD PTR [eax]
c001b2da:	83 ec 0c             	sub    esp,0xc
c001b2dd:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b2e1:	52                   	push   edx
c001b2e2:	8d 54 24 30          	lea    edx,[esp+0x30]
c001b2e6:	52                   	push   edx
c001b2e7:	6a 00                	push   0x0
c001b2e9:	68 00 04 00 00       	push   0x400
c001b2ee:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b2f5:	ff d0                	call   eax
c001b2f7:	83 c4 20             	add    esp,0x20
c001b2fa:	83 ec 0c             	sub    esp,0xc
c001b2fd:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b304:	e8 61 20 ff ff       	call   c000d36a <File::close()>
c001b309:	83 c4 10             	add    esp,0x10
c001b30c:	83 ec 08             	sub    esp,0x8
c001b30f:	6a 01                	push   0x1
c001b311:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b318:	e8 ef 1f ff ff       	call   c000d30c <File::open(FileOpenMode)>
c001b31d:	83 c4 10             	add    esp,0x10
c001b320:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b327:	8b 00                	mov    eax,DWORD PTR [eax]
c001b329:	83 c0 0c             	add    eax,0xc
c001b32c:	8b 00                	mov    eax,DWORD PTR [eax]
c001b32e:	83 ec 0c             	sub    esp,0xc
c001b331:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b335:	52                   	push   edx
c001b336:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001b33a:	52                   	push   edx
c001b33b:	6a 00                	push   0x0
c001b33d:	6a 04                	push   0x4
c001b33f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b346:	ff d0                	call   eax
c001b348:	83 c4 20             	add    esp,0x20
c001b34b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b352:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b358:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b35f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001b366:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001b369:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b36c:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001b373:	83 ec 0c             	sub    esp,0xc
c001b376:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b37d:	e8 e8 1f ff ff       	call   c000d36a <File::close()>
c001b382:	83 c4 10             	add    esp,0x10
c001b385:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001b38c:	ba 00 00 00 00       	mov    edx,0x0
c001b391:	81 c4 3c 04 00 00    	add    esp,0x43c
c001b397:	5b                   	pop    ebx
c001b398:	5e                   	pop    esi
c001b399:	5f                   	pop    edi
c001b39a:	5d                   	pop    ebp
c001b39b:	c3                   	ret    

c001b39c <FAT::readDir(void*, unsigned long, void*, int*)>:
c001b39c:	57                   	push   edi
c001b39d:	56                   	push   esi
c001b39e:	53                   	push   ebx
c001b39f:	81 ec 50 02 00 00    	sub    esp,0x250
c001b3a5:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001b3ad:	74 0d                	je     c001b3bc <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001b3af:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001b3b7:	75 0f                	jne    c001b3c8 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001b3b9:	8d 76 00             	lea    esi,[esi+0x0]
c001b3bc:	b8 04 00 00 00       	mov    eax,0x4
c001b3c1:	e9 36 01 00 00       	jmp    c001b4fc <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b3c6:	66 90                	xchg   ax,ax
c001b3c8:	83 ec 08             	sub    esp,0x8
c001b3cb:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b3d2:	50                   	push   eax
c001b3d3:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001b3da:	e8 08 ac fe ff       	call   c0005fe7 <f_readdir>
c001b3df:	83 c4 10             	add    esp,0x10
c001b3e2:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001b3e9:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001b3f0:	83 ec 0c             	sub    esp,0xc
c001b3f3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001b3fa:	83 c0 1a             	add    eax,0x1a
c001b3fd:	50                   	push   eax
c001b3fe:	e8 9d 52 fe ff       	call   c00006a0 <strlen>
c001b403:	83 c4 10             	add    esp,0x10
c001b406:	ba 00 00 00 00       	mov    edx,0x0
c001b40b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b40f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b413:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001b41a:	0f b6 c0             	movzx  eax,al
c001b41d:	83 e0 10             	and    eax,0x10
c001b420:	74 0a                	je     c001b42c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001b422:	b8 02 00 00 00       	mov    eax,0x2
c001b427:	eb 0b                	jmp    c001b434 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001b429:	8d 76 00             	lea    esi,[esi+0x0]
c001b42c:	b8 01 00 00 00       	mov    eax,0x1
c001b431:	8d 76 00             	lea    esi,[esi+0x0]
c001b434:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b438:	83 ec 08             	sub    esp,0x8
c001b43b:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b442:	83 c0 1a             	add    eax,0x1a
c001b445:	50                   	push   eax
c001b446:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b44a:	83 c0 10             	add    eax,0x10
c001b44d:	50                   	push   eax
c001b44e:	e8 ed 52 fe ff       	call   c0000740 <strcpy>
c001b453:	83 c4 10             	add    esp,0x10
c001b456:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001b45d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001b464:	8d 44 24 04          	lea    eax,[esp+0x4]
c001b468:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001b46f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001b476:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001b47d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001b484:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001b48b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001b492:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001b499:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001b4a0:	89 c6                	mov    esi,eax
c001b4a2:	89 d7                	mov    edi,edx
c001b4a4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b4a6:	89 c8                	mov    eax,ecx
c001b4a8:	89 fa                	mov    edx,edi
c001b4aa:	89 f3                	mov    ebx,esi
c001b4ac:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001b4b3:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001b4ba:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001b4c1:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001b4c8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b4ce:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001b4d5:	84 c0                	test   al,al
c001b4d7:	75 07                	jne    c001b4e0 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001b4d9:	b8 07 00 00 00       	mov    eax,0x7
c001b4de:	eb 1c                	jmp    c001b4fc <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b4e0:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001b4e7:	85 c0                	test   eax,eax
c001b4e9:	75 09                	jne    c001b4f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001b4eb:	b8 00 00 00 00       	mov    eax,0x0
c001b4f0:	eb 0a                	jmp    c001b4fc <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b4f2:	66 90                	xchg   ax,ax
c001b4f4:	b8 01 00 00 00       	mov    eax,0x1
c001b4f9:	8d 76 00             	lea    esi,[esi+0x0]
c001b4fc:	81 c4 50 02 00 00    	add    esp,0x250
c001b502:	5b                   	pop    ebx
c001b503:	5e                   	pop    esi
c001b504:	5f                   	pop    edi
c001b505:	c3                   	ret    
c001b506:	66 90                	xchg   ax,ax

c001b508 <FAT::read(void*, unsigned long, void*, int*)>:
c001b508:	83 ec 1c             	sub    esp,0x1c
c001b50b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b510:	74 0a                	je     c001b51c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001b512:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b517:	75 0b                	jne    c001b524 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001b519:	8d 76 00             	lea    esi,[esi+0x0]
c001b51c:	b8 04 00 00 00       	mov    eax,0x4
c001b521:	eb 41                	jmp    c001b564 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b523:	90                   	nop
c001b524:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b528:	50                   	push   eax
c001b529:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b52d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b531:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b535:	e8 8d 9d fe ff       	call   c00052c7 <f_read>
c001b53a:	83 c4 10             	add    esp,0x10
c001b53d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b541:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b545:	89 c2                	mov    edx,eax
c001b547:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b54b:	89 10                	mov    DWORD PTR [eax],edx
c001b54d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b551:	85 c0                	test   eax,eax
c001b553:	75 07                	jne    c001b55c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001b555:	b8 00 00 00 00       	mov    eax,0x0
c001b55a:	eb 08                	jmp    c001b564 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b55c:	b8 01 00 00 00       	mov    eax,0x1
c001b561:	8d 76 00             	lea    esi,[esi+0x0]
c001b564:	83 c4 1c             	add    esp,0x1c
c001b567:	c3                   	ret    

c001b568 <FAT::write(void*, unsigned long, void*, int*)>:
c001b568:	83 ec 1c             	sub    esp,0x1c
c001b56b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b570:	74 0a                	je     c001b57c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001b572:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b577:	75 0b                	jne    c001b584 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001b579:	8d 76 00             	lea    esi,[esi+0x0]
c001b57c:	b8 04 00 00 00       	mov    eax,0x4
c001b581:	eb 41                	jmp    c001b5c4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b583:	90                   	nop
c001b584:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b588:	50                   	push   eax
c001b589:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b58d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b591:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b595:	e8 ad 9f fe ff       	call   c0005547 <f_write>
c001b59a:	83 c4 10             	add    esp,0x10
c001b59d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b5a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b5a5:	89 c2                	mov    edx,eax
c001b5a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b5ab:	89 10                	mov    DWORD PTR [eax],edx
c001b5ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b5b1:	85 c0                	test   eax,eax
c001b5b3:	75 07                	jne    c001b5bc <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001b5b5:	b8 00 00 00 00       	mov    eax,0x0
c001b5ba:	eb 08                	jmp    c001b5c4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b5bc:	b8 01 00 00 00       	mov    eax,0x1
c001b5c1:	8d 76 00             	lea    esi,[esi+0x0]
c001b5c4:	83 c4 1c             	add    esp,0x1c
c001b5c7:	c3                   	ret    

c001b5c8 <FAT::close(void*)>:
c001b5c8:	83 ec 1c             	sub    esp,0x1c
c001b5cb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b5d0:	75 0a                	jne    c001b5dc <FAT::close(void*)+0x14>
c001b5d2:	b8 04 00 00 00       	mov    eax,0x4
c001b5d7:	eb 3f                	jmp    c001b618 <FAT::close(void*)+0x50>
c001b5d9:	8d 76 00             	lea    esi,[esi+0x0]
c001b5dc:	83 ec 0c             	sub    esp,0xc
c001b5df:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b5e3:	e8 f5 a3 fe ff       	call   c00059dd <f_close>
c001b5e8:	83 c4 10             	add    esp,0x10
c001b5eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b5ef:	83 ec 0c             	sub    esp,0xc
c001b5f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b5f6:	e8 24 e4 fe ff       	call   c0009a1f <free>
c001b5fb:	83 c4 10             	add    esp,0x10
c001b5fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b602:	85 c0                	test   eax,eax
c001b604:	75 0a                	jne    c001b610 <FAT::close(void*)+0x48>
c001b606:	b8 00 00 00 00       	mov    eax,0x0
c001b60b:	eb 0b                	jmp    c001b618 <FAT::close(void*)+0x50>
c001b60d:	8d 76 00             	lea    esi,[esi+0x0]
c001b610:	b8 01 00 00 00       	mov    eax,0x1
c001b615:	8d 76 00             	lea    esi,[esi+0x0]
c001b618:	83 c4 1c             	add    esp,0x1c
c001b61b:	c3                   	ret    

c001b61c <FAT::closeDir(void*)>:
c001b61c:	83 ec 1c             	sub    esp,0x1c
c001b61f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b624:	75 0a                	jne    c001b630 <FAT::closeDir(void*)+0x14>
c001b626:	b8 04 00 00 00       	mov    eax,0x4
c001b62b:	eb 3f                	jmp    c001b66c <FAT::closeDir(void*)+0x50>
c001b62d:	8d 76 00             	lea    esi,[esi+0x0]
c001b630:	83 ec 0c             	sub    esp,0xc
c001b633:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b637:	e8 89 a9 fe ff       	call   c0005fc5 <f_closedir>
c001b63c:	83 c4 10             	add    esp,0x10
c001b63f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b643:	83 ec 0c             	sub    esp,0xc
c001b646:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b64a:	e8 d0 e3 fe ff       	call   c0009a1f <free>
c001b64f:	83 c4 10             	add    esp,0x10
c001b652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b656:	85 c0                	test   eax,eax
c001b658:	75 0a                	jne    c001b664 <FAT::closeDir(void*)+0x48>
c001b65a:	b8 00 00 00 00       	mov    eax,0x0
c001b65f:	eb 0b                	jmp    c001b66c <FAT::closeDir(void*)+0x50>
c001b661:	8d 76 00             	lea    esi,[esi+0x0]
c001b664:	b8 01 00 00 00       	mov    eax,0x1
c001b669:	8d 76 00             	lea    esi,[esi+0x0]
c001b66c:	83 c4 1c             	add    esp,0x1c
c001b66f:	c3                   	ret    

c001b670 <FAT::seek(void*, unsigned long long)>:
c001b670:	83 ec 2c             	sub    esp,0x2c
c001b673:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b677:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b67b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b67f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b683:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001b688:	75 0a                	jne    c001b694 <FAT::seek(void*, unsigned long long)+0x24>
c001b68a:	b8 04 00 00 00       	mov    eax,0x4
c001b68f:	eb 37                	jmp    c001b6c8 <FAT::seek(void*, unsigned long long)+0x58>
c001b691:	8d 76 00             	lea    esi,[esi+0x0]
c001b694:	83 ec 04             	sub    esp,0x4
c001b697:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b69b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b69f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001b6a3:	e8 64 a3 fe ff       	call   c0005a0c <f_lseek>
c001b6a8:	83 c4 10             	add    esp,0x10
c001b6ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b6af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b6b3:	85 c0                	test   eax,eax
c001b6b5:	75 09                	jne    c001b6c0 <FAT::seek(void*, unsigned long long)+0x50>
c001b6b7:	b8 00 00 00 00       	mov    eax,0x0
c001b6bc:	eb 0a                	jmp    c001b6c8 <FAT::seek(void*, unsigned long long)+0x58>
c001b6be:	66 90                	xchg   ax,ax
c001b6c0:	b8 01 00 00 00       	mov    eax,0x1
c001b6c5:	8d 76 00             	lea    esi,[esi+0x0]
c001b6c8:	83 c4 2c             	add    esp,0x2c
c001b6cb:	c3                   	ret    

c001b6cc <fatWrapperReadDisk>:
c001b6cc:	83 ec 1c             	sub    esp,0x1c
c001b6cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6d3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b6d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b6db:	89 04 24             	mov    DWORD PTR [esp],eax
c001b6de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b6e2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b6e6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b6eb:	8b 04 85 60 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7da0]
c001b6f2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b6f6:	83 ec 0c             	sub    esp,0xc
c001b6f9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b6fd:	52                   	push   edx
c001b6fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b702:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b706:	50                   	push   eax
c001b707:	e8 54 4d ff ff       	call   c0010460 <LogicalDisk::read(unsigned long long, int, void*)>
c001b70c:	83 c4 20             	add    esp,0x20
c001b70f:	83 c4 1c             	add    esp,0x1c
c001b712:	c3                   	ret    
c001b713:	90                   	nop

c001b714 <fatWrapperWriteDisk>:
c001b714:	83 ec 1c             	sub    esp,0x1c
c001b717:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b71b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b71f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b723:	89 04 24             	mov    DWORD PTR [esp],eax
c001b726:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b72a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b72e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b733:	8b 04 85 60 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7da0]
c001b73a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b73e:	83 ec 0c             	sub    esp,0xc
c001b741:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b745:	52                   	push   edx
c001b746:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b74a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b74e:	50                   	push   eax
c001b74f:	e8 78 4d ff ff       	call   c00104cc <LogicalDisk::write(unsigned long long, int, void*)>
c001b754:	83 c4 20             	add    esp,0x20
c001b757:	83 c4 1c             	add    esp,0x1c
c001b75a:	c3                   	ret    
c001b75b:	90                   	nop

c001b75c <fatWrapperIoctl>:
c001b75c:	53                   	push   ebx
c001b75d:	83 ec 28             	sub    esp,0x28
c001b760:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b764:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b768:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b76c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b770:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001b775:	75 31                	jne    c001b7a8 <fatWrapperIoctl+0x4c>
c001b777:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b77b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b77f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b784:	8b 04 85 60 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7da0]
c001b78b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b791:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b797:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b79b:	66 89 02             	mov    WORD PTR [edx],ax
c001b79e:	b8 00 00 00 00       	mov    eax,0x0
c001b7a3:	e9 bc 00 00 00       	jmp    c001b864 <fatWrapperIoctl+0x108>
c001b7a8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001b7ad:	75 6d                	jne    c001b81c <fatWrapperIoctl+0xc0>
c001b7af:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b7b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b7b7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b7bc:	8b 04 85 60 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7da0]
c001b7c3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b7c9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b7cf:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b7d5:	89 c8                	mov    eax,ecx
c001b7d7:	89 da                	mov    edx,ebx
c001b7d9:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b7dd:	c1 e0 0a             	shl    eax,0xa
c001b7e0:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b7e5:	8b 0c 8d 60 82 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7da0]
c001b7ec:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001b7f2:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001b7f8:	89 cb                	mov    ebx,ecx
c001b7fa:	c1 fb 1f             	sar    ebx,0x1f
c001b7fd:	53                   	push   ebx
c001b7fe:	51                   	push   ecx
c001b7ff:	52                   	push   edx
c001b800:	50                   	push   eax
c001b801:	e8 7e 6d 00 00       	call   c0022584 <__udivdi3>
c001b806:	83 c4 10             	add    esp,0x10
c001b809:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b80d:	89 01                	mov    DWORD PTR [ecx],eax
c001b80f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b812:	b8 00 00 00 00       	mov    eax,0x0
c001b817:	eb 4b                	jmp    c001b864 <fatWrapperIoctl+0x108>
c001b819:	8d 76 00             	lea    esi,[esi+0x0]
c001b81c:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001b821:	75 09                	jne    c001b82c <fatWrapperIoctl+0xd0>
c001b823:	b8 00 00 00 00       	mov    eax,0x0
c001b828:	eb 3a                	jmp    c001b864 <fatWrapperIoctl+0x108>
c001b82a:	66 90                	xchg   ax,ax
c001b82c:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001b831:	75 19                	jne    c001b84c <fatWrapperIoctl+0xf0>
c001b833:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b837:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b83b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b83f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b845:	b8 00 00 00 00       	mov    eax,0x0
c001b84a:	eb 18                	jmp    c001b864 <fatWrapperIoctl+0x108>
c001b84c:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001b851:	75 09                	jne    c001b85c <fatWrapperIoctl+0x100>
c001b853:	b8 00 00 00 00       	mov    eax,0x0
c001b858:	eb 0a                	jmp    c001b864 <fatWrapperIoctl+0x108>
c001b85a:	66 90                	xchg   ax,ax
c001b85c:	b8 04 00 00 00       	mov    eax,0x4
c001b861:	8d 76 00             	lea    esi,[esi+0x0]
c001b864:	83 c4 28             	add    esp,0x28
c001b867:	5b                   	pop    ebx
c001b868:	c3                   	ret    
c001b869:	90                   	nop
c001b86a:	66 90                	xchg   ax,ax

c001b86c <FAT::FAT()>:
c001b86c:	83 ec 1c             	sub    esp,0x1c
c001b86f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b873:	83 ec 0c             	sub    esp,0xc
c001b876:	50                   	push   eax
c001b877:	e8 9a 17 ff ff       	call   c000d016 <Filesystem::Filesystem()>
c001b87c:	83 c4 10             	add    esp,0x10
c001b87f:	ba e4 60 02 c0       	mov    edx,0xc00260e4
c001b884:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b888:	89 10                	mov    DWORD PTR [eax],edx
c001b88a:	c7 05 c0 92 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00292c0,0x0
c001b894:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b89c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001b8a1:	7f 15                	jg     c001b8b8 <FAT::FAT()+0x4c>
c001b8a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b8a7:	c7 04 85 e0 92 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6d20],0xffffffff
c001b8b2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b8b6:	eb e4                	jmp    c001b89c <FAT::FAT()+0x30>
c001b8b8:	90                   	nop
c001b8b9:	83 c4 1c             	add    esp,0x1c
c001b8bc:	c3                   	ret    
c001b8bd:	90                   	nop
c001b8be:	66 90                	xchg   ax,ax

c001b8c0 <FAT::fixFilepath(char*)>:
c001b8c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b8c4:	8a 00                	mov    al,BYTE PTR [eax]
c001b8c6:	3c 40                	cmp    al,0x40
c001b8c8:	7e 2e                	jle    c001b8f8 <FAT::fixFilepath(char*)+0x38>
c001b8ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b8ce:	8a 00                	mov    al,BYTE PTR [eax]
c001b8d0:	83 e8 41             	sub    eax,0x41
c001b8d3:	88 c2                	mov    dl,al
c001b8d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b8d9:	88 10                	mov    BYTE PTR [eax],dl
c001b8db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b8df:	8a 00                	mov    al,BYTE PTR [eax]
c001b8e1:	0f be c0             	movsx  eax,al
c001b8e4:	8b 04 85 e0 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6d20]
c001b8eb:	83 c0 30             	add    eax,0x30
c001b8ee:	88 c2                	mov    dl,al
c001b8f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b8f4:	88 10                	mov    BYTE PTR [eax],dl
c001b8f6:	66 90                	xchg   ax,ax
c001b8f8:	90                   	nop
c001b8f9:	c3                   	ret    
c001b8fa:	66 90                	xchg   ax,ax

c001b8fc <FAT::open(char const*, void**, FileOpenMode)>:
c001b8fc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b902:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b90a:	74 0c                	je     c001b918 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001b90c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b914:	75 0e                	jne    c001b924 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001b916:	66 90                	xchg   ax,ax
c001b918:	b8 04 00 00 00       	mov    eax,0x4
c001b91d:	e9 06 01 00 00       	jmp    c001ba28 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b922:	66 90                	xchg   ax,ax
c001b924:	83 ec 08             	sub    esp,0x8
c001b927:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b92e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b932:	50                   	push   eax
c001b933:	e8 08 4e fe ff       	call   c0000740 <strcpy>
c001b938:	83 c4 10             	add    esp,0x10
c001b93b:	83 ec 08             	sub    esp,0x8
c001b93e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b942:	50                   	push   eax
c001b943:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b94a:	e8 71 ff ff ff       	call   c001b8c0 <FAT::fixFilepath(char*)>
c001b94f:	83 c4 10             	add    esp,0x10
c001b952:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001b95a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b961:	83 e0 01             	and    eax,0x1
c001b964:	74 0a                	je     c001b970 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001b966:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001b96e:	66 90                	xchg   ax,ax
c001b970:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b977:	83 e0 04             	and    eax,0x4
c001b97a:	74 10                	je     c001b98c <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001b97c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001b984:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b98c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b993:	83 e0 02             	and    eax,0x2
c001b996:	74 08                	je     c001b9a0 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001b998:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b9a0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b9a7:	83 e0 08             	and    eax,0x8
c001b9aa:	74 08                	je     c001b9b4 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001b9ac:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001b9b4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b9bb:	83 e0 10             	and    eax,0x10
c001b9be:	74 08                	je     c001b9c8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001b9c0:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001b9c8:	83 ec 0c             	sub    esp,0xc
c001b9cb:	68 50 02 00 00       	push   0x250
c001b9d0:	e8 3a e0 fe ff       	call   c0009a0f <malloc>
c001b9d5:	83 c4 10             	add    esp,0x10
c001b9d8:	89 c2                	mov    edx,eax
c001b9da:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b9e1:	89 10                	mov    DWORD PTR [eax],edx
c001b9e3:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001b9eb:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b9f2:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9f4:	83 ec 04             	sub    esp,0x4
c001b9f7:	52                   	push   edx
c001b9f8:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b9fc:	52                   	push   edx
c001b9fd:	50                   	push   eax
c001b9fe:	e8 88 94 fe ff       	call   c0004e8b <f_open>
c001ba03:	83 c4 10             	add    esp,0x10
c001ba06:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001ba0d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001ba15:	74 09                	je     c001ba20 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001ba17:	b8 01 00 00 00       	mov    eax,0x1
c001ba1c:	eb 0a                	jmp    c001ba28 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001ba1e:	66 90                	xchg   ax,ax
c001ba20:	b8 00 00 00 00       	mov    eax,0x0
c001ba25:	8d 76 00             	lea    esi,[esi+0x0]
c001ba28:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ba2e:	c3                   	ret    
c001ba2f:	90                   	nop

c001ba30 <FAT::openDir(char const*, void**)>:
c001ba30:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ba36:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ba3e:	74 0c                	je     c001ba4c <FAT::openDir(char const*, void**)+0x1c>
c001ba40:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ba48:	75 0e                	jne    c001ba58 <FAT::openDir(char const*, void**)+0x28>
c001ba4a:	66 90                	xchg   ax,ax
c001ba4c:	b8 04 00 00 00       	mov    eax,0x4
c001ba51:	e9 82 00 00 00       	jmp    c001bad8 <FAT::openDir(char const*, void**)+0xa8>
c001ba56:	66 90                	xchg   ax,ax
c001ba58:	83 ec 08             	sub    esp,0x8
c001ba5b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ba62:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ba66:	50                   	push   eax
c001ba67:	e8 d4 4c fe ff       	call   c0000740 <strcpy>
c001ba6c:	83 c4 10             	add    esp,0x10
c001ba6f:	83 ec 08             	sub    esp,0x8
c001ba72:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ba76:	50                   	push   eax
c001ba77:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ba7e:	e8 3d fe ff ff       	call   c001b8c0 <FAT::fixFilepath(char*)>
c001ba83:	83 c4 10             	add    esp,0x10
c001ba86:	83 ec 0c             	sub    esp,0xc
c001ba89:	6a 4c                	push   0x4c
c001ba8b:	e8 7f df fe ff       	call   c0009a0f <malloc>
c001ba90:	83 c4 10             	add    esp,0x10
c001ba93:	89 c2                	mov    edx,eax
c001ba95:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ba9c:	89 10                	mov    DWORD PTR [eax],edx
c001ba9e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001baa5:	8b 00                	mov    eax,DWORD PTR [eax]
c001baa7:	83 ec 08             	sub    esp,0x8
c001baaa:	8d 54 24 14          	lea    edx,[esp+0x14]
c001baae:	52                   	push   edx
c001baaf:	50                   	push   eax
c001bab0:	e8 0e a4 fe ff       	call   c0005ec3 <f_opendir>
c001bab5:	83 c4 10             	add    esp,0x10
c001bab8:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001babf:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001bac7:	74 07                	je     c001bad0 <FAT::openDir(char const*, void**)+0xa0>
c001bac9:	b8 01 00 00 00       	mov    eax,0x1
c001bace:	eb 08                	jmp    c001bad8 <FAT::openDir(char const*, void**)+0xa8>
c001bad0:	b8 00 00 00 00       	mov    eax,0x0
c001bad5:	8d 76 00             	lea    esi,[esi+0x0]
c001bad8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bade:	c3                   	ret    
c001badf:	90                   	nop

c001bae0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001bae0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001bae6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001baee:	75 0c                	jne    c001bafc <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001baf0:	b8 04 00 00 00       	mov    eax,0x4
c001baf5:	e9 d2 00 00 00       	jmp    c001bbcc <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bafa:	66 90                	xchg   ax,ax
c001bafc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001bb04:	75 0a                	jne    c001bb10 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001bb06:	b8 04 00 00 00       	mov    eax,0x4
c001bb0b:	e9 bc 00 00 00       	jmp    c001bbcc <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bb10:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001bb18:	75 0a                	jne    c001bb24 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001bb1a:	b8 04 00 00 00       	mov    eax,0x4
c001bb1f:	e9 a8 00 00 00       	jmp    c001bbcc <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bb24:	83 ec 08             	sub    esp,0x8
c001bb27:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bb2e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001bb35:	50                   	push   eax
c001bb36:	e8 05 4c fe ff       	call   c0000740 <strcpy>
c001bb3b:	83 c4 10             	add    esp,0x10
c001bb3e:	83 ec 08             	sub    esp,0x8
c001bb41:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001bb48:	50                   	push   eax
c001bb49:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bb50:	e8 6b fd ff ff       	call   c001b8c0 <FAT::fixFilepath(char*)>
c001bb55:	83 c4 10             	add    esp,0x10
c001bb58:	83 ec 08             	sub    esp,0x8
c001bb5b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bb5f:	50                   	push   eax
c001bb60:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001bb67:	50                   	push   eax
c001bb68:	e8 15 a5 fe ff       	call   c0006082 <f_stat>
c001bb6d:	83 c4 10             	add    esp,0x10
c001bb70:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001bb77:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001bb7e:	85 c0                	test   eax,eax
c001bb80:	74 0a                	je     c001bb8c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001bb82:	83 f8 04             	cmp    eax,0x4
c001bb85:	74 35                	je     c001bbbc <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001bb87:	eb 3b                	jmp    c001bbc4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001bb89:	8d 76 00             	lea    esi,[esi+0x0]
c001bb8c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bb90:	0f b6 c0             	movzx  eax,al
c001bb93:	83 e0 10             	and    eax,0x10
c001bb96:	0f 95 c2             	setne  dl
c001bb99:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001bba0:	88 10                	mov    BYTE PTR [eax],dl
c001bba2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bba5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bba9:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001bbb0:	89 01                	mov    DWORD PTR [ecx],eax
c001bbb2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001bbb5:	b8 00 00 00 00       	mov    eax,0x0
c001bbba:	eb 10                	jmp    c001bbcc <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bbbc:	b8 02 00 00 00       	mov    eax,0x2
c001bbc1:	eb 09                	jmp    c001bbcc <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bbc3:	90                   	nop
c001bbc4:	b8 01 00 00 00       	mov    eax,0x1
c001bbc9:	8d 76 00             	lea    esi,[esi+0x0]
c001bbcc:	81 c4 2c 02 00 00    	add    esp,0x22c
c001bbd2:	c3                   	ret    
c001bbd3:	90                   	nop

c001bbd4 <FAT::unlink(char const*)>:
c001bbd4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bbda:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bbe2:	75 08                	jne    c001bbec <FAT::unlink(char const*)+0x18>
c001bbe4:	b8 04 00 00 00       	mov    eax,0x4
c001bbe9:	eb 61                	jmp    c001bc4c <FAT::unlink(char const*)+0x78>
c001bbeb:	90                   	nop
c001bbec:	83 ec 08             	sub    esp,0x8
c001bbef:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bbf6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bbfa:	50                   	push   eax
c001bbfb:	e8 40 4b fe ff       	call   c0000740 <strcpy>
c001bc00:	83 c4 10             	add    esp,0x10
c001bc03:	83 ec 08             	sub    esp,0x8
c001bc06:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bc0a:	50                   	push   eax
c001bc0b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bc12:	e8 a9 fc ff ff       	call   c001b8c0 <FAT::fixFilepath(char*)>
c001bc17:	83 c4 10             	add    esp,0x10
c001bc1a:	83 ec 0c             	sub    esp,0xc
c001bc1d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bc21:	50                   	push   eax
c001bc22:	e8 ad a7 fe ff       	call   c00063d4 <f_unlink>
c001bc27:	83 c4 10             	add    esp,0x10
c001bc2a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001bc31:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001bc38:	85 c0                	test   eax,eax
c001bc3a:	75 08                	jne    c001bc44 <FAT::unlink(char const*)+0x70>
c001bc3c:	b8 00 00 00 00       	mov    eax,0x0
c001bc41:	eb 09                	jmp    c001bc4c <FAT::unlink(char const*)+0x78>
c001bc43:	90                   	nop
c001bc44:	b8 01 00 00 00       	mov    eax,0x1
c001bc49:	8d 76 00             	lea    esi,[esi+0x0]
c001bc4c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bc52:	c3                   	ret    
c001bc53:	90                   	nop

c001bc54 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001bc54:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001bc5a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001bc61:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001bc68:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001bc6c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bc70:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001bc78:	75 0a                	jne    c001bc84 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001bc7a:	b8 04 00 00 00       	mov    eax,0x4
c001bc7f:	e9 30 01 00 00       	jmp    c001bdb4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001bc84:	83 ec 08             	sub    esp,0x8
c001bc87:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001bc8e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bc92:	50                   	push   eax
c001bc93:	e8 a8 4a fe ff       	call   c0000740 <strcpy>
c001bc98:	83 c4 10             	add    esp,0x10
c001bc9b:	83 ec 08             	sub    esp,0x8
c001bc9e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001bca2:	50                   	push   eax
c001bca3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001bcaa:	e8 11 fc ff ff       	call   c001b8c0 <FAT::fixFilepath(char*)>
c001bcaf:	83 c4 10             	add    esp,0x10
c001bcb2:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001bcba:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001bcc2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bcc7:	83 e0 01             	and    eax,0x1
c001bcca:	74 08                	je     c001bcd4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001bccc:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001bcd4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bcd9:	83 e0 02             	and    eax,0x2
c001bcdc:	74 0a                	je     c001bce8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001bcde:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001bce6:	66 90                	xchg   ax,ax
c001bce8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bced:	83 e0 04             	and    eax,0x4
c001bcf0:	74 0a                	je     c001bcfc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001bcf2:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001bcfa:	66 90                	xchg   ax,ax
c001bcfc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bd01:	83 e0 08             	and    eax,0x8
c001bd04:	74 0a                	je     c001bd10 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001bd06:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001bd0e:	66 90                	xchg   ax,ax
c001bd10:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bd15:	83 e0 01             	and    eax,0x1
c001bd18:	74 0a                	je     c001bd24 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001bd1a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001bd22:	66 90                	xchg   ax,ax
c001bd24:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bd29:	83 e0 02             	and    eax,0x2
c001bd2c:	74 0a                	je     c001bd38 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001bd2e:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001bd36:	66 90                	xchg   ax,ax
c001bd38:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bd3d:	83 e0 04             	and    eax,0x4
c001bd40:	74 0a                	je     c001bd4c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001bd42:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001bd4a:	66 90                	xchg   ax,ax
c001bd4c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bd51:	83 e0 08             	and    eax,0x8
c001bd54:	74 0a                	je     c001bd60 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001bd56:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001bd5e:	66 90                	xchg   ax,ax
c001bd60:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001bd67:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001bd6e:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001bd76:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001bd7e:	83 ec 04             	sub    esp,0x4
c001bd81:	52                   	push   edx
c001bd82:	50                   	push   eax
c001bd83:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bd87:	50                   	push   eax
c001bd88:	e8 e9 ac fe ff       	call   c0006a76 <f_chmod>
c001bd8d:	83 c4 10             	add    esp,0x10
c001bd90:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001bd97:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001bd9e:	85 c0                	test   eax,eax
c001bda0:	75 0a                	jne    c001bdac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001bda2:	b8 00 00 00 00       	mov    eax,0x0
c001bda7:	eb 0b                	jmp    c001bdb4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001bda9:	8d 76 00             	lea    esi,[esi+0x0]
c001bdac:	b8 01 00 00 00       	mov    eax,0x1
c001bdb1:	8d 76 00             	lea    esi,[esi+0x0]
c001bdb4:	81 c4 2c 01 00 00    	add    esp,0x12c
c001bdba:	c3                   	ret    
c001bdbb:	90                   	nop

c001bdbc <FAT::rename(char const*, char const*)>:
c001bdbc:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bdc2:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001bdca:	74 0c                	je     c001bdd8 <FAT::rename(char const*, char const*)+0x1c>
c001bdcc:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001bdd4:	75 0e                	jne    c001bde4 <FAT::rename(char const*, char const*)+0x28>
c001bdd6:	66 90                	xchg   ax,ax
c001bdd8:	b8 04 00 00 00       	mov    eax,0x4
c001bddd:	e9 9e 00 00 00       	jmp    c001be80 <FAT::rename(char const*, char const*)+0xc4>
c001bde2:	66 90                	xchg   ax,ax
c001bde4:	83 ec 08             	sub    esp,0x8
c001bde7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001bdee:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001bdf5:	50                   	push   eax
c001bdf6:	e8 45 49 fe ff       	call   c0000740 <strcpy>
c001bdfb:	83 c4 10             	add    esp,0x10
c001bdfe:	83 ec 08             	sub    esp,0x8
c001be01:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001be08:	50                   	push   eax
c001be09:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001be10:	e8 ab fa ff ff       	call   c001b8c0 <FAT::fixFilepath(char*)>
c001be15:	83 c4 10             	add    esp,0x10
c001be18:	83 ec 08             	sub    esp,0x8
c001be1b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001be22:	8d 44 24 18          	lea    eax,[esp+0x18]
c001be26:	50                   	push   eax
c001be27:	e8 14 49 fe ff       	call   c0000740 <strcpy>
c001be2c:	83 c4 10             	add    esp,0x10
c001be2f:	83 ec 08             	sub    esp,0x8
c001be32:	8d 44 24 14          	lea    eax,[esp+0x14]
c001be36:	50                   	push   eax
c001be37:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001be3e:	e8 7d fa ff ff       	call   c001b8c0 <FAT::fixFilepath(char*)>
c001be43:	83 c4 10             	add    esp,0x10
c001be46:	83 ec 08             	sub    esp,0x8
c001be49:	8d 44 24 14          	lea    eax,[esp+0x14]
c001be4d:	50                   	push   eax
c001be4e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001be55:	50                   	push   eax
c001be56:	e8 28 a9 fe ff       	call   c0006783 <f_rename>
c001be5b:	83 c4 10             	add    esp,0x10
c001be5e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001be65:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001be6c:	85 c0                	test   eax,eax
c001be6e:	75 08                	jne    c001be78 <FAT::rename(char const*, char const*)+0xbc>
c001be70:	b8 00 00 00 00       	mov    eax,0x0
c001be75:	eb 09                	jmp    c001be80 <FAT::rename(char const*, char const*)+0xc4>
c001be77:	90                   	nop
c001be78:	b8 01 00 00 00       	mov    eax,0x1
c001be7d:	8d 76 00             	lea    esi,[esi+0x0]
c001be80:	81 c4 1c 02 00 00    	add    esp,0x21c
c001be86:	c3                   	ret    
c001be87:	90                   	nop

c001be88 <FAT::mkdir(char const*)>:
c001be88:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001be8e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001be96:	75 08                	jne    c001bea0 <FAT::mkdir(char const*)+0x18>
c001be98:	b8 04 00 00 00       	mov    eax,0x4
c001be9d:	eb 61                	jmp    c001bf00 <FAT::mkdir(char const*)+0x78>
c001be9f:	90                   	nop
c001bea0:	83 ec 08             	sub    esp,0x8
c001bea3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001beaa:	8d 44 24 18          	lea    eax,[esp+0x18]
c001beae:	50                   	push   eax
c001beaf:	e8 8c 48 fe ff       	call   c0000740 <strcpy>
c001beb4:	83 c4 10             	add    esp,0x10
c001beb7:	83 ec 08             	sub    esp,0x8
c001beba:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bebe:	50                   	push   eax
c001bebf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bec6:	e8 f5 f9 ff ff       	call   c001b8c0 <FAT::fixFilepath(char*)>
c001becb:	83 c4 10             	add    esp,0x10
c001bece:	83 ec 0c             	sub    esp,0xc
c001bed1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bed5:	50                   	push   eax
c001bed6:	e8 7c a6 fe ff       	call   c0006557 <f_mkdir>
c001bedb:	83 c4 10             	add    esp,0x10
c001bede:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001bee5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001beec:	85 c0                	test   eax,eax
c001beee:	75 08                	jne    c001bef8 <FAT::mkdir(char const*)+0x70>
c001bef0:	b8 00 00 00 00       	mov    eax,0x0
c001bef5:	eb 09                	jmp    c001bf00 <FAT::mkdir(char const*)+0x78>
c001bef7:	90                   	nop
c001bef8:	b8 01 00 00 00       	mov    eax,0x1
c001befd:	8d 76 00             	lea    esi,[esi+0x0]
c001bf00:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bf06:	c3                   	ret    
c001bf07:	90                   	nop

c001bf08 <FAT::exists(char const*)>:
c001bf08:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001bf0e:	83 ec 08             	sub    esp,0x8
c001bf11:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bf18:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001bf1c:	50                   	push   eax
c001bf1d:	e8 1e 48 fe ff       	call   c0000740 <strcpy>
c001bf22:	83 c4 10             	add    esp,0x10
c001bf25:	83 ec 08             	sub    esp,0x8
c001bf28:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bf2c:	50                   	push   eax
c001bf2d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bf34:	e8 87 f9 ff ff       	call   c001b8c0 <FAT::fixFilepath(char*)>
c001bf39:	83 c4 10             	add    esp,0x10
c001bf3c:	83 ec 08             	sub    esp,0x8
c001bf3f:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001bf46:	50                   	push   eax
c001bf47:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001bf4b:	50                   	push   eax
c001bf4c:	e8 31 a1 fe ff       	call   c0006082 <f_stat>
c001bf51:	83 c4 10             	add    esp,0x10
c001bf54:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001bf5b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001bf62:	85 c0                	test   eax,eax
c001bf64:	75 06                	jne    c001bf6c <FAT::exists(char const*)+0x64>
c001bf66:	b0 01                	mov    al,0x1
c001bf68:	eb 06                	jmp    c001bf70 <FAT::exists(char const*)+0x68>
c001bf6a:	66 90                	xchg   ax,ax
c001bf6c:	b0 00                	mov    al,0x0
c001bf6e:	66 90                	xchg   ax,ax
c001bf70:	81 c4 2c 02 00 00    	add    esp,0x22c
c001bf76:	c3                   	ret    
c001bf77:	90                   	nop

c001bf78 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001bf78:	b8 08 00 00 00       	mov    eax,0x8
c001bf7d:	c3                   	ret    

c001bf7e <ISO9660::seek(void*, unsigned long long)>:
c001bf7e:	53                   	push   ebx
c001bf7f:	b8 04 00 00 00       	mov    eax,0x4
c001bf84:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bf88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf8c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001bf90:	85 d2                	test   edx,edx
c001bf92:	74 17                	je     c001bfab <ISO9660::seek(void*, unsigned long long)+0x2d>
c001bf94:	89 c8                	mov    eax,ecx
c001bf96:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001bf99:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001bf9c:	b8 01 00 00 00       	mov    eax,0x1
c001bfa1:	73 08                	jae    c001bfab <ISO9660::seek(void*, unsigned long long)+0x2d>
c001bfa3:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001bfa6:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001bfa9:	31 c0                	xor    eax,eax
c001bfab:	5b                   	pop    ebx
c001bfac:	c3                   	ret    
c001bfad:	90                   	nop

c001bfae <ISO9660::tell(void*, unsigned long long*)>:
c001bfae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bfb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bfb6:	85 d2                	test   edx,edx
c001bfb8:	74 12                	je     c001bfcc <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001bfba:	85 c0                	test   eax,eax
c001bfbc:	74 0e                	je     c001bfcc <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001bfbe:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bfc1:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001bfc4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001bfc7:	89 10                	mov    DWORD PTR [eax],edx
c001bfc9:	31 c0                	xor    eax,eax
c001bfcb:	c3                   	ret    
c001bfcc:	b8 04 00 00 00       	mov    eax,0x4
c001bfd1:	c3                   	ret    

c001bfd2 <ISO9660::getName()>:
c001bfd2:	b8 44 61 02 c0       	mov    eax,0xc0026144
c001bfd7:	c3                   	ret    

c001bfd8 <ISO9660::stat(void*, unsigned long long*)>:
c001bfd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bfdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bfe0:	85 d2                	test   edx,edx
c001bfe2:	74 12                	je     c001bff6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001bfe4:	85 c0                	test   eax,eax
c001bfe6:	74 0e                	je     c001bff6 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001bfe8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001bfeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001bfee:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001bff1:	89 10                	mov    DWORD PTR [eax],edx
c001bff3:	31 c0                	xor    eax,eax
c001bff5:	c3                   	ret    
c001bff6:	b8 04 00 00 00       	mov    eax,0x4
c001bffb:	c3                   	ret    

c001bffc <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001bffc:	b8 01 00 00 00       	mov    eax,0x1
c001c001:	c3                   	ret    

c001c002 <ISO9660::unlink(char const*)>:
c001c002:	b8 01 00 00 00       	mov    eax,0x1
c001c007:	c3                   	ret    

c001c008 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001c008:	b8 01 00 00 00       	mov    eax,0x1
c001c00d:	c3                   	ret    

c001c00e <ISO9660::rename(char const*, char const*)>:
c001c00e:	b8 01 00 00 00       	mov    eax,0x1
c001c013:	c3                   	ret    

c001c014 <ISO9660::mkdir(char const*)>:
c001c014:	b8 01 00 00 00       	mov    eax,0x1
c001c019:	c3                   	ret    

c001c01a <ISO9660::close(void*)>:
c001c01a:	83 ec 0c             	sub    esp,0xc
c001c01d:	b8 04 00 00 00       	mov    eax,0x4
c001c022:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c026:	85 d2                	test   edx,edx
c001c028:	74 0e                	je     c001c038 <ISO9660::close(void*)+0x1e>
c001c02a:	83 ec 0c             	sub    esp,0xc
c001c02d:	52                   	push   edx
c001c02e:	e8 ec d9 fe ff       	call   c0009a1f <free>
c001c033:	83 c4 10             	add    esp,0x10
c001c036:	31 c0                	xor    eax,eax
c001c038:	83 c4 0c             	add    esp,0xc
c001c03b:	c3                   	ret    

c001c03c <ISO9660::closeDir(void*)>:
c001c03c:	83 ec 0c             	sub    esp,0xc
c001c03f:	b8 04 00 00 00       	mov    eax,0x4
c001c044:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c048:	85 d2                	test   edx,edx
c001c04a:	74 0e                	je     c001c05a <ISO9660::closeDir(void*)+0x1e>
c001c04c:	83 ec 0c             	sub    esp,0xc
c001c04f:	52                   	push   edx
c001c050:	e8 ca d9 fe ff       	call   c0009a1f <free>
c001c055:	83 c4 10             	add    esp,0x10
c001c058:	31 c0                	xor    eax,eax
c001c05a:	83 c4 0c             	add    esp,0xc
c001c05d:	c3                   	ret    

c001c05e <ISO9660::~ISO9660()>:
c001c05e:	83 ec 0c             	sub    esp,0xc
c001c061:	ba 68 61 02 c0       	mov    edx,0xc0026168
c001c066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c06a:	89 10                	mov    DWORD PTR [eax],edx
c001c06c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c070:	83 ec 0c             	sub    esp,0xc
c001c073:	50                   	push   eax
c001c074:	e8 c1 0f ff ff       	call   c000d03a <Filesystem::~Filesystem()>
c001c079:	83 c4 10             	add    esp,0x10
c001c07c:	90                   	nop
c001c07d:	83 c4 0c             	add    esp,0xc
c001c080:	c3                   	ret    
c001c081:	90                   	nop

c001c082 <ISO9660::~ISO9660()>:
c001c082:	83 ec 0c             	sub    esp,0xc
c001c085:	83 ec 0c             	sub    esp,0xc
c001c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c08c:	e8 cd ff ff ff       	call   c001c05e <ISO9660::~ISO9660()>
c001c091:	83 c4 10             	add    esp,0x10
c001c094:	83 ec 08             	sub    esp,0x8
c001c097:	6a 08                	push   0x8
c001c099:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c09d:	e8 7c 0b ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c001c0a2:	83 c4 10             	add    esp,0x10
c001c0a5:	83 c4 0c             	add    esp,0xc
c001c0a8:	c3                   	ret    

c001c0a9 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001c0a9:	55                   	push   ebp
c001c0aa:	31 c9                	xor    ecx,ecx
c001c0ac:	57                   	push   edi
c001c0ad:	56                   	push   esi
c001c0ae:	53                   	push   ebx
c001c0af:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c0b3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c0b7:	89 eb                	mov    ebx,ebp
c001c0b9:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001c0bd:	39 ce                	cmp    esi,ecx
c001c0bf:	7e 17                	jle    c001c0d8 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001c0c1:	31 d2                	xor    edx,edx
c001c0c3:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001c0c7:	7d 13                	jge    c001c0dc <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001c0c9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c0cd:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c0d0:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001c0d3:	75 0d                	jne    c001c0e2 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001c0d5:	42                   	inc    edx
c001c0d6:	eb eb                	jmp    c001c0c3 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001c0d8:	31 c0                	xor    eax,eax
c001c0da:	eb 0a                	jmp    c001c0e6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c0dc:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001c0e0:	eb 04                	jmp    c001c0e6 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c0e2:	41                   	inc    ecx
c001c0e3:	43                   	inc    ebx
c001c0e4:	eb d7                	jmp    c001c0bd <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001c0e6:	5b                   	pop    ebx
c001c0e7:	5e                   	pop    esi
c001c0e8:	5f                   	pop    edi
c001c0e9:	5d                   	pop    ebp
c001c0ea:	c3                   	ret    

c001c0eb <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001c0eb:	57                   	push   edi
c001c0ec:	56                   	push   esi
c001c0ed:	53                   	push   ebx
c001c0ee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c0f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c0f6:	39 0d c0 93 02 c0    	cmp    DWORD PTR ds:0xc00293c0,ecx
c001c0fc:	75 08                	jne    c001c106 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c001c0fe:	38 05 d4 76 02 c0    	cmp    BYTE PTR ds:0xc00276d4,al
c001c104:	74 2b                	je     c001c131 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c001c106:	83 ec 0c             	sub    esp,0xc
c001c109:	a2 d4 76 02 c0       	mov    ds:0xc00276d4,al
c001c10e:	68 e0 93 02 c0       	push   0xc00293e0
c001c113:	0f be c0             	movsx  eax,al
c001c116:	6a 01                	push   0x1
c001c118:	89 0d c0 93 02 c0    	mov    DWORD PTR ds:0xc00293c0,ecx
c001c11e:	31 db                	xor    ebx,ebx
c001c120:	53                   	push   ebx
c001c121:	51                   	push   ecx
c001c122:	ff 34 85 5c 81 02 c0 	push   DWORD PTR [eax*4-0x3ffd7ea4]
c001c129:	e8 32 43 ff ff       	call   c0010460 <LogicalDisk::read(unsigned long long, int, void*)>
c001c12e:	83 c4 20             	add    esp,0x20
c001c131:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c135:	be e0 93 02 c0       	mov    esi,0xc00293e0
c001c13a:	b9 00 08 00 00       	mov    ecx,0x800
c001c13f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c141:	5b                   	pop    ebx
c001c142:	5e                   	pop    esi
c001c143:	5f                   	pop    edi
c001c144:	c3                   	ret    
c001c145:	90                   	nop

c001c146 <ISO9660::tryMount(LogicalDisk*, int)>:
c001c146:	81 ec 10 08 00 00    	sub    esp,0x810
c001c14c:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001c153:	83 c0 41             	add    eax,0x41
c001c156:	0f be c0             	movsx  eax,al
c001c159:	50                   	push   eax
c001c15a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c15e:	50                   	push   eax
c001c15f:	6a 10                	push   0x10
c001c161:	e8 85 ff ff ff       	call   c001c0eb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c166:	83 c4 10             	add    esp,0x10
c001c169:	31 c0                	xor    eax,eax
c001c16b:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001c170:	75 1d                	jne    c001c18f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001c172:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001c177:	75 16                	jne    c001c18f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001c179:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001c17e:	75 0f                	jne    c001c18f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001c180:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001c185:	75 08                	jne    c001c18f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001c187:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001c18c:	0f 94 c0             	sete   al
c001c18f:	81 c4 0c 08 00 00    	add    esp,0x80c
c001c195:	c3                   	ret    

c001c196 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001c196:	55                   	push   ebp
c001c197:	57                   	push   edi
c001c198:	56                   	push   esi
c001c199:	53                   	push   ebx
c001c19a:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001c1a0:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001c1a7:	85 ed                	test   ebp,ebp
c001c1a9:	0f 84 da 01 00 00    	je     c001c389 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c1af:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001c1b7:	0f 84 cc 01 00 00    	je     c001c389 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c1bd:	b8 01 00 00 00       	mov    eax,0x1
c001c1c2:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001c1c6:	0f 85 c2 01 00 00    	jne    c001c38e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c1cc:	31 d2                	xor    edx,edx
c001c1ce:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001c1d5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c1d8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001c1db:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001c1de:	89 04 24             	mov    DWORD PTR [esp],eax
c001c1e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c1e5:	01 c8                	add    eax,ecx
c001c1e7:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c1ea:	11 da                	adc    edx,ebx
c001c1ec:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001c1f0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c1f4:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c1f8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c1fc:	19 d7                	sbb    edi,edx
c001c1fe:	72 11                	jb     c001c211 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001c200:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c203:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001c207:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c20b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c20f:	eb 0c                	jmp    c001c21d <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001c211:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001c215:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c219:	29 ce                	sub    esi,ecx
c001c21b:	19 df                	sbb    edi,ebx
c001c21d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c220:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001c223:	0f a4 c2 0b          	shld   edx,eax,0xb
c001c227:	c1 e0 0b             	shl    eax,0xb
c001c22a:	01 c8                	add    eax,ecx
c001c22c:	11 da                	adc    edx,ebx
c001c22e:	89 04 24             	mov    DWORD PTR [esp],eax
c001c231:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c235:	51                   	push   ecx
c001c236:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c23a:	50                   	push   eax
c001c23b:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001c23f:	53                   	push   ebx
c001c240:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c244:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c248:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c24c:	50                   	push   eax
c001c24d:	e8 99 fe ff ff       	call   c001c0eb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c252:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001c255:	b8 00 08 00 00       	mov    eax,0x800
c001c25a:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001c260:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001c264:	29 d0                	sub    eax,edx
c001c266:	83 c4 10             	add    esp,0x10
c001c269:	89 f9                	mov    ecx,edi
c001c26b:	39 c6                	cmp    esi,eax
c001c26d:	83 d9 00             	sbb    ecx,0x0
c001c270:	7d 1b                	jge    c001c28d <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001c272:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001c277:	75 12                	jne    c001c28b <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001c279:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c280:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c286:	e9 fa 00 00 00       	jmp    c001c385 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001c28b:	89 f0                	mov    eax,esi
c001c28d:	01 d3                	add    ebx,edx
c001c28f:	31 d2                	xor    edx,edx
c001c291:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c295:	39 c2                	cmp    edx,eax
c001c297:	7d 14                	jge    c001c2ad <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001c299:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001c2a0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c2a4:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001c2a7:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001c2aa:	42                   	inc    edx
c001c2ab:	eb e8                	jmp    c001c295 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001c2ad:	89 c2                	mov    edx,eax
c001c2af:	85 c0                	test   eax,eax
c001c2b1:	79 02                	jns    c001c2b5 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001c2b3:	31 d2                	xor    edx,edx
c001c2b5:	01 c2                	add    edx,eax
c001c2b7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001c2ba:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001c2c1:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001c2c5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c2c9:	99                   	cdq    
c001c2ca:	01 c1                	add    ecx,eax
c001c2cc:	11 d3                	adc    ebx,edx
c001c2ce:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001c2d2:	29 c6                	sub    esi,eax
c001c2d4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001c2d8:	19 d7                	sbb    edi,edx
c001c2da:	89 34 24             	mov    DWORD PTR [esp],esi
c001c2dd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c2e1:	b8 ff 07 00 00       	mov    eax,0x7ff
c001c2e6:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001c2e9:	b8 00 00 00 00       	mov    eax,0x0
c001c2ee:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001c2f2:	7d 43                	jge    c001c337 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001c2f4:	52                   	push   edx
c001c2f5:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c2f9:	50                   	push   eax
c001c2fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c2fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c302:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c306:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c30a:	50                   	push   eax
c001c30b:	e8 db fd ff ff       	call   c001c0eb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c310:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001c318:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001c31d:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001c325:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001c32d:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001c332:	83 c4 10             	add    esp,0x10
c001c335:	eb aa                	jmp    c001c2e1 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001c337:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c33b:	0b 04 24             	or     eax,DWORD PTR [esp]
c001c33e:	74 2a                	je     c001c36a <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001c340:	50                   	push   eax
c001c341:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c345:	50                   	push   eax
c001c346:	8d 74 24 28          	lea    esi,[esp+0x28]
c001c34a:	56                   	push   esi
c001c34b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c34f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c353:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001c357:	51                   	push   ecx
c001c358:	e8 8e fd ff ff       	call   c001c0eb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c35d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c361:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c365:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c367:	83 c4 10             	add    esp,0x10
c001c36a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c371:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c375:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c379:	89 18                	mov    DWORD PTR [eax],ebx
c001c37b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c37f:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c382:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c385:	31 c0                	xor    eax,eax
c001c387:	eb 05                	jmp    c001c38e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c389:	b8 04 00 00 00       	mov    eax,0x4
c001c38e:	81 c4 2c 08 00 00    	add    esp,0x82c
c001c394:	5b                   	pop    ebx
c001c395:	5e                   	pop    esi
c001c396:	5f                   	pop    edi
c001c397:	5d                   	pop    ebp
c001c398:	c3                   	ret    
c001c399:	90                   	nop

c001c39a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001c39a:	55                   	push   ebp
c001c39b:	57                   	push   edi
c001c39c:	56                   	push   esi
c001c39d:	53                   	push   ebx
c001c39e:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001c3a4:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001c3ab:	85 ed                	test   ebp,ebp
c001c3ad:	0f 84 51 02 00 00    	je     c001c604 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c3b3:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001c3bb:	0f 84 43 02 00 00    	je     c001c604 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c3c1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c3c4:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001c3c7:	75 0a                	jne    c001c3d3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001c3c9:	b8 07 00 00 00       	mov    eax,0x7
c001c3ce:	e9 36 02 00 00       	jmp    c001c609 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c3d3:	50                   	push   eax
c001c3d4:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c3d8:	50                   	push   eax
c001c3d9:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c3e0:	53                   	push   ebx
c001c3e1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c3e4:	c1 e0 0b             	shl    eax,0xb
c001c3e7:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001c3ea:	c1 e8 0b             	shr    eax,0xb
c001c3ed:	50                   	push   eax
c001c3ee:	e8 f8 fc ff ff       	call   c001c0eb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c3f3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c3f6:	83 c4 10             	add    esp,0x10
c001c3f9:	89 c1                	mov    ecx,eax
c001c3fb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001c3fe:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001c404:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001c407:	84 db                	test   bl,bl
c001c409:	0f 85 8b 00 00 00    	jne    c001c49a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001c40f:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001c415:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c418:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001c41e:	29 c6                	sub    esi,eax
c001c420:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001c424:	89 f3                	mov    ebx,esi
c001c426:	89 f1                	mov    ecx,esi
c001c428:	c1 fb 1f             	sar    ebx,0x1f
c001c42b:	01 f0                	add    eax,esi
c001c42d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c430:	11 da                	adc    edx,ebx
c001c432:	89 04 24             	mov    DWORD PTR [esp],eax
c001c435:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c439:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c43c:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c43f:	89 d8                	mov    eax,ebx
c001c441:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001c445:	ba 00 00 00 00       	mov    edx,0x0
c001c44a:	19 f8                	sbb    eax,edi
c001c44c:	b8 00 00 00 00       	mov    eax,0x0
c001c451:	73 08                	jae    c001c45b <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001c453:	89 f0                	mov    eax,esi
c001c455:	89 fa                	mov    edx,edi
c001c457:	29 c8                	sub    eax,ecx
c001c459:	19 da                	sbb    edx,ebx
c001c45b:	89 d7                	mov    edi,edx
c001c45d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c460:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c463:	09 c7                	or     edi,eax
c001c465:	0f 84 5e ff ff ff    	je     c001c3c9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001c46b:	57                   	push   edi
c001c46c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c470:	50                   	push   eax
c001c471:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c478:	53                   	push   ebx
c001c479:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c47c:	c1 e0 0b             	shl    eax,0xb
c001c47f:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001c483:	c1 e8 0b             	shr    eax,0xb
c001c486:	50                   	push   eax
c001c487:	e8 5f fc ff ff       	call   c001c0eb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c48c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c48f:	83 c4 10             	add    esp,0x10
c001c492:	25 ff 07 00 00       	and    eax,0x7ff
c001c497:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001c49a:	31 ff                	xor    edi,edi
c001c49c:	56                   	push   esi
c001c49d:	6a 28                	push   0x28
c001c49f:	6a 00                	push   0x0
c001c4a1:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c4a5:	50                   	push   eax
c001c4a6:	e8 d9 41 fe ff       	call   c0000684 <memset>
c001c4ab:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c4ae:	25 ff 07 00 00       	and    eax,0x7ff
c001c4b3:	89 c6                	mov    esi,eax
c001c4b5:	83 c6 21             	add    esi,0x21
c001c4b8:	83 d7 00             	adc    edi,0x0
c001c4bb:	83 c4 10             	add    esp,0x10
c001c4be:	31 c9                	xor    ecx,ecx
c001c4c0:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001c4c7:	83 f9 28             	cmp    ecx,0x28
c001c4ca:	88 04 24             	mov    BYTE PTR [esp],al
c001c4cd:	0f 94 c2             	sete   dl
c001c4d0:	88 d0                	mov    al,dl
c001c4d2:	ba ff 07 00 00       	mov    edx,0x7ff
c001c4d7:	39 f2                	cmp    edx,esi
c001c4d9:	ba 00 00 00 00       	mov    edx,0x0
c001c4de:	19 fa                	sbb    edx,edi
c001c4e0:	0f 92 c2             	setb   dl
c001c4e3:	09 c2                	or     edx,eax
c001c4e5:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001c4e9:	0f 94 c0             	sete   al
c001c4ec:	08 d0                	or     al,dl
c001c4ee:	75 16                	jne    c001c506 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c4f0:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001c4f4:	74 10                	je     c001c506 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c4f6:	8a 04 24             	mov    al,BYTE PTR [esp]
c001c4f9:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001c4fd:	41                   	inc    ecx
c001c4fe:	83 c6 01             	add    esi,0x1
c001c501:	83 d7 00             	adc    edi,0x0
c001c504:	eb ba                	jmp    c001c4c0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001c506:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001c50d:	83 ec 0c             	sub    esp,0xc
c001c510:	8d 74 24 24          	lea    esi,[esp+0x24]
c001c514:	56                   	push   esi
c001c515:	e8 86 41 fe ff       	call   c00006a0 <strlen>
c001c51a:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001c521:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c525:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001c52d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c530:	5a                   	pop    edx
c001c531:	25 ff 07 00 00       	and    eax,0x7ff
c001c536:	59                   	pop    ecx
c001c537:	01 f8                	add    eax,edi
c001c539:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001c53f:	83 e0 02             	and    eax,0x2
c001c542:	3c 01                	cmp    al,0x1
c001c544:	19 c0                	sbb    eax,eax
c001c546:	83 c0 02             	add    eax,0x2
c001c549:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c54d:	56                   	push   esi
c001c54e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c552:	50                   	push   eax
c001c553:	e8 e8 41 fe ff       	call   c0000740 <strcpy>
c001c558:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001c55c:	83 c4 10             	add    esp,0x10
c001c55f:	84 c0                	test   al,al
c001c561:	75 21                	jne    c001c584 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001c563:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001c56b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c573:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c57b:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001c582:	eb 28                	jmp    c001c5ac <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c584:	fe c8                	dec    al
c001c586:	75 24                	jne    c001c5ac <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c588:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001c590:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c598:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c5a0:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001c5a7:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001c5ac:	8d 74 24 40          	lea    esi,[esp+0x40]
c001c5b0:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001c5b7:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001c5be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c5c0:	0f b6 f3             	movzx  esi,bl
c001c5c3:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001c5ca:	31 db                	xor    ebx,ebx
c001c5cc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001c5d2:	89 df                	mov    edi,ebx
c001c5d4:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001c5d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c5da:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001c5dd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001c5e0:	39 c6                	cmp    esi,eax
c001c5e2:	19 d7                	sbb    edi,edx
c001c5e4:	72 10                	jb     c001c5f6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001c5e6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001c5ed:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001c5f4:	eb 0a                	jmp    c001c600 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001c5f6:	29 f0                	sub    eax,esi
c001c5f8:	19 da                	sbb    edx,ebx
c001c5fa:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c5fd:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c600:	31 c0                	xor    eax,eax
c001c602:	eb 05                	jmp    c001c609 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c604:	b8 04 00 00 00       	mov    eax,0x4
c001c609:	81 c4 5c 09 00 00    	add    esp,0x95c
c001c60f:	5b                   	pop    ebx
c001c610:	5e                   	pop    esi
c001c611:	5f                   	pop    edi
c001c612:	5d                   	pop    ebp
c001c613:	c3                   	ret    

c001c614 <readRoot(unsigned int*, unsigned int*, char)>:
c001c614:	57                   	push   edi
c001c615:	56                   	push   esi
c001c616:	81 ec 38 08 00 00    	sub    esp,0x838
c001c61c:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001c624:	50                   	push   eax
c001c625:	8d 44 24 38          	lea    eax,[esp+0x38]
c001c629:	50                   	push   eax
c001c62a:	6a 10                	push   0x10
c001c62c:	e8 ba fa ff ff       	call   c001c0eb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c631:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001c638:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001c63c:	b9 22 00 00 00       	mov    ecx,0x22
c001c641:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c643:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c64a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c64e:	89 10                	mov    DWORD PTR [eax],edx
c001c650:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001c657:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c65b:	89 10                	mov    DWORD PTR [eax],edx
c001c65d:	81 c4 44 08 00 00    	add    esp,0x844
c001c663:	b0 01                	mov    al,0x1
c001c665:	5e                   	pop    esi
c001c666:	5f                   	pop    edi
c001c667:	c3                   	ret    

c001c668 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001c668:	55                   	push   ebp
c001c669:	57                   	push   edi
c001c66a:	56                   	push   esi
c001c66b:	53                   	push   ebx
c001c66c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c672:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001c679:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001c680:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c684:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001c688:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c68c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c690:	75 03                	jne    c001c695 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c692:	83 c3 02             	add    ebx,0x2
c001c695:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001c698:	75 03                	jne    c001c69d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001c69a:	43                   	inc    ebx
c001c69b:	eb f8                	jmp    c001c695 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c69d:	51                   	push   ecx
c001c69e:	68 00 01 00 00       	push   0x100
c001c6a3:	6a 00                	push   0x0
c001c6a5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c6a9:	50                   	push   eax
c001c6aa:	e8 d5 3f fe ff       	call   c0000684 <memset>
c001c6af:	83 c4 10             	add    esp,0x10
c001c6b2:	31 d2                	xor    edx,edx
c001c6b4:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c6b7:	84 c0                	test   al,al
c001c6b9:	74 21                	je     c001c6dc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001c6bb:	3c 2f                	cmp    al,0x2f
c001c6bd:	75 0b                	jne    c001c6ca <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001c6bf:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001c6c3:	bd 01 00 00 00       	mov    ebp,0x1
c001c6c8:	eb 14                	jmp    c001c6de <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001c6ca:	8d 48 9f             	lea    ecx,[eax-0x61]
c001c6cd:	80 f9 19             	cmp    cl,0x19
c001c6d0:	77 03                	ja     c001c6d5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c6d2:	83 e8 20             	sub    eax,0x20
c001c6d5:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001c6d9:	42                   	inc    edx
c001c6da:	eb d8                	jmp    c001c6b4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001c6dc:	31 ed                	xor    ebp,ebp
c001c6de:	83 ec 0c             	sub    esp,0xc
c001c6e1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c6e8:	e8 22 d3 fe ff       	call   c0009a0f <malloc>
c001c6ed:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001c6f4:	89 c6                	mov    esi,eax
c001c6f6:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001c6fc:	c1 ef 0b             	shr    edi,0xb
c001c6ff:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001c706:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001c70a:	83 c4 10             	add    esp,0x10
c001c70d:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001c712:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c716:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001c71d:	74 28                	je     c001c747 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001c71f:	52                   	push   edx
c001c720:	57                   	push   edi
c001c721:	50                   	push   eax
c001c722:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c726:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001c72d:	e8 b9 f9 ff ff       	call   c001c0eb <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c732:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c736:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001c73d:	05 00 08 00 00       	add    eax,0x800
c001c742:	83 c4 10             	add    esp,0x10
c001c745:	eb cb                	jmp    c001c712 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001c747:	83 ec 0c             	sub    esp,0xc
c001c74a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c74e:	57                   	push   edi
c001c74f:	e8 4c 3f fe ff       	call   c00006a0 <strlen>
c001c754:	50                   	push   eax
c001c755:	57                   	push   edi
c001c756:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001c75d:	56                   	push   esi
c001c75e:	e8 46 f9 ff ff       	call   c001c0a9 <__memmem(unsigned char*, int, unsigned char*, int)>
c001c763:	83 c4 20             	add    esp,0x20
c001c766:	85 c0                	test   eax,eax
c001c768:	75 13                	jne    c001c77d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001c76a:	83 ec 0c             	sub    esp,0xc
c001c76d:	56                   	push   esi
c001c76e:	e8 ac d2 fe ff       	call   c0009a1f <free>
c001c773:	83 c4 10             	add    esp,0x10
c001c776:	31 c0                	xor    eax,eax
c001c778:	e9 b3 00 00 00       	jmp    c001c830 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c77d:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001c781:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001c785:	c1 e7 08             	shl    edi,0x8
c001c788:	c1 e2 10             	shl    edx,0x10
c001c78b:	09 d7                	or     edi,edx
c001c78d:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001c791:	09 d7                	or     edi,edx
c001c793:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001c797:	c1 e2 18             	shl    edx,0x18
c001c79a:	09 d7                	or     edi,edx
c001c79c:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001c7a0:	89 d1                	mov    ecx,edx
c001c7a2:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001c7a6:	c1 e1 08             	shl    ecx,0x8
c001c7a9:	c1 e2 10             	shl    edx,0x10
c001c7ac:	09 ca                	or     edx,ecx
c001c7ae:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001c7b2:	09 ca                	or     edx,ecx
c001c7b4:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001c7b8:	c1 e1 18             	shl    ecx,0x18
c001c7bb:	09 ca                	or     edx,ecx
c001c7bd:	89 e9                	mov    ecx,ebp
c001c7bf:	84 c9                	test   cl,cl
c001c7c1:	74 3c                	je     c001c7ff <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001c7c3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c7c7:	83 ec 0c             	sub    esp,0xc
c001c7ca:	56                   	push   esi
c001c7cb:	e8 4f d2 fe ff       	call   c0009a1f <free>
c001c7d0:	83 c4 0c             	add    esp,0xc
c001c7d3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c7da:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c7df:	50                   	push   eax
c001c7e0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c7e7:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c7ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c7f2:	52                   	push   edx
c001c7f3:	57                   	push   edi
c001c7f4:	53                   	push   ebx
c001c7f5:	e8 6e fe ff ff       	call   c001c668 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c7fa:	83 c4 20             	add    esp,0x20
c001c7fd:	eb 31                	jmp    c001c830 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c7ff:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001c802:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001c809:	d0 e8                	shr    al,1
c001c80b:	89 3b                	mov    DWORD PTR [ebx],edi
c001c80d:	83 e0 01             	and    eax,0x1
c001c810:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001c817:	83 ec 0c             	sub    esp,0xc
c001c81a:	89 13                	mov    DWORD PTR [ebx],edx
c001c81c:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001c823:	89 03                	mov    DWORD PTR [ebx],eax
c001c825:	56                   	push   esi
c001c826:	e8 f4 d1 fe ff       	call   c0009a1f <free>
c001c82b:	83 c4 10             	add    esp,0x10
c001c82e:	b0 01                	mov    al,0x1
c001c830:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c836:	5b                   	pop    ebx
c001c837:	5e                   	pop    esi
c001c838:	5f                   	pop    edi
c001c839:	5d                   	pop    ebp
c001c83a:	c3                   	ret    

c001c83b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001c83b:	55                   	push   ebp
c001c83c:	57                   	push   edi
c001c83d:	56                   	push   esi
c001c83e:	53                   	push   ebx
c001c83f:	83 ec 20             	sub    esp,0x20
c001c842:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c846:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c84a:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c84e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c856:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c85e:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001c863:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001c869:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001c86f:	57                   	push   edi
c001c870:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c874:	50                   	push   eax
c001c875:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c879:	50                   	push   eax
c001c87a:	e8 95 fd ff ff       	call   c001c614 <readRoot(unsigned int*, unsigned int*, char)>
c001c87f:	5a                   	pop    edx
c001c880:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c884:	e8 17 3e fe ff       	call   c00006a0 <strlen>
c001c889:	83 c4 10             	add    esp,0x10
c001c88c:	83 f8 03             	cmp    eax,0x3
c001c88f:	77 17                	ja     c001c8a8 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c891:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c895:	89 03                	mov    DWORD PTR [ebx],eax
c001c897:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c89b:	89 06                	mov    DWORD PTR [esi],eax
c001c89d:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001c8a4:	b0 01                	mov    al,0x1
c001c8a6:	eb 19                	jmp    c001c8c1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001c8a8:	50                   	push   eax
c001c8a9:	55                   	push   ebp
c001c8aa:	57                   	push   edi
c001c8ab:	56                   	push   esi
c001c8ac:	53                   	push   ebx
c001c8ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c8b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c8b5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c8b9:	e8 aa fd ff ff       	call   c001c668 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c8be:	83 c4 20             	add    esp,0x20
c001c8c1:	83 c4 1c             	add    esp,0x1c
c001c8c4:	5b                   	pop    ebx
c001c8c5:	5e                   	pop    esi
c001c8c6:	5f                   	pop    edi
c001c8c7:	5d                   	pop    ebp
c001c8c8:	c3                   	ret    
c001c8c9:	90                   	nop

c001c8ca <ISO9660::open(char const*, void**, FileOpenMode)>:
c001c8ca:	57                   	push   edi
c001c8cb:	56                   	push   esi
c001c8cc:	53                   	push   ebx
c001c8cd:	83 ec 10             	sub    esp,0x10
c001c8d0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c8d4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c8d8:	85 ff                	test   edi,edi
c001c8da:	0f 84 8b 00 00 00    	je     c001c96b <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c8e0:	85 f6                	test   esi,esi
c001c8e2:	0f 84 83 00 00 00    	je     c001c96b <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c8e8:	b8 03 00 00 00       	mov    eax,0x3
c001c8ed:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001c8f2:	75 7c                	jne    c001c970 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c8f4:	83 ec 0c             	sub    esp,0xc
c001c8f7:	6a 1c                	push   0x1c
c001c8f9:	e8 11 d1 fe ff       	call   c0009a0f <malloc>
c001c8fe:	89 07                	mov    DWORD PTR [edi],eax
c001c900:	89 c3                	mov    ebx,eax
c001c902:	58                   	pop    eax
c001c903:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c907:	50                   	push   eax
c001c908:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c90b:	50                   	push   eax
c001c90c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c910:	50                   	push   eax
c001c911:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c915:	50                   	push   eax
c001c916:	56                   	push   esi
c001c917:	e8 1f ff ff ff       	call   c001c83b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c91c:	83 c4 20             	add    esp,0x20
c001c91f:	84 c0                	test   al,al
c001c921:	74 07                	je     c001c92a <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001c923:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c928:	74 0b                	je     c001c935 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001c92a:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c92e:	b8 01 00 00 00       	mov    eax,0x1
c001c933:	eb 3b                	jmp    c001c970 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c935:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c939:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c93d:	89 03                	mov    DWORD PTR [ebx],eax
c001c93f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c946:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c94a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c951:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c958:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c95b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c962:	8a 06                	mov    al,BYTE PTR [esi]
c001c964:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c967:	31 c0                	xor    eax,eax
c001c969:	eb 05                	jmp    c001c970 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c96b:	b8 04 00 00 00       	mov    eax,0x4
c001c970:	83 c4 10             	add    esp,0x10
c001c973:	5b                   	pop    ebx
c001c974:	5e                   	pop    esi
c001c975:	5f                   	pop    edi
c001c976:	c3                   	ret    
c001c977:	90                   	nop

c001c978 <ISO9660::exists(char const*)>:
c001c978:	83 ec 28             	sub    esp,0x28
c001c97b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c97f:	8d 54 24 18          	lea    edx,[esp+0x18]
c001c983:	52                   	push   edx
c001c984:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001c987:	52                   	push   edx
c001c988:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c98c:	52                   	push   edx
c001c98d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c991:	52                   	push   edx
c001c992:	50                   	push   eax
c001c993:	e8 a3 fe ff ff       	call   c001c83b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c998:	83 c4 3c             	add    esp,0x3c
c001c99b:	c3                   	ret    

c001c99c <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001c99c:	56                   	push   esi
c001c99d:	53                   	push   ebx
c001c99e:	83 ec 14             	sub    esp,0x14
c001c9a1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c9a5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c9a9:	85 db                	test   ebx,ebx
c001c9ab:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c9af:	0f 94 c2             	sete   dl
c001c9b2:	85 f6                	test   esi,esi
c001c9b4:	0f 94 c0             	sete   al
c001c9b7:	08 c2                	or     dl,al
c001c9b9:	75 68                	jne    c001ca23 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c9bb:	85 c9                	test   ecx,ecx
c001c9bd:	74 64                	je     c001ca23 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c9bf:	83 ec 0c             	sub    esp,0xc
c001c9c2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c9c5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c9c9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c9cf:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c9d6:	50                   	push   eax
c001c9d7:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001c9da:	50                   	push   eax
c001c9db:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c9df:	50                   	push   eax
c001c9e0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c9e4:	50                   	push   eax
c001c9e5:	51                   	push   ecx
c001c9e6:	e8 50 fe ff ff       	call   c001c83b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c9eb:	83 c4 20             	add    esp,0x20
c001c9ee:	ba 01 00 00 00       	mov    edx,0x1
c001c9f3:	84 c0                	test   al,al
c001c9f5:	74 31                	je     c001ca28 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c9f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9fb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ca02:	89 03                	mov    DWORD PTR [ebx],eax
c001ca04:	ba 00 00 00 00       	mov    edx,0x0
c001ca09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca0d:	85 c0                	test   eax,eax
c001ca0f:	0f 95 06             	setne  BYTE PTR [esi]
c001ca12:	74 14                	je     c001ca28 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ca14:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001ca1a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ca21:	eb 05                	jmp    c001ca28 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001ca23:	ba 04 00 00 00       	mov    edx,0x4
c001ca28:	83 c4 14             	add    esp,0x14
c001ca2b:	89 d0                	mov    eax,edx
c001ca2d:	5b                   	pop    ebx
c001ca2e:	5e                   	pop    esi
c001ca2f:	c3                   	ret    

c001ca30 <ISO9660::openDir(char const*, void**)>:
c001ca30:	57                   	push   edi
c001ca31:	56                   	push   esi
c001ca32:	53                   	push   ebx
c001ca33:	83 ec 10             	sub    esp,0x10
c001ca36:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ca3a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ca3e:	85 ff                	test   edi,edi
c001ca40:	74 7b                	je     c001cabd <ISO9660::openDir(char const*, void**)+0x8d>
c001ca42:	85 f6                	test   esi,esi
c001ca44:	74 77                	je     c001cabd <ISO9660::openDir(char const*, void**)+0x8d>
c001ca46:	83 ec 0c             	sub    esp,0xc
c001ca49:	6a 1c                	push   0x1c
c001ca4b:	e8 bf cf fe ff       	call   c0009a0f <malloc>
c001ca50:	89 07                	mov    DWORD PTR [edi],eax
c001ca52:	89 c3                	mov    ebx,eax
c001ca54:	58                   	pop    eax
c001ca55:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ca59:	50                   	push   eax
c001ca5a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ca5d:	50                   	push   eax
c001ca5e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ca62:	50                   	push   eax
c001ca63:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ca67:	50                   	push   eax
c001ca68:	56                   	push   esi
c001ca69:	e8 cd fd ff ff       	call   c001c83b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ca6e:	83 c4 20             	add    esp,0x20
c001ca71:	84 c0                	test   al,al
c001ca73:	74 07                	je     c001ca7c <ISO9660::openDir(char const*, void**)+0x4c>
c001ca75:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ca7a:	75 0b                	jne    c001ca87 <ISO9660::openDir(char const*, void**)+0x57>
c001ca7c:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ca80:	b8 01 00 00 00       	mov    eax,0x1
c001ca85:	eb 3b                	jmp    c001cac2 <ISO9660::openDir(char const*, void**)+0x92>
c001ca87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca8b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001ca8f:	89 03                	mov    DWORD PTR [ebx],eax
c001ca91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001ca98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca9c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001caa3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001caaa:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001caad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001cab4:	8a 06                	mov    al,BYTE PTR [esi]
c001cab6:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001cab9:	31 c0                	xor    eax,eax
c001cabb:	eb 05                	jmp    c001cac2 <ISO9660::openDir(char const*, void**)+0x92>
c001cabd:	b8 04 00 00 00       	mov    eax,0x4
c001cac2:	83 c4 10             	add    esp,0x10
c001cac5:	5b                   	pop    ebx
c001cac6:	5e                   	pop    esi
c001cac7:	5f                   	pop    edi
c001cac8:	c3                   	ret    
c001cac9:	90                   	nop

c001caca <ISO9660::ISO9660()>:
c001caca:	83 ec 0c             	sub    esp,0xc
c001cacd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cad1:	83 ec 0c             	sub    esp,0xc
c001cad4:	50                   	push   eax
c001cad5:	e8 3c 05 ff ff       	call   c000d016 <Filesystem::Filesystem()>
c001cada:	83 c4 10             	add    esp,0x10
c001cadd:	ba 68 61 02 c0       	mov    edx,0xc0026168
c001cae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cae6:	89 10                	mov    DWORD PTR [eax],edx
c001cae8:	90                   	nop
c001cae9:	83 c4 0c             	add    esp,0xc
c001caec:	c3                   	ret    
c001caed:	90                   	nop

c001caee <SoundCard::beginPlayback()>:
c001caee:	c7 44 24 04 c8 61 02 c0 	mov    DWORD PTR [esp+0x4],0xc00261c8
c001caf6:	e9 b4 7d ff ff       	jmp    c00148af <Krnl::panic(char const*)>
c001cafb:	90                   	nop

c001cafc <SoundCard::stopPlayback()>:
c001cafc:	c7 44 24 04 fc 61 02 c0 	mov    DWORD PTR [esp+0x4],0xc00261fc
c001cb04:	e9 a6 7d ff ff       	jmp    c00148af <Krnl::panic(char const*)>
c001cb09:	90                   	nop

c001cb0a <SoundCard::SoundCard(char const*)>:
c001cb0a:	83 ec 1c             	sub    esp,0x1c
c001cb0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb11:	83 ec 08             	sub    esp,0x8
c001cb14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb18:	50                   	push   eax
c001cb19:	e8 6c 18 ff ff       	call   c000e38a <Device::Device(char const*)>
c001cb1e:	83 c4 10             	add    esp,0x10
c001cb21:	ba 94 62 02 c0       	mov    edx,0xc0026294
c001cb26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb2a:	89 10                	mov    DWORD PTR [eax],edx
c001cb2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb30:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001cb37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb3b:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001cb45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb49:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001cb53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb57:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001cb61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb65:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001cb6f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cb77:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001cb7c:	7f 19                	jg     c001cb97 <SoundCard::SoundCard(char const*)+0x8d>
c001cb7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb86:	83 c2 54             	add    edx,0x54
c001cb89:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001cb91:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001cb95:	eb e0                	jmp    c001cb77 <SoundCard::SoundCard(char const*)+0x6d>
c001cb97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb9b:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001cba2:	90                   	nop
c001cba3:	83 c4 1c             	add    esp,0x1c
c001cba6:	c3                   	ret    
c001cba7:	90                   	nop

c001cba8 <SoundCard::~SoundCard()>:
c001cba8:	83 ec 0c             	sub    esp,0xc
c001cbab:	ba 94 62 02 c0       	mov    edx,0xc0026294
c001cbb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbb4:	89 10                	mov    DWORD PTR [eax],edx
c001cbb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbba:	83 ec 0c             	sub    esp,0xc
c001cbbd:	50                   	push   eax
c001cbbe:	e8 91 14 ff ff       	call   c000e054 <Device::~Device()>
c001cbc3:	83 c4 10             	add    esp,0x10
c001cbc6:	90                   	nop
c001cbc7:	83 c4 0c             	add    esp,0xc
c001cbca:	c3                   	ret    
c001cbcb:	90                   	nop

c001cbcc <SoundCard::~SoundCard()>:
c001cbcc:	83 ec 0c             	sub    esp,0xc
c001cbcf:	83 ec 0c             	sub    esp,0xc
c001cbd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbd6:	e8 cd ff ff ff       	call   c001cba8 <SoundCard::~SoundCard()>
c001cbdb:	83 c4 10             	add    esp,0x10
c001cbde:	83 ec 08             	sub    esp,0x8
c001cbe1:	68 e8 01 00 00       	push   0x1e8
c001cbe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbea:	e8 2f 00 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c001cbef:	83 c4 10             	add    esp,0x10
c001cbf2:	83 c4 0c             	add    esp,0xc
c001cbf5:	c3                   	ret    

c001cbf6 <SoundCard::configureRates(int, int, int)>:
c001cbf6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cbfa:	31 c0                	xor    eax,eax
c001cbfc:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001cc03:	75 20                	jne    c001cc25 <SoundCard::configureRates(int, int, int)+0x2f>
c001cc05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc09:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001cc0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc13:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001cc19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc1d:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001cc23:	b0 01                	mov    al,0x1
c001cc25:	c3                   	ret    

c001cc26 <SoundCard::getSamples16(int, short*)>:
c001cc26:	55                   	push   ebp
c001cc27:	57                   	push   edi
c001cc28:	31 ff                	xor    edi,edi
c001cc2a:	56                   	push   esi
c001cc2b:	53                   	push   ebx
c001cc2c:	31 db                	xor    ebx,ebx
c001cc2e:	83 ec 18             	sub    esp,0x18
c001cc31:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cc35:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001cc39:	68 2f 62 02 c0       	push   0xc002622f
c001cc3e:	e8 bc 00 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001cc43:	83 c4 0c             	add    esp,0xc
c001cc46:	8d 04 36             	lea    eax,[esi+esi*1]
c001cc49:	50                   	push   eax
c001cc4a:	6a 00                	push   0x0
c001cc4c:	55                   	push   ebp
c001cc4d:	e8 32 3a fe ff       	call   c0000684 <memset>
c001cc52:	83 c4 10             	add    esp,0x10
c001cc55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc59:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001cc60:	85 c0                	test   eax,eax
c001cc62:	74 1b                	je     c001cc7f <SoundCard::getSamples16(int, short*)+0x59>
c001cc64:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001cc68:	75 15                	jne    c001cc7f <SoundCard::getSamples16(int, short*)+0x59>
c001cc6a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cc6e:	55                   	push   ebp
c001cc6f:	56                   	push   esi
c001cc70:	50                   	push   eax
c001cc71:	e8 5a 03 00 00       	call   c001cfd0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001cc76:	83 c4 10             	add    esp,0x10
c001cc79:	39 c7                	cmp    edi,eax
c001cc7b:	7d 02                	jge    c001cc7f <SoundCard::getSamples16(int, short*)+0x59>
c001cc7d:	89 c7                	mov    edi,eax
c001cc7f:	43                   	inc    ebx
c001cc80:	83 fb 20             	cmp    ebx,0x20
c001cc83:	75 d0                	jne    c001cc55 <SoundCard::getSamples16(int, short*)+0x2f>
c001cc85:	83 c4 0c             	add    esp,0xc
c001cc88:	89 f8                	mov    eax,edi
c001cc8a:	5b                   	pop    ebx
c001cc8b:	5e                   	pop    esi
c001cc8c:	5f                   	pop    edi
c001cc8d:	5d                   	pop    ebp
c001cc8e:	c3                   	ret    
c001cc8f:	90                   	nop

c001cc90 <SoundCard::getSamples32(int, int*)>:
c001cc90:	55                   	push   ebp
c001cc91:	57                   	push   edi
c001cc92:	31 ff                	xor    edi,edi
c001cc94:	56                   	push   esi
c001cc95:	31 f6                	xor    esi,esi
c001cc97:	53                   	push   ebx
c001cc98:	83 ec 10             	sub    esp,0x10
c001cc9b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cc9f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001cca3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001cca7:	c1 e0 02             	shl    eax,0x2
c001ccaa:	50                   	push   eax
c001ccab:	6a 00                	push   0x0
c001ccad:	55                   	push   ebp
c001ccae:	e8 d1 39 fe ff       	call   c0000684 <memset>
c001ccb3:	83 c4 10             	add    esp,0x10
c001ccb6:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ccbd:	85 c0                	test   eax,eax
c001ccbf:	74 1b                	je     c001ccdc <SoundCard::getSamples32(int, int*)+0x4c>
c001ccc1:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ccc5:	75 15                	jne    c001ccdc <SoundCard::getSamples32(int, int*)+0x4c>
c001ccc7:	53                   	push   ebx
c001ccc8:	55                   	push   ebp
c001ccc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cccd:	50                   	push   eax
c001ccce:	e8 f9 03 00 00       	call   c001d0cc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001ccd3:	83 c4 10             	add    esp,0x10
c001ccd6:	39 c6                	cmp    esi,eax
c001ccd8:	7d 02                	jge    c001ccdc <SoundCard::getSamples32(int, int*)+0x4c>
c001ccda:	89 c6                	mov    esi,eax
c001ccdc:	47                   	inc    edi
c001ccdd:	83 ff 20             	cmp    edi,0x20
c001cce0:	75 d4                	jne    c001ccb6 <SoundCard::getSamples32(int, int*)+0x26>
c001cce2:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001cce8:	85 f6                	test   esi,esi
c001ccea:	75 0f                	jne    c001ccfb <SoundCard::getSamples32(int, int*)+0x6b>
c001ccec:	84 c0                	test   al,al
c001ccee:	74 1b                	je     c001cd0b <SoundCard::getSamples32(int, int*)+0x7b>
c001ccf0:	83 ec 0c             	sub    esp,0xc
c001ccf3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ccf5:	53                   	push   ebx
c001ccf6:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ccf9:	eb 0d                	jmp    c001cd08 <SoundCard::getSamples32(int, int*)+0x78>
c001ccfb:	84 c0                	test   al,al
c001ccfd:	75 0c                	jne    c001cd0b <SoundCard::getSamples32(int, int*)+0x7b>
c001ccff:	83 ec 0c             	sub    esp,0xc
c001cd02:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd04:	53                   	push   ebx
c001cd05:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001cd08:	83 c4 10             	add    esp,0x10
c001cd0b:	83 c4 0c             	add    esp,0xc
c001cd0e:	89 f0                	mov    eax,esi
c001cd10:	5b                   	pop    ebx
c001cd11:	5e                   	pop    esi
c001cd12:	5f                   	pop    edi
c001cd13:	5d                   	pop    ebp
c001cd14:	c3                   	ret    
c001cd15:	90                   	nop

c001cd16 <SoundCard::addChannel(SoundPort*)>:
c001cd16:	56                   	push   esi
c001cd17:	53                   	push   ebx
c001cd18:	53                   	push   ebx
c001cd19:	31 db                	xor    ebx,ebx
c001cd1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cd1f:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001cd27:	74 27                	je     c001cd50 <SoundCard::addChannel(SoundPort*)+0x3a>
c001cd29:	43                   	inc    ebx
c001cd2a:	83 fb 20             	cmp    ebx,0x20
c001cd2d:	75 f0                	jne    c001cd1f <SoundCard::addChannel(SoundPort*)+0x9>
c001cd2f:	83 ec 0c             	sub    esp,0xc
c001cd32:	83 cb ff             	or     ebx,0xffffffff
c001cd35:	68 55 62 02 c0       	push   0xc0026255
c001cd3a:	e8 c0 ff fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001cd3f:	c7 04 24 4e 62 02 c0 	mov    DWORD PTR [esp],0xc002624e
c001cd46:	e8 64 7b ff ff       	call   c00148af <Krnl::panic(char const*)>
c001cd4b:	83 c4 10             	add    esp,0x10
c001cd4e:	eb 1b                	jmp    c001cd6b <SoundCard::addChannel(SoundPort*)+0x55>
c001cd50:	51                   	push   ecx
c001cd51:	51                   	push   ecx
c001cd52:	53                   	push   ebx
c001cd53:	68 6d 62 02 c0       	push   0xc002626d
c001cd58:	e8 a2 ff fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001cd5d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd61:	83 c4 10             	add    esp,0x10
c001cd64:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001cd6b:	89 d8                	mov    eax,ebx
c001cd6d:	5a                   	pop    edx
c001cd6e:	5b                   	pop    ebx
c001cd6f:	5e                   	pop    esi
c001cd70:	c3                   	ret    
c001cd71:	90                   	nop

c001cd72 <SoundCard::removeChannel(int)>:
c001cd72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cd7a:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001cd85:	c3                   	ret    
c001cd86:	66 90                	xchg   ax,ax

c001cd88 <SoundPort::SoundPort(int, int, int, int)>:
c001cd88:	83 ec 0c             	sub    esp,0xc
c001cd8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd8f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001cd96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd9a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001cd9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cda2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cda6:	89 10                	mov    DWORD PTR [eax],edx
c001cda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cdb0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cdb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdb7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cdbb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cdbe:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001cdc3:	75 13                	jne    c001cdd8 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001cdc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdc9:	8b 00                	mov    eax,DWORD PTR [eax]
c001cdcb:	05 a0 0f 00 00       	add    eax,0xfa0
c001cdd0:	01 c0                	add    eax,eax
c001cdd2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cdd6:	66 90                	xchg   ax,ax
c001cdd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cddc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cde0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001cde3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cde7:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001cdee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdf2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001cdf5:	c1 e0 02             	shl    eax,0x2
c001cdf8:	83 ec 0c             	sub    esp,0xc
c001cdfb:	50                   	push   eax
c001cdfc:	e8 0e cc fe ff       	call   c0009a0f <malloc>
c001ce01:	83 c4 10             	add    esp,0x10
c001ce04:	89 c2                	mov    edx,eax
c001ce06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce0a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001ce0d:	90                   	nop
c001ce0e:	83 c4 0c             	add    esp,0xc
c001ce11:	c3                   	ret    
c001ce12:	66 90                	xchg   ax,ax

c001ce14 <SoundPort::~SoundPort()>:
c001ce14:	83 ec 0c             	sub    esp,0xc
c001ce17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce1b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ce1e:	85 c0                	test   eax,eax
c001ce20:	74 1e                	je     c001ce40 <SoundPort::~SoundPort()+0x2c>
c001ce22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce26:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ce29:	83 ec 0c             	sub    esp,0xc
c001ce2c:	50                   	push   eax
c001ce2d:	e8 ed cb fe ff       	call   c0009a1f <free>
c001ce32:	83 c4 10             	add    esp,0x10
c001ce35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce39:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ce40:	90                   	nop
c001ce41:	83 c4 0c             	add    esp,0xc
c001ce44:	c3                   	ret    
c001ce45:	90                   	nop
c001ce46:	66 90                	xchg   ax,ax

c001ce48 <SoundPort::unpause()>:
c001ce48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce4c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001ce50:	c3                   	ret    
c001ce51:	90                   	nop
c001ce52:	66 90                	xchg   ax,ax

c001ce54 <SoundPort::pause()>:
c001ce54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce58:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ce5c:	c3                   	ret    
c001ce5d:	90                   	nop
c001ce5e:	66 90                	xchg   ax,ax

c001ce60 <SoundPort::getBufferUsed()>:
c001ce60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce64:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ce67:	c3                   	ret    

c001ce68 <SoundPort::getBufferSize()>:
c001ce68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce6c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ce6f:	c3                   	ret    

c001ce70 <SoundPort::buffer16(short*, int)>:
c001ce70:	55                   	push   ebp
c001ce71:	57                   	push   edi
c001ce72:	56                   	push   esi
c001ce73:	53                   	push   ebx
c001ce74:	83 ec 1c             	sub    esp,0x1c
c001ce77:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ce7b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001ce7f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001ce82:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001ce85:	0f 84 85 00 00 00    	je     c001cf10 <SoundPort::buffer16(short*, int)+0xa0>
c001ce8b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001ce8f:	85 c9                	test   ecx,ecx
c001ce91:	7e 7d                	jle    c001cf10 <SoundPort::buffer16(short*, int)+0xa0>
c001ce93:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001ce97:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001ce9a:	c1 e1 0f             	shl    ecx,0xf
c001ce9d:	8d 70 01             	lea    esi,[eax+0x1]
c001cea0:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001cea3:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001cea6:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cea9:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ceac:	74 6e                	je     c001cf1c <SoundPort::buffer16(short*, int)+0xac>
c001ceae:	31 f6                	xor    esi,esi
c001ceb0:	eb 22                	jmp    c001ced4 <SoundPort::buffer16(short*, int)+0x64>
c001ceb2:	66 90                	xchg   ax,ax
c001ceb4:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001ceb9:	8d 79 01             	lea    edi,[ecx+0x1]
c001cebc:	c1 e3 0f             	shl    ebx,0xf
c001cebf:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001cec2:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001cec5:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001cec8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cecb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cece:	74 1c                	je     c001ceec <SoundPort::buffer16(short*, int)+0x7c>
c001ced0:	89 c6                	mov    esi,eax
c001ced2:	66 90                	xchg   ax,ax
c001ced4:	8d 46 01             	lea    eax,[esi+0x1]
c001ced7:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001cedb:	75 d7                	jne    c001ceb4 <SoundPort::buffer16(short*, int)+0x44>
c001cedd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cee1:	83 c4 1c             	add    esp,0x1c
c001cee4:	5b                   	pop    ebx
c001cee5:	5e                   	pop    esi
c001cee6:	5f                   	pop    edi
c001cee7:	5d                   	pop    ebp
c001cee8:	c3                   	ret    
c001cee9:	8d 76 00             	lea    esi,[esi+0x0]
c001ceec:	8d 46 02             	lea    eax,[esi+0x2]
c001ceef:	90                   	nop
c001cef0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cef4:	83 ec 0c             	sub    esp,0xc
c001cef7:	68 c0 62 02 c0       	push   0xc00262c0
c001cefc:	e8 fe fd fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001cf01:	83 c4 10             	add    esp,0x10
c001cf04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cf08:	83 c4 1c             	add    esp,0x1c
c001cf0b:	5b                   	pop    ebx
c001cf0c:	5e                   	pop    esi
c001cf0d:	5f                   	pop    edi
c001cf0e:	5d                   	pop    ebp
c001cf0f:	c3                   	ret    
c001cf10:	83 c4 1c             	add    esp,0x1c
c001cf13:	31 c0                	xor    eax,eax
c001cf15:	5b                   	pop    ebx
c001cf16:	5e                   	pop    esi
c001cf17:	5f                   	pop    edi
c001cf18:	5d                   	pop    ebp
c001cf19:	c3                   	ret    
c001cf1a:	66 90                	xchg   ax,ax
c001cf1c:	b8 01 00 00 00       	mov    eax,0x1
c001cf21:	eb cd                	jmp    c001cef0 <SoundPort::buffer16(short*, int)+0x80>
c001cf23:	90                   	nop

c001cf24 <SoundPort::buffer32(int*, int)>:
c001cf24:	55                   	push   ebp
c001cf25:	57                   	push   edi
c001cf26:	56                   	push   esi
c001cf27:	53                   	push   ebx
c001cf28:	83 ec 1c             	sub    esp,0x1c
c001cf2b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cf2f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cf33:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cf36:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001cf3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cf3e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cf41:	74 79                	je     c001cfbc <SoundPort::buffer32(int*, int)+0x98>
c001cf43:	85 c0                	test   eax,eax
c001cf45:	7e 75                	jle    c001cfbc <SoundPort::buffer32(int*, int)+0x98>
c001cf47:	8d 71 01             	lea    esi,[ecx+0x1]
c001cf4a:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001cf4d:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001cf50:	8b 37                	mov    esi,DWORD PTR [edi]
c001cf52:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001cf55:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cf58:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cf5b:	74 6b                	je     c001cfc8 <SoundPort::buffer32(int*, int)+0xa4>
c001cf5d:	31 f6                	xor    esi,esi
c001cf5f:	eb 1f                	jmp    c001cf80 <SoundPort::buffer32(int*, int)+0x5c>
c001cf61:	8d 76 00             	lea    esi,[esi+0x0]
c001cf64:	8d 69 01             	lea    ebp,[ecx+0x1]
c001cf67:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001cf6a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001cf6d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001cf70:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001cf74:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cf77:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cf7a:	74 1c                	je     c001cf98 <SoundPort::buffer32(int*, int)+0x74>
c001cf7c:	89 de                	mov    esi,ebx
c001cf7e:	66 90                	xchg   ax,ax
c001cf80:	8d 5e 01             	lea    ebx,[esi+0x1]
c001cf83:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001cf87:	75 db                	jne    c001cf64 <SoundPort::buffer32(int*, int)+0x40>
c001cf89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cf8d:	83 c4 1c             	add    esp,0x1c
c001cf90:	5b                   	pop    ebx
c001cf91:	5e                   	pop    esi
c001cf92:	5f                   	pop    edi
c001cf93:	5d                   	pop    ebp
c001cf94:	c3                   	ret    
c001cf95:	8d 76 00             	lea    esi,[esi+0x0]
c001cf98:	8d 46 02             	lea    eax,[esi+0x2]
c001cf9b:	90                   	nop
c001cf9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cfa0:	83 ec 0c             	sub    esp,0xc
c001cfa3:	68 db 62 02 c0       	push   0xc00262db
c001cfa8:	e8 52 fd fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001cfad:	83 c4 10             	add    esp,0x10
c001cfb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cfb4:	83 c4 1c             	add    esp,0x1c
c001cfb7:	5b                   	pop    ebx
c001cfb8:	5e                   	pop    esi
c001cfb9:	5f                   	pop    edi
c001cfba:	5d                   	pop    ebp
c001cfbb:	c3                   	ret    
c001cfbc:	83 c4 1c             	add    esp,0x1c
c001cfbf:	31 c0                	xor    eax,eax
c001cfc1:	5b                   	pop    ebx
c001cfc2:	5e                   	pop    esi
c001cfc3:	5f                   	pop    edi
c001cfc4:	5d                   	pop    ebp
c001cfc5:	c3                   	ret    
c001cfc6:	66 90                	xchg   ax,ax
c001cfc8:	b8 01 00 00 00       	mov    eax,0x1
c001cfcd:	eb cd                	jmp    c001cf9c <SoundPort::buffer32(int*, int)+0x78>
c001cfcf:	90                   	nop

c001cfd0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001cfd0:	57                   	push   edi
c001cfd1:	56                   	push   esi
c001cfd2:	53                   	push   ebx
c001cfd3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cfd7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001cfdb:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001cfe1:	39 03                	cmp    DWORD PTR [ebx],eax
c001cfe3:	74 13                	je     c001cff8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001cfe5:	83 ec 0c             	sub    esp,0xc
c001cfe8:	68 30 63 02 c0       	push   0xc0026330
c001cfed:	e8 bd 78 ff ff       	call   c00148af <Krnl::panic(char const*)>
c001cff2:	83 c4 10             	add    esp,0x10
c001cff5:	8d 76 00             	lea    esi,[esi+0x0]
c001cff8:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001cffe:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d001:	74 11                	je     c001d014 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001d003:	83 ec 0c             	sub    esp,0xc
c001d006:	68 f6 62 02 c0       	push   0xc00262f6
c001d00b:	e8 9f 78 ff ff       	call   c00148af <Krnl::panic(char const*)>
c001d010:	83 c4 10             	add    esp,0x10
c001d013:	90                   	nop
c001d014:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001d01a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d01d:	74 11                	je     c001d030 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001d01f:	83 ec 0c             	sub    esp,0xc
c001d022:	68 f6 62 02 c0       	push   0xc00262f6
c001d027:	e8 83 78 ff ff       	call   c00148af <Krnl::panic(char const*)>
c001d02c:	83 c4 10             	add    esp,0x10
c001d02f:	90                   	nop
c001d030:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d033:	89 c6                	mov    esi,eax
c001d035:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001d039:	7e 05                	jle    c001d040 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001d03b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d03f:	90                   	nop
c001d040:	85 f6                	test   esi,esi
c001d042:	7e 30                	jle    c001d074 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001d044:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d048:	8d 3c 36             	lea    edi,[esi+esi*1]
c001d04b:	31 c9                	xor    ecx,ecx
c001d04d:	01 d7                	add    edi,edx
c001d04f:	90                   	nop
c001d050:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d053:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001d056:	85 c0                	test   eax,eax
c001d058:	79 06                	jns    c001d060 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001d05a:	05 ff 7f 00 00       	add    eax,0x7fff
c001d05f:	90                   	nop
c001d060:	c1 f8 0f             	sar    eax,0xf
c001d063:	83 c1 04             	add    ecx,0x4
c001d066:	66 01 02             	add    WORD PTR [edx],ax
c001d069:	83 c2 02             	add    edx,0x2
c001d06c:	39 d7                	cmp    edi,edx
c001d06e:	75 e0                	jne    c001d050 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001d070:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d073:	90                   	nop
c001d074:	56                   	push   esi
c001d075:	89 c2                	mov    edx,eax
c001d077:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001d07e:	29 f2                	sub    edx,esi
c001d080:	52                   	push   edx
c001d081:	50                   	push   eax
c001d082:	68 50 63 02 c0       	push   0xc0026350
c001d087:	e8 73 fc fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001d08c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d08f:	50                   	push   eax
c001d090:	01 f8                	add    eax,edi
c001d092:	50                   	push   eax
c001d093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d096:	29 f0                	sub    eax,esi
c001d098:	c1 e0 02             	shl    eax,0x2
c001d09b:	50                   	push   eax
c001d09c:	68 80 63 02 c0       	push   0xc0026380
c001d0a1:	e8 59 fc fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001d0a6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d0a9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d0ac:	83 c4 1c             	add    esp,0x1c
c001d0af:	01 d7                	add    edi,edx
c001d0b1:	29 f0                	sub    eax,esi
c001d0b3:	c1 e0 02             	shl    eax,0x2
c001d0b6:	50                   	push   eax
c001d0b7:	57                   	push   edi
c001d0b8:	52                   	push   edx
c001d0b9:	e8 fe 34 fe ff       	call   c00005bc <memmove>
c001d0be:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001d0c1:	83 c4 10             	add    esp,0x10
c001d0c4:	89 f0                	mov    eax,esi
c001d0c6:	5b                   	pop    ebx
c001d0c7:	5e                   	pop    esi
c001d0c8:	5f                   	pop    edi
c001d0c9:	c3                   	ret    
c001d0ca:	66 90                	xchg   ax,ax

c001d0cc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001d0cc:	57                   	push   edi
c001d0cd:	56                   	push   esi
c001d0ce:	53                   	push   ebx
c001d0cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d0d3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d0d7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d0db:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001d0e1:	39 06                	cmp    DWORD PTR [esi],eax
c001d0e3:	74 13                	je     c001d0f8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001d0e5:	83 ec 0c             	sub    esp,0xc
c001d0e8:	68 a4 63 02 c0       	push   0xc00263a4
c001d0ed:	e8 bd 77 ff ff       	call   c00148af <Krnl::panic(char const*)>
c001d0f2:	83 c4 10             	add    esp,0x10
c001d0f5:	8d 76 00             	lea    esi,[esi+0x0]
c001d0f8:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001d0fe:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001d101:	74 11                	je     c001d114 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001d103:	83 ec 0c             	sub    esp,0xc
c001d106:	68 12 63 02 c0       	push   0xc0026312
c001d10b:	e8 9f 77 ff ff       	call   c00148af <Krnl::panic(char const*)>
c001d110:	83 c4 10             	add    esp,0x10
c001d113:	90                   	nop
c001d114:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001d11a:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001d11d:	74 11                	je     c001d130 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001d11f:	83 ec 0c             	sub    esp,0xc
c001d122:	68 12 63 02 c0       	push   0xc0026312
c001d127:	e8 83 77 ff ff       	call   c00148af <Krnl::panic(char const*)>
c001d12c:	83 c4 10             	add    esp,0x10
c001d12f:	90                   	nop
c001d130:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001d133:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001d137:	7e 07                	jle    c001d140 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001d139:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d13d:	8d 76 00             	lea    esi,[esi+0x0]
c001d140:	85 ff                	test   edi,edi
c001d142:	7e 1c                	jle    c001d160 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001d144:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001d14b:	31 c0                	xor    eax,eax
c001d14d:	8d 76 00             	lea    esi,[esi+0x0]
c001d150:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d153:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001d156:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001d159:	83 c0 04             	add    eax,0x4
c001d15c:	39 c1                	cmp    ecx,eax
c001d15e:	75 f0                	jne    c001d150 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001d160:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d163:	50                   	push   eax
c001d164:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d167:	29 f8                	sub    eax,edi
c001d169:	c1 e0 02             	shl    eax,0x2
c001d16c:	50                   	push   eax
c001d16d:	8d 04 ba             	lea    eax,[edx+edi*4]
c001d170:	50                   	push   eax
c001d171:	52                   	push   edx
c001d172:	e8 45 34 fe ff       	call   c00005bc <memmove>
c001d177:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001d17a:	83 c4 10             	add    esp,0x10
c001d17d:	89 f8                	mov    eax,edi
c001d17f:	5b                   	pop    ebx
c001d180:	5e                   	pop    esi
c001d181:	5f                   	pop    edi
c001d182:	c3                   	ret    
c001d183:	90                   	nop

c001d184 <PCI::open(int, int, void*)>:
c001d184:	83 ec 18             	sub    esp,0x18
c001d187:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d18b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d18f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d195:	8b 10                	mov    edx,DWORD PTR [eax]
c001d197:	50                   	push   eax
c001d198:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001d19b:	31 c0                	xor    eax,eax
c001d19d:	83 c4 1c             	add    esp,0x1c
c001d1a0:	c3                   	ret    
c001d1a1:	90                   	nop

c001d1a2 <PCI::close(int, int, void*)>:
c001d1a2:	31 c0                	xor    eax,eax
c001d1a4:	c3                   	ret    
c001d1a5:	90                   	nop

c001d1a6 <PCI::PCI()>:
c001d1a6:	83 ec 0c             	sub    esp,0xc
c001d1a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1ad:	83 ec 08             	sub    esp,0x8
c001d1b0:	68 c3 63 02 c0       	push   0xc00263c3
c001d1b5:	50                   	push   eax
c001d1b6:	e8 31 08 ff ff       	call   c000d9ec <Bus::Bus(char const*)>
c001d1bb:	83 c4 10             	add    esp,0x10
c001d1be:	ba 98 65 02 c0       	mov    edx,0xc0026598
c001d1c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1c7:	89 10                	mov    DWORD PTR [eax],edx
c001d1c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1cd:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001d1d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1db:	a3 e0 9b 02 c0       	mov    ds:0xc0029be0,eax
c001d1e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1e4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d1ea:	0f b6 d0             	movzx  edx,al
c001d1ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1f1:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001d1f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1fc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d202:	0f b6 d0             	movzx  edx,al
c001d205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d209:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001d20e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d212:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d218:	8d 50 01             	lea    edx,[eax+0x1]
c001d21b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d21f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d225:	0f b6 d0             	movzx  edx,al
c001d228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d22c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d230:	83 c9 c0             	or     ecx,0xffffffc0
c001d233:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d237:	90                   	nop
c001d238:	83 c4 0c             	add    esp,0xc
c001d23b:	c3                   	ret    

c001d23c <PCI::readBAR8(unsigned int, int)>:
c001d23c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d240:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d244:	f6 c2 01             	test   dl,0x1
c001d247:	74 07                	je     c001d250 <PCI::readBAR8(unsigned int, int)+0x14>
c001d249:	83 e2 fc             	and    edx,0xfffffffc
c001d24c:	01 c2                	add    edx,eax
c001d24e:	ec                   	in     al,dx
c001d24f:	c3                   	ret    
c001d250:	83 e2 f0             	and    edx,0xfffffff0
c001d253:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001d256:	c3                   	ret    
c001d257:	90                   	nop

c001d258 <PCI::readBAR16(unsigned int, int)>:
c001d258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d25c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d260:	f6 c2 01             	test   dl,0x1
c001d263:	74 08                	je     c001d26d <PCI::readBAR16(unsigned int, int)+0x15>
c001d265:	83 e2 fc             	and    edx,0xfffffffc
c001d268:	01 c2                	add    edx,eax
c001d26a:	66 ed                	in     ax,dx
c001d26c:	c3                   	ret    
c001d26d:	83 e2 f0             	and    edx,0xfffffff0
c001d270:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001d274:	c3                   	ret    
c001d275:	90                   	nop

c001d276 <PCI::readBAR32(unsigned int, int)>:
c001d276:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d27a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d27e:	f6 c2 01             	test   dl,0x1
c001d281:	74 07                	je     c001d28a <PCI::readBAR32(unsigned int, int)+0x14>
c001d283:	83 e2 fc             	and    edx,0xfffffffc
c001d286:	01 c2                	add    edx,eax
c001d288:	ed                   	in     eax,dx
c001d289:	c3                   	ret    
c001d28a:	83 e2 f0             	and    edx,0xfffffff0
c001d28d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001d290:	c3                   	ret    
c001d291:	90                   	nop

c001d292 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001d292:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d296:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d29a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d29e:	f6 c2 01             	test   dl,0x1
c001d2a1:	74 07                	je     c001d2aa <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001d2a3:	83 e2 fc             	and    edx,0xfffffffc
c001d2a6:	01 ca                	add    edx,ecx
c001d2a8:	ee                   	out    dx,al
c001d2a9:	c3                   	ret    
c001d2aa:	83 e2 f0             	and    edx,0xfffffff0
c001d2ad:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001d2b0:	c3                   	ret    
c001d2b1:	90                   	nop

c001d2b2 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001d2b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d2b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d2be:	f6 c2 01             	test   dl,0x1
c001d2c1:	74 08                	je     c001d2cb <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001d2c3:	83 e2 fc             	and    edx,0xfffffffc
c001d2c6:	01 ca                	add    edx,ecx
c001d2c8:	66 ef                	out    dx,ax
c001d2ca:	c3                   	ret    
c001d2cb:	83 e2 f0             	and    edx,0xfffffff0
c001d2ce:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001d2d2:	c3                   	ret    
c001d2d3:	90                   	nop

c001d2d4 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001d2d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d2d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2dc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d2e0:	f6 c2 01             	test   dl,0x1
c001d2e3:	74 07                	je     c001d2ec <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001d2e5:	83 e2 fc             	and    edx,0xfffffffc
c001d2e8:	01 ca                	add    edx,ecx
c001d2ea:	ef                   	out    dx,eax
c001d2eb:	c3                   	ret    
c001d2ec:	83 e2 f0             	and    edx,0xfffffff0
c001d2ef:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001d2f2:	c3                   	ret    
c001d2f3:	90                   	nop

c001d2f4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d2f4:	55                   	push   ebp
c001d2f5:	57                   	push   edi
c001d2f6:	56                   	push   esi
c001d2f7:	53                   	push   ebx
c001d2f8:	83 ec 0c             	sub    esp,0xc
c001d2fb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d2ff:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001d303:	89 f0                	mov    eax,esi
c001d305:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d309:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d30d:	3c 07                	cmp    al,0x7
c001d30f:	76 10                	jbe    c001d321 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001d311:	83 ec 0c             	sub    esp,0xc
c001d314:	68 cb 63 02 c0       	push   0xc00263cb
c001d319:	e8 91 75 ff ff       	call   c00148af <Krnl::panic(char const*)>
c001d31e:	83 c4 10             	add    esp,0x10
c001d321:	80 fb 0f             	cmp    bl,0xf
c001d324:	76 10                	jbe    c001d336 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001d326:	83 ec 0c             	sub    esp,0xc
c001d329:	68 fb 63 02 c0       	push   0xc00263fb
c001d32e:	e8 7c 75 ff ff       	call   c00148af <Krnl::panic(char const*)>
c001d333:	83 c4 10             	add    esp,0x10
c001d336:	8d 04 36             	lea    eax,[esi+esi*1]
c001d339:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d33e:	83 c8 f0             	or     eax,0xfffffff0
c001d341:	ee                   	out    dx,al
c001d342:	ba fa 0c 00 00       	mov    edx,0xcfa
c001d347:	89 e8                	mov    eax,ebp
c001d349:	ee                   	out    dx,al
c001d34a:	83 c4 0c             	add    esp,0xc
c001d34d:	89 d8                	mov    eax,ebx
c001d34f:	66 81 e7 fc 00       	and    di,0xfc
c001d354:	5b                   	pop    ebx
c001d355:	c1 e0 08             	shl    eax,0x8
c001d358:	5e                   	pop    esi
c001d359:	09 f8                	or     eax,edi
c001d35b:	5f                   	pop    edi
c001d35c:	66 0d 00 c0          	or     ax,0xc000
c001d360:	5d                   	pop    ebp
c001d361:	c3                   	ret    

c001d362 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d362:	57                   	push   edi
c001d363:	56                   	push   esi
c001d364:	53                   	push   ebx
c001d365:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d369:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d36d:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001d373:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d377:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d37b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d37f:	83 ff 01             	cmp    edi,0x1
c001d382:	75 3e                	jne    c001d3c2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001d384:	89 de                	mov    esi,ebx
c001d386:	0f b6 c0             	movzx  eax,al
c001d389:	81 e6 fc 00 00 00    	and    esi,0xfc
c001d38f:	c1 e0 10             	shl    eax,0x10
c001d392:	0f b6 c9             	movzx  ecx,cl
c001d395:	09 f0                	or     eax,esi
c001d397:	c1 e1 08             	shl    ecx,0x8
c001d39a:	0f b6 d2             	movzx  edx,dl
c001d39d:	09 c8                	or     eax,ecx
c001d39f:	c1 e2 0b             	shl    edx,0xb
c001d3a2:	09 d0                	or     eax,edx
c001d3a4:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d3a9:	0d 00 00 00 80       	or     eax,0x80000000
c001d3ae:	ef                   	out    dx,eax
c001d3af:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d3b4:	ed                   	in     eax,dx
c001d3b5:	83 e3 02             	and    ebx,0x2
c001d3b8:	0f b6 cb             	movzx  ecx,bl
c001d3bb:	c1 e1 03             	shl    ecx,0x3
c001d3be:	d3 e8                	shr    eax,cl
c001d3c0:	eb 43                	jmp    c001d405 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d3c2:	83 ff 02             	cmp    edi,0x2
c001d3c5:	75 2c                	jne    c001d3f3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001d3c7:	83 ec 0c             	sub    esp,0xc
c001d3ca:	0f b6 c9             	movzx  ecx,cl
c001d3cd:	0f b6 d2             	movzx  edx,dl
c001d3d0:	0f b6 fb             	movzx  edi,bl
c001d3d3:	0f b6 c0             	movzx  eax,al
c001d3d6:	57                   	push   edi
c001d3d7:	51                   	push   ecx
c001d3d8:	52                   	push   edx
c001d3d9:	50                   	push   eax
c001d3da:	56                   	push   esi
c001d3db:	e8 14 ff ff ff       	call   c001d2f4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d3e0:	89 c2                	mov    edx,eax
c001d3e2:	ed                   	in     eax,dx
c001d3e3:	83 e3 02             	and    ebx,0x2
c001d3e6:	83 c4 20             	add    esp,0x20
c001d3e9:	0f b6 cb             	movzx  ecx,bl
c001d3ec:	c1 e1 03             	shl    ecx,0x3
c001d3ef:	d3 e8                	shr    eax,cl
c001d3f1:	eb 12                	jmp    c001d405 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d3f3:	83 ec 0c             	sub    esp,0xc
c001d3f6:	68 2b 64 02 c0       	push   0xc002642b
c001d3fb:	e8 af 74 ff ff       	call   c00148af <Krnl::panic(char const*)>
c001d400:	83 c4 10             	add    esp,0x10
c001d403:	31 c0                	xor    eax,eax
c001d405:	5b                   	pop    ebx
c001d406:	5e                   	pop    esi
c001d407:	5f                   	pop    edi
c001d408:	c3                   	ret    
c001d409:	90                   	nop

c001d40a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001d40a:	83 ec 18             	sub    esp,0x18
c001d40d:	6a 00                	push   0x0
c001d40f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d414:	50                   	push   eax
c001d415:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d41a:	50                   	push   eax
c001d41b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d420:	50                   	push   eax
c001d421:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d425:	e8 38 ff ff ff       	call   c001d362 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d42a:	83 c4 2c             	add    esp,0x2c
c001d42d:	c3                   	ret    

c001d42e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001d42e:	83 ec 18             	sub    esp,0x18
c001d431:	6a 0e                	push   0xe
c001d433:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d438:	50                   	push   eax
c001d439:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d43e:	50                   	push   eax
c001d43f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d444:	50                   	push   eax
c001d445:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d449:	e8 14 ff ff ff       	call   c001d362 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d44e:	83 c4 2c             	add    esp,0x2c
c001d451:	0f b6 c0             	movzx  eax,al
c001d454:	c3                   	ret    
c001d455:	90                   	nop

c001d456 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001d456:	55                   	push   ebp
c001d457:	57                   	push   edi
c001d458:	56                   	push   esi
c001d459:	53                   	push   ebx
c001d45a:	83 ec 18             	sub    esp,0x18
c001d45d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001d462:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001d467:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001d46c:	6a 0a                	push   0xa
c001d46e:	56                   	push   esi
c001d46f:	55                   	push   ebp
c001d470:	57                   	push   edi
c001d471:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d475:	e8 e8 fe ff ff       	call   c001d362 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d47a:	83 c4 14             	add    esp,0x14
c001d47d:	89 c3                	mov    ebx,eax
c001d47f:	6a 0a                	push   0xa
c001d481:	0f b6 db             	movzx  ebx,bl
c001d484:	56                   	push   esi
c001d485:	55                   	push   ebp
c001d486:	57                   	push   edi
c001d487:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d48b:	e8 d2 fe ff ff       	call   c001d362 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d490:	83 c4 2c             	add    esp,0x2c
c001d493:	25 00 ff 00 00       	and    eax,0xff00
c001d498:	09 d8                	or     eax,ebx
c001d49a:	5b                   	pop    ebx
c001d49b:	5e                   	pop    esi
c001d49c:	5f                   	pop    edi
c001d49d:	5d                   	pop    ebp
c001d49e:	c3                   	ret    
c001d49f:	90                   	nop

c001d4a0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001d4a0:	83 ec 18             	sub    esp,0x18
c001d4a3:	6a 08                	push   0x8
c001d4a5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d4aa:	50                   	push   eax
c001d4ab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d4b0:	50                   	push   eax
c001d4b1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d4b6:	50                   	push   eax
c001d4b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d4bb:	e8 a2 fe ff ff       	call   c001d362 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d4c0:	83 c4 2c             	add    esp,0x2c
c001d4c3:	0f b6 c4             	movzx  eax,ah
c001d4c6:	c3                   	ret    
c001d4c7:	90                   	nop

c001d4c8 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001d4c8:	83 ec 18             	sub    esp,0x18
c001d4cb:	6a 08                	push   0x8
c001d4cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d4d2:	50                   	push   eax
c001d4d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d4d8:	50                   	push   eax
c001d4d9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d4de:	50                   	push   eax
c001d4df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d4e3:	e8 7a fe ff ff       	call   c001d362 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d4e8:	83 c4 2c             	add    esp,0x2c
c001d4eb:	c3                   	ret    

c001d4ec <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001d4ec:	83 ec 18             	sub    esp,0x18
c001d4ef:	6a 3c                	push   0x3c
c001d4f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d4f6:	50                   	push   eax
c001d4f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d4fc:	50                   	push   eax
c001d4fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d502:	50                   	push   eax
c001d503:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d507:	e8 56 fe ff ff       	call   c001d362 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d50c:	83 c4 2c             	add    esp,0x2c
c001d50f:	c3                   	ret    

c001d510 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001d510:	83 ec 18             	sub    esp,0x18
c001d513:	6a 18                	push   0x18
c001d515:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d51a:	50                   	push   eax
c001d51b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d520:	50                   	push   eax
c001d521:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d526:	50                   	push   eax
c001d527:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d52b:	e8 32 fe ff ff       	call   c001d362 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d530:	83 c4 2c             	add    esp,0x2c
c001d533:	0f b6 c4             	movzx  eax,ah
c001d536:	c3                   	ret    
c001d537:	90                   	nop

c001d538 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d538:	55                   	push   ebp
c001d539:	57                   	push   edi
c001d53a:	56                   	push   esi
c001d53b:	53                   	push   ebx
c001d53c:	83 ec 28             	sub    esp,0x28
c001d53f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d543:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001d548:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001d54d:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001d552:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001d559:	8d 43 12             	lea    eax,[ebx+0x12]
c001d55c:	83 c3 10             	add    ebx,0x10
c001d55f:	0f b6 c0             	movzx  eax,al
c001d562:	0f b6 db             	movzx  ebx,bl
c001d565:	50                   	push   eax
c001d566:	51                   	push   ecx
c001d567:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001d56b:	57                   	push   edi
c001d56c:	55                   	push   ebp
c001d56d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d571:	e8 ec fd ff ff       	call   c001d362 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d576:	83 c4 14             	add    esp,0x14
c001d579:	89 c6                	mov    esi,eax
c001d57b:	53                   	push   ebx
c001d57c:	c1 e6 10             	shl    esi,0x10
c001d57f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d583:	51                   	push   ecx
c001d584:	57                   	push   edi
c001d585:	55                   	push   ebp
c001d586:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d58a:	e8 d3 fd ff ff       	call   c001d362 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d58f:	83 c4 3c             	add    esp,0x3c
c001d592:	0f b7 c0             	movzx  eax,ax
c001d595:	5b                   	pop    ebx
c001d596:	09 f0                	or     eax,esi
c001d598:	5e                   	pop    esi
c001d599:	5f                   	pop    edi
c001d59a:	5d                   	pop    ebp
c001d59b:	c3                   	ret    

c001d59c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001d59c:	55                   	push   ebp
c001d59d:	57                   	push   edi
c001d59e:	56                   	push   esi
c001d59f:	53                   	push   ebx
c001d5a0:	83 ec 0c             	sub    esp,0xc
c001d5a3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d5a7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d5ab:	89 f5                	mov    ebp,esi
c001d5ad:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001d5b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d5b7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d5bb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d5bf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d5c3:	83 f9 01             	cmp    ecx,0x1
c001d5c6:	75 5d                	jne    c001d625 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001d5c8:	0f b6 c8             	movzx  ecx,al
c001d5cb:	0f b6 d2             	movzx  edx,dl
c001d5ce:	c1 e1 10             	shl    ecx,0x10
c001d5d1:	c1 e2 0b             	shl    edx,0xb
c001d5d4:	89 f0                	mov    eax,esi
c001d5d6:	25 fc 00 00 00       	and    eax,0xfc
c001d5db:	09 c1                	or     ecx,eax
c001d5dd:	89 e8                	mov    eax,ebp
c001d5df:	0f b6 c0             	movzx  eax,al
c001d5e2:	c1 e0 08             	shl    eax,0x8
c001d5e5:	09 c1                	or     ecx,eax
c001d5e7:	09 d1                	or     ecx,edx
c001d5e9:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d5ee:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001d5f4:	89 c8                	mov    eax,ecx
c001d5f6:	ef                   	out    dx,eax
c001d5f7:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d5fc:	ed                   	in     eax,dx
c001d5fd:	0f b7 db             	movzx  ebx,bx
c001d600:	83 e6 02             	and    esi,0x2
c001d603:	74 0a                	je     c001d60f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001d605:	0f b7 d0             	movzx  edx,ax
c001d608:	c1 e3 10             	shl    ebx,0x10
c001d60b:	09 d3                	or     ebx,edx
c001d60d:	eb 05                	jmp    c001d614 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001d60f:	66 31 c0             	xor    ax,ax
c001d612:	09 c3                	or     ebx,eax
c001d614:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d619:	89 c8                	mov    eax,ecx
c001d61b:	ef                   	out    dx,eax
c001d61c:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d621:	89 d8                	mov    eax,ebx
c001d623:	eb 41                	jmp    c001d666 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d625:	83 f9 02             	cmp    ecx,0x2
c001d628:	75 45                	jne    c001d66f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001d62a:	83 ec 0c             	sub    esp,0xc
c001d62d:	0f b6 d2             	movzx  edx,dl
c001d630:	89 f1                	mov    ecx,esi
c001d632:	0f b6 c0             	movzx  eax,al
c001d635:	0f b6 f1             	movzx  esi,cl
c001d638:	89 e9                	mov    ecx,ebp
c001d63a:	56                   	push   esi
c001d63b:	0f b6 c9             	movzx  ecx,cl
c001d63e:	51                   	push   ecx
c001d63f:	52                   	push   edx
c001d640:	50                   	push   eax
c001d641:	57                   	push   edi
c001d642:	e8 ad fc ff ff       	call   c001d2f4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d647:	89 c2                	mov    edx,eax
c001d649:	ed                   	in     eax,dx
c001d64a:	83 c4 20             	add    esp,0x20
c001d64d:	0f b7 db             	movzx  ebx,bx
c001d650:	f6 c2 02             	test   dl,0x2
c001d653:	74 0c                	je     c001d661 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001d655:	0f b7 c8             	movzx  ecx,ax
c001d658:	89 d8                	mov    eax,ebx
c001d65a:	c1 e0 10             	shl    eax,0x10
c001d65d:	09 c8                	or     eax,ecx
c001d65f:	eb 05                	jmp    c001d666 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d661:	66 31 c0             	xor    ax,ax
c001d664:	09 d8                	or     eax,ebx
c001d666:	ef                   	out    dx,eax
c001d667:	83 c4 0c             	add    esp,0xc
c001d66a:	5b                   	pop    ebx
c001d66b:	5e                   	pop    esi
c001d66c:	5f                   	pop    edi
c001d66d:	5d                   	pop    ebp
c001d66e:	c3                   	ret    
c001d66f:	c7 44 24 20 2b 64 02 c0 	mov    DWORD PTR [esp+0x20],0xc002642b
c001d677:	83 c4 0c             	add    esp,0xc
c001d67a:	5b                   	pop    ebx
c001d67b:	5e                   	pop    esi
c001d67c:	5f                   	pop    edi
c001d67d:	5d                   	pop    ebp
c001d67e:	e9 2c 72 ff ff       	jmp    c00148af <Krnl::panic(char const*)>
c001d683:	90                   	nop

c001d684 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001d684:	55                   	push   ebp
c001d685:	57                   	push   edi
c001d686:	56                   	push   esi
c001d687:	53                   	push   ebx
c001d688:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001d68e:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001d695:	75 0f                	jne    c001d6a6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001d697:	80 3d ec 9b 02 c0 00 	cmp    BYTE PTR ds:0xc0029bec,0x0
c001d69e:	0f 85 fa 00 00 00    	jne    c001d79e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001d6a4:	eb 2f                	jmp    c001d6d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x51>
c001d6a6:	83 ec 0c             	sub    esp,0xc
c001d6a9:	68 31 64 02 c0       	push   0xc0026431
c001d6ae:	e8 b6 c3 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001d6b3:	83 c4 10             	add    esp,0x10
c001d6b6:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001d6bd:	75 d8                	jne    c001d697 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001d6bf:	e4 60                	in     al,0x60
c001d6c1:	3c 1c                	cmp    al,0x1c
c001d6c3:	74 04                	je     c001d6c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d6c5:	3c 5a                	cmp    al,0x5a
c001d6c7:	75 f6                	jne    c001d6bf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3b>
c001d6c9:	e4 60                	in     al,0x60
c001d6cb:	3c 5a                	cmp    al,0x5a
c001d6cd:	74 fa                	je     c001d6c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d6cf:	3c 1c                	cmp    al,0x1c
c001d6d1:	74 f6                	je     c001d6c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d6d3:	eb c2                	jmp    c001d697 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001d6d5:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001d6dc:	0f 85 86 00 00 00    	jne    c001d768 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xe4>
c001d6e2:	83 ec 0c             	sub    esp,0xc
c001d6e5:	68 14 01 00 00       	push   0x114
c001d6ea:	e8 20 c3 fe ff       	call   c0009a0f <malloc>
c001d6ef:	83 c4 0c             	add    esp,0xc
c001d6f2:	89 c3                	mov    ebx,eax
c001d6f4:	ff 35 f0 91 02 c0    	push   DWORD PTR ds:0xc00291f0
c001d6fa:	68 4b 64 02 c0       	push   0xc002644b
c001d6ff:	50                   	push   eax
c001d700:	e8 65 fb fe ff       	call   c000d26a <File::File(char const*, Process*)>
c001d705:	5a                   	pop    edx
c001d706:	59                   	pop    ecx
c001d707:	6a 01                	push   0x1
c001d709:	53                   	push   ebx
c001d70a:	e8 fd fb fe ff       	call   c000d30c <File::open(FileOpenMode)>
c001d70f:	83 c4 0c             	add    esp,0xc
c001d712:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001d716:	50                   	push   eax
c001d717:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d71b:	50                   	push   eax
c001d71c:	53                   	push   ebx
c001d71d:	e8 96 fe fe ff       	call   c000d5b8 <File::stat(unsigned long long*, bool*)>
c001d722:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d726:	40                   	inc    eax
c001d727:	89 04 24             	mov    DWORD PTR [esp],eax
c001d72a:	e8 e0 c2 fe ff       	call   c0009a0f <malloc>
c001d72f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d733:	a3 e8 9b 02 c0       	mov    ds:0xc0029be8,eax
c001d738:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001d73c:	5e                   	pop    esi
c001d73d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001d73f:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001d743:	51                   	push   ecx
c001d744:	50                   	push   eax
c001d745:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d749:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d74d:	53                   	push   ebx
c001d74e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d751:	83 c4 14             	add    esp,0x14
c001d754:	53                   	push   ebx
c001d755:	e8 10 fc fe ff       	call   c000d36a <File::close()>
c001d75a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d75e:	83 c4 10             	add    esp,0x10
c001d761:	a3 e4 9b 02 c0       	mov    ds:0xc0029be4,eax
c001d766:	eb 36                	jmp    c001d79e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001d768:	83 ec 0c             	sub    esp,0xc
c001d76b:	68 64 64 02 c0       	push   0xc0026464
c001d770:	e8 f4 c2 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001d775:	83 c4 10             	add    esp,0x10
c001d778:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001d77f:	0f 85 5d ff ff ff    	jne    c001d6e2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001d785:	e4 60                	in     al,0x60
c001d787:	3c 1c                	cmp    al,0x1c
c001d789:	74 04                	je     c001d78f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d78b:	3c 5a                	cmp    al,0x5a
c001d78d:	75 f6                	jne    c001d785 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x101>
c001d78f:	e4 60                	in     al,0x60
c001d791:	3c 5a                	cmp    al,0x5a
c001d793:	74 fa                	je     c001d78f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d795:	3c 1c                	cmp    al,0x1c
c001d797:	74 f6                	je     c001d78f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d799:	e9 44 ff ff ff       	jmp    c001d6e2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001d79e:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001d7a5:	75 0b                	jne    c001d7b2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x12e>
c001d7a7:	31 f6                	xor    esi,esi
c001d7a9:	31 db                	xor    ebx,ebx
c001d7ab:	31 ed                	xor    ebp,ebp
c001d7ad:	e9 a3 01 00 00       	jmp    c001d955 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d7b2:	83 ec 0c             	sub    esp,0xc
c001d7b5:	68 76 64 02 c0       	push   0xc0026476
c001d7ba:	e8 aa c2 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001d7bf:	8b 15 c0 7c 02 c0    	mov    edx,DWORD PTR ds:0xc0027cc0
c001d7c5:	83 c4 10             	add    esp,0x10
c001d7c8:	f6 c2 80             	test   dl,0x80
c001d7cb:	74 0c                	je     c001d7d9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001d7cd:	0f ba e2 0b          	bt     edx,0xb
c001d7d1:	72 1a                	jb     c001d7ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x169>
c001d7d3:	eb d2                	jmp    c001d7a7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d7d5:	3c 5a                	cmp    al,0x5a
c001d7d7:	74 0c                	je     c001d7e5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d7d9:	e4 60                	in     al,0x60
c001d7db:	3c 1c                	cmp    al,0x1c
c001d7dd:	75 f6                	jne    c001d7d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x151>
c001d7df:	eb 04                	jmp    c001d7e5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d7e1:	3c 1c                	cmp    al,0x1c
c001d7e3:	75 e8                	jne    c001d7cd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x149>
c001d7e5:	e4 60                	in     al,0x60
c001d7e7:	3c 5a                	cmp    al,0x5a
c001d7e9:	74 fa                	je     c001d7e5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d7eb:	eb f4                	jmp    c001d7e1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15d>
c001d7ed:	83 ec 0c             	sub    esp,0xc
c001d7f0:	68 7b 64 02 c0       	push   0xc002647b
c001d7f5:	e8 6f c2 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001d7fa:	83 c4 10             	add    esp,0x10
c001d7fd:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001d804:	75 a1                	jne    c001d7a7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d806:	e4 60                	in     al,0x60
c001d808:	3c 5a                	cmp    al,0x5a
c001d80a:	74 04                	je     c001d810 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d80c:	3c 1c                	cmp    al,0x1c
c001d80e:	75 f6                	jne    c001d806 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x182>
c001d810:	e4 60                	in     al,0x60
c001d812:	3c 5a                	cmp    al,0x5a
c001d814:	74 fa                	je     c001d810 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d816:	3c 1c                	cmp    al,0x1c
c001d818:	74 f6                	je     c001d810 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d81a:	eb 8b                	jmp    c001d7a7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d81c:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001d823:	0f 85 3d 01 00 00    	jne    c001d966 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2e2>
c001d829:	a1 e8 9b 02 c0       	mov    eax,ds:0xc0029be8
c001d82e:	8d 7e 01             	lea    edi,[esi+0x1]
c001d831:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001d834:	d4 40                	aam    0x40
c001d836:	d5 39                	aad    0x39
c001d838:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001d83f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d843:	0f 85 53 01 00 00    	jne    c001d99c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x318>
c001d849:	8b 15 e8 9b 02 c0    	mov    edx,DWORD PTR ds:0xc0029be8
c001d84f:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d852:	d4 40                	aam    0x40
c001d854:	d5 39                	aad    0x39
c001d856:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d85a:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001d85e:	d4 40                	aam    0x40
c001d860:	d5 39                	aad    0x39
c001d862:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001d866:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001d86a:	d4 40                	aam    0x40
c001d86c:	d5 39                	aad    0x39
c001d86e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d872:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001d876:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001d87a:	3c 56                	cmp    al,0x56
c001d87c:	74 49                	je     c001d8c7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x243>
c001d87e:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001d882:	d4 40                	aam    0x40
c001d884:	d5 39                	aad    0x39
c001d886:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d889:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001d88d:	0f b6 c9             	movzx  ecx,cl
c001d890:	c1 e1 04             	shl    ecx,0x4
c001d893:	d4 40                	aam    0x40
c001d895:	d5 39                	aad    0x39
c001d897:	83 e8 30             	sub    eax,0x30
c001d89a:	0f b6 c0             	movzx  eax,al
c001d89d:	09 c1                	or     ecx,eax
c001d89f:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001d8a3:	c1 e1 04             	shl    ecx,0x4
c001d8a6:	d4 40                	aam    0x40
c001d8a8:	d5 39                	aad    0x39
c001d8aa:	83 e8 30             	sub    eax,0x30
c001d8ad:	0f b6 c0             	movzx  eax,al
c001d8b0:	09 c1                	or     ecx,eax
c001d8b2:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001d8b6:	c1 e1 04             	shl    ecx,0x4
c001d8b9:	d4 40                	aam    0x40
c001d8bb:	d5 39                	aad    0x39
c001d8bd:	83 e8 30             	sub    eax,0x30
c001d8c0:	0f b6 c0             	movzx  eax,al
c001d8c3:	09 c8                	or     eax,ecx
c001d8c5:	89 c5                	mov    ebp,eax
c001d8c7:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001d8cb:	80 f9 44             	cmp    cl,0x44
c001d8ce:	74 47                	je     c001d917 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x293>
c001d8d0:	88 c8                	mov    al,cl
c001d8d2:	d4 40                	aam    0x40
c001d8d4:	d5 39                	aad    0x39
c001d8d6:	83 e8 30             	sub    eax,0x30
c001d8d9:	0f b6 f8             	movzx  edi,al
c001d8dc:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001d8e0:	c1 e7 04             	shl    edi,0x4
c001d8e3:	d4 40                	aam    0x40
c001d8e5:	d5 39                	aad    0x39
c001d8e7:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d8ea:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001d8ee:	0f b6 db             	movzx  ebx,bl
c001d8f1:	09 fb                	or     ebx,edi
c001d8f3:	c1 e3 04             	shl    ebx,0x4
c001d8f6:	d4 40                	aam    0x40
c001d8f8:	d5 39                	aad    0x39
c001d8fa:	83 e8 30             	sub    eax,0x30
c001d8fd:	0f b6 f8             	movzx  edi,al
c001d900:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001d904:	09 fb                	or     ebx,edi
c001d906:	89 df                	mov    edi,ebx
c001d908:	c1 e7 04             	shl    edi,0x4
c001d90b:	d4 40                	aam    0x40
c001d90d:	d5 39                	aad    0x39
c001d90f:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d912:	0f b6 db             	movzx  ebx,bl
c001d915:	09 fb                	or     ebx,edi
c001d917:	a1 e4 9b 02 c0       	mov    eax,ds:0xc0029be4
c001d91c:	83 c6 10             	add    esi,0x10
c001d91f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d923:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001d927:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001d92a:	3c 0a                	cmp    al,0xa
c001d92c:	0f 85 a0 00 00 00    	jne    c001d9d2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x34e>
c001d932:	3c 0a                	cmp    al,0xa
c001d934:	0f 94 c0             	sete   al
c001d937:	0f b6 c0             	movzx  eax,al
c001d93a:	01 c6                	add    esi,eax
c001d93c:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001d941:	0f 84 a2 00 00 00    	je     c001d9e9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001d947:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001d94f:	0f 84 94 00 00 00    	je     c001d9e9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001d955:	39 35 e4 9b 02 c0    	cmp    DWORD PTR ds:0xc0029be4,esi
c001d95b:	0f 8f bb fe ff ff    	jg     c001d81c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001d961:	e9 e8 00 00 00       	jmp    c001da4e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3ca>
c001d966:	83 ec 0c             	sub    esp,0xc
c001d969:	68 82 64 02 c0       	push   0xc0026482
c001d96e:	e8 f6 c0 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001d973:	83 c4 10             	add    esp,0x10
c001d976:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001d97d:	0f 85 a6 fe ff ff    	jne    c001d829 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001d983:	e4 60                	in     al,0x60
c001d985:	3c 5a                	cmp    al,0x5a
c001d987:	74 04                	je     c001d98d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001d989:	3c 1c                	cmp    al,0x1c
c001d98b:	75 f6                	jne    c001d983 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ff>
c001d98d:	e4 60                	in     al,0x60
c001d98f:	3c 5a                	cmp    al,0x5a
c001d991:	74 fa                	je     c001d98d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001d993:	3c 1c                	cmp    al,0x1c
c001d995:	74 f6                	je     c001d98d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001d997:	e9 8d fe ff ff       	jmp    c001d829 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001d99c:	83 ec 0c             	sub    esp,0xc
c001d99f:	68 8a 64 02 c0       	push   0xc002648a
c001d9a4:	e8 c0 c0 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001d9a9:	83 c4 10             	add    esp,0x10
c001d9ac:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001d9b3:	0f 85 90 fe ff ff    	jne    c001d849 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001d9b9:	e4 60                	in     al,0x60
c001d9bb:	3c 5a                	cmp    al,0x5a
c001d9bd:	74 04                	je     c001d9c3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001d9bf:	3c 1c                	cmp    al,0x1c
c001d9c1:	75 f6                	jne    c001d9b9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x335>
c001d9c3:	e4 60                	in     al,0x60
c001d9c5:	3c 5a                	cmp    al,0x5a
c001d9c7:	74 fa                	je     c001d9c3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001d9c9:	3c 1c                	cmp    al,0x1c
c001d9cb:	74 f6                	je     c001d9c3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001d9cd:	e9 77 fe ff ff       	jmp    c001d849 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001d9d2:	47                   	inc    edi
c001d9d3:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001d9d7:	0f 84 55 ff ff ff    	je     c001d932 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ae>
c001d9dd:	46                   	inc    esi
c001d9de:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001d9e1:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001d9e4:	e9 3e ff ff ff       	jmp    c001d927 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a3>
c001d9e9:	80 f9 44             	cmp    cl,0x44
c001d9ec:	74 0e                	je     c001d9fc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x378>
c001d9ee:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001d9f6:	0f 85 59 ff ff ff    	jne    c001d955 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d9fc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001da00:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001da04:	c1 e0 04             	shl    eax,0x4
c001da07:	83 ea 30             	sub    edx,0x30
c001da0a:	09 d0                	or     eax,edx
c001da0c:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001da13:	0f 85 3c ff ff ff    	jne    c001d955 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001da19:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001da1d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001da21:	c1 e2 04             	shl    edx,0x4
c001da24:	83 e8 30             	sub    eax,0x30
c001da27:	09 d0                	or     eax,edx
c001da29:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001da30:	0f 85 1f ff ff ff    	jne    c001d955 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001da36:	50                   	push   eax
c001da37:	50                   	push   eax
c001da38:	8d 44 24 28          	lea    eax,[esp+0x28]
c001da3c:	50                   	push   eax
c001da3d:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001da44:	e8 f7 2c fe ff       	call   c0000740 <strcpy>
c001da49:	83 c4 10             	add    esp,0x10
c001da4c:	eb 15                	jmp    c001da63 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3df>
c001da4e:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001da55:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001da60:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001da63:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001da6a:	81 c4 2c 01 00 00    	add    esp,0x12c
c001da70:	5b                   	pop    ebx
c001da71:	5e                   	pop    esi
c001da72:	5f                   	pop    edi
c001da73:	5d                   	pop    ebp
c001da74:	c3                   	ret    
c001da75:	90                   	nop

c001da76 <PCI::checkBus(unsigned char)>:
c001da76:	56                   	push   esi
c001da77:	53                   	push   ebx
c001da78:	31 db                	xor    ebx,ebx
c001da7a:	51                   	push   ecx
c001da7b:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001da80:	52                   	push   edx
c001da81:	53                   	push   ebx
c001da82:	43                   	inc    ebx
c001da83:	56                   	push   esi
c001da84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001da88:	e8 bf 07 00 00       	call   c001e24c <PCI::checkDevice(unsigned char, unsigned char)>
c001da8d:	83 c4 10             	add    esp,0x10
c001da90:	83 fb 20             	cmp    ebx,0x20
c001da93:	75 eb                	jne    c001da80 <PCI::checkBus(unsigned char)+0xa>
c001da95:	58                   	pop    eax
c001da96:	5b                   	pop    ebx
c001da97:	5e                   	pop    esi
c001da98:	c3                   	ret    
c001da99:	90                   	nop

c001da9a <PCI::foundDevice(PCIDeviceInfo)>:
c001da9a:	55                   	push   ebp
c001da9b:	57                   	push   edi
c001da9c:	56                   	push   esi
c001da9d:	53                   	push   ebx
c001da9e:	83 ec 1c             	sub    esp,0x1c
c001daa1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001daa5:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001daab:	0f 84 20 04 00 00    	je     c001ded1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dab1:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001dab8:	75 37                	jne    c001daf1 <PCI::foundDevice(PCIDeviceInfo)+0x57>
c001daba:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001dabe:	66 81 f9 06 04       	cmp    cx,0x406
c001dac3:	75 5b                	jne    c001db20 <PCI::foundDevice(PCIDeviceInfo)+0x86>
c001dac5:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001daca:	50                   	push   eax
c001dacb:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001dad0:	50                   	push   eax
c001dad1:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001dad6:	50                   	push   eax
c001dad7:	53                   	push   ebx
c001dad8:	e8 33 fa ff ff       	call   c001d510 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001dadd:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001dae1:	0f b6 c0             	movzx  eax,al
c001dae4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001dae8:	83 c4 2c             	add    esp,0x2c
c001daeb:	5b                   	pop    ebx
c001daec:	5e                   	pop    esi
c001daed:	5f                   	pop    edi
c001daee:	5d                   	pop    ebp
c001daef:	eb 85                	jmp    c001da76 <PCI::checkBus(unsigned char)>
c001daf1:	83 ec 0c             	sub    esp,0xc
c001daf4:	68 93 64 02 c0       	push   0xc0026493
c001daf9:	e8 6b bf fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dafe:	83 c4 10             	add    esp,0x10
c001db01:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001db08:	75 b0                	jne    c001daba <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001db0a:	e4 60                	in     al,0x60
c001db0c:	3c 5a                	cmp    al,0x5a
c001db0e:	74 04                	je     c001db14 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001db10:	3c 1c                	cmp    al,0x1c
c001db12:	75 f6                	jne    c001db0a <PCI::foundDevice(PCIDeviceInfo)+0x70>
c001db14:	e4 60                	in     al,0x60
c001db16:	3c 5a                	cmp    al,0x5a
c001db18:	74 fa                	je     c001db14 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001db1a:	3c 1c                	cmp    al,0x1c
c001db1c:	74 f6                	je     c001db14 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001db1e:	eb 9a                	jmp    c001daba <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001db20:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001db26:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001db2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001db2e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001db32:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001db36:	88 d0                	mov    al,dl
c001db38:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001db3d:	74 3b                	je     c001db7a <PCI::foundDevice(PCIDeviceInfo)+0xe0>
c001db3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001db43:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001db46:	85 d2                	test   edx,edx
c001db48:	74 24                	je     c001db6e <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001db4a:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001db50:	31 ef                	xor    edi,ebp
c001db52:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001db58:	75 14                	jne    c001db6e <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001db5a:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001db60:	75 0c                	jne    c001db6e <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001db62:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001db68:	0f 84 63 03 00 00    	je     c001ded1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001db6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001db72:	8b 12                	mov    edx,DWORD PTR [edx]
c001db74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001db78:	eb be                	jmp    c001db38 <PCI::foundDevice(PCIDeviceInfo)+0x9e>
c001db7a:	66 81 f9 01 06       	cmp    cx,0x601
c001db7f:	0f 85 81 01 00 00    	jne    c001dd06 <PCI::foundDevice(PCIDeviceInfo)+0x26c>
c001db85:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001db8c:	75 25                	jne    c001dbb3 <PCI::foundDevice(PCIDeviceInfo)+0x119>
c001db8e:	83 ec 0c             	sub    esp,0xc
c001db91:	68 64 01 00 00       	push   0x164
c001db96:	e8 74 be fe ff       	call   c0009a0f <malloc>
c001db9b:	89 04 24             	mov    DWORD PTR [esp],eax
c001db9e:	89 c5                	mov    ebp,eax
c001dba0:	e8 b7 12 00 00       	call   c001ee5c <SATABus::SATABus()>
c001dba5:	83 c4 10             	add    esp,0x10
c001dba8:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001dbaf:	74 4a                	je     c001dbfb <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001dbb1:	eb 2f                	jmp    c001dbe2 <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001dbb3:	83 ec 0c             	sub    esp,0xc
c001dbb6:	68 a3 64 02 c0       	push   0xc00264a3
c001dbbb:	e8 a9 be fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dbc0:	83 c4 10             	add    esp,0x10
c001dbc3:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001dbca:	75 c2                	jne    c001db8e <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001dbcc:	e4 60                	in     al,0x60
c001dbce:	3c 1c                	cmp    al,0x1c
c001dbd0:	74 04                	je     c001dbd6 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001dbd2:	3c 5a                	cmp    al,0x5a
c001dbd4:	75 f6                	jne    c001dbcc <PCI::foundDevice(PCIDeviceInfo)+0x132>
c001dbd6:	e4 60                	in     al,0x60
c001dbd8:	3c 5a                	cmp    al,0x5a
c001dbda:	74 fa                	je     c001dbd6 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001dbdc:	3c 1c                	cmp    al,0x1c
c001dbde:	74 f6                	je     c001dbd6 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001dbe0:	eb ac                	jmp    c001db8e <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001dbe2:	83 ec 0c             	sub    esp,0xc
c001dbe5:	68 a9 64 02 c0       	push   0xc00264a9
c001dbea:	e8 7a be fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dbef:	83 c4 10             	add    esp,0x10
c001dbf2:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001dbf9:	74 1b                	je     c001dc16 <PCI::foundDevice(PCIDeviceInfo)+0x17c>
c001dbfb:	50                   	push   eax
c001dbfc:	50                   	push   eax
c001dbfd:	55                   	push   ebp
c001dbfe:	53                   	push   ebx
c001dbff:	e8 82 05 ff ff       	call   c000e186 <Device::addChild(Device*)>
c001dc04:	83 c4 10             	add    esp,0x10
c001dc07:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001dc0e:	74 33                	je     c001dc43 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001dc10:	eb 18                	jmp    c001dc2a <PCI::foundDevice(PCIDeviceInfo)+0x190>
c001dc12:	3c 1c                	cmp    al,0x1c
c001dc14:	74 0c                	je     c001dc22 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001dc16:	e4 60                	in     al,0x60
c001dc18:	3c 5a                	cmp    al,0x5a
c001dc1a:	75 f6                	jne    c001dc12 <PCI::foundDevice(PCIDeviceInfo)+0x178>
c001dc1c:	eb 04                	jmp    c001dc22 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001dc1e:	3c 1c                	cmp    al,0x1c
c001dc20:	75 d9                	jne    c001dbfb <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001dc22:	e4 60                	in     al,0x60
c001dc24:	3c 5a                	cmp    al,0x5a
c001dc26:	74 fa                	je     c001dc22 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001dc28:	eb f4                	jmp    c001dc1e <PCI::foundDevice(PCIDeviceInfo)+0x184>
c001dc2a:	83 ec 0c             	sub    esp,0xc
c001dc2d:	68 b1 64 02 c0       	push   0xc00264b1
c001dc32:	e8 32 be fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dc37:	83 c4 10             	add    esp,0x10
c001dc3a:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001dc41:	74 29                	je     c001dc6c <PCI::foundDevice(PCIDeviceInfo)+0x1d2>
c001dc43:	83 ec 2c             	sub    esp,0x2c
c001dc46:	b9 09 00 00 00       	mov    ecx,0x9
c001dc4b:	8d 74 24 60          	lea    esi,[esp+0x60]
c001dc4f:	fc                   	cld    
c001dc50:	89 e7                	mov    edi,esp
c001dc52:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dc54:	55                   	push   ebp
c001dc55:	e8 3e 04 ff ff       	call   c000e098 <Device::preOpenPCI(PCIDeviceInfo)>
c001dc5a:	83 c4 30             	add    esp,0x30
c001dc5d:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001dc64:	74 33                	je     c001dc99 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001dc66:	eb 18                	jmp    c001dc80 <PCI::foundDevice(PCIDeviceInfo)+0x1e6>
c001dc68:	3c 1c                	cmp    al,0x1c
c001dc6a:	74 0c                	je     c001dc78 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001dc6c:	e4 60                	in     al,0x60
c001dc6e:	3c 5a                	cmp    al,0x5a
c001dc70:	75 f6                	jne    c001dc68 <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001dc72:	eb 04                	jmp    c001dc78 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001dc74:	3c 1c                	cmp    al,0x1c
c001dc76:	75 cb                	jne    c001dc43 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001dc78:	e4 60                	in     al,0x60
c001dc7a:	3c 5a                	cmp    al,0x5a
c001dc7c:	74 fa                	je     c001dc78 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001dc7e:	eb f4                	jmp    c001dc74 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001dc80:	83 ec 0c             	sub    esp,0xc
c001dc83:	68 b9 64 02 c0       	push   0xc00264b9
c001dc88:	e8 dc bd fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dc8d:	83 c4 10             	add    esp,0x10
c001dc90:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001dc97:	74 23                	je     c001dcbc <PCI::foundDevice(PCIDeviceInfo)+0x222>
c001dc99:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001dc9c:	6a 00                	push   0x0
c001dc9e:	6a 00                	push   0x0
c001dca0:	6a 00                	push   0x0
c001dca2:	55                   	push   ebp
c001dca3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dca6:	83 c4 10             	add    esp,0x10
c001dca9:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001dcb0:	0f 84 1b 02 00 00    	je     c001ded1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dcb6:	eb 18                	jmp    c001dcd0 <PCI::foundDevice(PCIDeviceInfo)+0x236>
c001dcb8:	3c 1c                	cmp    al,0x1c
c001dcba:	74 0c                	je     c001dcc8 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001dcbc:	e4 60                	in     al,0x60
c001dcbe:	3c 5a                	cmp    al,0x5a
c001dcc0:	75 f6                	jne    c001dcb8 <PCI::foundDevice(PCIDeviceInfo)+0x21e>
c001dcc2:	eb 04                	jmp    c001dcc8 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001dcc4:	3c 1c                	cmp    al,0x1c
c001dcc6:	75 d1                	jne    c001dc99 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001dcc8:	e4 60                	in     al,0x60
c001dcca:	3c 5a                	cmp    al,0x5a
c001dccc:	74 fa                	je     c001dcc8 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001dcce:	eb f4                	jmp    c001dcc4 <PCI::foundDevice(PCIDeviceInfo)+0x22a>
c001dcd0:	83 ec 0c             	sub    esp,0xc
c001dcd3:	68 c1 64 02 c0       	push   0xc00264c1
c001dcd8:	e8 8c bd fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dcdd:	83 c4 10             	add    esp,0x10
c001dce0:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001dce7:	0f 85 e4 01 00 00    	jne    c001ded1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dced:	e4 60                	in     al,0x60
c001dcef:	3c 5a                	cmp    al,0x5a
c001dcf1:	74 04                	je     c001dcf7 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001dcf3:	3c 1c                	cmp    al,0x1c
c001dcf5:	75 f6                	jne    c001dced <PCI::foundDevice(PCIDeviceInfo)+0x253>
c001dcf7:	e4 60                	in     al,0x60
c001dcf9:	3c 5a                	cmp    al,0x5a
c001dcfb:	74 fa                	je     c001dcf7 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001dcfd:	3c 1c                	cmp    al,0x1c
c001dcff:	74 f6                	je     c001dcf7 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001dd01:	e9 cb 01 00 00       	jmp    c001ded1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dd06:	66 81 f9 01 01       	cmp    cx,0x101
c001dd0b:	0f 85 7a 01 00 00    	jne    c001de8b <PCI::foundDevice(PCIDeviceInfo)+0x3f1>
c001dd11:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001dd18:	75 25                	jne    c001dd3f <PCI::foundDevice(PCIDeviceInfo)+0x2a5>
c001dd1a:	83 ec 0c             	sub    esp,0xc
c001dd1d:	68 70 02 00 00       	push   0x270
c001dd22:	e8 e8 bc fe ff       	call   c0009a0f <malloc>
c001dd27:	89 04 24             	mov    DWORD PTR [esp],eax
c001dd2a:	89 c5                	mov    ebp,eax
c001dd2c:	e8 df 05 00 00       	call   c001e310 <IDE::IDE()>
c001dd31:	83 c4 10             	add    esp,0x10
c001dd34:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001dd3b:	74 4a                	je     c001dd87 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001dd3d:	eb 2f                	jmp    c001dd6e <PCI::foundDevice(PCIDeviceInfo)+0x2d4>
c001dd3f:	83 ec 0c             	sub    esp,0xc
c001dd42:	68 c9 64 02 c0       	push   0xc00264c9
c001dd47:	e8 1d bd fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dd4c:	83 c4 10             	add    esp,0x10
c001dd4f:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001dd56:	75 c2                	jne    c001dd1a <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001dd58:	e4 60                	in     al,0x60
c001dd5a:	3c 5a                	cmp    al,0x5a
c001dd5c:	74 04                	je     c001dd62 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001dd5e:	3c 1c                	cmp    al,0x1c
c001dd60:	75 f6                	jne    c001dd58 <PCI::foundDevice(PCIDeviceInfo)+0x2be>
c001dd62:	e4 60                	in     al,0x60
c001dd64:	3c 5a                	cmp    al,0x5a
c001dd66:	74 fa                	je     c001dd62 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001dd68:	3c 1c                	cmp    al,0x1c
c001dd6a:	74 f6                	je     c001dd62 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001dd6c:	eb ac                	jmp    c001dd1a <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001dd6e:	83 ec 0c             	sub    esp,0xc
c001dd71:	68 d0 64 02 c0       	push   0xc00264d0
c001dd76:	e8 ee bc fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dd7b:	83 c4 10             	add    esp,0x10
c001dd7e:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001dd85:	74 1b                	je     c001dda2 <PCI::foundDevice(PCIDeviceInfo)+0x308>
c001dd87:	57                   	push   edi
c001dd88:	57                   	push   edi
c001dd89:	55                   	push   ebp
c001dd8a:	53                   	push   ebx
c001dd8b:	e8 f6 03 ff ff       	call   c000e186 <Device::addChild(Device*)>
c001dd90:	83 c4 10             	add    esp,0x10
c001dd93:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001dd9a:	74 33                	je     c001ddcf <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001dd9c:	eb 18                	jmp    c001ddb6 <PCI::foundDevice(PCIDeviceInfo)+0x31c>
c001dd9e:	3c 1c                	cmp    al,0x1c
c001dda0:	74 0c                	je     c001ddae <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001dda2:	e4 60                	in     al,0x60
c001dda4:	3c 5a                	cmp    al,0x5a
c001dda6:	75 f6                	jne    c001dd9e <PCI::foundDevice(PCIDeviceInfo)+0x304>
c001dda8:	eb 04                	jmp    c001ddae <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001ddaa:	3c 1c                	cmp    al,0x1c
c001ddac:	75 d9                	jne    c001dd87 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001ddae:	e4 60                	in     al,0x60
c001ddb0:	3c 5a                	cmp    al,0x5a
c001ddb2:	74 fa                	je     c001ddae <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001ddb4:	eb f4                	jmp    c001ddaa <PCI::foundDevice(PCIDeviceInfo)+0x310>
c001ddb6:	83 ec 0c             	sub    esp,0xc
c001ddb9:	68 d7 64 02 c0       	push   0xc00264d7
c001ddbe:	e8 a6 bc fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001ddc3:	83 c4 10             	add    esp,0x10
c001ddc6:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001ddcd:	74 29                	je     c001ddf8 <PCI::foundDevice(PCIDeviceInfo)+0x35e>
c001ddcf:	83 ec 2c             	sub    esp,0x2c
c001ddd2:	b9 09 00 00 00       	mov    ecx,0x9
c001ddd7:	8d 74 24 60          	lea    esi,[esp+0x60]
c001dddb:	fc                   	cld    
c001dddc:	89 e7                	mov    edi,esp
c001ddde:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dde0:	55                   	push   ebp
c001dde1:	e8 b2 02 ff ff       	call   c000e098 <Device::preOpenPCI(PCIDeviceInfo)>
c001dde6:	83 c4 30             	add    esp,0x30
c001dde9:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001ddf0:	74 33                	je     c001de25 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001ddf2:	eb 18                	jmp    c001de0c <PCI::foundDevice(PCIDeviceInfo)+0x372>
c001ddf4:	3c 1c                	cmp    al,0x1c
c001ddf6:	74 0c                	je     c001de04 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001ddf8:	e4 60                	in     al,0x60
c001ddfa:	3c 5a                	cmp    al,0x5a
c001ddfc:	75 f6                	jne    c001ddf4 <PCI::foundDevice(PCIDeviceInfo)+0x35a>
c001ddfe:	eb 04                	jmp    c001de04 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001de00:	3c 1c                	cmp    al,0x1c
c001de02:	75 cb                	jne    c001ddcf <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001de04:	e4 60                	in     al,0x60
c001de06:	3c 5a                	cmp    al,0x5a
c001de08:	74 fa                	je     c001de04 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001de0a:	eb f4                	jmp    c001de00 <PCI::foundDevice(PCIDeviceInfo)+0x366>
c001de0c:	83 ec 0c             	sub    esp,0xc
c001de0f:	68 de 64 02 c0       	push   0xc00264de
c001de14:	e8 50 bc fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001de19:	83 c4 10             	add    esp,0x10
c001de1c:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001de23:	74 23                	je     c001de48 <PCI::foundDevice(PCIDeviceInfo)+0x3ae>
c001de25:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001de28:	6a 00                	push   0x0
c001de2a:	6a 00                	push   0x0
c001de2c:	6a 00                	push   0x0
c001de2e:	55                   	push   ebp
c001de2f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001de32:	83 c4 10             	add    esp,0x10
c001de35:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001de3c:	0f 84 8f 00 00 00    	je     c001ded1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001de42:	eb 18                	jmp    c001de5c <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001de44:	3c 1c                	cmp    al,0x1c
c001de46:	74 0c                	je     c001de54 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001de48:	e4 60                	in     al,0x60
c001de4a:	3c 5a                	cmp    al,0x5a
c001de4c:	75 f6                	jne    c001de44 <PCI::foundDevice(PCIDeviceInfo)+0x3aa>
c001de4e:	eb 04                	jmp    c001de54 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001de50:	3c 1c                	cmp    al,0x1c
c001de52:	75 d1                	jne    c001de25 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001de54:	e4 60                	in     al,0x60
c001de56:	3c 5a                	cmp    al,0x5a
c001de58:	74 fa                	je     c001de54 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001de5a:	eb f4                	jmp    c001de50 <PCI::foundDevice(PCIDeviceInfo)+0x3b6>
c001de5c:	83 ec 0c             	sub    esp,0xc
c001de5f:	68 e5 64 02 c0       	push   0xc00264e5
c001de64:	e8 00 bc fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001de69:	83 c4 10             	add    esp,0x10
c001de6c:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001de73:	75 5c                	jne    c001ded1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001de75:	e4 60                	in     al,0x60
c001de77:	3c 5a                	cmp    al,0x5a
c001de79:	74 04                	je     c001de7f <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001de7b:	3c 1c                	cmp    al,0x1c
c001de7d:	75 f6                	jne    c001de75 <PCI::foundDevice(PCIDeviceInfo)+0x3db>
c001de7f:	e4 60                	in     al,0x60
c001de81:	3c 5a                	cmp    al,0x5a
c001de83:	74 fa                	je     c001de7f <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001de85:	3c 1c                	cmp    al,0x1c
c001de87:	74 f6                	je     c001de7f <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001de89:	eb 46                	jmp    c001ded1 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001de8b:	83 ec 0c             	sub    esp,0xc
c001de8e:	68 58 01 00 00       	push   0x158
c001de93:	e8 77 bb fe ff       	call   c0009a0f <malloc>
c001de98:	89 c5                	mov    ebp,eax
c001de9a:	58                   	pop    eax
c001de9b:	5a                   	pop    edx
c001de9c:	68 ec 64 02 c0       	push   0xc00264ec
c001dea1:	55                   	push   ebp
c001dea2:	e8 e9 05 ff ff       	call   c000e490 <DriverlessDevice::DriverlessDevice(char const*)>
c001dea7:	59                   	pop    ecx
c001dea8:	5e                   	pop    esi
c001dea9:	55                   	push   ebp
c001deaa:	53                   	push   ebx
c001deab:	e8 d6 02 ff ff       	call   c000e186 <Device::addChild(Device*)>
c001deb0:	83 c4 10             	add    esp,0x10
c001deb3:	b9 09 00 00 00       	mov    ecx,0x9
c001deb8:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001debc:	fc                   	cld    
c001debd:	89 fe                	mov    esi,edi
c001debf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dec1:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001dec5:	83 c4 1c             	add    esp,0x1c
c001dec8:	5b                   	pop    ebx
c001dec9:	5e                   	pop    esi
c001deca:	5f                   	pop    edi
c001decb:	5d                   	pop    ebp
c001decc:	e9 c7 01 ff ff       	jmp    c000e098 <Device::preOpenPCI(PCIDeviceInfo)>
c001ded1:	83 c4 1c             	add    esp,0x1c
c001ded4:	5b                   	pop    ebx
c001ded5:	5e                   	pop    esi
c001ded6:	5f                   	pop    edi
c001ded7:	5d                   	pop    ebp
c001ded8:	c3                   	ret    
c001ded9:	90                   	nop

c001deda <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001deda:	55                   	push   ebp
c001dedb:	57                   	push   edi
c001dedc:	56                   	push   esi
c001dedd:	53                   	push   ebx
c001dede:	81 ec b4 00 00 00    	sub    esp,0xb4
c001dee4:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
c001deeb:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c001def2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001def6:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c001defd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001df01:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
c001df08:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001df0c:	68 06 65 02 c0       	push   0xc0026506
c001df11:	8d 5c 24 48          	lea    ebx,[esp+0x48]
c001df15:	53                   	push   ebx
c001df16:	e8 25 28 fe ff       	call   c0000740 <strcpy>
c001df1b:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001df20:	b2 64                	mov    dl,0x64
c001df22:	89 c8                	mov    eax,ecx
c001df24:	f6 f2                	div    dl
c001df26:	b2 0a                	mov    dl,0xa
c001df28:	83 c0 30             	add    eax,0x30
c001df2b:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001df2f:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001df33:	83 c4 10             	add    esp,0x10
c001df36:	89 c8                	mov    eax,ecx
c001df38:	f6 f2                	div    dl
c001df3a:	89 c1                	mov    ecx,eax
c001df3c:	0f b6 c0             	movzx  eax,al
c001df3f:	88 e9                	mov    cl,ch
c001df41:	f6 f2                	div    dl
c001df43:	88 e0                	mov    al,ah
c001df45:	83 c0 30             	add    eax,0x30
c001df48:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001df4c:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001df50:	8d 41 30             	lea    eax,[ecx+0x30]
c001df53:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001df57:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c001df5b:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001df60:	f6 f2                	div    dl
c001df62:	89 c1                	mov    ecx,eax
c001df64:	0f b6 c0             	movzx  eax,al
c001df67:	88 e9                	mov    cl,ch
c001df69:	f6 f2                	div    dl
c001df6b:	88 e0                	mov    al,ah
c001df6d:	83 c0 30             	add    eax,0x30
c001df70:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c001df74:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001df78:	8d 41 30             	lea    eax,[ecx+0x30]
c001df7b:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001df7f:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001df83:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001df88:	f6 f2                	div    dl
c001df8a:	89 c1                	mov    ecx,eax
c001df8c:	0f b6 c0             	movzx  eax,al
c001df8f:	88 e9                	mov    cl,ch
c001df91:	f6 f2                	div    dl
c001df93:	88 e0                	mov    al,ah
c001df95:	83 c0 30             	add    eax,0x30
c001df98:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001df9f:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001dfa3:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001dfa7:	8d 41 30             	lea    eax,[ecx+0x30]
c001dfaa:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001dfae:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001dfb2:	74 29                	je     c001dfdd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001dfb4:	83 ec 0c             	sub    esp,0xc
c001dfb7:	53                   	push   ebx
c001dfb8:	e8 ac ba fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dfbd:	83 c4 10             	add    esp,0x10
c001dfc0:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001dfc7:	75 14                	jne    c001dfdd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001dfc9:	e4 60                	in     al,0x60
c001dfcb:	3c 1c                	cmp    al,0x1c
c001dfcd:	74 04                	je     c001dfd3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001dfcf:	3c 5a                	cmp    al,0x5a
c001dfd1:	75 f6                	jne    c001dfc9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xef>
c001dfd3:	e4 60                	in     al,0x60
c001dfd5:	3c 5a                	cmp    al,0x5a
c001dfd7:	74 fa                	je     c001dfd3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001dfd9:	3c 1c                	cmp    al,0x1c
c001dfdb:	74 f6                	je     c001dfd3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001dfdd:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001dfe2:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001dfe7:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001dfec:	83 ec 0c             	sub    esp,0xc
c001dfef:	6a 0c                	push   0xc
c001dff1:	56                   	push   esi
c001dff2:	53                   	push   ebx
c001dff3:	57                   	push   edi
c001dff4:	55                   	push   ebp
c001dff5:	e8 68 f3 ff ff       	call   c001d362 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dffa:	83 c4 20             	add    esp,0x20
c001dffd:	56                   	push   esi
c001dffe:	53                   	push   ebx
c001dfff:	57                   	push   edi
c001e000:	55                   	push   ebp
c001e001:	e8 50 f4 ff ff       	call   c001d456 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e006:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001e00b:	56                   	push   esi
c001e00c:	53                   	push   ebx
c001e00d:	57                   	push   edi
c001e00e:	55                   	push   ebp
c001e00f:	e8 d8 f4 ff ff       	call   c001d4ec <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e014:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001e018:	83 c4 14             	add    esp,0x14
c001e01b:	6a 3c                	push   0x3c
c001e01d:	56                   	push   esi
c001e01e:	53                   	push   ebx
c001e01f:	57                   	push   edi
c001e020:	55                   	push   ebp
c001e021:	e8 3c f3 ff ff       	call   c001d362 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e026:	0f b6 c4             	movzx  eax,ah
c001e029:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e02d:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001e031:	88 84 24 bd 00 00 00 	mov    BYTE PTR [esp+0xbd],al
c001e038:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c001e03d:	83 c4 20             	add    esp,0x20
c001e040:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e046:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001e04d:	0f 84 38 01 00 00    	je     c001e18b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e053:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e05b:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c001e060:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e064:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e06a:	39 88 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],ecx
c001e070:	0f 8e 15 01 00 00    	jle    c001e18b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e076:	50                   	push   eax
c001e077:	50                   	push   eax
c001e078:	68 21 65 02 c0       	push   0xc0026521
c001e07d:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e081:	50                   	push   eax
c001e082:	e8 b9 26 fe ff       	call   c0000740 <strcpy>
c001e087:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001e08b:	b9 0a 00 00 00       	mov    ecx,0xa
c001e090:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e094:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e098:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001e09c:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001e0a0:	88 44 24 6e          	mov    BYTE PTR [esp+0x6e],al
c001e0a4:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c001e0a8:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001e0ac:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001e0b0:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001e0b4:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e0b8:	88 44 24 73          	mov    BYTE PTR [esp+0x73],al
c001e0bc:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001e0c0:	88 44 24 74          	mov    BYTE PTR [esp+0x74],al
c001e0c4:	83 c4 10             	add    esp,0x10
c001e0c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e0cb:	99                   	cdq    
c001e0cc:	f7 f9                	idiv   ecx
c001e0ce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e0d2:	99                   	cdq    
c001e0d3:	f7 f9                	idiv   ecx
c001e0d5:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001e0d9:	83 c2 30             	add    edx,0x30
c001e0dc:	83 c0 30             	add    eax,0x30
c001e0df:	88 54 24 66          	mov    BYTE PTR [esp+0x66],dl
c001e0e3:	88 44 24 67          	mov    BYTE PTR [esp+0x67],al
c001e0e7:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001e0ee:	74 2d                	je     c001e11d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e0f0:	83 ec 0c             	sub    esp,0xc
c001e0f3:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e0f7:	50                   	push   eax
c001e0f8:	e8 6c b9 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001e0fd:	83 c4 10             	add    esp,0x10
c001e100:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001e107:	75 14                	jne    c001e11d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e109:	e4 60                	in     al,0x60
c001e10b:	3c 5a                	cmp    al,0x5a
c001e10d:	74 04                	je     c001e113 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e10f:	3c 1c                	cmp    al,0x1c
c001e111:	75 f6                	jne    c001e109 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x22f>
c001e113:	e4 60                	in     al,0x60
c001e115:	3c 5a                	cmp    al,0x5a
c001e117:	74 fa                	je     c001e113 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e119:	3c 1c                	cmp    al,0x1c
c001e11b:	74 f6                	je     c001e113 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e11d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e121:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c001e126:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e12c:	8d 04 d0             	lea    eax,[eax+edx*8]
c001e12f:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001e136:	39 d3                	cmp    ebx,edx
c001e138:	75 48                	jne    c001e182 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e13a:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001e141:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001e145:	75 3b                	jne    c001e182 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e147:	83 ec 0c             	sub    esp,0xc
c001e14a:	68 50 65 02 c0       	push   0xc0026550
c001e14f:	e8 ab eb fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001e154:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e158:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c001e15d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e163:	0f b6 84 d0 5f 01 00 00 	movzx  eax,BYTE PTR [eax+edx*8+0x15f]
c001e16b:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001e16f:	50                   	push   eax
c001e170:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e174:	53                   	push   ebx
c001e175:	68 75 65 02 c0       	push   0xc0026575
c001e17a:	e8 80 eb fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001e17f:	83 c4 20             	add    esp,0x20
c001e182:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001e186:	e9 d0 fe ff ff       	jmp    c001e05b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x181>
c001e18b:	31 d2                	xor    edx,edx
c001e18d:	83 ec 0c             	sub    esp,0xc
c001e190:	56                   	push   esi
c001e191:	53                   	push   ebx
c001e192:	57                   	push   edi
c001e193:	52                   	push   edx
c001e194:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e198:	55                   	push   ebp
c001e199:	e8 9a f3 ff ff       	call   c001d538 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e19e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e1a2:	89 84 94 a4 00 00 00 	mov    DWORD PTR [esp+edx*4+0xa4],eax
c001e1a9:	42                   	inc    edx
c001e1aa:	83 c4 20             	add    esp,0x20
c001e1ad:	83 fa 06             	cmp    edx,0x6
c001e1b0:	75 db                	jne    c001e18d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b3>
c001e1b2:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001e1b7:	83 ec 0c             	sub    esp,0xc
c001e1ba:	86 e0                	xchg   al,ah
c001e1bc:	66 89 84 24 88 00 00 00 	mov    WORD PTR [esp+0x88],ax
c001e1c4:	6a 02                	push   0x2
c001e1c6:	56                   	push   esi
c001e1c7:	53                   	push   ebx
c001e1c8:	57                   	push   edi
c001e1c9:	55                   	push   ebp
c001e1ca:	e8 93 f1 ff ff       	call   c001d362 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e1cf:	66 89 84 24 be 00 00 00 	mov    WORD PTR [esp+0xbe],ax
c001e1d7:	83 c4 20             	add    esp,0x20
c001e1da:	56                   	push   esi
c001e1db:	53                   	push   ebx
c001e1dc:	57                   	push   edi
c001e1dd:	55                   	push   ebp
c001e1de:	e8 bd f2 ff ff       	call   c001d4a0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e1e3:	88 84 24 93 00 00 00 	mov    BYTE PTR [esp+0x93],al
c001e1ea:	56                   	push   esi
c001e1eb:	53                   	push   ebx
c001e1ec:	57                   	push   edi
c001e1ed:	55                   	push   ebp
c001e1ee:	e8 17 f2 ff ff       	call   c001d40a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e1f3:	b9 09 00 00 00       	mov    ecx,0x9
c001e1f8:	66 89 84 24 9e 00 00 00 	mov    WORD PTR [esp+0x9e],ax
c001e200:	8a 44 24 42          	mov    al,BYTE PTR [esp+0x42]
c001e204:	88 84 24 bc 00 00 00 	mov    BYTE PTR [esp+0xbc],al
c001e20b:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e20f:	88 84 24 a0 00 00 00 	mov    BYTE PTR [esp+0xa0],al
c001e216:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e21a:	88 84 24 a1 00 00 00 	mov    BYTE PTR [esp+0xa1],al
c001e221:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001e225:	88 84 24 a2 00 00 00 	mov    BYTE PTR [esp+0xa2],al
c001e22c:	83 ec 0c             	sub    esp,0xc
c001e22f:	fc                   	cld    
c001e230:	89 e7                	mov    edi,esp
c001e232:	8d b4 24 a8 00 00 00 	lea    esi,[esp+0xa8]
c001e239:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e23b:	55                   	push   ebp
c001e23c:	e8 59 f8 ff ff       	call   c001da9a <PCI::foundDevice(PCIDeviceInfo)>
c001e241:	81 c4 dc 00 00 00    	add    esp,0xdc
c001e247:	5b                   	pop    ebx
c001e248:	5e                   	pop    esi
c001e249:	5f                   	pop    edi
c001e24a:	5d                   	pop    ebp
c001e24b:	c3                   	ret    

c001e24c <PCI::checkDevice(unsigned char, unsigned char)>:
c001e24c:	55                   	push   ebp
c001e24d:	57                   	push   edi
c001e24e:	56                   	push   esi
c001e24f:	53                   	push   ebx
c001e250:	83 ec 0c             	sub    esp,0xc
c001e253:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e257:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001e25c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001e261:	6a 00                	push   0x0
c001e263:	56                   	push   esi
c001e264:	57                   	push   edi
c001e265:	55                   	push   ebp
c001e266:	e8 9f f1 ff ff       	call   c001d40a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e26b:	6a 00                	push   0x0
c001e26d:	56                   	push   esi
c001e26e:	57                   	push   edi
c001e26f:	55                   	push   ebp
c001e270:	e8 65 fc ff ff       	call   c001deda <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e275:	83 c4 20             	add    esp,0x20
c001e278:	6a 00                	push   0x0
c001e27a:	56                   	push   esi
c001e27b:	57                   	push   edi
c001e27c:	55                   	push   ebp
c001e27d:	e8 ac f1 ff ff       	call   c001d42e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e282:	83 c4 10             	add    esp,0x10
c001e285:	84 c0                	test   al,al
c001e287:	79 27                	jns    c001e2b0 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001e289:	bb 01 00 00 00       	mov    ebx,0x1
c001e28e:	53                   	push   ebx
c001e28f:	56                   	push   esi
c001e290:	57                   	push   edi
c001e291:	55                   	push   ebp
c001e292:	e8 73 f1 ff ff       	call   c001d40a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e297:	83 c4 10             	add    esp,0x10
c001e29a:	66 40                	inc    ax
c001e29c:	74 0c                	je     c001e2aa <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001e29e:	53                   	push   ebx
c001e29f:	56                   	push   esi
c001e2a0:	57                   	push   edi
c001e2a1:	55                   	push   ebp
c001e2a2:	e8 33 fc ff ff       	call   c001deda <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e2a7:	83 c4 10             	add    esp,0x10
c001e2aa:	43                   	inc    ebx
c001e2ab:	83 fb 08             	cmp    ebx,0x8
c001e2ae:	75 de                	jne    c001e28e <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001e2b0:	83 c4 0c             	add    esp,0xc
c001e2b3:	5b                   	pop    ebx
c001e2b4:	5e                   	pop    esi
c001e2b5:	5f                   	pop    edi
c001e2b6:	5d                   	pop    ebp
c001e2b7:	c3                   	ret    

c001e2b8 <PCI::detect()>:
c001e2b8:	56                   	push   esi
c001e2b9:	53                   	push   ebx
c001e2ba:	53                   	push   ebx
c001e2bb:	31 db                	xor    ebx,ebx
c001e2bd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e2c1:	6a 00                	push   0x0
c001e2c3:	6a 00                	push   0x0
c001e2c5:	6a 00                	push   0x0
c001e2c7:	56                   	push   esi
c001e2c8:	e8 61 f1 ff ff       	call   c001d42e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e2cd:	83 c4 10             	add    esp,0x10
c001e2d0:	a8 80                	test   al,0x80
c001e2d2:	75 21                	jne    c001e2f5 <PCI::detect()+0x3d>
c001e2d4:	51                   	push   ecx
c001e2d5:	51                   	push   ecx
c001e2d6:	6a 00                	push   0x0
c001e2d8:	56                   	push   esi
c001e2d9:	e8 98 f7 ff ff       	call   c001da76 <PCI::checkBus(unsigned char)>
c001e2de:	83 c4 10             	add    esp,0x10
c001e2e1:	eb 24                	jmp    c001e307 <PCI::detect()+0x4f>
c001e2e3:	52                   	push   edx
c001e2e4:	52                   	push   edx
c001e2e5:	53                   	push   ebx
c001e2e6:	43                   	inc    ebx
c001e2e7:	56                   	push   esi
c001e2e8:	e8 89 f7 ff ff       	call   c001da76 <PCI::checkBus(unsigned char)>
c001e2ed:	83 c4 10             	add    esp,0x10
c001e2f0:	83 fb 08             	cmp    ebx,0x8
c001e2f3:	74 12                	je     c001e307 <PCI::detect()+0x4f>
c001e2f5:	53                   	push   ebx
c001e2f6:	6a 00                	push   0x0
c001e2f8:	6a 00                	push   0x0
c001e2fa:	56                   	push   esi
c001e2fb:	e8 0a f1 ff ff       	call   c001d40a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e300:	83 c4 10             	add    esp,0x10
c001e303:	66 40                	inc    ax
c001e305:	74 dc                	je     c001e2e3 <PCI::detect()+0x2b>
c001e307:	58                   	pop    eax
c001e308:	5b                   	pop    ebx
c001e309:	5e                   	pop    esi
c001e30a:	c3                   	ret    
c001e30b:	90                   	nop

c001e30c <IDE::close(int, int, void*)>:
c001e30c:	83 c8 ff             	or     eax,0xffffffff
c001e30f:	c3                   	ret    

c001e310 <IDE::IDE()>:
c001e310:	83 ec 0c             	sub    esp,0xc
c001e313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e317:	83 ec 08             	sub    esp,0x8
c001e31a:	68 bc 65 02 c0       	push   0xc00265bc
c001e31f:	50                   	push   eax
c001e320:	e8 0f 02 ff ff       	call   c000e534 <HardDiskController::HardDiskController(char const*)>
c001e325:	83 c4 10             	add    esp,0x10
c001e328:	ba 4c 66 02 c0       	mov    edx,0xc002664c
c001e32d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e331:	89 10                	mov    DWORD PTR [eax],edx
c001e333:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e337:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e33e:	90                   	nop
c001e33f:	83 c4 0c             	add    esp,0xc
c001e342:	c3                   	ret    
c001e343:	90                   	nop

c001e344 <IDE::prepareInterrupt(unsigned char)>:
c001e344:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e349:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e34d:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001e355:	c3                   	ret    

c001e356 <selectDrive(unsigned char, unsigned char)>:
c001e356:	c3                   	ret    
c001e357:	90                   	nop

c001e358 <IDE::getBase(unsigned char)>:
c001e358:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e35d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e361:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001e369:	c3                   	ret    

c001e36a <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001e36a:	55                   	push   ebp
c001e36b:	57                   	push   edi
c001e36c:	56                   	push   esi
c001e36d:	53                   	push   ebx
c001e36e:	83 ec 1c             	sub    esp,0x1c
c001e371:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e375:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e379:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001e37c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e380:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e384:	80 f9 03             	cmp    cl,0x3
c001e387:	77 51                	ja     c001e3da <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001e389:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e38d:	0f b6 f2             	movzx  esi,dl
c001e390:	0f b6 db             	movzx  ebx,bl
c001e393:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e396:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001e39a:	83 ca 80             	or     edx,0xffffff80
c001e39d:	0f b6 d2             	movzx  edx,dl
c001e3a0:	52                   	push   edx
c001e3a1:	6a 0c                	push   0xc
c001e3a3:	56                   	push   esi
c001e3a4:	57                   	push   edi
c001e3a5:	e8 c0 ff ff ff       	call   c001e36a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e3aa:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001e3af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e3b3:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001e3b7:	ee                   	out    dx,al
c001e3b8:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001e3bd:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001e3c1:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001e3c5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e3c9:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e3d1:	83 c4 2c             	add    esp,0x2c
c001e3d4:	5b                   	pop    ebx
c001e3d5:	5e                   	pop    esi
c001e3d6:	5f                   	pop    edi
c001e3d7:	5d                   	pop    ebp
c001e3d8:	eb 90                	jmp    c001e36a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e3da:	80 fb 07             	cmp    bl,0x7
c001e3dd:	77 12                	ja     c001e3f1 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001e3df:	0f b6 d2             	movzx  edx,dl
c001e3e2:	0f b6 db             	movzx  ebx,bl
c001e3e5:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001e3ed:	89 da                	mov    edx,ebx
c001e3ef:	eb 2f                	jmp    c001e420 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e3f1:	80 fb 0d             	cmp    bl,0xd
c001e3f4:	77 13                	ja     c001e409 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001e3f6:	0f b6 d2             	movzx  edx,dl
c001e3f9:	0f b6 db             	movzx  ebx,bl
c001e3fc:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001e403:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001e407:	eb 17                	jmp    c001e420 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e409:	80 fb 15             	cmp    bl,0x15
c001e40c:	77 13                	ja     c001e421 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e40e:	0f b6 d2             	movzx  edx,dl
c001e411:	0f b6 db             	movzx  ebx,bl
c001e414:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001e41c:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001e420:	ee                   	out    dx,al
c001e421:	83 c4 1c             	add    esp,0x1c
c001e424:	5b                   	pop    ebx
c001e425:	5e                   	pop    esi
c001e426:	5f                   	pop    edi
c001e427:	5d                   	pop    ebp
c001e428:	c3                   	ret    
c001e429:	90                   	nop

c001e42a <IDE::read(unsigned char, unsigned char)>:
c001e42a:	55                   	push   ebp
c001e42b:	57                   	push   edi
c001e42c:	56                   	push   esi
c001e42d:	53                   	push   ebx
c001e42e:	83 ec 1c             	sub    esp,0x1c
c001e431:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e435:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e439:	8d 43 f8             	lea    eax,[ebx-0x8]
c001e43c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e440:	3c 03                	cmp    al,0x3
c001e442:	77 43                	ja     c001e487 <IDE::read(unsigned char, unsigned char)+0x5d>
c001e444:	0f b6 f2             	movzx  esi,dl
c001e447:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e44a:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001e44e:	83 c8 80             	or     eax,0xffffff80
c001e451:	0f b6 c0             	movzx  eax,al
c001e454:	50                   	push   eax
c001e455:	6a 0c                	push   0xc
c001e457:	56                   	push   esi
c001e458:	57                   	push   edi
c001e459:	e8 0c ff ff ff       	call   c001e36a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e45e:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001e463:	0f b6 c3             	movzx  eax,bl
c001e466:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001e46a:	ec                   	in     al,dx
c001e46b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e46f:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001e474:	52                   	push   edx
c001e475:	6a 0c                	push   0xc
c001e477:	56                   	push   esi
c001e478:	57                   	push   edi
c001e479:	e8 ec fe ff ff       	call   c001e36a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e47e:	83 c4 20             	add    esp,0x20
c001e481:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e485:	eb 49                	jmp    c001e4d0 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e487:	80 fb 07             	cmp    bl,0x7
c001e48a:	77 12                	ja     c001e49e <IDE::read(unsigned char, unsigned char)+0x74>
c001e48c:	0f b6 d2             	movzx  edx,dl
c001e48f:	0f b6 c3             	movzx  eax,bl
c001e492:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001e49a:	89 c2                	mov    edx,eax
c001e49c:	eb 31                	jmp    c001e4cf <IDE::read(unsigned char, unsigned char)+0xa5>
c001e49e:	80 fb 0d             	cmp    bl,0xd
c001e4a1:	77 13                	ja     c001e4b6 <IDE::read(unsigned char, unsigned char)+0x8c>
c001e4a3:	0f b6 d2             	movzx  edx,dl
c001e4a6:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001e4ad:	0f b6 d3             	movzx  edx,bl
c001e4b0:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e4b4:	eb 19                	jmp    c001e4cf <IDE::read(unsigned char, unsigned char)+0xa5>
c001e4b6:	31 c0                	xor    eax,eax
c001e4b8:	80 fb 15             	cmp    bl,0x15
c001e4bb:	77 13                	ja     c001e4d0 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e4bd:	0f b6 d2             	movzx  edx,dl
c001e4c0:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001e4c8:	0f b6 d3             	movzx  edx,bl
c001e4cb:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e4cf:	ec                   	in     al,dx
c001e4d0:	83 c4 1c             	add    esp,0x1c
c001e4d3:	5b                   	pop    ebx
c001e4d4:	5e                   	pop    esi
c001e4d5:	5f                   	pop    edi
c001e4d6:	5d                   	pop    ebp
c001e4d7:	c3                   	ret    

c001e4d8 <IDE::waitInterrupt(unsigned char)>:
c001e4d8:	55                   	push   ebp
c001e4d9:	57                   	push   edi
c001e4da:	56                   	push   esi
c001e4db:	53                   	push   ebx
c001e4dc:	31 db                	xor    ebx,ebx
c001e4de:	83 ec 0c             	sub    esp,0xc
c001e4e1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e4e5:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001e4ea:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001e4f2:	89 e8                	mov    eax,ebp
c001e4f4:	84 c0                	test   al,al
c001e4f6:	75 30                	jne    c001e528 <IDE::waitInterrupt(unsigned char)+0x50>
c001e4f8:	50                   	push   eax
c001e4f9:	6a 0c                	push   0xc
c001e4fb:	56                   	push   esi
c001e4fc:	57                   	push   edi
c001e4fd:	e8 28 ff ff ff       	call   c001e42a <IDE::read(unsigned char, unsigned char)>
c001e502:	83 c4 10             	add    esp,0x10
c001e505:	a8 01                	test   al,0x1
c001e507:	75 27                	jne    c001e530 <IDE::waitInterrupt(unsigned char)+0x58>
c001e509:	f6 c3 04             	test   bl,0x4
c001e50c:	75 12                	jne    c001e520 <IDE::waitInterrupt(unsigned char)+0x48>
c001e50e:	83 fb 32             	cmp    ebx,0x32
c001e511:	7e 0d                	jle    c001e520 <IDE::waitInterrupt(unsigned char)+0x48>
c001e513:	83 ec 0c             	sub    esp,0xc
c001e516:	6a 64                	push   0x64
c001e518:	e8 c3 a3 ff ff       	call   c00188e0 <milliTenthSleep(unsigned int)>
c001e51d:	83 c4 10             	add    esp,0x10
c001e520:	83 fb 3c             	cmp    ebx,0x3c
c001e523:	74 0b                	je     c001e530 <IDE::waitInterrupt(unsigned char)+0x58>
c001e525:	43                   	inc    ebx
c001e526:	eb c2                	jmp    c001e4ea <IDE::waitInterrupt(unsigned char)+0x12>
c001e528:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001e530:	83 c4 0c             	add    esp,0xc
c001e533:	89 e8                	mov    eax,ebp
c001e535:	5b                   	pop    ebx
c001e536:	5e                   	pop    esi
c001e537:	5f                   	pop    edi
c001e538:	5d                   	pop    ebp
c001e539:	c3                   	ret    

c001e53a <ideChannel0IRQHandler(regs*, void*)>:
c001e53a:	83 ec 10             	sub    esp,0x10
c001e53d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e541:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001e548:	6a 07                	push   0x7
c001e54a:	6a 00                	push   0x0
c001e54c:	50                   	push   eax
c001e54d:	e8 d8 fe ff ff       	call   c001e42a <IDE::read(unsigned char, unsigned char)>
c001e552:	83 c4 1c             	add    esp,0x1c
c001e555:	c3                   	ret    

c001e556 <ideChannel1IRQHandler(regs*, void*)>:
c001e556:	83 ec 10             	sub    esp,0x10
c001e559:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e55d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001e564:	6a 07                	push   0x7
c001e566:	6a 01                	push   0x1
c001e568:	50                   	push   eax
c001e569:	e8 bc fe ff ff       	call   c001e42a <IDE::read(unsigned char, unsigned char)>
c001e56e:	83 c4 1c             	add    esp,0x1c
c001e571:	c3                   	ret    

c001e572 <IDE::enableIRQs(unsigned char, bool)>:
c001e572:	57                   	push   edi
c001e573:	56                   	push   esi
c001e574:	be 04 00 00 00       	mov    esi,0x4
c001e579:	53                   	push   ebx
c001e57a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001e57f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e583:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e588:	0f 94 c0             	sete   al
c001e58b:	d1 e0                	shl    eax,1
c001e58d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001e594:	0f b6 c0             	movzx  eax,al
c001e597:	50                   	push   eax
c001e598:	6a 0c                	push   0xc
c001e59a:	57                   	push   edi
c001e59b:	53                   	push   ebx
c001e59c:	e8 c9 fd ff ff       	call   c001e36a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e5a1:	83 c4 10             	add    esp,0x10
c001e5a4:	50                   	push   eax
c001e5a5:	6a 0c                	push   0xc
c001e5a7:	57                   	push   edi
c001e5a8:	53                   	push   ebx
c001e5a9:	e8 7c fe ff ff       	call   c001e42a <IDE::read(unsigned char, unsigned char)>
c001e5ae:	83 c4 10             	add    esp,0x10
c001e5b1:	4e                   	dec    esi
c001e5b2:	75 f0                	jne    c001e5a4 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001e5b4:	5b                   	pop    ebx
c001e5b5:	5e                   	pop    esi
c001e5b6:	5f                   	pop    edi
c001e5b7:	c3                   	ret    

c001e5b8 <IDE::open(int, int, void*)>:
c001e5b8:	55                   	push   ebp
c001e5b9:	57                   	push   edi
c001e5ba:	56                   	push   esi
c001e5bb:	53                   	push   ebx
c001e5bc:	83 ec 1c             	sub    esp,0x1c
c001e5bf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e5c3:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001e5cc:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001e5d5:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001e5dc:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001e5e3:	0f 85 b0 02 00 00    	jne    c001e899 <IDE::open(int, int, void*)+0x2e1>
c001e5e9:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001e5ef:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001e5f3:	83 e0 7f             	and    eax,0x7f
c001e5f6:	3c 05                	cmp    al,0x5
c001e5f8:	74 04                	je     c001e5fe <IDE::open(int, int, void*)+0x46>
c001e5fa:	3c 0f                	cmp    al,0xf
c001e5fc:	75 32                	jne    c001e630 <IDE::open(int, int, void*)+0x78>
c001e5fe:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001e604:	83 e0 fc             	and    eax,0xfffffffc
c001e607:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e60e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001e614:	83 e0 fc             	and    eax,0xfffffffc
c001e617:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e61e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001e624:	83 e0 fc             	and    eax,0xfffffffc
c001e627:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e62e:	eb 14                	jmp    c001e644 <IDE::open(int, int, void*)+0x8c>
c001e630:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001e63a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001e644:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001e64b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001e652:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e656:	89 c6                	mov    esi,eax
c001e658:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e65d:	c1 e6 10             	shl    esi,0x10
c001e660:	89 e8                	mov    eax,ebp
c001e662:	89 fa                	mov    edx,edi
c001e664:	c1 e0 0b             	shl    eax,0xb
c001e667:	09 f0                	or     eax,esi
c001e669:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001e670:	c1 e6 08             	shl    esi,0x8
c001e673:	09 c6                	or     esi,eax
c001e675:	89 f0                	mov    eax,esi
c001e677:	0d 08 00 00 80       	or     eax,0x80000008
c001e67c:	ef                   	out    dx,eax
c001e67d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001e682:	89 ca                	mov    edx,ecx
c001e684:	ed                   	in     eax,dx
c001e685:	c1 e8 10             	shr    eax,0x10
c001e688:	3d ff ff 00 00       	cmp    eax,0xffff
c001e68d:	0f 84 f5 00 00 00    	je     c001e788 <IDE::open(int, int, void*)+0x1d0>
c001e693:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001e699:	89 fa                	mov    edx,edi
c001e69b:	89 f0                	mov    eax,esi
c001e69d:	ef                   	out    dx,eax
c001e69e:	b0 fe                	mov    al,0xfe
c001e6a0:	89 ca                	mov    edx,ecx
c001e6a2:	ee                   	out    dx,al
c001e6a3:	89 f0                	mov    eax,esi
c001e6a5:	89 fa                	mov    edx,edi
c001e6a7:	ef                   	out    dx,eax
c001e6a8:	89 ca                	mov    edx,ecx
c001e6aa:	ed                   	in     eax,dx
c001e6ab:	3c fe                	cmp    al,0xfe
c001e6ad:	0f 85 a9 00 00 00    	jne    c001e75c <IDE::open(int, int, void*)+0x1a4>
c001e6b3:	8b 15 a8 7c 02 c0    	mov    edx,DWORD PTR ds:0xc0027ca8
c001e6b9:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001e6c0:	74 33                	je     c001e6f5 <IDE::open(int, int, void*)+0x13d>
c001e6c2:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001e6c8:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001e6cc:	40                   	inc    eax
c001e6cd:	83 ec 0c             	sub    esp,0xc
c001e6d0:	0f b6 c0             	movzx  eax,al
c001e6d3:	50                   	push   eax
c001e6d4:	55                   	push   ebp
c001e6d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e6d9:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001e6df:	51                   	push   ecx
c001e6e0:	e8 d7 39 ff ff       	call   c00120bc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001e6e5:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001e6ea:	83 c4 1c             	add    esp,0x1c
c001e6ed:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001e6f3:	eb 0a                	jmp    c001e6ff <IDE::open(int, int, void*)+0x147>
c001e6f5:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001e6ff:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001e706:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e70d:	c1 e1 10             	shl    ecx,0x10
c001e710:	c1 e0 08             	shl    eax,0x8
c001e713:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e718:	09 c1                	or     ecx,eax
c001e71a:	89 fa                	mov    edx,edi
c001e71c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e723:	c1 e0 0b             	shl    eax,0xb
c001e726:	09 c1                	or     ecx,eax
c001e728:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001e72e:	89 c8                	mov    eax,ecx
c001e730:	ef                   	out    dx,eax
c001e731:	be fc 0c 00 00       	mov    esi,0xcfc
c001e736:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001e73c:	89 f2                	mov    edx,esi
c001e73e:	ee                   	out    dx,al
c001e73f:	89 c8                	mov    eax,ecx
c001e741:	89 fa                	mov    edx,edi
c001e743:	ef                   	out    dx,eax
c001e744:	89 f2                	mov    edx,esi
c001e746:	ed                   	in     eax,dx
c001e747:	0f b6 c0             	movzx  eax,al
c001e74a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001e750:	74 46                	je     c001e798 <IDE::open(int, int, void*)+0x1e0>
c001e752:	83 ec 0c             	sub    esp,0xc
c001e755:	68 d4 65 02 c0       	push   0xc00265d4
c001e75a:	eb 34                	jmp    c001e790 <IDE::open(int, int, void*)+0x1d8>
c001e75c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001e765:	75 17                	jne    c001e77e <IDE::open(int, int, void*)+0x1c6>
c001e767:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001e76c:	74 07                	je     c001e775 <IDE::open(int, int, void*)+0x1bd>
c001e76e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001e773:	75 09                	jne    c001e77e <IDE::open(int, int, void*)+0x1c6>
c001e775:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e77c:	eb 1a                	jmp    c001e798 <IDE::open(int, int, void*)+0x1e0>
c001e77e:	83 ec 0c             	sub    esp,0xc
c001e781:	68 dc 65 02 c0       	push   0xc00265dc
c001e786:	eb 08                	jmp    c001e790 <IDE::open(int, int, void*)+0x1d8>
c001e788:	83 ec 0c             	sub    esp,0xc
c001e78b:	68 0d 66 02 c0       	push   0xc002660d
c001e790:	e8 1a 61 ff ff       	call   c00148af <Krnl::panic(char const*)>
c001e795:	83 c4 10             	add    esp,0x10
c001e798:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001e79f:	79 1a                	jns    c001e7bb <IDE::open(int, int, void*)+0x203>
c001e7a1:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001e7a7:	83 e0 fc             	and    eax,0xfffffffc
c001e7aa:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001e7b1:	83 c0 08             	add    eax,0x8
c001e7b4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001e7bb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001e7c1:	89 c2                	mov    edx,eax
c001e7c3:	83 e2 0f             	and    edx,0xf
c001e7c6:	66 83 fa 08          	cmp    dx,0x8
c001e7ca:	75 0a                	jne    c001e7d6 <IDE::open(int, int, void*)+0x21e>
c001e7cc:	83 e8 02             	sub    eax,0x2
c001e7cf:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e7d6:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001e7dc:	89 c2                	mov    edx,eax
c001e7de:	83 e2 0f             	and    edx,0xf
c001e7e1:	66 83 fa 08          	cmp    dx,0x8
c001e7e5:	75 0a                	jne    c001e7f1 <IDE::open(int, int, void*)+0x239>
c001e7e7:	83 e8 02             	sub    eax,0x2
c001e7ea:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e7f1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001e7f8:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001e7ff:	89 d0                	mov    eax,edx
c001e801:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e804:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e808:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001e80c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e80f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e814:	0f b6 c9             	movzx  ecx,cl
c001e817:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001e81e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e821:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e825:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001e829:	8d 50 02             	lea    edx,[eax+0x2]
c001e82c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001e831:	0f b6 d2             	movzx  edx,dl
c001e834:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001e83a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e83d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e841:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001e845:	8d 48 03             	lea    ecx,[eax+0x3]
c001e848:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e84d:	0f b6 c9             	movzx  ecx,cl
c001e850:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001e856:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e859:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e85d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001e861:	8d 50 04             	lea    edx,[eax+0x4]
c001e864:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001e86a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001e86f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001e876:	66 85 f6             	test   si,si
c001e879:	74 5b                	je     c001e8d6 <IDE::open(int, int, void*)+0x31e>
c001e87b:	0f b6 d2             	movzx  edx,dl
c001e87e:	83 c0 05             	add    eax,0x5
c001e881:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e884:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e888:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001e88c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001e892:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e897:	eb 3d                	jmp    c001e8d6 <IDE::open(int, int, void*)+0x31e>
c001e899:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001e89f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e8a6:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e8ad:	66 05 06 02          	add    ax,0x206
c001e8b1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e8b8:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001e8bf:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e8c6:	66 05 06 02          	add    ax,0x206
c001e8ca:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e8d1:	e9 e5 fe ff ff       	jmp    c001e7bb <IDE::open(int, int, void*)+0x203>
c001e8d6:	50                   	push   eax
c001e8d7:	50                   	push   eax
c001e8d8:	6a 00                	push   0x0
c001e8da:	53                   	push   ebx
c001e8db:	e8 64 fa ff ff       	call   c001e344 <IDE::prepareInterrupt(unsigned char)>
c001e8e0:	5a                   	pop    edx
c001e8e1:	59                   	pop    ecx
c001e8e2:	6a 01                	push   0x1
c001e8e4:	53                   	push   ebx
c001e8e5:	e8 5a fa ff ff       	call   c001e344 <IDE::prepareInterrupt(unsigned char)>
c001e8ea:	83 c4 0c             	add    esp,0xc
c001e8ed:	6a 00                	push   0x0
c001e8ef:	6a 00                	push   0x0
c001e8f1:	53                   	push   ebx
c001e8f2:	e8 7b fc ff ff       	call   c001e572 <IDE::enableIRQs(unsigned char, bool)>
c001e8f7:	83 c4 0c             	add    esp,0xc
c001e8fa:	6a 00                	push   0x0
c001e8fc:	6a 01                	push   0x1
c001e8fe:	53                   	push   ebx
c001e8ff:	e8 6e fc ff ff       	call   c001e572 <IDE::enableIRQs(unsigned char, bool)>
c001e904:	83 c4 10             	add    esp,0x10
c001e907:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001e90e:	74 34                	je     c001e944 <IDE::open(int, int, void*)+0x38c>
c001e910:	83 ec 0c             	sub    esp,0xc
c001e913:	53                   	push   ebx
c001e914:	6a 01                	push   0x1
c001e916:	68 3a e5 01 c0       	push   0xc001e53a
c001e91b:	6a 0e                	push   0xe
c001e91d:	53                   	push   ebx
c001e91e:	e8 db f7 fe ff       	call   c000e0fe <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e923:	83 c4 14             	add    esp,0x14
c001e926:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001e92c:	53                   	push   ebx
c001e92d:	6a 01                	push   0x1
c001e92f:	68 56 e5 01 c0       	push   0xc001e556
c001e934:	6a 0f                	push   0xf
c001e936:	53                   	push   ebx
c001e937:	e8 c2 f7 fe ff       	call   c000e0fe <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e93c:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001e942:	eb 38                	jmp    c001e97c <IDE::open(int, int, void*)+0x3c4>
c001e944:	83 ec 0c             	sub    esp,0xc
c001e947:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001e951:	53                   	push   ebx
c001e952:	6a 00                	push   0x0
c001e954:	68 3a e5 01 c0       	push   0xc001e53a
c001e959:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001e95f:	53                   	push   ebx
c001e960:	e8 99 f7 fe ff       	call   c000e0fe <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e965:	83 c4 14             	add    esp,0x14
c001e968:	53                   	push   ebx
c001e969:	6a 00                	push   0x0
c001e96b:	68 56 e5 01 c0       	push   0xc001e556
c001e970:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001e976:	53                   	push   ebx
c001e977:	e8 82 f7 fe ff       	call   c000e0fe <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e97c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e97e:	83 c4 20             	add    esp,0x20
c001e981:	83 ec 0c             	sub    esp,0xc
c001e984:	53                   	push   ebx
c001e985:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001e988:	83 c4 0c             	add    esp,0xc
c001e98b:	6a 07                	push   0x7
c001e98d:	6a 00                	push   0x0
c001e98f:	53                   	push   ebx
c001e990:	e8 95 fa ff ff       	call   c001e42a <IDE::read(unsigned char, unsigned char)>
c001e995:	83 c4 0c             	add    esp,0xc
c001e998:	6a 07                	push   0x7
c001e99a:	6a 01                	push   0x1
c001e99c:	53                   	push   ebx
c001e99d:	e8 88 fa ff ff       	call   c001e42a <IDE::read(unsigned char, unsigned char)>
c001e9a2:	83 c4 0c             	add    esp,0xc
c001e9a5:	6a 01                	push   0x1
c001e9a7:	6a 00                	push   0x0
c001e9a9:	53                   	push   ebx
c001e9aa:	e8 c3 fb ff ff       	call   c001e572 <IDE::enableIRQs(unsigned char, bool)>
c001e9af:	83 c4 0c             	add    esp,0xc
c001e9b2:	6a 01                	push   0x1
c001e9b4:	6a 01                	push   0x1
c001e9b6:	53                   	push   ebx
c001e9b7:	e8 b6 fb ff ff       	call   c001e572 <IDE::enableIRQs(unsigned char, bool)>
c001e9bc:	83 c4 2c             	add    esp,0x2c
c001e9bf:	31 c0                	xor    eax,eax
c001e9c1:	5b                   	pop    ebx
c001e9c2:	5e                   	pop    esi
c001e9c3:	5f                   	pop    edi
c001e9c4:	5d                   	pop    ebp
c001e9c5:	c3                   	ret    

c001e9c6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001e9c6:	55                   	push   ebp
c001e9c7:	57                   	push   edi
c001e9c8:	56                   	push   esi
c001e9c9:	53                   	push   ebx
c001e9ca:	83 ec 1c             	sub    esp,0x1c
c001e9cd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e9d1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e9d5:	8d 50 f8             	lea    edx,[eax-0x8]
c001e9d8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e9dc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001e9e0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e9e4:	80 fa 03             	cmp    dl,0x3
c001e9e7:	77 5d                	ja     c001ea46 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001e9e9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e9ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e9f1:	0f b6 db             	movzx  ebx,bl
c001e9f4:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001e9f7:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001e9fb:	83 ca 80             	or     edx,0xffffff80
c001e9fe:	0f b6 d2             	movzx  edx,dl
c001ea01:	52                   	push   edx
c001ea02:	6a 0c                	push   0xc
c001ea04:	53                   	push   ebx
c001ea05:	56                   	push   esi
c001ea06:	e8 5f f9 ff ff       	call   c001e36a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ea0b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ea10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ea14:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ea18:	0f b6 c0             	movzx  eax,al
c001ea1b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001ea1f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ea21:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ea26:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001ea2a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ea2e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ea32:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ea3a:	83 c4 2c             	add    esp,0x2c
c001ea3d:	5b                   	pop    ebx
c001ea3e:	5e                   	pop    esi
c001ea3f:	5f                   	pop    edi
c001ea40:	5d                   	pop    ebp
c001ea41:	e9 24 f9 ff ff       	jmp    c001e36a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ea46:	3c 07                	cmp    al,0x7
c001ea48:	77 10                	ja     c001ea5a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001ea4a:	0f b6 db             	movzx  ebx,bl
c001ea4d:	0f b6 d0             	movzx  edx,al
c001ea50:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001ea58:	eb 2d                	jmp    c001ea87 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ea5a:	3c 0d                	cmp    al,0xd
c001ea5c:	77 13                	ja     c001ea71 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001ea5e:	0f b6 db             	movzx  ebx,bl
c001ea61:	0f b6 c0             	movzx  eax,al
c001ea64:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001ea6b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001ea6f:	eb 16                	jmp    c001ea87 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ea71:	3c 15                	cmp    al,0x15
c001ea73:	77 14                	ja     c001ea89 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001ea75:	0f b6 db             	movzx  ebx,bl
c001ea78:	0f b6 c0             	movzx  eax,al
c001ea7b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001ea83:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001ea87:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ea89:	83 c4 1c             	add    esp,0x1c
c001ea8c:	5b                   	pop    ebx
c001ea8d:	5e                   	pop    esi
c001ea8e:	5f                   	pop    edi
c001ea8f:	5d                   	pop    ebp
c001ea90:	c3                   	ret    
c001ea91:	90                   	nop

c001ea92 <IDE::detect()>:
c001ea92:	55                   	push   ebp
c001ea93:	57                   	push   edi
c001ea94:	56                   	push   esi
c001ea95:	53                   	push   ebx
c001ea96:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ea9c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001eaa3:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001eaaa:	0f 85 97 02 00 00    	jne    c001ed47 <IDE::detect()+0x2b5>
c001eab0:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001eab7:	31 f6                	xor    esi,esi
c001eab9:	31 ed                	xor    ebp,ebp
c001eabb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001eac3:	89 e8                	mov    eax,ebp
c001eac5:	c1 e0 06             	shl    eax,0x6
c001eac8:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001ead0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ead4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ead8:	c1 e0 04             	shl    eax,0x4
c001eadb:	83 c8 a0             	or     eax,0xffffffa0
c001eade:	0f b6 c0             	movzx  eax,al
c001eae1:	50                   	push   eax
c001eae2:	6a 06                	push   0x6
c001eae4:	56                   	push   esi
c001eae5:	53                   	push   ebx
c001eae6:	e8 7f f8 ff ff       	call   c001e36a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eaeb:	83 c4 0c             	add    esp,0xc
c001eaee:	6a 0c                	push   0xc
c001eaf0:	56                   	push   esi
c001eaf1:	53                   	push   ebx
c001eaf2:	e8 33 f9 ff ff       	call   c001e42a <IDE::read(unsigned char, unsigned char)>
c001eaf7:	83 c4 0c             	add    esp,0xc
c001eafa:	6a 0c                	push   0xc
c001eafc:	56                   	push   esi
c001eafd:	53                   	push   ebx
c001eafe:	e8 27 f9 ff ff       	call   c001e42a <IDE::read(unsigned char, unsigned char)>
c001eb03:	83 c4 0c             	add    esp,0xc
c001eb06:	6a 0c                	push   0xc
c001eb08:	56                   	push   esi
c001eb09:	53                   	push   ebx
c001eb0a:	e8 1b f9 ff ff       	call   c001e42a <IDE::read(unsigned char, unsigned char)>
c001eb0f:	83 c4 0c             	add    esp,0xc
c001eb12:	6a 0c                	push   0xc
c001eb14:	56                   	push   esi
c001eb15:	53                   	push   ebx
c001eb16:	e8 0f f9 ff ff       	call   c001e42a <IDE::read(unsigned char, unsigned char)>
c001eb1b:	68 ec 00 00 00       	push   0xec
c001eb20:	6a 07                	push   0x7
c001eb22:	56                   	push   esi
c001eb23:	53                   	push   ebx
c001eb24:	e8 41 f8 ff ff       	call   c001e36a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb29:	83 c4 1c             	add    esp,0x1c
c001eb2c:	6a 0c                	push   0xc
c001eb2e:	56                   	push   esi
c001eb2f:	53                   	push   ebx
c001eb30:	e8 f5 f8 ff ff       	call   c001e42a <IDE::read(unsigned char, unsigned char)>
c001eb35:	83 c4 0c             	add    esp,0xc
c001eb38:	6a 0c                	push   0xc
c001eb3a:	56                   	push   esi
c001eb3b:	53                   	push   ebx
c001eb3c:	e8 e9 f8 ff ff       	call   c001e42a <IDE::read(unsigned char, unsigned char)>
c001eb41:	83 c4 0c             	add    esp,0xc
c001eb44:	6a 0c                	push   0xc
c001eb46:	56                   	push   esi
c001eb47:	53                   	push   ebx
c001eb48:	e8 dd f8 ff ff       	call   c001e42a <IDE::read(unsigned char, unsigned char)>
c001eb4d:	83 c4 0c             	add    esp,0xc
c001eb50:	6a 0c                	push   0xc
c001eb52:	56                   	push   esi
c001eb53:	53                   	push   ebx
c001eb54:	e8 d1 f8 ff ff       	call   c001e42a <IDE::read(unsigned char, unsigned char)>
c001eb59:	83 c4 0c             	add    esp,0xc
c001eb5c:	6a 0c                	push   0xc
c001eb5e:	56                   	push   esi
c001eb5f:	53                   	push   ebx
c001eb60:	e8 c5 f8 ff ff       	call   c001e42a <IDE::read(unsigned char, unsigned char)>
c001eb65:	83 c4 10             	add    esp,0x10
c001eb68:	84 c0                	test   al,al
c001eb6a:	0f 84 5f 01 00 00    	je     c001eccf <IDE::detect()+0x23d>
c001eb70:	31 ff                	xor    edi,edi
c001eb72:	50                   	push   eax
c001eb73:	6a 0c                	push   0xc
c001eb75:	56                   	push   esi
c001eb76:	53                   	push   ebx
c001eb77:	e8 ae f8 ff ff       	call   c001e42a <IDE::read(unsigned char, unsigned char)>
c001eb7c:	83 c4 10             	add    esp,0x10
c001eb7f:	a8 01                	test   al,0x1
c001eb81:	0f 85 69 01 00 00    	jne    c001ecf0 <IDE::detect()+0x25e>
c001eb87:	84 c0                	test   al,al
c001eb89:	78 04                	js     c001eb8f <IDE::detect()+0xfd>
c001eb8b:	a8 08                	test   al,0x8
c001eb8d:	75 23                	jne    c001ebb2 <IDE::detect()+0x120>
c001eb8f:	47                   	inc    edi
c001eb90:	81 ff 17 01 00 00    	cmp    edi,0x117
c001eb96:	7e da                	jle    c001eb72 <IDE::detect()+0xe0>
c001eb98:	83 ec 0c             	sub    esp,0xc
c001eb9b:	6a 32                	push   0x32
c001eb9d:	e8 3e 9d ff ff       	call   c00188e0 <milliTenthSleep(unsigned int)>
c001eba2:	83 c4 10             	add    esp,0x10
c001eba5:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001ebab:	75 c5                	jne    c001eb72 <IDE::detect()+0xe0>
c001ebad:	e9 3e 01 00 00       	jmp    c001ecf0 <IDE::detect()+0x25e>
c001ebb2:	31 c9                	xor    ecx,ecx
c001ebb4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001ebb8:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001ebbc:	83 ec 0c             	sub    esp,0xc
c001ebbf:	68 80 00 00 00       	push   0x80
c001ebc4:	57                   	push   edi
c001ebc5:	6a 00                	push   0x0
c001ebc7:	56                   	push   esi
c001ebc8:	53                   	push   ebx
c001ebc9:	e8 f8 fd ff ff       	call   c001e9c6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001ebce:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001ebd3:	89 e8                	mov    eax,ebp
c001ebd5:	89 d1                	mov    ecx,edx
c001ebd7:	c1 e0 06             	shl    eax,0x6
c001ebda:	01 d8                	add    eax,ebx
c001ebdc:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001ebe3:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001ebea:	89 f2                	mov    edx,esi
c001ebec:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001ebf2:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001ebf6:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001ebfc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ec00:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001ec07:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001ec0f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001ec16:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001ec1e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001ec24:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001ec2b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001ec31:	8d 54 24 58          	lea    edx,[esp+0x58]
c001ec35:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ec39:	83 c4 20             	add    esp,0x20
c001ec3c:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001ec3f:	83 c0 02             	add    eax,0x2
c001ec42:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001ec48:	83 c7 02             	add    edi,0x2
c001ec4b:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001ec4e:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001ec54:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001ec58:	75 e2                	jne    c001ec3c <IDE::detect()+0x1aa>
c001ec5a:	89 e8                	mov    eax,ebp
c001ec5c:	c1 e0 06             	shl    eax,0x6
c001ec5f:	01 d8                	add    eax,ebx
c001ec61:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001ec67:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001ec6e:	66 c1 ea 09          	shr    dx,0x9
c001ec72:	83 e2 01             	and    edx,0x1
c001ec75:	84 c9                	test   cl,cl
c001ec77:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001ec7d:	75 22                	jne    c001eca1 <IDE::detect()+0x20f>
c001ec7f:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001ec86:	74 46                	je     c001ecce <IDE::detect()+0x23c>
c001ec88:	83 ec 0c             	sub    esp,0xc
c001ec8b:	68 7c 01 00 00       	push   0x17c
c001ec90:	e8 7a ad fe ff       	call   c0009a0f <malloc>
c001ec95:	89 c7                	mov    edi,eax
c001ec97:	89 04 24             	mov    DWORD PTR [esp],eax
c001ec9a:	e8 97 07 00 00       	call   c001f436 <ATA::ATA()>
c001ec9f:	eb 17                	jmp    c001ecb8 <IDE::detect()+0x226>
c001eca1:	83 ec 0c             	sub    esp,0xc
c001eca4:	68 80 01 00 00       	push   0x180
c001eca9:	e8 61 ad fe ff       	call   c0009a0f <malloc>
c001ecae:	89 c7                	mov    edi,eax
c001ecb0:	89 04 24             	mov    DWORD PTR [esp],eax
c001ecb3:	e8 06 0e 00 00       	call   c001fabe <ATAPI::ATAPI()>
c001ecb8:	5a                   	pop    edx
c001ecb9:	59                   	pop    ecx
c001ecba:	57                   	push   edi
c001ecbb:	53                   	push   ebx
c001ecbc:	e8 c5 f4 fe ff       	call   c000e186 <Device::addChild(Device*)>
c001ecc1:	8b 07                	mov    eax,DWORD PTR [edi]
c001ecc3:	53                   	push   ebx
c001ecc4:	55                   	push   ebp
c001ecc5:	6a 00                	push   0x0
c001ecc7:	57                   	push   edi
c001ecc8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001eccb:	83 c4 20             	add    esp,0x20
c001ecce:	45                   	inc    ebp
c001eccf:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001ecd4:	74 0d                	je     c001ece3 <IDE::detect()+0x251>
c001ecd6:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001ecde:	e9 e0 fd ff ff       	jmp    c001eac3 <IDE::detect()+0x31>
c001ece3:	4e                   	dec    esi
c001ece4:	74 61                	je     c001ed47 <IDE::detect()+0x2b5>
c001ece6:	be 01 00 00 00       	mov    esi,0x1
c001eceb:	e9 cb fd ff ff       	jmp    c001eabb <IDE::detect()+0x29>
c001ecf0:	50                   	push   eax
c001ecf1:	6a 04                	push   0x4
c001ecf3:	56                   	push   esi
c001ecf4:	53                   	push   ebx
c001ecf5:	e8 30 f7 ff ff       	call   c001e42a <IDE::read(unsigned char, unsigned char)>
c001ecfa:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ecfe:	83 c4 0c             	add    esp,0xc
c001ed01:	6a 05                	push   0x5
c001ed03:	56                   	push   esi
c001ed04:	53                   	push   ebx
c001ed05:	e8 20 f7 ff ff       	call   c001e42a <IDE::read(unsigned char, unsigned char)>
c001ed0a:	83 c4 10             	add    esp,0x10
c001ed0d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001ed11:	80 fa 14             	cmp    dl,0x14
c001ed14:	75 04                	jne    c001ed1a <IDE::detect()+0x288>
c001ed16:	3c eb                	cmp    al,0xeb
c001ed18:	eb 07                	jmp    c001ed21 <IDE::detect()+0x28f>
c001ed1a:	3c 96                	cmp    al,0x96
c001ed1c:	75 b1                	jne    c001eccf <IDE::detect()+0x23d>
c001ed1e:	80 fa 69             	cmp    dl,0x69
c001ed21:	75 ac                	jne    c001eccf <IDE::detect()+0x23d>
c001ed23:	68 a1 00 00 00       	push   0xa1
c001ed28:	6a 07                	push   0x7
c001ed2a:	56                   	push   esi
c001ed2b:	53                   	push   ebx
c001ed2c:	e8 39 f6 ff ff       	call   c001e36a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed31:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001ed38:	e8 a3 9b ff ff       	call   c00188e0 <milliTenthSleep(unsigned int)>
c001ed3d:	83 c4 10             	add    esp,0x10
c001ed40:	b1 01                	mov    cl,0x1
c001ed42:	e9 6d fe ff ff       	jmp    c001ebb4 <IDE::detect()+0x122>
c001ed47:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ed4d:	5b                   	pop    ebx
c001ed4e:	5e                   	pop    esi
c001ed4f:	5f                   	pop    edi
c001ed50:	5d                   	pop    ebp
c001ed51:	c3                   	ret    

c001ed52 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001ed52:	55                   	push   ebp
c001ed53:	57                   	push   edi
c001ed54:	56                   	push   esi
c001ed55:	53                   	push   ebx
c001ed56:	83 ec 1c             	sub    esp,0x1c
c001ed59:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ed5d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ed61:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ed65:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001ed69:	88 c3                	mov    bl,al
c001ed6b:	84 c0                	test   al,al
c001ed6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed71:	0f 84 81 00 00 00    	je     c001edf8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ed77:	83 ec 0c             	sub    esp,0xc
c001ed7a:	68 37 66 02 c0       	push   0xc0026637
c001ed7f:	e8 7b df fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001ed84:	83 c4 10             	add    esp,0x10
c001ed87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ed8b:	3c 01                	cmp    al,0x1
c001ed8d:	74 63                	je     c001edf2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001ed8f:	3c 02                	cmp    al,0x2
c001ed91:	75 53                	jne    c001ede6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001ed93:	d1 e6                	shl    esi,1
c001ed95:	09 ee                	or     esi,ebp
c001ed97:	50                   	push   eax
c001ed98:	89 f0                	mov    eax,esi
c001ed9a:	6a 01                	push   0x1
c001ed9c:	0f b6 f0             	movzx  esi,al
c001ed9f:	c1 e6 06             	shl    esi,0x6
c001eda2:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001edaa:	50                   	push   eax
c001edab:	57                   	push   edi
c001edac:	e8 79 f6 ff ff       	call   c001e42a <IDE::read(unsigned char, unsigned char)>
c001edb1:	83 c4 10             	add    esp,0x10
c001edb4:	a8 01                	test   al,0x1
c001edb6:	74 02                	je     c001edba <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001edb8:	b3 07                	mov    bl,0x7
c001edba:	a8 02                	test   al,0x2
c001edbc:	74 02                	je     c001edc0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001edbe:	b3 03                	mov    bl,0x3
c001edc0:	a8 04                	test   al,0x4
c001edc2:	74 02                	je     c001edc6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001edc4:	b3 14                	mov    bl,0x14
c001edc6:	a8 08                	test   al,0x8
c001edc8:	74 02                	je     c001edcc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001edca:	b3 03                	mov    bl,0x3
c001edcc:	a8 10                	test   al,0x10
c001edce:	74 02                	je     c001edd2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001edd0:	b3 15                	mov    bl,0x15
c001edd2:	a8 20                	test   al,0x20
c001edd4:	74 02                	je     c001edd8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001edd6:	b3 03                	mov    bl,0x3
c001edd8:	a8 40                	test   al,0x40
c001edda:	74 02                	je     c001edde <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001eddc:	b3 16                	mov    bl,0x16
c001edde:	84 c0                	test   al,al
c001ede0:	79 16                	jns    c001edf8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ede2:	b3 0d                	mov    bl,0xd
c001ede4:	eb 12                	jmp    c001edf8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ede6:	3c 03                	cmp    al,0x3
c001ede8:	74 0c                	je     c001edf6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001edea:	3c 04                	cmp    al,0x4
c001edec:	75 0a                	jne    c001edf8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001edee:	b3 08                	mov    bl,0x8
c001edf0:	eb 06                	jmp    c001edf8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001edf2:	b3 13                	mov    bl,0x13
c001edf4:	eb 02                	jmp    c001edf8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001edf6:	b3 17                	mov    bl,0x17
c001edf8:	83 c4 1c             	add    esp,0x1c
c001edfb:	88 d8                	mov    al,bl
c001edfd:	5b                   	pop    ebx
c001edfe:	5e                   	pop    esi
c001edff:	5f                   	pop    edi
c001ee00:	5d                   	pop    ebp
c001ee01:	c3                   	ret    

c001ee02 <IDE::polling(unsigned char, unsigned int)>:
c001ee02:	57                   	push   edi
c001ee03:	56                   	push   esi
c001ee04:	53                   	push   ebx
c001ee05:	bb 04 00 00 00       	mov    ebx,0x4
c001ee0a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001ee0e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001ee13:	52                   	push   edx
c001ee14:	6a 0c                	push   0xc
c001ee16:	56                   	push   esi
c001ee17:	57                   	push   edi
c001ee18:	e8 0d f6 ff ff       	call   c001e42a <IDE::read(unsigned char, unsigned char)>
c001ee1d:	83 c4 10             	add    esp,0x10
c001ee20:	4b                   	dec    ebx
c001ee21:	75 f0                	jne    c001ee13 <IDE::polling(unsigned char, unsigned int)+0x11>
c001ee23:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ee28:	50                   	push   eax
c001ee29:	6a 0c                	push   0xc
c001ee2b:	56                   	push   esi
c001ee2c:	57                   	push   edi
c001ee2d:	e8 f8 f5 ff ff       	call   c001e42a <IDE::read(unsigned char, unsigned char)>
c001ee32:	83 c4 10             	add    esp,0x10
c001ee35:	a8 01                	test   al,0x1
c001ee37:	75 17                	jne    c001ee50 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001ee39:	a8 20                	test   al,0x20
c001ee3b:	75 0f                	jne    c001ee4c <IDE::polling(unsigned char, unsigned int)+0x4a>
c001ee3d:	4b                   	dec    ebx
c001ee3e:	74 10                	je     c001ee50 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001ee40:	84 c0                	test   al,al
c001ee42:	78 e4                	js     c001ee28 <IDE::polling(unsigned char, unsigned int)+0x26>
c001ee44:	a8 08                	test   al,0x8
c001ee46:	74 e0                	je     c001ee28 <IDE::polling(unsigned char, unsigned int)+0x26>
c001ee48:	31 c0                	xor    eax,eax
c001ee4a:	eb 06                	jmp    c001ee52 <IDE::polling(unsigned char, unsigned int)+0x50>
c001ee4c:	b0 01                	mov    al,0x1
c001ee4e:	eb 02                	jmp    c001ee52 <IDE::polling(unsigned char, unsigned int)+0x50>
c001ee50:	b0 02                	mov    al,0x2
c001ee52:	5b                   	pop    ebx
c001ee53:	5e                   	pop    esi
c001ee54:	5f                   	pop    edi
c001ee55:	c3                   	ret    

c001ee56 <SATABus::close(int, int, void*)>:
c001ee56:	31 c0                	xor    eax,eax
c001ee58:	c3                   	ret    
c001ee59:	90                   	nop

c001ee5a <SATABus::detect()>:
c001ee5a:	c3                   	ret    
c001ee5b:	90                   	nop

c001ee5c <SATABus::SATABus()>:
c001ee5c:	83 ec 0c             	sub    esp,0xc
c001ee5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee63:	83 ec 08             	sub    esp,0x8
c001ee66:	68 70 66 02 c0       	push   0xc0026670
c001ee6b:	50                   	push   eax
c001ee6c:	e8 c3 f6 fe ff       	call   c000e534 <HardDiskController::HardDiskController(char const*)>
c001ee71:	83 c4 10             	add    esp,0x10
c001ee74:	ba a0 67 02 c0       	mov    edx,0xc00267a0
c001ee79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee7d:	89 10                	mov    DWORD PTR [eax],edx
c001ee7f:	83 ec 0c             	sub    esp,0xc
c001ee82:	6a 50                	push   0x50
c001ee84:	e8 28 b3 fe ff       	call   c000a1b1 <Phys::allocateContiguousPages(int)>
c001ee89:	83 c4 10             	add    esp,0x10
c001ee8c:	89 c2                	mov    edx,eax
c001ee8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee92:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ee98:	83 ec 0c             	sub    esp,0xc
c001ee9b:	6a 50                	push   0x50
c001ee9d:	e8 37 cb fe ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c001eea2:	83 c4 10             	add    esp,0x10
c001eea5:	89 c2                	mov    edx,eax
c001eea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeab:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eeb1:	a1 d0 7d 02 c0       	mov    eax,ds:0xc0027dd0
c001eeb6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eeba:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001eec0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eec4:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001eeca:	83 ec 0c             	sub    esp,0xc
c001eecd:	6a 03                	push   0x3
c001eecf:	6a 50                	push   0x50
c001eed1:	51                   	push   ecx
c001eed2:	52                   	push   edx
c001eed3:	50                   	push   eax
c001eed4:	e8 9d d4 fe ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001eed9:	83 c4 20             	add    esp,0x20
c001eedc:	90                   	nop
c001eedd:	83 c4 0c             	add    esp,0xc
c001eee0:	c3                   	ret    
c001eee1:	90                   	nop

c001eee2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001eee2:	55                   	push   ebp
c001eee3:	57                   	push   edi
c001eee4:	56                   	push   esi
c001eee5:	53                   	push   ebx
c001eee6:	83 ec 3c             	sub    esp,0x3c
c001eee9:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001eeed:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001eef4:	74 2d                	je     c001ef23 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x41>
c001eef6:	83 ec 0c             	sub    esp,0xc
c001eef9:	68 94 66 02 c0       	push   0xc0026694
c001eefe:	e8 66 ab fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001ef03:	83 c4 10             	add    esp,0x10
c001ef06:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001ef0d:	75 14                	jne    c001ef23 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x41>
c001ef0f:	e4 60                	in     al,0x60
c001ef11:	3c 1c                	cmp    al,0x1c
c001ef13:	74 04                	je     c001ef19 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x37>
c001ef15:	3c 5a                	cmp    al,0x5a
c001ef17:	75 f6                	jne    c001ef0f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2d>
c001ef19:	e4 60                	in     al,0x60
c001ef1b:	3c 5a                	cmp    al,0x5a
c001ef1d:	74 fa                	je     c001ef19 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x37>
c001ef1f:	3c 1c                	cmp    al,0x1c
c001ef21:	74 f6                	je     c001ef19 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x37>
c001ef23:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c001ef26:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c001ef29:	09 c6                	or     esi,eax
c001ef2b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ef2f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ef35:	8b 38                	mov    edi,DWORD PTR [eax]
c001ef37:	c1 ef 08             	shr    edi,0x8
c001ef3a:	83 e7 0f             	and    edi,0xf
c001ef3d:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001ef44:	75 04                	jne    c001ef4a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x68>
c001ef46:	31 db                	xor    ebx,ebx
c001ef48:	eb 6f                	jmp    c001efb9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xd7>
c001ef4a:	83 ec 0c             	sub    esp,0xc
c001ef4d:	68 ab 66 02 c0       	push   0xc00266ab
c001ef52:	e8 12 ab fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001ef57:	83 c4 10             	add    esp,0x10
c001ef5a:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001ef61:	75 e3                	jne    c001ef46 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x64>
c001ef63:	e4 60                	in     al,0x60
c001ef65:	3c 1c                	cmp    al,0x1c
c001ef67:	74 04                	je     c001ef6d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x8b>
c001ef69:	3c 5a                	cmp    al,0x5a
c001ef6b:	75 f6                	jne    c001ef63 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x81>
c001ef6d:	e4 60                	in     al,0x60
c001ef6f:	3c 5a                	cmp    al,0x5a
c001ef71:	74 fa                	je     c001ef6d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x8b>
c001ef73:	3c 1c                	cmp    al,0x1c
c001ef75:	74 f6                	je     c001ef6d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x8b>
c001ef77:	eb cd                	jmp    c001ef46 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x64>
c001ef79:	50                   	push   eax
c001ef7a:	50                   	push   eax
c001ef7b:	68 c2 66 02 c0       	push   0xc00266c2
c001ef80:	8d 6c 24 1a          	lea    ebp,[esp+0x1a]
c001ef84:	55                   	push   ebp
c001ef85:	e8 b6 17 fe ff       	call   c0000740 <strcpy>
c001ef8a:	83 c4 10             	add    esp,0x10
c001ef8d:	89 d8                	mov    eax,ebx
c001ef8f:	b9 0a 00 00 00       	mov    ecx,0xa
c001ef94:	99                   	cdq    
c001ef95:	f7 f9                	idiv   ecx
c001ef97:	83 c0 30             	add    eax,0x30
c001ef9a:	83 c2 30             	add    edx,0x30
c001ef9d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001efa1:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001efa5:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001efac:	75 11                	jne    c001efbf <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xdd>
c001efae:	f7 c6 01 00 00 00    	test   esi,0x1
c001efb4:	74 34                	je     c001efea <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x108>
c001efb6:	d1 ee                	shr    esi,1
c001efb8:	43                   	inc    ebx
c001efb9:	39 fb                	cmp    ebx,edi
c001efbb:	75 bc                	jne    c001ef79 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x97>
c001efbd:	eb 63                	jmp    c001f022 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x140>
c001efbf:	83 ec 0c             	sub    esp,0xc
c001efc2:	55                   	push   ebp
c001efc3:	e8 a1 aa fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001efc8:	83 c4 10             	add    esp,0x10
c001efcb:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001efd2:	75 da                	jne    c001efae <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xcc>
c001efd4:	e4 60                	in     al,0x60
c001efd6:	3c 1c                	cmp    al,0x1c
c001efd8:	74 04                	je     c001efde <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xfc>
c001efda:	3c 5a                	cmp    al,0x5a
c001efdc:	75 f6                	jne    c001efd4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xf2>
c001efde:	e4 60                	in     al,0x60
c001efe0:	3c 5a                	cmp    al,0x5a
c001efe2:	74 fa                	je     c001efde <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xfc>
c001efe4:	3c 1c                	cmp    al,0x1c
c001efe6:	74 f6                	je     c001efde <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xfc>
c001efe8:	eb c4                	jmp    c001efae <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xcc>
c001efea:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001eff1:	74 78                	je     c001f06b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x189>
c001eff3:	83 ec 0c             	sub    esp,0xc
c001eff6:	68 dc 66 02 c0       	push   0xc00266dc
c001effb:	e8 69 aa fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f000:	83 c4 10             	add    esp,0x10
c001f003:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001f00a:	75 5f                	jne    c001f06b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x189>
c001f00c:	e4 60                	in     al,0x60
c001f00e:	3c 5a                	cmp    al,0x5a
c001f010:	74 04                	je     c001f016 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x134>
c001f012:	3c 1c                	cmp    al,0x1c
c001f014:	75 f6                	jne    c001f00c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x12a>
c001f016:	e4 60                	in     al,0x60
c001f018:	3c 5a                	cmp    al,0x5a
c001f01a:	74 fa                	je     c001f016 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x134>
c001f01c:	3c 1c                	cmp    al,0x1c
c001f01e:	74 f6                	je     c001f016 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x134>
c001f020:	eb 49                	jmp    c001f06b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x189>
c001f022:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001f029:	74 2d                	je     c001f058 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x176>
c001f02b:	83 ec 0c             	sub    esp,0xc
c001f02e:	68 f3 66 02 c0       	push   0xc00266f3
c001f033:	e8 31 aa fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f038:	83 c4 10             	add    esp,0x10
c001f03b:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001f042:	75 14                	jne    c001f058 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x176>
c001f044:	e4 60                	in     al,0x60
c001f046:	3c 5a                	cmp    al,0x5a
c001f048:	74 04                	je     c001f04e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x16c>
c001f04a:	3c 1c                	cmp    al,0x1c
c001f04c:	75 f6                	jne    c001f044 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x162>
c001f04e:	e4 60                	in     al,0x60
c001f050:	3c 5a                	cmp    al,0x5a
c001f052:	74 fa                	je     c001f04e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x16c>
c001f054:	3c 1c                	cmp    al,0x1c
c001f056:	74 f6                	je     c001f04e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x16c>
c001f058:	83 ec 0c             	sub    esp,0xc
c001f05b:	83 cb ff             	or     ebx,0xffffffff
c001f05e:	68 0a 67 02 c0       	push   0xc002670a
c001f063:	e8 47 58 ff ff       	call   c00148af <Krnl::panic(char const*)>
c001f068:	83 c4 10             	add    esp,0x10
c001f06b:	83 c4 3c             	add    esp,0x3c
c001f06e:	89 d8                	mov    eax,ebx
c001f070:	5b                   	pop    ebx
c001f071:	5e                   	pop    esi
c001f072:	5f                   	pop    edi
c001f073:	5d                   	pop    ebp
c001f074:	c3                   	ret    
c001f075:	90                   	nop

c001f076 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f076:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f07a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f07d:	89 c2                	mov    edx,eax
c001f07f:	c1 ea 08             	shr    edx,0x8
c001f082:	83 e2 0f             	and    edx,0xf
c001f085:	fe ca                	dec    dl
c001f087:	75 31                	jne    c001f0ba <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f089:	83 e0 0f             	and    eax,0xf
c001f08c:	3c 03                	cmp    al,0x3
c001f08e:	75 2a                	jne    c001f0ba <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f090:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f093:	b8 02 00 00 00       	mov    eax,0x2
c001f098:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f09e:	74 1c                	je     c001f0bc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f0a0:	b8 04 00 00 00       	mov    eax,0x4
c001f0a5:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f0ab:	74 0f                	je     c001f0bc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f0ad:	31 c0                	xor    eax,eax
c001f0af:	83 fa 03             	cmp    edx,0x3
c001f0b2:	0f 94 c0             	sete   al
c001f0b5:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f0b9:	c3                   	ret    
c001f0ba:	31 c0                	xor    eax,eax
c001f0bc:	c3                   	ret    
c001f0bd:	90                   	nop

c001f0be <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f0be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f0c2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f0c5:	0f ba e2 0f          	bt     edx,0xf
c001f0c9:	72 f7                	jb     c001f0c2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f0cb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f0ce:	83 ca 10             	or     edx,0x10
c001f0d1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f0d4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f0d7:	83 ca 01             	or     edx,0x1
c001f0da:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f0dd:	c3                   	ret    

c001f0de <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f0de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f0e2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f0e5:	83 e2 fe             	and    edx,0xfffffffe
c001f0e8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f0eb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f0ee:	83 e2 ef             	and    edx,0xffffffef
c001f0f1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f0f4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f0f7:	0f ba e2 0e          	bt     edx,0xe
c001f0fb:	72 f7                	jb     c001f0f4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f0fd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f100:	0f ba e2 0f          	bt     edx,0xf
c001f104:	72 ee                	jb     c001f0f4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f106:	c3                   	ret    
c001f107:	90                   	nop

c001f108 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f108:	55                   	push   ebp
c001f109:	57                   	push   edi
c001f10a:	56                   	push   esi
c001f10b:	53                   	push   ebx
c001f10c:	83 ec 1c             	sub    esp,0x1c
c001f10f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f113:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f117:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f11b:	53                   	push   ebx
c001f11c:	89 fd                	mov    ebp,edi
c001f11e:	56                   	push   esi
c001f11f:	c1 e5 0a             	shl    ebp,0xa
c001f122:	e8 b7 ff ff ff       	call   c001f0de <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f127:	83 ec 0c             	sub    esp,0xc
c001f12a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f130:	01 e8                	add    eax,ebp
c001f132:	89 03                	mov    DWORD PTR [ebx],eax
c001f134:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f136:	68 00 04 00 00       	push   0x400
c001f13b:	6a 00                	push   0x0
c001f13d:	50                   	push   eax
c001f13e:	e8 41 15 fe ff       	call   c0000684 <memset>
c001f143:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001f149:	89 fa                	mov    edx,edi
c001f14b:	01 e8                	add    eax,ebp
c001f14d:	c1 e7 0d             	shl    edi,0xd
c001f150:	89 03                	mov    DWORD PTR [ebx],eax
c001f152:	c1 e2 08             	shl    edx,0x8
c001f155:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f15c:	81 c2 00 80 00 00    	add    edx,0x8000
c001f162:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f166:	89 d0                	mov    eax,edx
c001f168:	83 c4 1c             	add    esp,0x1c
c001f16b:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f171:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f174:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f177:	68 00 01 00 00       	push   0x100
c001f17c:	6a 00                	push   0x0
c001f17e:	50                   	push   eax
c001f17f:	e8 00 15 fe ff       	call   c0000684 <memset>
c001f184:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f188:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001f18e:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001f194:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f198:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001f19b:	83 c4 10             	add    esp,0x10
c001f19e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f1a5:	31 ff                	xor    edi,edi
c001f1a7:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001f1ad:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001f1b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f1b7:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f1bd:	83 c5 20             	add    ebp,0x20
c001f1c0:	01 f8                	add    eax,edi
c001f1c2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f1c5:	52                   	push   edx
c001f1c6:	68 00 01 00 00       	push   0x100
c001f1cb:	6a 00                	push   0x0
c001f1cd:	50                   	push   eax
c001f1ce:	e8 b1 14 fe ff       	call   c0000684 <memset>
c001f1d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f1d7:	83 c4 10             	add    esp,0x10
c001f1da:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001f1e0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001f1e7:	01 f8                	add    eax,edi
c001f1e9:	81 c7 00 01 00 00    	add    edi,0x100
c001f1ef:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f1f2:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001f1f8:	75 b3                	jne    c001f1ad <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001f1fa:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001f1fe:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001f202:	83 c4 1c             	add    esp,0x1c
c001f205:	5b                   	pop    ebx
c001f206:	5e                   	pop    esi
c001f207:	5f                   	pop    edi
c001f208:	5d                   	pop    ebp
c001f209:	e9 b0 fe ff ff       	jmp    c001f0be <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001f20e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f20e:	55                   	push   ebp
c001f20f:	57                   	push   edi
c001f210:	56                   	push   esi
c001f211:	53                   	push   ebx
c001f212:	83 ec 0c             	sub    esp,0xc
c001f215:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f219:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001f220:	74 2d                	je     c001f24f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f222:	83 ec 0c             	sub    esp,0xc
c001f225:	68 2f 67 02 c0       	push   0xc002672f
c001f22a:	e8 3a a8 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f22f:	83 c4 10             	add    esp,0x10
c001f232:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001f239:	75 14                	jne    c001f24f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f23b:	e4 60                	in     al,0x60
c001f23d:	3c 1c                	cmp    al,0x1c
c001f23f:	74 04                	je     c001f245 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f241:	3c 5a                	cmp    al,0x5a
c001f243:	75 f6                	jne    c001f23b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2d>
c001f245:	e4 60                	in     al,0x60
c001f247:	3c 5a                	cmp    al,0x5a
c001f249:	74 fa                	je     c001f245 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f24b:	3c 1c                	cmp    al,0x1c
c001f24d:	74 f6                	je     c001f245 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f24f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f253:	31 db                	xor    ebx,ebx
c001f255:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
c001f258:	f7 c5 01 00 00 00    	test   ebp,0x1
c001f25e:	0f 84 78 01 00 00    	je     c001f3dc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f268:	89 d8                	mov    eax,ebx
c001f26a:	c1 e0 07             	shl    eax,0x7
c001f26d:	8d bc 02 00 01 00 00 	lea    edi,[edx+eax*1+0x100]
c001f274:	50                   	push   eax
c001f275:	50                   	push   eax
c001f276:	57                   	push   edi
c001f277:	56                   	push   esi
c001f278:	e8 f9 fd ff ff       	call   c001f076 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f27d:	83 c4 10             	add    esp,0x10
c001f280:	83 f8 01             	cmp    eax,0x1
c001f283:	0f 85 19 01 00 00    	jne    c001f3a2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x194>
c001f289:	50                   	push   eax
c001f28a:	53                   	push   ebx
c001f28b:	57                   	push   edi
c001f28c:	56                   	push   esi
c001f28d:	e8 76 fe ff ff       	call   c001f108 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f292:	83 c4 10             	add    esp,0x10
c001f295:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001f29c:	74 2d                	je     c001f2cb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f29e:	83 ec 0c             	sub    esp,0xc
c001f2a1:	68 44 67 02 c0       	push   0xc0026744
c001f2a6:	e8 be a7 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f2ab:	83 c4 10             	add    esp,0x10
c001f2ae:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001f2b5:	75 14                	jne    c001f2cb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f2b7:	e4 60                	in     al,0x60
c001f2b9:	3c 1c                	cmp    al,0x1c
c001f2bb:	74 04                	je     c001f2c1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f2bd:	3c 5a                	cmp    al,0x5a
c001f2bf:	75 f6                	jne    c001f2b7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa9>
c001f2c1:	e4 60                	in     al,0x60
c001f2c3:	3c 5a                	cmp    al,0x5a
c001f2c5:	74 fa                	je     c001f2c1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f2c7:	3c 1c                	cmp    al,0x1c
c001f2c9:	74 f6                	je     c001f2c1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f2cb:	83 ec 0c             	sub    esp,0xc
c001f2ce:	68 7c 01 00 00       	push   0x17c
c001f2d3:	e8 37 a7 fe ff       	call   c0009a0f <malloc>
c001f2d8:	89 04 24             	mov    DWORD PTR [esp],eax
c001f2db:	89 c7                	mov    edi,eax
c001f2dd:	e8 8e 0f 00 00       	call   c0020270 <SATA::SATA()>
c001f2e2:	83 c4 10             	add    esp,0x10
c001f2e5:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001f2ec:	74 2d                	je     c001f31b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f2ee:	83 ec 0c             	sub    esp,0xc
c001f2f1:	68 59 67 02 c0       	push   0xc0026759
c001f2f6:	e8 6e a7 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f2fb:	83 c4 10             	add    esp,0x10
c001f2fe:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001f305:	75 14                	jne    c001f31b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f307:	e4 60                	in     al,0x60
c001f309:	3c 5a                	cmp    al,0x5a
c001f30b:	74 04                	je     c001f311 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f30d:	3c 1c                	cmp    al,0x1c
c001f30f:	75 f6                	jne    c001f307 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xf9>
c001f311:	e4 60                	in     al,0x60
c001f313:	3c 5a                	cmp    al,0x5a
c001f315:	74 fa                	je     c001f311 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f317:	3c 1c                	cmp    al,0x1c
c001f319:	74 f6                	je     c001f311 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f31b:	50                   	push   eax
c001f31c:	50                   	push   eax
c001f31d:	57                   	push   edi
c001f31e:	56                   	push   esi
c001f31f:	e8 62 ee fe ff       	call   c000e186 <Device::addChild(Device*)>
c001f324:	83 c4 10             	add    esp,0x10
c001f327:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001f32e:	74 2d                	je     c001f35d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f330:	83 ec 0c             	sub    esp,0xc
c001f333:	68 6e 67 02 c0       	push   0xc002676e
c001f338:	e8 2c a7 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f33d:	83 c4 10             	add    esp,0x10
c001f340:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001f347:	75 14                	jne    c001f35d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f349:	e4 60                	in     al,0x60
c001f34b:	3c 1c                	cmp    al,0x1c
c001f34d:	74 04                	je     c001f353 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f34f:	3c 5a                	cmp    al,0x5a
c001f351:	75 f6                	jne    c001f349 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x13b>
c001f353:	e4 60                	in     al,0x60
c001f355:	3c 5a                	cmp    al,0x5a
c001f357:	74 fa                	je     c001f353 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f359:	3c 1c                	cmp    al,0x1c
c001f35b:	74 f6                	je     c001f353 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f35d:	8b 07                	mov    eax,DWORD PTR [edi]
c001f35f:	56                   	push   esi
c001f360:	6a 00                	push   0x0
c001f362:	53                   	push   ebx
c001f363:	57                   	push   edi
c001f364:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f367:	83 c4 10             	add    esp,0x10
c001f36a:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c001f371:	74 69                	je     c001f3dc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f373:	83 ec 0c             	sub    esp,0xc
c001f376:	68 83 67 02 c0       	push   0xc0026783
c001f37b:	e8 e9 a6 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f380:	83 c4 10             	add    esp,0x10
c001f383:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c001f38a:	75 50                	jne    c001f3dc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f38c:	e4 60                	in     al,0x60
c001f38e:	3c 1c                	cmp    al,0x1c
c001f390:	74 04                	je     c001f396 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f392:	3c 5a                	cmp    al,0x5a
c001f394:	75 f6                	jne    c001f38c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x17e>
c001f396:	e4 60                	in     al,0x60
c001f398:	3c 5a                	cmp    al,0x5a
c001f39a:	74 fa                	je     c001f396 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f39c:	3c 1c                	cmp    al,0x1c
c001f39e:	74 f6                	je     c001f396 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f3a0:	eb 3a                	jmp    c001f3dc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f3a2:	83 f8 04             	cmp    eax,0x4
c001f3a5:	75 35                	jne    c001f3dc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f3a7:	50                   	push   eax
c001f3a8:	53                   	push   ebx
c001f3a9:	57                   	push   edi
c001f3aa:	56                   	push   esi
c001f3ab:	e8 58 fd ff ff       	call   c001f108 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f3b0:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f3b7:	e8 53 a6 fe ff       	call   c0009a0f <malloc>
c001f3bc:	89 04 24             	mov    DWORD PTR [esp],eax
c001f3bf:	89 c7                	mov    edi,eax
c001f3c1:	e8 20 17 00 00       	call   c0020ae6 <SATAPI::SATAPI()>
c001f3c6:	5a                   	pop    edx
c001f3c7:	59                   	pop    ecx
c001f3c8:	57                   	push   edi
c001f3c9:	56                   	push   esi
c001f3ca:	e8 b7 ed fe ff       	call   c000e186 <Device::addChild(Device*)>
c001f3cf:	8b 07                	mov    eax,DWORD PTR [edi]
c001f3d1:	56                   	push   esi
c001f3d2:	6a 00                	push   0x0
c001f3d4:	53                   	push   ebx
c001f3d5:	57                   	push   edi
c001f3d6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f3d9:	83 c4 20             	add    esp,0x20
c001f3dc:	d1 ed                	shr    ebp,1
c001f3de:	43                   	inc    ebx
c001f3df:	83 fb 20             	cmp    ebx,0x20
c001f3e2:	0f 85 70 fe ff ff    	jne    c001f258 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x4a>
c001f3e8:	83 c4 0c             	add    esp,0xc
c001f3eb:	5b                   	pop    ebx
c001f3ec:	5e                   	pop    esi
c001f3ed:	5f                   	pop    edi
c001f3ee:	5d                   	pop    ebp
c001f3ef:	c3                   	ret    

c001f3f0 <SATABus::open(int, int, void*)>:
c001f3f0:	83 ec 14             	sub    esp,0x14
c001f3f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f3f7:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001f3fd:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001f403:	52                   	push   edx
c001f404:	50                   	push   eax
c001f405:	e8 04 fe ff ff       	call   c001f20e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001f40a:	31 c0                	xor    eax,eax
c001f40c:	83 c4 1c             	add    esp,0x1c
c001f40f:	c3                   	ret    

c001f410 <ATA::close(int, int, void*)>:
c001f410:	83 ec 0c             	sub    esp,0xc
c001f413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f417:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f41d:	85 c0                	test   eax,eax
c001f41f:	74 0c                	je     c001f42d <ATA::close(int, int, void*)+0x1d>
c001f421:	83 ec 0c             	sub    esp,0xc
c001f424:	8b 10                	mov    edx,DWORD PTR [eax]
c001f426:	50                   	push   eax
c001f427:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f42a:	83 c4 10             	add    esp,0x10
c001f42d:	31 c0                	xor    eax,eax
c001f42f:	83 c4 0c             	add    esp,0xc
c001f432:	c3                   	ret    
c001f433:	90                   	nop

c001f434 <ATA::powerSaving(PowerSavingLevel)>:
c001f434:	c3                   	ret    
c001f435:	90                   	nop

c001f436 <ATA::ATA()>:
c001f436:	83 ec 0c             	sub    esp,0xc
c001f439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f43d:	83 ec 04             	sub    esp,0x4
c001f440:	68 00 02 00 00       	push   0x200
c001f445:	68 e3 68 02 c0       	push   0xc00268e3
c001f44a:	50                   	push   eax
c001f44b:	e8 6e f1 fe ff       	call   c000e5be <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f450:	83 c4 10             	add    esp,0x10
c001f453:	ba 18 68 02 c0       	mov    edx,0xc0026818
c001f458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f45c:	89 10                	mov    DWORD PTR [eax],edx
c001f45e:	90                   	nop
c001f45f:	83 c4 0c             	add    esp,0xc
c001f462:	c3                   	ret    
c001f463:	90                   	nop

c001f464 <ATA::flush(bool)>:
c001f464:	53                   	push   ebx
c001f465:	83 ec 08             	sub    esp,0x8
c001f468:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001f46d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f471:	19 c0                	sbb    eax,eax
c001f473:	83 e0 fd             	and    eax,0xfffffffd
c001f476:	05 ea 00 00 00       	add    eax,0xea
c001f47b:	50                   	push   eax
c001f47c:	6a 07                	push   0x7
c001f47e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f485:	50                   	push   eax
c001f486:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f48c:	e8 d9 ee ff ff       	call   c001e36a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f491:	83 c4 0c             	add    esp,0xc
c001f494:	6a 00                	push   0x0
c001f496:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f49d:	50                   	push   eax
c001f49e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f4a4:	e8 59 f9 ff ff       	call   c001ee02 <IDE::polling(unsigned char, unsigned int)>
c001f4a9:	83 c4 18             	add    esp,0x18
c001f4ac:	5b                   	pop    ebx
c001f4ad:	c3                   	ret    

c001f4ae <ATA::readyForCommand()>:
c001f4ae:	56                   	push   esi
c001f4af:	53                   	push   ebx
c001f4b0:	53                   	push   ebx
c001f4b1:	31 db                	xor    ebx,ebx
c001f4b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f4b7:	51                   	push   ecx
c001f4b8:	6a 0c                	push   0xc
c001f4ba:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f4c1:	50                   	push   eax
c001f4c2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f4c8:	e8 5d ef ff ff       	call   c001e42a <IDE::read(unsigned char, unsigned char)>
c001f4cd:	83 c4 10             	add    esp,0x10
c001f4d0:	a8 88                	test   al,0x88
c001f4d2:	74 1f                	je     c001f4f3 <ATA::readyForCommand()+0x45>
c001f4d4:	43                   	inc    ebx
c001f4d5:	83 fb 63             	cmp    ebx,0x63
c001f4d8:	7e dd                	jle    c001f4b7 <ATA::readyForCommand()+0x9>
c001f4da:	83 ec 0c             	sub    esp,0xc
c001f4dd:	6a 0a                	push   0xa
c001f4df:	e8 fc 93 ff ff       	call   c00188e0 <milliTenthSleep(unsigned int)>
c001f4e4:	83 c4 10             	add    esp,0x10
c001f4e7:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001f4ed:	75 c8                	jne    c001f4b7 <ATA::readyForCommand()+0x9>
c001f4ef:	31 c0                	xor    eax,eax
c001f4f1:	eb 02                	jmp    c001f4f5 <ATA::readyForCommand()+0x47>
c001f4f3:	b0 01                	mov    al,0x1
c001f4f5:	5a                   	pop    edx
c001f4f6:	5b                   	pop    ebx
c001f4f7:	5e                   	pop    esi
c001f4f8:	c3                   	ret    
c001f4f9:	90                   	nop

c001f4fa <ATA::access(unsigned long long, int, void*, bool)>:
c001f4fa:	55                   	push   ebp
c001f4fb:	57                   	push   edi
c001f4fc:	56                   	push   esi
c001f4fd:	53                   	push   ebx
c001f4fe:	83 ec 38             	sub    esp,0x38
c001f501:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001f505:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001f509:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f50d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f511:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f515:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f519:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001f51d:	68 c4 67 02 c0       	push   0xc00267c4
c001f522:	e8 d8 d7 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001f527:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f52d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f531:	83 c4 10             	add    esp,0x10
c001f534:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f53a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f53e:	c1 e0 06             	shl    eax,0x6
c001f541:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001f549:	74 5d                	je     c001f5a8 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001f54b:	89 fa                	mov    edx,edi
c001f54d:	89 f0                	mov    eax,esi
c001f54f:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001f553:	c1 ea 1c             	shr    edx,0x1c
c001f556:	89 d1                	mov    ecx,edx
c001f558:	09 c1                	or     ecx,eax
c001f55a:	74 25                	je     c001f581 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001f55c:	31 ed                	xor    ebp,ebp
c001f55e:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001f565:	89 fa                	mov    edx,edi
c001f567:	89 f0                	mov    eax,esi
c001f569:	0f ad d0             	shrd   eax,edx,cl
c001f56c:	d3 ea                	shr    edx,cl
c001f56e:	f6 c1 20             	test   cl,0x20
c001f571:	74 02                	je     c001f575 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001f573:	89 d0                	mov    eax,edx
c001f575:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001f579:	45                   	inc    ebp
c001f57a:	83 fd 06             	cmp    ebp,0x6
c001f57d:	75 df                	jne    c001f55e <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001f57f:	eb 76                	jmp    c001f5f7 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001f581:	89 f0                	mov    eax,esi
c001f583:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001f588:	89 fa                	mov    edx,edi
c001f58a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f591:	0f ac d0 10          	shrd   eax,edx,0x10
c001f595:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f59a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001f59e:	c1 ee 18             	shr    esi,0x18
c001f5a1:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f5a6:	eb 56                	jmp    c001f5fe <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f5a8:	6a 00                	push   0x0
c001f5aa:	6a 3f                	push   0x3f
c001f5ac:	57                   	push   edi
c001f5ad:	56                   	push   esi
c001f5ae:	e8 d1 30 00 00       	call   c0022684 <__umoddi3>
c001f5b3:	83 c4 10             	add    esp,0x10
c001f5b6:	40                   	inc    eax
c001f5b7:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001f5bb:	6a 00                	push   0x0
c001f5bd:	68 f0 03 00 00       	push   0x3f0
c001f5c2:	57                   	push   edi
c001f5c3:	56                   	push   esi
c001f5c4:	e8 bb 2f 00 00       	call   c0022584 <__udivdi3>
c001f5c9:	83 c4 10             	add    esp,0x10
c001f5cc:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001f5d1:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f5d8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f5dd:	6a 00                	push   0x0
c001f5df:	6a 3f                	push   0x3f
c001f5e1:	57                   	push   edi
c001f5e2:	56                   	push   esi
c001f5e3:	e8 9c 2f 00 00       	call   c0022584 <__udivdi3>
c001f5e8:	83 c4 10             	add    esp,0x10
c001f5eb:	89 c6                	mov    esi,eax
c001f5ed:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f5f2:	83 e6 0f             	and    esi,0xf
c001f5f5:	eb 07                	jmp    c001f5fe <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f5f7:	31 f6                	xor    esi,esi
c001f5f9:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001f5fe:	bf 01 00 00 00       	mov    edi,0x1
c001f603:	50                   	push   eax
c001f604:	6a 00                	push   0x0
c001f606:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f60d:	50                   	push   eax
c001f60e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f612:	e8 5b ef ff ff       	call   c001e572 <IDE::enableIRQs(unsigned char, bool)>
c001f617:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f61a:	e8 8f fe ff ff       	call   c001f4ae <ATA::readyForCommand()>
c001f61f:	83 c4 10             	add    esp,0x10
c001f622:	84 c0                	test   al,al
c001f624:	0f 84 bc 02 00 00    	je     c001f8e6 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001f62a:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f630:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f636:	c1 e0 04             	shl    eax,0x4
c001f639:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001f640:	09 c6                	or     esi,eax
c001f642:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f647:	75 05                	jne    c001f64e <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001f649:	83 ce a0             	or     esi,0xffffffa0
c001f64c:	eb 03                	jmp    c001f651 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001f64e:	83 ce e0             	or     esi,0xffffffe0
c001f651:	89 f0                	mov    eax,esi
c001f653:	0f b6 f0             	movzx  esi,al
c001f656:	56                   	push   esi
c001f657:	6a 06                	push   0x6
c001f659:	51                   	push   ecx
c001f65a:	52                   	push   edx
c001f65b:	e8 0a ed ff ff       	call   c001e36a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f660:	83 c4 10             	add    esp,0x10
c001f663:	6a 00                	push   0x0
c001f665:	6a 01                	push   0x1
c001f667:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f66e:	50                   	push   eax
c001f66f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f675:	e8 f0 ec ff ff       	call   c001e36a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f67a:	83 c4 10             	add    esp,0x10
c001f67d:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f682:	75 6e                	jne    c001f6f2 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001f684:	6a 00                	push   0x0
c001f686:	6a 08                	push   0x8
c001f688:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f68f:	50                   	push   eax
c001f690:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f696:	e8 cf ec ff ff       	call   c001e36a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f69b:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001f6a0:	50                   	push   eax
c001f6a1:	6a 09                	push   0x9
c001f6a3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f6aa:	50                   	push   eax
c001f6ab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f6b1:	e8 b4 ec ff ff       	call   c001e36a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f6b6:	83 c4 20             	add    esp,0x20
c001f6b9:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001f6be:	50                   	push   eax
c001f6bf:	6a 0a                	push   0xa
c001f6c1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f6c8:	50                   	push   eax
c001f6c9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f6cf:	e8 96 ec ff ff       	call   c001e36a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f6d4:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001f6d9:	50                   	push   eax
c001f6da:	6a 0b                	push   0xb
c001f6dc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f6e3:	50                   	push   eax
c001f6e4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f6ea:	e8 7b ec ff ff       	call   c001e36a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f6ef:	83 c4 20             	add    esp,0x20
c001f6f2:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001f6f7:	50                   	push   eax
c001f6f8:	6a 02                	push   0x2
c001f6fa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f701:	50                   	push   eax
c001f702:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f708:	e8 5d ec ff ff       	call   c001e36a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f70d:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001f712:	50                   	push   eax
c001f713:	6a 03                	push   0x3
c001f715:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f71c:	50                   	push   eax
c001f71d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f723:	e8 42 ec ff ff       	call   c001e36a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f728:	83 c4 20             	add    esp,0x20
c001f72b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001f730:	50                   	push   eax
c001f731:	6a 04                	push   0x4
c001f733:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f73a:	50                   	push   eax
c001f73b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f741:	e8 24 ec ff ff       	call   c001e36a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f746:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f74b:	50                   	push   eax
c001f74c:	6a 05                	push   0x5
c001f74e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f755:	50                   	push   eax
c001f756:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f75c:	e8 09 ec ff ff       	call   c001e36a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f761:	83 c4 20             	add    esp,0x20
c001f764:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f769:	0f 94 c0             	sete   al
c001f76c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f771:	74 09                	je     c001f77c <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001f773:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001f77a:	eb 07                	jmp    c001f783 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001f77c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001f783:	0f b6 c0             	movzx  eax,al
c001f786:	50                   	push   eax
c001f787:	6a 07                	push   0x7
c001f789:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f790:	50                   	push   eax
c001f791:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f797:	e8 ce eb ff ff       	call   c001e36a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f79c:	c7 04 24 d1 67 02 c0 	mov    DWORD PTR [esp],0xc00267d1
c001f7a3:	e8 57 d5 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001f7a8:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001f7ac:	83 c4 10             	add    esp,0x10
c001f7af:	85 f6                	test   esi,esi
c001f7b1:	0f 84 f7 00 00 00    	je     c001f8ae <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001f7b7:	83 ec 0c             	sub    esp,0xc
c001f7ba:	68 d4 67 02 c0       	push   0xc00267d4
c001f7bf:	e8 3b d5 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001f7c4:	83 c4 0c             	add    esp,0xc
c001f7c7:	6a 01                	push   0x1
c001f7c9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7d0:	50                   	push   eax
c001f7d1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7d7:	e8 26 f6 ff ff       	call   c001ee02 <IDE::polling(unsigned char, unsigned int)>
c001f7dc:	c7 04 24 d7 67 02 c0 	mov    DWORD PTR [esp],0xc00267d7
c001f7e3:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f7e7:	e8 13 d5 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001f7ec:	83 c4 10             	add    esp,0x10
c001f7ef:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001f7f3:	84 c0                	test   al,al
c001f7f5:	74 2b                	je     c001f822 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001f7f7:	0f b6 f8             	movzx  edi,al
c001f7fa:	57                   	push   edi
c001f7fb:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001f802:	50                   	push   eax
c001f803:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f80a:	50                   	push   eax
c001f80b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f811:	e8 3c f5 ff ff       	call   c001ed52 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001f816:	c7 04 24 da 67 02 c0 	mov    DWORD PTR [esp],0xc00267da
c001f81d:	e9 bc 00 00 00       	jmp    c001f8de <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001f822:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f827:	74 50                	je     c001f879 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001f829:	83 ec 0c             	sub    esp,0xc
c001f82c:	31 ed                	xor    ebp,ebp
c001f82e:	68 e5 67 02 c0       	push   0xc00267e5
c001f833:	e8 c7 d4 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001f838:	83 c4 10             	add    esp,0x10
c001f83b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f83f:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001f843:	50                   	push   eax
c001f844:	50                   	push   eax
c001f845:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f84c:	50                   	push   eax
c001f84d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f853:	e8 00 eb ff ff       	call   c001e358 <IDE::getBase(unsigned char)>
c001f858:	89 c2                	mov    edx,eax
c001f85a:	89 f8                	mov    eax,edi
c001f85c:	66 ef                	out    dx,ax
c001f85e:	45                   	inc    ebp
c001f85f:	83 c4 10             	add    esp,0x10
c001f862:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001f868:	75 d1                	jne    c001f83b <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001f86a:	83 ec 0c             	sub    esp,0xc
c001f86d:	68 e8 67 02 c0       	push   0xc00267e8
c001f872:	e8 88 d4 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001f877:	eb 24                	jmp    c001f89d <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001f879:	51                   	push   ecx
c001f87a:	51                   	push   ecx
c001f87b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f882:	50                   	push   eax
c001f883:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f889:	e8 ca ea ff ff       	call   c001e358 <IDE::getBase(unsigned char)>
c001f88e:	b9 00 01 00 00       	mov    ecx,0x100
c001f893:	89 c2                	mov    edx,eax
c001f895:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001f899:	fc                   	cld    
c001f89a:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001f89d:	83 c4 10             	add    esp,0x10
c001f8a0:	4e                   	dec    esi
c001f8a1:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001f8a9:	e9 01 ff ff ff       	jmp    c001f7af <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001f8ae:	31 ff                	xor    edi,edi
c001f8b0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f8b5:	74 2f                	je     c001f8e6 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001f8b7:	83 ec 0c             	sub    esp,0xc
c001f8ba:	68 eb 67 02 c0       	push   0xc00267eb
c001f8bf:	e8 3b d4 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001f8c4:	58                   	pop    eax
c001f8c5:	31 c0                	xor    eax,eax
c001f8c7:	5a                   	pop    edx
c001f8c8:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001f8cd:	0f 94 c0             	sete   al
c001f8d0:	50                   	push   eax
c001f8d1:	53                   	push   ebx
c001f8d2:	e8 8d fb ff ff       	call   c001f464 <ATA::flush(bool)>
c001f8d7:	c7 04 24 ee 67 02 c0 	mov    DWORD PTR [esp],0xc00267ee
c001f8de:	e8 1c d4 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001f8e3:	83 c4 10             	add    esp,0x10
c001f8e6:	83 c4 2c             	add    esp,0x2c
c001f8e9:	89 f8                	mov    eax,edi
c001f8eb:	5b                   	pop    ebx
c001f8ec:	5e                   	pop    esi
c001f8ed:	5f                   	pop    edi
c001f8ee:	5d                   	pop    ebp
c001f8ef:	c3                   	ret    

c001f8f0 <ATA::read(unsigned long long, int, void*)>:
c001f8f0:	57                   	push   edi
c001f8f1:	b8 04 00 00 00       	mov    eax,0x4
c001f8f6:	56                   	push   esi
c001f8f7:	53                   	push   ebx
c001f8f8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f8fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f900:	8d 7a ff             	lea    edi,[edx-0x1]
c001f903:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f907:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f90b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f911:	77 25                	ja     c001f938 <ATA::read(unsigned long long, int, void*)+0x48>
c001f913:	b8 06 00 00 00       	mov    eax,0x6
c001f918:	85 f6                	test   esi,esi
c001f91a:	74 1c                	je     c001f938 <ATA::read(unsigned long long, int, void*)+0x48>
c001f91c:	50                   	push   eax
c001f91d:	50                   	push   eax
c001f91e:	6a 00                	push   0x0
c001f920:	56                   	push   esi
c001f921:	52                   	push   edx
c001f922:	53                   	push   ebx
c001f923:	51                   	push   ecx
c001f924:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f928:	e8 cd fb ff ff       	call   c001f4fa <ATA::access(unsigned long long, int, void*, bool)>
c001f92d:	83 c4 20             	add    esp,0x20
c001f930:	85 c0                	test   eax,eax
c001f932:	0f 95 c0             	setne  al
c001f935:	0f b6 c0             	movzx  eax,al
c001f938:	5b                   	pop    ebx
c001f939:	5e                   	pop    esi
c001f93a:	5f                   	pop    edi
c001f93b:	c3                   	ret    

c001f93c <ATA::write(unsigned long long, int, void*)>:
c001f93c:	55                   	push   ebp
c001f93d:	57                   	push   edi
c001f93e:	56                   	push   esi
c001f93f:	53                   	push   ebx
c001f940:	83 ec 18             	sub    esp,0x18
c001f943:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001f947:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f94b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001f94f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001f953:	68 f1 67 02 c0       	push   0xc00267f1
c001f958:	e8 a2 d3 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001f95d:	8d 53 ff             	lea    edx,[ebx-0x1]
c001f960:	83 c4 10             	add    esp,0x10
c001f963:	b8 04 00 00 00       	mov    eax,0x4
c001f968:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001f96e:	77 25                	ja     c001f995 <ATA::write(unsigned long long, int, void*)+0x59>
c001f970:	b8 06 00 00 00       	mov    eax,0x6
c001f975:	85 f6                	test   esi,esi
c001f977:	74 1c                	je     c001f995 <ATA::write(unsigned long long, int, void*)+0x59>
c001f979:	50                   	push   eax
c001f97a:	50                   	push   eax
c001f97b:	6a 01                	push   0x1
c001f97d:	56                   	push   esi
c001f97e:	53                   	push   ebx
c001f97f:	55                   	push   ebp
c001f980:	57                   	push   edi
c001f981:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f985:	e8 70 fb ff ff       	call   c001f4fa <ATA::access(unsigned long long, int, void*, bool)>
c001f98a:	83 c4 20             	add    esp,0x20
c001f98d:	85 c0                	test   eax,eax
c001f98f:	0f 95 c0             	setne  al
c001f992:	0f b6 c0             	movzx  eax,al
c001f995:	83 c4 0c             	add    esp,0xc
c001f998:	5b                   	pop    ebx
c001f999:	5e                   	pop    esi
c001f99a:	5f                   	pop    edi
c001f99b:	5d                   	pop    ebp
c001f99c:	c3                   	ret    
c001f99d:	90                   	nop

c001f99e <ATA::detectCHS()>:
c001f99e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f9a2:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001f9a8:	c1 e0 06             	shl    eax,0x6
c001f9ab:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001f9b1:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001f9bb:	c7 44 24 04 fd 67 02 c0 	mov    DWORD PTR [esp+0x4],0xc00267fd
c001f9c3:	e9 e7 4e ff ff       	jmp    c00148af <Krnl::panic(char const*)>

c001f9c8 <ATA::open(int, int, void*)>:
c001f9c8:	53                   	push   ebx
c001f9c9:	83 ec 08             	sub    esp,0x8
c001f9cc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f9d0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f9d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f9d8:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f9de:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f9e4:	c1 e0 06             	shl    eax,0x6
c001f9e7:	01 d0                	add    eax,edx
c001f9e9:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001f9f0:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001f9f6:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001f9fd:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001fa07:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001fa0d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001fa14:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001fa1b:	75 0c                	jne    c001fa29 <ATA::open(int, int, void*)+0x61>
c001fa1d:	83 ec 0c             	sub    esp,0xc
c001fa20:	53                   	push   ebx
c001fa21:	e8 78 ff ff ff       	call   c001f99e <ATA::detectCHS()>
c001fa26:	83 c4 10             	add    esp,0x10
c001fa29:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001fa2f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fa35:	c1 e0 06             	shl    eax,0x6
c001fa38:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001fa3f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001fa49:	d1 e8                	shr    eax,1
c001fa4b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001fa51:	6a 04                	push   0x4
c001fa53:	6a 0c                	push   0xc
c001fa55:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa5c:	50                   	push   eax
c001fa5d:	52                   	push   edx
c001fa5e:	e8 07 e9 ff ff       	call   c001e36a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa63:	90                   	nop
c001fa64:	90                   	nop
c001fa65:	6a 00                	push   0x0
c001fa67:	6a 0c                	push   0xc
c001fa69:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa70:	50                   	push   eax
c001fa71:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa77:	e8 ee e8 ff ff       	call   c001e36a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa7c:	83 c4 14             	add    esp,0x14
c001fa7f:	53                   	push   ebx
c001fa80:	e8 a1 eb fe ff       	call   c000e626 <PhysicalDisk::startCache()>
c001fa85:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fa88:	e8 d9 0b ff ff       	call   c0010666 <createPartitionsForDisk(PhysicalDisk*)>
c001fa8d:	31 c0                	xor    eax,eax
c001fa8f:	83 c4 18             	add    esp,0x18
c001fa92:	5b                   	pop    ebx
c001fa93:	c3                   	ret    

c001fa94 <ATAPI::write(unsigned long long, int, void*)>:
c001fa94:	b8 03 00 00 00       	mov    eax,0x3
c001fa99:	c3                   	ret    

c001fa9a <ATAPI::close(int, int, void*)>:
c001fa9a:	83 ec 0c             	sub    esp,0xc
c001fa9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faa1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001faa7:	85 c0                	test   eax,eax
c001faa9:	74 0c                	je     c001fab7 <ATAPI::close(int, int, void*)+0x1d>
c001faab:	83 ec 0c             	sub    esp,0xc
c001faae:	8b 10                	mov    edx,DWORD PTR [eax]
c001fab0:	50                   	push   eax
c001fab1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fab4:	83 c4 10             	add    esp,0x10
c001fab7:	31 c0                	xor    eax,eax
c001fab9:	83 c4 0c             	add    esp,0xc
c001fabc:	c3                   	ret    
c001fabd:	90                   	nop

c001fabe <ATAPI::ATAPI()>:
c001fabe:	83 ec 0c             	sub    esp,0xc
c001fac1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac5:	83 ec 04             	sub    esp,0x4
c001fac8:	68 00 08 00 00       	push   0x800
c001facd:	68 bd 6a 02 c0       	push   0xc0026abd
c001fad2:	50                   	push   eax
c001fad3:	e8 e6 ea fe ff       	call   c000e5be <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fad8:	83 c4 10             	add    esp,0x10
c001fadb:	ba 50 68 02 c0       	mov    edx,0xc0026850
c001fae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae4:	89 10                	mov    DWORD PTR [eax],edx
c001fae6:	90                   	nop
c001fae7:	83 c4 0c             	add    esp,0xc
c001faea:	c3                   	ret    
c001faeb:	90                   	nop

c001faec <ATAPI::readyForCommand()>:
c001faec:	56                   	push   esi
c001faed:	53                   	push   ebx
c001faee:	53                   	push   ebx
c001faef:	31 db                	xor    ebx,ebx
c001faf1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001faf5:	51                   	push   ecx
c001faf6:	6a 0c                	push   0xc
c001faf8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001faff:	50                   	push   eax
c001fb00:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fb06:	e8 1f e9 ff ff       	call   c001e42a <IDE::read(unsigned char, unsigned char)>
c001fb0b:	83 c4 10             	add    esp,0x10
c001fb0e:	a8 88                	test   al,0x88
c001fb10:	74 25                	je     c001fb37 <ATAPI::readyForCommand()+0x4b>
c001fb12:	43                   	inc    ebx
c001fb13:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001fb19:	7e da                	jle    c001faf5 <ATAPI::readyForCommand()+0x9>
c001fb1b:	83 ec 0c             	sub    esp,0xc
c001fb1e:	68 5e 01 00 00       	push   0x15e
c001fb23:	e8 b8 8d ff ff       	call   c00188e0 <milliTenthSleep(unsigned int)>
c001fb28:	83 c4 10             	add    esp,0x10
c001fb2b:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001fb31:	75 c2                	jne    c001faf5 <ATAPI::readyForCommand()+0x9>
c001fb33:	31 c0                	xor    eax,eax
c001fb35:	eb 02                	jmp    c001fb39 <ATAPI::readyForCommand()+0x4d>
c001fb37:	b0 01                	mov    al,0x1
c001fb39:	5a                   	pop    edx
c001fb3a:	5b                   	pop    ebx
c001fb3b:	5e                   	pop    esi
c001fb3c:	c3                   	ret    
c001fb3d:	90                   	nop

c001fb3e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001fb3e:	55                   	push   ebp
c001fb3f:	57                   	push   edi
c001fb40:	56                   	push   esi
c001fb41:	53                   	push   ebx
c001fb42:	83 ec 20             	sub    esp,0x20
c001fb45:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001fb49:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001fb4d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001fb51:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001fb55:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001fb59:	6a 01                	push   0x1
c001fb5b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fb62:	50                   	push   eax
c001fb63:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fb69:	e8 04 ea ff ff       	call   c001e572 <IDE::enableIRQs(unsigned char, bool)>
c001fb6e:	5e                   	pop    esi
c001fb6f:	58                   	pop    eax
c001fb70:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fb77:	50                   	push   eax
c001fb78:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fb7e:	e8 c1 e7 ff ff       	call   c001e344 <IDE::prepareInterrupt(unsigned char)>
c001fb83:	89 3c 24             	mov    DWORD PTR [esp],edi
c001fb86:	e8 61 ff ff ff       	call   c001faec <ATAPI::readyForCommand()>
c001fb8b:	83 c4 10             	add    esp,0x10
c001fb8e:	84 c0                	test   al,al
c001fb90:	75 0a                	jne    c001fb9c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001fb92:	bb 01 00 00 00       	mov    ebx,0x1
c001fb97:	e9 57 02 00 00       	jmp    c001fdf3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fb9c:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001fba2:	c1 e0 04             	shl    eax,0x4
c001fba5:	0f b6 c0             	movzx  eax,al
c001fba8:	50                   	push   eax
c001fba9:	6a 06                	push   0x6
c001fbab:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fbb2:	50                   	push   eax
c001fbb3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fbb9:	e8 ac e7 ff ff       	call   c001e36a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fbbe:	6a 00                	push   0x0
c001fbc0:	6a 01                	push   0x1
c001fbc2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fbc9:	50                   	push   eax
c001fbca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fbd0:	e8 95 e7 ff ff       	call   c001e36a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fbd5:	83 c4 20             	add    esp,0x20
c001fbd8:	0f b6 c3             	movzx  eax,bl
c001fbdb:	0f b6 df             	movzx  ebx,bh
c001fbde:	50                   	push   eax
c001fbdf:	6a 04                	push   0x4
c001fbe1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fbe8:	50                   	push   eax
c001fbe9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fbef:	e8 76 e7 ff ff       	call   c001e36a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fbf4:	53                   	push   ebx
c001fbf5:	6a 05                	push   0x5
c001fbf7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fbfe:	50                   	push   eax
c001fbff:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc05:	e8 60 e7 ff ff       	call   c001e36a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc0a:	83 c4 20             	add    esp,0x20
c001fc0d:	68 a0 00 00 00       	push   0xa0
c001fc12:	6a 07                	push   0x7
c001fc14:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc1b:	50                   	push   eax
c001fc1c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc22:	e8 43 e7 ff ff       	call   c001e36a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc27:	83 c4 0c             	add    esp,0xc
c001fc2a:	6a 01                	push   0x1
c001fc2c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc33:	50                   	push   eax
c001fc34:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc3a:	e8 c3 f1 ff ff       	call   c001ee02 <IDE::polling(unsigned char, unsigned int)>
c001fc3f:	83 c4 10             	add    esp,0x10
c001fc42:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001fc48:	84 c0                	test   al,al
c001fc4a:	74 23                	je     c001fc6f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001fc4c:	0f b6 d8             	movzx  ebx,al
c001fc4f:	0f b6 d2             	movzx  edx,dl
c001fc52:	53                   	push   ebx
c001fc53:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001fc5a:	50                   	push   eax
c001fc5b:	52                   	push   edx
c001fc5c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc62:	e8 eb f0 ff ff       	call   c001ed52 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fc67:	83 c4 10             	add    esp,0x10
c001fc6a:	e9 84 01 00 00       	jmp    c001fdf3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fc6f:	0f b6 d2             	movzx  edx,dl
c001fc72:	53                   	push   ebx
c001fc73:	53                   	push   ebx
c001fc74:	52                   	push   edx
c001fc75:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc7b:	e8 d8 e6 ff ff       	call   c001e358 <IDE::getBase(unsigned char)>
c001fc80:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001fc84:	b9 06 00 00 00       	mov    ecx,0x6
c001fc89:	89 c2                	mov    edx,eax
c001fc8b:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001fc8e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001fc92:	83 c4 10             	add    esp,0x10
c001fc95:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fc9b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fca2:	85 db                	test   ebx,ebx
c001fca4:	0f 84 ec 00 00 00    	je     c001fd96 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001fcaa:	51                   	push   ecx
c001fcab:	51                   	push   ecx
c001fcac:	52                   	push   edx
c001fcad:	50                   	push   eax
c001fcae:	e8 25 e8 ff ff       	call   c001e4d8 <IDE::waitInterrupt(unsigned char)>
c001fcb3:	83 c4 10             	add    esp,0x10
c001fcb6:	84 c0                	test   al,al
c001fcb8:	0f 84 d4 fe ff ff    	je     c001fb92 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001fcbe:	56                   	push   esi
c001fcbf:	56                   	push   esi
c001fcc0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fcc7:	50                   	push   eax
c001fcc8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fcce:	e8 71 e6 ff ff       	call   c001e344 <IDE::prepareInterrupt(unsigned char)>
c001fcd3:	83 c4 0c             	add    esp,0xc
c001fcd6:	6a 04                	push   0x4
c001fcd8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fcdf:	50                   	push   eax
c001fce0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fce6:	e8 3f e7 ff ff       	call   c001e42a <IDE::read(unsigned char, unsigned char)>
c001fceb:	83 c4 0c             	add    esp,0xc
c001fcee:	89 c6                	mov    esi,eax
c001fcf0:	6a 05                	push   0x5
c001fcf2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fcf9:	50                   	push   eax
c001fcfa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd00:	e8 25 e7 ff ff       	call   c001e42a <IDE::read(unsigned char, unsigned char)>
c001fd05:	89 f1                	mov    ecx,esi
c001fd07:	0f b6 c0             	movzx  eax,al
c001fd0a:	0f b6 f1             	movzx  esi,cl
c001fd0d:	c1 e0 08             	shl    eax,0x8
c001fd10:	09 c6                	or     esi,eax
c001fd12:	d1 fe                	sar    esi,1
c001fd14:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001fd18:	83 c4 10             	add    esp,0x10
c001fd1b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001fd20:	74 41                	je     c001fd63 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001fd22:	31 c9                	xor    ecx,ecx
c001fd24:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fd2a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fd31:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001fd35:	75 0a                	jne    c001fd41 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001fd37:	01 c9                	add    ecx,ecx
c001fd39:	01 cd                	add    ebp,ecx
c001fd3b:	4b                   	dec    ebx
c001fd3c:	e9 54 ff ff ff       	jmp    c001fc95 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001fd41:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001fd46:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001fd4a:	51                   	push   ecx
c001fd4b:	51                   	push   ecx
c001fd4c:	52                   	push   edx
c001fd4d:	50                   	push   eax
c001fd4e:	e8 05 e6 ff ff       	call   c001e358 <IDE::getBase(unsigned char)>
c001fd53:	89 c2                	mov    edx,eax
c001fd55:	89 f0                	mov    eax,esi
c001fd57:	66 ef                	out    dx,ax
c001fd59:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001fd5d:	83 c4 10             	add    esp,0x10
c001fd60:	41                   	inc    ecx
c001fd61:	eb c1                	jmp    c001fd24 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001fd63:	31 f6                	xor    esi,esi
c001fd65:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fd6b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fd72:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001fd76:	75 06                	jne    c001fd7e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001fd78:	01 f6                	add    esi,esi
c001fd7a:	01 f5                	add    ebp,esi
c001fd7c:	eb bd                	jmp    c001fd3b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001fd7e:	51                   	push   ecx
c001fd7f:	51                   	push   ecx
c001fd80:	52                   	push   edx
c001fd81:	50                   	push   eax
c001fd82:	e8 d1 e5 ff ff       	call   c001e358 <IDE::getBase(unsigned char)>
c001fd87:	89 c2                	mov    edx,eax
c001fd89:	66 ed                	in     ax,dx
c001fd8b:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001fd90:	83 c4 10             	add    esp,0x10
c001fd93:	46                   	inc    esi
c001fd94:	eb cf                	jmp    c001fd65 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001fd96:	51                   	push   ecx
c001fd97:	51                   	push   ecx
c001fd98:	52                   	push   edx
c001fd99:	50                   	push   eax
c001fd9a:	e8 39 e7 ff ff       	call   c001e4d8 <IDE::waitInterrupt(unsigned char)>
c001fd9f:	83 c4 10             	add    esp,0x10
c001fda2:	84 c0                	test   al,al
c001fda4:	0f 84 e8 fd ff ff    	je     c001fb92 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001fdaa:	bb a0 86 01 00       	mov    ebx,0x186a0
c001fdaf:	52                   	push   edx
c001fdb0:	52                   	push   edx
c001fdb1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fdb8:	50                   	push   eax
c001fdb9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fdbf:	e8 80 e5 ff ff       	call   c001e344 <IDE::prepareInterrupt(unsigned char)>
c001fdc4:	83 c4 10             	add    esp,0x10
c001fdc7:	50                   	push   eax
c001fdc8:	50                   	push   eax
c001fdc9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fdd0:	50                   	push   eax
c001fdd1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fdd7:	e8 7c e5 ff ff       	call   c001e358 <IDE::getBase(unsigned char)>
c001fddc:	8d 50 07             	lea    edx,[eax+0x7]
c001fddf:	ec                   	in     al,dx
c001fde0:	83 c4 10             	add    esp,0x10
c001fde3:	a8 88                	test   al,0x88
c001fde5:	74 0a                	je     c001fdf1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001fde7:	4b                   	dec    ebx
c001fde8:	75 dd                	jne    c001fdc7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001fdea:	bb 02 00 00 00       	mov    ebx,0x2
c001fdef:	eb 02                	jmp    c001fdf3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fdf1:	31 db                	xor    ebx,ebx
c001fdf3:	83 c4 1c             	add    esp,0x1c
c001fdf6:	89 d8                	mov    eax,ebx
c001fdf8:	5b                   	pop    ebx
c001fdf9:	5e                   	pop    esi
c001fdfa:	5f                   	pop    edi
c001fdfb:	5d                   	pop    ebp
c001fdfc:	c3                   	ret    
c001fdfd:	90                   	nop

c001fdfe <ATAPI::diskRemoved()>:
c001fdfe:	83 ec 18             	sub    esp,0x18
c001fe01:	68 c9 6a 02 c0       	push   0xc0026ac9
c001fe06:	e8 f4 ce fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001fe0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fe0f:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001fe16:	83 c4 1c             	add    esp,0x1c
c001fe19:	c3                   	ret    

c001fe1a <ATAPI::eject()>:
c001fe1a:	57                   	push   edi
c001fe1b:	b9 03 00 00 00       	mov    ecx,0x3
c001fe20:	53                   	push   ebx
c001fe21:	83 ec 14             	sub    esp,0x14
c001fe24:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001fe28:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001fe2c:	fc                   	cld    
c001fe2d:	31 c0                	xor    eax,eax
c001fe2f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fe31:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001fe36:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001fe3b:	50                   	push   eax
c001fe3c:	50                   	push   eax
c001fe3d:	6a 00                	push   0x0
c001fe3f:	6a 00                	push   0x0
c001fe41:	6a 00                	push   0x0
c001fe43:	6a 02                	push   0x2
c001fe45:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fe49:	50                   	push   eax
c001fe4a:	53                   	push   ebx
c001fe4b:	e8 ee fc ff ff       	call   c001fb3e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fe50:	83 c4 14             	add    esp,0x14
c001fe53:	53                   	push   ebx
c001fe54:	e8 a5 ff ff ff       	call   c001fdfe <ATAPI::diskRemoved()>
c001fe59:	83 c4 24             	add    esp,0x24
c001fe5c:	31 c0                	xor    eax,eax
c001fe5e:	5b                   	pop    ebx
c001fe5f:	5f                   	pop    edi
c001fe60:	c3                   	ret    
c001fe61:	90                   	nop

c001fe62 <ATAPI::diskInserted()>:
c001fe62:	53                   	push   ebx
c001fe63:	83 ec 14             	sub    esp,0x14
c001fe66:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001fe6a:	68 e0 6a 02 c0       	push   0xc0026ae0
c001fe6f:	e8 8b ce fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001fe74:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001fe7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fe7e:	e8 a3 e7 fe ff       	call   c000e626 <PhysicalDisk::startCache()>
c001fe83:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001fe87:	83 c4 18             	add    esp,0x18
c001fe8a:	5b                   	pop    ebx
c001fe8b:	e9 d6 07 ff ff       	jmp    c0010666 <createPartitionsForDisk(PhysicalDisk*)>

c001fe90 <ATAPI::detectMedia()>:
c001fe90:	56                   	push   esi
c001fe91:	53                   	push   ebx
c001fe92:	83 ec 28             	sub    esp,0x28
c001fe95:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fe99:	6a 0c                	push   0xc
c001fe9b:	6a 00                	push   0x0
c001fe9d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001fea1:	56                   	push   esi
c001fea2:	e8 dd 07 fe ff       	call   c0000684 <memset>
c001fea7:	58                   	pop    eax
c001fea8:	5a                   	pop    edx
c001fea9:	6a 00                	push   0x0
c001feab:	6a 00                	push   0x0
c001fead:	6a 00                	push   0x0
c001feaf:	6a 00                	push   0x0
c001feb1:	56                   	push   esi
c001feb2:	53                   	push   ebx
c001feb3:	e8 86 fc ff ff       	call   c001fb3e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001feb8:	83 c4 1c             	add    esp,0x1c
c001febb:	6a 0c                	push   0xc
c001febd:	6a 00                	push   0x0
c001febf:	56                   	push   esi
c001fec0:	e8 bf 07 fe ff       	call   c0000684 <memset>
c001fec5:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001feca:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001fecf:	59                   	pop    ecx
c001fed0:	58                   	pop    eax
c001fed1:	6a 01                	push   0x1
c001fed3:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001fed7:	50                   	push   eax
c001fed8:	6a 00                	push   0x0
c001feda:	6a 12                	push   0x12
c001fedc:	56                   	push   esi
c001fedd:	53                   	push   ebx
c001fede:	e8 5b fc ff ff       	call   c001fb3e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fee3:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001fee7:	83 c4 20             	add    esp,0x20
c001feea:	83 e0 7f             	and    eax,0x7f
c001feed:	3c 70                	cmp    al,0x70
c001feef:	74 15                	je     c001ff06 <ATAPI::detectMedia()+0x76>
c001fef1:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001fef8:	75 0c                	jne    c001ff06 <ATAPI::detectMedia()+0x76>
c001fefa:	83 ec 0c             	sub    esp,0xc
c001fefd:	53                   	push   ebx
c001fefe:	e8 5f ff ff ff       	call   c001fe62 <ATAPI::diskInserted()>
c001ff03:	83 c4 10             	add    esp,0x10
c001ff06:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ff0a:	83 e0 0f             	and    eax,0xf
c001ff0d:	3c 02                	cmp    al,0x2
c001ff0f:	75 1b                	jne    c001ff2c <ATAPI::detectMedia()+0x9c>
c001ff11:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001ff16:	75 2d                	jne    c001ff45 <ATAPI::detectMedia()+0xb5>
c001ff18:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ff1f:	74 24                	je     c001ff45 <ATAPI::detectMedia()+0xb5>
c001ff21:	83 ec 0c             	sub    esp,0xc
c001ff24:	53                   	push   ebx
c001ff25:	e8 d4 fe ff ff       	call   c001fdfe <ATAPI::diskRemoved()>
c001ff2a:	eb 16                	jmp    c001ff42 <ATAPI::detectMedia()+0xb2>
c001ff2c:	84 c0                	test   al,al
c001ff2e:	75 15                	jne    c001ff45 <ATAPI::detectMedia()+0xb5>
c001ff30:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ff37:	75 0c                	jne    c001ff45 <ATAPI::detectMedia()+0xb5>
c001ff39:	83 ec 0c             	sub    esp,0xc
c001ff3c:	53                   	push   ebx
c001ff3d:	e8 20 ff ff ff       	call   c001fe62 <ATAPI::diskInserted()>
c001ff42:	83 c4 10             	add    esp,0x10
c001ff45:	83 c4 24             	add    esp,0x24
c001ff48:	5b                   	pop    ebx
c001ff49:	5e                   	pop    esi
c001ff4a:	c3                   	ret    
c001ff4b:	90                   	nop

c001ff4c <ATAPI::open(int, int, void*)>:
c001ff4c:	53                   	push   ebx
c001ff4d:	83 ec 08             	sub    esp,0x8
c001ff50:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ff54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ff58:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ff5c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ff62:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ff68:	c1 e0 06             	shl    eax,0x6
c001ff6b:	01 d0                	add    eax,edx
c001ff6d:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001ff74:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001ff7a:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001ff81:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001ff8b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ff91:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ff98:	6a 04                	push   0x4
c001ff9a:	6a 0c                	push   0xc
c001ff9c:	51                   	push   ecx
c001ff9d:	52                   	push   edx
c001ff9e:	e8 c7 e3 ff ff       	call   c001e36a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffa3:	90                   	nop
c001ffa4:	90                   	nop
c001ffa5:	6a 00                	push   0x0
c001ffa7:	6a 0c                	push   0xc
c001ffa9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffb0:	50                   	push   eax
c001ffb1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffb7:	e8 ae e3 ff ff       	call   c001e36a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffbc:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001ffc3:	83 c4 14             	add    esp,0x14
c001ffc6:	53                   	push   ebx
c001ffc7:	e8 c4 fe ff ff       	call   c001fe90 <ATAPI::detectMedia()>
c001ffcc:	31 c0                	xor    eax,eax
c001ffce:	83 c4 18             	add    esp,0x18
c001ffd1:	5b                   	pop    ebx
c001ffd2:	c3                   	ret    
c001ffd3:	90                   	nop

c001ffd4 <ATAPI::read(unsigned long long, int, void*)>:
c001ffd4:	55                   	push   ebp
c001ffd5:	57                   	push   edi
c001ffd6:	56                   	push   esi
c001ffd7:	53                   	push   ebx
c001ffd8:	83 ec 1c             	sub    esp,0x1c
c001ffdb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ffdf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ffe3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001ffe7:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001ffee:	74 41                	je     c0020031 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001fff0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001fff4:	b9 03 00 00 00       	mov    ecx,0x3
c001fff9:	fc                   	cld    
c001fffa:	31 c0                	xor    eax,eax
c001fffc:	86 fb                	xchg   bl,bh
c001fffe:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020000:	c1 c3 10             	rol    ebx,0x10
c0020003:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0020008:	89 e8                	mov    eax,ebp
c002000a:	86 fb                	xchg   bl,bh
c002000c:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0020010:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0020014:	50                   	push   eax
c0020015:	50                   	push   eax
c0020016:	55                   	push   ebp
c0020017:	c1 e5 0b             	shl    ebp,0xb
c002001a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002001e:	6a 00                	push   0x0
c0020020:	55                   	push   ebp
c0020021:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020025:	50                   	push   eax
c0020026:	56                   	push   esi
c0020027:	e8 12 fb ff ff       	call   c001fb3e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002002c:	83 c4 20             	add    esp,0x20
c002002f:	eb 1a                	jmp    c002004b <ATAPI::read(unsigned long long, int, void*)+0x77>
c0020031:	83 ec 0c             	sub    esp,0xc
c0020034:	56                   	push   esi
c0020035:	e8 56 fe ff ff       	call   c001fe90 <ATAPI::detectMedia()>
c002003a:	83 c4 10             	add    esp,0x10
c002003d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0020044:	75 aa                	jne    c001fff0 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0020046:	b8 02 00 00 00       	mov    eax,0x2
c002004b:	83 c4 1c             	add    esp,0x1c
c002004e:	5b                   	pop    ebx
c002004f:	5e                   	pop    esi
c0020050:	5f                   	pop    edi
c0020051:	5d                   	pop    ebp
c0020052:	c3                   	ret    
c0020053:	90                   	nop

c0020054 <SATA::close(int, int, void*)>:
c0020054:	83 ec 0c             	sub    esp,0xc
c0020057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002005b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020061:	85 c0                	test   eax,eax
c0020063:	74 0c                	je     c0020071 <SATA::close(int, int, void*)+0x1d>
c0020065:	83 ec 0c             	sub    esp,0xc
c0020068:	8b 10                	mov    edx,DWORD PTR [eax]
c002006a:	50                   	push   eax
c002006b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002006e:	83 c4 10             	add    esp,0x10
c0020071:	31 c0                	xor    eax,eax
c0020073:	83 c4 0c             	add    esp,0xc
c0020076:	c3                   	ret    
c0020077:	90                   	nop

c0020078 <SATA::powerSaving(PowerSavingLevel)>:
c0020078:	c3                   	ret    
c0020079:	90                   	nop

c002007a <SATA::open(int, int, void*)>:
c002007a:	56                   	push   esi
c002007b:	53                   	push   ebx
c002007c:	51                   	push   ecx
c002007d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020081:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0020088:	74 2d                	je     c00200b7 <SATA::open(int, int, void*)+0x3d>
c002008a:	83 ec 0c             	sub    esp,0xc
c002008d:	68 80 68 02 c0       	push   0xc0026880
c0020092:	e8 d2 99 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020097:	83 c4 10             	add    esp,0x10
c002009a:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c00200a1:	75 14                	jne    c00200b7 <SATA::open(int, int, void*)+0x3d>
c00200a3:	e4 60                	in     al,0x60
c00200a5:	3c 5a                	cmp    al,0x5a
c00200a7:	74 04                	je     c00200ad <SATA::open(int, int, void*)+0x33>
c00200a9:	3c 1c                	cmp    al,0x1c
c00200ab:	75 f6                	jne    c00200a3 <SATA::open(int, int, void*)+0x29>
c00200ad:	e4 60                	in     al,0x60
c00200af:	3c 5a                	cmp    al,0x5a
c00200b1:	74 fa                	je     c00200ad <SATA::open(int, int, void*)+0x33>
c00200b3:	3c 1c                	cmp    al,0x1c
c00200b5:	74 f6                	je     c00200ad <SATA::open(int, int, void*)+0x33>
c00200b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00200bb:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00200c5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00200cb:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00200d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00200d9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00200e3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00200e9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00200f0:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c00200f7:	74 2d                	je     c0020126 <SATA::open(int, int, void*)+0xac>
c00200f9:	83 ec 0c             	sub    esp,0xc
c00200fc:	68 8d 68 02 c0       	push   0xc002688d
c0020101:	e8 63 99 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020106:	83 c4 10             	add    esp,0x10
c0020109:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0020110:	75 14                	jne    c0020126 <SATA::open(int, int, void*)+0xac>
c0020112:	e4 60                	in     al,0x60
c0020114:	3c 1c                	cmp    al,0x1c
c0020116:	74 04                	je     c002011c <SATA::open(int, int, void*)+0xa2>
c0020118:	3c 5a                	cmp    al,0x5a
c002011a:	75 f6                	jne    c0020112 <SATA::open(int, int, void*)+0x98>
c002011c:	e4 60                	in     al,0x60
c002011e:	3c 5a                	cmp    al,0x5a
c0020120:	74 fa                	je     c002011c <SATA::open(int, int, void*)+0xa2>
c0020122:	3c 1c                	cmp    al,0x1c
c0020124:	74 f6                	je     c002011c <SATA::open(int, int, void*)+0xa2>
c0020126:	e8 9b 9f fe ff       	call   c000a0c6 <Phys::allocatePage()>
c002012b:	89 c6                	mov    esi,eax
c002012d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020133:	81 c6 00 10 00 00    	add    esi,0x1000
c0020139:	e8 88 9f fe ff       	call   c000a0c6 <Phys::allocatePage()>
c002013e:	39 c6                	cmp    esi,eax
c0020140:	74 10                	je     c0020152 <SATA::open(int, int, void*)+0xd8>
c0020142:	83 ec 0c             	sub    esp,0xc
c0020145:	68 9a 68 02 c0       	push   0xc002689a
c002014a:	e8 60 47 ff ff       	call   c00148af <Krnl::panic(char const*)>
c002014f:	83 c4 10             	add    esp,0x10
c0020152:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0020159:	74 2d                	je     c0020188 <SATA::open(int, int, void*)+0x10e>
c002015b:	83 ec 0c             	sub    esp,0xc
c002015e:	68 ae 68 02 c0       	push   0xc00268ae
c0020163:	e8 01 99 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020168:	83 c4 10             	add    esp,0x10
c002016b:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0020172:	75 14                	jne    c0020188 <SATA::open(int, int, void*)+0x10e>
c0020174:	e4 60                	in     al,0x60
c0020176:	3c 1c                	cmp    al,0x1c
c0020178:	74 04                	je     c002017e <SATA::open(int, int, void*)+0x104>
c002017a:	3c 5a                	cmp    al,0x5a
c002017c:	75 f6                	jne    c0020174 <SATA::open(int, int, void*)+0xfa>
c002017e:	e4 60                	in     al,0x60
c0020180:	3c 5a                	cmp    al,0x5a
c0020182:	74 fa                	je     c002017e <SATA::open(int, int, void*)+0x104>
c0020184:	3c 1c                	cmp    al,0x1c
c0020186:	74 f6                	je     c002017e <SATA::open(int, int, void*)+0x104>
c0020188:	83 ec 0c             	sub    esp,0xc
c002018b:	6a 02                	push   0x2
c002018d:	e8 47 b8 fe ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c0020192:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020198:	6a 03                	push   0x3
c002019a:	50                   	push   eax
c002019b:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00201a1:	ff 35 d0 7d 02 c0    	push   DWORD PTR ds:0xc0027dd0
c00201a7:	e8 d4 be fe ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c00201ac:	83 c4 20             	add    esp,0x20
c00201af:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c00201b6:	74 2d                	je     c00201e5 <SATA::open(int, int, void*)+0x16b>
c00201b8:	83 ec 0c             	sub    esp,0xc
c00201bb:	68 bb 68 02 c0       	push   0xc00268bb
c00201c0:	e8 a4 98 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00201c5:	83 c4 10             	add    esp,0x10
c00201c8:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c00201cf:	75 14                	jne    c00201e5 <SATA::open(int, int, void*)+0x16b>
c00201d1:	e4 60                	in     al,0x60
c00201d3:	3c 1c                	cmp    al,0x1c
c00201d5:	74 04                	je     c00201db <SATA::open(int, int, void*)+0x161>
c00201d7:	3c 5a                	cmp    al,0x5a
c00201d9:	75 f6                	jne    c00201d1 <SATA::open(int, int, void*)+0x157>
c00201db:	e4 60                	in     al,0x60
c00201dd:	3c 5a                	cmp    al,0x5a
c00201df:	74 fa                	je     c00201db <SATA::open(int, int, void*)+0x161>
c00201e1:	3c 1c                	cmp    al,0x1c
c00201e3:	74 f6                	je     c00201db <SATA::open(int, int, void*)+0x161>
c00201e5:	83 ec 0c             	sub    esp,0xc
c00201e8:	53                   	push   ebx
c00201e9:	e8 38 e4 fe ff       	call   c000e626 <PhysicalDisk::startCache()>
c00201ee:	83 c4 10             	add    esp,0x10
c00201f1:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c00201f8:	74 2d                	je     c0020227 <SATA::open(int, int, void*)+0x1ad>
c00201fa:	83 ec 0c             	sub    esp,0xc
c00201fd:	68 c8 68 02 c0       	push   0xc00268c8
c0020202:	e8 62 98 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020207:	83 c4 10             	add    esp,0x10
c002020a:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0020211:	75 14                	jne    c0020227 <SATA::open(int, int, void*)+0x1ad>
c0020213:	e4 60                	in     al,0x60
c0020215:	3c 1c                	cmp    al,0x1c
c0020217:	74 04                	je     c002021d <SATA::open(int, int, void*)+0x1a3>
c0020219:	3c 5a                	cmp    al,0x5a
c002021b:	75 f6                	jne    c0020213 <SATA::open(int, int, void*)+0x199>
c002021d:	e4 60                	in     al,0x60
c002021f:	3c 5a                	cmp    al,0x5a
c0020221:	74 fa                	je     c002021d <SATA::open(int, int, void*)+0x1a3>
c0020223:	3c 1c                	cmp    al,0x1c
c0020225:	74 f6                	je     c002021d <SATA::open(int, int, void*)+0x1a3>
c0020227:	83 ec 0c             	sub    esp,0xc
c002022a:	53                   	push   ebx
c002022b:	e8 36 04 ff ff       	call   c0010666 <createPartitionsForDisk(PhysicalDisk*)>
c0020230:	83 c4 10             	add    esp,0x10
c0020233:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c002023a:	74 2d                	je     c0020269 <SATA::open(int, int, void*)+0x1ef>
c002023c:	83 ec 0c             	sub    esp,0xc
c002023f:	68 d5 68 02 c0       	push   0xc00268d5
c0020244:	e8 20 98 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020249:	83 c4 10             	add    esp,0x10
c002024c:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0020253:	75 14                	jne    c0020269 <SATA::open(int, int, void*)+0x1ef>
c0020255:	e4 60                	in     al,0x60
c0020257:	3c 1c                	cmp    al,0x1c
c0020259:	74 04                	je     c002025f <SATA::open(int, int, void*)+0x1e5>
c002025b:	3c 5a                	cmp    al,0x5a
c002025d:	75 f6                	jne    c0020255 <SATA::open(int, int, void*)+0x1db>
c002025f:	e4 60                	in     al,0x60
c0020261:	3c 5a                	cmp    al,0x5a
c0020263:	74 fa                	je     c002025f <SATA::open(int, int, void*)+0x1e5>
c0020265:	3c 1c                	cmp    al,0x1c
c0020267:	74 f6                	je     c002025f <SATA::open(int, int, void*)+0x1e5>
c0020269:	5a                   	pop    edx
c002026a:	31 c0                	xor    eax,eax
c002026c:	5b                   	pop    ebx
c002026d:	5e                   	pop    esi
c002026e:	c3                   	ret    
c002026f:	90                   	nop

c0020270 <SATA::SATA()>:
c0020270:	83 ec 0c             	sub    esp,0xc
c0020273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020277:	83 ec 04             	sub    esp,0x4
c002027a:	68 00 02 00 00       	push   0x200
c002027f:	68 e2 68 02 c0       	push   0xc00268e2
c0020284:	50                   	push   eax
c0020285:	e8 34 e3 fe ff       	call   c000e5be <PhysicalDisk::PhysicalDisk(char const*, int)>
c002028a:	83 c4 10             	add    esp,0x10
c002028d:	ba 8c 6a 02 c0       	mov    edx,0xc0026a8c
c0020292:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020296:	89 10                	mov    DWORD PTR [eax],edx
c0020298:	90                   	nop
c0020299:	83 c4 0c             	add    esp,0xc
c002029c:	c3                   	ret    
c002029d:	90                   	nop

c002029e <SATA::access(unsigned long long, int, void*, bool)>:
c002029e:	55                   	push   ebp
c002029f:	57                   	push   edi
c00202a0:	56                   	push   esi
c00202a1:	53                   	push   ebx
c00202a2:	83 ec 2c             	sub    esp,0x2c
c00202a5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00202a9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00202ad:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00202b1:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c00202b8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00202bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00202c0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00202c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00202c8:	75 19                	jne    c00202e3 <SATA::access(unsigned long long, int, void*, bool)+0x45>
c00202ca:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00202cf:	7e 41                	jle    c0020312 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c00202d1:	83 ec 0c             	sub    esp,0xc
c00202d4:	68 01 69 02 c0       	push   0xc0026901
c00202d9:	e8 d1 45 ff ff       	call   c00148af <Krnl::panic(char const*)>
c00202de:	83 c4 10             	add    esp,0x10
c00202e1:	eb 2f                	jmp    c0020312 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c00202e3:	83 ec 0c             	sub    esp,0xc
c00202e6:	68 f2 68 02 c0       	push   0xc00268f2
c00202eb:	e8 79 97 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00202f0:	83 c4 10             	add    esp,0x10
c00202f3:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c00202fa:	75 ce                	jne    c00202ca <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c00202fc:	e4 60                	in     al,0x60
c00202fe:	3c 1c                	cmp    al,0x1c
c0020300:	74 04                	je     c0020306 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020302:	3c 5a                	cmp    al,0x5a
c0020304:	75 f6                	jne    c00202fc <SATA::access(unsigned long long, int, void*, bool)+0x5e>
c0020306:	e4 60                	in     al,0x60
c0020308:	3c 5a                	cmp    al,0x5a
c002030a:	74 fa                	je     c0020306 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c002030c:	3c 1c                	cmp    al,0x1c
c002030e:	74 f6                	je     c0020306 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020310:	eb b8                	jmp    c00202ca <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c0020312:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0020319:	75 29                	jne    c0020344 <SATA::access(unsigned long long, int, void*, bool)+0xa6>
c002031b:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020321:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c0020327:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002032d:	8d 75 02             	lea    esi,[ebp+0x2]
c0020330:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020334:	c1 e6 07             	shl    esi,0x7
c0020337:	01 c6                	add    esi,eax
c0020339:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0020340:	74 4a                	je     c002038c <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020342:	eb 2f                	jmp    c0020373 <SATA::access(unsigned long long, int, void*, bool)+0xd5>
c0020344:	83 ec 0c             	sub    esp,0xc
c0020347:	68 3a 69 02 c0       	push   0xc002693a
c002034c:	e8 18 97 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020351:	83 c4 10             	add    esp,0x10
c0020354:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c002035b:	75 be                	jne    c002031b <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c002035d:	e4 60                	in     al,0x60
c002035f:	3c 1c                	cmp    al,0x1c
c0020361:	74 04                	je     c0020367 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020363:	3c 5a                	cmp    al,0x5a
c0020365:	75 f6                	jne    c002035d <SATA::access(unsigned long long, int, void*, bool)+0xbf>
c0020367:	e4 60                	in     al,0x60
c0020369:	3c 5a                	cmp    al,0x5a
c002036b:	74 fa                	je     c0020367 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c002036d:	3c 1c                	cmp    al,0x1c
c002036f:	74 f6                	je     c0020367 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020371:	eb a8                	jmp    c002031b <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020373:	83 ec 0c             	sub    esp,0xc
c0020376:	68 49 69 02 c0       	push   0xc0026949
c002037b:	e8 e9 96 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020380:	83 c4 10             	add    esp,0x10
c0020383:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c002038a:	74 3d                	je     c00203c9 <SATA::access(unsigned long long, int, void*, bool)+0x12b>
c002038c:	89 e8                	mov    eax,ebp
c002038e:	c1 e0 07             	shl    eax,0x7
c0020391:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020395:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002039f:	52                   	push   edx
c00203a0:	52                   	push   edx
c00203a1:	56                   	push   esi
c00203a2:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c00203a8:	e8 35 eb ff ff       	call   c001eee2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00203ad:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00203b1:	83 c4 10             	add    esp,0x10
c00203b4:	b8 01 00 00 00       	mov    eax,0x1
c00203b9:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00203be:	75 1d                	jne    c00203dd <SATA::access(unsigned long long, int, void*, bool)+0x13f>
c00203c0:	e9 c8 04 00 00       	jmp    c002088d <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c00203c5:	3c 5a                	cmp    al,0x5a
c00203c7:	74 0c                	je     c00203d5 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c00203c9:	e4 60                	in     al,0x60
c00203cb:	3c 1c                	cmp    al,0x1c
c00203cd:	75 f6                	jne    c00203c5 <SATA::access(unsigned long long, int, void*, bool)+0x127>
c00203cf:	eb 04                	jmp    c00203d5 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c00203d1:	3c 1c                	cmp    al,0x1c
c00203d3:	75 b7                	jne    c002038c <SATA::access(unsigned long long, int, void*, bool)+0xee>
c00203d5:	e4 60                	in     al,0x60
c00203d7:	3c 5a                	cmp    al,0x5a
c00203d9:	74 fa                	je     c00203d5 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c00203db:	eb f4                	jmp    c00203d1 <SATA::access(unsigned long long, int, void*, bool)+0x133>
c00203dd:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c00203e4:	74 3a                	je     c0020420 <SATA::access(unsigned long long, int, void*, bool)+0x182>
c00203e6:	83 ec 0c             	sub    esp,0xc
c00203e9:	68 58 69 02 c0       	push   0xc0026958
c00203ee:	e8 76 96 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00203f3:	83 c4 10             	add    esp,0x10
c00203f6:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c00203fd:	74 0d                	je     c002040c <SATA::access(unsigned long long, int, void*, bool)+0x16e>
c00203ff:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020404:	74 34                	je     c002043a <SATA::access(unsigned long long, int, void*, bool)+0x19c>
c0020406:	eb 1f                	jmp    c0020427 <SATA::access(unsigned long long, int, void*, bool)+0x189>
c0020408:	3c 1c                	cmp    al,0x1c
c002040a:	74 0c                	je     c0020418 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c002040c:	e4 60                	in     al,0x60
c002040e:	3c 5a                	cmp    al,0x5a
c0020410:	75 f6                	jne    c0020408 <SATA::access(unsigned long long, int, void*, bool)+0x16a>
c0020412:	eb 04                	jmp    c0020418 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020414:	3c 1c                	cmp    al,0x1c
c0020416:	75 e7                	jne    c00203ff <SATA::access(unsigned long long, int, void*, bool)+0x161>
c0020418:	e4 60                	in     al,0x60
c002041a:	3c 5a                	cmp    al,0x5a
c002041c:	74 fa                	je     c0020418 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c002041e:	eb f4                	jmp    c0020414 <SATA::access(unsigned long long, int, void*, bool)+0x176>
c0020420:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020425:	74 1c                	je     c0020443 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020427:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c002042b:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020431:	c1 e1 09             	shl    ecx,0x9
c0020434:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0020438:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002043a:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0020441:	75 55                	jne    c0020498 <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c0020443:	8d 45 02             	lea    eax,[ebp+0x2]
c0020446:	c1 e0 07             	shl    eax,0x7
c0020449:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002044d:	8b 38                	mov    edi,DWORD PTR [eax]
c002044f:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020455:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c002045b:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c0020461:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020465:	c1 e0 05             	shl    eax,0x5
c0020468:	01 c7                	add    edi,eax
c002046a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002046e:	83 e0 01             	and    eax,0x1
c0020471:	c1 e0 06             	shl    eax,0x6
c0020474:	88 c2                	mov    dl,al
c0020476:	8a 07                	mov    al,BYTE PTR [edi]
c0020478:	83 e0 bf             	and    eax,0xffffffbf
c002047b:	09 d0                	or     eax,edx
c002047d:	88 07                	mov    BYTE PTR [edi],al
c002047f:	8b 07                	mov    eax,DWORD PTR [edi]
c0020481:	25 e0 ff 00 00       	and    eax,0xffe0
c0020486:	0d 05 00 01 00       	or     eax,0x10005
c002048b:	89 07                	mov    DWORD PTR [edi],eax
c002048d:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0020494:	74 4d                	je     c00204e3 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020496:	eb 32                	jmp    c00204ca <SATA::access(unsigned long long, int, void*, bool)+0x22c>
c0020498:	83 ec 0c             	sub    esp,0xc
c002049b:	68 67 69 02 c0       	push   0xc0026967
c00204a0:	e8 c4 95 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00204a5:	83 c4 10             	add    esp,0x10
c00204a8:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c00204af:	75 92                	jne    c0020443 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c00204b1:	e4 60                	in     al,0x60
c00204b3:	3c 1c                	cmp    al,0x1c
c00204b5:	74 04                	je     c00204bb <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c00204b7:	3c 5a                	cmp    al,0x5a
c00204b9:	75 f6                	jne    c00204b1 <SATA::access(unsigned long long, int, void*, bool)+0x213>
c00204bb:	e4 60                	in     al,0x60
c00204bd:	3c 5a                	cmp    al,0x5a
c00204bf:	74 fa                	je     c00204bb <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c00204c1:	3c 1c                	cmp    al,0x1c
c00204c3:	74 f6                	je     c00204bb <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c00204c5:	e9 79 ff ff ff       	jmp    c0020443 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c00204ca:	83 ec 0c             	sub    esp,0xc
c00204cd:	68 76 69 02 c0       	push   0xc0026976
c00204d2:	e8 92 95 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00204d7:	83 c4 10             	add    esp,0x10
c00204da:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c00204e1:	74 3b                	je     c002051e <SATA::access(unsigned long long, int, void*, bool)+0x280>
c00204e3:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00204e9:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c00204ef:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c00204f5:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c00204f8:	50                   	push   eax
c00204f9:	0f b7 47 02          	movzx  eax,WORD PTR [edi+0x2]
c00204fd:	83 c0 08             	add    eax,0x8
c0020500:	c1 e0 04             	shl    eax,0x4
c0020503:	50                   	push   eax
c0020504:	6a 00                	push   0x0
c0020506:	56                   	push   esi
c0020507:	e8 78 01 fe ff       	call   c0000684 <memset>
c002050c:	83 c4 10             	add    esp,0x10
c002050f:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0020516:	74 33                	je     c002054b <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020518:	eb 18                	jmp    c0020532 <SATA::access(unsigned long long, int, void*, bool)+0x294>
c002051a:	3c 1c                	cmp    al,0x1c
c002051c:	74 0c                	je     c002052a <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c002051e:	e4 60                	in     al,0x60
c0020520:	3c 5a                	cmp    al,0x5a
c0020522:	75 f6                	jne    c002051a <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c0020524:	eb 04                	jmp    c002052a <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020526:	3c 1c                	cmp    al,0x1c
c0020528:	75 b9                	jne    c00204e3 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c002052a:	e4 60                	in     al,0x60
c002052c:	3c 5a                	cmp    al,0x5a
c002052e:	74 fa                	je     c002052a <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020530:	eb f4                	jmp    c0020526 <SATA::access(unsigned long long, int, void*, bool)+0x288>
c0020532:	83 ec 0c             	sub    esp,0xc
c0020535:	68 85 69 02 c0       	push   0xc0026985
c002053a:	e8 2a 95 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c002053f:	83 c4 10             	add    esp,0x10
c0020542:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0020549:	74 48                	je     c0020593 <SATA::access(unsigned long long, int, void*, bool)+0x2f5>
c002054b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020551:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020557:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002055b:	c1 e0 09             	shl    eax,0x9
c002055e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020562:	48                   	dec    eax
c0020563:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020568:	89 c2                	mov    edx,eax
c002056a:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020570:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020575:	09 d0                	or     eax,edx
c0020577:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002057d:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0020584:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c002058b:	74 33                	je     c00205c0 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c002058d:	eb 18                	jmp    c00205a7 <SATA::access(unsigned long long, int, void*, bool)+0x309>
c002058f:	3c 1c                	cmp    al,0x1c
c0020591:	74 0c                	je     c002059f <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020593:	e4 60                	in     al,0x60
c0020595:	3c 5a                	cmp    al,0x5a
c0020597:	75 f6                	jne    c002058f <SATA::access(unsigned long long, int, void*, bool)+0x2f1>
c0020599:	eb 04                	jmp    c002059f <SATA::access(unsigned long long, int, void*, bool)+0x301>
c002059b:	3c 1c                	cmp    al,0x1c
c002059d:	75 ac                	jne    c002054b <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c002059f:	e4 60                	in     al,0x60
c00205a1:	3c 5a                	cmp    al,0x5a
c00205a3:	74 fa                	je     c002059f <SATA::access(unsigned long long, int, void*, bool)+0x301>
c00205a5:	eb f4                	jmp    c002059b <SATA::access(unsigned long long, int, void*, bool)+0x2fd>
c00205a7:	83 ec 0c             	sub    esp,0xc
c00205aa:	68 94 69 02 c0       	push   0xc0026994
c00205af:	e8 b5 94 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00205b4:	83 c4 10             	add    esp,0x10
c00205b7:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c00205be:	74 63                	je     c0020623 <SATA::access(unsigned long long, int, void*, bool)+0x385>
c00205c0:	66 8b 06             	mov    ax,WORD PTR [esi]
c00205c3:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c00205c7:	66 25 00 7f          	and    ax,0x7f00
c00205cb:	66 0d 27 80          	or     ax,0x8027
c00205cf:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c00205d4:	66 89 06             	mov    WORD PTR [esi],ax
c00205d7:	19 c0                	sbb    eax,eax
c00205d9:	83 e0 f0             	and    eax,0xfffffff0
c00205dc:	83 c0 35             	add    eax,0x35
c00205df:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00205e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00205e6:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c00205ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00205ee:	c1 e8 10             	shr    eax,0x10
c00205f1:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c00205f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00205f8:	c1 e8 18             	shr    eax,0x18
c00205fb:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0020602:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0020605:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0020609:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c002060c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020610:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0020613:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020617:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c002061b:	74 33                	je     c0020650 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c002061d:	eb 18                	jmp    c0020637 <SATA::access(unsigned long long, int, void*, bool)+0x399>
c002061f:	3c 1c                	cmp    al,0x1c
c0020621:	74 0c                	je     c002062f <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020623:	e4 60                	in     al,0x60
c0020625:	3c 5a                	cmp    al,0x5a
c0020627:	75 f6                	jne    c002061f <SATA::access(unsigned long long, int, void*, bool)+0x381>
c0020629:	eb 04                	jmp    c002062f <SATA::access(unsigned long long, int, void*, bool)+0x391>
c002062b:	3c 1c                	cmp    al,0x1c
c002062d:	75 91                	jne    c00205c0 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c002062f:	e4 60                	in     al,0x60
c0020631:	3c 5a                	cmp    al,0x5a
c0020633:	74 fa                	je     c002062f <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020635:	eb f4                	jmp    c002062b <SATA::access(unsigned long long, int, void*, bool)+0x38d>
c0020637:	83 ec 0c             	sub    esp,0xc
c002063a:	68 a3 69 02 c0       	push   0xc00269a3
c002063f:	e8 25 94 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020644:	83 c4 10             	add    esp,0x10
c0020647:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c002064e:	74 11                	je     c0020661 <SATA::access(unsigned long long, int, void*, bool)+0x3c3>
c0020650:	89 e8                	mov    eax,ebp
c0020652:	31 f6                	xor    esi,esi
c0020654:	c1 e0 07             	shl    eax,0x7
c0020657:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002065b:	eb 21                	jmp    c002067e <SATA::access(unsigned long long, int, void*, bool)+0x3e0>
c002065d:	3c 1c                	cmp    al,0x1c
c002065f:	74 0c                	je     c002066d <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020661:	e4 60                	in     al,0x60
c0020663:	3c 5a                	cmp    al,0x5a
c0020665:	75 f6                	jne    c002065d <SATA::access(unsigned long long, int, void*, bool)+0x3bf>
c0020667:	eb 04                	jmp    c002066d <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020669:	3c 1c                	cmp    al,0x1c
c002066b:	75 e3                	jne    c0020650 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c002066d:	e4 60                	in     al,0x60
c002066f:	3c 5a                	cmp    al,0x5a
c0020671:	74 fa                	je     c002066d <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020673:	eb f4                	jmp    c0020669 <SATA::access(unsigned long long, int, void*, bool)+0x3cb>
c0020675:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c002067b:	74 0c                	je     c0020689 <SATA::access(unsigned long long, int, void*, bool)+0x3eb>
c002067d:	46                   	inc    esi
c002067e:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c0020684:	80 e2 88             	and    dl,0x88
c0020687:	75 ec                	jne    c0020675 <SATA::access(unsigned long long, int, void*, bool)+0x3d7>
c0020689:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0020690:	74 3d                	je     c00206cf <SATA::access(unsigned long long, int, void*, bool)+0x431>
c0020692:	83 ec 0c             	sub    esp,0xc
c0020695:	68 b2 69 02 c0       	push   0xc00269b2
c002069a:	e8 ca 93 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c002069f:	8b 15 c0 7c 02 c0    	mov    edx,DWORD PTR ds:0xc0027cc0
c00206a5:	83 c4 10             	add    esp,0x10
c00206a8:	f6 c2 80             	test   dl,0x80
c00206ab:	74 0e                	je     c00206bb <SATA::access(unsigned long long, int, void*, bool)+0x41d>
c00206ad:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c00206b3:	75 2f                	jne    c00206e4 <SATA::access(unsigned long long, int, void*, bool)+0x446>
c00206b5:	eb 20                	jmp    c00206d7 <SATA::access(unsigned long long, int, void*, bool)+0x439>
c00206b7:	3c 1c                	cmp    al,0x1c
c00206b9:	74 0c                	je     c00206c7 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c00206bb:	e4 60                	in     al,0x60
c00206bd:	3c 5a                	cmp    al,0x5a
c00206bf:	75 f6                	jne    c00206b7 <SATA::access(unsigned long long, int, void*, bool)+0x419>
c00206c1:	eb 04                	jmp    c00206c7 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c00206c3:	3c 1c                	cmp    al,0x1c
c00206c5:	75 e6                	jne    c00206ad <SATA::access(unsigned long long, int, void*, bool)+0x40f>
c00206c7:	e4 60                	in     al,0x60
c00206c9:	3c 5a                	cmp    al,0x5a
c00206cb:	74 fa                	je     c00206c7 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c00206cd:	eb f4                	jmp    c00206c3 <SATA::access(unsigned long long, int, void*, bool)+0x425>
c00206cf:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c00206d5:	75 13                	jne    c00206ea <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c00206d7:	83 ec 0c             	sub    esp,0xc
c00206da:	68 c2 69 02 c0       	push   0xc00269c2
c00206df:	e9 d2 00 00 00       	jmp    c00207b6 <SATA::access(unsigned long long, int, void*, bool)+0x518>
c00206e4:	0f ba e2 0b          	bt     edx,0xb
c00206e8:	72 25                	jb     c002070f <SATA::access(unsigned long long, int, void*, bool)+0x471>
c00206ea:	be 01 00 00 00       	mov    esi,0x1
c00206ef:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00206f3:	89 e8                	mov    eax,ebp
c00206f5:	d3 e6                	shl    esi,cl
c00206f7:	c1 e0 07             	shl    eax,0x7
c00206fa:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00206fe:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0020705:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c002070b:	74 4a                	je     c0020757 <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c002070d:	eb 2f                	jmp    c002073e <SATA::access(unsigned long long, int, void*, bool)+0x4a0>
c002070f:	83 ec 0c             	sub    esp,0xc
c0020712:	68 d0 69 02 c0       	push   0xc00269d0
c0020717:	e8 4d 93 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c002071c:	83 c4 10             	add    esp,0x10
c002071f:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0020726:	75 c2                	jne    c00206ea <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020728:	e4 60                	in     al,0x60
c002072a:	3c 5a                	cmp    al,0x5a
c002072c:	74 04                	je     c0020732 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c002072e:	3c 1c                	cmp    al,0x1c
c0020730:	75 f6                	jne    c0020728 <SATA::access(unsigned long long, int, void*, bool)+0x48a>
c0020732:	e4 60                	in     al,0x60
c0020734:	3c 5a                	cmp    al,0x5a
c0020736:	74 fa                	je     c0020732 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020738:	3c 1c                	cmp    al,0x1c
c002073a:	74 f6                	je     c0020732 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c002073c:	eb ac                	jmp    c00206ea <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c002073e:	83 ec 0c             	sub    esp,0xc
c0020741:	68 e0 69 02 c0       	push   0xc00269e0
c0020746:	e8 1e 93 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c002074b:	83 c4 10             	add    esp,0x10
c002074e:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0020755:	74 0f                	je     c0020766 <SATA::access(unsigned long long, int, void*, bool)+0x4c8>
c0020757:	89 e8                	mov    eax,ebp
c0020759:	c1 e0 07             	shl    eax,0x7
c002075c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020760:	eb 24                	jmp    c0020786 <SATA::access(unsigned long long, int, void*, bool)+0x4e8>
c0020762:	3c 1c                	cmp    al,0x1c
c0020764:	74 0c                	je     c0020772 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020766:	e4 60                	in     al,0x60
c0020768:	3c 5a                	cmp    al,0x5a
c002076a:	75 f6                	jne    c0020762 <SATA::access(unsigned long long, int, void*, bool)+0x4c4>
c002076c:	eb 04                	jmp    c0020772 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c002076e:	3c 1c                	cmp    al,0x1c
c0020770:	75 e5                	jne    c0020757 <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0020772:	e4 60                	in     al,0x60
c0020774:	3c 5a                	cmp    al,0x5a
c0020776:	74 fa                	je     c0020772 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020778:	eb f4                	jmp    c002076e <SATA::access(unsigned long long, int, void*, bool)+0x4d0>
c002077a:	8b 90 10 01 00 00    	mov    edx,DWORD PTR [eax+0x110]
c0020780:	0f ba e2 1e          	bt     edx,0x1e
c0020784:	72 28                	jb     c00207ae <SATA::access(unsigned long long, int, void*, bool)+0x510>
c0020786:	8b 90 38 01 00 00    	mov    edx,DWORD PTR [eax+0x138]
c002078c:	85 d6                	test   esi,edx
c002078e:	75 ea                	jne    c002077a <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c0020790:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0020797:	75 2f                	jne    c00207c8 <SATA::access(unsigned long long, int, void*, bool)+0x52a>
c0020799:	89 e8                	mov    eax,ebp
c002079b:	c1 e0 07             	shl    eax,0x7
c002079e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00207a2:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00207a8:	0f ba e0 1e          	bt     eax,0x1e
c00207ac:	73 49                	jae    c00207f7 <SATA::access(unsigned long long, int, void*, bool)+0x559>
c00207ae:	83 ec 0c             	sub    esp,0xc
c00207b1:	68 f0 69 02 c0       	push   0xc00269f0
c00207b6:	e8 f4 40 ff ff       	call   c00148af <Krnl::panic(char const*)>
c00207bb:	83 c4 10             	add    esp,0x10
c00207be:	b8 01 00 00 00       	mov    eax,0x1
c00207c3:	e9 c5 00 00 00       	jmp    c002088d <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c00207c8:	83 ec 0c             	sub    esp,0xc
c00207cb:	68 01 6a 02 c0       	push   0xc0026a01
c00207d0:	e8 94 92 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00207d5:	83 c4 10             	add    esp,0x10
c00207d8:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c00207df:	75 b8                	jne    c0020799 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c00207e1:	e4 60                	in     al,0x60
c00207e3:	3c 5a                	cmp    al,0x5a
c00207e5:	74 04                	je     c00207eb <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c00207e7:	3c 1c                	cmp    al,0x1c
c00207e9:	75 f6                	jne    c00207e1 <SATA::access(unsigned long long, int, void*, bool)+0x543>
c00207eb:	e4 60                	in     al,0x60
c00207ed:	3c 5a                	cmp    al,0x5a
c00207ef:	74 fa                	je     c00207eb <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c00207f1:	3c 1c                	cmp    al,0x1c
c00207f3:	74 f6                	je     c00207eb <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c00207f5:	eb a2                	jmp    c0020799 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c00207f7:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c00207fe:	74 3a                	je     c002083a <SATA::access(unsigned long long, int, void*, bool)+0x59c>
c0020800:	83 ec 0c             	sub    esp,0xc
c0020803:	68 11 6a 02 c0       	push   0xc0026a11
c0020808:	e8 5c 92 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c002080d:	83 c4 10             	add    esp,0x10
c0020810:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0020817:	74 0d                	je     c0020826 <SATA::access(unsigned long long, int, void*, bool)+0x588>
c0020819:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002081e:	75 31                	jne    c0020851 <SATA::access(unsigned long long, int, void*, bool)+0x5b3>
c0020820:	eb 1f                	jmp    c0020841 <SATA::access(unsigned long long, int, void*, bool)+0x5a3>
c0020822:	3c 1c                	cmp    al,0x1c
c0020824:	74 0c                	je     c0020832 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020826:	e4 60                	in     al,0x60
c0020828:	3c 5a                	cmp    al,0x5a
c002082a:	75 f6                	jne    c0020822 <SATA::access(unsigned long long, int, void*, bool)+0x584>
c002082c:	eb 04                	jmp    c0020832 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c002082e:	3c 1c                	cmp    al,0x1c
c0020830:	75 e7                	jne    c0020819 <SATA::access(unsigned long long, int, void*, bool)+0x57b>
c0020832:	e4 60                	in     al,0x60
c0020834:	3c 5a                	cmp    al,0x5a
c0020836:	74 fa                	je     c0020832 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020838:	eb f4                	jmp    c002082e <SATA::access(unsigned long long, int, void*, bool)+0x590>
c002083a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002083f:	75 19                	jne    c002085a <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020841:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0020847:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002084b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002084f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020851:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0020858:	75 04                	jne    c002085e <SATA::access(unsigned long long, int, void*, bool)+0x5c0>
c002085a:	31 c0                	xor    eax,eax
c002085c:	eb 2f                	jmp    c002088d <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c002085e:	83 ec 0c             	sub    esp,0xc
c0020861:	68 21 6a 02 c0       	push   0xc0026a21
c0020866:	e8 fe 91 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c002086b:	83 c4 10             	add    esp,0x10
c002086e:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0020875:	75 e3                	jne    c002085a <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020877:	e4 60                	in     al,0x60
c0020879:	3c 1c                	cmp    al,0x1c
c002087b:	74 04                	je     c0020881 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c002087d:	3c 5a                	cmp    al,0x5a
c002087f:	75 f6                	jne    c0020877 <SATA::access(unsigned long long, int, void*, bool)+0x5d9>
c0020881:	e4 60                	in     al,0x60
c0020883:	3c 5a                	cmp    al,0x5a
c0020885:	74 fa                	je     c0020881 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020887:	3c 1c                	cmp    al,0x1c
c0020889:	74 f6                	je     c0020881 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c002088b:	eb cd                	jmp    c002085a <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c002088d:	83 c4 2c             	add    esp,0x2c
c0020890:	5b                   	pop    ebx
c0020891:	5e                   	pop    esi
c0020892:	5f                   	pop    edi
c0020893:	5d                   	pop    ebp
c0020894:	c3                   	ret    
c0020895:	90                   	nop

c0020896 <SATA::read(unsigned long long, int, void*)>:
c0020896:	55                   	push   ebp
c0020897:	57                   	push   edi
c0020898:	56                   	push   esi
c0020899:	53                   	push   ebx
c002089a:	83 ec 0c             	sub    esp,0xc
c002089d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00208a1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00208a5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00208a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00208ad:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c00208b4:	74 2d                	je     c00208e3 <SATA::read(unsigned long long, int, void*)+0x4d>
c00208b6:	83 ec 0c             	sub    esp,0xc
c00208b9:	68 31 6a 02 c0       	push   0xc0026a31
c00208be:	e8 a6 91 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00208c3:	83 c4 10             	add    esp,0x10
c00208c6:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c00208cd:	75 14                	jne    c00208e3 <SATA::read(unsigned long long, int, void*)+0x4d>
c00208cf:	e4 60                	in     al,0x60
c00208d1:	3c 1c                	cmp    al,0x1c
c00208d3:	74 04                	je     c00208d9 <SATA::read(unsigned long long, int, void*)+0x43>
c00208d5:	3c 5a                	cmp    al,0x5a
c00208d7:	75 f6                	jne    c00208cf <SATA::read(unsigned long long, int, void*)+0x39>
c00208d9:	e4 60                	in     al,0x60
c00208db:	3c 5a                	cmp    al,0x5a
c00208dd:	74 fa                	je     c00208d9 <SATA::read(unsigned long long, int, void*)+0x43>
c00208df:	3c 1c                	cmp    al,0x1c
c00208e1:	74 f6                	je     c00208d9 <SATA::read(unsigned long long, int, void*)+0x43>
c00208e3:	8d 53 ff             	lea    edx,[ebx-0x1]
c00208e6:	b8 04 00 00 00       	mov    eax,0x4
c00208eb:	81 fa fe 00 00 00    	cmp    edx,0xfe
c00208f1:	0f 87 96 00 00 00    	ja     c002098d <SATA::read(unsigned long long, int, void*)+0xf7>
c00208f7:	b8 06 00 00 00       	mov    eax,0x6
c00208fc:	85 ed                	test   ebp,ebp
c00208fe:	0f 84 89 00 00 00    	je     c002098d <SATA::read(unsigned long long, int, void*)+0xf7>
c0020904:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c002090b:	74 2d                	je     c002093a <SATA::read(unsigned long long, int, void*)+0xa4>
c002090d:	83 ec 0c             	sub    esp,0xc
c0020910:	68 3e 6a 02 c0       	push   0xc0026a3e
c0020915:	e8 4f 91 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c002091a:	83 c4 10             	add    esp,0x10
c002091d:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0020924:	75 14                	jne    c002093a <SATA::read(unsigned long long, int, void*)+0xa4>
c0020926:	e4 60                	in     al,0x60
c0020928:	3c 5a                	cmp    al,0x5a
c002092a:	74 04                	je     c0020930 <SATA::read(unsigned long long, int, void*)+0x9a>
c002092c:	3c 1c                	cmp    al,0x1c
c002092e:	75 f6                	jne    c0020926 <SATA::read(unsigned long long, int, void*)+0x90>
c0020930:	e4 60                	in     al,0x60
c0020932:	3c 5a                	cmp    al,0x5a
c0020934:	74 fa                	je     c0020930 <SATA::read(unsigned long long, int, void*)+0x9a>
c0020936:	3c 1c                	cmp    al,0x1c
c0020938:	74 f6                	je     c0020930 <SATA::read(unsigned long long, int, void*)+0x9a>
c002093a:	50                   	push   eax
c002093b:	50                   	push   eax
c002093c:	6a 00                	push   0x0
c002093e:	55                   	push   ebp
c002093f:	53                   	push   ebx
c0020940:	57                   	push   edi
c0020941:	56                   	push   esi
c0020942:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020946:	e8 53 f9 ff ff       	call   c002029e <SATA::access(unsigned long long, int, void*, bool)>
c002094b:	83 c4 20             	add    esp,0x20
c002094e:	89 c3                	mov    ebx,eax
c0020950:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0020957:	74 2d                	je     c0020986 <SATA::read(unsigned long long, int, void*)+0xf0>
c0020959:	83 ec 0c             	sub    esp,0xc
c002095c:	68 4b 6a 02 c0       	push   0xc0026a4b
c0020961:	e8 03 91 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020966:	83 c4 10             	add    esp,0x10
c0020969:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0020970:	75 14                	jne    c0020986 <SATA::read(unsigned long long, int, void*)+0xf0>
c0020972:	e4 60                	in     al,0x60
c0020974:	3c 5a                	cmp    al,0x5a
c0020976:	74 04                	je     c002097c <SATA::read(unsigned long long, int, void*)+0xe6>
c0020978:	3c 1c                	cmp    al,0x1c
c002097a:	75 f6                	jne    c0020972 <SATA::read(unsigned long long, int, void*)+0xdc>
c002097c:	e4 60                	in     al,0x60
c002097e:	3c 5a                	cmp    al,0x5a
c0020980:	74 fa                	je     c002097c <SATA::read(unsigned long long, int, void*)+0xe6>
c0020982:	3c 1c                	cmp    al,0x1c
c0020984:	74 f6                	je     c002097c <SATA::read(unsigned long long, int, void*)+0xe6>
c0020986:	31 c0                	xor    eax,eax
c0020988:	85 db                	test   ebx,ebx
c002098a:	0f 95 c0             	setne  al
c002098d:	83 c4 0c             	add    esp,0xc
c0020990:	5b                   	pop    ebx
c0020991:	5e                   	pop    esi
c0020992:	5f                   	pop    edi
c0020993:	5d                   	pop    ebp
c0020994:	c3                   	ret    
c0020995:	90                   	nop

c0020996 <SATA::write(unsigned long long, int, void*)>:
c0020996:	55                   	push   ebp
c0020997:	57                   	push   edi
c0020998:	56                   	push   esi
c0020999:	53                   	push   ebx
c002099a:	83 ec 1c             	sub    esp,0x1c
c002099d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00209a1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00209a5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00209a9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00209ad:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c00209b4:	74 2d                	je     c00209e3 <SATA::write(unsigned long long, int, void*)+0x4d>
c00209b6:	83 ec 0c             	sub    esp,0xc
c00209b9:	68 58 6a 02 c0       	push   0xc0026a58
c00209be:	e8 a6 90 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00209c3:	83 c4 10             	add    esp,0x10
c00209c6:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c00209cd:	75 14                	jne    c00209e3 <SATA::write(unsigned long long, int, void*)+0x4d>
c00209cf:	e4 60                	in     al,0x60
c00209d1:	3c 1c                	cmp    al,0x1c
c00209d3:	74 04                	je     c00209d9 <SATA::write(unsigned long long, int, void*)+0x43>
c00209d5:	3c 5a                	cmp    al,0x5a
c00209d7:	75 f6                	jne    c00209cf <SATA::write(unsigned long long, int, void*)+0x39>
c00209d9:	e4 60                	in     al,0x60
c00209db:	3c 5a                	cmp    al,0x5a
c00209dd:	74 fa                	je     c00209d9 <SATA::write(unsigned long long, int, void*)+0x43>
c00209df:	3c 1c                	cmp    al,0x1c
c00209e1:	74 f6                	je     c00209d9 <SATA::write(unsigned long long, int, void*)+0x43>
c00209e3:	8d 55 ff             	lea    edx,[ebp-0x1]
c00209e6:	b8 04 00 00 00       	mov    eax,0x4
c00209eb:	81 fa fe 00 00 00    	cmp    edx,0xfe
c00209f1:	0f 87 bd 00 00 00    	ja     c0020ab4 <SATA::write(unsigned long long, int, void*)+0x11e>
c00209f7:	b8 06 00 00 00       	mov    eax,0x6
c00209fc:	85 db                	test   ebx,ebx
c00209fe:	0f 84 b0 00 00 00    	je     c0020ab4 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020a04:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0020a0b:	74 2d                	je     c0020a3a <SATA::write(unsigned long long, int, void*)+0xa4>
c0020a0d:	83 ec 0c             	sub    esp,0xc
c0020a10:	68 66 6a 02 c0       	push   0xc0026a66
c0020a15:	e8 4f 90 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020a1a:	83 c4 10             	add    esp,0x10
c0020a1d:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0020a24:	75 14                	jne    c0020a3a <SATA::write(unsigned long long, int, void*)+0xa4>
c0020a26:	e4 60                	in     al,0x60
c0020a28:	3c 1c                	cmp    al,0x1c
c0020a2a:	74 04                	je     c0020a30 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020a2c:	3c 5a                	cmp    al,0x5a
c0020a2e:	75 f6                	jne    c0020a26 <SATA::write(unsigned long long, int, void*)+0x90>
c0020a30:	e4 60                	in     al,0x60
c0020a32:	3c 5a                	cmp    al,0x5a
c0020a34:	74 fa                	je     c0020a30 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020a36:	3c 1c                	cmp    al,0x1c
c0020a38:	74 f6                	je     c0020a30 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020a3a:	c1 e5 09             	shl    ebp,0x9
c0020a3d:	01 dd                	add    ebp,ebx
c0020a3f:	89 f0                	mov    eax,esi
c0020a41:	89 fa                	mov    edx,edi
c0020a43:	83 c0 01             	add    eax,0x1
c0020a46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020a4a:	83 d2 00             	adc    edx,0x0
c0020a4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020a51:	50                   	push   eax
c0020a52:	50                   	push   eax
c0020a53:	6a 01                	push   0x1
c0020a55:	53                   	push   ebx
c0020a56:	81 c3 00 02 00 00    	add    ebx,0x200
c0020a5c:	6a 01                	push   0x1
c0020a5e:	57                   	push   edi
c0020a5f:	56                   	push   esi
c0020a60:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020a64:	e8 35 f8 ff ff       	call   c002029e <SATA::access(unsigned long long, int, void*, bool)>
c0020a69:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0020a6d:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0020a71:	83 c4 20             	add    esp,0x20
c0020a74:	39 dd                	cmp    ebp,ebx
c0020a76:	75 c7                	jne    c0020a3f <SATA::write(unsigned long long, int, void*)+0xa9>
c0020a78:	f6 05 c1 7c 02 c0 08 	test   BYTE PTR ds:0xc0027cc1,0x8
c0020a7f:	75 04                	jne    c0020a85 <SATA::write(unsigned long long, int, void*)+0xef>
c0020a81:	31 c0                	xor    eax,eax
c0020a83:	eb 2f                	jmp    c0020ab4 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020a85:	83 ec 0c             	sub    esp,0xc
c0020a88:	68 74 6a 02 c0       	push   0xc0026a74
c0020a8d:	e8 d7 8f fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020a92:	83 c4 10             	add    esp,0x10
c0020a95:	f6 05 c0 7c 02 c0 80 	test   BYTE PTR ds:0xc0027cc0,0x80
c0020a9c:	75 e3                	jne    c0020a81 <SATA::write(unsigned long long, int, void*)+0xeb>
c0020a9e:	e4 60                	in     al,0x60
c0020aa0:	3c 5a                	cmp    al,0x5a
c0020aa2:	74 04                	je     c0020aa8 <SATA::write(unsigned long long, int, void*)+0x112>
c0020aa4:	3c 1c                	cmp    al,0x1c
c0020aa6:	75 f6                	jne    c0020a9e <SATA::write(unsigned long long, int, void*)+0x108>
c0020aa8:	e4 60                	in     al,0x60
c0020aaa:	3c 5a                	cmp    al,0x5a
c0020aac:	74 fa                	je     c0020aa8 <SATA::write(unsigned long long, int, void*)+0x112>
c0020aae:	3c 1c                	cmp    al,0x1c
c0020ab0:	74 f6                	je     c0020aa8 <SATA::write(unsigned long long, int, void*)+0x112>
c0020ab2:	eb cd                	jmp    c0020a81 <SATA::write(unsigned long long, int, void*)+0xeb>
c0020ab4:	83 c4 1c             	add    esp,0x1c
c0020ab7:	5b                   	pop    ebx
c0020ab8:	5e                   	pop    esi
c0020ab9:	5f                   	pop    edi
c0020aba:	5d                   	pop    ebp
c0020abb:	c3                   	ret    

c0020abc <SATAPI::write(unsigned long long, int, void*)>:
c0020abc:	b8 03 00 00 00       	mov    eax,0x3
c0020ac1:	c3                   	ret    

c0020ac2 <SATAPI::close(int, int, void*)>:
c0020ac2:	83 ec 0c             	sub    esp,0xc
c0020ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ac9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020acf:	85 c0                	test   eax,eax
c0020ad1:	74 0c                	je     c0020adf <SATAPI::close(int, int, void*)+0x1d>
c0020ad3:	83 ec 0c             	sub    esp,0xc
c0020ad6:	8b 10                	mov    edx,DWORD PTR [eax]
c0020ad8:	50                   	push   eax
c0020ad9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020adc:	83 c4 10             	add    esp,0x10
c0020adf:	31 c0                	xor    eax,eax
c0020ae1:	83 c4 0c             	add    esp,0xc
c0020ae4:	c3                   	ret    
c0020ae5:	90                   	nop

c0020ae6 <SATAPI::SATAPI()>:
c0020ae6:	83 ec 0c             	sub    esp,0xc
c0020ae9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020aed:	83 ec 04             	sub    esp,0x4
c0020af0:	68 00 08 00 00       	push   0x800
c0020af5:	68 bc 6a 02 c0       	push   0xc0026abc
c0020afa:	50                   	push   eax
c0020afb:	e8 be da fe ff       	call   c000e5be <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020b00:	83 c4 10             	add    esp,0x10
c0020b03:	ba 8c 6b 02 c0       	mov    edx,0xc0026b8c
c0020b08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b0c:	89 10                	mov    DWORD PTR [eax],edx
c0020b0e:	90                   	nop
c0020b0f:	83 c4 0c             	add    esp,0xc
c0020b12:	c3                   	ret    
c0020b13:	90                   	nop

c0020b14 <SATAPI::diskRemoved()>:
c0020b14:	53                   	push   ebx
c0020b15:	83 ec 14             	sub    esp,0x14
c0020b18:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020b1c:	68 c8 6a 02 c0       	push   0xc0026ac8
c0020b21:	e8 d9 c1 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0020b26:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0020b2d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0020b33:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020b37:	83 c4 18             	add    esp,0x18
c0020b3a:	5b                   	pop    ebx
c0020b3b:	e9 a6 f8 fe ff       	jmp    c00103e6 <LogicalDisk::unmount()>

c0020b40 <SATAPI::diskInserted()>:
c0020b40:	83 ec 18             	sub    esp,0x18
c0020b43:	68 df 6a 02 c0       	push   0xc0026adf
c0020b48:	e8 b2 c1 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0020b4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020b51:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0020b58:	83 c4 1c             	add    esp,0x1c
c0020b5b:	c3                   	ret    

c0020b5c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0020b5c:	55                   	push   ebp
c0020b5d:	57                   	push   edi
c0020b5e:	56                   	push   esi
c0020b5f:	53                   	push   ebx
c0020b60:	83 ec 34             	sub    esp,0x34
c0020b63:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0020b67:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020b6b:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0020b6f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020b73:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0020b77:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0020b7d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020b83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020b87:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0020b8d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020b91:	c1 e0 07             	shl    eax,0x7
c0020b94:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020b98:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020b9c:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020ba6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020baa:	8d 58 02             	lea    ebx,[eax+0x2]
c0020bad:	c1 e3 07             	shl    ebx,0x7
c0020bb0:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0020bb4:	53                   	push   ebx
c0020bb5:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020bbb:	e8 22 e3 ff ff       	call   c001eee2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020bc0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020bc4:	83 c4 10             	add    esp,0x10
c0020bc7:	b8 01 00 00 00       	mov    eax,0x1
c0020bcc:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020bd1:	0f 84 04 02 00 00    	je     c0020ddb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27f>
c0020bd7:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020bdd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020bdf:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020be5:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020beb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020bef:	c1 e1 05             	shl    ecx,0x5
c0020bf2:	01 c8                	add    eax,ecx
c0020bf4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020bf6:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020bfc:	81 c9 25 00 01 00    	or     ecx,0x10025
c0020c02:	89 08                	mov    DWORD PTR [eax],ecx
c0020c04:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020c0a:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0020c10:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0020c16:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0020c19:	8d 7b 40             	lea    edi,[ebx+0x40]
c0020c1c:	50                   	push   eax
c0020c1d:	68 90 00 00 00       	push   0x90
c0020c22:	6a 00                	push   0x0
c0020c24:	53                   	push   ebx
c0020c25:	e8 5a fa fd ff       	call   c0000684 <memset>
c0020c2a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0020c2e:	b9 0c 00 00 00       	mov    ecx,0xc
c0020c33:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020c35:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0020c3b:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0020c3f:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0020c45:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0020c49:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020c4d:	48                   	dec    eax
c0020c4e:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020c53:	89 c1                	mov    ecx,eax
c0020c55:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020c5b:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020c60:	09 c8                	or     eax,ecx
c0020c62:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0020c68:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0020c6b:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0020c72:	66 25 00 7f          	and    ax,0x7f00
c0020c76:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020c7a:	66 0d 27 80          	or     ax,0x8027
c0020c7e:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0020c82:	66 89 03             	mov    WORD PTR [ebx],ax
c0020c85:	89 d0                	mov    eax,edx
c0020c87:	c1 ea 18             	shr    edx,0x18
c0020c8a:	c1 e8 10             	shr    eax,0x10
c0020c8d:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0020c90:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0020c93:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0020c97:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0020c9a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020c9e:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0020ca1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020ca5:	83 c4 10             	add    esp,0x10
c0020ca8:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0020cac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020cb0:	31 c0                	xor    eax,eax
c0020cb2:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0020cb8:	80 e1 88             	and    cl,0x88
c0020cbb:	74 0a                	je     c0020cc7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0020cbd:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020cc2:	74 0a                	je     c0020cce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0020cc4:	40                   	inc    eax
c0020cc5:	eb eb                	jmp    c0020cb2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0020cc7:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020ccc:	75 0f                	jne    c0020cdd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0020cce:	83 ec 0c             	sub    esp,0xc
c0020cd1:	68 c2 69 02 c0       	push   0xc00269c2
c0020cd6:	e8 d4 3b ff ff       	call   c00148af <Krnl::panic(char const*)>
c0020cdb:	eb 48                	jmp    c0020d25 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c9>
c0020cdd:	be 01 00 00 00       	mov    esi,0x1
c0020ce2:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020ce6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020cea:	d3 e6                	shl    esi,cl
c0020cec:	c1 e7 07             	shl    edi,0x7
c0020cef:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0020cf5:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c0020cfa:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0020cfe:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0020d04:	85 c6                	test   esi,eax
c0020d06:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0020d0c:	0f 84 96 00 00 00    	je     c0020da8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24c>
c0020d12:	0f ba e0 1e          	bt     eax,0x1e
c0020d16:	73 1a                	jae    c0020d32 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d6>
c0020d18:	83 ec 0c             	sub    esp,0xc
c0020d1b:	68 f7 6a 02 c0       	push   0xc0026af7
c0020d20:	e8 da bf fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0020d25:	83 c4 10             	add    esp,0x10
c0020d28:	b8 01 00 00 00       	mov    eax,0x1
c0020d2d:	e9 a9 00 00 00       	jmp    c0020ddb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27f>
c0020d32:	83 fb 0d             	cmp    ebx,0xd
c0020d35:	77 12                	ja     c0020d49 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ed>
c0020d37:	83 ec 0c             	sub    esp,0xc
c0020d3a:	68 c8 00 00 00       	push   0xc8
c0020d3f:	e8 9c 7b ff ff       	call   c00188e0 <milliTenthSleep(unsigned int)>
c0020d44:	83 c4 10             	add    esp,0x10
c0020d47:	eb 2a                	jmp    c0020d73 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x217>
c0020d49:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c0020d4f:	83 f8 0d             	cmp    eax,0xd
c0020d52:	77 0a                	ja     c0020d5e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x202>
c0020d54:	83 ec 0c             	sub    esp,0xc
c0020d57:	68 58 02 00 00       	push   0x258
c0020d5c:	eb 28                	jmp    c0020d86 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x22a>
c0020d5e:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c0020d64:	83 f8 0d             	cmp    eax,0xd
c0020d67:	77 0a                	ja     c0020d73 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x217>
c0020d69:	83 ec 0c             	sub    esp,0xc
c0020d6c:	68 dc 05 00 00       	push   0x5dc
c0020d71:	eb 13                	jmp    c0020d86 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x22a>
c0020d73:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c0020d79:	83 f8 0d             	cmp    eax,0xd
c0020d7c:	77 10                	ja     c0020d8e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x232>
c0020d7e:	83 ec 0c             	sub    esp,0xc
c0020d81:	68 c4 09 00 00       	push   0x9c4
c0020d86:	e8 55 7b ff ff       	call   c00188e0 <milliTenthSleep(unsigned int)>
c0020d8b:	83 c4 10             	add    esp,0x10
c0020d8e:	43                   	inc    ebx
c0020d8f:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c0020d95:	0f 85 63 ff ff ff    	jne    c0020cfe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1a2>
c0020d9b:	83 ec 0c             	sub    esp,0xc
c0020d9e:	68 0a 6b 02 c0       	push   0xc0026b0a
c0020da3:	e9 78 ff ff ff       	jmp    c0020d20 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c4>
c0020da8:	0f ba e0 1e          	bt     eax,0x1e
c0020dac:	73 0d                	jae    c0020dbb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c0020dae:	83 ec 0c             	sub    esp,0xc
c0020db1:	68 1e 6b 02 c0       	push   0xc0026b1e
c0020db6:	e9 65 ff ff ff       	jmp    c0020d20 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c4>
c0020dbb:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0020dc0:	74 17                	je     c0020dd9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27d>
c0020dc2:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0020dc7:	74 10                	je     c0020dd9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27d>
c0020dc9:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0020dcf:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0020dd3:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0020dd7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020dd9:	31 c0                	xor    eax,eax
c0020ddb:	83 c4 2c             	add    esp,0x2c
c0020dde:	5b                   	pop    ebx
c0020ddf:	5e                   	pop    esi
c0020de0:	5f                   	pop    edi
c0020de1:	5d                   	pop    ebp
c0020de2:	c3                   	ret    
c0020de3:	90                   	nop

c0020de4 <SATAPI::eject()>:
c0020de4:	57                   	push   edi
c0020de5:	b9 03 00 00 00       	mov    ecx,0x3
c0020dea:	53                   	push   ebx
c0020deb:	83 ec 14             	sub    esp,0x14
c0020dee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020df2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020df6:	fc                   	cld    
c0020df7:	31 c0                	xor    eax,eax
c0020df9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020dfb:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020e00:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020e05:	50                   	push   eax
c0020e06:	6a 00                	push   0x0
c0020e08:	6a 00                	push   0x0
c0020e0a:	6a 00                	push   0x0
c0020e0c:	6a 00                	push   0x0
c0020e0e:	6a 02                	push   0x2
c0020e10:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020e14:	50                   	push   eax
c0020e15:	53                   	push   ebx
c0020e16:	e8 41 fd ff ff       	call   c0020b5c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020e1b:	83 c4 20             	add    esp,0x20
c0020e1e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020e25:	74 0c                	je     c0020e33 <SATAPI::eject()+0x4f>
c0020e27:	83 ec 0c             	sub    esp,0xc
c0020e2a:	53                   	push   ebx
c0020e2b:	e8 e4 fc ff ff       	call   c0020b14 <SATAPI::diskRemoved()>
c0020e30:	83 c4 10             	add    esp,0x10
c0020e33:	83 c4 14             	add    esp,0x14
c0020e36:	31 c0                	xor    eax,eax
c0020e38:	5b                   	pop    ebx
c0020e39:	5f                   	pop    edi
c0020e3a:	c3                   	ret    
c0020e3b:	90                   	nop

c0020e3c <SATAPI::detectMedia()>:
c0020e3c:	56                   	push   esi
c0020e3d:	53                   	push   ebx
c0020e3e:	83 ec 28             	sub    esp,0x28
c0020e41:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020e45:	6a 0c                	push   0xc
c0020e47:	6a 00                	push   0x0
c0020e49:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0020e4d:	56                   	push   esi
c0020e4e:	e8 31 f8 fd ff       	call   c0000684 <memset>
c0020e53:	83 c4 0c             	add    esp,0xc
c0020e56:	6a 00                	push   0x0
c0020e58:	6a 00                	push   0x0
c0020e5a:	6a 00                	push   0x0
c0020e5c:	6a 00                	push   0x0
c0020e5e:	6a 00                	push   0x0
c0020e60:	56                   	push   esi
c0020e61:	53                   	push   ebx
c0020e62:	e8 f5 fc ff ff       	call   c0020b5c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020e67:	83 c4 20             	add    esp,0x20
c0020e6a:	48                   	dec    eax
c0020e6b:	75 17                	jne    c0020e84 <SATAPI::detectMedia()+0x48>
c0020e6d:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020e74:	74 0e                	je     c0020e84 <SATAPI::detectMedia()+0x48>
c0020e76:	83 ec 0c             	sub    esp,0xc
c0020e79:	53                   	push   ebx
c0020e7a:	e8 95 fc ff ff       	call   c0020b14 <SATAPI::diskRemoved()>
c0020e7f:	e9 91 00 00 00       	jmp    c0020f15 <SATAPI::detectMedia()+0xd9>
c0020e84:	50                   	push   eax
c0020e85:	6a 0c                	push   0xc
c0020e87:	6a 00                	push   0x0
c0020e89:	56                   	push   esi
c0020e8a:	e8 f5 f7 fd ff       	call   c0000684 <memset>
c0020e8f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0020e94:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0020e99:	83 c4 0c             	add    esp,0xc
c0020e9c:	6a 01                	push   0x1
c0020e9e:	8d 44 24 16          	lea    eax,[esp+0x16]
c0020ea2:	50                   	push   eax
c0020ea3:	6a 00                	push   0x0
c0020ea5:	6a 00                	push   0x0
c0020ea7:	6a 12                	push   0x12
c0020ea9:	56                   	push   esi
c0020eaa:	53                   	push   ebx
c0020eab:	e8 ac fc ff ff       	call   c0020b5c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020eb0:	83 c4 20             	add    esp,0x20
c0020eb3:	48                   	dec    eax
c0020eb4:	75 09                	jne    c0020ebf <SATAPI::detectMedia()+0x83>
c0020eb6:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020ebd:	75 b7                	jne    c0020e76 <SATAPI::detectMedia()+0x3a>
c0020ebf:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0020ec3:	83 e0 7f             	and    eax,0x7f
c0020ec6:	3c 70                	cmp    al,0x70
c0020ec8:	74 15                	je     c0020edf <SATAPI::detectMedia()+0xa3>
c0020eca:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020ed1:	75 0c                	jne    c0020edf <SATAPI::detectMedia()+0xa3>
c0020ed3:	83 ec 0c             	sub    esp,0xc
c0020ed6:	53                   	push   ebx
c0020ed7:	e8 64 fc ff ff       	call   c0020b40 <SATAPI::diskInserted()>
c0020edc:	83 c4 10             	add    esp,0x10
c0020edf:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020ee3:	83 e0 0f             	and    eax,0xf
c0020ee6:	3c 02                	cmp    al,0x2
c0020ee8:	75 15                	jne    c0020eff <SATAPI::detectMedia()+0xc3>
c0020eea:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0020eef:	75 27                	jne    c0020f18 <SATAPI::detectMedia()+0xdc>
c0020ef1:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020ef8:	74 1e                	je     c0020f18 <SATAPI::detectMedia()+0xdc>
c0020efa:	e9 77 ff ff ff       	jmp    c0020e76 <SATAPI::detectMedia()+0x3a>
c0020eff:	84 c0                	test   al,al
c0020f01:	75 15                	jne    c0020f18 <SATAPI::detectMedia()+0xdc>
c0020f03:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020f0a:	75 0c                	jne    c0020f18 <SATAPI::detectMedia()+0xdc>
c0020f0c:	83 ec 0c             	sub    esp,0xc
c0020f0f:	53                   	push   ebx
c0020f10:	e8 2b fc ff ff       	call   c0020b40 <SATAPI::diskInserted()>
c0020f15:	83 c4 10             	add    esp,0x10
c0020f18:	83 c4 24             	add    esp,0x24
c0020f1b:	5b                   	pop    ebx
c0020f1c:	5e                   	pop    esi
c0020f1d:	c3                   	ret    

c0020f1e <SATAPI::open(int, int, void*)>:
c0020f1e:	56                   	push   esi
c0020f1f:	53                   	push   ebx
c0020f20:	51                   	push   ecx
c0020f21:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020f25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020f29:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020f33:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020f39:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020f43:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f47:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020f51:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020f57:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020f5e:	e8 63 91 fe ff       	call   c000a0c6 <Phys::allocatePage()>
c0020f63:	89 c6                	mov    esi,eax
c0020f65:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0020f6b:	81 c6 00 10 00 00    	add    esi,0x1000
c0020f71:	e8 50 91 fe ff       	call   c000a0c6 <Phys::allocatePage()>
c0020f76:	39 c6                	cmp    esi,eax
c0020f78:	74 10                	je     c0020f8a <SATAPI::open(int, int, void*)+0x6c>
c0020f7a:	83 ec 0c             	sub    esp,0xc
c0020f7d:	68 33 6b 02 c0       	push   0xc0026b33
c0020f82:	e8 28 39 ff ff       	call   c00148af <Krnl::panic(char const*)>
c0020f87:	83 c4 10             	add    esp,0x10
c0020f8a:	83 ec 0c             	sub    esp,0xc
c0020f8d:	6a 02                	push   0x2
c0020f8f:	e8 45 aa fe ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c0020f94:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0020f9a:	6a 03                	push   0x3
c0020f9c:	50                   	push   eax
c0020f9d:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0020fa3:	ff 35 d0 7d 02 c0    	push   DWORD PTR ds:0xc0027dd0
c0020fa9:	e8 d2 b0 fe ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c0020fae:	83 c4 14             	add    esp,0x14
c0020fb1:	68 74 01 00 00       	push   0x174
c0020fb6:	e8 54 8a fe ff       	call   c0009a0f <malloc>
c0020fbb:	83 c4 0c             	add    esp,0xc
c0020fbe:	89 c6                	mov    esi,eax
c0020fc0:	6a 00                	push   0x0
c0020fc2:	68 ff ff ff 7f       	push   0x7fffffff
c0020fc7:	6a 00                	push   0x0
c0020fc9:	6a 00                	push   0x0
c0020fcb:	53                   	push   ebx
c0020fcc:	68 49 6b 02 c0       	push   0xc0026b49
c0020fd1:	50                   	push   eax
c0020fd2:	e8 5b f2 fe ff       	call   c0010232 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020fd7:	83 c4 14             	add    esp,0x14
c0020fda:	56                   	push   esi
c0020fdb:	e8 08 f3 fe ff       	call   c00102e8 <LogicalDisk::assignDriveLetter()>
c0020fe0:	58                   	pop    eax
c0020fe1:	5a                   	pop    edx
c0020fe2:	56                   	push   esi
c0020fe3:	53                   	push   ebx
c0020fe4:	e8 9d d1 fe ff       	call   c000e186 <Device::addChild(Device*)>
c0020fe9:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c0020fef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020ff2:	e8 2f d6 fe ff       	call   c000e626 <PhysicalDisk::startCache()>
c0020ff7:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0020ffe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021001:	e8 36 fe ff ff       	call   c0020e3c <SATAPI::detectMedia()>
c0021006:	83 c4 14             	add    esp,0x14
c0021009:	31 c0                	xor    eax,eax
c002100b:	5b                   	pop    ebx
c002100c:	5e                   	pop    esi
c002100d:	c3                   	ret    

c002100e <SATAPI::read(unsigned long long, int, void*)>:
c002100e:	55                   	push   ebp
c002100f:	57                   	push   edi
c0021010:	56                   	push   esi
c0021011:	53                   	push   ebx
c0021012:	83 ec 1c             	sub    esp,0x1c
c0021015:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021019:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002101d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0021021:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0021028:	74 19                	je     c0021043 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002102a:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c002102f:	7e 2e                	jle    c002105f <SATAPI::read(unsigned long long, int, void*)+0x51>
c0021031:	83 ec 0c             	sub    esp,0xc
c0021034:	68 57 6b 02 c0       	push   0xc0026b57
c0021039:	e8 71 38 ff ff       	call   c00148af <Krnl::panic(char const*)>
c002103e:	83 c4 10             	add    esp,0x10
c0021041:	eb 1c                	jmp    c002105f <SATAPI::read(unsigned long long, int, void*)+0x51>
c0021043:	83 ec 0c             	sub    esp,0xc
c0021046:	55                   	push   ebp
c0021047:	e8 f0 fd ff ff       	call   c0020e3c <SATAPI::detectMedia()>
c002104c:	83 c4 10             	add    esp,0x10
c002104f:	b8 02 00 00 00       	mov    eax,0x2
c0021054:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002105b:	75 cd                	jne    c002102a <SATAPI::read(unsigned long long, int, void*)+0x1c>
c002105d:	eb 49                	jmp    c00210a8 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c002105f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021063:	b9 03 00 00 00       	mov    ecx,0x3
c0021068:	fc                   	cld    
c0021069:	31 c0                	xor    eax,eax
c002106b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002106d:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0021072:	89 d8                	mov    eax,ebx
c0021074:	86 e0                	xchg   al,ah
c0021076:	c1 c0 10             	rol    eax,0x10
c0021079:	86 e0                	xchg   al,ah
c002107b:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c002107f:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0021083:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0021087:	50                   	push   eax
c0021088:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002108c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0021090:	56                   	push   esi
c0021091:	53                   	push   ebx
c0021092:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021096:	c1 e0 0b             	shl    eax,0xb
c0021099:	50                   	push   eax
c002109a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002109e:	50                   	push   eax
c002109f:	55                   	push   ebp
c00210a0:	e8 b7 fa ff ff       	call   c0020b5c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00210a5:	83 c4 20             	add    esp,0x20
c00210a8:	83 c4 1c             	add    esp,0x1c
c00210ab:	5b                   	pop    ebx
c00210ac:	5e                   	pop    esi
c00210ad:	5f                   	pop    edi
c00210ae:	5d                   	pop    ebp
c00210af:	c3                   	ret    

c00210b0 <AVX::open(int, int, void*)>:
c00210b0:	83 ec 0c             	sub    esp,0xc
c00210b3:	e8 30 11 00 00       	call   c00221e8 <avxInit>
c00210b8:	b8 00 00 00 00       	mov    eax,0x0
c00210bd:	83 c4 0c             	add    esp,0xc
c00210c0:	c3                   	ret    
c00210c1:	90                   	nop
c00210c2:	66 90                	xchg   ax,ax

c00210c4 <AVX::close(int, int, void*)>:
c00210c4:	83 ec 0c             	sub    esp,0xc
c00210c7:	e8 1d 11 00 00       	call   c00221e9 <avxClose>
c00210cc:	b8 00 00 00 00       	mov    eax,0x0
c00210d1:	83 c4 0c             	add    esp,0xc
c00210d4:	c3                   	ret    
c00210d5:	90                   	nop
c00210d6:	66 90                	xchg   ax,ax

c00210d8 <AVX::available()>:
c00210d8:	83 ec 0c             	sub    esp,0xc
c00210db:	e8 00 11 00 00       	call   c00221e0 <avxDetect>
c00210e0:	85 c0                	test   eax,eax
c00210e2:	0f 95 c0             	setne  al
c00210e5:	83 c4 0c             	add    esp,0xc
c00210e8:	c3                   	ret    
c00210e9:	90                   	nop
c00210ea:	66 90                	xchg   ax,ax

c00210ec <AVX::save(void*)>:
c00210ec:	83 ec 0c             	sub    esp,0xc
c00210ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00210f3:	83 ec 0c             	sub    esp,0xc
c00210f6:	50                   	push   eax
c00210f7:	e8 ea 10 00 00       	call   c00221e6 <avxSave>
c00210fc:	83 c4 10             	add    esp,0x10
c00210ff:	90                   	nop
c0021100:	83 c4 0c             	add    esp,0xc
c0021103:	c3                   	ret    

c0021104 <AVX::load(void*)>:
c0021104:	83 ec 0c             	sub    esp,0xc
c0021107:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002110b:	83 ec 0c             	sub    esp,0xc
c002110e:	50                   	push   eax
c002110f:	e8 d3 10 00 00       	call   c00221e7 <avxLoad>
c0021114:	83 c4 10             	add    esp,0x10
c0021117:	90                   	nop
c0021118:	83 c4 0c             	add    esp,0xc
c002111b:	c3                   	ret    

c002111c <AVX::AVX()>:
c002111c:	83 ec 0c             	sub    esp,0xc
c002111f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021123:	83 ec 08             	sub    esp,0x8
c0021126:	68 bc 6b 02 c0       	push   0xc0026bbc
c002112b:	50                   	push   eax
c002112c:	e8 6b d5 fe ff       	call   c000e69c <FPU::FPU(char const*)>
c0021131:	83 c4 10             	add    esp,0x10
c0021134:	ba cc 6b 02 c0       	mov    edx,0xc0026bcc
c0021139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002113d:	89 10                	mov    DWORD PTR [eax],edx
c002113f:	90                   	nop
c0021140:	83 c4 0c             	add    esp,0xc
c0021143:	c3                   	ret    

c0021144 <MMX::available()>:
c0021144:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0021149:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002114f:	83 e0 20             	and    eax,0x20
c0021152:	84 c0                	test   al,al
c0021154:	0f 95 c0             	setne  al
c0021157:	c3                   	ret    

c0021158 <MMX::open(int, int, void*)>:
c0021158:	83 ec 0c             	sub    esp,0xc
c002115b:	e8 12 11 00 00       	call   c0022272 <x87Init>
c0021160:	b8 00 00 00 00       	mov    eax,0x0
c0021165:	83 c4 0c             	add    esp,0xc
c0021168:	c3                   	ret    
c0021169:	90                   	nop
c002116a:	66 90                	xchg   ax,ax

c002116c <MMX::close(int, int, void*)>:
c002116c:	83 ec 0c             	sub    esp,0xc
c002116f:	e8 18 11 00 00       	call   c002228c <x87Close>
c0021174:	b8 00 00 00 00       	mov    eax,0x0
c0021179:	83 c4 0c             	add    esp,0xc
c002117c:	c3                   	ret    
c002117d:	90                   	nop
c002117e:	66 90                	xchg   ax,ax

c0021180 <MMX::save(void*)>:
c0021180:	83 ec 0c             	sub    esp,0xc
c0021183:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021187:	83 ec 0c             	sub    esp,0xc
c002118a:	50                   	push   eax
c002118b:	e8 d1 10 00 00       	call   c0022261 <x87Save>
c0021190:	83 c4 10             	add    esp,0x10
c0021193:	90                   	nop
c0021194:	83 c4 0c             	add    esp,0xc
c0021197:	c3                   	ret    

c0021198 <MMX::load(void*)>:
c0021198:	83 ec 0c             	sub    esp,0xc
c002119b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002119f:	83 ec 0c             	sub    esp,0xc
c00211a2:	50                   	push   eax
c00211a3:	e8 c2 10 00 00       	call   c002226a <x87Load>
c00211a8:	83 c4 10             	add    esp,0x10
c00211ab:	90                   	nop
c00211ac:	83 c4 0c             	add    esp,0xc
c00211af:	c3                   	ret    

c00211b0 <MMX::MMX()>:
c00211b0:	83 ec 0c             	sub    esp,0xc
c00211b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211b7:	83 ec 08             	sub    esp,0x8
c00211ba:	68 fc 6b 02 c0       	push   0xc0026bfc
c00211bf:	50                   	push   eax
c00211c0:	e8 d7 d4 fe ff       	call   c000e69c <FPU::FPU(char const*)>
c00211c5:	83 c4 10             	add    esp,0x10
c00211c8:	ba 0c 6c 02 c0       	mov    edx,0xc0026c0c
c00211cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211d1:	89 10                	mov    DWORD PTR [eax],edx
c00211d3:	90                   	nop
c00211d4:	83 c4 0c             	add    esp,0xc
c00211d7:	c3                   	ret    

c00211d8 <SSE::open(int, int, void*)>:
c00211d8:	83 ec 0c             	sub    esp,0xc
c00211db:	e8 44 10 00 00       	call   c0022224 <sseInit>
c00211e0:	b8 00 00 00 00       	mov    eax,0x0
c00211e5:	83 c4 0c             	add    esp,0xc
c00211e8:	c3                   	ret    
c00211e9:	90                   	nop
c00211ea:	66 90                	xchg   ax,ax

c00211ec <SSE::close(int, int, void*)>:
c00211ec:	83 ec 0c             	sub    esp,0xc
c00211ef:	e8 40 10 00 00       	call   c0022234 <sseClose>
c00211f4:	b8 00 00 00 00       	mov    eax,0x0
c00211f9:	83 c4 0c             	add    esp,0xc
c00211fc:	c3                   	ret    
c00211fd:	90                   	nop
c00211fe:	66 90                	xchg   ax,ax

c0021200 <SSE::available()>:
c0021200:	83 ec 1c             	sub    esp,0x1c
c0021203:	e8 f8 0f 00 00       	call   c0022200 <absolutelyNoChanceInHell>
c0021208:	85 c0                	test   eax,eax
c002120a:	0f 95 c0             	setne  al
c002120d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021211:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0021215:	83 c4 1c             	add    esp,0x1c
c0021218:	c3                   	ret    
c0021219:	90                   	nop
c002121a:	66 90                	xchg   ax,ax

c002121c <SSE::save(void*)>:
c002121c:	83 ec 0c             	sub    esp,0xc
c002121f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021223:	83 ec 0c             	sub    esp,0xc
c0021226:	50                   	push   eax
c0021227:	e8 ec 0f 00 00       	call   c0022218 <sseSave>
c002122c:	83 c4 10             	add    esp,0x10
c002122f:	90                   	nop
c0021230:	83 c4 0c             	add    esp,0xc
c0021233:	c3                   	ret    

c0021234 <SSE::load(void*)>:
c0021234:	83 ec 0c             	sub    esp,0xc
c0021237:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002123b:	83 ec 0c             	sub    esp,0xc
c002123e:	50                   	push   eax
c002123f:	e8 da 0f 00 00       	call   c002221e <sseLoad>
c0021244:	83 c4 10             	add    esp,0x10
c0021247:	90                   	nop
c0021248:	83 c4 0c             	add    esp,0xc
c002124b:	c3                   	ret    

c002124c <SSE::SSE()>:
c002124c:	83 ec 0c             	sub    esp,0xc
c002124f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021253:	83 ec 08             	sub    esp,0x8
c0021256:	68 3c 6c 02 c0       	push   0xc0026c3c
c002125b:	50                   	push   eax
c002125c:	e8 3b d4 fe ff       	call   c000e69c <FPU::FPU(char const*)>
c0021261:	83 c4 10             	add    esp,0x10
c0021264:	ba 4c 6c 02 c0       	mov    edx,0xc0026c4c
c0021269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002126d:	89 10                	mov    DWORD PTR [eax],edx
c002126f:	90                   	nop
c0021270:	83 c4 0c             	add    esp,0xc
c0021273:	c3                   	ret    

c0021274 <x87::open(int, int, void*)>:
c0021274:	83 ec 0c             	sub    esp,0xc
c0021277:	e8 f6 0f 00 00       	call   c0022272 <x87Init>
c002127c:	b8 00 00 00 00       	mov    eax,0x0
c0021281:	83 c4 0c             	add    esp,0xc
c0021284:	c3                   	ret    
c0021285:	90                   	nop
c0021286:	66 90                	xchg   ax,ax

c0021288 <x87::close(int, int, void*)>:
c0021288:	83 ec 0c             	sub    esp,0xc
c002128b:	e8 fc 0f 00 00       	call   c002228c <x87Close>
c0021290:	b8 00 00 00 00       	mov    eax,0x0
c0021295:	83 c4 0c             	add    esp,0xc
c0021298:	c3                   	ret    
c0021299:	90                   	nop
c002129a:	66 90                	xchg   ax,ax

c002129c <x87::available()>:
c002129c:	83 ec 0c             	sub    esp,0xc
c002129f:	e8 a2 0f 00 00       	call   c0022246 <x87Detect>
c00212a4:	85 c0                	test   eax,eax
c00212a6:	0f 95 c0             	setne  al
c00212a9:	83 c4 0c             	add    esp,0xc
c00212ac:	c3                   	ret    
c00212ad:	90                   	nop
c00212ae:	66 90                	xchg   ax,ax

c00212b0 <x87::save(void*)>:
c00212b0:	83 ec 0c             	sub    esp,0xc
c00212b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00212b7:	83 ec 0c             	sub    esp,0xc
c00212ba:	50                   	push   eax
c00212bb:	e8 a1 0f 00 00       	call   c0022261 <x87Save>
c00212c0:	83 c4 10             	add    esp,0x10
c00212c3:	90                   	nop
c00212c4:	83 c4 0c             	add    esp,0xc
c00212c7:	c3                   	ret    

c00212c8 <x87::load(void*)>:
c00212c8:	83 ec 0c             	sub    esp,0xc
c00212cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00212cf:	83 ec 0c             	sub    esp,0xc
c00212d2:	50                   	push   eax
c00212d3:	e8 92 0f 00 00       	call   c002226a <x87Load>
c00212d8:	83 c4 10             	add    esp,0x10
c00212db:	90                   	nop
c00212dc:	83 c4 0c             	add    esp,0xc
c00212df:	c3                   	ret    

c00212e0 <x87::x87()>:
c00212e0:	83 ec 0c             	sub    esp,0xc
c00212e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212e7:	83 ec 08             	sub    esp,0x8
c00212ea:	68 7c 6c 02 c0       	push   0xc0026c7c
c00212ef:	50                   	push   eax
c00212f0:	e8 a7 d3 fe ff       	call   c000e69c <FPU::FPU(char const*)>
c00212f5:	83 c4 10             	add    esp,0x10
c00212f8:	ba 8c 6c 02 c0       	mov    edx,0xc0026c8c
c00212fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021301:	89 10                	mov    DWORD PTR [eax],edx
c0021303:	90                   	nop
c0021304:	83 c4 0c             	add    esp,0xc
c0021307:	c3                   	ret    

c0021308 <APIC::disable()>:
c0021308:	90                   	nop
c0021309:	c3                   	ret    

c002130a <APIC::close(int, int, void*)>:
c002130a:	55                   	push   ebp
c002130b:	89 e5                	mov    ebp,esp
c002130d:	83 ec 08             	sub    esp,0x8
c0021310:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021313:	8b 00                	mov    eax,DWORD PTR [eax]
c0021315:	83 c0 3c             	add    eax,0x3c
c0021318:	8b 00                	mov    eax,DWORD PTR [eax]
c002131a:	83 ec 0c             	sub    esp,0xc
c002131d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021320:	ff d0                	call   eax
c0021322:	83 c4 10             	add    esp,0x10
c0021325:	b8 00 00 00 00       	mov    eax,0x0
c002132a:	c9                   	leave  
c002132b:	c3                   	ret    

c002132c <IOAPIC::close(int, int, void*)>:
c002132c:	b8 00 00 00 00       	mov    eax,0x0
c0021331:	c3                   	ret    

c0021332 <APIC::io_wait()>:
c0021332:	eb 00                	jmp    c0021334 <APIC::io_wait()+0x2>
c0021334:	eb 00                	jmp    c0021336 <APIC::io_wait()+0x4>
c0021336:	90                   	nop
c0021337:	c3                   	ret    

c0021338 <APIC::getBase()>:
c0021338:	55                   	push   ebp
c0021339:	89 e5                	mov    ebp,esp
c002133b:	83 ec 18             	sub    esp,0x18
c002133e:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0021343:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021349:	83 e0 08             	and    eax,0x8
c002134c:	84 c0                	test   al,al
c002134e:	75 07                	jne    c0021357 <APIC::getBase()+0x1f>
c0021350:	b8 00 00 00 00       	mov    eax,0x0
c0021355:	eb 21                	jmp    c0021378 <APIC::getBase()+0x40>
c0021357:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c002135c:	83 ec 08             	sub    esp,0x8
c002135f:	6a 1b                	push   0x1b
c0021361:	50                   	push   eax
c0021362:	e8 c3 7b fe ff       	call   c0008f2a <Computer::rdmsr(unsigned int)>
c0021367:	83 c4 10             	add    esp,0x10
c002136a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002136d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0021370:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021373:	25 00 f0 ff ff       	and    eax,0xfffff000
c0021378:	c9                   	leave  
c0021379:	c3                   	ret    

c002137a <APIC::eoi(unsigned char)>:
c002137a:	55                   	push   ebp
c002137b:	89 e5                	mov    ebp,esp
c002137d:	83 ec 28             	sub    esp,0x28
c0021380:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021383:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0021386:	83 ec 0c             	sub    esp,0xc
c0021389:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002138c:	e8 a7 ff ff ff       	call   c0021338 <APIC::getBase()>
c0021391:	83 c4 10             	add    esp,0x10
c0021394:	05 b0 00 00 00       	add    eax,0xb0
c0021399:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002139c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002139f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00213a5:	90                   	nop
c00213a6:	c9                   	leave  
c00213a7:	c3                   	ret    

c00213a8 <APIC::open(int, int, void*)>:
c00213a8:	55                   	push   ebp
c00213a9:	89 e5                	mov    ebp,esp
c00213ab:	57                   	push   edi
c00213ac:	56                   	push   esi
c00213ad:	53                   	push   ebx
c00213ae:	83 ec 2c             	sub    esp,0x2c
c00213b1:	83 ec 0c             	sub    esp,0xc
c00213b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00213b7:	e8 7c ff ff ff       	call   c0021338 <APIC::getBase()>
c00213bc:	83 c4 10             	add    esp,0x10
c00213bf:	89 c2                	mov    edx,eax
c00213c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00213c4:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00213ca:	0f b6 f8             	movzx  edi,al
c00213cd:	89 d0                	mov    eax,edx
c00213cf:	ba 00 00 00 00       	mov    edx,0x0
c00213d4:	89 c1                	mov    ecx,eax
c00213d6:	80 e5 ff             	and    ch,0xff
c00213d9:	89 cb                	mov    ebx,ecx
c00213db:	0f b6 f2             	movzx  esi,dl
c00213de:	89 d8                	mov    eax,ebx
c00213e0:	89 f2                	mov    edx,esi
c00213e2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00213e5:	8d 5f 08             	lea    ebx,[edi+0x8]
c00213e8:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00213ec:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00213f0:	83 e0 00             	and    eax,0x0
c00213f3:	09 d0                	or     eax,edx
c00213f5:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00213f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00213fc:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021402:	8d 50 01             	lea    edx,[eax+0x1]
c0021405:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021408:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002140e:	0f b6 d0             	movzx  edx,al
c0021411:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021414:	83 c2 08             	add    edx,0x8
c0021417:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002141b:	0f b6 c9             	movzx  ecx,cl
c002141e:	81 c9 00 00 01 00    	or     ecx,0x10000
c0021424:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021428:	83 ec 0c             	sub    esp,0xc
c002142b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002142e:	e8 05 ff ff ff       	call   c0021338 <APIC::getBase()>
c0021433:	83 c4 10             	add    esp,0x10
c0021436:	05 f0 00 00 00       	add    eax,0xf0
c002143b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002143e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021441:	8b 00                	mov    eax,DWORD PTR [eax]
c0021443:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0021446:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002144d:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0021454:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021457:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002145a:	89 10                	mov    DWORD PTR [eax],edx
c002145c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0021463:	a1 10 85 02 c0       	mov    eax,ds:0xc0028510
c0021468:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002146b:	7d 7c                	jge    c00214e9 <APIC::open(int, int, void*)+0x141>
c002146d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021470:	8b 04 85 20 85 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ae0]
c0021477:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002147a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002147d:	8b 04 85 20 85 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ae0]
c0021484:	c1 e8 08             	shr    eax,0x8
c0021487:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002148b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002148e:	8b 04 85 20 85 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ae0]
c0021495:	c1 e8 18             	shr    eax,0x18
c0021498:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c002149b:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002149f:	75 40                	jne    c00214e1 <APIC::open(int, int, void*)+0x139>
c00214a1:	83 ec 0c             	sub    esp,0xc
c00214a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00214a7:	e8 8c fe ff ff       	call   c0021338 <APIC::getBase()>
c00214ac:	83 c4 10             	add    esp,0x10
c00214af:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00214b3:	75 07                	jne    c00214bc <APIC::open(int, int, void*)+0x114>
c00214b5:	ba 60 03 00 00       	mov    edx,0x360
c00214ba:	eb 05                	jmp    c00214c1 <APIC::open(int, int, void*)+0x119>
c00214bc:	ba 50 03 00 00       	mov    edx,0x350
c00214c1:	01 d0                	add    eax,edx
c00214c3:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00214c6:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00214c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00214cb:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00214ce:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00214d5:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00214d9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00214dc:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00214df:	89 10                	mov    DWORD PTR [eax],edx
c00214e1:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00214e4:	e9 7a ff ff ff       	jmp    c0021463 <APIC::open(int, int, void*)+0xbb>
c00214e9:	b8 00 00 00 00       	mov    eax,0x0
c00214ee:	8d 65 f4             	lea    esp,[ebp-0xc]
c00214f1:	5b                   	pop    ebx
c00214f2:	5e                   	pop    esi
c00214f3:	5f                   	pop    edi
c00214f4:	5d                   	pop    ebp
c00214f5:	c3                   	ret    

c00214f6 <IOAPIC::IOAPIC()>:
c00214f6:	83 ec 0c             	sub    esp,0xc
c00214f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214fd:	83 ec 08             	sub    esp,0x8
c0021500:	68 bc 6c 02 c0       	push   0xc0026cbc
c0021505:	50                   	push   eax
c0021506:	e8 7f ce fe ff       	call   c000e38a <Device::Device(char const*)>
c002150b:	83 c4 10             	add    esp,0x10
c002150e:	ba e4 6d 02 c0       	mov    edx,0xc0026de4
c0021513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021517:	89 10                	mov    DWORD PTR [eax],edx
c0021519:	90                   	nop
c002151a:	83 c4 0c             	add    esp,0xc
c002151d:	c3                   	ret    

c002151e <APIC::APIC()>:
c002151e:	53                   	push   ebx
c002151f:	83 ec 18             	sub    esp,0x18
c0021522:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021526:	83 ec 08             	sub    esp,0x8
c0021529:	68 c4 6c 02 c0       	push   0xc0026cc4
c002152e:	50                   	push   eax
c002152f:	e8 ce d5 fe ff       	call   c000eb02 <InterruptController::InterruptController(char const*)>
c0021534:	83 c4 10             	add    esp,0x10
c0021537:	ba 9c 6d 02 c0       	mov    edx,0xc0026d9c
c002153c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021540:	89 10                	mov    DWORD PTR [eax],edx
c0021542:	a0 40 9c 02 c0       	mov    al,ds:0xc0029c40
c0021547:	83 f0 01             	xor    eax,0x1
c002154a:	84 c0                	test   al,al
c002154c:	0f 84 a1 00 00 00    	je     c00215f3 <APIC::APIC()+0xd5>
c0021552:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0021557:	a0 c0 85 02 c0       	mov    al,ds:0xc00285c0
c002155c:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0021560:	0f 83 86 00 00 00    	jae    c00215ec <APIC::APIC()+0xce>
c0021566:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002156e:	83 ec 0c             	sub    esp,0xc
c0021571:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021575:	e8 95 84 fe ff       	call   c0009a0f <malloc>
c002157a:	83 c4 10             	add    esp,0x10
c002157d:	89 c3                	mov    ebx,eax
c002157f:	83 ec 0c             	sub    esp,0xc
c0021582:	53                   	push   ebx
c0021583:	e8 6e ff ff ff       	call   c00214f6 <IOAPIC::IOAPIC()>
c0021588:	83 c4 10             	add    esp,0x10
c002158b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002158f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0021594:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021598:	89 14 85 20 9c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd63e0],edx
c002159f:	a1 00 9c 02 c0       	mov    eax,ds:0xc0029c00
c00215a4:	40                   	inc    eax
c00215a5:	a3 00 9c 02 c0       	mov    ds:0xc0029c00,eax
c00215aa:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c00215af:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00215b5:	83 ec 08             	sub    esp,0x8
c00215b8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00215bc:	50                   	push   eax
c00215bd:	e8 c4 cb fe ff       	call   c000e186 <Device::addChild(Device*)>
c00215c2:	83 c4 10             	add    esp,0x10
c00215c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00215c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00215cb:	83 c0 08             	add    eax,0x8
c00215ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00215d0:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00215d5:	6a 00                	push   0x0
c00215d7:	6a 00                	push   0x0
c00215d9:	52                   	push   edx
c00215da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00215de:	ff d0                	call   eax
c00215e0:	83 c4 10             	add    esp,0x10
c00215e3:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00215e7:	e9 6b ff ff ff       	jmp    c0021557 <APIC::APIC()+0x39>
c00215ec:	c6 05 40 9c 02 c0 01 	mov    BYTE PTR ds:0xc0029c40,0x1
c00215f3:	90                   	nop
c00215f4:	83 c4 18             	add    esp,0x18
c00215f7:	5b                   	pop    ebx
c00215f8:	c3                   	ret    
c00215f9:	90                   	nop

c00215fa <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00215fa:	55                   	push   ebp
c00215fb:	89 e5                	mov    ebp,esp
c00215fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021600:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021606:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021609:	72 1d                	jb     c0021628 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002160b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002160e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0021614:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021617:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002161d:	01 d0                	add    eax,edx
c002161f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021622:	73 04                	jae    c0021628 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0021624:	b0 01                	mov    al,0x1
c0021626:	eb 02                	jmp    c002162a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0021628:	b0 00                	mov    al,0x0
c002162a:	5d                   	pop    ebp
c002162b:	c3                   	ret    

c002162c <IOAPIC::read(int)>:
c002162c:	55                   	push   ebp
c002162d:	89 e5                	mov    ebp,esp
c002162f:	83 ec 10             	sub    esp,0x10
c0021632:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021635:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002163b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002163e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021641:	0f b6 d0             	movzx  edx,al
c0021644:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021647:	89 10                	mov    DWORD PTR [eax],edx
c0021649:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002164c:	83 c0 10             	add    eax,0x10
c002164f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021651:	c9                   	leave  
c0021652:	c3                   	ret    
c0021653:	90                   	nop

c0021654 <IOAPIC::open(int, int, void*)>:
c0021654:	55                   	push   ebp
c0021655:	89 e5                	mov    ebp,esp
c0021657:	57                   	push   edi
c0021658:	56                   	push   esi
c0021659:	53                   	push   ebx
c002165a:	83 ec 0c             	sub    esp,0xc
c002165d:	83 ec 0c             	sub    esp,0xc
c0021660:	68 ef 6c 02 c0       	push   0xc0026cef
c0021665:	e8 95 b6 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c002166a:	83 c4 10             	add    esp,0x10
c002166d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021670:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021673:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021679:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002167c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021682:	8b 14 85 00 86 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7a00]
c0021689:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002168c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0021692:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021695:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002169b:	8b 14 85 80 86 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7980]
c00216a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00216a5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00216ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00216ae:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00216b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00216b7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00216bd:	0f b6 f8             	movzx  edi,al
c00216c0:	89 d0                	mov    eax,edx
c00216c2:	ba 00 00 00 00       	mov    edx,0x0
c00216c7:	89 c1                	mov    ecx,eax
c00216c9:	80 e5 ff             	and    ch,0xff
c00216cc:	89 cb                	mov    ebx,ecx
c00216ce:	0f b6 f2             	movzx  esi,dl
c00216d1:	89 d8                	mov    eax,ebx
c00216d3:	89 f2                	mov    edx,esi
c00216d5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00216d8:	8d 5f 08             	lea    ebx,[edi+0x8]
c00216db:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00216df:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00216e3:	83 e0 00             	and    eax,0x0
c00216e6:	09 d0                	or     eax,edx
c00216e8:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00216ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00216ef:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00216f5:	8d 50 01             	lea    edx,[eax+0x1]
c00216f8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00216fb:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021701:	0f b6 d0             	movzx  edx,al
c0021704:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021707:	83 c2 08             	add    edx,0x8
c002170a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002170e:	0f b6 c9             	movzx  ecx,cl
c0021711:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0021717:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002171b:	83 ec 08             	sub    esp,0x8
c002171e:	6a 01                	push   0x1
c0021720:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021723:	e8 04 ff ff ff       	call   c002162c <IOAPIC::read(int)>
c0021728:	83 c4 10             	add    esp,0x10
c002172b:	c1 f8 10             	sar    eax,0x10
c002172e:	0f b6 c0             	movzx  eax,al
c0021731:	8d 50 01             	lea    edx,[eax+0x1]
c0021734:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021737:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002173d:	b8 00 00 00 00       	mov    eax,0x0
c0021742:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021745:	5b                   	pop    ebx
c0021746:	5e                   	pop    esi
c0021747:	5f                   	pop    edi
c0021748:	5d                   	pop    ebp
c0021749:	c3                   	ret    

c002174a <IOAPIC::write(int, int)>:
c002174a:	55                   	push   ebp
c002174b:	89 e5                	mov    ebp,esp
c002174d:	83 ec 10             	sub    esp,0x10
c0021750:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021753:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021759:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002175c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002175f:	0f b6 d0             	movzx  edx,al
c0021762:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021765:	89 10                	mov    DWORD PTR [eax],edx
c0021767:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002176a:	8d 50 10             	lea    edx,[eax+0x10]
c002176d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021770:	89 02                	mov    DWORD PTR [edx],eax
c0021772:	90                   	nop
c0021773:	c9                   	leave  
c0021774:	c3                   	ret    
c0021775:	90                   	nop

c0021776 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0021776:	55                   	push   ebp
c0021777:	89 e5                	mov    ebp,esp
c0021779:	53                   	push   ebx
c002177a:	83 ec 2c             	sub    esp,0x2c
c002177d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021780:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0021783:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0021786:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0021789:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002178c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002178f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0021792:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0021795:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0021798:	88 d8                	mov    al,bl
c002179a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002179d:	88 c8                	mov    al,cl
c002179f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00217a2:	88 d0                	mov    al,dl
c00217a4:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00217a7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00217ab:	83 c0 08             	add    eax,0x8
c00217ae:	01 c0                	add    eax,eax
c00217b0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00217b3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00217b7:	83 c0 08             	add    eax,0x8
c00217ba:	01 c0                	add    eax,eax
c00217bc:	40                   	inc    eax
c00217bd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00217c0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00217c3:	50                   	push   eax
c00217c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00217c7:	e8 60 fe ff ff       	call   c002162c <IOAPIC::read(int)>
c00217cc:	83 c4 08             	add    esp,0x8
c00217cf:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00217d2:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00217d9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00217dc:	c1 e0 18             	shl    eax,0x18
c00217df:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00217e2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00217e5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00217e8:	52                   	push   edx
c00217e9:	50                   	push   eax
c00217ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00217ed:	e8 58 ff ff ff       	call   c002174a <IOAPIC::write(int, int)>
c00217f2:	83 c4 0c             	add    esp,0xc
c00217f5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00217f8:	50                   	push   eax
c00217f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00217fc:	e8 2b fe ff ff       	call   c002162c <IOAPIC::read(int)>
c0021801:	83 c4 08             	add    esp,0x8
c0021804:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0021807:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002180e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0021815:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002181c:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0021820:	74 09                	je     c002182b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0021822:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0021829:	eb 07                	jmp    c0021832 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c002182b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0021832:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0021836:	74 09                	je     c0021841 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0021838:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002183f:	eb 07                	jmp    c0021848 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0021841:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0021848:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002184f:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0021853:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0021856:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0021859:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002185c:	52                   	push   edx
c002185d:	50                   	push   eax
c002185e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021861:	e8 e4 fe ff ff       	call   c002174a <IOAPIC::write(int, int)>
c0021866:	83 c4 0c             	add    esp,0xc
c0021869:	90                   	nop
c002186a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002186d:	c9                   	leave  
c002186e:	c3                   	ret    
c002186f:	90                   	nop

c0021870 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0021870:	55                   	push   ebp
c0021871:	89 e5                	mov    ebp,esp
c0021873:	57                   	push   edi
c0021874:	56                   	push   esi
c0021875:	53                   	push   ebx
c0021876:	83 ec 2c             	sub    esp,0x2c
c0021879:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002187c:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002187f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0021883:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0021887:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002188b:	74 5a                	je     c00218e7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002188d:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0021891:	7f 44                	jg     c00218d7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0021893:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021896:	05 a0 73 02 c0       	add    eax,0xc00273a0
c002189b:	8a 00                	mov    al,BYTE PTR [eax]
c002189d:	0f b6 c0             	movzx  eax,al
c00218a0:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00218a3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00218a6:	66 8b 84 00 a0 85 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd7a60]
c00218ae:	0f b7 c0             	movzx  eax,ax
c00218b1:	83 e0 02             	and    eax,0x2
c00218b4:	85 c0                	test   eax,eax
c00218b6:	74 04                	je     c00218bc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00218b8:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00218bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00218bf:	66 8b 84 00 a0 85 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd7a60]
c00218c7:	0f b7 c0             	movzx  eax,ax
c00218ca:	83 e0 08             	and    eax,0x8
c00218cd:	85 c0                	test   eax,eax
c00218cf:	74 16                	je     c00218e7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00218d1:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00218d5:	eb 10                	jmp    c00218e7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00218d7:	83 ec 0c             	sub    esp,0xc
c00218da:	68 00 6d 02 c0       	push   0xc0026d00
c00218df:	e8 cb 2f ff ff       	call   c00148af <Krnl::panic(char const*)>
c00218e4:	83 c4 10             	add    esp,0x10
c00218e7:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00218eb:	a1 00 9c 02 c0       	mov    eax,ds:0xc0029c00
c00218f0:	83 ec 08             	sub    esp,0x8
c00218f3:	50                   	push   eax
c00218f4:	68 38 6d 02 c0       	push   0xc0026d38
c00218f9:	e8 01 b4 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00218fe:	83 c4 10             	add    esp,0x10
c0021901:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0021908:	a1 00 9c 02 c0       	mov    eax,ds:0xc0029c00
c002190d:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0021910:	7d 67                	jge    c0021979 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0021912:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021915:	8b 04 85 20 9c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd63e0]
c002191c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002191f:	83 ec 08             	sub    esp,0x8
c0021922:	52                   	push   edx
c0021923:	50                   	push   eax
c0021924:	e8 d1 fc ff ff       	call   c00215fa <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0021929:	83 c4 10             	add    esp,0x10
c002192c:	84 c0                	test   al,al
c002192e:	74 44                	je     c0021974 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0021930:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021933:	8b 1c 85 20 9c 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd63e0]
c002193a:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c002193e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0021941:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0021945:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021948:	83 c0 20             	add    eax,0x20
c002194b:	0f b6 f0             	movzx  esi,al
c002194e:	b8 00 00 00 00       	mov    eax,0x0
c0021953:	99                   	cdq    
c0021954:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0021957:	0f b6 c9             	movzx  ecx,cl
c002195a:	83 ec 04             	sub    esp,0x4
c002195d:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0021960:	57                   	push   edi
c0021961:	56                   	push   esi
c0021962:	52                   	push   edx
c0021963:	50                   	push   eax
c0021964:	51                   	push   ecx
c0021965:	53                   	push   ebx
c0021966:	e8 0b fe ff ff       	call   c0021776 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c002196b:	83 c4 20             	add    esp,0x20
c002196e:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0021972:	eb 05                	jmp    c0021979 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0021974:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0021977:	eb 8f                	jmp    c0021908 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0021979:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c002197c:	83 f0 01             	xor    eax,0x1
c002197f:	84 c0                	test   al,al
c0021981:	74 10                	je     c0021993 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0021983:	83 ec 0c             	sub    esp,0xc
c0021986:	68 4f 6d 02 c0       	push   0xc0026d4f
c002198b:	e8 1f 2f ff ff       	call   c00148af <Krnl::panic(char const*)>
c0021990:	83 c4 10             	add    esp,0x10
c0021993:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0021997:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c002199e:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00219a2:	7f 65                	jg     c0021a09 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00219a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00219a7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00219aa:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00219b1:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00219b4:	01 ca                	add    edx,ecx
c00219b6:	83 c2 54             	add    edx,0x54
c00219b9:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00219bd:	85 c0                	test   eax,eax
c00219bf:	75 43                	jne    c0021a04 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00219c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00219c4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00219c7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00219ce:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00219d1:	01 ca                	add    edx,ecx
c00219d3:	8d 4a 54             	lea    ecx,[edx+0x54]
c00219d6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00219d9:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00219dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00219e0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00219e3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00219ea:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00219ed:	01 ca                	add    edx,ecx
c00219ef:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00219f5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00219f8:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00219fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00219ff:	83 e8 20             	sub    eax,0x20
c0021a02:	eb 1a                	jmp    c0021a1e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0021a04:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0021a07:	eb 95                	jmp    c002199e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0021a09:	83 ec 0c             	sub    esp,0xc
c0021a0c:	68 5c 6d 02 c0       	push   0xc0026d5c
c0021a11:	e8 99 2e ff ff       	call   c00148af <Krnl::panic(char const*)>
c0021a16:	83 c4 10             	add    esp,0x10
c0021a19:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021a1e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021a21:	5b                   	pop    ebx
c0021a22:	5e                   	pop    esi
c0021a23:	5f                   	pop    edi
c0021a24:	5d                   	pop    ebp
c0021a25:	c3                   	ret    

c0021a26 <PIC::disable()>:
c0021a26:	55                   	push   ebp
c0021a27:	89 e5                	mov    ebp,esp
c0021a29:	83 ec 10             	sub    esp,0x10
c0021a2c:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0021a32:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0021a36:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021a39:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0021a3d:	ee                   	out    dx,al
c0021a3e:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0021a44:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0021a48:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0021a4b:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0021a4f:	ee                   	out    dx,al
c0021a50:	90                   	nop
c0021a51:	c9                   	leave  
c0021a52:	c3                   	ret    
c0021a53:	90                   	nop

c0021a54 <PIC::close(int, int, void*)>:
c0021a54:	55                   	push   ebp
c0021a55:	89 e5                	mov    ebp,esp
c0021a57:	83 ec 08             	sub    esp,0x8
c0021a5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021a5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a5f:	83 c0 3c             	add    eax,0x3c
c0021a62:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a64:	83 ec 0c             	sub    esp,0xc
c0021a67:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021a6a:	ff d0                	call   eax
c0021a6c:	83 c4 10             	add    esp,0x10
c0021a6f:	b8 00 00 00 00       	mov    eax,0x0
c0021a74:	c9                   	leave  
c0021a75:	c3                   	ret    

c0021a76 <PIC::PIC()>:
c0021a76:	83 ec 0c             	sub    esp,0xc
c0021a79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a7d:	83 ec 08             	sub    esp,0x8
c0021a80:	68 08 6e 02 c0       	push   0xc0026e08
c0021a85:	50                   	push   eax
c0021a86:	e8 77 d0 fe ff       	call   c000eb02 <InterruptController::InterruptController(char const*)>
c0021a8b:	83 c4 10             	add    esp,0x10
c0021a8e:	ba 34 6e 02 c0       	mov    edx,0xc0026e34
c0021a93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a97:	89 10                	mov    DWORD PTR [eax],edx
c0021a99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a9d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021aa3:	0f b6 d0             	movzx  edx,al
c0021aa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021aaa:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0021ab1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ab5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021abb:	0f b6 d0             	movzx  edx,al
c0021abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ac2:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0021ac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021acb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021ad1:	8d 50 01             	lea    edx,[eax+0x1]
c0021ad4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021ad8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021ade:	0f b6 d0             	movzx  edx,al
c0021ae1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ae5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021ae9:	83 e1 3f             	and    ecx,0x3f
c0021aec:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021af0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021af4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021afa:	0f b6 d0             	movzx  edx,al
c0021afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b01:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0021b08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b0c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021b12:	0f b6 d0             	movzx  edx,al
c0021b15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b19:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0021b1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b22:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021b28:	8d 50 01             	lea    edx,[eax+0x1]
c0021b2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021b2f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021b35:	0f b6 d0             	movzx  edx,al
c0021b38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b3c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021b40:	83 e1 3f             	and    ecx,0x3f
c0021b43:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021b47:	90                   	nop
c0021b48:	83 c4 0c             	add    esp,0xc
c0021b4b:	c3                   	ret    

c0021b4c <PIC::ioWait()>:
c0021b4c:	eb 00                	jmp    c0021b4e <PIC::ioWait()+0x2>
c0021b4e:	eb 00                	jmp    c0021b50 <PIC::ioWait()+0x4>
c0021b50:	90                   	nop
c0021b51:	c3                   	ret    

c0021b52 <PIC::getIRQReg(int)>:
c0021b52:	55                   	push   ebp
c0021b53:	89 e5                	mov    ebp,esp
c0021b55:	83 ec 10             	sub    esp,0x10
c0021b58:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021b5b:	0f b6 c0             	movzx  eax,al
c0021b5e:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0021b64:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0021b67:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021b6a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021b6e:	ee                   	out    dx,al
c0021b6f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021b72:	0f b6 c0             	movzx  eax,al
c0021b75:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0021b7b:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0021b7e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021b81:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021b85:	ee                   	out    dx,al
c0021b86:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0021b8c:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0021b90:	89 c2                	mov    edx,eax
c0021b92:	ec                   	in     al,dx
c0021b93:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0021b96:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021b99:	0f b6 c0             	movzx  eax,al
c0021b9c:	c1 e0 08             	shl    eax,0x8
c0021b9f:	89 c1                	mov    ecx,eax
c0021ba1:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0021ba7:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0021bab:	89 c2                	mov    edx,eax
c0021bad:	ec                   	in     al,dx
c0021bae:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0021bb1:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0021bb4:	0f b6 c0             	movzx  eax,al
c0021bb7:	09 c8                	or     eax,ecx
c0021bb9:	c9                   	leave  
c0021bba:	c3                   	ret    
c0021bbb:	90                   	nop

c0021bbc <PIC::eoi(unsigned char)>:
c0021bbc:	55                   	push   ebp
c0021bbd:	89 e5                	mov    ebp,esp
c0021bbf:	83 ec 14             	sub    esp,0x14
c0021bc2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021bc5:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0021bc8:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0021bcc:	75 1e                	jne    c0021bec <PIC::eoi(unsigned char)+0x30>
c0021bce:	6a 0b                	push   0xb
c0021bd0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021bd3:	e8 7a ff ff ff       	call   c0021b52 <PIC::getIRQReg(int)>
c0021bd8:	83 c4 08             	add    esp,0x8
c0021bdb:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0021bdf:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0021be3:	25 80 00 00 00       	and    eax,0x80
c0021be8:	85 c0                	test   eax,eax
c0021bea:	74 5f                	je     c0021c4b <PIC::eoi(unsigned char)+0x8f>
c0021bec:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0021bf0:	75 2d                	jne    c0021c1f <PIC::eoi(unsigned char)+0x63>
c0021bf2:	6a 0b                	push   0xb
c0021bf4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021bf7:	e8 56 ff ff ff       	call   c0021b52 <PIC::getIRQReg(int)>
c0021bfc:	83 c4 08             	add    esp,0x8
c0021bff:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0021c03:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021c06:	66 85 c0             	test   ax,ax
c0021c09:	78 14                	js     c0021c1f <PIC::eoi(unsigned char)+0x63>
c0021c0b:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0021c11:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0021c15:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021c18:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0021c1c:	ee                   	out    dx,al
c0021c1d:	eb 2d                	jmp    c0021c4c <PIC::eoi(unsigned char)+0x90>
c0021c1f:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0021c23:	76 12                	jbe    c0021c37 <PIC::eoi(unsigned char)+0x7b>
c0021c25:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0021c2b:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0021c2f:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021c32:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021c36:	ee                   	out    dx,al
c0021c37:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0021c3d:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0021c41:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021c44:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021c48:	ee                   	out    dx,al
c0021c49:	eb 01                	jmp    c0021c4c <PIC::eoi(unsigned char)+0x90>
c0021c4b:	90                   	nop
c0021c4c:	c9                   	leave  
c0021c4d:	c3                   	ret    

c0021c4e <PIC::remap()>:
c0021c4e:	55                   	push   ebp
c0021c4f:	89 e5                	mov    ebp,esp
c0021c51:	83 ec 48             	sub    esp,0x48
c0021c54:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0021c5b:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0021c62:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0021c68:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0021c6b:	89 c2                	mov    edx,eax
c0021c6d:	ec                   	in     al,dx
c0021c6e:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0021c71:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0021c74:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0021c77:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0021c7d:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0021c80:	89 c2                	mov    edx,eax
c0021c82:	ec                   	in     al,dx
c0021c83:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0021c86:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0021c89:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0021c8c:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0021c92:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0021c96:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0021c99:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0021c9c:	ee                   	out    dx,al
c0021c9d:	83 ec 0c             	sub    esp,0xc
c0021ca0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021ca3:	e8 a4 fe ff ff       	call   c0021b4c <PIC::ioWait()>
c0021ca8:	83 c4 10             	add    esp,0x10
c0021cab:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0021cb1:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0021cb5:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0021cb8:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0021cbb:	ee                   	out    dx,al
c0021cbc:	83 ec 0c             	sub    esp,0xc
c0021cbf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021cc2:	e8 85 fe ff ff       	call   c0021b4c <PIC::ioWait()>
c0021cc7:	83 c4 10             	add    esp,0x10
c0021cca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0021ccd:	0f b6 c0             	movzx  eax,al
c0021cd0:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0021cd6:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0021cd9:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0021cdc:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0021cdf:	ee                   	out    dx,al
c0021ce0:	83 ec 0c             	sub    esp,0xc
c0021ce3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021ce6:	e8 61 fe ff ff       	call   c0021b4c <PIC::ioWait()>
c0021ceb:	83 c4 10             	add    esp,0x10
c0021cee:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021cf1:	0f b6 c0             	movzx  eax,al
c0021cf4:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0021cfa:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0021cfd:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0021d00:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0021d03:	ee                   	out    dx,al
c0021d04:	83 ec 0c             	sub    esp,0xc
c0021d07:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021d0a:	e8 3d fe ff ff       	call   c0021b4c <PIC::ioWait()>
c0021d0f:	83 c4 10             	add    esp,0x10
c0021d12:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0021d18:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0021d1c:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0021d1f:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0021d22:	ee                   	out    dx,al
c0021d23:	83 ec 0c             	sub    esp,0xc
c0021d26:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021d29:	e8 1e fe ff ff       	call   c0021b4c <PIC::ioWait()>
c0021d2e:	83 c4 10             	add    esp,0x10
c0021d31:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0021d37:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0021d3b:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0021d3e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021d41:	ee                   	out    dx,al
c0021d42:	83 ec 0c             	sub    esp,0xc
c0021d45:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021d48:	e8 ff fd ff ff       	call   c0021b4c <PIC::ioWait()>
c0021d4d:	83 c4 10             	add    esp,0x10
c0021d50:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0021d56:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0021d5a:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0021d5d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0021d60:	ee                   	out    dx,al
c0021d61:	83 ec 0c             	sub    esp,0xc
c0021d64:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021d67:	e8 e0 fd ff ff       	call   c0021b4c <PIC::ioWait()>
c0021d6c:	83 c4 10             	add    esp,0x10
c0021d6f:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0021d75:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0021d79:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0021d7c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0021d7f:	ee                   	out    dx,al
c0021d80:	83 ec 0c             	sub    esp,0xc
c0021d83:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021d86:	e8 c1 fd ff ff       	call   c0021b4c <PIC::ioWait()>
c0021d8b:	83 c4 10             	add    esp,0x10
c0021d8e:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0021d92:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0021d98:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0021d9b:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0021d9e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0021da1:	ee                   	out    dx,al
c0021da2:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0021da6:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0021dac:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0021daf:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0021db2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0021db5:	ee                   	out    dx,al
c0021db6:	90                   	nop
c0021db7:	c9                   	leave  
c0021db8:	c3                   	ret    
c0021db9:	90                   	nop

c0021dba <PIC::open(int, int, void*)>:
c0021dba:	55                   	push   ebp
c0021dbb:	89 e5                	mov    ebp,esp
c0021dbd:	83 ec 18             	sub    esp,0x18
c0021dc0:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0021dc6:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0021dca:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021dcd:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021dd1:	ee                   	out    dx,al
c0021dd2:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0021dd8:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0021ddc:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021ddf:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021de3:	ee                   	out    dx,al
c0021de4:	83 ec 0c             	sub    esp,0xc
c0021de7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021dea:	e8 5f fe ff ff       	call   c0021c4e <PIC::remap()>
c0021def:	83 c4 10             	add    esp,0x10
c0021df2:	b8 00 00 00 00       	mov    eax,0x0
c0021df7:	c9                   	leave  
c0021df8:	c3                   	ret    
c0021df9:	66 90                	xchg   ax,ax
c0021dfb:	90                   	nop

c0021dfc <APICTimer::close(int, int, void*)>:
c0021dfc:	b8 00 00 00 00       	mov    eax,0x0
c0021e01:	c3                   	ret    
c0021e02:	66 90                	xchg   ax,ax

c0021e04 <apicTimerHandler(regs*, void*)>:
c0021e04:	83 ec 0c             	sub    esp,0xc
c0021e07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021e0b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021e0d:	b8 10 27 00 00       	mov    eax,0x2710
c0021e12:	ba 00 00 00 00       	mov    edx,0x0
c0021e17:	f7 f1                	div    ecx
c0021e19:	83 ec 0c             	sub    esp,0xc
c0021e1c:	50                   	push   eax
c0021e1d:	e8 ef eb fe ff       	call   c0010a11 <timerHandler(unsigned int)>
c0021e22:	83 c4 10             	add    esp,0x10
c0021e25:	90                   	nop
c0021e26:	83 c4 0c             	add    esp,0xc
c0021e29:	c3                   	ret    
c0021e2a:	66 90                	xchg   ax,ax

c0021e2c <APICTimer::write(int)>:
c0021e2c:	83 ec 1c             	sub    esp,0x1c
c0021e2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e33:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021e37:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021e3d:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0021e42:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021e48:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0021e4e:	83 ec 0c             	sub    esp,0xc
c0021e51:	50                   	push   eax
c0021e52:	e8 e1 f4 ff ff       	call   c0021338 <APIC::getBase()>
c0021e57:	83 c4 10             	add    esp,0x10
c0021e5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021e5e:	a1 cc 82 02 c0       	mov    eax,ds:0xc00282cc
c0021e63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021e67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021e6b:	05 e0 03 00 00       	add    eax,0x3e0
c0021e70:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0021e76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021e7a:	05 80 03 00 00       	add    eax,0x380
c0021e7f:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0021e85:	fb                   	sti    
c0021e86:	66 90                	xchg   ax,ax
c0021e88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021e8c:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c0021e92:	a1 cc 82 02 c0       	mov    eax,ds:0xc00282cc
c0021e97:	39 c2                	cmp    edx,eax
c0021e99:	76 05                	jbe    c0021ea0 <APICTimer::write(int)+0x74>
c0021e9b:	eb eb                	jmp    c0021e88 <APICTimer::write(int)+0x5c>
c0021e9d:	8d 76 00             	lea    esi,[esi+0x0]
c0021ea0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021ea4:	05 20 03 00 00       	add    eax,0x320
c0021ea9:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0021eaf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021eb3:	05 90 03 00 00       	add    eax,0x390
c0021eb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0021eba:	f7 d0                	not    eax
c0021ebc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021ec0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ec8:	ba 00 00 00 00       	mov    edx,0x0
c0021ecd:	f7 f1                	div    ecx
c0021ecf:	89 04 24             	mov    DWORD PTR [esp],eax
c0021ed2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ed6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021edc:	0d 00 00 02 00       	or     eax,0x20000
c0021ee1:	89 c2                	mov    edx,eax
c0021ee3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021ee7:	05 20 03 00 00       	add    eax,0x320
c0021eec:	89 10                	mov    DWORD PTR [eax],edx
c0021eee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021ef2:	05 e0 03 00 00       	add    eax,0x3e0
c0021ef7:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0021efd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f01:	05 80 03 00 00       	add    eax,0x380
c0021f06:	89 c2                	mov    edx,eax
c0021f08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021f0b:	89 02                	mov    DWORD PTR [edx],eax
c0021f0d:	90                   	nop
c0021f0e:	83 c4 1c             	add    esp,0x1c
c0021f11:	c3                   	ret    
c0021f12:	66 90                	xchg   ax,ax

c0021f14 <APICTimer::open(int, int, void*)>:
c0021f14:	57                   	push   edi
c0021f15:	56                   	push   esi
c0021f16:	53                   	push   ebx
c0021f17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f1d:	83 c0 24             	add    eax,0x24
c0021f20:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f22:	83 ec 08             	sub    esp,0x8
c0021f25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f2d:	ff d0                	call   eax
c0021f2f:	83 c4 10             	add    esp,0x10
c0021f32:	a1 a8 7c 02 c0       	mov    eax,ds:0xc0027ca8
c0021f37:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021f3d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0021f43:	83 ec 0c             	sub    esp,0xc
c0021f46:	50                   	push   eax
c0021f47:	e8 ec f3 ff ff       	call   c0021338 <APIC::getBase()>
c0021f4c:	83 c4 10             	add    esp,0x10
c0021f4f:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0021f55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f59:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021f5f:	0f b6 f8             	movzx  edi,al
c0021f62:	89 d0                	mov    eax,edx
c0021f64:	ba 00 00 00 00       	mov    edx,0x0
c0021f69:	89 c1                	mov    ecx,eax
c0021f6b:	80 e5 ff             	and    ch,0xff
c0021f6e:	89 cb                	mov    ebx,ecx
c0021f70:	0f b6 f2             	movzx  esi,dl
c0021f73:	89 d8                	mov    eax,ebx
c0021f75:	89 f2                	mov    edx,esi
c0021f77:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021f7b:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021f7e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021f82:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021f86:	83 e0 00             	and    eax,0x0
c0021f89:	09 d0                	or     eax,edx
c0021f8b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021f8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f93:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021f99:	8d 50 01             	lea    edx,[eax+0x1]
c0021f9c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021fa0:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021fa6:	0f b6 d0             	movzx  edx,al
c0021fa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fad:	83 c2 08             	add    edx,0x8
c0021fb0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0021fb4:	0f b6 c9             	movzx  ecx,cl
c0021fb7:	81 c9 00 00 01 00    	or     ecx,0x10000
c0021fbd:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021fc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fc5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0021fc9:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0021fcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fd3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021fd7:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0021fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021fe1:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0021fe7:	83 ec 0c             	sub    esp,0xc
c0021fea:	51                   	push   ecx
c0021feb:	6a 01                	push   0x1
c0021fed:	68 04 1e 02 c0       	push   0xc0021e04
c0021ff2:	52                   	push   edx
c0021ff3:	50                   	push   eax
c0021ff4:	e8 05 c1 fe ff       	call   c000e0fe <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021ff9:	83 c4 20             	add    esp,0x20
c0021ffc:	89 c2                	mov    edx,eax
c0021ffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022002:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022008:	b8 00 00 00 00       	mov    eax,0x0
c002200d:	5b                   	pop    ebx
c002200e:	5e                   	pop    esi
c002200f:	5f                   	pop    edi
c0022010:	c3                   	ret    
c0022011:	90                   	nop
c0022012:	66 90                	xchg   ax,ax

c0022014 <APICTimer::APICTimer()>:
c0022014:	83 ec 0c             	sub    esp,0xc
c0022017:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002201b:	83 ec 08             	sub    esp,0x8
c002201e:	68 74 6e 02 c0       	push   0xc0026e74
c0022023:	50                   	push   eax
c0022024:	e8 57 e9 fe ff       	call   c0010980 <Timer::Timer(char const*)>
c0022029:	83 c4 10             	add    esp,0x10
c002202c:	ba 88 6e 02 c0       	mov    edx,0xc0026e88
c0022031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022035:	89 10                	mov    DWORD PTR [eax],edx
c0022037:	90                   	nop
c0022038:	83 c4 0c             	add    esp,0xc
c002203b:	c3                   	ret    

c002203c <PIT::write(int)>:
c002203c:	83 ec 10             	sub    esp,0x10
c002203f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022043:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022047:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002204d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022051:	a3 44 9c 02 c0       	mov    ds:0xc0029c44,eax
c0022056:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002205b:	99                   	cdq    
c002205c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0022060:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022064:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002206b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0022070:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0022074:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0022079:	ee                   	out    dx,al
c002207a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002207e:	0f b6 c0             	movzx  eax,al
c0022081:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0022088:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002208c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0022090:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0022095:	ee                   	out    dx,al
c0022096:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002209a:	c1 f8 08             	sar    eax,0x8
c002209d:	0f b6 c0             	movzx  eax,al
c00220a0:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00220a7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00220ab:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00220af:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00220b4:	ee                   	out    dx,al
c00220b5:	90                   	nop
c00220b6:	83 c4 10             	add    esp,0x10
c00220b9:	c3                   	ret    
c00220ba:	66 90                	xchg   ax,ax

c00220bc <pitHandler(regs*, void*)>:
c00220bc:	83 ec 0c             	sub    esp,0xc
c00220bf:	8b 0d 44 9c 02 c0    	mov    ecx,DWORD PTR ds:0xc0029c44
c00220c5:	b8 a0 86 01 00       	mov    eax,0x186a0
c00220ca:	99                   	cdq    
c00220cb:	f7 f9                	idiv   ecx
c00220cd:	83 ec 0c             	sub    esp,0xc
c00220d0:	50                   	push   eax
c00220d1:	e8 3b e9 fe ff       	call   c0010a11 <timerHandler(unsigned int)>
c00220d6:	83 c4 10             	add    esp,0x10
c00220d9:	90                   	nop
c00220da:	83 c4 0c             	add    esp,0xc
c00220dd:	c3                   	ret    
c00220de:	66 90                	xchg   ax,ax

c00220e0 <PIT::open(int, int, void*)>:
c00220e0:	83 ec 0c             	sub    esp,0xc
c00220e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00220e9:	83 c0 24             	add    eax,0x24
c00220ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00220ee:	83 ec 08             	sub    esp,0x8
c00220f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220f9:	ff d0                	call   eax
c00220fb:	83 c4 10             	add    esp,0x10
c00220fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022102:	83 ec 0c             	sub    esp,0xc
c0022105:	6a 00                	push   0x0
c0022107:	6a 01                	push   0x1
c0022109:	68 bc 20 02 c0       	push   0xc00220bc
c002210e:	6a 00                	push   0x0
c0022110:	50                   	push   eax
c0022111:	e8 e8 bf fe ff       	call   c000e0fe <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022116:	83 c4 20             	add    esp,0x20
c0022119:	89 c2                	mov    edx,eax
c002211b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002211f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022125:	b8 00 00 00 00       	mov    eax,0x0
c002212a:	83 c4 0c             	add    esp,0xc
c002212d:	c3                   	ret    
c002212e:	66 90                	xchg   ax,ax

c0022130 <PIT::close(int, int, void*)>:
c0022130:	83 ec 0c             	sub    esp,0xc
c0022133:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022137:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0022141:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022145:	6a 01                	push   0x1
c0022147:	68 bc 20 02 c0       	push   0xc00220bc
c002214c:	6a 00                	push   0x0
c002214e:	50                   	push   eax
c002214f:	e8 f4 bf fe ff       	call   c000e148 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0022154:	83 c4 10             	add    esp,0x10
c0022157:	b8 00 00 00 00       	mov    eax,0x0
c002215c:	83 c4 0c             	add    esp,0xc
c002215f:	c3                   	ret    

c0022160 <PIT::PIT()>:
c0022160:	83 ec 0c             	sub    esp,0xc
c0022163:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022167:	83 ec 08             	sub    esp,0x8
c002216a:	68 b0 6e 02 c0       	push   0xc0026eb0
c002216f:	50                   	push   eax
c0022170:	e8 0b e8 fe ff       	call   c0010980 <Timer::Timer(char const*)>
c0022175:	83 c4 10             	add    esp,0x10
c0022178:	ba d8 6e 02 c0       	mov    edx,0xc0026ed8
c002217d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022181:	89 10                	mov    DWORD PTR [eax],edx
c0022183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022187:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002218d:	0f b6 d0             	movzx  edx,al
c0022190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022194:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002219b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002219f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00221a5:	0f b6 d0             	movzx  edx,al
c00221a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221ac:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00221b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221b5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00221bb:	8d 50 01             	lea    edx,[eax+0x1]
c00221be:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00221c2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00221c8:	0f b6 d0             	movzx  edx,al
c00221cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221cf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00221d3:	83 e1 3f             	and    ecx,0x3f
c00221d6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00221da:	90                   	nop
c00221db:	83 c4 0c             	add    esp,0xc
c00221de:	c3                   	ret    
c00221df:	90                   	nop

c00221e0 <avxDetect>:
c00221e0:	b8 00 00 00 00       	mov    eax,0x0
c00221e5:	c3                   	ret    

c00221e6 <avxSave>:
c00221e6:	c3                   	ret    

c00221e7 <avxLoad>:
c00221e7:	c3                   	ret    

c00221e8 <avxInit>:
c00221e8:	c3                   	ret    

c00221e9 <avxClose>:
c00221e9:	c3                   	ret    

c00221ea <wouldSheSayYes>:
c00221ea:	c3                   	ret    
c00221eb:	49                   	dec    ecx
c00221ec:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00221f0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00221f4:	75 20                	jne    c0022216 <sseDetect.noSSE+0x1>
c00221f6:	4e                   	dec    esi
c00221f7:	79 61                	jns    c002225a <x87Detect+0x14>
c00221f9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00221fe:	66 90                	xchg   ax,ax

c0022200 <absolutelyNoChanceInHell>:
c0022200:	b8 01 00 00 00       	mov    eax,0x1
c0022205:	0f a2                	cpuid  
c0022207:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002220d:	74 06                	je     c0022215 <sseDetect.noSSE>
c002220f:	b8 01 00 00 00       	mov    eax,0x1
c0022214:	c3                   	ret    

c0022215 <sseDetect.noSSE>:
c0022215:	31 c0                	xor    eax,eax
c0022217:	c3                   	ret    

c0022218 <sseSave>:
c0022218:	0f ae 44 24 04       	fxsave [esp+0x4]
c002221d:	c3                   	ret    

c002221e <sseLoad>:
c002221e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0022223:	c3                   	ret    

c0022224 <sseInit>:
c0022224:	e8 49 00 00 00       	call   c0022272 <x87Init>
c0022229:	0f 20 e0             	mov    eax,cr4
c002222c:	66 0d 00 06          	or     ax,0x600
c0022230:	0f 22 e0             	mov    cr4,eax
c0022233:	c3                   	ret    

c0022234 <sseClose>:
c0022234:	c3                   	ret    
c0022235:	66 90                	xchg   ax,ax
c0022237:	66 90                	xchg   ax,ax
c0022239:	66 90                	xchg   ax,ax
c002223b:	66 90                	xchg   ax,ax
c002223d:	66 90                	xchg   ax,ax
c002223f:	90                   	nop

c0022240 <value_37F>:
c0022240:	7f 03                	jg     c0022245 <value_37A+0x1>

c0022242 <value_37E>:
c0022242:	7e 03                	jle    c0022247 <x87Detect+0x1>

c0022244 <value_37A>:
c0022244:	7a 03                	jp     c0022249 <x87Detect+0x3>

c0022246 <x87Detect>:
c0022246:	b8 01 00 00 00       	mov    eax,0x1
c002224b:	0f a2                	cpuid  
c002224d:	f7 c2 01 00 00 00    	test   edx,0x1
c0022253:	74 06                	je     c002225b <x87Detect.nox87>
c0022255:	b8 01 00 00 00       	mov    eax,0x1
c002225a:	c3                   	ret    

c002225b <x87Detect.nox87>:
c002225b:	b8 00 00 00 00       	mov    eax,0x0
c0022260:	c3                   	ret    

c0022261 <x87Save>:
c0022261:	55                   	push   ebp
c0022262:	89 e5                	mov    ebp,esp
c0022264:	9b dd 75 08          	fsave  [ebp+0x8]
c0022268:	c9                   	leave  
c0022269:	c3                   	ret    

c002226a <x87Load>:
c002226a:	55                   	push   ebp
c002226b:	89 e5                	mov    ebp,esp
c002226d:	dd 65 08             	frstor [ebp+0x8]
c0022270:	c9                   	leave  
c0022271:	c3                   	ret    

c0022272 <x87Init>:
c0022272:	9b db e3             	finit  
c0022275:	0f 20 c0             	mov    eax,cr0
c0022278:	66 25 fb ff          	and    ax,0xfffb
c002227c:	66 0d 22 00          	or     ax,0x22
c0022280:	0f 22 c0             	mov    cr0,eax
c0022283:	0f 06                	clts   
c0022285:	d9 2d 44 22 02 c0    	fldcw  WORD PTR ds:0xc0022244
c002228b:	c3                   	ret    

c002228c <x87Close>:
c002228c:	c3                   	ret    
c002228d:	66 90                	xchg   ax,ax
c002228f:	90                   	nop

c0022290 <__do_global_ctors_aux>:
c0022290:	a1 2c 34 02 c0       	mov    eax,ds:0xc002342c
c0022295:	83 f8 ff             	cmp    eax,0xffffffff
c0022298:	74 1a                	je     c00222b4 <__do_global_ctors_aux+0x24>
c002229a:	55                   	push   ebp
c002229b:	89 e5                	mov    ebp,esp
c002229d:	53                   	push   ebx
c002229e:	52                   	push   edx
c002229f:	bb 2c 34 02 c0       	mov    ebx,0xc002342c
c00222a4:	ff d0                	call   eax
c00222a6:	83 eb 04             	sub    ebx,0x4
c00222a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00222ab:	83 f8 ff             	cmp    eax,0xffffffff
c00222ae:	75 f4                	jne    c00222a4 <__do_global_ctors_aux+0x14>
c00222b0:	58                   	pop    eax
c00222b1:	5b                   	pop    ebx
c00222b2:	5d                   	pop    ebp
c00222b3:	c3                   	ret    
c00222b4:	c3                   	ret    
c00222b5:	66 90                	xchg   ax,ax
c00222b7:	90                   	nop

c00222b8 <__divdi3>:
c00222b8:	55                   	push   ebp
c00222b9:	57                   	push   edi
c00222ba:	56                   	push   esi
c00222bb:	53                   	push   ebx
c00222bc:	83 ec 1c             	sub    esp,0x1c
c00222bf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00222c3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00222c7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00222ca:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00222ce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00222d2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00222d6:	85 db                	test   ebx,ebx
c00222d8:	0f 88 8e 00 00 00    	js     c002236c <__divdi3+0xb4>
c00222de:	89 dd                	mov    ebp,ebx
c00222e0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00222e8:	89 d3                	mov    ebx,edx
c00222ea:	85 d2                	test   edx,edx
c00222ec:	79 0d                	jns    c00222fb <__divdi3+0x43>
c00222ee:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00222f2:	f7 d8                	neg    eax
c00222f4:	83 d2 00             	adc    edx,0x0
c00222f7:	f7 da                	neg    edx
c00222f9:	89 d3                	mov    ebx,edx
c00222fb:	89 c7                	mov    edi,eax
c00222fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022300:	85 db                	test   ebx,ebx
c0022302:	75 48                	jne    c002234c <__divdi3+0x94>
c0022304:	39 ef                	cmp    edi,ebp
c0022306:	76 24                	jbe    c002232c <__divdi3+0x74>
c0022308:	89 ea                	mov    edx,ebp
c002230a:	f7 f7                	div    edi
c002230c:	89 c1                	mov    ecx,eax
c002230e:	31 f6                	xor    esi,esi
c0022310:	89 c8                	mov    eax,ecx
c0022312:	89 f2                	mov    edx,esi
c0022314:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022318:	85 c9                	test   ecx,ecx
c002231a:	74 07                	je     c0022323 <__divdi3+0x6b>
c002231c:	f7 d8                	neg    eax
c002231e:	83 d2 00             	adc    edx,0x0
c0022321:	f7 da                	neg    edx
c0022323:	83 c4 1c             	add    esp,0x1c
c0022326:	5b                   	pop    ebx
c0022327:	5e                   	pop    esi
c0022328:	5f                   	pop    edi
c0022329:	5d                   	pop    ebp
c002232a:	c3                   	ret    
c002232b:	90                   	nop
c002232c:	85 ff                	test   edi,edi
c002232e:	75 0b                	jne    c002233b <__divdi3+0x83>
c0022330:	b8 01 00 00 00       	mov    eax,0x1
c0022335:	31 d2                	xor    edx,edx
c0022337:	f7 f3                	div    ebx
c0022339:	89 c7                	mov    edi,eax
c002233b:	31 d2                	xor    edx,edx
c002233d:	89 e8                	mov    eax,ebp
c002233f:	f7 f7                	div    edi
c0022341:	89 c6                	mov    esi,eax
c0022343:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022346:	f7 f7                	div    edi
c0022348:	89 c1                	mov    ecx,eax
c002234a:	eb c4                	jmp    c0022310 <__divdi3+0x58>
c002234c:	39 eb                	cmp    ebx,ebp
c002234e:	77 3c                	ja     c002238c <__divdi3+0xd4>
c0022350:	0f bd f3             	bsr    esi,ebx
c0022353:	83 f6 1f             	xor    esi,0x1f
c0022356:	75 40                	jne    c0022398 <__divdi3+0xe0>
c0022358:	39 eb                	cmp    ebx,ebp
c002235a:	72 09                	jb     c0022365 <__divdi3+0xad>
c002235c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002235f:	0f 87 97 00 00 00    	ja     c00223fc <__divdi3+0x144>
c0022365:	b9 01 00 00 00       	mov    ecx,0x1
c002236a:	eb a4                	jmp    c0022310 <__divdi3+0x58>
c002236c:	f7 d9                	neg    ecx
c002236e:	83 d3 00             	adc    ebx,0x0
c0022371:	f7 db                	neg    ebx
c0022373:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022376:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002237a:	89 dd                	mov    ebp,ebx
c002237c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0022384:	e9 5f ff ff ff       	jmp    c00222e8 <__divdi3+0x30>
c0022389:	8d 76 00             	lea    esi,[esi+0x0]
c002238c:	31 f6                	xor    esi,esi
c002238e:	31 c9                	xor    ecx,ecx
c0022390:	e9 7b ff ff ff       	jmp    c0022310 <__divdi3+0x58>
c0022395:	8d 76 00             	lea    esi,[esi+0x0]
c0022398:	b8 20 00 00 00       	mov    eax,0x20
c002239d:	29 f0                	sub    eax,esi
c002239f:	89 f1                	mov    ecx,esi
c00223a1:	d3 e3                	shl    ebx,cl
c00223a3:	89 fa                	mov    edx,edi
c00223a5:	88 c1                	mov    cl,al
c00223a7:	d3 ea                	shr    edx,cl
c00223a9:	09 da                	or     edx,ebx
c00223ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00223af:	89 f1                	mov    ecx,esi
c00223b1:	d3 e7                	shl    edi,cl
c00223b3:	89 eb                	mov    ebx,ebp
c00223b5:	88 c1                	mov    cl,al
c00223b7:	d3 eb                	shr    ebx,cl
c00223b9:	89 f1                	mov    ecx,esi
c00223bb:	d3 e5                	shl    ebp,cl
c00223bd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00223c0:	88 c1                	mov    cl,al
c00223c2:	d3 ea                	shr    edx,cl
c00223c4:	09 d5                	or     ebp,edx
c00223c6:	89 e8                	mov    eax,ebp
c00223c8:	89 da                	mov    edx,ebx
c00223ca:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00223ce:	89 d3                	mov    ebx,edx
c00223d0:	89 c5                	mov    ebp,eax
c00223d2:	f7 e7                	mul    edi
c00223d4:	39 d3                	cmp    ebx,edx
c00223d6:	72 18                	jb     c00223f0 <__divdi3+0x138>
c00223d8:	74 0a                	je     c00223e4 <__divdi3+0x12c>
c00223da:	89 e9                	mov    ecx,ebp
c00223dc:	31 f6                	xor    esi,esi
c00223de:	e9 2d ff ff ff       	jmp    c0022310 <__divdi3+0x58>
c00223e3:	90                   	nop
c00223e4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00223e7:	89 f1                	mov    ecx,esi
c00223e9:	d3 e7                	shl    edi,cl
c00223eb:	39 c7                	cmp    edi,eax
c00223ed:	73 eb                	jae    c00223da <__divdi3+0x122>
c00223ef:	90                   	nop
c00223f0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00223f3:	31 f6                	xor    esi,esi
c00223f5:	e9 16 ff ff ff       	jmp    c0022310 <__divdi3+0x58>
c00223fa:	66 90                	xchg   ax,ax
c00223fc:	31 c9                	xor    ecx,ecx
c00223fe:	e9 0d ff ff ff       	jmp    c0022310 <__divdi3+0x58>
c0022403:	90                   	nop

c0022404 <__moddi3>:
c0022404:	55                   	push   ebp
c0022405:	57                   	push   edi
c0022406:	56                   	push   esi
c0022407:	53                   	push   ebx
c0022408:	83 ec 2c             	sub    esp,0x2c
c002240b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002240f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0022413:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022417:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002241b:	85 db                	test   ebx,ebx
c002241d:	0f 88 85 00 00 00    	js     c00224a8 <__moddi3+0xa4>
c0022423:	89 de                	mov    esi,ebx
c0022425:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002242d:	89 d7                	mov    edi,edx
c002242f:	85 d2                	test   edx,edx
c0022431:	79 09                	jns    c002243c <__moddi3+0x38>
c0022433:	f7 d8                	neg    eax
c0022435:	83 d2 00             	adc    edx,0x0
c0022438:	f7 da                	neg    edx
c002243a:	89 d7                	mov    edi,edx
c002243c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022440:	89 cd                	mov    ebp,ecx
c0022442:	85 ff                	test   edi,edi
c0022444:	75 52                	jne    c0022498 <__moddi3+0x94>
c0022446:	89 c3                	mov    ebx,eax
c0022448:	39 f0                	cmp    eax,esi
c002244a:	76 24                	jbe    c0022470 <__moddi3+0x6c>
c002244c:	89 c8                	mov    eax,ecx
c002244e:	89 f2                	mov    edx,esi
c0022450:	f7 f3                	div    ebx
c0022452:	89 d6                	mov    esi,edx
c0022454:	89 f0                	mov    eax,esi
c0022456:	31 d2                	xor    edx,edx
c0022458:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002245c:	85 c9                	test   ecx,ecx
c002245e:	74 07                	je     c0022467 <__moddi3+0x63>
c0022460:	f7 d8                	neg    eax
c0022462:	83 d2 00             	adc    edx,0x0
c0022465:	f7 da                	neg    edx
c0022467:	83 c4 2c             	add    esp,0x2c
c002246a:	5b                   	pop    ebx
c002246b:	5e                   	pop    esi
c002246c:	5f                   	pop    edi
c002246d:	5d                   	pop    ebp
c002246e:	c3                   	ret    
c002246f:	90                   	nop
c0022470:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022474:	85 db                	test   ebx,ebx
c0022476:	75 0d                	jne    c0022485 <__moddi3+0x81>
c0022478:	b8 01 00 00 00       	mov    eax,0x1
c002247d:	31 d2                	xor    edx,edx
c002247f:	f7 f7                	div    edi
c0022481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022485:	89 f0                	mov    eax,esi
c0022487:	31 d2                	xor    edx,edx
c0022489:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002248d:	f7 f7                	div    edi
c002248f:	89 e8                	mov    eax,ebp
c0022491:	f7 f7                	div    edi
c0022493:	89 d6                	mov    esi,edx
c0022495:	eb bd                	jmp    c0022454 <__moddi3+0x50>
c0022497:	90                   	nop
c0022498:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002249c:	39 f7                	cmp    edi,esi
c002249e:	76 20                	jbe    c00224c0 <__moddi3+0xbc>
c00224a0:	89 c8                	mov    eax,ecx
c00224a2:	89 f2                	mov    edx,esi
c00224a4:	eb b2                	jmp    c0022458 <__moddi3+0x54>
c00224a6:	66 90                	xchg   ax,ax
c00224a8:	f7 d9                	neg    ecx
c00224aa:	83 d3 00             	adc    ebx,0x0
c00224ad:	f7 db                	neg    ebx
c00224af:	89 de                	mov    esi,ebx
c00224b1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00224b9:	e9 6f ff ff ff       	jmp    c002242d <__moddi3+0x29>
c00224be:	66 90                	xchg   ax,ax
c00224c0:	0f bd c7             	bsr    eax,edi
c00224c3:	83 f0 1f             	xor    eax,0x1f
c00224c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00224ca:	75 24                	jne    c00224f0 <__moddi3+0xec>
c00224cc:	39 f7                	cmp    edi,esi
c00224ce:	72 06                	jb     c00224d6 <__moddi3+0xd2>
c00224d0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00224d4:	77 0c                	ja     c00224e2 <__moddi3+0xde>
c00224d6:	89 e9                	mov    ecx,ebp
c00224d8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00224dc:	19 fe                	sbb    esi,edi
c00224de:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00224e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00224e6:	89 f2                	mov    edx,esi
c00224e8:	e9 6b ff ff ff       	jmp    c0022458 <__moddi3+0x54>
c00224ed:	8d 76 00             	lea    esi,[esi+0x0]
c00224f0:	b8 20 00 00 00       	mov    eax,0x20
c00224f5:	89 c2                	mov    edx,eax
c00224f7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00224fb:	29 da                	sub    edx,ebx
c00224fd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0022501:	88 d9                	mov    cl,bl
c0022503:	d3 e7                	shl    edi,cl
c0022505:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022509:	88 d1                	mov    cl,dl
c002250b:	d3 e8                	shr    eax,cl
c002250d:	09 c7                	or     edi,eax
c002250f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0022513:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022517:	89 d8                	mov    eax,ebx
c0022519:	88 d9                	mov    cl,bl
c002251b:	d3 e7                	shl    edi,cl
c002251d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022521:	89 f3                	mov    ebx,esi
c0022523:	88 d1                	mov    cl,dl
c0022525:	d3 eb                	shr    ebx,cl
c0022527:	89 c7                	mov    edi,eax
c0022529:	88 c1                	mov    cl,al
c002252b:	d3 e6                	shl    esi,cl
c002252d:	89 e8                	mov    eax,ebp
c002252f:	88 d1                	mov    cl,dl
c0022531:	d3 e8                	shr    eax,cl
c0022533:	09 f0                	or     eax,esi
c0022535:	89 f9                	mov    ecx,edi
c0022537:	d3 e5                	shl    ebp,cl
c0022539:	89 da                	mov    edx,ebx
c002253b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002253f:	89 d3                	mov    ebx,edx
c0022541:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022545:	89 c6                	mov    esi,eax
c0022547:	89 d1                	mov    ecx,edx
c0022549:	39 d3                	cmp    ebx,edx
c002254b:	72 27                	jb     c0022574 <__moddi3+0x170>
c002254d:	74 21                	je     c0022570 <__moddi3+0x16c>
c002254f:	29 f5                	sub    ebp,esi
c0022551:	19 cb                	sbb    ebx,ecx
c0022553:	89 de                	mov    esi,ebx
c0022555:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0022559:	d3 e6                	shl    esi,cl
c002255b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002255f:	89 f9                	mov    ecx,edi
c0022561:	d3 ed                	shr    ebp,cl
c0022563:	09 ee                	or     esi,ebp
c0022565:	89 f0                	mov    eax,esi
c0022567:	d3 eb                	shr    ebx,cl
c0022569:	89 da                	mov    edx,ebx
c002256b:	e9 e8 fe ff ff       	jmp    c0022458 <__moddi3+0x54>
c0022570:	39 c5                	cmp    ebp,eax
c0022572:	73 db                	jae    c002254f <__moddi3+0x14b>
c0022574:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022578:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002257c:	89 d1                	mov    ecx,edx
c002257e:	89 c6                	mov    esi,eax
c0022580:	eb cd                	jmp    c002254f <__moddi3+0x14b>
c0022582:	66 90                	xchg   ax,ax

c0022584 <__udivdi3>:
c0022584:	55                   	push   ebp
c0022585:	57                   	push   edi
c0022586:	56                   	push   esi
c0022587:	53                   	push   ebx
c0022588:	83 ec 1c             	sub    esp,0x1c
c002258b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002258f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022593:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022597:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002259b:	85 d2                	test   edx,edx
c002259d:	75 41                	jne    c00225e0 <__udivdi3+0x5c>
c002259f:	39 f7                	cmp    edi,esi
c00225a1:	76 15                	jbe    c00225b8 <__udivdi3+0x34>
c00225a3:	89 e8                	mov    eax,ebp
c00225a5:	89 f2                	mov    edx,esi
c00225a7:	f7 f7                	div    edi
c00225a9:	31 db                	xor    ebx,ebx
c00225ab:	89 da                	mov    edx,ebx
c00225ad:	83 c4 1c             	add    esp,0x1c
c00225b0:	5b                   	pop    ebx
c00225b1:	5e                   	pop    esi
c00225b2:	5f                   	pop    edi
c00225b3:	5d                   	pop    ebp
c00225b4:	c3                   	ret    
c00225b5:	8d 76 00             	lea    esi,[esi+0x0]
c00225b8:	89 f9                	mov    ecx,edi
c00225ba:	85 ff                	test   edi,edi
c00225bc:	75 0b                	jne    c00225c9 <__udivdi3+0x45>
c00225be:	b8 01 00 00 00       	mov    eax,0x1
c00225c3:	31 d2                	xor    edx,edx
c00225c5:	f7 f7                	div    edi
c00225c7:	89 c1                	mov    ecx,eax
c00225c9:	31 d2                	xor    edx,edx
c00225cb:	89 f0                	mov    eax,esi
c00225cd:	f7 f1                	div    ecx
c00225cf:	89 c3                	mov    ebx,eax
c00225d1:	89 e8                	mov    eax,ebp
c00225d3:	f7 f1                	div    ecx
c00225d5:	89 da                	mov    edx,ebx
c00225d7:	83 c4 1c             	add    esp,0x1c
c00225da:	5b                   	pop    ebx
c00225db:	5e                   	pop    esi
c00225dc:	5f                   	pop    edi
c00225dd:	5d                   	pop    ebp
c00225de:	c3                   	ret    
c00225df:	90                   	nop
c00225e0:	39 f2                	cmp    edx,esi
c00225e2:	77 1c                	ja     c0022600 <__udivdi3+0x7c>
c00225e4:	0f bd da             	bsr    ebx,edx
c00225e7:	83 f3 1f             	xor    ebx,0x1f
c00225ea:	75 24                	jne    c0022610 <__udivdi3+0x8c>
c00225ec:	39 f2                	cmp    edx,esi
c00225ee:	72 08                	jb     c00225f8 <__udivdi3+0x74>
c00225f0:	39 ef                	cmp    edi,ebp
c00225f2:	0f 87 84 00 00 00    	ja     c002267c <__udivdi3+0xf8>
c00225f8:	b8 01 00 00 00       	mov    eax,0x1
c00225fd:	eb ac                	jmp    c00225ab <__udivdi3+0x27>
c00225ff:	90                   	nop
c0022600:	31 db                	xor    ebx,ebx
c0022602:	31 c0                	xor    eax,eax
c0022604:	89 da                	mov    edx,ebx
c0022606:	83 c4 1c             	add    esp,0x1c
c0022609:	5b                   	pop    ebx
c002260a:	5e                   	pop    esi
c002260b:	5f                   	pop    edi
c002260c:	5d                   	pop    ebp
c002260d:	c3                   	ret    
c002260e:	66 90                	xchg   ax,ax
c0022610:	b8 20 00 00 00       	mov    eax,0x20
c0022615:	29 d8                	sub    eax,ebx
c0022617:	88 d9                	mov    cl,bl
c0022619:	d3 e2                	shl    edx,cl
c002261b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002261f:	89 fa                	mov    edx,edi
c0022621:	88 c1                	mov    cl,al
c0022623:	d3 ea                	shr    edx,cl
c0022625:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022629:	09 d1                	or     ecx,edx
c002262b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002262f:	88 d9                	mov    cl,bl
c0022631:	d3 e7                	shl    edi,cl
c0022633:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022637:	89 f7                	mov    edi,esi
c0022639:	88 c1                	mov    cl,al
c002263b:	d3 ef                	shr    edi,cl
c002263d:	88 d9                	mov    cl,bl
c002263f:	d3 e6                	shl    esi,cl
c0022641:	89 ea                	mov    edx,ebp
c0022643:	88 c1                	mov    cl,al
c0022645:	d3 ea                	shr    edx,cl
c0022647:	09 d6                	or     esi,edx
c0022649:	89 f0                	mov    eax,esi
c002264b:	89 fa                	mov    edx,edi
c002264d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0022651:	89 d7                	mov    edi,edx
c0022653:	89 c6                	mov    esi,eax
c0022655:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022659:	39 d7                	cmp    edi,edx
c002265b:	72 13                	jb     c0022670 <__udivdi3+0xec>
c002265d:	74 09                	je     c0022668 <__udivdi3+0xe4>
c002265f:	89 f0                	mov    eax,esi
c0022661:	31 db                	xor    ebx,ebx
c0022663:	e9 43 ff ff ff       	jmp    c00225ab <__udivdi3+0x27>
c0022668:	88 d9                	mov    cl,bl
c002266a:	d3 e5                	shl    ebp,cl
c002266c:	39 c5                	cmp    ebp,eax
c002266e:	73 ef                	jae    c002265f <__udivdi3+0xdb>
c0022670:	8d 46 ff             	lea    eax,[esi-0x1]
c0022673:	31 db                	xor    ebx,ebx
c0022675:	e9 31 ff ff ff       	jmp    c00225ab <__udivdi3+0x27>
c002267a:	66 90                	xchg   ax,ax
c002267c:	31 c0                	xor    eax,eax
c002267e:	e9 28 ff ff ff       	jmp    c00225ab <__udivdi3+0x27>
c0022683:	90                   	nop

c0022684 <__umoddi3>:
c0022684:	55                   	push   ebp
c0022685:	57                   	push   edi
c0022686:	56                   	push   esi
c0022687:	53                   	push   ebx
c0022688:	83 ec 1c             	sub    esp,0x1c
c002268b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002268f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022693:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022697:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002269b:	89 da                	mov    edx,ebx
c002269d:	85 c0                	test   eax,eax
c002269f:	75 37                	jne    c00226d8 <__umoddi3+0x54>
c00226a1:	39 df                	cmp    edi,ebx
c00226a3:	76 13                	jbe    c00226b8 <__umoddi3+0x34>
c00226a5:	89 f0                	mov    eax,esi
c00226a7:	f7 f7                	div    edi
c00226a9:	89 d0                	mov    eax,edx
c00226ab:	31 d2                	xor    edx,edx
c00226ad:	83 c4 1c             	add    esp,0x1c
c00226b0:	5b                   	pop    ebx
c00226b1:	5e                   	pop    esi
c00226b2:	5f                   	pop    edi
c00226b3:	5d                   	pop    ebp
c00226b4:	c3                   	ret    
c00226b5:	8d 76 00             	lea    esi,[esi+0x0]
c00226b8:	89 fd                	mov    ebp,edi
c00226ba:	85 ff                	test   edi,edi
c00226bc:	75 0b                	jne    c00226c9 <__umoddi3+0x45>
c00226be:	b8 01 00 00 00       	mov    eax,0x1
c00226c3:	31 d2                	xor    edx,edx
c00226c5:	f7 f7                	div    edi
c00226c7:	89 c5                	mov    ebp,eax
c00226c9:	89 d8                	mov    eax,ebx
c00226cb:	31 d2                	xor    edx,edx
c00226cd:	f7 f5                	div    ebp
c00226cf:	89 f0                	mov    eax,esi
c00226d1:	f7 f5                	div    ebp
c00226d3:	89 d0                	mov    eax,edx
c00226d5:	eb d4                	jmp    c00226ab <__umoddi3+0x27>
c00226d7:	90                   	nop
c00226d8:	89 f1                	mov    ecx,esi
c00226da:	39 d8                	cmp    eax,ebx
c00226dc:	76 0a                	jbe    c00226e8 <__umoddi3+0x64>
c00226de:	89 f0                	mov    eax,esi
c00226e0:	83 c4 1c             	add    esp,0x1c
c00226e3:	5b                   	pop    ebx
c00226e4:	5e                   	pop    esi
c00226e5:	5f                   	pop    edi
c00226e6:	5d                   	pop    ebp
c00226e7:	c3                   	ret    
c00226e8:	0f bd e8             	bsr    ebp,eax
c00226eb:	83 f5 1f             	xor    ebp,0x1f
c00226ee:	75 1c                	jne    c002270c <__umoddi3+0x88>
c00226f0:	39 d8                	cmp    eax,ebx
c00226f2:	72 04                	jb     c00226f8 <__umoddi3+0x74>
c00226f4:	39 f7                	cmp    edi,esi
c00226f6:	77 08                	ja     c0022700 <__umoddi3+0x7c>
c00226f8:	89 da                	mov    edx,ebx
c00226fa:	29 fe                	sub    esi,edi
c00226fc:	19 c2                	sbb    edx,eax
c00226fe:	89 f1                	mov    ecx,esi
c0022700:	89 c8                	mov    eax,ecx
c0022702:	83 c4 1c             	add    esp,0x1c
c0022705:	5b                   	pop    ebx
c0022706:	5e                   	pop    esi
c0022707:	5f                   	pop    edi
c0022708:	5d                   	pop    ebp
c0022709:	c3                   	ret    
c002270a:	66 90                	xchg   ax,ax
c002270c:	ba 20 00 00 00       	mov    edx,0x20
c0022711:	29 ea                	sub    edx,ebp
c0022713:	89 e9                	mov    ecx,ebp
c0022715:	d3 e0                	shl    eax,cl
c0022717:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002271b:	89 f8                	mov    eax,edi
c002271d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022721:	88 d1                	mov    cl,dl
c0022723:	d3 e8                	shr    eax,cl
c0022725:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022729:	09 c1                	or     ecx,eax
c002272b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002272f:	89 e9                	mov    ecx,ebp
c0022731:	d3 e7                	shl    edi,cl
c0022733:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022737:	89 d8                	mov    eax,ebx
c0022739:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002273d:	88 d1                	mov    cl,dl
c002273f:	d3 e8                	shr    eax,cl
c0022741:	89 c7                	mov    edi,eax
c0022743:	89 e9                	mov    ecx,ebp
c0022745:	d3 e3                	shl    ebx,cl
c0022747:	89 f0                	mov    eax,esi
c0022749:	88 d1                	mov    cl,dl
c002274b:	d3 e8                	shr    eax,cl
c002274d:	09 d8                	or     eax,ebx
c002274f:	89 e9                	mov    ecx,ebp
c0022751:	d3 e6                	shl    esi,cl
c0022753:	89 f3                	mov    ebx,esi
c0022755:	89 fa                	mov    edx,edi
c0022757:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002275b:	89 d1                	mov    ecx,edx
c002275d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022761:	89 c6                	mov    esi,eax
c0022763:	89 d7                	mov    edi,edx
c0022765:	39 d1                	cmp    ecx,edx
c0022767:	72 27                	jb     c0022790 <__umoddi3+0x10c>
c0022769:	74 21                	je     c002278c <__umoddi3+0x108>
c002276b:	89 ca                	mov    edx,ecx
c002276d:	29 f3                	sub    ebx,esi
c002276f:	19 fa                	sbb    edx,edi
c0022771:	89 d0                	mov    eax,edx
c0022773:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0022777:	d3 e0                	shl    eax,cl
c0022779:	89 e9                	mov    ecx,ebp
c002277b:	d3 eb                	shr    ebx,cl
c002277d:	09 d8                	or     eax,ebx
c002277f:	d3 ea                	shr    edx,cl
c0022781:	83 c4 1c             	add    esp,0x1c
c0022784:	5b                   	pop    ebx
c0022785:	5e                   	pop    esi
c0022786:	5f                   	pop    edi
c0022787:	5d                   	pop    ebp
c0022788:	c3                   	ret    
c0022789:	8d 76 00             	lea    esi,[esi+0x0]
c002278c:	39 c3                	cmp    ebx,eax
c002278e:	73 db                	jae    c002276b <__umoddi3+0xe7>
c0022790:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022794:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0022798:	89 d7                	mov    edi,edx
c002279a:	89 c6                	mov    esi,eax
c002279c:	eb cd                	jmp    c002276b <__umoddi3+0xe7>

Disassembly of section .init:

c002279e <_init>:
c002279e:	55                   	push   ebp
c002279f:	89 e5                	mov    ebp,esp
c00227a1:	e8 72 d9 fd ff       	call   c0000118 <frame_dummy>
c00227a6:	e8 e5 fa ff ff       	call   c0022290 <__do_global_ctors_aux>
c00227ab:	5d                   	pop    ebp
c00227ac:	c3                   	ret    

Disassembly of section .fini:

c00227ad <_fini>:
c00227ad:	55                   	push   ebp
c00227ae:	89 e5                	mov    ebp,esp
c00227b0:	e8 f3 d8 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00227b5:	5d                   	pop    ebp
c00227b6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00227b8 <Computer::~Computer()>:
c00227b8:	83 ec 0c             	sub    esp,0xc
c00227bb:	ba d4 3d 02 c0       	mov    edx,0xc0023dd4
c00227c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227c4:	89 10                	mov    DWORD PTR [eax],edx
c00227c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227ca:	83 ec 0c             	sub    esp,0xc
c00227cd:	50                   	push   eax
c00227ce:	e8 81 b8 fe ff       	call   c000e054 <Device::~Device()>
c00227d3:	83 c4 10             	add    esp,0x10
c00227d6:	90                   	nop
c00227d7:	83 c4 0c             	add    esp,0xc
c00227da:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00227dc <Computer::~Computer()>:
c00227dc:	83 ec 0c             	sub    esp,0xc
c00227df:	83 ec 0c             	sub    esp,0xc
c00227e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00227e6:	e8 cd ff ff ff       	call   c00227b8 <Computer::~Computer()>
c00227eb:	83 c4 10             	add    esp,0x10
c00227ee:	83 ec 08             	sub    esp,0x8
c00227f1:	68 ec 01 00 00       	push   0x1ec
c00227f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00227fa:	e8 1f a4 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00227ff:	83 c4 10             	add    esp,0x10
c0022802:	83 c4 0c             	add    esp,0xc
c0022805:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0022806 <idleCommon()>:
c0022806:	83 ec 0c             	sub    esp,0xc
c0022809:	fa                   	cli    
c002280a:	ff 05 c8 91 02 c0    	inc    DWORD PTR ds:0xc00291c8
c0022810:	e8 d3 5d ff ff       	call   c00185e8 <schedule()>
c0022815:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c002281a:	48                   	dec    eax
c002281b:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c0022820:	75 01                	jne    c0022823 <idleCommon()+0x1d>
c0022822:	fb                   	sti    
c0022823:	83 c4 0c             	add    esp,0xc
c0022826:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0022828 <LinkedList<UnixFile>::~LinkedList()>:
c0022828:	90                   	nop
c0022829:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002282a <LinkedList<UnixFile>::LinkedList()>:
c002282a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002282e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022834:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022838:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002283f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022843:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002284a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002284e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022854:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022858:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002285f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022863:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002286a:	90                   	nop
c002286b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002286c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002286c:	83 ec 0c             	sub    esp,0xc
c002286f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022874:	75 10                	jne    c0022886 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0022876:	83 ec 0c             	sub    esp,0xc
c0022879:	68 a8 41 02 c0       	push   0xc00241a8
c002287e:	e8 2c 20 ff ff       	call   c00148af <Krnl::panic(char const*)>
c0022883:	83 c4 10             	add    esp,0x10
c0022886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002288a:	8b 00                	mov    eax,DWORD PTR [eax]
c002288c:	85 c0                	test   eax,eax
c002288e:	74 34                	je     c00228c4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022894:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022897:	85 c0                	test   eax,eax
c0022899:	74 29                	je     c00228c4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002289b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002289f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00228a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00228a6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00228a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00228b1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00228b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00228bb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00228c2:	eb 65                	jmp    c0022929 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00228c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00228ca:	85 c0                	test   eax,eax
c00228cc:	75 4b                	jne    c0022919 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00228ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00228d5:	85 c0                	test   eax,eax
c00228d7:	75 40                	jne    c0022919 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00228d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228dd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00228e1:	89 10                	mov    DWORD PTR [eax],edx
c00228e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00228eb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00228ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00228f5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00228fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022900:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022903:	85 c0                	test   eax,eax
c0022905:	74 22                	je     c0022929 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022907:	83 ec 0c             	sub    esp,0xc
c002290a:	68 ca 41 02 c0       	push   0xc00241ca
c002290f:	e8 9b 1f ff ff       	call   c00148af <Krnl::panic(char const*)>
c0022914:	83 c4 10             	add    esp,0x10
c0022917:	eb 10                	jmp    c0022929 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022919:	83 ec 0c             	sub    esp,0xc
c002291c:	68 d4 41 02 c0       	push   0xc00241d4
c0022921:	e8 89 1f ff ff       	call   c00148af <Krnl::panic(char const*)>
c0022926:	83 c4 10             	add    esp,0x10
c0022929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002292d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022930:	8d 50 01             	lea    edx,[eax+0x1]
c0022933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022937:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002293a:	90                   	nop
c002293b:	83 c4 0c             	add    esp,0xc
c002293e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0022940 <LinkedList<UnixFile>::getFirstElement()>:
c0022940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022944:	8b 00                	mov    eax,DWORD PTR [eax]
c0022946:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0022948 <LinkedList<UnixFile>::removeFirst()>:
c0022948:	83 ec 0c             	sub    esp,0xc
c002294b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002294f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022951:	85 c0                	test   eax,eax
c0022953:	75 12                	jne    c0022967 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0022955:	83 ec 0c             	sub    esp,0xc
c0022958:	68 e0 41 02 c0       	push   0xc00241e0
c002295d:	e8 4d 1f ff ff       	call   c00148af <Krnl::panic(char const*)>
c0022962:	83 c4 10             	add    esp,0x10
c0022965:	eb 7e                	jmp    c00229e5 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0022967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002296b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002296e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022971:	85 c0                	test   eax,eax
c0022973:	74 10                	je     c0022985 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0022975:	83 ec 0c             	sub    esp,0xc
c0022978:	68 2b 42 02 c0       	push   0xc002422b
c002297d:	e8 2d 1f ff ff       	call   c00148af <Krnl::panic(char const*)>
c0022982:	83 c4 10             	add    esp,0x10
c0022985:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022989:	8b 00                	mov    eax,DWORD PTR [eax]
c002298b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002298e:	85 c0                	test   eax,eax
c0022990:	75 33                	jne    c00229c5 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0022992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022996:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002299c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229a0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00229a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229ab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00229ae:	83 f8 01             	cmp    eax,0x1
c00229b1:	74 21                	je     c00229d4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00229b3:	83 ec 0c             	sub    esp,0xc
c00229b6:	68 04 42 02 c0       	push   0xc0024204
c00229bb:	e8 ef 1e ff ff       	call   c00148af <Krnl::panic(char const*)>
c00229c0:	83 c4 10             	add    esp,0x10
c00229c3:	eb 0f                	jmp    c00229d4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00229c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00229cb:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00229ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229d2:	89 10                	mov    DWORD PTR [eax],edx
c00229d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00229db:	8d 50 ff             	lea    edx,[eax-0x1]
c00229de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00229e5:	83 c4 0c             	add    esp,0xc
c00229e8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00229ea <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00229ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00229ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00229f1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00229f2 <DriverlessDevice::~DriverlessDevice()>:
c00229f2:	ba dc 49 02 c0       	mov    edx,0xc00249dc
c00229f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00229fb:	89 10                	mov    DWORD PTR [eax],edx
c00229fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a01:	50                   	push   eax
c0022a02:	e8 4d b6 fe ff       	call   c000e054 <Device::~Device()>
c0022a07:	83 c4 04             	add    esp,0x4
c0022a0a:	90                   	nop
c0022a0b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0022a0c <DriverlessDevice::~DriverlessDevice()>:
c0022a0c:	83 ec 0c             	sub    esp,0xc
c0022a0f:	83 ec 0c             	sub    esp,0xc
c0022a12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a16:	e8 d7 ff ff ff       	call   c00229f2 <DriverlessDevice::~DriverlessDevice()>
c0022a1b:	83 c4 10             	add    esp,0x10
c0022a1e:	83 ec 08             	sub    esp,0x8
c0022a21:	68 58 01 00 00       	push   0x158
c0022a26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a2a:	e8 ef a1 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0022a2f:	83 c4 10             	add    esp,0x10
c0022a32:	83 c4 0c             	add    esp,0xc
c0022a35:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0022a36 <LinkedList<Device>::addElement(Device*)>:
c0022a36:	83 ec 0c             	sub    esp,0xc
c0022a39:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022a3e:	75 10                	jne    c0022a50 <LinkedList<Device>::addElement(Device*)+0x1a>
c0022a40:	83 ec 0c             	sub    esp,0xc
c0022a43:	68 a8 41 02 c0       	push   0xc00241a8
c0022a48:	e8 62 1e ff ff       	call   c00148af <Krnl::panic(char const*)>
c0022a4d:	83 c4 10             	add    esp,0x10
c0022a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a54:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a56:	85 c0                	test   eax,eax
c0022a58:	74 3a                	je     c0022a94 <LinkedList<Device>::addElement(Device*)+0x5e>
c0022a5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022a61:	85 c0                	test   eax,eax
c0022a63:	74 2f                	je     c0022a94 <LinkedList<Device>::addElement(Device*)+0x5e>
c0022a65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a69:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022a6c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022a70:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0022a76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a7a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022a7e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022a81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a85:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022a88:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022a92:	eb 68                	jmp    c0022afc <LinkedList<Device>::addElement(Device*)+0xc6>
c0022a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a98:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a9a:	85 c0                	test   eax,eax
c0022a9c:	75 4e                	jne    c0022aec <LinkedList<Device>::addElement(Device*)+0xb6>
c0022a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aa2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022aa5:	85 c0                	test   eax,eax
c0022aa7:	75 43                	jne    c0022aec <LinkedList<Device>::addElement(Device*)+0xb6>
c0022aa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022ab1:	89 10                	mov    DWORD PTR [eax],edx
c0022ab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ab7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022abb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ac2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ac5:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ad3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022ad6:	85 c0                	test   eax,eax
c0022ad8:	74 22                	je     c0022afc <LinkedList<Device>::addElement(Device*)+0xc6>
c0022ada:	83 ec 0c             	sub    esp,0xc
c0022add:	68 ca 41 02 c0       	push   0xc00241ca
c0022ae2:	e8 c8 1d ff ff       	call   c00148af <Krnl::panic(char const*)>
c0022ae7:	83 c4 10             	add    esp,0x10
c0022aea:	eb 10                	jmp    c0022afc <LinkedList<Device>::addElement(Device*)+0xc6>
c0022aec:	83 ec 0c             	sub    esp,0xc
c0022aef:	68 d4 41 02 c0       	push   0xc00241d4
c0022af4:	e8 b6 1d ff ff       	call   c00148af <Krnl::panic(char const*)>
c0022af9:	83 c4 10             	add    esp,0x10
c0022afc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b00:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b03:	8d 50 01             	lea    edx,[eax+0x1]
c0022b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b0a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022b0d:	90                   	nop
c0022b0e:	83 c4 0c             	add    esp,0xc
c0022b11:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0022b12 <LinkedList<Device>::LinkedList()>:
c0022b12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b16:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b20:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022b27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b2b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022b32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b36:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022b3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b40:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022b47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b4b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022b52:	90                   	nop
c0022b53:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0022b54 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0022b54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b58:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b5a:	85 c0                	test   eax,eax
c0022b5c:	75 0e                	jne    c0022b6c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0022b5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b65:	85 c0                	test   eax,eax
c0022b67:	75 03                	jne    c0022b6c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0022b69:	b0 01                	mov    al,0x1
c0022b6b:	c3                   	ret    
c0022b6c:	b0 00                	mov    al,0x0
c0022b6e:	90                   	nop
c0022b6f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0022b70 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0022b70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b74:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b76:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0022b78 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0022b78:	83 ec 0c             	sub    esp,0xc
c0022b7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b81:	85 c0                	test   eax,eax
c0022b83:	75 17                	jne    c0022b9c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0022b85:	83 ec 0c             	sub    esp,0xc
c0022b88:	68 e0 41 02 c0       	push   0xc00241e0
c0022b8d:	e8 1d 1d ff ff       	call   c00148af <Krnl::panic(char const*)>
c0022b92:	83 c4 10             	add    esp,0x10
c0022b95:	e9 92 00 00 00       	jmp    c0022c2c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c0022b9a:	66 90                	xchg   ax,ax
c0022b9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ba0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ba3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022ba6:	85 c0                	test   eax,eax
c0022ba8:	0f 95 c0             	setne  al
c0022bab:	84 c0                	test   al,al
c0022bad:	74 11                	je     c0022bc0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c0022baf:	83 ec 0c             	sub    esp,0xc
c0022bb2:	68 2b 42 02 c0       	push   0xc002422b
c0022bb7:	e8 f3 1c ff ff       	call   c00148af <Krnl::panic(char const*)>
c0022bbc:	83 c4 10             	add    esp,0x10
c0022bbf:	90                   	nop
c0022bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0022bc6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022bc9:	85 c0                	test   eax,eax
c0022bcb:	0f 94 c0             	sete   al
c0022bce:	84 c0                	test   al,al
c0022bd0:	74 36                	je     c0022c08 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c0022bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bd6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022bdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022be0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022be7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022beb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022bee:	83 f8 01             	cmp    eax,0x1
c0022bf1:	74 25                	je     c0022c18 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0022bf3:	83 ec 0c             	sub    esp,0xc
c0022bf6:	68 04 42 02 c0       	push   0xc0024204
c0022bfb:	e8 af 1c ff ff       	call   c00148af <Krnl::panic(char const*)>
c0022c00:	83 c4 10             	add    esp,0x10
c0022c03:	eb 13                	jmp    c0022c18 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0022c05:	8d 76 00             	lea    esi,[esi+0x0]
c0022c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c0e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0022c11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c15:	89 10                	mov    DWORD PTR [eax],edx
c0022c17:	90                   	nop
c0022c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c1c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022c1f:	8d 50 ff             	lea    edx,[eax-0x1]
c0022c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c26:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022c29:	8d 76 00             	lea    esi,[esi+0x0]
c0022c2c:	83 c4 0c             	add    esp,0xc
c0022c2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0022c30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0022c30:	83 ec 0c             	sub    esp,0xc
c0022c33:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022c38:	75 12                	jne    c0022c4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0022c3a:	83 ec 0c             	sub    esp,0xc
c0022c3d:	68 a8 41 02 c0       	push   0xc00241a8
c0022c42:	e8 68 1c ff ff       	call   c00148af <Krnl::panic(char const*)>
c0022c47:	83 c4 10             	add    esp,0x10
c0022c4a:	66 90                	xchg   ax,ax
c0022c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c52:	85 c0                	test   eax,eax
c0022c54:	74 36                	je     c0022c8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022c56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022c5d:	85 c0                	test   eax,eax
c0022c5f:	74 2b                	je     c0022c8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022c68:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022c6c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0022c6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022c77:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022c81:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022c88:	eb 6a                	jmp    c0022cf4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022c8a:	66 90                	xchg   ax,ax
c0022c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c90:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c92:	85 c0                	test   eax,eax
c0022c94:	75 4e                	jne    c0022ce4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022c9d:	85 c0                	test   eax,eax
c0022c9f:	75 43                	jne    c0022ce4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022ca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ca5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022ca9:	89 10                	mov    DWORD PTR [eax],edx
c0022cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022caf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022cb3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022cb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022cbd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cc8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022ccb:	85 c0                	test   eax,eax
c0022ccd:	74 25                	je     c0022cf4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022ccf:	83 ec 0c             	sub    esp,0xc
c0022cd2:	68 ca 41 02 c0       	push   0xc00241ca
c0022cd7:	e8 d3 1b ff ff       	call   c00148af <Krnl::panic(char const*)>
c0022cdc:	83 c4 10             	add    esp,0x10
c0022cdf:	eb 13                	jmp    c0022cf4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022ce1:	8d 76 00             	lea    esi,[esi+0x0]
c0022ce4:	83 ec 0c             	sub    esp,0xc
c0022ce7:	68 d4 41 02 c0       	push   0xc00241d4
c0022cec:	e8 be 1b ff ff       	call   c00148af <Krnl::panic(char const*)>
c0022cf1:	83 c4 10             	add    esp,0x10
c0022cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cf8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022cfb:	8d 50 01             	lea    edx,[eax+0x1]
c0022cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d02:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022d05:	90                   	nop
c0022d06:	83 c4 0c             	add    esp,0xc
c0022d09:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0022d0c <ACPI::~ACPI()>:
c0022d0c:	83 ec 0c             	sub    esp,0xc
c0022d0f:	ba e4 53 02 c0       	mov    edx,0xc00253e4
c0022d14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d18:	89 10                	mov    DWORD PTR [eax],edx
c0022d1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d1e:	83 ec 0c             	sub    esp,0xc
c0022d21:	50                   	push   eax
c0022d22:	e8 2d b3 fe ff       	call   c000e054 <Device::~Device()>
c0022d27:	83 c4 10             	add    esp,0x10
c0022d2a:	90                   	nop
c0022d2b:	83 c4 0c             	add    esp,0xc
c0022d2e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0022d30 <ACPI::~ACPI()>:
c0022d30:	83 ec 0c             	sub    esp,0xc
c0022d33:	83 ec 0c             	sub    esp,0xc
c0022d36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d3a:	e8 cd ff ff ff       	call   c0022d0c <ACPI::~ACPI()>
c0022d3f:	83 c4 10             	add    esp,0x10
c0022d42:	83 ec 08             	sub    esp,0x8
c0022d45:	68 64 12 00 00       	push   0x1264
c0022d4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d4e:	e8 cb 9e fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0022d53:	83 c4 10             	add    esp,0x10
c0022d56:	83 c4 0c             	add    esp,0xc
c0022d59:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0022d5c <LinkedList<Device>::~LinkedList()>:
c0022d5c:	90                   	nop
c0022d5d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0022d60 <LinkedList<Device>::isEmpty()>:
c0022d60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d64:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d66:	85 c0                	test   eax,eax
c0022d68:	75 0e                	jne    c0022d78 <LinkedList<Device>::isEmpty()+0x18>
c0022d6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d71:	85 c0                	test   eax,eax
c0022d73:	75 03                	jne    c0022d78 <LinkedList<Device>::isEmpty()+0x18>
c0022d75:	b0 01                	mov    al,0x1
c0022d77:	c3                   	ret    
c0022d78:	b0 00                	mov    al,0x0
c0022d7a:	90                   	nop
c0022d7b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0022d7c <LinkedList<Device>::getFirstElement()>:
c0022d7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d80:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d82:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0022d84 <LinkedList<Device>::removeFirst()>:
c0022d84:	83 ec 0c             	sub    esp,0xc
c0022d87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d8d:	85 c0                	test   eax,eax
c0022d8f:	75 17                	jne    c0022da8 <LinkedList<Device>::removeFirst()+0x24>
c0022d91:	83 ec 0c             	sub    esp,0xc
c0022d94:	68 e0 41 02 c0       	push   0xc00241e0
c0022d99:	e8 11 1b ff ff       	call   c00148af <Krnl::panic(char const*)>
c0022d9e:	83 c4 10             	add    esp,0x10
c0022da1:	e9 92 00 00 00       	jmp    c0022e38 <LinkedList<Device>::removeFirst()+0xb4>
c0022da6:	66 90                	xchg   ax,ax
c0022da8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022daf:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022db5:	85 c0                	test   eax,eax
c0022db7:	74 13                	je     c0022dcc <LinkedList<Device>::removeFirst()+0x48>
c0022db9:	83 ec 0c             	sub    esp,0xc
c0022dbc:	68 2b 42 02 c0       	push   0xc002422b
c0022dc1:	e8 e9 1a ff ff       	call   c00148af <Krnl::panic(char const*)>
c0022dc6:	83 c4 10             	add    esp,0x10
c0022dc9:	8d 76 00             	lea    esi,[esi+0x0]
c0022dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022dd2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022dd8:	85 c0                	test   eax,eax
c0022dda:	75 34                	jne    c0022e10 <LinkedList<Device>::removeFirst()+0x8c>
c0022ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022de0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022de6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022df1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022df5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022df8:	83 f8 01             	cmp    eax,0x1
c0022dfb:	74 27                	je     c0022e24 <LinkedList<Device>::removeFirst()+0xa0>
c0022dfd:	83 ec 0c             	sub    esp,0xc
c0022e00:	68 04 42 02 c0       	push   0xc0024204
c0022e05:	e8 a5 1a ff ff       	call   c00148af <Krnl::panic(char const*)>
c0022e0a:	83 c4 10             	add    esp,0x10
c0022e0d:	eb 15                	jmp    c0022e24 <LinkedList<Device>::removeFirst()+0xa0>
c0022e0f:	90                   	nop
c0022e10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e14:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e16:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0022e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e20:	89 10                	mov    DWORD PTR [eax],edx
c0022e22:	66 90                	xchg   ax,ax
c0022e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e28:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022e2b:	8d 50 ff             	lea    edx,[eax-0x1]
c0022e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e32:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022e35:	8d 76 00             	lea    esi,[esi+0x0]
c0022e38:	83 c4 0c             	add    esp,0xc
c0022e3b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0022e3c <CPU::~CPU()>:
c0022e3c:	83 ec 0c             	sub    esp,0xc
c0022e3f:	ba c0 57 02 c0       	mov    edx,0xc00257c0
c0022e44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e48:	89 10                	mov    DWORD PTR [eax],edx
c0022e4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e4e:	83 ec 0c             	sub    esp,0xc
c0022e51:	50                   	push   eax
c0022e52:	e8 fd b1 fe ff       	call   c000e054 <Device::~Device()>
c0022e57:	83 c4 10             	add    esp,0x10
c0022e5a:	90                   	nop
c0022e5b:	83 c4 0c             	add    esp,0xc
c0022e5e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0022e60 <CPU::~CPU()>:
c0022e60:	83 ec 0c             	sub    esp,0xc
c0022e63:	83 ec 0c             	sub    esp,0xc
c0022e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e6a:	e8 cd ff ff ff       	call   c0022e3c <CPU::~CPU()>
c0022e6f:	83 c4 10             	add    esp,0x10
c0022e72:	83 ec 08             	sub    esp,0x8
c0022e75:	68 98 11 00 00       	push   0x1198
c0022e7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e7e:	e8 9b 9d fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0022e83:	83 c4 10             	add    esp,0x10
c0022e86:	83 c4 0c             	add    esp,0xc
c0022e89:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0022e8c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0022e8c:	90                   	nop
c0022e8d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0022e90 <ThreadControlBlock::ThreadControlBlock()>:
c0022e90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e94:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e9f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0022ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022eaa:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0022eb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022eb5:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0022ebc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ec0:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0022ec7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ecb:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0022ecf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ed3:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0022ed7:	90                   	nop
c0022ed8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0022edc <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0022edc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ee0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022ee6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022eea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022ef1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ef5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022efc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f00:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022f06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f0a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022f11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f15:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022f1c:	90                   	nop
c0022f1d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0022f20 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0022f20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022f24:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022f27:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0022f28 <Vm::_FPUState::_FPUState()>:
c0022f28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f2c:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0022f33:	90                   	nop
c0022f34:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0022f36 <PCI::~PCI()>:
c0022f36:	83 ec 0c             	sub    esp,0xc
c0022f39:	ba 98 65 02 c0       	mov    edx,0xc0026598
c0022f3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f42:	89 10                	mov    DWORD PTR [eax],edx
c0022f44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f48:	83 ec 0c             	sub    esp,0xc
c0022f4b:	50                   	push   eax
c0022f4c:	e8 d3 aa fe ff       	call   c000da24 <Bus::~Bus()>
c0022f51:	83 c4 10             	add    esp,0x10
c0022f54:	90                   	nop
c0022f55:	83 c4 0c             	add    esp,0xc
c0022f58:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0022f5a <PCI::~PCI()>:
c0022f5a:	83 ec 0c             	sub    esp,0xc
c0022f5d:	83 ec 0c             	sub    esp,0xc
c0022f60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f64:	e8 cd ff ff ff       	call   c0022f36 <PCI::~PCI()>
c0022f69:	83 c4 10             	add    esp,0x10
c0022f6c:	83 ec 08             	sub    esp,0x8
c0022f6f:	68 5c 01 00 00       	push   0x15c
c0022f74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f78:	e8 a1 9c fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0022f7d:	83 c4 10             	add    esp,0x10
c0022f80:	83 c4 0c             	add    esp,0xc
c0022f83:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0022f84 <IDE::~IDE()>:
c0022f84:	83 ec 0c             	sub    esp,0xc
c0022f87:	ba 4c 66 02 c0       	mov    edx,0xc002664c
c0022f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f90:	89 10                	mov    DWORD PTR [eax],edx
c0022f92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f96:	83 ec 0c             	sub    esp,0xc
c0022f99:	50                   	push   eax
c0022f9a:	e8 cd b5 fe ff       	call   c000e56c <HardDiskController::~HardDiskController()>
c0022f9f:	83 c4 10             	add    esp,0x10
c0022fa2:	90                   	nop
c0022fa3:	83 c4 0c             	add    esp,0xc
c0022fa6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0022fa8 <IDE::~IDE()>:
c0022fa8:	83 ec 0c             	sub    esp,0xc
c0022fab:	83 ec 0c             	sub    esp,0xc
c0022fae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022fb2:	e8 cd ff ff ff       	call   c0022f84 <IDE::~IDE()>
c0022fb7:	83 c4 10             	add    esp,0x10
c0022fba:	83 ec 08             	sub    esp,0x8
c0022fbd:	68 70 02 00 00       	push   0x270
c0022fc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022fc6:	e8 53 9c fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0022fcb:	83 c4 10             	add    esp,0x10
c0022fce:	83 c4 0c             	add    esp,0xc
c0022fd1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0022fd2 <SATABus::~SATABus()>:
c0022fd2:	83 ec 0c             	sub    esp,0xc
c0022fd5:	ba a0 67 02 c0       	mov    edx,0xc00267a0
c0022fda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fde:	89 10                	mov    DWORD PTR [eax],edx
c0022fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fe4:	83 ec 0c             	sub    esp,0xc
c0022fe7:	50                   	push   eax
c0022fe8:	e8 7f b5 fe ff       	call   c000e56c <HardDiskController::~HardDiskController()>
c0022fed:	83 c4 10             	add    esp,0x10
c0022ff0:	90                   	nop
c0022ff1:	83 c4 0c             	add    esp,0xc
c0022ff4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0022ff6 <SATABus::~SATABus()>:
c0022ff6:	83 ec 0c             	sub    esp,0xc
c0022ff9:	83 ec 0c             	sub    esp,0xc
c0022ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023000:	e8 cd ff ff ff       	call   c0022fd2 <SATABus::~SATABus()>
c0023005:	83 c4 10             	add    esp,0x10
c0023008:	83 ec 08             	sub    esp,0x8
c002300b:	68 64 01 00 00       	push   0x164
c0023010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023014:	e8 05 9c fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0023019:	83 c4 10             	add    esp,0x10
c002301c:	83 c4 0c             	add    esp,0xc
c002301f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0023020 <ATA::~ATA()>:
c0023020:	83 ec 0c             	sub    esp,0xc
c0023023:	ba 18 68 02 c0       	mov    edx,0xc0026818
c0023028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002302c:	89 10                	mov    DWORD PTR [eax],edx
c002302e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023032:	83 ec 0c             	sub    esp,0xc
c0023035:	50                   	push   eax
c0023036:	e8 13 b6 fe ff       	call   c000e64e <PhysicalDisk::~PhysicalDisk()>
c002303b:	83 c4 10             	add    esp,0x10
c002303e:	90                   	nop
c002303f:	83 c4 0c             	add    esp,0xc
c0023042:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0023044 <ATA::~ATA()>:
c0023044:	83 ec 0c             	sub    esp,0xc
c0023047:	83 ec 0c             	sub    esp,0xc
c002304a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002304e:	e8 cd ff ff ff       	call   c0023020 <ATA::~ATA()>
c0023053:	83 c4 10             	add    esp,0x10
c0023056:	83 ec 08             	sub    esp,0x8
c0023059:	68 7c 01 00 00       	push   0x17c
c002305e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023062:	e8 b7 9b fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0023067:	83 c4 10             	add    esp,0x10
c002306a:	83 c4 0c             	add    esp,0xc
c002306d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002306e <ATAPI::~ATAPI()>:
c002306e:	83 ec 0c             	sub    esp,0xc
c0023071:	ba 50 68 02 c0       	mov    edx,0xc0026850
c0023076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002307a:	89 10                	mov    DWORD PTR [eax],edx
c002307c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023080:	83 ec 0c             	sub    esp,0xc
c0023083:	50                   	push   eax
c0023084:	e8 c5 b5 fe ff       	call   c000e64e <PhysicalDisk::~PhysicalDisk()>
c0023089:	83 c4 10             	add    esp,0x10
c002308c:	90                   	nop
c002308d:	83 c4 0c             	add    esp,0xc
c0023090:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0023092 <ATAPI::~ATAPI()>:
c0023092:	83 ec 0c             	sub    esp,0xc
c0023095:	83 ec 0c             	sub    esp,0xc
c0023098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002309c:	e8 cd ff ff ff       	call   c002306e <ATAPI::~ATAPI()>
c00230a1:	83 c4 10             	add    esp,0x10
c00230a4:	83 ec 08             	sub    esp,0x8
c00230a7:	68 80 01 00 00       	push   0x180
c00230ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00230b0:	e8 69 9b fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00230b5:	83 c4 10             	add    esp,0x10
c00230b8:	83 c4 0c             	add    esp,0xc
c00230bb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00230bc <SATA::~SATA()>:
c00230bc:	83 ec 0c             	sub    esp,0xc
c00230bf:	ba 8c 6a 02 c0       	mov    edx,0xc0026a8c
c00230c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230c8:	89 10                	mov    DWORD PTR [eax],edx
c00230ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230ce:	83 ec 0c             	sub    esp,0xc
c00230d1:	50                   	push   eax
c00230d2:	e8 77 b5 fe ff       	call   c000e64e <PhysicalDisk::~PhysicalDisk()>
c00230d7:	83 c4 10             	add    esp,0x10
c00230da:	90                   	nop
c00230db:	83 c4 0c             	add    esp,0xc
c00230de:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00230e0 <SATA::~SATA()>:
c00230e0:	83 ec 0c             	sub    esp,0xc
c00230e3:	83 ec 0c             	sub    esp,0xc
c00230e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00230ea:	e8 cd ff ff ff       	call   c00230bc <SATA::~SATA()>
c00230ef:	83 c4 10             	add    esp,0x10
c00230f2:	83 ec 08             	sub    esp,0x8
c00230f5:	68 7c 01 00 00       	push   0x17c
c00230fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00230fe:	e8 1b 9b fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0023103:	83 c4 10             	add    esp,0x10
c0023106:	83 c4 0c             	add    esp,0xc
c0023109:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002310a <SATAPI::~SATAPI()>:
c002310a:	83 ec 0c             	sub    esp,0xc
c002310d:	ba 8c 6b 02 c0       	mov    edx,0xc0026b8c
c0023112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023116:	89 10                	mov    DWORD PTR [eax],edx
c0023118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002311c:	83 ec 0c             	sub    esp,0xc
c002311f:	50                   	push   eax
c0023120:	e8 29 b5 fe ff       	call   c000e64e <PhysicalDisk::~PhysicalDisk()>
c0023125:	83 c4 10             	add    esp,0x10
c0023128:	90                   	nop
c0023129:	83 c4 0c             	add    esp,0xc
c002312c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002312e <SATAPI::~SATAPI()>:
c002312e:	83 ec 0c             	sub    esp,0xc
c0023131:	83 ec 0c             	sub    esp,0xc
c0023134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023138:	e8 cd ff ff ff       	call   c002310a <SATAPI::~SATAPI()>
c002313d:	83 c4 10             	add    esp,0x10
c0023140:	83 ec 08             	sub    esp,0x8
c0023143:	68 84 01 00 00       	push   0x184
c0023148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002314c:	e8 cd 9a fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0023151:	83 c4 10             	add    esp,0x10
c0023154:	83 c4 0c             	add    esp,0xc
c0023157:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0023158 <AVX::~AVX()>:
c0023158:	83 ec 0c             	sub    esp,0xc
c002315b:	ba cc 6b 02 c0       	mov    edx,0xc0026bcc
c0023160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023164:	89 10                	mov    DWORD PTR [eax],edx
c0023166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002316a:	83 ec 0c             	sub    esp,0xc
c002316d:	50                   	push   eax
c002316e:	e8 61 b5 fe ff       	call   c000e6d4 <FPU::~FPU()>
c0023173:	83 c4 10             	add    esp,0x10
c0023176:	90                   	nop
c0023177:	83 c4 0c             	add    esp,0xc
c002317a:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c002317c <AVX::~AVX()>:
c002317c:	83 ec 0c             	sub    esp,0xc
c002317f:	83 ec 0c             	sub    esp,0xc
c0023182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023186:	e8 cd ff ff ff       	call   c0023158 <AVX::~AVX()>
c002318b:	83 c4 10             	add    esp,0x10
c002318e:	83 ec 08             	sub    esp,0x8
c0023191:	68 58 01 00 00       	push   0x158
c0023196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002319a:	e8 7f 9a fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c002319f:	83 c4 10             	add    esp,0x10
c00231a2:	83 c4 0c             	add    esp,0xc
c00231a5:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c00231a8 <MMX::~MMX()>:
c00231a8:	83 ec 0c             	sub    esp,0xc
c00231ab:	ba 0c 6c 02 c0       	mov    edx,0xc0026c0c
c00231b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231b4:	89 10                	mov    DWORD PTR [eax],edx
c00231b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231ba:	83 ec 0c             	sub    esp,0xc
c00231bd:	50                   	push   eax
c00231be:	e8 11 b5 fe ff       	call   c000e6d4 <FPU::~FPU()>
c00231c3:	83 c4 10             	add    esp,0x10
c00231c6:	90                   	nop
c00231c7:	83 c4 0c             	add    esp,0xc
c00231ca:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c00231cc <MMX::~MMX()>:
c00231cc:	83 ec 0c             	sub    esp,0xc
c00231cf:	83 ec 0c             	sub    esp,0xc
c00231d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231d6:	e8 cd ff ff ff       	call   c00231a8 <MMX::~MMX()>
c00231db:	83 c4 10             	add    esp,0x10
c00231de:	83 ec 08             	sub    esp,0x8
c00231e1:	68 58 01 00 00       	push   0x158
c00231e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231ea:	e8 2f 9a fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00231ef:	83 c4 10             	add    esp,0x10
c00231f2:	83 c4 0c             	add    esp,0xc
c00231f5:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00231f8 <SSE::~SSE()>:
c00231f8:	83 ec 0c             	sub    esp,0xc
c00231fb:	ba 4c 6c 02 c0       	mov    edx,0xc0026c4c
c0023200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023204:	89 10                	mov    DWORD PTR [eax],edx
c0023206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002320a:	83 ec 0c             	sub    esp,0xc
c002320d:	50                   	push   eax
c002320e:	e8 c1 b4 fe ff       	call   c000e6d4 <FPU::~FPU()>
c0023213:	83 c4 10             	add    esp,0x10
c0023216:	90                   	nop
c0023217:	83 c4 0c             	add    esp,0xc
c002321a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002321c <SSE::~SSE()>:
c002321c:	83 ec 0c             	sub    esp,0xc
c002321f:	83 ec 0c             	sub    esp,0xc
c0023222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023226:	e8 cd ff ff ff       	call   c00231f8 <SSE::~SSE()>
c002322b:	83 c4 10             	add    esp,0x10
c002322e:	83 ec 08             	sub    esp,0x8
c0023231:	68 58 01 00 00       	push   0x158
c0023236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002323a:	e8 df 99 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c002323f:	83 c4 10             	add    esp,0x10
c0023242:	83 c4 0c             	add    esp,0xc
c0023245:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0023248 <x87::~x87()>:
c0023248:	83 ec 0c             	sub    esp,0xc
c002324b:	ba 8c 6c 02 c0       	mov    edx,0xc0026c8c
c0023250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023254:	89 10                	mov    DWORD PTR [eax],edx
c0023256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002325a:	83 ec 0c             	sub    esp,0xc
c002325d:	50                   	push   eax
c002325e:	e8 71 b4 fe ff       	call   c000e6d4 <FPU::~FPU()>
c0023263:	83 c4 10             	add    esp,0x10
c0023266:	90                   	nop
c0023267:	83 c4 0c             	add    esp,0xc
c002326a:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002326c <x87::~x87()>:
c002326c:	83 ec 0c             	sub    esp,0xc
c002326f:	83 ec 0c             	sub    esp,0xc
c0023272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023276:	e8 cd ff ff ff       	call   c0023248 <x87::~x87()>
c002327b:	83 c4 10             	add    esp,0x10
c002327e:	83 ec 08             	sub    esp,0x8
c0023281:	68 58 01 00 00       	push   0x158
c0023286:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002328a:	e8 8f 99 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c002328f:	83 c4 10             	add    esp,0x10
c0023292:	83 c4 0c             	add    esp,0xc
c0023295:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0023296 <IOAPIC::~IOAPIC()>:
c0023296:	83 ec 0c             	sub    esp,0xc
c0023299:	ba e4 6d 02 c0       	mov    edx,0xc0026de4
c002329e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232a2:	89 10                	mov    DWORD PTR [eax],edx
c00232a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232a8:	83 ec 0c             	sub    esp,0xc
c00232ab:	50                   	push   eax
c00232ac:	e8 a3 ad fe ff       	call   c000e054 <Device::~Device()>
c00232b1:	83 c4 10             	add    esp,0x10
c00232b4:	90                   	nop
c00232b5:	83 c4 0c             	add    esp,0xc
c00232b8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00232ba <IOAPIC::~IOAPIC()>:
c00232ba:	83 ec 0c             	sub    esp,0xc
c00232bd:	83 ec 0c             	sub    esp,0xc
c00232c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232c4:	e8 cd ff ff ff       	call   c0023296 <IOAPIC::~IOAPIC()>
c00232c9:	83 c4 10             	add    esp,0x10
c00232cc:	83 ec 08             	sub    esp,0x8
c00232cf:	68 68 01 00 00       	push   0x168
c00232d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232d8:	e8 41 99 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00232dd:	83 c4 10             	add    esp,0x10
c00232e0:	83 c4 0c             	add    esp,0xc
c00232e3:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00232e4 <APIC::~APIC()>:
c00232e4:	83 ec 0c             	sub    esp,0xc
c00232e7:	ba 9c 6d 02 c0       	mov    edx,0xc0026d9c
c00232ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232f0:	89 10                	mov    DWORD PTR [eax],edx
c00232f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232f6:	83 ec 0c             	sub    esp,0xc
c00232f9:	50                   	push   eax
c00232fa:	e8 a9 b8 fe ff       	call   c000eba8 <InterruptController::~InterruptController()>
c00232ff:	83 c4 10             	add    esp,0x10
c0023302:	90                   	nop
c0023303:	83 c4 0c             	add    esp,0xc
c0023306:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0023308 <APIC::~APIC()>:
c0023308:	83 ec 0c             	sub    esp,0xc
c002330b:	83 ec 0c             	sub    esp,0xc
c002330e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023312:	e8 cd ff ff ff       	call   c00232e4 <APIC::~APIC()>
c0023317:	83 c4 10             	add    esp,0x10
c002331a:	83 ec 08             	sub    esp,0x8
c002331d:	68 58 21 00 00       	push   0x2158
c0023322:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023326:	e8 f3 98 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c002332b:	83 c4 10             	add    esp,0x10
c002332e:	83 c4 0c             	add    esp,0xc
c0023331:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0023332 <PIC::~PIC()>:
c0023332:	83 ec 0c             	sub    esp,0xc
c0023335:	ba 34 6e 02 c0       	mov    edx,0xc0026e34
c002333a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002333e:	89 10                	mov    DWORD PTR [eax],edx
c0023340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023344:	83 ec 0c             	sub    esp,0xc
c0023347:	50                   	push   eax
c0023348:	e8 5b b8 fe ff       	call   c000eba8 <InterruptController::~InterruptController()>
c002334d:	83 c4 10             	add    esp,0x10
c0023350:	90                   	nop
c0023351:	83 c4 0c             	add    esp,0xc
c0023354:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0023356 <PIC::~PIC()>:
c0023356:	83 ec 0c             	sub    esp,0xc
c0023359:	83 ec 0c             	sub    esp,0xc
c002335c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023360:	e8 cd ff ff ff       	call   c0023332 <PIC::~PIC()>
c0023365:	83 c4 10             	add    esp,0x10
c0023368:	83 ec 08             	sub    esp,0x8
c002336b:	68 58 21 00 00       	push   0x2158
c0023370:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023374:	e8 a5 98 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0023379:	83 c4 10             	add    esp,0x10
c002337c:	83 c4 0c             	add    esp,0xc
c002337f:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0023380 <APICTimer::~APICTimer()>:
c0023380:	83 ec 0c             	sub    esp,0xc
c0023383:	ba 88 6e 02 c0       	mov    edx,0xc0026e88
c0023388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002338c:	89 10                	mov    DWORD PTR [eax],edx
c002338e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023392:	83 ec 0c             	sub    esp,0xc
c0023395:	50                   	push   eax
c0023396:	e8 1d d6 fe ff       	call   c00109b8 <Timer::~Timer()>
c002339b:	83 c4 10             	add    esp,0x10
c002339e:	90                   	nop
c002339f:	83 c4 0c             	add    esp,0xc
c00233a2:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00233a4 <APICTimer::~APICTimer()>:
c00233a4:	83 ec 0c             	sub    esp,0xc
c00233a7:	83 ec 0c             	sub    esp,0xc
c00233aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00233ae:	e8 cd ff ff ff       	call   c0023380 <APICTimer::~APICTimer()>
c00233b3:	83 c4 10             	add    esp,0x10
c00233b6:	83 ec 08             	sub    esp,0x8
c00233b9:	68 60 01 00 00       	push   0x160
c00233be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00233c2:	e8 57 98 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00233c7:	83 c4 10             	add    esp,0x10
c00233ca:	83 c4 0c             	add    esp,0xc
c00233cd:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00233d0 <PIT::~PIT()>:
c00233d0:	83 ec 0c             	sub    esp,0xc
c00233d3:	ba d8 6e 02 c0       	mov    edx,0xc0026ed8
c00233d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233dc:	89 10                	mov    DWORD PTR [eax],edx
c00233de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233e2:	83 ec 0c             	sub    esp,0xc
c00233e5:	50                   	push   eax
c00233e6:	e8 cd d5 fe ff       	call   c00109b8 <Timer::~Timer()>
c00233eb:	83 c4 10             	add    esp,0x10
c00233ee:	90                   	nop
c00233ef:	83 c4 0c             	add    esp,0xc
c00233f2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00233f4 <PIT::~PIT()>:
c00233f4:	83 ec 0c             	sub    esp,0xc
c00233f7:	83 ec 0c             	sub    esp,0xc
c00233fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00233fe:	e8 cd ff ff ff       	call   c00233d0 <PIT::~PIT()>
c0023403:	83 c4 10             	add    esp,0x10
c0023406:	83 ec 08             	sub    esp,0x8
c0023409:	68 5c 01 00 00       	push   0x15c
c002340e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023412:	e8 07 98 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0023417:	83 c4 10             	add    esp,0x10
c002341a:	83 c4 0c             	add    esp,0xc
c002341d:	c3                   	ret    
