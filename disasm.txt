
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 cb 7c 00 00       	call   c0007ceb <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 98 f9 01 c0       	mov    eax,0xc001f998
c0000025:	3d 98 f9 01 c0       	cmp    eax,0xc001f998
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 98 f9 01 c0       	push   0xc001f998
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 98 f9 01 c0       	mov    eax,0xc001f998
c0000051:	2d 98 f9 01 c0       	sub    eax,0xc001f998
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 98 f9 01 c0       	push   0xc001f998
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 fb 01 c0 00 	cmp    BYTE PTR ds:0xc001fbc0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb d8 ce 01 c0       	mov    ebx,0xc001ced8
c0000097:	81 eb d4 ce 01 c0    	sub    ebx,0xc001ced4
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be d4 ce 01 c0       	mov    esi,0xc001ced4
c00000a6:	a1 c4 fb 01 c0       	mov    eax,ds:0xc001fbc4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 fb 01 c0       	mov    ds:0xc001fbc4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 fb 01 c0       	mov    eax,ds:0xc001fbc4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 98 f9 01 c0       	push   0xc001f998
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 fb 01 c0 01 	mov    BYTE PTR ds:0xc001fbc0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 fb 01 c0       	push   0xc001fbc8
c0000108:	68 98 f9 01 c0       	push   0xc001f998
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 1c 2f 01 00       	call   c00131cc <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 64 a4 00 00       	call   c000a72c <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 fa 2e 01 00       	call   c00131cc <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 cb 33 01 00       	call   c00136bc <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 1a 3a 01 00       	call   c0013d14 <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 c0 09 02 c0 	lgdtd  ds:0xc00209c0
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 f8 01 01 00       	jmp    c001057a <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 e0 fb 01 c0       	mov    ds:0xc001fbe0,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 e0 fb 01 c0    	mov    DWORD PTR ds:0xc001fbe0,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d e0 fb 01 c0    	mov    ebx,DWORD PTR ds:0xc001fbe0
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 e0 ce 01 c0 02 	test   BYTE PTR [edx-0x3ffe3120],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 e0 ce 01 c0 01 	test   BYTE PTR [edx-0x3ffe3120],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 e0 ce 01 c0 08 	test   BYTE PTR [edx-0x3ffe3120],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 e0 ce 01 c0 04 	test   BYTE PTR [ebx-0x3ffe3120],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 e0 ce 01 c0 01 	test   BYTE PTR [edx-0x3ffe3120],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d 00 fc 01 c0    	mov    ecx,DWORD PTR ds:0xc001fc00
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d 00 fc 01 c0    	mov    DWORD PTR ds:0xc001fc00,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 04 fc 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe03fc]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 04 fc 01 c0 	mov    DWORD PTR [eax*4-0x3ffe03fc],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d 00 fc 01 c0    	mov    DWORD PTR ds:0xc001fc00,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 2c fc 01 c0    	cmp    DWORD PTR ds:0xc001fc2c,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d 3c fc 01 c0    	mov    ecx,DWORD PTR ds:0xc001fc3c
c0000d3d:	c7 42 0c 34 fc 01 c0 	mov    DWORD PTR [edx+0xc],0xc001fc34
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 3c fc 01 c0    	mov    DWORD PTR ds:0xc001fc3c,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 2c fc 01 c0    	mov    DWORD PTR ds:0xc001fc2c,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 00 fc 01 c0 02 	test   BYTE PTR ds:0xc001fc00,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 00 fc 01 c0       	mov    eax,0xc001fc00
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 4a 6d 00 00       	call   c0007b68 <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 8c 6c 00 00       	call   c0007b68 <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 76 6c 00 00       	call   c0007b68 <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 52 6c 00 00       	call   c0007b68 <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d 00 fc 01 c0    	mov    edi,DWORD PTR ds:0xc001fc00
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 00 fc 01 c0       	mov    eax,0xc001fc00
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 04 fc 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe03fc]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 04 fc 01 c0 	mov    DWORD PTR [edx*4-0x3ffe03fc],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 34 fc 01 c0 	lea    edx,[eax*8-0x3ffe03cc]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 00 fc 01 c0       	mov    eax,0xc001fc00
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d 40 fc 01 c0    	mov    ebx,DWORD PTR ds:0xc001fc40
c00010bf:	81 fb 34 fc 01 c0    	cmp    ebx,0xc001fc34
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d 34 fc 01 c0       	cmp    eax,0xc001fc34
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d 30 fc 01 c0    	cmp    DWORD PTR ds:0xc001fc30,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 3c fc 01 c0       	mov    ds:0xc001fc3c,eax
c00010fb:	a3 40 fc 01 c0       	mov    ds:0xc001fc40,eax
c0001100:	a3 30 fc 01 c0       	mov    ds:0xc001fc30,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 34 fc 01 c0 	mov    DWORD PTR [eax+0x8],0xc001fc34
c000110e:	c7 40 0c 34 fc 01 c0 	mov    DWORD PTR [eax+0xc],0xc001fc34
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 40 fc 01 c0       	mov    ds:0xc001fc40,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 34 fc 01 c0 	mov    DWORD PTR [eax+0x8],0xc001fc34
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 f8 fb 01 c0 	lea    ebp,[edx*4-0x3ffe0408]
c000115f:	8b 14 95 00 fc 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0400]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 00 fc 01 c0 	lea    ecx,[edx*4-0x3ffe0400]
c000117a:	8b 14 95 00 fc 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0400]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd 34 ff 01 c0 	or     DWORD PTR [edi*4-0x3ffe00cc],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 34 fc 01 c0 	lea    eax,[eax*8-0x3ffe03cc]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d 3c fc 01 c0    	mov    DWORD PTR ds:0xc001fc3c,ecx
c0001234:	89 0d 40 fc 01 c0    	mov    DWORD PTR ds:0xc001fc40,ecx
c000123a:	c7 41 08 34 fc 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001fc34
c0001241:	c7 41 0c 34 fc 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001fc34
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd 2c fc 01 c0 	lea    edx,[ecx*8-0x3ffe03d4]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d 34 ff 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe00cc]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d 34 ff 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe00cc]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 2c fc 01 c0 	lea    edx,[eax*4-0x3ffe03d4]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d 34 ff 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe00cc],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d 3c fc 01 c0    	mov    DWORD PTR ds:0xc001fc3c,edi
c0001307:	89 3d 40 fc 01 c0    	mov    DWORD PTR ds:0xc001fc40,edi
c000130d:	c7 47 08 34 fc 01 c0 	mov    DWORD PTR [edi+0x8],0xc001fc34
c0001314:	c7 47 0c 34 fc 01 c0 	mov    DWORD PTR [edi+0xc],0xc001fc34
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d 30 fc 01 c0    	mov    DWORD PTR ds:0xc001fc30,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 2c fc 01 c0       	mov    eax,ds:0xc001fc2c
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d 2c fc 01 c0    	mov    DWORD PTR ds:0xc001fc2c,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba 00 fc 01 c0       	mov    edx,0xc001fc00
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d 00 fc 01 c0 00 	cmp    DWORD PTR ds:0xc001fc00,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 00 fc 01 c0       	mov    eax,0xc001fc00
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d 54 ff 01 c0    	mov    ebx,DWORD PTR ds:0xc001ff54
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 54 ff 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001ff54,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d 54 ff 01 c0    	mov    DWORD PTR ds:0xc001ff54,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 2c fc 01 c0    	cmp    DWORD PTR ds:0xc001fc2c,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d 2c fc 01 c0    	mov    DWORD PTR ds:0xc001fc2c,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d 00 fc 01 c0 00 	cmp    DWORD PTR ds:0xc001fc00,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 00 fc 01 c0       	mov    eax,0xc001fc00
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 5c ff 01 c0    	push   DWORD PTR ds:0xc001ff5c
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d 00 fc 01 c0 00 	cmp    DWORD PTR ds:0xc001fc00,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 00 fc 01 c0       	mov    eax,0xc001fc00
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 5c ff 01 c0       	mov    eax,ds:0xc001ff5c
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 00 fc 01 c0       	mov    eax,0xc001fc00
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d 2c fc 01 c0 00 	cmp    DWORD PTR ds:0xc001fc2c,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 00 fc 01 c0       	mov    eax,0xc001fc00
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 2c fc 01 c0       	mov    eax,ds:0xc001fc2c
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 04 fc 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe03fc]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 34 fc 01 c0       	mov    eax,0xc001fc34
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d 2c ff 01 c0       	cmp    eax,0xc001ff2c
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 68 ff 01 c0       	mov    eax,ds:0xc001ff68
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 50 ff 01 c0    	mov    esi,DWORD PTR ds:0xc001ff50
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 64 ff 01 c0    	mov    esi,DWORD PTR ds:0xc001ff64
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 74 ff 01 c0    	mov    esi,DWORD PTR ds:0xc001ff74
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 00 fc 01 c0       	mov    eax,0xc001fc00
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 e4 cf 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe301c]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 00 fc 01 c0       	mov    eax,ds:0xc001fc00
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 00 fc 01 c0       	mov    ds:0xc001fc00,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d 44 ff 01 c0    	mov    DWORD PTR ds:0xc001ff44,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d 48 ff 01 c0    	mov    DWORD PTR ds:0xc001ff48,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d 4c ff 01 c0    	mov    DWORD PTR ds:0xc001ff4c,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 54 ff 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001ff54,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 c0 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc040]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 ba 53 01 00       	jmp    c00170a4 <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 c0 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc040]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 e8 53 01 00       	jmp    c00170e8 <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 c0 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc040]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 0d 54 01 00       	jmp    c001712c <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 40 d1 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe2ec0]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 40 d1 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe2ec0]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba 60 ef 01 c0       	mov    edx,0xc001ef60
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba fc cf 01 c0       	mov    edx,0xc001cffc
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 a0 ff 01 c0 	mov    esi,DWORD PTR [eax*4-0x3ffe0060]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 80 ff 01 c0    	mov    ax,ds:0xc001ff80
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 80 ff 01 c0    	mov    ds:0xc001ff80,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 02 d0 01 c0       	mov    eax,0xc001d002
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad c0 d0 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe2f40]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 0b d0 01 c0       	mov    eax,0xc001d00b
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 40 d1 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe2ec0]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 a0 ff 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0060]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 a0 ff 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0060],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 90 d0 01 c0       	mov    eax,0xc001d090
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 a0 ff 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0060]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb 80 d0 01 c0       	mov    ebx,0xc001d080
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba 60 d0 01 c0       	mov    edx,0xc001d060
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba 70 d0 01 c0       	mov    edx,0xc001d070
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba 12 d0 01 c0       	mov    edx,0xc001d012
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba 1e d0 01 c0       	mov    edx,0xc001d01e
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba 32 d0 01 c0       	mov    edx,0xc001d032
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 16 22 00 00       	call   c0007c91 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 0e 22 00 00       	call   c0007ca1 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c 60 d4 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d460
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 60 d4 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d460
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 60 d2 01 c0       	mov    eax,0xc001d260
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 a0 d1 01 c0       	mov    eax,0xc001d1a0
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 60 d1 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe2ea0]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	56                   	push   esi
c0005d46:	53                   	push   ebx
c0005d47:	89 d7                	mov    edi,edx
c0005d49:	47                   	inc    edi
c0005d4a:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0005d4d:	0f be cb             	movsx  ecx,bl
c0005d50:	89 ce                	mov    esi,ecx
c0005d52:	c1 fe 08             	sar    esi,0x8
c0005d55:	89 f2                	mov    edx,esi
c0005d57:	88 10                	mov    BYTE PTR [eax],dl
c0005d59:	83 c0 02             	add    eax,0x2
c0005d5c:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005d5f:	85 c9                	test   ecx,ecx
c0005d61:	75 e6                	jne    c0005d49 <utf2ucs+0x5>
c0005d63:	5b                   	pop    ebx
c0005d64:	5e                   	pop    esi
c0005d65:	5f                   	pop    edi
c0005d66:	c3                   	ret    

c0005d67 <ucs2utfn>:
c0005d67:	57                   	push   edi
c0005d68:	56                   	push   esi
c0005d69:	53                   	push   ebx
c0005d6a:	89 cb                	mov    ebx,ecx
c0005d6c:	d1 eb                	shr    ebx,1
c0005d6e:	83 f9 01             	cmp    ecx,0x1
c0005d71:	76 17                	jbe    c0005d8a <ucs2utfn+0x23>
c0005d73:	8d 7b ff             	lea    edi,[ebx-0x1]
c0005d76:	0f be 32             	movsx  esi,BYTE PTR [edx]
c0005d79:	c1 e6 08             	shl    esi,0x8
c0005d7c:	8d 4a 02             	lea    ecx,[edx+0x2]
c0005d7f:	0f be 52 01          	movsx  edx,BYTE PTR [edx+0x1]
c0005d83:	09 f2                	or     edx,esi
c0005d85:	83 fa 3b             	cmp    edx,0x3b
c0005d88:	75 40                	jne    c0005dca <ucs2utfn+0x63>
c0005d8a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d8d:	5b                   	pop    ebx
c0005d8e:	5e                   	pop    esi
c0005d8f:	5f                   	pop    edi
c0005d90:	c3                   	ret    
c0005d91:	81 fa ff 07 00 00    	cmp    edx,0x7ff
c0005d97:	7f 3d                	jg     c0005dd6 <ucs2utfn+0x6f>
c0005d99:	89 d6                	mov    esi,edx
c0005d9b:	c1 fe 06             	sar    esi,0x6
c0005d9e:	83 ce c0             	or     esi,0xffffffc0
c0005da1:	89 f3                	mov    ebx,esi
c0005da3:	88 18                	mov    BYTE PTR [eax],bl
c0005da5:	83 e2 3f             	and    edx,0x3f
c0005da8:	83 ca 80             	or     edx,0xffffff80
c0005dab:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0005dae:	8d 40 02             	lea    eax,[eax+0x2]
c0005db1:	85 ff                	test   edi,edi
c0005db3:	74 d5                	je     c0005d8a <ucs2utfn+0x23>
c0005db5:	4f                   	dec    edi
c0005db6:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0005db9:	c1 e2 08             	shl    edx,0x8
c0005dbc:	83 c1 02             	add    ecx,0x2
c0005dbf:	0f be 71 ff          	movsx  esi,BYTE PTR [ecx-0x1]
c0005dc3:	09 f2                	or     edx,esi
c0005dc5:	83 fa 3b             	cmp    edx,0x3b
c0005dc8:	74 c0                	je     c0005d8a <ucs2utfn+0x23>
c0005dca:	83 fa 7f             	cmp    edx,0x7f
c0005dcd:	7f c2                	jg     c0005d91 <ucs2utfn+0x2a>
c0005dcf:	88 10                	mov    BYTE PTR [eax],dl
c0005dd1:	8d 40 01             	lea    eax,[eax+0x1]
c0005dd4:	eb db                	jmp    c0005db1 <ucs2utfn+0x4a>
c0005dd6:	89 d6                	mov    esi,edx
c0005dd8:	c1 fe 0c             	sar    esi,0xc
c0005ddb:	83 ce e0             	or     esi,0xffffffe0
c0005dde:	89 f3                	mov    ebx,esi
c0005de0:	88 18                	mov    BYTE PTR [eax],bl
c0005de2:	89 d6                	mov    esi,edx
c0005de4:	c1 fe 06             	sar    esi,0x6
c0005de7:	83 e6 3f             	and    esi,0x3f
c0005dea:	83 ce 80             	or     esi,0xffffff80
c0005ded:	89 f3                	mov    ebx,esi
c0005def:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0005df2:	83 e2 3f             	and    edx,0x3f
c0005df5:	83 ca 80             	or     edx,0xffffff80
c0005df8:	88 50 02             	mov    BYTE PTR [eax+0x2],dl
c0005dfb:	8d 40 03             	lea    eax,[eax+0x3]
c0005dfe:	eb b1                	jmp    c0005db1 <ucs2utfn+0x4a>

c0005e00 <isjoliet>:
c0005e00:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005e03:	74 06                	je     c0005e0b <isjoliet+0xb>
c0005e05:	b8 00 00 00 00       	mov    eax,0x0
c0005e0a:	c3                   	ret    
c0005e0b:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005e0f:	74 06                	je     c0005e17 <isjoliet+0x17>
c0005e11:	b8 00 00 00 00       	mov    eax,0x0
c0005e16:	c3                   	ret    
c0005e17:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005e1a:	3c 43                	cmp    al,0x43
c0005e1c:	74 0f                	je     c0005e2d <isjoliet+0x2d>
c0005e1e:	3c 45                	cmp    al,0x45
c0005e20:	74 11                	je     c0005e33 <isjoliet+0x33>
c0005e22:	3c 40                	cmp    al,0x40
c0005e24:	0f 94 c0             	sete   al
c0005e27:	25 ff 00 00 00       	and    eax,0xff
c0005e2c:	c3                   	ret    
c0005e2d:	b8 02 00 00 00       	mov    eax,0x2
c0005e32:	c3                   	ret    
c0005e33:	b8 03 00 00 00       	mov    eax,0x3
c0005e38:	c3                   	ret    

c0005e39 <htohl_32>:
c0005e39:	31 d2                	xor    edx,edx
c0005e3b:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c0005e3e:	c1 e2 08             	shl    edx,0x8
c0005e41:	31 c9                	xor    ecx,ecx
c0005e43:	8a 48 02             	mov    cl,BYTE PTR [eax+0x2]
c0005e46:	c1 e1 10             	shl    ecx,0x10
c0005e49:	09 ca                	or     edx,ecx
c0005e4b:	31 c9                	xor    ecx,ecx
c0005e4d:	8a 08                	mov    cl,BYTE PTR [eax]
c0005e4f:	09 ca                	or     edx,ecx
c0005e51:	31 c9                	xor    ecx,ecx
c0005e53:	8a 48 03             	mov    cl,BYTE PTR [eax+0x3]
c0005e56:	89 c8                	mov    eax,ecx
c0005e58:	c1 e0 18             	shl    eax,0x18
c0005e5b:	09 d0                	or     eax,edx
c0005e5d:	c3                   	ret    

c0005e5e <iso_733>:
c0005e5e:	e8 d6 ff ff ff       	call   c0005e39 <htohl_32>
c0005e63:	c3                   	ret    

c0005e64 <bclear_cache>:
c0005e64:	b8 00 00 00 00       	mov    eax,0x0
c0005e69:	8b 14 85 20 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe04e0]
c0005e70:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e76:	8b 14 85 80 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0480]
c0005e7d:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e83:	40                   	inc    eax
c0005e84:	83 f8 10             	cmp    eax,0x10
c0005e87:	75 e0                	jne    c0005e69 <bclear_cache+0x5>
c0005e89:	c3                   	ret    

c0005e8a <bgrad_cache>:
c0005e8a:	83 fa 0e             	cmp    edx,0xe
c0005e8d:	77 1c                	ja     c0005eab <bgrad_cache+0x21>
c0005e8f:	56                   	push   esi
c0005e90:	53                   	push   ebx
c0005e91:	8d 14 90             	lea    edx,[eax+edx*4]
c0005e94:	8b 32                	mov    esi,DWORD PTR [edx]
c0005e96:	8d 58 3c             	lea    ebx,[eax+0x3c]
c0005e99:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0005e9c:	89 0a                	mov    DWORD PTR [edx],ecx
c0005e9e:	83 c2 04             	add    edx,0x4
c0005ea1:	39 da                	cmp    edx,ebx
c0005ea3:	75 f4                	jne    c0005e99 <bgrad_cache+0xf>
c0005ea5:	89 70 3c             	mov    DWORD PTR [eax+0x3c],esi
c0005ea8:	5b                   	pop    ebx
c0005ea9:	5e                   	pop    esi
c0005eaa:	c3                   	ret    
c0005eab:	c3                   	ret    

c0005eac <bclear>:
c0005eac:	e8 b3 ff ff ff       	call   c0005e64 <bclear_cache>
c0005eb1:	c3                   	ret    

c0005eb2 <iso_break_all>:
c0005eb2:	b8 d0 00 02 c0       	mov    eax,0xc00200d0
c0005eb7:	ba 10 0a 02 c0       	mov    edx,0xc0020a10
c0005ebc:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0005ec2:	05 94 00 00 00       	add    eax,0x94
c0005ec7:	39 d0                	cmp    eax,edx
c0005ec9:	75 f1                	jne    c0005ebc <iso_break_all+0xa>
c0005ecb:	c3                   	ret    

c0005ecc <ucscompare>:
c0005ecc:	55                   	push   ebp
c0005ecd:	57                   	push   edi
c0005ece:	56                   	push   esi
c0005ecf:	53                   	push   ebx
c0005ed0:	83 ec 1c             	sub    esp,0x1c
c0005ed3:	89 d7                	mov    edi,edx
c0005ed5:	85 c9                	test   ecx,ecx
c0005ed7:	0f 8e ab 00 00 00    	jle    c0005f88 <ucscompare+0xbc>
c0005edd:	89 c5                	mov    ebp,eax
c0005edf:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0005ee2:	c1 e0 08             	shl    eax,0x8
c0005ee5:	0f be 55 01          	movsx  edx,BYTE PTR [ebp+0x1]
c0005ee9:	09 d0                	or     eax,edx
c0005eeb:	0f be 37             	movsx  esi,BYTE PTR [edi]
c0005eee:	c1 e6 08             	shl    esi,0x8
c0005ef1:	0f be 57 01          	movsx  edx,BYTE PTR [edi+0x1]
c0005ef5:	09 d6                	or     esi,edx
c0005ef7:	83 f8 3b             	cmp    eax,0x3b
c0005efa:	0f 84 92 00 00 00    	je     c0005f92 <ucscompare+0xc6>
c0005f00:	49                   	dec    ecx
c0005f01:	83 e1 fe             	and    ecx,0xfffffffe
c0005f04:	83 c1 02             	add    ecx,0x2
c0005f07:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005f0b:	bb 00 00 00 00       	mov    ebx,0x0
c0005f10:	83 ec 0c             	sub    esp,0xc
c0005f13:	50                   	push   eax
c0005f14:	e8 b7 a9 ff ff       	call   c00008d0 <tolower>
c0005f19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005f1d:	89 34 24             	mov    DWORD PTR [esp],esi
c0005f20:	e8 ab a9 ff ff       	call   c00008d0 <tolower>
c0005f25:	83 c4 10             	add    esp,0x10
c0005f28:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0005f2c:	75 6e                	jne    c0005f9c <ucscompare+0xd0>
c0005f2e:	83 c3 02             	add    ebx,0x2
c0005f31:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0005f35:	74 26                	je     c0005f5d <ucscompare+0x91>
c0005f37:	0f be 44 1d 00       	movsx  eax,BYTE PTR [ebp+ebx*1+0x0]
c0005f3c:	c1 e0 08             	shl    eax,0x8
c0005f3f:	0f be 54 1d 01       	movsx  edx,BYTE PTR [ebp+ebx*1+0x1]
c0005f44:	09 d0                	or     eax,edx
c0005f46:	0f be 34 1f          	movsx  esi,BYTE PTR [edi+ebx*1]
c0005f4a:	c1 e6 08             	shl    esi,0x8
c0005f4d:	0f be 54 1f 01       	movsx  edx,BYTE PTR [edi+ebx*1+0x1]
c0005f52:	09 d6                	or     esi,edx
c0005f54:	83 f8 3b             	cmp    eax,0x3b
c0005f57:	75 b7                	jne    c0005f10 <ucscompare+0x44>
c0005f59:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0005f5d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005f61:	0f be 04 0f          	movsx  eax,BYTE PTR [edi+ecx*1]
c0005f65:	c1 e0 08             	shl    eax,0x8
c0005f68:	0f be 54 0f 01       	movsx  edx,BYTE PTR [edi+ecx*1+0x1]
c0005f6d:	09 d0                	or     eax,edx
c0005f6f:	83 f8 2f             	cmp    eax,0x2f
c0005f72:	74 2f                	je     c0005fa3 <ucscompare+0xd7>
c0005f74:	85 c0                	test   eax,eax
c0005f76:	0f 95 c0             	setne  al
c0005f79:	25 ff 00 00 00       	and    eax,0xff
c0005f7e:	f7 d8                	neg    eax
c0005f80:	83 c4 1c             	add    esp,0x1c
c0005f83:	5b                   	pop    ebx
c0005f84:	5e                   	pop    esi
c0005f85:	5f                   	pop    edi
c0005f86:	5d                   	pop    ebp
c0005f87:	c3                   	ret    
c0005f88:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005f90:	eb cb                	jmp    c0005f5d <ucscompare+0x91>
c0005f92:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005f9a:	eb c1                	jmp    c0005f5d <ucscompare+0x91>
c0005f9c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0005fa1:	eb dd                	jmp    c0005f80 <ucscompare+0xb4>
c0005fa3:	b8 00 00 00 00       	mov    eax,0x0
c0005fa8:	eb d6                	jmp    c0005f80 <ucscompare+0xb4>

c0005faa <fncompare>:
c0005faa:	55                   	push   ebp
c0005fab:	57                   	push   edi
c0005fac:	56                   	push   esi
c0005fad:	53                   	push   ebx
c0005fae:	83 ec 1c             	sub    esp,0x1c
c0005fb1:	89 cd                	mov    ebp,ecx
c0005fb3:	85 d2                	test   edx,edx
c0005fb5:	7e 71                	jle    c0006028 <fncompare+0x7e>
c0005fb7:	89 c7                	mov    edi,eax
c0005fb9:	89 d6                	mov    esi,edx
c0005fbb:	8a 00                	mov    al,BYTE PTR [eax]
c0005fbd:	3c 3b                	cmp    al,0x3b
c0005fbf:	74 6e                	je     c000602f <fncompare+0x85>
c0005fc1:	bb 00 00 00 00       	mov    ebx,0x0
c0005fc6:	eb 32                	jmp    c0005ffa <fncompare+0x50>
c0005fc8:	83 ec 0c             	sub    esp,0xc
c0005fcb:	0f be c0             	movsx  eax,al
c0005fce:	50                   	push   eax
c0005fcf:	e8 fc a8 ff ff       	call   c00008d0 <tolower>
c0005fd4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005fd8:	0f be 44 1d 00       	movsx  eax,BYTE PTR [ebp+ebx*1+0x0]
c0005fdd:	89 04 24             	mov    DWORD PTR [esp],eax
c0005fe0:	e8 eb a8 ff ff       	call   c00008d0 <tolower>
c0005fe5:	83 c4 10             	add    esp,0x10
c0005fe8:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0005fec:	75 48                	jne    c0006036 <fncompare+0x8c>
c0005fee:	43                   	inc    ebx
c0005fef:	39 de                	cmp    esi,ebx
c0005ff1:	74 19                	je     c000600c <fncompare+0x62>
c0005ff3:	8a 04 1f             	mov    al,BYTE PTR [edi+ebx*1]
c0005ff6:	3c 3b                	cmp    al,0x3b
c0005ff8:	74 12                	je     c000600c <fncompare+0x62>
c0005ffa:	3c 2e                	cmp    al,0x2e
c0005ffc:	75 ca                	jne    c0005fc8 <fncompare+0x1e>
c0005ffe:	8d 56 ff             	lea    edx,[esi-0x1]
c0006001:	39 da                	cmp    edx,ebx
c0006003:	74 07                	je     c000600c <fncompare+0x62>
c0006005:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c000600a:	75 bc                	jne    c0005fc8 <fncompare+0x1e>
c000600c:	8a 44 1d 00          	mov    al,BYTE PTR [ebp+ebx*1+0x0]
c0006010:	3c 2f                	cmp    al,0x2f
c0006012:	74 29                	je     c000603d <fncompare+0x93>
c0006014:	84 c0                	test   al,al
c0006016:	0f 95 c0             	setne  al
c0006019:	25 ff 00 00 00       	and    eax,0xff
c000601e:	f7 d8                	neg    eax
c0006020:	83 c4 1c             	add    esp,0x1c
c0006023:	5b                   	pop    ebx
c0006024:	5e                   	pop    esi
c0006025:	5f                   	pop    edi
c0006026:	5d                   	pop    ebp
c0006027:	c3                   	ret    
c0006028:	bb 00 00 00 00       	mov    ebx,0x0
c000602d:	eb dd                	jmp    c000600c <fncompare+0x62>
c000602f:	bb 00 00 00 00       	mov    ebx,0x0
c0006034:	eb d6                	jmp    c000600c <fncompare+0x62>
c0006036:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000603b:	eb e3                	jmp    c0006020 <fncompare+0x76>
c000603d:	b8 00 00 00 00       	mov    eax,0x0
c0006042:	eb dc                	jmp    c0006020 <fncompare+0x76>

c0006044 <isoReadDiscSector>:
c0006044:	83 ec 0c             	sub    esp,0xc
c0006047:	0f be 05 60 fb 01 c0 	movsx  eax,BYTE PTR ds:0xc001fb60
c000604e:	50                   	push   eax
c000604f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006053:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006057:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000605b:	e8 20 19 01 00       	call   c0017980 <isoReadDiscSectorHelper>
c0006060:	83 c4 1c             	add    esp,0x1c
c0006063:	c3                   	ret    

c0006064 <bread_cache>:
c0006064:	55                   	push   ebp
c0006065:	57                   	push   edi
c0006066:	56                   	push   esi
c0006067:	53                   	push   ebx
c0006068:	83 ec 0c             	sub    esp,0xc
c000606b:	89 c6                	mov    esi,eax
c000606d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0006070:	3b 10                	cmp    edx,DWORD PTR [eax]
c0006072:	74 6a                	je     c00060de <bread_cache+0x7a>
c0006074:	89 d7                	mov    edi,edx
c0006076:	ba 0e 00 00 00       	mov    edx,0xe
c000607b:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c000607e:	39 38                	cmp    DWORD PTR [eax],edi
c0006080:	74 61                	je     c00060e3 <bread_cache+0x7f>
c0006082:	4a                   	dec    edx
c0006083:	83 fa ff             	cmp    edx,0xffffffff
c0006086:	75 f3                	jne    c000607b <bread_cache+0x17>
c0006088:	8b 06                	mov    eax,DWORD PTR [esi]
c000608a:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c000608d:	74 69                	je     c00060f8 <bread_cache+0x94>
c000608f:	bb 01 00 00 00       	mov    ebx,0x1
c0006094:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0006097:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c000609a:	74 0b                	je     c00060a7 <bread_cache+0x43>
c000609c:	43                   	inc    ebx
c000609d:	83 fb 10             	cmp    ebx,0x10
c00060a0:	75 f2                	jne    c0006094 <bread_cache+0x30>
c00060a2:	bb 00 00 00 00       	mov    ebx,0x0
c00060a7:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00060aa:	83 ec 04             	sub    esp,0x4
c00060ad:	6a 01                	push   0x1
c00060af:	57                   	push   edi
c00060b0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00060b3:	83 c0 04             	add    eax,0x4
c00060b6:	50                   	push   eax
c00060b7:	e8 88 ff ff ff       	call   c0006044 <isoReadDiscSector>
c00060bc:	83 c4 10             	add    esp,0x10
c00060bf:	85 c0                	test   eax,eax
c00060c1:	78 2e                	js     c00060f1 <bread_cache+0x8d>
c00060c3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00060c6:	89 38                	mov    DWORD PTR [eax],edi
c00060c8:	89 da                	mov    edx,ebx
c00060ca:	89 f0                	mov    eax,esi
c00060cc:	e8 b9 fd ff ff       	call   c0005e8a <bgrad_cache>
c00060d1:	b8 0f 00 00 00       	mov    eax,0xf
c00060d6:	83 c4 0c             	add    esp,0xc
c00060d9:	5b                   	pop    ebx
c00060da:	5e                   	pop    esi
c00060db:	5f                   	pop    edi
c00060dc:	5d                   	pop    ebp
c00060dd:	c3                   	ret    
c00060de:	ba 0f 00 00 00       	mov    edx,0xf
c00060e3:	89 f0                	mov    eax,esi
c00060e5:	e8 a0 fd ff ff       	call   c0005e8a <bgrad_cache>
c00060ea:	b8 0f 00 00 00       	mov    eax,0xf
c00060ef:	eb e5                	jmp    c00060d6 <bread_cache+0x72>
c00060f1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00060f6:	eb de                	jmp    c00060d6 <bread_cache+0x72>
c00060f8:	bb 00 00 00 00       	mov    ebx,0x0
c00060fd:	eb a8                	jmp    c00060a7 <bread_cache+0x43>

c00060ff <biread>:
c00060ff:	83 ec 0c             	sub    esp,0xc
c0006102:	89 c2                	mov    edx,eax
c0006104:	b8 80 fb 01 c0       	mov    eax,0xc001fb80
c0006109:	e8 56 ff ff ff       	call   c0006064 <bread_cache>
c000610e:	83 c4 0c             	add    esp,0xc
c0006111:	c3                   	ret    

c0006112 <bdread>:
c0006112:	83 ec 0c             	sub    esp,0xc
c0006115:	89 c2                	mov    edx,eax
c0006117:	b8 20 fb 01 c0       	mov    eax,0xc001fb20
c000611c:	e8 43 ff ff ff       	call   c0006064 <bread_cache>
c0006121:	83 c4 0c             	add    esp,0xc
c0006124:	c3                   	ret    

c0006125 <strnicmp>:
c0006125:	55                   	push   ebp
c0006126:	57                   	push   edi
c0006127:	56                   	push   esi
c0006128:	53                   	push   ebx
c0006129:	83 ec 0c             	sub    esp,0xc
c000612c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006130:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006134:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0006138:	85 ff                	test   edi,edi
c000613a:	74 51                	je     c000618d <strnicmp+0x68>
c000613c:	8a 03                	mov    al,BYTE PTR [ebx]
c000613e:	84 c0                	test   al,al
c0006140:	74 52                	je     c0006194 <strnicmp+0x6f>
c0006142:	8a 16                	mov    dl,BYTE PTR [esi]
c0006144:	84 d2                	test   dl,dl
c0006146:	74 53                	je     c000619b <strnicmp+0x76>
c0006148:	01 df                	add    edi,ebx
c000614a:	eb 32                	jmp    c000617e <strnicmp+0x59>
c000614c:	83 ec 0c             	sub    esp,0xc
c000614f:	0f be c0             	movsx  eax,al
c0006152:	50                   	push   eax
c0006153:	e8 78 a7 ff ff       	call   c00008d0 <tolower>
c0006158:	89 c5                	mov    ebp,eax
c000615a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000615d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006160:	e8 6b a7 ff ff       	call   c00008d0 <tolower>
c0006165:	43                   	inc    ebx
c0006166:	46                   	inc    esi
c0006167:	83 c4 10             	add    esp,0x10
c000616a:	29 c5                	sub    ebp,eax
c000616c:	75 39                	jne    c00061a7 <strnicmp+0x82>
c000616e:	39 fb                	cmp    ebx,edi
c0006170:	74 30                	je     c00061a2 <strnicmp+0x7d>
c0006172:	8a 03                	mov    al,BYTE PTR [ebx]
c0006174:	84 c0                	test   al,al
c0006176:	74 39                	je     c00061b1 <strnicmp+0x8c>
c0006178:	8a 16                	mov    dl,BYTE PTR [esi]
c000617a:	84 d2                	test   dl,dl
c000617c:	74 08                	je     c0006186 <strnicmp+0x61>
c000617e:	38 d0                	cmp    al,dl
c0006180:	75 ca                	jne    c000614c <strnicmp+0x27>
c0006182:	43                   	inc    ebx
c0006183:	46                   	inc    esi
c0006184:	eb e8                	jmp    c000616e <strnicmp+0x49>
c0006186:	bd 00 00 00 00       	mov    ebp,0x0
c000618b:	eb 1a                	jmp    c00061a7 <strnicmp+0x82>
c000618d:	bd 00 00 00 00       	mov    ebp,0x0
c0006192:	eb 13                	jmp    c00061a7 <strnicmp+0x82>
c0006194:	bd 00 00 00 00       	mov    ebp,0x0
c0006199:	eb 0c                	jmp    c00061a7 <strnicmp+0x82>
c000619b:	bd 00 00 00 00       	mov    ebp,0x0
c00061a0:	eb 05                	jmp    c00061a7 <strnicmp+0x82>
c00061a2:	bd 00 00 00 00       	mov    ebp,0x0
c00061a7:	89 e8                	mov    eax,ebp
c00061a9:	83 c4 0c             	add    esp,0xc
c00061ac:	5b                   	pop    ebx
c00061ad:	5e                   	pop    esi
c00061ae:	5f                   	pop    edi
c00061af:	5d                   	pop    ebp
c00061b0:	c3                   	ret    
c00061b1:	bd 00 00 00 00       	mov    ebp,0x0
c00061b6:	eb ef                	jmp    c00061a7 <strnicmp+0x82>

c00061b8 <find_object>:
c00061b8:	55                   	push   ebp
c00061b9:	57                   	push   edi
c00061ba:	56                   	push   esi
c00061bb:	53                   	push   ebx
c00061bc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00061c2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00061c6:	89 d3                	mov    ebx,edx
c00061c8:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00061cc:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c00061d3:	83 3d b4 09 02 c0 00 	cmp    DWORD PTR ds:0xc00209b4,0x0
c00061da:	75 14                	jne    c00061f0 <find_object+0x38>
c00061dc:	85 f6                	test   esi,esi
c00061de:	0f 8e f0 01 00 00    	jle    c00063d4 <find_object+0x21c>
c00061e4:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00061e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061eb:	e9 9f 01 00 00       	jmp    c000638f <find_object+0x1d7>
c00061f0:	89 c2                	mov    edx,eax
c00061f2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00061f6:	e8 49 fb ff ff       	call   c0005d44 <utf2ucs>
c00061fb:	eb df                	jmp    c00061dc <find_object+0x24>
c00061fd:	31 d2                	xor    edx,edx
c00061ff:	8a 55 20             	mov    dl,BYTE PTR [ebp+0x20]
c0006202:	89 c6                	mov    esi,eax
c0006204:	81 e6 ff 00 00 00    	and    esi,0xff
c000620a:	29 d6                	sub    esi,edx
c000620c:	8d 5c 15 21          	lea    ebx,[ebp+edx*1+0x21]
c0006210:	f6 45 20 01          	test   BYTE PTR [ebp+0x20],0x1
c0006214:	74 3d                	je     c0006253 <find_object+0x9b>
c0006216:	83 ee 21             	sub    esi,0x21
c0006219:	83 fe 03             	cmp    esi,0x3
c000621c:	7e 08                	jle    c0006226 <find_object+0x6e>
c000621e:	8a 43 03             	mov    al,BYTE PTR [ebx+0x3]
c0006221:	48                   	dec    eax
c0006222:	3c 01                	cmp    al,0x1
c0006224:	76 69                	jbe    c000628f <find_object+0xd7>
c0006226:	31 d2                	xor    edx,edx
c0006228:	8a 55 20             	mov    dl,BYTE PTR [ebp+0x20]
c000622b:	8d 45 21             	lea    eax,[ebp+0x21]
c000622e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006232:	e8 73 fd ff ff       	call   c0005faa <fncompare>
c0006237:	85 c0                	test   eax,eax
c0006239:	0f 85 b1 00 00 00    	jne    c00062f0 <find_object+0x138>
c000623f:	31 c0                	xor    eax,eax
c0006241:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c0006244:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0006248:	0f 85 a2 00 00 00    	jne    c00062f0 <find_object+0x138>
c000624e:	e9 02 01 00 00       	jmp    c0006355 <find_object+0x19d>
c0006253:	43                   	inc    ebx
c0006254:	83 ee 22             	sub    esi,0x22
c0006257:	eb c0                	jmp    c0006219 <find_object+0x61>
c0006259:	0f be 7b 02          	movsx  edi,BYTE PTR [ebx+0x2]
c000625d:	83 ef 05             	sub    edi,0x5
c0006260:	83 ec 04             	sub    esp,0x4
c0006263:	57                   	push   edi
c0006264:	8d 43 05             	lea    eax,[ebx+0x5]
c0006267:	50                   	push   eax
c0006268:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000626c:	50                   	push   eax
c000626d:	e8 be a3 ff ff       	call   c0000630 <strncpy>
c0006272:	c6 44 3c 30 00       	mov    BYTE PTR [esp+edi*1+0x30],0x0
c0006277:	83 c4 10             	add    esp,0x10
c000627a:	0f be 43 02          	movsx  eax,BYTE PTR [ebx+0x2]
c000627e:	29 c6                	sub    esi,eax
c0006280:	01 c3                	add    ebx,eax
c0006282:	83 fe 03             	cmp    esi,0x3
c0006285:	7e 21                	jle    c00062a8 <find_object+0xf0>
c0006287:	8a 43 03             	mov    al,BYTE PTR [ebx+0x3]
c000628a:	48                   	dec    eax
c000628b:	3c 01                	cmp    al,0x1
c000628d:	77 19                	ja     c00062a8 <find_object+0xf0>
c000628f:	83 ec 04             	sub    esp,0x4
c0006292:	6a 02                	push   0x2
c0006294:	68 60 d5 01 c0       	push   0xc001d560
c0006299:	53                   	push   ebx
c000629a:	e8 c1 a4 ff ff       	call   c0000760 <strncmp>
c000629f:	83 c4 10             	add    esp,0x10
c00062a2:	85 c0                	test   eax,eax
c00062a4:	75 d4                	jne    c000627a <find_object+0xc2>
c00062a6:	eb b1                	jmp    c0006259 <find_object+0xa1>
c00062a8:	85 ff                	test   edi,edi
c00062aa:	0f 8e 76 ff ff ff    	jle    c0006226 <find_object+0x6e>
c00062b0:	83 ec 08             	sub    esp,0x8
c00062b3:	6a 2f                	push   0x2f
c00062b5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00062b9:	57                   	push   edi
c00062ba:	e8 71 a4 ff ff       	call   c0000730 <strchr>
c00062bf:	83 c4 10             	add    esp,0x10
c00062c2:	85 c0                	test   eax,eax
c00062c4:	0f 84 98 00 00 00    	je     c0006362 <find_object+0x1aa>
c00062ca:	29 f8                	sub    eax,edi
c00062cc:	83 ec 04             	sub    esp,0x4
c00062cf:	50                   	push   eax
c00062d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00062d4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00062d8:	50                   	push   eax
c00062d9:	e8 47 fe ff ff       	call   c0006125 <strnicmp>
c00062de:	83 c4 10             	add    esp,0x10
c00062e1:	85 c0                	test   eax,eax
c00062e3:	75 0b                	jne    c00062f0 <find_object+0x138>
c00062e5:	31 c0                	xor    eax,eax
c00062e7:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c00062ea:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00062ee:	74 65                	je     c0006355 <find_object+0x19d>
c00062f0:	31 c0                	xor    eax,eax
c00062f2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00062f5:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c00062f9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062fd:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006303:	7f 71                	jg     c0006376 <find_object+0x1be>
c0006305:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006309:	39 c1                	cmp    ecx,eax
c000630b:	7d 69                	jge    c0006376 <find_object+0x1be>
c000630d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006311:	8b 04 85 80 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0480]
c0006318:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000631c:	8d 6c 10 04          	lea    ebp,[eax+edx*1+0x4]
c0006320:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006323:	84 c0                	test   al,al
c0006325:	74 4f                	je     c0006376 <find_object+0x1be>
c0006327:	8b 3d b4 09 02 c0    	mov    edi,DWORD PTR ds:0xc00209b4
c000632d:	85 ff                	test   edi,edi
c000632f:	0f 84 c8 fe ff ff    	je     c00061fd <find_object+0x45>
c0006335:	31 c9                	xor    ecx,ecx
c0006337:	8a 4d 20             	mov    cl,BYTE PTR [ebp+0x20]
c000633a:	8d 45 21             	lea    eax,[ebp+0x21]
c000633d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006341:	e8 86 fb ff ff       	call   c0005ecc <ucscompare>
c0006346:	85 c0                	test   eax,eax
c0006348:	75 a6                	jne    c00062f0 <find_object+0x138>
c000634a:	31 c0                	xor    eax,eax
c000634c:	8a 45 19             	mov    al,BYTE PTR [ebp+0x19]
c000634f:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0006353:	75 9b                	jne    c00062f0 <find_object+0x138>
c0006355:	89 e8                	mov    eax,ebp
c0006357:	81 c4 2c 01 00 00    	add    esp,0x12c
c000635d:	5b                   	pop    ebx
c000635e:	5e                   	pop    esi
c000635f:	5f                   	pop    edi
c0006360:	5d                   	pop    ebp
c0006361:	c3                   	ret    
c0006362:	83 ec 0c             	sub    esp,0xc
c0006365:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0006369:	e8 d2 a1 ff ff       	call   c0000540 <strlen>
c000636e:	83 c4 10             	add    esp,0x10
c0006371:	e9 56 ff ff ff       	jmp    c00062cc <find_object+0x114>
c0006376:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000637a:	81 ac 24 40 01 00 00 00 08 00 00 	sub    DWORD PTR [esp+0x140],0x800
c0006385:	83 bc 24 40 01 00 00 00 	cmp    DWORD PTR [esp+0x140],0x0
c000638d:	7e 3e                	jle    c00063cd <find_object+0x215>
c000638f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006393:	e8 67 fd ff ff       	call   c00060ff <biread>
c0006398:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000639c:	85 c0                	test   eax,eax
c000639e:	78 3e                	js     c00063de <find_object+0x226>
c00063a0:	8b 94 24 40 01 00 00 	mov    edx,DWORD PTR [esp+0x140]
c00063a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00063ab:	85 d2                	test   edx,edx
c00063ad:	7e c7                	jle    c0006376 <find_object+0x1be>
c00063af:	8b 04 85 80 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0480]
c00063b6:	8d 68 04             	lea    ebp,[eax+0x4]
c00063b9:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00063bc:	84 c0                	test   al,al
c00063be:	74 b6                	je     c0006376 <find_object+0x1be>
c00063c0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00063c8:	e9 5a ff ff ff       	jmp    c0006327 <find_object+0x16f>
c00063cd:	bd 00 00 00 00       	mov    ebp,0x0
c00063d2:	eb 81                	jmp    c0006355 <find_object+0x19d>
c00063d4:	bd 00 00 00 00       	mov    ebp,0x0
c00063d9:	e9 77 ff ff ff       	jmp    c0006355 <find_object+0x19d>
c00063de:	bd 00 00 00 00       	mov    ebp,0x0
c00063e3:	e9 6d ff ff ff       	jmp    c0006355 <find_object+0x19d>

c00063e8 <find_object_path>:
c00063e8:	55                   	push   ebp
c00063e9:	57                   	push   edi
c00063ea:	56                   	push   esi
c00063eb:	53                   	push   ebx
c00063ec:	83 ec 1c             	sub    esp,0x1c
c00063ef:	89 c6                	mov    esi,eax
c00063f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00063f5:	89 cf                	mov    edi,ecx
c00063f7:	eb 03                	jmp    c00063fc <find_object_path+0x14>
c00063f9:	8d 73 01             	lea    esi,[ebx+0x1]
c00063fc:	83 ec 08             	sub    esp,0x8
c00063ff:	6a 2f                	push   0x2f
c0006401:	56                   	push   esi
c0006402:	e8 29 a3 ff ff       	call   c0000730 <strchr>
c0006407:	89 c3                	mov    ebx,eax
c0006409:	83 c4 10             	add    esp,0x10
c000640c:	85 c0                	test   eax,eax
c000640e:	74 33                	je     c0006443 <find_object_path+0x5b>
c0006410:	39 de                	cmp    esi,ebx
c0006412:	74 e5                	je     c00063f9 <find_object_path+0x11>
c0006414:	8d 47 0a             	lea    eax,[edi+0xa]
c0006417:	e8 42 fa ff ff       	call   c0005e5e <iso_733>
c000641c:	89 c5                	mov    ebp,eax
c000641e:	8d 47 02             	lea    eax,[edi+0x2]
c0006421:	e8 38 fa ff ff       	call   c0005e5e <iso_733>
c0006426:	83 ec 0c             	sub    esp,0xc
c0006429:	55                   	push   ebp
c000642a:	89 c1                	mov    ecx,eax
c000642c:	ba 01 00 00 00       	mov    edx,0x1
c0006431:	89 f0                	mov    eax,esi
c0006433:	e8 80 fd ff ff       	call   c00061b8 <find_object>
c0006438:	89 c7                	mov    edi,eax
c000643a:	83 c4 10             	add    esp,0x10
c000643d:	85 c0                	test   eax,eax
c000643f:	75 b8                	jne    c00063f9 <find_object_path+0x11>
c0006441:	eb 0e                	jmp    c0006451 <find_object_path+0x69>
c0006443:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006446:	75 11                	jne    c0006459 <find_object_path+0x71>
c0006448:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000644d:	74 32                	je     c0006481 <find_object_path+0x99>
c000644f:	89 f8                	mov    eax,edi
c0006451:	83 c4 1c             	add    esp,0x1c
c0006454:	5b                   	pop    ebx
c0006455:	5e                   	pop    esi
c0006456:	5f                   	pop    edi
c0006457:	5d                   	pop    ebp
c0006458:	c3                   	ret    
c0006459:	8d 47 0a             	lea    eax,[edi+0xa]
c000645c:	e8 fd f9 ff ff       	call   c0005e5e <iso_733>
c0006461:	89 c3                	mov    ebx,eax
c0006463:	8d 47 02             	lea    eax,[edi+0x2]
c0006466:	e8 f3 f9 ff ff       	call   c0005e5e <iso_733>
c000646b:	83 ec 0c             	sub    esp,0xc
c000646e:	53                   	push   ebx
c000646f:	89 c1                	mov    ecx,eax
c0006471:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006475:	89 f0                	mov    eax,esi
c0006477:	e8 3c fd ff ff       	call   c00061b8 <find_object>
c000647c:	83 c4 10             	add    esp,0x10
c000647f:	eb d0                	jmp    c0006451 <find_object_path+0x69>
c0006481:	b8 00 00 00 00       	mov    eax,0x0
c0006486:	eb c9                	jmp    c0006451 <find_object_path+0x69>

c0006488 <stricmp>:
c0006488:	55                   	push   ebp
c0006489:	57                   	push   edi
c000648a:	56                   	push   esi
c000648b:	53                   	push   ebx
c000648c:	83 ec 0c             	sub    esp,0xc
c000648f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0006493:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006497:	46                   	inc    esi
c0006498:	47                   	inc    edi
c0006499:	0f b6 6f ff          	movzx  ebp,BYTE PTR [edi-0x1]
c000649d:	81 e5 ff 00 00 00    	and    ebp,0xff
c00064a3:	83 ec 0c             	sub    esp,0xc
c00064a6:	31 c0                	xor    eax,eax
c00064a8:	8a 46 ff             	mov    al,BYTE PTR [esi-0x1]
c00064ab:	50                   	push   eax
c00064ac:	e8 ff a3 ff ff       	call   c00008b0 <toupper>
c00064b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064b4:	e8 17 a4 ff ff       	call   c00008d0 <tolower>
c00064b9:	89 c3                	mov    ebx,eax
c00064bb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00064be:	e8 ed a3 ff ff       	call   c00008b0 <toupper>
c00064c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00064c6:	e8 05 a4 ff ff       	call   c00008d0 <tolower>
c00064cb:	83 c4 10             	add    esp,0x10
c00064ce:	39 c3                	cmp    ebx,eax
c00064d0:	75 04                	jne    c00064d6 <stricmp+0x4e>
c00064d2:	85 db                	test   ebx,ebx
c00064d4:	75 c1                	jne    c0006497 <stricmp+0xf>
c00064d6:	29 c3                	sub    ebx,eax
c00064d8:	89 d8                	mov    eax,ebx
c00064da:	83 c4 0c             	add    esp,0xc
c00064dd:	5b                   	pop    ebx
c00064de:	5e                   	pop    esi
c00064df:	5f                   	pop    edi
c00064e0:	5d                   	pop    ebp
c00064e1:	c3                   	ret    

c00064e2 <iso_open>:
c00064e2:	55                   	push   ebp
c00064e3:	57                   	push   edi
c00064e4:	56                   	push   esi
c00064e5:	53                   	push   ebx
c00064e6:	83 ec 0c             	sub    esp,0xc
c00064e9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00064ee:	0f 95 c0             	setne  al
c00064f1:	25 ff 00 00 00       	and    eax,0xff
c00064f6:	89 c7                	mov    edi,eax
c00064f8:	b9 80 09 02 c0       	mov    ecx,0xc0020980
c00064fd:	89 c2                	mov    edx,eax
c00064ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006503:	e8 e0 fe ff ff       	call   c00063e8 <find_object_path>
c0006508:	85 c0                	test   eax,eax
c000650a:	0f 84 93 00 00 00    	je     c00065a3 <iso_open+0xc1>
c0006510:	89 c6                	mov    esi,eax
c0006512:	83 3d 40 00 02 c0 00 	cmp    DWORD PTR ds:0xc0020040,0x0
c0006519:	0f 84 92 00 00 00    	je     c00065b1 <iso_open+0xcf>
c000651f:	ba d4 00 02 c0       	mov    edx,0xc00200d4
c0006524:	bb 01 00 00 00       	mov    ebx,0x1
c0006529:	83 3a 00             	cmp    DWORD PTR [edx],0x0
c000652c:	74 13                	je     c0006541 <iso_open+0x5f>
c000652e:	43                   	inc    ebx
c000652f:	81 c2 94 00 00 00    	add    edx,0x94
c0006535:	83 fb 10             	cmp    ebx,0x10
c0006538:	75 ef                	jne    c0006529 <iso_open+0x47>
c000653a:	bb ff ff ff ff       	mov    ebx,0xffffffff
c000653f:	eb 58                	jmp    c0006599 <iso_open+0xb7>
c0006541:	8d 04 db             	lea    eax,[ebx+ebx*8]
c0006544:	8d 04 83             	lea    eax,[ebx+eax*4]
c0006547:	c7 04 85 40 00 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdffc0],0xffffffff
c0006552:	83 fb 0f             	cmp    ebx,0xf
c0006555:	7f 53                	jg     c00065aa <iso_open+0xc8>
c0006557:	8d 46 02             	lea    eax,[esi+0x2]
c000655a:	e8 ff f8 ff ff       	call   c0005e5e <iso_733>
c000655f:	8d 14 db             	lea    edx,[ebx+ebx*8]
c0006562:	8d 14 93             	lea    edx,[ebx+edx*4]
c0006565:	c1 e2 02             	shl    edx,0x2
c0006568:	8d aa 40 00 02 c0    	lea    ebp,[edx-0x3ffdffc0]
c000656e:	89 82 40 00 02 c0    	mov    DWORD PTR [edx-0x3ffdffc0],eax
c0006574:	89 ba 44 00 02 c0    	mov    DWORD PTR [edx-0x3ffdffbc],edi
c000657a:	c7 82 48 00 02 c0 00 00 00 00 	mov    DWORD PTR [edx-0x3ffdffb8],0x0
c0006584:	8d 46 0a             	lea    eax,[esi+0xa]
c0006587:	e8 d2 f8 ff ff       	call   c0005e5e <iso_733>
c000658c:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000658f:	c7 85 90 00 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0x90],0x0
c0006599:	89 d8                	mov    eax,ebx
c000659b:	83 c4 0c             	add    esp,0xc
c000659e:	5b                   	pop    ebx
c000659f:	5e                   	pop    esi
c00065a0:	5f                   	pop    edi
c00065a1:	5d                   	pop    ebp
c00065a2:	c3                   	ret    
c00065a3:	bb ff ff ff ff       	mov    ebx,0xffffffff
c00065a8:	eb ef                	jmp    c0006599 <iso_open+0xb7>
c00065aa:	bb ff ff ff ff       	mov    ebx,0xffffffff
c00065af:	eb e8                	jmp    c0006599 <iso_open+0xb7>
c00065b1:	c7 05 40 00 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0020040,0xffffffff
c00065bb:	bb 00 00 00 00       	mov    ebx,0x0
c00065c0:	eb 95                	jmp    c0006557 <iso_open+0x75>

c00065c2 <iso_close>:
c00065c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065c6:	83 f8 0f             	cmp    eax,0xf
c00065c9:	7f 11                	jg     c00065dc <iso_close+0x1a>
c00065cb:	8d 14 c0             	lea    edx,[eax+eax*8]
c00065ce:	8d 04 90             	lea    eax,[eax+edx*4]
c00065d1:	c7 04 85 40 00 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffdffc0],0x0
c00065dc:	e8 83 f8 ff ff       	call   c0005e64 <bclear_cache>
c00065e1:	c3                   	ret    

c00065e2 <iso_read>:
c00065e2:	55                   	push   ebp
c00065e3:	57                   	push   edi
c00065e4:	56                   	push   esi
c00065e5:	53                   	push   ebx
c00065e6:	83 ec 1c             	sub    esp,0x1c
c00065e9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065ed:	83 fd 0f             	cmp    ebp,0xf
c00065f0:	0f 8f ba 01 00 00    	jg     c00067b0 <iso_read+0x1ce>
c00065f6:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c00065fa:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c00065fe:	83 3c 85 40 00 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdffc0],0x0
c0006606:	0f 84 b0 01 00 00    	je     c00067bc <iso_read+0x1da>
c000660c:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c0006610:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c0006614:	8b 04 85 d0 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdff30]
c000661b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000661f:	85 c0                	test   eax,eax
c0006621:	0f 85 a1 01 00 00    	jne    c00067c8 <iso_read+0x1e6>
c0006627:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000662c:	0f 84 71 01 00 00    	je     c00067a3 <iso_read+0x1c1>
c0006632:	8d 44 ed 00          	lea    eax,[ebp+ebp*8+0x0]
c0006636:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c000663a:	8d 14 85 40 00 02 c0 	lea    edx,[eax*4-0x3ffdffc0]
c0006641:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0006644:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0006647:	29 c2                	sub    edx,eax
c0006649:	89 d1                	mov    ecx,edx
c000664b:	3b 54 24 38          	cmp    edx,DWORD PTR [esp+0x38]
c000664f:	76 04                	jbe    c0006655 <iso_read+0x73>
c0006651:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006655:	85 c9                	test   ecx,ecx
c0006657:	0f 84 42 01 00 00    	je     c000679f <iso_read+0x1bd>
c000665d:	8d 1c ed 00 00 00 00 	lea    ebx,[ebp*8+0x0]
c0006664:	e9 b7 00 00 00       	jmp    c0006720 <iso_read+0x13e>
c0006669:	8d 91 ff 07 00 00    	lea    edx,[ecx+0x7ff]
c000666f:	e9 e9 00 00 00       	jmp    c000675d <iso_read+0x17b>
c0006674:	ba 20 00 00 00       	mov    edx,0x20
c0006679:	e9 e2 00 00 00       	jmp    c0006760 <iso_read+0x17e>
c000667e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006682:	39 ca                	cmp    edx,ecx
c0006684:	7e 04                	jle    c000668a <iso_read+0xa8>
c0006686:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000668a:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c000668d:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c0006691:	c1 e8 0b             	shr    eax,0xb
c0006694:	03 04 95 40 00 02 c0 	add    eax,DWORD PTR [edx*4-0x3ffdffc0]
c000669b:	e8 72 fa ff ff       	call   c0006112 <bdread>
c00066a0:	85 c0                	test   eax,eax
c00066a2:	0f 88 2c 01 00 00    	js     c00067d4 <iso_read+0x1f2>
c00066a8:	8b 14 85 20 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe04e0]
c00066af:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00066b2:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c00066b6:	8b 04 85 48 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdffb8]
c00066bd:	25 ff 07 00 00       	and    eax,0x7ff
c00066c2:	8d 74 02 04          	lea    esi,[edx+eax*1+0x4]
c00066c6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066ca:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00066ce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00066d4:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c00066d8:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00066db:	8d 44 85 00          	lea    eax,[ebp+eax*4+0x0]
c00066df:	8d 14 85 40 00 02 c0 	lea    edx,[eax*4-0x3ffdffc0]
c00066e6:	89 f8                	mov    eax,edi
c00066e8:	03 42 08             	add    eax,DWORD PTR [edx+0x8]
c00066eb:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00066ee:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c00066f2:	29 7c 24 38          	sub    DWORD PTR [esp+0x38],edi
c00066f6:	0f 84 a7 00 00 00    	je     c00067a3 <iso_read+0x1c1>
c00066fc:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c00066ff:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c0006703:	8b 14 95 4c 00 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdffb4]
c000670a:	29 c2                	sub    edx,eax
c000670c:	89 d1                	mov    ecx,edx
c000670e:	3b 54 24 38          	cmp    edx,DWORD PTR [esp+0x38]
c0006712:	76 04                	jbe    c0006718 <iso_read+0x136>
c0006714:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006718:	85 c9                	test   ecx,ecx
c000671a:	0f 84 83 00 00 00    	je     c00067a3 <iso_read+0x1c1>
c0006720:	89 c6                	mov    esi,eax
c0006722:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006728:	ba 00 08 00 00       	mov    edx,0x800
c000672d:	29 f2                	sub    edx,esi
c000672f:	81 fa 00 08 00 00    	cmp    edx,0x800
c0006735:	0f 85 43 ff ff ff    	jne    c000667e <iso_read+0x9c>
c000673b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006741:	0f 8e 37 ff ff ff    	jle    c000667e <iso_read+0x9c>
c0006747:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000674d:	0f 8f 21 ff ff ff    	jg     c0006674 <iso_read+0x92>
c0006753:	89 ca                	mov    edx,ecx
c0006755:	85 c9                	test   ecx,ecx
c0006757:	0f 88 0c ff ff ff    	js     c0006669 <iso_read+0x87>
c000675d:	c1 fa 0b             	sar    edx,0xb
c0006760:	89 d6                	mov    esi,edx
c0006762:	c1 e6 0b             	shl    esi,0xb
c0006765:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006769:	83 ec 04             	sub    esp,0x4
c000676c:	52                   	push   edx
c000676d:	8d 14 2b             	lea    edx,[ebx+ebp*1]
c0006770:	8d 54 95 00          	lea    edx,[ebp+edx*4+0x0]
c0006774:	c1 e8 0b             	shr    eax,0xb
c0006777:	03 04 95 40 00 02 c0 	add    eax,DWORD PTR [edx*4-0x3ffdffc0]
c000677e:	50                   	push   eax
c000677f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006783:	e8 bc f8 ff ff       	call   c0006044 <isoReadDiscSector>
c0006788:	83 c4 10             	add    esp,0x10
c000678b:	85 c0                	test   eax,eax
c000678d:	0f 8f 3d ff ff ff    	jg     c00066d0 <iso_read+0xee>
c0006793:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006798:	ba ff ff ff ff       	mov    edx,0xffffffff
c000679d:	eb 09                	jmp    c00067a8 <iso_read+0x1c6>
c000679f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00067a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00067a7:	99                   	cdq    
c00067a8:	83 c4 1c             	add    esp,0x1c
c00067ab:	5b                   	pop    ebx
c00067ac:	5e                   	pop    esi
c00067ad:	5f                   	pop    edi
c00067ae:	5d                   	pop    ebp
c00067af:	c3                   	ret    
c00067b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067b5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067ba:	eb ec                	jmp    c00067a8 <iso_read+0x1c6>
c00067bc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067c1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067c6:	eb e0                	jmp    c00067a8 <iso_read+0x1c6>
c00067c8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067cd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067d2:	eb d4                	jmp    c00067a8 <iso_read+0x1c6>
c00067d4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00067d9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00067de:	eb c8                	jmp    c00067a8 <iso_read+0x1c6>

c00067e0 <iso_seek>:
c00067e0:	53                   	push   ebx
c00067e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00067e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00067ed:	83 f8 0f             	cmp    eax,0xf
c00067f0:	0f 8f a4 00 00 00    	jg     c000689a <iso_seek+0xba>
c00067f6:	8d 1c c0             	lea    ebx,[eax+eax*8]
c00067f9:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00067fc:	83 3c 9d 40 00 02 c0 00 	cmp    DWORD PTR [ebx*4-0x3ffdffc0],0x0
c0006804:	0f 84 9c 00 00 00    	je     c00068a6 <iso_seek+0xc6>
c000680a:	8d 1c c0             	lea    ebx,[eax+eax*8]
c000680d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0006810:	83 3c 9d d0 00 02 c0 00 	cmp    DWORD PTR [ebx*4-0x3ffdff30],0x0
c0006818:	0f 85 94 00 00 00    	jne    c00068b2 <iso_seek+0xd2>
c000681e:	83 fa 01             	cmp    edx,0x1
c0006821:	74 53                	je     c0006876 <iso_seek+0x96>
c0006823:	83 fa 02             	cmp    edx,0x2
c0006826:	74 5d                	je     c0006885 <iso_seek+0xa5>
c0006828:	85 d2                	test   edx,edx
c000682a:	74 0c                	je     c0006838 <iso_seek+0x58>
c000682c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006831:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006836:	eb 3c                	jmp    c0006874 <iso_seek+0x94>
c0006838:	89 0c 9d 48 00 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdffb8],ecx
c000683f:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006842:	8d 14 90             	lea    edx,[eax+edx*4]
c0006845:	8b 0c 95 4c 00 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdffb4]
c000684c:	39 0c 95 48 00 02 c0 	cmp    DWORD PTR [edx*4-0x3ffdffb8],ecx
c0006853:	76 0d                	jbe    c0006862 <iso_seek+0x82>
c0006855:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006858:	8d 14 90             	lea    edx,[eax+edx*4]
c000685b:	89 0c 95 48 00 02 c0 	mov    DWORD PTR [edx*4-0x3ffdffb8],ecx
c0006862:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006865:	8d 04 90             	lea    eax,[eax+edx*4]
c0006868:	8b 04 85 48 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdffb8]
c000686f:	ba 00 00 00 00       	mov    edx,0x0
c0006874:	5b                   	pop    ebx
c0006875:	c3                   	ret    
c0006876:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006879:	8d 14 90             	lea    edx,[eax+edx*4]
c000687c:	01 0c 95 48 00 02 c0 	add    DWORD PTR [edx*4-0x3ffdffb8],ecx
c0006883:	eb ba                	jmp    c000683f <iso_seek+0x5f>
c0006885:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006888:	8d 14 90             	lea    edx,[eax+edx*4]
c000688b:	8d 14 95 40 00 02 c0 	lea    edx,[edx*4-0x3ffdffc0]
c0006892:	03 4a 0c             	add    ecx,DWORD PTR [edx+0xc]
c0006895:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006898:	eb a5                	jmp    c000683f <iso_seek+0x5f>
c000689a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000689f:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068a4:	eb ce                	jmp    c0006874 <iso_seek+0x94>
c00068a6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068ab:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068b0:	eb c2                	jmp    c0006874 <iso_seek+0x94>
c00068b2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068b7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00068bc:	eb b6                	jmp    c0006874 <iso_seek+0x94>

c00068be <iso_tell>:
c00068be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00068c2:	83 f8 0f             	cmp    eax,0xf
c00068c5:	7f 33                	jg     c00068fa <iso_tell+0x3c>
c00068c7:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068ca:	8d 14 90             	lea    edx,[eax+edx*4]
c00068cd:	83 3c 95 40 00 02 c0 00 	cmp    DWORD PTR [edx*4-0x3ffdffc0],0x0
c00068d5:	74 2e                	je     c0006905 <iso_tell+0x47>
c00068d7:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068da:	8d 14 90             	lea    edx,[eax+edx*4]
c00068dd:	83 3c 95 d0 00 02 c0 00 	cmp    DWORD PTR [edx*4-0x3ffdff30],0x0
c00068e5:	75 29                	jne    c0006910 <iso_tell+0x52>
c00068e7:	8d 14 c0             	lea    edx,[eax+eax*8]
c00068ea:	8d 04 90             	lea    eax,[eax+edx*4]
c00068ed:	8b 04 85 48 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdffb8]
c00068f4:	ba 00 00 00 00       	mov    edx,0x0
c00068f9:	c3                   	ret    
c00068fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00068ff:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006904:	c3                   	ret    
c0006905:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000690a:	ba ff ff ff ff       	mov    edx,0xffffffff
c000690f:	c3                   	ret    
c0006910:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006915:	ba ff ff ff ff       	mov    edx,0xffffffff
c000691a:	c3                   	ret    

c000691b <iso_total>:
c000691b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000691f:	83 f8 0f             	cmp    eax,0xf
c0006922:	7f 2e                	jg     c0006952 <iso_total+0x37>
c0006924:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006927:	8d 14 90             	lea    edx,[eax+edx*4]
c000692a:	83 3c 95 40 00 02 c0 00 	cmp    DWORD PTR [edx*4-0x3ffdffc0],0x0
c0006932:	74 24                	je     c0006958 <iso_total+0x3d>
c0006934:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006937:	8d 14 90             	lea    edx,[eax+edx*4]
c000693a:	83 3c 95 d0 00 02 c0 00 	cmp    DWORD PTR [edx*4-0x3ffdff30],0x0
c0006942:	75 1a                	jne    c000695e <iso_total+0x43>
c0006944:	8d 14 c0             	lea    edx,[eax+eax*8]
c0006947:	8d 04 90             	lea    eax,[eax+edx*4]
c000694a:	8b 04 85 4c 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdffb4]
c0006951:	c3                   	ret    
c0006952:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006957:	c3                   	ret    
c0006958:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000695d:	c3                   	ret    
c000695e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006963:	c3                   	ret    

c0006964 <fn_postprocess>:
c0006964:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006968:	8a 01                	mov    al,BYTE PTR [ecx]
c000696a:	84 c0                	test   al,al
c000696c:	74 25                	je     c0006993 <fn_postprocess+0x2f>
c000696e:	3c 3b                	cmp    al,0x3b
c0006970:	74 21                	je     c0006993 <fn_postprocess+0x2f>
c0006972:	89 c8                	mov    eax,ecx
c0006974:	40                   	inc    eax
c0006975:	8a 10                	mov    dl,BYTE PTR [eax]
c0006977:	84 d2                	test   dl,dl
c0006979:	74 05                	je     c0006980 <fn_postprocess+0x1c>
c000697b:	80 fa 3b             	cmp    dl,0x3b
c000697e:	75 f4                	jne    c0006974 <fn_postprocess+0x10>
c0006980:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006983:	39 c1                	cmp    ecx,eax
c0006985:	73 06                	jae    c000698d <fn_postprocess+0x29>
c0006987:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c000698b:	74 01                	je     c000698e <fn_postprocess+0x2a>
c000698d:	c3                   	ret    
c000698e:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c0006992:	c3                   	ret    
c0006993:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0006996:	eb f5                	jmp    c000698d <fn_postprocess+0x29>

c0006998 <iso_readdir>:
c0006998:	55                   	push   ebp
c0006999:	57                   	push   edi
c000699a:	56                   	push   esi
c000699b:	53                   	push   ebx
c000699c:	83 ec 1c             	sub    esp,0x1c
c000699f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00069a3:	83 fe 0f             	cmp    esi,0xf
c00069a6:	0f 8f 7a 02 00 00    	jg     c0006c26 <iso_readdir+0x28e>
c00069ac:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069af:	8d 04 86             	lea    eax,[esi+eax*4]
c00069b2:	83 3c 85 40 00 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdffc0],0x0
c00069ba:	0f 84 70 02 00 00    	je     c0006c30 <iso_readdir+0x298>
c00069c0:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069c3:	8d 04 86             	lea    eax,[esi+eax*4]
c00069c6:	83 3c 85 44 00 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdffbc],0x0
c00069ce:	0f 84 66 02 00 00    	je     c0006c3a <iso_readdir+0x2a2>
c00069d4:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069d7:	8d 04 86             	lea    eax,[esi+eax*4]
c00069da:	83 3c 85 d0 00 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffdff30],0x0
c00069e2:	0f 85 5c 02 00 00    	jne    c0006c44 <iso_readdir+0x2ac>
c00069e8:	8d 04 f6             	lea    eax,[esi+esi*8]
c00069eb:	8d 14 86             	lea    edx,[esi+eax*4]
c00069ee:	8b 04 95 48 00 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdffb8]
c00069f5:	8b 0c 95 4c 00 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdffb4]
c00069fc:	39 c8                	cmp    eax,ecx
c00069fe:	73 57                	jae    c0006a57 <iso_readdir+0xbf>
c0006a00:	8d 14 f6             	lea    edx,[esi+esi*8]
c0006a03:	8d 3c 96             	lea    edi,[esi+edx*4]
c0006a06:	c1 e7 02             	shl    edi,0x2
c0006a09:	c1 e8 0b             	shr    eax,0xb
c0006a0c:	03 87 40 00 02 c0    	add    eax,DWORD PTR [edi-0x3ffdffc0]
c0006a12:	e8 e8 f6 ff ff       	call   c00060ff <biread>
c0006a17:	85 c0                	test   eax,eax
c0006a19:	0f 88 2f 02 00 00    	js     c0006c4e <iso_readdir+0x2b6>
c0006a1f:	8b 14 85 80 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0480]
c0006a26:	83 c2 04             	add    edx,0x4
c0006a29:	8b 87 48 00 02 c0    	mov    eax,DWORD PTR [edi-0x3ffdffb8]
c0006a2f:	89 c3                	mov    ebx,eax
c0006a31:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0006a37:	01 d3                	add    ebx,edx
c0006a39:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0006a3b:	84 c9                	test   cl,cl
c0006a3d:	75 22                	jne    c0006a61 <iso_readdir+0xc9>
c0006a3f:	25 00 f8 ff ff       	and    eax,0xfffff800
c0006a44:	05 00 08 00 00       	add    eax,0x800
c0006a49:	89 87 48 00 02 c0    	mov    DWORD PTR [edi-0x3ffdffb8],eax
c0006a4f:	3b 87 4c 00 02 c0    	cmp    eax,DWORD PTR [edi-0x3ffdffb4]
c0006a55:	72 b2                	jb     c0006a09 <iso_readdir+0x71>
c0006a57:	b8 00 00 00 00       	mov    eax,0x0
c0006a5c:	e9 83 00 00 00       	jmp    c0006ae4 <iso_readdir+0x14c>
c0006a61:	8d 3c f6             	lea    edi,[esi+esi*8]
c0006a64:	8d 3c be             	lea    edi,[esi+edi*4]
c0006a67:	3b 04 bd 4c 00 02 c0 	cmp    eax,DWORD PTR [edi*4-0x3ffdffb4]
c0006a6e:	0f 83 e4 01 00 00    	jae    c0006c58 <iso_readdir+0x2c0>
c0006a74:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006a78:	75 06                	jne    c0006a80 <iso_readdir+0xe8>
c0006a7a:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c0006a7e:	74 6c                	je     c0006aec <iso_readdir+0x154>
c0006a80:	83 3d b4 09 02 c0 00 	cmp    DWORD PTR ds:0xc00209b4,0x0
c0006a87:	0f 84 9d 00 00 00    	je     c0006b2a <iso_readdir+0x192>
c0006a8d:	31 c9                	xor    ecx,ecx
c0006a8f:	8a 4b 20             	mov    cl,BYTE PTR [ebx+0x20]
c0006a92:	8d 53 21             	lea    edx,[ebx+0x21]
c0006a95:	8d 04 f6             	lea    eax,[esi+esi*8]
c0006a98:	8d 04 86             	lea    eax,[esi+eax*4]
c0006a9b:	8d 04 85 58 00 02 c0 	lea    eax,[eax*4-0x3ffdffa8]
c0006aa2:	e8 c0 f2 ff ff       	call   c0005d67 <ucs2utfn>
c0006aa7:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006aab:	0f 85 66 01 00 00    	jne    c0006c17 <iso_readdir+0x27f>
c0006ab1:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006ab4:	e8 a5 f3 ff ff       	call   c0005e5e <iso_733>
c0006ab9:	ba 00 00 00 00       	mov    edx,0x0
c0006abe:	8d 0c f6             	lea    ecx,[esi+esi*8]
c0006ac1:	c1 e1 02             	shl    ecx,0x2
c0006ac4:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0006ac7:	8d 3c bd 40 00 02 c0 	lea    edi,[edi*4-0x3ffdffc0]
c0006ace:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0006ad1:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c0006ad4:	31 c0                	xor    eax,eax
c0006ad6:	8a 03                	mov    al,BYTE PTR [ebx]
c0006ad8:	01 47 08             	add    DWORD PTR [edi+0x8],eax
c0006adb:	01 ce                	add    esi,ecx
c0006add:	8d 04 b5 50 00 02 c0 	lea    eax,[esi*4-0x3ffdffb0]
c0006ae4:	83 c4 1c             	add    esp,0x1c
c0006ae7:	5b                   	pop    ebx
c0006ae8:	5e                   	pop    esi
c0006ae9:	5f                   	pop    edi
c0006aea:	5d                   	pop    ebp
c0006aeb:	c3                   	ret    
c0006aec:	81 e1 ff 00 00 00    	and    ecx,0xff
c0006af2:	01 c8                	add    eax,ecx
c0006af4:	8d 3c bd 40 00 02 c0 	lea    edi,[edi*4-0x3ffdffc0]
c0006afb:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c0006afe:	89 c1                	mov    ecx,eax
c0006b00:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006b06:	31 db                	xor    ebx,ebx
c0006b08:	8a 1c 0a             	mov    bl,BYTE PTR [edx+ecx*1]
c0006b0b:	89 d9                	mov    ecx,ebx
c0006b0d:	01 c8                	add    eax,ecx
c0006b0f:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c0006b12:	25 ff 07 00 00       	and    eax,0x7ff
c0006b17:	8d 1c 02             	lea    ebx,[edx+eax*1]
c0006b1a:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006b1d:	0f 85 5d ff ff ff    	jne    c0006a80 <iso_readdir+0xe8>
c0006b23:	b8 00 00 00 00       	mov    eax,0x0
c0006b28:	eb ba                	jmp    c0006ae4 <iso_readdir+0x14c>
c0006b2a:	8d 3c f6             	lea    edi,[esi+esi*8]
c0006b2d:	c1 e7 02             	shl    edi,0x2
c0006b30:	8d 04 37             	lea    eax,[edi+esi*1]
c0006b33:	8d 2c 85 58 00 02 c0 	lea    ebp,[eax*4-0x3ffdffa8]
c0006b3a:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0006b3e:	83 ec 04             	sub    esp,0x4
c0006b41:	31 c0                	xor    eax,eax
c0006b43:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b46:	50                   	push   eax
c0006b47:	8d 43 21             	lea    eax,[ebx+0x21]
c0006b4a:	50                   	push   eax
c0006b4b:	55                   	push   ebp
c0006b4c:	e8 df 9a ff ff       	call   c0000630 <strncpy>
c0006b51:	31 c0                	xor    eax,eax
c0006b53:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b56:	01 f7                	add    edi,esi
c0006b58:	c6 84 b8 58 00 02 c0 00 	mov    BYTE PTR [eax+edi*4-0x3ffdffa8],0x0
c0006b60:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b63:	e8 fc fd ff ff       	call   c0006964 <fn_postprocess>
c0006b68:	31 c0                	xor    eax,eax
c0006b6a:	8a 43 20             	mov    al,BYTE PTR [ebx+0x20]
c0006b6d:	0f b6 2b             	movzx  ebp,BYTE PTR [ebx]
c0006b70:	81 e5 ff 00 00 00    	and    ebp,0xff
c0006b76:	29 c5                	sub    ebp,eax
c0006b78:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c0006b7c:	83 c4 10             	add    esp,0x10
c0006b7f:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006b83:	74 25                	je     c0006baa <iso_readdir+0x212>
c0006b85:	83 ed 21             	sub    ebp,0x21
c0006b88:	83 fd 03             	cmp    ebp,0x3
c0006b8b:	0f 8e 16 ff ff ff    	jle    c0006aa7 <iso_readdir+0x10f>
c0006b91:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006b94:	48                   	dec    eax
c0006b95:	3c 01                	cmp    al,0x1
c0006b97:	0f 87 0a ff ff ff    	ja     c0006aa7 <iso_readdir+0x10f>
c0006b9d:	8d 04 f5 00 00 00 00 	lea    eax,[esi*8+0x0]
c0006ba4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ba8:	eb 23                	jmp    c0006bcd <iso_readdir+0x235>
c0006baa:	47                   	inc    edi
c0006bab:	83 ed 22             	sub    ebp,0x22
c0006bae:	eb d8                	jmp    c0006b88 <iso_readdir+0x1f0>
c0006bb0:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bb4:	29 c5                	sub    ebp,eax
c0006bb6:	01 c7                	add    edi,eax
c0006bb8:	83 fd 03             	cmp    ebp,0x3
c0006bbb:	0f 8e e6 fe ff ff    	jle    c0006aa7 <iso_readdir+0x10f>
c0006bc1:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006bc4:	48                   	dec    eax
c0006bc5:	3c 01                	cmp    al,0x1
c0006bc7:	0f 87 da fe ff ff    	ja     c0006aa7 <iso_readdir+0x10f>
c0006bcd:	83 ec 04             	sub    esp,0x4
c0006bd0:	6a 02                	push   0x2
c0006bd2:	68 60 d5 01 c0       	push   0xc001d560
c0006bd7:	57                   	push   edi
c0006bd8:	e8 83 9b ff ff       	call   c0000760 <strncmp>
c0006bdd:	83 c4 10             	add    esp,0x10
c0006be0:	85 c0                	test   eax,eax
c0006be2:	75 cc                	jne    c0006bb0 <iso_readdir+0x218>
c0006be4:	83 ec 04             	sub    esp,0x4
c0006be7:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006beb:	83 e8 05             	sub    eax,0x5
c0006bee:	50                   	push   eax
c0006bef:	8d 47 05             	lea    eax,[edi+0x5]
c0006bf2:	50                   	push   eax
c0006bf3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0006bf7:	e8 34 9a ff ff       	call   c0000630 <strncpy>
c0006bfc:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006c00:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006c04:	8d 14 31             	lea    edx,[ecx+esi*1]
c0006c07:	8d 14 96             	lea    edx,[esi+edx*4]
c0006c0a:	c6 84 90 53 00 02 c0 00 	mov    BYTE PTR [eax+edx*4-0x3ffdffad],0x0
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	eb 99                	jmp    c0006bb0 <iso_readdir+0x218>
c0006c17:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006c1c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0006c21:	e9 98 fe ff ff       	jmp    c0006abe <iso_readdir+0x126>
c0006c26:	b8 00 00 00 00       	mov    eax,0x0
c0006c2b:	e9 b4 fe ff ff       	jmp    c0006ae4 <iso_readdir+0x14c>
c0006c30:	b8 00 00 00 00       	mov    eax,0x0
c0006c35:	e9 aa fe ff ff       	jmp    c0006ae4 <iso_readdir+0x14c>
c0006c3a:	b8 00 00 00 00       	mov    eax,0x0
c0006c3f:	e9 a0 fe ff ff       	jmp    c0006ae4 <iso_readdir+0x14c>
c0006c44:	b8 00 00 00 00       	mov    eax,0x0
c0006c49:	e9 96 fe ff ff       	jmp    c0006ae4 <iso_readdir+0x14c>
c0006c4e:	b8 00 00 00 00       	mov    eax,0x0
c0006c53:	e9 8c fe ff ff       	jmp    c0006ae4 <iso_readdir+0x14c>
c0006c58:	b8 00 00 00 00       	mov    eax,0x0
c0006c5d:	e9 82 fe ff ff       	jmp    c0006ae4 <iso_readdir+0x14c>

c0006c62 <iso_reset>:
c0006c62:	e8 4b f2 ff ff       	call   c0005eb2 <iso_break_all>
c0006c67:	e8 40 f2 ff ff       	call   c0005eac <bclear>
c0006c6c:	b8 00 00 00 00       	mov    eax,0x0
c0006c71:	c3                   	ret    

c0006c72 <init_percd>:
c0006c72:	57                   	push   edi
c0006c73:	56                   	push   esi
c0006c74:	53                   	push   ebx
c0006c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c79:	a2 60 fb 01 c0       	mov    ds:0xc001fb60,al
c0006c7e:	e8 df ff ff ff       	call   c0006c62 <iso_reset>
c0006c83:	c7 05 b4 09 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00209b4,0x0
c0006c8d:	bb 01 00 00 00       	mov    ebx,0x1
c0006c92:	eb 06                	jmp    c0006c9a <init_percd+0x28>
c0006c94:	43                   	inc    ebx
c0006c95:	83 fb 04             	cmp    ebx,0x4
c0006c98:	74 53                	je     c0006ced <init_percd+0x7b>
c0006c9a:	a1 ac 09 02 c0       	mov    eax,ds:0xc00209ac
c0006c9f:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006ca3:	e8 57 f4 ff ff       	call   c00060ff <biread>
c0006ca8:	89 c6                	mov    esi,eax
c0006caa:	85 c0                	test   eax,eax
c0006cac:	0f 88 c1 00 00 00    	js     c0006d73 <init_percd+0x101>
c0006cb2:	83 ec 04             	sub    esp,0x4
c0006cb5:	6a 06                	push   0x6
c0006cb7:	68 63 d5 01 c0       	push   0xc001d563
c0006cbc:	8b 04 85 80 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0480]
c0006cc3:	83 c0 04             	add    eax,0x4
c0006cc6:	50                   	push   eax
c0006cc7:	e8 c4 96 ff ff       	call   c0000390 <memcmp>
c0006ccc:	83 c4 10             	add    esp,0x10
c0006ccf:	85 c0                	test   eax,eax
c0006cd1:	75 c1                	jne    c0006c94 <init_percd+0x22>
c0006cd3:	8b 04 b5 80 fb 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe0480]
c0006cda:	83 c0 5c             	add    eax,0x5c
c0006cdd:	e8 1e f1 ff ff       	call   c0005e00 <isjoliet>
c0006ce2:	a3 b4 09 02 c0       	mov    ds:0xc00209b4,eax
c0006ce7:	85 c0                	test   eax,eax
c0006ce9:	74 a9                	je     c0006c94 <init_percd+0x22>
c0006ceb:	eb 09                	jmp    c0006cf6 <init_percd+0x84>
c0006ced:	83 3d b4 09 02 c0 00 	cmp    DWORD PTR ds:0xc00209b4,0x0
c0006cf4:	74 42                	je     c0006d38 <init_percd+0xc6>
c0006cf6:	8b 34 b5 80 fb 01 c0 	mov    esi,DWORD PTR [esi*4-0x3ffe0480]
c0006cfd:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d03:	bf 80 09 02 c0       	mov    edi,0xc0020980
c0006d08:	b9 22 00 00 00       	mov    ecx,0x22
c0006d0d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d0f:	b8 82 09 02 c0       	mov    eax,0xc0020982
c0006d14:	e8 45 f1 ff ff       	call   c0005e5e <iso_733>
c0006d19:	a3 a8 09 02 c0       	mov    ds:0xc00209a8,eax
c0006d1e:	b8 8a 09 02 c0       	mov    eax,0xc002098a
c0006d23:	e8 36 f1 ff ff       	call   c0005e5e <iso_733>
c0006d28:	a3 a4 09 02 c0       	mov    ds:0xc00209a4,eax
c0006d2d:	bb 00 00 00 00       	mov    ebx,0x0
c0006d32:	89 d8                	mov    eax,ebx
c0006d34:	5b                   	pop    ebx
c0006d35:	5e                   	pop    esi
c0006d36:	5f                   	pop    edi
c0006d37:	c3                   	ret    
c0006d38:	a1 ac 09 02 c0       	mov    eax,ds:0xc00209ac
c0006d3d:	83 c0 10             	add    eax,0x10
c0006d40:	e8 ba f3 ff ff       	call   c00060ff <biread>
c0006d45:	89 c6                	mov    esi,eax
c0006d47:	85 c0                	test   eax,eax
c0006d49:	78 e7                	js     c0006d32 <init_percd+0xc0>
c0006d4b:	83 ec 04             	sub    esp,0x4
c0006d4e:	6a 06                	push   0x6
c0006d50:	68 6a d5 01 c0       	push   0xc001d56a
c0006d55:	8b 04 85 80 fb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0480]
c0006d5c:	83 c0 04             	add    eax,0x4
c0006d5f:	50                   	push   eax
c0006d60:	e8 2b 96 ff ff       	call   c0000390 <memcmp>
c0006d65:	83 c4 10             	add    esp,0x10
c0006d68:	85 c0                	test   eax,eax
c0006d6a:	74 8a                	je     c0006cf6 <init_percd+0x84>
c0006d6c:	bb ff ff ff ff       	mov    ebx,0xffffffff
c0006d71:	eb bf                	jmp    c0006d32 <init_percd+0xc0>
c0006d73:	89 c3                	mov    ebx,eax
c0006d75:	eb bb                	jmp    c0006d32 <init_percd+0xc0>

c0006d77 <iso_ioctl>:
c0006d77:	e8 e6 fe ff ff       	call   c0006c62 <iso_reset>
c0006d7c:	b8 00 00 00 00       	mov    eax,0x0
c0006d81:	c3                   	ret    

c0006d82 <fs_iso9660_init>:
c0006d82:	53                   	push   ebx
c0006d83:	83 ec 0c             	sub    esp,0xc
c0006d86:	68 40 09 00 00       	push   0x940
c0006d8b:	6a 00                	push   0x0
c0006d8d:	68 40 00 02 c0       	push   0xc0020040
c0006d92:	e8 39 97 ff ff       	call   c00004d0 <memset>
c0006d97:	c7 05 40 00 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0020040,0xffffffff
c0006da1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006da8:	e8 e4 0e 00 00       	call   c0007c91 <malloc>
c0006dad:	a3 b0 09 02 c0       	mov    ds:0xc00209b0,eax
c0006db2:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006db9:	e8 d3 0e 00 00       	call   c0007c91 <malloc>
c0006dbe:	a3 20 00 02 c0       	mov    ds:0xc0020020,eax
c0006dc3:	83 c4 10             	add    esp,0x10
c0006dc6:	bb 00 00 00 00       	mov    ebx,0x0
c0006dcb:	83 ec 0c             	sub    esp,0xc
c0006dce:	68 04 08 00 00       	push   0x804
c0006dd3:	e8 b9 0e 00 00       	call   c0007c91 <malloc>
c0006dd8:	89 04 9d 80 fb 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0480],eax
c0006ddf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006de5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006dec:	e8 a0 0e 00 00       	call   c0007c91 <malloc>
c0006df1:	89 04 9d 20 fb 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe04e0],eax
c0006df8:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dfe:	43                   	inc    ebx
c0006dff:	83 c4 10             	add    esp,0x10
c0006e02:	83 fb 10             	cmp    ebx,0x10
c0006e05:	75 c4                	jne    c0006dcb <fs_iso9660_init+0x49>
c0006e07:	b8 00 00 00 00       	mov    eax,0x0
c0006e0c:	83 c4 08             	add    esp,0x8
c0006e0f:	5b                   	pop    ebx
c0006e10:	c3                   	ret    

c0006e11 <fs_iso9660_shutdown>:
c0006e11:	53                   	push   ebx
c0006e12:	83 ec 08             	sub    esp,0x8
c0006e15:	bb 00 00 00 00       	mov    ebx,0x0
c0006e1a:	83 ec 0c             	sub    esp,0xc
c0006e1d:	ff 34 9d 80 fb 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0480]
c0006e24:	e8 78 0e 00 00       	call   c0007ca1 <free>
c0006e29:	83 c4 04             	add    esp,0x4
c0006e2c:	ff 34 9d 20 fb 01 c0 	push   DWORD PTR [ebx*4-0x3ffe04e0]
c0006e33:	e8 69 0e 00 00       	call   c0007ca1 <free>
c0006e38:	43                   	inc    ebx
c0006e39:	83 c4 10             	add    esp,0x10
c0006e3c:	83 fb 10             	cmp    ebx,0x10
c0006e3f:	75 d9                	jne    c0006e1a <fs_iso9660_shutdown+0x9>
c0006e41:	a1 b0 09 02 c0       	mov    eax,ds:0xc00209b0
c0006e46:	85 c0                	test   eax,eax
c0006e48:	74 0c                	je     c0006e56 <fs_iso9660_shutdown+0x45>
c0006e4a:	83 ec 0c             	sub    esp,0xc
c0006e4d:	50                   	push   eax
c0006e4e:	e8 4e 0e 00 00       	call   c0007ca1 <free>
c0006e53:	83 c4 10             	add    esp,0x10
c0006e56:	a1 20 00 02 c0       	mov    eax,ds:0xc0020020
c0006e5b:	85 c0                	test   eax,eax
c0006e5d:	74 0c                	je     c0006e6b <fs_iso9660_shutdown+0x5a>
c0006e5f:	83 ec 0c             	sub    esp,0xc
c0006e62:	50                   	push   eax
c0006e63:	e8 39 0e 00 00       	call   c0007ca1 <free>
c0006e68:	83 c4 10             	add    esp,0x10
c0006e6b:	c7 05 20 00 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020020,0x0
c0006e75:	c7 05 b0 09 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00209b0,0x0
c0006e7f:	b8 00 00 00 00       	mov    eax,0x0
c0006e84:	83 c4 08             	add    esp,0x8
c0006e87:	5b                   	pop    ebx
c0006e88:	c3                   	ret    
c0006e89:	90                   	nop

c0006e8a <Computer::close(int, int, void*)>:
c0006e8a:	57                   	push   edi
c0006e8b:	56                   	push   esi
c0006e8c:	53                   	push   ebx
c0006e8d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006e91:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006e95:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006e99:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006e9f:	83 ec 0c             	sub    esp,0xc
c0006ea2:	50                   	push   eax
c0006ea3:	e8 e2 4f 00 00       	call   c000be8a <Device::closeAll()>
c0006ea8:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006eae:	83 c4 10             	add    esp,0x10
c0006eb1:	8b 10                	mov    edx,DWORD PTR [eax]
c0006eb3:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006eb7:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006ebf:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ec7:	5b                   	pop    ebx
c0006ec8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006ecb:	5e                   	pop    esi
c0006ecc:	5f                   	pop    edi
c0006ecd:	ff e0                	jmp    eax

c0006ecf <Krnl::firstTask()>:
c0006ecf:	53                   	push   ebx
c0006ed0:	83 ec 14             	sub    esp,0x14
c0006ed3:	fb                   	sti    
c0006ed4:	68 71 d5 01 c0       	push   0xc001d571
c0006ed9:	e8 39 90 00 00       	call   c000ff17 <KeSetBootMessage(char const*)>
c0006ede:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0006ee5:	e8 a7 0d 00 00       	call   c0007c91 <malloc>
c0006eea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006ef1:	89 c3                	mov    ebx,eax
c0006ef3:	a1 90 3e 02 c0       	mov    eax,ds:0xc0023e90
c0006ef8:	50                   	push   eax
c0006ef9:	68 8a d5 01 c0       	push   0xc001d58a
c0006efe:	6a 01                	push   0x1
c0006f00:	53                   	push   ebx
c0006f01:	e8 fa c5 00 00       	call   c0013500 <Process::Process(bool, char const*, Process*, char**)>
c0006f06:	83 c4 20             	add    esp,0x20
c0006f09:	68 ff 00 00 00       	push   0xff
c0006f0e:	6a 00                	push   0x0
c0006f10:	68 e5 76 00 c0       	push   0xc00076e5
c0006f15:	53                   	push   ebx
c0006f16:	e8 f1 c7 00 00       	call   c001370c <Process::createThread(void (*)(void*), void*, int)>
c0006f1b:	8b 15 90 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e90
c0006f21:	6a 7a                	push   0x7a
c0006f23:	6a 00                	push   0x0
c0006f25:	68 60 41 01 c0       	push   0xc0014160
c0006f2a:	52                   	push   edx
c0006f2b:	e8 dc c7 00 00       	call   c001370c <Process::createThread(void (*)(void*), void*, int)>
c0006f30:	83 c4 14             	add    esp,0x14
c0006f33:	a3 48 3e 02 c0       	mov    ds:0xc0023e48,eax
c0006f38:	68 88 d6 01 c0       	push   0xc001d688
c0006f3d:	c6 05 bd 09 02 c0 01 	mov    BYTE PTR ds:0xc00209bd,0x1
c0006f44:	e8 ce 8f 00 00       	call   c000ff17 <KeSetBootMessage(char const*)>
c0006f49:	e8 f1 d5 00 00       	call   c001453f <Vm::initialise8086()>
c0006f4e:	e8 7b 3d 00 00       	call   c000acce <Fs::initVFS()>
c0006f53:	c7 04 24 97 d5 01 c0 	mov    DWORD PTR [esp],0xc001d597
c0006f5a:	e8 b8 8f 00 00       	call   c000ff17 <KeSetBootMessage(char const*)>
c0006f5f:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c0006f64:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006f6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f6c:	6a 00                	push   0x0
c0006f6e:	6a 00                	push   0x0
c0006f70:	6a 00                	push   0x0
c0006f72:	50                   	push   eax
c0006f73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006f76:	83 c4 14             	add    esp,0x14
c0006f79:	68 88 d6 01 c0       	push   0xc001d688
c0006f7e:	e8 94 8f 00 00       	call   c000ff17 <KeSetBootMessage(char const*)>
c0006f83:	e8 97 a4 00 00       	call   c001141f <KeLoadSystemCalls()>
c0006f88:	e8 65 94 00 00       	call   c00103f2 <Krnl::loadSystemEnv()>
c0006f8d:	e8 c2 96 00 00       	call   c0010654 <Krnl::setupPowerManager()>
c0006f92:	83 c4 0c             	add    esp,0xc
c0006f95:	6a 3a                	push   0x3a
c0006f97:	68 b1 d5 01 c0       	push   0xc001d5b1
c0006f9c:	68 ba d5 01 c0       	push   0xc001d5ba
c0006fa1:	e8 47 ab 00 00       	call   c0011aed <Reg::readIntWithDefault(char*, char*, int)>
c0006fa6:	89 04 24             	mov    DWORD PTR [esp],eax
c0006fa9:	e8 2e 48 00 00       	call   c000b7dc <User::loadClockSettings(int)>
c0006fae:	c7 04 24 ac d6 01 c0 	mov    DWORD PTR [esp],0xc001d6ac
c0006fb5:	e8 5d 8f 00 00       	call   c000ff17 <KeSetBootMessage(char const*)>
c0006fba:	59                   	pop    ecx
c0006fbb:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c0006fc0:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006fc6:	53                   	push   ebx
c0006fc7:	e8 bc 4e 00 00       	call   c000be88 <Device::loadDriversForAll()>
c0006fcc:	c7 04 24 c2 d5 01 c0 	mov    DWORD PTR [esp],0xc001d5c2
c0006fd3:	e8 3f 8f 00 00       	call   c000ff17 <KeSetBootMessage(char const*)>
c0006fd8:	58                   	pop    eax
c0006fd9:	8b 1d b8 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209b8
c0006fdf:	5a                   	pop    edx
c0006fe0:	6a 01                	push   0x1
c0006fe2:	68 d3 d5 01 c0       	push   0xc001d5d3
c0006fe7:	e8 4d bf 00 00       	call   c0012f39 <Thr::loadDLL(char const*, bool)>
c0006fec:	59                   	pop    ecx
c0006fed:	5a                   	pop    edx
c0006fee:	53                   	push   ebx
c0006fef:	50                   	push   eax
c0006ff0:	e8 75 c1 00 00       	call   c001316a <Thr::executeDLL(unsigned long, void*)>
c0006ff5:	83 c4 10             	add    esp,0x10
c0006ff8:	83 ec 0c             	sub    esp,0xc
c0006ffb:	6a 02                	push   0x2
c0006ffd:	e8 26 cb 00 00       	call   c0013b28 <blockTask(TaskState)>
c0007002:	83 c4 10             	add    esp,0x10
c0007005:	eb f1                	jmp    c0006ff8 <Krnl::firstTask()+0x129>
c0007007:	90                   	nop

c0007008 <Computer::Computer()>:
c0007008:	83 ec 0c             	sub    esp,0xc
c000700b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000700f:	83 ec 08             	sub    esp,0x8
c0007012:	68 ef d5 01 c0       	push   0xc001d5ef
c0007017:	50                   	push   eax
c0007018:	e8 e7 4e 00 00       	call   c000bf04 <Device::Device(char const*)>
c000701d:	83 c4 10             	add    esp,0x10
c0007020:	ba f8 d6 01 c0       	mov    edx,0xc001d6f8
c0007025:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007029:	89 10                	mov    DWORD PTR [eax],edx
c000702b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000702f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0007039:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000703d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0007047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000704b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0007051:	83 ca 04             	or     edx,0x4
c0007054:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000705a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000705e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0007064:	31 d2                	xor    edx,edx
c0007066:	88 c2                	mov    dl,al
c0007068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000706c:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0007073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007077:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000707d:	31 d2                	xor    edx,edx
c000707f:	88 c2                	mov    dl,al
c0007081:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007085:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000708a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000708e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0007094:	8d 50 01             	lea    edx,[eax+0x1]
c0007097:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000709b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00070a1:	31 d2                	xor    edx,edx
c00070a3:	88 c2                	mov    dl,al
c00070a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070a9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00070ad:	83 e1 3f             	and    ecx,0x3f
c00070b0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00070b4:	90                   	nop
c00070b5:	83 c4 0c             	add    esp,0xc
c00070b8:	c3                   	ret    
c00070b9:	90                   	nop

c00070ba <Computer::setBootMessage(char const*)>:
c00070ba:	c3                   	ret    
c00070bb:	90                   	nop

c00070bc <Computer::detectFeatures()>:
c00070bc:	55                   	push   ebp
c00070bd:	57                   	push   edi
c00070be:	56                   	push   esi
c00070bf:	53                   	push   ebx
c00070c0:	83 ec 1c             	sub    esp,0x1c
c00070c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00070c7:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c00070d1:	e8 23 91 ff ff       	call   c00001f9 <detectCPUID>
c00070d6:	85 c0                	test   eax,eax
c00070d8:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070de:	0f 95 c2             	setne  dl
c00070e1:	83 e0 fd             	and    eax,0xfffffffd
c00070e4:	01 d2                	add    edx,edx
c00070e6:	09 d0                	or     eax,edx
c00070e8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070ee:	a8 02                	test   al,0x2
c00070f0:	75 46                	jne    c0007138 <Computer::detectFeatures()+0x7c>
c00070f2:	f6 05 d1 09 02 c0 04 	test   BYTE PTR ds:0xc00209d1,0x4
c00070f9:	74 07                	je     c0007102 <Computer::detectFeatures()+0x46>
c00070fb:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0007102:	e8 cf 4d 01 00       	call   c001bed6 <x87Detect>
c0007107:	83 e0 01             	and    eax,0x1
c000710a:	c1 e0 04             	shl    eax,0x4
c000710d:	88 c2                	mov    dl,al
c000710f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007115:	83 e0 ef             	and    eax,0xffffffef
c0007118:	09 d0                	or     eax,edx
c000711a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007120:	a8 10                	test   al,0x10
c0007122:	0f 85 2a 01 00 00    	jne    c0007252 <Computer::detectFeatures()+0x196>
c0007128:	84 c0                	test   al,al
c000712a:	0f 88 45 01 00 00    	js     c0007275 <Computer::detectFeatures()+0x1b9>
c0007130:	83 c4 1c             	add    esp,0x1c
c0007133:	5b                   	pop    ebx
c0007134:	5e                   	pop    esi
c0007135:	5f                   	pop    edi
c0007136:	5d                   	pop    ebp
c0007137:	c3                   	ret    
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	6a 20                	push   0x20
c000713d:	e8 02 83 00 00       	call   c000f444 <CPU::cpuidCheckEDX(unsigned int)>
c0007142:	83 e0 01             	and    eax,0x1
c0007145:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000714c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007152:	83 e0 f7             	and    eax,0xfffffff7
c0007155:	09 d0                	or     eax,edx
c0007157:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000715d:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0007164:	e8 db 82 00 00       	call   c000f444 <CPU::cpuidCheckEDX(unsigned int)>
c0007169:	83 e0 01             	and    eax,0x1
c000716c:	88 c2                	mov    dl,al
c000716e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007174:	83 e0 fe             	and    eax,0xfffffffe
c0007177:	09 d0                	or     eax,edx
c0007179:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000717f:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0007186:	e8 b9 82 00 00       	call   c000f444 <CPU::cpuidCheckEDX(unsigned int)>
c000718b:	c1 e0 07             	shl    eax,0x7
c000718e:	88 c2                	mov    dl,al
c0007190:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007196:	83 e0 7f             	and    eax,0x7f
c0007199:	09 d0                	or     eax,edx
c000719b:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00071a1:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c00071a8:	e8 97 82 00 00       	call   c000f444 <CPU::cpuidCheckEDX(unsigned int)>
c00071ad:	83 c4 10             	add    esp,0x10
c00071b0:	83 e0 01             	and    eax,0x1
c00071b3:	c1 e0 05             	shl    eax,0x5
c00071b6:	88 c2                	mov    dl,al
c00071b8:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00071be:	83 e0 df             	and    eax,0xffffffdf
c00071c1:	09 d0                	or     eax,edx
c00071c3:	f7 05 d0 09 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00209d0,0x401
c00071cd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00071d3:	0f 84 c2 00 00 00    	je     c000729b <Computer::detectFeatures()+0x1df>
c00071d9:	83 e0 fe             	and    eax,0xfffffffe
c00071dc:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00071e2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00071e8:	88 c2                	mov    dl,al
c00071ea:	83 e2 09             	and    edx,0x9
c00071ed:	fe ca                	dec    dl
c00071ef:	75 09                	jne    c00071fa <Computer::detectFeatures()+0x13e>
c00071f1:	83 e0 fe             	and    eax,0xfffffffe
c00071f4:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00071fa:	83 ec 0c             	sub    esp,0xc
c00071fd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007201:	50                   	push   eax
c0007202:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0007206:	55                   	push   ebp
c0007207:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000720b:	57                   	push   edi
c000720c:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007210:	56                   	push   esi
c0007211:	68 00 00 00 80       	push   0x80000000
c0007216:	e8 a5 81 00 00       	call   c000f3c0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000721b:	83 c4 20             	add    esp,0x20
c000721e:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007225:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0007229:	0f 86 c3 fe ff ff    	jbe    c00070f2 <Computer::detectFeatures()+0x36>
c000722f:	83 ec 0c             	sub    esp,0xc
c0007232:	50                   	push   eax
c0007233:	55                   	push   ebp
c0007234:	57                   	push   edi
c0007235:	56                   	push   esi
c0007236:	68 01 00 00 80       	push   0x80000001
c000723b:	e8 80 81 00 00       	call   c000f3c0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007240:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c000724a:	83 c4 20             	add    esp,0x20
c000724d:	e9 a0 fe ff ff       	jmp    c00070f2 <Computer::detectFeatures()+0x36>
c0007252:	e8 39 4c 01 00       	call   c001be90 <absolutelyNoChanceInHell>
c0007257:	88 c2                	mov    dl,al
c0007259:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c000725f:	c1 e2 07             	shl    edx,0x7
c0007262:	83 e0 7f             	and    eax,0x7f
c0007265:	09 d0                	or     eax,edx
c0007267:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000726d:	84 c0                	test   al,al
c000726f:	0f 89 bb fe ff ff    	jns    c0007130 <Computer::detectFeatures()+0x74>
c0007275:	e8 96 49 01 00       	call   c001bc10 <avxDetect>
c000727a:	83 e0 01             	and    eax,0x1
c000727d:	c1 e0 05             	shl    eax,0x5
c0007280:	88 c2                	mov    dl,al
c0007282:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007288:	83 e0 df             	and    eax,0xffffffdf
c000728b:	09 d0                	or     eax,edx
c000728d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007293:	83 c4 1c             	add    esp,0x1c
c0007296:	5b                   	pop    ebx
c0007297:	5e                   	pop    esi
c0007298:	5f                   	pop    edi
c0007299:	5d                   	pop    ebp
c000729a:	c3                   	ret    
c000729b:	83 ec 0c             	sub    esp,0xc
c000729e:	68 00 02 00 00       	push   0x200
c00072a3:	e8 9c 81 00 00       	call   c000f444 <CPU::cpuidCheckEDX(unsigned int)>
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	83 e0 01             	and    eax,0x1
c00072ae:	88 c2                	mov    dl,al
c00072b0:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00072b6:	83 e0 fe             	and    eax,0xfffffffe
c00072b9:	09 d0                	or     eax,edx
c00072bb:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00072c1:	e9 1c ff ff ff       	jmp    c00071e2 <Computer::detectFeatures()+0x126>

c00072c6 <Computer::displayFeatures()>:
c00072c6:	c3                   	ret    
c00072c7:	90                   	nop

c00072c8 <Computer::rdmsr(unsigned int)>:
c00072c8:	83 ec 0c             	sub    esp,0xc
c00072cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072cf:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00072d6:	74 0a                	je     c00072e2 <Computer::rdmsr(unsigned int)+0x1a>
c00072d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00072dc:	0f 32                	rdmsr  
c00072de:	83 c4 0c             	add    esp,0xc
c00072e1:	c3                   	ret    
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	68 f8 d5 01 c0       	push   0xc001d5f8
c00072ea:	e8 a0 92 00 00       	call   c001058f <KePanic(char const*)>
c00072ef:	83 c4 10             	add    esp,0x10
c00072f2:	eb e4                	jmp    c00072d8 <Computer::rdmsr(unsigned int)+0x10>

c00072f4 <Computer::wrmsr(unsigned int, unsigned long long)>:
c00072f4:	57                   	push   edi
c00072f5:	56                   	push   esi
c00072f6:	52                   	push   edx
c00072f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072fb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00072ff:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0007303:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000730a:	74 0e                	je     c000731a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000730c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007310:	89 f0                	mov    eax,esi
c0007312:	89 fa                	mov    edx,edi
c0007314:	0f 30                	wrmsr  
c0007316:	58                   	pop    eax
c0007317:	5e                   	pop    esi
c0007318:	5f                   	pop    edi
c0007319:	c3                   	ret    
c000731a:	83 ec 0c             	sub    esp,0xc
c000731d:	68 fe d5 01 c0       	push   0xc001d5fe
c0007322:	e8 68 92 00 00       	call   c001058f <KePanic(char const*)>
c0007327:	83 c4 10             	add    esp,0x10
c000732a:	eb e0                	jmp    c000730c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000732c <Computer::shutdown()>:
c000732c:	83 ec 0c             	sub    esp,0xc
c000732f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007333:	8b 10                	mov    edx,DWORD PTR [eax]
c0007335:	6a 00                	push   0x0
c0007337:	6a 00                	push   0x0
c0007339:	6a 00                	push   0x0
c000733b:	50                   	push   eax
c000733c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000733f:	83 c4 1c             	add    esp,0x1c
c0007342:	c3                   	ret    
c0007343:	90                   	nop

c0007344 <Computer::restart()>:
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000734b:	8b 10                	mov    edx,DWORD PTR [eax]
c000734d:	6a 00                	push   0x0
c000734f:	6a 00                	push   0x0
c0007351:	6a 01                	push   0x1
c0007353:	50                   	push   eax
c0007354:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007357:	83 c4 1c             	add    esp,0x1c
c000735a:	c3                   	ret    
c000735b:	90                   	nop

c000735c <Computer::sleep()>:
c000735c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007360:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007366:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000736a:	e9 4d 7b 00 00       	jmp    c000eebc <ACPI::sleep()>
c000736f:	90                   	nop

c0007370 <Computer::nmiEnabled()>:
c0007370:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007374:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000737a:	c3                   	ret    
c000737b:	90                   	nop

c000737c <Computer::readCMOS(unsigned char)>:
c000737c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007380:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0007387:	19 c0                	sbb    eax,eax
c0007389:	83 e0 80             	and    eax,0xffffff80
c000738c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0007390:	e6 70                	out    0x70,al
c0007392:	e4 71                	in     al,0x71
c0007394:	c3                   	ret    
c0007395:	90                   	nop

c0007396 <Computer::enableNMI(bool)>:
c0007396:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000739a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000739e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00073a4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00073ac:	eb ce                	jmp    c000737c <Computer::readCMOS(unsigned char)>

c00073ae <Computer::open(int, int, void*)>:
c00073ae:	56                   	push   esi
c00073af:	53                   	push   ebx
c00073b0:	83 ec 10             	sub    esp,0x10
c00073b3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00073b7:	f6 05 d0 09 02 c0 04 	test   BYTE PTR ds:0xc00209d0,0x4
c00073be:	68 04 d6 01 c0       	push   0xc001d604
c00073c3:	0f 94 05 40 f7 01 c0 	sete   BYTE PTR ds:0xc001f740
c00073ca:	e8 48 8b 00 00       	call   c000ff17 <KeSetBootMessage(char const*)>
c00073cf:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00073d6:	e8 b6 08 00 00       	call   c0007c91 <malloc>
c00073db:	89 04 24             	mov    DWORD PTR [esp],eax
c00073de:	89 c6                	mov    esi,eax
c00073e0:	e8 6f 76 00 00       	call   c000ea54 <ACPI::ACPI()>
c00073e5:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00073eb:	58                   	pop    eax
c00073ec:	5a                   	pop    edx
c00073ed:	56                   	push   esi
c00073ee:	53                   	push   ebx
c00073ef:	e8 78 49 00 00       	call   c000bd6c <Device::addChild(Device*)>
c00073f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00073f7:	e8 c0 fc ff ff       	call   c00070bc <Computer::detectFeatures()>
c00073fc:	59                   	pop    ecx
c00073fd:	5e                   	pop    esi
c00073fe:	6a 01                	push   0x1
c0007400:	53                   	push   ebx
c0007401:	e8 90 ff ff ff       	call   c0007396 <Computer::enableNMI(bool)>
c0007406:	c7 04 24 1c d6 01 c0 	mov    DWORD PTR [esp],0xc001d61c
c000740d:	e8 05 8b 00 00       	call   c000ff17 <KeSetBootMessage(char const*)>
c0007412:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007419:	e8 73 08 00 00       	call   c0007c91 <malloc>
c000741e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007421:	89 c6                	mov    esi,eax
c0007423:	e8 d4 80 00 00       	call   c000f4fc <CPU::CPU()>
c0007428:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000742e:	58                   	pop    eax
c000742f:	5a                   	pop    edx
c0007430:	56                   	push   esi
c0007431:	53                   	push   ebx
c0007432:	e8 35 49 00 00       	call   c000bd6c <Device::addChild(Device*)>
c0007437:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000743d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007441:	8b 10                	mov    edx,DWORD PTR [eax]
c0007443:	51                   	push   ecx
c0007444:	6a 00                	push   0x0
c0007446:	6a 00                	push   0x0
c0007448:	50                   	push   eax
c0007449:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000744c:	83 c4 14             	add    esp,0x14
c000744f:	68 cc d6 01 c0       	push   0xc001d6cc
c0007454:	e8 be 8a 00 00       	call   c000ff17 <KeSetBootMessage(char const*)>
c0007459:	e8 18 e2 00 00       	call   c0015676 <HalInitialiseCoprocessor()>
c000745e:	c7 04 24 36 d6 01 c0 	mov    DWORD PTR [esp],0xc001d636
c0007465:	e8 ad 8a 00 00       	call   c000ff17 <KeSetBootMessage(char const*)>
c000746a:	c7 04 24 cf 6e 00 c0 	mov    DWORD PTR [esp],0xc0006ecf
c0007471:	e8 ae c3 00 00       	call   c0013824 <setupMultitasking(void (*)())>
c0007476:	83 c4 14             	add    esp,0x14
c0007479:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000747e:	5b                   	pop    ebx
c000747f:	5e                   	pop    esi
c0007480:	c3                   	ret    
c0007481:	90                   	nop

c0007482 <Computer::disableNMI()>:
c0007482:	6a 00                	push   0x0
c0007484:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007488:	50                   	push   eax
c0007489:	e8 08 ff ff ff       	call   c0007396 <Computer::enableNMI(bool)>
c000748e:	5a                   	pop    edx
c000748f:	59                   	pop    ecx
c0007490:	c3                   	ret    
c0007491:	90                   	nop

c0007492 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007492:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007496:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000749d:	19 c0                	sbb    eax,eax
c000749f:	83 e0 80             	and    eax,0xffffff80
c00074a2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00074a6:	e6 70                	out    0x70,al
c00074a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00074ac:	e6 71                	out    0x71,al
c00074ae:	c3                   	ret    
c00074af:	90                   	nop

c00074b0 <Computer::handleNMI()>:
c00074b0:	56                   	push   esi
c00074b1:	53                   	push   ebx
c00074b2:	83 ec 10             	sub    esp,0x10
c00074b5:	e4 92                	in     al,0x92
c00074b7:	89 c6                	mov    esi,eax
c00074b9:	e4 61                	in     al,0x61
c00074bb:	68 51 d6 01 c0       	push   0xc001d651
c00074c0:	88 c3                	mov    bl,al
c00074c2:	e8 65 34 00 00       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c00074c7:	83 c4 10             	add    esp,0x10
c00074ca:	83 e6 10             	and    esi,0x10
c00074cd:	75 0d                	jne    c00074dc <Computer::handleNMI()+0x2c>
c00074cf:	f6 c3 40             	test   bl,0x40
c00074d2:	75 1d                	jne    c00074f1 <Computer::handleNMI()+0x41>
c00074d4:	84 db                	test   bl,bl
c00074d6:	78 2d                	js     c0007505 <Computer::handleNMI()+0x55>
c00074d8:	58                   	pop    eax
c00074d9:	5b                   	pop    ebx
c00074da:	5e                   	pop    esi
c00074db:	c3                   	ret    
c00074dc:	83 ec 0c             	sub    esp,0xc
c00074df:	68 62 d6 01 c0       	push   0xc001d662
c00074e4:	e8 a6 90 00 00       	call   c001058f <KePanic(char const*)>
c00074e9:	83 c4 10             	add    esp,0x10
c00074ec:	f6 c3 40             	test   bl,0x40
c00074ef:	74 e3                	je     c00074d4 <Computer::handleNMI()+0x24>
c00074f1:	83 ec 0c             	sub    esp,0xc
c00074f4:	68 6f d6 01 c0       	push   0xc001d66f
c00074f9:	e8 91 90 00 00       	call   c001058f <KePanic(char const*)>
c00074fe:	83 c4 10             	add    esp,0x10
c0007501:	84 db                	test   bl,bl
c0007503:	79 d3                	jns    c00074d8 <Computer::handleNMI()+0x28>
c0007505:	c7 44 24 10 79 d6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d679
c000750d:	5a                   	pop    edx
c000750e:	5b                   	pop    ebx
c000750f:	5e                   	pop    esi
c0007510:	e9 7a 90 00 00       	jmp    c001058f <KePanic(char const*)>
c0007515:	90                   	nop

c0007516 <GDTEntry::setBase(unsigned int)>:
c0007516:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000751a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000751e:	89 c1                	mov    ecx,eax
c0007520:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007524:	c1 e9 10             	shr    ecx,0x10
c0007527:	c1 e8 18             	shr    eax,0x18
c000752a:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000752d:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007530:	c3                   	ret    
c0007531:	90                   	nop

c0007532 <GDTEntry::setLimit(unsigned int)>:
c0007532:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007536:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000753a:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000753d:	66 89 01             	mov    WORD PTR [ecx],ax
c0007540:	83 e2 f0             	and    edx,0xfffffff0
c0007543:	c1 e8 10             	shr    eax,0x10
c0007546:	83 e0 0f             	and    eax,0xf
c0007549:	09 d0                	or     eax,edx
c000754b:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000754e:	c3                   	ret    
c000754f:	90                   	nop

c0007550 <GDT::GDT()>:
c0007550:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007554:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000755a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000755e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007564:	90                   	nop
c0007565:	c3                   	ret    

c0007566 <GDT::addEntry(GDTEntry)>:
c0007566:	53                   	push   ebx
c0007567:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000756b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000756f:	8b 02                	mov    eax,DWORD PTR [edx]
c0007571:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007575:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007579:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000757d:	8d 48 01             	lea    ecx,[eax+0x1]
c0007580:	c1 e0 03             	shl    eax,0x3
c0007583:	89 0a                	mov    DWORD PTR [edx],ecx
c0007585:	5b                   	pop    ebx
c0007586:	c3                   	ret    
c0007587:	90                   	nop

c0007588 <GDT::getNumberOfEntries()>:
c0007588:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000758c:	8b 00                	mov    eax,DWORD PTR [eax]
c000758e:	c3                   	ret    
c000758f:	90                   	nop

c0007590 <GDT::flush()>:
c0007590:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007594:	8b 10                	mov    edx,DWORD PTR [eax]
c0007596:	83 c0 04             	add    eax,0x4
c0007599:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00075a0:	a3 c2 09 02 c0       	mov    ds:0xc00209c2,eax
c00075a5:	66 89 15 c0 09 02 c0 	mov    WORD PTR ds:0xc00209c0,dx
c00075ac:	e9 ac 8d ff ff       	jmp    c000035d <loadGDT>
c00075b1:	90                   	nop

c00075b2 <GDT::setup()>:
c00075b2:	57                   	push   edi
c00075b3:	56                   	push   esi
c00075b4:	53                   	push   ebx
c00075b5:	83 ec 30             	sub    esp,0x30
c00075b8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00075bc:	6a 00                	push   0x0
c00075be:	8d 74 24 14          	lea    esi,[esp+0x14]
c00075c2:	56                   	push   esi
c00075c3:	e8 4e ff ff ff       	call   c0007516 <GDTEntry::setBase(unsigned int)>
c00075c8:	6a 00                	push   0x0
c00075ca:	56                   	push   esi
c00075cb:	e8 62 ff ff ff       	call   c0007532 <GDTEntry::setLimit(unsigned int)>
c00075d0:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00075d8:	6a 00                	push   0x0
c00075da:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00075de:	56                   	push   esi
c00075df:	e8 32 ff ff ff       	call   c0007516 <GDTEntry::setBase(unsigned int)>
c00075e4:	68 ff ff ff 00       	push   0xffffff
c00075e9:	56                   	push   esi
c00075ea:	e8 43 ff ff ff       	call   c0007532 <GDTEntry::setLimit(unsigned int)>
c00075ef:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00075f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00075f7:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00075fb:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00075ff:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007604:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007609:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000760d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0007611:	89 f8                	mov    eax,edi
c0007613:	89 fa                	mov    edx,edi
c0007615:	80 e4 f7             	and    ah,0xf7
c0007618:	80 ce 60             	or     dh,0x60
c000761b:	89 c7                	mov    edi,eax
c000761d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007621:	80 cc 60             	or     ah,0x60
c0007624:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007628:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000762c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007630:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007634:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007638:	83 c4 20             	add    esp,0x20
c000763b:	6a 00                	push   0x0
c000763d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007641:	50                   	push   eax
c0007642:	e8 cf fe ff ff       	call   c0007516 <GDTEntry::setBase(unsigned int)>
c0007647:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000764b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000764f:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c0007654:	6a 00                	push   0x0
c0007656:	8d 44 24 34          	lea    eax,[esp+0x34]
c000765a:	50                   	push   eax
c000765b:	e8 b6 fe ff ff       	call   c0007516 <GDTEntry::setBase(unsigned int)>
c0007660:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c0007665:	83 c4 0c             	add    esp,0xc
c0007668:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000766c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007670:	53                   	push   ebx
c0007671:	e8 f0 fe ff ff       	call   c0007566 <GDT::addEntry(GDTEntry)>
c0007676:	83 c4 0c             	add    esp,0xc
c0007679:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000767d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007681:	53                   	push   ebx
c0007682:	e8 df fe ff ff       	call   c0007566 <GDT::addEntry(GDTEntry)>
c0007687:	83 c4 0c             	add    esp,0xc
c000768a:	57                   	push   edi
c000768b:	56                   	push   esi
c000768c:	53                   	push   ebx
c000768d:	e8 d4 fe ff ff       	call   c0007566 <GDT::addEntry(GDTEntry)>
c0007692:	83 c4 0c             	add    esp,0xc
c0007695:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007699:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000769d:	53                   	push   ebx
c000769e:	e8 c3 fe ff ff       	call   c0007566 <GDT::addEntry(GDTEntry)>
c00076a3:	83 c4 0c             	add    esp,0xc
c00076a6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00076aa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00076ae:	53                   	push   ebx
c00076af:	e8 b2 fe ff ff       	call   c0007566 <GDT::addEntry(GDTEntry)>
c00076b4:	83 c4 0c             	add    esp,0xc
c00076b7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00076bb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00076bf:	53                   	push   ebx
c00076c0:	e8 a1 fe ff ff       	call   c0007566 <GDT::addEntry(GDTEntry)>
c00076c5:	83 c4 0c             	add    esp,0xc
c00076c8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00076cc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00076d0:	53                   	push   ebx
c00076d1:	e8 90 fe ff ff       	call   c0007566 <GDT::addEntry(GDTEntry)>
c00076d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00076d9:	e8 b2 fe ff ff       	call   c0007590 <GDT::flush()>
c00076de:	83 c4 40             	add    esp,0x40
c00076e1:	5b                   	pop    ebx
c00076e2:	5e                   	pop    esi
c00076e3:	5f                   	pop    edi
c00076e4:	c3                   	ret    

c00076e5 <idleFunction(void*)>:
c00076e5:	83 ec 0c             	sub    esp,0xc
c00076e8:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c00076ed:	48                   	dec    eax
c00076ee:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c00076f3:	75 01                	jne    c00076f6 <idleFunction(void*)+0x11>
c00076f5:	fb                   	sti    
c00076f6:	e8 55 dc 00 00       	call   c0015350 <HalSystemIdle()>
c00076fb:	e8 92 4d 01 00       	call   c001c492 <idleCommon()>
c0007700:	eb f4                	jmp    c00076f6 <idleFunction(void*)+0x11>
c0007702:	66 90                	xchg   ax,ax

c0007704 <IDTEntry::IDTEntry(bool)>:
c0007704:	83 ec 04             	sub    esp,0x4
c0007707:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000770b:	88 04 24             	mov    BYTE PTR [esp],al
c000770e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007712:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007718:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000771c:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007720:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007724:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007727:	83 e2 f0             	and    edx,0xfffffff0
c000772a:	83 ca 0e             	or     edx,0xe
c000772d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007730:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007734:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007737:	83 e2 ef             	and    edx,0xffffffef
c000773a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000773d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007741:	74 05                	je     c0007748 <IDTEntry::IDTEntry(bool)+0x44>
c0007743:	b2 03                	mov    dl,0x3
c0007745:	eb 05                	jmp    c000774c <IDTEntry::IDTEntry(bool)+0x48>
c0007747:	90                   	nop
c0007748:	b2 00                	mov    dl,0x0
c000774a:	66 90                	xchg   ax,ax
c000774c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007750:	83 e2 03             	and    edx,0x3
c0007753:	88 d1                	mov    cl,dl
c0007755:	c1 e1 05             	shl    ecx,0x5
c0007758:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000775b:	83 e2 9f             	and    edx,0xffffff9f
c000775e:	09 ca                	or     edx,ecx
c0007760:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007763:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007767:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000776a:	83 ca 80             	or     edx,0xffffff80
c000776d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007770:	90                   	nop
c0007771:	83 c4 04             	add    esp,0x4
c0007774:	c3                   	ret    
c0007775:	90                   	nop

c0007776 <IDTEntry::setOffset(unsigned int)>:
c0007776:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000777a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000777e:	66 89 02             	mov    WORD PTR [edx],ax
c0007781:	c1 e8 10             	shr    eax,0x10
c0007784:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0007788:	c3                   	ret    
c0007789:	90                   	nop
c000778a:	66 90                	xchg   ax,ax

c000778c <IDT::IDT()>:
c000778c:	90                   	nop
c000778d:	c3                   	ret    

c000778e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000778e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007792:	83 c0 30             	add    eax,0x30
c0007795:	c3                   	ret    

c0007796 <IDT::addEntry(IDTEntry, int)>:
c0007796:	53                   	push   ebx
c0007797:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000779b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000779f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00077a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00077a7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00077aa:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00077ae:	5b                   	pop    ebx
c00077af:	c3                   	ret    

c00077b0 <IDT::addEntry(int, void (*)(), bool)>:
c00077b0:	53                   	push   ebx
c00077b1:	83 ec 10             	sub    esp,0x10
c00077b4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00077b9:	50                   	push   eax
c00077ba:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00077be:	53                   	push   ebx
c00077bf:	e8 40 ff ff ff       	call   c0007704 <IDTEntry::IDTEntry(bool)>
c00077c4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077c8:	53                   	push   ebx
c00077c9:	e8 a8 ff ff ff       	call   c0007776 <IDTEntry::setOffset(unsigned int)>
c00077ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00077d2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00077d6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00077da:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00077de:	e8 b3 ff ff ff       	call   c0007796 <IDT::addEntry(IDTEntry, int)>
c00077e3:	83 c4 30             	add    esp,0x30
c00077e6:	5b                   	pop    ebx
c00077e7:	c3                   	ret    

c00077e8 <IDT::flush()>:
c00077e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00077ec:	66 c7 05 c8 09 02 c0 ff 07 	mov    WORD PTR ds:0xc00209c8,0x7ff
c00077f5:	a3 ca 09 02 c0       	mov    ds:0xc00209ca,eax
c00077fa:	0f 01 1d c8 09 02 c0 	lidtd  ds:0xc00209c8
c0007801:	c3                   	ret    

c0007802 <IDT::setup()>:
c0007802:	57                   	push   edi
c0007803:	56                   	push   esi
c0007804:	53                   	push   ebx
c0007805:	83 ec 10             	sub    esp,0x10
c0007808:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000780c:	6a 00                	push   0x0
c000780e:	68 a0 bc 01 c0       	push   0xc001bca0
c0007813:	6a 00                	push   0x0
c0007815:	53                   	push   ebx
c0007816:	e8 95 ff ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c000781b:	6a 00                	push   0x0
c000781d:	68 b0 bc 01 c0       	push   0xc001bcb0
c0007822:	6a 01                	push   0x1
c0007824:	53                   	push   ebx
c0007825:	e8 86 ff ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c000782a:	83 c4 20             	add    esp,0x20
c000782d:	6a 00                	push   0x0
c000782f:	68 ba bc 01 c0       	push   0xc001bcba
c0007834:	6a 02                	push   0x2
c0007836:	53                   	push   ebx
c0007837:	e8 74 ff ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c000783c:	6a 00                	push   0x0
c000783e:	68 c4 bc 01 c0       	push   0xc001bcc4
c0007843:	6a 03                	push   0x3
c0007845:	53                   	push   ebx
c0007846:	e8 65 ff ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c000784b:	83 c4 20             	add    esp,0x20
c000784e:	6a 00                	push   0x0
c0007850:	68 ce bc 01 c0       	push   0xc001bcce
c0007855:	6a 04                	push   0x4
c0007857:	53                   	push   ebx
c0007858:	e8 53 ff ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c000785d:	6a 00                	push   0x0
c000785f:	68 d8 bc 01 c0       	push   0xc001bcd8
c0007864:	6a 05                	push   0x5
c0007866:	53                   	push   ebx
c0007867:	e8 44 ff ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c000786c:	83 c4 20             	add    esp,0x20
c000786f:	6a 00                	push   0x0
c0007871:	68 e2 bc 01 c0       	push   0xc001bce2
c0007876:	6a 06                	push   0x6
c0007878:	53                   	push   ebx
c0007879:	e8 32 ff ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c000787e:	6a 00                	push   0x0
c0007880:	68 ec bc 01 c0       	push   0xc001bcec
c0007885:	6a 07                	push   0x7
c0007887:	53                   	push   ebx
c0007888:	e8 23 ff ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c000788d:	83 c4 20             	add    esp,0x20
c0007890:	6a 00                	push   0x0
c0007892:	68 f6 bc 01 c0       	push   0xc001bcf6
c0007897:	6a 08                	push   0x8
c0007899:	53                   	push   ebx
c000789a:	e8 11 ff ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c000789f:	6a 00                	push   0x0
c00078a1:	68 fe bc 01 c0       	push   0xc001bcfe
c00078a6:	6a 09                	push   0x9
c00078a8:	53                   	push   ebx
c00078a9:	e8 02 ff ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c00078ae:	83 c4 20             	add    esp,0x20
c00078b1:	6a 00                	push   0x0
c00078b3:	68 08 bd 01 c0       	push   0xc001bd08
c00078b8:	6a 0a                	push   0xa
c00078ba:	53                   	push   ebx
c00078bb:	e8 f0 fe ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c00078c0:	6a 00                	push   0x0
c00078c2:	68 10 bd 01 c0       	push   0xc001bd10
c00078c7:	6a 0b                	push   0xb
c00078c9:	53                   	push   ebx
c00078ca:	e8 e1 fe ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c00078cf:	83 c4 20             	add    esp,0x20
c00078d2:	6a 00                	push   0x0
c00078d4:	68 18 bd 01 c0       	push   0xc001bd18
c00078d9:	6a 0c                	push   0xc
c00078db:	53                   	push   ebx
c00078dc:	e8 cf fe ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c00078e1:	6a 00                	push   0x0
c00078e3:	68 20 bd 01 c0       	push   0xc001bd20
c00078e8:	6a 0d                	push   0xd
c00078ea:	53                   	push   ebx
c00078eb:	e8 c0 fe ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c00078f0:	83 c4 20             	add    esp,0x20
c00078f3:	6a 00                	push   0x0
c00078f5:	68 28 bd 01 c0       	push   0xc001bd28
c00078fa:	6a 0e                	push   0xe
c00078fc:	53                   	push   ebx
c00078fd:	e8 ae fe ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c0007902:	6a 00                	push   0x0
c0007904:	68 30 bd 01 c0       	push   0xc001bd30
c0007909:	6a 0f                	push   0xf
c000790b:	53                   	push   ebx
c000790c:	e8 9f fe ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c0007911:	83 c4 20             	add    esp,0x20
c0007914:	6a 00                	push   0x0
c0007916:	68 3a bd 01 c0       	push   0xc001bd3a
c000791b:	6a 10                	push   0x10
c000791d:	53                   	push   ebx
c000791e:	e8 8d fe ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c0007923:	6a 00                	push   0x0
c0007925:	68 44 bd 01 c0       	push   0xc001bd44
c000792a:	6a 11                	push   0x11
c000792c:	53                   	push   ebx
c000792d:	e8 7e fe ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c0007932:	83 c4 20             	add    esp,0x20
c0007935:	6a 00                	push   0x0
c0007937:	68 4e bd 01 c0       	push   0xc001bd4e
c000793c:	6a 12                	push   0x12
c000793e:	53                   	push   ebx
c000793f:	e8 6c fe ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c0007944:	6a 01                	push   0x1
c0007946:	68 e8 bd 01 c0       	push   0xc001bde8
c000794b:	6a 60                	push   0x60
c000794d:	53                   	push   ebx
c000794e:	e8 5d fe ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c0007953:	83 c4 20             	add    esp,0x20
c0007956:	6a 00                	push   0x0
c0007958:	68 ef bd 01 c0       	push   0xc001bdef
c000795d:	6a 20                	push   0x20
c000795f:	53                   	push   ebx
c0007960:	e8 4b fe ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c0007965:	6a 00                	push   0x0
c0007967:	68 da bd 01 c0       	push   0xc001bdda
c000796c:	6a 21                	push   0x21
c000796e:	53                   	push   ebx
c000796f:	e8 3c fe ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c0007974:	83 c4 20             	add    esp,0x20
c0007977:	6a 00                	push   0x0
c0007979:	68 e1 bd 01 c0       	push   0xc001bde1
c000797e:	6a 22                	push   0x22
c0007980:	53                   	push   ebx
c0007981:	e8 2a fe ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c0007986:	6a 00                	push   0x0
c0007988:	68 58 bd 01 c0       	push   0xc001bd58
c000798d:	6a 23                	push   0x23
c000798f:	53                   	push   ebx
c0007990:	e8 1b fe ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c0007995:	83 c4 20             	add    esp,0x20
c0007998:	6a 00                	push   0x0
c000799a:	68 62 bd 01 c0       	push   0xc001bd62
c000799f:	6a 24                	push   0x24
c00079a1:	53                   	push   ebx
c00079a2:	e8 09 fe ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c00079a7:	6a 00                	push   0x0
c00079a9:	68 6c bd 01 c0       	push   0xc001bd6c
c00079ae:	6a 25                	push   0x25
c00079b0:	53                   	push   ebx
c00079b1:	e8 fa fd ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c00079b6:	83 c4 20             	add    esp,0x20
c00079b9:	6a 00                	push   0x0
c00079bb:	68 76 bd 01 c0       	push   0xc001bd76
c00079c0:	6a 26                	push   0x26
c00079c2:	53                   	push   ebx
c00079c3:	e8 e8 fd ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c00079c8:	6a 00                	push   0x0
c00079ca:	68 80 bd 01 c0       	push   0xc001bd80
c00079cf:	6a 27                	push   0x27
c00079d1:	53                   	push   ebx
c00079d2:	e8 d9 fd ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c00079d7:	83 c4 20             	add    esp,0x20
c00079da:	6a 00                	push   0x0
c00079dc:	68 8a bd 01 c0       	push   0xc001bd8a
c00079e1:	6a 28                	push   0x28
c00079e3:	53                   	push   ebx
c00079e4:	e8 c7 fd ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c00079e9:	6a 00                	push   0x0
c00079eb:	68 94 bd 01 c0       	push   0xc001bd94
c00079f0:	6a 29                	push   0x29
c00079f2:	53                   	push   ebx
c00079f3:	e8 b8 fd ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c00079f8:	83 c4 20             	add    esp,0x20
c00079fb:	6a 00                	push   0x0
c00079fd:	68 9e bd 01 c0       	push   0xc001bd9e
c0007a02:	6a 2a                	push   0x2a
c0007a04:	53                   	push   ebx
c0007a05:	e8 a6 fd ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c0007a0a:	6a 00                	push   0x0
c0007a0c:	68 a8 bd 01 c0       	push   0xc001bda8
c0007a11:	6a 2b                	push   0x2b
c0007a13:	53                   	push   ebx
c0007a14:	e8 97 fd ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c0007a19:	83 c4 20             	add    esp,0x20
c0007a1c:	6a 00                	push   0x0
c0007a1e:	68 b2 bd 01 c0       	push   0xc001bdb2
c0007a23:	6a 2c                	push   0x2c
c0007a25:	53                   	push   ebx
c0007a26:	e8 85 fd ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c0007a2b:	6a 00                	push   0x0
c0007a2d:	68 bc bd 01 c0       	push   0xc001bdbc
c0007a32:	6a 2d                	push   0x2d
c0007a34:	53                   	push   ebx
c0007a35:	e8 76 fd ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c0007a3a:	83 c4 20             	add    esp,0x20
c0007a3d:	6a 00                	push   0x0
c0007a3f:	68 c6 bd 01 c0       	push   0xc001bdc6
c0007a44:	6a 2e                	push   0x2e
c0007a46:	53                   	push   ebx
c0007a47:	e8 64 fd ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c0007a4c:	6a 00                	push   0x0
c0007a4e:	68 d0 bd 01 c0       	push   0xc001bdd0
c0007a53:	6a 2f                	push   0x2f
c0007a55:	53                   	push   ebx
c0007a56:	e8 55 fd ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c0007a5b:	83 c4 20             	add    esp,0x20
c0007a5e:	6a 00                	push   0x0
c0007a60:	68 26 be 01 c0       	push   0xc001be26
c0007a65:	6a 30                	push   0x30
c0007a67:	53                   	push   ebx
c0007a68:	e8 43 fd ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c0007a6d:	6a 00                	push   0x0
c0007a6f:	68 30 be 01 c0       	push   0xc001be30
c0007a74:	6a 31                	push   0x31
c0007a76:	53                   	push   ebx
c0007a77:	e8 34 fd ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c0007a7c:	83 c4 20             	add    esp,0x20
c0007a7f:	6a 00                	push   0x0
c0007a81:	68 3a be 01 c0       	push   0xc001be3a
c0007a86:	6a 32                	push   0x32
c0007a88:	53                   	push   ebx
c0007a89:	e8 22 fd ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c0007a8e:	6a 00                	push   0x0
c0007a90:	68 44 be 01 c0       	push   0xc001be44
c0007a95:	6a 33                	push   0x33
c0007a97:	53                   	push   ebx
c0007a98:	e8 13 fd ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c0007a9d:	83 c4 20             	add    esp,0x20
c0007aa0:	6a 00                	push   0x0
c0007aa2:	68 4e be 01 c0       	push   0xc001be4e
c0007aa7:	6a 34                	push   0x34
c0007aa9:	53                   	push   ebx
c0007aaa:	e8 01 fd ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c0007aaf:	6a 00                	push   0x0
c0007ab1:	68 58 be 01 c0       	push   0xc001be58
c0007ab6:	6a 35                	push   0x35
c0007ab8:	53                   	push   ebx
c0007ab9:	e8 f2 fc ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c0007abe:	83 c4 20             	add    esp,0x20
c0007ac1:	6a 00                	push   0x0
c0007ac3:	68 62 be 01 c0       	push   0xc001be62
c0007ac8:	6a 36                	push   0x36
c0007aca:	53                   	push   ebx
c0007acb:	e8 e0 fc ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c0007ad0:	6a 00                	push   0x0
c0007ad2:	68 6c be 01 c0       	push   0xc001be6c
c0007ad7:	6a 37                	push   0x37
c0007ad9:	53                   	push   ebx
c0007ada:	e8 d1 fc ff ff       	call   c00077b0 <IDT::addEntry(int, void (*)(), bool)>
c0007adf:	83 c4 1c             	add    esp,0x1c
c0007ae2:	6a 03                	push   0x3
c0007ae4:	6a 02                	push   0x2
c0007ae6:	ff 35 b0 0a 02 c0    	push   DWORD PTR ds:0xc0020ab0
c0007aec:	e8 81 23 00 00       	call   c0009e72 <VAS::allocatePages(int, int)>
c0007af1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007af8:	89 c6                	mov    esi,eax
c0007afa:	e8 92 01 00 00       	call   c0007c91 <malloc>
c0007aff:	81 c6 00 20 00 00    	add    esi,0x2000
c0007b05:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b08:	89 c7                	mov    edi,eax
c0007b0a:	e8 0d 15 00 00       	call   c000901c <TSS::TSS()>
c0007b0f:	83 c4 0c             	add    esp,0xc
c0007b12:	68 f6 bc 01 c0       	push   0xc001bcf6
c0007b17:	56                   	push   esi
c0007b18:	57                   	push   edi
c0007b19:	e8 42 15 00 00       	call   c0009060 <TSS::setup(unsigned long, unsigned long)>
c0007b1e:	89 c6                	mov    esi,eax
c0007b20:	58                   	pop    eax
c0007b21:	5a                   	pop    edx
c0007b22:	6a 00                	push   0x0
c0007b24:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007b28:	50                   	push   eax
c0007b29:	e8 d6 fb ff ff       	call   c0007704 <IDTEntry::IDTEntry(bool)>
c0007b2e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007b32:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007b37:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007b3e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007b44:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b48:	80 ce 05             	or     dh,0x5
c0007b4b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007b4e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007b52:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007b56:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007b59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b5c:	e8 87 fc ff ff       	call   c00077e8 <IDT::flush()>
c0007b61:	83 c4 20             	add    esp,0x20
c0007b64:	5b                   	pop    ebx
c0007b65:	5e                   	pop    esi
c0007b66:	5f                   	pop    edi
c0007b67:	c3                   	ret    

c0007b68 <sbrk>:
c0007b68:	55                   	push   ebp
c0007b69:	57                   	push   edi
c0007b6a:	56                   	push   esi
c0007b6b:	53                   	push   ebx
c0007b6c:	83 ec 1c             	sub    esp,0x1c
c0007b6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007b73:	85 c0                	test   eax,eax
c0007b75:	74 5f                	je     c0007bd6 <sbrk+0x6e>
c0007b77:	78 64                	js     c0007bdd <sbrk+0x75>
c0007b79:	8b 15 34 f7 01 c0    	mov    edx,DWORD PTR ds:0xc001f734
c0007b7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007b83:	05 ff 0f 00 00       	add    eax,0xfff
c0007b88:	89 c5                	mov    ebp,eax
c0007b8a:	78 69                	js     c0007bf5 <sbrk+0x8d>
c0007b8c:	c1 fd 0c             	sar    ebp,0xc
c0007b8f:	bb 00 00 00 00       	mov    ebx,0x0
c0007b94:	8b 35 b0 0a 02 c0    	mov    esi,DWORD PTR ds:0xc0020ab0
c0007b9a:	8b 3d 34 f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f734
c0007ba0:	e8 c8 03 00 00       	call   c0007f6d <Phys::allocatePage()>
c0007ba5:	68 01 04 00 00       	push   0x401
c0007baa:	57                   	push   edi
c0007bab:	50                   	push   eax
c0007bac:	56                   	push   esi
c0007bad:	e8 bc 21 00 00       	call   c0009d6e <VAS::mapPage(unsigned long, unsigned long, int)>
c0007bb2:	81 05 34 f7 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f734,0x1000
c0007bbc:	43                   	inc    ebx
c0007bbd:	83 c4 10             	add    esp,0x10
c0007bc0:	39 dd                	cmp    ebp,ebx
c0007bc2:	75 d0                	jne    c0007b94 <sbrk+0x2c>
c0007bc4:	0f 20 d8             	mov    eax,cr3
c0007bc7:	0f 22 d8             	mov    cr3,eax
c0007bca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bce:	83 c4 1c             	add    esp,0x1c
c0007bd1:	5b                   	pop    ebx
c0007bd2:	5e                   	pop    esi
c0007bd3:	5f                   	pop    edi
c0007bd4:	5d                   	pop    ebp
c0007bd5:	c3                   	ret    
c0007bd6:	a1 34 f7 01 c0       	mov    eax,ds:0xc001f734
c0007bdb:	eb f1                	jmp    c0007bce <sbrk+0x66>
c0007bdd:	83 ec 08             	sub    esp,0x8
c0007be0:	50                   	push   eax
c0007be1:	68 1c d7 01 c0       	push   0xc001d71c
c0007be6:	e8 41 2d 00 00       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c0007beb:	83 c4 10             	add    esp,0x10
c0007bee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007bf3:	eb d9                	jmp    c0007bce <sbrk+0x66>
c0007bf5:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007bfb:	eb 8f                	jmp    c0007b8c <sbrk+0x24>

c0007bfd <mmap>:
c0007bfd:	83 ec 18             	sub    esp,0x18
c0007c00:	68 4c d7 01 c0       	push   0xc001d74c
c0007c05:	e8 85 89 00 00       	call   c001058f <KePanic(char const*)>
c0007c0a:	b8 00 00 00 00       	mov    eax,0x0
c0007c0f:	83 c4 1c             	add    esp,0x1c
c0007c12:	c3                   	ret    

c0007c13 <munmap>:
c0007c13:	83 ec 18             	sub    esp,0x18
c0007c16:	68 51 d7 01 c0       	push   0xc001d751
c0007c1b:	e8 6f 89 00 00       	call   c001058f <KePanic(char const*)>
c0007c20:	b8 00 00 00 00       	mov    eax,0x0
c0007c25:	83 c4 1c             	add    esp,0x1c
c0007c28:	c3                   	ret    

c0007c29 <liballoc_lock()>:
c0007c29:	fa                   	cli    
c0007c2a:	ff 05 68 3e 02 c0    	inc    DWORD PTR ds:0xc0023e68
c0007c30:	b8 00 00 00 00       	mov    eax,0x0
c0007c35:	c3                   	ret    

c0007c36 <liballoc_unlock()>:
c0007c36:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c0007c3b:	48                   	dec    eax
c0007c3c:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c0007c41:	75 01                	jne    c0007c44 <liballoc_unlock()+0xe>
c0007c43:	fb                   	sti    
c0007c44:	b8 00 00 00 00       	mov    eax,0x0
c0007c49:	c3                   	ret    

c0007c4a <liballoc_alloc(int)>:
c0007c4a:	83 ec 10             	sub    esp,0x10
c0007c4d:	6a 01                	push   0x1
c0007c4f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007c53:	ff 35 b0 0a 02 c0    	push   DWORD PTR ds:0xc0020ab0
c0007c59:	e8 14 22 00 00       	call   c0009e72 <VAS::allocatePages(int, int)>
c0007c5e:	83 c4 1c             	add    esp,0x1c
c0007c61:	c3                   	ret    

c0007c62 <liballoc_free(void*, int)>:
c0007c62:	83 ec 14             	sub    esp,0x14
c0007c65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007c69:	ff 35 b0 0a 02 c0    	push   DWORD PTR ds:0xc0020ab0
c0007c6f:	e8 ba 1e 00 00       	call   c0009b2e <VAS::freeAllocatedPages(unsigned long)>
c0007c74:	b8 00 00 00 00       	mov    eax,0x0
c0007c79:	83 c4 1c             	add    esp,0x1c
c0007c7c:	c3                   	ret    

c0007c7d <realloc>:
c0007c7d:	83 ec 14             	sub    esp,0x14
c0007c80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007c84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007c88:	e8 a4 98 ff ff       	call   c0001531 <dlrealloc>
c0007c8d:	83 c4 1c             	add    esp,0x1c
c0007c90:	c3                   	ret    

c0007c91 <malloc>:
c0007c91:	83 ec 18             	sub    esp,0x18
c0007c94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007c98:	e8 57 93 ff ff       	call   c0000ff4 <dlmalloc>
c0007c9d:	83 c4 1c             	add    esp,0x1c
c0007ca0:	c3                   	ret    

c0007ca1 <free>:
c0007ca1:	83 ec 18             	sub    esp,0x18
c0007ca4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ca8:	e8 ec 8f ff ff       	call   c0000c99 <dlfree>
c0007cad:	83 c4 1c             	add    esp,0x1c
c0007cb0:	c3                   	ret    

c0007cb1 <rfree>:
c0007cb1:	83 ec 18             	sub    esp,0x18
c0007cb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007cb8:	e8 dc 8f ff ff       	call   c0000c99 <dlfree>
c0007cbd:	83 c4 1c             	add    esp,0x1c
c0007cc0:	c3                   	ret    

c0007cc1 <calloc>:
c0007cc1:	56                   	push   esi
c0007cc2:	53                   	push   ebx
c0007cc3:	83 ec 10             	sub    esp,0x10
c0007cc6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007cca:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007ccf:	53                   	push   ebx
c0007cd0:	e8 bc ff ff ff       	call   c0007c91 <malloc>
c0007cd5:	89 c6                	mov    esi,eax
c0007cd7:	83 c4 0c             	add    esp,0xc
c0007cda:	53                   	push   ebx
c0007cdb:	6a 00                	push   0x0
c0007cdd:	50                   	push   eax
c0007cde:	e8 ed 87 ff ff       	call   c00004d0 <memset>
c0007ce3:	89 f0                	mov    eax,esi
c0007ce5:	83 c4 14             	add    esp,0x14
c0007ce8:	5b                   	pop    ebx
c0007ce9:	5e                   	pop    esi
c0007cea:	c3                   	ret    

c0007ceb <KeEntryPoint>:
c0007ceb:	57                   	push   edi
c0007cec:	bf f9 03 00 00       	mov    edi,0x3f9
c0007cf1:	56                   	push   esi
c0007cf2:	89 fa                	mov    edx,edi
c0007cf4:	53                   	push   ebx
c0007cf5:	31 f6                	xor    esi,esi
c0007cf7:	83 ec 2c             	sub    esp,0x2c
c0007cfa:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007cff:	a3 d0 09 02 c0       	mov    ds:0xc00209d0,eax
c0007d04:	89 f0                	mov    eax,esi
c0007d06:	ee                   	out    dx,al
c0007d07:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007d0c:	b0 80                	mov    al,0x80
c0007d0e:	89 da                	mov    edx,ebx
c0007d10:	ee                   	out    dx,al
c0007d11:	b1 03                	mov    cl,0x3
c0007d13:	ba f8 03 00 00       	mov    edx,0x3f8
c0007d18:	88 c8                	mov    al,cl
c0007d1a:	ee                   	out    dx,al
c0007d1b:	89 f0                	mov    eax,esi
c0007d1d:	89 fa                	mov    edx,edi
c0007d1f:	ee                   	out    dx,al
c0007d20:	88 c8                	mov    al,cl
c0007d22:	89 da                	mov    edx,ebx
c0007d24:	ee                   	out    dx,al
c0007d25:	b0 c7                	mov    al,0xc7
c0007d27:	ba fa 03 00 00       	mov    edx,0x3fa
c0007d2c:	ee                   	out    dx,al
c0007d2d:	b0 0b                	mov    al,0xb
c0007d2f:	ba fc 03 00 00       	mov    edx,0x3fc
c0007d34:	ee                   	out    dx,al
c0007d35:	68 58 d7 01 c0       	push   0xc001d758
c0007d3a:	e8 ed 2b 00 00       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c0007d3f:	e8 65 81 00 00       	call   c000fea9 <KeDisplaySplashScreen()>
c0007d44:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007d49:	05 ff 0f 00 00       	add    eax,0xfff
c0007d4e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007d53:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d56:	e8 64 03 00 00       	call   c00080bf <Phys::physicalMemorySetup(unsigned int)>
c0007d5b:	e8 38 1b 00 00       	call   c0009898 <Virt::virtualMemorySetup()>
c0007d60:	58                   	pop    eax
c0007d61:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007d65:	53                   	push   ebx
c0007d66:	e8 e9 1b 00 00       	call   c0009954 <VAS::VAS()>
c0007d6b:	89 1d b0 0a 02 c0    	mov    DWORD PTR ds:0xc0020ab0,ebx
c0007d71:	e8 b4 46 01 00       	call   c001c42a <_init>
c0007d76:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007d7d:	e8 0f ff ff ff       	call   c0007c91 <malloc>
c0007d82:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d85:	89 c6                	mov    esi,eax
c0007d87:	e8 7c f2 ff ff       	call   c0007008 <Computer::Computer()>
c0007d8c:	6a 00                	push   0x0
c0007d8e:	89 35 b8 09 02 c0    	mov    DWORD PTR ds:0xc00209b8,esi
c0007d94:	6a 00                	push   0x0
c0007d96:	6a 00                	push   0x0
c0007d98:	56                   	push   esi
c0007d99:	e8 10 f6 ff ff       	call   c00073ae <Computer::open(int, int, void*)>
c0007d9e:	83 c4 14             	add    esp,0x14
c0007da1:	53                   	push   ebx
c0007da2:	e8 63 1e 00 00       	call   c0009c0a <VAS::~VAS()>
c0007da7:	83 c4 30             	add    esp,0x30
c0007daa:	5b                   	pop    ebx
c0007dab:	5e                   	pop    esi
c0007dac:	5f                   	pop    edi
c0007dad:	c3                   	ret    

c0007dae <Phys::allocateDMA(unsigned long)>:
c0007dae:	55                   	push   ebp
c0007daf:	31 ed                	xor    ebp,ebp
c0007db1:	57                   	push   edi
c0007db2:	56                   	push   esi
c0007db3:	53                   	push   ebx
c0007db4:	31 db                	xor    ebx,ebx
c0007db6:	83 ec 1c             	sub    esp,0x1c
c0007db9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007dbd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007dc5:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007dcb:	31 c0                	xor    eax,eax
c0007dcd:	c1 ef 0c             	shr    edi,0xc
c0007dd0:	eb 19                	jmp    c0007deb <Phys::allocateDMA(unsigned long)+0x3d>
c0007dd2:	85 c0                	test   eax,eax
c0007dd4:	75 06                	jne    c0007ddc <Phys::allocateDMA(unsigned long)+0x2e>
c0007dd6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007dda:	89 dd                	mov    ebp,ebx
c0007ddc:	8d 70 01             	lea    esi,[eax+0x1]
c0007ddf:	39 f7                	cmp    edi,esi
c0007de1:	74 33                	je     c0007e16 <Phys::allocateDMA(unsigned long)+0x68>
c0007de3:	89 f0                	mov    eax,esi
c0007de5:	43                   	inc    ebx
c0007de6:	83 fb 0f             	cmp    ebx,0xf
c0007de9:	7f 11                	jg     c0007dfc <Phys::allocateDMA(unsigned long)+0x4e>
c0007deb:	80 bb ec 09 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdf614],0x0
c0007df2:	74 de                	je     c0007dd2 <Phys::allocateDMA(unsigned long)+0x24>
c0007df4:	31 c0                	xor    eax,eax
c0007df6:	43                   	inc    ebx
c0007df7:	83 fb 0f             	cmp    ebx,0xf
c0007dfa:	7e ef                	jle    c0007deb <Phys::allocateDMA(unsigned long)+0x3d>
c0007dfc:	83 ec 0c             	sub    esp,0xc
c0007dff:	68 70 d7 01 c0       	push   0xc001d770
c0007e04:	e8 86 87 00 00       	call   c001058f <KePanic(char const*)>
c0007e09:	83 c4 10             	add    esp,0x10
c0007e0c:	31 c0                	xor    eax,eax
c0007e0e:	83 c4 1c             	add    esp,0x1c
c0007e11:	5b                   	pop    ebx
c0007e12:	5e                   	pop    esi
c0007e13:	5f                   	pop    edi
c0007e14:	5d                   	pop    ebp
c0007e15:	c3                   	ret    
c0007e16:	89 e9                	mov    ecx,ebp
c0007e18:	c1 f9 04             	sar    ecx,0x4
c0007e1b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007e1f:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007e23:	89 ca                	mov    edx,ecx
c0007e25:	4a                   	dec    edx
c0007e26:	79 03                	jns    c0007e2b <Phys::allocateDMA(unsigned long)+0x7d>
c0007e28:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007e2b:	c1 fa 04             	sar    edx,0x4
c0007e2e:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007e32:	74 08                	je     c0007e3c <Phys::allocateDMA(unsigned long)+0x8e>
c0007e34:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007e38:	31 c0                	xor    eax,eax
c0007e3a:	eb ba                	jmp    c0007df6 <Phys::allocateDMA(unsigned long)+0x48>
c0007e3c:	85 f6                	test   esi,esi
c0007e3e:	74 15                	je     c0007e55 <Phys::allocateDMA(unsigned long)+0xa7>
c0007e40:	8d 95 ec 09 02 c0    	lea    edx,[ebp-0x3ffdf614]
c0007e46:	8d 84 05 ed 09 02 c0 	lea    eax,[ebp+eax*1-0x3ffdf613]
c0007e4d:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007e50:	42                   	inc    edx
c0007e51:	39 d0                	cmp    eax,edx
c0007e53:	75 f8                	jne    c0007e4d <Phys::allocateDMA(unsigned long)+0x9f>
c0007e55:	01 3d e4 09 02 c0    	add    DWORD PTR ds:0xc00209e4,edi
c0007e5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e5f:	85 c0                	test   eax,eax
c0007e61:	74 17                	je     c0007e7a <Phys::allocateDMA(unsigned long)+0xcc>
c0007e63:	83 ec 0c             	sub    esp,0xc
c0007e66:	68 70 d7 01 c0       	push   0xc001d770
c0007e6b:	e8 1f 87 00 00       	call   c001058f <KePanic(char const*)>
c0007e70:	83 c4 10             	add    esp,0x10
c0007e73:	89 f0                	mov    eax,esi
c0007e75:	e9 6b ff ff ff       	jmp    c0007de5 <Phys::allocateDMA(unsigned long)+0x37>
c0007e7a:	c1 e5 0c             	shl    ebp,0xc
c0007e7d:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007e83:	eb 89                	jmp    c0007e0e <Phys::allocateDMA(unsigned long)+0x60>

c0007e85 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007e85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e89:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007e8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e93:	c1 ea 0c             	shr    edx,0xc
c0007e96:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007e9b:	29 15 e4 09 02 c0    	sub    DWORD PTR ds:0xc00209e4,edx
c0007ea1:	c1 e8 0c             	shr    eax,0xc
c0007ea4:	85 d2                	test   edx,edx
c0007ea6:	74 0f                	je     c0007eb7 <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0007ea8:	05 ec 09 02 c0       	add    eax,0xc00209ec
c0007ead:	01 c2                	add    edx,eax
c0007eaf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007eb2:	40                   	inc    eax
c0007eb3:	39 d0                	cmp    eax,edx
c0007eb5:	75 f8                	jne    c0007eaf <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0007eb7:	c3                   	ret    

c0007eb8 <Phys::setPageState(unsigned long, bool)>:
c0007eb8:	56                   	push   esi
c0007eb9:	ba 01 00 00 00       	mov    edx,0x1
c0007ebe:	53                   	push   ebx
c0007ebf:	8b 35 38 f7 01 c0    	mov    esi,DWORD PTR ds:0xc001f738
c0007ec5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007ec9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ecd:	89 c8                	mov    eax,ecx
c0007ecf:	83 e1 07             	and    ecx,0x7
c0007ed2:	c1 e8 03             	shr    eax,0x3
c0007ed5:	d3 e3                	shl    ebx,cl
c0007ed7:	01 c6                	add    esi,eax
c0007ed9:	d3 e2                	shl    edx,cl
c0007edb:	f7 d2                	not    edx
c0007edd:	20 16                	and    BYTE PTR [esi],dl
c0007edf:	03 05 38 f7 01 c0    	add    eax,DWORD PTR ds:0xc001f738
c0007ee5:	08 18                	or     BYTE PTR [eax],bl
c0007ee7:	5b                   	pop    ebx
c0007ee8:	5e                   	pop    esi
c0007ee9:	c3                   	ret    

c0007eea <Phys::getPageState(unsigned long)>:
c0007eea:	53                   	push   ebx
c0007eeb:	8b 15 38 f7 01 c0    	mov    edx,DWORD PTR ds:0xc001f738
c0007ef1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007ef5:	31 db                	xor    ebx,ebx
c0007ef7:	89 c8                	mov    eax,ecx
c0007ef9:	83 e1 07             	and    ecx,0x7
c0007efc:	c1 e8 03             	shr    eax,0x3
c0007eff:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007f02:	89 d8                	mov    eax,ebx
c0007f04:	5b                   	pop    ebx
c0007f05:	d3 f8                	sar    eax,cl
c0007f07:	83 e0 01             	and    eax,0x1
c0007f0a:	c3                   	ret    

c0007f0b <Phys::freePage(unsigned long)>:
c0007f0b:	53                   	push   ebx
c0007f0c:	83 ec 08             	sub    esp,0x8
c0007f0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f13:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007f19:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007f1f:	76 3a                	jbe    c0007f5b <Phys::freePage(unsigned long)+0x50>
c0007f21:	c1 e8 0c             	shr    eax,0xc
c0007f24:	50                   	push   eax
c0007f25:	89 c3                	mov    ebx,eax
c0007f27:	e8 be ff ff ff       	call   c0007eea <Phys::getPageState(unsigned long)>
c0007f2c:	5a                   	pop    edx
c0007f2d:	84 c0                	test   al,al
c0007f2f:	74 19                	je     c0007f4a <Phys::freePage(unsigned long)+0x3f>
c0007f31:	83 ec 08             	sub    esp,0x8
c0007f34:	ff 0d e4 09 02 c0    	dec    DWORD PTR ds:0xc00209e4
c0007f3a:	6a 00                	push   0x0
c0007f3c:	53                   	push   ebx
c0007f3d:	e8 76 ff ff ff       	call   c0007eb8 <Phys::setPageState(unsigned long, bool)>
c0007f42:	83 c4 10             	add    esp,0x10
c0007f45:	83 c4 08             	add    esp,0x8
c0007f48:	5b                   	pop    ebx
c0007f49:	c3                   	ret    
c0007f4a:	c7 44 24 10 15 d8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d815
c0007f52:	83 c4 08             	add    esp,0x8
c0007f55:	5b                   	pop    ebx
c0007f56:	e9 34 86 00 00       	jmp    c001058f <KePanic(char const*)>
c0007f5b:	68 00 10 00 00       	push   0x1000
c0007f60:	50                   	push   eax
c0007f61:	e8 1f ff ff ff       	call   c0007e85 <Phys::freeDMA(unsigned long, unsigned long)>
c0007f66:	59                   	pop    ecx
c0007f67:	5b                   	pop    ebx
c0007f68:	83 c4 08             	add    esp,0x8
c0007f6b:	5b                   	pop    ebx
c0007f6c:	c3                   	ret    

c0007f6d <Phys::allocatePage()>:
c0007f6d:	56                   	push   esi
c0007f6e:	53                   	push   ebx
c0007f6f:	83 ec 14             	sub    esp,0x14
c0007f72:	8b 35 d8 09 02 c0    	mov    esi,DWORD PTR ds:0xc00209d8
c0007f78:	89 f3                	mov    ebx,esi
c0007f7a:	eb 0a                	jmp    c0007f86 <Phys::allocatePage()+0x19>
c0007f7c:	89 1d d8 09 02 c0    	mov    DWORD PTR ds:0xc00209d8,ebx
c0007f82:	39 de                	cmp    esi,ebx
c0007f84:	74 24                	je     c0007faa <Phys::allocatePage()+0x3d>
c0007f86:	53                   	push   ebx
c0007f87:	e8 5e ff ff ff       	call   c0007eea <Phys::getPageState(unsigned long)>
c0007f8c:	5a                   	pop    edx
c0007f8d:	84 c0                	test   al,al
c0007f8f:	74 5f                	je     c0007ff0 <Phys::allocatePage()+0x83>
c0007f91:	43                   	inc    ebx
c0007f92:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f98:	75 e2                	jne    c0007f7c <Phys::allocatePage()+0xf>
c0007f9a:	31 db                	xor    ebx,ebx
c0007f9c:	c7 05 d8 09 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00209d8,0x0
c0007fa6:	39 de                	cmp    esi,ebx
c0007fa8:	75 dc                	jne    c0007f86 <Phys::allocatePage()+0x19>
c0007faa:	83 ec 0c             	sub    esp,0xc
c0007fad:	80 35 fc 09 02 c0 01 	xor    BYTE PTR ds:0xc00209fc,0x1
c0007fb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007fb9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007fbc:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007fc2:	50                   	push   eax
c0007fc3:	e8 84 26 00 00       	call   c000a64c <VAS::scanForEviction()>
c0007fc8:	83 c4 10             	add    esp,0x10
c0007fcb:	85 c0                	test   eax,eax
c0007fcd:	75 3f                	jne    c000800e <Phys::allocatePage()+0xa1>
c0007fcf:	83 ec 0c             	sub    esp,0xc
c0007fd2:	68 98 d7 01 c0       	push   0xc001d798
c0007fd7:	e8 b3 85 00 00       	call   c001058f <KePanic(char const*)>
c0007fdc:	83 c4 10             	add    esp,0x10
c0007fdf:	8b 1d d8 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209d8
c0007fe5:	53                   	push   ebx
c0007fe6:	e8 ff fe ff ff       	call   c0007eea <Phys::getPageState(unsigned long)>
c0007feb:	5a                   	pop    edx
c0007fec:	84 c0                	test   al,al
c0007fee:	75 a1                	jne    c0007f91 <Phys::allocatePage()+0x24>
c0007ff0:	6a 01                	push   0x1
c0007ff2:	53                   	push   ebx
c0007ff3:	e8 c0 fe ff ff       	call   c0007eb8 <Phys::setPageState(unsigned long, bool)>
c0007ff8:	a1 d8 09 02 c0       	mov    eax,ds:0xc00209d8
c0007ffd:	5a                   	pop    edx
c0007ffe:	ff 05 e4 09 02 c0    	inc    DWORD PTR ds:0xc00209e4
c0008004:	c1 e0 0c             	shl    eax,0xc
c0008007:	59                   	pop    ecx
c0008008:	83 c4 14             	add    esp,0x14
c000800b:	5b                   	pop    ebx
c000800c:	5e                   	pop    esi
c000800d:	c3                   	ret    
c000800e:	83 ec 08             	sub    esp,0x8
c0008011:	89 c2                	mov    edx,eax
c0008013:	6a 01                	push   0x1
c0008015:	c1 ea 0c             	shr    edx,0xc
c0008018:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000801c:	52                   	push   edx
c000801d:	e8 96 fe ff ff       	call   c0007eb8 <Phys::setPageState(unsigned long, bool)>
c0008022:	83 c4 10             	add    esp,0x10
c0008025:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008029:	eb dd                	jmp    c0008008 <Phys::allocatePage()+0x9b>

c000802b <Phys::allocateContiguousPages(int)>:
c000802b:	57                   	push   edi
c000802c:	56                   	push   esi
c000802d:	53                   	push   ebx
c000802e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008032:	fa                   	cli    
c0008033:	ff 05 68 3e 02 c0    	inc    DWORD PTR ds:0xc0023e68
c0008039:	31 db                	xor    ebx,ebx
c000803b:	85 db                	test   ebx,ebx
c000803d:	75 11                	jne    c0008050 <Phys::allocateContiguousPages(int)+0x25>
c000803f:	e8 29 ff ff ff       	call   c0007f6d <Phys::allocatePage()>
c0008044:	83 fe 01             	cmp    esi,0x1
c0008047:	89 c7                	mov    edi,eax
c0008049:	74 21                	je     c000806c <Phys::allocateContiguousPages(int)+0x41>
c000804b:	bb 01 00 00 00       	mov    ebx,0x1
c0008050:	e8 18 ff ff ff       	call   c0007f6d <Phys::allocatePage()>
c0008055:	89 da                	mov    edx,ebx
c0008057:	c1 e2 0c             	shl    edx,0xc
c000805a:	01 fa                	add    edx,edi
c000805c:	39 c2                	cmp    edx,eax
c000805e:	74 20                	je     c0008080 <Phys::allocateContiguousPages(int)+0x55>
c0008060:	bb 01 00 00 00       	mov    ebx,0x1
c0008065:	89 c7                	mov    edi,eax
c0008067:	83 fe 01             	cmp    esi,0x1
c000806a:	75 e4                	jne    c0008050 <Phys::allocateContiguousPages(int)+0x25>
c000806c:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c0008071:	48                   	dec    eax
c0008072:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c0008077:	75 01                	jne    c000807a <Phys::allocateContiguousPages(int)+0x4f>
c0008079:	fb                   	sti    
c000807a:	89 f8                	mov    eax,edi
c000807c:	5b                   	pop    ebx
c000807d:	5e                   	pop    esi
c000807e:	5f                   	pop    edi
c000807f:	c3                   	ret    
c0008080:	43                   	inc    ebx
c0008081:	39 f3                	cmp    ebx,esi
c0008083:	75 b6                	jne    c000803b <Phys::allocateContiguousPages(int)+0x10>
c0008085:	eb e5                	jmp    c000806c <Phys::allocateContiguousPages(int)+0x41>

c0008087 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0008087:	56                   	push   esi
c0008088:	53                   	push   ebx
c0008089:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000808d:	39 1d dc 09 02 c0    	cmp    DWORD PTR ds:0xc00209dc,ebx
c0008093:	73 06                	jae    c000809b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0008095:	89 1d dc 09 02 c0    	mov    DWORD PTR ds:0xc00209dc,ebx
c000809b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000809f:	c1 eb 0c             	shr    ebx,0xc
c00080a2:	c1 e8 0c             	shr    eax,0xc
c00080a5:	39 d8                	cmp    eax,ebx
c00080a7:	73 13                	jae    c00080bc <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c00080a9:	6a 00                	push   0x0
c00080ab:	8d 70 01             	lea    esi,[eax+0x1]
c00080ae:	50                   	push   eax
c00080af:	e8 04 fe ff ff       	call   c0007eb8 <Phys::setPageState(unsigned long, bool)>
c00080b4:	5a                   	pop    edx
c00080b5:	89 f0                	mov    eax,esi
c00080b7:	59                   	pop    ecx
c00080b8:	39 f3                	cmp    ebx,esi
c00080ba:	75 ed                	jne    c00080a9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00080bc:	5b                   	pop    ebx
c00080bd:	5e                   	pop    esi
c00080be:	c3                   	ret    

c00080bf <Phys::physicalMemorySetup(unsigned int)>:
c00080bf:	55                   	push   ebp
c00080c0:	57                   	push   edi
c00080c1:	56                   	push   esi
c00080c2:	53                   	push   ebx
c00080c3:	31 db                	xor    ebx,ebx
c00080c5:	83 ec 40             	sub    esp,0x40
c00080c8:	6a 10                	push   0x10
c00080ca:	6a 00                	push   0x0
c00080cc:	68 ec 09 02 c0       	push   0xc00209ec
c00080d1:	e8 fa 83 ff ff       	call   c00004d0 <memset>
c00080d6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00080da:	25 00 f0 ff ff       	and    eax,0xfffff000
c00080df:	05 00 10 00 00       	add    eax,0x1000
c00080e4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00080e8:	5a                   	pop    edx
c00080e9:	59                   	pop    ecx
c00080ea:	50                   	push   eax
c00080eb:	68 2b d8 01 c0       	push   0xc001d82b
c00080f0:	e8 37 28 00 00       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c00080f5:	83 c4 10             	add    esp,0x10
c00080f8:	83 ec 08             	sub    esp,0x8
c00080fb:	6a 01                	push   0x1
c00080fd:	53                   	push   ebx
c00080fe:	43                   	inc    ebx
c00080ff:	e8 b4 fd ff ff       	call   c0007eb8 <Phys::setPageState(unsigned long, bool)>
c0008104:	83 c4 10             	add    esp,0x10
c0008107:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000810d:	75 e9                	jne    c00080f8 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000810f:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0008115:	66 85 c0             	test   ax,ax
c0008118:	0f 84 97 01 00 00    	je     c00082b5 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000811e:	89 c7                	mov    edi,eax
c0008120:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0008128:	81 e7 ff ff 00 00    	and    edi,0xffff
c000812e:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0008133:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0008137:	eb 15                	jmp    c000814e <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0008139:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000813d:	83 c3 18             	add    ebx,0x18
c0008140:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008144:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0008148:	0f 84 77 01 00 00    	je     c00082c5 <Phys::physicalMemorySetup(unsigned int)+0x206>
c000814e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008151:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008154:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0008157:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000815b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000815f:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008161:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008164:	01 f0                	add    eax,esi
c0008166:	55                   	push   ebp
c0008167:	11 fa                	adc    edx,edi
c0008169:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000816d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008171:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008175:	50                   	push   eax
c0008176:	56                   	push   esi
c0008177:	68 c8 d7 01 c0       	push   0xc001d7c8
c000817c:	e8 ab 27 00 00       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c0008181:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008185:	83 c4 10             	add    esp,0x10
c0008188:	09 f8                	or     eax,edi
c000818a:	0f 85 35 01 00 00    	jne    c00082c5 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0008190:	4d                   	dec    ebp
c0008191:	75 a6                	jne    c0008139 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008193:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008197:	ba 00 00 08 00       	mov    edx,0x80000
c000819c:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c00081a0:	39 f2                	cmp    edx,esi
c00081a2:	89 c1                	mov    ecx,eax
c00081a4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00081ac:	19 f9                	sbb    ecx,edi
c00081ae:	0f 82 a7 00 00 00    	jb     c000825b <Phys::physicalMemorySetup(unsigned int)+0x19c>
c00081b4:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00081b8:	89 c1                	mov    ecx,eax
c00081ba:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c00081be:	0f 83 97 00 00 00    	jae    c000825b <Phys::physicalMemorySetup(unsigned int)+0x19c>
c00081c4:	ba 00 00 0a 00       	mov    edx,0xa0000
c00081c9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00081cd:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00081d1:	39 fa                	cmp    edx,edi
c00081d3:	19 e8                	sbb    eax,ebp
c00081d5:	0f 82 9a 01 00 00    	jb     c0008375 <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c00081db:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00081df:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00081e3:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00081e9:	ba ff 1f 00 00       	mov    edx,0x1fff
c00081ee:	83 d5 ff             	adc    ebp,0xffffffff
c00081f1:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00081f5:	31 c0                	xor    eax,eax
c00081f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00081fb:	39 fa                	cmp    edx,edi
c00081fd:	89 c1                	mov    ecx,eax
c00081ff:	19 e9                	sbb    ecx,ebp
c0008201:	0f 83 32 ff ff ff    	jae    c0008139 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008207:	be 00 00 08 00       	mov    esi,0x80000
c000820c:	51                   	push   ecx
c000820d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0008211:	57                   	push   edi
c0008212:	56                   	push   esi
c0008213:	68 ec d7 01 c0       	push   0xc001d7ec
c0008218:	e8 0f 27 00 00       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c000821d:	5d                   	pop    ebp
c000821e:	58                   	pop    eax
c000821f:	57                   	push   edi
c0008220:	56                   	push   esi
c0008221:	e8 61 fe ff ff       	call   c0008087 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008226:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000822a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000822e:	83 c4 0c             	add    esp,0xc
c0008231:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008235:	03 05 e8 09 02 c0    	add    eax,DWORD PTR ds:0xc00209e8
c000823b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008242:	a3 e8 09 02 c0       	mov    ds:0xc00209e8,eax
c0008247:	52                   	push   edx
c0008248:	50                   	push   eax
c0008249:	68 51 d8 01 c0       	push   0xc001d851
c000824e:	e8 d9 26 00 00       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	e9 de fe ff ff       	jmp    c0008139 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c000825b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000825f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008263:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008267:	39 ea                	cmp    edx,ebp
c0008269:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000826d:	0f 82 c6 fe ff ff    	jb     c0008139 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008273:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008278:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000827c:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0008280:	0f 83 b3 fe ff ff    	jae    c0008139 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008286:	39 ee                	cmp    esi,ebp
c0008288:	89 f8                	mov    eax,edi
c000828a:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000828e:	0f 83 78 ff ff ff    	jae    c000820c <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0008294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008298:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000829c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00082a0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00082a4:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c00082a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00082ac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00082b0:	e9 57 ff ff ff       	jmp    c000820c <Phys::physicalMemorySetup(unsigned int)+0x14d>
c00082b5:	83 ec 0c             	sub    esp,0xc
c00082b8:	68 43 d8 01 c0       	push   0xc001d843
c00082bd:	e8 cd 82 00 00       	call   c001058f <KePanic(char const*)>
c00082c2:	83 c4 10             	add    esp,0x10
c00082c5:	83 ec 08             	sub    esp,0x8
c00082c8:	bb 60 00 00 00       	mov    ebx,0x60
c00082cd:	6a 00                	push   0x0
c00082cf:	6a 06                	push   0x6
c00082d1:	e8 e2 fb ff ff       	call   c0007eb8 <Phys::setPageState(unsigned long, bool)>
c00082d6:	58                   	pop    eax
c00082d7:	5a                   	pop    edx
c00082d8:	6a 00                	push   0x0
c00082da:	6a 07                	push   0x7
c00082dc:	e8 d7 fb ff ff       	call   c0007eb8 <Phys::setPageState(unsigned long, bool)>
c00082e1:	83 05 e8 09 02 c0 02 	add    DWORD PTR ds:0xc00209e8,0x2
c00082e8:	83 c4 10             	add    esp,0x10
c00082eb:	83 ec 08             	sub    esp,0x8
c00082ee:	6a 00                	push   0x0
c00082f0:	53                   	push   ebx
c00082f1:	43                   	inc    ebx
c00082f2:	e8 c1 fb ff ff       	call   c0007eb8 <Phys::setPageState(unsigned long, bool)>
c00082f7:	83 c4 10             	add    esp,0x10
c00082fa:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008300:	75 e9                	jne    c00082eb <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0008302:	a1 e8 09 02 c0       	mov    eax,ds:0xc00209e8
c0008307:	bb 40 01 00 00       	mov    ebx,0x140
c000830c:	83 c0 20             	add    eax,0x20
c000830f:	a3 e8 09 02 c0       	mov    ds:0xc00209e8,eax
c0008314:	eb 22                	jmp    c0008338 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0008316:	83 ec 08             	sub    esp,0x8
c0008319:	6a 00                	push   0x0
c000831b:	53                   	push   ebx
c000831c:	43                   	inc    ebx
c000831d:	e8 96 fb ff ff       	call   c0007eb8 <Phys::setPageState(unsigned long, bool)>
c0008322:	a1 e8 09 02 c0       	mov    eax,ds:0xc00209e8
c0008327:	83 c4 10             	add    esp,0x10
c000832a:	40                   	inc    eax
c000832b:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0008331:	a3 e8 09 02 c0       	mov    ds:0xc00209e8,eax
c0008336:	74 07                	je     c000833f <Phys::physicalMemorySetup(unsigned int)+0x280>
c0008338:	3d ff 03 00 00       	cmp    eax,0x3ff
c000833d:	7e d7                	jle    c0008316 <Phys::physicalMemorySetup(unsigned int)+0x257>
c000833f:	bb d0 01 00 00       	mov    ebx,0x1d0
c0008344:	3d ff 07 00 00       	cmp    eax,0x7ff
c0008349:	7f 22                	jg     c000836d <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c000834b:	83 ec 08             	sub    esp,0x8
c000834e:	6a 00                	push   0x0
c0008350:	53                   	push   ebx
c0008351:	43                   	inc    ebx
c0008352:	e8 61 fb ff ff       	call   c0007eb8 <Phys::setPageState(unsigned long, bool)>
c0008357:	a1 e8 09 02 c0       	mov    eax,ds:0xc00209e8
c000835c:	83 c4 10             	add    esp,0x10
c000835f:	40                   	inc    eax
c0008360:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0008366:	a3 e8 09 02 c0       	mov    ds:0xc00209e8,eax
c000836b:	75 d7                	jne    c0008344 <Phys::physicalMemorySetup(unsigned int)+0x285>
c000836d:	83 c4 3c             	add    esp,0x3c
c0008370:	5b                   	pop    ebx
c0008371:	5e                   	pop    esi
c0008372:	5f                   	pop    edi
c0008373:	5d                   	pop    ebp
c0008374:	c3                   	ret    
c0008375:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000837d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008385:	e9 51 fe ff ff       	jmp    c00081db <Phys::physicalMemorySetup(unsigned int)+0x11c>

c000838a <Pipe::isAtty()>:
c000838a:	31 c0                	xor    eax,eax
c000838c:	c3                   	ret    
c000838d:	90                   	nop

c000838e <Pipe::~Pipe()>:
c000838e:	83 ec 0c             	sub    esp,0xc
c0008391:	ba b0 d8 01 c0       	mov    edx,0xc001d8b0
c0008396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000839a:	89 10                	mov    DWORD PTR [eax],edx
c000839c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00083a0:	83 ec 0c             	sub    esp,0xc
c00083a3:	50                   	push   eax
c00083a4:	e8 cf 10 00 00       	call   c0009478 <UnixFile::~UnixFile()>
c00083a9:	83 c4 10             	add    esp,0x10
c00083ac:	90                   	nop
c00083ad:	83 c4 0c             	add    esp,0xc
c00083b0:	c3                   	ret    
c00083b1:	90                   	nop

c00083b2 <Pipe::~Pipe()>:
c00083b2:	83 ec 0c             	sub    esp,0xc
c00083b5:	83 ec 0c             	sub    esp,0xc
c00083b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00083bc:	e8 cd ff ff ff       	call   c000838e <Pipe::~Pipe()>
c00083c1:	83 c4 10             	add    esp,0x10
c00083c4:	83 ec 08             	sub    esp,0x8
c00083c7:	6a 20                	push   0x20
c00083c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00083cd:	e8 64 24 00 00       	call   c000a836 <operator delete(void*, unsigned long)>
c00083d2:	83 c4 10             	add    esp,0x10
c00083d5:	83 c4 0c             	add    esp,0xc
c00083d8:	c3                   	ret    
c00083d9:	90                   	nop

c00083da <Pipe::write(unsigned long long, void*, int*)>:
c00083da:	55                   	push   ebp
c00083db:	57                   	push   edi
c00083dc:	56                   	push   esi
c00083dd:	53                   	push   ebx
c00083de:	83 ec 1c             	sub    esp,0x1c
c00083e1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00083e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00083e9:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00083ec:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00083f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00083f3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00083f7:	89 d8                	mov    eax,ebx
c00083f9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00083fc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008400:	89 d6                	mov    esi,edx
c0008402:	89 d7                	mov    edi,edx
c0008404:	c1 ff 1f             	sar    edi,0x1f
c0008407:	03 34 24             	add    esi,DWORD PTR [esp]
c000840a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000840e:	c1 f8 1f             	sar    eax,0x1f
c0008411:	39 f3                	cmp    ebx,esi
c0008413:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008417:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000841b:	19 f8                	sbb    eax,edi
c000841d:	b8 01 00 00 00       	mov    eax,0x1
c0008422:	72 6e                	jb     c0008492 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0008424:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0008427:	01 d0                	add    eax,edx
c0008429:	99                   	cdq    
c000842a:	f7 fb                	idiv   ebx
c000842c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008430:	29 d3                	sub    ebx,edx
c0008432:	89 d7                	mov    edi,edx
c0008434:	89 de                	mov    esi,ebx
c0008436:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008439:	c1 fb 1f             	sar    ebx,0x1f
c000843c:	39 f2                	cmp    edx,esi
c000843e:	19 d8                	sbb    eax,ebx
c0008440:	b8 00 00 00 00       	mov    eax,0x0
c0008445:	72 04                	jb     c000844b <Pipe::write(unsigned long long, void*, int*)+0x71>
c0008447:	89 d0                	mov    eax,edx
c0008449:	29 f0                	sub    eax,esi
c000844b:	89 d3                	mov    ebx,edx
c000844d:	29 c3                	sub    ebx,eax
c000844f:	74 0b                	je     c000845c <Pipe::write(unsigned long long, void*, int*)+0x82>
c0008451:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0008454:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0008458:	89 d9                	mov    ecx,ebx
c000845a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000845c:	85 c0                	test   eax,eax
c000845e:	74 0d                	je     c000846d <Pipe::write(unsigned long long, void*, int*)+0x93>
c0008460:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0008464:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008467:	89 de                	mov    esi,ebx
c0008469:	89 c1                	mov    ecx,eax
c000846b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000846d:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008470:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008475:	75 10                	jne    c0008487 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008477:	83 ec 0c             	sub    esp,0xc
c000847a:	68 6d d8 01 c0       	push   0xc001d86d
c000847f:	e8 0b 81 00 00       	call   c001058f <KePanic(char const*)>
c0008484:	83 c4 10             	add    esp,0x10
c0008487:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000848b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000848e:	89 08                	mov    DWORD PTR [eax],ecx
c0008490:	31 c0                	xor    eax,eax
c0008492:	83 c4 1c             	add    esp,0x1c
c0008495:	5b                   	pop    ebx
c0008496:	5e                   	pop    esi
c0008497:	5f                   	pop    edi
c0008498:	5d                   	pop    ebp
c0008499:	c3                   	ret    

c000849a <Pipe::read(unsigned long long, void*, int*)>:
c000849a:	55                   	push   ebp
c000849b:	57                   	push   edi
c000849c:	56                   	push   esi
c000849d:	53                   	push   ebx
c000849e:	83 ec 1c             	sub    esp,0x1c
c00084a1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00084a5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00084a9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00084ad:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00084b0:	89 c8                	mov    eax,ecx
c00084b2:	99                   	cdq    
c00084b3:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00084b7:	74 24                	je     c00084dd <Pipe::read(unsigned long long, void*, int*)+0x43>
c00084b9:	39 f9                	cmp    ecx,edi
c00084bb:	89 d1                	mov    ecx,edx
c00084bd:	19 f1                	sbb    ecx,esi
c00084bf:	73 1c                	jae    c00084dd <Pipe::read(unsigned long long, void*, int*)+0x43>
c00084c1:	fa                   	cli    
c00084c2:	ff 05 68 3e 02 c0    	inc    DWORD PTR ds:0xc0023e68
c00084c8:	e8 5f b4 00 00       	call   c001392c <schedule()>
c00084cd:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c00084d2:	48                   	dec    eax
c00084d3:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c00084d8:	75 d3                	jne    c00084ad <Pipe::read(unsigned long long, void*, int*)+0x13>
c00084da:	fb                   	sti    
c00084db:	eb d0                	jmp    c00084ad <Pipe::read(unsigned long long, void*, int*)+0x13>
c00084dd:	39 f8                	cmp    eax,edi
c00084df:	89 d1                	mov    ecx,edx
c00084e1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00084e4:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00084e8:	19 f1                	sbb    ecx,esi
c00084ea:	73 07                	jae    c00084f3 <Pipe::read(unsigned long long, void*, int*)+0x59>
c00084ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00084ef:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00084f3:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00084f6:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00084f9:	29 f7                	sub    edi,esi
c00084fb:	89 f8                	mov    eax,edi
c00084fd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008501:	99                   	cdq    
c0008502:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008505:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008509:	19 d0                	sbb    eax,edx
c000850b:	73 07                	jae    c0008514 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000850d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008510:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008514:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0008517:	89 ea                	mov    edx,ebp
c0008519:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000851d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0008522:	74 0d                	je     c0008531 <Pipe::read(unsigned long long, void*, int*)+0x97>
c0008524:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008527:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000852b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000852f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008531:	85 d2                	test   edx,edx
c0008533:	74 11                	je     c0008546 <Pipe::read(unsigned long long, void*, int*)+0xac>
c0008535:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008539:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000853c:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008540:	89 d1                	mov    ecx,edx
c0008542:	89 c7                	mov    edi,eax
c0008544:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008546:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008549:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000854c:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000854f:	99                   	cdq    
c0008550:	89 f7                	mov    edi,esi
c0008552:	03 04 24             	add    eax,DWORD PTR [esp]
c0008555:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008559:	c1 ff 1f             	sar    edi,0x1f
c000855c:	57                   	push   edi
c000855d:	56                   	push   esi
c000855e:	52                   	push   edx
c000855f:	50                   	push   eax
c0008560:	e8 ab 3d 01 00       	call   c001c310 <__umoddi3>
c0008565:	83 c4 10             	add    esp,0x10
c0008568:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000856b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008570:	75 10                	jne    c0008582 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008572:	83 ec 0c             	sub    esp,0xc
c0008575:	68 8a d8 01 c0       	push   0xc001d88a
c000857a:	e8 10 80 00 00       	call   c001058f <KePanic(char const*)>
c000857f:	83 c4 10             	add    esp,0x10
c0008582:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008586:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008589:	89 10                	mov    DWORD PTR [eax],edx
c000858b:	83 c4 1c             	add    esp,0x1c
c000858e:	31 c0                	xor    eax,eax
c0008590:	5b                   	pop    ebx
c0008591:	5e                   	pop    esi
c0008592:	5f                   	pop    edi
c0008593:	5d                   	pop    ebp
c0008594:	c3                   	ret    
c0008595:	90                   	nop

c0008596 <Pipe::Pipe(int)>:
c0008596:	83 ec 0c             	sub    esp,0xc
c0008599:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000859d:	83 ec 08             	sub    esp,0x8
c00085a0:	6a 00                	push   0x0
c00085a2:	50                   	push   eax
c00085a3:	e8 ee 0c 00 00       	call   c0009296 <UnixFile::UnixFile(int)>
c00085a8:	83 c4 10             	add    esp,0x10
c00085ab:	ba b0 d8 01 c0       	mov    edx,0xc001d8b0
c00085b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085b4:	89 10                	mov    DWORD PTR [eax],edx
c00085b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085ba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00085be:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00085c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085c5:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00085cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085d0:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00085d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085db:	83 ec 0c             	sub    esp,0xc
c00085de:	50                   	push   eax
c00085df:	e8 ad f6 ff ff       	call   c0007c91 <malloc>
c00085e4:	83 c4 10             	add    esp,0x10
c00085e7:	89 c2                	mov    edx,eax
c00085e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085ed:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00085f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085f4:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00085f8:	90                   	nop
c00085f9:	83 c4 0c             	add    esp,0xc
c00085fc:	c3                   	ret    
c00085fd:	90                   	nop

c00085fe <VgaText::isAtty()>:
c00085fe:	b0 01                	mov    al,0x1
c0008600:	c3                   	ret    
c0008601:	90                   	nop

c0008602 <VgaText::~VgaText()>:
c0008602:	83 ec 0c             	sub    esp,0xc
c0008605:	ba 38 d9 01 c0       	mov    edx,0xc001d938
c000860a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000860e:	89 10                	mov    DWORD PTR [eax],edx
c0008610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008614:	83 ec 0c             	sub    esp,0xc
c0008617:	50                   	push   eax
c0008618:	e8 5b 0e 00 00       	call   c0009478 <UnixFile::~UnixFile()>
c000861d:	83 c4 10             	add    esp,0x10
c0008620:	90                   	nop
c0008621:	83 c4 0c             	add    esp,0xc
c0008624:	c3                   	ret    
c0008625:	90                   	nop

c0008626 <VgaText::~VgaText()>:
c0008626:	83 ec 0c             	sub    esp,0xc
c0008629:	83 ec 0c             	sub    esp,0xc
c000862c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008630:	e8 cd ff ff ff       	call   c0008602 <VgaText::~VgaText()>
c0008635:	83 c4 10             	add    esp,0x10
c0008638:	83 ec 08             	sub    esp,0x8
c000863b:	68 34 01 00 00       	push   0x134
c0008640:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008644:	e8 ed 21 00 00       	call   c000a836 <operator delete(void*, unsigned long)>
c0008649:	83 c4 10             	add    esp,0x10
c000864c:	83 c4 0c             	add    esp,0xc
c000864f:	c3                   	ret    

c0008650 <VgaText::read(unsigned long long, void*, int*)>:
c0008650:	83 ec 10             	sub    esp,0x10
c0008653:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008657:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000865b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000865f:	e8 22 45 00 00       	call   c000cb86 <readKeyboard(VgaText*, char*, unsigned long)>
c0008664:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008668:	89 02                	mov    DWORD PTR [edx],eax
c000866a:	31 c0                	xor    eax,eax
c000866c:	83 c4 1c             	add    esp,0x1c
c000866f:	c3                   	ret    

c0008670 <setTerminalScrollLock(bool)>:
c0008670:	c3                   	ret    

c0008671 <doTerminalCycle()>:
c0008671:	c3                   	ret    

c0008672 <addToTerminalCycle(VgaText*)>:
c0008672:	c3                   	ret    

c0008673 <scrollTerminalScrollLock(int)>:
c0008673:	c3                   	ret    

c0008674 <VgaText::updateTitle()>:
c0008674:	c3                   	ret    
c0008675:	90                   	nop

c0008676 <VgaText::load()>:
c0008676:	c3                   	ret    
c0008677:	90                   	nop

c0008678 <VgaText::updateCursor()>:
c0008678:	83 ec 14             	sub    esp,0x14
c000867b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000867f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008682:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008685:	e8 7e de 00 00       	call   c0016508 <HalConsoleCursorUpdate(int, int)>
c000868a:	83 c4 1c             	add    esp,0x1c
c000868d:	c3                   	ret    

c000868e <VgaText::doANSI_SGR(int)>:
c000868e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008692:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008696:	85 d2                	test   edx,edx
c0008698:	75 0b                	jne    c00086a5 <VgaText::doANSI_SGR(int)+0x17>
c000869a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000869d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00086a0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00086a3:	eb 59                	jmp    c00086fe <VgaText::doANSI_SGR(int)+0x70>
c00086a5:	83 fa 07             	cmp    edx,0x7
c00086a8:	75 0b                	jne    c00086b5 <VgaText::doANSI_SGR(int)+0x27>
c00086aa:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00086ad:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00086b0:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00086b3:	eb 49                	jmp    c00086fe <VgaText::doANSI_SGR(int)+0x70>
c00086b5:	83 fa 1b             	cmp    edx,0x1b
c00086b8:	74 e0                	je     c000869a <VgaText::doANSI_SGR(int)+0xc>
c00086ba:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00086bd:	83 f9 07             	cmp    ecx,0x7
c00086c0:	77 09                	ja     c00086cb <VgaText::doANSI_SGR(int)+0x3d>
c00086c2:	8b 14 8d 60 f7 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe08a0]
c00086c9:	eb 20                	jmp    c00086eb <VgaText::doANSI_SGR(int)+0x5d>
c00086cb:	8d 4a d8             	lea    ecx,[edx-0x28]
c00086ce:	83 f9 07             	cmp    ecx,0x7
c00086d1:	77 09                	ja     c00086dc <VgaText::doANSI_SGR(int)+0x4e>
c00086d3:	8b 14 8d 60 f7 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe08a0]
c00086da:	eb 22                	jmp    c00086fe <VgaText::doANSI_SGR(int)+0x70>
c00086dc:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00086df:	83 f9 07             	cmp    ecx,0x7
c00086e2:	77 0b                	ja     c00086ef <VgaText::doANSI_SGR(int)+0x61>
c00086e4:	8b 14 95 18 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe09e8]
c00086eb:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00086ee:	c3                   	ret    
c00086ef:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00086f2:	83 f9 07             	cmp    ecx,0x7
c00086f5:	77 0a                	ja     c0008701 <VgaText::doANSI_SGR(int)+0x73>
c00086f7:	8b 14 95 f0 f5 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0a10]
c00086fe:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008701:	c3                   	ret    

c0008702 <VgaText::setDefaultBgColour(VgaColour)>:
c0008702:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008706:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000870a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000870d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008710:	c3                   	ret    
c0008711:	90                   	nop

c0008712 <VgaText::setDefaultFgColour(VgaColour)>:
c0008712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008716:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000871a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000871d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008720:	c3                   	ret    
c0008721:	90                   	nop

c0008722 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0008722:	53                   	push   ebx
c0008723:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008727:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000872b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000872f:	51                   	push   ecx
c0008730:	e8 cd ff ff ff       	call   c0008702 <VgaText::setDefaultBgColour(VgaColour)>
c0008735:	58                   	pop    eax
c0008736:	5a                   	pop    edx
c0008737:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000873b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000873f:	5b                   	pop    ebx
c0008740:	eb d0                	jmp    c0008712 <VgaText::setDefaultFgColour(VgaColour)>

c0008742 <VgaText::setTitleTextColour(VgaColour)>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874a:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000874d:	c3                   	ret    

c000874e <VgaText::setTitleColour(VgaColour)>:
c000874e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008752:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008756:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008759:	c3                   	ret    

c000875a <VgaText::setTitle(char*)>:
c000875a:	c3                   	ret    
c000875b:	90                   	nop

c000875c <VgaText::combineColours(unsigned char, unsigned char)>:
c000875c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008760:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0008765:	83 e0 0f             	and    eax,0xf
c0008768:	c1 e2 04             	shl    edx,0x4
c000876b:	09 d0                	or     eax,edx
c000876d:	c3                   	ret    

c000876e <VgaText::scrollScreen()>:
c000876e:	55                   	push   ebp
c000876f:	b9 01 00 00 00       	mov    ecx,0x1
c0008774:	57                   	push   edi
c0008775:	56                   	push   esi
c0008776:	53                   	push   ebx
c0008777:	83 ec 0c             	sub    esp,0xc
c000877a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000877e:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0008784:	31 ff                	xor    edi,edi
c0008786:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008789:	83 f9 18             	cmp    ecx,0x18
c000878c:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000878f:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0008796:	75 27                	jne    c00087bf <VgaText::scrollScreen()+0x51>
c0008798:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000879b:	01 f5                	add    ebp,esi
c000879d:	f7 c7 01 00 00 00    	test   edi,0x1
c00087a3:	74 16                	je     c00087bb <VgaText::scrollScreen()+0x4d>
c00087a5:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00087a9:	50                   	push   eax
c00087aa:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00087ae:	50                   	push   eax
c00087af:	e8 a8 ff ff ff       	call   c000875c <VgaText::combineColours(unsigned char, unsigned char)>
c00087b4:	5a                   	pop    edx
c00087b5:	5a                   	pop    edx
c00087b6:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00087b9:	eb 04                	jmp    c00087bf <VgaText::scrollScreen()+0x51>
c00087bb:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00087bf:	47                   	inc    edi
c00087c0:	46                   	inc    esi
c00087c1:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00087c7:	75 bd                	jne    c0008786 <VgaText::scrollScreen()+0x18>
c00087c9:	41                   	inc    ecx
c00087ca:	83 f9 19             	cmp    ecx,0x19
c00087cd:	75 af                	jne    c000877e <VgaText::scrollScreen()+0x10>
c00087cf:	39 1d 04 0a 02 c0    	cmp    DWORD PTR ds:0xc0020a04,ebx
c00087d5:	75 1f                	jne    c00087f6 <VgaText::scrollScreen()+0x88>
c00087d7:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00087db:	74 05                	je     c00087e2 <VgaText::scrollScreen()+0x74>
c00087dd:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00087e0:	eb 14                	jmp    c00087f6 <VgaText::scrollScreen()+0x88>
c00087e2:	50                   	push   eax
c00087e3:	50                   	push   eax
c00087e4:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00087e8:	50                   	push   eax
c00087e9:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00087ed:	50                   	push   eax
c00087ee:	e8 a1 db 00 00       	call   c0016394 <HalConsoleScroll(int, int)>
c00087f3:	83 c4 10             	add    esp,0x10
c00087f6:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00087fa:	83 c4 0c             	add    esp,0xc
c00087fd:	5b                   	pop    ebx
c00087fe:	5e                   	pop    esi
c00087ff:	5f                   	pop    edi
c0008800:	5d                   	pop    ebp
c0008801:	e9 72 fe ff ff       	jmp    c0008678 <VgaText::updateCursor()>

c0008806 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008806:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000880b:	c1 e0 08             	shl    eax,0x8
c000880e:	89 c2                	mov    edx,eax
c0008810:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0008815:	09 d0                	or     eax,edx
c0008817:	c3                   	ret    

c0008818 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008818:	55                   	push   ebp
c0008819:	57                   	push   edi
c000881a:	56                   	push   esi
c000881b:	53                   	push   ebx
c000881c:	83 ec 1c             	sub    esp,0x1c
c000881f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008823:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008827:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000882b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000882f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0008833:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008837:	0f b6 c3             	movzx  eax,bl
c000883a:	50                   	push   eax
c000883b:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008840:	50                   	push   eax
c0008841:	e8 16 ff ff ff       	call   c000875c <VgaText::combineColours(unsigned char, unsigned char)>
c0008846:	5a                   	pop    edx
c0008847:	0f b6 c0             	movzx  eax,al
c000884a:	59                   	pop    ecx
c000884b:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008850:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008854:	50                   	push   eax
c0008855:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008859:	e8 a8 ff ff ff       	call   c0008806 <VgaText::combineCharAndColour(char, unsigned char)>
c000885e:	5a                   	pop    edx
c000885f:	66 6b d7 50          	imul   dx,di,0x50
c0008863:	59                   	pop    ecx
c0008864:	01 f2                	add    edx,esi
c0008866:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008869:	0f b7 d2             	movzx  edx,dx
c000886c:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008870:	39 2d 04 0a 02 c0    	cmp    DWORD PTR ds:0xc0020a04,ebp
c0008876:	75 28                	jne    c00088a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c0008878:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000887c:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008880:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008884:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008888:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000888c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008890:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008894:	83 c4 1c             	add    esp,0x1c
c0008897:	5b                   	pop    ebx
c0008898:	5e                   	pop    esi
c0008899:	5f                   	pop    edi
c000889a:	5d                   	pop    ebp
c000889b:	e9 fc db 00 00       	jmp    c001649c <HalConsoleWriteCharacter(char, int, int, int, int)>
c00088a0:	83 c4 1c             	add    esp,0x1c
c00088a3:	5b                   	pop    ebx
c00088a4:	5e                   	pop    esi
c00088a5:	5f                   	pop    edi
c00088a6:	5d                   	pop    ebp
c00088a7:	c3                   	ret    

c00088a8 <VgaText::getCursorX()>:
c00088a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00088ac:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00088af:	c3                   	ret    

c00088b0 <VgaText::getCursorY()>:
c00088b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00088b4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00088b7:	c3                   	ret    

c00088b8 <VgaText::setCursor(int, int)>:
c00088b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00088bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00088c0:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00088c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00088c7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00088ca:	e9 a9 fd ff ff       	jmp    c0008678 <VgaText::updateCursor()>

c00088cf <setActiveTerminal(VgaText*)>:
c00088cf:	53                   	push   ebx
c00088d0:	83 ec 08             	sub    esp,0x8
c00088d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088d7:	85 db                	test   ebx,ebx
c00088d9:	75 11                	jne    c00088ec <setActiveTerminal(VgaText*)+0x1d>
c00088db:	c7 44 24 10 c4 d8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d8c4
c00088e3:	83 c4 08             	add    esp,0x8
c00088e6:	5b                   	pop    ebx
c00088e7:	e9 a3 7c 00 00       	jmp    c001058f <KePanic(char const*)>
c00088ec:	a1 04 0a 02 c0       	mov    eax,ds:0xc0020a04
c00088f1:	85 c0                	test   eax,eax
c00088f3:	74 0c                	je     c0008901 <setActiveTerminal(VgaText*)+0x32>
c00088f5:	83 ec 0c             	sub    esp,0xc
c00088f8:	50                   	push   eax
c00088f9:	e8 7a fd ff ff       	call   c0008678 <VgaText::updateCursor()>
c00088fe:	83 c4 10             	add    esp,0x10
c0008901:	89 1d 04 0a 02 c0    	mov    DWORD PTR ds:0xc0020a04,ebx
c0008907:	50                   	push   eax
c0008908:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000890b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000890e:	53                   	push   ebx
c000890f:	e8 a4 ff ff ff       	call   c00088b8 <VgaText::setCursor(int, int)>
c0008914:	83 c4 18             	add    esp,0x18
c0008917:	5b                   	pop    ebx
c0008918:	c3                   	ret    
c0008919:	90                   	nop

c000891a <VgaText::clearScreen()>:
c000891a:	57                   	push   edi
c000891b:	56                   	push   esi
c000891c:	31 f6                	xor    esi,esi
c000891e:	53                   	push   ebx
c000891f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008923:	52                   	push   edx
c0008924:	6a 00                	push   0x0
c0008926:	6a 00                	push   0x0
c0008928:	53                   	push   ebx
c0008929:	e8 8a ff ff ff       	call   c00088b8 <VgaText::setCursor(int, int)>
c000892e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008935:	83 c4 10             	add    esp,0x10
c0008938:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000893b:	7e 20                	jle    c000895d <VgaText::clearScreen()+0x43>
c000893d:	31 ff                	xor    edi,edi
c000893f:	50                   	push   eax
c0008940:	50                   	push   eax
c0008941:	56                   	push   esi
c0008942:	57                   	push   edi
c0008943:	47                   	inc    edi
c0008944:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008947:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000894a:	6a 20                	push   0x20
c000894c:	53                   	push   ebx
c000894d:	e8 c6 fe ff ff       	call   c0008818 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008952:	83 c4 20             	add    esp,0x20
c0008955:	83 ff 50             	cmp    edi,0x50
c0008958:	75 e5                	jne    c000893f <VgaText::clearScreen()+0x25>
c000895a:	46                   	inc    esi
c000895b:	eb db                	jmp    c0008938 <VgaText::clearScreen()+0x1e>
c000895d:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008964:	5b                   	pop    ebx
c0008965:	5e                   	pop    esi
c0008966:	5f                   	pop    edi
c0008967:	c3                   	ret    

c0008968 <VgaText::setCursorX(int)>:
c0008968:	83 ec 10             	sub    esp,0x10
c000896b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000896f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008976:	50                   	push   eax
c0008977:	e8 3c ff ff ff       	call   c00088b8 <VgaText::setCursor(int, int)>
c000897c:	83 c4 1c             	add    esp,0x1c
c000897f:	c3                   	ret    

c0008980 <VgaText::setCursorY(int)>:
c0008980:	83 ec 10             	sub    esp,0x10
c0008983:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008987:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000898b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000898e:	50                   	push   eax
c000898f:	e8 24 ff ff ff       	call   c00088b8 <VgaText::setCursor(int, int)>
c0008994:	83 c4 1c             	add    esp,0x1c
c0008997:	c3                   	ret    

c0008998 <VgaText::incrementCursor(bool)>:
c0008998:	56                   	push   esi
c0008999:	53                   	push   ebx
c000899a:	51                   	push   ecx
c000899b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000899f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00089a3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00089a6:	40                   	inc    eax
c00089a7:	83 f8 50             	cmp    eax,0x50
c00089aa:	74 05                	je     c00089b1 <VgaText::incrementCursor(bool)+0x19>
c00089ac:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00089af:	eb 24                	jmp    c00089d5 <VgaText::incrementCursor(bool)+0x3d>
c00089b1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00089b4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00089bb:	8d 50 01             	lea    edx,[eax+0x1]
c00089be:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00089c1:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00089c4:	75 0f                	jne    c00089d5 <VgaText::incrementCursor(bool)+0x3d>
c00089c6:	83 ec 0c             	sub    esp,0xc
c00089c9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00089cc:	53                   	push   ebx
c00089cd:	e8 9c fd ff ff       	call   c000876e <VgaText::scrollScreen()>
c00089d2:	83 c4 10             	add    esp,0x10
c00089d5:	89 f0                	mov    eax,esi
c00089d7:	84 c0                	test   al,al
c00089d9:	74 0c                	je     c00089e7 <VgaText::incrementCursor(bool)+0x4f>
c00089db:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00089df:	5a                   	pop    edx
c00089e0:	5b                   	pop    ebx
c00089e1:	5e                   	pop    esi
c00089e2:	e9 91 fc ff ff       	jmp    c0008678 <VgaText::updateCursor()>
c00089e7:	58                   	pop    eax
c00089e8:	5b                   	pop    ebx
c00089e9:	5e                   	pop    esi
c00089ea:	c3                   	ret    
c00089eb:	90                   	nop

c00089ec <VgaText::decrementCursor(bool)>:
c00089ec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089f0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00089f4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00089f7:	85 c0                	test   eax,eax
c00089f9:	74 04                	je     c00089ff <VgaText::decrementCursor(bool)+0x13>
c00089fb:	48                   	dec    eax
c00089fc:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00089ff:	84 c9                	test   cl,cl
c0008a01:	74 09                	je     c0008a0c <VgaText::decrementCursor(bool)+0x20>
c0008a03:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008a07:	e9 6c fc ff ff       	jmp    c0008678 <VgaText::updateCursor()>
c0008a0c:	c3                   	ret    
c0008a0d:	90                   	nop

c0008a0e <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008a0e:	53                   	push   ebx
c0008a0f:	83 ec 08             	sub    esp,0x8
c0008a12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008a16:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a1a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a1e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008a22:	3c 07                	cmp    al,0x7
c0008a24:	75 21                	jne    c0008a47 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c0008a26:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008a2e:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0008a36:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008a3e:	83 c4 08             	add    esp,0x8
c0008a41:	5b                   	pop    ebx
c0008a42:	e9 3c 2d 00 00       	jmp    c000b783 <Krnl::beep(int, int, bool)>
c0008a47:	3c 0d                	cmp    al,0xd
c0008a49:	75 09                	jne    c0008a54 <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008a4b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008a52:	eb 2c                	jmp    c0008a80 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008a54:	3c 0a                	cmp    al,0xa
c0008a56:	75 31                	jne    c0008a89 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008a58:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008a5b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008a62:	8d 50 01             	lea    edx,[eax+0x1]
c0008a65:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008a68:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008a6b:	75 0f                	jne    c0008a7c <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008a6d:	83 ec 0c             	sub    esp,0xc
c0008a70:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008a73:	53                   	push   ebx
c0008a74:	e8 f5 fc ff ff       	call   c000876e <VgaText::scrollScreen()>
c0008a79:	83 c4 10             	add    esp,0x10
c0008a7c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a80:	83 c4 08             	add    esp,0x8
c0008a83:	5b                   	pop    ebx
c0008a84:	e9 ef fb ff ff       	jmp    c0008678 <VgaText::updateCursor()>
c0008a89:	3c 08                	cmp    al,0x8
c0008a8b:	75 25                	jne    c0008ab2 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c0008a8d:	50                   	push   eax
c0008a8e:	50                   	push   eax
c0008a8f:	6a 01                	push   0x1
c0008a91:	53                   	push   ebx
c0008a92:	e8 55 ff ff ff       	call   c00089ec <VgaText::decrementCursor(bool)>
c0008a97:	5a                   	pop    edx
c0008a98:	59                   	pop    ecx
c0008a99:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008a9c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008a9f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008aa2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008aa5:	6a 20                	push   0x20
c0008aa7:	53                   	push   ebx
c0008aa8:	e8 6b fd ff ff       	call   c0008818 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008aad:	83 c4 28             	add    esp,0x28
c0008ab0:	5b                   	pop    ebx
c0008ab1:	c3                   	ret    
c0008ab2:	83 ec 08             	sub    esp,0x8
c0008ab5:	0f be c0             	movsx  eax,al
c0008ab8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008abb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008abe:	51                   	push   ecx
c0008abf:	52                   	push   edx
c0008ac0:	50                   	push   eax
c0008ac1:	53                   	push   ebx
c0008ac2:	e8 51 fd ff ff       	call   c0008818 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008ac7:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008acb:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008ad3:	83 c4 28             	add    esp,0x28
c0008ad6:	5b                   	pop    ebx
c0008ad7:	e9 bc fe ff ff       	jmp    c0008998 <VgaText::incrementCursor(bool)>

c0008adc <VgaText::putchar(char)>:
c0008adc:	56                   	push   esi
c0008add:	53                   	push   ebx
c0008ade:	83 ec 14             	sub    esp,0x14
c0008ae1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008ae5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008ae9:	3c 5b                	cmp    al,0x5b
c0008aeb:	75 18                	jne    c0008b05 <VgaText::putchar(char)+0x29>
c0008aed:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008af1:	74 1f                	je     c0008b12 <VgaText::putchar(char)+0x36>
c0008af3:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008af9:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008b00:	e9 bd 00 00 00       	jmp    c0008bc2 <VgaText::putchar(char)+0xe6>
c0008b05:	3c 1b                	cmp    al,0x1b
c0008b07:	75 09                	jne    c0008b12 <VgaText::putchar(char)+0x36>
c0008b09:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008b0d:	e9 b0 00 00 00       	jmp    c0008bc2 <VgaText::putchar(char)+0xe6>
c0008b12:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0008b15:	84 c9                	test   cl,cl
c0008b17:	0f 84 92 00 00 00    	je     c0008baf <VgaText::putchar(char)+0xd3>
c0008b1d:	8d 50 c0             	lea    edx,[eax-0x40]
c0008b20:	80 fa 3e             	cmp    dl,0x3e
c0008b23:	77 76                	ja     c0008b9b <VgaText::putchar(char)+0xbf>
c0008b25:	3c 6d                	cmp    al,0x6d
c0008b27:	75 47                	jne    c0008b70 <VgaText::putchar(char)+0x94>
c0008b29:	31 f6                	xor    esi,esi
c0008b2b:	31 d2                	xor    edx,edx
c0008b2d:	31 c0                	xor    eax,eax
c0008b2f:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0008b32:	7e 2d                	jle    c0008b61 <VgaText::putchar(char)+0x85>
c0008b34:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008b39:	80 fa 3b             	cmp    dl,0x3b
c0008b3c:	75 17                	jne    c0008b55 <VgaText::putchar(char)+0x79>
c0008b3e:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0008b42:	50                   	push   eax
c0008b43:	53                   	push   ebx
c0008b44:	e8 45 fb ff ff       	call   c000868e <VgaText::doANSI_SGR(int)>
c0008b49:	59                   	pop    ecx
c0008b4a:	31 d2                	xor    edx,edx
c0008b4c:	58                   	pop    eax
c0008b4d:	31 c0                	xor    eax,eax
c0008b4f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0008b53:	eb 09                	jmp    c0008b5e <VgaText::putchar(char)+0x82>
c0008b55:	6b c0 0a             	imul   eax,eax,0xa
c0008b58:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008b5c:	88 ca                	mov    dl,cl
c0008b5e:	46                   	inc    esi
c0008b5f:	eb ce                	jmp    c0008b2f <VgaText::putchar(char)+0x53>
c0008b61:	84 d2                	test   dl,dl
c0008b63:	74 2e                	je     c0008b93 <VgaText::putchar(char)+0xb7>
c0008b65:	50                   	push   eax
c0008b66:	53                   	push   ebx
c0008b67:	e8 22 fb ff ff       	call   c000868e <VgaText::doANSI_SGR(int)>
c0008b6c:	58                   	pop    eax
c0008b6d:	5a                   	pop    edx
c0008b6e:	eb 23                	jmp    c0008b93 <VgaText::putchar(char)+0xb7>
c0008b70:	3c 4a                	cmp    al,0x4a
c0008b72:	75 1f                	jne    c0008b93 <VgaText::putchar(char)+0xb7>
c0008b74:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008b78:	75 19                	jne    c0008b93 <VgaText::putchar(char)+0xb7>
c0008b7a:	83 ec 0c             	sub    esp,0xc
c0008b7d:	53                   	push   ebx
c0008b7e:	e8 97 fd ff ff       	call   c000891a <VgaText::clearScreen()>
c0008b83:	83 c4 0c             	add    esp,0xc
c0008b86:	6a 00                	push   0x0
c0008b88:	6a 00                	push   0x0
c0008b8a:	53                   	push   ebx
c0008b8b:	e8 28 fd ff ff       	call   c00088b8 <VgaText::setCursor(int, int)>
c0008b90:	83 c4 10             	add    esp,0x10
c0008b93:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008b99:	eb 27                	jmp    c0008bc2 <VgaText::putchar(char)+0xe6>
c0008b9b:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0008b9e:	83 fa 0e             	cmp    edx,0xe
c0008ba1:	7f 1f                	jg     c0008bc2 <VgaText::putchar(char)+0xe6>
c0008ba3:	8d 4a 01             	lea    ecx,[edx+0x1]
c0008ba6:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008ba9:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0008bad:	eb 13                	jmp    c0008bc2 <VgaText::putchar(char)+0xe6>
c0008baf:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bb2:	0f be c0             	movsx  eax,al
c0008bb5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bb8:	50                   	push   eax
c0008bb9:	53                   	push   ebx
c0008bba:	e8 4f fe ff ff       	call   c0008a0e <VgaText::putchar(char, VgaColour, VgaColour)>
c0008bbf:	83 c4 10             	add    esp,0x10
c0008bc2:	83 c4 14             	add    esp,0x14
c0008bc5:	5b                   	pop    ebx
c0008bc6:	5e                   	pop    esi
c0008bc7:	c3                   	ret    

c0008bc8 <VgaText::putx(unsigned int)>:
c0008bc8:	57                   	push   edi
c0008bc9:	b9 11 00 00 00       	mov    ecx,0x11
c0008bce:	56                   	push   esi
c0008bcf:	be d2 d8 01 c0       	mov    esi,0xc001d8d2
c0008bd4:	53                   	push   ebx
c0008bd5:	83 ec 20             	sub    esp,0x20
c0008bd8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008bdc:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008be0:	fc                   	cld    
c0008be1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008be3:	be 08 00 00 00       	mov    esi,0x8
c0008be8:	50                   	push   eax
c0008be9:	50                   	push   eax
c0008bea:	89 d8                	mov    eax,ebx
c0008bec:	c1 e3 04             	shl    ebx,0x4
c0008bef:	c1 e8 1c             	shr    eax,0x1c
c0008bf2:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008bf7:	50                   	push   eax
c0008bf8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008bfc:	e8 db fe ff ff       	call   c0008adc <VgaText::putchar(char)>
c0008c01:	83 c4 10             	add    esp,0x10
c0008c04:	4e                   	dec    esi
c0008c05:	75 e1                	jne    c0008be8 <VgaText::putx(unsigned int)+0x20>
c0008c07:	83 c4 20             	add    esp,0x20
c0008c0a:	5b                   	pop    ebx
c0008c0b:	5e                   	pop    esi
c0008c0c:	5f                   	pop    edi
c0008c0d:	c3                   	ret    

c0008c0e <VgaText::puts(char const*)>:
c0008c0e:	53                   	push   ebx
c0008c0f:	83 ec 08             	sub    esp,0x8
c0008c12:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008c16:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008c19:	84 c0                	test   al,al
c0008c1b:	74 12                	je     c0008c2f <VgaText::puts(char const*)+0x21>
c0008c1d:	43                   	inc    ebx
c0008c1e:	51                   	push   ecx
c0008c1f:	51                   	push   ecx
c0008c20:	50                   	push   eax
c0008c21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008c25:	e8 b2 fe ff ff       	call   c0008adc <VgaText::putchar(char)>
c0008c2a:	83 c4 10             	add    esp,0x10
c0008c2d:	eb e7                	jmp    c0008c16 <VgaText::puts(char const*)+0x8>
c0008c2f:	83 c4 08             	add    esp,0x8
c0008c32:	5b                   	pop    ebx
c0008c33:	c3                   	ret    

c0008c34 <VgaText::write(unsigned long long, void*, int*)>:
c0008c34:	55                   	push   ebp
c0008c35:	57                   	push   edi
c0008c36:	56                   	push   esi
c0008c37:	53                   	push   ebx
c0008c38:	83 ec 0c             	sub    esp,0xc
c0008c3b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008c3f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008c43:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008c47:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008c4e:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008c51:	39 eb                	cmp    ebx,ebp
c0008c53:	74 13                	je     c0008c68 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008c55:	43                   	inc    ebx
c0008c56:	50                   	push   eax
c0008c57:	50                   	push   eax
c0008c58:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008c5c:	50                   	push   eax
c0008c5d:	56                   	push   esi
c0008c5e:	e8 79 fe ff ff       	call   c0008adc <VgaText::putchar(char)>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	eb e9                	jmp    c0008c51 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008c68:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008c6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c73:	89 38                	mov    DWORD PTR [eax],edi
c0008c75:	83 c4 0c             	add    esp,0xc
c0008c78:	31 c0                	xor    eax,eax
c0008c7a:	5b                   	pop    ebx
c0008c7b:	5e                   	pop    esi
c0008c7c:	5f                   	pop    edi
c0008c7d:	5d                   	pop    ebp
c0008c7e:	c3                   	ret    
c0008c7f:	90                   	nop

c0008c80 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008c80:	55                   	push   ebp
c0008c81:	57                   	push   edi
c0008c82:	56                   	push   esi
c0008c83:	53                   	push   ebx
c0008c84:	83 ec 0c             	sub    esp,0xc
c0008c87:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008c8b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008c90:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008c97:	50                   	push   eax
c0008c98:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008c9d:	50                   	push   eax
c0008c9e:	e8 b9 fa ff ff       	call   c000875c <VgaText::combineColours(unsigned char, unsigned char)>
c0008ca3:	5a                   	pop    edx
c0008ca4:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008ca9:	59                   	pop    ecx
c0008caa:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008cad:	89 c5                	mov    ebp,eax
c0008caf:	0f b7 f6             	movzx  esi,si
c0008cb2:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008cb6:	01 f6                	add    esi,esi
c0008cb8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008cbb:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008cbe:	84 c0                	test   al,al
c0008cc0:	0f 84 f4 00 00 00    	je     c0008dba <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0008cc6:	3c 0d                	cmp    al,0xd
c0008cc8:	75 0c                	jne    c0008cd6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0008cca:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008cd1:	e9 de 00 00 00       	jmp    c0008db4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008cd6:	3c 0a                	cmp    al,0xa
c0008cd8:	75 45                	jne    c0008d1f <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008cda:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008cdd:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008ce4:	8d 48 01             	lea    ecx,[eax+0x1]
c0008ce7:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008cea:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008ced:	75 0f                	jne    c0008cfe <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008cef:	83 ec 0c             	sub    esp,0xc
c0008cf2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008cf5:	53                   	push   ebx
c0008cf6:	e8 73 fa ff ff       	call   c000876e <VgaText::scrollScreen()>
c0008cfb:	83 c4 10             	add    esp,0x10
c0008cfe:	83 ec 0c             	sub    esp,0xc
c0008d01:	53                   	push   ebx
c0008d02:	e8 71 f9 ff ff       	call   c0008678 <VgaText::updateCursor()>
c0008d07:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008d0c:	83 c4 10             	add    esp,0x10
c0008d0f:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008d12:	0f b7 f6             	movzx  esi,si
c0008d15:	01 f6                	add    esi,esi
c0008d17:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008d1a:	e9 95 00 00 00       	jmp    c0008db4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008d1f:	3c 08                	cmp    al,0x8
c0008d21:	75 35                	jne    c0008d58 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c0008d23:	51                   	push   ecx
c0008d24:	51                   	push   ecx
c0008d25:	6a 01                	push   0x1
c0008d27:	53                   	push   ebx
c0008d28:	e8 bf fc ff ff       	call   c00089ec <VgaText::decrementCursor(bool)>
c0008d2d:	5e                   	pop    esi
c0008d2e:	58                   	pop    eax
c0008d2f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008d32:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008d35:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008d38:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008d3b:	6a 20                	push   0x20
c0008d3d:	53                   	push   ebx
c0008d3e:	e8 d5 fa ff ff       	call   c0008818 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008d43:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008d48:	83 c4 20             	add    esp,0x20
c0008d4b:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008d4e:	0f b7 f6             	movzx  esi,si
c0008d51:	01 f6                	add    esi,esi
c0008d53:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008d56:	eb 5c                	jmp    c0008db4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008d58:	52                   	push   edx
c0008d59:	52                   	push   edx
c0008d5a:	89 ea                	mov    edx,ebp
c0008d5c:	0f b6 ca             	movzx  ecx,dl
c0008d5f:	51                   	push   ecx
c0008d60:	50                   	push   eax
c0008d61:	e8 a0 fa ff ff       	call   c0008806 <VgaText::combineCharAndColour(char, unsigned char)>
c0008d66:	83 c4 10             	add    esp,0x10
c0008d69:	66 89 06             	mov    WORD PTR [esi],ax
c0008d6c:	39 1d 04 0a 02 c0    	cmp    DWORD PTR ds:0xc0020a04,ebx
c0008d72:	75 1d                	jne    c0008d91 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c0008d74:	83 ec 0c             	sub    esp,0xc
c0008d77:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008d7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008d7d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008d81:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008d85:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008d88:	50                   	push   eax
c0008d89:	e8 0e d7 00 00       	call   c001649c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008d8e:	83 c4 20             	add    esp,0x20
c0008d91:	83 c6 02             	add    esi,0x2
c0008d94:	50                   	push   eax
c0008d95:	50                   	push   eax
c0008d96:	6a 00                	push   0x0
c0008d98:	53                   	push   ebx
c0008d99:	e8 fa fb ff ff       	call   c0008998 <VgaText::incrementCursor(bool)>
c0008d9e:	83 c4 10             	add    esp,0x10
c0008da1:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008da5:	75 0d                	jne    c0008db4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008da7:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008dac:	0f b7 f6             	movzx  esi,si
c0008daf:	01 f6                	add    esi,esi
c0008db1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008db4:	47                   	inc    edi
c0008db5:	e9 01 ff ff ff       	jmp    c0008cbb <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008dba:	83 ec 0c             	sub    esp,0xc
c0008dbd:	53                   	push   ebx
c0008dbe:	e8 b5 f8 ff ff       	call   c0008678 <VgaText::updateCursor()>
c0008dc3:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008dca:	83 c4 1c             	add    esp,0x1c
c0008dcd:	5b                   	pop    ebx
c0008dce:	5e                   	pop    esi
c0008dcf:	5f                   	pop    edi
c0008dd0:	5d                   	pop    ebp
c0008dd1:	c3                   	ret    

c0008dd2 <VgaText::VgaText(char const*)>:
c0008dd2:	56                   	push   esi
c0008dd3:	53                   	push   ebx
c0008dd4:	83 ec 04             	sub    esp,0x4
c0008dd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ddb:	83 ec 08             	sub    esp,0x8
c0008dde:	6a 00                	push   0x0
c0008de0:	50                   	push   eax
c0008de1:	e8 b0 04 00 00       	call   c0009296 <UnixFile::UnixFile(int)>
c0008de6:	83 c4 10             	add    esp,0x10
c0008de9:	ba 38 d9 01 c0       	mov    edx,0xc001d938
c0008dee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008df2:	89 10                	mov    DWORD PTR [eax],edx
c0008df4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008df8:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008dff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e03:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008e0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e0e:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e16:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008e1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e1e:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e29:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e34:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008e3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e3f:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008e46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e4a:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008e51:	83 ec 0c             	sub    esp,0xc
c0008e54:	6a 01                	push   0x1
c0008e56:	e8 7e 08 00 00       	call   c00096d9 <Virt::allocateKernelVirtualPages(int)>
c0008e5b:	83 c4 10             	add    esp,0x10
c0008e5e:	89 c2                	mov    edx,eax
c0008e60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e64:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008e67:	8b 1d b0 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ab0
c0008e6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e71:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008e74:	89 c6                	mov    esi,eax
c0008e76:	e8 f2 f0 ff ff       	call   c0007f6d <Phys::allocatePage()>
c0008e7b:	68 05 0c 00 00       	push   0xc05
c0008e80:	56                   	push   esi
c0008e81:	50                   	push   eax
c0008e82:	53                   	push   ebx
c0008e83:	e8 e6 0e 00 00       	call   c0009d6e <VAS::mapPage(unsigned long, unsigned long, int)>
c0008e88:	83 c4 10             	add    esp,0x10
c0008e8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e8f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008e92:	83 ec 04             	sub    esp,0x4
c0008e95:	68 a0 0f 00 00       	push   0xfa0
c0008e9a:	6a 00                	push   0x0
c0008e9c:	50                   	push   eax
c0008e9d:	e8 2e 76 ff ff       	call   c00004d0 <memset>
c0008ea2:	83 c4 10             	add    esp,0x10
c0008ea5:	83 ec 04             	sub    esp,0x4
c0008ea8:	6a 00                	push   0x0
c0008eaa:	6a 07                	push   0x7
c0008eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008eb0:	e8 6d f8 ff ff       	call   c0008722 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008eb5:	83 c4 10             	add    esp,0x10
c0008eb8:	83 ec 04             	sub    esp,0x4
c0008ebb:	6a 00                	push   0x0
c0008ebd:	6a 00                	push   0x0
c0008ebf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ec3:	e8 f0 f9 ff ff       	call   c00088b8 <VgaText::setCursor(int, int)>
c0008ec8:	83 c4 10             	add    esp,0x10
c0008ecb:	83 ec 0c             	sub    esp,0xc
c0008ece:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ed2:	e8 43 fa ff ff       	call   c000891a <VgaText::clearScreen()>
c0008ed7:	83 c4 10             	add    esp,0x10
c0008eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ede:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008ee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ee6:	05 82 00 00 00       	add    eax,0x82
c0008eeb:	83 ec 04             	sub    esp,0x4
c0008eee:	6a 30                	push   0x30
c0008ef0:	6a 00                	push   0x0
c0008ef2:	50                   	push   eax
c0008ef3:	e8 d8 75 ff ff       	call   c00004d0 <memset>
c0008ef8:	83 c4 10             	add    esp,0x10
c0008efb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008eff:	05 b2 00 00 00       	add    eax,0xb2
c0008f04:	83 ec 04             	sub    esp,0x4
c0008f07:	68 80 00 00 00       	push   0x80
c0008f0c:	6a 00                	push   0x0
c0008f0e:	50                   	push   eax
c0008f0f:	e8 bc 75 ff ff       	call   c00004d0 <memset>
c0008f14:	83 c4 10             	add    esp,0x10
c0008f17:	90                   	nop
c0008f18:	83 c4 04             	add    esp,0x4
c0008f1b:	5b                   	pop    ebx
c0008f1c:	5e                   	pop    esi
c0008f1d:	c3                   	ret    

c0008f1e <VgaText::receiveKey(unsigned char)>:
c0008f1e:	57                   	push   edi
c0008f1f:	56                   	push   esi
c0008f20:	53                   	push   ebx
c0008f21:	83 ec 10             	sub    esp,0x10
c0008f24:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0008f28:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008f2c:	84 db                	test   bl,bl
c0008f2e:	0f 84 ba 00 00 00    	je     c0008fee <VgaText::receiveKey(unsigned char)+0xd0>
c0008f34:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c0008f3a:	80 fb 08             	cmp    bl,0x8
c0008f3d:	75 2c                	jne    c0008f6b <VgaText::receiveKey(unsigned char)+0x4d>
c0008f3f:	83 ec 0c             	sub    esp,0xc
c0008f42:	57                   	push   edi
c0008f43:	e8 f8 75 ff ff       	call   c0000540 <strlen>
c0008f48:	83 c4 10             	add    esp,0x10
c0008f4b:	85 c0                	test   eax,eax
c0008f4d:	74 41                	je     c0008f90 <VgaText::receiveKey(unsigned char)+0x72>
c0008f4f:	50                   	push   eax
c0008f50:	50                   	push   eax
c0008f51:	6a 08                	push   0x8
c0008f53:	56                   	push   esi
c0008f54:	e8 83 fb ff ff       	call   c0008adc <VgaText::putchar(char)>
c0008f59:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008f5c:	e8 df 75 ff ff       	call   c0000540 <strlen>
c0008f61:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c0008f69:	eb 22                	jmp    c0008f8d <VgaText::receiveKey(unsigned char)+0x6f>
c0008f6b:	0f be c3             	movsx  eax,bl
c0008f6e:	52                   	push   edx
c0008f6f:	52                   	push   edx
c0008f70:	50                   	push   eax
c0008f71:	56                   	push   esi
c0008f72:	e8 65 fb ff ff       	call   c0008adc <VgaText::putchar(char)>
c0008f77:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0008f7b:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008f80:	59                   	pop    ecx
c0008f81:	58                   	pop    eax
c0008f82:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008f86:	50                   	push   eax
c0008f87:	57                   	push   edi
c0008f88:	e8 33 78 ff ff       	call   c00007c0 <strcat>
c0008f8d:	83 c4 10             	add    esp,0x10
c0008f90:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0008f97:	75 05                	jne    c0008f9e <VgaText::receiveKey(unsigned char)+0x80>
c0008f99:	80 fb 0a             	cmp    bl,0xa
c0008f9c:	75 50                	jne    c0008fee <VgaText::receiveKey(unsigned char)+0xd0>
c0008f9e:	83 ec 0c             	sub    esp,0xc
c0008fa1:	81 c6 b2 00 00 00    	add    esi,0xb2
c0008fa7:	56                   	push   esi
c0008fa8:	e8 93 75 ff ff       	call   c0000540 <strlen>
c0008fad:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008fb0:	89 c3                	mov    ebx,eax
c0008fb2:	e8 89 75 ff ff       	call   c0000540 <strlen>
c0008fb7:	83 c4 10             	add    esp,0x10
c0008fba:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c0008fbe:	3d 80 00 00 00       	cmp    eax,0x80
c0008fc3:	76 10                	jbe    c0008fd5 <VgaText::receiveKey(unsigned char)+0xb7>
c0008fc5:	83 ec 0c             	sub    esp,0xc
c0008fc8:	68 e3 d8 01 c0       	push   0xc001d8e3
c0008fcd:	e8 bd 75 00 00       	call   c001058f <KePanic(char const*)>
c0008fd2:	83 c4 10             	add    esp,0x10
c0008fd5:	50                   	push   eax
c0008fd6:	50                   	push   eax
c0008fd7:	57                   	push   edi
c0008fd8:	56                   	push   esi
c0008fd9:	e8 e2 77 ff ff       	call   c00007c0 <strcat>
c0008fde:	83 c4 0c             	add    esp,0xc
c0008fe1:	6a 30                	push   0x30
c0008fe3:	6a 00                	push   0x0
c0008fe5:	57                   	push   edi
c0008fe6:	e8 e5 74 ff ff       	call   c00004d0 <memset>
c0008feb:	83 c4 10             	add    esp,0x10
c0008fee:	83 c4 10             	add    esp,0x10
c0008ff1:	5b                   	pop    ebx
c0008ff2:	5e                   	pop    esi
c0008ff3:	5f                   	pop    edi
c0008ff4:	c3                   	ret    
c0008ff5:	90                   	nop

c0008ff6 <VgaText::doUpdate()>:
c0008ff6:	c3                   	ret    

c0008ff7 <newTerminal(char*)>:
c0008ff7:	83 ec 28             	sub    esp,0x28
c0008ffa:	68 34 01 00 00       	push   0x134
c0008fff:	e8 8d ec ff ff       	call   c0007c91 <malloc>
c0009004:	5a                   	pop    edx
c0009005:	59                   	pop    ecx
c0009006:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000900a:	50                   	push   eax
c000900b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000900f:	e8 be fd ff ff       	call   c0008dd2 <VgaText::VgaText(char const*)>
c0009014:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009018:	83 c4 2c             	add    esp,0x2c
c000901b:	c3                   	ret    

c000901c <TSS::TSS()>:
c000901c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009020:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009027:	90                   	nop
c0009028:	c3                   	ret    
c0009029:	90                   	nop
c000902a:	66 90                	xchg   ax,ax

c000902c <TSS::setESP(unsigned long)>:
c000902c:	55                   	push   ebp
c000902d:	89 e5                	mov    ebp,esp
c000902f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009032:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009035:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009038:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000903b:	90                   	nop
c000903c:	5d                   	pop    ebp
c000903d:	c3                   	ret    
c000903e:	66 90                	xchg   ax,ax

c0009040 <TSS::flush()>:
c0009040:	55                   	push   ebp
c0009041:	89 e5                	mov    ebp,esp
c0009043:	83 ec 10             	sub    esp,0x10
c0009046:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009049:	8b 00                	mov    eax,DWORD PTR [eax]
c000904b:	83 c8 03             	or     eax,0x3
c000904e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0009052:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0009056:	66 89 d0             	mov    ax,dx
c0009059:	0f 00 d8             	ltr    ax
c000905c:	90                   	nop
c000905d:	c9                   	leave  
c000905e:	c3                   	ret    
c000905f:	90                   	nop

c0009060 <TSS::setup(unsigned long, unsigned long)>:
c0009060:	55                   	push   ebp
c0009061:	89 e5                	mov    ebp,esp
c0009063:	83 ec 18             	sub    esp,0x18
c0009066:	83 ec 0c             	sub    esp,0xc
c0009069:	6a 68                	push   0x68
c000906b:	e8 21 ec ff ff       	call   c0007c91 <malloc>
c0009070:	83 c4 10             	add    esp,0x10
c0009073:	89 c2                	mov    edx,eax
c0009075:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009078:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000907b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000907e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009081:	83 ec 04             	sub    esp,0x4
c0009084:	6a 68                	push   0x68
c0009086:	6a 00                	push   0x0
c0009088:	50                   	push   eax
c0009089:	e8 42 74 ff ff       	call   c00004d0 <memset>
c000908e:	83 c4 10             	add    esp,0x10
c0009091:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009094:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009097:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000909d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090a3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00090a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090af:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00090b2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00090b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090bb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00090c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090c7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00090cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090d3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00090d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090df:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00090e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090eb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00090f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090f7:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00090fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009100:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009103:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009106:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009109:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000910c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000910f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009112:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009115:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009118:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000911b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009122:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009125:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009128:	0f 20 da             	mov    edx,cr3
c000912b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000912e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009131:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009134:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009137:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000913a:	83 ec 08             	sub    esp,0x8
c000913d:	50                   	push   eax
c000913e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009141:	50                   	push   eax
c0009142:	e8 cf e3 ff ff       	call   c0007516 <GDTEntry::setBase(unsigned int)>
c0009147:	83 c4 10             	add    esp,0x10
c000914a:	83 ec 08             	sub    esp,0x8
c000914d:	6a 68                	push   0x68
c000914f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009152:	50                   	push   eax
c0009153:	e8 da e3 ff ff       	call   c0007532 <GDTEntry::setLimit(unsigned int)>
c0009158:	83 c4 10             	add    esp,0x10
c000915b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000915f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009162:	83 e0 0f             	and    eax,0xf
c0009165:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009168:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000916b:	83 c8 40             	or     eax,0x40
c000916e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009171:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c0009176:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000917c:	05 78 01 00 00       	add    eax,0x178
c0009181:	83 ec 04             	sub    esp,0x4
c0009184:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009187:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000918a:	50                   	push   eax
c000918b:	e8 d6 e3 ff ff       	call   c0007566 <GDT::addEntry(GDTEntry)>
c0009190:	83 c4 10             	add    esp,0x10
c0009193:	89 c2                	mov    edx,eax
c0009195:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009198:	89 10                	mov    DWORD PTR [eax],edx
c000919a:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000919f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00091a5:	05 78 01 00 00       	add    eax,0x178
c00091aa:	83 ec 0c             	sub    esp,0xc
c00091ad:	50                   	push   eax
c00091ae:	e8 dd e3 ff ff       	call   c0007590 <GDT::flush()>
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00091b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00091bb:	c9                   	leave  
c00091bc:	c3                   	ret    
c00091bd:	90                   	nop

c00091be <ReservedFilename::read(unsigned long long, void*, int*)>:
c00091be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00091c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091c9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00091ce:	75 08                	jne    c00091d8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00091d0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00091d6:	eb 38                	jmp    c0009210 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00091d8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00091dd:	75 17                	jne    c00091f6 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00091df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00091e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00091e7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00091ed:	8b 10                	mov    edx,DWORD PTR [eax]
c00091ef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00091f3:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00091f6:	89 c1                	mov    ecx,eax
c00091f8:	83 e1 fd             	and    ecx,0xfffffffd
c00091fb:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009201:	74 cd                	je     c00091d0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009203:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009208:	83 e0 ef             	and    eax,0xffffffef
c000920b:	83 f8 08             	cmp    eax,0x8
c000920e:	76 c0                	jbe    c00091d0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009210:	31 c0                	xor    eax,eax
c0009212:	c3                   	ret    
c0009213:	90                   	nop

c0009214 <ReservedFilename::isAtty()>:
c0009214:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009218:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000921b:	31 c0                	xor    eax,eax
c000921d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009223:	74 09                	je     c000922e <ReservedFilename::isAtty()+0x1a>
c0009225:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000922b:	0f 94 c0             	sete   al
c000922e:	c3                   	ret    
c000922f:	90                   	nop

c0009230 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009230:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009234:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009238:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000923b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000923f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009244:	75 08                	jne    c000924e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009246:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000924c:	eb 3d                	jmp    c000928b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000924e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009253:	75 17                	jne    c000926c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009255:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000925a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000925d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009263:	8b 10                	mov    edx,DWORD PTR [eax]
c0009265:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009269:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000926c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009271:	75 04                	jne    c0009277 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009273:	89 0a                	mov    DWORD PTR [edx],ecx
c0009275:	eb 14                	jmp    c000928b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009277:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000927c:	74 c8                	je     c0009246 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000927e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009283:	83 e0 ef             	and    eax,0xffffffef
c0009286:	83 f8 08             	cmp    eax,0x8
c0009289:	76 bb                	jbe    c0009246 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000928b:	31 c0                	xor    eax,eax
c000928d:	c3                   	ret    

c000928e <UnixFile::getFileDescriptor()>:
c000928e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009292:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009295:	c3                   	ret    

c0009296 <UnixFile::UnixFile(int)>:
c0009296:	53                   	push   ebx
c0009297:	83 ec 28             	sub    esp,0x28
c000929a:	ba 00 da 01 c0       	mov    edx,0xc001da00
c000929f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00092a3:	89 10                	mov    DWORD PTR [eax],edx
c00092a5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00092ad:	0f 8f 8c 01 00 00    	jg     c000943f <UnixFile::UnixFile(int)+0x1a9>
c00092b3:	a1 a0 f7 01 c0       	mov    eax,ds:0xc001f7a0
c00092b8:	8d 50 01             	lea    edx,[eax+0x1]
c00092bb:	89 15 a0 f7 01 c0    	mov    DWORD PTR ds:0xc001f7a0,edx
c00092c1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00092c5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00092c8:	83 ec 08             	sub    esp,0x8
c00092cb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00092cf:	68 98 0a 02 c0       	push   0xc0020a98
c00092d4:	e8 1f 32 01 00       	call   c001c4f8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00092d9:	83 c4 10             	add    esp,0x10
c00092dc:	a0 94 0a 02 c0       	mov    al,ds:0xc0020a94
c00092e1:	83 f0 01             	xor    eax,0x1
c00092e4:	84 c0                	test   al,al
c00092e6:	0f 84 54 01 00 00    	je     c0009440 <UnixFile::UnixFile(int)+0x1aa>
c00092ec:	c6 05 94 0a 02 c0 01 	mov    BYTE PTR ds:0xc0020a94,0x1
c00092f3:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00092fb:	83 ec 0c             	sub    esp,0xc
c00092fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009302:	e8 8a e9 ff ff       	call   c0007c91 <malloc>
c0009307:	83 c4 10             	add    esp,0x10
c000930a:	89 c3                	mov    ebx,eax
c000930c:	83 ec 08             	sub    esp,0x8
c000930f:	68 03 ff ff 0f       	push   0xfffff03
c0009314:	53                   	push   ebx
c0009315:	e8 2c 01 00 00       	call   c0009446 <ReservedFilename::ReservedFilename(int)>
c000931a:	83 c4 10             	add    esp,0x10
c000931d:	89 1d 8c 0a 02 c0    	mov    DWORD PTR ds:0xc0020a8c,ebx
c0009323:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000932b:	83 ec 0c             	sub    esp,0xc
c000932e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009332:	e8 5a e9 ff ff       	call   c0007c91 <malloc>
c0009337:	83 c4 10             	add    esp,0x10
c000933a:	89 c3                	mov    ebx,eax
c000933c:	83 ec 08             	sub    esp,0x8
c000933f:	68 01 ff ff 0f       	push   0xfffff01
c0009344:	53                   	push   ebx
c0009345:	e8 fc 00 00 00       	call   c0009446 <ReservedFilename::ReservedFilename(int)>
c000934a:	83 c4 10             	add    esp,0x10
c000934d:	89 1d 90 0a 02 c0    	mov    DWORD PTR ds:0xc0020a90,ebx
c0009353:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000935b:	83 ec 0c             	sub    esp,0xc
c000935e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009362:	e8 2a e9 ff ff       	call   c0007c91 <malloc>
c0009367:	83 c4 10             	add    esp,0x10
c000936a:	89 c3                	mov    ebx,eax
c000936c:	83 ec 08             	sub    esp,0x8
c000936f:	68 00 ff ff 0f       	push   0xfffff00
c0009374:	53                   	push   ebx
c0009375:	e8 cc 00 00 00       	call   c0009446 <ReservedFilename::ReservedFilename(int)>
c000937a:	83 c4 10             	add    esp,0x10
c000937d:	89 1d 84 0a 02 c0    	mov    DWORD PTR ds:0xc0020a84,ebx
c0009383:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000938b:	83 ec 0c             	sub    esp,0xc
c000938e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009392:	e8 fa e8 ff ff       	call   c0007c91 <malloc>
c0009397:	83 c4 10             	add    esp,0x10
c000939a:	89 c3                	mov    ebx,eax
c000939c:	83 ec 08             	sub    esp,0x8
c000939f:	68 02 ff ff 0f       	push   0xfffff02
c00093a4:	53                   	push   ebx
c00093a5:	e8 9c 00 00 00       	call   c0009446 <ReservedFilename::ReservedFilename(int)>
c00093aa:	83 c4 10             	add    esp,0x10
c00093ad:	89 1d 88 0a 02 c0    	mov    DWORD PTR ds:0xc0020a88,ebx
c00093b3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00093bb:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00093c0:	7f 7e                	jg     c0009440 <UnixFile::UnixFile(int)+0x1aa>
c00093c2:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00093ca:	83 ec 0c             	sub    esp,0xc
c00093cd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093d1:	e8 bb e8 ff ff       	call   c0007c91 <malloc>
c00093d6:	83 c4 10             	add    esp,0x10
c00093d9:	89 c3                	mov    ebx,eax
c00093db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00093df:	05 10 ff ff 0f       	add    eax,0xfffff10
c00093e4:	83 ec 08             	sub    esp,0x8
c00093e7:	50                   	push   eax
c00093e8:	53                   	push   ebx
c00093e9:	e8 58 00 00 00       	call   c0009446 <ReservedFilename::ReservedFilename(int)>
c00093ee:	83 c4 10             	add    esp,0x10
c00093f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00093f5:	89 1c 85 60 0a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf5a0],ebx
c00093fc:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009404:	83 ec 0c             	sub    esp,0xc
c0009407:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940b:	e8 81 e8 ff ff       	call   c0007c91 <malloc>
c0009410:	83 c4 10             	add    esp,0x10
c0009413:	89 c3                	mov    ebx,eax
c0009415:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009419:	05 20 ff ff 0f       	add    eax,0xfffff20
c000941e:	83 ec 08             	sub    esp,0x8
c0009421:	50                   	push   eax
c0009422:	53                   	push   ebx
c0009423:	e8 1e 00 00 00       	call   c0009446 <ReservedFilename::ReservedFilename(int)>
c0009428:	83 c4 10             	add    esp,0x10
c000942b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000942f:	89 1c 85 20 0a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf5e0],ebx
c0009436:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000943a:	e9 7c ff ff ff       	jmp    c00093bb <UnixFile::UnixFile(int)+0x125>
c000943f:	90                   	nop
c0009440:	83 c4 28             	add    esp,0x28
c0009443:	5b                   	pop    ebx
c0009444:	c3                   	ret    
c0009445:	90                   	nop

c0009446 <ReservedFilename::ReservedFilename(int)>:
c0009446:	83 ec 0c             	sub    esp,0xc
c0009449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000944d:	83 ec 08             	sub    esp,0x8
c0009450:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009454:	50                   	push   eax
c0009455:	e8 3c fe ff ff       	call   c0009296 <UnixFile::UnixFile(int)>
c000945a:	83 c4 10             	add    esp,0x10
c000945d:	ba 1c da 01 c0       	mov    edx,0xc001da1c
c0009462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009466:	89 10                	mov    DWORD PTR [eax],edx
c0009468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000946c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009470:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009473:	90                   	nop
c0009474:	83 c4 0c             	add    esp,0xc
c0009477:	c3                   	ret    

c0009478 <UnixFile::~UnixFile()>:
c0009478:	83 ec 1c             	sub    esp,0x1c
c000947b:	ba 00 da 01 c0       	mov    edx,0xc001da00
c0009480:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009484:	89 10                	mov    DWORD PTR [eax],edx
c0009486:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000948a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000948d:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0009492:	7f 73                	jg     c0009507 <UnixFile::~UnixFile()+0x8f>
c0009494:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000949c:	83 ec 0c             	sub    esp,0xc
c000949f:	68 98 0a 02 c0       	push   0xc0020a98
c00094a4:	e8 23 31 01 00       	call   c001c5cc <LinkedList<UnixFile>::getFirstElement()>
c00094a9:	83 c4 10             	add    esp,0x10
c00094ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00094b0:	83 ec 0c             	sub    esp,0xc
c00094b3:	68 98 0a 02 c0       	push   0xc0020a98
c00094b8:	e8 17 31 01 00       	call   c001c5d4 <LinkedList<UnixFile>::removeFirst()>
c00094bd:	83 c4 10             	add    esp,0x10
c00094c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094c4:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00094c8:	74 40                	je     c000950a <UnixFile::~UnixFile()+0x92>
c00094ca:	83 ec 08             	sub    esp,0x8
c00094cd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00094d1:	68 98 0a 02 c0       	push   0xc0020a98
c00094d6:	e8 1d 30 01 00       	call   c001c4f8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00094db:	83 c4 10             	add    esp,0x10
c00094de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00094e2:	8d 50 01             	lea    edx,[eax+0x1]
c00094e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00094e9:	3d 20 a1 07 00       	cmp    eax,0x7a120
c00094ee:	0f 94 c0             	sete   al
c00094f1:	84 c0                	test   al,al
c00094f3:	74 a7                	je     c000949c <UnixFile::~UnixFile()+0x24>
c00094f5:	83 ec 0c             	sub    esp,0xc
c00094f8:	68 d8 d9 01 c0       	push   0xc001d9d8
c00094fd:	e8 8d 70 00 00       	call   c001058f <KePanic(char const*)>
c0009502:	83 c4 10             	add    esp,0x10
c0009505:	eb 95                	jmp    c000949c <UnixFile::~UnixFile()+0x24>
c0009507:	90                   	nop
c0009508:	eb 01                	jmp    c000950b <UnixFile::~UnixFile()+0x93>
c000950a:	90                   	nop
c000950b:	90                   	nop
c000950c:	83 c4 1c             	add    esp,0x1c
c000950f:	c3                   	ret    

c0009510 <UnixFile::~UnixFile()>:
c0009510:	83 ec 0c             	sub    esp,0xc
c0009513:	83 ec 0c             	sub    esp,0xc
c0009516:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000951a:	e8 59 ff ff ff       	call   c0009478 <UnixFile::~UnixFile()>
c000951f:	83 c4 10             	add    esp,0x10
c0009522:	83 ec 08             	sub    esp,0x8
c0009525:	6a 0c                	push   0xc
c0009527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000952b:	e8 06 13 00 00       	call   c000a836 <operator delete(void*, unsigned long)>
c0009530:	83 c4 10             	add    esp,0x10
c0009533:	83 c4 0c             	add    esp,0xc
c0009536:	c3                   	ret    
c0009537:	90                   	nop

c0009538 <ReservedFilename::~ReservedFilename()>:
c0009538:	83 ec 0c             	sub    esp,0xc
c000953b:	ba 1c da 01 c0       	mov    edx,0xc001da1c
c0009540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009544:	89 10                	mov    DWORD PTR [eax],edx
c0009546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000954a:	83 ec 0c             	sub    esp,0xc
c000954d:	50                   	push   eax
c000954e:	e8 25 ff ff ff       	call   c0009478 <UnixFile::~UnixFile()>
c0009553:	83 c4 10             	add    esp,0x10
c0009556:	90                   	nop
c0009557:	83 c4 0c             	add    esp,0xc
c000955a:	c3                   	ret    
c000955b:	90                   	nop

c000955c <ReservedFilename::~ReservedFilename()>:
c000955c:	83 ec 0c             	sub    esp,0xc
c000955f:	83 ec 0c             	sub    esp,0xc
c0009562:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009566:	e8 cd ff ff ff       	call   c0009538 <ReservedFilename::~ReservedFilename()>
c000956b:	83 c4 10             	add    esp,0x10
c000956e:	83 ec 08             	sub    esp,0x8
c0009571:	6a 0c                	push   0xc
c0009573:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009577:	e8 ba 12 00 00       	call   c000a836 <operator delete(void*, unsigned long)>
c000957c:	83 c4 10             	add    esp,0x10
c000957f:	83 c4 0c             	add    esp,0xc
c0009582:	c3                   	ret    

c0009583 <getFromFileDescriptor(int)>:
c0009583:	53                   	push   ebx
c0009584:	83 ec 08             	sub    esp,0x8
c0009587:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000958b:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0009591:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009597:	7f 2c                	jg     c00095c5 <getFromFileDescriptor(int)+0x42>
c0009599:	83 ec 0c             	sub    esp,0xc
c000959c:	68 98 0a 02 c0       	push   0xc0020a98
c00095a1:	e8 26 30 01 00       	call   c001c5cc <LinkedList<UnixFile>::getFirstElement()>
c00095a6:	83 c4 10             	add    esp,0x10
c00095a9:	85 c0                	test   eax,eax
c00095ab:	75 04                	jne    c00095b1 <getFromFileDescriptor(int)+0x2e>
c00095ad:	31 c0                	xor    eax,eax
c00095af:	eb 6e                	jmp    c000961f <getFromFileDescriptor(int)+0x9c>
c00095b1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00095b4:	74 69                	je     c000961f <getFromFileDescriptor(int)+0x9c>
c00095b6:	52                   	push   edx
c00095b7:	52                   	push   edx
c00095b8:	50                   	push   eax
c00095b9:	68 98 0a 02 c0       	push   0xc0020a98
c00095be:	e8 b3 30 01 00       	call   c001c676 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00095c3:	eb e1                	jmp    c00095a6 <getFromFileDescriptor(int)+0x23>
c00095c5:	a1 8c 0a 02 c0       	mov    eax,ds:0xc0020a8c
c00095ca:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00095d0:	74 4d                	je     c000961f <getFromFileDescriptor(int)+0x9c>
c00095d2:	a1 90 0a 02 c0       	mov    eax,ds:0xc0020a90
c00095d7:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00095dd:	74 40                	je     c000961f <getFromFileDescriptor(int)+0x9c>
c00095df:	a1 88 0a 02 c0       	mov    eax,ds:0xc0020a88
c00095e4:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00095ea:	74 33                	je     c000961f <getFromFileDescriptor(int)+0x9c>
c00095ec:	a1 84 0a 02 c0       	mov    eax,ds:0xc0020a84
c00095f1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00095f7:	74 26                	je     c000961f <getFromFileDescriptor(int)+0x9c>
c00095f9:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00095ff:	83 f8 08             	cmp    eax,0x8
c0009602:	77 09                	ja     c000960d <getFromFileDescriptor(int)+0x8a>
c0009604:	8b 04 85 60 0a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf5a0]
c000960b:	eb 12                	jmp    c000961f <getFromFileDescriptor(int)+0x9c>
c000960d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009613:	83 fb 08             	cmp    ebx,0x8
c0009616:	77 95                	ja     c00095ad <getFromFileDescriptor(int)+0x2a>
c0009618:	8b 04 9d 20 0a 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdf5e0]
c000961f:	83 c4 08             	add    esp,0x8
c0009622:	5b                   	pop    ebx
c0009623:	c3                   	ret    

c0009624 <__static_initialization_and_destruction_0(int, int)>:
c0009624:	83 ec 0c             	sub    esp,0xc
c0009627:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000962c:	75 34                	jne    c0009662 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000962e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009636:	75 2a                	jne    c0009662 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009638:	83 ec 0c             	sub    esp,0xc
c000963b:	68 98 0a 02 c0       	push   0xc0020a98
c0009640:	e8 71 2e 01 00       	call   c001c4b6 <LinkedList<UnixFile>::LinkedList()>
c0009645:	83 c4 10             	add    esp,0x10
c0009648:	83 ec 04             	sub    esp,0x4
c000964b:	68 30 f7 01 c0       	push   0xc001f730
c0009650:	68 98 0a 02 c0       	push   0xc0020a98
c0009655:	68 b4 c4 01 c0       	push   0xc001c4b4
c000965a:	e8 87 11 00 00       	call   c000a7e6 <__cxa_atexit>
c000965f:	83 c4 10             	add    esp,0x10
c0009662:	90                   	nop
c0009663:	83 c4 0c             	add    esp,0xc
c0009666:	c3                   	ret    

c0009667 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009667:	83 ec 0c             	sub    esp,0xc
c000966a:	83 ec 08             	sub    esp,0x8
c000966d:	68 ff ff 00 00       	push   0xffff
c0009672:	6a 01                	push   0x1
c0009674:	e8 ab ff ff ff       	call   c0009624 <__static_initialization_and_destruction_0(int, int)>
c0009679:	83 c4 10             	add    esp,0x10
c000967c:	83 c4 0c             	add    esp,0xc
c000967f:	c3                   	ret    

c0009680 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009680:	53                   	push   ebx
c0009681:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009685:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009689:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000968f:	89 c8                	mov    eax,ecx
c0009691:	d1 e8                	shr    eax,1
c0009693:	03 05 a8 f7 01 c0    	add    eax,DWORD PTR ds:0xc001f7a8
c0009699:	83 e1 01             	and    ecx,0x1
c000969c:	8a 10                	mov    dl,BYTE PTR [eax]
c000969e:	75 09                	jne    c00096a9 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00096a0:	83 e2 f0             	and    edx,0xfffffff0
c00096a3:	09 da                	or     edx,ebx
c00096a5:	88 10                	mov    BYTE PTR [eax],dl
c00096a7:	5b                   	pop    ebx
c00096a8:	c3                   	ret    
c00096a9:	c1 e3 04             	shl    ebx,0x4
c00096ac:	83 e2 0f             	and    edx,0xf
c00096af:	09 da                	or     edx,ebx
c00096b1:	88 10                	mov    BYTE PTR [eax],dl
c00096b3:	5b                   	pop    ebx
c00096b4:	c3                   	ret    

c00096b5 <Virt::getPageState(unsigned long)>:
c00096b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00096b9:	8b 0d a8 f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f7a8
c00096bf:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00096c5:	89 d0                	mov    eax,edx
c00096c7:	d1 e8                	shr    eax,1
c00096c9:	83 e2 01             	and    edx,0x1
c00096cc:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00096cf:	75 04                	jne    c00096d5 <Virt::getPageState(unsigned long)+0x20>
c00096d1:	83 e0 0f             	and    eax,0xf
c00096d4:	c3                   	ret    
c00096d5:	c0 e8 04             	shr    al,0x4
c00096d8:	c3                   	ret    

c00096d9 <Virt::allocateKernelVirtualPages(int)>:
c00096d9:	55                   	push   ebp
c00096da:	31 ed                	xor    ebp,ebp
c00096dc:	57                   	push   edi
c00096dd:	56                   	push   esi
c00096de:	53                   	push   ebx
c00096df:	31 db                	xor    ebx,ebx
c00096e1:	83 ec 1c             	sub    esp,0x1c
c00096e4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00096e8:	8b 3d a4 f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f7a4
c00096ee:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00096f3:	57                   	push   edi
c00096f4:	e8 bc ff ff ff       	call   c00096b5 <Virt::getPageState(unsigned long)>
c00096f9:	5a                   	pop    edx
c00096fa:	84 c0                	test   al,al
c00096fc:	75 3a                	jne    c0009738 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00096fe:	85 db                	test   ebx,ebx
c0009700:	75 02                	jne    c0009704 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0009702:	89 fd                	mov    ebp,edi
c0009704:	43                   	inc    ebx
c0009705:	39 f3                	cmp    ebx,esi
c0009707:	74 5a                	je     c0009763 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0009709:	47                   	inc    edi
c000970a:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0009710:	76 31                	jbe    c0009743 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0009712:	c7 05 a4 f7 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f7a4,0xc8000
c000971c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0009721:	75 28                	jne    c000974b <Virt::allocateKernelVirtualPages(int)+0x72>
c0009723:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009728:	bf 00 80 0c 00       	mov    edi,0xc8000
c000972d:	57                   	push   edi
c000972e:	e8 82 ff ff ff       	call   c00096b5 <Virt::getPageState(unsigned long)>
c0009733:	5a                   	pop    edx
c0009734:	84 c0                	test   al,al
c0009736:	74 c6                	je     c00096fe <Virt::allocateKernelVirtualPages(int)+0x25>
c0009738:	31 db                	xor    ebx,ebx
c000973a:	47                   	inc    edi
c000973b:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0009741:	77 cf                	ja     c0009712 <Virt::allocateKernelVirtualPages(int)+0x39>
c0009743:	89 3d a4 f7 01 c0    	mov    DWORD PTR ds:0xc001f7a4,edi
c0009749:	eb a8                	jmp    c00096f3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000974b:	83 ec 0c             	sub    esp,0xc
c000974e:	68 30 da 01 c0       	push   0xc001da30
c0009753:	e8 37 6e 00 00       	call   c001058f <KePanic(char const*)>
c0009758:	8b 3d a4 f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f7a4
c000975e:	83 c4 10             	add    esp,0x10
c0009761:	eb 90                	jmp    c00096f3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009763:	89 2d a4 f7 01 c0    	mov    DWORD PTR ds:0xc001f7a4,ebp
c0009769:	4b                   	dec    ebx
c000976a:	74 5f                	je     c00097cb <Virt::allocateKernelVirtualPages(int)+0xf2>
c000976c:	85 f6                	test   esi,esi
c000976e:	74 3d                	je     c00097ad <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009770:	89 e8                	mov    eax,ebp
c0009772:	31 db                	xor    ebx,ebx
c0009774:	8d 7e ff             	lea    edi,[esi-0x1]
c0009777:	eb 14                	jmp    c000978d <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009779:	6a 01                	push   0x1
c000977b:	43                   	inc    ebx
c000977c:	50                   	push   eax
c000977d:	e8 fe fe ff ff       	call   c0009680 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009782:	58                   	pop    eax
c0009783:	39 f3                	cmp    ebx,esi
c0009785:	5a                   	pop    edx
c0009786:	74 25                	je     c00097ad <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009788:	a1 a4 f7 01 c0       	mov    eax,ds:0xc001f7a4
c000978d:	8d 50 01             	lea    edx,[eax+0x1]
c0009790:	85 db                	test   ebx,ebx
c0009792:	89 15 a4 f7 01 c0    	mov    DWORD PTR ds:0xc001f7a4,edx
c0009798:	74 20                	je     c00097ba <Virt::allocateKernelVirtualPages(int)+0xe1>
c000979a:	39 df                	cmp    edi,ebx
c000979c:	75 db                	jne    c0009779 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000979e:	6a 03                	push   0x3
c00097a0:	43                   	inc    ebx
c00097a1:	50                   	push   eax
c00097a2:	e8 d9 fe ff ff       	call   c0009680 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097a7:	59                   	pop    ecx
c00097a8:	39 f3                	cmp    ebx,esi
c00097aa:	58                   	pop    eax
c00097ab:	75 db                	jne    c0009788 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00097ad:	83 c4 1c             	add    esp,0x1c
c00097b0:	89 e8                	mov    eax,ebp
c00097b2:	5b                   	pop    ebx
c00097b3:	c1 e0 0c             	shl    eax,0xc
c00097b6:	5e                   	pop    esi
c00097b7:	5f                   	pop    edi
c00097b8:	5d                   	pop    ebp
c00097b9:	c3                   	ret    
c00097ba:	6a 02                	push   0x2
c00097bc:	bb 01 00 00 00       	mov    ebx,0x1
c00097c1:	50                   	push   eax
c00097c2:	e8 b9 fe ff ff       	call   c0009680 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097c7:	58                   	pop    eax
c00097c8:	5a                   	pop    edx
c00097c9:	eb bd                	jmp    c0009788 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00097cb:	6a 04                	push   0x4
c00097cd:	8d 45 01             	lea    eax,[ebp+0x1]
c00097d0:	55                   	push   ebp
c00097d1:	a3 a4 f7 01 c0       	mov    ds:0xc001f7a4,eax
c00097d6:	e8 a5 fe ff ff       	call   c0009680 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097db:	59                   	pop    ecx
c00097dc:	89 e8                	mov    eax,ebp
c00097de:	5b                   	pop    ebx
c00097df:	c1 e0 0c             	shl    eax,0xc
c00097e2:	83 c4 1c             	add    esp,0x1c
c00097e5:	5b                   	pop    ebx
c00097e6:	5e                   	pop    esi
c00097e7:	5f                   	pop    edi
c00097e8:	5d                   	pop    ebp
c00097e9:	c3                   	ret    

c00097ea <Virt::freeSwapfilePage(unsigned long)>:
c00097ea:	53                   	push   ebx
c00097eb:	8b 15 ac 0a 02 c0    	mov    edx,DWORD PTR ds:0xc0020aac
c00097f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00097f5:	b8 01 00 00 00       	mov    eax,0x1
c00097fa:	89 cb                	mov    ebx,ecx
c00097fc:	d3 e0                	shl    eax,cl
c00097fe:	c1 eb 05             	shr    ebx,0x5
c0009801:	f7 d0                	not    eax
c0009803:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0009806:	5b                   	pop    ebx
c0009807:	c3                   	ret    

c0009808 <Virt::swapIDToSector(unsigned long)>:
c0009808:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000980c:	0f af 05 ac f7 01 c0 	imul   eax,DWORD PTR ds:0xc001f7ac
c0009813:	03 05 b4 f7 01 c0    	add    eax,DWORD PTR ds:0xc001f7b4
c0009819:	c3                   	ret    

c000981a <Virt::allocateSwapfilePage()>:
c000981a:	55                   	push   ebp
c000981b:	31 d2                	xor    edx,edx
c000981d:	57                   	push   edi
c000981e:	56                   	push   esi
c000981f:	53                   	push   ebx
c0009820:	83 ec 0c             	sub    esp,0xc
c0009823:	8b 0d ac f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f7ac
c0009829:	a1 b0 f7 01 c0       	mov    eax,ds:0xc001f7b0
c000982e:	f7 f1                	div    ecx
c0009830:	39 0d b0 f7 01 c0    	cmp    DWORD PTR ds:0xc001f7b0,ecx
c0009836:	72 2d                	jb     c0009865 <Virt::allocateSwapfilePage()+0x4b>
c0009838:	8b 35 ac 0a 02 c0    	mov    esi,DWORD PTR ds:0xc0020aac
c000983e:	8b 16                	mov    edx,DWORD PTR [esi]
c0009840:	f6 c2 01             	test   dl,0x1
c0009843:	74 3c                	je     c0009881 <Virt::allocateSwapfilePage()+0x67>
c0009845:	31 c9                	xor    ecx,ecx
c0009847:	bf 01 00 00 00       	mov    edi,0x1
c000984c:	eb 12                	jmp    c0009860 <Virt::allocateSwapfilePage()+0x46>
c000984e:	89 fd                	mov    ebp,edi
c0009850:	89 ca                	mov    edx,ecx
c0009852:	d3 e5                	shl    ebp,cl
c0009854:	c1 ea 05             	shr    edx,0x5
c0009857:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000985a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000985c:	85 ea                	test   edx,ebp
c000985e:	74 2a                	je     c000988a <Virt::allocateSwapfilePage()+0x70>
c0009860:	41                   	inc    ecx
c0009861:	39 c8                	cmp    eax,ecx
c0009863:	77 e9                	ja     c000984e <Virt::allocateSwapfilePage()+0x34>
c0009865:	83 ec 0c             	sub    esp,0xc
c0009868:	68 97 db 01 c0       	push   0xc001db97
c000986d:	e8 1d 6d 00 00       	call   c001058f <KePanic(char const*)>
c0009872:	83 c4 10             	add    esp,0x10
c0009875:	31 c9                	xor    ecx,ecx
c0009877:	83 c4 0c             	add    esp,0xc
c000987a:	89 c8                	mov    eax,ecx
c000987c:	5b                   	pop    ebx
c000987d:	5e                   	pop    esi
c000987e:	5f                   	pop    edi
c000987f:	5d                   	pop    ebp
c0009880:	c3                   	ret    
c0009881:	89 f3                	mov    ebx,esi
c0009883:	bd 01 00 00 00       	mov    ebp,0x1
c0009888:	31 c9                	xor    ecx,ecx
c000988a:	09 ea                	or     edx,ebp
c000988c:	89 c8                	mov    eax,ecx
c000988e:	89 13                	mov    DWORD PTR [ebx],edx
c0009890:	83 c4 0c             	add    esp,0xc
c0009893:	5b                   	pop    ebx
c0009894:	5e                   	pop    esi
c0009895:	5f                   	pop    edi
c0009896:	5d                   	pop    ebp
c0009897:	c3                   	ret    

c0009898 <Virt::virtualMemorySetup()>:
c0009898:	53                   	push   ebx
c0009899:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000989e:	6a 0f                	push   0xf
c00098a0:	53                   	push   ebx
c00098a1:	43                   	inc    ebx
c00098a2:	e8 d9 fd ff ff       	call   c0009680 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00098a7:	58                   	pop    eax
c00098a8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00098ae:	5a                   	pop    edx
c00098af:	75 ed                	jne    c000989e <Virt::virtualMemorySetup()+0x6>
c00098b1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00098b6:	6a 00                	push   0x0
c00098b8:	53                   	push   ebx
c00098b9:	43                   	inc    ebx
c00098ba:	e8 c1 fd ff ff       	call   c0009680 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00098bf:	59                   	pop    ecx
c00098c0:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00098c6:	58                   	pop    eax
c00098c7:	75 ed                	jne    c00098b6 <Virt::virtualMemorySetup()+0x1e>
c00098c9:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00098ce:	6a 0f                	push   0xf
c00098d0:	53                   	push   ebx
c00098d1:	43                   	inc    ebx
c00098d2:	e8 a9 fd ff ff       	call   c0009680 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00098d7:	58                   	pop    eax
c00098d8:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00098de:	5a                   	pop    edx
c00098df:	75 ed                	jne    c00098ce <Virt::virtualMemorySetup()+0x36>
c00098e1:	5b                   	pop    ebx
c00098e2:	c3                   	ret    

c00098e3 <Virt::setupPageSwapping(int)>:
c00098e3:	53                   	push   ebx
c00098e4:	83 ec 0c             	sub    esp,0xc
c00098e7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00098eb:	a1 28 2f 02 c0       	mov    eax,ds:0xc0022f28
c00098f0:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00098f6:	8b 10                	mov    edx,DWORD PTR [eax]
c00098f8:	53                   	push   ebx
c00098f9:	c1 e3 0b             	shl    ebx,0xb
c00098fc:	68 ae db 01 c0       	push   0xc001dbae
c0009901:	50                   	push   eax
c0009902:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009905:	89 1d b0 f7 01 c0    	mov    DWORD PTR ds:0xc001f7b0,ebx
c000990b:	c6 05 b8 f7 01 c0 43 	mov    BYTE PTR ds:0xc001f7b8,0x43
c0009912:	c1 eb 08             	shr    ebx,0x8
c0009915:	a3 b4 f7 01 c0       	mov    ds:0xc001f7b4,eax
c000991a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000991d:	c7 05 ac f7 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f7ac,0x8
c0009927:	e8 65 e3 ff ff       	call   c0007c91 <malloc>
c000992c:	83 c4 0c             	add    esp,0xc
c000992f:	89 c1                	mov    ecx,eax
c0009931:	a3 ac 0a 02 c0       	mov    ds:0xc0020aac,eax
c0009936:	31 d2                	xor    edx,edx
c0009938:	a1 b0 f7 01 c0       	mov    eax,ds:0xc001f7b0
c000993d:	f7 35 ac f7 01 c0    	div    DWORD PTR ds:0xc001f7ac
c0009943:	c1 e8 05             	shr    eax,0x5
c0009946:	50                   	push   eax
c0009947:	6a 00                	push   0x0
c0009949:	51                   	push   ecx
c000994a:	e8 81 6b ff ff       	call   c00004d0 <memset>
c000994f:	83 c4 18             	add    esp,0x18
c0009952:	5b                   	pop    ebx
c0009953:	c3                   	ret    

c0009954 <VAS::VAS()>:
c0009954:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009958:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000995f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009963:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000996a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000996e:	a3 b0 0a 02 c0       	mov    ds:0xc0020ab0,eax
c0009973:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009977:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000997b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000997f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009982:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009986:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000998d:	90                   	nop
c000998e:	c3                   	ret    
c000998f:	90                   	nop

c0009990 <VAS::VAS(VAS*)>:
c0009990:	83 ec 0c             	sub    esp,0xc
c0009993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009997:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000999e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099a2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00099a9:	83 ec 0c             	sub    esp,0xc
c00099ac:	68 50 da 01 c0       	push   0xc001da50
c00099b1:	e8 d9 6b 00 00       	call   c001058f <KePanic(char const*)>
c00099b6:	83 c4 10             	add    esp,0x10
c00099b9:	90                   	nop
c00099ba:	83 c4 0c             	add    esp,0xc
c00099bd:	c3                   	ret    

c00099be <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00099be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c2:	89 c2                	mov    edx,eax
c00099c4:	c1 e8 0a             	shr    eax,0xa
c00099c7:	c1 ea 16             	shr    edx,0x16
c00099ca:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00099cf:	19 c9                	sbb    ecx,ecx
c00099d1:	c1 e2 0c             	shl    edx,0xc
c00099d4:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00099da:	25 fc 0f 00 00       	and    eax,0xffc
c00099df:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00099e6:	01 d0                	add    eax,edx
c00099e8:	c3                   	ret    
c00099e9:	90                   	nop

c00099ea <VAS::getPageTableEntry(unsigned long)>:
c00099ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00099ee:	89 ca                	mov    edx,ecx
c00099f0:	c1 e9 0a             	shr    ecx,0xa
c00099f3:	c1 ea 16             	shr    edx,0x16
c00099f6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00099fc:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009a02:	c1 e0 0c             	shl    eax,0xc
c0009a05:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009a08:	c3                   	ret    

c0009a09 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009a09:	57                   	push   edi
c0009a0a:	56                   	push   esi
c0009a0b:	be 01 00 00 00       	mov    esi,0x1
c0009a10:	53                   	push   ebx
c0009a11:	83 ec 10             	sub    esp,0x10
c0009a14:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009a18:	c1 eb 0c             	shr    ebx,0xc
c0009a1b:	eb 3f                	jmp    c0009a5c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0009a1d:	83 ec 08             	sub    esp,0x8
c0009a20:	a1 b0 0a 02 c0       	mov    eax,ds:0xc0020ab0
c0009a25:	57                   	push   edi
c0009a26:	50                   	push   eax
c0009a27:	e8 be ff ff ff       	call   c00099ea <VAS::getPageTableEntry(unsigned long)>
c0009a2c:	83 c4 10             	add    esp,0x10
c0009a2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a31:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009a35:	f6 c4 04             	test   ah,0x4
c0009a38:	75 60                	jne    c0009a9a <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c0009a3a:	80 fa 04             	cmp    dl,0x4
c0009a3d:	74 79                	je     c0009ab8 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c0009a3f:	80 fa 02             	cmp    dl,0x2
c0009a42:	0f 84 89 00 00 00    	je     c0009ad1 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0009a48:	80 fa 03             	cmp    dl,0x3
c0009a4b:	0f 84 ae 00 00 00    	je     c0009aff <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c0009a51:	fe ca                	dec    dl
c0009a53:	0f 84 93 00 00 00    	je     c0009aec <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009a59:	43                   	inc    ebx
c0009a5a:	31 f6                	xor    esi,esi
c0009a5c:	53                   	push   ebx
c0009a5d:	89 df                	mov    edi,ebx
c0009a5f:	e8 51 fc ff ff       	call   c00096b5 <Virt::getPageState(unsigned long)>
c0009a64:	c1 e7 0c             	shl    edi,0xc
c0009a67:	5a                   	pop    edx
c0009a68:	84 c0                	test   al,al
c0009a6a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009a6e:	75 ad                	jne    c0009a1d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0009a70:	83 ec 0c             	sub    esp,0xc
c0009a73:	68 c5 db 01 c0       	push   0xc001dbc5
c0009a78:	e8 12 6b 00 00       	call   c001058f <KePanic(char const*)>
c0009a7d:	5a                   	pop    edx
c0009a7e:	59                   	pop    ecx
c0009a7f:	57                   	push   edi
c0009a80:	8b 3d b0 0a 02 c0    	mov    edi,DWORD PTR ds:0xc0020ab0
c0009a86:	57                   	push   edi
c0009a87:	e8 5e ff ff ff       	call   c00099ea <VAS::getPageTableEntry(unsigned long)>
c0009a8c:	83 c4 10             	add    esp,0x10
c0009a8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a91:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009a95:	f6 c4 04             	test   ah,0x4
c0009a98:	74 bf                	je     c0009a59 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009a9a:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0009a9e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009aa3:	83 ec 0c             	sub    esp,0xc
c0009aa6:	50                   	push   eax
c0009aa7:	e8 5f e4 ff ff       	call   c0007f0b <Phys::freePage(unsigned long)>
c0009aac:	83 c4 10             	add    esp,0x10
c0009aaf:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009ab3:	80 fa 04             	cmp    dl,0x4
c0009ab6:	75 87                	jne    c0009a3f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009ab8:	89 f0                	mov    eax,esi
c0009aba:	84 c0                	test   al,al
c0009abc:	75 47                	jne    c0009b05 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c0009abe:	c7 44 24 20 74 da 01 c0 	mov    DWORD PTR [esp+0x20],0xc001da74
c0009ac6:	83 c4 10             	add    esp,0x10
c0009ac9:	5b                   	pop    ebx
c0009aca:	5e                   	pop    esi
c0009acb:	5f                   	pop    edi
c0009acc:	e9 be 6a 00 00       	jmp    c001058f <KePanic(char const*)>
c0009ad1:	89 f0                	mov    eax,esi
c0009ad3:	84 c0                	test   al,al
c0009ad5:	75 15                	jne    c0009aec <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009ad7:	83 ec 0c             	sub    esp,0xc
c0009ada:	68 e1 db 01 c0       	push   0xc001dbe1
c0009adf:	e8 ab 6a 00 00       	call   c001058f <KePanic(char const*)>
c0009ae4:	83 c4 10             	add    esp,0x10
c0009ae7:	e9 6d ff ff ff       	jmp    c0009a59 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009aec:	83 ec 08             	sub    esp,0x8
c0009aef:	6a 00                	push   0x0
c0009af1:	53                   	push   ebx
c0009af2:	e8 89 fb ff ff       	call   c0009680 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009af7:	83 c4 10             	add    esp,0x10
c0009afa:	e9 5a ff ff ff       	jmp    c0009a59 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009aff:	89 f0                	mov    eax,esi
c0009b01:	84 c0                	test   al,al
c0009b03:	75 15                	jne    c0009b1a <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0009b05:	83 ec 08             	sub    esp,0x8
c0009b08:	6a 00                	push   0x0
c0009b0a:	53                   	push   ebx
c0009b0b:	e8 70 fb ff ff       	call   c0009680 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009b10:	83 c4 10             	add    esp,0x10
c0009b13:	83 c4 10             	add    esp,0x10
c0009b16:	5b                   	pop    ebx
c0009b17:	5e                   	pop    esi
c0009b18:	5f                   	pop    edi
c0009b19:	c3                   	ret    
c0009b1a:	c7 44 24 20 fd db 01 c0 	mov    DWORD PTR [esp+0x20],0xc001dbfd
c0009b22:	83 c4 10             	add    esp,0x10
c0009b25:	5b                   	pop    ebx
c0009b26:	5e                   	pop    esi
c0009b27:	5f                   	pop    edi
c0009b28:	e9 62 6a 00 00       	jmp    c001058f <KePanic(char const*)>
c0009b2d:	90                   	nop

c0009b2e <VAS::freeAllocatedPages(unsigned long)>:
c0009b2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b36:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009b3a:	74 09                	je     c0009b45 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009b3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009b40:	e9 c4 fe ff ff       	jmp    c0009a09 <Virt::freeKernelVirtualPages(unsigned long)>
c0009b45:	c7 44 24 04 98 da 01 c0 	mov    DWORD PTR [esp+0x4],0xc001da98
c0009b4d:	e9 da 0d 00 00       	jmp    c000a92c <Dbg::kprintf(char const*, ...)>

c0009b52 <VAS::virtualToPhysical(unsigned long)>:
c0009b52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009b56:	50                   	push   eax
c0009b57:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b5b:	52                   	push   edx
c0009b5c:	e8 89 fe ff ff       	call   c00099ea <VAS::getPageTableEntry(unsigned long)>
c0009b61:	59                   	pop    ecx
c0009b62:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b64:	5a                   	pop    edx
c0009b65:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009b6a:	c3                   	ret    
c0009b6b:	90                   	nop

c0009b6c <VAS::reflagRange(unsigned long, int, int, int)>:
c0009b6c:	55                   	push   ebp
c0009b6d:	57                   	push   edi
c0009b6e:	56                   	push   esi
c0009b6f:	53                   	push   ebx
c0009b70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009b74:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009b78:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009b7c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009b80:	85 db                	test   ebx,ebx
c0009b82:	7e 22                	jle    c0009ba6 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0009b84:	c1 e3 0c             	shl    ebx,0xc
c0009b87:	01 f3                	add    ebx,esi
c0009b89:	56                   	push   esi
c0009b8a:	81 c6 00 10 00 00    	add    esi,0x1000
c0009b90:	55                   	push   ebp
c0009b91:	e8 54 fe ff ff       	call   c00099ea <VAS::getPageTableEntry(unsigned long)>
c0009b96:	5a                   	pop    edx
c0009b97:	59                   	pop    ecx
c0009b98:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009b9a:	21 f9                	and    ecx,edi
c0009b9c:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0009ba0:	39 f3                	cmp    ebx,esi
c0009ba2:	89 08                	mov    DWORD PTR [eax],ecx
c0009ba4:	75 e3                	jne    c0009b89 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0009ba6:	5b                   	pop    ebx
c0009ba7:	5e                   	pop    esi
c0009ba8:	5f                   	pop    edi
c0009ba9:	5d                   	pop    ebp
c0009baa:	c3                   	ret    
c0009bab:	90                   	nop

c0009bac <VAS::setToWriteCombining(unsigned long, int)>:
c0009bac:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c0009bb1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009bb7:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009bbe:	75 01                	jne    c0009bc1 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009bc0:	c3                   	ret    
c0009bc1:	68 80 00 00 00       	push   0x80
c0009bc6:	6a ff                	push   0xffffffff
c0009bc8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009bcc:	50                   	push   eax
c0009bcd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009bd1:	52                   	push   edx
c0009bd2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009bd6:	51                   	push   ecx
c0009bd7:	e8 90 ff ff ff       	call   c0009b6c <VAS::reflagRange(unsigned long, int, int, int)>
c0009bdc:	83 c4 14             	add    esp,0x14
c0009bdf:	c3                   	ret    

c0009be0 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009be0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009be5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009be9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009bec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009bf0:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009bf3:	19 c0                	sbb    eax,eax
c0009bf5:	83 ca 03             	or     edx,0x3
c0009bf8:	83 e0 fc             	and    eax,0xfffffffc
c0009bfb:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009c02:	0f 20 d8             	mov    eax,cr3
c0009c05:	0f 22 d8             	mov    cr3,eax
c0009c08:	c3                   	ret    
c0009c09:	90                   	nop

c0009c0a <VAS::~VAS()>:
c0009c0a:	83 ec 2c             	sub    esp,0x2c
c0009c0d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009c15:	fa                   	cli    
c0009c16:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c0009c1b:	40                   	inc    eax
c0009c1c:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c0009c21:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c26:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c28:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c2b:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c31:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009c35:	6a 01                	push   0x1
c0009c37:	50                   	push   eax
c0009c38:	e8 a3 ff ff ff       	call   c0009be0 <VAS::mapOtherVASIn(bool, VAS*)>
c0009c3d:	83 c4 0c             	add    esp,0xc
c0009c40:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009c48:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009c50:	0f 8f d4 00 00 00    	jg     c0009d2a <VAS::~VAS()+0x120>
c0009c56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c5a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c5d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c61:	c1 e2 02             	shl    edx,0x2
c0009c64:	01 d0                	add    eax,edx
c0009c66:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c70:	83 e0 01             	and    eax,0x1
c0009c73:	0f 84 a8 00 00 00    	je     c0009d21 <VAS::~VAS()+0x117>
c0009c79:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c81:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c89:	7f 72                	jg     c0009cfd <VAS::~VAS()+0xf3>
c0009c8b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c8f:	c1 e0 0a             	shl    eax,0xa
c0009c92:	89 c2                	mov    edx,eax
c0009c94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c98:	01 d0                	add    eax,edx
c0009c9a:	c1 e0 0c             	shl    eax,0xc
c0009c9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009ca1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009ca6:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ca8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009cab:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009cb1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009cb5:	6a 01                	push   0x1
c0009cb7:	50                   	push   eax
c0009cb8:	e8 01 fd ff ff       	call   c00099be <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009cbd:	83 c4 0c             	add    esp,0xc
c0009cc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009cc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0009cca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009cce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009cd2:	25 01 04 00 00       	and    eax,0x401
c0009cd7:	3d 01 04 00 00       	cmp    eax,0x401
c0009cdc:	75 19                	jne    c0009cf7 <VAS::~VAS()+0xed>
c0009cde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ce2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ce7:	83 ec 0c             	sub    esp,0xc
c0009cea:	50                   	push   eax
c0009ceb:	e8 1b e2 ff ff       	call   c0007f0b <Phys::freePage(unsigned long)>
c0009cf0:	83 c4 10             	add    esp,0x10
c0009cf3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009cf7:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009cfb:	eb 84                	jmp    c0009c81 <VAS::~VAS()+0x77>
c0009cfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d01:	25 00 04 00 00       	and    eax,0x400
c0009d06:	74 19                	je     c0009d21 <VAS::~VAS()+0x117>
c0009d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d0c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009d11:	83 ec 0c             	sub    esp,0xc
c0009d14:	50                   	push   eax
c0009d15:	e8 f1 e1 ff ff       	call   c0007f0b <Phys::freePage(unsigned long)>
c0009d1a:	83 c4 10             	add    esp,0x10
c0009d1d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009d21:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009d25:	e9 1e ff ff ff       	jmp    c0009c48 <VAS::~VAS()+0x3e>
c0009d2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d2e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009d31:	83 ec 0c             	sub    esp,0xc
c0009d34:	50                   	push   eax
c0009d35:	e8 cf fc ff ff       	call   c0009a09 <Virt::freeKernelVirtualPages(unsigned long)>
c0009d3a:	83 c4 10             	add    esp,0x10
c0009d3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d41:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009d44:	83 ec 0c             	sub    esp,0xc
c0009d47:	50                   	push   eax
c0009d48:	e8 be e1 ff ff       	call   c0007f0b <Phys::freePage(unsigned long)>
c0009d4d:	83 c4 10             	add    esp,0x10
c0009d50:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009d54:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c0009d59:	48                   	dec    eax
c0009d5a:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c0009d5f:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c0009d64:	85 c0                	test   eax,eax
c0009d66:	75 01                	jne    c0009d69 <VAS::~VAS()+0x15f>
c0009d68:	fb                   	sti    
c0009d69:	90                   	nop
c0009d6a:	83 c4 2c             	add    esp,0x2c
c0009d6d:	c3                   	ret    

c0009d6e <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d6e:	55                   	push   ebp
c0009d6f:	57                   	push   edi
c0009d70:	56                   	push   esi
c0009d71:	53                   	push   ebx
c0009d72:	83 ec 1c             	sub    esp,0x1c
c0009d75:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d79:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d7d:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d83:	77 0b                	ja     c0009d90 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009d85:	0f 20 d8             	mov    eax,cr3
c0009d88:	0f 20 d8             	mov    eax,cr3
c0009d8b:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d8e:	75 47                	jne    c0009dd7 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0009d90:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d94:	09 d8                	or     eax,ebx
c0009d96:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d9b:	75 57                	jne    c0009df4 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009d9d:	89 de                	mov    esi,ebx
c0009d9f:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009da2:	c1 ee 16             	shr    esi,0x16
c0009da5:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009dac:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009db0:	74 54                	je     c0009e06 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0009db2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009db6:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009dbc:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0009dc0:	c1 e6 0c             	shl    esi,0xc
c0009dc3:	c1 eb 0a             	shr    ebx,0xa
c0009dc6:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009dcc:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009dcf:	83 c4 1c             	add    esp,0x1c
c0009dd2:	5b                   	pop    ebx
c0009dd3:	5e                   	pop    esi
c0009dd4:	5f                   	pop    edi
c0009dd5:	5d                   	pop    ebp
c0009dd6:	c3                   	ret    
c0009dd7:	83 ec 0c             	sub    esp,0xc
c0009dda:	68 bc da 01 c0       	push   0xc001dabc
c0009ddf:	e8 48 0b 00 00       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c0009de4:	83 c4 10             	add    esp,0x10
c0009de7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009deb:	09 d8                	or     eax,ebx
c0009ded:	a9 ff 0f 00 00       	test   eax,0xfff
c0009df2:	74 a9                	je     c0009d9d <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009df4:	83 ec 0c             	sub    esp,0xc
c0009df7:	68 24 db 01 c0       	push   0xc001db24
c0009dfc:	e8 8e 67 00 00       	call   c001058f <KePanic(char const*)>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	eb 97                	jmp    c0009d9d <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009e06:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e0a:	e8 5e e1 ff ff       	call   c0007f6d <Phys::allocatePage()>
c0009e0f:	83 ec 0c             	sub    esp,0xc
c0009e12:	89 c5                	mov    ebp,eax
c0009e14:	8b 0d b0 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020ab0
c0009e1a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009e1e:	6a 01                	push   0x1
c0009e20:	e8 b4 f8 ff ff       	call   c00096d9 <Virt::allocateKernelVirtualPages(int)>
c0009e25:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009e2c:	6a 01                	push   0x1
c0009e2e:	50                   	push   eax
c0009e2f:	55                   	push   ebp
c0009e30:	81 cd 07 04 00 00    	or     ebp,0x407
c0009e36:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009e3a:	51                   	push   ecx
c0009e3b:	e8 28 02 00 00       	call   c000a068 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e40:	83 c4 1c             	add    esp,0x1c
c0009e43:	68 00 10 00 00       	push   0x1000
c0009e48:	6a 00                	push   0x0
c0009e4a:	50                   	push   eax
c0009e4b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e4f:	e8 7c 66 ff ff       	call   c00004d0 <memset>
c0009e54:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e58:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e5b:	e8 a9 fb ff ff       	call   c0009a09 <Virt::freeKernelVirtualPages(unsigned long)>
c0009e60:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e64:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e67:	83 c4 10             	add    esp,0x10
c0009e6a:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e6d:	e9 40 ff ff ff       	jmp    c0009db2 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009e72 <VAS::allocatePages(int, int)>:
c0009e72:	55                   	push   ebp
c0009e73:	57                   	push   edi
c0009e74:	56                   	push   esi
c0009e75:	53                   	push   ebx
c0009e76:	83 ec 1c             	sub    esp,0x1c
c0009e79:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009e7d:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c0009e82:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e88:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009e8e:	83 e0 01             	and    eax,0x1
c0009e91:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009e95:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009e99:	0f 85 cc 00 00 00    	jne    c0009f6b <VAS::allocatePages(int, int)+0xf9>
c0009e9f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009ea2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009ea6:	85 c0                	test   eax,eax
c0009ea8:	0f 84 a1 00 00 00    	je     c0009f4f <VAS::allocatePages(int, int)+0xdd>
c0009eae:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009eb2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009eb6:	c1 e6 0c             	shl    esi,0xc
c0009eb9:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009ebd:	85 c0                	test   eax,eax
c0009ebf:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009ec2:	7e 33                	jle    c0009ef7 <VAS::allocatePages(int, int)+0x85>
c0009ec4:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009ec8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ecc:	81 cd 00 04 00 00    	or     ebp,0x400
c0009ed2:	e8 96 e0 ff ff       	call   c0007f6d <Phys::allocatePage()>
c0009ed7:	55                   	push   ebp
c0009ed8:	53                   	push   ebx
c0009ed9:	50                   	push   eax
c0009eda:	57                   	push   edi
c0009edb:	e8 8e fe ff ff       	call   c0009d6e <VAS::mapPage(unsigned long, unsigned long, int)>
c0009ee0:	83 c4 10             	add    esp,0x10
c0009ee3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009ee8:	74 03                	je     c0009eed <VAS::allocatePages(int, int)+0x7b>
c0009eea:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009eed:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ef3:	39 de                	cmp    esi,ebx
c0009ef5:	75 db                	jne    c0009ed2 <VAS::allocatePages(int, int)+0x60>
c0009ef7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009efc:	75 12                	jne    c0009f10 <VAS::allocatePages(int, int)+0x9e>
c0009efe:	0f 20 d8             	mov    eax,cr3
c0009f01:	0f 22 d8             	mov    cr3,eax
c0009f04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f08:	83 c4 1c             	add    esp,0x1c
c0009f0b:	5b                   	pop    ebx
c0009f0c:	5e                   	pop    esi
c0009f0d:	5f                   	pop    edi
c0009f0e:	5d                   	pop    ebp
c0009f0f:	c3                   	ret    
c0009f10:	c1 ee 0a             	shr    esi,0xa
c0009f13:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009f17:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009f1d:	c1 eb 0a             	shr    ebx,0xa
c0009f20:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009f26:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009f2c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009f32:	39 c3                	cmp    ebx,eax
c0009f34:	77 ce                	ja     c0009f04 <VAS::allocatePages(int, int)+0x92>
c0009f36:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009f39:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f3f:	39 d8                	cmp    eax,ebx
c0009f41:	73 f3                	jae    c0009f36 <VAS::allocatePages(int, int)+0xc4>
c0009f43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f47:	83 c4 1c             	add    esp,0x1c
c0009f4a:	5b                   	pop    ebx
c0009f4b:	5e                   	pop    esi
c0009f4c:	5f                   	pop    edi
c0009f4d:	5d                   	pop    ebp
c0009f4e:	c3                   	ret    
c0009f4f:	83 ec 0c             	sub    esp,0xc
c0009f52:	68 48 db 01 c0       	push   0xc001db48
c0009f57:	e8 33 66 00 00       	call   c001058f <KePanic(char const*)>
c0009f5c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009f5f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009f63:	83 c4 10             	add    esp,0x10
c0009f66:	e9 43 ff ff ff       	jmp    c0009eae <VAS::allocatePages(int, int)+0x3c>
c0009f6b:	83 ec 0c             	sub    esp,0xc
c0009f6e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009f72:	51                   	push   ecx
c0009f73:	e8 61 f7 ff ff       	call   c00096d9 <Virt::allocateKernelVirtualPages(int)>
c0009f78:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009f7c:	83 c4 10             	add    esp,0x10
c0009f7f:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009f84:	0f 87 9b 00 00 00    	ja     c000a025 <VAS::allocatePages(int, int)+0x1b3>
c0009f8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f8e:	85 d2                	test   edx,edx
c0009f90:	7e 3c                	jle    c0009fce <VAS::allocatePages(int, int)+0x15c>
c0009f92:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f96:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009f9a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009f9e:	c1 e5 0c             	shl    ebp,0xc
c0009fa1:	81 ce 00 04 00 00    	or     esi,0x400
c0009fa7:	01 dd                	add    ebp,ebx
c0009fa9:	e8 bf df ff ff       	call   c0007f6d <Phys::allocatePage()>
c0009fae:	56                   	push   esi
c0009faf:	53                   	push   ebx
c0009fb0:	50                   	push   eax
c0009fb1:	57                   	push   edi
c0009fb2:	e8 b7 fd ff ff       	call   c0009d6e <VAS::mapPage(unsigned long, unsigned long, int)>
c0009fb7:	83 c4 10             	add    esp,0x10
c0009fba:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009fbf:	74 03                	je     c0009fc4 <VAS::allocatePages(int, int)+0x152>
c0009fc1:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009fc4:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009fca:	39 dd                	cmp    ebp,ebx
c0009fcc:	75 db                	jne    c0009fa9 <VAS::allocatePages(int, int)+0x137>
c0009fce:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009fd3:	0f 84 25 ff ff ff    	je     c0009efe <VAS::allocatePages(int, int)+0x8c>
c0009fd9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009fdd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009fe1:	89 d3                	mov    ebx,edx
c0009fe3:	c1 e0 0c             	shl    eax,0xc
c0009fe6:	c1 eb 0a             	shr    ebx,0xa
c0009fe9:	01 d0                	add    eax,edx
c0009feb:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ff1:	c1 e8 0a             	shr    eax,0xa
c0009ff4:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ffa:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fff:	2d 00 00 40 00       	sub    eax,0x400000
c000a004:	39 c3                	cmp    ebx,eax
c000a006:	0f 87 f8 fe ff ff    	ja     c0009f04 <VAS::allocatePages(int, int)+0x92>
c000a00c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a00f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a015:	39 d8                	cmp    eax,ebx
c000a017:	73 f3                	jae    c000a00c <VAS::allocatePages(int, int)+0x19a>
c000a019:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a01d:	83 c4 1c             	add    esp,0x1c
c000a020:	5b                   	pop    ebx
c000a021:	5e                   	pop    esi
c000a022:	5f                   	pop    edi
c000a023:	5d                   	pop    ebp
c000a024:	c3                   	ret    
c000a025:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000a02a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a030:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c000a037:	0f 84 4d ff ff ff    	je     c0009f8a <VAS::allocatePages(int, int)+0x118>
c000a03d:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000a045:	e9 40 ff ff ff       	jmp    c0009f8a <VAS::allocatePages(int, int)+0x118>

c000a04a <VAS::setCPUSpecific(unsigned long)>:
c000a04a:	83 ec 0c             	sub    esp,0xc
c000a04d:	6a 05                	push   0x5
c000a04f:	68 00 00 40 c2       	push   0xc2400000
c000a054:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a058:	50                   	push   eax
c000a059:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a05d:	52                   	push   edx
c000a05e:	e8 0b fd ff ff       	call   c0009d6e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a063:	83 c4 1c             	add    esp,0x1c
c000a066:	c3                   	ret    
c000a067:	90                   	nop

c000a068 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000a068:	55                   	push   ebp
c000a069:	57                   	push   edi
c000a06a:	56                   	push   esi
c000a06b:	53                   	push   ebx
c000a06c:	83 ec 1c             	sub    esp,0x1c
c000a06f:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000a074:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a078:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a07e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a082:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a088:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000a08c:	83 e0 01             	and    eax,0x1
c000a08f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a093:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a097:	85 c0                	test   eax,eax
c000a099:	7e 39                	jle    c000a0d4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000a09b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a09f:	89 f3                	mov    ebx,esi
c000a0a1:	c1 e0 0c             	shl    eax,0xc
c000a0a4:	01 f0                	add    eax,esi
c000a0a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a0aa:	55                   	push   ebp
c000a0ab:	53                   	push   ebx
c000a0ac:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a0b0:	29 f0                	sub    eax,esi
c000a0b2:	01 d8                	add    eax,ebx
c000a0b4:	50                   	push   eax
c000a0b5:	57                   	push   edi
c000a0b6:	e8 b3 fc ff ff       	call   c0009d6e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a0bb:	83 c4 10             	add    esp,0x10
c000a0be:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a0c3:	74 03                	je     c000a0c8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000a0c5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a0c8:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a0ce:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000a0d2:	75 d6                	jne    c000a0aa <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000a0d4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000a0d9:	75 10                	jne    c000a0eb <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000a0db:	0f 20 d8             	mov    eax,cr3
c000a0de:	0f 22 d8             	mov    cr3,eax
c000a0e1:	83 c4 1c             	add    esp,0x1c
c000a0e4:	89 f0                	mov    eax,esi
c000a0e6:	5b                   	pop    ebx
c000a0e7:	5e                   	pop    esi
c000a0e8:	5f                   	pop    edi
c000a0e9:	5d                   	pop    ebp
c000a0ea:	c3                   	ret    
c000a0eb:	89 f3                	mov    ebx,esi
c000a0ed:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a0f1:	c1 eb 0a             	shr    ebx,0xa
c000a0f4:	c1 e0 0c             	shl    eax,0xc
c000a0f7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a0fd:	01 f0                	add    eax,esi
c000a0ff:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a105:	c1 e8 0a             	shr    eax,0xa
c000a108:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a10d:	2d 00 00 40 00       	sub    eax,0x400000
c000a112:	39 c3                	cmp    ebx,eax
c000a114:	77 cb                	ja     c000a0e1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000a116:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a119:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a11f:	39 d8                	cmp    eax,ebx
c000a121:	73 f3                	jae    c000a116 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000a123:	83 c4 1c             	add    esp,0x1c
c000a126:	89 f0                	mov    eax,esi
c000a128:	5b                   	pop    ebx
c000a129:	5e                   	pop    esi
c000a12a:	5f                   	pop    edi
c000a12b:	5d                   	pop    ebp
c000a12c:	c3                   	ret    
c000a12d:	90                   	nop

c000a12e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a12e:	55                   	push   ebp
c000a12f:	57                   	push   edi
c000a130:	56                   	push   esi
c000a131:	53                   	push   ebx
c000a132:	83 ec 1c             	sub    esp,0x1c
c000a135:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a139:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a13d:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000a141:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000a145:	a9 ff 0f 00 00       	test   eax,0xfff
c000a14a:	75 4a                	jne    c000a196 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000a14c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000a150:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a153:	c1 eb 16             	shr    ebx,0x16
c000a156:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000a15d:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000a161:	74 4d                	je     c000a1b0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000a163:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a167:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000a16b:	c1 e8 0a             	shr    eax,0xa
c000a16e:	80 fa 01             	cmp    dl,0x1
c000a171:	19 d2                	sbb    edx,edx
c000a173:	c1 e3 0c             	shl    ebx,0xc
c000a176:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000a17a:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000a180:	25 fc 0f 00 00       	and    eax,0xffc
c000a185:	01 d8                	add    eax,ebx
c000a187:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000a18e:	83 c4 1c             	add    esp,0x1c
c000a191:	5b                   	pop    ebx
c000a192:	5e                   	pop    esi
c000a193:	5f                   	pop    edi
c000a194:	5d                   	pop    ebp
c000a195:	c3                   	ret    
c000a196:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a19a:	83 ec 0c             	sub    esp,0xc
c000a19d:	68 74 db 01 c0       	push   0xc001db74
c000a1a2:	e8 e8 63 00 00       	call   c001058f <KePanic(char const*)>
c000a1a7:	83 c4 10             	add    esp,0x10
c000a1aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a1ae:	eb 9c                	jmp    c000a14c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000a1b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1b4:	e8 b4 dd ff ff       	call   c0007f6d <Phys::allocatePage()>
c000a1b9:	83 ec 0c             	sub    esp,0xc
c000a1bc:	89 c5                	mov    ebp,eax
c000a1be:	8b 0d b0 0a 02 c0    	mov    ecx,DWORD PTR ds:0xc0020ab0
c000a1c4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a1c8:	6a 01                	push   0x1
c000a1ca:	e8 0a f5 ff ff       	call   c00096d9 <Virt::allocateKernelVirtualPages(int)>
c000a1cf:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a1d6:	6a 01                	push   0x1
c000a1d8:	50                   	push   eax
c000a1d9:	55                   	push   ebp
c000a1da:	81 cd 07 04 00 00    	or     ebp,0x407
c000a1e0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a1e4:	51                   	push   ecx
c000a1e5:	e8 7e fe ff ff       	call   c000a068 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a1ea:	83 c4 1c             	add    esp,0x1c
c000a1ed:	68 00 10 00 00       	push   0x1000
c000a1f2:	6a 00                	push   0x0
c000a1f4:	50                   	push   eax
c000a1f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1f9:	e8 d2 62 ff ff       	call   c00004d0 <memset>
c000a1fe:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a202:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a205:	e8 ff f7 ff ff       	call   c0009a09 <Virt::freeKernelVirtualPages(unsigned long)>
c000a20a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a20d:	83 c4 10             	add    esp,0x10
c000a210:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000a213:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a217:	e9 47 ff ff ff       	jmp    c000a163 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000a21c <VAS::VAS(bool)>:
c000a21c:	53                   	push   ebx
c000a21d:	83 ec 28             	sub    esp,0x28
c000a220:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a224:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a228:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a22c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a233:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a237:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a23e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a242:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a246:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a249:	e8 1f dd ff ff       	call   c0007f6d <Phys::allocatePage()>
c000a24e:	89 c2                	mov    edx,eax
c000a250:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a254:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a257:	8b 1d b0 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ab0
c000a25d:	83 ec 0c             	sub    esp,0xc
c000a260:	6a 01                	push   0x1
c000a262:	e8 72 f4 ff ff       	call   c00096d9 <Virt::allocateKernelVirtualPages(int)>
c000a267:	83 c4 10             	add    esp,0x10
c000a26a:	89 c2                	mov    edx,eax
c000a26c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a270:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a273:	83 ec 0c             	sub    esp,0xc
c000a276:	6a 03                	push   0x3
c000a278:	6a 01                	push   0x1
c000a27a:	52                   	push   edx
c000a27b:	50                   	push   eax
c000a27c:	53                   	push   ebx
c000a27d:	e8 e6 fd ff ff       	call   c000a068 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a282:	83 c4 20             	add    esp,0x20
c000a285:	89 c2                	mov    edx,eax
c000a287:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a28b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a28e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a296:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a29e:	7f 1c                	jg     c000a2bc <VAS::VAS(bool)+0xa0>
c000a2a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2a4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a2ab:	c1 e2 02             	shl    edx,0x2
c000a2ae:	01 d0                	add    eax,edx
c000a2b0:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a2b6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000a2ba:	eb da                	jmp    c000a296 <VAS::VAS(bool)+0x7a>
c000a2bc:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a2c4:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a2cc:	7f 7a                	jg     c000a348 <VAS::VAS(bool)+0x12c>
c000a2ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a2d2:	2d 00 02 00 00       	sub    eax,0x200
c000a2d7:	c1 e0 0c             	shl    eax,0xc
c000a2da:	83 c8 03             	or     eax,0x3
c000a2dd:	89 c2                	mov    edx,eax
c000a2df:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000a2e4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2ea:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a2f0:	83 e0 10             	and    eax,0x10
c000a2f3:	84 c0                	test   al,al
c000a2f5:	74 07                	je     c000a2fe <VAS::VAS(bool)+0xe2>
c000a2f7:	b8 00 01 00 00       	mov    eax,0x100
c000a2fc:	eb 05                	jmp    c000a303 <VAS::VAS(bool)+0xe7>
c000a2fe:	b8 00 00 00 00       	mov    eax,0x0
c000a303:	09 d0                	or     eax,edx
c000a305:	89 c1                	mov    ecx,eax
c000a307:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a30b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a30e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a312:	c1 e2 02             	shl    edx,0x2
c000a315:	01 d0                	add    eax,edx
c000a317:	89 ca                	mov    edx,ecx
c000a319:	89 10                	mov    DWORD PTR [eax],edx
c000a31b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a31f:	2d 40 03 00 00       	sub    eax,0x340
c000a324:	83 f8 7f             	cmp    eax,0x7f
c000a327:	77 16                	ja     c000a33f <VAS::VAS(bool)+0x123>
c000a329:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a32d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a330:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a334:	c1 e2 02             	shl    edx,0x2
c000a337:	01 d0                	add    eax,edx
c000a339:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a33f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000a343:	e9 7c ff ff ff       	jmp    c000a2c4 <VAS::VAS(bool)+0xa8>
c000a348:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000a34d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a353:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a359:	83 e0 10             	and    eax,0x10
c000a35c:	84 c0                	test   al,al
c000a35e:	74 07                	je     c000a367 <VAS::VAS(bool)+0x14b>
c000a360:	b8 03 41 00 00       	mov    eax,0x4103
c000a365:	eb 05                	jmp    c000a36c <VAS::VAS(bool)+0x150>
c000a367:	b8 03 40 00 00       	mov    eax,0x4003
c000a36c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a370:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a373:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a379:	89 02                	mov    DWORD PTR [edx],eax
c000a37b:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000a380:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a386:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a38c:	83 ec 08             	sub    esp,0x8
c000a38f:	50                   	push   eax
c000a390:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a394:	e8 b1 fc ff ff       	call   c000a04a <VAS::setCPUSpecific(unsigned long)>
c000a399:	83 c4 10             	add    esp,0x10
c000a39c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a3a0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a3a3:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000a3a8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3ae:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a3b4:	83 e0 10             	and    eax,0x10
c000a3b7:	84 c0                	test   al,al
c000a3b9:	74 07                	je     c000a3c2 <VAS::VAS(bool)+0x1a6>
c000a3bb:	b8 00 01 00 00       	mov    eax,0x100
c000a3c0:	eb 05                	jmp    c000a3c7 <VAS::VAS(bool)+0x1ab>
c000a3c2:	b8 00 00 00 00       	mov    eax,0x0
c000a3c7:	09 c2                	or     edx,eax
c000a3c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a3cd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a3d0:	05 fc 0f 00 00       	add    eax,0xffc
c000a3d5:	83 ca 03             	or     edx,0x3
c000a3d8:	89 10                	mov    DWORD PTR [eax],edx
c000a3da:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000a3df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3e5:	83 ec 0c             	sub    esp,0xc
c000a3e8:	50                   	push   eax
c000a3e9:	e8 12 1c 00 00       	call   c000c000 <Device::getName()>
c000a3ee:	83 c4 10             	add    esp,0x10
c000a3f1:	83 ec 08             	sub    esp,0x8
c000a3f4:	68 17 dc 01 c0       	push   0xc001dc17
c000a3f9:	50                   	push   eax
c000a3fa:	e8 e1 62 ff ff       	call   c00006e0 <strcmp>
c000a3ff:	83 c4 10             	add    esp,0x10
c000a402:	85 c0                	test   eax,eax
c000a404:	0f 94 c0             	sete   al
c000a407:	84 c0                	test   al,al
c000a409:	0f 84 87 00 00 00    	je     c000a496 <VAS::VAS(bool)+0x27a>
c000a40f:	fa                   	cli    
c000a410:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c000a415:	40                   	inc    eax
c000a416:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c000a41b:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000a420:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a426:	05 7c 09 00 00       	add    eax,0x97c
c000a42b:	83 ec 0c             	sub    esp,0xc
c000a42e:	50                   	push   eax
c000a42f:	e8 5a d3 ff ff       	call   c000778e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a434:	83 c4 10             	add    esp,0x10
c000a437:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a43c:	89 c3                	mov    ebx,eax
c000a43e:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000a443:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a449:	05 7c 09 00 00       	add    eax,0x97c
c000a44e:	83 ec 0c             	sub    esp,0xc
c000a451:	50                   	push   eax
c000a452:	e8 37 d3 ff ff       	call   c000778e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a457:	83 c4 10             	add    esp,0x10
c000a45a:	83 ec 08             	sub    esp,0x8
c000a45d:	50                   	push   eax
c000a45e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a462:	e8 83 f5 ff ff       	call   c00099ea <VAS::getPageTableEntry(unsigned long)>
c000a467:	83 c4 10             	add    esp,0x10
c000a46a:	8b 00                	mov    eax,DWORD PTR [eax]
c000a46c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a471:	6a 11                	push   0x11
c000a473:	53                   	push   ebx
c000a474:	50                   	push   eax
c000a475:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a479:	e8 f0 f8 ff ff       	call   c0009d6e <VAS::mapPage(unsigned long, unsigned long, int)>
c000a47e:	83 c4 10             	add    esp,0x10
c000a481:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c000a486:	48                   	dec    eax
c000a487:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c000a48c:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c000a491:	85 c0                	test   eax,eax
c000a493:	75 01                	jne    c000a496 <VAS::VAS(bool)+0x27a>
c000a495:	fb                   	sti    
c000a496:	90                   	nop
c000a497:	83 c4 28             	add    esp,0x28
c000a49a:	5b                   	pop    ebx
c000a49b:	c3                   	ret    

c000a49c <VAS::evict(unsigned long)>:
c000a49c:	55                   	push   ebp
c000a49d:	57                   	push   edi
c000a49e:	56                   	push   esi
c000a49f:	53                   	push   ebx
c000a4a0:	83 ec 1c             	sub    esp,0x1c
c000a4a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a4a7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a4ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4af:	e8 66 f3 ff ff       	call   c000981a <Virt::allocateSwapfilePage()>
c000a4b4:	8b 0d ac f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f7ac
c000a4ba:	89 c7                	mov    edi,eax
c000a4bc:	85 c9                	test   ecx,ecx
c000a4be:	7e 3e                	jle    c000a4fe <VAS::evict(unsigned long)+0x62>
c000a4c0:	89 ee                	mov    esi,ebp
c000a4c2:	31 db                	xor    ebx,ebx
c000a4c4:	83 ec 0c             	sub    esp,0xc
c000a4c7:	57                   	push   edi
c000a4c8:	e8 3b f3 ff ff       	call   c0009808 <Virt::swapIDToSector(unsigned long)>
c000a4cd:	89 34 24             	mov    DWORD PTR [esp],esi
c000a4d0:	01 d8                	add    eax,ebx
c000a4d2:	6a 01                	push   0x1
c000a4d4:	31 d2                	xor    edx,edx
c000a4d6:	43                   	inc    ebx
c000a4d7:	52                   	push   edx
c000a4d8:	81 c6 00 02 00 00    	add    esi,0x200
c000a4de:	50                   	push   eax
c000a4df:	0f be 05 b8 f7 01 c0 	movsx  eax,BYTE PTR ds:0xc001f7b8
c000a4e6:	8b 14 85 1c 2e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd1e4]
c000a4ed:	52                   	push   edx
c000a4ee:	e8 8d 2b 00 00       	call   c000d080 <LogicalDisk::write(unsigned long long, int, void*)>
c000a4f3:	83 c4 20             	add    esp,0x20
c000a4f6:	39 1d ac f7 01 c0    	cmp    DWORD PTR ds:0xc001f7ac,ebx
c000a4fc:	7f c6                	jg     c000a4c4 <VAS::evict(unsigned long)+0x28>
c000a4fe:	83 ec 08             	sub    esp,0x8
c000a501:	c1 e7 0b             	shl    edi,0xb
c000a504:	55                   	push   ebp
c000a505:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a509:	50                   	push   eax
c000a50a:	e8 db f4 ff ff       	call   c00099ea <VAS::getPageTableEntry(unsigned long)>
c000a50f:	8b 10                	mov    edx,DWORD PTR [eax]
c000a511:	89 d1                	mov    ecx,edx
c000a513:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a519:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a51f:	09 cf                	or     edi,ecx
c000a521:	89 38                	mov    DWORD PTR [eax],edi
c000a523:	89 14 24             	mov    DWORD PTR [esp],edx
c000a526:	ff 05 a8 0a 02 c0    	inc    DWORD PTR ds:0xc0020aa8
c000a52c:	e8 da d9 ff ff       	call   c0007f0b <Phys::freePage(unsigned long)>
c000a531:	0f 20 d8             	mov    eax,cr3
c000a534:	0f 22 d8             	mov    cr3,eax
c000a537:	a1 a4 0a 02 c0       	mov    eax,ds:0xc0020aa4
c000a53c:	c7 44 24 40 25 dc 01 c0 	mov    DWORD PTR [esp+0x40],0xc001dc25
c000a544:	8d 50 01             	lea    edx,[eax+0x1]
c000a547:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a54b:	89 15 a4 0a 02 c0    	mov    DWORD PTR ds:0xc0020aa4,edx
c000a551:	83 c4 2c             	add    esp,0x2c
c000a554:	5b                   	pop    ebx
c000a555:	5e                   	pop    esi
c000a556:	5f                   	pop    edi
c000a557:	5d                   	pop    ebp
c000a558:	e9 cf 03 00 00       	jmp    c000a92c <Dbg::kprintf(char const*, ...)>
c000a55d:	90                   	nop

c000a55e <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a55e:	55                   	push   ebp
c000a55f:	57                   	push   edi
c000a560:	56                   	push   esi
c000a561:	53                   	push   ebx
c000a562:	83 ec 14             	sub    esp,0x14
c000a565:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a569:	53                   	push   ebx
c000a56a:	68 36 dc 01 c0       	push   0xc001dc36
c000a56f:	e8 b8 03 00 00       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c000a574:	83 c4 10             	add    esp,0x10
c000a577:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a57d:	74 21                	je     c000a5a0 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a57f:	83 ec 08             	sub    esp,0x8
c000a582:	53                   	push   ebx
c000a583:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a587:	57                   	push   edi
c000a588:	e8 5d f4 ff ff       	call   c00099ea <VAS::getPageTableEntry(unsigned long)>
c000a58d:	83 c4 10             	add    esp,0x10
c000a590:	89 c6                	mov    esi,eax
c000a592:	85 c0                	test   eax,eax
c000a594:	74 0a                	je     c000a5a0 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a596:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a598:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a59e:	74 0a                	je     c000a5aa <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a5a0:	31 c0                	xor    eax,eax
c000a5a2:	83 c4 0c             	add    esp,0xc
c000a5a5:	5b                   	pop    ebx
c000a5a6:	5e                   	pop    esi
c000a5a7:	5f                   	pop    edi
c000a5a8:	5d                   	pop    ebp
c000a5a9:	c3                   	ret    
c000a5aa:	e8 be d9 ff ff       	call   c0007f6d <Phys::allocatePage()>
c000a5af:	c1 ed 0b             	shr    ebp,0xb
c000a5b2:	8b 16                	mov    edx,DWORD PTR [esi]
c000a5b4:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a5ba:	09 c2                	or     edx,eax
c000a5bc:	81 ca 01 08 00 00    	or     edx,0x801
c000a5c2:	89 16                	mov    DWORD PTR [esi],edx
c000a5c4:	8b 35 ac f7 01 c0    	mov    esi,DWORD PTR ds:0xc001f7ac
c000a5ca:	85 f6                	test   esi,esi
c000a5cc:	7e 3e                	jle    c000a60c <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a5ce:	89 df                	mov    edi,ebx
c000a5d0:	31 f6                	xor    esi,esi
c000a5d2:	83 ec 0c             	sub    esp,0xc
c000a5d5:	55                   	push   ebp
c000a5d6:	e8 2d f2 ff ff       	call   c0009808 <Virt::swapIDToSector(unsigned long)>
c000a5db:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a5de:	01 f0                	add    eax,esi
c000a5e0:	6a 01                	push   0x1
c000a5e2:	31 d2                	xor    edx,edx
c000a5e4:	46                   	inc    esi
c000a5e5:	52                   	push   edx
c000a5e6:	81 c7 00 02 00 00    	add    edi,0x200
c000a5ec:	50                   	push   eax
c000a5ed:	0f be 05 b8 f7 01 c0 	movsx  eax,BYTE PTR ds:0xc001f7b8
c000a5f4:	8b 0c 85 1c 2e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd1e4]
c000a5fb:	51                   	push   ecx
c000a5fc:	e8 13 2a 00 00       	call   c000d014 <LogicalDisk::read(unsigned long long, int, void*)>
c000a601:	83 c4 20             	add    esp,0x20
c000a604:	39 35 ac f7 01 c0    	cmp    DWORD PTR ds:0xc001f7ac,esi
c000a60a:	7f c6                	jg     c000a5d2 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a60c:	a1 a8 0a 02 c0       	mov    eax,ds:0xc0020aa8
c000a611:	48                   	dec    eax
c000a612:	52                   	push   edx
c000a613:	a3 a8 0a 02 c0       	mov    ds:0xc0020aa8,eax
c000a618:	50                   	push   eax
c000a619:	53                   	push   ebx
c000a61a:	68 49 dc 01 c0       	push   0xc001dc49
c000a61f:	e8 08 03 00 00       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c000a624:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a627:	e8 be f1 ff ff       	call   c00097ea <Virt::freeSwapfilePage(unsigned long)>
c000a62c:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c000a631:	83 c4 10             	add    esp,0x10
c000a634:	48                   	dec    eax
c000a635:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c000a63a:	85 c0                	test   eax,eax
c000a63c:	75 01                	jne    c000a63f <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a63e:	fb                   	sti    
c000a63f:	0f 20 d8             	mov    eax,cr3
c000a642:	0f 22 d8             	mov    cr3,eax
c000a645:	b0 01                	mov    al,0x1
c000a647:	e9 56 ff ff ff       	jmp    c000a5a2 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a64c <VAS::scanForEviction()>:
c000a64c:	57                   	push   edi
c000a64d:	31 ff                	xor    edi,edi
c000a64f:	56                   	push   esi
c000a650:	53                   	push   ebx
c000a651:	83 ec 10             	sub    esp,0x10
c000a654:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a658:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a65b:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a661:	75 0e                	jne    c000a671 <VAS::scanForEviction()+0x25>
c000a663:	89 da                	mov    edx,ebx
c000a665:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a668:	c1 ea 16             	shr    edx,0x16
c000a66b:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a66f:	74 4e                	je     c000a6bf <VAS::scanForEviction()+0x73>
c000a671:	53                   	push   ebx
c000a672:	56                   	push   esi
c000a673:	e8 72 f3 ff ff       	call   c00099ea <VAS::getPageTableEntry(unsigned long)>
c000a678:	5a                   	pop    edx
c000a679:	8b 10                	mov    edx,DWORD PTR [eax]
c000a67b:	59                   	pop    ecx
c000a67c:	89 d1                	mov    ecx,edx
c000a67e:	81 e1 01 08 00 00    	and    ecx,0x801
c000a684:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a68a:	74 3e                	je     c000a6ca <VAS::scanForEviction()+0x7e>
c000a68c:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a692:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a698:	76 2b                	jbe    c000a6c5 <VAS::scanForEviction()+0x79>
c000a69a:	47                   	inc    edi
c000a69b:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a6a2:	83 ff 03             	cmp    edi,0x3
c000a6a5:	74 32                	je     c000a6d9 <VAS::scanForEviction()+0x8d>
c000a6a7:	31 db                	xor    ebx,ebx
c000a6a9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a6af:	75 c0                	jne    c000a671 <VAS::scanForEviction()+0x25>
c000a6b1:	89 da                	mov    edx,ebx
c000a6b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a6b6:	c1 ea 16             	shr    edx,0x16
c000a6b9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a6bd:	75 b2                	jne    c000a671 <VAS::scanForEviction()+0x25>
c000a6bf:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a6c5:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a6c8:	eb 91                	jmp    c000a65b <VAS::scanForEviction()+0xf>
c000a6ca:	f6 c2 20             	test   dl,0x20
c000a6cd:	74 13                	je     c000a6e2 <VAS::scanForEviction()+0x96>
c000a6cf:	83 e2 df             	and    edx,0xffffffdf
c000a6d2:	89 10                	mov    DWORD PTR [eax],edx
c000a6d4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a6d7:	eb b3                	jmp    c000a68c <VAS::scanForEviction()+0x40>
c000a6d9:	83 c4 10             	add    esp,0x10
c000a6dc:	31 c0                	xor    eax,eax
c000a6de:	5b                   	pop    ebx
c000a6df:	5e                   	pop    esi
c000a6e0:	5f                   	pop    edi
c000a6e1:	c3                   	ret    
c000a6e2:	83 ec 08             	sub    esp,0x8
c000a6e5:	89 d0                	mov    eax,edx
c000a6e7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a6ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a6f0:	53                   	push   ebx
c000a6f1:	68 5e dc 01 c0       	push   0xc001dc5e
c000a6f6:	e8 31 02 00 00       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c000a6fb:	58                   	pop    eax
c000a6fc:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a6ff:	5a                   	pop    edx
c000a700:	51                   	push   ecx
c000a701:	56                   	push   esi
c000a702:	e8 95 fd ff ff       	call   c000a49c <VAS::evict(unsigned long)>
c000a707:	5b                   	pop    ebx
c000a708:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a70b:	5f                   	pop    edi
c000a70c:	50                   	push   eax
c000a70d:	68 72 dc 01 c0       	push   0xc001dc72
c000a712:	e8 15 02 00 00       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c000a717:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a71e:	83 c4 10             	add    esp,0x10
c000a721:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a725:	83 c4 10             	add    esp,0x10
c000a728:	5b                   	pop    ebx
c000a729:	5e                   	pop    esi
c000a72a:	5f                   	pop    edi
c000a72b:	c3                   	ret    

c000a72c <mapVASFirstTime>:
c000a72c:	55                   	push   ebp
c000a72d:	57                   	push   edi
c000a72e:	56                   	push   esi
c000a72f:	53                   	push   ebx
c000a730:	83 ec 0c             	sub    esp,0xc
c000a733:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a738:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a73b:	4a                   	dec    edx
c000a73c:	0f 84 8c 00 00 00    	je     c000a7ce <mapVASFirstTime+0xa2>
c000a742:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a745:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a748:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a74d:	c1 e5 15             	shl    ebp,0x15
c000a750:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a755:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a75b:	29 eb                	sub    ebx,ebp
c000a75d:	29 ef                	sub    edi,ebp
c000a75f:	e8 09 d8 ff ff       	call   c0007f6d <Phys::allocatePage()>
c000a764:	83 ec 0c             	sub    esp,0xc
c000a767:	68 03 04 00 00       	push   0x403
c000a76c:	6a 01                	push   0x1
c000a76e:	53                   	push   ebx
c000a76f:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a775:	50                   	push   eax
c000a776:	56                   	push   esi
c000a777:	e8 ec f8 ff ff       	call   c000a068 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a77c:	83 c4 20             	add    esp,0x20
c000a77f:	39 fb                	cmp    ebx,edi
c000a781:	75 dc                	jne    c000a75f <mapVASFirstTime+0x33>
c000a783:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a788:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a78d:	29 eb                	sub    ebx,ebp
c000a78f:	29 ef                	sub    edi,ebp
c000a791:	e8 d7 d7 ff ff       	call   c0007f6d <Phys::allocatePage()>
c000a796:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a79a:	19 d2                	sbb    edx,edx
c000a79c:	83 ec 0c             	sub    esp,0xc
c000a79f:	83 e2 04             	and    edx,0x4
c000a7a2:	81 c2 03 04 00 00    	add    edx,0x403
c000a7a8:	52                   	push   edx
c000a7a9:	6a 01                	push   0x1
c000a7ab:	53                   	push   ebx
c000a7ac:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a7b2:	50                   	push   eax
c000a7b3:	56                   	push   esi
c000a7b4:	e8 af f8 ff ff       	call   c000a068 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a7b9:	83 c4 20             	add    esp,0x20
c000a7bc:	39 df                	cmp    edi,ebx
c000a7be:	75 d1                	jne    c000a791 <mapVASFirstTime+0x65>
c000a7c0:	0f 20 d8             	mov    eax,cr3
c000a7c3:	0f 22 d8             	mov    cr3,eax
c000a7c6:	83 c4 0c             	add    esp,0xc
c000a7c9:	5b                   	pop    ebx
c000a7ca:	5e                   	pop    esi
c000a7cb:	5f                   	pop    edi
c000a7cc:	5d                   	pop    ebp
c000a7cd:	c3                   	ret    
c000a7ce:	83 ec 0c             	sub    esp,0xc
c000a7d1:	68 85 dc 01 c0       	push   0xc001dc85
c000a7d6:	e8 51 01 00 00       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c000a7db:	83 c4 10             	add    esp,0x10
c000a7de:	83 c4 0c             	add    esp,0xc
c000a7e1:	5b                   	pop    ebx
c000a7e2:	5e                   	pop    esi
c000a7e3:	5f                   	pop    edi
c000a7e4:	5d                   	pop    ebp
c000a7e5:	c3                   	ret    

c000a7e6 <__cxa_atexit>:
c000a7e6:	31 c0                	xor    eax,eax
c000a7e8:	c3                   	ret    

c000a7e9 <__cxa_finalize>:
c000a7e9:	c3                   	ret    

c000a7ea <__stack_chk_fail>:
c000a7ea:	55                   	push   ebp
c000a7eb:	89 e5                	mov    ebp,esp
c000a7ed:	83 ec 10             	sub    esp,0x10
c000a7f0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7f3:	68 9e dc 01 c0       	push   0xc001dc9e
c000a7f8:	e8 2f 01 00 00       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c000a7fd:	58                   	pop    eax
c000a7fe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a801:	5a                   	pop    edx
c000a802:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a805:	68 9e dc 01 c0       	push   0xc001dc9e
c000a80a:	e8 1d 01 00 00       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c000a80f:	c7 04 24 a6 dc 01 c0 	mov    DWORD PTR [esp],0xc001dca6
c000a816:	e8 74 5d 00 00       	call   c001058f <KePanic(char const*)>
c000a81b:	83 c4 10             	add    esp,0x10
c000a81e:	c9                   	leave  
c000a81f:	c3                   	ret    

c000a820 <__cxa_pure_virtual>:
c000a820:	83 ec 18             	sub    esp,0x18
c000a823:	68 be dc 01 c0       	push   0xc001dcbe
c000a828:	e8 62 5d 00 00       	call   c001058f <KePanic(char const*)>
c000a82d:	83 c4 1c             	add    esp,0x1c
c000a830:	c3                   	ret    

c000a831 <operator new[](unsigned long)>:
c000a831:	e9 5b d4 ff ff       	jmp    c0007c91 <malloc>

c000a836 <operator delete(void*, unsigned long)>:
c000a836:	e9 76 d4 ff ff       	jmp    c0007cb1 <rfree>

c000a83b <operator delete[](void*)>:
c000a83b:	e9 71 d4 ff ff       	jmp    c0007cb1 <rfree>

c000a840 <operator delete[](void*, unsigned long)>:
c000a840:	e9 6c d4 ff ff       	jmp    c0007cb1 <rfree>

c000a845 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a845:	55                   	push   ebp
c000a846:	b9 04 00 00 00       	mov    ecx,0x4
c000a84b:	57                   	push   edi
c000a84c:	56                   	push   esi
c000a84d:	be d3 d8 01 c0       	mov    esi,0xc001d8d3
c000a852:	53                   	push   ebx
c000a853:	83 ec 20             	sub    esp,0x20
c000a856:	a1 d2 d8 01 c0       	mov    eax,ds:0xc001d8d2
c000a85b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a85f:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a863:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a867:	a1 df d8 01 c0       	mov    eax,ds:0xc001d8df
c000a86c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a870:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a874:	fc                   	cld    
c000a875:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a877:	89 ee                	mov    esi,ebp
c000a879:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a87d:	eb 02                	jmp    c000a881 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a87f:	89 c6                	mov    esi,eax
c000a881:	31 d2                	xor    edx,edx
c000a883:	41                   	inc    ecx
c000a884:	89 f0                	mov    eax,esi
c000a886:	f7 f3                	div    ebx
c000a888:	39 de                	cmp    esi,ebx
c000a88a:	73 f3                	jae    c000a87f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a88c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a88f:	eb 02                	jmp    c000a893 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a891:	89 c5                	mov    ebp,eax
c000a893:	31 d2                	xor    edx,edx
c000a895:	49                   	dec    ecx
c000a896:	89 e8                	mov    eax,ebp
c000a898:	f7 f3                	div    ebx
c000a89a:	39 dd                	cmp    ebp,ebx
c000a89c:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8a0:	88 11                	mov    BYTE PTR [ecx],dl
c000a8a2:	73 ed                	jae    c000a891 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a8a4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8a8:	83 c4 20             	add    esp,0x20
c000a8ab:	5b                   	pop    ebx
c000a8ac:	5e                   	pop    esi
c000a8ad:	5f                   	pop    edi
c000a8ae:	5d                   	pop    ebp
c000a8af:	c3                   	ret    

c000a8b0 <Dbg::logc(char)>:
c000a8b0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8b4:	f6 05 d0 09 02 c0 10 	test   BYTE PTR ds:0xc00209d0,0x10
c000a8bb:	75 12                	jne    c000a8cf <Dbg::logc(char)+0x1f>
c000a8bd:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8c2:	ec                   	in     al,dx
c000a8c3:	a8 20                	test   al,0x20
c000a8c5:	74 fb                	je     c000a8c2 <Dbg::logc(char)+0x12>
c000a8c7:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8cc:	88 c8                	mov    al,cl
c000a8ce:	ee                   	out    dx,al
c000a8cf:	c3                   	ret    

c000a8d0 <Dbg::logs(char*)>:
c000a8d0:	53                   	push   ebx
c000a8d1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8d5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8d8:	84 c0                	test   al,al
c000a8da:	74 0f                	je     c000a8eb <Dbg::logs(char*)+0x1b>
c000a8dc:	50                   	push   eax
c000a8dd:	43                   	inc    ebx
c000a8de:	e8 cd ff ff ff       	call   c000a8b0 <Dbg::logc(char)>
c000a8e3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8e6:	5a                   	pop    edx
c000a8e7:	84 c0                	test   al,al
c000a8e9:	75 f1                	jne    c000a8dc <Dbg::logs(char*)+0xc>
c000a8eb:	5b                   	pop    ebx
c000a8ec:	c3                   	ret    

c000a8ed <Dbg::logWriteInt(unsigned int)>:
c000a8ed:	83 ec 10             	sub    esp,0x10
c000a8f0:	6a 0a                	push   0xa
c000a8f2:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8f6:	50                   	push   eax
c000a8f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8fb:	50                   	push   eax
c000a8fc:	e8 44 ff ff ff       	call   c000a845 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a901:	50                   	push   eax
c000a902:	e8 c9 ff ff ff       	call   c000a8d0 <Dbg::logs(char*)>
c000a907:	83 c4 20             	add    esp,0x20
c000a90a:	c3                   	ret    

c000a90b <Dbg::logWriteIntBase(unsigned int, int)>:
c000a90b:	83 ec 10             	sub    esp,0x10
c000a90e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a912:	50                   	push   eax
c000a913:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a917:	50                   	push   eax
c000a918:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a91c:	52                   	push   edx
c000a91d:	e8 23 ff ff ff       	call   c000a845 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a922:	50                   	push   eax
c000a923:	e8 a8 ff ff ff       	call   c000a8d0 <Dbg::logs(char*)>
c000a928:	83 c4 20             	add    esp,0x20
c000a92b:	c3                   	ret    

c000a92c <Dbg::kprintf(char const*, ...)>:
c000a92c:	55                   	push   ebp
c000a92d:	57                   	push   edi
c000a92e:	56                   	push   esi
c000a92f:	53                   	push   ebx
c000a930:	83 ec 0c             	sub    esp,0xc
c000a933:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a937:	f6 05 d0 09 02 c0 10 	test   BYTE PTR ds:0xc00209d0,0x10
c000a93e:	74 08                	je     c000a948 <Dbg::kprintf(char const*, ...)+0x1c>
c000a940:	83 c4 0c             	add    esp,0xc
c000a943:	5b                   	pop    ebx
c000a944:	5e                   	pop    esi
c000a945:	5f                   	pop    edi
c000a946:	5d                   	pop    ebp
c000a947:	c3                   	ret    
c000a948:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a94c:	31 ff                	xor    edi,edi
c000a94e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a952:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a955:	84 c0                	test   al,al
c000a957:	74 e7                	je     c000a940 <Dbg::kprintf(char const*, ...)+0x14>
c000a959:	8d 77 01             	lea    esi,[edi+0x1]
c000a95c:	3c 25                	cmp    al,0x25
c000a95e:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a961:	75 47                	jne    c000a9aa <Dbg::kprintf(char const*, ...)+0x7e>
c000a963:	83 c7 02             	add    edi,0x2
c000a966:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a969:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a96c:	83 e8 25             	sub    eax,0x25
c000a96f:	3c 53                	cmp    al,0x53
c000a971:	0f 87 d2 00 00 00    	ja     c000aa49 <Dbg::kprintf(char const*, ...)+0x11d>
c000a977:	25 ff 00 00 00       	and    eax,0xff
c000a97c:	ff 24 85 d4 dc 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe232c]
c000a983:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a987:	89 c8                	mov    eax,ecx
c000a989:	83 c1 04             	add    ecx,0x4
c000a98c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a990:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a992:	55                   	push   ebp
c000a993:	e8 55 ff ff ff       	call   c000a8ed <Dbg::logWriteInt(unsigned int)>
c000a998:	58                   	pop    eax
c000a999:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a99c:	84 c0                	test   al,al
c000a99e:	74 a0                	je     c000a940 <Dbg::kprintf(char const*, ...)+0x14>
c000a9a0:	8d 77 01             	lea    esi,[edi+0x1]
c000a9a3:	3c 25                	cmp    al,0x25
c000a9a5:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9a8:	74 b9                	je     c000a963 <Dbg::kprintf(char const*, ...)+0x37>
c000a9aa:	50                   	push   eax
c000a9ab:	89 f7                	mov    edi,esi
c000a9ad:	e8 fe fe ff ff       	call   c000a8b0 <Dbg::logc(char)>
c000a9b2:	89 ee                	mov    esi,ebp
c000a9b4:	58                   	pop    eax
c000a9b5:	eb e2                	jmp    c000a999 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9b7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9bb:	89 c8                	mov    eax,ecx
c000a9bd:	83 c1 04             	add    ecx,0x4
c000a9c0:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9c2:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9c6:	50                   	push   eax
c000a9c7:	e8 04 ff ff ff       	call   c000a8d0 <Dbg::logs(char*)>
c000a9cc:	58                   	pop    eax
c000a9cd:	eb ca                	jmp    c000a999 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9cf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9d3:	89 d0                	mov    eax,edx
c000a9d5:	83 c2 04             	add    edx,0x4
c000a9d8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9dc:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9de:	50                   	push   eax
c000a9df:	e8 09 ff ff ff       	call   c000a8ed <Dbg::logWriteInt(unsigned int)>
c000a9e4:	58                   	pop    eax
c000a9e5:	eb b2                	jmp    c000a999 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9e7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9eb:	89 d0                	mov    eax,edx
c000a9ed:	83 c2 04             	add    edx,0x4
c000a9f0:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a9f3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9f7:	50                   	push   eax
c000a9f8:	e8 b3 fe ff ff       	call   c000a8b0 <Dbg::logc(char)>
c000a9fd:	58                   	pop    eax
c000a9fe:	eb 99                	jmp    c000a999 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa00:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa04:	89 c8                	mov    eax,ecx
c000aa06:	83 c1 04             	add    ecx,0x4
c000aa09:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa0d:	6a 10                	push   0x10
c000aa0f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa11:	51                   	push   ecx
c000aa12:	e8 f4 fe ff ff       	call   c000a90b <Dbg::logWriteIntBase(unsigned int, int)>
c000aa17:	5d                   	pop    ebp
c000aa18:	58                   	pop    eax
c000aa19:	e9 7b ff ff ff       	jmp    c000a999 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa22:	89 d0                	mov    eax,edx
c000aa24:	83 c2 08             	add    edx,0x8
c000aa27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa2b:	6a 10                	push   0x10
c000aa2d:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa2f:	50                   	push   eax
c000aa30:	e8 d6 fe ff ff       	call   c000a90b <Dbg::logWriteIntBase(unsigned int, int)>
c000aa35:	58                   	pop    eax
c000aa36:	5a                   	pop    edx
c000aa37:	e9 5d ff ff ff       	jmp    c000a999 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa3c:	6a 25                	push   0x25
c000aa3e:	e8 6d fe ff ff       	call   c000a8b0 <Dbg::logc(char)>
c000aa43:	5a                   	pop    edx
c000aa44:	e9 50 ff ff ff       	jmp    c000a999 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa49:	6a 25                	push   0x25
c000aa4b:	e8 60 fe ff ff       	call   c000a8b0 <Dbg::logc(char)>
c000aa50:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa54:	50                   	push   eax
c000aa55:	e8 56 fe ff ff       	call   c000a8b0 <Dbg::logc(char)>
c000aa5a:	5a                   	pop    edx
c000aa5b:	59                   	pop    ecx
c000aa5c:	e9 38 ff ff ff       	jmp    c000a999 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa61:	90                   	nop

c000aa62 <File::read(unsigned long long, void*, int*)>:
c000aa62:	53                   	push   ebx
c000aa63:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aa67:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000aa6b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000aa72:	3c 19                	cmp    al,0x19
c000aa74:	77 35                	ja     c000aaab <File::read(unsigned long long, void*, int*)+0x49>
c000aa76:	8b 04 85 20 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0e0]
c000aa7d:	85 c0                	test   eax,eax
c000aa7f:	74 2a                	je     c000aaab <File::read(unsigned long long, void*, int*)+0x49>
c000aa81:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000aa87:	85 c0                	test   eax,eax
c000aa89:	74 20                	je     c000aaab <File::read(unsigned long long, void*, int*)+0x49>
c000aa8b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000aa8f:	74 21                	je     c000aab2 <File::read(unsigned long long, void*, int*)+0x50>
c000aa91:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa93:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aa97:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000aa9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aaa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aaa5:	5b                   	pop    ebx
c000aaa6:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000aaa9:	ff e0                	jmp    eax
c000aaab:	b8 0b 00 00 00       	mov    eax,0xb
c000aab0:	eb 05                	jmp    c000aab7 <File::read(unsigned long long, void*, int*)+0x55>
c000aab2:	b8 05 00 00 00       	mov    eax,0x5
c000aab7:	5b                   	pop    ebx
c000aab8:	c3                   	ret    
c000aab9:	90                   	nop

c000aaba <File::write(unsigned long long, void*, int*)>:
c000aaba:	53                   	push   ebx
c000aabb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aabf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000aac3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000aaca:	3c 19                	cmp    al,0x19
c000aacc:	77 35                	ja     c000ab03 <File::write(unsigned long long, void*, int*)+0x49>
c000aace:	8b 04 85 20 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0e0]
c000aad5:	85 c0                	test   eax,eax
c000aad7:	74 2a                	je     c000ab03 <File::write(unsigned long long, void*, int*)+0x49>
c000aad9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000aadf:	85 c0                	test   eax,eax
c000aae1:	74 20                	je     c000ab03 <File::write(unsigned long long, void*, int*)+0x49>
c000aae3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000aae7:	74 21                	je     c000ab0a <File::write(unsigned long long, void*, int*)+0x50>
c000aae9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aaeb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aaef:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000aaf5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aaf9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aafd:	5b                   	pop    ebx
c000aafe:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ab01:	ff e0                	jmp    eax
c000ab03:	b8 0b 00 00 00       	mov    eax,0xb
c000ab08:	eb 05                	jmp    c000ab0f <File::write(unsigned long long, void*, int*)+0x55>
c000ab0a:	b8 05 00 00 00       	mov    eax,0x5
c000ab0f:	5b                   	pop    ebx
c000ab10:	c3                   	ret    
c000ab11:	90                   	nop

c000ab12 <Directory::read(unsigned long long, void*, int*)>:
c000ab12:	53                   	push   ebx
c000ab13:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab17:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ab1b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ab22:	3c 19                	cmp    al,0x19
c000ab24:	77 35                	ja     c000ab5b <Directory::read(unsigned long long, void*, int*)+0x49>
c000ab26:	8b 04 85 20 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0e0]
c000ab2d:	85 c0                	test   eax,eax
c000ab2f:	74 2a                	je     c000ab5b <Directory::read(unsigned long long, void*, int*)+0x49>
c000ab31:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ab37:	85 c0                	test   eax,eax
c000ab39:	74 20                	je     c000ab5b <Directory::read(unsigned long long, void*, int*)+0x49>
c000ab3b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ab3f:	74 21                	je     c000ab62 <Directory::read(unsigned long long, void*, int*)+0x50>
c000ab41:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ab43:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab47:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ab4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab51:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab55:	5b                   	pop    ebx
c000ab56:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ab59:	ff e0                	jmp    eax
c000ab5b:	b8 0b 00 00 00       	mov    eax,0xb
c000ab60:	eb 05                	jmp    c000ab67 <Directory::read(unsigned long long, void*, int*)+0x55>
c000ab62:	b8 05 00 00 00       	mov    eax,0x5
c000ab67:	5b                   	pop    ebx
c000ab68:	c3                   	ret    
c000ab69:	90                   	nop

c000ab6a <Directory::write(unsigned long long, void*, int*)>:
c000ab6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ab6e:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ab75:	b8 0b 00 00 00       	mov    eax,0xb
c000ab7a:	80 fa 19             	cmp    dl,0x19
c000ab7d:	77 18                	ja     c000ab97 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ab7f:	8b 14 95 20 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd0e0]
c000ab86:	85 d2                	test   edx,edx
c000ab88:	74 0d                	je     c000ab97 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ab8a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000ab91:	19 c0                	sbb    eax,eax
c000ab93:	83 e0 0a             	and    eax,0xa
c000ab96:	40                   	inc    eax
c000ab97:	c3                   	ret    

c000ab98 <File::isAtty()>:
c000ab98:	31 c0                	xor    eax,eax
c000ab9a:	c3                   	ret    
c000ab9b:	90                   	nop

c000ab9c <Directory::isAtty()>:
c000ab9c:	31 c0                	xor    eax,eax
c000ab9e:	c3                   	ret    
c000ab9f:	90                   	nop

c000aba0 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000aba0:	b8 0a 00 00 00       	mov    eax,0xa
c000aba5:	c3                   	ret    

c000aba6 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000aba6:	b8 0a 00 00 00       	mov    eax,0xa
c000abab:	c3                   	ret    

c000abac <Filesystem::allocateSwapfile(char const*, int)>:
c000abac:	31 c0                	xor    eax,eax
c000abae:	31 d2                	xor    edx,edx
c000abb0:	c3                   	ret    
c000abb1:	90                   	nop

c000abb2 <File::~File()>:
c000abb2:	83 ec 0c             	sub    esp,0xc
c000abb5:	ba 94 de 01 c0       	mov    edx,0xc001de94
c000abba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abbe:	89 10                	mov    DWORD PTR [eax],edx
c000abc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abc4:	83 ec 0c             	sub    esp,0xc
c000abc7:	50                   	push   eax
c000abc8:	e8 ab e8 ff ff       	call   c0009478 <UnixFile::~UnixFile()>
c000abcd:	83 c4 10             	add    esp,0x10
c000abd0:	90                   	nop
c000abd1:	83 c4 0c             	add    esp,0xc
c000abd4:	c3                   	ret    
c000abd5:	90                   	nop

c000abd6 <File::~File()>:
c000abd6:	83 ec 0c             	sub    esp,0xc
c000abd9:	83 ec 0c             	sub    esp,0xc
c000abdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abe0:	e8 cd ff ff ff       	call   c000abb2 <File::~File()>
c000abe5:	83 c4 10             	add    esp,0x10
c000abe8:	83 ec 08             	sub    esp,0x8
c000abeb:	68 14 01 00 00       	push   0x114
c000abf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abf4:	e8 3d fc ff ff       	call   c000a836 <operator delete(void*, unsigned long)>
c000abf9:	83 c4 10             	add    esp,0x10
c000abfc:	83 c4 0c             	add    esp,0xc
c000abff:	c3                   	ret    

c000ac00 <Directory::~Directory()>:
c000ac00:	83 ec 0c             	sub    esp,0xc
c000ac03:	ba b0 de 01 c0       	mov    edx,0xc001deb0
c000ac08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac0c:	89 10                	mov    DWORD PTR [eax],edx
c000ac0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac12:	83 ec 0c             	sub    esp,0xc
c000ac15:	50                   	push   eax
c000ac16:	e8 5d e8 ff ff       	call   c0009478 <UnixFile::~UnixFile()>
c000ac1b:	83 c4 10             	add    esp,0x10
c000ac1e:	90                   	nop
c000ac1f:	83 c4 0c             	add    esp,0xc
c000ac22:	c3                   	ret    
c000ac23:	90                   	nop

c000ac24 <Directory::~Directory()>:
c000ac24:	83 ec 0c             	sub    esp,0xc
c000ac27:	83 ec 0c             	sub    esp,0xc
c000ac2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac2e:	e8 cd ff ff ff       	call   c000ac00 <Directory::~Directory()>
c000ac33:	83 c4 10             	add    esp,0x10
c000ac36:	83 ec 08             	sub    esp,0x8
c000ac39:	68 14 01 00 00       	push   0x114
c000ac3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac42:	e8 ef fb ff ff       	call   c000a836 <operator delete(void*, unsigned long)>
c000ac47:	83 c4 10             	add    esp,0x10
c000ac4a:	83 c4 0c             	add    esp,0xc
c000ac4d:	c3                   	ret    

c000ac4e <Filesystem::Filesystem()>:
c000ac4e:	ba 2c de 01 c0       	mov    edx,0xc001de2c
c000ac53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac57:	89 10                	mov    DWORD PTR [eax],edx
c000ac59:	8b 15 b4 0a 02 c0    	mov    edx,DWORD PTR ds:0xc0020ab4
c000ac5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac63:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ac66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac6a:	a3 b4 0a 02 c0       	mov    ds:0xc0020ab4,eax
c000ac6f:	90                   	nop
c000ac70:	c3                   	ret    
c000ac71:	90                   	nop

c000ac72 <Filesystem::~Filesystem()>:
c000ac72:	ba 2c de 01 c0       	mov    edx,0xc001de2c
c000ac77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac7b:	89 10                	mov    DWORD PTR [eax],edx
c000ac7d:	90                   	nop
c000ac7e:	c3                   	ret    
c000ac7f:	90                   	nop

c000ac80 <Filesystem::~Filesystem()>:
c000ac80:	83 ec 0c             	sub    esp,0xc
c000ac83:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ac87:	e8 e6 ff ff ff       	call   c000ac72 <Filesystem::~Filesystem()>
c000ac8c:	83 c4 04             	add    esp,0x4
c000ac8f:	83 ec 08             	sub    esp,0x8
c000ac92:	6a 08                	push   0x8
c000ac94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac98:	e8 99 fb ff ff       	call   c000a836 <operator delete(void*, unsigned long)>
c000ac9d:	83 c4 10             	add    esp,0x10
c000aca0:	83 c4 0c             	add    esp,0xc
c000aca3:	c3                   	ret    

c000aca4 <Fs::getcwd(Process*, char*, int)>:
c000aca4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aca8:	31 c0                	xor    eax,eax
c000acaa:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000acad:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000acb1:	7d 15                	jge    c000acc8 <Fs::getcwd(Process*, char*, int)+0x24>
c000acb3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000acb7:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000acbe:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000acc1:	84 c9                	test   cl,cl
c000acc3:	74 06                	je     c000accb <Fs::getcwd(Process*, char*, int)+0x27>
c000acc5:	40                   	inc    eax
c000acc6:	eb e2                	jmp    c000acaa <Fs::getcwd(Process*, char*, int)+0x6>
c000acc8:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000accb:	31 c0                	xor    eax,eax
c000accd:	c3                   	ret    

c000acce <Fs::initVFS()>:
c000acce:	83 ec 18             	sub    esp,0x18
c000acd1:	6a 08                	push   0x8
c000acd3:	e8 b9 cf ff ff       	call   c0007c91 <malloc>
c000acd8:	89 04 24             	mov    DWORD PTR [esp],eax
c000acdb:	e8 68 c5 00 00       	call   c0017248 <FAT::FAT()>
c000ace0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ace7:	e8 a5 cf ff ff       	call   c0007c91 <malloc>
c000acec:	89 04 24             	mov    DWORD PTR [esp],eax
c000acef:	e8 4c d2 00 00       	call   c0017f40 <ISO9660::ISO9660()>
c000acf4:	83 c4 1c             	add    esp,0x1c
c000acf7:	c3                   	ret    

c000acf8 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000acf8:	55                   	push   ebp
c000acf9:	57                   	push   edi
c000acfa:	56                   	push   esi
c000acfb:	53                   	push   ebx
c000acfc:	81 ec 10 04 00 00    	sub    esp,0x410
c000ad02:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000ad09:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000ad10:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000ad17:	68 00 04 00 00       	push   0x400
c000ad1c:	6a 00                	push   0x0
c000ad1e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000ad22:	56                   	push   esi
c000ad23:	e8 a8 57 ff ff       	call   c00004d0 <memset>
c000ad28:	83 c4 10             	add    esp,0x10
c000ad2b:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000ad2f:	75 0b                	jne    c000ad3c <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000ad31:	50                   	push   eax
c000ad32:	50                   	push   eax
c000ad33:	57                   	push   edi
c000ad34:	56                   	push   esi
c000ad35:	e8 c6 58 ff ff       	call   c0000600 <strcpy>
c000ad3a:	eb 41                	jmp    c000ad7d <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000ad3c:	8a 07                	mov    al,BYTE PTR [edi]
c000ad3e:	3c 5c                	cmp    al,0x5c
c000ad40:	74 04                	je     c000ad46 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000ad42:	3c 2f                	cmp    al,0x2f
c000ad44:	75 18                	jne    c000ad5e <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000ad46:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ad49:	3c 60                	cmp    al,0x60
c000ad4b:	7e 03                	jle    c000ad50 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000ad4d:	83 e8 20             	sub    eax,0x20
c000ad50:	88 04 24             	mov    BYTE PTR [esp],al
c000ad53:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ad5a:	50                   	push   eax
c000ad5b:	50                   	push   eax
c000ad5c:	eb 18                	jmp    c000ad76 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000ad5e:	50                   	push   eax
c000ad5f:	50                   	push   eax
c000ad60:	55                   	push   ebp
c000ad61:	56                   	push   esi
c000ad62:	e8 99 58 ff ff       	call   c0000600 <strcpy>
c000ad67:	5a                   	pop    edx
c000ad68:	59                   	pop    ecx
c000ad69:	68 c1 ea 01 c0       	push   0xc001eac1
c000ad6e:	56                   	push   esi
c000ad6f:	e8 4c 5a ff ff       	call   c00007c0 <strcat>
c000ad74:	5d                   	pop    ebp
c000ad75:	58                   	pop    eax
c000ad76:	57                   	push   edi
c000ad77:	56                   	push   esi
c000ad78:	e8 43 5a ff ff       	call   c00007c0 <strcat>
c000ad7d:	83 c4 10             	add    esp,0x10
c000ad80:	8a 04 24             	mov    al,BYTE PTR [esp]
c000ad83:	3c 60                	cmp    al,0x60
c000ad85:	7e 03                	jle    c000ad8a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000ad87:	83 e8 20             	sub    eax,0x20
c000ad8a:	88 04 24             	mov    BYTE PTR [esp],al
c000ad8d:	88 03                	mov    BYTE PTR [ebx],al
c000ad8f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ad96:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000ad9c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000ada0:	bf 03 00 00 00       	mov    edi,0x3
c000ada5:	b8 03 00 00 00       	mov    eax,0x3
c000adaa:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000adad:	84 d2                	test   dl,dl
c000adaf:	0f 84 91 00 00 00    	je     c000ae46 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000adb5:	8d 4f 01             	lea    ecx,[edi+0x1]
c000adb8:	80 fa 5c             	cmp    dl,0x5c
c000adbb:	74 05                	je     c000adc2 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000adbd:	80 fa 2f             	cmp    dl,0x2f
c000adc0:	75 12                	jne    c000add4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000adc2:	89 c5                	mov    ebp,eax
c000adc4:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000adc9:	74 09                	je     c000add4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000adcb:	40                   	inc    eax
c000adcc:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000add0:	89 cf                	mov    edi,ecx
c000add2:	eb d6                	jmp    c000adaa <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000add4:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000add9:	75 5b                	jne    c000ae36 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000addb:	80 fa 2e             	cmp    dl,0x2e
c000adde:	75 56                	jne    c000ae36 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000ade0:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000ade4:	74 19                	je     c000adff <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000ade6:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000adeb:	74 53                	je     c000ae40 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aded:	89 f9                	mov    ecx,edi
c000adef:	41                   	inc    ecx
c000adf0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000adf3:	80 fa 2f             	cmp    dl,0x2f
c000adf6:	74 f7                	je     c000adef <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000adf8:	80 fa 5c             	cmp    dl,0x5c
c000adfb:	74 f2                	je     c000adef <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000adfd:	eb d1                	jmp    c000add0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000adff:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000ae04:	74 3a                	je     c000ae40 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000ae06:	83 f8 03             	cmp    eax,0x3
c000ae09:	74 c5                	je     c000add0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ae0b:	41                   	inc    ecx
c000ae0c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000ae0f:	80 fa 2f             	cmp    dl,0x2f
c000ae12:	74 f7                	je     c000ae0b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000ae14:	80 fa 5c             	cmp    dl,0x5c
c000ae17:	74 f2                	je     c000ae0b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000ae19:	48                   	dec    eax
c000ae1a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ae1e:	75 06                	jne    c000ae26 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000ae20:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ae24:	eb f3                	jmp    c000ae19 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000ae26:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ae2a:	74 07                	je     c000ae33 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000ae2c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ae30:	48                   	dec    eax
c000ae31:	eb f3                	jmp    c000ae26 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000ae33:	40                   	inc    eax
c000ae34:	eb 9a                	jmp    c000add0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ae36:	80 fa 2f             	cmp    dl,0x2f
c000ae39:	74 95                	je     c000add0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ae3b:	80 fa 5c             	cmp    dl,0x5c
c000ae3e:	74 90                	je     c000add0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ae40:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000ae43:	40                   	inc    eax
c000ae44:	eb 8a                	jmp    c000add0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ae46:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ae4a:	83 ec 0c             	sub    esp,0xc
c000ae4d:	53                   	push   ebx
c000ae4e:	e8 ed 56 ff ff       	call   c0000540 <strlen>
c000ae53:	83 c4 10             	add    esp,0x10
c000ae56:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000ae5b:	75 26                	jne    c000ae83 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000ae5d:	83 ec 0c             	sub    esp,0xc
c000ae60:	53                   	push   ebx
c000ae61:	e8 da 56 ff ff       	call   c0000540 <strlen>
c000ae66:	83 c4 10             	add    esp,0x10
c000ae69:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000ae6e:	74 26                	je     c000ae96 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000ae70:	83 ec 0c             	sub    esp,0xc
c000ae73:	53                   	push   ebx
c000ae74:	e8 c7 56 ff ff       	call   c0000540 <strlen>
c000ae79:	83 c4 10             	add    esp,0x10
c000ae7c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000ae81:	eb c7                	jmp    c000ae4a <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000ae83:	83 ec 0c             	sub    esp,0xc
c000ae86:	53                   	push   ebx
c000ae87:	e8 b4 56 ff ff       	call   c0000540 <strlen>
c000ae8c:	83 c4 10             	add    esp,0x10
c000ae8f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ae94:	74 c7                	je     c000ae5d <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000ae96:	81 c4 0c 04 00 00    	add    esp,0x40c
c000ae9c:	5b                   	pop    ebx
c000ae9d:	5e                   	pop    esi
c000ae9e:	5f                   	pop    edi
c000ae9f:	5d                   	pop    ebp
c000aea0:	c3                   	ret    
c000aea1:	90                   	nop

c000aea2 <File::File(char const*, Process*)>:
c000aea2:	83 ec 0c             	sub    esp,0xc
c000aea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea9:	83 ec 08             	sub    esp,0x8
c000aeac:	6a 00                	push   0x0
c000aeae:	50                   	push   eax
c000aeaf:	e8 e2 e3 ff ff       	call   c0009296 <UnixFile::UnixFile(int)>
c000aeb4:	83 c4 10             	add    esp,0x10
c000aeb7:	ba 94 de 01 c0       	mov    edx,0xc001de94
c000aebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec0:	89 10                	mov    DWORD PTR [eax],edx
c000aec2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aec6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000aecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed0:	83 c0 0d             	add    eax,0xd
c000aed3:	83 ec 04             	sub    esp,0x4
c000aed6:	52                   	push   edx
c000aed7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aedb:	50                   	push   eax
c000aedc:	e8 17 fe ff ff       	call   c000acf8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000aee1:	83 c4 10             	add    esp,0x10
c000aee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000aeeb:	8d 50 bf             	lea    edx,[eax-0x41]
c000aeee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aef2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000aef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aefc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000af00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af04:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af0a:	25 ff 00 00 00       	and    eax,0xff
c000af0f:	8b 04 85 20 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0e0]
c000af16:	85 c0                	test   eax,eax
c000af18:	74 42                	je     c000af5c <File::File(char const*, Process*)+0xba>
c000af1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af1e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af24:	25 ff 00 00 00       	and    eax,0xff
c000af29:	8b 04 85 20 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0e0]
c000af30:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000af36:	85 c0                	test   eax,eax
c000af38:	75 22                	jne    c000af5c <File::File(char const*, Process*)+0xba>
c000af3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af3e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af44:	25 ff 00 00 00       	and    eax,0xff
c000af49:	8b 04 85 20 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0e0]
c000af50:	83 ec 0c             	sub    esp,0xc
c000af53:	50                   	push   eax
c000af54:	e8 f9 1f 00 00       	call   c000cf52 <LogicalDisk::mount()>
c000af59:	83 c4 10             	add    esp,0x10
c000af5c:	90                   	nop
c000af5d:	83 c4 0c             	add    esp,0xc
c000af60:	c3                   	ret    
c000af61:	90                   	nop

c000af62 <File::open(FileOpenMode)>:
c000af62:	53                   	push   ebx
c000af63:	b8 0b 00 00 00       	mov    eax,0xb
c000af68:	83 ec 08             	sub    esp,0x8
c000af6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af6f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000af76:	80 fa 19             	cmp    dl,0x19
c000af79:	77 40                	ja     c000afbb <File::open(FileOpenMode)+0x59>
c000af7b:	8b 14 95 20 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd0e0]
c000af82:	85 d2                	test   edx,edx
c000af84:	74 35                	je     c000afbb <File::open(FileOpenMode)+0x59>
c000af86:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000af8c:	85 d2                	test   edx,edx
c000af8e:	74 2b                	je     c000afbb <File::open(FileOpenMode)+0x59>
c000af90:	b8 06 00 00 00       	mov    eax,0x6
c000af95:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000af99:	75 20                	jne    c000afbb <File::open(FileOpenMode)+0x59>
c000af9b:	8b 02                	mov    eax,DWORD PTR [edx]
c000af9d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000afa3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa7:	51                   	push   ecx
c000afa8:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000afab:	51                   	push   ecx
c000afac:	52                   	push   edx
c000afad:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000afb0:	83 c4 10             	add    esp,0x10
c000afb3:	85 c0                	test   eax,eax
c000afb5:	75 04                	jne    c000afbb <File::open(FileOpenMode)+0x59>
c000afb7:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000afbb:	83 c4 08             	add    esp,0x8
c000afbe:	5b                   	pop    ebx
c000afbf:	c3                   	ret    

c000afc0 <File::close()>:
c000afc0:	53                   	push   ebx
c000afc1:	b8 0b 00 00 00       	mov    eax,0xb
c000afc6:	83 ec 08             	sub    esp,0x8
c000afc9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000afcd:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000afd4:	80 fa 19             	cmp    dl,0x19
c000afd7:	77 41                	ja     c000b01a <File::close()+0x5a>
c000afd9:	8b 1c 95 20 2f 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd0e0]
c000afe0:	85 db                	test   ebx,ebx
c000afe2:	74 36                	je     c000b01a <File::close()+0x5a>
c000afe4:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000afeb:	74 2d                	je     c000b01a <File::close()+0x5a>
c000afed:	b8 05 00 00 00       	mov    eax,0x5
c000aff2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000aff6:	74 22                	je     c000b01a <File::close()+0x5a>
c000aff8:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000affc:	8b 04 95 20 2f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd0e0]
c000b003:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b009:	53                   	push   ebx
c000b00a:	53                   	push   ebx
c000b00b:	8b 10                	mov    edx,DWORD PTR [eax]
c000b00d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b013:	50                   	push   eax
c000b014:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000b017:	83 c4 10             	add    esp,0x10
c000b01a:	83 c4 08             	add    esp,0x8
c000b01d:	5b                   	pop    ebx
c000b01e:	c3                   	ret    
c000b01f:	90                   	nop

c000b020 <File::seek(unsigned long long)>:
c000b020:	56                   	push   esi
c000b021:	53                   	push   ebx
c000b022:	b8 0b 00 00 00       	mov    eax,0xb
c000b027:	51                   	push   ecx
c000b028:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b02c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b030:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b037:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b03b:	80 fa 19             	cmp    dl,0x19
c000b03e:	77 31                	ja     c000b071 <File::seek(unsigned long long)+0x51>
c000b040:	8b 14 95 20 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd0e0]
c000b047:	85 d2                	test   edx,edx
c000b049:	74 26                	je     c000b071 <File::seek(unsigned long long)+0x51>
c000b04b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b051:	85 d2                	test   edx,edx
c000b053:	74 1c                	je     c000b071 <File::seek(unsigned long long)+0x51>
c000b055:	b8 05 00 00 00       	mov    eax,0x5
c000b05a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b05e:	74 11                	je     c000b071 <File::seek(unsigned long long)+0x51>
c000b060:	8b 02                	mov    eax,DWORD PTR [edx]
c000b062:	53                   	push   ebx
c000b063:	51                   	push   ecx
c000b064:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b06a:	52                   	push   edx
c000b06b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b06e:	83 c4 10             	add    esp,0x10
c000b071:	5a                   	pop    edx
c000b072:	5b                   	pop    ebx
c000b073:	5e                   	pop    esi
c000b074:	c3                   	ret    
c000b075:	90                   	nop

c000b076 <File::tell(unsigned long long*)>:
c000b076:	83 ec 0c             	sub    esp,0xc
c000b079:	b8 0b 00 00 00       	mov    eax,0xb
c000b07e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b082:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b089:	80 fa 19             	cmp    dl,0x19
c000b08c:	77 34                	ja     c000b0c2 <File::tell(unsigned long long*)+0x4c>
c000b08e:	8b 14 95 20 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd0e0]
c000b095:	85 d2                	test   edx,edx
c000b097:	74 29                	je     c000b0c2 <File::tell(unsigned long long*)+0x4c>
c000b099:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b09f:	85 d2                	test   edx,edx
c000b0a1:	74 1f                	je     c000b0c2 <File::tell(unsigned long long*)+0x4c>
c000b0a3:	b8 05 00 00 00       	mov    eax,0x5
c000b0a8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b0ac:	74 14                	je     c000b0c2 <File::tell(unsigned long long*)+0x4c>
c000b0ae:	50                   	push   eax
c000b0af:	8b 02                	mov    eax,DWORD PTR [edx]
c000b0b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b0b5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b0bb:	52                   	push   edx
c000b0bc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b0bf:	83 c4 10             	add    esp,0x10
c000b0c2:	83 c4 0c             	add    esp,0xc
c000b0c5:	c3                   	ret    

c000b0c6 <File::rewind()>:
c000b0c6:	83 ec 10             	sub    esp,0x10
c000b0c9:	6a 00                	push   0x0
c000b0cb:	6a 00                	push   0x0
c000b0cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0d1:	e8 4a ff ff ff       	call   c000b020 <File::seek(unsigned long long)>
c000b0d6:	83 c4 1c             	add    esp,0x1c
c000b0d9:	c3                   	ret    

c000b0da <File::unlink()>:
c000b0da:	83 ec 0c             	sub    esp,0xc
c000b0dd:	b8 0b 00 00 00       	mov    eax,0xb
c000b0e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b0e6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b0ed:	80 f9 19             	cmp    cl,0x19
c000b0f0:	77 2f                	ja     c000b121 <File::unlink()+0x47>
c000b0f2:	8b 0c 8d 20 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0e0]
c000b0f9:	85 c9                	test   ecx,ecx
c000b0fb:	74 24                	je     c000b121 <File::unlink()+0x47>
c000b0fd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b103:	85 c9                	test   ecx,ecx
c000b105:	74 1a                	je     c000b121 <File::unlink()+0x47>
c000b107:	b8 06 00 00 00       	mov    eax,0x6
c000b10c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b110:	75 0f                	jne    c000b121 <File::unlink()+0x47>
c000b112:	83 c2 0d             	add    edx,0xd
c000b115:	50                   	push   eax
c000b116:	50                   	push   eax
c000b117:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b119:	52                   	push   edx
c000b11a:	51                   	push   ecx
c000b11b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b11e:	83 c4 10             	add    esp,0x10
c000b121:	83 c4 0c             	add    esp,0xc
c000b124:	c3                   	ret    
c000b125:	90                   	nop

c000b126 <File::rename(char const*)>:
c000b126:	83 ec 0c             	sub    esp,0xc
c000b129:	b8 0b 00 00 00       	mov    eax,0xb
c000b12e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b132:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b139:	80 f9 19             	cmp    cl,0x19
c000b13c:	77 32                	ja     c000b170 <File::rename(char const*)+0x4a>
c000b13e:	8b 0c 8d 20 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0e0]
c000b145:	85 c9                	test   ecx,ecx
c000b147:	74 27                	je     c000b170 <File::rename(char const*)+0x4a>
c000b149:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b14f:	85 c9                	test   ecx,ecx
c000b151:	74 1d                	je     c000b170 <File::rename(char const*)+0x4a>
c000b153:	b8 06 00 00 00       	mov    eax,0x6
c000b158:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b15c:	75 12                	jne    c000b170 <File::rename(char const*)+0x4a>
c000b15e:	83 c2 0d             	add    edx,0xd
c000b161:	50                   	push   eax
c000b162:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b164:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b168:	52                   	push   edx
c000b169:	51                   	push   ecx
c000b16a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b16d:	83 c4 10             	add    esp,0x10
c000b170:	83 c4 0c             	add    esp,0xc
c000b173:	c3                   	ret    

c000b174 <File::chfatattr(unsigned char, unsigned char)>:
c000b174:	57                   	push   edi
c000b175:	b8 0b 00 00 00       	mov    eax,0xb
c000b17a:	56                   	push   esi
c000b17b:	53                   	push   ebx
c000b17c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b180:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b184:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b18b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b18f:	80 f9 19             	cmp    cl,0x19
c000b192:	77 37                	ja     c000b1cb <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b194:	8b 0c 8d 20 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0e0]
c000b19b:	85 c9                	test   ecx,ecx
c000b19d:	74 2c                	je     c000b1cb <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b19f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b1a5:	85 c9                	test   ecx,ecx
c000b1a7:	74 22                	je     c000b1cb <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b1a9:	b8 06 00 00 00       	mov    eax,0x6
c000b1ae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1b2:	75 17                	jne    c000b1cb <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b1b4:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b1b6:	89 f0                	mov    eax,esi
c000b1b8:	83 c2 0d             	add    edx,0xd
c000b1bb:	0f b6 f0             	movzx  esi,al
c000b1be:	0f b6 db             	movzx  ebx,bl
c000b1c1:	56                   	push   esi
c000b1c2:	53                   	push   ebx
c000b1c3:	52                   	push   edx
c000b1c4:	51                   	push   ecx
c000b1c5:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b1c8:	83 c4 10             	add    esp,0x10
c000b1cb:	5b                   	pop    ebx
c000b1cc:	5e                   	pop    esi
c000b1cd:	5f                   	pop    edi
c000b1ce:	c3                   	ret    
c000b1cf:	90                   	nop

c000b1d0 <File::exists()>:
c000b1d0:	83 ec 0c             	sub    esp,0xc
c000b1d3:	31 c0                	xor    eax,eax
c000b1d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1d9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1e0:	80 f9 19             	cmp    cl,0x19
c000b1e3:	77 24                	ja     c000b209 <File::exists()+0x39>
c000b1e5:	8b 0c 8d 20 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0e0]
c000b1ec:	85 c9                	test   ecx,ecx
c000b1ee:	74 19                	je     c000b209 <File::exists()+0x39>
c000b1f0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b1f6:	85 c9                	test   ecx,ecx
c000b1f8:	74 0f                	je     c000b209 <File::exists()+0x39>
c000b1fa:	83 c2 0d             	add    edx,0xd
c000b1fd:	50                   	push   eax
c000b1fe:	50                   	push   eax
c000b1ff:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b201:	52                   	push   edx
c000b202:	51                   	push   ecx
c000b203:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b206:	83 c4 10             	add    esp,0x10
c000b209:	83 c4 0c             	add    esp,0xc
c000b20c:	c3                   	ret    
c000b20d:	90                   	nop

c000b20e <File::stat(unsigned long long*, bool*)>:
c000b20e:	56                   	push   esi
c000b20f:	53                   	push   ebx
c000b210:	50                   	push   eax
c000b211:	b8 0b 00 00 00       	mov    eax,0xb
c000b216:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b21a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b21e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b225:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b229:	80 f9 19             	cmp    cl,0x19
c000b22c:	77 3d                	ja     c000b26b <File::stat(unsigned long long*, bool*)+0x5d>
c000b22e:	8b 0c 8d 20 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0e0]
c000b235:	85 c9                	test   ecx,ecx
c000b237:	74 32                	je     c000b26b <File::stat(unsigned long long*, bool*)+0x5d>
c000b239:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b23f:	85 c9                	test   ecx,ecx
c000b241:	74 28                	je     c000b26b <File::stat(unsigned long long*, bool*)+0x5d>
c000b243:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b245:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b249:	74 13                	je     c000b25e <File::stat(unsigned long long*, bool*)+0x50>
c000b24b:	83 ec 04             	sub    esp,0x4
c000b24e:	56                   	push   esi
c000b24f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b255:	51                   	push   ecx
c000b256:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b259:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b25c:	eb 0a                	jmp    c000b268 <File::stat(unsigned long long*, bool*)+0x5a>
c000b25e:	53                   	push   ebx
c000b25f:	83 c2 0d             	add    edx,0xd
c000b262:	56                   	push   esi
c000b263:	52                   	push   edx
c000b264:	51                   	push   ecx
c000b265:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b268:	83 c4 10             	add    esp,0x10
c000b26b:	5a                   	pop    edx
c000b26c:	5b                   	pop    ebx
c000b26d:	5e                   	pop    esi
c000b26e:	c3                   	ret    

c000b26f <Fs::setcwd(Process*, char*)>:
c000b26f:	55                   	push   ebp
c000b270:	57                   	push   edi
c000b271:	56                   	push   esi
c000b272:	53                   	push   ebx
c000b273:	81 ec 20 02 00 00    	sub    esp,0x220
c000b279:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b280:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b286:	57                   	push   edi
c000b287:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b28e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b292:	56                   	push   esi
c000b293:	e8 60 fa ff ff       	call   c000acf8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b298:	89 34 24             	mov    DWORD PTR [esp],esi
c000b29b:	e8 a0 52 ff ff       	call   c0000540 <strlen>
c000b2a0:	83 c4 10             	add    esp,0x10
c000b2a3:	83 f8 02             	cmp    eax,0x2
c000b2a6:	77 15                	ja     c000b2bd <Fs::setcwd(Process*, char*)+0x4e>
c000b2a8:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b2ad:	83 eb 41             	sub    ebx,0x41
c000b2b0:	8b 04 9d 20 2f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdd0e0]
c000b2b7:	85 c0                	test   eax,eax
c000b2b9:	75 1c                	jne    c000b2d7 <Fs::setcwd(Process*, char*)+0x68>
c000b2bb:	eb 2f                	jmp    c000b2ec <Fs::setcwd(Process*, char*)+0x7d>
c000b2bd:	83 ec 0c             	sub    esp,0xc
c000b2c0:	56                   	push   esi
c000b2c1:	e8 7a 52 ff ff       	call   c0000540 <strlen>
c000b2c6:	83 c4 10             	add    esp,0x10
c000b2c9:	83 f8 03             	cmp    eax,0x3
c000b2cc:	75 57                	jne    c000b325 <Fs::setcwd(Process*, char*)+0xb6>
c000b2ce:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b2d3:	75 50                	jne    c000b325 <Fs::setcwd(Process*, char*)+0xb6>
c000b2d5:	eb d1                	jmp    c000b2a8 <Fs::setcwd(Process*, char*)+0x39>
c000b2d7:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000b2de:	75 0c                	jne    c000b2ec <Fs::setcwd(Process*, char*)+0x7d>
c000b2e0:	83 ec 0c             	sub    esp,0xc
c000b2e3:	50                   	push   eax
c000b2e4:	e8 69 1c 00 00       	call   c000cf52 <LogicalDisk::mount()>
c000b2e9:	83 c4 10             	add    esp,0x10
c000b2ec:	b8 03 00 00 00       	mov    eax,0x3
c000b2f1:	83 fb 19             	cmp    ebx,0x19
c000b2f4:	0f 87 c6 00 00 00    	ja     c000b3c0 <Fs::setcwd(Process*, char*)+0x151>
c000b2fa:	8b 14 9d 20 2f 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdd0e0]
c000b301:	b8 05 00 00 00       	mov    eax,0x5
c000b306:	85 d2                	test   edx,edx
c000b308:	0f 84 b2 00 00 00    	je     c000b3c0 <Fs::setcwd(Process*, char*)+0x151>
c000b30e:	b8 06 00 00 00       	mov    eax,0x6
c000b313:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b31a:	0f 85 92 00 00 00    	jne    c000b3b2 <Fs::setcwd(Process*, char*)+0x143>
c000b320:	e9 9b 00 00 00       	jmp    c000b3c0 <Fs::setcwd(Process*, char*)+0x151>
c000b325:	83 ec 0c             	sub    esp,0xc
c000b328:	68 14 01 00 00       	push   0x114
c000b32d:	e8 5f c9 ff ff       	call   c0007c91 <malloc>
c000b332:	83 c4 0c             	add    esp,0xc
c000b335:	89 c3                	mov    ebx,eax
c000b337:	55                   	push   ebp
c000b338:	56                   	push   esi
c000b339:	50                   	push   eax
c000b33a:	e8 63 fb ff ff       	call   c000aea2 <File::File(char const*, Process*)>
c000b33f:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b344:	83 c4 0c             	add    esp,0xc
c000b347:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b34b:	50                   	push   eax
c000b34c:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b350:	50                   	push   eax
c000b351:	53                   	push   ebx
c000b352:	e8 b7 fe ff ff       	call   c000b20e <File::stat(unsigned long long*, bool*)>
c000b357:	83 c4 10             	add    esp,0x10
c000b35a:	83 f8 02             	cmp    eax,0x2
c000b35d:	74 04                	je     c000b363 <Fs::setcwd(Process*, char*)+0xf4>
c000b35f:	85 c0                	test   eax,eax
c000b361:	74 1c                	je     c000b37f <Fs::setcwd(Process*, char*)+0x110>
c000b363:	b8 01 00 00 00       	mov    eax,0x1
c000b368:	85 db                	test   ebx,ebx
c000b36a:	74 54                	je     c000b3c0 <Fs::setcwd(Process*, char*)+0x151>
c000b36c:	83 ec 0c             	sub    esp,0xc
c000b36f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b371:	53                   	push   ebx
c000b372:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b375:	83 c4 10             	add    esp,0x10
c000b378:	b8 01 00 00 00       	mov    eax,0x1
c000b37d:	eb 41                	jmp    c000b3c0 <Fs::setcwd(Process*, char*)+0x151>
c000b37f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b384:	75 1c                	jne    c000b3a2 <Fs::setcwd(Process*, char*)+0x133>
c000b386:	b8 02 00 00 00       	mov    eax,0x2
c000b38b:	85 db                	test   ebx,ebx
c000b38d:	74 31                	je     c000b3c0 <Fs::setcwd(Process*, char*)+0x151>
c000b38f:	83 ec 0c             	sub    esp,0xc
c000b392:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b394:	53                   	push   ebx
c000b395:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b398:	83 c4 10             	add    esp,0x10
c000b39b:	b8 02 00 00 00       	mov    eax,0x2
c000b3a0:	eb 1e                	jmp    c000b3c0 <Fs::setcwd(Process*, char*)+0x151>
c000b3a2:	85 db                	test   ebx,ebx
c000b3a4:	74 0c                	je     c000b3b2 <Fs::setcwd(Process*, char*)+0x143>
c000b3a6:	83 ec 0c             	sub    esp,0xc
c000b3a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3ab:	53                   	push   ebx
c000b3ac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b3af:	83 c4 10             	add    esp,0x10
c000b3b2:	50                   	push   eax
c000b3b3:	50                   	push   eax
c000b3b4:	56                   	push   esi
c000b3b5:	57                   	push   edi
c000b3b6:	e8 45 52 ff ff       	call   c0000600 <strcpy>
c000b3bb:	83 c4 10             	add    esp,0x10
c000b3be:	31 c0                	xor    eax,eax
c000b3c0:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b3c6:	5b                   	pop    ebx
c000b3c7:	5e                   	pop    esi
c000b3c8:	5f                   	pop    edi
c000b3c9:	5d                   	pop    ebp
c000b3ca:	c3                   	ret    
c000b3cb:	90                   	nop

c000b3cc <Directory::Directory(char const*, Process*)>:
c000b3cc:	83 ec 0c             	sub    esp,0xc
c000b3cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3d3:	83 ec 08             	sub    esp,0x8
c000b3d6:	6a 00                	push   0x0
c000b3d8:	50                   	push   eax
c000b3d9:	e8 b8 de ff ff       	call   c0009296 <UnixFile::UnixFile(int)>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	ba b0 de 01 c0       	mov    edx,0xc001deb0
c000b3e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ea:	89 10                	mov    DWORD PTR [eax],edx
c000b3ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b3f0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b3f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3fa:	83 c0 0d             	add    eax,0xd
c000b3fd:	83 ec 04             	sub    esp,0x4
c000b400:	52                   	push   edx
c000b401:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b405:	50                   	push   eax
c000b406:	e8 ed f8 ff ff       	call   c000acf8 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b40b:	83 c4 10             	add    esp,0x10
c000b40e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b412:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b415:	8d 50 bf             	lea    edx,[eax-0x41]
c000b418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b41c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b426:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b42a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b42e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b434:	25 ff 00 00 00       	and    eax,0xff
c000b439:	8b 04 85 20 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0e0]
c000b440:	85 c0                	test   eax,eax
c000b442:	74 42                	je     c000b486 <Directory::Directory(char const*, Process*)+0xba>
c000b444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b448:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b44e:	25 ff 00 00 00       	and    eax,0xff
c000b453:	8b 04 85 20 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0e0]
c000b45a:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b460:	85 c0                	test   eax,eax
c000b462:	75 22                	jne    c000b486 <Directory::Directory(char const*, Process*)+0xba>
c000b464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b468:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b46e:	25 ff 00 00 00       	and    eax,0xff
c000b473:	8b 04 85 20 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0e0]
c000b47a:	83 ec 0c             	sub    esp,0xc
c000b47d:	50                   	push   eax
c000b47e:	e8 cf 1a 00 00       	call   c000cf52 <LogicalDisk::mount()>
c000b483:	83 c4 10             	add    esp,0x10
c000b486:	90                   	nop
c000b487:	83 c4 0c             	add    esp,0xc
c000b48a:	c3                   	ret    
c000b48b:	90                   	nop

c000b48c <Directory::open()>:
c000b48c:	53                   	push   ebx
c000b48d:	b8 0b 00 00 00       	mov    eax,0xb
c000b492:	83 ec 08             	sub    esp,0x8
c000b495:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b499:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b4a0:	80 fa 19             	cmp    dl,0x19
c000b4a3:	77 3d                	ja     c000b4e2 <Directory::open()+0x56>
c000b4a5:	8b 14 95 20 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd0e0]
c000b4ac:	85 d2                	test   edx,edx
c000b4ae:	74 32                	je     c000b4e2 <Directory::open()+0x56>
c000b4b0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b4b6:	85 d2                	test   edx,edx
c000b4b8:	74 28                	je     c000b4e2 <Directory::open()+0x56>
c000b4ba:	b8 06 00 00 00       	mov    eax,0x6
c000b4bf:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b4c3:	75 1d                	jne    c000b4e2 <Directory::open()+0x56>
c000b4c5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b4cb:	50                   	push   eax
c000b4cc:	8b 02                	mov    eax,DWORD PTR [edx]
c000b4ce:	51                   	push   ecx
c000b4cf:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b4d2:	51                   	push   ecx
c000b4d3:	52                   	push   edx
c000b4d4:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b4d7:	83 c4 10             	add    esp,0x10
c000b4da:	85 c0                	test   eax,eax
c000b4dc:	75 04                	jne    c000b4e2 <Directory::open()+0x56>
c000b4de:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b4e2:	83 c4 08             	add    esp,0x8
c000b4e5:	5b                   	pop    ebx
c000b4e6:	c3                   	ret    
c000b4e7:	90                   	nop

c000b4e8 <Directory::close()>:
c000b4e8:	53                   	push   ebx
c000b4e9:	b8 0b 00 00 00       	mov    eax,0xb
c000b4ee:	83 ec 08             	sub    esp,0x8
c000b4f1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b4f5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b4fc:	80 fa 19             	cmp    dl,0x19
c000b4ff:	77 41                	ja     c000b542 <Directory::close()+0x5a>
c000b501:	8b 1c 95 20 2f 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd0e0]
c000b508:	85 db                	test   ebx,ebx
c000b50a:	74 36                	je     c000b542 <Directory::close()+0x5a>
c000b50c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b513:	74 2d                	je     c000b542 <Directory::close()+0x5a>
c000b515:	b8 05 00 00 00       	mov    eax,0x5
c000b51a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b51e:	74 22                	je     c000b542 <Directory::close()+0x5a>
c000b520:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b524:	8b 04 95 20 2f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd0e0]
c000b52b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b531:	53                   	push   ebx
c000b532:	53                   	push   ebx
c000b533:	8b 10                	mov    edx,DWORD PTR [eax]
c000b535:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b53b:	50                   	push   eax
c000b53c:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b53f:	83 c4 10             	add    esp,0x10
c000b542:	83 c4 08             	add    esp,0x8
c000b545:	5b                   	pop    ebx
c000b546:	c3                   	ret    
c000b547:	90                   	nop

c000b548 <Directory::unlink()>:
c000b548:	83 ec 0c             	sub    esp,0xc
c000b54b:	b8 0b 00 00 00       	mov    eax,0xb
c000b550:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b554:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b55b:	80 f9 19             	cmp    cl,0x19
c000b55e:	77 2f                	ja     c000b58f <Directory::unlink()+0x47>
c000b560:	8b 0c 8d 20 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0e0]
c000b567:	85 c9                	test   ecx,ecx
c000b569:	74 24                	je     c000b58f <Directory::unlink()+0x47>
c000b56b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b571:	85 c9                	test   ecx,ecx
c000b573:	74 1a                	je     c000b58f <Directory::unlink()+0x47>
c000b575:	b8 06 00 00 00       	mov    eax,0x6
c000b57a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b57e:	75 0f                	jne    c000b58f <Directory::unlink()+0x47>
c000b580:	83 c2 0d             	add    edx,0xd
c000b583:	50                   	push   eax
c000b584:	50                   	push   eax
c000b585:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b587:	52                   	push   edx
c000b588:	51                   	push   ecx
c000b589:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b58c:	83 c4 10             	add    esp,0x10
c000b58f:	83 c4 0c             	add    esp,0xc
c000b592:	c3                   	ret    
c000b593:	90                   	nop

c000b594 <Directory::rename(char const*)>:
c000b594:	83 ec 0c             	sub    esp,0xc
c000b597:	b8 0b 00 00 00       	mov    eax,0xb
c000b59c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b5a0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b5a7:	80 f9 19             	cmp    cl,0x19
c000b5aa:	77 32                	ja     c000b5de <Directory::rename(char const*)+0x4a>
c000b5ac:	8b 0c 8d 20 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0e0]
c000b5b3:	85 c9                	test   ecx,ecx
c000b5b5:	74 27                	je     c000b5de <Directory::rename(char const*)+0x4a>
c000b5b7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b5bd:	85 c9                	test   ecx,ecx
c000b5bf:	74 1d                	je     c000b5de <Directory::rename(char const*)+0x4a>
c000b5c1:	b8 06 00 00 00       	mov    eax,0x6
c000b5c6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5ca:	75 12                	jne    c000b5de <Directory::rename(char const*)+0x4a>
c000b5cc:	83 c2 0d             	add    edx,0xd
c000b5cf:	50                   	push   eax
c000b5d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b5d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b5d6:	52                   	push   edx
c000b5d7:	51                   	push   ecx
c000b5d8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b5db:	83 c4 10             	add    esp,0x10
c000b5de:	83 c4 0c             	add    esp,0xc
c000b5e1:	c3                   	ret    

c000b5e2 <Directory::exists()>:
c000b5e2:	83 ec 0c             	sub    esp,0xc
c000b5e5:	31 c0                	xor    eax,eax
c000b5e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b5eb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b5f2:	80 f9 19             	cmp    cl,0x19
c000b5f5:	77 24                	ja     c000b61b <Directory::exists()+0x39>
c000b5f7:	8b 0c 8d 20 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0e0]
c000b5fe:	85 c9                	test   ecx,ecx
c000b600:	74 19                	je     c000b61b <Directory::exists()+0x39>
c000b602:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b608:	85 c9                	test   ecx,ecx
c000b60a:	74 0f                	je     c000b61b <Directory::exists()+0x39>
c000b60c:	83 c2 0d             	add    edx,0xd
c000b60f:	50                   	push   eax
c000b610:	50                   	push   eax
c000b611:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b613:	52                   	push   edx
c000b614:	51                   	push   ecx
c000b615:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b618:	83 c4 10             	add    esp,0x10
c000b61b:	83 c4 0c             	add    esp,0xc
c000b61e:	c3                   	ret    
c000b61f:	90                   	nop

c000b620 <Directory::read(dirent*)>:
c000b620:	83 ec 1c             	sub    esp,0x1c
c000b623:	b8 0b 00 00 00       	mov    eax,0xb
c000b628:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b62c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b633:	80 fa 19             	cmp    dl,0x19
c000b636:	77 30                	ja     c000b668 <Directory::read(dirent*)+0x48>
c000b638:	8b 14 95 20 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd0e0]
c000b63f:	85 d2                	test   edx,edx
c000b641:	74 25                	je     c000b668 <Directory::read(dirent*)+0x48>
c000b643:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b64a:	74 1c                	je     c000b668 <Directory::read(dirent*)+0x48>
c000b64c:	83 ec 0c             	sub    esp,0xc
c000b64f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b651:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b655:	52                   	push   edx
c000b656:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b65a:	6a 00                	push   0x0
c000b65c:	68 10 01 00 00       	push   0x110
c000b661:	51                   	push   ecx
c000b662:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b665:	83 c4 20             	add    esp,0x20
c000b668:	83 c4 1c             	add    esp,0x1c
c000b66b:	c3                   	ret    

c000b66c <Directory::create()>:
c000b66c:	83 ec 0c             	sub    esp,0xc
c000b66f:	b8 0b 00 00 00       	mov    eax,0xb
c000b674:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b678:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b67f:	80 f9 19             	cmp    cl,0x19
c000b682:	77 2f                	ja     c000b6b3 <Directory::create()+0x47>
c000b684:	8b 0c 8d 20 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0e0]
c000b68b:	85 c9                	test   ecx,ecx
c000b68d:	74 24                	je     c000b6b3 <Directory::create()+0x47>
c000b68f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b695:	85 c9                	test   ecx,ecx
c000b697:	74 1a                	je     c000b6b3 <Directory::create()+0x47>
c000b699:	b8 06 00 00 00       	mov    eax,0x6
c000b69e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b6a2:	75 0f                	jne    c000b6b3 <Directory::create()+0x47>
c000b6a4:	83 c2 0d             	add    edx,0xd
c000b6a7:	50                   	push   eax
c000b6a8:	50                   	push   eax
c000b6a9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b6ab:	52                   	push   edx
c000b6ac:	51                   	push   ecx
c000b6ad:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b6b0:	83 c4 10             	add    esp,0x10
c000b6b3:	83 c4 0c             	add    esp,0xc
c000b6b6:	c3                   	ret    
c000b6b7:	90                   	nop

c000b6b8 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b6b8:	b8 0a 00 00 00       	mov    eax,0xa
c000b6bd:	c3                   	ret    
c000b6be:	66 90                	xchg   ax,ax

c000b6c0 <Bus::Bus(char const*)>:
c000b6c0:	83 ec 0c             	sub    esp,0xc
c000b6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6c7:	83 ec 08             	sub    esp,0x8
c000b6ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6ce:	50                   	push   eax
c000b6cf:	e8 30 08 00 00       	call   c000bf04 <Device::Device(char const*)>
c000b6d4:	83 c4 10             	add    esp,0x10
c000b6d7:	ba cc de 01 c0       	mov    edx,0xc001decc
c000b6dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6e0:	89 10                	mov    DWORD PTR [eax],edx
c000b6e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6e6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b6f0:	90                   	nop
c000b6f1:	83 c4 0c             	add    esp,0xc
c000b6f4:	c3                   	ret    
c000b6f5:	90                   	nop
c000b6f6:	66 90                	xchg   ax,ax

c000b6f8 <Bus::~Bus()>:
c000b6f8:	83 ec 0c             	sub    esp,0xc
c000b6fb:	ba cc de 01 c0       	mov    edx,0xc001decc
c000b700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b704:	89 10                	mov    DWORD PTR [eax],edx
c000b706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b70a:	83 ec 0c             	sub    esp,0xc
c000b70d:	50                   	push   eax
c000b70e:	e8 5b 05 00 00       	call   c000bc6e <Device::~Device()>
c000b713:	83 c4 10             	add    esp,0x10
c000b716:	90                   	nop
c000b717:	83 c4 0c             	add    esp,0xc
c000b71a:	c3                   	ret    
c000b71b:	90                   	nop

c000b71c <Bus::~Bus()>:
c000b71c:	83 ec 0c             	sub    esp,0xc
c000b71f:	83 ec 0c             	sub    esp,0xc
c000b722:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b726:	e8 cd ff ff ff       	call   c000b6f8 <Bus::~Bus()>
c000b72b:	83 c4 10             	add    esp,0x10
c000b72e:	83 ec 08             	sub    esp,0x8
c000b731:	68 58 01 00 00       	push   0x158
c000b736:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73a:	e8 f7 f0 ff ff       	call   c000a836 <operator delete(void*, unsigned long)>
c000b73f:	83 c4 10             	add    esp,0x10
c000b742:	83 c4 0c             	add    esp,0xc
c000b745:	c3                   	ret    

c000b746 <beepThread(void*)>:
c000b746:	83 ec 0c             	sub    esp,0xc
c000b749:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c000b74e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b752:	48                   	dec    eax
c000b753:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c000b758:	75 01                	jne    c000b75b <beepThread(void*)+0x15>
c000b75a:	fb                   	sti    
c000b75b:	83 ec 0c             	sub    esp,0xc
c000b75e:	6b c2 0a             	imul   eax,edx,0xa
c000b761:	50                   	push   eax
c000b762:	e8 c5 84 00 00       	call   c0013c2c <milliTenthSleep(unsigned int)>
c000b767:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b76e:	e8 6b a2 00 00       	call   c00159de <HalMakeBeep(int)>
c000b773:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b77b:	83 c4 1c             	add    esp,0x1c
c000b77e:	e9 a5 83 00 00       	jmp    c0013b28 <blockTask(TaskState)>

c000b783 <Krnl::beep(int, int, bool)>:
c000b783:	56                   	push   esi
c000b784:	53                   	push   ebx
c000b785:	83 ec 10             	sub    esp,0x10
c000b788:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b78c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b790:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b794:	e8 45 a2 00 00       	call   c00159de <HalMakeBeep(int)>
c000b799:	83 c4 10             	add    esp,0x10
c000b79c:	89 f0                	mov    eax,esi
c000b79e:	84 c0                	test   al,al
c000b7a0:	74 1e                	je     c000b7c0 <Krnl::beep(int, int, bool)+0x3d>
c000b7a2:	83 ec 0c             	sub    esp,0xc
c000b7a5:	6b db 0a             	imul   ebx,ebx,0xa
c000b7a8:	53                   	push   ebx
c000b7a9:	e8 7e 84 00 00       	call   c0013c2c <milliTenthSleep(unsigned int)>
c000b7ae:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b7b6:	83 c4 14             	add    esp,0x14
c000b7b9:	5b                   	pop    ebx
c000b7ba:	5e                   	pop    esi
c000b7bb:	e9 1e a2 00 00       	jmp    c00159de <HalMakeBeep(int)>
c000b7c0:	68 e6 00 00 00       	push   0xe6
c000b7c5:	53                   	push   ebx
c000b7c6:	68 46 b7 00 c0       	push   0xc000b746
c000b7cb:	ff 35 90 3e 02 c0    	push   DWORD PTR ds:0xc0023e90
c000b7d1:	e8 36 7f 00 00       	call   c001370c <Process::createThread(void (*)(void*), void*, int)>
c000b7d6:	83 c4 14             	add    esp,0x14
c000b7d9:	5b                   	pop    ebx
c000b7da:	5e                   	pop    esi
c000b7db:	c3                   	ret    

c000b7dc <User::loadClockSettings(int)>:
c000b7dc:	53                   	push   ebx
c000b7dd:	83 ec 14             	sub    esp,0x14
c000b7e0:	68 14 01 00 00       	push   0x114
c000b7e5:	e8 a7 c4 ff ff       	call   c0007c91 <malloc>
c000b7ea:	83 c4 0c             	add    esp,0xc
c000b7ed:	89 c3                	mov    ebx,eax
c000b7ef:	ff 35 90 3e 02 c0    	push   DWORD PTR ds:0xc0023e90
c000b7f5:	68 f0 de 01 c0       	push   0xc001def0
c000b7fa:	50                   	push   eax
c000b7fb:	e8 a2 f6 ff ff       	call   c000aea2 <File::File(char const*, Process*)>
c000b800:	58                   	pop    eax
c000b801:	5a                   	pop    edx
c000b802:	6a 01                	push   0x1
c000b804:	53                   	push   ebx
c000b805:	e8 58 f7 ff ff       	call   c000af62 <File::open(FileOpenMode)>
c000b80a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b80d:	e8 ae f7 ff ff       	call   c000afc0 <File::close()>
c000b812:	83 c4 10             	add    esp,0x10
c000b815:	85 db                	test   ebx,ebx
c000b817:	74 0f                	je     c000b828 <User::loadClockSettings(int)+0x4c>
c000b819:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b81b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b81f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b822:	83 c4 08             	add    esp,0x8
c000b825:	5b                   	pop    ebx
c000b826:	ff e0                	jmp    eax
c000b828:	83 c4 08             	add    esp,0x8
c000b82b:	5b                   	pop    ebx
c000b82c:	c3                   	ret    
c000b82d:	90                   	nop

c000b82e <Clock::Clock(char const*)>:
c000b82e:	83 ec 0c             	sub    esp,0xc
c000b831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b835:	83 ec 08             	sub    esp,0x8
c000b838:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b83c:	50                   	push   eax
c000b83d:	e8 c2 06 00 00       	call   c000bf04 <Device::Device(char const*)>
c000b842:	83 c4 10             	add    esp,0x10
c000b845:	ba 18 df 01 c0       	mov    edx,0xc001df18
c000b84a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b84e:	89 10                	mov    DWORD PTR [eax],edx
c000b850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b854:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b85e:	90                   	nop
c000b85f:	83 c4 0c             	add    esp,0xc
c000b862:	c3                   	ret    
c000b863:	90                   	nop

c000b864 <Clock::~Clock()>:
c000b864:	83 ec 0c             	sub    esp,0xc
c000b867:	ba 18 df 01 c0       	mov    edx,0xc001df18
c000b86c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b870:	89 10                	mov    DWORD PTR [eax],edx
c000b872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b876:	83 ec 0c             	sub    esp,0xc
c000b879:	50                   	push   eax
c000b87a:	e8 ef 03 00 00       	call   c000bc6e <Device::~Device()>
c000b87f:	83 c4 10             	add    esp,0x10
c000b882:	90                   	nop
c000b883:	83 c4 0c             	add    esp,0xc
c000b886:	c3                   	ret    
c000b887:	90                   	nop

c000b888 <Clock::~Clock()>:
c000b888:	83 ec 0c             	sub    esp,0xc
c000b88b:	83 ec 0c             	sub    esp,0xc
c000b88e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b892:	e8 cd ff ff ff       	call   c000b864 <Clock::~Clock()>
c000b897:	83 c4 10             	add    esp,0x10
c000b89a:	83 ec 08             	sub    esp,0x8
c000b89d:	68 58 01 00 00       	push   0x158
c000b8a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a6:	e8 8b ef ff ff       	call   c000a836 <operator delete(void*, unsigned long)>
c000b8ab:	83 c4 10             	add    esp,0x10
c000b8ae:	83 c4 0c             	add    esp,0xc
c000b8b1:	c3                   	ret    

c000b8b2 <Clock::timeInSecondsLocal()>:
c000b8b2:	53                   	push   ebx
c000b8b3:	83 ec 14             	sub    esp,0x14
c000b8b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b8ba:	8b 10                	mov    edx,DWORD PTR [eax]
c000b8bc:	50                   	push   eax
c000b8bd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b8c0:	0f b6 0d b8 0a 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020ab8
c000b8c7:	03 0d bc 0a 02 c0    	add    ecx,DWORD PTR ds:0xc0020abc
c000b8cd:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b8d3:	89 cb                	mov    ebx,ecx
c000b8d5:	c1 fb 1f             	sar    ebx,0x1f
c000b8d8:	01 c8                	add    eax,ecx
c000b8da:	11 da                	adc    edx,ebx
c000b8dc:	83 c4 10             	add    esp,0x10
c000b8df:	31 c9                	xor    ecx,ecx
c000b8e1:	80 3d b9 0a 02 c0 00 	cmp    BYTE PTR ds:0xc0020ab9,0x0
c000b8e8:	74 05                	je     c000b8ef <Clock::timeInSecondsLocal()+0x3d>
c000b8ea:	b9 08 07 00 00       	mov    ecx,0x708
c000b8ef:	31 db                	xor    ebx,ebx
c000b8f1:	01 c8                	add    eax,ecx
c000b8f3:	11 da                	adc    edx,ebx
c000b8f5:	83 c4 08             	add    esp,0x8
c000b8f8:	5b                   	pop    ebx
c000b8f9:	c3                   	ret    

c000b8fa <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b8fa:	57                   	push   edi
c000b8fb:	56                   	push   esi
c000b8fc:	53                   	push   ebx
c000b8fd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b901:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b905:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b907:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b90b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b90e:	0f b6 05 b8 0a 02 c0 	movzx  eax,BYTE PTR ds:0xc0020ab8
c000b915:	03 05 bc 0a 02 c0    	add    eax,DWORD PTR ds:0xc0020abc
c000b91b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b921:	99                   	cdq    
c000b922:	29 c6                	sub    esi,eax
c000b924:	19 d7                	sbb    edi,edx
c000b926:	89 f0                	mov    eax,esi
c000b928:	89 fa                	mov    edx,edi
c000b92a:	31 f6                	xor    esi,esi
c000b92c:	80 3d b9 0a 02 c0 00 	cmp    BYTE PTR ds:0xc0020ab9,0x0
c000b933:	74 05                	je     c000b93a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b935:	be 08 07 00 00       	mov    esi,0x708
c000b93a:	31 ff                	xor    edi,edi
c000b93c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b940:	29 f0                	sub    eax,esi
c000b942:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b946:	19 fa                	sbb    edx,edi
c000b948:	89 d8                	mov    eax,ebx
c000b94a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b94e:	5b                   	pop    ebx
c000b94f:	5e                   	pop    esi
c000b950:	5f                   	pop    edi
c000b951:	ff e0                	jmp    eax

c000b953 <datetimeToSeconds(datetime_t)>:
c000b953:	55                   	push   ebp
c000b954:	57                   	push   edi
c000b955:	56                   	push   esi
c000b956:	53                   	push   ebx
c000b957:	83 ec 14             	sub    esp,0x14
c000b95a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b95e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b962:	89 d3                	mov    ebx,edx
c000b964:	0f b6 c6             	movzx  eax,dh
c000b967:	c1 eb 10             	shr    ebx,0x10
c000b96a:	48                   	dec    eax
c000b96b:	66 81 eb 6c 07       	sub    bx,0x76c
c000b970:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b974:	0f b6 f5             	movzx  esi,ch
c000b977:	89 cf                	mov    edi,ecx
c000b979:	6b f6 3c             	imul   esi,esi,0x3c
c000b97c:	c1 ef 10             	shr    edi,0x10
c000b97f:	0f b6 c9             	movzx  ecx,cl
c000b982:	89 f8                	mov    eax,edi
c000b984:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b98a:	0f b6 f8             	movzx  edi,al
c000b98d:	0f b6 d2             	movzx  edx,dl
c000b990:	01 fe                	add    esi,edi
c000b992:	01 f1                	add    ecx,esi
c000b994:	0f b7 f3             	movzx  esi,bx
c000b997:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b99b:	c1 f9 1f             	sar    ecx,0x1f
c000b99e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b9a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b9a7:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b9ac:	8b 0c 8d 60 df 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe20a0]
c000b9b3:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b9b7:	76 29                	jbe    c000b9e2 <datetimeToSeconds(datetime_t)+0x8f>
c000b9b9:	f6 c3 03             	test   bl,0x3
c000b9bc:	75 24                	jne    c000b9e2 <datetimeToSeconds(datetime_t)+0x8f>
c000b9be:	31 d2                	xor    edx,edx
c000b9c0:	bf 64 00 00 00       	mov    edi,0x64
c000b9c5:	89 d8                	mov    eax,ebx
c000b9c7:	66 f7 f7             	div    di
c000b9ca:	66 85 d2             	test   dx,dx
c000b9cd:	75 12                	jne    c000b9e1 <datetimeToSeconds(datetime_t)+0x8e>
c000b9cf:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b9d5:	bf 90 01 00 00       	mov    edi,0x190
c000b9da:	99                   	cdq    
c000b9db:	f7 ff                	idiv   edi
c000b9dd:	85 d2                	test   edx,edx
c000b9df:	75 01                	jne    c000b9e2 <datetimeToSeconds(datetime_t)+0x8f>
c000b9e1:	41                   	inc    ecx
c000b9e2:	66 83 fb 46          	cmp    bx,0x46
c000b9e6:	76 45                	jbe    c000ba2d <datetimeToSeconds(datetime_t)+0xda>
c000b9e8:	bb 46 00 00 00       	mov    ebx,0x46
c000b9ed:	bf 64 00 00 00       	mov    edi,0x64
c000b9f2:	bd 90 01 00 00       	mov    ebp,0x190
c000b9f7:	b8 6d 01 00 00       	mov    eax,0x16d
c000b9fc:	f6 c3 03             	test   bl,0x3
c000b9ff:	75 23                	jne    c000ba24 <datetimeToSeconds(datetime_t)+0xd1>
c000ba01:	89 d8                	mov    eax,ebx
c000ba03:	99                   	cdq    
c000ba04:	f7 ff                	idiv   edi
c000ba06:	b8 6e 01 00 00       	mov    eax,0x16e
c000ba0b:	85 d2                	test   edx,edx
c000ba0d:	75 15                	jne    c000ba24 <datetimeToSeconds(datetime_t)+0xd1>
c000ba0f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000ba15:	99                   	cdq    
c000ba16:	f7 fd                	idiv   ebp
c000ba18:	31 c0                	xor    eax,eax
c000ba1a:	85 d2                	test   edx,edx
c000ba1c:	0f 94 c0             	sete   al
c000ba1f:	05 6d 01 00 00       	add    eax,0x16d
c000ba24:	01 c1                	add    ecx,eax
c000ba26:	43                   	inc    ebx
c000ba27:	39 f3                	cmp    ebx,esi
c000ba29:	7c cc                	jl     c000b9f7 <datetimeToSeconds(datetime_t)+0xa4>
c000ba2b:	eb 3b                	jmp    c000ba68 <datetimeToSeconds(datetime_t)+0x115>
c000ba2d:	74 39                	je     c000ba68 <datetimeToSeconds(datetime_t)+0x115>
c000ba2f:	b8 45 00 00 00       	mov    eax,0x45
c000ba34:	89 c2                	mov    edx,eax
c000ba36:	83 e2 03             	and    edx,0x3
c000ba39:	39 f0                	cmp    eax,esi
c000ba3b:	7e 13                	jle    c000ba50 <datetimeToSeconds(datetime_t)+0xfd>
c000ba3d:	85 d2                	test   edx,edx
c000ba3f:	0f 94 c2             	sete   dl
c000ba42:	48                   	dec    eax
c000ba43:	0f b6 d2             	movzx  edx,dl
c000ba46:	81 c2 6d 01 00 00    	add    edx,0x16d
c000ba4c:	29 d1                	sub    ecx,edx
c000ba4e:	eb e4                	jmp    c000ba34 <datetimeToSeconds(datetime_t)+0xe1>
c000ba50:	b8 6d 01 00 00       	mov    eax,0x16d
c000ba55:	85 d2                	test   edx,edx
c000ba57:	75 0d                	jne    c000ba66 <datetimeToSeconds(datetime_t)+0x113>
c000ba59:	31 c0                	xor    eax,eax
c000ba5b:	66 85 db             	test   bx,bx
c000ba5e:	0f 95 c0             	setne  al
c000ba61:	05 6d 01 00 00       	add    eax,0x16d
c000ba66:	29 c1                	sub    ecx,eax
c000ba68:	b8 80 51 01 00       	mov    eax,0x15180
c000ba6d:	f7 e9                	imul   ecx
c000ba6f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ba73:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000ba77:	83 c4 14             	add    esp,0x14
c000ba7a:	5b                   	pop    ebx
c000ba7b:	5e                   	pop    esi
c000ba7c:	5f                   	pop    edi
c000ba7d:	5d                   	pop    ebp
c000ba7e:	c3                   	ret    
c000ba7f:	90                   	nop

c000ba80 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000ba80:	57                   	push   edi
c000ba81:	56                   	push   esi
c000ba82:	53                   	push   ebx
c000ba83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ba87:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba89:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000ba8c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba90:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba94:	e8 ba fe ff ff       	call   c000b953 <datetimeToSeconds(datetime_t)>
c000ba99:	59                   	pop    ecx
c000ba9a:	0f b6 0d b8 0a 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020ab8
c000baa1:	5b                   	pop    ebx
c000baa2:	03 0d bc 0a 02 c0    	add    ecx,DWORD PTR ds:0xc0020abc
c000baa8:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000baae:	89 cb                	mov    ebx,ecx
c000bab0:	c1 fb 1f             	sar    ebx,0x1f
c000bab3:	29 c8                	sub    eax,ecx
c000bab5:	19 da                	sbb    edx,ebx
c000bab7:	31 c9                	xor    ecx,ecx
c000bab9:	80 3d b9 0a 02 c0 00 	cmp    BYTE PTR ds:0xc0020ab9,0x0
c000bac0:	74 05                	je     c000bac7 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bac2:	b9 08 07 00 00       	mov    ecx,0x708
c000bac7:	31 db                	xor    ebx,ebx
c000bac9:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bacd:	29 c8                	sub    eax,ecx
c000bacf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bad3:	19 da                	sbb    edx,ebx
c000bad5:	89 f8                	mov    eax,edi
c000bad7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000badb:	5b                   	pop    ebx
c000badc:	5e                   	pop    esi
c000badd:	5f                   	pop    edi
c000bade:	ff e0                	jmp    eax

c000bae0 <secondsToDatetime(unsigned long long)>:
c000bae0:	55                   	push   ebp
c000bae1:	57                   	push   edi
c000bae2:	56                   	push   esi
c000bae3:	53                   	push   ebx
c000bae4:	83 ec 1c             	sub    esp,0x1c
c000bae7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000baeb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000baef:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000baf3:	6a 00                	push   0x0
c000baf5:	68 80 51 01 00       	push   0x15180
c000bafa:	55                   	push   ebp
c000bafb:	57                   	push   edi
c000bafc:	e8 0f 07 01 00       	call   c001c210 <__udivdi3>
c000bb01:	83 c4 10             	add    esp,0x10
c000bb04:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bb0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb0e:	6a 00                	push   0x0
c000bb10:	68 80 51 01 00       	push   0x15180
c000bb15:	55                   	push   ebp
c000bb16:	57                   	push   edi
c000bb17:	bf 10 0e 00 00       	mov    edi,0xe10
c000bb1c:	e8 ef 07 01 00       	call   c001c310 <__umoddi3>
c000bb21:	83 c4 10             	add    esp,0x10
c000bb24:	99                   	cdq    
c000bb25:	f7 ff                	idiv   edi
c000bb27:	bf 3c 00 00 00       	mov    edi,0x3c
c000bb2c:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bb2f:	89 d0                	mov    eax,edx
c000bb31:	99                   	cdq    
c000bb32:	f7 ff                	idiv   edi
c000bb34:	85 db                	test   ebx,ebx
c000bb36:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000bb39:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000bb3c:	79 11                	jns    c000bb4f <secondsToDatetime(unsigned long long)+0x6f>
c000bb3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bb42:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000bb48:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bb4d:	eb 07                	jmp    c000bb56 <secondsToDatetime(unsigned long long)+0x76>
c000bb4f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bb54:	89 d8                	mov    eax,ebx
c000bb56:	bf b4 05 00 00       	mov    edi,0x5b4
c000bb5b:	99                   	cdq    
c000bb5c:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000bb61:	f7 f9                	idiv   ecx
c000bb63:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000bb68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb6c:	31 d2                	xor    edx,edx
c000bb6e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000bb76:	01 c3                	add    ebx,eax
c000bb78:	89 d8                	mov    eax,ebx
c000bb7a:	f7 f1                	div    ecx
c000bb7c:	31 d2                	xor    edx,edx
c000bb7e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000bb81:	89 d8                	mov    eax,ebx
c000bb83:	f7 f7                	div    edi
c000bb85:	31 d2                	xor    edx,edx
c000bb87:	29 c1                	sub    ecx,eax
c000bb89:	89 d8                	mov    eax,ebx
c000bb8b:	f7 f5                	div    ebp
c000bb8d:	bd 6d 01 00 00       	mov    ebp,0x16d
c000bb92:	29 c1                	sub    ecx,eax
c000bb94:	31 d2                	xor    edx,edx
c000bb96:	89 c8                	mov    eax,ecx
c000bb98:	f7 f5                	div    ebp
c000bb9a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000bb9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bba3:	31 d2                	xor    edx,edx
c000bba5:	89 c8                	mov    eax,ecx
c000bba7:	f7 f5                	div    ebp
c000bba9:	31 d2                	xor    edx,edx
c000bbab:	01 c3                	add    ebx,eax
c000bbad:	89 c8                	mov    eax,ecx
c000bbaf:	f7 f7                	div    edi
c000bbb1:	bf 99 00 00 00       	mov    edi,0x99
c000bbb6:	29 c3                	sub    ebx,eax
c000bbb8:	31 d2                	xor    edx,edx
c000bbba:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000bbc2:	29 c3                	sub    ebx,eax
c000bbc4:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000bbc7:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000bbca:	bb 05 00 00 00       	mov    ebx,0x5
c000bbcf:	83 c1 02             	add    ecx,0x2
c000bbd2:	89 c8                	mov    eax,ecx
c000bbd4:	f7 f7                	div    edi
c000bbd6:	31 d2                	xor    edx,edx
c000bbd8:	89 c7                	mov    edi,eax
c000bbda:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000bbe0:	83 c0 02             	add    eax,0x2
c000bbe3:	f7 f3                	div    ebx
c000bbe5:	89 eb                	mov    ebx,ebp
c000bbe7:	29 c3                	sub    ebx,eax
c000bbe9:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000bbef:	88 1e                	mov    BYTE PTR [esi],bl
c000bbf1:	19 c0                	sbb    eax,eax
c000bbf3:	31 d2                	xor    edx,edx
c000bbf5:	83 e0 0c             	and    eax,0xc
c000bbf8:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bbfc:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bc04:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bc08:	83 f9 01             	cmp    ecx,0x1
c000bc0b:	0f 96 c2             	setbe  dl
c000bc0e:	41                   	inc    ecx
c000bc0f:	01 d0                	add    eax,edx
c000bc11:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bc14:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bc18:	83 c4 1c             	add    esp,0x1c
c000bc1b:	89 f0                	mov    eax,esi
c000bc1d:	5b                   	pop    ebx
c000bc1e:	5e                   	pop    esi
c000bc1f:	5f                   	pop    edi
c000bc20:	5d                   	pop    ebp
c000bc21:	c2 04 00             	ret    0x4

c000bc24 <Clock::timeInDatetimeLocal()>:
c000bc24:	53                   	push   ebx
c000bc25:	83 ec 14             	sub    esp,0x14
c000bc28:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bc2c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bc30:	e8 7d fc ff ff       	call   c000b8b2 <Clock::timeInSecondsLocal()>
c000bc35:	83 c4 0c             	add    esp,0xc
c000bc38:	52                   	push   edx
c000bc39:	50                   	push   eax
c000bc3a:	53                   	push   ebx
c000bc3b:	e8 a0 fe ff ff       	call   c000bae0 <secondsToDatetime(unsigned long long)>
c000bc40:	89 d8                	mov    eax,ebx
c000bc42:	83 c4 14             	add    esp,0x14
c000bc45:	5b                   	pop    ebx
c000bc46:	c2 04 00             	ret    0x4
c000bc49:	90                   	nop

c000bc4a <Device::hibernate()>:
c000bc4a:	c3                   	ret    
c000bc4b:	90                   	nop

c000bc4c <Device::wake()>:
c000bc4c:	c3                   	ret    
c000bc4d:	90                   	nop

c000bc4e <Device::detect()>:
c000bc4e:	c3                   	ret    
c000bc4f:	90                   	nop

c000bc50 <Device::disableLegacy()>:
c000bc50:	c3                   	ret    
c000bc51:	90                   	nop

c000bc52 <Device::powerSaving(PowerSavingLevel)>:
c000bc52:	c3                   	ret    
c000bc53:	90                   	nop

c000bc54 <DriverlessDevice::close(int, int, void*)>:
c000bc54:	31 c0                	xor    eax,eax
c000bc56:	c3                   	ret    
c000bc57:	90                   	nop

c000bc58 <DriverlessDevice::detect()>:
c000bc58:	c3                   	ret    
c000bc59:	90                   	nop

c000bc5a <DriverlessDevice::open(int, int, void*)>:
c000bc5a:	83 ec 18             	sub    esp,0x18
c000bc5d:	68 90 df 01 c0       	push   0xc001df90
c000bc62:	e8 28 49 00 00       	call   c001058f <KePanic(char const*)>
c000bc67:	83 c8 ff             	or     eax,0xffffffff
c000bc6a:	83 c4 1c             	add    esp,0x1c
c000bc6d:	c3                   	ret    

c000bc6e <Device::~Device()>:
c000bc6e:	ba f0 df 01 c0       	mov    edx,0xc001dff0
c000bc73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc77:	89 10                	mov    DWORD PTR [eax],edx
c000bc79:	90                   	nop
c000bc7a:	c3                   	ret    
c000bc7b:	90                   	nop

c000bc7c <Device::~Device()>:
c000bc7c:	83 ec 0c             	sub    esp,0xc
c000bc7f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bc83:	e8 e6 ff ff ff       	call   c000bc6e <Device::~Device()>
c000bc88:	83 c4 04             	add    esp,0x4
c000bc8b:	83 ec 08             	sub    esp,0x8
c000bc8e:	68 58 01 00 00       	push   0x158
c000bc93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc97:	e8 9a eb ff ff       	call   c000a836 <operator delete(void*, unsigned long)>
c000bc9c:	83 c4 10             	add    esp,0x10
c000bc9f:	83 c4 0c             	add    esp,0xc
c000bca2:	c3                   	ret    
c000bca3:	90                   	nop

c000bca4 <Device::findAndLoadDriver()>:
c000bca4:	c7 44 24 04 ae df 01 c0 	mov    DWORD PTR [esp+0x4],0xc001dfae
c000bcac:	e9 7b ec ff ff       	jmp    c000a92c <Dbg::kprintf(char const*, ...)>
c000bcb1:	90                   	nop

c000bcb2 <Device::preOpenPCI(PCIDeviceInfo)>:
c000bcb2:	57                   	push   edi
c000bcb3:	b9 09 00 00 00       	mov    ecx,0x9
c000bcb8:	56                   	push   esi
c000bcb9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bcbd:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bcc1:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bccb:	81 c7 18 01 00 00    	add    edi,0x118
c000bcd1:	fc                   	cld    
c000bcd2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bcd4:	5e                   	pop    esi
c000bcd5:	5f                   	pop    edi
c000bcd6:	c3                   	ret    
c000bcd7:	90                   	nop

c000bcd8 <Device::preOpenACPI(void*, char*, char*)>:
c000bcd8:	57                   	push   edi
c000bcd9:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bcde:	56                   	push   esi
c000bcdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bce3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bce7:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bcf1:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bcf7:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bcfd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bd01:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bd03:	b9 0e 00 00 00       	mov    ecx,0xe
c000bd08:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bd0e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bd12:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bd14:	5e                   	pop    esi
c000bd15:	5f                   	pop    edi
c000bd16:	c3                   	ret    
c000bd17:	90                   	nop

c000bd18 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bd18:	53                   	push   ebx
c000bd19:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd1d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bd21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bd25:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bd29:	0f b6 c0             	movzx  eax,al
c000bd2c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000bd30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bd34:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bd38:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bd3c:	5b                   	pop    ebx
c000bd3d:	e9 a6 05 00 00       	jmp    c000c2e8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000bd42 <Device::getParent()>:
c000bd42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd46:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000bd4c:	c3                   	ret    
c000bd4d:	90                   	nop

c000bd4e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000bd4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd52:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd56:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000bd5b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bd5f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bd63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bd67:	e9 e8 06 00 00       	jmp    c000c454 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000bd6c <Device::addChild(Device*)>:
c000bd6c:	53                   	push   ebx
c000bd6d:	83 ec 08             	sub    esp,0x8
c000bd70:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bd78:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000bd7e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000bd84:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bd86:	85 d2                	test   edx,edx
c000bd88:	74 04                	je     c000bd8e <Device::addChild(Device*)+0x22>
c000bd8a:	89 d3                	mov    ebx,edx
c000bd8c:	eb f6                	jmp    c000bd84 <Device::addChild(Device*)+0x18>
c000bd8e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000bd91:	83 ec 0c             	sub    esp,0xc
c000bd94:	6a 08                	push   0x8
c000bd96:	e8 f6 be ff ff       	call   c0007c91 <malloc>
c000bd9b:	89 03                	mov    DWORD PTR [ebx],eax
c000bd9d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bda3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bdaa:	83 c4 18             	add    esp,0x18
c000bdad:	5b                   	pop    ebx
c000bdae:	c3                   	ret    
c000bdaf:	90                   	nop

c000bdb0 <Device::removeAllChildren()>:
c000bdb0:	56                   	push   esi
c000bdb1:	53                   	push   ebx
c000bdb2:	52                   	push   edx
c000bdb3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bdb7:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000bdbd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bdc0:	74 17                	je     c000bdd9 <Device::removeAllChildren()+0x29>
c000bdc2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000bdc5:	85 c0                	test   eax,eax
c000bdc7:	74 0c                	je     c000bdd5 <Device::removeAllChildren()+0x25>
c000bdc9:	83 ec 0c             	sub    esp,0xc
c000bdcc:	8b 10                	mov    edx,DWORD PTR [eax]
c000bdce:	50                   	push   eax
c000bdcf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000bdd2:	83 c4 10             	add    esp,0x10
c000bdd5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bdd7:	eb e4                	jmp    c000bdbd <Device::removeAllChildren()+0xd>
c000bdd9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bddf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bde5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bdeb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bdf2:	58                   	pop    eax
c000bdf3:	5b                   	pop    ebx
c000bdf4:	5e                   	pop    esi
c000bdf5:	c3                   	ret    

c000bdf6 <Device::hibernateAll()>:
c000bdf6:	53                   	push   ebx
c000bdf7:	83 ec 14             	sub    esp,0x14
c000bdfa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bdfe:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be00:	53                   	push   ebx
c000be01:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000be04:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000be0a:	83 c4 10             	add    esp,0x10
c000be0d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be10:	74 0f                	je     c000be21 <Device::hibernateAll()+0x2b>
c000be12:	83 ec 0c             	sub    esp,0xc
c000be15:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be18:	e8 d9 ff ff ff       	call   c000bdf6 <Device::hibernateAll()>
c000be1d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be1f:	eb e9                	jmp    c000be0a <Device::hibernateAll()+0x14>
c000be21:	83 c4 08             	add    esp,0x8
c000be24:	5b                   	pop    ebx
c000be25:	c3                   	ret    

c000be26 <Device::wakeAll()>:
c000be26:	53                   	push   ebx
c000be27:	83 ec 14             	sub    esp,0x14
c000be2a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be30:	53                   	push   ebx
c000be31:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000be34:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000be3a:	83 c4 10             	add    esp,0x10
c000be3d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be40:	74 0f                	je     c000be51 <Device::wakeAll()+0x2b>
c000be42:	83 ec 0c             	sub    esp,0xc
c000be45:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be48:	e8 d9 ff ff ff       	call   c000be26 <Device::wakeAll()>
c000be4d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be4f:	eb e9                	jmp    c000be3a <Device::wakeAll()+0x14>
c000be51:	83 c4 08             	add    esp,0x8
c000be54:	5b                   	pop    ebx
c000be55:	c3                   	ret    

c000be56 <Device::detectAll()>:
c000be56:	53                   	push   ebx
c000be57:	83 ec 14             	sub    esp,0x14
c000be5a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be60:	53                   	push   ebx
c000be61:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000be64:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000be6a:	83 c4 10             	add    esp,0x10
c000be6d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be70:	74 0f                	je     c000be81 <Device::detectAll()+0x2b>
c000be72:	83 ec 0c             	sub    esp,0xc
c000be75:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be78:	e8 d9 ff ff ff       	call   c000be56 <Device::detectAll()>
c000be7d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be7f:	eb e9                	jmp    c000be6a <Device::detectAll()+0x14>
c000be81:	83 c4 08             	add    esp,0x8
c000be84:	5b                   	pop    ebx
c000be85:	c3                   	ret    

c000be86 <Device::disableLegacyAll()>:
c000be86:	c3                   	ret    
c000be87:	90                   	nop

c000be88 <Device::loadDriversForAll()>:
c000be88:	c3                   	ret    
c000be89:	90                   	nop

c000be8a <Device::closeAll()>:
c000be8a:	53                   	push   ebx
c000be8b:	83 ec 08             	sub    esp,0x8
c000be8e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000be92:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be94:	6a 00                	push   0x0
c000be96:	6a 00                	push   0x0
c000be98:	6a 00                	push   0x0
c000be9a:	53                   	push   ebx
c000be9b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000be9e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bea4:	83 c4 10             	add    esp,0x10
c000bea7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000beaa:	74 0f                	je     c000bebb <Device::closeAll()+0x31>
c000beac:	83 ec 0c             	sub    esp,0xc
c000beaf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000beb2:	e8 d3 ff ff ff       	call   c000be8a <Device::closeAll()>
c000beb7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000beb9:	eb e9                	jmp    c000bea4 <Device::closeAll()+0x1a>
c000bebb:	83 c4 08             	add    esp,0x8
c000bebe:	5b                   	pop    ebx
c000bebf:	c3                   	ret    

c000bec0 <Device::powerSavingAll(PowerSavingLevel)>:
c000bec0:	56                   	push   esi
c000bec1:	53                   	push   ebx
c000bec2:	83 ec 0c             	sub    esp,0xc
c000bec5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bec9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000becd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000becf:	56                   	push   esi
c000bed0:	53                   	push   ebx
c000bed1:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bed4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000beda:	83 c4 10             	add    esp,0x10
c000bedd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bee0:	74 0f                	je     c000bef1 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bee2:	52                   	push   edx
c000bee3:	52                   	push   edx
c000bee4:	56                   	push   esi
c000bee5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bee8:	e8 d3 ff ff ff       	call   c000bec0 <Device::powerSavingAll(PowerSavingLevel)>
c000beed:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000beef:	eb e9                	jmp    c000beda <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bef1:	58                   	pop    eax
c000bef2:	5b                   	pop    ebx
c000bef3:	5e                   	pop    esi
c000bef4:	c3                   	ret    
c000bef5:	90                   	nop

c000bef6 <Device::setName(char const*)>:
c000bef6:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000befe:	e9 fd 46 ff ff       	jmp    c0000600 <strcpy>
c000bf03:	90                   	nop

c000bf04 <Device::Device(char const*)>:
c000bf04:	83 ec 1c             	sub    esp,0x1c
c000bf07:	ba f0 df 01 c0       	mov    edx,0xc001dff0
c000bf0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf10:	89 10                	mov    DWORD PTR [eax],edx
c000bf12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf16:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bf20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf24:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bf2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf32:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bf3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf40:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bf4a:	83 ec 08             	sub    esp,0x8
c000bf4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf55:	e8 9c ff ff ff       	call   c000bef6 <Device::setName(char const*)>
c000bf5a:	83 c4 10             	add    esp,0x10
c000bf5d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bf65:	83 ec 0c             	sub    esp,0xc
c000bf68:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bf6c:	e8 20 bd ff ff       	call   c0007c91 <malloc>
c000bf71:	83 c4 10             	add    esp,0x10
c000bf74:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bf7a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bf81:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bf85:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bf8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf8f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bf95:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bf9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf9f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bfa5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bfac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfb0:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bfb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfbb:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bfc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfc6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bfd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfd4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bfde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfe2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bfec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bff0:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bffa:	90                   	nop
c000bffb:	83 c4 1c             	add    esp,0x1c
c000bffe:	c3                   	ret    
c000bfff:	90                   	nop

c000c000 <Device::getName()>:
c000c000:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c004:	05 d0 00 00 00       	add    eax,0xd0
c000c009:	c3                   	ret    

c000c00a <DriverlessDevice::DriverlessDevice(char const*)>:
c000c00a:	83 ec 0c             	sub    esp,0xc
c000c00d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c011:	83 ec 08             	sub    esp,0x8
c000c014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c018:	50                   	push   eax
c000c019:	e8 e6 fe ff ff       	call   c000bf04 <Device::Device(char const*)>
c000c01e:	83 c4 10             	add    esp,0x10
c000c021:	ba 1c e0 01 c0       	mov    edx,0xc001e01c
c000c026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c02a:	89 10                	mov    DWORD PTR [eax],edx
c000c02c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c030:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000c03a:	90                   	nop
c000c03b:	83 c4 0c             	add    esp,0xc
c000c03e:	c3                   	ret    
c000c03f:	90                   	nop

c000c040 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c040:	57                   	push   edi
c000c041:	56                   	push   esi
c000c042:	53                   	push   ebx
c000c043:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c047:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c04b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c04f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c055:	75 0c                	jne    c000c063 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c057:	52                   	push   edx
c000c058:	52                   	push   edx
c000c059:	53                   	push   ebx
c000c05a:	56                   	push   esi
c000c05b:	e8 62 06 01 00       	call   c001c6c2 <LinkedList<Device>::addElement(Device*)>
c000c060:	83 c4 10             	add    esp,0x10
c000c063:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c069:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c06c:	74 12                	je     c000c080 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c06e:	50                   	push   eax
c000c06f:	57                   	push   edi
c000c070:	56                   	push   esi
c000c071:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c074:	e8 c7 ff ff ff       	call   c000c040 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c079:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c07b:	83 c4 10             	add    esp,0x10
c000c07e:	eb e9                	jmp    c000c069 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c080:	5b                   	pop    ebx
c000c081:	5e                   	pop    esi
c000c082:	5f                   	pop    edi
c000c083:	c3                   	ret    

c000c084 <getDevicesOfType(DeviceType)>:
c000c084:	53                   	push   ebx
c000c085:	83 ec 14             	sub    esp,0x14
c000c088:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c08c:	53                   	push   ebx
c000c08d:	e8 0c 07 01 00       	call   c001c79e <LinkedList<Device>::LinkedList()>
c000c092:	83 c4 0c             	add    esp,0xc
c000c095:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c099:	53                   	push   ebx
c000c09a:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c000c0a0:	e8 9b ff ff ff       	call   c000c040 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c0a5:	89 d8                	mov    eax,ebx
c000c0a7:	83 c4 18             	add    esp,0x18
c000c0aa:	5b                   	pop    ebx
c000c0ab:	c2 04 00             	ret    0x4
c000c0ae:	66 90                	xchg   ax,ax

c000c0b0 <HardDiskController::HardDiskController(char const*)>:
c000c0b0:	83 ec 0c             	sub    esp,0xc
c000c0b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0b7:	83 ec 08             	sub    esp,0x8
c000c0ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0be:	50                   	push   eax
c000c0bf:	e8 40 fe ff ff       	call   c000bf04 <Device::Device(char const*)>
c000c0c4:	83 c4 10             	add    esp,0x10
c000c0c7:	ba 48 e0 01 c0       	mov    edx,0xc001e048
c000c0cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0d0:	89 10                	mov    DWORD PTR [eax],edx
c000c0d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0d6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c0e0:	90                   	nop
c000c0e1:	83 c4 0c             	add    esp,0xc
c000c0e4:	c3                   	ret    
c000c0e5:	90                   	nop
c000c0e6:	66 90                	xchg   ax,ax

c000c0e8 <HardDiskController::~HardDiskController()>:
c000c0e8:	83 ec 0c             	sub    esp,0xc
c000c0eb:	ba 48 e0 01 c0       	mov    edx,0xc001e048
c000c0f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0f4:	89 10                	mov    DWORD PTR [eax],edx
c000c0f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0fa:	83 ec 0c             	sub    esp,0xc
c000c0fd:	50                   	push   eax
c000c0fe:	e8 6b fb ff ff       	call   c000bc6e <Device::~Device()>
c000c103:	83 c4 10             	add    esp,0x10
c000c106:	90                   	nop
c000c107:	83 c4 0c             	add    esp,0xc
c000c10a:	c3                   	ret    
c000c10b:	90                   	nop

c000c10c <HardDiskController::~HardDiskController()>:
c000c10c:	83 ec 0c             	sub    esp,0xc
c000c10f:	83 ec 0c             	sub    esp,0xc
c000c112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c116:	e8 cd ff ff ff       	call   c000c0e8 <HardDiskController::~HardDiskController()>
c000c11b:	83 c4 10             	add    esp,0x10
c000c11e:	83 ec 08             	sub    esp,0x8
c000c121:	68 58 01 00 00       	push   0x158
c000c126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c12a:	e8 07 e7 ff ff       	call   c000a836 <operator delete(void*, unsigned long)>
c000c12f:	83 c4 10             	add    esp,0x10
c000c132:	83 c4 0c             	add    esp,0xc
c000c135:	c3                   	ret    

c000c136 <PhysicalDisk::eject()>:
c000c136:	83 c8 ff             	or     eax,0xffffffff
c000c139:	c3                   	ret    

c000c13a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c13a:	83 ec 0c             	sub    esp,0xc
c000c13d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c141:	83 ec 08             	sub    esp,0x8
c000c144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c148:	50                   	push   eax
c000c149:	e8 b6 fd ff ff       	call   c000bf04 <Device::Device(char const*)>
c000c14e:	83 c4 10             	add    esp,0x10
c000c151:	ba 74 e0 01 c0       	mov    edx,0xc001e074
c000c156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c15a:	89 10                	mov    DWORD PTR [eax],edx
c000c15c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c160:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c167:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c16b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c172:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c176:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c184:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c188:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c18e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c192:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c19c:	90                   	nop
c000c19d:	83 c4 0c             	add    esp,0xc
c000c1a0:	c3                   	ret    
c000c1a1:	90                   	nop

c000c1a2 <PhysicalDisk::startCache()>:
c000c1a2:	56                   	push   esi
c000c1a3:	53                   	push   ebx
c000c1a4:	83 ec 10             	sub    esp,0x10
c000c1a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c1ab:	6a 44                	push   0x44
c000c1ad:	e8 df ba ff ff       	call   c0007c91 <malloc>
c000c1b2:	89 c6                	mov    esi,eax
c000c1b4:	58                   	pop    eax
c000c1b5:	5a                   	pop    edx
c000c1b6:	53                   	push   ebx
c000c1b7:	56                   	push   esi
c000c1b8:	e8 ab 15 00 00       	call   c000d768 <VCache::VCache(PhysicalDisk*)>
c000c1bd:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c1c3:	83 c4 14             	add    esp,0x14
c000c1c6:	5b                   	pop    ebx
c000c1c7:	5e                   	pop    esi
c000c1c8:	c3                   	ret    
c000c1c9:	90                   	nop

c000c1ca <PhysicalDisk::~PhysicalDisk()>:
c000c1ca:	83 ec 0c             	sub    esp,0xc
c000c1cd:	ba 74 e0 01 c0       	mov    edx,0xc001e074
c000c1d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1d6:	89 10                	mov    DWORD PTR [eax],edx
c000c1d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1dc:	83 ec 0c             	sub    esp,0xc
c000c1df:	50                   	push   eax
c000c1e0:	e8 89 fa ff ff       	call   c000bc6e <Device::~Device()>
c000c1e5:	83 c4 10             	add    esp,0x10
c000c1e8:	90                   	nop
c000c1e9:	83 c4 0c             	add    esp,0xc
c000c1ec:	c3                   	ret    
c000c1ed:	90                   	nop

c000c1ee <PhysicalDisk::~PhysicalDisk()>:
c000c1ee:	83 ec 0c             	sub    esp,0xc
c000c1f1:	83 ec 0c             	sub    esp,0xc
c000c1f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1f8:	e8 cd ff ff ff       	call   c000c1ca <PhysicalDisk::~PhysicalDisk()>
c000c1fd:	83 c4 10             	add    esp,0x10
c000c200:	83 ec 08             	sub    esp,0x8
c000c203:	68 6c 01 00 00       	push   0x16c
c000c208:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c20c:	e8 25 e6 ff ff       	call   c000a836 <operator delete(void*, unsigned long)>
c000c211:	83 c4 10             	add    esp,0x10
c000c214:	83 c4 0c             	add    esp,0xc
c000c217:	c3                   	ret    

c000c218 <int_handler>:
c000c218:	55                   	push   ebp
c000c219:	57                   	push   edi
c000c21a:	56                   	push   esi
c000c21b:	53                   	push   ebx
c000c21c:	83 ec 0c             	sub    esp,0xc
c000c21f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c223:	80 3d 38 34 02 c0 00 	cmp    BYTE PTR ds:0xc0023438,0x0
c000c22a:	74 0b                	je     c000c237 <int_handler+0x1f>
c000c22c:	fa                   	cli    
c000c22d:	f4                   	hlt    
c000c22e:	80 3d 38 34 02 c0 00 	cmp    BYTE PTR ds:0xc0023438,0x0
c000c235:	75 f5                	jne    c000c22c <int_handler+0x14>
c000c237:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c23a:	8d 46 e0             	lea    eax,[esi-0x20]
c000c23d:	83 f8 17             	cmp    eax,0x17
c000c240:	76 3e                	jbe    c000c280 <int_handler+0x68>
c000c242:	c1 e6 04             	shl    esi,0x4
c000c245:	31 db                	xor    ebx,ebx
c000c247:	8d ae c0 1a 02 c0    	lea    ebp,[esi-0x3ffde540]
c000c24d:	81 c6 c0 0a 02 c0    	add    esi,0xc0020ac0
c000c253:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c257:	85 c0                	test   eax,eax
c000c259:	74 13                	je     c000c26e <int_handler+0x56>
c000c25b:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c25e:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c262:	74 2a                	je     c000c28e <int_handler+0x76>
c000c264:	83 ec 08             	sub    esp,0x8
c000c267:	52                   	push   edx
c000c268:	57                   	push   edi
c000c269:	ff d0                	call   eax
c000c26b:	83 c4 10             	add    esp,0x10
c000c26e:	43                   	inc    ebx
c000c26f:	83 fb 04             	cmp    ebx,0x4
c000c272:	75 df                	jne    c000c253 <int_handler+0x3b>
c000c274:	83 c4 0c             	add    esp,0xc
c000c277:	31 c0                	xor    eax,eax
c000c279:	5b                   	pop    ebx
c000c27a:	31 d2                	xor    edx,edx
c000c27c:	5e                   	pop    esi
c000c27d:	5f                   	pop    edi
c000c27e:	5d                   	pop    ebp
c000c27f:	c3                   	ret    
c000c280:	83 ec 0c             	sub    esp,0xc
c000c283:	50                   	push   eax
c000c284:	e8 92 97 00 00       	call   c0015a1b <HalEndOfInterrupt(int)>
c000c289:	83 c4 10             	add    esp,0x10
c000c28c:	eb b4                	jmp    c000c242 <int_handler+0x2a>
c000c28e:	83 ec 08             	sub    esp,0x8
c000c291:	52                   	push   edx
c000c292:	57                   	push   edi
c000c293:	ff d0                	call   eax
c000c295:	83 c4 10             	add    esp,0x10
c000c298:	83 c4 0c             	add    esp,0xc
c000c29b:	5b                   	pop    ebx
c000c29c:	5e                   	pop    esi
c000c29d:	5f                   	pop    edi
c000c29e:	5d                   	pop    ebp
c000c29f:	c3                   	ret    

c000c2a0 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c2a0:	56                   	push   esi
c000c2a1:	31 c0                	xor    eax,eax
c000c2a3:	53                   	push   ebx
c000c2a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c2a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c2ac:	89 ca                	mov    edx,ecx
c000c2ae:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c2b2:	c1 e2 04             	shl    edx,0x4
c000c2b5:	83 bc 82 c0 1a 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffde540],0x0
c000c2bd:	74 15                	je     c000c2d4 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000c2bf:	40                   	inc    eax
c000c2c0:	83 f8 04             	cmp    eax,0x4
c000c2c3:	75 f0                	jne    c000c2b5 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c2c5:	c7 44 24 0c a4 e0 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e0a4
c000c2cd:	5b                   	pop    ebx
c000c2ce:	5e                   	pop    esi
c000c2cf:	e9 bb 42 00 00       	jmp    c001058f <KePanic(char const*)>
c000c2d4:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c2d7:	89 1c 85 c0 1a 02 c0 	mov    DWORD PTR [eax*4-0x3ffde540],ebx
c000c2de:	89 34 85 c0 0a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf540],esi
c000c2e5:	5b                   	pop    ebx
c000c2e6:	5e                   	pop    esi
c000c2e7:	c3                   	ret    

c000c2e8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c2e8:	57                   	push   edi
c000c2e9:	8b 15 b8 09 02 c0    	mov    edx,DWORD PTR ds:0xc00209b8
c000c2ef:	56                   	push   esi
c000c2f0:	53                   	push   ebx
c000c2f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c2f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c2f9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c300:	74 5b                	je     c000c35d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c302:	89 c7                	mov    edi,eax
c000c304:	84 c0                	test   al,al
c000c306:	74 24                	je     c000c32c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c308:	83 fe 0f             	cmp    esi,0xf
c000c30b:	0f 8f d9 00 00 00    	jg     c000c3ea <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000c311:	8a 86 c0 f7 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0840]
c000c317:	25 ff 00 00 00       	and    eax,0xff
c000c31c:	66 8b bc 00 60 32 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdcda0]
c000c324:	89 c6                	mov    esi,eax
c000c326:	66 d1 ef             	shr    di,1
c000c329:	83 e7 01             	and    edi,0x1
c000c32c:	83 ec 08             	sub    esp,0x8
c000c32f:	a1 60 48 02 c0       	mov    eax,ds:0xc0024860
c000c334:	31 db                	xor    ebx,ebx
c000c336:	50                   	push   eax
c000c337:	68 b1 e0 01 c0       	push   0xc001e0b1
c000c33c:	e8 eb e5 ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c000c341:	83 c4 10             	add    esp,0x10
c000c344:	a1 60 48 02 c0       	mov    eax,ds:0xc0024860
c000c349:	85 c0                	test   eax,eax
c000c34b:	7f 51                	jg     c000c39e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000c34d:	83 ec 0c             	sub    esp,0xc
c000c350:	68 c8 e0 01 c0       	push   0xc001e0c8
c000c355:	e8 35 42 00 00       	call   c001058f <KePanic(char const*)>
c000c35a:	83 c4 10             	add    esp,0x10
c000c35d:	8d 4e 20             	lea    ecx,[esi+0x20]
c000c360:	31 d2                	xor    edx,edx
c000c362:	89 c8                	mov    eax,ecx
c000c364:	c1 e0 04             	shl    eax,0x4
c000c367:	8b 9c 90 c0 1a 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffde540]
c000c36e:	85 db                	test   ebx,ebx
c000c370:	0f 84 8b 00 00 00    	je     c000c401 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000c376:	42                   	inc    edx
c000c377:	83 fa 04             	cmp    edx,0x4
c000c37a:	75 eb                	jne    c000c367 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c37c:	83 ec 0c             	sub    esp,0xc
c000c37f:	68 1c e1 01 c0       	push   0xc001e11c
c000c384:	e8 06 42 00 00       	call   c001058f <KePanic(char const*)>
c000c389:	83 c4 10             	add    esp,0x10
c000c38c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c391:	5b                   	pop    ebx
c000c392:	5e                   	pop    esi
c000c393:	5f                   	pop    edi
c000c394:	c3                   	ret    
c000c395:	43                   	inc    ebx
c000c396:	39 1d 60 48 02 c0    	cmp    DWORD PTR ds:0xc0024860,ebx
c000c39c:	7e af                	jle    c000c34d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c39e:	83 ec 08             	sub    esp,0x8
c000c3a1:	8b 04 9d 80 48 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb780]
c000c3a8:	56                   	push   esi
c000c3a9:	50                   	push   eax
c000c3aa:	e8 3b f3 00 00       	call   c001b6ea <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	84 c0                	test   al,al
c000c3b4:	74 df                	je     c000c395 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000c3b6:	81 e7 ff 00 00 00    	and    edi,0xff
c000c3bc:	50                   	push   eax
c000c3bd:	8d 46 20             	lea    eax,[esi+0x20]
c000c3c0:	57                   	push   edi
c000c3c1:	25 ff 00 00 00       	and    eax,0xff
c000c3c6:	6a 00                	push   0x0
c000c3c8:	50                   	push   eax
c000c3c9:	89 f0                	mov    eax,esi
c000c3cb:	6a 00                	push   0x0
c000c3cd:	25 ff 00 00 00       	and    eax,0xff
c000c3d2:	6a 00                	push   0x0
c000c3d4:	50                   	push   eax
c000c3d5:	8b 04 9d 80 48 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb780]
c000c3dc:	50                   	push   eax
c000c3dd:	e8 82 f4 00 00       	call   c001b864 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c3e2:	83 c4 20             	add    esp,0x20
c000c3e5:	e9 73 ff ff ff       	jmp    c000c35d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c3ea:	83 ec 0c             	sub    esp,0xc
c000c3ed:	31 ff                	xor    edi,edi
c000c3ef:	68 e4 e0 01 c0       	push   0xc001e0e4
c000c3f4:	e8 96 41 00 00       	call   c001058f <KePanic(char const*)>
c000c3f9:	83 c4 10             	add    esp,0x10
c000c3fc:	e9 2b ff ff ff       	jmp    c000c32c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c401:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c404:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c408:	89 14 85 c0 1a 02 c0 	mov    DWORD PTR [eax*4-0x3ffde540],edx
c000c40f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c413:	5b                   	pop    ebx
c000c414:	89 14 85 c0 0a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf540],edx
c000c41b:	89 f0                	mov    eax,esi
c000c41d:	5e                   	pop    esi
c000c41e:	5f                   	pop    edi
c000c41f:	c3                   	ret    

c000c420 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c420:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c424:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c428:	c1 e0 04             	shl    eax,0x4
c000c42b:	8d 50 10             	lea    edx,[eax+0x10]
c000c42e:	39 88 c0 1a 02 c0    	cmp    DWORD PTR [eax-0x3ffde540],ecx
c000c434:	74 08                	je     c000c43e <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c436:	83 c0 04             	add    eax,0x4
c000c439:	39 d0                	cmp    eax,edx
c000c43b:	75 f1                	jne    c000c42e <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c43d:	c3                   	ret    
c000c43e:	c7 80 c0 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde540],0x0
c000c448:	c7 80 c0 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf540],0x0
c000c452:	eb e2                	jmp    c000c436 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c454 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c454:	53                   	push   ebx
c000c455:	83 ec 08             	sub    esp,0x8
c000c458:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c45c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c461:	74 0e                	je     c000c471 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c463:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000c468:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c46f:	75 37                	jne    c000c4a8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c475:	83 c0 20             	add    eax,0x20
c000c478:	c1 e0 04             	shl    eax,0x4
c000c47b:	8d 50 10             	lea    edx,[eax+0x10]
c000c47e:	39 98 c0 1a 02 c0    	cmp    DWORD PTR [eax-0x3ffde540],ebx
c000c484:	74 0c                	je     c000c492 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c486:	83 c0 04             	add    eax,0x4
c000c489:	39 d0                	cmp    eax,edx
c000c48b:	75 f1                	jne    c000c47e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c48d:	83 c4 08             	add    esp,0x8
c000c490:	5b                   	pop    ebx
c000c491:	c3                   	ret    
c000c492:	c7 80 c0 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde540],0x0
c000c49c:	c7 80 c0 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf540],0x0
c000c4a6:	eb de                	jmp    c000c486 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c4a8:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c4ad:	7f 12                	jg     c000c4c1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c4af:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c4b3:	31 c0                	xor    eax,eax
c000c4b5:	8a 81 c0 f7 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0840]
c000c4bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c4bf:	eb b0                	jmp    c000c471 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c4c1:	83 ec 0c             	sub    esp,0xc
c000c4c4:	68 d5 e0 01 c0       	push   0xc001e0d5
c000c4c9:	e8 c1 40 00 00       	call   c001058f <KePanic(char const*)>
c000c4ce:	83 c4 10             	add    esp,0x10
c000c4d1:	eb 9e                	jmp    c000c471 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c4d3 <setupINTS()>:
c000c4d3:	31 c0                	xor    eax,eax
c000c4d5:	c7 80 c0 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde540],0x0
c000c4df:	c7 80 c0 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf540],0x0
c000c4e9:	c7 80 c4 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde53c],0x0
c000c4f3:	c7 80 c4 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf53c],0x0
c000c4fd:	c7 80 c8 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde538],0x0
c000c507:	c7 80 c8 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf538],0x0
c000c511:	c7 80 cc 1a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde534],0x0
c000c51b:	c7 80 cc 0a 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf534],0x0
c000c525:	83 c0 10             	add    eax,0x10
c000c528:	3d 00 10 00 00       	cmp    eax,0x1000
c000c52d:	75 a6                	jne    c000c4d5 <setupINTS()+0x2>
c000c52f:	c3                   	ret    

c000c530 <convertLegacyIRQNumber(int)>:
c000c530:	83 ec 0c             	sub    esp,0xc
c000c533:	8b 15 b8 09 02 c0    	mov    edx,DWORD PTR ds:0xc00209b8
c000c539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c53d:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c544:	74 0f                	je     c000c555 <convertLegacyIRQNumber(int)+0x25>
c000c546:	83 f8 0f             	cmp    eax,0xf
c000c549:	7f 0e                	jg     c000c559 <convertLegacyIRQNumber(int)+0x29>
c000c54b:	31 c9                	xor    ecx,ecx
c000c54d:	8a 88 c0 f7 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0840]
c000c553:	89 c8                	mov    eax,ecx
c000c555:	83 c4 0c             	add    esp,0xc
c000c558:	c3                   	ret    
c000c559:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c55d:	83 ec 0c             	sub    esp,0xc
c000c560:	68 e4 e0 01 c0       	push   0xc001e0e4
c000c565:	e8 25 40 00 00       	call   c001058f <KePanic(char const*)>
c000c56a:	83 c4 10             	add    esp,0x10
c000c56d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c571:	83 c4 0c             	add    esp,0xc
c000c574:	c3                   	ret    
c000c575:	90                   	nop

c000c576 <startGUI(void*)>:
c000c576:	55                   	push   ebp
c000c577:	89 e5                	mov    ebp,esp
c000c579:	53                   	push   ebx
c000c57a:	83 ec 04             	sub    esp,0x4
c000c57d:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c000c582:	48                   	dec    eax
c000c583:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c000c588:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c000c58d:	85 c0                	test   eax,eax
c000c58f:	75 01                	jne    c000c592 <startGUI(void*)+0x1c>
c000c591:	fb                   	sti    
c000c592:	8b 1d b8 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209b8
c000c598:	83 ec 08             	sub    esp,0x8
c000c59b:	6a 01                	push   0x1
c000c59d:	68 41 e1 01 c0       	push   0xc001e141
c000c5a2:	e8 92 69 00 00       	call   c0012f39 <Thr::loadDLL(char const*, bool)>
c000c5a7:	83 c4 10             	add    esp,0x10
c000c5aa:	83 ec 08             	sub    esp,0x8
c000c5ad:	53                   	push   ebx
c000c5ae:	50                   	push   eax
c000c5af:	e8 b6 6b 00 00       	call   c001316a <Thr::executeDLL(unsigned long, void*)>
c000c5b4:	83 c4 10             	add    esp,0x10
c000c5b7:	8b 1d b8 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209b8
c000c5bd:	83 ec 08             	sub    esp,0x8
c000c5c0:	6a 01                	push   0x1
c000c5c2:	68 5b e1 01 c0       	push   0xc001e15b
c000c5c7:	e8 6d 69 00 00       	call   c0012f39 <Thr::loadDLL(char const*, bool)>
c000c5cc:	83 c4 10             	add    esp,0x10
c000c5cf:	83 ec 08             	sub    esp,0x8
c000c5d2:	53                   	push   ebx
c000c5d3:	50                   	push   eax
c000c5d4:	e8 91 6b 00 00       	call   c001316a <Thr::executeDLL(unsigned long, void*)>
c000c5d9:	83 c4 10             	add    esp,0x10
c000c5dc:	90                   	nop
c000c5dd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c5e0:	c9                   	leave  
c000c5e1:	c3                   	ret    

c000c5e2 <startGUIVESA(void*)>:
c000c5e2:	55                   	push   ebp
c000c5e3:	89 e5                	mov    ebp,esp
c000c5e5:	53                   	push   ebx
c000c5e6:	83 ec 04             	sub    esp,0x4
c000c5e9:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c000c5ee:	48                   	dec    eax
c000c5ef:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c000c5f4:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c000c5f9:	85 c0                	test   eax,eax
c000c5fb:	75 01                	jne    c000c5fe <startGUIVESA(void*)+0x1c>
c000c5fd:	fb                   	sti    
c000c5fe:	8b 1d b8 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209b8
c000c604:	83 ec 08             	sub    esp,0x8
c000c607:	6a 01                	push   0x1
c000c609:	68 79 e1 01 c0       	push   0xc001e179
c000c60e:	e8 26 69 00 00       	call   c0012f39 <Thr::loadDLL(char const*, bool)>
c000c613:	83 c4 10             	add    esp,0x10
c000c616:	83 ec 08             	sub    esp,0x8
c000c619:	53                   	push   ebx
c000c61a:	50                   	push   eax
c000c61b:	e8 4a 6b 00 00       	call   c001316a <Thr::executeDLL(unsigned long, void*)>
c000c620:	83 c4 10             	add    esp,0x10
c000c623:	8b 1d b8 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209b8
c000c629:	83 ec 08             	sub    esp,0x8
c000c62c:	6a 01                	push   0x1
c000c62e:	68 5b e1 01 c0       	push   0xc001e15b
c000c633:	e8 01 69 00 00       	call   c0012f39 <Thr::loadDLL(char const*, bool)>
c000c638:	83 c4 10             	add    esp,0x10
c000c63b:	83 ec 08             	sub    esp,0x8
c000c63e:	53                   	push   ebx
c000c63f:	50                   	push   eax
c000c640:	e8 25 6b 00 00       	call   c001316a <Thr::executeDLL(unsigned long, void*)>
c000c645:	83 c4 10             	add    esp,0x10
c000c648:	90                   	nop
c000c649:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c64c:	c9                   	leave  
c000c64d:	c3                   	ret    

c000c64e <sendKeyToTerminal(unsigned char)>:
c000c64e:	55                   	push   ebp
c000c64f:	89 e5                	mov    ebp,esp
c000c651:	83 ec 28             	sub    esp,0x28
c000c654:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c657:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c65a:	8b 15 04 0a 02 c0    	mov    edx,DWORD PTR ds:0xc0020a04
c000c660:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c663:	25 ff 00 00 00       	and    eax,0xff
c000c668:	83 ec 08             	sub    esp,0x8
c000c66b:	50                   	push   eax
c000c66c:	52                   	push   edx
c000c66d:	e8 ac c8 ff ff       	call   c0008f1e <VgaText::receiveKey(unsigned char)>
c000c672:	83 c4 10             	add    esp,0x10
c000c675:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c679:	0f 85 8f 00 00 00    	jne    c000c70e <sendKeyToTerminal(unsigned char)+0xc0>
c000c67f:	fa                   	cli    
c000c680:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c000c685:	40                   	inc    eax
c000c686:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c000c68b:	a1 64 3e 02 c0       	mov    eax,ds:0xc0023e64
c000c690:	40                   	inc    eax
c000c691:	a3 64 3e 02 c0       	mov    ds:0xc0023e64,eax
c000c696:	a1 c0 2a 02 c0       	mov    eax,ds:0xc0022ac0
c000c69b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c69e:	c7 05 c0 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ac0,0x0
c000c6a8:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c6ac:	74 1f                	je     c000c6cd <sendKeyToTerminal(unsigned char)+0x7f>
c000c6ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c6b1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c6b4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c6b7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c6ba:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c6bd:	83 ec 0c             	sub    esp,0xc
c000c6c0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c6c3:	e8 28 77 00 00       	call   c0013df0 <unblockTask(ThreadControlBlock*)>
c000c6c8:	83 c4 10             	add    esp,0x10
c000c6cb:	eb db                	jmp    c000c6a8 <sendKeyToTerminal(unsigned char)+0x5a>
c000c6cd:	a1 64 3e 02 c0       	mov    eax,ds:0xc0023e64
c000c6d2:	48                   	dec    eax
c000c6d3:	a3 64 3e 02 c0       	mov    ds:0xc0023e64,eax
c000c6d8:	a1 64 3e 02 c0       	mov    eax,ds:0xc0023e64
c000c6dd:	85 c0                	test   eax,eax
c000c6df:	75 18                	jne    c000c6f9 <sendKeyToTerminal(unsigned char)+0xab>
c000c6e1:	a1 60 3e 02 c0       	mov    eax,ds:0xc0023e60
c000c6e6:	85 c0                	test   eax,eax
c000c6e8:	74 0f                	je     c000c6f9 <sendKeyToTerminal(unsigned char)+0xab>
c000c6ea:	c7 05 60 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e60,0x0
c000c6f4:	e8 33 72 00 00       	call   c001392c <schedule()>
c000c6f9:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c000c6fe:	48                   	dec    eax
c000c6ff:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c000c704:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c000c709:	85 c0                	test   eax,eax
c000c70b:	75 01                	jne    c000c70e <sendKeyToTerminal(unsigned char)+0xc0>
c000c70d:	fb                   	sti    
c000c70e:	90                   	nop
c000c70f:	c9                   	leave  
c000c710:	c3                   	ret    

c000c711 <sendKeyboardToken(KeyboardToken)>:
c000c711:	55                   	push   ebp
c000c712:	89 e5                	mov    ebp,esp
c000c714:	83 ec 18             	sub    esp,0x18
c000c717:	e8 c3 3e 00 00       	call   c00105df <Krnl::userIOReceived()>
c000c71c:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c71f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c722:	25 ff ff 00 00       	and    eax,0xffff
c000c727:	83 f2 01             	xor    edx,0x1
c000c72a:	88 90 e0 2a 02 c0    	mov    BYTE PTR [eax-0x3ffdd520],dl
c000c730:	a1 c8 2a 02 c0       	mov    eax,ds:0xc0022ac8
c000c735:	85 c0                	test   eax,eax
c000c737:	74 24                	je     c000c75d <sendKeyboardToken(KeyboardToken)+0x4c>
c000c739:	8b 0d c8 2a 02 c0    	mov    ecx,DWORD PTR ds:0xc0022ac8
c000c73f:	83 ec 04             	sub    esp,0x4
c000c742:	68 e0 2a 02 c0       	push   0xc0022ae0
c000c747:	83 ec 08             	sub    esp,0x8
c000c74a:	89 e2                	mov    edx,esp
c000c74c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c74f:	89 02                	mov    DWORD PTR [edx],eax
c000c751:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c754:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c758:	ff d1                	call   ecx
c000c75a:	83 c4 10             	add    esp,0x10
c000c75d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c761:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c764:	a0 e8 2e 02 c0       	mov    al,ds:0xc0022ee8
c000c769:	38 c2                	cmp    dl,al
c000c76b:	74 1e                	je     c000c78b <sendKeyboardToken(KeyboardToken)+0x7a>
c000c76d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c770:	a2 e8 2e 02 c0       	mov    ds:0xc0022ee8,al
c000c775:	a0 e8 2e 02 c0       	mov    al,ds:0xc0022ee8
c000c77a:	25 ff 00 00 00       	and    eax,0xff
c000c77f:	83 ec 0c             	sub    esp,0xc
c000c782:	50                   	push   eax
c000c783:	e8 e8 be ff ff       	call   c0008670 <setTerminalScrollLock(bool)>
c000c788:	83 c4 10             	add    esp,0x10
c000c78b:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c78e:	84 c0                	test   al,al
c000c790:	0f 84 ae 00 00 00    	je     c000c844 <sendKeyboardToken(KeyboardToken)+0x133>
c000c796:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c799:	66 3d 10 03          	cmp    ax,0x310
c000c79d:	75 06                	jne    c000c7a5 <sendKeyboardToken(KeyboardToken)+0x94>
c000c79f:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c7a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7a8:	66 3d 11 03          	cmp    ax,0x311
c000c7ac:	75 06                	jne    c000c7b4 <sendKeyboardToken(KeyboardToken)+0xa3>
c000c7ae:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c7b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7b7:	66 3d 12 03          	cmp    ax,0x312
c000c7bb:	75 06                	jne    c000c7c3 <sendKeyboardToken(KeyboardToken)+0xb2>
c000c7bd:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c7c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7c6:	66 3d 13 03          	cmp    ax,0x313
c000c7ca:	75 06                	jne    c000c7d2 <sendKeyboardToken(KeyboardToken)+0xc1>
c000c7cc:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c7d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7d5:	66 3d 14 03          	cmp    ax,0x314
c000c7d9:	75 06                	jne    c000c7e1 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c7db:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c7e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7e4:	66 3d 15 03          	cmp    ax,0x315
c000c7e8:	75 06                	jne    c000c7f0 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c7ea:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c7f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7f3:	66 3d 16 03          	cmp    ax,0x316
c000c7f7:	75 06                	jne    c000c7ff <sendKeyboardToken(KeyboardToken)+0xee>
c000c7f9:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c7ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c802:	66 3d 17 03          	cmp    ax,0x317
c000c806:	75 06                	jne    c000c80e <sendKeyboardToken(KeyboardToken)+0xfd>
c000c808:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c80e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c811:	66 3d 18 03          	cmp    ax,0x318
c000c815:	75 06                	jne    c000c81d <sendKeyboardToken(KeyboardToken)+0x10c>
c000c817:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c81d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c820:	66 3d 19 03          	cmp    ax,0x319
c000c824:	75 06                	jne    c000c82c <sendKeyboardToken(KeyboardToken)+0x11b>
c000c826:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c82c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c82f:	66 3d 1a 03          	cmp    ax,0x31a
c000c833:	0f 85 c9 00 00 00    	jne    c000c902 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c839:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c83f:	e9 be 00 00 00       	jmp    c000c902 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c844:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c847:	66 3d 10 03          	cmp    ax,0x310
c000c84b:	75 0a                	jne    c000c857 <sendKeyboardToken(KeyboardToken)+0x146>
c000c84d:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c853:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c857:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c85a:	66 3d 11 03          	cmp    ax,0x311
c000c85e:	75 0a                	jne    c000c86a <sendKeyboardToken(KeyboardToken)+0x159>
c000c860:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c866:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c86a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c86d:	66 3d 12 03          	cmp    ax,0x312
c000c871:	75 0a                	jne    c000c87d <sendKeyboardToken(KeyboardToken)+0x16c>
c000c873:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c879:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c87d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c880:	66 3d 13 03          	cmp    ax,0x313
c000c884:	75 0a                	jne    c000c890 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c886:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c88c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c893:	66 3d 14 03          	cmp    ax,0x314
c000c897:	75 0a                	jne    c000c8a3 <sendKeyboardToken(KeyboardToken)+0x192>
c000c899:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c89f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c8a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8a6:	66 3d 15 03          	cmp    ax,0x315
c000c8aa:	75 0a                	jne    c000c8b6 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c8ac:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c8b2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c8b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8b9:	66 3d 16 03          	cmp    ax,0x316
c000c8bd:	75 0a                	jne    c000c8c9 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c8bf:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c8c5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c8c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8cc:	66 3d 17 03          	cmp    ax,0x317
c000c8d0:	75 0a                	jne    c000c8dc <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c8d2:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c8d8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c8dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8df:	66 3d 18 03          	cmp    ax,0x318
c000c8e3:	75 0a                	jne    c000c8ef <sendKeyboardToken(KeyboardToken)+0x1de>
c000c8e5:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c8eb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c8ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8f2:	66 3d 19 03          	cmp    ax,0x319
c000c8f6:	75 0a                	jne    c000c902 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c8f8:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c8fe:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c902:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c905:	66 3d 00 02          	cmp    ax,0x200
c000c909:	75 2c                	jne    c000c937 <sendKeyboardToken(KeyboardToken)+0x226>
c000c90b:	a0 e0 2e 02 c0       	mov    al,ds:0xc0022ee0
c000c910:	83 f0 01             	xor    eax,0x1
c000c913:	84 c0                	test   al,al
c000c915:	74 20                	je     c000c937 <sendKeyboardToken(KeyboardToken)+0x226>
c000c917:	a1 90 3e 02 c0       	mov    eax,ds:0xc0023e90
c000c91c:	6a 01                	push   0x1
c000c91e:	6a 00                	push   0x0
c000c920:	68 76 c5 00 c0       	push   0xc000c576
c000c925:	50                   	push   eax
c000c926:	e8 e1 6d 00 00       	call   c001370c <Process::createThread(void (*)(void*), void*, int)>
c000c92b:	83 c4 10             	add    esp,0x10
c000c92e:	c6 05 e0 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022ee0,0x1
c000c935:	eb 33                	jmp    c000c96a <sendKeyboardToken(KeyboardToken)+0x259>
c000c937:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c93a:	66 3d 01 02          	cmp    ax,0x201
c000c93e:	75 2a                	jne    c000c96a <sendKeyboardToken(KeyboardToken)+0x259>
c000c940:	a0 e0 2e 02 c0       	mov    al,ds:0xc0022ee0
c000c945:	83 f0 01             	xor    eax,0x1
c000c948:	84 c0                	test   al,al
c000c94a:	74 1e                	je     c000c96a <sendKeyboardToken(KeyboardToken)+0x259>
c000c94c:	a1 90 3e 02 c0       	mov    eax,ds:0xc0023e90
c000c951:	6a 01                	push   0x1
c000c953:	6a 00                	push   0x0
c000c955:	68 e2 c5 00 c0       	push   0xc000c5e2
c000c95a:	50                   	push   eax
c000c95b:	e8 ac 6d 00 00       	call   c001370c <Process::createThread(void (*)(void*), void*, int)>
c000c960:	83 c4 10             	add    esp,0x10
c000c963:	c6 05 e0 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022ee0,0x1
c000c96a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96d:	66 3d 1d 03          	cmp    ax,0x31d
c000c971:	75 06                	jne    c000c979 <sendKeyboardToken(KeyboardToken)+0x268>
c000c973:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c979:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c97c:	66 3d 1c 03          	cmp    ax,0x31c
c000c980:	75 06                	jne    c000c988 <sendKeyboardToken(KeyboardToken)+0x277>
c000c982:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c988:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c98b:	66 3d 1b 03          	cmp    ax,0x31b
c000c98f:	75 06                	jne    c000c997 <sendKeyboardToken(KeyboardToken)+0x286>
c000c991:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c997:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c99a:	66 3d 1e 03          	cmp    ax,0x31e
c000c99e:	75 06                	jne    c000c9a6 <sendKeyboardToken(KeyboardToken)+0x295>
c000c9a0:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c9a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a9:	66 3d 1f 03          	cmp    ax,0x31f
c000c9ad:	75 06                	jne    c000c9b5 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c9af:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c9b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9b8:	66 3d 1a 03          	cmp    ax,0x31a
c000c9bc:	75 06                	jne    c000c9c4 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c9be:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c9c4:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c9c8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c9cb:	83 f0 01             	xor    eax,0x1
c000c9ce:	84 c0                	test   al,al
c000c9d0:	74 7b                	je     c000ca4d <sendKeyboardToken(KeyboardToken)+0x33c>
c000c9d2:	a0 e1 2b 02 c0       	mov    al,ds:0xc0022be1
c000c9d7:	84 c0                	test   al,al
c000c9d9:	74 43                	je     c000ca1e <sendKeyboardToken(KeyboardToken)+0x30d>
c000c9db:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c9df:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c9e3:	74 2d                	je     c000ca12 <sendKeyboardToken(KeyboardToken)+0x301>
c000c9e5:	8b 15 e4 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022ee4
c000c9eb:	89 d0                	mov    eax,edx
c000c9ed:	c1 e0 02             	shl    eax,0x2
c000c9f0:	01 d0                	add    eax,edx
c000c9f2:	01 c0                	add    eax,eax
c000c9f4:	a3 e4 2e 02 c0       	mov    ds:0xc0022ee4,eax
c000c9f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9fc:	25 ff ff 00 00       	and    eax,0xffff
c000ca01:	8d 50 d0             	lea    edx,[eax-0x30]
c000ca04:	a1 e4 2e 02 c0       	mov    eax,ds:0xc0022ee4
c000ca09:	01 d0                	add    eax,edx
c000ca0b:	a3 e4 2e 02 c0       	mov    ds:0xc0022ee4,eax
c000ca10:	eb 71                	jmp    c000ca83 <sendKeyboardToken(KeyboardToken)+0x372>
c000ca12:	c7 05 e4 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ee4,0x0
c000ca1c:	eb 65                	jmp    c000ca83 <sendKeyboardToken(KeyboardToken)+0x372>
c000ca1e:	a1 e4 2e 02 c0       	mov    eax,ds:0xc0022ee4
c000ca23:	85 c0                	test   eax,eax
c000ca25:	74 1a                	je     c000ca41 <sendKeyboardToken(KeyboardToken)+0x330>
c000ca27:	a1 e4 2e 02 c0       	mov    eax,ds:0xc0022ee4
c000ca2c:	25 ff 00 00 00       	and    eax,0xff
c000ca31:	83 ec 0c             	sub    esp,0xc
c000ca34:	50                   	push   eax
c000ca35:	e8 14 fc ff ff       	call   c000c64e <sendKeyToTerminal(unsigned char)>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ca41:	c7 05 e4 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ee4,0x0
c000ca4b:	eb 36                	jmp    c000ca83 <sendKeyboardToken(KeyboardToken)+0x372>
c000ca4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca50:	66 3d 01 01          	cmp    ax,0x101
c000ca54:	75 2d                	jne    c000ca83 <sendKeyboardToken(KeyboardToken)+0x372>
c000ca56:	a1 e4 2e 02 c0       	mov    eax,ds:0xc0022ee4
c000ca5b:	85 c0                	test   eax,eax
c000ca5d:	74 1a                	je     c000ca79 <sendKeyboardToken(KeyboardToken)+0x368>
c000ca5f:	a1 e4 2e 02 c0       	mov    eax,ds:0xc0022ee4
c000ca64:	25 ff 00 00 00       	and    eax,0xff
c000ca69:	83 ec 0c             	sub    esp,0xc
c000ca6c:	50                   	push   eax
c000ca6d:	e8 dc fb ff ff       	call   c000c64e <sendKeyToTerminal(unsigned char)>
c000ca72:	83 c4 10             	add    esp,0x10
c000ca75:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ca79:	c7 05 e4 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ee4,0x0
c000ca83:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ca86:	83 f0 01             	xor    eax,0x1
c000ca89:	84 c0                	test   al,al
c000ca8b:	74 4e                	je     c000cadb <sendKeyboardToken(KeyboardToken)+0x3ca>
c000ca8d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ca90:	83 f0 01             	xor    eax,0x1
c000ca93:	84 c0                	test   al,al
c000ca95:	74 44                	je     c000cadb <sendKeyboardToken(KeyboardToken)+0x3ca>
c000ca97:	a0 e0 2b 02 c0       	mov    al,ds:0xc0022be0
c000ca9c:	83 f0 01             	xor    eax,0x1
c000ca9f:	84 c0                	test   al,al
c000caa1:	74 38                	je     c000cadb <sendKeyboardToken(KeyboardToken)+0x3ca>
c000caa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caa6:	66 83 f8 1f          	cmp    ax,0x1f
c000caaa:	76 09                	jbe    c000cab5 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000caac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caaf:	66 83 f8 7e          	cmp    ax,0x7e
c000cab3:	76 12                	jbe    c000cac7 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000cab5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cab8:	66 83 f8 0a          	cmp    ax,0xa
c000cabc:	74 09                	je     c000cac7 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000cabe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cac1:	66 83 f8 08          	cmp    ax,0x8
c000cac5:	75 14                	jne    c000cadb <sendKeyboardToken(KeyboardToken)+0x3ca>
c000cac7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caca:	25 ff 00 00 00       	and    eax,0xff
c000cacf:	83 ec 0c             	sub    esp,0xc
c000cad2:	50                   	push   eax
c000cad3:	e8 76 fb ff ff       	call   c000c64e <sendKeyToTerminal(unsigned char)>
c000cad8:	83 c4 10             	add    esp,0x10
c000cadb:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cade:	83 f0 01             	xor    eax,0x1
c000cae1:	84 c0                	test   al,al
c000cae3:	74 51                	je     c000cb36 <sendKeyboardToken(KeyboardToken)+0x425>
c000cae5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cae8:	83 f0 01             	xor    eax,0x1
c000caeb:	84 c0                	test   al,al
c000caed:	74 47                	je     c000cb36 <sendKeyboardToken(KeyboardToken)+0x425>
c000caef:	a0 e0 2b 02 c0       	mov    al,ds:0xc0022be0
c000caf4:	84 c0                	test   al,al
c000caf6:	74 3e                	je     c000cb36 <sendKeyboardToken(KeyboardToken)+0x425>
c000caf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cafb:	66 83 f8 3f          	cmp    ax,0x3f
c000caff:	76 35                	jbe    c000cb36 <sendKeyboardToken(KeyboardToken)+0x425>
c000cb01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb04:	66 83 f8 7f          	cmp    ax,0x7f
c000cb08:	77 2c                	ja     c000cb36 <sendKeyboardToken(KeyboardToken)+0x425>
c000cb0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb0d:	88 c2                	mov    dl,al
c000cb0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb12:	66 83 f8 5f          	cmp    ax,0x5f
c000cb16:	76 04                	jbe    c000cb1c <sendKeyboardToken(KeyboardToken)+0x40b>
c000cb18:	b0 20                	mov    al,0x20
c000cb1a:	eb 02                	jmp    c000cb1e <sendKeyboardToken(KeyboardToken)+0x40d>
c000cb1c:	b0 00                	mov    al,0x0
c000cb1e:	29 c2                	sub    edx,eax
c000cb20:	88 d0                	mov    al,dl
c000cb22:	83 e8 40             	sub    eax,0x40
c000cb25:	25 ff 00 00 00       	and    eax,0xff
c000cb2a:	83 ec 0c             	sub    esp,0xc
c000cb2d:	50                   	push   eax
c000cb2e:	e8 1b fb ff ff       	call   c000c64e <sendKeyToTerminal(unsigned char)>
c000cb33:	83 c4 10             	add    esp,0x10
c000cb36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb39:	66 3d 00 03          	cmp    ax,0x300
c000cb3d:	75 0f                	jne    c000cb4e <sendKeyboardToken(KeyboardToken)+0x43d>
c000cb3f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cb42:	83 f0 01             	xor    eax,0x1
c000cb45:	84 c0                	test   al,al
c000cb47:	74 05                	je     c000cb4e <sendKeyboardToken(KeyboardToken)+0x43d>
c000cb49:	e8 23 bb ff ff       	call   c0008671 <doTerminalCycle()>
c000cb4e:	90                   	nop
c000cb4f:	c9                   	leave  
c000cb50:	c3                   	ret    

c000cb51 <clearInternalKeybuffer(VgaText*)>:
c000cb51:	55                   	push   ebp
c000cb52:	89 e5                	mov    ebp,esp
c000cb54:	83 ec 08             	sub    esp,0x8
c000cb57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb5a:	05 b2 00 00 00       	add    eax,0xb2
c000cb5f:	83 ec 0c             	sub    esp,0xc
c000cb62:	50                   	push   eax
c000cb63:	e8 d8 39 ff ff       	call   c0000540 <strlen>
c000cb68:	83 c4 10             	add    esp,0x10
c000cb6b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cb6e:	81 c2 b2 00 00 00    	add    edx,0xb2
c000cb74:	83 ec 04             	sub    esp,0x4
c000cb77:	50                   	push   eax
c000cb78:	6a 00                	push   0x0
c000cb7a:	52                   	push   edx
c000cb7b:	e8 50 39 ff ff       	call   c00004d0 <memset>
c000cb80:	83 c4 10             	add    esp,0x10
c000cb83:	90                   	nop
c000cb84:	c9                   	leave  
c000cb85:	c3                   	ret    

c000cb86 <readKeyboard(VgaText*, char*, unsigned long)>:
c000cb86:	55                   	push   ebp
c000cb87:	89 e5                	mov    ebp,esp
c000cb89:	83 ec 18             	sub    esp,0x18
c000cb8c:	a1 c8 2a 02 c0       	mov    eax,ds:0xc0022ac8
c000cb91:	85 c0                	test   eax,eax
c000cb93:	74 2a                	je     c000cbbf <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000cb95:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000cb9b:	8b 0d c8 2a 02 c0    	mov    ecx,DWORD PTR ds:0xc0022ac8
c000cba1:	83 ec 04             	sub    esp,0x4
c000cba4:	68 e0 2a 02 c0       	push   0xc0022ae0
c000cba9:	83 ec 08             	sub    esp,0x8
c000cbac:	89 e2                	mov    edx,esp
c000cbae:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000cbb1:	89 02                	mov    DWORD PTR [edx],eax
c000cbb3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cbb6:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000cbba:	ff d1                	call   ecx
c000cbbc:	83 c4 10             	add    esp,0x10
c000cbbf:	fb                   	sti    
c000cbc0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000cbc7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000cbcb:	0f 84 a1 00 00 00    	je     c000cc72 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000cbd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbd4:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000cbda:	84 c0                	test   al,al
c000cbdc:	75 28                	jne    c000cc06 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000cbde:	fa                   	cli    
c000cbdf:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c000cbe4:	40                   	inc    eax
c000cbe5:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c000cbea:	e8 3d 6d 00 00       	call   c001392c <schedule()>
c000cbef:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c000cbf4:	48                   	dec    eax
c000cbf5:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c000cbfa:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c000cbff:	85 c0                	test   eax,eax
c000cc01:	75 ce                	jne    c000cbd1 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cc03:	fb                   	sti    
c000cc04:	eb cb                	jmp    c000cbd1 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cc06:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cc09:	8d 50 01             	lea    edx,[eax+0x1]
c000cc0c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cc0f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cc12:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000cc18:	88 10                	mov    BYTE PTR [eax],dl
c000cc1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc1d:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000cc23:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000cc26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc29:	05 b2 00 00 00       	add    eax,0xb2
c000cc2e:	83 ec 0c             	sub    esp,0xc
c000cc31:	50                   	push   eax
c000cc32:	e8 09 39 ff ff       	call   c0000540 <strlen>
c000cc37:	83 c4 10             	add    esp,0x10
c000cc3a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cc3d:	81 c2 b2 00 00 00    	add    edx,0xb2
c000cc43:	8d 4a 01             	lea    ecx,[edx+0x1]
c000cc46:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cc49:	81 c2 b2 00 00 00    	add    edx,0xb2
c000cc4f:	83 ec 04             	sub    esp,0x4
c000cc52:	50                   	push   eax
c000cc53:	51                   	push   ecx
c000cc54:	52                   	push   edx
c000cc55:	e8 86 37 ff ff       	call   c00003e0 <memmove>
c000cc5a:	83 c4 10             	add    esp,0x10
c000cc5d:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000cc60:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000cc63:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000cc67:	0f 85 5a ff ff ff    	jne    c000cbc7 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000cc6d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cc70:	eb 03                	jmp    c000cc75 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000cc72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cc75:	c9                   	leave  
c000cc76:	c3                   	ret    
c000cc77:	90                   	nop

c000cc78 <Keyboard::Keyboard(char const*)>:
c000cc78:	83 ec 0c             	sub    esp,0xc
c000cc7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc7f:	83 ec 08             	sub    esp,0x8
c000cc82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc86:	50                   	push   eax
c000cc87:	e8 78 f2 ff ff       	call   c000bf04 <Device::Device(char const*)>
c000cc8c:	83 c4 10             	add    esp,0x10
c000cc8f:	ba 9c e1 01 c0       	mov    edx,0xc001e19c
c000cc94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc98:	89 10                	mov    DWORD PTR [eax],edx
c000cc9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc9e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000cca8:	c6 05 c4 2a 02 c0 01 	mov    BYTE PTR ds:0xc0022ac4,0x1
c000ccaf:	90                   	nop
c000ccb0:	83 c4 0c             	add    esp,0xc
c000ccb3:	c3                   	ret    

c000ccb4 <Keyboard::~Keyboard()>:
c000ccb4:	83 ec 0c             	sub    esp,0xc
c000ccb7:	ba 9c e1 01 c0       	mov    edx,0xc001e19c
c000ccbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccc0:	89 10                	mov    DWORD PTR [eax],edx
c000ccc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccc6:	83 ec 0c             	sub    esp,0xc
c000ccc9:	50                   	push   eax
c000ccca:	e8 9f ef ff ff       	call   c000bc6e <Device::~Device()>
c000cccf:	83 c4 10             	add    esp,0x10
c000ccd2:	90                   	nop
c000ccd3:	83 c4 0c             	add    esp,0xc
c000ccd6:	c3                   	ret    
c000ccd7:	90                   	nop

c000ccd8 <Keyboard::~Keyboard()>:
c000ccd8:	83 ec 0c             	sub    esp,0xc
c000ccdb:	83 ec 0c             	sub    esp,0xc
c000ccde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cce2:	e8 cd ff ff ff       	call   c000ccb4 <Keyboard::~Keyboard()>
c000cce7:	83 c4 10             	add    esp,0x10
c000ccea:	83 ec 08             	sub    esp,0x8
c000cced:	68 5c 01 00 00       	push   0x15c
c000ccf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccf6:	e8 3b db ff ff       	call   c000a836 <operator delete(void*, unsigned long)>
c000ccfb:	83 c4 10             	add    esp,0x10
c000ccfe:	83 c4 0c             	add    esp,0xc
c000cd01:	c3                   	ret    

c000cd02 <LogicalDisk::close(int, int, void*)>:
c000cd02:	83 c8 ff             	or     eax,0xffffffff
c000cd05:	c3                   	ret    

c000cd06 <LogicalDisk::~LogicalDisk()>:
c000cd06:	83 ec 0c             	sub    esp,0xc
c000cd09:	ba 14 e2 01 c0       	mov    edx,0xc001e214
c000cd0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd12:	89 10                	mov    DWORD PTR [eax],edx
c000cd14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd18:	83 ec 0c             	sub    esp,0xc
c000cd1b:	50                   	push   eax
c000cd1c:	e8 4d ef ff ff       	call   c000bc6e <Device::~Device()>
c000cd21:	83 c4 10             	add    esp,0x10
c000cd24:	90                   	nop
c000cd25:	83 c4 0c             	add    esp,0xc
c000cd28:	c3                   	ret    
c000cd29:	90                   	nop

c000cd2a <LogicalDisk::~LogicalDisk()>:
c000cd2a:	83 ec 0c             	sub    esp,0xc
c000cd2d:	83 ec 0c             	sub    esp,0xc
c000cd30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd34:	e8 cd ff ff ff       	call   c000cd06 <LogicalDisk::~LogicalDisk()>
c000cd39:	83 c4 10             	add    esp,0x10
c000cd3c:	83 ec 08             	sub    esp,0x8
c000cd3f:	68 74 01 00 00       	push   0x174
c000cd44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd48:	e8 e9 da ff ff       	call   c000a836 <operator delete(void*, unsigned long)>
c000cd4d:	83 c4 10             	add    esp,0x10
c000cd50:	83 c4 0c             	add    esp,0xc
c000cd53:	c3                   	ret    

c000cd54 <LogicalDisk::open(int, int, void*)>:
c000cd54:	83 ec 18             	sub    esp,0x18
c000cd57:	68 c8 e1 01 c0       	push   0xc001e1c8
c000cd5c:	e8 2e 38 00 00       	call   c001058f <KePanic(char const*)>
c000cd61:	83 c8 ff             	or     eax,0xffffffff
c000cd64:	83 c4 1c             	add    esp,0x1c
c000cd67:	c3                   	ret    

c000cd68 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000cd68:	53                   	push   ebx
c000cd69:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cd6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cd71:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cd75:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000cd7b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000cd81:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000cd87:	77 10                	ja     c000cd99 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000cd89:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000cd8f:	89 d3                	mov    ebx,edx
c000cd91:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000cd97:	72 05                	jb     c000cd9e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000cd99:	83 c8 ff             	or     eax,0xffffffff
c000cd9c:	89 c2                	mov    edx,eax
c000cd9e:	5b                   	pop    ebx
c000cd9f:	c3                   	ret    

c000cda0 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cda0:	56                   	push   esi
c000cda1:	83 c8 ff             	or     eax,0xffffffff
c000cda4:	53                   	push   ebx
c000cda5:	89 c2                	mov    edx,eax
c000cda7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cdab:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cdaf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cdb3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cdb9:	77 27                	ja     c000cde2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cdbb:	89 d8                	mov    eax,ebx
c000cdbd:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cdc3:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cdc9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cdce:	89 c2                	mov    edx,eax
c000cdd0:	73 10                	jae    c000cde2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cdd2:	89 c8                	mov    eax,ecx
c000cdd4:	89 da                	mov    edx,ebx
c000cdd6:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cddc:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000cde2:	5b                   	pop    ebx
c000cde3:	5e                   	pop    esi
c000cde4:	c3                   	ret    
c000cde5:	90                   	nop

c000cde6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cde6:	83 ec 1c             	sub    esp,0x1c
c000cde9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cded:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cdf1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cdf5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cdf9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cdfd:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce00:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce04:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ce08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce0c:	83 ec 08             	sub    esp,0x8
c000ce0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce13:	50                   	push   eax
c000ce14:	e8 eb f0 ff ff       	call   c000bf04 <Device::Device(char const*)>
c000ce19:	83 c4 10             	add    esp,0x10
c000ce1c:	ba 14 e2 01 c0       	mov    edx,0xc001e214
c000ce21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce25:	89 10                	mov    DWORD PTR [eax],edx
c000ce27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce2b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ce32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce36:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ce3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce41:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000ce4b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ce4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ce53:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ce57:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000ce5d:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000ce63:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ce67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ce6a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ce6e:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000ce74:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000ce7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce7e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ce82:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000ce88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce8c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000ce96:	90                   	nop
c000ce97:	83 c4 1c             	add    esp,0x1c
c000ce9a:	c3                   	ret    
c000ce9b:	90                   	nop

c000ce9c <LogicalDisk::assignDriveLetter()>:
c000ce9c:	55                   	push   ebp
c000ce9d:	57                   	push   edi
c000ce9e:	56                   	push   esi
c000ce9f:	53                   	push   ebx
c000cea0:	83 ec 14             	sub    esp,0x14
c000cea3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cea7:	8b 3d 00 2f 02 c0    	mov    edi,DWORD PTR ds:0xc0022f00
c000cead:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000ceb3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000ceb7:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000cebd:	8b 3d 04 2f 02 c0    	mov    edi,DWORD PTR ds:0xc0022f04
c000cec3:	3c 01                	cmp    al,0x1
c000cec5:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000cec9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000cecd:	19 c0                	sbb    eax,eax
c000cecf:	83 e0 02             	and    eax,0x2
c000ced2:	83 c0 41             	add    eax,0x41
c000ced5:	0f be e8             	movsx  ebp,al
c000ced8:	3c 43                	cmp    al,0x43
c000ceda:	75 10                	jne    c000ceec <LogicalDisk::assignDriveLetter()+0x50>
c000cedc:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cee3:	75 5d                	jne    c000cf42 <LogicalDisk::assignDriveLetter()+0xa6>
c000cee5:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000ceea:	75 56                	jne    c000cf42 <LogicalDisk::assignDriveLetter()+0xa6>
c000ceec:	8d 75 bf             	lea    esi,[ebp-0x41]
c000ceef:	ba 01 00 00 00       	mov    edx,0x1
c000cef4:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cef8:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cefc:	d3 e2                	shl    edx,cl
c000cefe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cf02:	89 d7                	mov    edi,edx
c000cf04:	89 d6                	mov    esi,edx
c000cf06:	c1 ff 1f             	sar    edi,0x1f
c000cf09:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cf0d:	21 f9                	and    ecx,edi
c000cf0f:	09 d1                	or     ecx,edx
c000cf11:	75 2f                	jne    c000cf42 <LogicalDisk::assignDriveLetter()+0xa6>
c000cf13:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cf17:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf1b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cf21:	09 f2                	or     edx,esi
c000cf23:	89 15 00 2f 02 c0    	mov    DWORD PTR ds:0xc0022f00,edx
c000cf29:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cf2d:	09 fa                	or     edx,edi
c000cf2f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cf33:	89 15 04 2f 02 c0    	mov    DWORD PTR ds:0xc0022f04,edx
c000cf39:	89 1c bd 20 2f 02 c0 	mov    DWORD PTR [edi*4-0x3ffdd0e0],ebx
c000cf40:	eb 08                	jmp    c000cf4a <LogicalDisk::assignDriveLetter()+0xae>
c000cf42:	45                   	inc    ebp
c000cf43:	40                   	inc    eax
c000cf44:	3c 5b                	cmp    al,0x5b
c000cf46:	75 90                	jne    c000ced8 <LogicalDisk::assignDriveLetter()+0x3c>
c000cf48:	31 c0                	xor    eax,eax
c000cf4a:	83 c4 14             	add    esp,0x14
c000cf4d:	5b                   	pop    ebx
c000cf4e:	5e                   	pop    esi
c000cf4f:	5f                   	pop    edi
c000cf50:	5d                   	pop    ebp
c000cf51:	c3                   	ret    

c000cf52 <LogicalDisk::mount()>:
c000cf52:	56                   	push   esi
c000cf53:	53                   	push   ebx
c000cf54:	53                   	push   ebx
c000cf55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cf59:	8b 1d b4 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ab4
c000cf5f:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000cf69:	85 db                	test   ebx,ebx
c000cf6b:	74 27                	je     c000cf94 <LogicalDisk::mount()+0x42>
c000cf6d:	51                   	push   ecx
c000cf6e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cf75:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cf77:	83 e8 41             	sub    eax,0x41
c000cf7a:	50                   	push   eax
c000cf7b:	56                   	push   esi
c000cf7c:	53                   	push   ebx
c000cf7d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cf80:	83 c4 10             	add    esp,0x10
c000cf83:	84 c0                	test   al,al
c000cf85:	74 08                	je     c000cf8f <LogicalDisk::mount()+0x3d>
c000cf87:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000cf8d:	eb 07                	jmp    c000cf96 <LogicalDisk::mount()+0x44>
c000cf8f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cf92:	eb d5                	jmp    c000cf69 <LogicalDisk::mount()+0x17>
c000cf94:	31 c0                	xor    eax,eax
c000cf96:	5a                   	pop    edx
c000cf97:	5b                   	pop    ebx
c000cf98:	5e                   	pop    esi
c000cf99:	c3                   	ret    

c000cf9a <LogicalDisk::unmount()>:
c000cf9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf9e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cfa8:	c3                   	ret    
c000cfa9:	90                   	nop

c000cfaa <LogicalDisk::eject()>:
c000cfaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cfae:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cfb4:	8b 10                	mov    edx,DWORD PTR [eax]
c000cfb6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cfba:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cfbd:	90                   	nop

c000cfbe <LogicalDisk::unassignDriveLetter()>:
c000cfbe:	57                   	push   edi
c000cfbf:	56                   	push   esi
c000cfc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cfc4:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cfcb:	84 c9                	test   cl,cl
c000cfcd:	75 0f                	jne    c000cfde <LogicalDisk::unassignDriveLetter()+0x20>
c000cfcf:	c7 44 24 0c ec e1 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e1ec
c000cfd7:	5e                   	pop    esi
c000cfd8:	5f                   	pop    edi
c000cfd9:	e9 b1 35 00 00       	jmp    c001058f <KePanic(char const*)>
c000cfde:	83 e9 41             	sub    ecx,0x41
c000cfe1:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cfe8:	b8 01 00 00 00       	mov    eax,0x1
c000cfed:	c7 04 8d 20 2f 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdd0e0],0x0
c000cff8:	d3 e0                	shl    eax,cl
c000cffa:	89 c7                	mov    edi,eax
c000cffc:	f7 d0                	not    eax
c000cffe:	c1 ff 1f             	sar    edi,0x1f
c000d001:	21 05 00 2f 02 c0    	and    DWORD PTR ds:0xc0022f00,eax
c000d007:	89 fe                	mov    esi,edi
c000d009:	f7 d6                	not    esi
c000d00b:	21 35 04 2f 02 c0    	and    DWORD PTR ds:0xc0022f04,esi
c000d011:	5e                   	pop    esi
c000d012:	5f                   	pop    edi
c000d013:	c3                   	ret    

c000d014 <LogicalDisk::read(unsigned long long, int, void*)>:
c000d014:	57                   	push   edi
c000d015:	56                   	push   esi
c000d016:	53                   	push   ebx
c000d017:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d01b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d01f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d023:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d027:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d02d:	77 41                	ja     c000d070 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d02f:	99                   	cdq    
c000d030:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d036:	01 c8                	add    eax,ecx
c000d038:	11 da                	adc    edx,ebx
c000d03a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d040:	19 d7                	sbb    edi,edx
c000d042:	72 33                	jb     c000d077 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d044:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d04a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d050:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d054:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d058:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d05e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d064:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d068:	5b                   	pop    ebx
c000d069:	5e                   	pop    esi
c000d06a:	5f                   	pop    edi
c000d06b:	e9 4e 0a 00 00       	jmp    c000dabe <VCache::read(unsigned long long, int, void*)>
c000d070:	b8 05 00 00 00       	mov    eax,0x5
c000d075:	eb 05                	jmp    c000d07c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d077:	b8 07 00 00 00       	mov    eax,0x7
c000d07c:	5b                   	pop    ebx
c000d07d:	5e                   	pop    esi
c000d07e:	5f                   	pop    edi
c000d07f:	c3                   	ret    

c000d080 <LogicalDisk::write(unsigned long long, int, void*)>:
c000d080:	57                   	push   edi
c000d081:	56                   	push   esi
c000d082:	53                   	push   ebx
c000d083:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d087:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d08b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d08f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d093:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d099:	77 41                	ja     c000d0dc <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d09b:	99                   	cdq    
c000d09c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d0a2:	01 c8                	add    eax,ecx
c000d0a4:	11 da                	adc    edx,ebx
c000d0a6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d0ac:	19 d7                	sbb    edi,edx
c000d0ae:	72 33                	jb     c000d0e3 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d0b0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d0b6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d0bc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d0c0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d0c4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d0ca:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d0d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d0d4:	5b                   	pop    ebx
c000d0d5:	5e                   	pop    esi
c000d0d6:	5f                   	pop    edi
c000d0d7:	e9 cc 08 00 00       	jmp    c000d9a8 <VCache::write(unsigned long long, int, void*)>
c000d0dc:	b8 05 00 00 00       	mov    eax,0x5
c000d0e1:	eb 05                	jmp    c000d0e8 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d0e3:	b8 07 00 00 00       	mov    eax,0x7
c000d0e8:	5b                   	pop    ebx
c000d0e9:	5e                   	pop    esi
c000d0ea:	5f                   	pop    edi
c000d0eb:	c3                   	ret    

c000d0ec <Mouse::Mouse(char const*)>:
c000d0ec:	83 ec 0c             	sub    esp,0xc
c000d0ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0f3:	83 ec 08             	sub    esp,0x8
c000d0f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0fa:	50                   	push   eax
c000d0fb:	e8 04 ee ff ff       	call   c000bf04 <Device::Device(char const*)>
c000d100:	83 c4 10             	add    esp,0x10
c000d103:	ba 40 e2 01 c0       	mov    edx,0xc001e240
c000d108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d10c:	89 10                	mov    DWORD PTR [eax],edx
c000d10e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d112:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d11c:	90                   	nop
c000d11d:	83 c4 0c             	add    esp,0xc
c000d120:	c3                   	ret    
c000d121:	90                   	nop
c000d122:	66 90                	xchg   ax,ax

c000d124 <Mouse::~Mouse()>:
c000d124:	83 ec 0c             	sub    esp,0xc
c000d127:	ba 40 e2 01 c0       	mov    edx,0xc001e240
c000d12c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d130:	89 10                	mov    DWORD PTR [eax],edx
c000d132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d136:	83 ec 0c             	sub    esp,0xc
c000d139:	50                   	push   eax
c000d13a:	e8 2f eb ff ff       	call   c000bc6e <Device::~Device()>
c000d13f:	83 c4 10             	add    esp,0x10
c000d142:	90                   	nop
c000d143:	83 c4 0c             	add    esp,0xc
c000d146:	c3                   	ret    
c000d147:	90                   	nop

c000d148 <Mouse::~Mouse()>:
c000d148:	83 ec 0c             	sub    esp,0xc
c000d14b:	83 ec 0c             	sub    esp,0xc
c000d14e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d152:	e8 cd ff ff ff       	call   c000d124 <Mouse::~Mouse()>
c000d157:	83 c4 10             	add    esp,0x10
c000d15a:	83 ec 08             	sub    esp,0x8
c000d15d:	68 58 01 00 00       	push   0x158
c000d162:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d166:	e8 cb d6 ff ff       	call   c000a836 <operator delete(void*, unsigned long)>
c000d16b:	83 c4 10             	add    esp,0x10
c000d16e:	83 c4 0c             	add    esp,0xc
c000d171:	c3                   	ret    

c000d172 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d172:	55                   	push   ebp
c000d173:	57                   	push   edi
c000d174:	56                   	push   esi
c000d175:	53                   	push   ebx
c000d176:	81 ec 28 01 00 00    	sub    esp,0x128
c000d17c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000d183:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000d18a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000d191:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000d198:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d19c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d1a0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d1a7:	e8 54 ee ff ff       	call   c000c000 <Device::getName()>
c000d1ac:	5a                   	pop    edx
c000d1ad:	59                   	pop    ecx
c000d1ae:	50                   	push   eax
c000d1af:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d1b3:	55                   	push   ebp
c000d1b4:	e8 47 34 ff ff       	call   c0000600 <strcpy>
c000d1b9:	5b                   	pop    ebx
c000d1ba:	58                   	pop    eax
c000d1bb:	68 64 e2 01 c0       	push   0xc001e264
c000d1c0:	55                   	push   ebp
c000d1c1:	e8 fa 35 ff ff       	call   c00007c0 <strcat>
c000d1c6:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000d1cd:	e8 bf aa ff ff       	call   c0007c91 <malloc>
c000d1d2:	83 c4 0c             	add    esp,0xc
c000d1d5:	89 c3                	mov    ebx,eax
c000d1d7:	57                   	push   edi
c000d1d8:	56                   	push   esi
c000d1d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d1dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d1e1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d1e8:	55                   	push   ebp
c000d1e9:	50                   	push   eax
c000d1ea:	e8 f7 fb ff ff       	call   c000cde6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d1ef:	83 c4 14             	add    esp,0x14
c000d1f2:	53                   	push   ebx
c000d1f3:	e8 a4 fc ff ff       	call   c000ce9c <LogicalDisk::assignDriveLetter()>
c000d1f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d1fb:	e8 52 fd ff ff       	call   c000cf52 <LogicalDisk::mount()>
c000d200:	58                   	pop    eax
c000d201:	5a                   	pop    edx
c000d202:	53                   	push   ebx
c000d203:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d20a:	e8 5d eb ff ff       	call   c000bd6c <Device::addChild(Device*)>
c000d20f:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d215:	5b                   	pop    ebx
c000d216:	5e                   	pop    esi
c000d217:	5f                   	pop    edi
c000d218:	5d                   	pop    ebp
c000d219:	c3                   	ret    

c000d21a <createPartitionsForDisk(PhysicalDisk*)>:
c000d21a:	55                   	push   ebp
c000d21b:	57                   	push   edi
c000d21c:	56                   	push   esi
c000d21d:	53                   	push   ebx
c000d21e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d224:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d22b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d231:	3d 00 02 00 00       	cmp    eax,0x200
c000d236:	74 27                	je     c000d25f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d238:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d23e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d244:	83 ec 10             	sub    esp,0x10
c000d247:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d24b:	99                   	cdq    
c000d24c:	c1 e6 0a             	shl    esi,0xa
c000d24f:	52                   	push   edx
c000d250:	89 fd                	mov    ebp,edi
c000d252:	50                   	push   eax
c000d253:	55                   	push   ebp
c000d254:	56                   	push   esi
c000d255:	e8 b6 ef 00 00       	call   c001c210 <__udivdi3>
c000d25a:	e9 b1 00 00 00       	jmp    c000d310 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d25f:	83 ec 0c             	sub    esp,0xc
c000d262:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d264:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d268:	56                   	push   esi
c000d269:	6a 01                	push   0x1
c000d26b:	6a 00                	push   0x0
c000d26d:	6a 00                	push   0x0
c000d26f:	53                   	push   ebx
c000d270:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d273:	83 c4 20             	add    esp,0x20
c000d276:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d27e:	75 0a                	jne    c000d28a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d280:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d288:	74 2c                	je     c000d2b6 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d28a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d290:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d296:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d29c:	83 ec 10             	sub    esp,0x10
c000d29f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d2a3:	89 f7                	mov    edi,esi
c000d2a5:	c1 e0 0a             	shl    eax,0xa
c000d2a8:	c1 ff 1f             	sar    edi,0x1f
c000d2ab:	57                   	push   edi
c000d2ac:	56                   	push   esi
c000d2ad:	52                   	push   edx
c000d2ae:	50                   	push   eax
c000d2af:	e8 5c ef 00 00       	call   c001c210 <__udivdi3>
c000d2b4:	eb 5a                	jmp    c000d310 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d2b6:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d2bd:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000d2c4:	83 e1 7f             	and    ecx,0x7f
c000d2c7:	83 e0 7f             	and    eax,0x7f
c000d2ca:	01 c1                	add    ecx,eax
c000d2cc:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d2d3:	83 e0 7f             	and    eax,0x7f
c000d2d6:	01 c1                	add    ecx,eax
c000d2d8:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d2df:	83 e0 7f             	and    eax,0x7f
c000d2e2:	00 c1                	add    cl,al
c000d2e4:	74 41                	je     c000d327 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000d2e6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d2ec:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d2f2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d2f8:	83 ec 10             	sub    esp,0x10
c000d2fb:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d2ff:	89 f7                	mov    edi,esi
c000d301:	c1 e0 0a             	shl    eax,0xa
c000d304:	c1 ff 1f             	sar    edi,0x1f
c000d307:	57                   	push   edi
c000d308:	56                   	push   esi
c000d309:	52                   	push   edx
c000d30a:	50                   	push   eax
c000d30b:	e8 00 ef 00 00       	call   c001c210 <__udivdi3>
c000d310:	83 c4 14             	add    esp,0x14
c000d313:	52                   	push   edx
c000d314:	50                   	push   eax
c000d315:	6a 00                	push   0x0
c000d317:	6a 00                	push   0x0
c000d319:	53                   	push   ebx
c000d31a:	e8 53 fe ff ff       	call   c000d172 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d31f:	83 c4 20             	add    esp,0x20
c000d322:	e9 79 01 00 00       	jmp    c000d4a0 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000d327:	89 f0                	mov    eax,esi
c000d329:	31 f6                	xor    esi,esi
c000d32b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d332:	75 02                	jne    c000d336 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000d334:	89 f1                	mov    ecx,esi
c000d336:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d33d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000d344:	c1 e2 08             	shl    edx,0x8
c000d347:	c1 e7 10             	shl    edi,0x10
c000d34a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000d352:	09 fa                	or     edx,edi
c000d354:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000d35c:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000d363:	83 c0 10             	add    eax,0x10
c000d366:	09 fa                	or     edx,edi
c000d368:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d36f:	c1 e7 18             	shl    edi,0x18
c000d372:	09 fa                	or     edx,edi
c000d374:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d37b:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d37f:	c1 e7 10             	shl    edi,0x10
c000d382:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d389:	c1 e2 08             	shl    edx,0x8
c000d38c:	09 fa                	or     edx,edi
c000d38e:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d395:	09 fa                	or     edx,edi
c000d397:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d39e:	c1 e7 18             	shl    edi,0x18
c000d3a1:	09 fa                	or     edx,edi
c000d3a3:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d3a7:	46                   	inc    esi
c000d3a8:	83 fe 04             	cmp    esi,0x4
c000d3ab:	0f 85 7a ff ff ff    	jne    c000d32b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d3b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3b5:	83 f0 01             	xor    eax,0x1
c000d3b8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d3bc:	75 57                	jne    c000d415 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d3be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d3c2:	83 f0 01             	xor    eax,0x1
c000d3c5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d3c9:	75 4a                	jne    c000d415 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d3cb:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d3cf:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d3d7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d3df:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d3e5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d3eb:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d3f1:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d3f5:	89 f7                	mov    edi,esi
c000d3f7:	c1 e0 0a             	shl    eax,0xa
c000d3fa:	c1 ff 1f             	sar    edi,0x1f
c000d3fd:	57                   	push   edi
c000d3fe:	56                   	push   esi
c000d3ff:	52                   	push   edx
c000d400:	50                   	push   eax
c000d401:	e8 0a ee 00 00       	call   c001c210 <__udivdi3>
c000d406:	83 c4 10             	add    esp,0x10
c000d409:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d40d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d411:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d415:	84 c9                	test   cl,cl
c000d417:	74 53                	je     c000d46c <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d419:	0f b6 c9             	movzx  ecx,cl
c000d41c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d420:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d424:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d428:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d42c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d430:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d434:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d438:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d43c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d440:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d44c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d450:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d454:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d458:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d45c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d460:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d464:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d468:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d46c:	31 ed                	xor    ebp,ebp
c000d46e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d472:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d476:	89 f8                	mov    eax,edi
c000d478:	09 f0                	or     eax,esi
c000d47a:	74 1e                	je     c000d49a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d47c:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d480:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d484:	89 d1                	mov    ecx,edx
c000d486:	09 c1                	or     ecx,eax
c000d488:	74 10                	je     c000d49a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d48a:	83 ec 0c             	sub    esp,0xc
c000d48d:	57                   	push   edi
c000d48e:	56                   	push   esi
c000d48f:	52                   	push   edx
c000d490:	50                   	push   eax
c000d491:	53                   	push   ebx
c000d492:	e8 db fc ff ff       	call   c000d172 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d497:	83 c4 20             	add    esp,0x20
c000d49a:	45                   	inc    ebp
c000d49b:	83 fd 04             	cmp    ebp,0x4
c000d49e:	75 ce                	jne    c000d46e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d4a0:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d4a6:	5b                   	pop    ebx
c000d4a7:	5e                   	pop    esi
c000d4a8:	5f                   	pop    edi
c000d4a9:	5d                   	pop    ebp
c000d4aa:	c3                   	ret    
c000d4ab:	90                   	nop

c000d4ac <Serial::Serial(char const*)>:
c000d4ac:	83 ec 0c             	sub    esp,0xc
c000d4af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4b3:	83 ec 08             	sub    esp,0x8
c000d4b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4ba:	50                   	push   eax
c000d4bb:	e8 44 ea ff ff       	call   c000bf04 <Device::Device(char const*)>
c000d4c0:	83 c4 10             	add    esp,0x10
c000d4c3:	ba 78 e2 01 c0       	mov    edx,0xc001e278
c000d4c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4cc:	89 10                	mov    DWORD PTR [eax],edx
c000d4ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4d2:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d4dc:	90                   	nop
c000d4dd:	83 c4 0c             	add    esp,0xc
c000d4e0:	c3                   	ret    
c000d4e1:	90                   	nop
c000d4e2:	66 90                	xchg   ax,ax

c000d4e4 <Serial::~Serial()>:
c000d4e4:	83 ec 0c             	sub    esp,0xc
c000d4e7:	ba 78 e2 01 c0       	mov    edx,0xc001e278
c000d4ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4f0:	89 10                	mov    DWORD PTR [eax],edx
c000d4f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4f6:	83 ec 0c             	sub    esp,0xc
c000d4f9:	50                   	push   eax
c000d4fa:	e8 6f e7 ff ff       	call   c000bc6e <Device::~Device()>
c000d4ff:	83 c4 10             	add    esp,0x10
c000d502:	90                   	nop
c000d503:	83 c4 0c             	add    esp,0xc
c000d506:	c3                   	ret    
c000d507:	90                   	nop

c000d508 <Serial::~Serial()>:
c000d508:	83 ec 0c             	sub    esp,0xc
c000d50b:	83 ec 0c             	sub    esp,0xc
c000d50e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d512:	e8 cd ff ff ff       	call   c000d4e4 <Serial::~Serial()>
c000d517:	83 c4 10             	add    esp,0x10
c000d51a:	83 ec 08             	sub    esp,0x8
c000d51d:	68 58 01 00 00       	push   0x158
c000d522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d526:	e8 0b d3 ff ff       	call   c000a836 <operator delete(void*, unsigned long)>
c000d52b:	83 c4 10             	add    esp,0x10
c000d52e:	83 c4 0c             	add    esp,0xc
c000d531:	c3                   	ret    
c000d532:	66 90                	xchg   ax,ax

c000d534 <Timer::Timer(char const*)>:
c000d534:	83 ec 0c             	sub    esp,0xc
c000d537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d53b:	83 ec 08             	sub    esp,0x8
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	50                   	push   eax
c000d543:	e8 bc e9 ff ff       	call   c000bf04 <Device::Device(char const*)>
c000d548:	83 c4 10             	add    esp,0x10
c000d54b:	ba bc e2 01 c0       	mov    edx,0xc001e2bc
c000d550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d554:	89 10                	mov    DWORD PTR [eax],edx
c000d556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d55a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d564:	90                   	nop
c000d565:	83 c4 0c             	add    esp,0xc
c000d568:	c3                   	ret    
c000d569:	90                   	nop
c000d56a:	66 90                	xchg   ax,ax

c000d56c <Timer::~Timer()>:
c000d56c:	83 ec 0c             	sub    esp,0xc
c000d56f:	ba bc e2 01 c0       	mov    edx,0xc001e2bc
c000d574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d578:	89 10                	mov    DWORD PTR [eax],edx
c000d57a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d57e:	83 ec 0c             	sub    esp,0xc
c000d581:	50                   	push   eax
c000d582:	e8 e7 e6 ff ff       	call   c000bc6e <Device::~Device()>
c000d587:	83 c4 10             	add    esp,0x10
c000d58a:	90                   	nop
c000d58b:	83 c4 0c             	add    esp,0xc
c000d58e:	c3                   	ret    
c000d58f:	90                   	nop

c000d590 <Timer::~Timer()>:
c000d590:	83 ec 0c             	sub    esp,0xc
c000d593:	83 ec 0c             	sub    esp,0xc
c000d596:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d59a:	e8 cd ff ff ff       	call   c000d56c <Timer::~Timer()>
c000d59f:	83 c4 10             	add    esp,0x10
c000d5a2:	83 ec 08             	sub    esp,0x8
c000d5a5:	68 5c 01 00 00       	push   0x15c
c000d5aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ae:	e8 83 d2 ff ff       	call   c000a836 <operator delete(void*, unsigned long)>
c000d5b3:	83 c4 10             	add    esp,0x10
c000d5b6:	83 c4 0c             	add    esp,0xc
c000d5b9:	c3                   	ret    

c000d5ba <Timer::read()>:
c000d5ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d5be:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d5c4:	c3                   	ret    

c000d5c5 <setupTimer(int)>:
c000d5c5:	53                   	push   ebx
c000d5c6:	83 ec 14             	sub    esp,0x14
c000d5c9:	68 5c 01 00 00       	push   0x15c
c000d5ce:	e8 be a6 ff ff       	call   c0007c91 <malloc>
c000d5d3:	89 04 24             	mov    DWORD PTR [esp],eax
c000d5d6:	89 c3                	mov    ebx,eax
c000d5d8:	e8 a7 e5 00 00       	call   c001bb84 <PIT::PIT()>
c000d5dd:	58                   	pop    eax
c000d5de:	5a                   	pop    edx
c000d5df:	53                   	push   ebx
c000d5e0:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c000d5e6:	e8 81 e7 ff ff       	call   c000bd6c <Device::addChild(Device*)>
c000d5eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d5ed:	6a 00                	push   0x0
c000d5ef:	6a 00                	push   0x0
c000d5f1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d5f5:	53                   	push   ebx
c000d5f6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d5f9:	89 d8                	mov    eax,ebx
c000d5fb:	83 c4 28             	add    esp,0x28
c000d5fe:	5b                   	pop    ebx
c000d5ff:	c3                   	ret    

c000d600 <timerHandler(unsigned int)>:
c000d600:	56                   	push   esi
c000d601:	53                   	push   ebx
c000d602:	51                   	push   ecx
c000d603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d607:	01 05 8c 2f 02 c0    	add    DWORD PTR ds:0xc0022f8c,eax
c000d60d:	80 3d bd 09 02 c0 00 	cmp    BYTE PTR ds:0xc00209bd,0x0
c000d614:	0f 84 4a 01 00 00    	je     c000d764 <timerHandler(unsigned int)+0x164>
c000d61a:	fa                   	cli    
c000d61b:	ff 05 68 3e 02 c0    	inc    DWORD PTR ds:0xc0023e68
c000d621:	83 ec 0c             	sub    esp,0xc
c000d624:	ff 05 64 3e 02 c0    	inc    DWORD PTR ds:0xc0023e64
c000d62a:	68 78 3e 02 c0       	push   0xc0023e78
c000d62f:	e8 ac f1 00 00       	call   c001c7e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d634:	83 c4 10             	add    esp,0x10
c000d637:	84 c0                	test   al,al
c000d639:	0f 85 a1 00 00 00    	jne    c000d6e0 <timerHandler(unsigned int)+0xe0>
c000d63f:	83 ec 0c             	sub    esp,0xc
c000d642:	68 78 3e 02 c0       	push   0xc0023e78
c000d647:	e8 b0 f1 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d64c:	83 c4 10             	add    esp,0x10
c000d64f:	89 c6                	mov    esi,eax
c000d651:	8d 76 00             	lea    esi,[esi+0x0]
c000d654:	83 ec 0c             	sub    esp,0xc
c000d657:	68 78 3e 02 c0       	push   0xc0023e78
c000d65c:	e8 9b f1 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d661:	c7 04 24 78 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e78
c000d668:	89 c3                	mov    ebx,eax
c000d66a:	e8 95 f1 00 00       	call   c001c804 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d66f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d672:	83 c4 10             	add    esp,0x10
c000d675:	3b 05 8c 2f 02 c0    	cmp    eax,DWORD PTR ds:0xc0022f8c
c000d67b:	77 23                	ja     c000d6a0 <timerHandler(unsigned int)+0xa0>
c000d67d:	83 ec 0c             	sub    esp,0xc
c000d680:	53                   	push   ebx
c000d681:	e8 6a 67 00 00       	call   c0013df0 <unblockTask(ThreadControlBlock*)>
c000d686:	83 c4 10             	add    esp,0x10
c000d689:	39 de                	cmp    esi,ebx
c000d68b:	75 27                	jne    c000d6b4 <timerHandler(unsigned int)+0xb4>
c000d68d:	83 ec 0c             	sub    esp,0xc
c000d690:	68 78 3e 02 c0       	push   0xc0023e78
c000d695:	e8 62 f1 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d69a:	89 c6                	mov    esi,eax
c000d69c:	eb 12                	jmp    c000d6b0 <timerHandler(unsigned int)+0xb0>
c000d69e:	66 90                	xchg   ax,ax
c000d6a0:	52                   	push   edx
c000d6a1:	52                   	push   edx
c000d6a2:	53                   	push   ebx
c000d6a3:	68 78 3e 02 c0       	push   0xc0023e78
c000d6a8:	e8 0f f2 00 00       	call   c001c8bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d6ad:	8d 76 00             	lea    esi,[esi+0x0]
c000d6b0:	83 c4 10             	add    esp,0x10
c000d6b3:	90                   	nop
c000d6b4:	83 ec 0c             	sub    esp,0xc
c000d6b7:	68 78 3e 02 c0       	push   0xc0023e78
c000d6bc:	e8 1f f1 00 00       	call   c001c7e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d6c1:	83 c4 10             	add    esp,0x10
c000d6c4:	84 c0                	test   al,al
c000d6c6:	75 18                	jne    c000d6e0 <timerHandler(unsigned int)+0xe0>
c000d6c8:	83 ec 0c             	sub    esp,0xc
c000d6cb:	68 78 3e 02 c0       	push   0xc0023e78
c000d6d0:	e8 27 f1 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d6d5:	83 c4 10             	add    esp,0x10
c000d6d8:	39 f0                	cmp    eax,esi
c000d6da:	0f 85 74 ff ff ff    	jne    c000d654 <timerHandler(unsigned int)+0x54>
c000d6e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d6e5:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d6e9:	74 41                	je     c000d72c <timerHandler(unsigned int)+0x12c>
c000d6eb:	80 3d bc 09 02 c0 00 	cmp    BYTE PTR ds:0xc00209bc,0x0
c000d6f2:	74 38                	je     c000d72c <timerHandler(unsigned int)+0x12c>
c000d6f4:	fa                   	cli    
c000d6f5:	ff 05 68 3e 02 c0    	inc    DWORD PTR ds:0xc0023e68
c000d6fb:	a1 8c 2f 02 c0       	mov    eax,ds:0xc0022f8c
c000d700:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d706:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d709:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d70f:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d712:	72 08                	jb     c000d71c <timerHandler(unsigned int)+0x11c>
c000d714:	e8 13 62 00 00       	call   c001392c <schedule()>
c000d719:	8d 76 00             	lea    esi,[esi+0x0]
c000d71c:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c000d721:	48                   	dec    eax
c000d722:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c000d727:	75 03                	jne    c000d72c <timerHandler(unsigned int)+0x12c>
c000d729:	fb                   	sti    
c000d72a:	66 90                	xchg   ax,ax
c000d72c:	a1 64 3e 02 c0       	mov    eax,ds:0xc0023e64
c000d731:	48                   	dec    eax
c000d732:	a3 64 3e 02 c0       	mov    ds:0xc0023e64,eax
c000d737:	75 1b                	jne    c000d754 <timerHandler(unsigned int)+0x154>
c000d739:	83 3d 60 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023e60,0x0
c000d740:	74 12                	je     c000d754 <timerHandler(unsigned int)+0x154>
c000d742:	c7 05 60 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e60,0x0
c000d74c:	e8 db 61 00 00       	call   c001392c <schedule()>
c000d751:	8d 76 00             	lea    esi,[esi+0x0]
c000d754:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c000d759:	48                   	dec    eax
c000d75a:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c000d75f:	75 03                	jne    c000d764 <timerHandler(unsigned int)+0x164>
c000d761:	fb                   	sti    
c000d762:	66 90                	xchg   ax,ax
c000d764:	58                   	pop    eax
c000d765:	5b                   	pop    ebx
c000d766:	5e                   	pop    esi
c000d767:	c3                   	ret    

c000d768 <VCache::VCache(PhysicalDisk*)>:
c000d768:	53                   	push   ebx
c000d769:	83 ec 18             	sub    esp,0x18
c000d76c:	ba ec e2 01 c0       	mov    edx,0xc001e2ec
c000d771:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d775:	89 10                	mov    DWORD PTR [eax],edx
c000d777:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d77b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d782:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d786:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d78d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d791:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d798:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d79f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7a3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d7aa:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d7b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7b5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d7bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7c0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d7c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7c8:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d7cf:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d7d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7da:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d7de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7e2:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d7e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7ea:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d7ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7f2:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d7f9:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d801:	83 ec 0c             	sub    esp,0xc
c000d804:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d808:	e8 84 a4 ff ff       	call   c0007c91 <malloc>
c000d80d:	83 c4 10             	add    esp,0x10
c000d810:	89 c3                	mov    ebx,eax
c000d812:	83 ec 0c             	sub    esp,0xc
c000d815:	53                   	push   ebx
c000d816:	e8 dd 5e 00 00       	call   c00136f8 <Mutex::Mutex()>
c000d81b:	83 c4 10             	add    esp,0x10
c000d81e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d822:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d825:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d829:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d82d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d830:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d834:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d83b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d83f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d845:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d849:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d84c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d850:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d856:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d85c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d860:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d863:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d866:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d86a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d86e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d872:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d878:	05 00 01 00 00       	add    eax,0x100
c000d87d:	c1 e0 04             	shl    eax,0x4
c000d880:	83 ec 0c             	sub    esp,0xc
c000d883:	50                   	push   eax
c000d884:	e8 08 a4 ff ff       	call   c0007c91 <malloc>
c000d889:	83 c4 10             	add    esp,0x10
c000d88c:	89 c2                	mov    edx,eax
c000d88e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d892:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d895:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d899:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d8a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8a4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d8a8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d8ac:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d8b2:	c1 e0 06             	shl    eax,0x6
c000d8b5:	83 ec 0c             	sub    esp,0xc
c000d8b8:	50                   	push   eax
c000d8b9:	e8 d3 a3 ff ff       	call   c0007c91 <malloc>
c000d8be:	83 c4 10             	add    esp,0x10
c000d8c1:	89 c2                	mov    edx,eax
c000d8c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8c7:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d8ca:	90                   	nop
c000d8cb:	83 c4 18             	add    esp,0x18
c000d8ce:	5b                   	pop    ebx
c000d8cf:	c3                   	ret    

c000d8d0 <VCache::invalidateReadBuffer()>:
c000d8d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d8d4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d8da:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d8de:	c3                   	ret    
c000d8df:	90                   	nop

c000d8e0 <VCache::writeWriteBuffer()>:
c000d8e0:	53                   	push   ebx
c000d8e1:	83 ec 08             	sub    esp,0x8
c000d8e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d8e8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d8ec:	74 1e                	je     c000d90c <VCache::writeWriteBuffer()+0x2c>
c000d8ee:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d8f1:	83 ec 0c             	sub    esp,0xc
c000d8f4:	8b 10                	mov    edx,DWORD PTR [eax]
c000d8f6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d8f9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d8fc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d8ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d902:	50                   	push   eax
c000d903:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d906:	83 c4 20             	add    esp,0x20
c000d909:	8d 76 00             	lea    esi,[esi+0x0]
c000d90c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d913:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d91a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d91e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d925:	83 c4 08             	add    esp,0x8
c000d928:	5b                   	pop    ebx
c000d929:	c3                   	ret    
c000d92a:	66 90                	xchg   ax,ax

c000d92c <VCache::~VCache()>:
c000d92c:	83 ec 0c             	sub    esp,0xc
c000d92f:	ba ec e2 01 c0       	mov    edx,0xc001e2ec
c000d934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d938:	89 10                	mov    DWORD PTR [eax],edx
c000d93a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d93e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d941:	84 c0                	test   al,al
c000d943:	74 0f                	je     c000d954 <VCache::~VCache()+0x28>
c000d945:	83 ec 0c             	sub    esp,0xc
c000d948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d94c:	e8 8f ff ff ff       	call   c000d8e0 <VCache::writeWriteBuffer()>
c000d951:	83 c4 10             	add    esp,0x10
c000d954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d958:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d95b:	83 ec 0c             	sub    esp,0xc
c000d95e:	50                   	push   eax
c000d95f:	e8 3d a3 ff ff       	call   c0007ca1 <free>
c000d964:	83 c4 10             	add    esp,0x10
c000d967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d96b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d96e:	83 ec 0c             	sub    esp,0xc
c000d971:	50                   	push   eax
c000d972:	e8 2a a3 ff ff       	call   c0007ca1 <free>
c000d977:	83 c4 10             	add    esp,0x10
c000d97a:	90                   	nop
c000d97b:	83 c4 0c             	add    esp,0xc
c000d97e:	c3                   	ret    
c000d97f:	90                   	nop

c000d980 <VCache::~VCache()>:
c000d980:	83 ec 0c             	sub    esp,0xc
c000d983:	83 ec 0c             	sub    esp,0xc
c000d986:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d98a:	e8 9d ff ff ff       	call   c000d92c <VCache::~VCache()>
c000d98f:	83 c4 10             	add    esp,0x10
c000d992:	83 ec 08             	sub    esp,0x8
c000d995:	6a 44                	push   0x44
c000d997:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d99b:	e8 96 ce ff ff       	call   c000a836 <operator delete(void*, unsigned long)>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	83 c4 0c             	add    esp,0xc
c000d9a6:	c3                   	ret    
c000d9a7:	90                   	nop

c000d9a8 <VCache::write(unsigned long long, int, void*)>:
c000d9a8:	55                   	push   ebp
c000d9a9:	57                   	push   edi
c000d9aa:	56                   	push   esi
c000d9ab:	53                   	push   ebx
c000d9ac:	83 ec 1c             	sub    esp,0x1c
c000d9af:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d9b3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d9b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9bb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d9bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d9c3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d9c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9cb:	31 c0                	xor    eax,eax
c000d9cd:	8d 76 00             	lea    esi,[esi+0x0]
c000d9d0:	39 e8                	cmp    eax,ebp
c000d9d2:	7d 18                	jge    c000d9ec <VCache::write(unsigned long long, int, void*)+0x44>
c000d9d4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d9d7:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d9dd:	0f af c8             	imul   ecx,eax
c000d9e0:	89 ca                	mov    edx,ecx
c000d9e2:	01 f2                	add    edx,esi
c000d9e4:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d9e6:	40                   	inc    eax
c000d9e7:	eb e7                	jmp    c000d9d0 <VCache::write(unsigned long long, int, void*)+0x28>
c000d9e9:	8d 76 00             	lea    esi,[esi+0x0]
c000d9ec:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d9f0:	74 0a                	je     c000d9fc <VCache::write(unsigned long long, int, void*)+0x54>
c000d9f2:	53                   	push   ebx
c000d9f3:	e8 d8 fe ff ff       	call   c000d8d0 <VCache::invalidateReadBuffer()>
c000d9f8:	58                   	pop    eax
c000d9f9:	8d 76 00             	lea    esi,[esi+0x0]
c000d9fc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000da00:	74 5a                	je     c000da5c <VCache::write(unsigned long long, int, void*)+0xb4>
c000da02:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000da05:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000da09:	89 f8                	mov    eax,edi
c000da0b:	99                   	cdq    
c000da0c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000da0f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000da12:	31 c1                	xor    ecx,eax
c000da14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da18:	31 d0                	xor    eax,edx
c000da1a:	09 c1                	or     ecx,eax
c000da1c:	75 32                	jne    c000da50 <VCache::write(unsigned long long, int, void*)+0xa8>
c000da1e:	83 fd 01             	cmp    ebp,0x1
c000da21:	75 2d                	jne    c000da50 <VCache::write(unsigned long long, int, void*)+0xa8>
c000da23:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000da26:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000da2c:	0f af f9             	imul   edi,ecx
c000da2f:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000da32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000da34:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000da37:	40                   	inc    eax
c000da38:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000da3b:	83 f8 40             	cmp    eax,0x40
c000da3e:	75 74                	jne    c000dab4 <VCache::write(unsigned long long, int, void*)+0x10c>
c000da40:	83 ec 0c             	sub    esp,0xc
c000da43:	53                   	push   ebx
c000da44:	e8 97 fe ff ff       	call   c000d8e0 <VCache::writeWriteBuffer()>
c000da49:	83 c4 10             	add    esp,0x10
c000da4c:	eb 66                	jmp    c000dab4 <VCache::write(unsigned long long, int, void*)+0x10c>
c000da4e:	66 90                	xchg   ax,ax
c000da50:	83 ec 0c             	sub    esp,0xc
c000da53:	53                   	push   ebx
c000da54:	e8 87 fe ff ff       	call   c000d8e0 <VCache::writeWriteBuffer()>
c000da59:	83 c4 10             	add    esp,0x10
c000da5c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000da5f:	83 fd 3f             	cmp    ebp,0x3f
c000da62:	7f 24                	jg     c000da88 <VCache::write(unsigned long long, int, void*)+0xe0>
c000da64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000da68:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000da6b:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000da6e:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000da72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000da76:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000da79:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000da7c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000da82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000da84:	eb 2e                	jmp    c000dab4 <VCache::write(unsigned long long, int, void*)+0x10c>
c000da86:	66 90                	xchg   ax,ax
c000da88:	8b 10                	mov    edx,DWORD PTR [eax]
c000da8a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000da8e:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000da92:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000da96:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da9a:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000da9e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000daa2:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000daa6:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000daa9:	83 c4 1c             	add    esp,0x1c
c000daac:	5b                   	pop    ebx
c000daad:	5e                   	pop    esi
c000daae:	5f                   	pop    edi
c000daaf:	5d                   	pop    ebp
c000dab0:	ff e0                	jmp    eax
c000dab2:	66 90                	xchg   ax,ax
c000dab4:	83 c4 1c             	add    esp,0x1c
c000dab7:	31 c0                	xor    eax,eax
c000dab9:	5b                   	pop    ebx
c000daba:	5e                   	pop    esi
c000dabb:	5f                   	pop    edi
c000dabc:	5d                   	pop    ebp
c000dabd:	c3                   	ret    

c000dabe <VCache::read(unsigned long long, int, void*)>:
c000dabe:	55                   	push   ebp
c000dabf:	57                   	push   edi
c000dac0:	56                   	push   esi
c000dac1:	53                   	push   ebx
c000dac2:	83 ec 1c             	sub    esp,0x1c
c000dac5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dac9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dacd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dad1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000dad5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dad9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dadd:	31 c0                	xor    eax,eax
c000dadf:	90                   	nop
c000dae0:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000dae4:	7d 16                	jge    c000dafc <VCache::read(unsigned long long, int, void*)+0x3e>
c000dae6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000dae9:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000daef:	0f af c8             	imul   ecx,eax
c000daf2:	89 ca                	mov    edx,ecx
c000daf4:	01 f2                	add    edx,esi
c000daf6:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000daf8:	40                   	inc    eax
c000daf9:	eb e5                	jmp    c000dae0 <VCache::read(unsigned long long, int, void*)+0x22>
c000dafb:	90                   	nop
c000dafc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000db00:	74 0e                	je     c000db10 <VCache::read(unsigned long long, int, void*)+0x52>
c000db02:	83 ec 0c             	sub    esp,0xc
c000db05:	53                   	push   ebx
c000db06:	e8 d5 fd ff ff       	call   c000d8e0 <VCache::writeWriteBuffer()>
c000db0b:	83 c4 10             	add    esp,0x10
c000db0e:	66 90                	xchg   ax,ax
c000db10:	83 ec 0c             	sub    esp,0xc
c000db13:	53                   	push   ebx
c000db14:	e8 b7 fd ff ff       	call   c000d8d0 <VCache::invalidateReadBuffer()>
c000db19:	83 c4 0c             	add    esp,0xc
c000db1c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000db1f:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000db25:	6a 00                	push   0x0
c000db27:	56                   	push   esi
c000db28:	e8 a3 29 ff ff       	call   c00004d0 <memset>
c000db2d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000db30:	8b 10                	mov    edx,DWORD PTR [eax]
c000db32:	89 74 24 50          	mov    DWORD PTR [esp+0x50],esi
c000db36:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c000db3a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000db3e:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c000db42:	89 74 24 4c          	mov    DWORD PTR [esp+0x4c],esi
c000db46:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db4a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000db4d:	83 c4 2c             	add    esp,0x2c
c000db50:	5b                   	pop    ebx
c000db51:	5e                   	pop    esi
c000db52:	5f                   	pop    edi
c000db53:	5d                   	pop    ebp
c000db54:	ff e0                	jmp    eax

c000db56 <Video::putrect(int, int, int, int, unsigned int)>:
c000db56:	55                   	push   ebp
c000db57:	57                   	push   edi
c000db58:	56                   	push   esi
c000db59:	53                   	push   ebx
c000db5a:	83 ec 1c             	sub    esp,0x1c
c000db5d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000db61:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db65:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000db69:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000db6d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000db71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db75:	01 df                	add    edi,ebx
c000db77:	39 fb                	cmp    ebx,edi
c000db79:	7d 1f                	jge    c000db9a <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000db7b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000db7f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000db83:	7d 12                	jge    c000db97 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000db85:	8b 16                	mov    edx,DWORD PTR [esi]
c000db87:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db8b:	53                   	push   ebx
c000db8c:	55                   	push   ebp
c000db8d:	45                   	inc    ebp
c000db8e:	56                   	push   esi
c000db8f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000db92:	83 c4 10             	add    esp,0x10
c000db95:	eb e8                	jmp    c000db7f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000db97:	43                   	inc    ebx
c000db98:	eb dd                	jmp    c000db77 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000db9a:	83 c4 1c             	add    esp,0x1c
c000db9d:	5b                   	pop    ebx
c000db9e:	5e                   	pop    esi
c000db9f:	5f                   	pop    edi
c000dba0:	5d                   	pop    ebp
c000dba1:	c3                   	ret    

c000dba2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000dba2:	55                   	push   ebp
c000dba3:	57                   	push   edi
c000dba4:	31 ff                	xor    edi,edi
c000dba6:	56                   	push   esi
c000dba7:	53                   	push   ebx
c000dba8:	83 ec 1c             	sub    esp,0x1c
c000dbab:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000dbaf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000dbb3:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000dbba:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000dbbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbc3:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000dbc7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dbcb:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000dbce:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000dbd2:	01 f9                	add    ecx,edi
c000dbd4:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000dbd8:	7d 2f                	jge    c000dc09 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000dbda:	31 f6                	xor    esi,esi
c000dbdc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000dbe0:	01 f2                	add    edx,esi
c000dbe2:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000dbe6:	7d 1a                	jge    c000dc02 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000dbe8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dbeb:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000dbee:	46                   	inc    esi
c000dbef:	51                   	push   ecx
c000dbf0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dbf4:	52                   	push   edx
c000dbf5:	55                   	push   ebp
c000dbf6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dbf9:	83 c4 10             	add    esp,0x10
c000dbfc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dc00:	eb da                	jmp    c000dbdc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000dc02:	47                   	inc    edi
c000dc03:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000dc07:	eb c5                	jmp    c000dbce <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000dc09:	83 c4 1c             	add    esp,0x1c
c000dc0c:	5b                   	pop    ebx
c000dc0d:	5e                   	pop    esi
c000dc0e:	5f                   	pop    edi
c000dc0f:	5d                   	pop    ebp
c000dc10:	c3                   	ret    
c000dc11:	90                   	nop

c000dc12 <Video::blit(unsigned int*, int, int, int, int)>:
c000dc12:	55                   	push   ebp
c000dc13:	57                   	push   edi
c000dc14:	56                   	push   esi
c000dc15:	53                   	push   ebx
c000dc16:	83 ec 1c             	sub    esp,0x1c
c000dc19:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dc1d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dc21:	85 c0                	test   eax,eax
c000dc23:	79 02                	jns    c000dc27 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000dc25:	31 c0                	xor    eax,eax
c000dc27:	c1 e0 02             	shl    eax,0x2
c000dc2a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000dc2e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc32:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dc36:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000dc3a:	39 d8                	cmp    eax,ebx
c000dc3c:	7e 49                	jle    c000dc87 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000dc3e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000dc44:	7c 41                	jl     c000dc87 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000dc46:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000dc4a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dc4e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000dc52:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000dc56:	39 f9                	cmp    ecx,edi
c000dc58:	7e 22                	jle    c000dc7c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000dc5a:	83 c5 04             	add    ebp,0x4
c000dc5d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000dc63:	7c 14                	jl     c000dc79 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000dc65:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dc67:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000dc6a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000dc6e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000dc72:	56                   	push   esi
c000dc73:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000dc76:	83 c4 10             	add    esp,0x10
c000dc79:	47                   	inc    edi
c000dc7a:	eb d2                	jmp    c000dc4e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000dc7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dc80:	43                   	inc    ebx
c000dc81:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000dc85:	eb ab                	jmp    c000dc32 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000dc87:	83 c4 1c             	add    esp,0x1c
c000dc8a:	5b                   	pop    ebx
c000dc8b:	5e                   	pop    esi
c000dc8c:	5f                   	pop    edi
c000dc8d:	5d                   	pop    ebp
c000dc8e:	c3                   	ret    
c000dc8f:	90                   	nop

c000dc90 <Video::clearScreen(unsigned int)>:
c000dc90:	57                   	push   edi
c000dc91:	56                   	push   esi
c000dc92:	53                   	push   ebx
c000dc93:	31 db                	xor    ebx,ebx
c000dc95:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dc99:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000dc9f:	7e 1f                	jle    c000dcc0 <Video::clearScreen(unsigned int)+0x30>
c000dca1:	31 ff                	xor    edi,edi
c000dca3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000dca9:	7e 12                	jle    c000dcbd <Video::clearScreen(unsigned int)+0x2d>
c000dcab:	8b 06                	mov    eax,DWORD PTR [esi]
c000dcad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dcb1:	53                   	push   ebx
c000dcb2:	57                   	push   edi
c000dcb3:	47                   	inc    edi
c000dcb4:	56                   	push   esi
c000dcb5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	eb e6                	jmp    c000dca3 <Video::clearScreen(unsigned int)+0x13>
c000dcbd:	43                   	inc    ebx
c000dcbe:	eb d9                	jmp    c000dc99 <Video::clearScreen(unsigned int)+0x9>
c000dcc0:	5b                   	pop    ebx
c000dcc1:	5e                   	pop    esi
c000dcc2:	5f                   	pop    edi
c000dcc3:	c3                   	ret    

c000dcc4 <Video::putpixel(int, int, unsigned int)>:
c000dcc4:	c7 44 24 04 f4 e2 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e2f4
c000dccc:	e9 be 28 00 00       	jmp    c001058f <KePanic(char const*)>
c000dcd1:	90                   	nop

c000dcd2 <Video::Video(char const*)>:
c000dcd2:	83 ec 0c             	sub    esp,0xc
c000dcd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcd9:	83 ec 08             	sub    esp,0x8
c000dcdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dce0:	50                   	push   eax
c000dce1:	e8 1e e2 ff ff       	call   c000bf04 <Device::Device(char const*)>
c000dce6:	83 c4 10             	add    esp,0x10
c000dce9:	ba 64 e3 01 c0       	mov    edx,0xc001e364
c000dcee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcf2:	89 10                	mov    DWORD PTR [eax],edx
c000dcf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcf8:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000dd02:	90                   	nop
c000dd03:	83 c4 0c             	add    esp,0xc
c000dd06:	c3                   	ret    
c000dd07:	90                   	nop

c000dd08 <Video::~Video()>:
c000dd08:	83 ec 0c             	sub    esp,0xc
c000dd0b:	ba 64 e3 01 c0       	mov    edx,0xc001e364
c000dd10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd14:	89 10                	mov    DWORD PTR [eax],edx
c000dd16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd1a:	83 ec 0c             	sub    esp,0xc
c000dd1d:	50                   	push   eax
c000dd1e:	e8 4b df ff ff       	call   c000bc6e <Device::~Device()>
c000dd23:	83 c4 10             	add    esp,0x10
c000dd26:	90                   	nop
c000dd27:	83 c4 0c             	add    esp,0xc
c000dd2a:	c3                   	ret    
c000dd2b:	90                   	nop

c000dd2c <Video::~Video()>:
c000dd2c:	83 ec 0c             	sub    esp,0xc
c000dd2f:	83 ec 0c             	sub    esp,0xc
c000dd32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd36:	e8 cd ff ff ff       	call   c000dd08 <Video::~Video()>
c000dd3b:	83 c4 10             	add    esp,0x10
c000dd3e:	83 ec 08             	sub    esp,0x8
c000dd41:	68 64 01 00 00       	push   0x164
c000dd46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd4a:	e8 e7 ca ff ff       	call   c000a836 <operator delete(void*, unsigned long)>
c000dd4f:	83 c4 10             	add    esp,0x10
c000dd52:	83 c4 0c             	add    esp,0xc
c000dd55:	c3                   	ret    

c000dd56 <Video::isMonochrome()>:
c000dd56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd5a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000dd60:	c3                   	ret    
c000dd61:	90                   	nop

c000dd62 <Video::getWidth()>:
c000dd62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd66:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dd6c:	c3                   	ret    
c000dd6d:	90                   	nop

c000dd6e <Video::getHeight()>:
c000dd6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd72:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dd78:	c3                   	ret    
c000dd79:	90                   	nop

c000dd7a <Video::drawCursor(int, int, unsigned char*, int)>:
c000dd7a:	55                   	push   ebp
c000dd7b:	57                   	push   edi
c000dd7c:	56                   	push   esi
c000dd7d:	53                   	push   ebx
c000dd7e:	83 ec 2c             	sub    esp,0x2c
c000dd81:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dd85:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dd89:	83 f8 01             	cmp    eax,0x1
c000dd8c:	19 c9                	sbb    ecx,ecx
c000dd8e:	31 db                	xor    ebx,ebx
c000dd90:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000dd94:	89 cd                	mov    ebp,ecx
c000dd96:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000dd9e:	f7 d5                	not    ebp
c000dda0:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000dda6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ddaa:	01 d8                	add    eax,ebx
c000ddac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ddb0:	56                   	push   esi
c000ddb1:	e8 b8 ff ff ff       	call   c000dd6e <Video::getHeight()>
c000ddb6:	59                   	pop    ecx
c000ddb7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ddbb:	7e 70                	jle    c000de2d <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000ddbd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ddc1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000ddc5:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ddc8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ddcc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ddd0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ddd7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dddb:	89 f8                	mov    eax,edi
c000dddd:	83 c0 20             	add    eax,0x20
c000dde0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dde4:	56                   	push   esi
c000dde5:	e8 78 ff ff ff       	call   c000dd62 <Video::getWidth()>
c000ddea:	5a                   	pop    edx
c000ddeb:	39 c7                	cmp    edi,eax
c000dded:	7d 34                	jge    c000de23 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000ddef:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ddf4:	74 05                	je     c000ddfb <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000ddf6:	8b 06                	mov    eax,DWORD PTR [esi]
c000ddf8:	55                   	push   ebp
c000ddf9:	eb 0d                	jmp    c000de08 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000ddfb:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000de00:	74 12                	je     c000de14 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000de02:	8b 06                	mov    eax,DWORD PTR [esi]
c000de04:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000de08:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000de0c:	57                   	push   edi
c000de0d:	56                   	push   esi
c000de0e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000de11:	83 c4 10             	add    esp,0x10
c000de14:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000de18:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000de1c:	47                   	inc    edi
c000de1d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000de21:	75 c1                	jne    c000dde4 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000de23:	43                   	inc    ebx
c000de24:	83 fb 20             	cmp    ebx,0x20
c000de27:	0f 85 79 ff ff ff    	jne    c000dda6 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000de2d:	83 c4 2c             	add    esp,0x2c
c000de30:	5b                   	pop    ebx
c000de31:	5e                   	pop    esi
c000de32:	5f                   	pop    edi
c000de33:	5d                   	pop    ebp
c000de34:	c3                   	ret    
c000de35:	90                   	nop

c000de36 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000de36:	55                   	push   ebp
c000de37:	57                   	push   edi
c000de38:	56                   	push   esi
c000de39:	53                   	push   ebx
c000de3a:	83 ec 28             	sub    esp,0x28
c000de3d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000de41:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000de45:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000de49:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000de4d:	c1 e6 08             	shl    esi,0x8
c000de50:	01 c6                	add    esi,eax
c000de52:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000de56:	c1 e0 08             	shl    eax,0x8
c000de59:	01 d0                	add    eax,edx
c000de5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de63:	0f af c6             	imul   eax,esi
c000de66:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000de6d:	50                   	push   eax
c000de6e:	e8 1e 9e ff ff       	call   c0007c91 <malloc>
c000de73:	83 c4 10             	add    esp,0x10
c000de76:	89 c7                	mov    edi,eax
c000de78:	85 c0                	test   eax,eax
c000de7a:	75 10                	jne    c000de8c <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000de7c:	83 ec 0c             	sub    esp,0xc
c000de7f:	68 15 e3 01 c0       	push   0xc001e315
c000de84:	e8 06 27 00 00       	call   c001058f <KePanic(char const*)>
c000de89:	83 c4 10             	add    esp,0x10
c000de8c:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000de8f:	ba 12 00 00 00       	mov    edx,0x12
c000de94:	84 c0                	test   al,al
c000de96:	74 11                	je     c000dea9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000de98:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000de9c:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000dea0:	c1 fa 03             	sar    edx,0x3
c000dea3:	0f af d1             	imul   edx,ecx
c000dea6:	83 c2 12             	add    edx,0x12
c000dea9:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000dead:	74 04                	je     c000deb3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000deaf:	85 f6                	test   esi,esi
c000deb1:	75 12                	jne    c000dec5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000deb3:	83 ec 0c             	sub    esp,0xc
c000deb6:	68 25 e3 01 c0       	push   0xc001e325
c000debb:	e8 6c ca ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c000dec0:	e9 b8 00 00 00       	jmp    c000df7d <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000dec5:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000dec9:	80 f9 02             	cmp    cl,0x2
c000decc:	0f 85 96 00 00 00    	jne    c000df68 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000ded2:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000ded7:	75 0e                	jne    c000dee7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000ded9:	84 c0                	test   al,al
c000dedb:	75 0a                	jne    c000dee7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dedd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000dee0:	83 e8 18             	sub    eax,0x18
c000dee3:	a8 f7                	test   al,0xf7
c000dee5:	74 0a                	je     c000def1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000dee7:	83 ec 0c             	sub    esp,0xc
c000deea:	68 3a e3 01 c0       	push   0xc001e33a
c000deef:	eb 7f                	jmp    c000df70 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000def1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000def9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000df01:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000df05:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000df0d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000df11:	75 0c                	jne    c000df1f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000df13:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000df18:	c1 e0 18             	shl    eax,0x18
c000df1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df1f:	45                   	inc    ebp
c000df20:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000df25:	c1 e1 10             	shl    ecx,0x10
c000df28:	89 c8                	mov    eax,ecx
c000df2a:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000df2f:	c1 e1 08             	shl    ecx,0x8
c000df32:	09 c1                	or     ecx,eax
c000df34:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000df38:	09 c1                	or     ecx,eax
c000df3a:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000df3e:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000df42:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000df46:	c1 f8 03             	sar    eax,0x3
c000df49:	01 c2                	add    edx,eax
c000df4b:	89 e8                	mov    eax,ebp
c000df4d:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000df51:	39 c6                	cmp    esi,eax
c000df53:	7f b0                	jg     c000df05 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000df55:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000df59:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000df5d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000df60:	7e 22                	jle    c000df84 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000df62:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000df66:	eb 99                	jmp    c000df01 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000df68:	50                   	push   eax
c000df69:	50                   	push   eax
c000df6a:	51                   	push   ecx
c000df6b:	68 48 e3 01 c0       	push   0xc001e348
c000df70:	e8 b7 c9 ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c000df75:	89 3c 24             	mov    DWORD PTR [esp],edi
c000df78:	e8 24 9d ff ff       	call   c0007ca1 <free>
c000df7d:	83 c4 10             	add    esp,0x10
c000df80:	31 ff                	xor    edi,edi
c000df82:	eb 0f                	jmp    c000df93 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000df84:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000df88:	89 30                	mov    DWORD PTR [eax],esi
c000df8a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000df8e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000df91:	89 30                	mov    DWORD PTR [eax],esi
c000df93:	83 c4 1c             	add    esp,0x1c
c000df96:	89 f8                	mov    eax,edi
c000df98:	5b                   	pop    ebx
c000df99:	5e                   	pop    esi
c000df9a:	5f                   	pop    edi
c000df9b:	5d                   	pop    ebp
c000df9c:	c3                   	ret    
c000df9d:	90                   	nop

c000df9e <Video::putTGA(int, int, unsigned char*, int)>:
c000df9e:	55                   	push   ebp
c000df9f:	57                   	push   edi
c000dfa0:	56                   	push   esi
c000dfa1:	53                   	push   ebx
c000dfa2:	83 ec 28             	sub    esp,0x28
c000dfa5:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000dfa9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dfad:	50                   	push   eax
c000dfae:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dfb2:	50                   	push   eax
c000dfb3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dfb7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dfbb:	56                   	push   esi
c000dfbc:	e8 75 fe ff ff       	call   c000de36 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000dfc1:	83 c4 20             	add    esp,0x20
c000dfc4:	85 c0                	test   eax,eax
c000dfc6:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000dfca:	74 35                	je     c000e001 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dfcc:	89 c7                	mov    edi,eax
c000dfce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dfd2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dfd6:	39 d8                	cmp    eax,ebx
c000dfd8:	7e 27                	jle    c000e001 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dfda:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dfde:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dfe2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dfe6:	39 e8                	cmp    eax,ebp
c000dfe8:	7e 14                	jle    c000dffe <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000dfea:	8b 06                	mov    eax,DWORD PTR [esi]
c000dfec:	83 c7 04             	add    edi,0x4
c000dfef:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000dff2:	53                   	push   ebx
c000dff3:	55                   	push   ebp
c000dff4:	45                   	inc    ebp
c000dff5:	56                   	push   esi
c000dff6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dff9:	83 c4 10             	add    esp,0x10
c000dffc:	eb e0                	jmp    c000dfde <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000dffe:	43                   	inc    ebx
c000dfff:	eb cd                	jmp    c000dfce <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e001:	83 c4 1c             	add    esp,0x1c
c000e004:	5b                   	pop    ebx
c000e005:	5e                   	pop    esi
c000e006:	5f                   	pop    edi
c000e007:	5d                   	pop    ebp
c000e008:	c3                   	ret    
c000e009:	66 90                	xchg   ax,ax
c000e00b:	90                   	nop

c000e00c <ACPI::close(int, int, void*)>:
c000e00c:	83 ec 1c             	sub    esp,0x1c
c000e00f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e017:	74 0b                	je     c000e024 <ACPI::close(int, int, void*)+0x18>
c000e019:	b8 00 00 00 00       	mov    eax,0x0
c000e01e:	e9 9d 00 00 00       	jmp    c000e0c0 <ACPI::close(int, int, void*)+0xb4>
c000e023:	90                   	nop
c000e024:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e029:	75 29                	jne    c000e054 <ACPI::close(int, int, void*)+0x48>
c000e02b:	a1 a8 2f 02 c0       	mov    eax,ds:0xc0022fa8
c000e030:	85 c0                	test   eax,eax
c000e032:	74 08                	je     c000e03c <ACPI::close(int, int, void*)+0x30>
c000e034:	a1 a8 2f 02 c0       	mov    eax,ds:0xc0022fa8
c000e039:	ff d0                	call   eax
c000e03b:	90                   	nop
c000e03c:	83 ec 0c             	sub    esp,0xc
c000e03f:	68 a4 e3 01 c0       	push   0xc001e3a4
c000e044:	e8 46 25 00 00       	call   c001058f <KePanic(char const*)>
c000e049:	83 c4 10             	add    esp,0x10
c000e04c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e051:	eb 6d                	jmp    c000e0c0 <ACPI::close(int, int, void*)+0xb4>
c000e053:	90                   	nop
c000e054:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e059:	75 5d                	jne    c000e0b8 <ACPI::close(int, int, void*)+0xac>
c000e05b:	a1 a4 2f 02 c0       	mov    eax,ds:0xc0022fa4
c000e060:	85 c0                	test   eax,eax
c000e062:	74 08                	je     c000e06c <ACPI::close(int, int, void*)+0x60>
c000e064:	a1 a4 2f 02 c0       	mov    eax,ds:0xc0022fa4
c000e069:	ff d0                	call   eax
c000e06b:	90                   	nop
c000e06c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e071:	8d 76 00             	lea    esi,[esi+0x0]
c000e074:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e078:	25 ff 00 00 00       	and    eax,0xff
c000e07d:	83 e0 02             	and    eax,0x2
c000e080:	74 1e                	je     c000e0a0 <ACPI::close(int, int, void*)+0x94>
c000e082:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e089:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e08d:	89 c2                	mov    edx,eax
c000e08f:	ec                   	in     al,dx
c000e090:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e094:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e098:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e09c:	eb d6                	jmp    c000e074 <ACPI::close(int, int, void*)+0x68>
c000e09e:	66 90                	xchg   ax,ax
c000e0a0:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e0a7:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e0ac:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e0b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e0b4:	ee                   	out    dx,al
c000e0b5:	8d 76 00             	lea    esi,[esi+0x0]
c000e0b8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e0bd:	8d 76 00             	lea    esi,[esi+0x0]
c000e0c0:	83 c4 1c             	add    esp,0x1c
c000e0c3:	c3                   	ret    

c000e0c4 <findRSDP()>:
c000e0c4:	83 ec 1c             	sub    esp,0x1c
c000e0c7:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000e0cc:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e0d2:	83 e0 04             	and    eax,0x4
c000e0d5:	84 c0                	test   al,al
c000e0d7:	75 07                	jne    c000e0e0 <findRSDP()+0x1c>
c000e0d9:	b8 00 00 00 00       	mov    eax,0x0
c000e0de:	eb 70                	jmp    c000e150 <findRSDP()+0x8c>
c000e0e0:	a1 e8 09 02 c0       	mov    eax,ds:0xc00209e8
c000e0e5:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e0ea:	7f 1c                	jg     c000e108 <findRSDP()+0x44>
c000e0ec:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000e0f1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e0f7:	83 e2 fb             	and    edx,0xfffffffb
c000e0fa:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e100:	b8 00 00 00 00       	mov    eax,0x0
c000e105:	eb 49                	jmp    c000e150 <findRSDP()+0x8c>
c000e107:	90                   	nop
c000e108:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e110:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e118:	77 2e                	ja     c000e148 <findRSDP()+0x84>
c000e11a:	83 ec 04             	sub    esp,0x4
c000e11d:	6a 08                	push   0x8
c000e11f:	68 3f e4 01 c0       	push   0xc001e43f
c000e124:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e128:	e8 63 22 ff ff       	call   c0000390 <memcmp>
c000e12d:	83 c4 10             	add    esp,0x10
c000e130:	85 c0                	test   eax,eax
c000e132:	0f 94 c0             	sete   al
c000e135:	84 c0                	test   al,al
c000e137:	74 07                	je     c000e140 <findRSDP()+0x7c>
c000e139:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e13d:	eb 11                	jmp    c000e150 <findRSDP()+0x8c>
c000e13f:	90                   	nop
c000e140:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e145:	eb c9                	jmp    c000e110 <findRSDP()+0x4c>
c000e147:	90                   	nop
c000e148:	b8 00 00 00 00       	mov    eax,0x0
c000e14d:	8d 76 00             	lea    esi,[esi+0x0]
c000e150:	83 c4 1c             	add    esp,0x1c
c000e153:	c3                   	ret    

c000e154 <loadACPITables(unsigned char*)>:
c000e154:	57                   	push   edi
c000e155:	56                   	push   esi
c000e156:	53                   	push   ebx
c000e157:	83 ec 60             	sub    esp,0x60
c000e15a:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000e15f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e165:	83 e0 04             	and    eax,0x4
c000e168:	84 c0                	test   al,al
c000e16a:	0f 84 3c 02 00 00    	je     c000e3ac <loadACPITables(unsigned char*)+0x258>
c000e170:	a0 c0 31 02 c0       	mov    al,ds:0xc00231c0
c000e175:	84 c0                	test   al,al
c000e177:	74 77                	je     c000e1f0 <loadACPITables(unsigned char*)+0x9c>
c000e179:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e17d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e181:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e185:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e188:	83 e8 24             	sub    eax,0x24
c000e18b:	c1 e8 03             	shr    eax,0x3
c000e18e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e192:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e19a:	66 90                	xchg   ax,ax
c000e19c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e1a0:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e1a4:	0f 8d b6 00 00 00    	jge    c000e260 <loadACPITables(unsigned char*)+0x10c>
c000e1aa:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e1ae:	83 c0 24             	add    eax,0x24
c000e1b1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e1b5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e1b9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e1bd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e1c1:	c1 e0 03             	shl    eax,0x3
c000e1c4:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e1c8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e1cc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e1cf:	8b 00                	mov    eax,DWORD PTR [eax]
c000e1d1:	89 c1                	mov    ecx,eax
c000e1d3:	a1 ac 2f 02 c0       	mov    eax,ds:0xc0022fac
c000e1d8:	8d 50 01             	lea    edx,[eax+0x1]
c000e1db:	89 15 ac 2f 02 c0    	mov    DWORD PTR ds:0xc0022fac,edx
c000e1e1:	89 ca                	mov    edx,ecx
c000e1e3:	89 14 c5 c4 2f 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd03c],edx
c000e1ea:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000e1ee:	eb ac                	jmp    c000e19c <loadACPITables(unsigned char*)+0x48>
c000e1f0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e1f4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e1f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e1fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e1ff:	83 e8 24             	sub    eax,0x24
c000e202:	c1 e8 02             	shr    eax,0x2
c000e205:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e209:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e211:	8d 76 00             	lea    esi,[esi+0x0]
c000e214:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e218:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e21c:	7d 42                	jge    c000e260 <loadACPITables(unsigned char*)+0x10c>
c000e21e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e222:	83 c0 24             	add    eax,0x24
c000e225:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e229:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e22d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e231:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e235:	c1 e0 02             	shl    eax,0x2
c000e238:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e23c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e240:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e242:	a1 ac 2f 02 c0       	mov    eax,ds:0xc0022fac
c000e247:	8d 50 01             	lea    edx,[eax+0x1]
c000e24a:	89 15 ac 2f 02 c0    	mov    DWORD PTR ds:0xc0022fac,edx
c000e250:	89 ca                	mov    edx,ecx
c000e252:	89 14 c5 c4 2f 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd03c],edx
c000e259:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000e25d:	eb b5                	jmp    c000e214 <loadACPITables(unsigned char*)+0xc0>
c000e25f:	90                   	nop
c000e260:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e268:	a1 ac 2f 02 c0       	mov    eax,ds:0xc0022fac
c000e26d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e271:	0f 8d 39 01 00 00    	jge    c000e3b0 <loadACPITables(unsigned char*)+0x25c>
c000e277:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e27b:	8b 04 c5 c4 2f 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd03c]
c000e282:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e286:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e28a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e28e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e292:	25 ff 0f 00 00       	and    eax,0xfff
c000e297:	89 c6                	mov    esi,eax
c000e299:	8b 1d b0 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ab0
c000e29f:	83 ec 0c             	sub    esp,0xc
c000e2a2:	6a 01                	push   0x1
c000e2a4:	e8 30 b4 ff ff       	call   c00096d9 <Virt::allocateKernelVirtualPages(int)>
c000e2a9:	83 c4 10             	add    esp,0x10
c000e2ac:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e2b0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e2b6:	83 ec 0c             	sub    esp,0xc
c000e2b9:	6a 01                	push   0x1
c000e2bb:	6a 01                	push   0x1
c000e2bd:	50                   	push   eax
c000e2be:	52                   	push   edx
c000e2bf:	53                   	push   ebx
c000e2c0:	e8 a3 bd ff ff       	call   c000a068 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e2c5:	83 c4 20             	add    esp,0x20
c000e2c8:	09 f0                	or     eax,esi
c000e2ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e2ce:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e2d2:	c1 e0 03             	shl    eax,0x3
c000e2d5:	05 c0 2f 02 c0       	add    eax,0xc0022fc0
c000e2da:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e2de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e2e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2e6:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e2ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e2f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e2fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e2fe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e302:	89 c6                	mov    esi,eax
c000e304:	89 d7                	mov    edi,edx
c000e306:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e308:	89 c8                	mov    eax,ecx
c000e30a:	89 fa                	mov    edx,edi
c000e30c:	89 f3                	mov    ebx,esi
c000e30e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e312:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e316:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e31a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e31e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e321:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e325:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e329:	05 00 10 00 00       	add    eax,0x1000
c000e32e:	c1 e8 0c             	shr    eax,0xc
c000e331:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e335:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e339:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e33d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e341:	25 ff 0f 00 00       	and    eax,0xfff
c000e346:	89 c6                	mov    esi,eax
c000e348:	8b 1d b0 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ab0
c000e34e:	83 ec 0c             	sub    esp,0xc
c000e351:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e355:	e8 7f b3 ff ff       	call   c00096d9 <Virt::allocateKernelVirtualPages(int)>
c000e35a:	83 c4 10             	add    esp,0x10
c000e35d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e361:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e367:	83 ec 0c             	sub    esp,0xc
c000e36a:	6a 01                	push   0x1
c000e36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e370:	50                   	push   eax
c000e371:	52                   	push   edx
c000e372:	53                   	push   ebx
c000e373:	e8 f0 bc ff ff       	call   c000a068 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e378:	83 c4 20             	add    esp,0x20
c000e37b:	09 f0                	or     eax,esi
c000e37d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e381:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e385:	83 ec 0c             	sub    esp,0xc
c000e388:	50                   	push   eax
c000e389:	e8 7b b6 ff ff       	call   c0009a09 <Virt::freeKernelVirtualPages(unsigned long)>
c000e38e:	83 c4 10             	add    esp,0x10
c000e391:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e395:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e399:	89 14 c5 c4 2f 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd03c],edx
c000e3a0:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e3a4:	e9 bf fe ff ff       	jmp    c000e268 <loadACPITables(unsigned char*)+0x114>
c000e3a9:	8d 76 00             	lea    esi,[esi+0x0]
c000e3ac:	90                   	nop
c000e3ad:	8d 76 00             	lea    esi,[esi+0x0]
c000e3b0:	83 c4 60             	add    esp,0x60
c000e3b3:	5b                   	pop    ebx
c000e3b4:	5e                   	pop    esi
c000e3b5:	5f                   	pop    edi
c000e3b6:	c3                   	ret    
c000e3b7:	90                   	nop

c000e3b8 <findRSDT(unsigned char*)>:
c000e3b8:	57                   	push   edi
c000e3b9:	56                   	push   esi
c000e3ba:	53                   	push   ebx
c000e3bb:	83 ec 50             	sub    esp,0x50
c000e3be:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000e3c3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e3c9:	83 e0 04             	and    eax,0x4
c000e3cc:	84 c0                	test   al,al
c000e3ce:	75 0c                	jne    c000e3dc <findRSDT(unsigned char*)+0x24>
c000e3d0:	b8 00 00 00 00       	mov    eax,0x0
c000e3d5:	e9 26 01 00 00       	jmp    c000e500 <findRSDT(unsigned char*)+0x148>
c000e3da:	66 90                	xchg   ax,ax
c000e3dc:	89 e0                	mov    eax,esp
c000e3de:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e3e2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e3e6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e3ea:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e3f2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e3f6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e3fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e3fe:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e402:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e406:	89 c6                	mov    esi,eax
c000e408:	89 d7                	mov    edi,edx
c000e40a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e40c:	89 c8                	mov    eax,ecx
c000e40e:	89 fa                	mov    edx,edi
c000e410:	89 f3                	mov    ebx,esi
c000e412:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e416:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e41a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e41e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e422:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e426:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e42e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e432:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e436:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e43a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e43e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e442:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e446:	25 ff 0f 00 00       	and    eax,0xfff
c000e44b:	89 c6                	mov    esi,eax
c000e44d:	8b 1d b0 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ab0
c000e453:	83 ec 0c             	sub    esp,0xc
c000e456:	6a 02                	push   0x2
c000e458:	e8 7c b2 ff ff       	call   c00096d9 <Virt::allocateKernelVirtualPages(int)>
c000e45d:	83 c4 10             	add    esp,0x10
c000e460:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e464:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e46a:	83 ec 0c             	sub    esp,0xc
c000e46d:	6a 01                	push   0x1
c000e46f:	6a 02                	push   0x2
c000e471:	50                   	push   eax
c000e472:	52                   	push   edx
c000e473:	53                   	push   ebx
c000e474:	e8 ef bb ff ff       	call   c000a068 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e479:	83 c4 20             	add    esp,0x20
c000e47c:	09 f0                	or     eax,esi
c000e47e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e482:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e486:	25 ff 0f 00 00       	and    eax,0xfff
c000e48b:	89 c6                	mov    esi,eax
c000e48d:	8b 1d b0 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ab0
c000e493:	83 ec 0c             	sub    esp,0xc
c000e496:	6a 02                	push   0x2
c000e498:	e8 3c b2 ff ff       	call   c00096d9 <Virt::allocateKernelVirtualPages(int)>
c000e49d:	83 c4 10             	add    esp,0x10
c000e4a0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e4a4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e4aa:	83 ec 0c             	sub    esp,0xc
c000e4ad:	6a 01                	push   0x1
c000e4af:	6a 02                	push   0x2
c000e4b1:	50                   	push   eax
c000e4b2:	52                   	push   edx
c000e4b3:	53                   	push   ebx
c000e4b4:	e8 af bb ff ff       	call   c000a068 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e4b9:	83 c4 20             	add    esp,0x20
c000e4bc:	09 f0                	or     eax,esi
c000e4be:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e4c2:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e4c7:	75 13                	jne    c000e4dc <findRSDT(unsigned char*)+0x124>
c000e4c9:	c6 05 c0 31 02 c0 00 	mov    BYTE PTR ds:0xc00231c0,0x0
c000e4d0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e4d4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e4d8:	eb 22                	jmp    c000e4fc <findRSDT(unsigned char*)+0x144>
c000e4da:	66 90                	xchg   ax,ax
c000e4dc:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e4e1:	75 11                	jne    c000e4f4 <findRSDT(unsigned char*)+0x13c>
c000e4e3:	c6 05 c0 31 02 c0 01 	mov    BYTE PTR ds:0xc00231c0,0x1
c000e4ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e4ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e4f2:	eb 08                	jmp    c000e4fc <findRSDT(unsigned char*)+0x144>
c000e4f4:	b8 00 00 00 00       	mov    eax,0x0
c000e4f9:	eb 05                	jmp    c000e500 <findRSDT(unsigned char*)+0x148>
c000e4fb:	90                   	nop
c000e4fc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e500:	83 c4 50             	add    esp,0x50
c000e503:	5b                   	pop    ebx
c000e504:	5e                   	pop    esi
c000e505:	5f                   	pop    edi
c000e506:	c3                   	ret    
c000e507:	90                   	nop

c000e508 <findDataTable(unsigned char*, char*)>:
c000e508:	83 ec 1c             	sub    esp,0x1c
c000e50b:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000e510:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e516:	83 e0 04             	and    eax,0x4
c000e519:	84 c0                	test   al,al
c000e51b:	75 07                	jne    c000e524 <findDataTable(unsigned char*, char*)+0x1c>
c000e51d:	b8 00 00 00 00       	mov    eax,0x0
c000e522:	eb 58                	jmp    c000e57c <findDataTable(unsigned char*, char*)+0x74>
c000e524:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e52c:	a1 ac 2f 02 c0       	mov    eax,ds:0xc0022fac
c000e531:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e535:	7d 3d                	jge    c000e574 <findDataTable(unsigned char*, char*)+0x6c>
c000e537:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e53b:	c1 e0 03             	shl    eax,0x3
c000e53e:	05 c0 2f 02 c0       	add    eax,0xc0022fc0
c000e543:	83 ec 04             	sub    esp,0x4
c000e546:	6a 04                	push   0x4
c000e548:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e54c:	50                   	push   eax
c000e54d:	e8 3e 1e ff ff       	call   c0000390 <memcmp>
c000e552:	83 c4 10             	add    esp,0x10
c000e555:	85 c0                	test   eax,eax
c000e557:	0f 94 c0             	sete   al
c000e55a:	84 c0                	test   al,al
c000e55c:	74 0e                	je     c000e56c <findDataTable(unsigned char*, char*)+0x64>
c000e55e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e562:	8b 04 c5 c4 2f 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd03c]
c000e569:	eb 11                	jmp    c000e57c <findDataTable(unsigned char*, char*)+0x74>
c000e56b:	90                   	nop
c000e56c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e570:	eb ba                	jmp    c000e52c <findDataTable(unsigned char*, char*)+0x24>
c000e572:	66 90                	xchg   ax,ax
c000e574:	b8 00 00 00 00       	mov    eax,0x0
c000e579:	8d 76 00             	lea    esi,[esi+0x0]
c000e57c:	83 c4 1c             	add    esp,0x1c
c000e57f:	c3                   	ret    

c000e580 <scanMADT()>:
c000e580:	53                   	push   ebx
c000e581:	83 ec 38             	sub    esp,0x38
c000e584:	a1 d0 09 02 c0       	mov    eax,ds:0xc00209d0
c000e589:	25 00 04 00 00       	and    eax,0x400
c000e58e:	74 14                	je     c000e5a4 <scanMADT()+0x24>
c000e590:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000e595:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e59b:	83 e2 fb             	and    edx,0xfffffffb
c000e59e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e5a4:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000e5a9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e5af:	83 e0 04             	and    eax,0x4
c000e5b2:	84 c0                	test   al,al
c000e5b4:	0f 84 8a 04 00 00    	je     c000ea44 <scanMADT()+0x4c4>
c000e5ba:	e8 05 fb ff ff       	call   c000e0c4 <findRSDP()>
c000e5bf:	a3 cc 31 02 c0       	mov    ds:0xc00231cc,eax
c000e5c4:	a1 cc 31 02 c0       	mov    eax,ds:0xc00231cc
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	75 1b                	jne    c000e5e8 <scanMADT()+0x68>
c000e5cd:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000e5d2:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e5d8:	83 e2 fb             	and    edx,0xfffffffb
c000e5db:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e5e1:	e9 66 04 00 00       	jmp    c000ea4c <scanMADT()+0x4cc>
c000e5e6:	66 90                	xchg   ax,ax
c000e5e8:	a1 cc 31 02 c0       	mov    eax,ds:0xc00231cc
c000e5ed:	83 ec 0c             	sub    esp,0xc
c000e5f0:	50                   	push   eax
c000e5f1:	e8 c2 fd ff ff       	call   c000e3b8 <findRSDT(unsigned char*)>
c000e5f6:	83 c4 10             	add    esp,0x10
c000e5f9:	a3 c8 31 02 c0       	mov    ds:0xc00231c8,eax
c000e5fe:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c000e603:	85 c0                	test   eax,eax
c000e605:	75 19                	jne    c000e620 <scanMADT()+0xa0>
c000e607:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000e60c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e612:	83 e2 fb             	and    edx,0xfffffffb
c000e615:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e61b:	e9 2c 04 00 00       	jmp    c000ea4c <scanMADT()+0x4cc>
c000e620:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c000e625:	83 ec 0c             	sub    esp,0xc
c000e628:	50                   	push   eax
c000e629:	e8 26 fb ff ff       	call   c000e154 <loadACPITables(unsigned char*)>
c000e62e:	83 c4 10             	add    esp,0x10
c000e631:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c000e636:	83 ec 08             	sub    esp,0x8
c000e639:	68 48 e4 01 c0       	push   0xc001e448
c000e63e:	50                   	push   eax
c000e63f:	e8 c4 fe ff ff       	call   c000e508 <findDataTable(unsigned char*, char*)>
c000e644:	83 c4 10             	add    esp,0x10
c000e647:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e64b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e650:	75 1a                	jne    c000e66c <scanMADT()+0xec>
c000e652:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000e657:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e65d:	83 e2 fe             	and    edx,0xfffffffe
c000e660:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e666:	e9 e1 03 00 00       	jmp    c000ea4c <scanMADT()+0x4cc>
c000e66b:	90                   	nop
c000e66c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e674:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e678:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e67b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e67f:	0f 87 c7 03 00 00    	ja     c000ea4c <scanMADT()+0x4cc>
c000e685:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e68d:	0f 87 b9 03 00 00    	ja     c000ea4c <scanMADT()+0x4cc>
c000e693:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e697:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e69b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e69f:	8d 50 01             	lea    edx,[eax+0x1]
c000e6a2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e6a6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6aa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e6ae:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e6b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6b6:	8d 50 01             	lea    edx,[eax+0x1]
c000e6b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e6bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6c1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e6c5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e6c9:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e6ce:	0f 86 74 03 00 00    	jbe    c000ea48 <scanMADT()+0x4c8>
c000e6d4:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e6d9:	75 5d                	jne    c000e738 <scanMADT()+0x1b8>
c000e6db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6df:	8d 50 01             	lea    edx,[eax+0x1]
c000e6e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e6e6:	8a 15 c0 33 02 c0    	mov    dl,BYTE PTR ds:0xc00233c0
c000e6ec:	81 e2 ff 00 00 00    	and    edx,0xff
c000e6f2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e6f6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e6fa:	88 82 00 34 02 c0    	mov    BYTE PTR [edx-0x3ffdcc00],al
c000e700:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e704:	8d 42 01             	lea    eax,[edx+0x1]
c000e707:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e70b:	a0 c0 33 02 c0       	mov    al,ds:0xc00233c0
c000e710:	8d 48 01             	lea    ecx,[eax+0x1]
c000e713:	88 0d c0 33 02 c0    	mov    BYTE PTR ds:0xc00233c0,cl
c000e719:	25 ff 00 00 00       	and    eax,0xff
c000e71e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e722:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e726:	88 90 e0 33 02 c0    	mov    BYTE PTR [eax-0x3ffdcc20],dl
c000e72c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e731:	e9 f6 02 00 00       	jmp    c000ea2c <scanMADT()+0x4ac>
c000e736:	66 90                	xchg   ax,ax
c000e738:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e73d:	0f 85 29 01 00 00    	jne    c000e86c <scanMADT()+0x2ec>
c000e743:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e747:	8d 50 01             	lea    edx,[eax+0x1]
c000e74a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e74e:	8a 15 80 32 02 c0    	mov    dl,BYTE PTR ds:0xc0023280
c000e754:	81 e2 ff 00 00 00    	and    edx,0xff
c000e75a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e75e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e762:	88 82 a0 32 02 c0    	mov    BYTE PTR [edx-0x3ffdcd60],al
c000e768:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e76c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e770:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e774:	01 d0                	add    eax,edx
c000e776:	83 c0 2c             	add    eax,0x2c
c000e779:	8a 00                	mov    al,BYTE PTR [eax]
c000e77b:	31 d2                	xor    edx,edx
c000e77d:	88 c2                	mov    dl,al
c000e77f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e783:	8d 48 01             	lea    ecx,[eax+0x1]
c000e786:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e78a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e78e:	25 ff 00 00 00       	and    eax,0xff
c000e793:	c1 e0 08             	shl    eax,0x8
c000e796:	89 d1                	mov    ecx,edx
c000e798:	09 c1                	or     ecx,eax
c000e79a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e79e:	8d 50 02             	lea    edx,[eax+0x2]
c000e7a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e7a5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e7a9:	25 ff 00 00 00       	and    eax,0xff
c000e7ae:	c1 e0 10             	shl    eax,0x10
c000e7b1:	09 c1                	or     ecx,eax
c000e7b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e7b7:	8d 50 03             	lea    edx,[eax+0x3]
c000e7ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e7be:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e7c2:	25 ff 00 00 00       	and    eax,0xff
c000e7c7:	c1 e0 18             	shl    eax,0x18
c000e7ca:	09 c1                	or     ecx,eax
c000e7cc:	89 ca                	mov    edx,ecx
c000e7ce:	a0 80 32 02 c0       	mov    al,ds:0xc0023280
c000e7d3:	25 ff 00 00 00       	and    eax,0xff
c000e7d8:	89 14 85 c0 32 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcd40],edx
c000e7df:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e7e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e7e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e7ec:	01 d0                	add    eax,edx
c000e7ee:	83 c0 2c             	add    eax,0x2c
c000e7f1:	8a 00                	mov    al,BYTE PTR [eax]
c000e7f3:	31 d2                	xor    edx,edx
c000e7f5:	88 c2                	mov    dl,al
c000e7f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e7fb:	8d 48 01             	lea    ecx,[eax+0x1]
c000e7fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e802:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e806:	25 ff 00 00 00       	and    eax,0xff
c000e80b:	c1 e0 08             	shl    eax,0x8
c000e80e:	89 d1                	mov    ecx,edx
c000e810:	09 c1                	or     ecx,eax
c000e812:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e816:	8d 50 02             	lea    edx,[eax+0x2]
c000e819:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e81d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e821:	25 ff 00 00 00       	and    eax,0xff
c000e826:	c1 e0 10             	shl    eax,0x10
c000e829:	09 c1                	or     ecx,eax
c000e82b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e82f:	8d 50 03             	lea    edx,[eax+0x3]
c000e832:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e836:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e83a:	25 ff 00 00 00       	and    eax,0xff
c000e83f:	c1 e0 18             	shl    eax,0x18
c000e842:	09 c1                	or     ecx,eax
c000e844:	89 ca                	mov    edx,ecx
c000e846:	a0 80 32 02 c0       	mov    al,ds:0xc0023280
c000e84b:	25 ff 00 00 00       	and    eax,0xff
c000e850:	89 14 85 40 33 02 c0 	mov    DWORD PTR [eax*4-0x3ffdccc0],edx
c000e857:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e85c:	a0 80 32 02 c0       	mov    al,ds:0xc0023280
c000e861:	40                   	inc    eax
c000e862:	a2 80 32 02 c0       	mov    ds:0xc0023280,al
c000e867:	e9 c0 01 00 00       	jmp    c000ea2c <scanMADT()+0x4ac>
c000e86c:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e871:	0f 85 fd 00 00 00    	jne    c000e974 <scanMADT()+0x3f4>
c000e877:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e87b:	8d 50 01             	lea    edx,[eax+0x1]
c000e87e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e882:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e886:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e88a:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e88e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e892:	8d 50 01             	lea    edx,[eax+0x1]
c000e895:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e899:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e89d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e8a1:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e8a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e8a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e8ad:	01 d0                	add    eax,edx
c000e8af:	83 c0 2c             	add    eax,0x2c
c000e8b2:	8a 00                	mov    al,BYTE PTR [eax]
c000e8b4:	31 d2                	xor    edx,edx
c000e8b6:	88 c2                	mov    dl,al
c000e8b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e8bc:	8d 48 01             	lea    ecx,[eax+0x1]
c000e8bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e8c3:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e8c7:	25 ff 00 00 00       	and    eax,0xff
c000e8cc:	c1 e0 08             	shl    eax,0x8
c000e8cf:	89 d1                	mov    ecx,edx
c000e8d1:	09 c1                	or     ecx,eax
c000e8d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e8d7:	8d 50 02             	lea    edx,[eax+0x2]
c000e8da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e8de:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e8e2:	25 ff 00 00 00       	and    eax,0xff
c000e8e7:	c1 e0 10             	shl    eax,0x10
c000e8ea:	09 c1                	or     ecx,eax
c000e8ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e8f0:	8d 50 03             	lea    edx,[eax+0x3]
c000e8f3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e8f7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e8fb:	25 ff 00 00 00       	and    eax,0xff
c000e900:	c1 e0 18             	shl    eax,0x18
c000e903:	09 c8                	or     eax,ecx
c000e905:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e909:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e90e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e912:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e916:	01 d0                	add    eax,edx
c000e918:	83 c0 2c             	add    eax,0x2c
c000e91b:	8a 00                	mov    al,BYTE PTR [eax]
c000e91d:	25 ff 00 00 00       	and    eax,0xff
c000e922:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e926:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e929:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e92d:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e931:	81 e2 ff 00 00 00    	and    edx,0xff
c000e937:	c1 e2 08             	shl    edx,0x8
c000e93a:	09 d0                	or     eax,edx
c000e93c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e941:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e946:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e94a:	25 ff 00 00 00       	and    eax,0xff
c000e94f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e953:	88 90 c0 f7 01 c0    	mov    BYTE PTR [eax-0x3ffe0840],dl
c000e959:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e95d:	31 d2                	xor    edx,edx
c000e95f:	88 c2                	mov    dl,al
c000e961:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e966:	66 89 84 12 60 32 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdcda0],ax
c000e96e:	e9 b9 00 00 00       	jmp    c000ea2c <scanMADT()+0x4ac>
c000e973:	90                   	nop
c000e974:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e979:	0f 85 a1 00 00 00    	jne    c000ea20 <scanMADT()+0x4a0>
c000e97f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e983:	8d 50 01             	lea    edx,[eax+0x1]
c000e986:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e98a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e98e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e992:	25 ff 00 00 00       	and    eax,0xff
c000e997:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e99b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e99f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9a3:	01 d0                	add    eax,edx
c000e9a5:	83 c0 2c             	add    eax,0x2c
c000e9a8:	8a 00                	mov    al,BYTE PTR [eax]
c000e9aa:	31 d2                	xor    edx,edx
c000e9ac:	88 c2                	mov    dl,al
c000e9ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9b2:	8d 48 01             	lea    ecx,[eax+0x1]
c000e9b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e9b9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e9bd:	25 ff 00 00 00       	and    eax,0xff
c000e9c2:	c1 e0 08             	shl    eax,0x8
c000e9c5:	09 d0                	or     eax,edx
c000e9c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e9cb:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e9d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9d4:	8d 50 01             	lea    edx,[eax+0x1]
c000e9d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9db:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e9df:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e9e3:	25 ff 00 00 00       	and    eax,0xff
c000e9e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9f0:	c1 e0 08             	shl    eax,0x8
c000e9f3:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e9f7:	89 c1                	mov    ecx,eax
c000e9f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9fd:	c1 e0 18             	shl    eax,0x18
c000ea00:	89 c3                	mov    ebx,eax
c000ea02:	a1 d0 31 02 c0       	mov    eax,ds:0xc00231d0
c000ea07:	8d 50 01             	lea    edx,[eax+0x1]
c000ea0a:	89 15 d0 31 02 c0    	mov    DWORD PTR ds:0xc00231d0,edx
c000ea10:	09 d9                	or     ecx,ebx
c000ea12:	89 ca                	mov    edx,ecx
c000ea14:	89 14 85 e0 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdce20],edx
c000ea1b:	eb 0f                	jmp    c000ea2c <scanMADT()+0x4ac>
c000ea1d:	8d 76 00             	lea    esi,[esi+0x0]
c000ea20:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000ea25:	75 05                	jne    c000ea2c <scanMADT()+0x4ac>
c000ea27:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ea2c:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000ea30:	31 d2                	xor    edx,edx
c000ea32:	88 c2                	mov    dl,al
c000ea34:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ea38:	01 d0                	add    eax,edx
c000ea3a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ea3e:	e9 31 fc ff ff       	jmp    c000e674 <scanMADT()+0xf4>
c000ea43:	90                   	nop
c000ea44:	90                   	nop
c000ea45:	eb 05                	jmp    c000ea4c <scanMADT()+0x4cc>
c000ea47:	90                   	nop
c000ea48:	90                   	nop
c000ea49:	8d 76 00             	lea    esi,[esi+0x0]
c000ea4c:	83 c4 38             	add    esp,0x38
c000ea4f:	5b                   	pop    ebx
c000ea50:	c3                   	ret    
c000ea51:	90                   	nop
c000ea52:	66 90                	xchg   ax,ax

c000ea54 <ACPI::ACPI()>:
c000ea54:	83 ec 0c             	sub    esp,0xc
c000ea57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea5b:	83 ec 08             	sub    esp,0x8
c000ea5e:	68 4d e4 01 c0       	push   0xc001e44d
c000ea63:	50                   	push   eax
c000ea64:	e8 9b d4 ff ff       	call   c000bf04 <Device::Device(char const*)>
c000ea69:	83 c4 10             	add    esp,0x10
c000ea6c:	ba 84 e5 01 c0       	mov    edx,0xc001e584
c000ea71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea75:	89 10                	mov    DWORD PTR [eax],edx
c000ea77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea7b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ea82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea86:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ea90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea94:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000ea9e:	e8 dd fa ff ff       	call   c000e580 <scanMADT()>
c000eaa3:	90                   	nop
c000eaa4:	83 c4 0c             	add    esp,0xc
c000eaa7:	c3                   	ret    

c000eaa8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000eaa8:	83 ec 2c             	sub    esp,0x2c
c000eaab:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eaaf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eab3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000eab7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000eabb:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000eac0:	88 d0                	mov    al,dl
c000eac2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000eac6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000eacb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ead3:	90                   	nop
c000ead4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ead8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eade:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000eae2:	0f 8d 9c 00 00 00    	jge    c000eb84 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000eae8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eaec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eaf0:	83 c2 2a             	add    edx,0x2a
c000eaf3:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000eaf7:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000eafc:	75 7a                	jne    c000eb78 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000eafe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eb02:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eb06:	83 c2 2a             	add    edx,0x2a
c000eb09:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000eb0d:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000eb11:	75 65                	jne    c000eb78 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000eb13:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000eb18:	74 3a                	je     c000eb54 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000eb1a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eb1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eb22:	83 c2 2a             	add    edx,0x2a
c000eb25:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000eb29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb2d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000eb30:	39 c2                	cmp    edx,eax
c000eb32:	74 10                	je     c000eb44 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000eb34:	83 ec 0c             	sub    esp,0xc
c000eb37:	68 c8 e3 01 c0       	push   0xc001e3c8
c000eb3c:	e8 4e 1a 00 00       	call   c001058f <KePanic(char const*)>
c000eb41:	83 c4 10             	add    esp,0x10
c000eb44:	83 ec 0c             	sub    esp,0xc
c000eb47:	68 52 e4 01 c0       	push   0xc001e452
c000eb4c:	e8 3e 1a 00 00       	call   c001058f <KePanic(char const*)>
c000eb51:	83 c4 10             	add    esp,0x10
c000eb54:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000eb58:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eb5c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eb60:	83 c2 2a             	add    edx,0x2a
c000eb63:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000eb67:	8b 02                	mov    eax,DWORD PTR [edx]
c000eb69:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000eb6c:	89 01                	mov    DWORD PTR [ecx],eax
c000eb6e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000eb71:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb76:	66 90                	xchg   ax,ax
c000eb78:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000eb7c:	e9 53 ff ff ff       	jmp    c000ead4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000eb81:	8d 76 00             	lea    esi,[esi+0x0]
c000eb84:	90                   	nop
c000eb85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb89:	83 c4 2c             	add    esp,0x2c
c000eb8c:	c2 04 00             	ret    0x4
c000eb8f:	90                   	nop

c000eb90 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000eb90:	83 ec 1c             	sub    esp,0x1c
c000eb93:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb97:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000eb9b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000eb9f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000eba4:	88 c8                	mov    al,cl
c000eba6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ebaa:	88 d0                	mov    al,dl
c000ebac:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ebb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ebb4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ebba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ebbe:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ebc1:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000ebc5:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000ebc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ebcd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ebd3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ebd7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000ebda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ebde:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000ebe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ebe7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ebed:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000ebf1:	8d 48 01             	lea    ecx,[eax+0x1]
c000ebf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ebf8:	83 c2 2a             	add    edx,0x2a
c000ebfb:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ebff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec03:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ec09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec0d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ec10:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ec14:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ec18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec1c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ec22:	8d 50 01             	lea    edx,[eax+0x1]
c000ec25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec29:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ec2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec33:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ec39:	3d 00 02 00 00       	cmp    eax,0x200
c000ec3e:	75 10                	jne    c000ec50 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000ec40:	83 ec 0c             	sub    esp,0xc
c000ec43:	68 61 e4 01 c0       	push   0xc001e461
c000ec48:	e8 42 19 00 00       	call   c001058f <KePanic(char const*)>
c000ec4d:	83 c4 10             	add    esp,0x10
c000ec50:	90                   	nop
c000ec51:	83 c4 1c             	add    esp,0x1c
c000ec54:	c3                   	ret    
c000ec55:	90                   	nop
c000ec56:	66 90                	xchg   ax,ax

c000ec58 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ec58:	b8 00 00 00 00       	mov    eax,0x0
c000ec5d:	c3                   	ret    
c000ec5e:	66 90                	xchg   ax,ax

c000ec60 <ACPI::detectPCI()>:
c000ec60:	53                   	push   ebx
c000ec61:	83 ec 28             	sub    esp,0x28
c000ec64:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ec69:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ec6e:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000ec73:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ec79:	83 e0 04             	and    eax,0x4
c000ec7c:	84 c0                	test   al,al
c000ec7e:	74 2c                	je     c000ecac <ACPI::detectPCI()+0x4c>
c000ec80:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c000ec85:	83 ec 08             	sub    esp,0x8
c000ec88:	68 7e e4 01 c0       	push   0xc001e47e
c000ec8d:	50                   	push   eax
c000ec8e:	e8 75 f8 ff ff       	call   c000e508 <findDataTable(unsigned char*, char*)>
c000ec93:	83 c4 10             	add    esp,0x10
c000ec96:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ec9a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ec9f:	74 0b                	je     c000ecac <ACPI::detectPCI()+0x4c>
c000eca1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eca6:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ecab:	90                   	nop
c000ecac:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ecb4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ecb8:	8a 00                	mov    al,BYTE PTR [eax]
c000ecba:	3c 01                	cmp    al,0x1
c000ecbc:	75 0e                	jne    c000eccc <ACPI::detectPCI()+0x6c>
c000ecbe:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ecc3:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ecc8:	eb 2a                	jmp    c000ecf4 <ACPI::detectPCI()+0x94>
c000ecca:	66 90                	xchg   ax,ax
c000eccc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ecd0:	8a 00                	mov    al,BYTE PTR [eax]
c000ecd2:	3c 02                	cmp    al,0x2
c000ecd4:	75 1e                	jne    c000ecf4 <ACPI::detectPCI()+0x94>
c000ecd6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ecdb:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ece0:	74 12                	je     c000ecf4 <ACPI::detectPCI()+0x94>
c000ece2:	83 ec 0c             	sub    esp,0xc
c000ece5:	68 f8 e3 01 c0       	push   0xc001e3f8
c000ecea:	e8 a0 18 00 00       	call   c001058f <KePanic(char const*)>
c000ecef:	83 c4 10             	add    esp,0x10
c000ecf2:	66 90                	xchg   ax,ax
c000ecf4:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000ecf8:	83 f0 01             	xor    eax,0x1
c000ecfb:	84 c0                	test   al,al
c000ecfd:	74 41                	je     c000ed40 <ACPI::detectPCI()+0xe0>
c000ecff:	e8 2c 14 ff ff       	call   c0000130 <manualPCIProbe>
c000ed04:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ed08:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ed0d:	75 0d                	jne    c000ed1c <ACPI::detectPCI()+0xbc>
c000ed0f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ed14:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ed19:	eb 25                	jmp    c000ed40 <ACPI::detectPCI()+0xe0>
c000ed1b:	90                   	nop
c000ed1c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000ed21:	75 1d                	jne    c000ed40 <ACPI::detectPCI()+0xe0>
c000ed23:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ed28:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ed2d:	74 11                	je     c000ed40 <ACPI::detectPCI()+0xe0>
c000ed2f:	83 ec 0c             	sub    esp,0xc
c000ed32:	68 f8 e3 01 c0       	push   0xc001e3f8
c000ed37:	e8 53 18 00 00       	call   c001058f <KePanic(char const*)>
c000ed3c:	83 c4 10             	add    esp,0x10
c000ed3f:	90                   	nop
c000ed40:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000ed45:	0f 84 85 00 00 00    	je     c000edd0 <ACPI::detectPCI()+0x170>
c000ed4b:	83 ec 0c             	sub    esp,0xc
c000ed4e:	68 83 e4 01 c0       	push   0xc001e483
c000ed53:	e8 bf 11 00 00       	call   c000ff17 <KeSetBootMessage(char const*)>
c000ed58:	83 c4 10             	add    esp,0x10
c000ed5b:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000ed63:	83 ec 0c             	sub    esp,0xc
c000ed66:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ed6a:	e8 22 8f ff ff       	call   c0007c91 <malloc>
c000ed6f:	83 c4 10             	add    esp,0x10
c000ed72:	89 c3                	mov    ebx,eax
c000ed74:	83 ec 0c             	sub    esp,0xc
c000ed77:	53                   	push   ebx
c000ed78:	e8 f1 97 00 00       	call   c001856e <PCI::PCI()>
c000ed7d:	83 c4 10             	add    esp,0x10
c000ed80:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ed84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed88:	83 ec 08             	sub    esp,0x8
c000ed8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ed8f:	50                   	push   eax
c000ed90:	e8 d7 cf ff ff       	call   c000bd6c <Device::addChild(Device*)>
c000ed95:	83 c4 10             	add    esp,0x10
c000ed98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed9c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed9e:	83 c0 08             	add    eax,0x8
c000eda1:	8b 00                	mov    eax,DWORD PTR [eax]
c000eda3:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eda8:	74 0a                	je     c000edb4 <ACPI::detectPCI()+0x154>
c000edaa:	ba 01 00 00 00       	mov    edx,0x1
c000edaf:	eb 0b                	jmp    c000edbc <ACPI::detectPCI()+0x15c>
c000edb1:	8d 76 00             	lea    esi,[esi+0x0]
c000edb4:	ba 02 00 00 00       	mov    edx,0x2
c000edb9:	8d 76 00             	lea    esi,[esi+0x0]
c000edbc:	6a 00                	push   0x0
c000edbe:	6a 00                	push   0x0
c000edc0:	52                   	push   edx
c000edc1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000edc5:	ff d0                	call   eax
c000edc7:	83 c4 10             	add    esp,0x10
c000edca:	e9 91 00 00 00       	jmp    c000ee60 <ACPI::detectPCI()+0x200>
c000edcf:	90                   	nop
c000edd0:	83 ec 0c             	sub    esp,0xc
c000edd3:	68 9b e4 01 c0       	push   0xc001e49b
c000edd8:	e8 3a 11 00 00       	call   c000ff17 <KeSetBootMessage(char const*)>
c000eddd:	83 c4 10             	add    esp,0x10
c000ede0:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000ede7:	83 ec 0c             	sub    esp,0xc
c000edea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000edee:	e8 9e 8e ff ff       	call   c0007c91 <malloc>
c000edf3:	83 c4 10             	add    esp,0x10
c000edf6:	89 c3                	mov    ebx,eax
c000edf8:	83 ec 0c             	sub    esp,0xc
c000edfb:	53                   	push   ebx
c000edfc:	e8 99 a2 00 00       	call   c001909a <IDE::IDE()>
c000ee01:	83 c4 10             	add    esp,0x10
c000ee04:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ee08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee0c:	83 ec 08             	sub    esp,0x8
c000ee0f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ee13:	50                   	push   eax
c000ee14:	e8 53 cf ff ff       	call   c000bd6c <Device::addChild(Device*)>
c000ee19:	83 c4 10             	add    esp,0x10
c000ee1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee20:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000ee2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee2e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000ee37:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee3b:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000ee44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee48:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee4a:	83 c0 08             	add    eax,0x8
c000ee4d:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee4f:	6a 00                	push   0x0
c000ee51:	6a 00                	push   0x0
c000ee53:	6a 00                	push   0x0
c000ee55:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ee59:	ff d0                	call   eax
c000ee5b:	83 c4 10             	add    esp,0x10
c000ee5e:	66 90                	xchg   ax,ax
c000ee60:	90                   	nop
c000ee61:	83 c4 28             	add    esp,0x28
c000ee64:	5b                   	pop    ebx
c000ee65:	c3                   	ret    
c000ee66:	66 90                	xchg   ax,ax

c000ee68 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000ee68:	83 ec 1c             	sub    esp,0x1c
c000ee6b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ee6f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ee72:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ee76:	8b 15 b8 09 02 c0    	mov    edx,DWORD PTR ds:0xc00209b8
c000ee7c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ee80:	25 ff 00 00 00       	and    eax,0xff
c000ee85:	83 ec 08             	sub    esp,0x8
c000ee88:	50                   	push   eax
c000ee89:	52                   	push   edx
c000ee8a:	e8 ed 84 ff ff       	call   c000737c <Computer::readCMOS(unsigned char)>
c000ee8f:	83 c4 10             	add    esp,0x10
c000ee92:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ee96:	8b 15 b8 09 02 c0    	mov    edx,DWORD PTR ds:0xc00209b8
c000ee9c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eea0:	25 ff 00 00 00       	and    eax,0xff
c000eea5:	83 ec 04             	sub    esp,0x4
c000eea8:	6a 01                	push   0x1
c000eeaa:	50                   	push   eax
c000eeab:	52                   	push   edx
c000eeac:	e8 e1 85 ff ff       	call   c0007492 <Computer::writeCMOS(unsigned char, unsigned char)>
c000eeb1:	83 c4 10             	add    esp,0x10
c000eeb4:	90                   	nop
c000eeb5:	83 c4 1c             	add    esp,0x1c
c000eeb8:	c3                   	ret    
c000eeb9:	90                   	nop
c000eeba:	66 90                	xchg   ax,ax

c000eebc <ACPI::sleep()>:
c000eebc:	83 ec 0c             	sub    esp,0xc
c000eebf:	a1 a0 2f 02 c0       	mov    eax,ds:0xc0022fa0
c000eec4:	85 c0                	test   eax,eax
c000eec6:	74 08                	je     c000eed0 <ACPI::sleep()+0x14>
c000eec8:	a1 a0 2f 02 c0       	mov    eax,ds:0xc0022fa0
c000eecd:	ff d0                	call   eax
c000eecf:	90                   	nop
c000eed0:	90                   	nop
c000eed1:	83 c4 0c             	add    esp,0xc
c000eed4:	c3                   	ret    
c000eed5:	90                   	nop
c000eed6:	66 90                	xchg   ax,ax

c000eed8 <ACPI::open(int, int, void*)>:
c000eed8:	57                   	push   edi
c000eed9:	56                   	push   esi
c000eeda:	53                   	push   ebx
c000eedb:	81 ec 70 01 00 00    	sub    esp,0x170
c000eee1:	83 ec 0c             	sub    esp,0xc
c000eee4:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000eeeb:	e8 70 fd ff ff       	call   c000ec60 <ACPI::detectPCI()>
c000eef0:	83 c4 10             	add    esp,0x10
c000eef3:	83 ec 0c             	sub    esp,0xc
c000eef6:	68 20 e4 01 c0       	push   0xc001e420
c000eefb:	e8 17 10 00 00       	call   c000ff17 <KeSetBootMessage(char const*)>
c000ef00:	83 c4 10             	add    esp,0x10
c000ef03:	83 ec 0c             	sub    esp,0xc
c000ef06:	68 b0 e4 01 c0       	push   0xc001e4b0
c000ef0b:	e8 b2 35 00 00       	call   c00124c2 <Thr::loadKernelSymbolTable(char const*)>
c000ef10:	83 c4 10             	add    esp,0x10
c000ef13:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000ef1b:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000ef26:	83 ec 0c             	sub    esp,0xc
c000ef29:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ef30:	e8 5c 8d ff ff       	call   c0007c91 <malloc>
c000ef35:	83 c4 10             	add    esp,0x10
c000ef38:	89 c3                	mov    ebx,eax
c000ef3a:	a1 90 3e 02 c0       	mov    eax,ds:0xc0023e90
c000ef3f:	83 ec 04             	sub    esp,0x4
c000ef42:	50                   	push   eax
c000ef43:	68 ce e4 01 c0       	push   0xc001e4ce
c000ef48:	53                   	push   ebx
c000ef49:	e8 54 bf ff ff       	call   c000aea2 <File::File(char const*, Process*)>
c000ef4e:	83 c4 10             	add    esp,0x10
c000ef51:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000ef58:	83 ec 08             	sub    esp,0x8
c000ef5b:	6a 01                	push   0x1
c000ef5d:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ef64:	e8 f9 bf ff ff       	call   c000af62 <File::open(FileOpenMode)>
c000ef69:	83 c4 10             	add    esp,0x10
c000ef6c:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000ef73:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000ef7b:	75 17                	jne    c000ef94 <ACPI::open(int, int, void*)+0xbc>
c000ef7d:	83 ec 0c             	sub    esp,0xc
c000ef80:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ef87:	e8 34 c0 ff ff       	call   c000afc0 <File::close()>
c000ef8c:	83 c4 10             	add    esp,0x10
c000ef8f:	eb 0b                	jmp    c000ef9c <ACPI::open(int, int, void*)+0xc4>
c000ef91:	8d 76 00             	lea    esi,[esi+0x0]
c000ef94:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000ef9c:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000efa4:	74 1e                	je     c000efc4 <ACPI::open(int, int, void*)+0xec>
c000efa6:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000efad:	8b 00                	mov    eax,DWORD PTR [eax]
c000efaf:	83 c0 08             	add    eax,0x8
c000efb2:	8b 00                	mov    eax,DWORD PTR [eax]
c000efb4:	83 ec 0c             	sub    esp,0xc
c000efb7:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000efbe:	ff d0                	call   eax
c000efc0:	83 c4 10             	add    esp,0x10
c000efc3:	90                   	nop
c000efc4:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000efcb:	83 f0 01             	xor    eax,0x1
c000efce:	84 c0                	test   al,al
c000efd0:	74 42                	je     c000f014 <ACPI::open(int, int, void*)+0x13c>
c000efd2:	83 ec 0c             	sub    esp,0xc
c000efd5:	68 ec e4 01 c0       	push   0xc001e4ec
c000efda:	e8 38 0f 00 00       	call   c000ff17 <KeSetBootMessage(char const*)>
c000efdf:	83 c4 10             	add    esp,0x10
c000efe2:	83 ec 04             	sub    esp,0x4
c000efe5:	6a 0c                	push   0xc
c000efe7:	68 07 e5 01 c0       	push   0xc001e507
c000efec:	68 18 e5 01 c0       	push   0xc001e518
c000eff1:	e8 f7 2a 00 00       	call   c0011aed <Reg::readIntWithDefault(char*, char*, int)>
c000eff6:	83 c4 10             	add    esp,0x10
c000eff9:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000f000:	83 ec 0c             	sub    esp,0xc
c000f003:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000f00a:	e8 d4 a8 ff ff       	call   c00098e3 <Virt::setupPageSwapping(int)>
c000f00f:	83 c4 10             	add    esp,0x10
c000f012:	66 90                	xchg   ax,ax
c000f014:	83 ec 0c             	sub    esp,0xc
c000f017:	68 97 d5 01 c0       	push   0xc001d597
c000f01c:	e8 f6 0e 00 00       	call   c000ff17 <KeSetBootMessage(char const*)>
c000f021:	83 c4 10             	add    esp,0x10
c000f024:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000f02b:	83 ec 08             	sub    esp,0x8
c000f02e:	6a 12                	push   0x12
c000f030:	50                   	push   eax
c000f031:	e8 4e d0 ff ff       	call   c000c084 <getDevicesOfType(DeviceType)>
c000f036:	83 c4 0c             	add    esp,0xc
c000f039:	8d 76 00             	lea    esi,[esi+0x0]
c000f03c:	83 ec 0c             	sub    esp,0xc
c000f03f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f046:	50                   	push   eax
c000f047:	e8 a0 d9 00 00       	call   c001c9ec <LinkedList<Device>::isEmpty()>
c000f04c:	83 c4 10             	add    esp,0x10
c000f04f:	83 f0 01             	xor    eax,0x1
c000f052:	84 c0                	test   al,al
c000f054:	0f 84 46 01 00 00    	je     c000f1a0 <ACPI::open(int, int, void*)+0x2c8>
c000f05a:	83 ec 0c             	sub    esp,0xc
c000f05d:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f064:	50                   	push   eax
c000f065:	e8 9e d9 00 00       	call   c001ca08 <LinkedList<Device>::getFirstElement()>
c000f06a:	83 c4 10             	add    esp,0x10
c000f06d:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000f074:	83 ec 0c             	sub    esp,0xc
c000f077:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f07e:	50                   	push   eax
c000f07f:	e8 8c d9 00 00       	call   c001ca10 <LinkedList<Device>::removeFirst()>
c000f084:	83 c4 10             	add    esp,0x10
c000f087:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000f08e:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000f095:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000f09c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0a0:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000f0a6:	ba 09 00 00 00       	mov    edx,0x9
c000f0ab:	fc                   	cld    
c000f0ac:	89 c7                	mov    edi,eax
c000f0ae:	89 de                	mov    esi,ebx
c000f0b0:	89 d1                	mov    ecx,edx
c000f0b2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f0b4:	83 ec 08             	sub    esp,0x8
c000f0b7:	8d 44 24 38          	lea    eax,[esp+0x38]
c000f0bb:	50                   	push   eax
c000f0bc:	83 ec 24             	sub    esp,0x24
c000f0bf:	89 e0                	mov    eax,esp
c000f0c1:	89 c3                	mov    ebx,eax
c000f0c3:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000f0c7:	ba 09 00 00 00       	mov    edx,0x9
c000f0cc:	89 df                	mov    edi,ebx
c000f0ce:	89 c6                	mov    esi,eax
c000f0d0:	89 d1                	mov    ecx,edx
c000f0d2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f0d4:	e8 77 99 00 00       	call   c0018a50 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f0d9:	83 c4 30             	add    esp,0x30
c000f0dc:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000f0e3:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000f0eb:	0f 84 4b ff ff ff    	je     c000f03c <ACPI::open(int, int, void*)+0x164>
c000f0f1:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000f0fc:	83 ec 0c             	sub    esp,0xc
c000f0ff:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f106:	e8 86 8b ff ff       	call   c0007c91 <malloc>
c000f10b:	83 c4 10             	add    esp,0x10
c000f10e:	89 c3                	mov    ebx,eax
c000f110:	a1 90 3e 02 c0       	mov    eax,ds:0xc0023e90
c000f115:	83 ec 04             	sub    esp,0x4
c000f118:	50                   	push   eax
c000f119:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f120:	53                   	push   ebx
c000f121:	e8 7c bd ff ff       	call   c000aea2 <File::File(char const*, Process*)>
c000f126:	83 c4 10             	add    esp,0x10
c000f129:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000f130:	83 ec 0c             	sub    esp,0xc
c000f133:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f13a:	e8 91 c0 ff ff       	call   c000b1d0 <File::exists()>
c000f13f:	83 c4 10             	add    esp,0x10
c000f142:	84 c0                	test   al,al
c000f144:	74 2a                	je     c000f170 <ACPI::open(int, int, void*)+0x298>
c000f146:	83 ec 08             	sub    esp,0x8
c000f149:	6a 01                	push   0x1
c000f14b:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f152:	e8 e2 3d 00 00       	call   c0012f39 <Thr::loadDLL(char const*, bool)>
c000f157:	83 c4 10             	add    esp,0x10
c000f15a:	83 ec 08             	sub    esp,0x8
c000f15d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f164:	50                   	push   eax
c000f165:	e8 00 40 00 00       	call   c001316a <Thr::executeDLL(unsigned long, void*)>
c000f16a:	83 c4 10             	add    esp,0x10
c000f16d:	8d 76 00             	lea    esi,[esi+0x0]
c000f170:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000f178:	0f 84 be fe ff ff    	je     c000f03c <ACPI::open(int, int, void*)+0x164>
c000f17e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000f185:	8b 00                	mov    eax,DWORD PTR [eax]
c000f187:	83 c0 08             	add    eax,0x8
c000f18a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f18c:	83 ec 0c             	sub    esp,0xc
c000f18f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f196:	ff d0                	call   eax
c000f198:	83 c4 10             	add    esp,0x10
c000f19b:	e9 9c fe ff ff       	jmp    c000f03c <ACPI::open(int, int, void*)+0x164>
c000f1a0:	83 ec 0c             	sub    esp,0xc
c000f1a3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f1aa:	50                   	push   eax
c000f1ab:	e8 38 d8 00 00       	call   c001c9e8 <LinkedList<Device>::~LinkedList()>
c000f1b0:	83 c4 10             	add    esp,0x10
c000f1b3:	8b 1d b8 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209b8
c000f1b9:	83 ec 08             	sub    esp,0x8
c000f1bc:	6a 01                	push   0x1
c000f1be:	68 1f e5 01 c0       	push   0xc001e51f
c000f1c3:	e8 71 3d 00 00       	call   c0012f39 <Thr::loadDLL(char const*, bool)>
c000f1c8:	83 c4 10             	add    esp,0x10
c000f1cb:	83 ec 08             	sub    esp,0x8
c000f1ce:	53                   	push   ebx
c000f1cf:	50                   	push   eax
c000f1d0:	e8 95 3f 00 00       	call   c001316a <Thr::executeDLL(unsigned long, void*)>
c000f1d5:	83 c4 10             	add    esp,0x10
c000f1d8:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000f1dd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f1e3:	83 e0 04             	and    eax,0x4
c000f1e6:	84 c0                	test   al,al
c000f1e8:	0f 84 16 01 00 00    	je     c000f304 <ACPI::open(int, int, void*)+0x42c>
c000f1ee:	83 ec 0c             	sub    esp,0xc
c000f1f1:	68 3c e5 01 c0       	push   0xc001e53c
c000f1f6:	e8 1c 0d 00 00       	call   c000ff17 <KeSetBootMessage(char const*)>
c000f1fb:	83 c4 10             	add    esp,0x10
c000f1fe:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f209:	83 ec 0c             	sub    esp,0xc
c000f20c:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f213:	e8 79 8a ff ff       	call   c0007c91 <malloc>
c000f218:	83 c4 10             	add    esp,0x10
c000f21b:	89 c3                	mov    ebx,eax
c000f21d:	a1 90 3e 02 c0       	mov    eax,ds:0xc0023e90
c000f222:	83 ec 04             	sub    esp,0x4
c000f225:	50                   	push   eax
c000f226:	68 59 e5 01 c0       	push   0xc001e559
c000f22b:	53                   	push   ebx
c000f22c:	e8 71 bc ff ff       	call   c000aea2 <File::File(char const*, Process*)>
c000f231:	83 c4 10             	add    esp,0x10
c000f234:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f23b:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f243:	74 1b                	je     c000f260 <ACPI::open(int, int, void*)+0x388>
c000f245:	83 ec 0c             	sub    esp,0xc
c000f248:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f24f:	e8 7c bf ff ff       	call   c000b1d0 <File::exists()>
c000f254:	83 c4 10             	add    esp,0x10
c000f257:	84 c0                	test   al,al
c000f259:	74 05                	je     c000f260 <ACPI::open(int, int, void*)+0x388>
c000f25b:	b0 01                	mov    al,0x1
c000f25d:	eb 05                	jmp    c000f264 <ACPI::open(int, int, void*)+0x38c>
c000f25f:	90                   	nop
c000f260:	b0 00                	mov    al,0x0
c000f262:	66 90                	xchg   ax,ax
c000f264:	84 c0                	test   al,al
c000f266:	74 28                	je     c000f290 <ACPI::open(int, int, void*)+0x3b8>
c000f268:	83 ec 08             	sub    esp,0x8
c000f26b:	6a 01                	push   0x1
c000f26d:	68 59 e5 01 c0       	push   0xc001e559
c000f272:	e8 c2 3c 00 00       	call   c0012f39 <Thr::loadDLL(char const*, bool)>
c000f277:	83 c4 10             	add    esp,0x10
c000f27a:	83 ec 08             	sub    esp,0x8
c000f27d:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f284:	50                   	push   eax
c000f285:	e8 e0 3e 00 00       	call   c001316a <Thr::executeDLL(unsigned long, void*)>
c000f28a:	83 c4 10             	add    esp,0x10
c000f28d:	8d 76 00             	lea    esi,[esi+0x0]
c000f290:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f298:	74 2a                	je     c000f2c4 <ACPI::open(int, int, void*)+0x3ec>
c000f29a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f2a2:	74 20                	je     c000f2c4 <ACPI::open(int, int, void*)+0x3ec>
c000f2a4:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f2ab:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2ad:	83 c0 08             	add    eax,0x8
c000f2b0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2b2:	83 ec 0c             	sub    esp,0xc
c000f2b5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f2bc:	ff d0                	call   eax
c000f2be:	83 c4 10             	add    esp,0x10
c000f2c1:	8d 76 00             	lea    esi,[esi+0x0]
c000f2c4:	a1 c8 31 02 c0       	mov    eax,ds:0xc00231c8
c000f2c9:	83 ec 08             	sub    esp,0x8
c000f2cc:	68 76 e5 01 c0       	push   0xc001e576
c000f2d1:	50                   	push   eax
c000f2d2:	e8 31 f2 ff ff       	call   c000e508 <findDataTable(unsigned char*, char*)>
c000f2d7:	83 c4 10             	add    esp,0x10
c000f2da:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f2e1:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f2e9:	74 19                	je     c000f304 <ACPI::open(int, int, void*)+0x42c>
c000f2eb:	83 ec 08             	sub    esp,0x8
c000f2ee:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f2f5:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f2fc:	e8 67 fb ff ff       	call   c000ee68 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f301:	83 c4 10             	add    esp,0x10
c000f304:	b8 00 00 00 00       	mov    eax,0x0
c000f309:	81 c4 70 01 00 00    	add    esp,0x170
c000f30f:	5b                   	pop    ebx
c000f310:	5e                   	pop    esi
c000f311:	5f                   	pop    edi
c000f312:	c3                   	ret    
c000f313:	90                   	nop

c000f314 <CPU::close(int, int, void*)>:
c000f314:	31 c0                	xor    eax,eax
c000f316:	c3                   	ret    
c000f317:	90                   	nop

c000f318 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f318:	60                   	pusha  
c000f319:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f31d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f321:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f325:	9c                   	pushf  
c000f326:	fa                   	cli    
c000f327:	0f 09                	wbinvd 
c000f329:	0f 30                	wrmsr  
c000f32b:	9d                   	popf   
c000f32c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f330:	89 02                	mov    DWORD PTR [edx],eax
c000f332:	61                   	popa   
c000f333:	c3                   	ret    

c000f334 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f334:	60                   	pusha  
c000f335:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f339:	9c                   	pushf  
c000f33a:	fa                   	cli    
c000f33b:	0f 09                	wbinvd 
c000f33d:	31 c0                	xor    eax,eax
c000f33f:	31 d2                	xor    edx,edx
c000f341:	0f 32                	rdmsr  
c000f343:	9d                   	popf   
c000f344:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f348:	89 02                	mov    DWORD PTR [edx],eax
c000f34a:	61                   	popa   
c000f34b:	c3                   	ret    

c000f34c <CPU::AMD_K6_writeback(int, int, int)>:
c000f34c:	56                   	push   esi
c000f34d:	53                   	push   ebx
c000f34e:	83 ec 10             	sub    esp,0x10
c000f351:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f355:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f35a:	75 5d                	jne    c000f3b9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f35c:	83 f8 08             	cmp    eax,0x8
c000f35f:	75 09                	jne    c000f36a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f361:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f366:	7e 13                	jle    c000f37b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f368:	eb 30                	jmp    c000f39a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f36a:	83 f8 06             	cmp    eax,0x6
c000f36d:	7c 4a                	jl     c000f3b9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f36f:	83 f8 07             	cmp    eax,0x7
c000f372:	7e 07                	jle    c000f37b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f374:	83 f8 09             	cmp    eax,0x9
c000f377:	74 21                	je     c000f39a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f379:	eb 3e                	jmp    c000f3b9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f37b:	89 e6                	mov    esi,esp
c000f37d:	8b 1d dc 09 02 c0    	mov    ebx,DWORD PTR ds:0xc00209dc
c000f383:	56                   	push   esi
c000f384:	c1 eb 15             	shr    ebx,0x15
c000f387:	68 82 00 00 c0       	push   0xc0000082
c000f38c:	83 e3 7e             	and    ebx,0x7e
c000f38f:	e8 a0 ff ff ff       	call   c000f334 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f394:	56                   	push   esi
c000f395:	6a 00                	push   0x0
c000f397:	53                   	push   ebx
c000f398:	eb 12                	jmp    c000f3ac <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f39a:	89 e3                	mov    ebx,esp
c000f39c:	53                   	push   ebx
c000f39d:	68 82 00 00 c0       	push   0xc0000082
c000f3a2:	e8 8d ff ff ff       	call   c000f334 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f3a7:	53                   	push   ebx
c000f3a8:	6a 00                	push   0x0
c000f3aa:	6a 00                	push   0x0
c000f3ac:	68 82 00 00 c0       	push   0xc0000082
c000f3b1:	e8 62 ff ff ff       	call   c000f318 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f3b6:	83 c4 18             	add    esp,0x18
c000f3b9:	83 c4 10             	add    esp,0x10
c000f3bc:	5b                   	pop    ebx
c000f3bd:	5e                   	pop    esi
c000f3be:	c3                   	ret    
c000f3bf:	90                   	nop

c000f3c0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f3c0:	55                   	push   ebp
c000f3c1:	57                   	push   edi
c000f3c2:	56                   	push   esi
c000f3c3:	53                   	push   ebx
c000f3c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f3c8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f3cc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f3d0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f3d4:	39 05 d0 f7 01 c0    	cmp    DWORD PTR ds:0xc001f7d0,eax
c000f3da:	75 23                	jne    c000f3ff <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f3dc:	a1 2c 34 02 c0       	mov    eax,ds:0xc002342c
c000f3e1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f3e5:	89 06                	mov    DWORD PTR [esi],eax
c000f3e7:	a1 28 34 02 c0       	mov    eax,ds:0xc0023428
c000f3ec:	89 07                	mov    DWORD PTR [edi],eax
c000f3ee:	a1 24 34 02 c0       	mov    eax,ds:0xc0023424
c000f3f3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f3f6:	a1 20 34 02 c0       	mov    eax,ds:0xc0023420
c000f3fb:	89 02                	mov    DWORD PTR [edx],eax
c000f3fd:	eb 3f                	jmp    c000f43e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f3ff:	31 c9                	xor    ecx,ecx
c000f401:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f405:	0f a2                	cpuid  
c000f407:	89 06                	mov    DWORD PTR [esi],eax
c000f409:	89 1f                	mov    DWORD PTR [edi],ebx
c000f40b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f40f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f412:	89 10                	mov    DWORD PTR [eax],edx
c000f414:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f418:	a3 d0 f7 01 c0       	mov    ds:0xc001f7d0,eax
c000f41d:	8b 06                	mov    eax,DWORD PTR [esi]
c000f41f:	a3 2c 34 02 c0       	mov    ds:0xc002342c,eax
c000f424:	8b 07                	mov    eax,DWORD PTR [edi]
c000f426:	a3 28 34 02 c0       	mov    ds:0xc0023428,eax
c000f42b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f42e:	a3 24 34 02 c0       	mov    ds:0xc0023424,eax
c000f433:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f437:	8b 00                	mov    eax,DWORD PTR [eax]
c000f439:	a3 20 34 02 c0       	mov    ds:0xc0023420,eax
c000f43e:	5b                   	pop    ebx
c000f43f:	5e                   	pop    esi
c000f440:	5f                   	pop    edi
c000f441:	5d                   	pop    ebp
c000f442:	c3                   	ret    
c000f443:	90                   	nop

c000f444 <CPU::cpuidCheckEDX(unsigned int)>:
c000f444:	83 ec 10             	sub    esp,0x10
c000f447:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f44b:	50                   	push   eax
c000f44c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f450:	50                   	push   eax
c000f451:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f455:	50                   	push   eax
c000f456:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f45a:	50                   	push   eax
c000f45b:	6a 01                	push   0x1
c000f45d:	e8 5e ff ff ff       	call   c000f3c0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f462:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f466:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f46a:	0f 95 c0             	setne  al
c000f46d:	83 c4 24             	add    esp,0x24
c000f470:	c3                   	ret    
c000f471:	90                   	nop

c000f472 <CPU::cpuidCheckECX(unsigned int)>:
c000f472:	83 ec 10             	sub    esp,0x10
c000f475:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f479:	50                   	push   eax
c000f47a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f47e:	50                   	push   eax
c000f47f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f483:	50                   	push   eax
c000f484:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f488:	50                   	push   eax
c000f489:	6a 01                	push   0x1
c000f48b:	e8 30 ff ff ff       	call   c000f3c0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f490:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f494:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f498:	0f 95 c0             	setne  al
c000f49b:	83 c4 24             	add    esp,0x24
c000f49e:	c3                   	ret    
c000f49f:	90                   	nop

c000f4a0 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f4a0:	83 ec 10             	sub    esp,0x10
c000f4a3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f4a7:	50                   	push   eax
c000f4a8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f4ac:	50                   	push   eax
c000f4ad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f4b1:	50                   	push   eax
c000f4b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f4b6:	50                   	push   eax
c000f4b7:	6a 07                	push   0x7
c000f4b9:	e8 02 ff ff ff       	call   c000f3c0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f4be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4c2:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f4c6:	0f 95 c0             	setne  al
c000f4c9:	83 c4 24             	add    esp,0x24
c000f4cc:	c3                   	ret    
c000f4cd:	90                   	nop

c000f4ce <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f4ce:	83 ec 10             	sub    esp,0x10
c000f4d1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f4d5:	50                   	push   eax
c000f4d6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f4da:	50                   	push   eax
c000f4db:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f4df:	50                   	push   eax
c000f4e0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f4e4:	50                   	push   eax
c000f4e5:	6a 07                	push   0x7
c000f4e7:	e8 d4 fe ff ff       	call   c000f3c0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f4ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4f0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f4f4:	0f 95 c0             	setne  al
c000f4f7:	83 c4 24             	add    esp,0x24
c000f4fa:	c3                   	ret    
c000f4fb:	90                   	nop

c000f4fc <CPU::CPU()>:
c000f4fc:	83 ec 0c             	sub    esp,0xc
c000f4ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f503:	83 ec 08             	sub    esp,0x8
c000f506:	68 99 e6 01 c0       	push   0xc001e699
c000f50b:	50                   	push   eax
c000f50c:	e8 f3 c9 ff ff       	call   c000bf04 <Device::Device(char const*)>
c000f511:	83 c4 10             	add    esp,0x10
c000f514:	ba 20 e7 01 c0       	mov    edx,0xc001e720
c000f519:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f51d:	89 10                	mov    DWORD PTR [eax],edx
c000f51f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f523:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f52d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f531:	05 78 01 00 00       	add    eax,0x178
c000f536:	83 ec 0c             	sub    esp,0xc
c000f539:	50                   	push   eax
c000f53a:	e8 11 80 ff ff       	call   c0007550 <GDT::GDT()>
c000f53f:	83 c4 10             	add    esp,0x10
c000f542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f546:	05 7c 09 00 00       	add    eax,0x97c
c000f54b:	83 ec 0c             	sub    esp,0xc
c000f54e:	50                   	push   eax
c000f54f:	e8 38 82 ff ff       	call   c000778c <IDT::IDT()>
c000f554:	83 c4 10             	add    esp,0x10
c000f557:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f55b:	05 7c 11 00 00       	add    eax,0x117c
c000f560:	83 ec 0c             	sub    esp,0xc
c000f563:	50                   	push   eax
c000f564:	e8 b3 9a ff ff       	call   c000901c <TSS::TSS()>
c000f569:	83 c4 10             	add    esp,0x10
c000f56c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f570:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f577:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f57b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f585:	90                   	nop
c000f586:	83 c4 0c             	add    esp,0xc
c000f589:	c3                   	ret    

c000f58a <CPU::displayFeatures()>:
c000f58a:	c3                   	ret    
c000f58b:	90                   	nop

c000f58c <CPU::detectFeatures()>:
c000f58c:	55                   	push   ebp
c000f58d:	57                   	push   edi
c000f58e:	56                   	push   esi
c000f58f:	53                   	push   ebx
c000f590:	83 ec 30             	sub    esp,0x30
c000f593:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f597:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f5a1:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f5a8:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f5ae:	6a 0d                	push   0xd
c000f5b0:	6a 00                	push   0x0
c000f5b2:	55                   	push   ebp
c000f5b3:	e8 18 0f ff ff       	call   c00004d0 <memset>
c000f5b8:	83 c4 10             	add    esp,0x10
c000f5bb:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000f5c0:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f5c7:	0f 84 d5 05 00 00    	je     c000fba2 <CPU::detectFeatures()+0x616>
c000f5cd:	83 ec 0c             	sub    esp,0xc
c000f5d0:	89 ef                	mov    edi,ebp
c000f5d2:	6a 10                	push   0x10
c000f5d4:	e8 6b fe ff ff       	call   c000f444 <CPU::cpuidCheckEDX(unsigned int)>
c000f5d9:	83 e0 01             	and    eax,0x1
c000f5dc:	8d 14 00             	lea    edx,[eax+eax*1]
c000f5df:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f5e5:	83 e0 fd             	and    eax,0xfffffffd
c000f5e8:	09 d0                	or     eax,edx
c000f5ea:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f5f0:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f5f7:	e8 48 fe ff ff       	call   c000f444 <CPU::cpuidCheckEDX(unsigned int)>
c000f5fc:	83 e0 01             	and    eax,0x1
c000f5ff:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f606:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f60c:	83 e0 fb             	and    eax,0xfffffffb
c000f60f:	09 d0                	or     eax,edx
c000f611:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f617:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f61e:	e8 21 fe ff ff       	call   c000f444 <CPU::cpuidCheckEDX(unsigned int)>
c000f623:	83 e0 01             	and    eax,0x1
c000f626:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f62d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f633:	83 e0 f7             	and    eax,0xfffffff7
c000f636:	09 d0                	or     eax,edx
c000f638:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f63e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f645:	e8 fa fd ff ff       	call   c000f444 <CPU::cpuidCheckEDX(unsigned int)>
c000f64a:	83 e0 01             	and    eax,0x1
c000f64d:	c1 e0 04             	shl    eax,0x4
c000f650:	88 c2                	mov    dl,al
c000f652:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f658:	83 e0 ef             	and    eax,0xffffffef
c000f65b:	09 d0                	or     eax,edx
c000f65d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f663:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f66a:	e8 d5 fd ff ff       	call   c000f444 <CPU::cpuidCheckEDX(unsigned int)>
c000f66f:	83 e0 01             	and    eax,0x1
c000f672:	c1 e0 05             	shl    eax,0x5
c000f675:	88 c2                	mov    dl,al
c000f677:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f67d:	83 e0 df             	and    eax,0xffffffdf
c000f680:	09 d0                	or     eax,edx
c000f682:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f688:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f68f:	e8 b0 fd ff ff       	call   c000f444 <CPU::cpuidCheckEDX(unsigned int)>
c000f694:	83 e0 01             	and    eax,0x1
c000f697:	8d 14 00             	lea    edx,[eax+eax*1]
c000f69a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f6a0:	83 e0 fd             	and    eax,0xfffffffd
c000f6a3:	09 d0                	or     eax,edx
c000f6a5:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f6ab:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f6b2:	e8 8d fd ff ff       	call   c000f444 <CPU::cpuidCheckEDX(unsigned int)>
c000f6b7:	83 e0 01             	and    eax,0x1
c000f6ba:	c1 e0 06             	shl    eax,0x6
c000f6bd:	88 c2                	mov    dl,al
c000f6bf:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f6c5:	83 e0 bf             	and    eax,0xffffffbf
c000f6c8:	09 d0                	or     eax,edx
c000f6ca:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f6d0:	58                   	pop    eax
c000f6d1:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f6d5:	50                   	push   eax
c000f6d6:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f6da:	50                   	push   eax
c000f6db:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f6df:	56                   	push   esi
c000f6e0:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f6e4:	50                   	push   eax
c000f6e5:	6a 00                	push   0x0
c000f6e7:	e8 d4 fc ff ff       	call   c000f3c0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f6ec:	b8 04 00 00 00       	mov    eax,0x4
c000f6f1:	89 c1                	mov    ecx,eax
c000f6f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f6f5:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f6fb:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f6ff:	89 c1                	mov    ecx,eax
c000f701:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f703:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f709:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f70d:	89 c1                	mov    ecx,eax
c000f70f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f711:	83 c4 18             	add    esp,0x18
c000f714:	68 a8 e5 01 c0       	push   0xc001e5a8
c000f719:	55                   	push   ebp
c000f71a:	e8 c1 0f ff ff       	call   c00006e0 <strcmp>
c000f71f:	83 c4 10             	add    esp,0x10
c000f722:	85 c0                	test   eax,eax
c000f724:	75 0f                	jne    c000f735 <CPU::detectFeatures()+0x1a9>
c000f726:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f730:	e9 22 02 00 00       	jmp    c000f957 <CPU::detectFeatures()+0x3cb>
c000f735:	50                   	push   eax
c000f736:	50                   	push   eax
c000f737:	68 b5 e5 01 c0       	push   0xc001e5b5
c000f73c:	55                   	push   ebp
c000f73d:	e8 9e 0f ff ff       	call   c00006e0 <strcmp>
c000f742:	83 c4 10             	add    esp,0x10
c000f745:	85 c0                	test   eax,eax
c000f747:	74 dd                	je     c000f726 <CPU::detectFeatures()+0x19a>
c000f749:	50                   	push   eax
c000f74a:	50                   	push   eax
c000f74b:	68 c2 e5 01 c0       	push   0xc001e5c2
c000f750:	55                   	push   ebp
c000f751:	e8 8a 0f ff ff       	call   c00006e0 <strcmp>
c000f756:	83 c4 10             	add    esp,0x10
c000f759:	85 c0                	test   eax,eax
c000f75b:	74 2a                	je     c000f787 <CPU::detectFeatures()+0x1fb>
c000f75d:	50                   	push   eax
c000f75e:	50                   	push   eax
c000f75f:	68 cf e5 01 c0       	push   0xc001e5cf
c000f764:	55                   	push   ebp
c000f765:	e8 76 0f ff ff       	call   c00006e0 <strcmp>
c000f76a:	83 c4 10             	add    esp,0x10
c000f76d:	85 c0                	test   eax,eax
c000f76f:	74 16                	je     c000f787 <CPU::detectFeatures()+0x1fb>
c000f771:	50                   	push   eax
c000f772:	50                   	push   eax
c000f773:	68 dc e5 01 c0       	push   0xc001e5dc
c000f778:	55                   	push   ebp
c000f779:	e8 62 0f ff ff       	call   c00006e0 <strcmp>
c000f77e:	83 c4 10             	add    esp,0x10
c000f781:	85 c0                	test   eax,eax
c000f783:	74 48                	je     c000f7cd <CPU::detectFeatures()+0x241>
c000f785:	eb 0f                	jmp    c000f796 <CPU::detectFeatures()+0x20a>
c000f787:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f791:	e9 c1 01 00 00       	jmp    c000f957 <CPU::detectFeatures()+0x3cb>
c000f796:	50                   	push   eax
c000f797:	50                   	push   eax
c000f798:	68 e9 e5 01 c0       	push   0xc001e5e9
c000f79d:	55                   	push   ebp
c000f79e:	e8 3d 0f ff ff       	call   c00006e0 <strcmp>
c000f7a3:	83 c4 10             	add    esp,0x10
c000f7a6:	85 c0                	test   eax,eax
c000f7a8:	74 23                	je     c000f7cd <CPU::detectFeatures()+0x241>
c000f7aa:	57                   	push   edi
c000f7ab:	57                   	push   edi
c000f7ac:	68 f6 e5 01 c0       	push   0xc001e5f6
c000f7b1:	55                   	push   ebp
c000f7b2:	e8 29 0f ff ff       	call   c00006e0 <strcmp>
c000f7b7:	83 c4 10             	add    esp,0x10
c000f7ba:	85 c0                	test   eax,eax
c000f7bc:	75 1e                	jne    c000f7dc <CPU::detectFeatures()+0x250>
c000f7be:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f7c8:	e9 8a 01 00 00       	jmp    c000f957 <CPU::detectFeatures()+0x3cb>
c000f7cd:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f7d7:	e9 7b 01 00 00       	jmp    c000f957 <CPU::detectFeatures()+0x3cb>
c000f7dc:	56                   	push   esi
c000f7dd:	56                   	push   esi
c000f7de:	68 03 e6 01 c0       	push   0xc001e603
c000f7e3:	55                   	push   ebp
c000f7e4:	e8 f7 0e ff ff       	call   c00006e0 <strcmp>
c000f7e9:	83 c4 10             	add    esp,0x10
c000f7ec:	85 c0                	test   eax,eax
c000f7ee:	75 0f                	jne    c000f7ff <CPU::detectFeatures()+0x273>
c000f7f0:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f7fa:	e9 58 01 00 00       	jmp    c000f957 <CPU::detectFeatures()+0x3cb>
c000f7ff:	51                   	push   ecx
c000f800:	51                   	push   ecx
c000f801:	68 c2 e5 01 c0       	push   0xc001e5c2
c000f806:	55                   	push   ebp
c000f807:	e8 d4 0e ff ff       	call   c00006e0 <strcmp>
c000f80c:	83 c4 10             	add    esp,0x10
c000f80f:	85 c0                	test   eax,eax
c000f811:	75 0f                	jne    c000f822 <CPU::detectFeatures()+0x296>
c000f813:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f81d:	e9 35 01 00 00       	jmp    c000f957 <CPU::detectFeatures()+0x3cb>
c000f822:	52                   	push   edx
c000f823:	52                   	push   edx
c000f824:	68 10 e6 01 c0       	push   0xc001e610
c000f829:	55                   	push   ebp
c000f82a:	e8 b1 0e ff ff       	call   c00006e0 <strcmp>
c000f82f:	83 c4 10             	add    esp,0x10
c000f832:	85 c0                	test   eax,eax
c000f834:	75 0f                	jne    c000f845 <CPU::detectFeatures()+0x2b9>
c000f836:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f840:	e9 12 01 00 00       	jmp    c000f957 <CPU::detectFeatures()+0x3cb>
c000f845:	50                   	push   eax
c000f846:	50                   	push   eax
c000f847:	68 1d e6 01 c0       	push   0xc001e61d
c000f84c:	55                   	push   ebp
c000f84d:	e8 8e 0e ff ff       	call   c00006e0 <strcmp>
c000f852:	83 c4 10             	add    esp,0x10
c000f855:	85 c0                	test   eax,eax
c000f857:	75 0f                	jne    c000f868 <CPU::detectFeatures()+0x2dc>
c000f859:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f863:	e9 ef 00 00 00       	jmp    c000f957 <CPU::detectFeatures()+0x3cb>
c000f868:	50                   	push   eax
c000f869:	50                   	push   eax
c000f86a:	68 2a e6 01 c0       	push   0xc001e62a
c000f86f:	55                   	push   ebp
c000f870:	e8 6b 0e ff ff       	call   c00006e0 <strcmp>
c000f875:	83 c4 10             	add    esp,0x10
c000f878:	85 c0                	test   eax,eax
c000f87a:	75 0f                	jne    c000f88b <CPU::detectFeatures()+0x2ff>
c000f87c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f886:	e9 cc 00 00 00       	jmp    c000f957 <CPU::detectFeatures()+0x3cb>
c000f88b:	50                   	push   eax
c000f88c:	50                   	push   eax
c000f88d:	68 37 e6 01 c0       	push   0xc001e637
c000f892:	55                   	push   ebp
c000f893:	e8 48 0e ff ff       	call   c00006e0 <strcmp>
c000f898:	83 c4 10             	add    esp,0x10
c000f89b:	85 c0                	test   eax,eax
c000f89d:	75 0f                	jne    c000f8ae <CPU::detectFeatures()+0x322>
c000f89f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f8a9:	e9 a9 00 00 00       	jmp    c000f957 <CPU::detectFeatures()+0x3cb>
c000f8ae:	50                   	push   eax
c000f8af:	50                   	push   eax
c000f8b0:	68 44 e6 01 c0       	push   0xc001e644
c000f8b5:	55                   	push   ebp
c000f8b6:	e8 25 0e ff ff       	call   c00006e0 <strcmp>
c000f8bb:	83 c4 10             	add    esp,0x10
c000f8be:	85 c0                	test   eax,eax
c000f8c0:	75 0f                	jne    c000f8d1 <CPU::detectFeatures()+0x345>
c000f8c2:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f8cc:	e9 86 00 00 00       	jmp    c000f957 <CPU::detectFeatures()+0x3cb>
c000f8d1:	50                   	push   eax
c000f8d2:	50                   	push   eax
c000f8d3:	68 51 e6 01 c0       	push   0xc001e651
c000f8d8:	55                   	push   ebp
c000f8d9:	e8 02 0e ff ff       	call   c00006e0 <strcmp>
c000f8de:	83 c4 10             	add    esp,0x10
c000f8e1:	85 c0                	test   eax,eax
c000f8e3:	75 0c                	jne    c000f8f1 <CPU::detectFeatures()+0x365>
c000f8e5:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f8ef:	eb 66                	jmp    c000f957 <CPU::detectFeatures()+0x3cb>
c000f8f1:	50                   	push   eax
c000f8f2:	50                   	push   eax
c000f8f3:	68 5e e6 01 c0       	push   0xc001e65e
c000f8f8:	55                   	push   ebp
c000f8f9:	e8 e2 0d ff ff       	call   c00006e0 <strcmp>
c000f8fe:	83 c4 10             	add    esp,0x10
c000f901:	85 c0                	test   eax,eax
c000f903:	75 0c                	jne    c000f911 <CPU::detectFeatures()+0x385>
c000f905:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f90f:	eb 46                	jmp    c000f957 <CPU::detectFeatures()+0x3cb>
c000f911:	57                   	push   edi
c000f912:	57                   	push   edi
c000f913:	68 6b e6 01 c0       	push   0xc001e66b
c000f918:	55                   	push   ebp
c000f919:	e8 c2 0d ff ff       	call   c00006e0 <strcmp>
c000f91e:	83 c4 10             	add    esp,0x10
c000f921:	85 c0                	test   eax,eax
c000f923:	74 e0                	je     c000f905 <CPU::detectFeatures()+0x379>
c000f925:	56                   	push   esi
c000f926:	56                   	push   esi
c000f927:	68 78 e6 01 c0       	push   0xc001e678
c000f92c:	55                   	push   ebp
c000f92d:	e8 ae 0d ff ff       	call   c00006e0 <strcmp>
c000f932:	83 c4 10             	add    esp,0x10
c000f935:	85 c0                	test   eax,eax
c000f937:	74 cc                	je     c000f905 <CPU::detectFeatures()+0x379>
c000f939:	51                   	push   ecx
c000f93a:	51                   	push   ecx
c000f93b:	68 85 e6 01 c0       	push   0xc001e685
c000f940:	55                   	push   ebp
c000f941:	e8 9a 0d ff ff       	call   c00006e0 <strcmp>
c000f946:	83 c4 10             	add    esp,0x10
c000f949:	85 c0                	test   eax,eax
c000f94b:	74 b8                	je     c000f905 <CPU::detectFeatures()+0x379>
c000f94d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f957:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f95c:	0f 86 be 00 00 00    	jbe    c000fa20 <CPU::detectFeatures()+0x494>
c000f962:	83 ec 0c             	sub    esp,0xc
c000f965:	68 80 00 00 00       	push   0x80
c000f96a:	e8 31 fb ff ff       	call   c000f4a0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f96f:	83 e0 01             	and    eax,0x1
c000f972:	c1 e0 06             	shl    eax,0x6
c000f975:	88 c2                	mov    dl,al
c000f977:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f97d:	83 e0 bf             	and    eax,0xffffffbf
c000f980:	09 d0                	or     eax,edx
c000f982:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f988:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f98f:	e8 0c fb ff ff       	call   c000f4a0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f994:	83 e0 01             	and    eax,0x1
c000f997:	c1 e0 04             	shl    eax,0x4
c000f99a:	88 c2                	mov    dl,al
c000f99c:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f9a2:	83 e0 ef             	and    eax,0xffffffef
c000f9a5:	09 d0                	or     eax,edx
c000f9a7:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f9ad:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f9b4:	e8 e7 fa ff ff       	call   c000f4a0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f9b9:	c1 e0 07             	shl    eax,0x7
c000f9bc:	88 c2                	mov    dl,al
c000f9be:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f9c4:	83 e0 7f             	and    eax,0x7f
c000f9c7:	09 d0                	or     eax,edx
c000f9c9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f9cf:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f9d6:	e8 f3 fa ff ff       	call   c000f4ce <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f9db:	83 e0 01             	and    eax,0x1
c000f9de:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f9e5:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f9eb:	83 e0 f7             	and    eax,0xfffffff7
c000f9ee:	09 d0                	or     eax,edx
c000f9f0:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f9f6:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f9fd:	e8 cc fa ff ff       	call   c000f4ce <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fa02:	83 c4 10             	add    esp,0x10
c000fa05:	83 e0 01             	and    eax,0x1
c000fa08:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fa0f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fa15:	83 e0 fb             	and    eax,0xfffffffb
c000fa18:	09 d0                	or     eax,edx
c000fa1a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fa20:	83 ec 0c             	sub    esp,0xc
c000fa23:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fa27:	50                   	push   eax
c000fa28:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fa2c:	50                   	push   eax
c000fa2d:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fa31:	56                   	push   esi
c000fa32:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fa36:	50                   	push   eax
c000fa37:	6a 01                	push   0x1
c000fa39:	e8 82 f9 ff ff       	call   c000f3c0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fa3e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa42:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000fa48:	88 ca                	mov    dl,cl
c000fa4a:	83 e0 f0             	and    eax,0xfffffff0
c000fa4d:	83 e2 0f             	and    edx,0xf
c000fa50:	09 d0                	or     eax,edx
c000fa52:	88 ca                	mov    dl,cl
c000fa54:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000fa5a:	c0 ea 04             	shr    dl,0x4
c000fa5d:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000fa61:	0f b6 c2             	movzx  eax,dl
c000fa64:	83 c4 20             	add    esp,0x20
c000fa67:	c1 e0 06             	shl    eax,0x6
c000fa6a:	89 c7                	mov    edi,eax
c000fa6c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000fa72:	66 25 3f c0          	and    ax,0xc03f
c000fa76:	09 f8                	or     eax,edi
c000fa78:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000fa7f:	89 c8                	mov    eax,ecx
c000fa81:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000fa88:	c1 e8 08             	shr    eax,0x8
c000fa8b:	83 e5 3f             	and    ebp,0x3f
c000fa8e:	83 e0 0f             	and    eax,0xf
c000fa91:	89 c7                	mov    edi,eax
c000fa93:	c1 e7 06             	shl    edi,0x6
c000fa96:	09 ef                	or     edi,ebp
c000fa98:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000fa9f:	89 fa                	mov    edx,edi
c000faa1:	83 e5 c0             	and    ebp,0xffffffc0
c000faa4:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000faaa:	88 c2                	mov    dl,al
c000faac:	c0 ea 02             	shr    dl,0x2
c000faaf:	89 d7                	mov    edi,edx
c000fab1:	09 ef                	or     edi,ebp
c000fab3:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000fab9:	89 fa                	mov    edx,edi
c000fabb:	83 e5 cf             	and    ebp,0xffffffcf
c000fabe:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000fac4:	89 cf                	mov    edi,ecx
c000fac6:	c1 ef 0c             	shr    edi,0xc
c000fac9:	83 e7 03             	and    edi,0x3
c000facc:	c1 e7 04             	shl    edi,0x4
c000facf:	09 ef                	or     edi,ebp
c000fad1:	3c 06                	cmp    al,0x6
c000fad3:	89 fa                	mov    edx,edi
c000fad5:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fadb:	74 04                	je     c000fae1 <CPU::detectFeatures()+0x555>
c000fadd:	3c 0f                	cmp    al,0xf
c000fadf:	75 5c                	jne    c000fb3d <CPU::detectFeatures()+0x5b1>
c000fae1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000fae5:	89 cf                	mov    edi,ecx
c000fae7:	c1 ef 10             	shr    edi,0x10
c000faea:	c1 e7 04             	shl    edi,0x4
c000faed:	09 fa                	or     edx,edi
c000faef:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000faf5:	0f b6 d2             	movzx  edx,dl
c000faf8:	66 81 e7 3f c0       	and    di,0xc03f
c000fafd:	c1 e2 06             	shl    edx,0x6
c000fb00:	09 fa                	or     edx,edi
c000fb02:	3c 0f                	cmp    al,0xf
c000fb04:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fb0b:	75 30                	jne    c000fb3d <CPU::detectFeatures()+0x5b1>
c000fb0d:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000fb13:	c1 e9 14             	shr    ecx,0x14
c000fb16:	83 e0 3f             	and    eax,0x3f
c000fb19:	83 c1 0f             	add    ecx,0xf
c000fb1c:	88 ca                	mov    dl,cl
c000fb1e:	c0 e9 02             	shr    cl,0x2
c000fb21:	c1 e2 06             	shl    edx,0x6
c000fb24:	09 d0                	or     eax,edx
c000fb26:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000fb2c:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000fb32:	83 e0 c0             	and    eax,0xffffffc0
c000fb35:	09 c1                	or     ecx,eax
c000fb37:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000fb3d:	83 ec 0c             	sub    esp,0xc
c000fb40:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000fb47:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fb4b:	50                   	push   eax
c000fb4c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fb50:	55                   	push   ebp
c000fb51:	56                   	push   esi
c000fb52:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fb56:	57                   	push   edi
c000fb57:	68 00 00 00 80       	push   0x80000000
c000fb5c:	e8 5f f8 ff ff       	call   c000f3c0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fb61:	83 c4 20             	add    esp,0x20
c000fb64:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000fb6c:	76 22                	jbe    c000fb90 <CPU::detectFeatures()+0x604>
c000fb6e:	83 ec 0c             	sub    esp,0xc
c000fb71:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fb75:	50                   	push   eax
c000fb76:	55                   	push   ebp
c000fb77:	56                   	push   esi
c000fb78:	57                   	push   edi
c000fb79:	68 01 00 00 80       	push   0x80000001
c000fb7e:	e8 3d f8 ff ff       	call   c000f3c0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fb83:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fb8d:	83 c4 20             	add    esp,0x20
c000fb90:	52                   	push   edx
c000fb91:	52                   	push   edx
c000fb92:	68 91 e6 01 c0       	push   0xc001e691
c000fb97:	53                   	push   ebx
c000fb98:	e8 59 c3 ff ff       	call   c000bef6 <Device::setName(char const*)>
c000fb9d:	83 c4 10             	add    esp,0x10
c000fba0:	eb 67                	jmp    c000fc09 <CPU::detectFeatures()+0x67d>
c000fba2:	50                   	push   eax
c000fba3:	50                   	push   eax
c000fba4:	68 f6 e5 01 c0       	push   0xc001e5f6
c000fba9:	55                   	push   ebp
c000fbaa:	e8 51 0a ff ff       	call   c0000600 <strcpy>
c000fbaf:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fbb9:	e8 05 06 ff ff       	call   c00001c3 <is486>
c000fbbe:	83 c4 10             	add    esp,0x10
c000fbc1:	85 c0                	test   eax,eax
c000fbc3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fbc9:	74 1d                	je     c000fbe8 <CPU::detectFeatures()+0x65c>
c000fbcb:	83 c8 07             	or     eax,0x7
c000fbce:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fbd4:	0f 20 c0             	mov    eax,cr0
c000fbd7:	83 e0 14             	and    eax,0x14
c000fbda:	83 f8 04             	cmp    eax,0x4
c000fbdd:	75 0e                	jne    c000fbed <CPU::detectFeatures()+0x661>
c000fbdf:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000fbe6:	eb 21                	jmp    c000fc09 <CPU::detectFeatures()+0x67d>
c000fbe8:	83 e0 f8             	and    eax,0xfffffff8
c000fbeb:	eb e1                	jmp    c000fbce <CPU::detectFeatures()+0x642>
c000fbed:	e8 ac 05 ff ff       	call   c000019e <hasLegacyFPU>
c000fbf2:	83 e0 01             	and    eax,0x1
c000fbf5:	8d 14 00             	lea    edx,[eax+eax*1]
c000fbf8:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fbfe:	83 e0 fd             	and    eax,0xfffffffd
c000fc01:	09 d0                	or     eax,edx
c000fc03:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fc09:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000fc10:	74 0e                	je     c000fc20 <CPU::detectFeatures()+0x694>
c000fc12:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000fc17:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000fc1e:	eb 20                	jmp    c000fc40 <CPU::detectFeatures()+0x6b4>
c000fc20:	e8 79 05 ff ff       	call   c000019e <hasLegacyFPU>
c000fc25:	83 e0 01             	and    eax,0x1
c000fc28:	8d 14 00             	lea    edx,[eax+eax*1]
c000fc2b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fc31:	83 e0 fd             	and    eax,0xfffffffd
c000fc34:	09 d0                	or     eax,edx
c000fc36:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fc3c:	a8 02                	test   al,0x2
c000fc3e:	75 d2                	jne    c000fc12 <CPU::detectFeatures()+0x686>
c000fc40:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000fc47:	83 c4 2c             	add    esp,0x2c
c000fc4a:	5b                   	pop    ebx
c000fc4b:	5e                   	pop    esi
c000fc4c:	5f                   	pop    edi
c000fc4d:	5d                   	pop    ebp
c000fc4e:	c3                   	ret    
c000fc4f:	90                   	nop

c000fc50 <CPU::setupSMEP()>:
c000fc50:	0f 20 e0             	mov    eax,cr4
c000fc53:	0d 00 00 10 00       	or     eax,0x100000
c000fc58:	0f 22 e0             	mov    cr4,eax
c000fc5b:	c3                   	ret    

c000fc5c <CPU::setupUMIP()>:
c000fc5c:	0f 20 e0             	mov    eax,cr4
c000fc5f:	80 cc 08             	or     ah,0x8
c000fc62:	0f 22 e0             	mov    cr4,eax
c000fc65:	c3                   	ret    

c000fc66 <CPU::setupTSC()>:
c000fc66:	0f 20 e0             	mov    eax,cr4
c000fc69:	83 c8 04             	or     eax,0x4
c000fc6c:	0f 22 e0             	mov    cr4,eax
c000fc6f:	c3                   	ret    

c000fc70 <CPU::setupLargePages()>:
c000fc70:	0f 20 e0             	mov    eax,cr4
c000fc73:	83 c8 10             	or     eax,0x10
c000fc76:	0f 22 e0             	mov    cr4,eax
c000fc79:	c3                   	ret    

c000fc7a <CPU::setupPAT()>:
c000fc7a:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c000fc7f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000fc86:	74 2c                	je     c000fcb4 <CPU::setupPAT()+0x3a>
c000fc88:	53                   	push   ebx
c000fc89:	83 ec 10             	sub    esp,0x10
c000fc8c:	68 77 02 00 00       	push   0x277
c000fc91:	50                   	push   eax
c000fc92:	e8 31 76 ff ff       	call   c00072c8 <Computer::rdmsr(unsigned int)>
c000fc97:	83 e2 f8             	and    edx,0xfffffff8
c000fc9a:	83 ca 01             	or     edx,0x1
c000fc9d:	52                   	push   edx
c000fc9e:	50                   	push   eax
c000fc9f:	68 77 02 00 00       	push   0x277
c000fca4:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c000fcaa:	e8 45 76 ff ff       	call   c00072f4 <Computer::wrmsr(unsigned int, unsigned long long)>
c000fcaf:	83 c4 28             	add    esp,0x28
c000fcb2:	5b                   	pop    ebx
c000fcb3:	c3                   	ret    
c000fcb4:	c3                   	ret    
c000fcb5:	90                   	nop

c000fcb6 <CPU::setupMTRR()>:
c000fcb6:	c3                   	ret    
c000fcb7:	90                   	nop

c000fcb8 <CPU::setupGlobalPages()>:
c000fcb8:	0f 20 e0             	mov    eax,cr4
c000fcbb:	0c 80                	or     al,0x80
c000fcbd:	0f 22 e0             	mov    cr4,eax
c000fcc0:	c3                   	ret    
c000fcc1:	90                   	nop

c000fcc2 <CPU::allowUsermodeDataAccess()>:
c000fcc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fcc6:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fccd:	74 03                	je     c000fcd2 <CPU::allowUsermodeDataAccess()+0x10>
c000fccf:	0f 01 cb             	stac   
c000fcd2:	c3                   	ret    
c000fcd3:	90                   	nop

c000fcd4 <CPU::prohibitUsermodeDataAccess()>:
c000fcd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fcd8:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fcdf:	74 03                	je     c000fce4 <CPU::prohibitUsermodeDataAccess()+0x10>
c000fce1:	0f 01 ca             	clac   
c000fce4:	c3                   	ret    
c000fce5:	90                   	nop

c000fce6 <CPU::setupSMAP()>:
c000fce6:	0f 20 e0             	mov    eax,cr4
c000fce9:	0d 00 00 20 00       	or     eax,0x200000
c000fcee:	0f 22 e0             	mov    cr4,eax
c000fcf1:	eb e1                	jmp    c000fcd4 <CPU::prohibitUsermodeDataAccess()>
c000fcf3:	90                   	nop

c000fcf4 <CPU::setupFeatures()>:
c000fcf4:	53                   	push   ebx
c000fcf5:	83 ec 08             	sub    esp,0x8
c000fcf8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fcfc:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000fd03:	74 18                	je     c000fd1d <CPU::setupFeatures()+0x29>
c000fd05:	83 ec 0c             	sub    esp,0xc
c000fd08:	68 9d e6 01 c0       	push   0xc001e69d
c000fd0d:	e8 1a ac ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c000fd12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd15:	e8 42 ff ff ff       	call   c000fc5c <CPU::setupUMIP()>
c000fd1a:	83 c4 10             	add    esp,0x10
c000fd1d:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000fd24:	74 18                	je     c000fd3e <CPU::setupFeatures()+0x4a>
c000fd26:	83 ec 0c             	sub    esp,0xc
c000fd29:	68 a7 e6 01 c0       	push   0xc001e6a7
c000fd2e:	e8 f9 ab ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c000fd33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd36:	e8 2b ff ff ff       	call   c000fc66 <CPU::setupTSC()>
c000fd3b:	83 c4 10             	add    esp,0x10
c000fd3e:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000fd45:	74 18                	je     c000fd5f <CPU::setupFeatures()+0x6b>
c000fd47:	83 ec 0c             	sub    esp,0xc
c000fd4a:	68 b0 e6 01 c0       	push   0xc001e6b0
c000fd4f:	e8 d8 ab ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c000fd54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd57:	e8 14 ff ff ff       	call   c000fc70 <CPU::setupLargePages()>
c000fd5c:	83 c4 10             	add    esp,0x10
c000fd5f:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000fd66:	74 18                	je     c000fd80 <CPU::setupFeatures()+0x8c>
c000fd68:	83 ec 0c             	sub    esp,0xc
c000fd6b:	68 b9 e6 01 c0       	push   0xc001e6b9
c000fd70:	e8 b7 ab ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c000fd75:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd78:	e8 3b ff ff ff       	call   c000fcb8 <CPU::setupGlobalPages()>
c000fd7d:	83 c4 10             	add    esp,0x10
c000fd80:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000fd87:	74 18                	je     c000fda1 <CPU::setupFeatures()+0xad>
c000fd89:	83 ec 0c             	sub    esp,0xc
c000fd8c:	68 cb e6 01 c0       	push   0xc001e6cb
c000fd91:	e8 96 ab ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c000fd96:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd99:	e8 dc fe ff ff       	call   c000fc7a <CPU::setupPAT()>
c000fd9e:	83 c4 10             	add    esp,0x10
c000fda1:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000fda8:	74 11                	je     c000fdbb <CPU::setupFeatures()+0xc7>
c000fdaa:	c7 44 24 10 d4 e6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e6d4
c000fdb2:	83 c4 08             	add    esp,0x8
c000fdb5:	5b                   	pop    ebx
c000fdb6:	e9 71 ab ff ff       	jmp    c000a92c <Dbg::kprintf(char const*, ...)>
c000fdbb:	83 c4 08             	add    esp,0x8
c000fdbe:	5b                   	pop    ebx
c000fdbf:	c3                   	ret    

c000fdc0 <CPU::open(int, int, void*)>:
c000fdc0:	57                   	push   edi
c000fdc1:	56                   	push   esi
c000fdc2:	53                   	push   ebx
c000fdc3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fdc7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fdcb:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000fdd1:	83 ec 0c             	sub    esp,0xc
c000fdd4:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000fdda:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000fde0:	50                   	push   eax
c000fde1:	e8 cc 77 ff ff       	call   c00075b2 <GDT::setup()>
c000fde6:	83 c4 0c             	add    esp,0xc
c000fde9:	6a 00                	push   0x0
c000fdeb:	68 ef be ad de       	push   0xdeadbeef
c000fdf0:	57                   	push   edi
c000fdf1:	e8 6a 92 ff ff       	call   c0009060 <TSS::setup(unsigned long, unsigned long)>
c000fdf6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fdf9:	e8 42 92 ff ff       	call   c0009040 <TSS::flush()>
c000fdfe:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000fe04:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe07:	e8 f6 79 ff ff       	call   c0007802 <IDT::setup()>
c000fe0c:	b8 00 04 00 00       	mov    eax,0x400
c000fe11:	0f 23 f8             	mov    db7,eax
c000fe14:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000fe1e:	e8 4a 81 ff ff       	call   c0007f6d <Phys::allocatePage()>
c000fe23:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000fe29:	89 30                	mov    DWORD PTR [eax],esi
c000fe2b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000fe31:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fe34:	58                   	pop    eax
c000fe35:	5a                   	pop    edx
c000fe36:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fe3c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fe40:	e8 05 a2 ff ff       	call   c000a04a <VAS::setCPUSpecific(unsigned long)>
c000fe45:	c7 04 24 de e6 01 c0 	mov    DWORD PTR [esp],0xc001e6de
c000fe4c:	e8 c6 00 00 00       	call   c000ff17 <KeSetBootMessage(char const*)>
c000fe51:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fe54:	e8 33 f7 ff ff       	call   c000f58c <CPU::detectFeatures()>
c000fe59:	c7 04 24 01 e7 01 c0 	mov    DWORD PTR [esp],0xc001e701
c000fe60:	e8 b2 00 00 00       	call   c000ff17 <KeSetBootMessage(char const*)>
c000fe65:	e8 ce 59 00 00       	call   c0015838 <HalInitialise()>
c000fe6a:	a1 d0 09 02 c0       	mov    eax,ds:0xc00209d0
c000fe6f:	83 e0 10             	and    eax,0x10
c000fe72:	83 f8 01             	cmp    eax,0x1
c000fe75:	19 c0                	sbb    eax,eax
c000fe77:	83 e0 46             	and    eax,0x46
c000fe7a:	83 c0 1e             	add    eax,0x1e
c000fe7d:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe80:	e8 40 d7 ff ff       	call   c000d5c5 <setupTimer(int)>
c000fe85:	83 c4 10             	add    esp,0x10
c000fe88:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fe8e:	f6 05 d0 09 02 c0 20 	test   BYTE PTR ds:0xc00209d0,0x20
c000fe95:	74 0c                	je     c000fea3 <CPU::open(int, int, void*)+0xe3>
c000fe97:	83 ec 0c             	sub    esp,0xc
c000fe9a:	53                   	push   ebx
c000fe9b:	e8 54 fe ff ff       	call   c000fcf4 <CPU::setupFeatures()>
c000fea0:	83 c4 10             	add    esp,0x10
c000fea3:	5b                   	pop    ebx
c000fea4:	31 c0                	xor    eax,eax
c000fea6:	5e                   	pop    esi
c000fea7:	5f                   	pop    edi
c000fea8:	c3                   	ret    

c000fea9 <KeDisplaySplashScreen()>:
c000fea9:	55                   	push   ebp
c000feaa:	bd 05 00 00 00       	mov    ebp,0x5
c000feaf:	57                   	push   edi
c000feb0:	bf e0 f7 01 c0       	mov    edi,0xc001f7e0
c000feb5:	56                   	push   esi
c000feb6:	be 0a 00 00 00       	mov    esi,0xa
c000febb:	53                   	push   ebx
c000febc:	31 db                	xor    ebx,ebx
c000febe:	83 ec 0c             	sub    esp,0xc
c000fec1:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fec4:	84 c0                	test   al,al
c000fec6:	74 47                	je     c000ff0f <KeDisplaySplashScreen()+0x66>
c000fec8:	80 bb 16 f8 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe07ea],0xdb
c000fecf:	75 13                	jne    c000fee4 <KeDisplaySplashScreen()+0x3b>
c000fed1:	0f b6 93 15 f8 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe07eb]
c000fed8:	83 e2 fe             	and    edx,0xfffffffe
c000fedb:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fee1:	75 01                	jne    c000fee4 <KeDisplaySplashScreen()+0x3b>
c000fee3:	46                   	inc    esi
c000fee4:	3c 0d                	cmp    al,0xd
c000fee6:	74 24                	je     c000ff0c <KeDisplaySplashScreen()+0x63>
c000fee8:	3c 0a                	cmp    al,0xa
c000feea:	75 0a                	jne    c000fef6 <KeDisplaySplashScreen()+0x4d>
c000feec:	45                   	inc    ebp
c000feed:	be 0a 00 00 00       	mov    esi,0xa
c000fef2:	31 db                	xor    ebx,ebx
c000fef4:	eb 16                	jmp    c000ff0c <KeDisplaySplashScreen()+0x63>
c000fef6:	83 ec 0c             	sub    esp,0xc
c000fef9:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fefc:	55                   	push   ebp
c000fefd:	43                   	inc    ebx
c000fefe:	52                   	push   edx
c000feff:	6a 00                	push   0x0
c000ff01:	6a 0e                	push   0xe
c000ff03:	50                   	push   eax
c000ff04:	e8 93 65 00 00       	call   c001649c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000ff09:	83 c4 20             	add    esp,0x20
c000ff0c:	47                   	inc    edi
c000ff0d:	eb b2                	jmp    c000fec1 <KeDisplaySplashScreen()+0x18>
c000ff0f:	83 c4 0c             	add    esp,0xc
c000ff12:	5b                   	pop    ebx
c000ff13:	5e                   	pop    esi
c000ff14:	5f                   	pop    edi
c000ff15:	5d                   	pop    ebp
c000ff16:	c3                   	ret    

c000ff17 <KeSetBootMessage(char const*)>:
c000ff17:	57                   	push   edi
c000ff18:	56                   	push   esi
c000ff19:	53                   	push   ebx
c000ff1a:	81 ec a4 00 00 00    	sub    esp,0xa4
c000ff20:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000ff27:	68 9e 00 00 00       	push   0x9e
c000ff2c:	6a 00                	push   0x0
c000ff2e:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000ff32:	56                   	push   esi
c000ff33:	e8 98 05 ff ff       	call   c00004d0 <memset>
c000ff38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff3b:	e8 00 06 ff ff       	call   c0000540 <strlen>
c000ff40:	ba 50 00 00 00       	mov    edx,0x50
c000ff45:	83 c4 10             	add    esp,0x10
c000ff48:	29 c2                	sub    edx,eax
c000ff4a:	31 c9                	xor    ecx,ecx
c000ff4c:	83 e2 fe             	and    edx,0xfffffffe
c000ff4f:	01 f2                	add    edx,esi
c000ff51:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000ff56:	84 c0                	test   al,al
c000ff58:	74 0a                	je     c000ff64 <KeSetBootMessage(char const*)+0x4d>
c000ff5a:	80 cc 0f             	or     ah,0xf
c000ff5d:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000ff61:	41                   	inc    ecx
c000ff62:	eb ed                	jmp    c000ff51 <KeSetBootMessage(char const*)+0x3a>
c000ff64:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000ff69:	b9 9e 00 00 00       	mov    ecx,0x9e
c000ff6e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff70:	81 c4 a0 00 00 00    	add    esp,0xa0
c000ff76:	5b                   	pop    ebx
c000ff77:	5e                   	pop    esi
c000ff78:	5f                   	pop    edi
c000ff79:	c3                   	ret    

c000ff7a <EnvVarContainer::getEnv(char const*)>:
c000ff7a:	57                   	push   edi
c000ff7b:	56                   	push   esi
c000ff7c:	53                   	push   ebx
c000ff7d:	31 db                	xor    ebx,ebx
c000ff7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ff83:	39 1e                	cmp    DWORD PTR [esi],ebx
c000ff85:	7e 2b                	jle    c000ffb2 <EnvVarContainer::getEnv(char const*)+0x38>
c000ff87:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000ff8e:	50                   	push   eax
c000ff8f:	50                   	push   eax
c000ff90:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ff93:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000ff96:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ff9a:	e8 41 07 ff ff       	call   c00006e0 <strcmp>
c000ff9f:	83 c4 10             	add    esp,0x10
c000ffa2:	85 c0                	test   eax,eax
c000ffa4:	75 09                	jne    c000ffaf <EnvVarContainer::getEnv(char const*)+0x35>
c000ffa6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ffa9:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000ffad:	eb 05                	jmp    c000ffb4 <EnvVarContainer::getEnv(char const*)+0x3a>
c000ffaf:	43                   	inc    ebx
c000ffb0:	eb d1                	jmp    c000ff83 <EnvVarContainer::getEnv(char const*)+0x9>
c000ffb2:	31 c0                	xor    eax,eax
c000ffb4:	5b                   	pop    ebx
c000ffb5:	5e                   	pop    esi
c000ffb6:	5f                   	pop    edi
c000ffb7:	c3                   	ret    

c000ffb8 <EnvVarContainer::setEnv(char const*, char const*)>:
c000ffb8:	55                   	push   ebp
c000ffb9:	57                   	push   edi
c000ffba:	56                   	push   esi
c000ffbb:	53                   	push   ebx
c000ffbc:	83 ec 28             	sub    esp,0x28
c000ffbf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ffc3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000ffc7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ffcb:	56                   	push   esi
c000ffcc:	e8 6f 05 ff ff       	call   c0000540 <strlen>
c000ffd1:	40                   	inc    eax
c000ffd2:	89 04 24             	mov    DWORD PTR [esp],eax
c000ffd5:	e8 b7 7c ff ff       	call   c0007c91 <malloc>
c000ffda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffdd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ffe1:	e8 5a 05 ff ff       	call   c0000540 <strlen>
c000ffe6:	40                   	inc    eax
c000ffe7:	89 04 24             	mov    DWORD PTR [esp],eax
c000ffea:	e8 a2 7c ff ff       	call   c0007c91 <malloc>
c000ffef:	89 34 24             	mov    DWORD PTR [esp],esi
c000fff2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fff6:	e8 45 05 ff ff       	call   c0000540 <strlen>
c000fffb:	83 c4 0c             	add    esp,0xc
c000fffe:	40                   	inc    eax
c000ffff:	50                   	push   eax
c0010000:	6a 00                	push   0x0
c0010002:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010006:	e8 c5 04 ff ff       	call   c00004d0 <memset>
c001000b:	89 34 24             	mov    DWORD PTR [esp],esi
c001000e:	e8 2d 05 ff ff       	call   c0000540 <strlen>
c0010013:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010017:	8d 48 01             	lea    ecx,[eax+0x1]
c001001a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001001c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001001f:	89 de                	mov    esi,ebx
c0010021:	e8 1a 05 ff ff       	call   c0000540 <strlen>
c0010026:	83 c4 0c             	add    esp,0xc
c0010029:	40                   	inc    eax
c001002a:	50                   	push   eax
c001002b:	6a 00                	push   0x0
c001002d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010031:	e8 9a 04 ff ff       	call   c00004d0 <memset>
c0010036:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010039:	e8 02 05 ff ff       	call   c0000540 <strlen>
c001003e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010042:	8d 48 01             	lea    ecx,[eax+0x1]
c0010045:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010047:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001004a:	40                   	inc    eax
c001004b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001004e:	c1 e0 03             	shl    eax,0x3
c0010051:	5a                   	pop    edx
c0010052:	59                   	pop    ecx
c0010053:	50                   	push   eax
c0010054:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010057:	e8 21 7c ff ff       	call   c0007c7d <realloc>
c001005c:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010060:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010063:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010066:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001006a:	b9 08 00 00 00       	mov    ecx,0x8
c001006f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010071:	83 c4 2c             	add    esp,0x2c
c0010074:	5b                   	pop    ebx
c0010075:	5e                   	pop    esi
c0010076:	5f                   	pop    edi
c0010077:	5d                   	pop    ebp
c0010078:	c3                   	ret    
c0010079:	90                   	nop

c001007a <EnvVarContainer::deleteEnv(char const*)>:
c001007a:	c3                   	ret    
c001007b:	90                   	nop

c001007c <EnvVarContainer::loadFrom(char const*, char const*)>:
c001007c:	55                   	push   ebp
c001007d:	57                   	push   edi
c001007e:	56                   	push   esi
c001007f:	53                   	push   ebx
c0010080:	81 ec 38 01 00 00    	sub    esp,0x138
c0010086:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001008d:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010094:	68 14 01 00 00       	push   0x114
c0010099:	e8 f3 7b ff ff       	call   c0007c91 <malloc>
c001009e:	83 c4 0c             	add    esp,0xc
c00100a1:	89 c3                	mov    ebx,eax
c00100a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00100a6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00100ad:	50                   	push   eax
c00100ae:	e8 ef ad ff ff       	call   c000aea2 <File::File(char const*, Process*)>
c00100b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00100b6:	e8 15 b1 ff ff       	call   c000b1d0 <File::exists()>
c00100bb:	83 c4 10             	add    esp,0x10
c00100be:	84 c0                	test   al,al
c00100c0:	75 31                	jne    c00100f3 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00100c2:	50                   	push   eax
c00100c3:	50                   	push   eax
c00100c4:	6a 12                	push   0x12
c00100c6:	53                   	push   ebx
c00100c7:	e8 96 ae ff ff       	call   c000af62 <File::open(FileOpenMode)>
c00100cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00100ce:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00100d1:	89 34 24             	mov    DWORD PTR [esp],esi
c00100d4:	e8 67 04 ff ff       	call   c0000540 <strlen>
c00100d9:	5a                   	pop    edx
c00100da:	31 d2                	xor    edx,edx
c00100dc:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00100e0:	51                   	push   ecx
c00100e1:	56                   	push   esi
c00100e2:	52                   	push   edx
c00100e3:	50                   	push   eax
c00100e4:	53                   	push   ebx
c00100e5:	ff d7                	call   edi
c00100e7:	83 c4 14             	add    esp,0x14
c00100ea:	53                   	push   ebx
c00100eb:	e8 d0 ae ff ff       	call   c000afc0 <File::close()>
c00100f0:	83 c4 10             	add    esp,0x10
c00100f3:	56                   	push   esi
c00100f4:	31 f6                	xor    esi,esi
c00100f6:	68 00 01 00 00       	push   0x100
c00100fb:	6a 00                	push   0x0
c00100fd:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010101:	50                   	push   eax
c0010102:	e8 c9 03 ff ff       	call   c00004d0 <memset>
c0010107:	5f                   	pop    edi
c0010108:	58                   	pop    eax
c0010109:	6a 01                	push   0x1
c001010b:	53                   	push   ebx
c001010c:	e8 51 ae ff ff       	call   c000af62 <File::open(FileOpenMode)>
c0010111:	83 c4 10             	add    esp,0x10
c0010114:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001011c:	83 ec 0c             	sub    esp,0xc
c001011f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010121:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010125:	51                   	push   ecx
c0010126:	8d 54 24 23          	lea    edx,[esp+0x23]
c001012a:	52                   	push   edx
c001012b:	6a 00                	push   0x0
c001012d:	6a 01                	push   0x1
c001012f:	53                   	push   ebx
c0010130:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010133:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0010137:	83 c4 20             	add    esp,0x20
c001013a:	3c 0d                	cmp    al,0xd
c001013c:	0f 84 09 01 00 00    	je     c001024b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010142:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010147:	0f 84 ef 00 00 00    	je     c001023c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c001014d:	3c 0a                	cmp    al,0xa
c001014f:	74 13                	je     c0010164 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0010151:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010156:	74 0c                	je     c0010164 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0010158:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001015e:	0f 8e d8 00 00 00    	jle    c001023c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0010164:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010168:	83 ec 0c             	sub    esp,0xc
c001016b:	8d 78 01             	lea    edi,[eax+0x1]
c001016e:	57                   	push   edi
c001016f:	e8 1d 7b ff ff       	call   c0007c91 <malloc>
c0010174:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010178:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001017c:	8d 56 04             	lea    edx,[esi+0x4]
c001017f:	89 14 24             	mov    DWORD PTR [esp],edx
c0010182:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010186:	e8 06 7b ff ff       	call   c0007c91 <malloc>
c001018b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001018f:	83 c4 0c             	add    esp,0xc
c0010192:	57                   	push   edi
c0010193:	6a 00                	push   0x0
c0010195:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010199:	e8 32 03 ff ff       	call   c00004d0 <memset>
c001019e:	8d 74 24 30          	lea    esi,[esp+0x30]
c00101a2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00101a6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00101aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101ac:	83 c4 0c             	add    esp,0xc
c00101af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00101b3:	52                   	push   edx
c00101b4:	6a 00                	push   0x0
c00101b6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00101ba:	e8 11 03 ff ff       	call   c00004d0 <memset>
c00101bf:	8d 74 24 30          	lea    esi,[esp+0x30]
c00101c3:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00101c7:	89 34 24             	mov    DWORD PTR [esp],esi
c00101ca:	e8 71 03 ff ff       	call   c0000540 <strlen>
c00101cf:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00101d3:	89 c1                	mov    ecx,eax
c00101d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101d7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00101da:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00101dd:	40                   	inc    eax
c00101de:	83 c4 10             	add    esp,0x10
c00101e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00101e4:	85 d2                	test   edx,edx
c00101e6:	75 0c                	jne    c00101f4 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c00101e8:	83 ec 0c             	sub    esp,0xc
c00101eb:	6a 08                	push   0x8
c00101ed:	e8 9f 7a ff ff       	call   c0007c91 <malloc>
c00101f2:	eb 0c                	jmp    c0010200 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c00101f4:	c1 e0 03             	shl    eax,0x3
c00101f7:	51                   	push   ecx
c00101f8:	51                   	push   ecx
c00101f9:	50                   	push   eax
c00101fa:	52                   	push   edx
c00101fb:	e8 7d 7a ff ff       	call   c0007c7d <realloc>
c0010200:	83 c4 10             	add    esp,0x10
c0010203:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010206:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010209:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001020c:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010210:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010214:	b9 08 00 00 00       	mov    ecx,0x8
c0010219:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001021b:	31 f6                	xor    esi,esi
c001021d:	50                   	push   eax
c001021e:	68 00 01 00 00       	push   0x100
c0010223:	6a 00                	push   0x0
c0010225:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010229:	50                   	push   eax
c001022a:	e8 a1 02 ff ff       	call   c00004d0 <memset>
c001022f:	83 c4 10             	add    esp,0x10
c0010232:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001023a:	eb 0f                	jmp    c001024b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001023c:	3c 3d                	cmp    al,0x3d
c001023e:	74 07                	je     c0010247 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0010240:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0010244:	46                   	inc    esi
c0010245:	eb 04                	jmp    c001024b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010247:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001024b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010250:	0f 85 c6 fe ff ff    	jne    c001011c <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010256:	81 c4 2c 01 00 00    	add    esp,0x12c
c001025c:	5b                   	pop    ebx
c001025d:	5e                   	pop    esi
c001025e:	5f                   	pop    edi
c001025f:	5d                   	pop    ebp
c0010260:	c3                   	ret    
c0010261:	90                   	nop

c0010262 <EnvVarContainer::__loadSystem()>:
c0010262:	83 ec 10             	sub    esp,0x10
c0010265:	68 40 f9 01 c0       	push   0xc001f940
c001026a:	68 44 e7 01 c0       	push   0xc001e744
c001026f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010273:	e8 04 fe ff ff       	call   c001007c <EnvVarContainer::loadFrom(char const*, char const*)>
c0010278:	83 c4 1c             	add    esp,0x1c
c001027b:	c3                   	ret    

c001027c <EnvVarContainer::__loadUser()>:
c001027c:	c3                   	ret    
c001027d:	90                   	nop

c001027e <EnvVarContainer::EnvVarContainer(Process*)>:
c001027e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010282:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010288:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001028c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010290:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010297:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001029e:	90                   	nop
c001029f:	c3                   	ret    

c00102a0 <EnvVarContainer::~EnvVarContainer()>:
c00102a0:	83 ec 0c             	sub    esp,0xc
c00102a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00102aa:	85 c0                	test   eax,eax
c00102ac:	74 1d                	je     c00102cb <EnvVarContainer::~EnvVarContainer()+0x2b>
c00102ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00102b4:	85 c0                	test   eax,eax
c00102b6:	74 13                	je     c00102cb <EnvVarContainer::~EnvVarContainer()+0x2b>
c00102b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00102bf:	83 ec 0c             	sub    esp,0xc
c00102c2:	50                   	push   eax
c00102c3:	e8 d9 79 ff ff       	call   c0007ca1 <free>
c00102c8:	83 c4 10             	add    esp,0x10
c00102cb:	90                   	nop
c00102cc:	83 c4 0c             	add    esp,0xc
c00102cf:	c3                   	ret    

c00102d0 <Krnl::getEnv(Process*, char const*)>:
c00102d0:	53                   	push   ebx
c00102d1:	83 ec 08             	sub    esp,0x8
c00102d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102d8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00102dc:	39 05 90 3e 02 c0    	cmp    DWORD PTR ds:0xc0023e90,eax
c00102e2:	74 04                	je     c00102e8 <Krnl::getEnv(Process*, char const*)+0x18>
c00102e4:	85 c0                	test   eax,eax
c00102e6:	75 0b                	jne    c00102f3 <Krnl::getEnv(Process*, char const*)+0x23>
c00102e8:	a1 30 34 02 c0       	mov    eax,ds:0xc0023430
c00102ed:	85 c0                	test   eax,eax
c00102ef:	75 19                	jne    c001030a <Krnl::getEnv(Process*, char const*)+0x3a>
c00102f1:	eb 27                	jmp    c001031a <Krnl::getEnv(Process*, char const*)+0x4a>
c00102f3:	52                   	push   edx
c00102f4:	52                   	push   edx
c00102f5:	53                   	push   ebx
c00102f6:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00102fc:	e8 79 fc ff ff       	call   c000ff7a <EnvVarContainer::getEnv(char const*)>
c0010301:	83 c4 10             	add    esp,0x10
c0010304:	85 c0                	test   eax,eax
c0010306:	75 28                	jne    c0010330 <Krnl::getEnv(Process*, char const*)+0x60>
c0010308:	eb de                	jmp    c00102e8 <Krnl::getEnv(Process*, char const*)+0x18>
c001030a:	52                   	push   edx
c001030b:	52                   	push   edx
c001030c:	53                   	push   ebx
c001030d:	50                   	push   eax
c001030e:	e8 67 fc ff ff       	call   c000ff7a <EnvVarContainer::getEnv(char const*)>
c0010313:	83 c4 10             	add    esp,0x10
c0010316:	85 c0                	test   eax,eax
c0010318:	75 16                	jne    c0010330 <Krnl::getEnv(Process*, char const*)+0x60>
c001031a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001031e:	a1 34 34 02 c0       	mov    eax,ds:0xc0023434
c0010323:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010327:	83 c4 08             	add    esp,0x8
c001032a:	5b                   	pop    ebx
c001032b:	e9 4a fc ff ff       	jmp    c000ff7a <EnvVarContainer::getEnv(char const*)>
c0010330:	83 c4 08             	add    esp,0x8
c0010333:	5b                   	pop    ebx
c0010334:	c3                   	ret    

c0010335 <Krnl::setEnvSystem(char const*, char const*)>:
c0010335:	83 ec 10             	sub    esp,0x10
c0010338:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001033c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010340:	ff 35 34 34 02 c0    	push   DWORD PTR ds:0xc0023434
c0010346:	e8 6d fc ff ff       	call   c000ffb8 <EnvVarContainer::setEnv(char const*, char const*)>
c001034b:	83 c4 1c             	add    esp,0x1c
c001034e:	c3                   	ret    

c001034f <Krnl::setEnvUser(char const*, char const*)>:
c001034f:	a1 30 34 02 c0       	mov    eax,ds:0xc0023430
c0010354:	85 c0                	test   eax,eax
c0010356:	74 15                	je     c001036d <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0010358:	83 ec 10             	sub    esp,0x10
c001035b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001035f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010363:	50                   	push   eax
c0010364:	e8 4f fc ff ff       	call   c000ffb8 <EnvVarContainer::setEnv(char const*, char const*)>
c0010369:	83 c4 1c             	add    esp,0x1c
c001036c:	c3                   	ret    
c001036d:	c3                   	ret    

c001036e <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001036e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010372:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010378:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001037c:	e9 37 fc ff ff       	jmp    c000ffb8 <EnvVarContainer::setEnv(char const*, char const*)>

c0010381 <Krnl::deleteEnvSystem(char const*)>:
c0010381:	c3                   	ret    

c0010382 <Krnl::deleteEnvUser(char const*)>:
c0010382:	c3                   	ret    

c0010383 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0010383:	c3                   	ret    

c0010384 <Krnl::newProcessEnv(Process*)>:
c0010384:	83 ec 28             	sub    esp,0x28
c0010387:	6a 0c                	push   0xc
c0010389:	e8 03 79 ff ff       	call   c0007c91 <malloc>
c001038e:	5a                   	pop    edx
c001038f:	59                   	pop    ecx
c0010390:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010394:	50                   	push   eax
c0010395:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010399:	e8 e0 fe ff ff       	call   c001027e <EnvVarContainer::EnvVarContainer(Process*)>
c001039e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00103a2:	83 c4 2c             	add    esp,0x2c
c00103a5:	c3                   	ret    

c00103a6 <Krnl::copyProcessEnv(Process*, Process*)>:
c00103a6:	57                   	push   edi
c00103a7:	56                   	push   esi
c00103a8:	53                   	push   ebx
c00103a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103ad:	83 ec 0c             	sub    esp,0xc
c00103b0:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00103b6:	6a 0c                	push   0xc
c00103b8:	e8 d4 78 ff ff       	call   c0007c91 <malloc>
c00103bd:	89 c3                	mov    ebx,eax
c00103bf:	58                   	pop    eax
c00103c0:	5a                   	pop    edx
c00103c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103c5:	53                   	push   ebx
c00103c6:	e8 b3 fe ff ff       	call   c001027e <EnvVarContainer::EnvVarContainer(Process*)>
c00103cb:	8b 07                	mov    eax,DWORD PTR [edi]
c00103cd:	89 03                	mov    DWORD PTR [ebx],eax
c00103cf:	c1 e0 03             	shl    eax,0x3
c00103d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00103d5:	e8 b7 78 ff ff       	call   c0007c91 <malloc>
c00103da:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00103dd:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00103df:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00103e2:	c1 e1 03             	shl    ecx,0x3
c00103e5:	89 c7                	mov    edi,eax
c00103e7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103e9:	83 c4 10             	add    esp,0x10
c00103ec:	89 d8                	mov    eax,ebx
c00103ee:	5b                   	pop    ebx
c00103ef:	5e                   	pop    esi
c00103f0:	5f                   	pop    edi
c00103f1:	c3                   	ret    

c00103f2 <Krnl::loadSystemEnv()>:
c00103f2:	53                   	push   ebx
c00103f3:	83 ec 14             	sub    esp,0x14
c00103f6:	6a 0c                	push   0xc
c00103f8:	e8 94 78 ff ff       	call   c0007c91 <malloc>
c00103fd:	89 c3                	mov    ebx,eax
c00103ff:	58                   	pop    eax
c0010400:	5a                   	pop    edx
c0010401:	ff 35 90 3e 02 c0    	push   DWORD PTR ds:0xc0023e90
c0010407:	53                   	push   ebx
c0010408:	e8 71 fe ff ff       	call   c001027e <EnvVarContainer::EnvVarContainer(Process*)>
c001040d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010410:	89 1d 34 34 02 c0    	mov    DWORD PTR ds:0xc0023434,ebx
c0010416:	e8 47 fe ff ff       	call   c0010262 <EnvVarContainer::__loadSystem()>
c001041b:	83 c4 18             	add    esp,0x18
c001041e:	5b                   	pop    ebx
c001041f:	c3                   	ret    

c0010420 <Krnl::loadUserEnv()>:
c0010420:	53                   	push   ebx
c0010421:	83 ec 14             	sub    esp,0x14
c0010424:	6a 0c                	push   0xc
c0010426:	e8 66 78 ff ff       	call   c0007c91 <malloc>
c001042b:	89 c3                	mov    ebx,eax
c001042d:	58                   	pop    eax
c001042e:	5a                   	pop    edx
c001042f:	ff 35 90 3e 02 c0    	push   DWORD PTR ds:0xc0023e90
c0010435:	53                   	push   ebx
c0010436:	e8 43 fe ff ff       	call   c001027e <EnvVarContainer::EnvVarContainer(Process*)>
c001043b:	89 1d 30 34 02 c0    	mov    DWORD PTR ds:0xc0023430,ebx
c0010441:	83 c4 18             	add    esp,0x18
c0010444:	5b                   	pop    ebx
c0010445:	c3                   	ret    

c0010446 <Krnl::flushEnv()>:
c0010446:	c3                   	ret    

c0010447 <Krnl::getProcessTotalEnvCount(Process*)>:
c0010447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001044b:	8b 15 30 34 02 c0    	mov    edx,DWORD PTR ds:0xc0023430
c0010451:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010457:	a1 34 34 02 c0       	mov    eax,ds:0xc0023434
c001045c:	8b 00                	mov    eax,DWORD PTR [eax]
c001045e:	03 01                	add    eax,DWORD PTR [ecx]
c0010460:	85 d2                	test   edx,edx
c0010462:	74 02                	je     c0010466 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010464:	03 02                	add    eax,DWORD PTR [edx]
c0010466:	c3                   	ret    

c0010467 <Krnl::getProcessEnvPair(Process*, int)>:
c0010467:	57                   	push   edi
c0010468:	56                   	push   esi
c0010469:	8b 35 30 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023430
c001046f:	53                   	push   ebx
c0010470:	85 f6                	test   esi,esi
c0010472:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010476:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001047a:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010480:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010484:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010486:	75 16                	jne    c001049e <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010488:	39 c2                	cmp    edx,eax
c001048a:	7c 16                	jl     c00104a2 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001048c:	8b 0d 34 34 02 c0    	mov    ecx,DWORD PTR ds:0xc0023434
c0010492:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010494:	01 c6                	add    esi,eax
c0010496:	39 d6                	cmp    esi,edx
c0010498:	7e 3c                	jle    c00104d6 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001049a:	29 c2                	sub    edx,eax
c001049c:	eb 04                	jmp    c00104a2 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001049e:	39 c2                	cmp    edx,eax
c00104a0:	7d 05                	jge    c00104a7 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00104a2:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00104a5:	eb 20                	jmp    c00104c7 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00104a7:	8b 3e                	mov    edi,DWORD PTR [esi]
c00104a9:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00104ac:	39 d1                	cmp    ecx,edx
c00104ae:	7e 04                	jle    c00104b4 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00104b0:	29 c2                	sub    edx,eax
c00104b2:	eb 10                	jmp    c00104c4 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00104b4:	8b 35 34 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023434
c00104ba:	03 0e                	add    ecx,DWORD PTR [esi]
c00104bc:	39 d1                	cmp    ecx,edx
c00104be:	7e 16                	jle    c00104d6 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00104c0:	29 c2                	sub    edx,eax
c00104c2:	29 fa                	sub    edx,edi
c00104c4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00104c7:	8d 14 d0             	lea    edx,[eax+edx*8]
c00104ca:	8b 02                	mov    eax,DWORD PTR [edx]
c00104cc:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00104cf:	89 03                	mov    DWORD PTR [ebx],eax
c00104d1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00104d4:	eb 1d                	jmp    c00104f3 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00104d6:	83 ec 0c             	sub    esp,0xc
c00104d9:	68 66 e7 01 c0       	push   0xc001e766
c00104de:	e8 ac 00 00 00       	call   c001058f <KePanic(char const*)>
c00104e3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00104e9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00104f0:	83 c4 10             	add    esp,0x10
c00104f3:	89 d8                	mov    eax,ebx
c00104f5:	5b                   	pop    ebx
c00104f6:	5e                   	pop    esi
c00104f7:	5f                   	pop    edi
c00104f8:	c2 04 00             	ret    0x4

c00104fb <CPU::current()>:
c00104fb:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c0010500:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010506:	c3                   	ret    

c0010507 <operator new(unsigned long)>:
c0010507:	e9 85 77 ff ff       	jmp    c0007c91 <malloc>

c001050c <operator delete(void*)>:
c001050c:	e9 a0 77 ff ff       	jmp    c0007cb1 <rfree>

c0010511 <disableIRQs()>:
c0010511:	fa                   	cli    
c0010512:	c3                   	ret    

c0010513 <enableIRQs()>:
c0010513:	fb                   	sti    
c0010514:	c3                   	ret    

c0010515 <lockScheduler()>:
c0010515:	fa                   	cli    
c0010516:	ff 05 68 3e 02 c0    	inc    DWORD PTR ds:0xc0023e68
c001051c:	c3                   	ret    

c001051d <unlockScheduler()>:
c001051d:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c0010522:	48                   	dec    eax
c0010523:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c0010528:	75 01                	jne    c001052b <unlockScheduler()+0xe>
c001052a:	fb                   	sti    
c001052b:	c3                   	ret    

c001052c <lockStuff()>:
c001052c:	fa                   	cli    
c001052d:	ff 05 68 3e 02 c0    	inc    DWORD PTR ds:0xc0023e68
c0010533:	ff 05 64 3e 02 c0    	inc    DWORD PTR ds:0xc0023e64
c0010539:	c3                   	ret    

c001053a <unlockStuff()>:
c001053a:	83 ec 0c             	sub    esp,0xc
c001053d:	a1 64 3e 02 c0       	mov    eax,ds:0xc0023e64
c0010542:	48                   	dec    eax
c0010543:	a3 64 3e 02 c0       	mov    ds:0xc0023e64,eax
c0010548:	75 18                	jne    c0010562 <unlockStuff()+0x28>
c001054a:	83 3d 60 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023e60,0x0
c0010551:	74 0f                	je     c0010562 <unlockStuff()+0x28>
c0010553:	c7 05 60 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e60,0x0
c001055d:	e8 ca 33 00 00       	call   c001392c <schedule()>
c0010562:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c0010567:	48                   	dec    eax
c0010568:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c001056d:	75 01                	jne    c0010570 <unlockStuff()+0x36>
c001056f:	fb                   	sti    
c0010570:	83 c4 0c             	add    esp,0xc
c0010573:	c3                   	ret    

c0010574 <Virt::getAKernelVAS()>:
c0010574:	a1 b0 0a 02 c0       	mov    eax,ds:0xc0020ab0
c0010579:	c3                   	ret    

c001057a <__not_memcpy>:
c001057a:	57                   	push   edi
c001057b:	56                   	push   esi
c001057c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010580:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010584:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010588:	89 c7                	mov    edi,eax
c001058a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001058c:	5e                   	pop    esi
c001058d:	5f                   	pop    edi
c001058e:	c3                   	ret    

c001058f <KePanic(char const*)>:
c001058f:	c6 05 38 34 02 c0 01 	mov    BYTE PTR ds:0xc0023438,0x1
c0010596:	e9 89 51 00 00       	jmp    c0015724 <HalPanic(char const*)>

c001059b <Krnl::powerThread(void*)>:
c001059b:	83 ec 0c             	sub    esp,0xc
c001059e:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c00105a3:	48                   	dec    eax
c00105a4:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c00105a9:	75 01                	jne    c00105ac <Krnl::powerThread(void*)+0x11>
c00105ab:	fb                   	sti    
c00105ac:	83 ec 0c             	sub    esp,0xc
c00105af:	c6 05 40 34 02 c0 00 	mov    BYTE PTR ds:0xc0023440,0x0
c00105b6:	6a 0a                	push   0xa
c00105b8:	e8 7f 36 00 00       	call   c0013c3c <sleep(unsigned int)>
c00105bd:	83 05 84 34 02 c0 0a 	add    DWORD PTR ds:0xc0023484,0xa
c00105c4:	83 c4 10             	add    esp,0x10
c00105c7:	eb e3                	jmp    c00105ac <Krnl::powerThread(void*)+0x11>

c00105c9 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00105c9:	57                   	push   edi
c00105ca:	b9 09 00 00 00       	mov    ecx,0x9
c00105cf:	56                   	push   esi
c00105d0:	bf 60 34 02 c0       	mov    edi,0xc0023460
c00105d5:	fc                   	cld    
c00105d6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00105da:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00105dc:	5e                   	pop    esi
c00105dd:	5f                   	pop    edi
c00105de:	c3                   	ret    

c00105df <Krnl::userIOReceived()>:
c00105df:	c7 05 84 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023484,0x0
c00105e9:	c3                   	ret    

c00105ea <Krnl::handlePowerButton()>:
c00105ea:	83 ec 0c             	sub    esp,0xc
c00105ed:	a1 60 34 02 c0       	mov    eax,ds:0xc0023460
c00105f2:	83 f8 02             	cmp    eax,0x2
c00105f5:	75 10                	jne    c0010607 <Krnl::handlePowerButton()+0x1d>
c00105f7:	83 ec 0c             	sub    esp,0xc
c00105fa:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0010600:	e8 27 6d ff ff       	call   c000732c <Computer::shutdown()>
c0010605:	eb 11                	jmp    c0010618 <Krnl::handlePowerButton()+0x2e>
c0010607:	48                   	dec    eax
c0010608:	75 11                	jne    c001061b <Krnl::handlePowerButton()+0x31>
c001060a:	83 ec 0c             	sub    esp,0xc
c001060d:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0010613:	e8 44 6d ff ff       	call   c000735c <Computer::sleep()>
c0010618:	83 c4 10             	add    esp,0x10
c001061b:	83 c4 0c             	add    esp,0xc
c001061e:	c3                   	ret    

c001061f <Krnl::handleSleepButton()>:
c001061f:	83 ec 0c             	sub    esp,0xc
c0010622:	a1 64 34 02 c0       	mov    eax,ds:0xc0023464
c0010627:	83 f8 02             	cmp    eax,0x2
c001062a:	75 10                	jne    c001063c <Krnl::handleSleepButton()+0x1d>
c001062c:	83 ec 0c             	sub    esp,0xc
c001062f:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0010635:	e8 f2 6c ff ff       	call   c000732c <Computer::shutdown()>
c001063a:	eb 11                	jmp    c001064d <Krnl::handleSleepButton()+0x2e>
c001063c:	48                   	dec    eax
c001063d:	75 11                	jne    c0010650 <Krnl::handleSleepButton()+0x31>
c001063f:	83 ec 0c             	sub    esp,0xc
c0010642:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0010648:	e8 0f 6d ff ff       	call   c000735c <Computer::sleep()>
c001064d:	83 c4 10             	add    esp,0x10
c0010650:	83 c4 0c             	add    esp,0xc
c0010653:	c3                   	ret    

c0010654 <Krnl::setupPowerManager()>:
c0010654:	83 ec 0c             	sub    esp,0xc
c0010657:	c7 05 84 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023484,0x0
c0010661:	68 f0 00 00 00       	push   0xf0
c0010666:	c6 05 40 34 02 c0 00 	mov    BYTE PTR ds:0xc0023440,0x0
c001066d:	6a 00                	push   0x0
c001066f:	68 9b 05 01 c0       	push   0xc001059b
c0010674:	ff 35 90 3e 02 c0    	push   DWORD PTR ds:0xc0023e90
c001067a:	e8 8d 30 00 00       	call   c001370c <Process::createThread(void (*)(void*), void*, int)>
c001067f:	c7 05 60 34 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0023460,0x2
c0010689:	c7 05 64 34 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023464,0x1
c0010693:	c7 05 68 34 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0023468,0x3
c001069d:	c7 05 6c 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002346c,0x0
c00106a7:	c7 05 78 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023478,0x0
c00106b1:	c7 05 70 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023470,0x0
c00106bb:	c7 05 7c 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002347c,0x0
c00106c5:	c7 05 74 34 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0023474,0x3c
c00106cf:	c7 05 80 34 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0023480,0x3c
c00106d9:	83 c4 1c             	add    esp,0x1c
c00106dc:	c3                   	ret    
c00106dd:	66 90                	xchg   ax,ax
c00106df:	90                   	nop

c00106e0 <KeResolveCompatibilitySymbol(char*)>:
c00106e0:	83 ec 0c             	sub    esp,0xc
c00106e3:	83 ec 08             	sub    esp,0x8
c00106e6:	68 80 e7 01 c0       	push   0xc001e780
c00106eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106ef:	e8 ec ff fe ff       	call   c00006e0 <strcmp>
c00106f4:	83 c4 10             	add    esp,0x10
c00106f7:	85 c0                	test   eax,eax
c00106f9:	0f 94 c0             	sete   al
c00106fc:	84 c0                	test   al,al
c00106fe:	74 0c                	je     c001070c <KeResolveCompatibilitySymbol(char*)+0x2c>
c0010700:	b8 b8 09 02 c0       	mov    eax,0xc00209b8
c0010705:	e9 12 01 00 00       	jmp    c001081c <KeResolveCompatibilitySymbol(char*)+0x13c>
c001070a:	66 90                	xchg   ax,ax
c001070c:	83 ec 08             	sub    esp,0x8
c001070f:	68 89 e7 01 c0       	push   0xc001e789
c0010714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010718:	e8 c3 ff fe ff       	call   c00006e0 <strcmp>
c001071d:	83 c4 10             	add    esp,0x10
c0010720:	85 c0                	test   eax,eax
c0010722:	0f 94 c0             	sete   al
c0010725:	84 c0                	test   al,al
c0010727:	74 0b                	je     c0010734 <KeResolveCompatibilitySymbol(char*)+0x54>
c0010729:	b8 10 c2 01 c0       	mov    eax,0xc001c210
c001072e:	e9 e9 00 00 00       	jmp    c001081c <KeResolveCompatibilitySymbol(char*)+0x13c>
c0010733:	90                   	nop
c0010734:	83 ec 08             	sub    esp,0x8
c0010737:	68 93 e7 01 c0       	push   0xc001e793
c001073c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010740:	e8 9b ff fe ff       	call   c00006e0 <strcmp>
c0010745:	83 c4 10             	add    esp,0x10
c0010748:	85 c0                	test   eax,eax
c001074a:	0f 94 c0             	sete   al
c001074d:	84 c0                	test   al,al
c001074f:	74 0b                	je     c001075c <KeResolveCompatibilitySymbol(char*)+0x7c>
c0010751:	b8 44 bf 01 c0       	mov    eax,0xc001bf44
c0010756:	e9 c1 00 00 00       	jmp    c001081c <KeResolveCompatibilitySymbol(char*)+0x13c>
c001075b:	90                   	nop
c001075c:	83 ec 08             	sub    esp,0x8
c001075f:	68 9c e7 01 c0       	push   0xc001e79c
c0010764:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010768:	e8 73 ff fe ff       	call   c00006e0 <strcmp>
c001076d:	83 c4 10             	add    esp,0x10
c0010770:	85 c0                	test   eax,eax
c0010772:	0f 94 c0             	sete   al
c0010775:	84 c0                	test   al,al
c0010777:	74 0b                	je     c0010784 <KeResolveCompatibilitySymbol(char*)+0xa4>
c0010779:	b8 8f 05 01 c0       	mov    eax,0xc001058f
c001077e:	e9 99 00 00 00       	jmp    c001081c <KeResolveCompatibilitySymbol(char*)+0x13c>
c0010783:	90                   	nop
c0010784:	83 ec 08             	sub    esp,0x8
c0010787:	68 af e7 01 c0       	push   0xc001e7af
c001078c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010790:	e8 4b ff fe ff       	call   c00006e0 <strcmp>
c0010795:	83 c4 10             	add    esp,0x10
c0010798:	85 c0                	test   eax,eax
c001079a:	0f 94 c0             	sete   al
c001079d:	84 c0                	test   al,al
c001079f:	74 07                	je     c00107a8 <KeResolveCompatibilitySymbol(char*)+0xc8>
c00107a1:	b8 10 c3 01 c0       	mov    eax,0xc001c310
c00107a6:	eb 74                	jmp    c001081c <KeResolveCompatibilitySymbol(char*)+0x13c>
c00107a8:	83 ec 08             	sub    esp,0x8
c00107ab:	68 b9 e7 01 c0       	push   0xc001e7b9
c00107b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107b4:	e8 27 ff fe ff       	call   c00006e0 <strcmp>
c00107b9:	83 c4 10             	add    esp,0x10
c00107bc:	85 c0                	test   eax,eax
c00107be:	0f 94 c0             	sete   al
c00107c1:	84 c0                	test   al,al
c00107c3:	74 07                	je     c00107cc <KeResolveCompatibilitySymbol(char*)+0xec>
c00107c5:	b8 90 c0 01 c0       	mov    eax,0xc001c090
c00107ca:	eb 50                	jmp    c001081c <KeResolveCompatibilitySymbol(char*)+0x13c>
c00107cc:	83 ec 08             	sub    esp,0x8
c00107cf:	68 c2 e7 01 c0       	push   0xc001e7c2
c00107d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107d8:	e8 03 ff fe ff       	call   c00006e0 <strcmp>
c00107dd:	83 c4 10             	add    esp,0x10
c00107e0:	85 c0                	test   eax,eax
c00107e2:	0f 94 c0             	sete   al
c00107e5:	84 c0                	test   al,al
c00107e7:	74 07                	je     c00107f0 <KeResolveCompatibilitySymbol(char*)+0x110>
c00107e9:	b8 bc 09 02 c0       	mov    eax,0xc00209bc
c00107ee:	eb 2c                	jmp    c001081c <KeResolveCompatibilitySymbol(char*)+0x13c>
c00107f0:	83 ec 08             	sub    esp,0x8
c00107f3:	68 cf e7 01 c0       	push   0xc001e7cf
c00107f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107fc:	e8 df fe fe ff       	call   c00006e0 <strcmp>
c0010801:	83 c4 10             	add    esp,0x10
c0010804:	85 c0                	test   eax,eax
c0010806:	0f 94 c0             	sete   al
c0010809:	84 c0                	test   al,al
c001080b:	74 07                	je     c0010814 <KeResolveCompatibilitySymbol(char*)+0x134>
c001080d:	b8 bd 09 02 c0       	mov    eax,0xc00209bd
c0010812:	eb 08                	jmp    c001081c <KeResolveCompatibilitySymbol(char*)+0x13c>
c0010814:	b8 00 00 00 00       	mov    eax,0x0
c0010819:	8d 76 00             	lea    esi,[esi+0x0]
c001081c:	83 c4 0c             	add    esp,0xc
c001081f:	c3                   	ret    

c0010820 <sysCallSeekDir(regs*)>:
c0010820:	31 c0                	xor    eax,eax
c0010822:	31 d2                	xor    edx,edx
c0010824:	c3                   	ret    

c0010825 <sysCallTellDir(regs*)>:
c0010825:	31 c0                	xor    eax,eax
c0010827:	31 d2                	xor    edx,edx
c0010829:	c3                   	ret    

c001082a <sysCallVerify(regs*)>:
c001082a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001082e:	31 d2                	xor    edx,edx
c0010830:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010833:	c3                   	ret    

c0010834 <sysCallGetArgc(regs*)>:
c0010834:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010839:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001083c:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010842:	99                   	cdq    
c0010843:	c3                   	ret    

c0010844 <sysCallTTYName(regs*)>:
c0010844:	b8 01 00 00 00       	mov    eax,0x1
c0010849:	31 d2                	xor    edx,edx
c001084b:	c3                   	ret    

c001084c <sysFormatDisk(regs*)>:
c001084c:	56                   	push   esi
c001084d:	53                   	push   ebx
c001084e:	50                   	push   eax
c001084f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010853:	8b 1d b4 0a 02 c0    	mov    ebx,DWORD PTR ds:0xc0020ab4
c0010859:	eb 28                	jmp    c0010883 <sysFormatDisk(regs*)+0x37>
c001085b:	83 ec 0c             	sub    esp,0xc
c001085e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010861:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010864:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010866:	51                   	push   ecx
c0010867:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c001086a:	51                   	push   ecx
c001086b:	50                   	push   eax
c001086c:	8b 04 85 20 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0e0]
c0010873:	50                   	push   eax
c0010874:	53                   	push   ebx
c0010875:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010878:	83 c4 20             	add    esp,0x20
c001087b:	83 f8 08             	cmp    eax,0x8
c001087e:	75 12                	jne    c0010892 <sysFormatDisk(regs*)+0x46>
c0010880:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010883:	85 db                	test   ebx,ebx
c0010885:	75 d4                	jne    c001085b <sysFormatDisk(regs*)+0xf>
c0010887:	59                   	pop    ecx
c0010888:	b8 03 00 00 00       	mov    eax,0x3
c001088d:	31 d2                	xor    edx,edx
c001088f:	5b                   	pop    ebx
c0010890:	5e                   	pop    esi
c0010891:	c3                   	ret    
c0010892:	85 c0                	test   eax,eax
c0010894:	74 1b                	je     c00108b1 <sysFormatDisk(regs*)+0x65>
c0010896:	83 f8 09             	cmp    eax,0x9
c0010899:	74 0b                	je     c00108a6 <sysFormatDisk(regs*)+0x5a>
c001089b:	59                   	pop    ecx
c001089c:	b8 02 00 00 00       	mov    eax,0x2
c00108a1:	31 d2                	xor    edx,edx
c00108a3:	5b                   	pop    ebx
c00108a4:	5e                   	pop    esi
c00108a5:	c3                   	ret    
c00108a6:	59                   	pop    ecx
c00108a7:	b8 01 00 00 00       	mov    eax,0x1
c00108ac:	31 d2                	xor    edx,edx
c00108ae:	5b                   	pop    ebx
c00108af:	5e                   	pop    esi
c00108b0:	c3                   	ret    
c00108b1:	59                   	pop    ecx
c00108b2:	31 c0                	xor    eax,eax
c00108b4:	31 d2                	xor    edx,edx
c00108b6:	5b                   	pop    ebx
c00108b7:	5e                   	pop    esi
c00108b8:	c3                   	ret    

c00108b9 <sysSetDiskVolumeLabel(regs*)>:
c00108b9:	56                   	push   esi
c00108ba:	53                   	push   ebx
c00108bb:	53                   	push   ebx
c00108bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00108c0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00108c3:	83 f8 19             	cmp    eax,0x19
c00108c6:	77 2d                	ja     c00108f5 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00108c8:	8b 0c 85 20 2f 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd0e0]
c00108cf:	85 c9                	test   ecx,ecx
c00108d1:	74 22                	je     c00108f5 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00108d3:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00108d6:	85 db                	test   ebx,ebx
c00108d8:	74 1b                	je     c00108f5 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00108da:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00108e0:	85 d2                	test   edx,edx
c00108e2:	74 11                	je     c00108f5 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00108e4:	8b 32                	mov    esi,DWORD PTR [edx]
c00108e6:	53                   	push   ebx
c00108e7:	50                   	push   eax
c00108e8:	51                   	push   ecx
c00108e9:	52                   	push   edx
c00108ea:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00108ed:	83 c4 10             	add    esp,0x10
c00108f0:	99                   	cdq    
c00108f1:	59                   	pop    ecx
c00108f2:	5b                   	pop    ebx
c00108f3:	5e                   	pop    esi
c00108f4:	c3                   	ret    
c00108f5:	59                   	pop    ecx
c00108f6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00108fb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010900:	5b                   	pop    ebx
c0010901:	5e                   	pop    esi
c0010902:	c3                   	ret    

c0010903 <sysGetDiskVolumeLabel(regs*)>:
c0010903:	57                   	push   edi
c0010904:	56                   	push   esi
c0010905:	53                   	push   ebx
c0010906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001090a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001090d:	83 fa 19             	cmp    edx,0x19
c0010910:	77 38                	ja     c001094a <sysGetDiskVolumeLabel(regs*)+0x47>
c0010912:	8b 0c 95 20 2f 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdd0e0]
c0010919:	85 c9                	test   ecx,ecx
c001091b:	74 2d                	je     c001094a <sysGetDiskVolumeLabel(regs*)+0x47>
c001091d:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010920:	85 db                	test   ebx,ebx
c0010922:	74 26                	je     c001094a <sysGetDiskVolumeLabel(regs*)+0x47>
c0010924:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010927:	85 f6                	test   esi,esi
c0010929:	74 1f                	je     c001094a <sysGetDiskVolumeLabel(regs*)+0x47>
c001092b:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0010931:	85 c0                	test   eax,eax
c0010933:	74 15                	je     c001094a <sysGetDiskVolumeLabel(regs*)+0x47>
c0010935:	83 ec 0c             	sub    esp,0xc
c0010938:	8b 38                	mov    edi,DWORD PTR [eax]
c001093a:	56                   	push   esi
c001093b:	53                   	push   ebx
c001093c:	52                   	push   edx
c001093d:	51                   	push   ecx
c001093e:	50                   	push   eax
c001093f:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010942:	83 c4 20             	add    esp,0x20
c0010945:	99                   	cdq    
c0010946:	5b                   	pop    ebx
c0010947:	5e                   	pop    esi
c0010948:	5f                   	pop    edi
c0010949:	c3                   	ret    
c001094a:	5b                   	pop    ebx
c001094b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010950:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010955:	5e                   	pop    esi
c0010956:	5f                   	pop    edi
c0010957:	c3                   	ret    

c0010958 <sysShutdown(regs*)>:
c0010958:	83 ec 0c             	sub    esp,0xc
c001095b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001095f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010962:	85 c0                	test   eax,eax
c0010964:	74 18                	je     c001097e <sysShutdown(regs*)+0x26>
c0010966:	83 f8 01             	cmp    eax,0x1
c0010969:	74 38                	je     c00109a3 <sysShutdown(regs*)+0x4b>
c001096b:	83 f8 02             	cmp    eax,0x2
c001096e:	74 24                	je     c0010994 <sysShutdown(regs*)+0x3c>
c0010970:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010975:	ba ff ff ff ff       	mov    edx,0xffffffff
c001097a:	83 c4 0c             	add    esp,0xc
c001097d:	c3                   	ret    
c001097e:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c0010983:	8b 10                	mov    edx,DWORD PTR [eax]
c0010985:	6a 00                	push   0x0
c0010987:	6a 00                	push   0x0
c0010989:	6a 00                	push   0x0
c001098b:	50                   	push   eax
c001098c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001098f:	83 c4 10             	add    esp,0x10
c0010992:	eb dc                	jmp    c0010970 <sysShutdown(regs*)+0x18>
c0010994:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c0010999:	8b 10                	mov    edx,DWORD PTR [eax]
c001099b:	6a 00                	push   0x0
c001099d:	6a 00                	push   0x0
c001099f:	6a 01                	push   0x1
c00109a1:	eb e8                	jmp    c001098b <sysShutdown(regs*)+0x33>
c00109a3:	a1 a0 2f 02 c0       	mov    eax,ds:0xc0022fa0
c00109a8:	85 c0                	test   eax,eax
c00109aa:	74 02                	je     c00109ae <sysShutdown(regs*)+0x56>
c00109ac:	ff d0                	call   eax
c00109ae:	31 c0                	xor    eax,eax
c00109b0:	31 d2                	xor    edx,edx
c00109b2:	83 c4 0c             	add    esp,0xc
c00109b5:	c3                   	ret    

c00109b6 <sysCallRealpath(regs*)>:
c00109b6:	83 ec 0c             	sub    esp,0xc
c00109b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109bd:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00109c0:	85 d2                	test   edx,edx
c00109c2:	74 07                	je     c00109cb <sysCallRealpath(regs*)+0x15>
c00109c4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00109c7:	85 c0                	test   eax,eax
c00109c9:	75 0b                	jne    c00109d6 <sysCallRealpath(regs*)+0x20>
c00109cb:	b8 01 00 00 00       	mov    eax,0x1
c00109d0:	31 d2                	xor    edx,edx
c00109d2:	83 c4 0c             	add    esp,0xc
c00109d5:	c3                   	ret    
c00109d6:	51                   	push   ecx
c00109d7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00109dd:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00109e0:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00109e6:	51                   	push   ecx
c00109e7:	52                   	push   edx
c00109e8:	50                   	push   eax
c00109e9:	e8 0a a3 ff ff       	call   c000acf8 <Fs::standardiseFiles(char*, char const*, char const*)>
c00109ee:	83 c4 10             	add    esp,0x10
c00109f1:	31 c0                	xor    eax,eax
c00109f3:	31 d2                	xor    edx,edx
c00109f5:	83 c4 0c             	add    esp,0xc
c00109f8:	c3                   	ret    

c00109f9 <sysCallReadDir(regs*)>:
c00109f9:	53                   	push   ebx
c00109fa:	83 ec 18             	sub    esp,0x18
c00109fd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010a01:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010a04:	83 f8 02             	cmp    eax,0x2
c0010a07:	76 61                	jbe    c0010a6a <sysCallReadDir(regs*)+0x71>
c0010a09:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010a10:	77 49                	ja     c0010a5b <sysCallReadDir(regs*)+0x62>
c0010a12:	83 ec 0c             	sub    esp,0xc
c0010a15:	50                   	push   eax
c0010a16:	e8 68 8b ff ff       	call   c0009583 <getFromFileDescriptor(int)>
c0010a1b:	83 c4 10             	add    esp,0x10
c0010a1e:	85 c0                	test   eax,eax
c0010a20:	74 39                	je     c0010a5b <sysCallReadDir(regs*)+0x62>
c0010a22:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010a2a:	83 ec 0c             	sub    esp,0xc
c0010a2d:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a2f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010a33:	51                   	push   ecx
c0010a34:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010a37:	51                   	push   ecx
c0010a38:	6a 00                	push   0x0
c0010a3a:	68 10 01 00 00       	push   0x110
c0010a3f:	50                   	push   eax
c0010a40:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010a43:	83 c4 20             	add    esp,0x20
c0010a46:	85 c0                	test   eax,eax
c0010a48:	74 29                	je     c0010a73 <sysCallReadDir(regs*)+0x7a>
c0010a4a:	83 f8 07             	cmp    eax,0x7
c0010a4d:	74 1b                	je     c0010a6a <sysCallReadDir(regs*)+0x71>
c0010a4f:	b8 02 00 00 00       	mov    eax,0x2
c0010a54:	31 d2                	xor    edx,edx
c0010a56:	83 c4 18             	add    esp,0x18
c0010a59:	5b                   	pop    ebx
c0010a5a:	c3                   	ret    
c0010a5b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a60:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a65:	83 c4 18             	add    esp,0x18
c0010a68:	5b                   	pop    ebx
c0010a69:	c3                   	ret    
c0010a6a:	b8 01 00 00 00       	mov    eax,0x1
c0010a6f:	31 d2                	xor    edx,edx
c0010a71:	eb e3                	jmp    c0010a56 <sysCallReadDir(regs*)+0x5d>
c0010a73:	31 c0                	xor    eax,eax
c0010a75:	31 d2                	xor    edx,edx
c0010a77:	eb dd                	jmp    c0010a56 <sysCallReadDir(regs*)+0x5d>

c0010a79 <sysCallIsATTY(regs*)>:
c0010a79:	83 ec 0c             	sub    esp,0xc
c0010a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a80:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010a83:	83 f8 02             	cmp    eax,0x2
c0010a86:	76 07                	jbe    c0010a8f <sysCallIsATTY(regs*)+0x16>
c0010a88:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010a8d:	75 28                	jne    c0010ab7 <sysCallIsATTY(regs*)+0x3e>
c0010a8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a94:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a97:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010a9d:	85 c0                	test   eax,eax
c0010a9f:	74 26                	je     c0010ac7 <sysCallIsATTY(regs*)+0x4e>
c0010aa1:	83 ec 0c             	sub    esp,0xc
c0010aa4:	8b 10                	mov    edx,DWORD PTR [eax]
c0010aa6:	50                   	push   eax
c0010aa7:	ff 12                	call   DWORD PTR [edx]
c0010aa9:	31 d2                	xor    edx,edx
c0010aab:	25 ff 00 00 00       	and    eax,0xff
c0010ab0:	83 c4 10             	add    esp,0x10
c0010ab3:	83 c4 0c             	add    esp,0xc
c0010ab6:	c3                   	ret    
c0010ab7:	83 ec 0c             	sub    esp,0xc
c0010aba:	50                   	push   eax
c0010abb:	e8 c3 8a ff ff       	call   c0009583 <getFromFileDescriptor(int)>
c0010ac0:	83 c4 10             	add    esp,0x10
c0010ac3:	85 c0                	test   eax,eax
c0010ac5:	75 da                	jne    c0010aa1 <sysCallIsATTY(regs*)+0x28>
c0010ac7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010acc:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ad1:	83 c4 0c             	add    esp,0xc
c0010ad4:	c3                   	ret    

c0010ad5 <sysCallSeek(regs*)>:
c0010ad5:	53                   	push   ebx
c0010ad6:	83 ec 08             	sub    esp,0x8
c0010ad9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010add:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010ae0:	8d 50 fd             	lea    edx,[eax-0x3]
c0010ae3:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010ae9:	77 34                	ja     c0010b1f <sysCallSeek(regs*)+0x4a>
c0010aeb:	83 ec 0c             	sub    esp,0xc
c0010aee:	50                   	push   eax
c0010aef:	e8 8f 8a ff ff       	call   c0009583 <getFromFileDescriptor(int)>
c0010af4:	83 c4 0c             	add    esp,0xc
c0010af7:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010afa:	31 db                	xor    ebx,ebx
c0010afc:	53                   	push   ebx
c0010afd:	51                   	push   ecx
c0010afe:	50                   	push   eax
c0010aff:	e8 1c a5 ff ff       	call   c000b020 <File::seek(unsigned long long)>
c0010b04:	83 c4 10             	add    esp,0x10
c0010b07:	85 c0                	test   eax,eax
c0010b09:	0f 95 c0             	setne  al
c0010b0c:	31 d2                	xor    edx,edx
c0010b0e:	25 ff 00 00 00       	and    eax,0xff
c0010b13:	f7 d8                	neg    eax
c0010b15:	83 d2 00             	adc    edx,0x0
c0010b18:	83 c4 08             	add    esp,0x8
c0010b1b:	f7 da                	neg    edx
c0010b1d:	5b                   	pop    ebx
c0010b1e:	c3                   	ret    
c0010b1f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b24:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b29:	83 c4 08             	add    esp,0x8
c0010b2c:	5b                   	pop    ebx
c0010b2d:	c3                   	ret    

c0010b2e <sysCallTell(regs*)>:
c0010b2e:	53                   	push   ebx
c0010b2f:	83 ec 08             	sub    esp,0x8
c0010b32:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b36:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010b39:	83 f8 02             	cmp    eax,0x2
c0010b3c:	76 50                	jbe    c0010b8e <sysCallTell(regs*)+0x60>
c0010b3e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010b43:	76 19                	jbe    c0010b5e <sysCallTell(regs*)+0x30>
c0010b45:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010b48:	31 d2                	xor    edx,edx
c0010b4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b50:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b57:	31 c0                	xor    eax,eax
c0010b59:	83 c4 08             	add    esp,0x8
c0010b5c:	5b                   	pop    ebx
c0010b5d:	c3                   	ret    
c0010b5e:	83 ec 0c             	sub    esp,0xc
c0010b61:	50                   	push   eax
c0010b62:	e8 1c 8a ff ff       	call   c0009583 <getFromFileDescriptor(int)>
c0010b67:	5a                   	pop    edx
c0010b68:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010b6b:	59                   	pop    ecx
c0010b6c:	53                   	push   ebx
c0010b6d:	50                   	push   eax
c0010b6e:	e8 03 a5 ff ff       	call   c000b076 <File::tell(unsigned long long*)>
c0010b73:	83 c4 10             	add    esp,0x10
c0010b76:	85 c0                	test   eax,eax
c0010b78:	0f 95 c0             	setne  al
c0010b7b:	31 d2                	xor    edx,edx
c0010b7d:	25 ff 00 00 00       	and    eax,0xff
c0010b82:	f7 d8                	neg    eax
c0010b84:	83 d2 00             	adc    edx,0x0
c0010b87:	83 c4 08             	add    esp,0x8
c0010b8a:	f7 da                	neg    edx
c0010b8c:	5b                   	pop    ebx
c0010b8d:	c3                   	ret    
c0010b8e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b93:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b98:	83 c4 08             	add    esp,0x8
c0010b9b:	5b                   	pop    ebx
c0010b9c:	c3                   	ret    

c0010b9d <sysCallSize(regs*)>:
c0010b9d:	53                   	push   ebx
c0010b9e:	83 ec 18             	sub    esp,0x18
c0010ba1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010ba5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010ba8:	83 f8 02             	cmp    eax,0x2
c0010bab:	76 56                	jbe    c0010c03 <sysCallSize(regs*)+0x66>
c0010bad:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010bb2:	76 19                	jbe    c0010bcd <sysCallSize(regs*)+0x30>
c0010bb4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010bb7:	31 d2                	xor    edx,edx
c0010bb9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010bbf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010bc6:	31 c0                	xor    eax,eax
c0010bc8:	83 c4 18             	add    esp,0x18
c0010bcb:	5b                   	pop    ebx
c0010bcc:	c3                   	ret    
c0010bcd:	83 ec 0c             	sub    esp,0xc
c0010bd0:	50                   	push   eax
c0010bd1:	e8 ad 89 ff ff       	call   c0009583 <getFromFileDescriptor(int)>
c0010bd6:	83 c4 0c             	add    esp,0xc
c0010bd9:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010bdd:	52                   	push   edx
c0010bde:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010be1:	52                   	push   edx
c0010be2:	50                   	push   eax
c0010be3:	e8 26 a6 ff ff       	call   c000b20e <File::stat(unsigned long long*, bool*)>
c0010be8:	83 c4 10             	add    esp,0x10
c0010beb:	85 c0                	test   eax,eax
c0010bed:	0f 95 c0             	setne  al
c0010bf0:	31 d2                	xor    edx,edx
c0010bf2:	25 ff 00 00 00       	and    eax,0xff
c0010bf7:	f7 d8                	neg    eax
c0010bf9:	83 d2 00             	adc    edx,0x0
c0010bfc:	83 c4 18             	add    esp,0x18
c0010bff:	f7 da                	neg    edx
c0010c01:	5b                   	pop    ebx
c0010c02:	c3                   	ret    
c0010c03:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c08:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c0d:	83 c4 18             	add    esp,0x18
c0010c10:	5b                   	pop    ebx
c0010c11:	c3                   	ret    

c0010c12 <sysCallSizeFromFilename(regs*)>:
c0010c12:	57                   	push   edi
c0010c13:	56                   	push   esi
c0010c14:	53                   	push   ebx
c0010c15:	83 ec 20             	sub    esp,0x20
c0010c18:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010c1c:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010c1f:	83 fb 02             	cmp    ebx,0x2
c0010c22:	0f 86 8c 00 00 00    	jbe    c0010cb4 <sysCallSizeFromFilename(regs*)+0xa2>
c0010c28:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010c2e:	76 1b                	jbe    c0010c4b <sysCallSizeFromFilename(regs*)+0x39>
c0010c30:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010c33:	31 d2                	xor    edx,edx
c0010c35:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010c3b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c42:	83 c4 20             	add    esp,0x20
c0010c45:	31 c0                	xor    eax,eax
c0010c47:	5b                   	pop    ebx
c0010c48:	5e                   	pop    esi
c0010c49:	5f                   	pop    edi
c0010c4a:	c3                   	ret    
c0010c4b:	83 ec 0c             	sub    esp,0xc
c0010c4e:	68 14 01 00 00       	push   0x114
c0010c53:	e8 39 70 ff ff       	call   c0007c91 <malloc>
c0010c58:	83 c4 0c             	add    esp,0xc
c0010c5b:	89 c7                	mov    edi,eax
c0010c5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c62:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c65:	50                   	push   eax
c0010c66:	53                   	push   ebx
c0010c67:	57                   	push   edi
c0010c68:	e8 35 a2 ff ff       	call   c000aea2 <File::File(char const*, Process*)>
c0010c6d:	83 c4 0c             	add    esp,0xc
c0010c70:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010c74:	50                   	push   eax
c0010c75:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010c78:	52                   	push   edx
c0010c79:	57                   	push   edi
c0010c7a:	e8 8f a5 ff ff       	call   c000b20e <File::stat(unsigned long long*, bool*)>
c0010c7f:	83 c4 10             	add    esp,0x10
c0010c82:	85 ff                	test   edi,edi
c0010c84:	74 14                	je     c0010c9a <sysCallSizeFromFilename(regs*)+0x88>
c0010c86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c8a:	8b 17                	mov    edx,DWORD PTR [edi]
c0010c8c:	83 ec 0c             	sub    esp,0xc
c0010c8f:	57                   	push   edi
c0010c90:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010c93:	83 c4 10             	add    esp,0x10
c0010c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c9a:	85 c0                	test   eax,eax
c0010c9c:	0f 95 c0             	setne  al
c0010c9f:	31 d2                	xor    edx,edx
c0010ca1:	25 ff 00 00 00       	and    eax,0xff
c0010ca6:	f7 d8                	neg    eax
c0010ca8:	83 d2 00             	adc    edx,0x0
c0010cab:	83 c4 20             	add    esp,0x20
c0010cae:	f7 da                	neg    edx
c0010cb0:	5b                   	pop    ebx
c0010cb1:	5e                   	pop    esi
c0010cb2:	5f                   	pop    edi
c0010cb3:	c3                   	ret    
c0010cb4:	83 c4 20             	add    esp,0x20
c0010cb7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010cbc:	5b                   	pop    ebx
c0010cbd:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010cc2:	5e                   	pop    esi
c0010cc3:	5f                   	pop    edi
c0010cc4:	c3                   	ret    

c0010cc5 <sysCallClose(regs*)>:
c0010cc5:	53                   	push   ebx
c0010cc6:	83 ec 08             	sub    esp,0x8
c0010cc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ccd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010cd0:	83 f8 02             	cmp    eax,0x2
c0010cd3:	76 41                	jbe    c0010d16 <sysCallClose(regs*)+0x51>
c0010cd5:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010cdb:	83 fa 01             	cmp    edx,0x1
c0010cde:	76 2d                	jbe    c0010d0d <sysCallClose(regs*)+0x48>
c0010ce0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010ce5:	77 2f                	ja     c0010d16 <sysCallClose(regs*)+0x51>
c0010ce7:	83 ec 0c             	sub    esp,0xc
c0010cea:	50                   	push   eax
c0010ceb:	e8 93 88 ff ff       	call   c0009583 <getFromFileDescriptor(int)>
c0010cf0:	89 c3                	mov    ebx,eax
c0010cf2:	89 04 24             	mov    DWORD PTR [esp],eax
c0010cf5:	e8 c6 a2 ff ff       	call   c000afc0 <File::close()>
c0010cfa:	83 c4 10             	add    esp,0x10
c0010cfd:	85 db                	test   ebx,ebx
c0010cff:	74 0c                	je     c0010d0d <sysCallClose(regs*)+0x48>
c0010d01:	83 ec 0c             	sub    esp,0xc
c0010d04:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d06:	53                   	push   ebx
c0010d07:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010d0a:	83 c4 10             	add    esp,0x10
c0010d0d:	31 c0                	xor    eax,eax
c0010d0f:	31 d2                	xor    edx,edx
c0010d11:	83 c4 08             	add    esp,0x8
c0010d14:	5b                   	pop    ebx
c0010d15:	c3                   	ret    
c0010d16:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d1b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d20:	83 c4 08             	add    esp,0x8
c0010d23:	5b                   	pop    ebx
c0010d24:	c3                   	ret    

c0010d25 <sysCallOpenDir(regs*)>:
c0010d25:	56                   	push   esi
c0010d26:	53                   	push   ebx
c0010d27:	50                   	push   eax
c0010d28:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d2c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d2f:	85 c0                	test   eax,eax
c0010d31:	74 5b                	je     c0010d8e <sysCallOpenDir(regs*)+0x69>
c0010d33:	83 ec 0c             	sub    esp,0xc
c0010d36:	68 14 01 00 00       	push   0x114
c0010d3b:	e8 51 6f ff ff       	call   c0007c91 <malloc>
c0010d40:	83 c4 0c             	add    esp,0xc
c0010d43:	89 c6                	mov    esi,eax
c0010d45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d4a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d4d:	50                   	push   eax
c0010d4e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d51:	50                   	push   eax
c0010d52:	56                   	push   esi
c0010d53:	e8 74 a6 ff ff       	call   c000b3cc <Directory::Directory(char const*, Process*)>
c0010d58:	83 c4 10             	add    esp,0x10
c0010d5b:	85 f6                	test   esi,esi
c0010d5d:	74 2f                	je     c0010d8e <sysCallOpenDir(regs*)+0x69>
c0010d5f:	83 ec 0c             	sub    esp,0xc
c0010d62:	56                   	push   esi
c0010d63:	e8 24 a7 ff ff       	call   c000b48c <Directory::open()>
c0010d68:	83 c4 10             	add    esp,0x10
c0010d6b:	85 c0                	test   eax,eax
c0010d6d:	75 1f                	jne    c0010d8e <sysCallOpenDir(regs*)+0x69>
c0010d6f:	83 ec 0c             	sub    esp,0xc
c0010d72:	56                   	push   esi
c0010d73:	e8 16 85 ff ff       	call   c000928e <UnixFile::getFileDescriptor()>
c0010d78:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010d7b:	83 c4 10             	add    esp,0x10
c0010d7e:	89 02                	mov    DWORD PTR [edx],eax
c0010d80:	c1 f8 1f             	sar    eax,0x1f
c0010d83:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010d86:	31 c0                	xor    eax,eax
c0010d88:	59                   	pop    ecx
c0010d89:	31 d2                	xor    edx,edx
c0010d8b:	5b                   	pop    ebx
c0010d8c:	5e                   	pop    esi
c0010d8d:	c3                   	ret    
c0010d8e:	59                   	pop    ecx
c0010d8f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d94:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d99:	5b                   	pop    ebx
c0010d9a:	5e                   	pop    esi
c0010d9b:	c3                   	ret    

c0010d9c <sysCallCloseDir(regs*)>:
c0010d9c:	53                   	push   ebx
c0010d9d:	83 ec 08             	sub    esp,0x8
c0010da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010da4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010da7:	8d 50 fd             	lea    edx,[eax-0x3]
c0010daa:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010db0:	77 2f                	ja     c0010de1 <sysCallCloseDir(regs*)+0x45>
c0010db2:	83 ec 0c             	sub    esp,0xc
c0010db5:	50                   	push   eax
c0010db6:	e8 c8 87 ff ff       	call   c0009583 <getFromFileDescriptor(int)>
c0010dbb:	89 c3                	mov    ebx,eax
c0010dbd:	89 04 24             	mov    DWORD PTR [esp],eax
c0010dc0:	e8 23 a7 ff ff       	call   c000b4e8 <Directory::close()>
c0010dc5:	83 c4 10             	add    esp,0x10
c0010dc8:	85 db                	test   ebx,ebx
c0010dca:	74 0c                	je     c0010dd8 <sysCallCloseDir(regs*)+0x3c>
c0010dcc:	83 ec 0c             	sub    esp,0xc
c0010dcf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010dd1:	53                   	push   ebx
c0010dd2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010dd5:	83 c4 10             	add    esp,0x10
c0010dd8:	31 c0                	xor    eax,eax
c0010dda:	31 d2                	xor    edx,edx
c0010ddc:	83 c4 08             	add    esp,0x8
c0010ddf:	5b                   	pop    ebx
c0010de0:	c3                   	ret    
c0010de1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010de6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010deb:	83 c4 08             	add    esp,0x8
c0010dee:	5b                   	pop    ebx
c0010def:	c3                   	ret    

c0010df0 <sysCallMakeDir(regs*)>:
c0010df0:	56                   	push   esi
c0010df1:	53                   	push   ebx
c0010df2:	83 ec 10             	sub    esp,0x10
c0010df5:	68 14 01 00 00       	push   0x114
c0010dfa:	e8 92 6e ff ff       	call   c0007c91 <malloc>
c0010dff:	83 c4 0c             	add    esp,0xc
c0010e02:	89 c3                	mov    ebx,eax
c0010e04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e09:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010e0c:	56                   	push   esi
c0010e0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010e11:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010e14:	50                   	push   eax
c0010e15:	53                   	push   ebx
c0010e16:	e8 b1 a5 ff ff       	call   c000b3cc <Directory::Directory(char const*, Process*)>
c0010e1b:	83 c4 10             	add    esp,0x10
c0010e1e:	85 db                	test   ebx,ebx
c0010e20:	74 32                	je     c0010e54 <sysCallMakeDir(regs*)+0x64>
c0010e22:	83 ec 0c             	sub    esp,0xc
c0010e25:	53                   	push   ebx
c0010e26:	e8 41 a8 ff ff       	call   c000b66c <Directory::create()>
c0010e2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e2e:	89 c6                	mov    esi,eax
c0010e30:	e8 b3 a6 ff ff       	call   c000b4e8 <Directory::close()>
c0010e35:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e3a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e3d:	83 c4 10             	add    esp,0x10
c0010e40:	31 c0                	xor    eax,eax
c0010e42:	59                   	pop    ecx
c0010e43:	85 f6                	test   esi,esi
c0010e45:	5b                   	pop    ebx
c0010e46:	0f 95 c0             	setne  al
c0010e49:	5e                   	pop    esi
c0010e4a:	31 d2                	xor    edx,edx
c0010e4c:	f7 d8                	neg    eax
c0010e4e:	83 d2 00             	adc    edx,0x0
c0010e51:	f7 da                	neg    edx
c0010e53:	c3                   	ret    
c0010e54:	59                   	pop    ecx
c0010e55:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e5a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e5f:	5b                   	pop    ebx
c0010e60:	5e                   	pop    esi
c0010e61:	c3                   	ret    

c0010e62 <sysCallWait(regs*)>:
c0010e62:	83 ec 10             	sub    esp,0x10
c0010e65:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e69:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010e6c:	52                   	push   edx
c0010e6d:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010e70:	51                   	push   ecx
c0010e71:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e74:	50                   	push   eax
c0010e75:	e8 de 2c 00 00       	call   c0013b58 <waitTask(int, int*, int)>
c0010e7a:	83 c4 1c             	add    esp,0x1c
c0010e7d:	99                   	cdq    
c0010e7e:	c3                   	ret    

c0010e7f <sysCallNotImpl(regs*)>:
c0010e7f:	83 ec 18             	sub    esp,0x18
c0010e82:	68 dc e7 01 c0       	push   0xc001e7dc
c0010e87:	e8 03 f7 ff ff       	call   c001058f <KePanic(char const*)>
c0010e8c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e91:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e96:	83 c4 1c             	add    esp,0x1c
c0010e99:	c3                   	ret    

c0010e9a <sysPanic(regs*)>:
c0010e9a:	83 ec 18             	sub    esp,0x18
c0010e9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ea1:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010ea4:	50                   	push   eax
c0010ea5:	e8 e5 f6 ff ff       	call   c001058f <KePanic(char const*)>
c0010eaa:	b8 01 00 00 00       	mov    eax,0x1
c0010eaf:	31 d2                	xor    edx,edx
c0010eb1:	83 c4 1c             	add    esp,0x1c
c0010eb4:	c3                   	ret    

c0010eb5 <sysCallRmdir(regs*)>:
c0010eb5:	56                   	push   esi
c0010eb6:	53                   	push   ebx
c0010eb7:	83 ec 20             	sub    esp,0x20
c0010eba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010ebe:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010ec1:	68 14 01 00 00       	push   0x114
c0010ec6:	e8 c6 6d ff ff       	call   c0007c91 <malloc>
c0010ecb:	83 c4 0c             	add    esp,0xc
c0010ece:	89 c3                	mov    ebx,eax
c0010ed0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ed5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ed8:	50                   	push   eax
c0010ed9:	56                   	push   esi
c0010eda:	53                   	push   ebx
c0010edb:	e8 c2 9f ff ff       	call   c000aea2 <File::File(char const*, Process*)>
c0010ee0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ee3:	e8 f2 a1 ff ff       	call   c000b0da <File::unlink()>
c0010ee8:	83 c4 10             	add    esp,0x10
c0010eeb:	85 db                	test   ebx,ebx
c0010eed:	74 14                	je     c0010f03 <sysCallRmdir(regs*)+0x4e>
c0010eef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ef3:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010ef5:	83 ec 0c             	sub    esp,0xc
c0010ef8:	53                   	push   ebx
c0010ef9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010efc:	83 c4 10             	add    esp,0x10
c0010eff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f03:	85 c0                	test   eax,eax
c0010f05:	0f 95 c0             	setne  al
c0010f08:	31 d2                	xor    edx,edx
c0010f0a:	25 ff 00 00 00       	and    eax,0xff
c0010f0f:	f7 d8                	neg    eax
c0010f11:	83 d2 00             	adc    edx,0x0
c0010f14:	83 c4 14             	add    esp,0x14
c0010f17:	f7 da                	neg    edx
c0010f19:	5b                   	pop    ebx
c0010f1a:	5e                   	pop    esi
c0010f1b:	c3                   	ret    

c0010f1c <sysCallUnlink(regs*)>:
c0010f1c:	56                   	push   esi
c0010f1d:	53                   	push   ebx
c0010f1e:	83 ec 20             	sub    esp,0x20
c0010f21:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010f25:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010f28:	68 14 01 00 00       	push   0x114
c0010f2d:	e8 5f 6d ff ff       	call   c0007c91 <malloc>
c0010f32:	83 c4 0c             	add    esp,0xc
c0010f35:	89 c3                	mov    ebx,eax
c0010f37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f3c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f3f:	50                   	push   eax
c0010f40:	56                   	push   esi
c0010f41:	53                   	push   ebx
c0010f42:	e8 5b 9f ff ff       	call   c000aea2 <File::File(char const*, Process*)>
c0010f47:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f4a:	e8 8b a1 ff ff       	call   c000b0da <File::unlink()>
c0010f4f:	83 c4 10             	add    esp,0x10
c0010f52:	85 db                	test   ebx,ebx
c0010f54:	74 14                	je     c0010f6a <sysCallUnlink(regs*)+0x4e>
c0010f56:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f5a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f5c:	83 ec 0c             	sub    esp,0xc
c0010f5f:	53                   	push   ebx
c0010f60:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010f63:	83 c4 10             	add    esp,0x10
c0010f66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f6a:	85 c0                	test   eax,eax
c0010f6c:	0f 95 c0             	setne  al
c0010f6f:	31 d2                	xor    edx,edx
c0010f71:	25 ff 00 00 00       	and    eax,0xff
c0010f76:	f7 d8                	neg    eax
c0010f78:	83 d2 00             	adc    edx,0x0
c0010f7b:	83 c4 14             	add    esp,0x14
c0010f7e:	f7 da                	neg    edx
c0010f80:	5b                   	pop    ebx
c0010f81:	5e                   	pop    esi
c0010f82:	c3                   	ret    

c0010f83 <sysCallGetArgv(regs*)>:
c0010f83:	83 ec 0c             	sub    esp,0xc
c0010f86:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010f8a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010f8d:	85 c0                	test   eax,eax
c0010f8f:	78 2c                	js     c0010fbd <sysCallGetArgv(regs*)+0x3a>
c0010f91:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010f97:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010f9a:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010fa0:	7d 1b                	jge    c0010fbd <sysCallGetArgv(regs*)+0x3a>
c0010fa2:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010fa9:	85 c0                	test   eax,eax
c0010fab:	74 18                	je     c0010fc5 <sysCallGetArgv(regs*)+0x42>
c0010fad:	83 ec 08             	sub    esp,0x8
c0010fb0:	50                   	push   eax
c0010fb1:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010fb4:	50                   	push   eax
c0010fb5:	e8 46 f6 fe ff       	call   c0000600 <strcpy>
c0010fba:	83 c4 10             	add    esp,0x10
c0010fbd:	31 c0                	xor    eax,eax
c0010fbf:	31 d2                	xor    edx,edx
c0010fc1:	83 c4 0c             	add    esp,0xc
c0010fc4:	c3                   	ret    
c0010fc5:	b8 01 00 00 00       	mov    eax,0x1
c0010fca:	31 d2                	xor    edx,edx
c0010fcc:	83 c4 0c             	add    esp,0xc
c0010fcf:	c3                   	ret    

c0010fd0 <sysCallUSleep(regs*)>:
c0010fd0:	83 ec 1c             	sub    esp,0x1c
c0010fd3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010fd7:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010fda:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010fdd:	6a 00                	push   0x0
c0010fdf:	6a 64                	push   0x64
c0010fe1:	52                   	push   edx
c0010fe2:	50                   	push   eax
c0010fe3:	e8 28 b2 00 00       	call   c001c210 <__udivdi3>
c0010fe8:	83 c4 14             	add    esp,0x14
c0010feb:	50                   	push   eax
c0010fec:	e8 3b 2c 00 00       	call   c0013c2c <milliTenthSleep(unsigned int)>
c0010ff1:	31 c0                	xor    eax,eax
c0010ff3:	31 d2                	xor    edx,edx
c0010ff5:	83 c4 1c             	add    esp,0x1c
c0010ff8:	c3                   	ret    

c0010ff9 <sysCallSpawn(regs*)>:
c0010ff9:	56                   	push   esi
c0010ffa:	53                   	push   ebx
c0010ffb:	50                   	push   eax
c0010ffc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011000:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011003:	85 c0                	test   eax,eax
c0011005:	75 08                	jne    c001100f <sysCallSpawn(regs*)+0x16>
c0011007:	59                   	pop    ecx
c0011008:	31 c0                	xor    eax,eax
c001100a:	31 d2                	xor    edx,edx
c001100c:	5b                   	pop    ebx
c001100d:	5e                   	pop    esi
c001100e:	c3                   	ret    
c001100f:	83 ec 0c             	sub    esp,0xc
c0011012:	68 1f 07 00 00       	push   0x71f
c0011017:	e8 75 6c ff ff       	call   c0007c91 <malloc>
c001101c:	83 c4 10             	add    esp,0x10
c001101f:	89 c6                	mov    esi,eax
c0011021:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011024:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011027:	85 c0                	test   eax,eax
c0011029:	75 33                	jne    c001105e <sysCallSpawn(regs*)+0x65>
c001102b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011030:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011033:	52                   	push   edx
c0011034:	50                   	push   eax
c0011035:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0011038:	53                   	push   ebx
c0011039:	56                   	push   esi
c001103a:	e8 d1 22 00 00       	call   c0013310 <Process::Process(char const*, Process*, char**)>
c001103f:	83 c4 10             	add    esp,0x10
c0011042:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011049:	75 bc                	jne    c0011007 <sysCallSpawn(regs*)+0xe>
c001104b:	83 ec 0c             	sub    esp,0xc
c001104e:	56                   	push   esi
c001104f:	e8 b0 27 00 00       	call   c0013804 <Process::createUserThread()>
c0011054:	8b 06                	mov    eax,DWORD PTR [esi]
c0011056:	83 c4 10             	add    esp,0x10
c0011059:	99                   	cdq    
c001105a:	59                   	pop    ecx
c001105b:	5b                   	pop    ebx
c001105c:	5e                   	pop    esi
c001105d:	c3                   	ret    
c001105e:	31 c0                	xor    eax,eax
c0011060:	eb d1                	jmp    c0011033 <sysCallSpawn(regs*)+0x3a>

c0011062 <sysCallGetEnv(regs*)>:
c0011062:	57                   	push   edi
c0011063:	56                   	push   esi
c0011064:	53                   	push   ebx
c0011065:	83 ec 1c             	sub    esp,0x1c
c0011068:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001106c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011071:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011074:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011077:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001107a:	50                   	push   eax
c001107b:	e8 c7 f3 ff ff       	call   c0010447 <Krnl::getProcessTotalEnvCount(Process*)>
c0011080:	83 c4 10             	add    esp,0x10
c0011083:	39 c7                	cmp    edi,eax
c0011085:	7c 14                	jl     c001109b <sysCallGetEnv(regs*)+0x39>
c0011087:	85 f6                	test   esi,esi
c0011089:	75 0b                	jne    c0011096 <sysCallGetEnv(regs*)+0x34>
c001108b:	83 c4 10             	add    esp,0x10
c001108e:	31 c0                	xor    eax,eax
c0011090:	5b                   	pop    ebx
c0011091:	31 d2                	xor    edx,edx
c0011093:	5e                   	pop    esi
c0011094:	5f                   	pop    edi
c0011095:	c3                   	ret    
c0011096:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011099:	eb f0                	jmp    c001108b <sysCallGetEnv(regs*)+0x29>
c001109b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001109f:	52                   	push   edx
c00110a0:	57                   	push   edi
c00110a1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00110a7:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c00110aa:	51                   	push   ecx
c00110ab:	50                   	push   eax
c00110ac:	e8 b6 f3 ff ff       	call   c0010467 <Krnl::getProcessEnvPair(Process*, int)>
c00110b1:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00110b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00110b8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00110bc:	83 c4 0c             	add    esp,0xc
c00110bf:	85 db                	test   ebx,ebx
c00110c1:	75 23                	jne    c00110e6 <sysCallGetEnv(regs*)+0x84>
c00110c3:	83 ec 0c             	sub    esp,0xc
c00110c6:	50                   	push   eax
c00110c7:	e8 74 f4 fe ff       	call   c0000540 <strlen>
c00110cc:	89 3c 24             	mov    DWORD PTR [esp],edi
c00110cf:	89 c3                	mov    ebx,eax
c00110d1:	e8 6a f4 fe ff       	call   c0000540 <strlen>
c00110d6:	31 d2                	xor    edx,edx
c00110d8:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00110dc:	83 c4 10             	add    esp,0x10
c00110df:	83 c4 10             	add    esp,0x10
c00110e2:	5b                   	pop    ebx
c00110e3:	5e                   	pop    esi
c00110e4:	5f                   	pop    edi
c00110e5:	c3                   	ret    
c00110e6:	83 ec 08             	sub    esp,0x8
c00110e9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00110ec:	50                   	push   eax
c00110ed:	56                   	push   esi
c00110ee:	e8 0d f5 fe ff       	call   c0000600 <strcpy>
c00110f3:	58                   	pop    eax
c00110f4:	5a                   	pop    edx
c00110f5:	68 f6 e7 01 c0       	push   0xc001e7f6
c00110fa:	56                   	push   esi
c00110fb:	e8 c0 f6 fe ff       	call   c00007c0 <strcat>
c0011100:	59                   	pop    ecx
c0011101:	5b                   	pop    ebx
c0011102:	57                   	push   edi
c0011103:	56                   	push   esi
c0011104:	e8 b7 f6 fe ff       	call   c00007c0 <strcat>
c0011109:	83 c4 10             	add    esp,0x10
c001110c:	e9 7a ff ff ff       	jmp    c001108b <sysCallGetEnv(regs*)+0x29>

c0011111 <sysSetFatAttrib(regs*)>:
c0011111:	57                   	push   edi
c0011112:	56                   	push   esi
c0011113:	53                   	push   ebx
c0011114:	83 ec 1c             	sub    esp,0x1c
c0011117:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001111b:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001111e:	68 14 01 00 00       	push   0x114
c0011123:	e8 69 6b ff ff       	call   c0007c91 <malloc>
c0011128:	83 c4 0c             	add    esp,0xc
c001112b:	89 c3                	mov    ebx,eax
c001112d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011132:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011135:	50                   	push   eax
c0011136:	57                   	push   edi
c0011137:	53                   	push   ebx
c0011138:	e8 65 9d ff ff       	call   c000aea2 <File::File(char const*, Process*)>
c001113d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011140:	83 c4 0c             	add    esp,0xc
c0011143:	0f b6 d4             	movzx  edx,ah
c0011146:	25 ff 00 00 00       	and    eax,0xff
c001114b:	52                   	push   edx
c001114c:	50                   	push   eax
c001114d:	53                   	push   ebx
c001114e:	e8 21 a0 ff ff       	call   c000b174 <File::chfatattr(unsigned char, unsigned char)>
c0011153:	83 c4 10             	add    esp,0x10
c0011156:	85 db                	test   ebx,ebx
c0011158:	74 14                	je     c001116e <sysSetFatAttrib(regs*)+0x5d>
c001115a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001115e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011160:	83 ec 0c             	sub    esp,0xc
c0011163:	53                   	push   ebx
c0011164:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011167:	83 c4 10             	add    esp,0x10
c001116a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001116e:	85 c0                	test   eax,eax
c0011170:	0f 95 c0             	setne  al
c0011173:	31 d2                	xor    edx,edx
c0011175:	25 ff 00 00 00       	and    eax,0xff
c001117a:	f7 d8                	neg    eax
c001117c:	83 d2 00             	adc    edx,0x0
c001117f:	83 c4 10             	add    esp,0x10
c0011182:	f7 da                	neg    edx
c0011184:	5b                   	pop    ebx
c0011185:	5e                   	pop    esi
c0011186:	5f                   	pop    edi
c0011187:	c3                   	ret    

c0011188 <sysPipe(regs*)>:
c0011188:	57                   	push   edi
c0011189:	56                   	push   esi
c001118a:	53                   	push   ebx
c001118b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001118f:	83 ec 0c             	sub    esp,0xc
c0011192:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011195:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011198:	6a 20                	push   0x20
c001119a:	e8 f2 6a ff ff       	call   c0007c91 <malloc>
c001119f:	89 c3                	mov    ebx,eax
c00111a1:	58                   	pop    eax
c00111a2:	5a                   	pop    edx
c00111a3:	68 00 50 00 00       	push   0x5000
c00111a8:	53                   	push   ebx
c00111a9:	e8 e8 73 ff ff       	call   c0008596 <Pipe::Pipe(int)>
c00111ae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111b1:	e8 d8 80 ff ff       	call   c000928e <UnixFile::getFileDescriptor()>
c00111b6:	89 07                	mov    DWORD PTR [edi],eax
c00111b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111bb:	e8 ce 80 ff ff       	call   c000928e <UnixFile::getFileDescriptor()>
c00111c0:	83 c4 10             	add    esp,0x10
c00111c3:	89 06                	mov    DWORD PTR [esi],eax
c00111c5:	31 d2                	xor    edx,edx
c00111c7:	5b                   	pop    ebx
c00111c8:	31 c0                	xor    eax,eax
c00111ca:	5e                   	pop    esi
c00111cb:	5f                   	pop    edi
c00111cc:	c3                   	ret    

c00111cd <sysGetUnixTime(regs*)>:
c00111cd:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c00111d2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00111d8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00111dc:	e9 d1 a6 ff ff       	jmp    c000b8b2 <Clock::timeInSecondsLocal()>

c00111e1 <string_ends_with(char const*, char const*)>:
c00111e1:	57                   	push   edi
c00111e2:	56                   	push   esi
c00111e3:	53                   	push   ebx
c00111e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00111ec:	83 ec 0c             	sub    esp,0xc
c00111ef:	53                   	push   ebx
c00111f0:	e8 4b f3 fe ff       	call   c0000540 <strlen>
c00111f5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00111f8:	89 c6                	mov    esi,eax
c00111fa:	e8 41 f3 fe ff       	call   c0000540 <strlen>
c00111ff:	83 c4 10             	add    esp,0x10
c0011202:	39 c6                	cmp    esi,eax
c0011204:	7d 06                	jge    c001120c <string_ends_with(char const*, char const*)+0x2b>
c0011206:	5b                   	pop    ebx
c0011207:	31 c0                	xor    eax,eax
c0011209:	5e                   	pop    esi
c001120a:	5f                   	pop    edi
c001120b:	c3                   	ret    
c001120c:	83 ec 08             	sub    esp,0x8
c001120f:	29 c6                	sub    esi,eax
c0011211:	57                   	push   edi
c0011212:	01 f3                	add    ebx,esi
c0011214:	53                   	push   ebx
c0011215:	e8 c6 f4 fe ff       	call   c00006e0 <strcmp>
c001121a:	83 c4 10             	add    esp,0x10
c001121d:	85 c0                	test   eax,eax
c001121f:	5b                   	pop    ebx
c0011220:	0f 94 c0             	sete   al
c0011223:	5e                   	pop    esi
c0011224:	25 ff 00 00 00       	and    eax,0xff
c0011229:	5f                   	pop    edi
c001122a:	c3                   	ret    

c001122b <sysCallOpen(regs*)>:
c001122b:	56                   	push   esi
c001122c:	53                   	push   ebx
c001122d:	81 ec 04 01 00 00    	sub    esp,0x104
c0011233:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001123a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001123d:	85 c9                	test   ecx,ecx
c001123f:	0f 84 b9 01 00 00    	je     c00113fe <sysCallOpen(regs*)+0x1d3>
c0011245:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011248:	85 c0                	test   eax,eax
c001124a:	0f 84 ae 01 00 00    	je     c00113fe <sysCallOpen(regs*)+0x1d3>
c0011250:	52                   	push   edx
c0011251:	68 f8 e7 01 c0       	push   0xc001e7f8
c0011256:	50                   	push   eax
c0011257:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001125b:	56                   	push   esi
c001125c:	e8 97 9a ff ff       	call   c000acf8 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011261:	89 34 24             	mov    DWORD PTR [esp],esi
c0011264:	e8 d7 f2 fe ff       	call   c0000540 <strlen>
c0011269:	83 c4 10             	add    esp,0x10
c001126c:	48                   	dec    eax
c001126d:	74 1d                	je     c001128c <sysCallOpen(regs*)+0x61>
c001126f:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0011272:	eb 0f                	jmp    c0011283 <sysCallOpen(regs*)+0x58>
c0011274:	80 fa 3a             	cmp    dl,0x3a
c0011277:	74 0f                	je     c0011288 <sysCallOpen(regs*)+0x5d>
c0011279:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001127d:	48                   	dec    eax
c001127e:	74 0c                	je     c001128c <sysCallOpen(regs*)+0x61>
c0011280:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0011283:	80 fa 2e             	cmp    dl,0x2e
c0011286:	75 ec                	jne    c0011274 <sysCallOpen(regs*)+0x49>
c0011288:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001128c:	83 ec 08             	sub    esp,0x8
c001128f:	68 fc e7 01 c0       	push   0xc001e7fc
c0011294:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011297:	50                   	push   eax
c0011298:	e8 44 ff ff ff       	call   c00111e1 <string_ends_with(char const*, char const*)>
c001129d:	83 c4 10             	add    esp,0x10
c00112a0:	85 c0                	test   eax,eax
c00112a2:	74 1d                	je     c00112c1 <sysCallOpen(regs*)+0x96>
c00112a4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00112a7:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00112ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112b4:	81 c4 04 01 00 00    	add    esp,0x104
c00112ba:	31 c0                	xor    eax,eax
c00112bc:	31 d2                	xor    edx,edx
c00112be:	5b                   	pop    ebx
c00112bf:	5e                   	pop    esi
c00112c0:	c3                   	ret    
c00112c1:	83 ec 08             	sub    esp,0x8
c00112c4:	68 01 e8 01 c0       	push   0xc001e801
c00112c9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112cc:	50                   	push   eax
c00112cd:	e8 0f ff ff ff       	call   c00111e1 <string_ends_with(char const*, char const*)>
c00112d2:	83 c4 10             	add    esp,0x10
c00112d5:	85 c0                	test   eax,eax
c00112d7:	75 cb                	jne    c00112a4 <sysCallOpen(regs*)+0x79>
c00112d9:	83 ec 08             	sub    esp,0x8
c00112dc:	68 fd e7 01 c0       	push   0xc001e7fd
c00112e1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112e4:	50                   	push   eax
c00112e5:	e8 f6 f3 fe ff       	call   c00006e0 <strcmp>
c00112ea:	83 c4 10             	add    esp,0x10
c00112ed:	85 c0                	test   eax,eax
c00112ef:	74 b3                	je     c00112a4 <sysCallOpen(regs*)+0x79>
c00112f1:	83 ec 08             	sub    esp,0x8
c00112f4:	68 fc e7 01 c0       	push   0xc001e7fc
c00112f9:	56                   	push   esi
c00112fa:	e8 e2 fe ff ff       	call   c00111e1 <string_ends_with(char const*, char const*)>
c00112ff:	83 c4 10             	add    esp,0x10
c0011302:	85 c0                	test   eax,eax
c0011304:	75 9e                	jne    c00112a4 <sysCallOpen(regs*)+0x79>
c0011306:	83 ec 08             	sub    esp,0x8
c0011309:	68 06 e8 01 c0       	push   0xc001e806
c001130e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011311:	50                   	push   eax
c0011312:	e8 ca fe ff ff       	call   c00111e1 <string_ends_with(char const*, char const*)>
c0011317:	83 c4 10             	add    esp,0x10
c001131a:	85 c0                	test   eax,eax
c001131c:	0f 85 ef 00 00 00    	jne    c0011411 <sysCallOpen(regs*)+0x1e6>
c0011322:	83 ec 08             	sub    esp,0x8
c0011325:	68 0b e8 01 c0       	push   0xc001e80b
c001132a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001132d:	50                   	push   eax
c001132e:	e8 ae fe ff ff       	call   c00111e1 <string_ends_with(char const*, char const*)>
c0011333:	83 c4 10             	add    esp,0x10
c0011336:	85 c0                	test   eax,eax
c0011338:	0f 85 d3 00 00 00    	jne    c0011411 <sysCallOpen(regs*)+0x1e6>
c001133e:	83 ec 08             	sub    esp,0x8
c0011341:	68 07 e8 01 c0       	push   0xc001e807
c0011346:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011349:	51                   	push   ecx
c001134a:	e8 91 f3 fe ff       	call   c00006e0 <strcmp>
c001134f:	83 c4 10             	add    esp,0x10
c0011352:	85 c0                	test   eax,eax
c0011354:	0f 84 b7 00 00 00    	je     c0011411 <sysCallOpen(regs*)+0x1e6>
c001135a:	83 ec 08             	sub    esp,0x8
c001135d:	68 06 e8 01 c0       	push   0xc001e806
c0011362:	56                   	push   esi
c0011363:	e8 79 fe ff ff       	call   c00111e1 <string_ends_with(char const*, char const*)>
c0011368:	83 c4 10             	add    esp,0x10
c001136b:	85 c0                	test   eax,eax
c001136d:	0f 85 9e 00 00 00    	jne    c0011411 <sysCallOpen(regs*)+0x1e6>
c0011373:	83 ec 0c             	sub    esp,0xc
c0011376:	68 14 01 00 00       	push   0x114
c001137b:	e8 11 69 ff ff       	call   c0007c91 <malloc>
c0011380:	83 c4 0c             	add    esp,0xc
c0011383:	89 c6                	mov    esi,eax
c0011385:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001138a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001138d:	50                   	push   eax
c001138e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011391:	52                   	push   edx
c0011392:	56                   	push   esi
c0011393:	e8 0a 9b ff ff       	call   c000aea2 <File::File(char const*, Process*)>
c0011398:	83 c4 10             	add    esp,0x10
c001139b:	85 f6                	test   esi,esi
c001139d:	74 5f                	je     c00113fe <sysCallOpen(regs*)+0x1d3>
c001139f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00113a2:	89 d0                	mov    eax,edx
c00113a4:	25 ff 00 00 00       	and    eax,0xff
c00113a9:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00113ac:	89 d0                	mov    eax,edx
c00113ae:	83 e0 01             	and    eax,0x1
c00113b1:	f6 c2 02             	test   dl,0x2
c00113b4:	74 03                	je     c00113b9 <sysCallOpen(regs*)+0x18e>
c00113b6:	83 c8 02             	or     eax,0x2
c00113b9:	f6 c2 04             	test   dl,0x4
c00113bc:	74 03                	je     c00113c1 <sysCallOpen(regs*)+0x196>
c00113be:	83 c8 04             	or     eax,0x4
c00113c1:	f6 c2 08             	test   dl,0x8
c00113c4:	74 03                	je     c00113c9 <sysCallOpen(regs*)+0x19e>
c00113c6:	83 c8 0a             	or     eax,0xa
c00113c9:	83 e2 10             	and    edx,0x10
c00113cc:	74 03                	je     c00113d1 <sysCallOpen(regs*)+0x1a6>
c00113ce:	83 c8 12             	or     eax,0x12
c00113d1:	83 ec 08             	sub    esp,0x8
c00113d4:	50                   	push   eax
c00113d5:	56                   	push   esi
c00113d6:	e8 87 9b ff ff       	call   c000af62 <File::open(FileOpenMode)>
c00113db:	83 c4 10             	add    esp,0x10
c00113de:	85 c0                	test   eax,eax
c00113e0:	75 1c                	jne    c00113fe <sysCallOpen(regs*)+0x1d3>
c00113e2:	83 ec 0c             	sub    esp,0xc
c00113e5:	56                   	push   esi
c00113e6:	e8 a3 7e ff ff       	call   c000928e <UnixFile::getFileDescriptor()>
c00113eb:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00113ee:	83 c4 10             	add    esp,0x10
c00113f1:	89 02                	mov    DWORD PTR [edx],eax
c00113f3:	c1 f8 1f             	sar    eax,0x1f
c00113f6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00113f9:	e9 b6 fe ff ff       	jmp    c00112b4 <sysCallOpen(regs*)+0x89>
c00113fe:	81 c4 04 01 00 00    	add    esp,0x104
c0011404:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011409:	ba ff ff ff ff       	mov    edx,0xffffffff
c001140e:	5b                   	pop    ebx
c001140f:	5e                   	pop    esi
c0011410:	c3                   	ret    
c0011411:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011414:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001141a:	e9 8e fe ff ff       	jmp    c00112ad <sysCallOpen(regs*)+0x82>

c001141f <KeLoadSystemCalls()>:
c001141f:	c7 05 a0 34 02 c0 99 1f 01 c0 	mov    DWORD PTR ds:0xc00234a0,0xc0011f99
c0011429:	c7 05 a4 34 02 c0 90 1b 01 c0 	mov    DWORD PTR ds:0xc00234a4,0xc0011b90
c0011433:	c7 05 a8 34 02 c0 7f 1d 01 c0 	mov    DWORD PTR ds:0xc00234a8,0xc0011d7f
c001143d:	c7 05 ac 34 02 c0 cf 1e 01 c0 	mov    DWORD PTR ds:0xc00234ac,0xc0011ecf
c0011447:	c7 05 b0 34 02 c0 17 1d 01 c0 	mov    DWORD PTR ds:0xc00234b0,0xc0011d17
c0011451:	c7 05 b4 34 02 c0 c7 1b 01 c0 	mov    DWORD PTR ds:0xc00234b4,0xc0011bc7
c001145b:	c7 05 b8 34 02 c0 a8 1b 01 c0 	mov    DWORD PTR ds:0xc00234b8,0xc0011ba8
c0011465:	c7 05 bc 34 02 c0 d4 1d 01 c0 	mov    DWORD PTR ds:0xc00234bc,0xc0011dd4
c001146f:	c7 05 c4 34 02 c0 c5 0c 01 c0 	mov    DWORD PTR ds:0xc00234c4,0xc0010cc5
c0011479:	c7 05 c0 34 02 c0 2b 12 01 c0 	mov    DWORD PTR ds:0xc00234c0,0xc001122b
c0011483:	c7 05 c8 34 02 c0 25 0d 01 c0 	mov    DWORD PTR ds:0xc00234c8,0xc0010d25
c001148d:	c7 05 cc 34 02 c0 f9 09 01 c0 	mov    DWORD PTR ds:0xc00234cc,0xc00109f9
c0011497:	c7 05 d0 34 02 c0 20 08 01 c0 	mov    DWORD PTR ds:0xc00234d0,0xc0010820
c00114a1:	c7 05 d4 34 02 c0 25 08 01 c0 	mov    DWORD PTR ds:0xc00234d4,0xc0010825
c00114ab:	c7 05 d8 34 02 c0 f0 0d 01 c0 	mov    DWORD PTR ds:0xc00234d8,0xc0010df0
c00114b5:	c7 05 dc 34 02 c0 9c 0d 01 c0 	mov    DWORD PTR ds:0xc00234dc,0xc0010d9c
c00114bf:	c7 05 e0 34 02 c0 d5 0a 01 c0 	mov    DWORD PTR ds:0xc00234e0,0xc0010ad5
c00114c9:	c7 05 e4 34 02 c0 2e 0b 01 c0 	mov    DWORD PTR ds:0xc00234e4,0xc0010b2e
c00114d3:	c7 05 e8 34 02 c0 9d 0b 01 c0 	mov    DWORD PTR ds:0xc00234e8,0xc0010b9d
c00114dd:	c7 05 ec 34 02 c0 2a 08 01 c0 	mov    DWORD PTR ds:0xc00234ec,0xc001082a
c00114e7:	c7 05 f0 34 02 c0 62 0e 01 c0 	mov    DWORD PTR ds:0xc00234f0,0xc0010e62
c00114f1:	c7 05 f4 34 02 c0 7f 0e 01 c0 	mov    DWORD PTR ds:0xc00234f4,0xc0010e7f
c00114fb:	c7 05 f8 34 02 c0 7f 0e 01 c0 	mov    DWORD PTR ds:0xc00234f8,0xc0010e7f
c0011505:	c7 05 fc 34 02 c0 b5 0e 01 c0 	mov    DWORD PTR ds:0xc00234fc,0xc0010eb5
c001150f:	c7 05 00 35 02 c0 1c 0f 01 c0 	mov    DWORD PTR ds:0xc0023500,0xc0010f1c
c0011519:	c7 05 04 35 02 c0 34 08 01 c0 	mov    DWORD PTR ds:0xc0023504,0xc0010834
c0011523:	c7 05 08 35 02 c0 83 0f 01 c0 	mov    DWORD PTR ds:0xc0023508,0xc0010f83
c001152d:	c7 05 0c 35 02 c0 b6 09 01 c0 	mov    DWORD PTR ds:0xc002350c,0xc00109b6
c0011537:	c7 05 10 35 02 c0 44 08 01 c0 	mov    DWORD PTR ds:0xc0023510,0xc0010844
c0011541:	c7 05 14 35 02 c0 79 0a 01 c0 	mov    DWORD PTR ds:0xc0023514,0xc0010a79
c001154b:	c7 05 18 35 02 c0 d0 0f 01 c0 	mov    DWORD PTR ds:0xc0023518,0xc0010fd0
c0011555:	c7 05 1c 35 02 c0 12 0c 01 c0 	mov    DWORD PTR ds:0xc002351c,0xc0010c12
c001155f:	c7 05 20 35 02 c0 f9 0f 01 c0 	mov    DWORD PTR ds:0xc0023520,0xc0010ff9
c0011569:	c7 05 24 35 02 c0 62 10 01 c0 	mov    DWORD PTR ds:0xc0023524,0xc0011062
c0011573:	c7 05 2c 35 02 c0 4c 08 01 c0 	mov    DWORD PTR ds:0xc002352c,0xc001084c
c001157d:	c7 05 30 35 02 c0 b9 08 01 c0 	mov    DWORD PTR ds:0xc0023530,0xc00108b9
c0011587:	c7 05 34 35 02 c0 03 09 01 c0 	mov    DWORD PTR ds:0xc0023534,0xc0010903
c0011591:	c7 05 38 35 02 c0 11 11 01 c0 	mov    DWORD PTR ds:0xc0023538,0xc0011111
c001159b:	c7 05 3c 35 02 c0 9a 0e 01 c0 	mov    DWORD PTR ds:0xc002353c,0xc0010e9a
c00115a5:	c7 05 40 35 02 c0 58 09 01 c0 	mov    DWORD PTR ds:0xc0023540,0xc0010958
c00115af:	c7 05 44 35 02 c0 88 11 01 c0 	mov    DWORD PTR ds:0xc0023544,0xc0011188
c00115b9:	c7 05 48 35 02 c0 cd 11 01 c0 	mov    DWORD PTR ds:0xc0023548,0xc00111cd
c00115c3:	c7 05 4c 35 02 c0 6f 1c 01 c0 	mov    DWORD PTR ds:0xc002354c,0xc0011c6f
c00115cd:	c7 05 50 35 02 c0 f0 1d 01 c0 	mov    DWORD PTR ds:0xc0023550,0xc0011df0
c00115d7:	c7 05 54 35 02 c0 85 1e 01 c0 	mov    DWORD PTR ds:0xc0023554,0xc0011e85
c00115e1:	c7 05 58 35 02 c0 5a 1b 01 c0 	mov    DWORD PTR ds:0xc0023558,0xc0011b5a
c00115eb:	c7 05 5c 35 02 c0 37 1f 01 c0 	mov    DWORD PTR ds:0xc002355c,0xc0011f37
c00115f5:	c7 05 60 35 02 c0 d3 1b 01 c0 	mov    DWORD PTR ds:0xc0023560,0xc0011bd3
c00115ff:	c7 05 64 35 02 c0 ed 1b 01 c0 	mov    DWORD PTR ds:0xc0023564,0xc0011bed
c0011609:	c3                   	ret    

c001160a <KeSystemCall(regs*, void*)>:
c001160a:	53                   	push   ebx
c001160b:	83 ec 08             	sub    esp,0x8
c001160e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011612:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011615:	83 f8 7f             	cmp    eax,0x7f
c0011618:	77 16                	ja     c0011630 <KeSystemCall(regs*, void*)+0x26>
c001161a:	8b 14 85 a0 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcb60]
c0011621:	85 d2                	test   edx,edx
c0011623:	74 0b                	je     c0011630 <KeSystemCall(regs*, void*)+0x26>
c0011625:	83 ec 0c             	sub    esp,0xc
c0011628:	53                   	push   ebx
c0011629:	ff d2                	call   edx
c001162b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001162e:	eb 0d                	jmp    c001163d <KeSystemCall(regs*, void*)+0x33>
c0011630:	52                   	push   edx
c0011631:	52                   	push   edx
c0011632:	50                   	push   eax
c0011633:	68 10 e8 01 c0       	push   0xc001e810
c0011638:	e8 ef 92 ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c001163d:	83 c4 10             	add    esp,0x10
c0011640:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011645:	31 d2                	xor    edx,edx
c0011647:	83 c4 08             	add    esp,0x8
c001164a:	5b                   	pop    ebx
c001164b:	c3                   	ret    

c001164c <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001164c:	55                   	push   ebp
c001164d:	57                   	push   edi
c001164e:	56                   	push   esi
c001164f:	53                   	push   ebx
c0011650:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0011656:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001165d:	8a 1e                	mov    bl,BYTE PTR [esi]
c001165f:	8d 6e 01             	lea    ebp,[esi+0x1]
c0011662:	80 fb 40             	cmp    bl,0x40
c0011665:	75 1b                	jne    c0011682 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0011667:	8a 16                	mov    dl,BYTE PTR [esi]
c0011669:	84 d2                	test   dl,dl
c001166b:	0f 84 f1 00 00 00    	je     c0011762 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011671:	8d 46 01             	lea    eax,[esi+0x1]
c0011674:	80 fa 3a             	cmp    dl,0x3a
c0011677:	74 04                	je     c001167d <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0011679:	89 c6                	mov    esi,eax
c001167b:	eb ea                	jmp    c0011667 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001167d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011680:	89 c6                	mov    esi,eax
c0011682:	50                   	push   eax
c0011683:	6a 40                	push   0x40
c0011685:	6a 00                	push   0x0
c0011687:	8d 44 24 24          	lea    eax,[esp+0x24]
c001168b:	50                   	push   eax
c001168c:	e8 3f ee fe ff       	call   c00004d0 <memset>
c0011691:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0011698:	31 c0                	xor    eax,eax
c001169a:	83 c4 10             	add    esp,0x10
c001169d:	8a 0f                	mov    cl,BYTE PTR [edi]
c001169f:	84 c9                	test   cl,cl
c00116a1:	0f 84 bb 00 00 00    	je     c0011762 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00116a7:	3d c7 00 00 00       	cmp    eax,0xc7
c00116ac:	0f 8f b0 00 00 00    	jg     c0011762 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00116b2:	80 f9 0a             	cmp    cl,0xa
c00116b5:	0f 85 98 00 00 00    	jne    c0011753 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00116bb:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00116c0:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00116c4:	a8 df                	test   al,0xdf
c00116c6:	0f 94 c1             	sete   cl
c00116c9:	3c 23                	cmp    al,0x23
c00116cb:	0f 94 c2             	sete   dl
c00116ce:	08 d1                	or     cl,dl
c00116d0:	75 4a                	jne    c001171c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00116d2:	8d 50 f7             	lea    edx,[eax-0x9]
c00116d5:	80 fa 01             	cmp    dl,0x1
c00116d8:	76 42                	jbe    c001171c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00116da:	3c 5b                	cmp    al,0x5b
c00116dc:	75 42                	jne    c0011720 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00116de:	80 fb 40             	cmp    bl,0x40
c00116e1:	75 39                	jne    c001171c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00116e3:	83 ec 0c             	sub    esp,0xc
c00116e6:	8d 54 24 65          	lea    edx,[esp+0x65]
c00116ea:	52                   	push   edx
c00116eb:	e8 50 ee fe ff       	call   c0000540 <strlen>
c00116f0:	83 c4 10             	add    esp,0x10
c00116f3:	83 f8 3f             	cmp    eax,0x3f
c00116f6:	77 6a                	ja     c0011762 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00116f8:	50                   	push   eax
c00116f9:	50                   	push   eax
c00116fa:	8d 54 24 61          	lea    edx,[esp+0x61]
c00116fe:	52                   	push   edx
c00116ff:	8d 54 24 24          	lea    edx,[esp+0x24]
c0011703:	52                   	push   edx
c0011704:	e8 f7 ee fe ff       	call   c0000600 <strcpy>
c0011709:	58                   	pop    eax
c001170a:	8d 54 24 24          	lea    edx,[esp+0x24]
c001170e:	52                   	push   edx
c001170f:	e8 2c ee fe ff       	call   c0000540 <strlen>
c0011714:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0011719:	83 c4 10             	add    esp,0x10
c001171c:	31 d2                	xor    edx,edx
c001171e:	eb 3a                	jmp    c001175a <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0011720:	80 fb 40             	cmp    bl,0x40
c0011723:	74 06                	je     c001172b <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0011725:	8d 44 24 58          	lea    eax,[esp+0x58]
c0011729:	eb 20                	jmp    c001174b <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001172b:	50                   	push   eax
c001172c:	50                   	push   eax
c001172d:	55                   	push   ebp
c001172e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011732:	50                   	push   eax
c0011733:	e8 a8 ef fe ff       	call   c00006e0 <strcmp>
c0011738:	83 c4 10             	add    esp,0x10
c001173b:	85 c0                	test   eax,eax
c001173d:	75 dd                	jne    c001171c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001173f:	eb e4                	jmp    c0011725 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0011741:	8d 50 01             	lea    edx,[eax+0x1]
c0011744:	80 f9 3d             	cmp    cl,0x3d
c0011747:	74 1d                	je     c0011766 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0011749:	89 d0                	mov    eax,edx
c001174b:	8a 08                	mov    cl,BYTE PTR [eax]
c001174d:	84 c9                	test   cl,cl
c001174f:	75 f0                	jne    c0011741 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0011751:	eb 0f                	jmp    c0011762 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011753:	8d 50 01             	lea    edx,[eax+0x1]
c0011756:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001175a:	47                   	inc    edi
c001175b:	89 d0                	mov    eax,edx
c001175d:	e9 3b ff ff ff       	jmp    c001169d <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0011762:	31 c0                	xor    eax,eax
c0011764:	eb 33                	jmp    c0011799 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0011766:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001176a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001176d:	50                   	push   eax
c001176e:	50                   	push   eax
c001176f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0011773:	50                   	push   eax
c0011774:	56                   	push   esi
c0011775:	e8 66 ef fe ff       	call   c00006e0 <strcmp>
c001177a:	83 c4 10             	add    esp,0x10
c001177d:	85 c0                	test   eax,eax
c001177f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011783:	75 97                	jne    c001171c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011785:	51                   	push   ecx
c0011786:	51                   	push   ecx
c0011787:	52                   	push   edx
c0011788:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001178f:	e8 6c ee fe ff       	call   c0000600 <strcpy>
c0011794:	83 c4 10             	add    esp,0x10
c0011797:	b0 01                	mov    al,0x1
c0011799:	81 c4 2c 01 00 00    	add    esp,0x12c
c001179f:	5b                   	pop    ebx
c00117a0:	5e                   	pop    esi
c00117a1:	5f                   	pop    edi
c00117a2:	5d                   	pop    ebp
c00117a3:	c3                   	ret    

c00117a4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00117a4:	57                   	push   edi
c00117a5:	56                   	push   esi
c00117a6:	53                   	push   ebx
c00117a7:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00117ad:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00117b4:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00117bb:	53                   	push   ebx
c00117bc:	e8 7f ed fe ff       	call   c0000540 <strlen>
c00117c1:	89 34 24             	mov    DWORD PTR [esp],esi
c00117c4:	89 c7                	mov    edi,eax
c00117c6:	e8 75 ed fe ff       	call   c0000540 <strlen>
c00117cb:	83 c4 10             	add    esp,0x10
c00117ce:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00117d2:	3d ff 00 00 00       	cmp    eax,0xff
c00117d7:	0f 87 d3 00 00 00    	ja     c00118b0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00117dd:	57                   	push   edi
c00117de:	57                   	push   edi
c00117df:	56                   	push   esi
c00117e0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00117e4:	56                   	push   esi
c00117e5:	e8 16 ee fe ff       	call   c0000600 <strcpy>
c00117ea:	58                   	pop    eax
c00117eb:	5a                   	pop    edx
c00117ec:	68 c1 ea 01 c0       	push   0xc001eac1
c00117f1:	56                   	push   esi
c00117f2:	e8 c9 ef fe ff       	call   c00007c0 <strcat>
c00117f7:	59                   	pop    ecx
c00117f8:	5f                   	pop    edi
c00117f9:	53                   	push   ebx
c00117fa:	56                   	push   esi
c00117fb:	e8 c0 ef fe ff       	call   c00007c0 <strcat>
c0011800:	58                   	pop    eax
c0011801:	5a                   	pop    edx
c0011802:	68 24 e8 01 c0       	push   0xc001e824
c0011807:	56                   	push   esi
c0011808:	e8 b3 ef fe ff       	call   c00007c0 <strcat>
c001180d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011814:	e8 78 64 ff ff       	call   c0007c91 <malloc>
c0011819:	83 c4 0c             	add    esp,0xc
c001181c:	89 c3                	mov    ebx,eax
c001181e:	ff 35 90 3e 02 c0    	push   DWORD PTR ds:0xc0023e90
c0011824:	56                   	push   esi
c0011825:	50                   	push   eax
c0011826:	e8 77 96 ff ff       	call   c000aea2 <File::File(char const*, Process*)>
c001182b:	83 c4 10             	add    esp,0x10
c001182e:	85 db                	test   ebx,ebx
c0011830:	74 7e                	je     c00118b0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0011832:	51                   	push   ecx
c0011833:	51                   	push   ecx
c0011834:	6a 01                	push   0x1
c0011836:	53                   	push   ebx
c0011837:	e8 26 97 ff ff       	call   c000af62 <File::open(FileOpenMode)>
c001183c:	83 c4 10             	add    esp,0x10
c001183f:	85 c0                	test   eax,eax
c0011841:	74 08                	je     c001184b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0011843:	83 ec 0c             	sub    esp,0xc
c0011846:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011848:	53                   	push   ebx
c0011849:	eb 5f                	jmp    c00118aa <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001184b:	52                   	push   edx
c001184c:	8d 44 24 17          	lea    eax,[esp+0x17]
c0011850:	50                   	push   eax
c0011851:	8d 44 24 20          	lea    eax,[esp+0x20]
c0011855:	50                   	push   eax
c0011856:	53                   	push   ebx
c0011857:	e8 b2 99 ff ff       	call   c000b20e <File::stat(unsigned long long*, bool*)>
c001185c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011860:	83 c4 10             	add    esp,0x10
c0011863:	89 c1                	mov    ecx,eax
c0011865:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0011869:	74 31                	je     c001189c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001186b:	83 ec 0c             	sub    esp,0xc
c001186e:	50                   	push   eax
c001186f:	e8 1d 64 ff ff       	call   c0007c91 <malloc>
c0011874:	89 c6                	mov    esi,eax
c0011876:	58                   	pop    eax
c0011877:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011879:	8d 54 24 20          	lea    edx,[esp+0x20]
c001187d:	52                   	push   edx
c001187e:	56                   	push   esi
c001187f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011883:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011887:	53                   	push   ebx
c0011888:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001188b:	83 c4 20             	add    esp,0x20
c001188e:	85 c0                	test   eax,eax
c0011890:	75 0a                	jne    c001189c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0011892:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011896:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001189a:	74 18                	je     c00118b4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001189c:	83 ec 0c             	sub    esp,0xc
c001189f:	53                   	push   ebx
c00118a0:	e8 1b 97 ff ff       	call   c000afc0 <File::close()>
c00118a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118aa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118ad:	83 c4 10             	add    esp,0x10
c00118b0:	31 c0                	xor    eax,eax
c00118b2:	eb 3b                	jmp    c00118ef <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00118b4:	83 ec 0c             	sub    esp,0xc
c00118b7:	53                   	push   ebx
c00118b8:	e8 03 97 ff ff       	call   c000afc0 <File::close()>
c00118bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118c2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118c5:	83 c4 0c             	add    esp,0xc
c00118c8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00118cf:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00118d6:	56                   	push   esi
c00118d7:	e8 70 fd ff ff       	call   c001164c <Reg::findLineFromLoadedData(char*, char*, char*)>
c00118dc:	89 34 24             	mov    DWORD PTR [esp],esi
c00118df:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00118e3:	e8 b9 63 ff ff       	call   c0007ca1 <free>
c00118e8:	83 c4 10             	add    esp,0x10
c00118eb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00118ef:	81 c4 20 01 00 00    	add    esp,0x120
c00118f5:	5b                   	pop    ebx
c00118f6:	5e                   	pop    esi
c00118f7:	5f                   	pop    edi
c00118f8:	c3                   	ret    

c00118f9 <Reg::getLine(char*, char*, char*)>:
c00118f9:	57                   	push   edi
c00118fa:	56                   	push   esi
c00118fb:	53                   	push   ebx
c00118fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011900:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011904:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011908:	57                   	push   edi
c0011909:	56                   	push   esi
c001190a:	53                   	push   ebx
c001190b:	68 29 e8 01 c0       	push   0xc001e829
c0011910:	e8 8f fe ff ff       	call   c00117a4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0011915:	83 c4 10             	add    esp,0x10
c0011918:	84 c0                	test   al,al
c001191a:	75 10                	jne    c001192c <Reg::getLine(char*, char*, char*)+0x33>
c001191c:	57                   	push   edi
c001191d:	56                   	push   esi
c001191e:	53                   	push   ebx
c001191f:	68 4e e8 01 c0       	push   0xc001e84e
c0011924:	e8 7b fe ff ff       	call   c00117a4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0011929:	83 c4 10             	add    esp,0x10
c001192c:	5b                   	pop    ebx
c001192d:	5e                   	pop    esi
c001192e:	5f                   	pop    edi
c001192f:	c3                   	ret    

c0011930 <Reg::readInt(char*, char*, int*)>:
c0011930:	55                   	push   ebp
c0011931:	57                   	push   edi
c0011932:	56                   	push   esi
c0011933:	53                   	push   ebx
c0011934:	81 ec f0 00 00 00    	sub    esp,0xf0
c001193a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001193e:	57                   	push   edi
c001193f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0011946:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001194d:	e8 a7 ff ff ff       	call   c00118f9 <Reg::getLine(char*, char*, char*)>
c0011952:	83 c4 10             	add    esp,0x10
c0011955:	84 c0                	test   al,al
c0011957:	0f 84 b3 00 00 00    	je     c0011a10 <Reg::readInt(char*, char*, int*)+0xe0>
c001195d:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0011961:	80 fa 2b             	cmp    dl,0x2b
c0011964:	74 0c                	je     c0011972 <Reg::readInt(char*, char*, int*)+0x42>
c0011966:	80 fa 2d             	cmp    dl,0x2d
c0011969:	75 0e                	jne    c0011979 <Reg::readInt(char*, char*, int*)+0x49>
c001196b:	ba 01 00 00 00       	mov    edx,0x1
c0011970:	eb 0b                	jmp    c001197d <Reg::readInt(char*, char*, int*)+0x4d>
c0011972:	ba 01 00 00 00       	mov    edx,0x1
c0011977:	eb 02                	jmp    c001197b <Reg::readInt(char*, char*, int*)+0x4b>
c0011979:	31 d2                	xor    edx,edx
c001197b:	31 c0                	xor    eax,eax
c001197d:	be 0a 00 00 00       	mov    esi,0xa
c0011982:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0011987:	75 20                	jne    c00119a9 <Reg::readInt(char*, char*, int*)+0x79>
c0011989:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001198d:	80 f9 78             	cmp    cl,0x78
c0011990:	75 0a                	jne    c001199c <Reg::readInt(char*, char*, int*)+0x6c>
c0011992:	83 c2 02             	add    edx,0x2
c0011995:	be 10 00 00 00       	mov    esi,0x10
c001199a:	eb 0d                	jmp    c00119a9 <Reg::readInt(char*, char*, int*)+0x79>
c001199c:	80 f9 62             	cmp    cl,0x62
c001199f:	75 08                	jne    c00119a9 <Reg::readInt(char*, char*, int*)+0x79>
c00119a1:	83 c2 02             	add    edx,0x2
c00119a4:	be 02 00 00 00       	mov    esi,0x2
c00119a9:	01 d7                	add    edi,edx
c00119ab:	31 d2                	xor    edx,edx
c00119ad:	8a 1f                	mov    bl,BYTE PTR [edi]
c00119af:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00119b3:	80 fb 0d             	cmp    bl,0xd
c00119b6:	0f 94 c3             	sete   bl
c00119b9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00119be:	0f 94 c1             	sete   cl
c00119c1:	08 cb                	or     bl,cl
c00119c3:	75 3a                	jne    c00119ff <Reg::readInt(char*, char*, int*)+0xcf>
c00119c5:	0f af d6             	imul   edx,esi
c00119c8:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00119cd:	83 fe 10             	cmp    esi,0x10
c00119d0:	75 26                	jne    c00119f8 <Reg::readInt(char*, char*, int*)+0xc8>
c00119d2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00119d6:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00119d9:	89 e9                	mov    ecx,ebp
c00119db:	80 f9 05             	cmp    cl,0x5
c00119de:	77 06                	ja     c00119e6 <Reg::readInt(char*, char*, int*)+0xb6>
c00119e0:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00119e4:	eb 16                	jmp    c00119fc <Reg::readInt(char*, char*, int*)+0xcc>
c00119e6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00119ea:	83 e9 61             	sub    ecx,0x61
c00119ed:	80 f9 05             	cmp    cl,0x5
c00119f0:	77 06                	ja     c00119f8 <Reg::readInt(char*, char*, int*)+0xc8>
c00119f2:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00119f6:	eb 04                	jmp    c00119fc <Reg::readInt(char*, char*, int*)+0xcc>
c00119f8:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00119fc:	47                   	inc    edi
c00119fd:	eb ae                	jmp    c00119ad <Reg::readInt(char*, char*, int*)+0x7d>
c00119ff:	84 c0                	test   al,al
c0011a01:	74 02                	je     c0011a05 <Reg::readInt(char*, char*, int*)+0xd5>
c0011a03:	f7 da                	neg    edx
c0011a05:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0011a0c:	89 10                	mov    DWORD PTR [eax],edx
c0011a0e:	88 d8                	mov    al,bl
c0011a10:	81 c4 ec 00 00 00    	add    esp,0xec
c0011a16:	5b                   	pop    ebx
c0011a17:	5e                   	pop    esi
c0011a18:	5f                   	pop    edi
c0011a19:	5d                   	pop    ebp
c0011a1a:	c3                   	ret    

c0011a1b <Reg::readString(char*, char*, char*, int)>:
c0011a1b:	57                   	push   edi
c0011a1c:	56                   	push   esi
c0011a1d:	53                   	push   ebx
c0011a1e:	81 ec d4 00 00 00    	sub    esp,0xd4
c0011a24:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0011a2b:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0011a2f:	57                   	push   edi
c0011a30:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011a37:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011a3e:	e8 b6 fe ff ff       	call   c00118f9 <Reg::getLine(char*, char*, char*)>
c0011a43:	83 c4 10             	add    esp,0x10
c0011a46:	89 c6                	mov    esi,eax
c0011a48:	84 c0                	test   al,al
c0011a4a:	74 44                	je     c0011a90 <Reg::readString(char*, char*, char*, int)+0x75>
c0011a4c:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0011a53:	31 c0                	xor    eax,eax
c0011a55:	4a                   	dec    edx
c0011a56:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0011a59:	84 c9                	test   cl,cl
c0011a5b:	74 0f                	je     c0011a6c <Reg::readString(char*, char*, char*, int)+0x51>
c0011a5d:	39 c2                	cmp    edx,eax
c0011a5f:	7e 0b                	jle    c0011a6c <Reg::readString(char*, char*, char*, int)+0x51>
c0011a61:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0011a64:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0011a69:	40                   	inc    eax
c0011a6a:	eb ea                	jmp    c0011a56 <Reg::readString(char*, char*, char*, int)+0x3b>
c0011a6c:	83 ec 0c             	sub    esp,0xc
c0011a6f:	53                   	push   ebx
c0011a70:	e8 cb ea fe ff       	call   c0000540 <strlen>
c0011a75:	83 c4 10             	add    esp,0x10
c0011a78:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0011a7d:	75 11                	jne    c0011a90 <Reg::readString(char*, char*, char*, int)+0x75>
c0011a7f:	83 ec 0c             	sub    esp,0xc
c0011a82:	53                   	push   ebx
c0011a83:	e8 b8 ea fe ff       	call   c0000540 <strlen>
c0011a88:	83 c4 10             	add    esp,0x10
c0011a8b:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0011a90:	81 c4 d0 00 00 00    	add    esp,0xd0
c0011a96:	89 f0                	mov    eax,esi
c0011a98:	5b                   	pop    ebx
c0011a99:	5e                   	pop    esi
c0011a9a:	5f                   	pop    edi
c0011a9b:	c3                   	ret    

c0011a9c <Reg::readBool(char*, char*, bool*)>:
c0011a9c:	83 ec 20             	sub    esp,0x20
c0011a9f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011aa3:	50                   	push   eax
c0011aa4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011aa8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011aac:	e8 7f fe ff ff       	call   c0011930 <Reg::readInt(char*, char*, int*)>
c0011ab1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011ab6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0011aba:	0f 95 02             	setne  BYTE PTR [edx]
c0011abd:	83 c4 2c             	add    esp,0x2c
c0011ac0:	c3                   	ret    

c0011ac1 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0011ac1:	53                   	push   ebx
c0011ac2:	83 ec 1c             	sub    esp,0x1c
c0011ac5:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0011ac9:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011acd:	50                   	push   eax
c0011ace:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011ad2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011ad6:	e8 c1 ff ff ff       	call   c0011a9c <Reg::readBool(char*, char*, bool*)>
c0011adb:	83 c4 10             	add    esp,0x10
c0011ade:	84 c0                	test   al,al
c0011ae0:	74 04                	je     c0011ae6 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0011ae2:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0011ae6:	88 d8                	mov    al,bl
c0011ae8:	83 c4 18             	add    esp,0x18
c0011aeb:	5b                   	pop    ebx
c0011aec:	c3                   	ret    

c0011aed <Reg::readIntWithDefault(char*, char*, int)>:
c0011aed:	53                   	push   ebx
c0011aee:	83 ec 1c             	sub    esp,0x1c
c0011af1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011af5:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011af9:	50                   	push   eax
c0011afa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011afe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011b02:	e8 29 fe ff ff       	call   c0011930 <Reg::readInt(char*, char*, int*)>
c0011b07:	83 c4 10             	add    esp,0x10
c0011b0a:	84 c0                	test   al,al
c0011b0c:	74 04                	je     c0011b12 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0011b0e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b12:	89 d8                	mov    eax,ebx
c0011b14:	83 c4 18             	add    esp,0x18
c0011b17:	5b                   	pop    ebx
c0011b18:	c3                   	ret    

c0011b19 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0011b19:	57                   	push   edi
c0011b1a:	56                   	push   esi
c0011b1b:	56                   	push   esi
c0011b1c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011b20:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011b24:	56                   	push   esi
c0011b25:	57                   	push   edi
c0011b26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011b2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011b2e:	e8 e8 fe ff ff       	call   c0011a1b <Reg::readString(char*, char*, char*, int)>
c0011b33:	83 c4 10             	add    esp,0x10
c0011b36:	84 c0                	test   al,al
c0011b38:	75 1a                	jne    c0011b54 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0011b3a:	51                   	push   ecx
c0011b3b:	56                   	push   esi
c0011b3c:	6a 00                	push   0x0
c0011b3e:	57                   	push   edi
c0011b3f:	e8 8c e9 fe ff       	call   c00004d0 <memset>
c0011b44:	8d 4e ff             	lea    ecx,[esi-0x1]
c0011b47:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b4b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011b4d:	83 c4 10             	add    esp,0x10
c0011b50:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011b54:	89 f8                	mov    eax,edi
c0011b56:	5a                   	pop    edx
c0011b57:	5e                   	pop    esi
c0011b58:	5f                   	pop    edi
c0011b59:	c3                   	ret    

c0011b5a <SysEject(regs*)>:
c0011b5a:	83 ec 0c             	sub    esp,0xc
c0011b5d:	83 ca ff             	or     edx,0xffffffff
c0011b60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b64:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011b67:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011b6c:	83 e9 41             	sub    ecx,0x41
c0011b6f:	83 f9 19             	cmp    ecx,0x19
c0011b72:	77 18                	ja     c0011b8c <SysEject(regs*)+0x32>
c0011b74:	8b 0c 8d 20 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0e0]
c0011b7b:	85 c9                	test   ecx,ecx
c0011b7d:	74 0d                	je     c0011b8c <SysEject(regs*)+0x32>
c0011b7f:	83 ec 0c             	sub    esp,0xc
c0011b82:	51                   	push   ecx
c0011b83:	e8 22 b4 ff ff       	call   c000cfaa <LogicalDisk::eject()>
c0011b88:	83 c4 10             	add    esp,0x10
c0011b8b:	99                   	cdq    
c0011b8c:	83 c4 0c             	add    esp,0xc
c0011b8f:	c3                   	ret    

c0011b90 <SysExit(regs*)>:
c0011b90:	83 ec 18             	sub    esp,0x18
c0011b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011b97:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011b9a:	e8 b1 26 00 00       	call   c0014250 <terminateTask(int)>
c0011b9f:	83 c8 ff             	or     eax,0xffffffff
c0011ba2:	83 c4 1c             	add    esp,0x1c
c0011ba5:	89 c2                	mov    edx,eax
c0011ba7:	c3                   	ret    

c0011ba8 <SysGetCwd(regs*)>:
c0011ba8:	83 ec 10             	sub    esp,0x10
c0011bab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011baf:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0011bb2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011bb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bba:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011bbd:	e8 e2 90 ff ff       	call   c000aca4 <Fs::getcwd(Process*, char*, int)>
c0011bc2:	83 c4 1c             	add    esp,0x1c
c0011bc5:	99                   	cdq    
c0011bc6:	c3                   	ret    

c0011bc7 <SysGetPID(regs*)>:
c0011bc7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bcc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bcf:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bd1:	99                   	cdq    
c0011bd2:	c3                   	ret    

c0011bd3 <SysGetRAMData(regs*)>:
c0011bd3:	8b 0d e8 09 02 c0    	mov    ecx,DWORD PTR ds:0xc00209e8
c0011bd9:	69 05 e4 09 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc00209e4,0xc8
c0011be3:	99                   	cdq    
c0011be4:	f7 f9                	idiv   ecx
c0011be6:	c1 e0 18             	shl    eax,0x18
c0011be9:	09 c8                	or     eax,ecx
c0011beb:	99                   	cdq    
c0011bec:	c3                   	ret    

c0011bed <SysGetVGAPtr(regs*)>:
c0011bed:	55                   	push   ebp
c0011bee:	57                   	push   edi
c0011bef:	56                   	push   esi
c0011bf0:	53                   	push   ebx
c0011bf1:	83 ec 18             	sub    esp,0x18
c0011bf4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011bf8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011bfb:	e8 50 21 00 00       	call   c0013d50 <Thr::processFromPID(int)>
c0011c00:	83 c4 10             	add    esp,0x10
c0011c03:	89 c1                	mov    ecx,eax
c0011c05:	b8 01 00 00 00       	mov    eax,0x1
c0011c0a:	85 c9                	test   ecx,ecx
c0011c0c:	74 57                	je     c0011c65 <SysGetVGAPtr(regs*)+0x78>
c0011c0e:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0011c14:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0011c18:	74 0c                	je     c0011c26 <SysGetVGAPtr(regs*)+0x39>
c0011c1a:	83 ec 0c             	sub    esp,0xc
c0011c1d:	55                   	push   ebp
c0011c1e:	e8 ac 6c ff ff       	call   c00088cf <setActiveTerminal(VgaText*)>
c0011c23:	83 c4 10             	add    esp,0x10
c0011c26:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0011c29:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011c2c:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0011c31:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011c33:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0011c36:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c39:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0011c3f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c42:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0011c45:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0011c4b:	50                   	push   eax
c0011c4c:	50                   	push   eax
c0011c4d:	68 69 e8 01 c0       	push   0xc001e869
c0011c52:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c55:	05 a8 0f 00 00       	add    eax,0xfa8
c0011c5a:	50                   	push   eax
c0011c5b:	e8 a0 e9 fe ff       	call   c0000600 <strcpy>
c0011c60:	83 c4 10             	add    esp,0x10
c0011c63:	31 c0                	xor    eax,eax
c0011c65:	83 c4 0c             	add    esp,0xc
c0011c68:	31 d2                	xor    edx,edx
c0011c6a:	5b                   	pop    ebx
c0011c6b:	5e                   	pop    esi
c0011c6c:	5f                   	pop    edi
c0011c6d:	5d                   	pop    ebp
c0011c6e:	c3                   	ret    

c0011c6f <SysLoadDLL(regs*)>:
c0011c6f:	56                   	push   esi
c0011c70:	53                   	push   ebx
c0011c71:	31 d2                	xor    edx,edx
c0011c73:	51                   	push   ecx
c0011c74:	b8 01 00 00 00       	mov    eax,0x1
c0011c79:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011c7d:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0011c81:	0f 84 8c 00 00 00    	je     c0011d13 <SysLoadDLL(regs*)+0xa4>
c0011c87:	83 ec 0c             	sub    esp,0xc
c0011c8a:	68 14 01 00 00       	push   0x114
c0011c8f:	e8 fd 5f ff ff       	call   c0007c91 <malloc>
c0011c94:	83 c4 0c             	add    esp,0xc
c0011c97:	89 c3                	mov    ebx,eax
c0011c99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c9e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011ca1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011ca4:	53                   	push   ebx
c0011ca5:	e8 f8 91 ff ff       	call   c000aea2 <File::File(char const*, Process*)>
c0011caa:	83 c4 10             	add    esp,0x10
c0011cad:	31 d2                	xor    edx,edx
c0011caf:	b8 02 00 00 00       	mov    eax,0x2
c0011cb4:	85 db                	test   ebx,ebx
c0011cb6:	74 5b                	je     c0011d13 <SysLoadDLL(regs*)+0xa4>
c0011cb8:	83 ec 0c             	sub    esp,0xc
c0011cbb:	53                   	push   ebx
c0011cbc:	e8 0f 95 ff ff       	call   c000b1d0 <File::exists()>
c0011cc1:	83 c4 10             	add    esp,0x10
c0011cc4:	84 c0                	test   al,al
c0011cc6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011cc8:	75 11                	jne    c0011cdb <SysLoadDLL(regs*)+0x6c>
c0011cca:	83 ec 0c             	sub    esp,0xc
c0011ccd:	53                   	push   ebx
c0011cce:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011cd1:	83 c4 10             	add    esp,0x10
c0011cd4:	b8 03 00 00 00       	mov    eax,0x3
c0011cd9:	eb 36                	jmp    c0011d11 <SysLoadDLL(regs*)+0xa2>
c0011cdb:	83 ec 0c             	sub    esp,0xc
c0011cde:	53                   	push   ebx
c0011cdf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ce2:	58                   	pop    eax
c0011ce3:	5a                   	pop    edx
c0011ce4:	6a 00                	push   0x0
c0011ce6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011ce9:	e8 4b 12 00 00       	call   c0012f39 <Thr::loadDLL(char const*, bool)>
c0011cee:	83 c4 10             	add    esp,0x10
c0011cf1:	89 c1                	mov    ecx,eax
c0011cf3:	31 d2                	xor    edx,edx
c0011cf5:	b8 04 00 00 00       	mov    eax,0x4
c0011cfa:	85 c9                	test   ecx,ecx
c0011cfc:	74 15                	je     c0011d13 <SysLoadDLL(regs*)+0xa4>
c0011cfe:	53                   	push   ebx
c0011cff:	53                   	push   ebx
c0011d00:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0011d06:	51                   	push   ecx
c0011d07:	e8 5e 14 00 00       	call   c001316a <Thr::executeDLL(unsigned long, void*)>
c0011d0c:	83 c4 10             	add    esp,0x10
c0011d0f:	31 c0                	xor    eax,eax
c0011d11:	31 d2                	xor    edx,edx
c0011d13:	59                   	pop    ecx
c0011d14:	5b                   	pop    ebx
c0011d15:	5e                   	pop    esi
c0011d16:	c3                   	ret    

c0011d17 <SysRead(regs*)>:
c0011d17:	57                   	push   edi
c0011d18:	56                   	push   esi
c0011d19:	53                   	push   ebx
c0011d1a:	83 ec 10             	sub    esp,0x10
c0011d1d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d21:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d24:	83 f8 02             	cmp    eax,0x2
c0011d27:	77 10                	ja     c0011d39 <SysRead(regs*)+0x22>
c0011d29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d2e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d31:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011d37:	eb 0e                	jmp    c0011d47 <SysRead(regs*)+0x30>
c0011d39:	83 ec 0c             	sub    esp,0xc
c0011d3c:	50                   	push   eax
c0011d3d:	e8 41 78 ff ff       	call   c0009583 <getFromFileDescriptor(int)>
c0011d42:	83 c4 10             	add    esp,0x10
c0011d45:	89 c1                	mov    ecx,eax
c0011d47:	83 c8 ff             	or     eax,0xffffffff
c0011d4a:	85 c9                	test   ecx,ecx
c0011d4c:	89 c2                	mov    edx,eax
c0011d4e:	74 28                	je     c0011d78 <SysRead(regs*)+0x61>
c0011d50:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d58:	31 ff                	xor    edi,edi
c0011d5a:	83 ec 0c             	sub    esp,0xc
c0011d5d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011d5f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d63:	52                   	push   edx
c0011d64:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011d67:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011d6a:	57                   	push   edi
c0011d6b:	56                   	push   esi
c0011d6c:	51                   	push   ecx
c0011d6d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011d70:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d74:	83 c4 20             	add    esp,0x20
c0011d77:	99                   	cdq    
c0011d78:	83 c4 10             	add    esp,0x10
c0011d7b:	5b                   	pop    ebx
c0011d7c:	5e                   	pop    esi
c0011d7d:	5f                   	pop    edi
c0011d7e:	c3                   	ret    

c0011d7f <SysSbrk(regs*)>:
c0011d7f:	56                   	push   esi
c0011d80:	53                   	push   ebx
c0011d81:	50                   	push   eax
c0011d82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011d8b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d8e:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0011d91:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0011d97:	85 db                	test   ebx,ebx
c0011d99:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011d9c:	74 02                	je     c0011da0 <SysSbrk(regs*)+0x21>
c0011d9e:	79 06                	jns    c0011da6 <SysSbrk(regs*)+0x27>
c0011da0:	89 f0                	mov    eax,esi
c0011da2:	31 d2                	xor    edx,edx
c0011da4:	eb 2a                	jmp    c0011dd0 <SysSbrk(regs*)+0x51>
c0011da6:	83 c8 ff             	or     eax,0xffffffff
c0011da9:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011daf:	89 c2                	mov    edx,eax
c0011db1:	77 1d                	ja     c0011dd0 <SysSbrk(regs*)+0x51>
c0011db3:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0011db9:	50                   	push   eax
c0011dba:	c1 ea 0c             	shr    edx,0xc
c0011dbd:	68 07 0c 00 00       	push   0xc07
c0011dc2:	52                   	push   edx
c0011dc3:	51                   	push   ecx
c0011dc4:	e8 a9 80 ff ff       	call   c0009e72 <VAS::allocatePages(int, int)>
c0011dc9:	89 f0                	mov    eax,esi
c0011dcb:	31 d2                	xor    edx,edx
c0011dcd:	83 c4 10             	add    esp,0x10
c0011dd0:	59                   	pop    ecx
c0011dd1:	5b                   	pop    ebx
c0011dd2:	5e                   	pop    esi
c0011dd3:	c3                   	ret    

c0011dd4 <SysSetCwd(regs*)>:
c0011dd4:	83 ec 14             	sub    esp,0x14
c0011dd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ddb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011dde:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011de3:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011de6:	e8 84 94 ff ff       	call   c000b26f <Fs::setcwd(Process*, char*)>
c0011deb:	83 c4 1c             	add    esp,0x1c
c0011dee:	99                   	cdq    
c0011def:	c3                   	ret    

c0011df0 <SysSetTime(regs*)>:
c0011df0:	55                   	push   ebp
c0011df1:	31 c9                	xor    ecx,ecx
c0011df3:	57                   	push   edi
c0011df4:	bd 0c 00 00 00       	mov    ebp,0xc
c0011df9:	56                   	push   esi
c0011dfa:	53                   	push   ebx
c0011dfb:	31 db                	xor    ebx,ebx
c0011dfd:	83 ec 10             	sub    esp,0x10
c0011e00:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011e04:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011e07:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011e0a:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0011e0d:	89 c2                	mov    edx,eax
c0011e0f:	66 81 ef 6c 07       	sub    di,0x76c
c0011e14:	83 e2 1f             	and    edx,0x1f
c0011e17:	c1 e7 10             	shl    edi,0x10
c0011e1a:	42                   	inc    edx
c0011e1b:	c1 e8 05             	shr    eax,0x5
c0011e1e:	88 d1                	mov    cl,dl
c0011e20:	31 d2                	xor    edx,edx
c0011e22:	f7 f5                	div    ebp
c0011e24:	89 dd                	mov    ebp,ebx
c0011e26:	88 d5                	mov    ch,dl
c0011e28:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011e2e:	0f b7 c1             	movzx  eax,cx
c0011e31:	31 d2                	xor    edx,edx
c0011e33:	09 f8                	or     eax,edi
c0011e35:	bf 3c 00 00 00       	mov    edi,0x3c
c0011e3a:	89 c1                	mov    ecx,eax
c0011e3c:	89 f0                	mov    eax,esi
c0011e3e:	f7 f7                	div    edi
c0011e40:	c1 e2 10             	shl    edx,0x10
c0011e43:	09 d5                	or     ebp,edx
c0011e45:	31 d2                	xor    edx,edx
c0011e47:	89 eb                	mov    ebx,ebp
c0011e49:	f7 f7                	div    edi
c0011e4b:	bf 10 0e 00 00       	mov    edi,0xe10
c0011e50:	88 d7                	mov    bh,dl
c0011e52:	89 f0                	mov    eax,esi
c0011e54:	31 d2                	xor    edx,edx
c0011e56:	f7 f7                	div    edi
c0011e58:	bf 18 00 00 00       	mov    edi,0x18
c0011e5d:	31 d2                	xor    edx,edx
c0011e5f:	f7 f7                	div    edi
c0011e61:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c0011e66:	88 d3                	mov    bl,dl
c0011e68:	53                   	push   ebx
c0011e69:	51                   	push   ecx
c0011e6a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011e70:	e8 0b 9c ff ff       	call   c000ba80 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0011e75:	83 c4 1c             	add    esp,0x1c
c0011e78:	83 f0 01             	xor    eax,0x1
c0011e7b:	5b                   	pop    ebx
c0011e7c:	0f b6 c0             	movzx  eax,al
c0011e7f:	5e                   	pop    esi
c0011e80:	31 d2                	xor    edx,edx
c0011e82:	5f                   	pop    edi
c0011e83:	5d                   	pop    ebp
c0011e84:	c3                   	ret    

c0011e85 <SysTimezone(regs*)>:
c0011e85:	53                   	push   ebx
c0011e86:	83 ec 08             	sub    esp,0x8
c0011e89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011e8d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011e91:	75 17                	jne    c0011eaa <SysTimezone(regs*)+0x25>
c0011e93:	83 ec 0c             	sub    esp,0xc
c0011e96:	68 73 e8 01 c0       	push   0xc001e873
c0011e9b:	e8 8c 8a ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c0011ea0:	83 c8 ff             	or     eax,0xffffffff
c0011ea3:	83 c4 10             	add    esp,0x10
c0011ea6:	89 c2                	mov    edx,eax
c0011ea8:	eb 20                	jmp    c0011eca <SysTimezone(regs*)+0x45>
c0011eaa:	83 ec 0c             	sub    esp,0xc
c0011ead:	68 88 e8 01 c0       	push   0xc001e888
c0011eb2:	e8 75 8a ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c0011eb7:	58                   	pop    eax
c0011eb8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011ebb:	e8 1c 99 ff ff       	call   c000b7dc <User::loadClockSettings(int)>
c0011ec0:	83 c4 10             	add    esp,0x10
c0011ec3:	b8 01 00 00 00       	mov    eax,0x1
c0011ec8:	31 d2                	xor    edx,edx
c0011eca:	83 c4 08             	add    esp,0x8
c0011ecd:	5b                   	pop    ebx
c0011ece:	c3                   	ret    

c0011ecf <SysWrite(regs*)>:
c0011ecf:	57                   	push   edi
c0011ed0:	56                   	push   esi
c0011ed1:	53                   	push   ebx
c0011ed2:	83 ec 10             	sub    esp,0x10
c0011ed5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ed9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011edc:	83 f8 02             	cmp    eax,0x2
c0011edf:	77 10                	ja     c0011ef1 <SysWrite(regs*)+0x22>
c0011ee1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ee6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ee9:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011eef:	eb 0e                	jmp    c0011eff <SysWrite(regs*)+0x30>
c0011ef1:	83 ec 0c             	sub    esp,0xc
c0011ef4:	50                   	push   eax
c0011ef5:	e8 89 76 ff ff       	call   c0009583 <getFromFileDescriptor(int)>
c0011efa:	83 c4 10             	add    esp,0x10
c0011efd:	89 c1                	mov    ecx,eax
c0011eff:	83 c8 ff             	or     eax,0xffffffff
c0011f02:	85 c9                	test   ecx,ecx
c0011f04:	89 c2                	mov    edx,eax
c0011f06:	74 28                	je     c0011f30 <SysWrite(regs*)+0x61>
c0011f08:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f10:	31 ff                	xor    edi,edi
c0011f12:	83 ec 0c             	sub    esp,0xc
c0011f15:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011f17:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011f1b:	52                   	push   edx
c0011f1c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011f1f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011f22:	57                   	push   edi
c0011f23:	56                   	push   esi
c0011f24:	51                   	push   ecx
c0011f25:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011f28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f2c:	83 c4 20             	add    esp,0x20
c0011f2f:	99                   	cdq    
c0011f30:	83 c4 10             	add    esp,0x10
c0011f33:	5b                   	pop    ebx
c0011f34:	5e                   	pop    esi
c0011f35:	5f                   	pop    edi
c0011f36:	c3                   	ret    

c0011f37 <SysWsbe(regs*)>:
c0011f37:	57                   	push   edi
c0011f38:	b9 0b 00 00 00       	mov    ecx,0xb
c0011f3d:	56                   	push   esi
c0011f3e:	be c7 e8 01 c0       	mov    esi,0xc001e8c7
c0011f43:	53                   	push   ebx
c0011f44:	83 ec 30             	sub    esp,0x30
c0011f47:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011f4b:	fc                   	cld    
c0011f4c:	83 ec 0c             	sub    esp,0xc
c0011f4f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011f51:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011f55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f5a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f5d:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011f63:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f65:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011f68:	57                   	push   edi
c0011f69:	e8 d2 e5 fe ff       	call   c0000540 <strlen>
c0011f6e:	5a                   	pop    edx
c0011f6f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011f73:	52                   	push   edx
c0011f74:	31 d2                	xor    edx,edx
c0011f76:	57                   	push   edi
c0011f77:	52                   	push   edx
c0011f78:	50                   	push   eax
c0011f79:	56                   	push   esi
c0011f7a:	ff d3                	call   ebx
c0011f7c:	83 c4 14             	add    esp,0x14
c0011f7f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011f83:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011f86:	e8 c5 22 00 00       	call   c0014250 <terminateTask(int)>
c0011f8b:	83 c4 40             	add    esp,0x40
c0011f8e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011f93:	5b                   	pop    ebx
c0011f94:	31 d2                	xor    edx,edx
c0011f96:	5e                   	pop    esi
c0011f97:	5f                   	pop    edi
c0011f98:	c3                   	ret    

c0011f99 <SysYield(regs*)>:
c0011f99:	83 ec 0c             	sub    esp,0xc
c0011f9c:	fa                   	cli    
c0011f9d:	ff 05 68 3e 02 c0    	inc    DWORD PTR ds:0xc0023e68
c0011fa3:	e8 84 19 00 00       	call   c001392c <schedule()>
c0011fa8:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c0011fad:	48                   	dec    eax
c0011fae:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c0011fb3:	75 01                	jne    c0011fb6 <SysYield(regs*)+0x1d>
c0011fb5:	fb                   	sti    
c0011fb6:	31 c0                	xor    eax,eax
c0011fb8:	31 d2                	xor    edx,edx
c0011fba:	83 c4 0c             	add    esp,0xc
c0011fbd:	c3                   	ret    

c0011fbe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011fbe:	55                   	push   ebp
c0011fbf:	57                   	push   edi
c0011fc0:	56                   	push   esi
c0011fc1:	53                   	push   ebx
c0011fc2:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011fc8:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011fd0:	0f 95 c2             	setne  dl
c0011fd3:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011fdb:	0f 94 c0             	sete   al
c0011fde:	84 c2                	test   dl,al
c0011fe0:	74 34                	je     c0012016 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011fe2:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011fed:	74 27                	je     c0012016 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011fef:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011ff6:	05 00 10 00 00       	add    eax,0x1000
c0011ffb:	89 c1                	mov    ecx,eax
c0011ffd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012002:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0012008:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c001200f:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0012016:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001201d:	83 ec 0c             	sub    esp,0xc
c0012020:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0012026:	6a 01                	push   0x1
c0012028:	e8 ac 76 ff ff       	call   c00096d9 <Virt::allocateKernelVirtualPages(int)>
c001202d:	83 c4 10             	add    esp,0x10
c0012030:	89 c3                	mov    ebx,eax
c0012032:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0012038:	0f 86 25 01 00 00    	jbe    c0012163 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c001203e:	c1 ee 0c             	shr    esi,0xc
c0012041:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0012048:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001204c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012054:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001205b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001205f:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0012066:	29 ef                	sub    edi,ebp
c0012068:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001206c:	0f 83 f8 00 00 00    	jae    c001216a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0012072:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0012078:	76 05                	jbe    c001207f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c001207a:	bf 00 10 00 00       	mov    edi,0x1000
c001207f:	83 ec 0c             	sub    esp,0xc
c0012082:	31 d2                	xor    edx,edx
c0012084:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001208b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001208d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012091:	50                   	push   eax
c0012092:	8d 74 24 30          	lea    esi,[esp+0x30]
c0012096:	56                   	push   esi
c0012097:	52                   	push   edx
c0012098:	57                   	push   edi
c0012099:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00120a0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00120a3:	83 c4 20             	add    esp,0x20
c00120a6:	85 c0                	test   eax,eax
c00120a8:	75 06                	jne    c00120b0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c00120aa:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00120ae:	74 13                	je     c00120c3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c00120b0:	83 ec 0c             	sub    esp,0xc
c00120b3:	53                   	push   ebx
c00120b4:	e8 50 79 ff ff       	call   c0009a09 <Virt::freeKernelVirtualPages(unsigned long)>
c00120b9:	83 c4 10             	add    esp,0x10
c00120bc:	31 c0                	xor    eax,eax
c00120be:	e9 7c 01 00 00       	jmp    c001223f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c00120c3:	fa                   	cli    
c00120c4:	ff 05 68 3e 02 c0    	inc    DWORD PTR ds:0xc0023e68
c00120ca:	e8 9e 5e ff ff       	call   c0007f6d <Phys::allocatePage()>
c00120cf:	6a 07                	push   0x7
c00120d1:	89 c7                	mov    edi,eax
c00120d3:	53                   	push   ebx
c00120d4:	50                   	push   eax
c00120d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00120dd:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00120e3:	e8 86 7c ff ff       	call   c0009d6e <VAS::mapPage(unsigned long, unsigned long, int)>
c00120e8:	83 c4 0c             	add    esp,0xc
c00120eb:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00120f2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00120f8:	6a 00                	push   0x0
c00120fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120ff:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012102:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012108:	e8 d3 7a ff ff       	call   c0009be0 <VAS::mapOtherVASIn(bool, VAS*)>
c001210d:	58                   	pop    eax
c001210e:	5a                   	pop    edx
c001210f:	68 07 0c 00 00       	push   0xc07
c0012114:	55                   	push   ebp
c0012115:	57                   	push   edi
c0012116:	89 df                	mov    edi,ebx
c0012118:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001211f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012125:	6a 00                	push   0x0
c0012127:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001212c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001212f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012135:	e8 f4 7f ff ff       	call   c000a12e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001213a:	b9 00 10 00 00       	mov    ecx,0x1000
c001213f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012141:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c0012146:	83 c4 20             	add    esp,0x20
c0012149:	48                   	dec    eax
c001214a:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c001214f:	85 c0                	test   eax,eax
c0012151:	75 01                	jne    c0012154 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0012153:	fb                   	sti    
c0012154:	81 c5 00 10 00 00    	add    ebp,0x1000
c001215a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001215e:	e9 f1 fe ff ff       	jmp    c0012054 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0012163:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001216a:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0012171:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0012177:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001217d:	0f 86 ae 00 00 00    	jbe    c0012231 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012183:	fa                   	cli    
c0012184:	ff 05 68 3e 02 c0    	inc    DWORD PTR ds:0xc0023e68
c001218a:	c1 ee 0c             	shr    esi,0xc
c001218d:	51                   	push   ecx
c001218e:	31 ff                	xor    edi,edi
c0012190:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0012197:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001219d:	6a 00                	push   0x0
c001219f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121a4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121a7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00121ad:	e8 2e 7a ff ff       	call   c0009be0 <VAS::mapOtherVASIn(bool, VAS*)>
c00121b2:	83 c4 10             	add    esp,0x10
c00121b5:	e8 b3 5d ff ff       	call   c0007f6d <Phys::allocatePage()>
c00121ba:	47                   	inc    edi
c00121bb:	6a 07                	push   0x7
c00121bd:	53                   	push   ebx
c00121be:	50                   	push   eax
c00121bf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00121c3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00121c9:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00121cc:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00121d2:	e8 97 7b ff ff       	call   c0009d6e <VAS::mapPage(unsigned long, unsigned long, int)>
c00121d7:	58                   	pop    eax
c00121d8:	5a                   	pop    edx
c00121d9:	68 07 0c 00 00       	push   0xc07
c00121de:	55                   	push   ebp
c00121df:	81 c5 00 10 00 00    	add    ebp,0x1000
c00121e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00121e9:	50                   	push   eax
c00121ea:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00121f1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00121f7:	6a 00                	push   0x0
c00121f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012201:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012207:	e8 22 7f ff ff       	call   c000a12e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001220c:	83 c4 1c             	add    esp,0x1c
c001220f:	68 00 10 00 00       	push   0x1000
c0012214:	6a 00                	push   0x0
c0012216:	53                   	push   ebx
c0012217:	e8 b4 e2 fe ff       	call   c00004d0 <memset>
c001221c:	83 c4 10             	add    esp,0x10
c001221f:	39 fe                	cmp    esi,edi
c0012221:	77 92                	ja     c00121b5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0012223:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c0012228:	48                   	dec    eax
c0012229:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c001222e:	75 01                	jne    c0012231 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012230:	fb                   	sti    
c0012231:	83 ec 0c             	sub    esp,0xc
c0012234:	53                   	push   ebx
c0012235:	e8 cf 77 ff ff       	call   c0009a09 <Virt::freeKernelVirtualPages(unsigned long)>
c001223a:	83 c4 10             	add    esp,0x10
c001223d:	b0 01                	mov    al,0x1
c001223f:	81 c4 2c 10 00 00    	add    esp,0x102c
c0012245:	5b                   	pop    ebx
c0012246:	5e                   	pop    esi
c0012247:	5f                   	pop    edi
c0012248:	5d                   	pop    ebp
c0012249:	c3                   	ret    

c001224a <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001224a:	55                   	push   ebp
c001224b:	57                   	push   edi
c001224c:	56                   	push   esi
c001224d:	53                   	push   ebx
c001224e:	83 ec 48             	sub    esp,0x48
c0012251:	68 14 01 00 00       	push   0x114
c0012256:	e8 36 5a ff ff       	call   c0007c91 <malloc>
c001225b:	83 c4 0c             	add    esp,0xc
c001225e:	89 c6                	mov    esi,eax
c0012260:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012264:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012268:	50                   	push   eax
c0012269:	e8 34 8c ff ff       	call   c000aea2 <File::File(char const*, Process*)>
c001226e:	58                   	pop    eax
c001226f:	5a                   	pop    edx
c0012270:	6a 01                	push   0x1
c0012272:	56                   	push   esi
c0012273:	e8 ea 8c ff ff       	call   c000af62 <File::open(FileOpenMode)>
c0012278:	83 c4 10             	add    esp,0x10
c001227b:	85 c0                	test   eax,eax
c001227d:	0f 85 47 01 00 00    	jne    c00123ca <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012283:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001228b:	83 ec 0c             	sub    esp,0xc
c001228e:	6a 34                	push   0x34
c0012290:	e8 fc 59 ff ff       	call   c0007c91 <malloc>
c0012295:	89 c3                	mov    ebx,eax
c0012297:	58                   	pop    eax
c0012298:	8b 06                	mov    eax,DWORD PTR [esi]
c001229a:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001229e:	57                   	push   edi
c001229f:	53                   	push   ebx
c00122a0:	6a 00                	push   0x0
c00122a2:	6a 34                	push   0x34
c00122a4:	56                   	push   esi
c00122a5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00122a8:	83 c4 20             	add    esp,0x20
c00122ab:	85 c0                	test   eax,eax
c00122ad:	0f 85 17 01 00 00    	jne    c00123ca <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00122b3:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00122b9:	0f 85 0b 01 00 00    	jne    c00123ca <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00122bf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00122c2:	85 c0                	test   eax,eax
c00122c4:	0f 84 00 01 00 00    	je     c00123ca <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00122ca:	31 d2                	xor    edx,edx
c00122cc:	55                   	push   ebp
c00122cd:	52                   	push   edx
c00122ce:	50                   	push   eax
c00122cf:	56                   	push   esi
c00122d0:	e8 4b 8d ff ff       	call   c000b020 <File::seek(unsigned long long)>
c00122d5:	83 c4 10             	add    esp,0x10
c00122d8:	85 c0                	test   eax,eax
c00122da:	0f 85 ea 00 00 00    	jne    c00123ca <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00122e0:	83 ec 0c             	sub    esp,0xc
c00122e3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00122e6:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00122ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00122ee:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00122f2:	0f af c2             	imul   eax,edx
c00122f5:	50                   	push   eax
c00122f6:	e8 96 59 ff ff       	call   c0007c91 <malloc>
c00122fb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00122fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012301:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012308:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001230c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012310:	0f af c2             	imul   eax,edx
c0012313:	99                   	cdq    
c0012314:	52                   	push   edx
c0012315:	50                   	push   eax
c0012316:	56                   	push   esi
c0012317:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001231a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001231d:	83 c4 20             	add    esp,0x20
c0012320:	85 c0                	test   eax,eax
c0012322:	0f 84 a2 00 00 00    	je     c00123ca <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012328:	31 d2                	xor    edx,edx
c001232a:	51                   	push   ecx
c001232b:	52                   	push   edx
c001232c:	50                   	push   eax
c001232d:	56                   	push   esi
c001232e:	e8 ed 8c ff ff       	call   c000b020 <File::seek(unsigned long long)>
c0012333:	83 c4 10             	add    esp,0x10
c0012336:	85 c0                	test   eax,eax
c0012338:	0f 85 8c 00 00 00    	jne    c00123ca <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001233e:	83 ec 0c             	sub    esp,0xc
c0012341:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012345:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0012349:	31 ed                	xor    ebp,ebp
c001234b:	0f af c2             	imul   eax,edx
c001234e:	50                   	push   eax
c001234f:	e8 3d 59 ff ff       	call   c0007c91 <malloc>
c0012354:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012356:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001235a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001235d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012361:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012365:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0012369:	0f af c2             	imul   eax,edx
c001236c:	99                   	cdq    
c001236d:	52                   	push   edx
c001236e:	50                   	push   eax
c001236f:	56                   	push   esi
c0012370:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012373:	83 c4 20             	add    esp,0x20
c0012376:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001237e:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0012382:	0f 86 80 00 00 00    	jbe    c0012408 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0012388:	0f b7 fd             	movzx  edi,bp
c001238b:	c1 e7 05             	shl    edi,0x5
c001238e:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0012392:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0012395:	75 6b                	jne    c0012402 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0012397:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001239a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001239e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00123a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123a5:	52                   	push   edx
c00123a6:	31 d2                	xor    edx,edx
c00123a8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00123ab:	52                   	push   edx
c00123ac:	50                   	push   eax
c00123ad:	56                   	push   esi
c00123ae:	e8 6d 8c ff ff       	call   c000b020 <File::seek(unsigned long long)>
c00123b3:	83 c4 10             	add    esp,0x10
c00123b6:	85 c0                	test   eax,eax
c00123b8:	74 17                	je     c00123d1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00123ba:	83 ec 0c             	sub    esp,0xc
c00123bd:	68 f3 e8 01 c0       	push   0xc001e8f3
c00123c2:	e8 65 85 ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c00123c7:	83 c4 10             	add    esp,0x10
c00123ca:	31 c0                	xor    eax,eax
c00123cc:	e9 87 00 00 00       	jmp    c0012458 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00123d1:	83 ec 0c             	sub    esp,0xc
c00123d4:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00123d7:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00123da:	50                   	push   eax
c00123db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00123df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00123e3:	56                   	push   esi
c00123e4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00123e8:	e8 d1 fb ff ff       	call   c0011fbe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00123ed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123f1:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00123f5:	83 c4 20             	add    esp,0x20
c00123f8:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00123fc:	73 04                	jae    c0012402 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00123fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012402:	45                   	inc    ebp
c0012403:	e9 76 ff ff ff       	jmp    c001237e <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0012408:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001240c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012410:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012414:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001241a:	83 ec 0c             	sub    esp,0xc
c001241d:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0012423:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012428:	05 00 10 00 00       	add    eax,0x1000
c001242d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012430:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012434:	e8 68 58 ff ff       	call   c0007ca1 <free>
c0012439:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001243c:	e8 60 58 ff ff       	call   c0007ca1 <free>
c0012441:	58                   	pop    eax
c0012442:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012446:	e8 56 58 ff ff       	call   c0007ca1 <free>
c001244b:	89 34 24             	mov    DWORD PTR [esp],esi
c001244e:	e8 6d 8b ff ff       	call   c000afc0 <File::close()>
c0012453:	83 c4 10             	add    esp,0x10
c0012456:	b0 01                	mov    al,0x1
c0012458:	83 c4 3c             	add    esp,0x3c
c001245b:	5b                   	pop    ebx
c001245c:	5e                   	pop    esi
c001245d:	5f                   	pop    edi
c001245e:	5d                   	pop    ebp
c001245f:	c3                   	ret    

c0012460 <Thr::runtimeReferenceHelper()>:
c0012460:	83 ec 18             	sub    esp,0x18
c0012463:	68 fb e8 01 c0       	push   0xc001e8fb
c0012468:	e8 bf 84 ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c001246d:	fa                   	cli    
c001246e:	83 c4 10             	add    esp,0x10
c0012471:	eb fe                	jmp    c0012471 <Thr::runtimeReferenceHelper()+0x11>

c0012473 <Thr::getAddressOfKernelSymbol(char const*)>:
c0012473:	57                   	push   edi
c0012474:	56                   	push   esi
c0012475:	53                   	push   ebx
c0012476:	31 db                	xor    ebx,ebx
c0012478:	39 1d 40 3e 02 c0    	cmp    DWORD PTR ds:0xc0023e40,ebx
c001247e:	7e 3c                	jle    c00124bc <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0012480:	8b 34 9d c0 3d 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdc240]
c0012487:	31 ff                	xor    edi,edi
c0012489:	39 3c 9d c0 3c 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdc340],edi
c0012490:	7e 27                	jle    c00124b9 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0012492:	50                   	push   eax
c0012493:	50                   	push   eax
c0012494:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012498:	8b 06                	mov    eax,DWORD PTR [esi]
c001249a:	03 04 9d 40 3d 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdc2c0]
c00124a1:	50                   	push   eax
c00124a2:	e8 39 e2 fe ff       	call   c00006e0 <strcmp>
c00124a7:	83 c4 10             	add    esp,0x10
c00124aa:	85 c0                	test   eax,eax
c00124ac:	75 05                	jne    c00124b3 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00124ae:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00124b1:	eb 0b                	jmp    c00124be <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00124b3:	83 c6 10             	add    esi,0x10
c00124b6:	47                   	inc    edi
c00124b7:	eb d0                	jmp    c0012489 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00124b9:	43                   	inc    ebx
c00124ba:	eb bc                	jmp    c0012478 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00124bc:	31 c0                	xor    eax,eax
c00124be:	5b                   	pop    ebx
c00124bf:	5e                   	pop    esi
c00124c0:	5f                   	pop    edi
c00124c1:	c3                   	ret    

c00124c2 <Thr::loadKernelSymbolTable(char const*)>:
c00124c2:	55                   	push   ebp
c00124c3:	57                   	push   edi
c00124c4:	56                   	push   esi
c00124c5:	53                   	push   ebx
c00124c6:	83 ec 68             	sub    esp,0x68
c00124c9:	8b 35 90 3e 02 c0    	mov    esi,DWORD PTR ds:0xc0023e90
c00124cf:	68 14 01 00 00       	push   0x114
c00124d4:	e8 b8 57 ff ff       	call   c0007c91 <malloc>
c00124d9:	83 c4 0c             	add    esp,0xc
c00124dc:	89 c3                	mov    ebx,eax
c00124de:	56                   	push   esi
c00124df:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00124e3:	50                   	push   eax
c00124e4:	e8 b9 89 ff ff       	call   c000aea2 <File::File(char const*, Process*)>
c00124e9:	5e                   	pop    esi
c00124ea:	5f                   	pop    edi
c00124eb:	6a 01                	push   0x1
c00124ed:	53                   	push   ebx
c00124ee:	e8 6f 8a ff ff       	call   c000af62 <File::open(FileOpenMode)>
c00124f3:	83 c4 10             	add    esp,0x10
c00124f6:	85 c0                	test   eax,eax
c00124f8:	74 0a                	je     c0012504 <Thr::loadKernelSymbolTable(char const*)+0x42>
c00124fa:	83 ec 0c             	sub    esp,0xc
c00124fd:	68 1d e9 01 c0       	push   0xc001e91d
c0012502:	eb 34                	jmp    c0012538 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0012504:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001250c:	83 ec 0c             	sub    esp,0xc
c001250f:	6a 34                	push   0x34
c0012511:	e8 7b 57 ff ff       	call   c0007c91 <malloc>
c0012516:	59                   	pop    ecx
c0012517:	89 c7                	mov    edi,eax
c0012519:	8d 74 24 34          	lea    esi,[esp+0x34]
c001251d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001251f:	56                   	push   esi
c0012520:	57                   	push   edi
c0012521:	6a 00                	push   0x0
c0012523:	6a 34                	push   0x34
c0012525:	53                   	push   ebx
c0012526:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012529:	83 c4 20             	add    esp,0x20
c001252c:	85 c0                	test   eax,eax
c001252e:	74 17                	je     c0012547 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0012530:	83 ec 0c             	sub    esp,0xc
c0012533:	68 34 e9 01 c0       	push   0xc001e934
c0012538:	e8 52 e0 ff ff       	call   c001058f <KePanic(char const*)>
c001253d:	83 c4 10             	add    esp,0x10
c0012540:	31 c0                	xor    eax,eax
c0012542:	e9 31 02 00 00       	jmp    c0012778 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0012547:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001254d:	75 e1                	jne    c0012530 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001254f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0012552:	85 c0                	test   eax,eax
c0012554:	74 da                	je     c0012530 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012556:	52                   	push   edx
c0012557:	31 d2                	xor    edx,edx
c0012559:	52                   	push   edx
c001255a:	50                   	push   eax
c001255b:	53                   	push   ebx
c001255c:	e8 bf 8a ff ff       	call   c000b020 <File::seek(unsigned long long)>
c0012561:	83 c4 10             	add    esp,0x10
c0012564:	85 c0                	test   eax,eax
c0012566:	75 c8                	jne    c0012530 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012568:	83 ec 0c             	sub    esp,0xc
c001256b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001256f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012573:	31 ed                	xor    ebp,ebp
c0012575:	0f af c2             	imul   eax,edx
c0012578:	50                   	push   eax
c0012579:	e8 13 57 ff ff       	call   c0007c91 <malloc>
c001257e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012580:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012584:	89 34 24             	mov    DWORD PTR [esp],esi
c0012587:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001258b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001258f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012593:	0f af c2             	imul   eax,edx
c0012596:	99                   	cdq    
c0012597:	52                   	push   edx
c0012598:	50                   	push   eax
c0012599:	53                   	push   ebx
c001259a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001259d:	83 c4 20             	add    esp,0x20
c00125a0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00125a8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00125b0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00125b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00125c0:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00125c4:	0f 86 aa 00 00 00    	jbe    c0012674 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00125ca:	0f b7 f5             	movzx  esi,bp
c00125cd:	6b f6 28             	imul   esi,esi,0x28
c00125d0:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00125d4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00125d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00125db:	50                   	push   eax
c00125dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00125e0:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00125e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00125e6:	6b c0 28             	imul   eax,eax,0x28
c00125e9:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00125ed:	89 d0                	mov    eax,edx
c00125ef:	31 d2                	xor    edx,edx
c00125f1:	52                   	push   edx
c00125f2:	50                   	push   eax
c00125f3:	53                   	push   ebx
c00125f4:	e8 27 8a ff ff       	call   c000b020 <File::seek(unsigned long long)>
c00125f9:	83 c4 0c             	add    esp,0xc
c00125fc:	6a 20                	push   0x20
c00125fe:	6a 00                	push   0x0
c0012600:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012604:	52                   	push   edx
c0012605:	e8 c6 de fe ff       	call   c00004d0 <memset>
c001260a:	58                   	pop    eax
c001260b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001260d:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0012611:	51                   	push   ecx
c0012612:	8d 54 24 40          	lea    edx,[esp+0x40]
c0012616:	52                   	push   edx
c0012617:	6a 00                	push   0x0
c0012619:	6a 1f                	push   0x1f
c001261b:	53                   	push   ebx
c001261c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001261f:	83 c4 18             	add    esp,0x18
c0012622:	68 4b e9 01 c0       	push   0xc001e94b
c0012627:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001262b:	52                   	push   edx
c001262c:	e8 af e0 fe ff       	call   c00006e0 <strcmp>
c0012631:	83 c4 10             	add    esp,0x10
c0012634:	85 c0                	test   eax,eax
c0012636:	75 0f                	jne    c0012647 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0012638:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001263b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001263f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012643:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012647:	50                   	push   eax
c0012648:	50                   	push   eax
c0012649:	68 53 e9 01 c0       	push   0xc001e953
c001264e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012652:	50                   	push   eax
c0012653:	e8 88 e0 fe ff       	call   c00006e0 <strcmp>
c0012658:	83 c4 10             	add    esp,0x10
c001265b:	85 c0                	test   eax,eax
c001265d:	75 0f                	jne    c001266e <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001265f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012662:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012666:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001266a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001266e:	45                   	inc    ebp
c001266f:	e9 4c ff ff ff       	jmp    c00125c0 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0012674:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0012679:	75 10                	jne    c001268b <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001267b:	83 ec 0c             	sub    esp,0xc
c001267e:	68 5b e9 01 c0       	push   0xc001e95b
c0012683:	e8 07 df ff ff       	call   c001058f <KePanic(char const*)>
c0012688:	83 c4 10             	add    esp,0x10
c001268b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012690:	75 10                	jne    c00126a2 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0012692:	83 ec 0c             	sub    esp,0xc
c0012695:	68 5b e9 01 c0       	push   0xc001e95b
c001269a:	e8 f0 de ff ff       	call   c001058f <KePanic(char const*)>
c001269f:	83 c4 10             	add    esp,0x10
c00126a2:	31 d2                	xor    edx,edx
c00126a4:	50                   	push   eax
c00126a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126a9:	52                   	push   edx
c00126aa:	50                   	push   eax
c00126ab:	53                   	push   ebx
c00126ac:	e8 6f 89 ff ff       	call   c000b020 <File::seek(unsigned long long)>
c00126b1:	5a                   	pop    edx
c00126b2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00126b6:	e8 d6 55 ff ff       	call   c0007c91 <malloc>
c00126bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00126bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00126c3:	31 c9                	xor    ecx,ecx
c00126c5:	5e                   	pop    esi
c00126c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126c8:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00126cc:	55                   	push   ebp
c00126cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126d1:	51                   	push   ecx
c00126d2:	52                   	push   edx
c00126d3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00126d7:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00126db:	53                   	push   ebx
c00126dc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00126df:	83 c4 14             	add    esp,0x14
c00126e2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00126e6:	e8 a6 55 ff ff       	call   c0007c91 <malloc>
c00126eb:	89 c6                	mov    esi,eax
c00126ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126ef:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00126f2:	56                   	push   esi
c00126f3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00126f7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00126fb:	51                   	push   ecx
c00126fc:	52                   	push   edx
c00126fd:	53                   	push   ebx
c00126fe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012701:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012705:	8b 15 40 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e40
c001270b:	83 c4 1c             	add    esp,0x1c
c001270e:	c1 e8 04             	shr    eax,0x4
c0012711:	89 04 95 c0 3c 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc340],eax
c0012718:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001271c:	31 d2                	xor    edx,edx
c001271e:	52                   	push   edx
c001271f:	50                   	push   eax
c0012720:	53                   	push   ebx
c0012721:	e8 fa 88 ff ff       	call   c000b020 <File::seek(unsigned long long)>
c0012726:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012728:	31 d2                	xor    edx,edx
c001272a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001272d:	56                   	push   esi
c001272e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012732:	52                   	push   edx
c0012733:	50                   	push   eax
c0012734:	53                   	push   ebx
c0012735:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012738:	83 c4 14             	add    esp,0x14
c001273b:	53                   	push   ebx
c001273c:	e8 7f 88 ff ff       	call   c000afc0 <File::close()>
c0012741:	5d                   	pop    ebp
c0012742:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012746:	e8 56 55 ff ff       	call   c0007ca1 <free>
c001274b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001274e:	e8 4e 55 ff ff       	call   c0007ca1 <free>
c0012753:	a1 40 3e 02 c0       	mov    eax,ds:0xc0023e40
c0012758:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001275c:	8d 50 01             	lea    edx,[eax+0x1]
c001275f:	89 0c 85 c0 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc240],ecx
c0012766:	89 34 85 40 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc2c0],esi
c001276d:	89 15 40 3e 02 c0    	mov    DWORD PTR ds:0xc0023e40,edx
c0012773:	83 c4 10             	add    esp,0x10
c0012776:	b0 01                	mov    al,0x1
c0012778:	83 c4 5c             	add    esp,0x5c
c001277b:	5b                   	pop    ebx
c001277c:	5e                   	pop    esi
c001277d:	5f                   	pop    edi
c001277e:	5d                   	pop    ebp
c001277f:	c3                   	ret    

c0012780 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0012780:	55                   	push   ebp
c0012781:	57                   	push   edi
c0012782:	56                   	push   esi
c0012783:	53                   	push   ebx
c0012784:	81 ec 68 03 00 00    	sub    esp,0x368
c001278a:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0012791:	8b 1d 90 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023e90
c0012797:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001279b:	68 14 01 00 00       	push   0x114
c00127a0:	e8 ec 54 ff ff       	call   c0007c91 <malloc>
c00127a5:	83 c4 0c             	add    esp,0xc
c00127a8:	89 c5                	mov    ebp,eax
c00127aa:	53                   	push   ebx
c00127ab:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00127b2:	50                   	push   eax
c00127b3:	e8 ea 86 ff ff       	call   c000aea2 <File::File(char const*, Process*)>
c00127b8:	5e                   	pop    esi
c00127b9:	5f                   	pop    edi
c00127ba:	6a 01                	push   0x1
c00127bc:	55                   	push   ebp
c00127bd:	e8 a0 87 ff ff       	call   c000af62 <File::open(FileOpenMode)>
c00127c2:	83 c4 10             	add    esp,0x10
c00127c5:	85 c0                	test   eax,eax
c00127c7:	0f 85 a7 06 00 00    	jne    c0012e74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00127cd:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00127d5:	83 ec 0c             	sub    esp,0xc
c00127d8:	6a 34                	push   0x34
c00127da:	e8 b2 54 ff ff       	call   c0007c91 <malloc>
c00127df:	5b                   	pop    ebx
c00127e0:	89 c7                	mov    edi,eax
c00127e2:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00127e6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127e9:	53                   	push   ebx
c00127ea:	57                   	push   edi
c00127eb:	6a 00                	push   0x0
c00127ed:	6a 34                	push   0x34
c00127ef:	55                   	push   ebp
c00127f0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00127f3:	83 c4 20             	add    esp,0x20
c00127f6:	85 c0                	test   eax,eax
c00127f8:	0f 85 76 06 00 00    	jne    c0012e74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00127fe:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012804:	0f 85 6a 06 00 00    	jne    c0012e74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001280a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001280d:	85 c0                	test   eax,eax
c001280f:	0f 84 5f 06 00 00    	je     c0012e74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012815:	31 d2                	xor    edx,edx
c0012817:	51                   	push   ecx
c0012818:	52                   	push   edx
c0012819:	50                   	push   eax
c001281a:	55                   	push   ebp
c001281b:	e8 00 88 ff ff       	call   c000b020 <File::seek(unsigned long long)>
c0012820:	83 c4 10             	add    esp,0x10
c0012823:	85 c0                	test   eax,eax
c0012825:	0f 85 49 06 00 00    	jne    c0012e74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001282b:	83 ec 0c             	sub    esp,0xc
c001282e:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012831:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012835:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012839:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001283d:	0f af c2             	imul   eax,edx
c0012840:	50                   	push   eax
c0012841:	e8 4b 54 ff ff       	call   c0007c91 <malloc>
c0012846:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012849:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001284d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012850:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012854:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012858:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001285c:	0f af c2             	imul   eax,edx
c001285f:	99                   	cdq    
c0012860:	52                   	push   edx
c0012861:	50                   	push   eax
c0012862:	55                   	push   ebp
c0012863:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012866:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0012869:	83 c4 20             	add    esp,0x20
c001286c:	85 c0                	test   eax,eax
c001286e:	0f 84 00 06 00 00    	je     c0012e74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012874:	52                   	push   edx
c0012875:	31 d2                	xor    edx,edx
c0012877:	52                   	push   edx
c0012878:	50                   	push   eax
c0012879:	55                   	push   ebp
c001287a:	e8 a1 87 ff ff       	call   c000b020 <File::seek(unsigned long long)>
c001287f:	83 c4 10             	add    esp,0x10
c0012882:	85 c0                	test   eax,eax
c0012884:	0f 85 ea 05 00 00    	jne    c0012e74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001288a:	83 ec 0c             	sub    esp,0xc
c001288d:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012891:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012895:	31 f6                	xor    esi,esi
c0012897:	0f af c2             	imul   eax,edx
c001289a:	50                   	push   eax
c001289b:	e8 f1 53 ff ff       	call   c0007c91 <malloc>
c00128a0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00128a3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00128a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00128aa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00128ae:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00128b2:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00128b6:	0f af c2             	imul   eax,edx
c00128b9:	99                   	cdq    
c00128ba:	52                   	push   edx
c00128bb:	50                   	push   eax
c00128bc:	55                   	push   ebp
c00128bd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00128c0:	83 c4 20             	add    esp,0x20
c00128c3:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00128c7:	0f 86 8a 00 00 00    	jbe    c0012957 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00128cd:	0f b7 de             	movzx  ebx,si
c00128d0:	c1 e3 05             	shl    ebx,0x5
c00128d3:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00128d7:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00128da:	75 75                	jne    c0012951 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00128dc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00128df:	31 d2                	xor    edx,edx
c00128e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00128e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00128ec:	50                   	push   eax
c00128ed:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00128f0:	52                   	push   edx
c00128f1:	50                   	push   eax
c00128f2:	55                   	push   ebp
c00128f3:	e8 28 87 ff ff       	call   c000b020 <File::seek(unsigned long long)>
c00128f8:	83 c4 10             	add    esp,0x10
c00128fb:	85 c0                	test   eax,eax
c00128fd:	0f 85 71 05 00 00    	jne    c0012e74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012903:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001290a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001290d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0012911:	31 d2                	xor    edx,edx
c0012913:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0012917:	83 ec 0c             	sub    esp,0xc
c001291a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001291e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012925:	50                   	push   eax
c0012926:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001292a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001292e:	52                   	push   edx
c001292f:	50                   	push   eax
c0012930:	55                   	push   ebp
c0012931:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012934:	83 c4 1c             	add    esp,0x1c
c0012937:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001293a:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001293d:	50                   	push   eax
c001293e:	6a 00                	push   0x0
c0012940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012944:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0012948:	50                   	push   eax
c0012949:	e8 82 db fe ff       	call   c00004d0 <memset>
c001294e:	83 c4 10             	add    esp,0x10
c0012951:	46                   	inc    esi
c0012952:	e9 6c ff ff ff       	jmp    c00128c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0012957:	53                   	push   ebx
c0012958:	31 db                	xor    ebx,ebx
c001295a:	68 00 01 00 00       	push   0x100
c001295f:	6a 00                	push   0x0
c0012961:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0012965:	50                   	push   eax
c0012966:	e8 65 db fe ff       	call   c00004d0 <memset>
c001296b:	83 c4 0c             	add    esp,0xc
c001296e:	68 00 01 00 00       	push   0x100
c0012973:	6a 00                	push   0x0
c0012975:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001297c:	50                   	push   eax
c001297d:	e8 4e db fe ff       	call   c00004d0 <memset>
c0012982:	83 c4 10             	add    esp,0x10
c0012985:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001298d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012995:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001299d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00129a5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00129ad:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00129b1:	0f 86 30 01 00 00    	jbe    c0012ae7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00129b7:	0f b7 f3             	movzx  esi,bx
c00129ba:	6b f6 28             	imul   esi,esi,0x28
c00129bd:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00129c1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00129c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129c8:	52                   	push   edx
c00129c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00129cd:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00129d1:	8b 06                	mov    eax,DWORD PTR [esi]
c00129d3:	6b d2 28             	imul   edx,edx,0x28
c00129d6:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00129da:	31 d2                	xor    edx,edx
c00129dc:	52                   	push   edx
c00129dd:	50                   	push   eax
c00129de:	55                   	push   ebp
c00129df:	e8 3c 86 ff ff       	call   c000b020 <File::seek(unsigned long long)>
c00129e4:	83 c4 0c             	add    esp,0xc
c00129e7:	6a 20                	push   0x20
c00129e9:	6a 00                	push   0x0
c00129eb:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00129f2:	51                   	push   ecx
c00129f3:	e8 d8 da fe ff       	call   c00004d0 <memset>
c00129f8:	59                   	pop    ecx
c00129f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00129fc:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012a00:	52                   	push   edx
c0012a01:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0012a08:	51                   	push   ecx
c0012a09:	6a 00                	push   0x0
c0012a0b:	6a 1f                	push   0x1f
c0012a0d:	55                   	push   ebp
c0012a0e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012a11:	83 c4 1c             	add    esp,0x1c
c0012a14:	6a 09                	push   0x9
c0012a16:	68 75 e9 01 c0       	push   0xc001e975
c0012a1b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012a22:	51                   	push   ecx
c0012a23:	e8 68 d9 fe ff       	call   c0000390 <memcmp>
c0012a28:	83 c4 10             	add    esp,0x10
c0012a2b:	85 c0                	test   eax,eax
c0012a2d:	75 21                	jne    c0012a50 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0012a2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012a37:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012a3b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012a3f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012a42:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012a49:	89 d0                	mov    eax,edx
c0012a4b:	40                   	inc    eax
c0012a4c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012a50:	50                   	push   eax
c0012a51:	6a 09                	push   0x9
c0012a53:	68 7f e9 01 c0       	push   0xc001e97f
c0012a58:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012a5f:	50                   	push   eax
c0012a60:	e8 2b d9 fe ff       	call   c0000390 <memcmp>
c0012a65:	83 c4 10             	add    esp,0x10
c0012a68:	85 c0                	test   eax,eax
c0012a6a:	75 21                	jne    c0012a8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0012a6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a70:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012a74:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012a78:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012a7c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012a7f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012a86:	89 d0                	mov    eax,edx
c0012a88:	40                   	inc    eax
c0012a89:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012a8d:	50                   	push   eax
c0012a8e:	50                   	push   eax
c0012a8f:	68 4b e9 01 c0       	push   0xc001e94b
c0012a94:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012a9b:	50                   	push   eax
c0012a9c:	e8 3f dc fe ff       	call   c00006e0 <strcmp>
c0012aa1:	83 c4 10             	add    esp,0x10
c0012aa4:	85 c0                	test   eax,eax
c0012aa6:	75 0f                	jne    c0012ab7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0012aa8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012aab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012aaf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012ab3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012ab7:	50                   	push   eax
c0012ab8:	50                   	push   eax
c0012ab9:	68 53 e9 01 c0       	push   0xc001e953
c0012abe:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012ac5:	50                   	push   eax
c0012ac6:	e8 15 dc fe ff       	call   c00006e0 <strcmp>
c0012acb:	83 c4 10             	add    esp,0x10
c0012ace:	85 c0                	test   eax,eax
c0012ad0:	75 0f                	jne    c0012ae1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0012ad2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012ad5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012ad9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012add:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012ae1:	43                   	inc    ebx
c0012ae2:	e9 c6 fe ff ff       	jmp    c00129ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012ae7:	31 d2                	xor    edx,edx
c0012ae9:	50                   	push   eax
c0012aea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012aee:	52                   	push   edx
c0012aef:	50                   	push   eax
c0012af0:	55                   	push   ebp
c0012af1:	e8 2a 85 ff ff       	call   c000b020 <File::seek(unsigned long long)>
c0012af6:	58                   	pop    eax
c0012af7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012afb:	e8 91 51 ff ff       	call   c0007c91 <malloc>
c0012b00:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012b03:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012b07:	31 d2                	xor    edx,edx
c0012b09:	58                   	pop    eax
c0012b0a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012b0e:	53                   	push   ebx
c0012b0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012b13:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012b17:	52                   	push   edx
c0012b18:	50                   	push   eax
c0012b19:	55                   	push   ebp
c0012b1a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012b1d:	83 c4 14             	add    esp,0x14
c0012b20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b24:	e8 68 51 ff ff       	call   c0007c91 <malloc>
c0012b29:	31 d2                	xor    edx,edx
c0012b2b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012b2f:	83 c4 0c             	add    esp,0xc
c0012b32:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012b36:	52                   	push   edx
c0012b37:	50                   	push   eax
c0012b38:	55                   	push   ebp
c0012b39:	e8 e2 84 ff ff       	call   c000b020 <File::seek(unsigned long long)>
c0012b3e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012b41:	31 d2                	xor    edx,edx
c0012b43:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012b46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012b4a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012b4e:	52                   	push   edx
c0012b4f:	50                   	push   eax
c0012b50:	55                   	push   ebp
c0012b51:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012b54:	83 c4 20             	add    esp,0x20
c0012b57:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012b5f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012b63:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0012b67:	0f 84 0b 03 00 00    	je     c0012e78 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0012b6d:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0012b74:	31 d2                	xor    edx,edx
c0012b76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012b7a:	c1 e8 03             	shr    eax,0x3
c0012b7d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012b81:	51                   	push   ecx
c0012b82:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012b86:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0012b8a:	52                   	push   edx
c0012b8b:	50                   	push   eax
c0012b8c:	55                   	push   ebp
c0012b8d:	e8 8e 84 ff ff       	call   c000b020 <File::seek(unsigned long long)>
c0012b92:	5b                   	pop    ebx
c0012b93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b97:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0012b9e:	e8 ee 50 ff ff       	call   c0007c91 <malloc>
c0012ba3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012ba6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012baa:	31 d2                	xor    edx,edx
c0012bac:	5e                   	pop    esi
c0012bad:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012bb1:	50                   	push   eax
c0012bb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bb6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012bba:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012bc1:	52                   	push   edx
c0012bc2:	50                   	push   eax
c0012bc3:	55                   	push   ebp
c0012bc4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012bc7:	83 c4 20             	add    esp,0x20
c0012bca:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012bd2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012bd6:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012bda:	0f 8d 7c 02 00 00    	jge    c0012e5c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012be0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012be4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012be8:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012bed:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012bf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012bf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012bf8:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012bfc:	89 d8                	mov    eax,ebx
c0012bfe:	c1 e8 08             	shr    eax,0x8
c0012c01:	89 c6                	mov    esi,eax
c0012c03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012c07:	c1 e6 04             	shl    esi,0x4
c0012c0a:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012c0e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012c11:	85 d2                	test   edx,edx
c0012c13:	0f 85 bf 00 00 00    	jne    c0012cd8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012c19:	83 ec 0c             	sub    esp,0xc
c0012c1c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012c20:	03 06                	add    eax,DWORD PTR [esi]
c0012c22:	50                   	push   eax
c0012c23:	e8 4b f8 ff ff       	call   c0012473 <Thr::getAddressOfKernelSymbol(char const*)>
c0012c28:	83 c4 10             	add    esp,0x10
c0012c2b:	89 c2                	mov    edx,eax
c0012c2d:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012c32:	85 c0                	test   eax,eax
c0012c34:	0f 85 9e 00 00 00    	jne    c0012cd8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012c3a:	83 ec 0c             	sub    esp,0xc
c0012c3d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012c41:	03 06                	add    eax,DWORD PTR [esi]
c0012c43:	50                   	push   eax
c0012c44:	e8 97 da ff ff       	call   c00106e0 <KeResolveCompatibilitySymbol(char*)>
c0012c49:	83 c4 10             	add    esp,0x10
c0012c4c:	89 c2                	mov    edx,eax
c0012c4e:	85 c0                	test   eax,eax
c0012c50:	0f 85 82 00 00 00    	jne    c0012cd8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012c56:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012c5a:	50                   	push   eax
c0012c5b:	50                   	push   eax
c0012c5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012c60:	03 06                	add    eax,DWORD PTR [esi]
c0012c62:	50                   	push   eax
c0012c63:	68 89 e9 01 c0       	push   0xc001e989
c0012c68:	e8 bf 7c ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c0012c6d:	58                   	pop    eax
c0012c6e:	5a                   	pop    edx
c0012c6f:	68 a3 e9 01 c0       	push   0xc001e9a3
c0012c74:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012c7b:	50                   	push   eax
c0012c7c:	e8 7f d9 fe ff       	call   c0000600 <strcpy>
c0012c81:	59                   	pop    ecx
c0012c82:	58                   	pop    eax
c0012c83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012c87:	03 06                	add    eax,DWORD PTR [esi]
c0012c89:	50                   	push   eax
c0012c8a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012c91:	50                   	push   eax
c0012c92:	e8 29 db fe ff       	call   c00007c0 <strcat>
c0012c97:	58                   	pop    eax
c0012c98:	5a                   	pop    edx
c0012c99:	68 39 ea 01 c0       	push   0xc001ea39
c0012c9e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012ca5:	50                   	push   eax
c0012ca6:	e8 15 db fe ff       	call   c00007c0 <strcat>
c0012cab:	83 c4 10             	add    esp,0x10
c0012cae:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012cb3:	0f 84 5d 01 00 00    	je     c0012e16 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012cb9:	83 ec 0c             	sub    esp,0xc
c0012cbc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012cc3:	50                   	push   eax
c0012cc4:	e8 c6 d8 ff ff       	call   c001058f <KePanic(char const*)>
c0012cc9:	83 c4 10             	add    esp,0x10
c0012ccc:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012cd0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012cd4:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012cd8:	80 fb 01             	cmp    bl,0x1
c0012cdb:	0f 85 88 00 00 00    	jne    c0012d69 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012ce1:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012ce8:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012cec:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012cf0:	01 ce                	add    esi,ecx
c0012cf2:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012cf8:	0f 94 c0             	sete   al
c0012cfb:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012d01:	0f 94 c3             	sete   bl
c0012d04:	09 c3                	or     ebx,eax
c0012d06:	8b 06                	mov    eax,DWORD PTR [esi]
c0012d08:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012d0d:	74 41                	je     c0012d50 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012d0f:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012d12:	84 db                	test   bl,bl
c0012d14:	75 15                	jne    c0012d2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012d16:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012d1a:	66 83 f8 0c          	cmp    ax,0xc
c0012d1e:	76 05                	jbe    c0012d25 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012d20:	b8 0c 00 00 00       	mov    eax,0xc
c0012d25:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012d29:	76 37                	jbe    c0012d62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012d2b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012d2f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012d34:	0f 84 dc 00 00 00    	je     c0012e16 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012d3a:	83 ec 0c             	sub    esp,0xc
c0012d3d:	68 ba e9 01 c0       	push   0xc001e9ba
c0012d42:	e8 48 d8 ff ff       	call   c001058f <KePanic(char const*)>
c0012d47:	83 c4 10             	add    esp,0x10
c0012d4a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012d4e:	eb 12                	jmp    c0012d62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012d50:	01 c1                	add    ecx,eax
c0012d52:	84 db                	test   bl,bl
c0012d54:	75 0c                	jne    c0012d62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012d56:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012d5a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012d5e:	77 02                	ja     c0012d62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012d60:	01 d1                	add    ecx,edx
c0012d62:	89 0e                	mov    DWORD PTR [esi],ecx
c0012d64:	e9 ea 00 00 00       	jmp    c0012e53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012d69:	80 fb 02             	cmp    bl,0x2
c0012d6c:	75 7c                	jne    c0012dea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012d6e:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012d75:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012d79:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012d7d:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012d83:	74 20                	je     c0012da5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012d85:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012d8b:	74 18                	je     c0012da5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012d8d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012d91:	b9 0a 00 00 00       	mov    ecx,0xa
c0012d96:	66 83 f8 0e          	cmp    ax,0xe
c0012d9a:	77 03                	ja     c0012d9f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012d9c:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012d9f:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012da3:	76 1f                	jbe    c0012dc4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012da5:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012da9:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012dae:	74 66                	je     c0012e16 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012db0:	83 ec 0c             	sub    esp,0xc
c0012db3:	68 d6 e9 01 c0       	push   0xc001e9d6
c0012db8:	e8 d2 d7 ff ff       	call   c001058f <KePanic(char const*)>
c0012dbd:	83 c4 10             	add    esp,0x10
c0012dc0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012dc4:	8b 06                	mov    eax,DWORD PTR [esi]
c0012dc6:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012dcb:	74 13                	je     c0012de0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012dcd:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012dd1:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012dd8:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012ddc:	01 c8                	add    eax,ecx
c0012dde:	eb 04                	jmp    c0012de4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012de0:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012de4:	01 c2                	add    edx,eax
c0012de6:	89 16                	mov    DWORD PTR [esi],edx
c0012de8:	eb 69                	jmp    c0012e53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012dea:	0f b6 db             	movzx  ebx,bl
c0012ded:	50                   	push   eax
c0012dee:	50                   	push   eax
c0012def:	53                   	push   ebx
c0012df0:	68 f2 e9 01 c0       	push   0xc001e9f2
c0012df5:	e8 32 7b ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c0012dfa:	83 c4 10             	add    esp,0x10
c0012dfd:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012e02:	74 12                	je     c0012e16 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012e04:	83 ec 0c             	sub    esp,0xc
c0012e07:	68 fd e9 01 c0       	push   0xc001e9fd
c0012e0c:	e8 7e d7 ff ff       	call   c001058f <KePanic(char const*)>
c0012e11:	83 c4 10             	add    esp,0x10
c0012e14:	eb 3d                	jmp    c0012e53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012e16:	83 ec 0c             	sub    esp,0xc
c0012e19:	55                   	push   ebp
c0012e1a:	e8 a1 81 ff ff       	call   c000afc0 <File::close()>
c0012e1f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e22:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012e25:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012e28:	59                   	pop    ecx
c0012e29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e2d:	e8 6f 4e ff ff       	call   c0007ca1 <free>
c0012e32:	5b                   	pop    ebx
c0012e33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012e37:	e8 65 4e ff ff       	call   c0007ca1 <free>
c0012e3c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012e3f:	e8 5d 4e ff ff       	call   c0007ca1 <free>
c0012e44:	5e                   	pop    esi
c0012e45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e49:	e8 53 4e ff ff       	call   c0007ca1 <free>
c0012e4e:	83 c4 10             	add    esp,0x10
c0012e51:	eb 21                	jmp    c0012e74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012e53:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012e57:	e9 76 fd ff ff       	jmp    c0012bd2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012e5c:	83 ec 0c             	sub    esp,0xc
c0012e5f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e63:	e8 39 4e ff ff       	call   c0007ca1 <free>
c0012e68:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012e6c:	83 c4 10             	add    esp,0x10
c0012e6f:	e9 eb fc ff ff       	jmp    c0012b5f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012e74:	31 c0                	xor    eax,eax
c0012e76:	eb 33                	jmp    c0012eab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012e78:	83 ec 0c             	sub    esp,0xc
c0012e7b:	55                   	push   ebp
c0012e7c:	e8 3f 81 ff ff       	call   c000afc0 <File::close()>
c0012e81:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012e84:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012e87:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012e8a:	58                   	pop    eax
c0012e8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012e8f:	e8 0d 4e ff ff       	call   c0007ca1 <free>
c0012e94:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012e97:	e8 05 4e ff ff       	call   c0007ca1 <free>
c0012e9c:	5a                   	pop    edx
c0012e9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ea1:	e8 fb 4d ff ff       	call   c0007ca1 <free>
c0012ea6:	83 c4 10             	add    esp,0x10
c0012ea9:	b0 01                	mov    al,0x1
c0012eab:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012eb1:	5b                   	pop    ebx
c0012eb2:	5e                   	pop    esi
c0012eb3:	5f                   	pop    edi
c0012eb4:	5d                   	pop    ebp
c0012eb5:	c3                   	ret    

c0012eb6 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012eb6:	56                   	push   esi
c0012eb7:	31 d2                	xor    edx,edx
c0012eb9:	53                   	push   ebx
c0012eba:	8b 1d a0 36 02 c0    	mov    ebx,DWORD PTR ds:0xc00236a0
c0012ec0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012ec4:	39 d3                	cmp    ebx,edx
c0012ec6:	7e 1b                	jle    c0012ee3 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012ec8:	8b 04 95 c0 38 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc740]
c0012ecf:	39 c8                	cmp    eax,ecx
c0012ed1:	77 0d                	ja     c0012ee0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012ed3:	8b 34 95 c0 36 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdc940]
c0012eda:	01 c6                	add    esi,eax
c0012edc:	39 ce                	cmp    esi,ecx
c0012ede:	77 05                	ja     c0012ee5 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012ee0:	42                   	inc    edx
c0012ee1:	eb e1                	jmp    c0012ec4 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012ee3:	31 c0                	xor    eax,eax
c0012ee5:	5b                   	pop    ebx
c0012ee6:	5e                   	pop    esi
c0012ee7:	c3                   	ret    

c0012ee8 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012ee8:	53                   	push   ebx
c0012ee9:	31 c0                	xor    eax,eax
c0012eeb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012eef:	8b 1d a0 36 02 c0    	mov    ebx,DWORD PTR ds:0xc00236a0
c0012ef5:	39 c3                	cmp    ebx,eax
c0012ef7:	7e 22                	jle    c0012f1b <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012ef9:	8b 14 85 c0 38 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc740]
c0012f00:	39 ca                	cmp    edx,ecx
c0012f02:	77 14                	ja     c0012f18 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012f04:	03 14 85 c0 36 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdc940]
c0012f0b:	39 ca                	cmp    edx,ecx
c0012f0d:	76 09                	jbe    c0012f18 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012f0f:	8b 04 85 c0 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc540]
c0012f16:	eb 05                	jmp    c0012f1d <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012f18:	40                   	inc    eax
c0012f19:	eb da                	jmp    c0012ef5 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012f1b:	31 c0                	xor    eax,eax
c0012f1d:	5b                   	pop    ebx
c0012f1e:	c3                   	ret    

c0012f1f <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012f1f:	53                   	push   ebx
c0012f20:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012f24:	53                   	push   ebx
c0012f25:	e8 8c ff ff ff       	call   c0012eb6 <Thr::getDriverBaseFromAddress(unsigned long)>
c0012f2a:	5a                   	pop    edx
c0012f2b:	31 d2                	xor    edx,edx
c0012f2d:	85 c0                	test   eax,eax
c0012f2f:	74 04                	je     c0012f35 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012f31:	89 da                	mov    edx,ebx
c0012f33:	29 c2                	sub    edx,eax
c0012f35:	89 d0                	mov    eax,edx
c0012f37:	5b                   	pop    ebx
c0012f38:	c3                   	ret    

c0012f39 <Thr::loadDLL(char const*, bool)>:
c0012f39:	55                   	push   ebp
c0012f3a:	57                   	push   edi
c0012f3b:	56                   	push   esi
c0012f3c:	53                   	push   ebx
c0012f3d:	81 ec 34 01 00 00    	sub    esp,0x134
c0012f43:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012f4a:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012f51:	56                   	push   esi
c0012f52:	68 15 ea 01 c0       	push   0xc001ea15
c0012f57:	e8 d0 79 ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c0012f5c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012f63:	e8 29 4d ff ff       	call   c0007c91 <malloc>
c0012f68:	83 c4 0c             	add    esp,0xc
c0012f6b:	89 c3                	mov    ebx,eax
c0012f6d:	ff 35 90 3e 02 c0    	push   DWORD PTR ds:0xc0023e90
c0012f73:	56                   	push   esi
c0012f74:	50                   	push   eax
c0012f75:	e8 28 7f ff ff       	call   c000aea2 <File::File(char const*, Process*)>
c0012f7a:	83 c4 10             	add    esp,0x10
c0012f7d:	85 db                	test   ebx,ebx
c0012f7f:	75 3c                	jne    c0012fbd <Thr::loadDLL(char const*, bool)+0x84>
c0012f81:	89 f8                	mov    eax,edi
c0012f83:	84 c0                	test   al,al
c0012f85:	0f 84 d2 01 00 00    	je     c001315d <Thr::loadDLL(char const*, bool)+0x224>
c0012f8b:	55                   	push   ebp
c0012f8c:	55                   	push   ebp
c0012f8d:	68 26 ea 01 c0       	push   0xc001ea26
c0012f92:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0012f96:	55                   	push   ebp
c0012f97:	e8 64 d6 fe ff       	call   c0000600 <strcpy>
c0012f9c:	58                   	pop    eax
c0012f9d:	5a                   	pop    edx
c0012f9e:	56                   	push   esi
c0012f9f:	55                   	push   ebp
c0012fa0:	e8 1b d8 fe ff       	call   c00007c0 <strcat>
c0012fa5:	59                   	pop    ecx
c0012fa6:	58                   	pop    eax
c0012fa7:	68 39 ea 01 c0       	push   0xc001ea39
c0012fac:	55                   	push   ebp
c0012fad:	e8 0e d8 fe ff       	call   c00007c0 <strcat>
c0012fb2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012fb5:	e8 d5 d5 ff ff       	call   c001058f <KePanic(char const*)>
c0012fba:	83 c4 10             	add    esp,0x10
c0012fbd:	51                   	push   ecx
c0012fbe:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012fc2:	50                   	push   eax
c0012fc3:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012fc7:	50                   	push   eax
c0012fc8:	53                   	push   ebx
c0012fc9:	e8 40 82 ff ff       	call   c000b20e <File::stat(unsigned long long*, bool*)>
c0012fce:	83 c4 10             	add    esp,0x10
c0012fd1:	85 db                	test   ebx,ebx
c0012fd3:	74 0c                	je     c0012fe1 <Thr::loadDLL(char const*, bool)+0xa8>
c0012fd5:	83 ec 0c             	sub    esp,0xc
c0012fd8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fda:	53                   	push   ebx
c0012fdb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012fde:	83 c4 10             	add    esp,0x10
c0012fe1:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012fe6:	75 0a                	jne    c0012ff2 <Thr::loadDLL(char const*, bool)+0xb9>
c0012fe8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fec:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012ff0:	75 3c                	jne    c001302e <Thr::loadDLL(char const*, bool)+0xf5>
c0012ff2:	89 f8                	mov    eax,edi
c0012ff4:	84 c0                	test   al,al
c0012ff6:	0f 84 49 01 00 00    	je     c0013145 <Thr::loadDLL(char const*, bool)+0x20c>
c0012ffc:	51                   	push   ecx
c0012ffd:	51                   	push   ecx
c0012ffe:	68 26 ea 01 c0       	push   0xc001ea26
c0013003:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0013007:	53                   	push   ebx
c0013008:	e8 f3 d5 fe ff       	call   c0000600 <strcpy>
c001300d:	5d                   	pop    ebp
c001300e:	58                   	pop    eax
c001300f:	56                   	push   esi
c0013010:	53                   	push   ebx
c0013011:	e8 aa d7 fe ff       	call   c00007c0 <strcat>
c0013016:	58                   	pop    eax
c0013017:	5a                   	pop    edx
c0013018:	68 39 ea 01 c0       	push   0xc001ea39
c001301d:	53                   	push   ebx
c001301e:	e8 9d d7 fe ff       	call   c00007c0 <strcat>
c0013023:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013026:	e8 64 d5 ff ff       	call   c001058f <KePanic(char const*)>
c001302b:	83 c4 10             	add    esp,0x10
c001302e:	52                   	push   edx
c001302f:	6a 03                	push   0x3
c0013031:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013035:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013039:	05 ff 0f 00 00       	add    eax,0xfff
c001303e:	83 d2 00             	adc    edx,0x0
c0013041:	0f ac d0 0c          	shrd   eax,edx,0xc
c0013045:	50                   	push   eax
c0013046:	ff 35 b0 0a 02 c0    	push   DWORD PTR ds:0xc0020ab0
c001304c:	e8 21 6e ff ff       	call   c0009e72 <VAS::allocatePages(int, int)>
c0013051:	59                   	pop    ecx
c0013052:	89 c3                	mov    ebx,eax
c0013054:	5d                   	pop    ebp
c0013055:	50                   	push   eax
c0013056:	68 36 d8 01 c0       	push   0xc001d836
c001305b:	e8 cc 78 ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c0013060:	89 34 24             	mov    DWORD PTR [esp],esi
c0013063:	e8 d8 d4 fe ff       	call   c0000540 <strlen>
c0013068:	8b 2d a0 36 02 c0    	mov    ebp,DWORD PTR ds:0xc00236a0
c001306e:	40                   	inc    eax
c001306f:	89 04 24             	mov    DWORD PTR [esp],eax
c0013072:	e8 1a 4c ff ff       	call   c0007c91 <malloc>
c0013077:	89 04 ad c0 3a 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdc540],eax
c001307e:	58                   	pop    eax
c001307f:	a1 a0 36 02 c0       	mov    eax,ds:0xc00236a0
c0013084:	5a                   	pop    edx
c0013085:	56                   	push   esi
c0013086:	ff 34 85 c0 3a 02 c0 	push   DWORD PTR [eax*4-0x3ffdc540]
c001308d:	e8 6e d5 fe ff       	call   c0000600 <strcpy>
c0013092:	a1 a0 36 02 c0       	mov    eax,ds:0xc00236a0
c0013097:	8d 50 01             	lea    edx,[eax+0x1]
c001309a:	89 1c 85 c0 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc740],ebx
c00130a1:	89 15 a0 36 02 c0    	mov    DWORD PTR ds:0xc00236a0,edx
c00130a7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00130ab:	83 c4 0c             	add    esp,0xc
c00130ae:	89 14 85 c0 36 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc940],edx
c00130b5:	6a 01                	push   0x1
c00130b7:	53                   	push   ebx
c00130b8:	56                   	push   esi
c00130b9:	e8 c2 f6 ff ff       	call   c0012780 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00130be:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00130c2:	83 c4 10             	add    esp,0x10
c00130c5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00130ca:	0f 85 89 00 00 00    	jne    c0013159 <Thr::loadDLL(char const*, bool)+0x220>
c00130d0:	89 f8                	mov    eax,edi
c00130d2:	84 c0                	test   al,al
c00130d4:	74 73                	je     c0013149 <Thr::loadDLL(char const*, bool)+0x210>
c00130d6:	83 ec 0c             	sub    esp,0xc
c00130d9:	68 3b ea 01 c0       	push   0xc001ea3b
c00130de:	e8 ac d4 ff ff       	call   c001058f <KePanic(char const*)>
c00130e3:	83 c4 10             	add    esp,0x10
c00130e6:	eb 61                	jmp    c0013149 <Thr::loadDLL(char const*, bool)+0x210>
c00130e8:	50                   	push   eax
c00130e9:	50                   	push   eax
c00130ea:	89 e8                	mov    eax,ebp
c00130ec:	c1 e0 0c             	shl    eax,0xc
c00130ef:	01 d8                	add    eax,ebx
c00130f1:	50                   	push   eax
c00130f2:	ff 35 b0 0a 02 c0    	push   DWORD PTR ds:0xc0020ab0
c00130f8:	e8 ed 68 ff ff       	call   c00099ea <VAS::getPageTableEntry(unsigned long)>
c00130fd:	83 c4 10             	add    esp,0x10
c0013100:	8b 00                	mov    eax,DWORD PTR [eax]
c0013102:	a8 60                	test   al,0x60
c0013104:	75 11                	jne    c0013117 <Thr::loadDLL(char const*, bool)+0x1de>
c0013106:	83 ec 0c             	sub    esp,0xc
c0013109:	25 00 f0 ff ff       	and    eax,0xfffff000
c001310e:	50                   	push   eax
c001310f:	e8 f7 4d ff ff       	call   c0007f0b <Phys::freePage(unsigned long)>
c0013114:	83 c4 10             	add    esp,0x10
c0013117:	45                   	inc    ebp
c0013118:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001311c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013120:	05 ff 0f 00 00       	add    eax,0xfff
c0013125:	bf 00 00 00 00       	mov    edi,0x0
c001312a:	83 d2 00             	adc    edx,0x0
c001312d:	0f ac d0 0c          	shrd   eax,edx,0xc
c0013131:	c1 ea 0c             	shr    edx,0xc
c0013134:	39 c5                	cmp    ebp,eax
c0013136:	89 d1                	mov    ecx,edx
c0013138:	89 f8                	mov    eax,edi
c001313a:	19 c8                	sbb    eax,ecx
c001313c:	72 aa                	jb     c00130e8 <Thr::loadDLL(char const*, bool)+0x1af>
c001313e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013143:	75 18                	jne    c001315d <Thr::loadDLL(char const*, bool)+0x224>
c0013145:	31 db                	xor    ebx,ebx
c0013147:	eb 14                	jmp    c001315d <Thr::loadDLL(char const*, bool)+0x224>
c0013149:	83 ec 0c             	sub    esp,0xc
c001314c:	68 5a ea 01 c0       	push   0xc001ea5a
c0013151:	e8 39 d4 ff ff       	call   c001058f <KePanic(char const*)>
c0013156:	83 c4 10             	add    esp,0x10
c0013159:	31 ed                	xor    ebp,ebp
c001315b:	eb bb                	jmp    c0013118 <Thr::loadDLL(char const*, bool)+0x1df>
c001315d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013163:	89 d8                	mov    eax,ebx
c0013165:	5b                   	pop    ebx
c0013166:	5e                   	pop    esi
c0013167:	5f                   	pop    edi
c0013168:	5d                   	pop    ebp
c0013169:	c3                   	ret    

c001316a <Thr::executeDLL(unsigned long, void*)>:
c001316a:	56                   	push   esi
c001316b:	53                   	push   ebx
c001316c:	52                   	push   edx
c001316d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013171:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013175:	85 db                	test   ebx,ebx
c0013177:	75 10                	jne    c0013189 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0013179:	83 ec 0c             	sub    esp,0xc
c001317c:	68 76 ea 01 c0       	push   0xc001ea76
c0013181:	e8 09 d4 ff ff       	call   c001058f <KePanic(char const*)>
c0013186:	83 c4 10             	add    esp,0x10
c0013189:	50                   	push   eax
c001318a:	50                   	push   eax
c001318b:	53                   	push   ebx
c001318c:	68 a0 ea 01 c0       	push   0xc001eaa0
c0013191:	e8 96 77 ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c0013196:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001319a:	89 d8                	mov    eax,ebx
c001319c:	83 c4 14             	add    esp,0x14
c001319f:	5b                   	pop    ebx
c00131a0:	5e                   	pop    esi
c00131a1:	ff e0                	jmp    eax
c00131a3:	90                   	nop

c00131a4 <userModeEntryPoint(void*)>:
c00131a4:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c00131a9:	48                   	dec    eax
c00131aa:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c00131af:	75 03                	jne    c00131b4 <userModeEntryPoint(void*)+0x10>
c00131b1:	fb                   	sti    
c00131b2:	66 90                	xchg   ax,ax
c00131b4:	fb                   	sti    
c00131b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131ba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00131bd:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00131c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00131c7:	e9 73 d0 fe ff       	jmp    c000023f <goToUsermode>

c00131cc <changeTSS>:
c00131cc:	83 ec 14             	sub    esp,0x14
c00131cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131d4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00131d7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00131dc:	c1 e2 15             	shl    edx,0x15
c00131df:	29 d0                	sub    eax,edx
c00131e1:	50                   	push   eax
c00131e2:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c00131e7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00131ed:	05 7c 11 00 00       	add    eax,0x117c
c00131f2:	50                   	push   eax
c00131f3:	e8 34 5e ff ff       	call   c000902c <TSS::setESP(unsigned long)>
c00131f8:	83 c4 1c             	add    esp,0x1c
c00131fb:	c3                   	ret    

c00131fc <switchToThread(ThreadControlBlock*)>:
c00131fc:	57                   	push   edi
c00131fd:	a1 64 3e 02 c0       	mov    eax,ds:0xc0023e64
c0013202:	56                   	push   esi
c0013203:	85 c0                	test   eax,eax
c0013205:	53                   	push   ebx
c0013206:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001320a:	0f 85 90 00 00 00    	jne    c00132a0 <switchToThread(ThreadControlBlock*)+0xa4>
c0013210:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0013213:	80 fa ff             	cmp    dl,0xff
c0013216:	0f 84 80 00 00 00    	je     c001329c <switchToThread(ThreadControlBlock*)+0xa0>
c001321c:	81 e2 ff 00 00 00    	and    edx,0xff
c0013222:	b8 00 04 00 00       	mov    eax,0x400
c0013227:	29 d0                	sub    eax,edx
c0013229:	d1 f8                	sar    eax,1
c001322b:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c001322e:	66 90                	xchg   ax,ax
c0013230:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0013233:	e8 e5 25 00 00       	call   c001581d <HalQueryPerformanceCounter()>
c0013238:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c001323d:	89 15 ac 3e 02 c0    	mov    DWORD PTR ds:0xc0023eac,edx
c0013243:	89 c6                	mov    esi,eax
c0013245:	89 d7                	mov    edi,edx
c0013247:	2b 35 98 3e 02 c0    	sub    esi,DWORD PTR ds:0xc0023e98
c001324d:	a3 98 3e 02 c0       	mov    ds:0xc0023e98,eax
c0013252:	1b 3d 9c 3e 02 c0    	sbb    edi,DWORD PTR ds:0xc0023e9c
c0013258:	89 35 a0 3e 02 c0    	mov    DWORD PTR ds:0xc0023ea0,esi
c001325e:	89 3d a4 3e 02 c0    	mov    DWORD PTR ds:0xc0023ea4,edi
c0013264:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001326a:	89 15 9c 3e 02 c0    	mov    DWORD PTR ds:0xc0023e9c,edx
c0013270:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0013273:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0013276:	01 c6                	add    esi,eax
c0013278:	11 d7                	adc    edi,edx
c001327a:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001327d:	83 ec 0c             	sub    esp,0xc
c0013280:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0013283:	53                   	push   ebx
c0013284:	e8 ee cf fe ff       	call   c0000277 <switchToThreadASM>
c0013289:	0f 20 c0             	mov    eax,cr0
c001328c:	83 c8 08             	or     eax,0x8
c001328f:	0f 22 c0             	mov    cr0,eax
c0013292:	83 c4 10             	add    esp,0x10
c0013295:	5b                   	pop    ebx
c0013296:	5e                   	pop    esi
c0013297:	5f                   	pop    edi
c0013298:	c3                   	ret    
c0013299:	8d 76 00             	lea    esi,[esi+0x0]
c001329c:	31 c0                	xor    eax,eax
c001329e:	eb 90                	jmp    c0013230 <switchToThread(ThreadControlBlock*)+0x34>
c00132a0:	5b                   	pop    ebx
c00132a1:	c7 05 60 3e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023e60,0x1
c00132ab:	5e                   	pop    esi
c00132ac:	5f                   	pop    edi
c00132ad:	c3                   	ret    
c00132ae:	66 90                	xchg   ax,ax

c00132b0 <Process::addArgs(char**)>:
c00132b0:	57                   	push   edi
c00132b1:	56                   	push   esi
c00132b2:	53                   	push   ebx
c00132b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00132b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00132bb:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00132c5:	85 ff                	test   edi,edi
c00132c7:	74 43                	je     c001330c <Process::addArgs(char**)+0x5c>
c00132c9:	8b 07                	mov    eax,DWORD PTR [edi]
c00132cb:	85 c0                	test   eax,eax
c00132cd:	74 3d                	je     c001330c <Process::addArgs(char**)+0x5c>
c00132cf:	31 db                	xor    ebx,ebx
c00132d1:	8d 76 00             	lea    esi,[esi+0x0]
c00132d4:	83 ec 0c             	sub    esp,0xc
c00132d7:	50                   	push   eax
c00132d8:	e8 63 d2 fe ff       	call   c0000540 <strlen>
c00132dd:	40                   	inc    eax
c00132de:	89 04 24             	mov    DWORD PTR [esp],eax
c00132e1:	e8 ab 49 ff ff       	call   c0007c91 <malloc>
c00132e6:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00132ed:	5a                   	pop    edx
c00132ee:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00132f1:	59                   	pop    ecx
c00132f2:	43                   	inc    ebx
c00132f3:	52                   	push   edx
c00132f4:	50                   	push   eax
c00132f5:	e8 06 d3 fe ff       	call   c0000600 <strcpy>
c00132fa:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0013300:	83 c4 10             	add    esp,0x10
c0013303:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0013306:	85 c0                	test   eax,eax
c0013308:	75 ca                	jne    c00132d4 <Process::addArgs(char**)+0x24>
c001330a:	66 90                	xchg   ax,ax
c001330c:	5b                   	pop    ebx
c001330d:	5e                   	pop    esi
c001330e:	5f                   	pop    edi
c001330f:	c3                   	ret    

c0013310 <Process::Process(char const*, Process*, char**)>:
c0013310:	56                   	push   esi
c0013311:	53                   	push   ebx
c0013312:	83 ec 14             	sub    esp,0x14
c0013315:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013319:	05 0c 02 00 00       	add    eax,0x20c
c001331e:	bb 07 00 00 00       	mov    ebx,0x7
c0013323:	89 c6                	mov    esi,eax
c0013325:	8d 76 00             	lea    esi,[esi+0x0]
c0013328:	85 db                	test   ebx,ebx
c001332a:	78 14                	js     c0013340 <Process::Process(char const*, Process*, char**)+0x30>
c001332c:	83 ec 0c             	sub    esp,0xc
c001332f:	56                   	push   esi
c0013330:	e8 e7 97 00 00       	call   c001cb1c <ThreadControlBlock::ThreadControlBlock()>
c0013335:	83 c4 10             	add    esp,0x10
c0013338:	83 c6 5f             	add    esi,0x5f
c001333b:	4b                   	dec    ebx
c001333c:	eb ea                	jmp    c0013328 <Process::Process(char const*, Process*, char**)+0x18>
c001333e:	66 90                	xchg   ax,ax
c0013340:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013344:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001334b:	83 ec 0c             	sub    esp,0xc
c001334e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013352:	e8 2d d0 ff ff       	call   c0010384 <Krnl::newProcessEnv(Process*)>
c0013357:	83 c4 10             	add    esp,0x10
c001335a:	89 c2                	mov    edx,eax
c001335c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013360:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0013366:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001336a:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0013373:	a1 90 f9 01 c0       	mov    eax,ds:0xc001f990
c0013378:	8d 50 01             	lea    edx,[eax+0x1]
c001337b:	89 15 90 f9 01 c0    	mov    DWORD PTR ds:0xc001f990,edx
c0013381:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013385:	89 02                	mov    DWORD PTR [edx],eax
c0013387:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001338f:	83 ec 0c             	sub    esp,0xc
c0013392:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013396:	e8 f6 48 ff ff       	call   c0007c91 <malloc>
c001339b:	83 c4 10             	add    esp,0x10
c001339e:	89 c3                	mov    ebx,eax
c00133a0:	83 ec 08             	sub    esp,0x8
c00133a3:	6a 00                	push   0x0
c00133a5:	53                   	push   ebx
c00133a6:	e8 71 6e ff ff       	call   c000a21c <VAS::VAS(bool)>
c00133ab:	83 c4 10             	add    esp,0x10
c00133ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133b2:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00133b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133bc:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00133c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00133ce:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00133d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133d8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00133de:	85 c0                	test   eax,eax
c00133e0:	74 42                	je     c0013424 <Process::Process(char const*, Process*, char**)+0x114>
c00133e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133e6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00133ec:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00133f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133f6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00133fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013400:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013406:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001340c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013410:	05 0c 01 00 00       	add    eax,0x10c
c0013415:	83 ec 08             	sub    esp,0x8
c0013418:	52                   	push   edx
c0013419:	50                   	push   eax
c001341a:	e8 e1 d1 fe ff       	call   c0000600 <strcpy>
c001341f:	83 c4 10             	add    esp,0x10
c0013422:	eb 64                	jmp    c0013488 <Process::Process(char const*, Process*, char**)+0x178>
c0013424:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c001342c:	83 ec 0c             	sub    esp,0xc
c001342f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013433:	e8 59 48 ff ff       	call   c0007c91 <malloc>
c0013438:	83 c4 10             	add    esp,0x10
c001343b:	89 c3                	mov    ebx,eax
c001343d:	83 ec 08             	sub    esp,0x8
c0013440:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013444:	53                   	push   ebx
c0013445:	e8 88 59 ff ff       	call   c0008dd2 <VgaText::VgaText(char const*)>
c001344a:	83 c4 10             	add    esp,0x10
c001344d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013451:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0013457:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001345b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013461:	83 ec 0c             	sub    esp,0xc
c0013464:	50                   	push   eax
c0013465:	e8 08 52 ff ff       	call   c0008672 <addToTerminalCycle(VgaText*)>
c001346a:	83 c4 10             	add    esp,0x10
c001346d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013471:	05 0c 01 00 00       	add    eax,0x10c
c0013476:	83 ec 08             	sub    esp,0x8
c0013479:	68 bf ea 01 c0       	push   0xc001eabf
c001347e:	50                   	push   eax
c001347f:	e8 7c d1 fe ff       	call   c0000600 <strcpy>
c0013484:	83 c4 10             	add    esp,0x10
c0013487:	90                   	nop
c0013488:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001348c:	83 c0 0c             	add    eax,0xc
c001348f:	83 ec 08             	sub    esp,0x8
c0013492:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013496:	50                   	push   eax
c0013497:	e8 64 d1 fe ff       	call   c0000600 <strcpy>
c001349c:	83 c4 10             	add    esp,0x10
c001349f:	83 ec 08             	sub    esp,0x8
c00134a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00134a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00134aa:	e8 01 fe ff ff       	call   c00132b0 <Process::addArgs(char**)>
c00134af:	83 c4 10             	add    esp,0x10
c00134b2:	83 ec 08             	sub    esp,0x8
c00134b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00134b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00134bd:	e8 88 ed ff ff       	call   c001224a <Thr::loadProgramIntoMemory(Process*, char const*)>
c00134c2:	83 c4 10             	add    esp,0x10
c00134c5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00134c9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00134cd:	83 f0 01             	xor    eax,0x1
c00134d0:	88 c2                	mov    dl,al
c00134d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00134d6:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00134dc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00134e0:	25 ff 00 00 00       	and    eax,0xff
c00134e5:	83 ec 08             	sub    esp,0x8
c00134e8:	50                   	push   eax
c00134e9:	68 18 eb 01 c0       	push   0xc001eb18
c00134ee:	e8 39 74 ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c00134f3:	83 c4 10             	add    esp,0x10
c00134f6:	90                   	nop
c00134f7:	83 c4 14             	add    esp,0x14
c00134fa:	5b                   	pop    ebx
c00134fb:	5e                   	pop    esi
c00134fc:	c3                   	ret    
c00134fd:	90                   	nop
c00134fe:	66 90                	xchg   ax,ax

c0013500 <Process::Process(bool, char const*, Process*, char**)>:
c0013500:	56                   	push   esi
c0013501:	53                   	push   ebx
c0013502:	83 ec 24             	sub    esp,0x24
c0013505:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013509:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001350d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013511:	05 0c 02 00 00       	add    eax,0x20c
c0013516:	bb 07 00 00 00       	mov    ebx,0x7
c001351b:	89 c6                	mov    esi,eax
c001351d:	8d 76 00             	lea    esi,[esi+0x0]
c0013520:	85 db                	test   ebx,ebx
c0013522:	78 14                	js     c0013538 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0013524:	83 ec 0c             	sub    esp,0xc
c0013527:	56                   	push   esi
c0013528:	e8 ef 95 00 00       	call   c001cb1c <ThreadControlBlock::ThreadControlBlock()>
c001352d:	83 c4 10             	add    esp,0x10
c0013530:	83 c6 5f             	add    esi,0x5f
c0013533:	4b                   	dec    ebx
c0013534:	eb ea                	jmp    c0013520 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0013536:	66 90                	xchg   ax,ax
c0013538:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001353c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0013543:	83 ec 0c             	sub    esp,0xc
c0013546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001354a:	e8 35 ce ff ff       	call   c0010384 <Krnl::newProcessEnv(Process*)>
c001354f:	83 c4 10             	add    esp,0x10
c0013552:	89 c2                	mov    edx,eax
c0013554:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013558:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001355e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013562:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001356b:	a1 90 f9 01 c0       	mov    eax,ds:0xc001f990
c0013570:	8d 50 01             	lea    edx,[eax+0x1]
c0013573:	89 15 90 f9 01 c0    	mov    DWORD PTR ds:0xc001f990,edx
c0013579:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001357d:	89 02                	mov    DWORD PTR [edx],eax
c001357f:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0013587:	83 ec 0c             	sub    esp,0xc
c001358a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001358e:	e8 fe 46 ff ff       	call   c0007c91 <malloc>
c0013593:	83 c4 10             	add    esp,0x10
c0013596:	89 c3                	mov    ebx,eax
c0013598:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001359c:	25 ff 00 00 00       	and    eax,0xff
c00135a1:	83 ec 08             	sub    esp,0x8
c00135a4:	50                   	push   eax
c00135a5:	53                   	push   ebx
c00135a6:	e8 71 6c ff ff       	call   c000a21c <VAS::VAS(bool)>
c00135ab:	83 c4 10             	add    esp,0x10
c00135ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135b2:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00135b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135bc:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00135c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135ca:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00135ce:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00135d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135d8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00135de:	85 c0                	test   eax,eax
c00135e0:	74 42                	je     c0013624 <Process::Process(bool, char const*, Process*, char**)+0x124>
c00135e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135e6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00135ec:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00135f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135f6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00135fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013600:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013606:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001360c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013610:	05 0c 01 00 00       	add    eax,0x10c
c0013615:	83 ec 08             	sub    esp,0x8
c0013618:	52                   	push   edx
c0013619:	50                   	push   eax
c001361a:	e8 e1 cf fe ff       	call   c0000600 <strcpy>
c001361f:	83 c4 10             	add    esp,0x10
c0013622:	eb 64                	jmp    c0013688 <Process::Process(bool, char const*, Process*, char**)+0x188>
c0013624:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c001362c:	83 ec 0c             	sub    esp,0xc
c001362f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013633:	e8 59 46 ff ff       	call   c0007c91 <malloc>
c0013638:	83 c4 10             	add    esp,0x10
c001363b:	89 c3                	mov    ebx,eax
c001363d:	83 ec 08             	sub    esp,0x8
c0013640:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013644:	53                   	push   ebx
c0013645:	e8 88 57 ff ff       	call   c0008dd2 <VgaText::VgaText(char const*)>
c001364a:	83 c4 10             	add    esp,0x10
c001364d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013651:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0013657:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001365b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013661:	83 ec 0c             	sub    esp,0xc
c0013664:	50                   	push   eax
c0013665:	e8 08 50 ff ff       	call   c0008672 <addToTerminalCycle(VgaText*)>
c001366a:	83 c4 10             	add    esp,0x10
c001366d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013671:	05 0c 01 00 00       	add    eax,0x10c
c0013676:	83 ec 08             	sub    esp,0x8
c0013679:	68 bf ea 01 c0       	push   0xc001eabf
c001367e:	50                   	push   eax
c001367f:	e8 7c cf fe ff       	call   c0000600 <strcpy>
c0013684:	83 c4 10             	add    esp,0x10
c0013687:	90                   	nop
c0013688:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001368c:	83 c0 0c             	add    eax,0xc
c001368f:	83 ec 08             	sub    esp,0x8
c0013692:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013696:	50                   	push   eax
c0013697:	e8 64 cf fe ff       	call   c0000600 <strcpy>
c001369c:	83 c4 10             	add    esp,0x10
c001369f:	83 ec 08             	sub    esp,0x8
c00136a2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00136a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00136aa:	e8 01 fc ff ff       	call   c00132b0 <Process::addArgs(char**)>
c00136af:	83 c4 10             	add    esp,0x10
c00136b2:	90                   	nop
c00136b3:	83 c4 24             	add    esp,0x24
c00136b6:	5b                   	pop    ebx
c00136b7:	5e                   	pop    esi
c00136b8:	c3                   	ret    
c00136b9:	8d 76 00             	lea    esi,[esi+0x0]

c00136bc <taskStartupFunction>:
c00136bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136c1:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00136c4:	c3                   	ret    
c00136c5:	90                   	nop
c00136c6:	66 90                	xchg   ax,ax

c00136c8 <Semaphore::Semaphore(int)>:
c00136c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00136d0:	89 10                	mov    DWORD PTR [eax],edx
c00136d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136d6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00136dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00136e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136ec:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00136f3:	90                   	nop
c00136f4:	c3                   	ret    
c00136f5:	90                   	nop
c00136f6:	66 90                	xchg   ax,ax

c00136f8 <Mutex::Mutex()>:
c00136f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136fc:	6a 01                	push   0x1
c00136fe:	50                   	push   eax
c00136ff:	e8 c4 ff ff ff       	call   c00136c8 <Semaphore::Semaphore(int)>
c0013704:	83 c4 08             	add    esp,0x8
c0013707:	90                   	nop
c0013708:	c3                   	ret    
c0013709:	90                   	nop
c001370a:	66 90                	xchg   ax,ax

c001370c <Process::createThread(void (*)(void*), void*, int)>:
c001370c:	57                   	push   edi
c001370d:	31 c9                	xor    ecx,ecx
c001370f:	56                   	push   esi
c0013710:	53                   	push   ebx
c0013711:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013715:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c001371c:	89 f2                	mov    edx,esi
c001371e:	66 90                	xchg   ax,ax
c0013720:	31 c0                	xor    eax,eax
c0013722:	66 89 d0             	mov    ax,dx
c0013725:	83 e2 01             	and    edx,0x1
c0013728:	74 12                	je     c001373c <Process::createThread(void (*)(void*), void*, int)+0x30>
c001372a:	d1 f8                	sar    eax,1
c001372c:	41                   	inc    ecx
c001372d:	89 c2                	mov    edx,eax
c001372f:	83 f9 10             	cmp    ecx,0x10
c0013732:	75 ec                	jne    c0013720 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0013734:	31 db                	xor    ebx,ebx
c0013736:	89 d8                	mov    eax,ebx
c0013738:	5b                   	pop    ebx
c0013739:	5e                   	pop    esi
c001373a:	5f                   	pop    edi
c001373b:	c3                   	ret    
c001373c:	b8 01 00 00 00       	mov    eax,0x1
c0013741:	d3 e0                	shl    eax,cl
c0013743:	09 c6                	or     esi,eax
c0013745:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0013748:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001374f:	01 c0                	add    eax,eax
c0013751:	01 c8                	add    eax,ecx
c0013753:	8d 04 80             	lea    eax,[eax+eax*4]
c0013756:	01 d8                	add    eax,ebx
c0013758:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001375f:	75 0b                	jne    c001376c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0013761:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001376b:	90                   	nop
c001376c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013772:	83 ec 08             	sub    esp,0x8
c0013775:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013778:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001377b:	01 c0                	add    eax,eax
c001377d:	01 c8                	add    eax,ecx
c001377f:	8d 3c 80             	lea    edi,[eax+eax*4]
c0013782:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0013785:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001378b:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0013791:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013795:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001379b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00137a1:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00137a8:	89 ca                	mov    edx,ecx
c00137aa:	f7 da                	neg    edx
c00137ac:	c1 e2 15             	shl    edx,0x15
c00137af:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00137b5:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00137bb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00137bf:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00137c9:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00137cf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00137d3:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00137d9:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00137e3:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00137ed:	53                   	push   ebx
c00137ee:	68 84 3e 02 c0       	push   0xc0023e84
c00137f3:	e8 c4 90 00 00       	call   c001c8bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00137f8:	83 c4 10             	add    esp,0x10
c00137fb:	89 d8                	mov    eax,ebx
c00137fd:	5b                   	pop    ebx
c00137fe:	5e                   	pop    esi
c00137ff:	5f                   	pop    edi
c0013800:	c3                   	ret    
c0013801:	90                   	nop
c0013802:	66 90                	xchg   ax,ax

c0013804 <Process::createUserThread()>:
c0013804:	83 ec 0c             	sub    esp,0xc
c0013807:	68 80 00 00 00       	push   0x80
c001380c:	6a 00                	push   0x0
c001380e:	68 a4 31 01 c0       	push   0xc00131a4
c0013813:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013817:	50                   	push   eax
c0013818:	e8 ef fe ff ff       	call   c001370c <Process::createThread(void (*)(void*), void*, int)>
c001381d:	83 c4 1c             	add    esp,0x1c
c0013820:	c3                   	ret    
c0013821:	8d 76 00             	lea    esi,[esi+0x0]

c0013824 <setupMultitasking(void (*)())>:
c0013824:	56                   	push   esi
c0013825:	53                   	push   ebx
c0013826:	53                   	push   ebx
c0013827:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001382b:	eb 13                	jmp    c0013840 <setupMultitasking(void (*)())+0x1c>
c001382d:	8d 76 00             	lea    esi,[esi+0x0]
c0013830:	83 ec 0c             	sub    esp,0xc
c0013833:	68 84 3e 02 c0       	push   0xc0023e84
c0013838:	e8 c7 8f 00 00       	call   c001c804 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001383d:	83 c4 10             	add    esp,0x10
c0013840:	83 ec 0c             	sub    esp,0xc
c0013843:	68 84 3e 02 c0       	push   0xc0023e84
c0013848:	e8 93 8f 00 00       	call   c001c7e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001384d:	83 c4 10             	add    esp,0x10
c0013850:	84 c0                	test   al,al
c0013852:	74 dc                	je     c0013830 <setupMultitasking(void (*)())+0xc>
c0013854:	83 ec 0c             	sub    esp,0xc
c0013857:	68 1f 07 00 00       	push   0x71f
c001385c:	e8 30 44 ff ff       	call   c0007c91 <malloc>
c0013861:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0013868:	89 c3                	mov    ebx,eax
c001386a:	6a 00                	push   0x0
c001386c:	68 c3 ea 01 c0       	push   0xc001eac3
c0013871:	6a 01                	push   0x1
c0013873:	50                   	push   eax
c0013874:	e8 87 fc ff ff       	call   c0013500 <Process::Process(bool, char const*, Process*, char**)>
c0013879:	83 c4 14             	add    esp,0x14
c001387c:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0013882:	89 1d 90 3e 02 c0    	mov    DWORD PTR ds:0xc0023e90,ebx
c0013888:	50                   	push   eax
c0013889:	e8 41 50 ff ff       	call   c00088cf <setActiveTerminal(VgaText*)>
c001388e:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0013896:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00138a0:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00138a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00138a9:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00138b3:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00138b9:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00138bf:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00138c9:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00138d3:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00138dd:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00138e3:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00138e9:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00138f3:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00138f9:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0013903:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0013909:	5a                   	pop    edx
c001390a:	59                   	pop    ecx
c001390b:	68 bf ea 01 c0       	push   0xc001eabf
c0013910:	50                   	push   eax
c0013911:	e8 ea cc fe ff       	call   c0000600 <strcpy>
c0013916:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c001391d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013921:	83 c4 14             	add    esp,0x14
c0013924:	5b                   	pop    ebx
c0013925:	5e                   	pop    esi
c0013926:	e9 3e c9 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001392b:	90                   	nop

c001392c <schedule()>:
c001392c:	8b 15 64 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e64
c0013932:	85 d2                	test   edx,edx
c0013934:	74 0e                	je     c0013944 <schedule()+0x18>
c0013936:	c7 05 60 3e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023e60,0x1
c0013940:	c3                   	ret    
c0013941:	8d 76 00             	lea    esi,[esi+0x0]
c0013944:	53                   	push   ebx
c0013945:	83 ec 14             	sub    esp,0x14
c0013948:	68 84 3e 02 c0       	push   0xc0023e84
c001394d:	e8 8e 8e 00 00       	call   c001c7e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013952:	83 c4 10             	add    esp,0x10
c0013955:	84 c0                	test   al,al
c0013957:	75 3b                	jne    c0013994 <schedule()+0x68>
c0013959:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001395e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0013961:	4a                   	dec    edx
c0013962:	74 38                	je     c001399c <schedule()+0x70>
c0013964:	83 ec 0c             	sub    esp,0xc
c0013967:	68 84 3e 02 c0       	push   0xc0023e84
c001396c:	e8 8b 8e 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013971:	c7 04 24 84 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e84
c0013978:	89 c3                	mov    ebx,eax
c001397a:	e8 85 8e 00 00       	call   c001c804 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001397f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0013986:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013989:	e8 6e f8 ff ff       	call   c00131fc <switchToThread(ThreadControlBlock*)>
c001398e:	83 c4 10             	add    esp,0x10
c0013991:	8d 76 00             	lea    esi,[esi+0x0]
c0013994:	83 c4 08             	add    esp,0x8
c0013997:	5b                   	pop    ebx
c0013998:	c3                   	ret    
c0013999:	8d 76 00             	lea    esi,[esi+0x0]
c001399c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00139a3:	83 ec 08             	sub    esp,0x8
c00139a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139ab:	50                   	push   eax
c00139ac:	68 84 3e 02 c0       	push   0xc0023e84
c00139b1:	e8 06 8f 00 00       	call   c001c8bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00139b6:	83 c4 10             	add    esp,0x10
c00139b9:	eb a9                	jmp    c0013964 <schedule()+0x38>
c00139bb:	90                   	nop

c00139bc <Semaphore::tryAcquire()>:
c00139bc:	53                   	push   ebx
c00139bd:	83 ec 08             	sub    esp,0x8
c00139c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00139c4:	fa                   	cli    
c00139c5:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c00139ca:	8d 50 01             	lea    edx,[eax+0x1]
c00139cd:	89 15 68 3e 02 c0    	mov    DWORD PTR ds:0xc0023e68,edx
c00139d3:	8b 15 64 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e64
c00139d9:	8d 5a 01             	lea    ebx,[edx+0x1]
c00139dc:	89 1d 64 3e 02 c0    	mov    DWORD PTR ds:0xc0023e64,ebx
c00139e2:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00139e5:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00139e7:	7c 33                	jl     c0013a1c <Semaphore::tryAcquire()+0x60>
c00139e9:	89 15 64 3e 02 c0    	mov    DWORD PTR ds:0xc0023e64,edx
c00139ef:	85 d2                	test   edx,edx
c00139f1:	75 0d                	jne    c0013a00 <Semaphore::tryAcquire()+0x44>
c00139f3:	8b 15 60 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e60
c00139f9:	85 d2                	test   edx,edx
c00139fb:	75 6b                	jne    c0013a68 <Semaphore::tryAcquire()+0xac>
c00139fd:	8d 76 00             	lea    esi,[esi+0x0]
c0013a00:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c0013a05:	85 c0                	test   eax,eax
c0013a07:	74 0b                	je     c0013a14 <Semaphore::tryAcquire()+0x58>
c0013a09:	8d 76 00             	lea    esi,[esi+0x0]
c0013a0c:	31 c0                	xor    eax,eax
c0013a0e:	83 c4 08             	add    esp,0x8
c0013a11:	5b                   	pop    ebx
c0013a12:	c3                   	ret    
c0013a13:	90                   	nop
c0013a14:	fb                   	sti    
c0013a15:	83 c4 08             	add    esp,0x8
c0013a18:	5b                   	pop    ebx
c0013a19:	c3                   	ret    
c0013a1a:	66 90                	xchg   ax,ax
c0013a1c:	43                   	inc    ebx
c0013a1d:	89 15 64 3e 02 c0    	mov    DWORD PTR ds:0xc0023e64,edx
c0013a23:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0013a26:	85 d2                	test   edx,edx
c0013a28:	75 22                	jne    c0013a4c <Semaphore::tryAcquire()+0x90>
c0013a2a:	8b 0d 60 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023e60
c0013a30:	85 c9                	test   ecx,ecx
c0013a32:	74 18                	je     c0013a4c <Semaphore::tryAcquire()+0x90>
c0013a34:	c7 05 60 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e60,0x0
c0013a3e:	e8 e9 fe ff ff       	call   c001392c <schedule()>
c0013a43:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c0013a48:	48                   	dec    eax
c0013a49:	8d 76 00             	lea    esi,[esi+0x0]
c0013a4c:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c0013a51:	85 c0                	test   eax,eax
c0013a53:	75 0b                	jne    c0013a60 <Semaphore::tryAcquire()+0xa4>
c0013a55:	fb                   	sti    
c0013a56:	b0 01                	mov    al,0x1
c0013a58:	83 c4 08             	add    esp,0x8
c0013a5b:	5b                   	pop    ebx
c0013a5c:	c3                   	ret    
c0013a5d:	8d 76 00             	lea    esi,[esi+0x0]
c0013a60:	b0 01                	mov    al,0x1
c0013a62:	83 c4 08             	add    esp,0x8
c0013a65:	5b                   	pop    ebx
c0013a66:	c3                   	ret    
c0013a67:	90                   	nop
c0013a68:	c7 05 60 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e60,0x0
c0013a72:	e8 b5 fe ff ff       	call   c001392c <schedule()>
c0013a77:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c0013a7c:	48                   	dec    eax
c0013a7d:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c0013a82:	85 c0                	test   eax,eax
c0013a84:	75 86                	jne    c0013a0c <Semaphore::tryAcquire()+0x50>
c0013a86:	eb 8c                	jmp    c0013a14 <Semaphore::tryAcquire()+0x58>

c0013a88 <Semaphore::assertLocked(char const*)>:
c0013a88:	83 ec 0c             	sub    esp,0xc
c0013a8b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a8f:	fa                   	cli    
c0013a90:	ff 05 68 3e 02 c0    	inc    DWORD PTR ds:0xc0023e68
c0013a96:	a1 64 3e 02 c0       	mov    eax,ds:0xc0023e64
c0013a9b:	8d 48 01             	lea    ecx,[eax+0x1]
c0013a9e:	89 0d 64 3e 02 c0    	mov    DWORD PTR ds:0xc0023e64,ecx
c0013aa4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013aa6:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013aa9:	7c 29                	jl     c0013ad4 <Semaphore::assertLocked(char const*)+0x4c>
c0013aab:	90                   	nop
c0013aac:	a3 64 3e 02 c0       	mov    ds:0xc0023e64,eax
c0013ab1:	85 c0                	test   eax,eax
c0013ab3:	75 0b                	jne    c0013ac0 <Semaphore::assertLocked(char const*)+0x38>
c0013ab5:	a1 60 3e 02 c0       	mov    eax,ds:0xc0023e60
c0013aba:	85 c0                	test   eax,eax
c0013abc:	75 2e                	jne    c0013aec <Semaphore::assertLocked(char const*)+0x64>
c0013abe:	66 90                	xchg   ax,ax
c0013ac0:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c0013ac5:	48                   	dec    eax
c0013ac6:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c0013acb:	75 03                	jne    c0013ad0 <Semaphore::assertLocked(char const*)+0x48>
c0013acd:	fb                   	sti    
c0013ace:	66 90                	xchg   ax,ax
c0013ad0:	83 c4 0c             	add    esp,0xc
c0013ad3:	c3                   	ret    
c0013ad4:	83 ec 0c             	sub    esp,0xc
c0013ad7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013adb:	52                   	push   edx
c0013adc:	e8 ae ca ff ff       	call   c001058f <KePanic(char const*)>
c0013ae1:	a1 64 3e 02 c0       	mov    eax,ds:0xc0023e64
c0013ae6:	83 c4 10             	add    esp,0x10
c0013ae9:	48                   	dec    eax
c0013aea:	eb c0                	jmp    c0013aac <Semaphore::assertLocked(char const*)+0x24>
c0013aec:	c7 05 60 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e60,0x0
c0013af6:	e8 31 fe ff ff       	call   c001392c <schedule()>
c0013afb:	eb c3                	jmp    c0013ac0 <Semaphore::assertLocked(char const*)+0x38>
c0013afd:	8d 76 00             	lea    esi,[esi+0x0]

c0013b00 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0013b00:	83 ec 0c             	sub    esp,0xc
c0013b03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b08:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b0c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013b0f:	e8 18 fe ff ff       	call   c001392c <schedule()>
c0013b14:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c0013b19:	48                   	dec    eax
c0013b1a:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c0013b1f:	75 03                	jne    c0013b24 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0013b21:	fb                   	sti    
c0013b22:	66 90                	xchg   ax,ax
c0013b24:	83 c4 0c             	add    esp,0xc
c0013b27:	c3                   	ret    

c0013b28 <blockTask(TaskState)>:
c0013b28:	83 ec 0c             	sub    esp,0xc
c0013b2b:	fa                   	cli    
c0013b2c:	ff 05 68 3e 02 c0    	inc    DWORD PTR ds:0xc0023e68
c0013b32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b3b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013b3e:	e8 e9 fd ff ff       	call   c001392c <schedule()>
c0013b43:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c0013b48:	48                   	dec    eax
c0013b49:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c0013b4e:	75 04                	jne    c0013b54 <blockTask(TaskState)+0x2c>
c0013b50:	fb                   	sti    
c0013b51:	8d 76 00             	lea    esi,[esi+0x0]
c0013b54:	83 c4 0c             	add    esp,0xc
c0013b57:	c3                   	ret    

c0013b58 <waitTask(int, int*, int)>:
c0013b58:	83 ec 18             	sub    esp,0x18
c0013b5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b60:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013b64:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0013b67:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013b6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b70:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013b73:	6a 07                	push   0x7
c0013b75:	e8 ae ff ff ff       	call   c0013b28 <blockTask(TaskState)>
c0013b7a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b7f:	83 c4 10             	add    esp,0x10
c0013b82:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013b85:	85 d2                	test   edx,edx
c0013b87:	74 0b                	je     c0013b94 <waitTask(int, int*, int)+0x3c>
c0013b89:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013b8c:	89 02                	mov    DWORD PTR [edx],eax
c0013b8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b93:	90                   	nop
c0013b94:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013b97:	83 c4 0c             	add    esp,0xc
c0013b9a:	c3                   	ret    
c0013b9b:	90                   	nop

c0013b9c <milliTenthSleepUntil(unsigned int)>:
c0013b9c:	83 ec 0c             	sub    esp,0xc
c0013b9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ba3:	39 05 8c 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f8c,eax
c0013ba9:	76 05                	jbe    c0013bb0 <milliTenthSleepUntil(unsigned int)+0x14>
c0013bab:	90                   	nop
c0013bac:	83 c4 0c             	add    esp,0xc
c0013baf:	c3                   	ret    
c0013bb0:	fa                   	cli    
c0013bb1:	ff 05 68 3e 02 c0    	inc    DWORD PTR ds:0xc0023e68
c0013bb7:	83 ec 08             	sub    esp,0x8
c0013bba:	ff 05 64 3e 02 c0    	inc    DWORD PTR ds:0xc0023e64
c0013bc0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013bc6:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013bc9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013bcf:	52                   	push   edx
c0013bd0:	68 78 3e 02 c0       	push   0xc0023e78
c0013bd5:	e8 e2 8c 00 00       	call   c001c8bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013bda:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013be1:	e8 42 ff ff ff       	call   c0013b28 <blockTask(TaskState)>
c0013be6:	a1 64 3e 02 c0       	mov    eax,ds:0xc0023e64
c0013beb:	83 c4 10             	add    esp,0x10
c0013bee:	48                   	dec    eax
c0013bef:	a3 64 3e 02 c0       	mov    ds:0xc0023e64,eax
c0013bf4:	85 c0                	test   eax,eax
c0013bf6:	75 0c                	jne    c0013c04 <milliTenthSleepUntil(unsigned int)+0x68>
c0013bf8:	a1 60 3e 02 c0       	mov    eax,ds:0xc0023e60
c0013bfd:	85 c0                	test   eax,eax
c0013bff:	75 17                	jne    c0013c18 <milliTenthSleepUntil(unsigned int)+0x7c>
c0013c01:	8d 76 00             	lea    esi,[esi+0x0]
c0013c04:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c0013c09:	48                   	dec    eax
c0013c0a:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c0013c0f:	75 9b                	jne    c0013bac <milliTenthSleepUntil(unsigned int)+0x10>
c0013c11:	fb                   	sti    
c0013c12:	83 c4 0c             	add    esp,0xc
c0013c15:	c3                   	ret    
c0013c16:	66 90                	xchg   ax,ax
c0013c18:	c7 05 60 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e60,0x0
c0013c22:	e8 05 fd ff ff       	call   c001392c <schedule()>
c0013c27:	eb db                	jmp    c0013c04 <milliTenthSleepUntil(unsigned int)+0x68>
c0013c29:	8d 76 00             	lea    esi,[esi+0x0]

c0013c2c <milliTenthSleep(unsigned int)>:
c0013c2c:	a1 8c 2f 02 c0       	mov    eax,ds:0xc0022f8c
c0013c31:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013c35:	e9 62 ff ff ff       	jmp    c0013b9c <milliTenthSleepUntil(unsigned int)>
c0013c3a:	66 90                	xchg   ax,ax

c0013c3c <sleep(unsigned int)>:
c0013c3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c40:	8d 04 80             	lea    eax,[eax+eax*4]
c0013c43:	8d 04 80             	lea    eax,[eax+eax*4]
c0013c46:	8d 04 80             	lea    eax,[eax+eax*4]
c0013c49:	8d 04 80             	lea    eax,[eax+eax*4]
c0013c4c:	c1 e0 04             	shl    eax,0x4
c0013c4f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013c53:	eb d7                	jmp    c0013c2c <milliTenthSleep(unsigned int)>
c0013c55:	90                   	nop
c0013c56:	66 90                	xchg   ax,ax

c0013c58 <Semaphore::acquire()>:
c0013c58:	83 ec 0c             	sub    esp,0xc
c0013c5b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c5f:	fa                   	cli    
c0013c60:	a1 64 3e 02 c0       	mov    eax,ds:0xc0023e64
c0013c65:	ff 05 68 3e 02 c0    	inc    DWORD PTR ds:0xc0023e68
c0013c6b:	8d 48 01             	lea    ecx,[eax+0x1]
c0013c6e:	89 0d 64 3e 02 c0    	mov    DWORD PTR ds:0xc0023e64,ecx
c0013c74:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013c77:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013c79:	7d 2d                	jge    c0013ca8 <Semaphore::acquire()+0x50>
c0013c7b:	41                   	inc    ecx
c0013c7c:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013c7f:	90                   	nop
c0013c80:	a3 64 3e 02 c0       	mov    ds:0xc0023e64,eax
c0013c85:	85 c0                	test   eax,eax
c0013c87:	75 0b                	jne    c0013c94 <Semaphore::acquire()+0x3c>
c0013c89:	a1 60 3e 02 c0       	mov    eax,ds:0xc0023e60
c0013c8e:	85 c0                	test   eax,eax
c0013c90:	75 62                	jne    c0013cf4 <Semaphore::acquire()+0x9c>
c0013c92:	66 90                	xchg   ax,ax
c0013c94:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c0013c99:	48                   	dec    eax
c0013c9a:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c0013c9f:	75 03                	jne    c0013ca4 <Semaphore::acquire()+0x4c>
c0013ca1:	fb                   	sti    
c0013ca2:	66 90                	xchg   ax,ax
c0013ca4:	83 c4 0c             	add    esp,0xc
c0013ca7:	c3                   	ret    
c0013ca8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cad:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013cb4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013cb7:	85 c9                	test   ecx,ecx
c0013cb9:	74 4d                	je     c0013d08 <Semaphore::acquire()+0xb0>
c0013cbb:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013cbe:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013cc4:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013cc7:	90                   	nop
c0013cc8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ccd:	83 ec 0c             	sub    esp,0xc
c0013cd0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013cd3:	68 40 eb 01 c0       	push   0xc001eb40
c0013cd8:	e8 4f 6c ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c0013cdd:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013ce4:	e8 3f fe ff ff       	call   c0013b28 <blockTask(TaskState)>
c0013ce9:	a1 64 3e 02 c0       	mov    eax,ds:0xc0023e64
c0013cee:	83 c4 10             	add    esp,0x10
c0013cf1:	48                   	dec    eax
c0013cf2:	eb 8c                	jmp    c0013c80 <Semaphore::acquire()+0x28>
c0013cf4:	c7 05 60 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e60,0x0
c0013cfe:	e8 29 fc ff ff       	call   c001392c <schedule()>
c0013d03:	eb 8f                	jmp    c0013c94 <Semaphore::acquire()+0x3c>
c0013d05:	8d 76 00             	lea    esi,[esi+0x0]
c0013d08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d0d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013d10:	eb b6                	jmp    c0013cc8 <Semaphore::acquire()+0x70>
c0013d12:	66 90                	xchg   ax,ax

c0013d14 <taskReturned>:
c0013d14:	83 ec 18             	sub    esp,0x18
c0013d17:	68 60 eb 01 c0       	push   0xc001eb60
c0013d1c:	e8 6e c8 ff ff       	call   c001058f <KePanic(char const*)>
c0013d21:	83 c4 10             	add    esp,0x10
c0013d24:	83 ec 0c             	sub    esp,0xc
c0013d27:	6a 02                	push   0x2
c0013d29:	e8 fa fd ff ff       	call   c0013b28 <blockTask(TaskState)>
c0013d2e:	fa                   	cli    
c0013d2f:	ff 05 68 3e 02 c0    	inc    DWORD PTR ds:0xc0023e68
c0013d35:	e8 f2 fb ff ff       	call   c001392c <schedule()>
c0013d3a:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c0013d3f:	83 c4 10             	add    esp,0x10
c0013d42:	48                   	dec    eax
c0013d43:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c0013d48:	85 c0                	test   eax,eax
c0013d4a:	75 d8                	jne    c0013d24 <taskReturned+0x10>
c0013d4c:	fb                   	sti    
c0013d4d:	eb d5                	jmp    c0013d24 <taskReturned+0x10>
c0013d4f:	90                   	nop

c0013d50 <Thr::processFromPID(int)>:
c0013d50:	57                   	push   edi
c0013d51:	56                   	push   esi
c0013d52:	53                   	push   ebx
c0013d53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d57:	fa                   	cli    
c0013d58:	ff 05 68 3e 02 c0    	inc    DWORD PTR ds:0xc0023e68
c0013d5e:	83 ec 0c             	sub    esp,0xc
c0013d61:	68 84 3e 02 c0       	push   0xc0023e84
c0013d66:	e8 91 8a 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013d6b:	83 c4 10             	add    esp,0x10
c0013d6e:	89 c7                	mov    edi,eax
c0013d70:	eb 16                	jmp    c0013d88 <Thr::processFromPID(int)+0x38>
c0013d72:	66 90                	xchg   ax,ax
c0013d74:	83 ec 0c             	sub    esp,0xc
c0013d77:	68 84 3e 02 c0       	push   0xc0023e84
c0013d7c:	e8 7b 8a 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013d81:	83 c4 10             	add    esp,0x10
c0013d84:	39 f8                	cmp    eax,edi
c0013d86:	74 4c                	je     c0013dd4 <Thr::processFromPID(int)+0x84>
c0013d88:	83 ec 0c             	sub    esp,0xc
c0013d8b:	68 84 3e 02 c0       	push   0xc0023e84
c0013d90:	e8 67 8a 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013d95:	c7 04 24 84 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e84
c0013d9c:	89 c3                	mov    ebx,eax
c0013d9e:	e8 61 8a 00 00       	call   c001c804 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013da3:	58                   	pop    eax
c0013da4:	5a                   	pop    edx
c0013da5:	53                   	push   ebx
c0013da6:	68 84 3e 02 c0       	push   0xc0023e84
c0013dab:	e8 0c 8b 00 00       	call   c001c8bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013db0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013db3:	83 c4 10             	add    esp,0x10
c0013db6:	39 30                	cmp    DWORD PTR [eax],esi
c0013db8:	75 ba                	jne    c0013d74 <Thr::processFromPID(int)+0x24>
c0013dba:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c0013dbf:	48                   	dec    eax
c0013dc0:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c0013dc5:	74 09                	je     c0013dd0 <Thr::processFromPID(int)+0x80>
c0013dc7:	90                   	nop
c0013dc8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013dcb:	5b                   	pop    ebx
c0013dcc:	5e                   	pop    esi
c0013dcd:	5f                   	pop    edi
c0013dce:	c3                   	ret    
c0013dcf:	90                   	nop
c0013dd0:	fb                   	sti    
c0013dd1:	eb f5                	jmp    c0013dc8 <Thr::processFromPID(int)+0x78>
c0013dd3:	90                   	nop
c0013dd4:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c0013dd9:	48                   	dec    eax
c0013dda:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c0013ddf:	75 07                	jne    c0013de8 <Thr::processFromPID(int)+0x98>
c0013de1:	fb                   	sti    
c0013de2:	5b                   	pop    ebx
c0013de3:	5e                   	pop    esi
c0013de4:	5f                   	pop    edi
c0013de5:	c3                   	ret    
c0013de6:	66 90                	xchg   ax,ax
c0013de8:	5b                   	pop    ebx
c0013de9:	31 c0                	xor    eax,eax
c0013deb:	5e                   	pop    esi
c0013dec:	5f                   	pop    edi
c0013ded:	c3                   	ret    
c0013dee:	66 90                	xchg   ax,ax

c0013df0 <unblockTask(ThreadControlBlock*)>:
c0013df0:	53                   	push   ebx
c0013df1:	83 ec 08             	sub    esp,0x8
c0013df4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013df8:	fa                   	cli    
c0013df9:	ff 05 68 3e 02 c0    	inc    DWORD PTR ds:0xc0023e68
c0013dff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013e02:	85 c0                	test   eax,eax
c0013e04:	74 66                	je     c0013e6c <unblockTask(ThreadControlBlock*)+0x7c>
c0013e06:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013e09:	48                   	dec    eax
c0013e0a:	74 38                	je     c0013e44 <unblockTask(ThreadControlBlock*)+0x54>
c0013e0c:	83 ec 0c             	sub    esp,0xc
c0013e0f:	68 84 3e 02 c0       	push   0xc0023e84
c0013e14:	e8 e3 89 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013e19:	83 c4 10             	add    esp,0x10
c0013e1c:	85 c0                	test   eax,eax
c0013e1e:	75 1c                	jne    c0013e3c <unblockTask(ThreadControlBlock*)+0x4c>
c0013e20:	eb 5e                	jmp    c0013e80 <unblockTask(ThreadControlBlock*)+0x90>
c0013e22:	66 90                	xchg   ax,ax
c0013e24:	83 ec 08             	sub    esp,0x8
c0013e27:	50                   	push   eax
c0013e28:	68 84 3e 02 c0       	push   0xc0023e84
c0013e2d:	e8 7a 8d 00 00       	call   c001cbac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013e32:	83 c4 10             	add    esp,0x10
c0013e35:	85 c0                	test   eax,eax
c0013e37:	74 47                	je     c0013e80 <unblockTask(ThreadControlBlock*)+0x90>
c0013e39:	8d 76 00             	lea    esi,[esi+0x0]
c0013e3c:	39 c3                	cmp    ebx,eax
c0013e3e:	75 e4                	jne    c0013e24 <unblockTask(ThreadControlBlock*)+0x34>
c0013e40:	eb 12                	jmp    c0013e54 <unblockTask(ThreadControlBlock*)+0x64>
c0013e42:	66 90                	xchg   ax,ax
c0013e44:	83 ec 0c             	sub    esp,0xc
c0013e47:	68 e1 ea 01 c0       	push   0xc001eae1
c0013e4c:	e8 db 6a ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c0013e51:	83 c4 10             	add    esp,0x10
c0013e54:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c0013e59:	48                   	dec    eax
c0013e5a:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c0013e5f:	75 03                	jne    c0013e64 <unblockTask(ThreadControlBlock*)+0x74>
c0013e61:	fb                   	sti    
c0013e62:	66 90                	xchg   ax,ax
c0013e64:	83 c4 08             	add    esp,0x8
c0013e67:	5b                   	pop    ebx
c0013e68:	c3                   	ret    
c0013e69:	8d 76 00             	lea    esi,[esi+0x0]
c0013e6c:	83 ec 0c             	sub    esp,0xc
c0013e6f:	68 ca ea 01 c0       	push   0xc001eaca
c0013e74:	e8 b3 6a ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c0013e79:	83 c4 10             	add    esp,0x10
c0013e7c:	eb d6                	jmp    c0013e54 <unblockTask(ThreadControlBlock*)+0x64>
c0013e7e:	66 90                	xchg   ax,ax
c0013e80:	83 ec 08             	sub    esp,0x8
c0013e83:	53                   	push   ebx
c0013e84:	68 84 3e 02 c0       	push   0xc0023e84
c0013e89:	e8 2e 8a 00 00       	call   c001c8bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013e8e:	83 c4 10             	add    esp,0x10
c0013e91:	eb c1                	jmp    c0013e54 <unblockTask(ThreadControlBlock*)+0x64>
c0013e93:	90                   	nop

c0013e94 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013e94:	55                   	push   ebp
c0013e95:	57                   	push   edi
c0013e96:	56                   	push   esi
c0013e97:	53                   	push   ebx
c0013e98:	83 ec 1c             	sub    esp,0x1c
c0013e9b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013e9f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013ea2:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013ea8:	85 ed                	test   ebp,ebp
c0013eaa:	7e 24                	jle    c0013ed0 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013eac:	31 f6                	xor    esi,esi
c0013eae:	66 90                	xchg   ax,ax
c0013eb0:	83 ec 0c             	sub    esp,0xc
c0013eb3:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013eba:	46                   	inc    esi
c0013ebb:	57                   	push   edi
c0013ebc:	e8 e0 3d ff ff       	call   c0007ca1 <free>
c0013ec1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013ec4:	83 c4 10             	add    esp,0x10
c0013ec7:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013ecd:	7f e1                	jg     c0013eb0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013ecf:	90                   	nop
c0013ed0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013eda:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013edf:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013ee2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013ee5:	d3 c0                	rol    eax,cl
c0013ee7:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013eee:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013ef1:	89 f7                	mov    edi,esi
c0013ef3:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013efb:	0f 85 77 01 00 00    	jne    c0014078 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013f01:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013f07:	85 ed                	test   ebp,ebp
c0013f09:	74 1d                	je     c0013f28 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013f0b:	83 ec 0c             	sub    esp,0xc
c0013f0e:	55                   	push   ebp
c0013f0f:	e8 8c c3 ff ff       	call   c00102a0 <EnvVarContainer::~EnvVarContainer()>
c0013f14:	59                   	pop    ecx
c0013f15:	5e                   	pop    esi
c0013f16:	6a 0c                	push   0xc
c0013f18:	55                   	push   ebp
c0013f19:	e8 18 69 ff ff       	call   c000a836 <operator delete(void*, unsigned long)>
c0013f1e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013f21:	83 c4 10             	add    esp,0x10
c0013f24:	89 f7                	mov    edi,esi
c0013f26:	66 90                	xchg   ax,ax
c0013f28:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013f2e:	85 c0                	test   eax,eax
c0013f30:	0f 84 b6 00 00 00    	je     c0013fec <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013f36:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013f39:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013f3d:	31 c9                	xor    ecx,ecx
c0013f3f:	eb 17                	jmp    c0013f58 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013f41:	8d 76 00             	lea    esi,[esi+0x0]
c0013f44:	41                   	inc    ecx
c0013f45:	83 f9 10             	cmp    ecx,0x10
c0013f48:	0f 84 9e 00 00 00    	je     c0013fec <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013f4e:	66 90                	xchg   ax,ax
c0013f50:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013f56:	66 90                	xchg   ax,ax
c0013f58:	31 d2                	xor    edx,edx
c0013f5a:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0013f61:	d3 fa                	sar    edx,cl
c0013f63:	83 e2 01             	and    edx,0x1
c0013f66:	74 dc                	je     c0013f44 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013f68:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013f6b:	01 d2                	add    edx,edx
c0013f6d:	01 ca                	add    edx,ecx
c0013f6f:	8d 14 92             	lea    edx,[edx+edx*4]
c0013f72:	01 d0                	add    eax,edx
c0013f74:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0013f7a:	83 fd 07             	cmp    ebp,0x7
c0013f7d:	75 c5                	jne    c0013f44 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013f7f:	05 40 02 00 00       	add    eax,0x240
c0013f84:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0013f87:	83 fd ff             	cmp    ebp,0xffffffff
c0013f8a:	0f 8c f0 00 00 00    	jl     c0014080 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013f90:	0f 84 ae 01 00 00    	je     c0014144 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0013f96:	85 ed                	test   ebp,ebp
c0013f98:	0f 84 92 01 00 00    	je     c0014130 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0013f9e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013fa0:	75 a2                	jne    c0013f44 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013fa2:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013fa8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013fac:	01 d0                	add    eax,edx
c0013fae:	66 90                	xchg   ax,ax
c0013fb0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013fb4:	83 ec 0c             	sub    esp,0xc
c0013fb7:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013fbd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013fc0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013fc6:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013fcd:	50                   	push   eax
c0013fce:	e8 1d fe ff ff       	call   c0013df0 <unblockTask(ThreadControlBlock*)>
c0013fd3:	83 c4 10             	add    esp,0x10
c0013fd6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013fd9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013fdd:	89 f7                	mov    edi,esi
c0013fdf:	41                   	inc    ecx
c0013fe0:	83 f9 10             	cmp    ecx,0x10
c0013fe3:	0f 85 67 ff ff ff    	jne    c0013f50 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0013fec:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013ff2:	85 c0                	test   eax,eax
c0013ff4:	74 62                	je     c0014058 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013ff6:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013ffc:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0014002:	74 54                	je     c0014058 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0014004:	83 ec 0c             	sub    esp,0xc
c0014007:	68 84 3e 02 c0       	push   0xc0023e84
c001400c:	e8 eb 87 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014011:	c7 04 24 84 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e84
c0014018:	89 c7                	mov    edi,eax
c001401a:	e8 c1 87 00 00       	call   c001c7e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001401f:	83 c4 10             	add    esp,0x10
c0014022:	84 c0                	test   al,al
c0014024:	0f 84 ce 00 00 00    	je     c00140f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c001402a:	66 90                	xchg   ax,ax
c001402c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001402f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014035:	85 d2                	test   edx,edx
c0014037:	74 0f                	je     c0014048 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0014039:	83 ec 0c             	sub    esp,0xc
c001403c:	8b 02                	mov    eax,DWORD PTR [edx]
c001403e:	52                   	push   edx
c001403f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014042:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014045:	83 c4 10             	add    esp,0x10
c0014048:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0014052:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0014055:	8d 76 00             	lea    esi,[esi+0x0]
c0014058:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001405e:	85 db                	test   ebx,ebx
c0014060:	74 16                	je     c0014078 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0014062:	83 ec 0c             	sub    esp,0xc
c0014065:	53                   	push   ebx
c0014066:	e8 9f 5b ff ff       	call   c0009c0a <VAS::~VAS()>
c001406b:	58                   	pop    eax
c001406c:	5a                   	pop    edx
c001406d:	6a 14                	push   0x14
c001406f:	53                   	push   ebx
c0014070:	e8 c1 67 ff ff       	call   c000a836 <operator delete(void*, unsigned long)>
c0014075:	83 c4 10             	add    esp,0x10
c0014078:	83 c4 1c             	add    esp,0x1c
c001407b:	5b                   	pop    ebx
c001407c:	5e                   	pop    esi
c001407d:	5f                   	pop    edi
c001407e:	5d                   	pop    ebp
c001407f:	c3                   	ret    
c0014080:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014084:	83 ec 0c             	sub    esp,0xc
c0014087:	68 94 eb 01 c0       	push   0xc001eb94
c001408c:	e8 fe c4 ff ff       	call   c001058f <KePanic(char const*)>
c0014091:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014094:	83 c4 10             	add    esp,0x10
c0014097:	89 f7                	mov    edi,esi
c0014099:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001409d:	e9 a2 fe ff ff       	jmp    c0013f44 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00140a2:	66 90                	xchg   ax,ax
c00140a4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00140aa:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00140b0:	75 1e                	jne    c00140d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c00140b2:	83 ec 0c             	sub    esp,0xc
c00140b5:	68 fc eb 01 c0       	push   0xc001ebfc
c00140ba:	e8 6d 68 ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c00140bf:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00140c6:	e8 5d fa ff ff       	call   c0013b28 <blockTask(TaskState)>
c00140cb:	83 c4 10             	add    esp,0x10
c00140ce:	66 90                	xchg   ax,ax
c00140d0:	83 ec 08             	sub    esp,0x8
c00140d3:	56                   	push   esi
c00140d4:	68 84 3e 02 c0       	push   0xc0023e84
c00140d9:	e8 de 87 00 00       	call   c001c8bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00140de:	c7 04 24 84 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e84
c00140e5:	e8 12 87 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00140ea:	83 c4 10             	add    esp,0x10
c00140ed:	39 f8                	cmp    eax,edi
c00140ef:	0f 84 37 ff ff ff    	je     c001402c <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c00140f5:	8d 76 00             	lea    esi,[esi+0x0]
c00140f8:	83 ec 0c             	sub    esp,0xc
c00140fb:	68 84 3e 02 c0       	push   0xc0023e84
c0014100:	e8 f7 86 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014105:	c7 04 24 84 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e84
c001410c:	89 c6                	mov    esi,eax
c001410e:	e8 f1 86 00 00       	call   c001c804 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014113:	83 c4 10             	add    esp,0x10
c0014116:	39 f3                	cmp    ebx,esi
c0014118:	74 b6                	je     c00140d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c001411a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c001411d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014120:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0014126:	75 a8                	jne    c00140d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014128:	e9 77 ff ff ff       	jmp    c00140a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c001412d:	8d 76 00             	lea    esi,[esi+0x0]
c0014130:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014134:	83 ec 0c             	sub    esp,0xc
c0014137:	68 c8 eb 01 c0       	push   0xc001ebc8
c001413c:	e9 4b ff ff ff       	jmp    c001408c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0014141:	8d 76 00             	lea    esi,[esi+0x0]
c0014144:	8b 36                	mov    esi,DWORD PTR [esi]
c0014146:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001414a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c001414d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014150:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0014156:	01 d7                	add    edi,edx
c0014158:	89 f8                	mov    eax,edi
c001415a:	e9 51 fe ff ff       	jmp    c0013fb0 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c001415f:	90                   	nop

c0014160 <cleanerTaskFunction(void*)>:
c0014160:	53                   	push   ebx
c0014161:	83 ec 08             	sub    esp,0x8
c0014164:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c0014169:	48                   	dec    eax
c001416a:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c001416f:	75 03                	jne    c0014174 <cleanerTaskFunction(void*)+0x14>
c0014171:	fb                   	sti    
c0014172:	66 90                	xchg   ax,ax
c0014174:	fa                   	cli    
c0014175:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c001417a:	80 3d 4c 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023e4c,0x0
c0014181:	8d 50 01             	lea    edx,[eax+0x1]
c0014184:	89 15 68 3e 02 c0    	mov    DWORD PTR ds:0xc0023e68,edx
c001418a:	0f 84 ac 00 00 00    	je     c001423c <cleanerTaskFunction(void*)+0xdc>
c0014190:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c0014195:	85 c0                	test   eax,eax
c0014197:	75 03                	jne    c001419c <cleanerTaskFunction(void*)+0x3c>
c0014199:	fb                   	sti    
c001419a:	66 90                	xchg   ax,ax
c001419c:	c6 05 4c 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023e4c,0x0
c00141a3:	fa                   	cli    
c00141a4:	ff 05 68 3e 02 c0    	inc    DWORD PTR ds:0xc0023e68
c00141aa:	ff 05 64 3e 02 c0    	inc    DWORD PTR ds:0xc0023e64
c00141b0:	fa                   	cli    
c00141b1:	ff 05 68 3e 02 c0    	inc    DWORD PTR ds:0xc0023e68
c00141b7:	eb 2b                	jmp    c00141e4 <cleanerTaskFunction(void*)+0x84>
c00141b9:	8d 76 00             	lea    esi,[esi+0x0]
c00141bc:	83 ec 0c             	sub    esp,0xc
c00141bf:	68 6c 3e 02 c0       	push   0xc0023e6c
c00141c4:	e8 33 86 00 00       	call   c001c7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00141c9:	c7 04 24 6c 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e6c
c00141d0:	89 c3                	mov    ebx,eax
c00141d2:	e8 2d 86 00 00       	call   c001c804 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00141d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00141da:	e8 b5 fc ff ff       	call   c0013e94 <cleanupTerminatedTask(ThreadControlBlock*)>
c00141df:	83 c4 10             	add    esp,0x10
c00141e2:	66 90                	xchg   ax,ax
c00141e4:	83 ec 0c             	sub    esp,0xc
c00141e7:	68 6c 3e 02 c0       	push   0xc0023e6c
c00141ec:	e8 ef 85 00 00       	call   c001c7e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00141f1:	83 c4 10             	add    esp,0x10
c00141f4:	84 c0                	test   al,al
c00141f6:	74 c4                	je     c00141bc <cleanerTaskFunction(void*)+0x5c>
c00141f8:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c00141fd:	48                   	dec    eax
c00141fe:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c0014203:	75 03                	jne    c0014208 <cleanerTaskFunction(void*)+0xa8>
c0014205:	fb                   	sti    
c0014206:	66 90                	xchg   ax,ax
c0014208:	a1 64 3e 02 c0       	mov    eax,ds:0xc0023e64
c001420d:	48                   	dec    eax
c001420e:	a3 64 3e 02 c0       	mov    ds:0xc0023e64,eax
c0014213:	0f 85 4b ff ff ff    	jne    c0014164 <cleanerTaskFunction(void*)+0x4>
c0014219:	a1 60 3e 02 c0       	mov    eax,ds:0xc0023e60
c001421e:	85 c0                	test   eax,eax
c0014220:	0f 84 3e ff ff ff    	je     c0014164 <cleanerTaskFunction(void*)+0x4>
c0014226:	c7 05 60 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e60,0x0
c0014230:	e8 f7 f6 ff ff       	call   c001392c <schedule()>
c0014235:	e9 2a ff ff ff       	jmp    c0014164 <cleanerTaskFunction(void*)+0x4>
c001423a:	66 90                	xchg   ax,ax
c001423c:	83 ec 0c             	sub    esp,0xc
c001423f:	6a 02                	push   0x2
c0014241:	e8 ba f8 ff ff       	call   c0013b00 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0014246:	83 c4 10             	add    esp,0x10
c0014249:	e9 4e ff ff ff       	jmp    c001419c <cleanerTaskFunction(void*)+0x3c>
c001424e:	66 90                	xchg   ax,ax

c0014250 <terminateTask(int)>:
c0014250:	83 ec 14             	sub    esp,0x14
c0014253:	fa                   	cli    
c0014254:	ff 05 68 3e 02 c0    	inc    DWORD PTR ds:0xc0023e68
c001425a:	ff 05 64 3e 02 c0    	inc    DWORD PTR ds:0xc0023e64
c0014260:	fa                   	cli    
c0014261:	ff 05 68 3e 02 c0    	inc    DWORD PTR ds:0xc0023e68
c0014267:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001426b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014270:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0014273:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014278:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001427b:	50                   	push   eax
c001427c:	68 6c 3e 02 c0       	push   0xc0023e6c
c0014281:	e8 36 86 00 00       	call   c001c8bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014286:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001428b:	83 c4 10             	add    esp,0x10
c001428e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0014295:	a1 48 3e 02 c0       	mov    eax,ds:0xc0023e48
c001429a:	85 c0                	test   eax,eax
c001429c:	74 5e                	je     c00142fc <terminateTask(int)+0xac>
c001429e:	83 ec 0c             	sub    esp,0xc
c00142a1:	c6 05 4c 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023e4c,0x1
c00142a8:	50                   	push   eax
c00142a9:	e8 42 fb ff ff       	call   c0013df0 <unblockTask(ThreadControlBlock*)>
c00142ae:	83 c4 10             	add    esp,0x10
c00142b1:	8d 76 00             	lea    esi,[esi+0x0]
c00142b4:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c00142b9:	48                   	dec    eax
c00142ba:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c00142bf:	75 03                	jne    c00142c4 <terminateTask(int)+0x74>
c00142c1:	fb                   	sti    
c00142c2:	66 90                	xchg   ax,ax
c00142c4:	a1 64 3e 02 c0       	mov    eax,ds:0xc0023e64
c00142c9:	48                   	dec    eax
c00142ca:	a3 64 3e 02 c0       	mov    ds:0xc0023e64,eax
c00142cf:	75 0b                	jne    c00142dc <terminateTask(int)+0x8c>
c00142d1:	83 3d 60 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023e60,0x0
c00142d8:	75 36                	jne    c0014310 <terminateTask(int)+0xc0>
c00142da:	66 90                	xchg   ax,ax
c00142dc:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c00142e1:	48                   	dec    eax
c00142e2:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c00142e7:	75 03                	jne    c00142ec <terminateTask(int)+0x9c>
c00142e9:	fb                   	sti    
c00142ea:	66 90                	xchg   ax,ax
c00142ec:	fa                   	cli    
c00142ed:	ff 05 68 3e 02 c0    	inc    DWORD PTR ds:0xc0023e68
c00142f3:	90                   	nop
c00142f4:	e8 33 f6 ff ff       	call   c001392c <schedule()>
c00142f9:	eb e1                	jmp    c00142dc <terminateTask(int)+0x8c>
c00142fb:	90                   	nop
c00142fc:	83 ec 0c             	sub    esp,0xc
c00142ff:	68 f8 ea 01 c0       	push   0xc001eaf8
c0014304:	e8 23 66 ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c0014309:	83 c4 10             	add    esp,0x10
c001430c:	eb a6                	jmp    c00142b4 <terminateTask(int)+0x64>
c001430e:	66 90                	xchg   ax,ax
c0014310:	c7 05 60 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e60,0x0
c001431a:	eb d8                	jmp    c00142f4 <terminateTask(int)+0xa4>

c001431c <Thr::terminateFromIRQ(int)>:
c001431c:	83 ec 18             	sub    esp,0x18
c001431f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014323:	50                   	push   eax
c0014324:	e8 27 ff ff ff       	call   c0014250 <terminateTask(int)>
c0014329:	90                   	nop
c001432a:	66 90                	xchg   ax,ax

c001432c <Semaphore::release()>:
c001432c:	83 ec 0c             	sub    esp,0xc
c001432f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014333:	fa                   	cli    
c0014334:	a1 64 3e 02 c0       	mov    eax,ds:0xc0023e64
c0014339:	ff 05 68 3e 02 c0    	inc    DWORD PTR ds:0xc0023e68
c001433f:	8d 48 01             	lea    ecx,[eax+0x1]
c0014342:	89 0d 64 3e 02 c0    	mov    DWORD PTR ds:0xc0023e64,ecx
c0014348:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001434b:	85 c9                	test   ecx,ecx
c001434d:	74 41                	je     c0014390 <Semaphore::release()+0x64>
c001434f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014352:	83 ec 0c             	sub    esp,0xc
c0014355:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014358:	51                   	push   ecx
c0014359:	e8 92 fa ff ff       	call   c0013df0 <unblockTask(ThreadControlBlock*)>
c001435e:	a1 64 3e 02 c0       	mov    eax,ds:0xc0023e64
c0014363:	83 c4 10             	add    esp,0x10
c0014366:	48                   	dec    eax
c0014367:	90                   	nop
c0014368:	a3 64 3e 02 c0       	mov    ds:0xc0023e64,eax
c001436d:	85 c0                	test   eax,eax
c001436f:	75 0b                	jne    c001437c <Semaphore::release()+0x50>
c0014371:	a1 60 3e 02 c0       	mov    eax,ds:0xc0023e60
c0014376:	85 c0                	test   eax,eax
c0014378:	75 1e                	jne    c0014398 <Semaphore::release()+0x6c>
c001437a:	66 90                	xchg   ax,ax
c001437c:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c0014381:	48                   	dec    eax
c0014382:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c0014387:	75 03                	jne    c001438c <Semaphore::release()+0x60>
c0014389:	fb                   	sti    
c001438a:	66 90                	xchg   ax,ax
c001438c:	83 c4 0c             	add    esp,0xc
c001438f:	c3                   	ret    
c0014390:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0014393:	eb d3                	jmp    c0014368 <Semaphore::release()+0x3c>
c0014395:	8d 76 00             	lea    esi,[esi+0x0]
c0014398:	c7 05 60 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e60,0x0
c00143a2:	e8 85 f5 ff ff       	call   c001392c <schedule()>
c00143a7:	eb d3                	jmp    c001437c <Semaphore::release()+0x50>
c00143a9:	8d 76 00             	lea    esi,[esi+0x0]

c00143ac <__static_initialization_and_destruction_0(int, int)>:
c00143ac:	83 ec 0c             	sub    esp,0xc
c00143af:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00143b4:	0f 85 8e 00 00 00    	jne    c0014448 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00143ba:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00143c2:	0f 85 80 00 00 00    	jne    c0014448 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00143c8:	83 ec 0c             	sub    esp,0xc
c00143cb:	68 84 3e 02 c0       	push   0xc0023e84
c00143d0:	e8 93 87 00 00       	call   c001cb68 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00143d5:	83 c4 10             	add    esp,0x10
c00143d8:	83 ec 04             	sub    esp,0x4
c00143db:	68 30 f7 01 c0       	push   0xc001f730
c00143e0:	68 84 3e 02 c0       	push   0xc0023e84
c00143e5:	68 18 cb 01 c0       	push   0xc001cb18
c00143ea:	e8 f7 63 ff ff       	call   c000a7e6 <__cxa_atexit>
c00143ef:	83 c4 10             	add    esp,0x10
c00143f2:	83 ec 0c             	sub    esp,0xc
c00143f5:	68 78 3e 02 c0       	push   0xc0023e78
c00143fa:	e8 69 87 00 00       	call   c001cb68 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00143ff:	83 c4 10             	add    esp,0x10
c0014402:	83 ec 04             	sub    esp,0x4
c0014405:	68 30 f7 01 c0       	push   0xc001f730
c001440a:	68 78 3e 02 c0       	push   0xc0023e78
c001440f:	68 18 cb 01 c0       	push   0xc001cb18
c0014414:	e8 cd 63 ff ff       	call   c000a7e6 <__cxa_atexit>
c0014419:	83 c4 10             	add    esp,0x10
c001441c:	83 ec 0c             	sub    esp,0xc
c001441f:	68 6c 3e 02 c0       	push   0xc0023e6c
c0014424:	e8 3f 87 00 00       	call   c001cb68 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014429:	83 c4 10             	add    esp,0x10
c001442c:	83 ec 04             	sub    esp,0x4
c001442f:	68 30 f7 01 c0       	push   0xc001f730
c0014434:	68 6c 3e 02 c0       	push   0xc0023e6c
c0014439:	68 18 cb 01 c0       	push   0xc001cb18
c001443e:	e8 a3 63 ff ff       	call   c000a7e6 <__cxa_atexit>
c0014443:	83 c4 10             	add    esp,0x10
c0014446:	66 90                	xchg   ax,ax
c0014448:	90                   	nop
c0014449:	83 c4 0c             	add    esp,0xc
c001444c:	c3                   	ret    
c001444d:	8d 76 00             	lea    esi,[esi+0x0]

c0014450 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0014450:	83 ec 0c             	sub    esp,0xc
c0014453:	83 ec 08             	sub    esp,0x8
c0014456:	68 ff ff 00 00       	push   0xffff
c001445b:	6a 01                	push   0x1
c001445d:	e8 4a ff ff ff       	call   c00143ac <__static_initialization_and_destruction_0(int, int)>
c0014462:	83 c4 10             	add    esp,0x10
c0014465:	83 c4 0c             	add    esp,0xc
c0014468:	c3                   	ret    

c0014469 <Vm::inbv(unsigned short)>:
c0014469:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001446d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014472:	75 06                	jne    c001447a <Vm::inbv(unsigned short)+0x11>
c0014474:	a0 cc 3e 02 c0       	mov    al,ds:0xc0023ecc
c0014479:	c3                   	ret    
c001447a:	ec                   	in     al,dx
c001447b:	c3                   	ret    

c001447c <Vm::outbv(unsigned short, unsigned char)>:
c001447c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014480:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014484:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014489:	75 25                	jne    c00144b0 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001448b:	8b 0d cc 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023ecc
c0014491:	8d 51 01             	lea    edx,[ecx+0x1]
c0014494:	88 81 e0 3e 02 c0    	mov    BYTE PTR [ecx-0x3ffdc120],al
c001449a:	89 15 cc 3e 02 c0    	mov    DWORD PTR ds:0xc0023ecc,edx
c00144a0:	83 fa 20             	cmp    edx,0x20
c00144a3:	75 0c                	jne    c00144b1 <Vm::outbv(unsigned short, unsigned char)+0x35>
c00144a5:	c7 05 cc 3e 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0023ecc,0x1f
c00144af:	c3                   	ret    
c00144b0:	ee                   	out    dx,al
c00144b1:	c3                   	ret    

c00144b2 <Vm::realToLinear(unsigned short, unsigned short)>:
c00144b2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00144b7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00144bc:	c1 e0 04             	shl    eax,0x4
c00144bf:	01 d0                	add    eax,edx
c00144c1:	c3                   	ret    

c00144c2 <Vm::getSegment(unsigned int)>:
c00144c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144c6:	c1 e8 10             	shr    eax,0x10
c00144c9:	c3                   	ret    

c00144ca <Vm::getOffset(unsigned int)>:
c00144ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144ce:	c3                   	ret    

c00144cf <Vm::mainloop2()>:
c00144cf:	83 ec 18             	sub    esp,0x18
c00144d2:	fa                   	cli    
c00144d3:	ff 05 68 3e 02 c0    	inc    DWORD PTR ds:0xc0023e68
c00144d9:	6a 02                	push   0x2
c00144db:	c6 05 c5 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023ec5,0x1
c00144e2:	e8 19 f6 ff ff       	call   c0013b00 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00144e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144ec:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00144f0:	52                   	push   edx
c00144f1:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00144f5:	52                   	push   edx
c00144f6:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00144fa:	52                   	push   edx
c00144fb:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00144ff:	50                   	push   eax
c0014500:	e8 0a bd fe ff       	call   c000020f <goToVM86>
c0014505:	83 c4 2c             	add    esp,0x2c
c0014508:	c3                   	ret    

c0014509 <Vm::mainVm8086Loop(void*)>:
c0014509:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c001450e:	48                   	dec    eax
c001450f:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c0014514:	75 01                	jne    c0014517 <Vm::mainVm8086Loop(void*)+0xe>
c0014516:	fb                   	sti    
c0014517:	eb b6                	jmp    c00144cf <Vm::mainloop2()>

c0014519 <Vm::mainloop3(unsigned long)>:
c0014519:	83 ec 18             	sub    esp,0x18
c001451c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014520:	fa                   	cli    
c0014521:	ff 05 68 3e 02 c0    	inc    DWORD PTR ds:0xc0023e68
c0014527:	6a 02                	push   0x2
c0014529:	c6 05 c4 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023ec4,0x1
c0014530:	a3 c0 3e 02 c0       	mov    ds:0xc0023ec0,eax
c0014535:	e8 c6 f5 ff ff       	call   c0013b00 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001453a:	83 c4 1c             	add    esp,0x1c
c001453d:	eb 90                	jmp    c00144cf <Vm::mainloop2()>

c001453f <Vm::initialise8086()>:
c001453f:	83 ec 0c             	sub    esp,0xc
c0014542:	68 80 00 00 00       	push   0x80
c0014547:	6a 00                	push   0x0
c0014549:	68 09 45 01 c0       	push   0xc0014509
c001454e:	ff 35 90 3e 02 c0    	push   DWORD PTR ds:0xc0023e90
c0014554:	e8 b3 f1 ff ff       	call   c001370c <Process::createThread(void (*)(void*), void*, int)>
c0014559:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0014560:	a3 c8 3e 02 c0       	mov    ds:0xc0023ec8,eax
c0014565:	68 00 01 00 00       	push   0x100
c001456a:	a1 90 3e 02 c0       	mov    eax,ds:0xc0023e90
c001456f:	6a 00                	push   0x0
c0014571:	6a 00                	push   0x0
c0014573:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014579:	e8 ea 5a ff ff       	call   c000a068 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001457e:	83 c4 2c             	add    esp,0x2c
c0014581:	c3                   	ret    

c0014582 <Vm::finish8086()>:
c0014582:	53                   	push   ebx
c0014583:	83 ec 08             	sub    esp,0x8
c0014586:	fa                   	cli    
c0014587:	ff 05 68 3e 02 c0    	inc    DWORD PTR ds:0xc0023e68
c001458d:	80 3d c4 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ec4,0x0
c0014594:	75 15                	jne    c00145ab <Vm::finish8086()+0x29>
c0014596:	e8 91 f3 ff ff       	call   c001392c <schedule()>
c001459b:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c00145a0:	48                   	dec    eax
c00145a1:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c00145a6:	75 de                	jne    c0014586 <Vm::finish8086()+0x4>
c00145a8:	fb                   	sti    
c00145a9:	eb db                	jmp    c0014586 <Vm::finish8086()+0x4>
c00145ab:	83 ec 0c             	sub    esp,0xc
c00145ae:	8b 1d c0 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023ec0
c00145b4:	ff 35 c8 3e 02 c0    	push   DWORD PTR ds:0xc0023ec8
c00145ba:	c6 05 c4 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023ec4,0x0
c00145c1:	e8 2a f8 ff ff       	call   c0013df0 <unblockTask(ThreadControlBlock*)>
c00145c6:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c00145cb:	83 c4 10             	add    esp,0x10
c00145ce:	8d 50 ff             	lea    edx,[eax-0x1]
c00145d1:	89 15 68 3e 02 c0    	mov    DWORD PTR ds:0xc0023e68,edx
c00145d7:	85 d2                	test   edx,edx
c00145d9:	75 01                	jne    c00145dc <Vm::finish8086()+0x5a>
c00145db:	fb                   	sti    
c00145dc:	89 d8                	mov    eax,ebx
c00145de:	83 c4 08             	add    esp,0x8
c00145e1:	5b                   	pop    ebx
c00145e2:	c3                   	ret    

c00145e3 <Vm::getOutput8086(unsigned char*)>:
c00145e3:	57                   	push   edi
c00145e4:	8b 0d cc 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023ecc
c00145ea:	56                   	push   esi
c00145eb:	be e0 3e 02 c0       	mov    esi,0xc0023ee0
c00145f0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00145f4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00145f6:	a1 cc 3e 02 c0       	mov    eax,ds:0xc0023ecc
c00145fb:	5e                   	pop    esi
c00145fc:	c7 05 cc 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ecc,0x0
c0014606:	5f                   	pop    edi
c0014607:	c3                   	ret    

c0014608 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014608:	55                   	push   ebp
c0014609:	57                   	push   edi
c001460a:	56                   	push   esi
c001460b:	53                   	push   ebx
c001460c:	83 ec 0c             	sub    esp,0xc
c001460f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014613:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0014617:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001461b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001461f:	fa                   	cli    
c0014620:	ff 05 68 3e 02 c0    	inc    DWORD PTR ds:0xc0023e68
c0014626:	80 3d c5 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ec5,0x0
c001462d:	75 15                	jne    c0014644 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c001462f:	e8 f8 f2 ff ff       	call   c001392c <schedule()>
c0014634:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c0014639:	48                   	dec    eax
c001463a:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c001463f:	75 de                	jne    c001461f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014641:	fb                   	sti    
c0014642:	eb db                	jmp    c001461f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014644:	a1 c8 3e 02 c0       	mov    eax,ds:0xc0023ec8
c0014649:	c7 05 cc 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ecc,0x0
c0014653:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0014657:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001465b:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001465f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014663:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014667:	0f b7 ff             	movzx  edi,di
c001466a:	0f b7 f6             	movzx  esi,si
c001466d:	50                   	push   eax
c001466e:	6a 20                	push   0x20
c0014670:	6a 00                	push   0x0
c0014672:	68 e0 3e 02 c0       	push   0xc0023ee0
c0014677:	e8 54 be fe ff       	call   c00004d0 <memset>
c001467c:	5a                   	pop    edx
c001467d:	59                   	pop    ecx
c001467e:	57                   	push   edi
c001467f:	56                   	push   esi
c0014680:	e8 2d fe ff ff       	call   c00144b2 <Vm::realToLinear(unsigned short, unsigned short)>
c0014685:	83 c4 10             	add    esp,0x10
c0014688:	89 c7                	mov    edi,eax
c001468a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001468e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014692:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014694:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c0014699:	c6 05 c5 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023ec5,0x0
c00146a0:	48                   	dec    eax
c00146a1:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c00146a6:	75 01                	jne    c00146a9 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00146a8:	fb                   	sti    
c00146a9:	83 ec 0c             	sub    esp,0xc
c00146ac:	ff 35 c8 3e 02 c0    	push   DWORD PTR ds:0xc0023ec8
c00146b2:	e8 39 f7 ff ff       	call   c0013df0 <unblockTask(ThreadControlBlock*)>
c00146b7:	83 c4 1c             	add    esp,0x1c
c00146ba:	b0 01                	mov    al,0x1
c00146bc:	5b                   	pop    ebx
c00146bd:	5e                   	pop    esi
c00146be:	5f                   	pop    edi
c00146bf:	5d                   	pop    ebp
c00146c0:	c3                   	ret    

c00146c1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00146c1:	55                   	push   ebp
c00146c2:	57                   	push   edi
c00146c3:	56                   	push   esi
c00146c4:	53                   	push   ebx
c00146c5:	83 ec 2c             	sub    esp,0x2c
c00146c8:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00146cc:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00146d0:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00146d4:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00146d8:	fa                   	cli    
c00146d9:	ff 05 68 3e 02 c0    	inc    DWORD PTR ds:0xc0023e68
c00146df:	0f b6 35 c5 3e 02 c0 	movzx  esi,BYTE PTR ds:0xc0023ec5
c00146e6:	89 f0                	mov    eax,esi
c00146e8:	84 c0                	test   al,al
c00146ea:	75 1d                	jne    c0014709 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c00146ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00146f0:	e8 37 f2 ff ff       	call   c001392c <schedule()>
c00146f5:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c00146fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146fe:	48                   	dec    eax
c00146ff:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c0014704:	75 d2                	jne    c00146d8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014706:	fb                   	sti    
c0014707:	eb cf                	jmp    c00146d8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014709:	a1 c8 3e 02 c0       	mov    eax,ds:0xc0023ec8
c001470e:	c7 05 cc 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ecc,0x0
c0014718:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c001471c:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014720:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0014724:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0014728:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001472c:	50                   	push   eax
c001472d:	6a 20                	push   0x20
c001472f:	6a 00                	push   0x0
c0014731:	68 e0 3e 02 c0       	push   0xc0023ee0
c0014736:	e8 95 bd fe ff       	call   c00004d0 <memset>
c001473b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014742:	e8 4a 35 ff ff       	call   c0007c91 <malloc>
c0014747:	83 c4 0c             	add    esp,0xc
c001474a:	89 c3                	mov    ebx,eax
c001474c:	ff 35 90 3e 02 c0    	push   DWORD PTR ds:0xc0023e90
c0014752:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014756:	50                   	push   eax
c0014757:	e8 46 67 ff ff       	call   c000aea2 <File::File(char const*, Process*)>
c001475c:	83 c4 10             	add    esp,0x10
c001475f:	85 db                	test   ebx,ebx
c0014761:	75 0a                	jne    c001476d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0014763:	83 ec 0c             	sub    esp,0xc
c0014766:	68 24 ec 01 c0       	push   0xc001ec24
c001476b:	eb 3e                	jmp    c00147ab <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001476d:	50                   	push   eax
c001476e:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014772:	50                   	push   eax
c0014773:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014777:	50                   	push   eax
c0014778:	53                   	push   ebx
c0014779:	e8 90 6a ff ff       	call   c000b20e <File::stat(unsigned long long*, bool*)>
c001477e:	83 c4 10             	add    esp,0x10
c0014781:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0014786:	74 0a                	je     c0014792 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0014788:	83 ec 0c             	sub    esp,0xc
c001478b:	68 38 ec 01 c0       	push   0xc001ec38
c0014790:	eb 19                	jmp    c00147ab <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014792:	51                   	push   ecx
c0014793:	51                   	push   ecx
c0014794:	6a 01                	push   0x1
c0014796:	53                   	push   ebx
c0014797:	e8 c6 67 ff ff       	call   c000af62 <File::open(FileOpenMode)>
c001479c:	83 c4 10             	add    esp,0x10
c001479f:	85 c0                	test   eax,eax
c00147a1:	74 24                	je     c00147c7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c00147a3:	83 ec 0c             	sub    esp,0xc
c00147a6:	68 51 ec 01 c0       	push   0xc001ec51
c00147ab:	e8 df bd ff ff       	call   c001058f <KePanic(char const*)>
c00147b0:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c00147b5:	83 c4 10             	add    esp,0x10
c00147b8:	48                   	dec    eax
c00147b9:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c00147be:	85 c0                	test   eax,eax
c00147c0:	75 01                	jne    c00147c3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c00147c2:	fb                   	sti    
c00147c3:	31 f6                	xor    esi,esi
c00147c5:	eb 58                	jmp    c001481f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c00147c7:	0f b7 ed             	movzx  ebp,bp
c00147ca:	50                   	push   eax
c00147cb:	0f b7 ff             	movzx  edi,di
c00147ce:	50                   	push   eax
c00147cf:	55                   	push   ebp
c00147d0:	57                   	push   edi
c00147d1:	e8 dc fc ff ff       	call   c00144b2 <Vm::realToLinear(unsigned short, unsigned short)>
c00147d6:	5a                   	pop    edx
c00147d7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00147d9:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00147dd:	51                   	push   ecx
c00147de:	50                   	push   eax
c00147df:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00147e3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00147e7:	53                   	push   ebx
c00147e8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00147eb:	83 c4 14             	add    esp,0x14
c00147ee:	53                   	push   ebx
c00147ef:	e8 cc 67 ff ff       	call   c000afc0 <File::close()>
c00147f4:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c00147f9:	83 c4 10             	add    esp,0x10
c00147fc:	48                   	dec    eax
c00147fd:	c6 05 c5 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023ec5,0x0
c0014804:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c0014809:	85 c0                	test   eax,eax
c001480b:	75 01                	jne    c001480e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001480d:	fb                   	sti    
c001480e:	83 ec 0c             	sub    esp,0xc
c0014811:	ff 35 c8 3e 02 c0    	push   DWORD PTR ds:0xc0023ec8
c0014817:	e8 d4 f5 ff ff       	call   c0013df0 <unblockTask(ThreadControlBlock*)>
c001481c:	83 c4 10             	add    esp,0x10
c001481f:	83 c4 2c             	add    esp,0x2c
c0014822:	89 f0                	mov    eax,esi
c0014824:	5b                   	pop    ebx
c0014825:	5e                   	pop    esi
c0014826:	5f                   	pop    edi
c0014827:	5d                   	pop    ebp
c0014828:	c3                   	ret    

c0014829 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0014829:	57                   	push   edi
c001482a:	56                   	push   esi
c001482b:	53                   	push   ebx
c001482c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014830:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014834:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014838:	83 e8 06             	sub    eax,0x6
c001483b:	0f b7 c0             	movzx  eax,ax
c001483e:	50                   	push   eax
c001483f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0014844:	50                   	push   eax
c0014845:	e8 68 fc ff ff       	call   c00144b2 <Vm::realToLinear(unsigned short, unsigned short)>
c001484a:	5a                   	pop    edx
c001484b:	5e                   	pop    esi
c001484c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001484f:	8d 56 fa             	lea    edx,[esi-0x6]
c0014852:	81 e2 ff ff 00 00    	and    edx,0xffff
c0014858:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001485b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001485e:	83 c2 02             	add    edx,0x2
c0014861:	66 89 10             	mov    WORD PTR [eax],dx
c0014864:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0014867:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001486b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001486e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0014872:	89 d6                	mov    esi,edx
c0014874:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001487a:	66 81 e6 ff fd       	and    si,0xfdff
c001487f:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0014883:	74 07                	je     c001488c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0014885:	89 d6                	mov    esi,edx
c0014887:	66 81 ce 00 02       	or     si,0x200
c001488c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0014890:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014895:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014899:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00148a1:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00148a4:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00148ac:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00148af:	5b                   	pop    ebx
c00148b0:	5e                   	pop    esi
c00148b1:	5f                   	pop    edi
c00148b2:	c3                   	ret    

c00148b3 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00148b3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00148b8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00148bd:	c1 e0 04             	shl    eax,0x4
c00148c0:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00148c3:	c3                   	ret    

c00148c4 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00148c4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00148c9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00148ce:	c1 e0 04             	shl    eax,0x4
c00148d1:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00148d5:	c3                   	ret    

c00148d6 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00148d6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00148db:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00148e0:	c1 e0 04             	shl    eax,0x4
c00148e3:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00148e6:	c3                   	ret    

c00148e7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00148e7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00148ec:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00148f1:	c1 e0 04             	shl    eax,0x4
c00148f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00148f8:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00148fb:	c3                   	ret    

c00148fc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00148fc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014901:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014906:	c1 e0 04             	shl    eax,0x4
c0014909:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001490d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0014911:	c3                   	ret    

c0014912 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0014912:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014917:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001491c:	c1 e0 04             	shl    eax,0x4
c001491f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014923:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0014926:	c3                   	ret    

c0014927 <Vm::faultHandler(regs*)>:
c0014927:	55                   	push   ebp
c0014928:	57                   	push   edi
c0014929:	56                   	push   esi
c001492a:	53                   	push   ebx
c001492b:	83 ec 1c             	sub    esp,0x1c
c001492e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014932:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014935:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0014939:	0f b7 f8             	movzx  edi,ax
c001493c:	52                   	push   edx
c001493d:	0f b7 c0             	movzx  eax,ax
c0014940:	50                   	push   eax
c0014941:	e8 6c fb ff ff       	call   c00144b2 <Vm::realToLinear(unsigned short, unsigned short)>
c0014946:	5a                   	pop    edx
c0014947:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001494a:	59                   	pop    ecx
c001494b:	89 c1                	mov    ecx,eax
c001494d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014950:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014954:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014959:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001495d:	0f b7 c5             	movzx  eax,bp
c0014960:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014964:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0014968:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001496c:	e8 41 fb ff ff       	call   c00144b2 <Vm::realToLinear(unsigned short, unsigned short)>
c0014971:	5e                   	pop    esi
c0014972:	be 06 00 00 00       	mov    esi,0x6
c0014977:	5a                   	pop    edx
c0014978:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001497d:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0014982:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0014985:	80 fa 9d             	cmp    dl,0x9d
c0014988:	0f 84 2c 02 00 00    	je     c0014bba <Vm::faultHandler(regs*)+0x293>
c001498e:	0f 87 91 00 00 00    	ja     c0014a25 <Vm::faultHandler(regs*)+0xfe>
c0014994:	80 fa 66             	cmp    dl,0x66
c0014997:	0f 84 98 01 00 00    	je     c0014b35 <Vm::faultHandler(regs*)+0x20e>
c001499d:	77 47                	ja     c00149e6 <Vm::faultHandler(regs*)+0xbf>
c001499f:	80 fa 36             	cmp    dl,0x36
c00149a2:	0f 84 80 01 00 00    	je     c0014b28 <Vm::faultHandler(regs*)+0x201>
c00149a8:	77 1a                	ja     c00149c4 <Vm::faultHandler(regs*)+0x9d>
c00149aa:	80 fa 26             	cmp    dl,0x26
c00149ad:	0f 84 4e 01 00 00    	je     c0014b01 <Vm::faultHandler(regs*)+0x1da>
c00149b3:	80 fa 2e             	cmp    dl,0x2e
c00149b6:	0f 85 e2 05 00 00    	jne    c0014f9e <Vm::faultHandler(regs*)+0x677>
c00149bc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149bf:	31 f6                	xor    esi,esi
c00149c1:	41                   	inc    ecx
c00149c2:	eb be                	jmp    c0014982 <Vm::faultHandler(regs*)+0x5b>
c00149c4:	80 fa 64             	cmp    dl,0x64
c00149c7:	0f 84 41 01 00 00    	je     c0014b0e <Vm::faultHandler(regs*)+0x1e7>
c00149cd:	0f 87 48 01 00 00    	ja     c0014b1b <Vm::faultHandler(regs*)+0x1f4>
c00149d3:	80 fa 3e             	cmp    dl,0x3e
c00149d6:	0f 85 c2 05 00 00    	jne    c0014f9e <Vm::faultHandler(regs*)+0x677>
c00149dc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149df:	be 01 00 00 00       	mov    esi,0x1
c00149e4:	eb db                	jmp    c00149c1 <Vm::faultHandler(regs*)+0x9a>
c00149e6:	80 fa 6d             	cmp    dl,0x6d
c00149e9:	0f 84 ec 02 00 00    	je     c0014cdb <Vm::faultHandler(regs*)+0x3b4>
c00149ef:	77 17                	ja     c0014a08 <Vm::faultHandler(regs*)+0xe1>
c00149f1:	80 fa 67             	cmp    dl,0x67
c00149f4:	0f 84 48 01 00 00    	je     c0014b42 <Vm::faultHandler(regs*)+0x21b>
c00149fa:	80 fa 6c             	cmp    dl,0x6c
c00149fd:	0f 84 69 02 00 00    	je     c0014c6c <Vm::faultHandler(regs*)+0x345>
c0014a03:	e9 96 05 00 00       	jmp    c0014f9e <Vm::faultHandler(regs*)+0x677>
c0014a08:	80 fa 6f             	cmp    dl,0x6f
c0014a0b:	0f 84 f4 03 00 00    	je     c0014e05 <Vm::faultHandler(regs*)+0x4de>
c0014a11:	0f 82 59 03 00 00    	jb     c0014d70 <Vm::faultHandler(regs*)+0x449>
c0014a17:	80 fa 9c             	cmp    dl,0x9c
c0014a1a:	0f 84 2f 01 00 00    	je     c0014b4f <Vm::faultHandler(regs*)+0x228>
c0014a20:	e9 79 05 00 00       	jmp    c0014f9e <Vm::faultHandler(regs*)+0x677>
c0014a25:	80 fa ec             	cmp    dl,0xec
c0014a28:	0f 84 14 05 00 00    	je     c0014f42 <Vm::faultHandler(regs*)+0x61b>
c0014a2e:	77 7b                	ja     c0014aab <Vm::faultHandler(regs*)+0x184>
c0014a30:	80 fa e4             	cmp    dl,0xe4
c0014a33:	0f 84 93 04 00 00    	je     c0014ecc <Vm::faultHandler(regs*)+0x5a5>
c0014a39:	77 53                	ja     c0014a8e <Vm::faultHandler(regs*)+0x167>
c0014a3b:	80 fa cd             	cmp    dl,0xcd
c0014a3e:	0f 84 d9 01 00 00    	je     c0014c1d <Vm::faultHandler(regs*)+0x2f6>
c0014a44:	80 fa cf             	cmp    dl,0xcf
c0014a47:	0f 85 51 05 00 00    	jne    c0014f9e <Vm::faultHandler(regs*)+0x677>
c0014a4d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014a50:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0014a53:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0014a57:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0014a5a:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0014a5e:	81 ca 00 02 02 00    	or     edx,0x20200
c0014a64:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014a67:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014a6b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a71:	66 c1 e8 09          	shr    ax,0x9
c0014a75:	83 e0 01             	and    eax,0x1
c0014a78:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014a7b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014a7e:	83 c0 06             	add    eax,0x6
c0014a81:	25 ff ff 00 00       	and    eax,0xffff
c0014a86:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014a89:	e9 0c 05 00 00       	jmp    c0014f9a <Vm::faultHandler(regs*)+0x673>
c0014a8e:	80 fa e6             	cmp    dl,0xe6
c0014a91:	0f 84 7f 04 00 00    	je     c0014f16 <Vm::faultHandler(regs*)+0x5ef>
c0014a97:	0f 82 4b 04 00 00    	jb     c0014ee8 <Vm::faultHandler(regs*)+0x5c1>
c0014a9d:	80 fa e7             	cmp    dl,0xe7
c0014aa0:	0f 84 87 04 00 00    	je     c0014f2d <Vm::faultHandler(regs*)+0x606>
c0014aa6:	e9 f3 04 00 00       	jmp    c0014f9e <Vm::faultHandler(regs*)+0x677>
c0014aab:	80 fa ef             	cmp    dl,0xef
c0014aae:	0f 84 d1 04 00 00    	je     c0014f85 <Vm::faultHandler(regs*)+0x65e>
c0014ab4:	77 28                	ja     c0014ade <Vm::faultHandler(regs*)+0x1b7>
c0014ab6:	80 fa ed             	cmp    dl,0xed
c0014ab9:	0f 84 9f 04 00 00    	je     c0014f5e <Vm::faultHandler(regs*)+0x637>
c0014abf:	80 fa ee             	cmp    dl,0xee
c0014ac2:	0f 85 d6 04 00 00    	jne    c0014f9e <Vm::faultHandler(regs*)+0x677>
c0014ac8:	50                   	push   eax
c0014ac9:	50                   	push   eax
c0014aca:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014ace:	50                   	push   eax
c0014acf:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014ad3:	50                   	push   eax
c0014ad4:	e8 a3 f9 ff ff       	call   c001447c <Vm::outbv(unsigned short, unsigned char)>
c0014ad9:	e9 9f 04 00 00       	jmp    c0014f7d <Vm::faultHandler(regs*)+0x656>
c0014ade:	80 fa fa             	cmp    dl,0xfa
c0014ae1:	0f 84 69 01 00 00    	je     c0014c50 <Vm::faultHandler(regs*)+0x329>
c0014ae7:	80 fa fb             	cmp    dl,0xfb
c0014aea:	0f 84 6e 01 00 00    	je     c0014c5e <Vm::faultHandler(regs*)+0x337>
c0014af0:	80 fa f3             	cmp    dl,0xf3
c0014af3:	0f 85 a5 04 00 00    	jne    c0014f9e <Vm::faultHandler(regs*)+0x677>
c0014af9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014afc:	e9 c0 fe ff ff       	jmp    c00149c1 <Vm::faultHandler(regs*)+0x9a>
c0014b01:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b04:	be 02 00 00 00       	mov    esi,0x2
c0014b09:	e9 b3 fe ff ff       	jmp    c00149c1 <Vm::faultHandler(regs*)+0x9a>
c0014b0e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b11:	be 03 00 00 00       	mov    esi,0x3
c0014b16:	e9 a6 fe ff ff       	jmp    c00149c1 <Vm::faultHandler(regs*)+0x9a>
c0014b1b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b1e:	be 04 00 00 00       	mov    esi,0x4
c0014b23:	e9 99 fe ff ff       	jmp    c00149c1 <Vm::faultHandler(regs*)+0x9a>
c0014b28:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b2b:	be 05 00 00 00       	mov    esi,0x5
c0014b30:	e9 8c fe ff ff       	jmp    c00149c1 <Vm::faultHandler(regs*)+0x9a>
c0014b35:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b38:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0014b3d:	e9 7f fe ff ff       	jmp    c00149c1 <Vm::faultHandler(regs*)+0x9a>
c0014b42:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014b45:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0014b4a:	e9 72 fe ff ff       	jmp    c00149c1 <Vm::faultHandler(regs*)+0x9a>
c0014b4f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0014b52:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014b56:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014b5b:	74 30                	je     c0014b8d <Vm::faultHandler(regs*)+0x266>
c0014b5d:	83 e9 04             	sub    ecx,0x4
c0014b60:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014b66:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014b6c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014b6f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014b72:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014b78:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014b7c:	0f 84 15 04 00 00    	je     c0014f97 <Vm::faultHandler(regs*)+0x670>
c0014b82:	80 ce 02             	or     dh,0x2
c0014b85:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014b88:	e9 0a 04 00 00       	jmp    c0014f97 <Vm::faultHandler(regs*)+0x670>
c0014b8d:	83 e9 02             	sub    ecx,0x2
c0014b90:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014b96:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014b99:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014b9d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014ba3:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014ba7:	74 05                	je     c0014bae <Vm::faultHandler(regs*)+0x287>
c0014ba9:	80 ce 02             	or     dh,0x2
c0014bac:	eb 03                	jmp    c0014bb1 <Vm::faultHandler(regs*)+0x28a>
c0014bae:	80 e6 fd             	and    dh,0xfd
c0014bb1:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014bb5:	e9 dd 03 00 00       	jmp    c0014f97 <Vm::faultHandler(regs*)+0x670>
c0014bba:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014bbf:	74 2a                	je     c0014beb <Vm::faultHandler(regs*)+0x2c4>
c0014bc1:	8b 10                	mov    edx,DWORD PTR [eax]
c0014bc3:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014bc9:	81 ca 00 02 02 00    	or     edx,0x20200
c0014bcf:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014bd2:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bd4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014bda:	c1 e8 09             	shr    eax,0x9
c0014bdd:	83 e0 01             	and    eax,0x1
c0014be0:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014be3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014be6:	83 c0 04             	add    eax,0x4
c0014be9:	eb 25                	jmp    c0014c10 <Vm::faultHandler(regs*)+0x2e9>
c0014beb:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014bee:	81 ca 00 02 02 00    	or     edx,0x20200
c0014bf4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014bfa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014c00:	66 c1 e8 09          	shr    ax,0x9
c0014c04:	83 e0 01             	and    eax,0x1
c0014c07:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014c0a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014c0d:	83 c0 02             	add    eax,0x2
c0014c10:	25 ff ff 00 00       	and    eax,0xffff
c0014c15:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014c18:	e9 7a 03 00 00       	jmp    c0014f97 <Vm::faultHandler(regs*)+0x670>
c0014c1d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014c21:	3c ee                	cmp    al,0xee
c0014c23:	75 10                	jne    c0014c35 <Vm::faultHandler(regs*)+0x30e>
c0014c25:	83 ec 0c             	sub    esp,0xc
c0014c28:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014c2b:	e8 e9 f8 ff ff       	call   c0014519 <Vm::mainloop3(unsigned long)>
c0014c30:	e9 4b 03 00 00       	jmp    c0014f80 <Vm::faultHandler(regs*)+0x659>
c0014c35:	83 ec 0c             	sub    esp,0xc
c0014c38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014c3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c40:	51                   	push   ecx
c0014c41:	50                   	push   eax
c0014c42:	53                   	push   ebx
c0014c43:	e8 e1 fb ff ff       	call   c0014829 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014c48:	83 c4 20             	add    esp,0x20
c0014c4b:	e9 4a 03 00 00       	jmp    c0014f9a <Vm::faultHandler(regs*)+0x673>
c0014c50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c55:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014c59:	e9 39 03 00 00       	jmp    c0014f97 <Vm::faultHandler(regs*)+0x670>
c0014c5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c63:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014c67:	e9 2b 03 00 00       	jmp    c0014f97 <Vm::faultHandler(regs*)+0x670>
c0014c6c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014c6f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014c74:	74 2b                	je     c0014ca1 <Vm::faultHandler(regs*)+0x37a>
c0014c76:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014c7d:	76 22                	jbe    c0014ca1 <Vm::faultHandler(regs*)+0x37a>
c0014c7f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014c83:	50                   	push   eax
c0014c84:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014c88:	50                   	push   eax
c0014c89:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014c8d:	50                   	push   eax
c0014c8e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014c92:	50                   	push   eax
c0014c93:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014c97:	50                   	push   eax
c0014c98:	6a 6c                	push   0x6c
c0014c9a:	6a 6c                	push   0x6c
c0014c9c:	e9 b9 01 00 00       	jmp    c0014e5a <Vm::faultHandler(regs*)+0x533>
c0014ca1:	83 ec 0c             	sub    esp,0xc
c0014ca4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014ca8:	0f b7 f6             	movzx  esi,si
c0014cab:	50                   	push   eax
c0014cac:	e8 b8 f7 ff ff       	call   c0014469 <Vm::inbv(unsigned short)>
c0014cb1:	83 c4 0c             	add    esp,0xc
c0014cb4:	0f b6 c0             	movzx  eax,al
c0014cb7:	50                   	push   eax
c0014cb8:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014cbc:	50                   	push   eax
c0014cbd:	56                   	push   esi
c0014cbe:	e8 24 fc ff ff       	call   c00148e7 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014cc3:	83 c4 10             	add    esp,0x10
c0014cc6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014cc9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014ccd:	74 03                	je     c0014cd2 <Vm::faultHandler(regs*)+0x3ab>
c0014ccf:	48                   	dec    eax
c0014cd0:	eb 01                	jmp    c0014cd3 <Vm::faultHandler(regs*)+0x3ac>
c0014cd2:	40                   	inc    eax
c0014cd3:	0f b7 c0             	movzx  eax,ax
c0014cd6:	e9 8d 00 00 00       	jmp    c0014d68 <Vm::faultHandler(regs*)+0x441>
c0014cdb:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014cde:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014ce1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014ce6:	74 29                	je     c0014d11 <Vm::faultHandler(regs*)+0x3ea>
c0014ce8:	3d ff ff 00 00       	cmp    eax,0xffff
c0014ced:	76 22                	jbe    c0014d11 <Vm::faultHandler(regs*)+0x3ea>
c0014cef:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014cf3:	50                   	push   eax
c0014cf4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014cf8:	50                   	push   eax
c0014cf9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014cfd:	50                   	push   eax
c0014cfe:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014d02:	50                   	push   eax
c0014d03:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d07:	50                   	push   eax
c0014d08:	6a 6d                	push   0x6d
c0014d0a:	6a 6d                	push   0x6d
c0014d0c:	e9 49 01 00 00       	jmp    c0014e5a <Vm::faultHandler(regs*)+0x533>
c0014d11:	0f b7 c8             	movzx  ecx,ax
c0014d14:	0f b7 f6             	movzx  esi,si
c0014d17:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014d1a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014d1f:	74 20                	je     c0014d41 <Vm::faultHandler(regs*)+0x41a>
c0014d21:	ed                   	in     eax,dx
c0014d22:	55                   	push   ebp
c0014d23:	50                   	push   eax
c0014d24:	51                   	push   ecx
c0014d25:	56                   	push   esi
c0014d26:	e8 e7 fb ff ff       	call   c0014912 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014d2b:	83 c4 10             	add    esp,0x10
c0014d2e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014d31:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014d35:	74 05                	je     c0014d3c <Vm::faultHandler(regs*)+0x415>
c0014d37:	83 e8 04             	sub    eax,0x4
c0014d3a:	eb 27                	jmp    c0014d63 <Vm::faultHandler(regs*)+0x43c>
c0014d3c:	83 c0 04             	add    eax,0x4
c0014d3f:	eb 22                	jmp    c0014d63 <Vm::faultHandler(regs*)+0x43c>
c0014d41:	66 ed                	in     ax,dx
c0014d43:	0f b7 c0             	movzx  eax,ax
c0014d46:	57                   	push   edi
c0014d47:	50                   	push   eax
c0014d48:	51                   	push   ecx
c0014d49:	56                   	push   esi
c0014d4a:	e8 ad fb ff ff       	call   c00148fc <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014d4f:	83 c4 10             	add    esp,0x10
c0014d52:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014d55:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014d59:	74 05                	je     c0014d60 <Vm::faultHandler(regs*)+0x439>
c0014d5b:	83 e8 02             	sub    eax,0x2
c0014d5e:	eb 03                	jmp    c0014d63 <Vm::faultHandler(regs*)+0x43c>
c0014d60:	83 c0 02             	add    eax,0x2
c0014d63:	25 ff ff 00 00       	and    eax,0xffff
c0014d68:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014d6b:	e9 27 02 00 00       	jmp    c0014f97 <Vm::faultHandler(regs*)+0x670>
c0014d70:	8d 46 ff             	lea    eax,[esi-0x1]
c0014d73:	3c 05                	cmp    al,0x5
c0014d75:	77 24                	ja     c0014d9b <Vm::faultHandler(regs*)+0x474>
c0014d77:	0f b6 c0             	movzx  eax,al
c0014d7a:	ff 24 85 c4 ec 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe133c]
c0014d81:	0f b7 fd             	movzx  edi,bp
c0014d84:	eb 15                	jmp    c0014d9b <Vm::faultHandler(regs*)+0x474>
c0014d86:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014d8a:	eb 0f                	jmp    c0014d9b <Vm::faultHandler(regs*)+0x474>
c0014d8c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014d90:	eb 09                	jmp    c0014d9b <Vm::faultHandler(regs*)+0x474>
c0014d92:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014d96:	eb 03                	jmp    c0014d9b <Vm::faultHandler(regs*)+0x474>
c0014d98:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014d9b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014d9e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014da3:	74 29                	je     c0014dce <Vm::faultHandler(regs*)+0x4a7>
c0014da5:	3d ff ff 00 00       	cmp    eax,0xffff
c0014daa:	76 22                	jbe    c0014dce <Vm::faultHandler(regs*)+0x4a7>
c0014dac:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014db0:	50                   	push   eax
c0014db1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014db5:	50                   	push   eax
c0014db6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014dba:	50                   	push   eax
c0014dbb:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014dbf:	50                   	push   eax
c0014dc0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014dc4:	50                   	push   eax
c0014dc5:	6a 6e                	push   0x6e
c0014dc7:	6a 6e                	push   0x6e
c0014dc9:	e9 8c 00 00 00       	jmp    c0014e5a <Vm::faultHandler(regs*)+0x533>
c0014dce:	0f b7 c0             	movzx  eax,ax
c0014dd1:	52                   	push   edx
c0014dd2:	52                   	push   edx
c0014dd3:	50                   	push   eax
c0014dd4:	57                   	push   edi
c0014dd5:	e8 d9 fa ff ff       	call   c00148b3 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014dda:	59                   	pop    ecx
c0014ddb:	0f b6 c0             	movzx  eax,al
c0014dde:	5e                   	pop    esi
c0014ddf:	50                   	push   eax
c0014de0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014de4:	50                   	push   eax
c0014de5:	e8 92 f6 ff ff       	call   c001447c <Vm::outbv(unsigned short, unsigned char)>
c0014dea:	83 c4 10             	add    esp,0x10
c0014ded:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014df0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014df4:	74 03                	je     c0014df9 <Vm::faultHandler(regs*)+0x4d2>
c0014df6:	48                   	dec    eax
c0014df7:	eb 01                	jmp    c0014dfa <Vm::faultHandler(regs*)+0x4d3>
c0014df9:	40                   	inc    eax
c0014dfa:	0f b7 c0             	movzx  eax,ax
c0014dfd:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014e00:	e9 92 01 00 00       	jmp    c0014f97 <Vm::faultHandler(regs*)+0x670>
c0014e05:	8d 46 ff             	lea    eax,[esi-0x1]
c0014e08:	3c 05                	cmp    al,0x5
c0014e0a:	77 1f                	ja     c0014e2b <Vm::faultHandler(regs*)+0x504>
c0014e0c:	0f b6 c0             	movzx  eax,al
c0014e0f:	ff 24 85 dc ec 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1324]
c0014e16:	89 ef                	mov    edi,ebp
c0014e18:	eb 11                	jmp    c0014e2b <Vm::faultHandler(regs*)+0x504>
c0014e1a:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014e1d:	eb 0c                	jmp    c0014e2b <Vm::faultHandler(regs*)+0x504>
c0014e1f:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014e22:	eb 07                	jmp    c0014e2b <Vm::faultHandler(regs*)+0x504>
c0014e24:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014e27:	eb 02                	jmp    c0014e2b <Vm::faultHandler(regs*)+0x504>
c0014e29:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014e2b:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014e2e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014e33:	74 37                	je     c0014e6c <Vm::faultHandler(regs*)+0x545>
c0014e35:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014e3b:	76 2f                	jbe    c0014e6c <Vm::faultHandler(regs*)+0x545>
c0014e3d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014e41:	50                   	push   eax
c0014e42:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014e46:	50                   	push   eax
c0014e47:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014e4b:	50                   	push   eax
c0014e4c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014e50:	50                   	push   eax
c0014e51:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e55:	50                   	push   eax
c0014e56:	6a 6f                	push   0x6f
c0014e58:	6a 6f                	push   0x6f
c0014e5a:	68 6a ec 01 c0       	push   0xc001ec6a
c0014e5f:	e8 c8 5a ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c0014e64:	83 c4 20             	add    esp,0x20
c0014e67:	e9 86 01 00 00       	jmp    c0014ff2 <Vm::faultHandler(regs*)+0x6cb>
c0014e6c:	0f b7 d7             	movzx  edx,di
c0014e6f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014e72:	0f b7 c6             	movzx  eax,si
c0014e75:	81 e1 00 04 00 00    	and    ecx,0x400
c0014e7b:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014e7e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e83:	74 1d                	je     c0014ea2 <Vm::faultHandler(regs*)+0x57b>
c0014e85:	55                   	push   ebp
c0014e86:	55                   	push   ebp
c0014e87:	50                   	push   eax
c0014e88:	52                   	push   edx
c0014e89:	e8 48 fa ff ff       	call   c00148d6 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014e8e:	83 c4 10             	add    esp,0x10
c0014e91:	89 fa                	mov    edx,edi
c0014e93:	ef                   	out    dx,eax
c0014e94:	85 c9                	test   ecx,ecx
c0014e96:	74 05                	je     c0014e9d <Vm::faultHandler(regs*)+0x576>
c0014e98:	83 ee 04             	sub    esi,0x4
c0014e9b:	eb 21                	jmp    c0014ebe <Vm::faultHandler(regs*)+0x597>
c0014e9d:	83 c6 04             	add    esi,0x4
c0014ea0:	eb 1c                	jmp    c0014ebe <Vm::faultHandler(regs*)+0x597>
c0014ea2:	55                   	push   ebp
c0014ea3:	55                   	push   ebp
c0014ea4:	50                   	push   eax
c0014ea5:	52                   	push   edx
c0014ea6:	e8 19 fa ff ff       	call   c00148c4 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014eab:	83 c4 10             	add    esp,0x10
c0014eae:	89 fa                	mov    edx,edi
c0014eb0:	66 ef                	out    dx,ax
c0014eb2:	85 c9                	test   ecx,ecx
c0014eb4:	74 05                	je     c0014ebb <Vm::faultHandler(regs*)+0x594>
c0014eb6:	83 ee 02             	sub    esi,0x2
c0014eb9:	eb 03                	jmp    c0014ebe <Vm::faultHandler(regs*)+0x597>
c0014ebb:	83 c6 02             	add    esi,0x2
c0014ebe:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014ec4:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014ec7:	e9 cb 00 00 00       	jmp    c0014f97 <Vm::faultHandler(regs*)+0x670>
c0014ecc:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014ed3:	83 ec 0c             	sub    esp,0xc
c0014ed6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014eda:	50                   	push   eax
c0014edb:	e8 89 f5 ff ff       	call   c0014469 <Vm::inbv(unsigned short)>
c0014ee0:	0f b6 c0             	movzx  eax,al
c0014ee3:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014ee6:	eb 3f                	jmp    c0014f27 <Vm::faultHandler(regs*)+0x600>
c0014ee8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014eed:	74 07                	je     c0014ef6 <Vm::faultHandler(regs*)+0x5cf>
c0014eef:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014ef3:	ed                   	in     eax,dx
c0014ef4:	eb 14                	jmp    c0014f0a <Vm::faultHandler(regs*)+0x5e3>
c0014ef6:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014ef9:	66 31 f6             	xor    si,si
c0014efc:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014eff:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014f03:	66 ed                	in     ax,dx
c0014f05:	0f b7 c0             	movzx  eax,ax
c0014f08:	09 f0                	or     eax,esi
c0014f0a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014f0d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014f11:	e9 84 00 00 00       	jmp    c0014f9a <Vm::faultHandler(regs*)+0x673>
c0014f16:	52                   	push   edx
c0014f17:	52                   	push   edx
c0014f18:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014f1c:	50                   	push   eax
c0014f1d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014f21:	50                   	push   eax
c0014f22:	e8 55 f5 ff ff       	call   c001447c <Vm::outbv(unsigned short, unsigned char)>
c0014f27:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014f2b:	eb 53                	jmp    c0014f80 <Vm::faultHandler(regs*)+0x659>
c0014f2d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014f30:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014f34:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014f39:	74 03                	je     c0014f3e <Vm::faultHandler(regs*)+0x617>
c0014f3b:	ef                   	out    dx,eax
c0014f3c:	eb cf                	jmp    c0014f0d <Vm::faultHandler(regs*)+0x5e6>
c0014f3e:	66 ef                	out    dx,ax
c0014f40:	eb cb                	jmp    c0014f0d <Vm::faultHandler(regs*)+0x5e6>
c0014f42:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014f49:	83 ec 0c             	sub    esp,0xc
c0014f4c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014f50:	50                   	push   eax
c0014f51:	e8 13 f5 ff ff       	call   c0014469 <Vm::inbv(unsigned short)>
c0014f56:	0f b6 c0             	movzx  eax,al
c0014f59:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014f5c:	eb 1f                	jmp    c0014f7d <Vm::faultHandler(regs*)+0x656>
c0014f5e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014f61:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014f66:	74 03                	je     c0014f6b <Vm::faultHandler(regs*)+0x644>
c0014f68:	ed                   	in     eax,dx
c0014f69:	eb 0d                	jmp    c0014f78 <Vm::faultHandler(regs*)+0x651>
c0014f6b:	66 ed                	in     ax,dx
c0014f6d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014f70:	0f b7 c0             	movzx  eax,ax
c0014f73:	66 31 d2             	xor    dx,dx
c0014f76:	09 d0                	or     eax,edx
c0014f78:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014f7b:	eb 1a                	jmp    c0014f97 <Vm::faultHandler(regs*)+0x670>
c0014f7d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014f80:	83 c4 10             	add    esp,0x10
c0014f83:	eb 15                	jmp    c0014f9a <Vm::faultHandler(regs*)+0x673>
c0014f85:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014f88:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014f8b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014f90:	74 03                	je     c0014f95 <Vm::faultHandler(regs*)+0x66e>
c0014f92:	ef                   	out    dx,eax
c0014f93:	eb 02                	jmp    c0014f97 <Vm::faultHandler(regs*)+0x670>
c0014f95:	66 ef                	out    dx,ax
c0014f97:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014f9a:	b0 01                	mov    al,0x1
c0014f9c:	eb 56                	jmp    c0014ff4 <Vm::faultHandler(regs*)+0x6cd>
c0014f9e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014fa2:	50                   	push   eax
c0014fa3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014fa7:	50                   	push   eax
c0014fa8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014fac:	50                   	push   eax
c0014fad:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014fb1:	50                   	push   eax
c0014fb2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014fb6:	50                   	push   eax
c0014fb7:	52                   	push   edx
c0014fb8:	52                   	push   edx
c0014fb9:	68 97 ec 01 c0       	push   0xc001ec97
c0014fbe:	e8 69 59 ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c0014fc3:	83 c4 20             	add    esp,0x20
c0014fc6:	83 ec 0c             	sub    esp,0xc
c0014fc9:	6a 60                	push   0x60
c0014fcb:	e8 99 f4 ff ff       	call   c0014469 <Vm::inbv(unsigned short)>
c0014fd0:	83 c4 10             	add    esp,0x10
c0014fd3:	3c 1c                	cmp    al,0x1c
c0014fd5:	74 04                	je     c0014fdb <Vm::faultHandler(regs*)+0x6b4>
c0014fd7:	3c 5a                	cmp    al,0x5a
c0014fd9:	75 eb                	jne    c0014fc6 <Vm::faultHandler(regs*)+0x69f>
c0014fdb:	3c 5a                	cmp    al,0x5a
c0014fdd:	74 04                	je     c0014fe3 <Vm::faultHandler(regs*)+0x6bc>
c0014fdf:	3c 1c                	cmp    al,0x1c
c0014fe1:	75 0f                	jne    c0014ff2 <Vm::faultHandler(regs*)+0x6cb>
c0014fe3:	83 ec 0c             	sub    esp,0xc
c0014fe6:	6a 60                	push   0x60
c0014fe8:	e8 7c f4 ff ff       	call   c0014469 <Vm::inbv(unsigned short)>
c0014fed:	83 c4 10             	add    esp,0x10
c0014ff0:	eb e9                	jmp    c0014fdb <Vm::faultHandler(regs*)+0x6b4>
c0014ff2:	31 c0                	xor    eax,eax
c0014ff4:	83 c4 1c             	add    esp,0x1c
c0014ff7:	5b                   	pop    ebx
c0014ff8:	5e                   	pop    esi
c0014ff9:	5f                   	pop    edi
c0014ffa:	5d                   	pop    ebp
c0014ffb:	c3                   	ret    

c0014ffc <noCopro(unsigned long)>:
c0014ffc:	c3                   	ret    

c0014ffd <nmiHandler(regs*, void*)>:
c0014ffd:	83 ec 0c             	sub    esp,0xc
c0015000:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c0015005:	83 ec 0c             	sub    esp,0xc
c0015008:	50                   	push   eax
c0015009:	e8 a2 24 ff ff       	call   c00074b0 <Computer::handleNMI()>
c001500e:	83 c4 10             	add    esp,0x10
c0015011:	90                   	nop
c0015012:	83 c4 0c             	add    esp,0xc
c0015015:	c3                   	ret    

c0015016 <doubleFault(regs*, void*)>:
c0015016:	55                   	push   ebp
c0015017:	89 e5                	mov    ebp,esp
c0015019:	83 ec 08             	sub    esp,0x8
c001501c:	83 ec 0c             	sub    esp,0xc
c001501f:	68 f4 ec 01 c0       	push   0xc001ecf4
c0015024:	e8 66 b5 ff ff       	call   c001058f <KePanic(char const*)>
c0015029:	83 c4 10             	add    esp,0x10
c001502c:	90                   	nop
c001502d:	c9                   	leave  
c001502e:	c3                   	ret    

c001502f <displayDebugInfo(regs*)>:
c001502f:	83 ec 1c             	sub    esp,0x1c
c0015032:	0f 20 c0             	mov    eax,cr0
c0015035:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015039:	0f 20 d0             	mov    eax,cr2
c001503c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015040:	0f 20 d8             	mov    eax,cr3
c0015043:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015047:	0f 20 e0             	mov    eax,cr4
c001504a:	89 04 24             	mov    DWORD PTR [esp],eax
c001504d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015051:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015054:	83 ec 08             	sub    esp,0x8
c0015057:	50                   	push   eax
c0015058:	68 10 ed 01 c0       	push   0xc001ed10
c001505d:	e8 ca 58 ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c0015062:	83 c4 10             	add    esp,0x10
c0015065:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015069:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001506c:	83 ec 08             	sub    esp,0x8
c001506f:	50                   	push   eax
c0015070:	68 01 ed 01 c0       	push   0xc001ed01
c0015075:	e8 b2 58 ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c001507a:	83 c4 10             	add    esp,0x10
c001507d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015081:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015084:	83 ec 08             	sub    esp,0x8
c0015087:	50                   	push   eax
c0015088:	68 0c ed 01 c0       	push   0xc001ed0c
c001508d:	e8 9a 58 ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c0015092:	83 c4 10             	add    esp,0x10
c0015095:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015099:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001509c:	83 ec 08             	sub    esp,0x8
c001509f:	50                   	push   eax
c00150a0:	68 1b ed 01 c0       	push   0xc001ed1b
c00150a5:	e8 82 58 ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c00150aa:	83 c4 10             	add    esp,0x10
c00150ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150b1:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00150b4:	83 ec 08             	sub    esp,0x8
c00150b7:	50                   	push   eax
c00150b8:	68 26 ed 01 c0       	push   0xc001ed26
c00150bd:	e8 6a 58 ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c00150c2:	83 c4 10             	add    esp,0x10
c00150c5:	83 ec 08             	sub    esp,0x8
c00150c8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00150cc:	68 31 ed 01 c0       	push   0xc001ed31
c00150d1:	e8 56 58 ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c00150d6:	83 c4 10             	add    esp,0x10
c00150d9:	83 ec 08             	sub    esp,0x8
c00150dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00150e0:	68 3c ed 01 c0       	push   0xc001ed3c
c00150e5:	e8 42 58 ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c00150ea:	83 c4 10             	add    esp,0x10
c00150ed:	a1 90 3e 02 c0       	mov    eax,ds:0xc0023e90
c00150f2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150f8:	83 ec 0c             	sub    esp,0xc
c00150fb:	50                   	push   eax
c00150fc:	e8 ce 37 ff ff       	call   c00088cf <setActiveTerminal(VgaText*)>
c0015101:	83 c4 10             	add    esp,0x10
c0015104:	a1 90 3e 02 c0       	mov    eax,ds:0xc0023e90
c0015109:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001510f:	83 ec 08             	sub    esp,0x8
c0015112:	68 47 ed 01 c0       	push   0xc001ed47
c0015117:	50                   	push   eax
c0015118:	e8 f1 3a ff ff       	call   c0008c0e <VgaText::puts(char const*)>
c001511d:	83 c4 10             	add    esp,0x10
c0015120:	a1 90 3e 02 c0       	mov    eax,ds:0xc0023e90
c0015125:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001512b:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0015130:	8b 12                	mov    edx,DWORD PTR [edx]
c0015132:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015135:	83 c2 0c             	add    edx,0xc
c0015138:	83 ec 08             	sub    esp,0x8
c001513b:	52                   	push   edx
c001513c:	50                   	push   eax
c001513d:	e8 cc 3a ff ff       	call   c0008c0e <VgaText::puts(char const*)>
c0015142:	83 c4 10             	add    esp,0x10
c0015145:	a1 90 3e 02 c0       	mov    eax,ds:0xc0023e90
c001514a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015150:	83 ec 08             	sub    esp,0x8
c0015153:	68 50 ed 01 c0       	push   0xc001ed50
c0015158:	50                   	push   eax
c0015159:	e8 b0 3a ff ff       	call   c0008c0e <VgaText::puts(char const*)>
c001515e:	83 c4 10             	add    esp,0x10
c0015161:	a1 90 3e 02 c0       	mov    eax,ds:0xc0023e90
c0015166:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001516c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015170:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0015173:	83 ec 08             	sub    esp,0x8
c0015176:	52                   	push   edx
c0015177:	50                   	push   eax
c0015178:	e8 4b 3a ff ff       	call   c0008bc8 <VgaText::putx(unsigned int)>
c001517d:	83 c4 10             	add    esp,0x10
c0015180:	a1 90 3e 02 c0       	mov    eax,ds:0xc0023e90
c0015185:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001518b:	83 ec 08             	sub    esp,0x8
c001518e:	68 58 ed 01 c0       	push   0xc001ed58
c0015193:	50                   	push   eax
c0015194:	e8 75 3a ff ff       	call   c0008c0e <VgaText::puts(char const*)>
c0015199:	83 c4 10             	add    esp,0x10
c001519c:	a1 90 3e 02 c0       	mov    eax,ds:0xc0023e90
c00151a1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151a7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00151ab:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00151ae:	83 ec 08             	sub    esp,0x8
c00151b1:	52                   	push   edx
c00151b2:	50                   	push   eax
c00151b3:	e8 10 3a ff ff       	call   c0008bc8 <VgaText::putx(unsigned int)>
c00151b8:	83 c4 10             	add    esp,0x10
c00151bb:	a1 90 3e 02 c0       	mov    eax,ds:0xc0023e90
c00151c0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151c6:	83 ec 08             	sub    esp,0x8
c00151c9:	68 60 ed 01 c0       	push   0xc001ed60
c00151ce:	50                   	push   eax
c00151cf:	e8 3a 3a ff ff       	call   c0008c0e <VgaText::puts(char const*)>
c00151d4:	83 c4 10             	add    esp,0x10
c00151d7:	a1 90 3e 02 c0       	mov    eax,ds:0xc0023e90
c00151dc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151e2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00151e6:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00151e9:	83 ec 08             	sub    esp,0x8
c00151ec:	52                   	push   edx
c00151ed:	50                   	push   eax
c00151ee:	e8 d5 39 ff ff       	call   c0008bc8 <VgaText::putx(unsigned int)>
c00151f3:	83 c4 10             	add    esp,0x10
c00151f6:	a1 90 3e 02 c0       	mov    eax,ds:0xc0023e90
c00151fb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015201:	83 ec 08             	sub    esp,0x8
c0015204:	68 68 ed 01 c0       	push   0xc001ed68
c0015209:	50                   	push   eax
c001520a:	e8 ff 39 ff ff       	call   c0008c0e <VgaText::puts(char const*)>
c001520f:	83 c4 10             	add    esp,0x10
c0015212:	a1 90 3e 02 c0       	mov    eax,ds:0xc0023e90
c0015217:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001521d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015221:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015224:	83 ec 08             	sub    esp,0x8
c0015227:	52                   	push   edx
c0015228:	50                   	push   eax
c0015229:	e8 9a 39 ff ff       	call   c0008bc8 <VgaText::putx(unsigned int)>
c001522e:	83 c4 10             	add    esp,0x10
c0015231:	a1 90 3e 02 c0       	mov    eax,ds:0xc0023e90
c0015236:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001523c:	83 ec 08             	sub    esp,0x8
c001523f:	68 70 ed 01 c0       	push   0xc001ed70
c0015244:	50                   	push   eax
c0015245:	e8 c4 39 ff ff       	call   c0008c0e <VgaText::puts(char const*)>
c001524a:	83 c4 10             	add    esp,0x10
c001524d:	a1 90 3e 02 c0       	mov    eax,ds:0xc0023e90
c0015252:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015258:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001525c:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001525f:	83 ec 08             	sub    esp,0x8
c0015262:	52                   	push   edx
c0015263:	50                   	push   eax
c0015264:	e8 5f 39 ff ff       	call   c0008bc8 <VgaText::putx(unsigned int)>
c0015269:	83 c4 10             	add    esp,0x10
c001526c:	a1 90 3e 02 c0       	mov    eax,ds:0xc0023e90
c0015271:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015277:	83 ec 08             	sub    esp,0x8
c001527a:	68 78 ed 01 c0       	push   0xc001ed78
c001527f:	50                   	push   eax
c0015280:	e8 89 39 ff ff       	call   c0008c0e <VgaText::puts(char const*)>
c0015285:	83 c4 10             	add    esp,0x10
c0015288:	a1 90 3e 02 c0       	mov    eax,ds:0xc0023e90
c001528d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015293:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015297:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001529a:	83 ec 08             	sub    esp,0x8
c001529d:	52                   	push   edx
c001529e:	50                   	push   eax
c001529f:	e8 24 39 ff ff       	call   c0008bc8 <VgaText::putx(unsigned int)>
c00152a4:	83 c4 10             	add    esp,0x10
c00152a7:	a1 90 3e 02 c0       	mov    eax,ds:0xc0023e90
c00152ac:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152b2:	83 ec 08             	sub    esp,0x8
c00152b5:	68 80 ed 01 c0       	push   0xc001ed80
c00152ba:	50                   	push   eax
c00152bb:	e8 4e 39 ff ff       	call   c0008c0e <VgaText::puts(char const*)>
c00152c0:	83 c4 10             	add    esp,0x10
c00152c3:	a1 90 3e 02 c0       	mov    eax,ds:0xc0023e90
c00152c8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152ce:	83 ec 08             	sub    esp,0x8
c00152d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00152d5:	50                   	push   eax
c00152d6:	e8 ed 38 ff ff       	call   c0008bc8 <VgaText::putx(unsigned int)>
c00152db:	83 c4 10             	add    esp,0x10
c00152de:	a1 90 3e 02 c0       	mov    eax,ds:0xc0023e90
c00152e3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152e9:	83 ec 08             	sub    esp,0x8
c00152ec:	68 89 ed 01 c0       	push   0xc001ed89
c00152f1:	50                   	push   eax
c00152f2:	e8 17 39 ff ff       	call   c0008c0e <VgaText::puts(char const*)>
c00152f7:	83 c4 10             	add    esp,0x10
c00152fa:	a1 90 3e 02 c0       	mov    eax,ds:0xc0023e90
c00152ff:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015305:	83 ec 08             	sub    esp,0x8
c0015308:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001530c:	50                   	push   eax
c001530d:	e8 b6 38 ff ff       	call   c0008bc8 <VgaText::putx(unsigned int)>
c0015312:	83 c4 10             	add    esp,0x10
c0015315:	a1 90 3e 02 c0       	mov    eax,ds:0xc0023e90
c001531a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015320:	83 ec 08             	sub    esp,0x8
c0015323:	68 91 ed 01 c0       	push   0xc001ed91
c0015328:	50                   	push   eax
c0015329:	e8 e0 38 ff ff       	call   c0008c0e <VgaText::puts(char const*)>
c001532e:	83 c4 10             	add    esp,0x10
c0015331:	a1 90 3e 02 c0       	mov    eax,ds:0xc0023e90
c0015336:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001533c:	83 ec 08             	sub    esp,0x8
c001533f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015343:	50                   	push   eax
c0015344:	e8 7f 38 ff ff       	call   c0008bc8 <VgaText::putx(unsigned int)>
c0015349:	83 c4 10             	add    esp,0x10
c001534c:	fa                   	cli    
c001534d:	f4                   	hlt    
c001534e:	eb fe                	jmp    c001534e <displayDebugInfo(regs*)+0x31f>

c0015350 <HalSystemIdle()>:
c0015350:	56                   	push   esi
c0015351:	53                   	push   ebx
c0015352:	83 ec 14             	sub    esp,0x14
c0015355:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c001535a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015360:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0015366:	83 e0 04             	and    eax,0x4
c0015369:	84 c0                	test   al,al
c001536b:	0f 95 c0             	setne  al
c001536e:	84 c0                	test   al,al
c0015370:	74 4c                	je     c00153be <HalSystemIdle()+0x6e>
c0015372:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c0015377:	83 ec 08             	sub    esp,0x8
c001537a:	68 e1 00 00 00       	push   0xe1
c001537f:	50                   	push   eax
c0015380:	e8 43 1f ff ff       	call   c00072c8 <Computer::rdmsr(unsigned int)>
c0015385:	83 c4 10             	add    esp,0x10
c0015388:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001538c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015390:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c0015395:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015399:	83 e2 02             	and    edx,0x2
c001539c:	89 d3                	mov    ebx,edx
c001539e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00153a2:	83 e2 00             	and    edx,0x0
c00153a5:	89 d6                	mov    esi,edx
c00153a7:	56                   	push   esi
c00153a8:	53                   	push   ebx
c00153a9:	68 e1 00 00 00       	push   0xe1
c00153ae:	50                   	push   eax
c00153af:	e8 40 1f ff ff       	call   c00072f4 <Computer::wrmsr(unsigned int, unsigned long long)>
c00153b4:	83 c4 10             	add    esp,0x10
c00153b7:	e8 d8 ad fe ff       	call   c0000194 <doTPAUSE>
c00153bc:	eb 01                	jmp    c00153bf <HalSystemIdle()+0x6f>
c00153be:	f4                   	hlt    
c00153bf:	90                   	nop
c00153c0:	83 c4 14             	add    esp,0x14
c00153c3:	5b                   	pop    ebx
c00153c4:	5e                   	pop    esi
c00153c5:	c3                   	ret    

c00153c6 <displayProgramFault(char const*)>:
c00153c6:	83 ec 0c             	sub    esp,0xc
c00153c9:	83 ec 0c             	sub    esp,0xc
c00153cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00153d0:	e8 57 55 ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c00153d5:	83 c4 10             	add    esp,0x10
c00153d8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00153dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00153df:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153e2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153e8:	85 c0                	test   eax,eax
c00153ea:	74 21                	je     c001540d <displayProgramFault(char const*)+0x47>
c00153ec:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00153f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153f6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00153fc:	6a 04                	push   0x4
c00153fe:	6a 0f                	push   0xf
c0015400:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015404:	50                   	push   eax
c0015405:	e8 76 38 ff ff       	call   c0008c80 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001540a:	83 c4 10             	add    esp,0x10
c001540d:	90                   	nop
c001540e:	83 c4 0c             	add    esp,0xc
c0015411:	c3                   	ret    

c0015412 <gpFault(regs*, void*)>:
c0015412:	83 ec 1c             	sub    esp,0x1c
c0015415:	c7 05 10 3f 02 c0 27 49 01 c0 	mov    DWORD PTR ds:0xc0023f10,0xc0014927
c001541f:	a1 10 3f 02 c0       	mov    eax,ds:0xc0023f10
c0015424:	85 c0                	test   eax,eax
c0015426:	74 1c                	je     c0015444 <gpFault(regs*, void*)+0x32>
c0015428:	a1 10 3f 02 c0       	mov    eax,ds:0xc0023f10
c001542d:	83 ec 0c             	sub    esp,0xc
c0015430:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015434:	ff d0                	call   eax
c0015436:	83 c4 10             	add    esp,0x10
c0015439:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001543d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015442:	75 2e                	jne    c0015472 <gpFault(regs*, void*)+0x60>
c0015444:	83 ec 0c             	sub    esp,0xc
c0015447:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001544b:	e8 df fb ff ff       	call   c001502f <displayDebugInfo(regs*)>
c0015450:	83 c4 10             	add    esp,0x10
c0015453:	83 ec 0c             	sub    esp,0xc
c0015456:	68 99 ed 01 c0       	push   0xc001ed99
c001545b:	e8 66 ff ff ff       	call   c00153c6 <displayProgramFault(char const*)>
c0015460:	83 c4 10             	add    esp,0x10
c0015463:	83 ec 0c             	sub    esp,0xc
c0015466:	6a 00                	push   0x0
c0015468:	e8 af ee ff ff       	call   c001431c <Thr::terminateFromIRQ(int)>
c001546d:	83 c4 10             	add    esp,0x10
c0015470:	eb 01                	jmp    c0015473 <gpFault(regs*, void*)+0x61>
c0015472:	90                   	nop
c0015473:	83 c4 1c             	add    esp,0x1c
c0015476:	c3                   	ret    

c0015477 <pgFault(regs*, void*)>:
c0015477:	83 ec 1c             	sub    esp,0x1c
c001547a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001547e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015481:	0f 20 d0             	mov    eax,cr2
c0015484:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001548c:	83 ec 04             	sub    esp,0x4
c001548f:	52                   	push   edx
c0015490:	50                   	push   eax
c0015491:	68 78 ee 01 c0       	push   0xc001ee78
c0015496:	e8 91 54 ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c001549b:	83 c4 10             	add    esp,0x10
c001549e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00154a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00154a5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154a8:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00154ae:	0f 20 d2             	mov    edx,cr2
c00154b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00154b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00154b9:	83 ec 08             	sub    esp,0x8
c00154bc:	52                   	push   edx
c00154bd:	50                   	push   eax
c00154be:	e8 9b 50 ff ff       	call   c000a55e <VAS::tryLoadBackOffDisk(unsigned long)>
c00154c3:	83 c4 10             	add    esp,0x10
c00154c6:	84 c0                	test   al,al
c00154c8:	75 2e                	jne    c00154f8 <pgFault(regs*, void*)+0x81>
c00154ca:	83 ec 0c             	sub    esp,0xc
c00154cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00154d1:	e8 59 fb ff ff       	call   c001502f <displayDebugInfo(regs*)>
c00154d6:	83 c4 10             	add    esp,0x10
c00154d9:	83 ec 0c             	sub    esp,0xc
c00154dc:	68 b2 ed 01 c0       	push   0xc001edb2
c00154e1:	e8 e0 fe ff ff       	call   c00153c6 <displayProgramFault(char const*)>
c00154e6:	83 c4 10             	add    esp,0x10
c00154e9:	83 ec 0c             	sub    esp,0xc
c00154ec:	6a 00                	push   0x0
c00154ee:	e8 29 ee ff ff       	call   c001431c <Thr::terminateFromIRQ(int)>
c00154f3:	83 c4 10             	add    esp,0x10
c00154f6:	eb 01                	jmp    c00154f9 <pgFault(regs*, void*)+0x82>
c00154f8:	90                   	nop
c00154f9:	83 c4 1c             	add    esp,0x1c
c00154fc:	c3                   	ret    

c00154fd <otherISRHandler(regs*, void*)>:
c00154fd:	83 ec 0c             	sub    esp,0xc
c0015500:	83 ec 0c             	sub    esp,0xc
c0015503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015507:	e8 23 fb ff ff       	call   c001502f <displayDebugInfo(regs*)>
c001550c:	83 c4 10             	add    esp,0x10
c001550f:	83 ec 0c             	sub    esp,0xc
c0015512:	68 a0 ee 01 c0       	push   0xc001eea0
c0015517:	e8 aa fe ff ff       	call   c00153c6 <displayProgramFault(char const*)>
c001551c:	83 c4 10             	add    esp,0x10
c001551f:	83 ec 0c             	sub    esp,0xc
c0015522:	6a 00                	push   0x0
c0015524:	e8 f3 ed ff ff       	call   c001431c <Thr::terminateFromIRQ(int)>
c0015529:	83 c4 10             	add    esp,0x10
c001552c:	90                   	nop
c001552d:	83 c4 0c             	add    esp,0xc
c0015530:	c3                   	ret    

c0015531 <opcodeFault(regs*, void*)>:
c0015531:	55                   	push   ebp
c0015532:	89 e5                	mov    ebp,esp
c0015534:	83 ec 08             	sub    esp,0x8
c0015537:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001553a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001553d:	83 ec 08             	sub    esp,0x8
c0015540:	50                   	push   eax
c0015541:	68 bd ed 01 c0       	push   0xc001edbd
c0015546:	e8 e1 53 ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c001554b:	83 c4 10             	add    esp,0x10
c001554e:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c0015553:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015559:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001555f:	84 c0                	test   al,al
c0015561:	74 21                	je     c0015584 <opcodeFault(regs*, void*)+0x53>
c0015563:	83 ec 0c             	sub    esp,0xc
c0015566:	68 c8 ee 01 c0       	push   0xc001eec8
c001556b:	e8 bc 53 ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c0015570:	83 c4 10             	add    esp,0x10
c0015573:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015576:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015579:	8d 50 19             	lea    edx,[eax+0x19]
c001557c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001557f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015582:	eb 2b                	jmp    c00155af <opcodeFault(regs*, void*)+0x7e>
c0015584:	83 ec 0c             	sub    esp,0xc
c0015587:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001558a:	e8 a0 fa ff ff       	call   c001502f <displayDebugInfo(regs*)>
c001558f:	83 c4 10             	add    esp,0x10
c0015592:	83 ec 0c             	sub    esp,0xc
c0015595:	68 cb ed 01 c0       	push   0xc001edcb
c001559a:	e8 27 fe ff ff       	call   c00153c6 <displayProgramFault(char const*)>
c001559f:	83 c4 10             	add    esp,0x10
c00155a2:	83 ec 0c             	sub    esp,0xc
c00155a5:	6a 00                	push   0x0
c00155a7:	e8 70 ed ff ff       	call   c001431c <Thr::terminateFromIRQ(int)>
c00155ac:	83 c4 10             	add    esp,0x10
c00155af:	c9                   	leave  
c00155b0:	c3                   	ret    

c00155b1 <i386SaveCoprocessor(void*)>:
c00155b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00155b5:	83 c0 3f             	add    eax,0x3f
c00155b8:	83 e0 c0             	and    eax,0xffffffc0
c00155bb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00155bf:	ff 25 0c 3f 02 c0    	jmp    DWORD PTR ds:0xc0023f0c

c00155c5 <i386LoadCoprocessor(void*)>:
c00155c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00155c9:	83 c0 3f             	add    eax,0x3f
c00155cc:	83 e0 c0             	and    eax,0xffffffc0
c00155cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00155d3:	ff 25 08 3f 02 c0    	jmp    DWORD PTR ds:0xc0023f08

c00155d9 <x87EmulHandler(regs*, void*)>:
c00155d9:	53                   	push   ebx
c00155da:	83 ec 08             	sub    esp,0x8
c00155dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155e2:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00155e6:	74 10                	je     c00155f8 <x87EmulHandler(regs*, void*)+0x1f>
c00155e8:	83 ec 0c             	sub    esp,0xc
c00155eb:	68 d8 ed 01 c0       	push   0xc001edd8
c00155f0:	e8 9a af ff ff       	call   c001058f <KePanic(char const*)>
c00155f5:	83 c4 10             	add    esp,0x10
c00155f8:	0f 20 c0             	mov    eax,cr0
c00155fb:	a8 08                	test   al,0x8
c00155fd:	74 59                	je     c0015658 <x87EmulHandler(regs*, void*)+0x7f>
c00155ff:	0f 06                	clts   
c0015601:	a1 04 3f 02 c0       	mov    eax,ds:0xc0023f04
c0015606:	85 c0                	test   eax,eax
c0015608:	74 0e                	je     c0015618 <x87EmulHandler(regs*, void*)+0x3f>
c001560a:	83 ec 0c             	sub    esp,0xc
c001560d:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015610:	e8 9c ff ff ff       	call   c00155b1 <i386SaveCoprocessor(void*)>
c0015615:	83 c4 10             	add    esp,0x10
c0015618:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001561e:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0015622:	75 12                	jne    c0015636 <x87EmulHandler(regs*, void*)+0x5d>
c0015624:	83 ec 0c             	sub    esp,0xc
c0015627:	68 40 02 00 00       	push   0x240
c001562c:	e8 60 26 ff ff       	call   c0007c91 <malloc>
c0015631:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0015634:	eb 10                	jmp    c0015646 <x87EmulHandler(regs*, void*)+0x6d>
c0015636:	83 ec 0c             	sub    esp,0xc
c0015639:	a1 04 3f 02 c0       	mov    eax,ds:0xc0023f04
c001563e:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015641:	e8 7f ff ff ff       	call   c00155c5 <i386LoadCoprocessor(void*)>
c0015646:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001564b:	83 c4 10             	add    esp,0x10
c001564e:	a3 04 3f 02 c0       	mov    ds:0xc0023f04,eax
c0015653:	83 c4 08             	add    esp,0x8
c0015656:	5b                   	pop    ebx
c0015657:	c3                   	ret    
c0015658:	83 ec 0c             	sub    esp,0xc
c001565b:	68 ec ed 01 c0       	push   0xc001edec
c0015660:	e8 c7 52 ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c0015665:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001566d:	83 c4 18             	add    esp,0x18
c0015670:	5b                   	pop    ebx
c0015671:	e9 a6 ec ff ff       	jmp    c001431c <Thr::terminateFromIRQ(int)>

c0015676 <HalInitialiseCoprocessor()>:
c0015676:	83 ec 10             	sub    esp,0x10
c0015679:	c7 05 04 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023f04,0x0
c0015683:	6a 00                	push   0x0
c0015685:	68 d9 55 01 c0       	push   0xc00155d9
c001568a:	6a 07                	push   0x7
c001568c:	e8 0f 6c ff ff       	call   c000c2a0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015691:	e8 7a 65 00 00       	call   c001bc10 <avxDetect>
c0015696:	83 c4 10             	add    esp,0x10
c0015699:	85 c0                	test   eax,eax
c001569b:	74 1c                	je     c00156b9 <HalInitialiseCoprocessor()+0x43>
c001569d:	c7 05 0c 3f 02 c0 3a bc 01 c0 	mov    DWORD PTR ds:0xc0023f0c,0xc001bc3a
c00156a7:	c7 05 08 3f 02 c0 4b bc 01 c0 	mov    DWORD PTR ds:0xc0023f08,0xc001bc4b
c00156b1:	83 c4 0c             	add    esp,0xc
c00156b4:	e9 a3 65 00 00       	jmp    c001bc5c <avxInit>
c00156b9:	e8 d2 67 00 00       	call   c001be90 <absolutelyNoChanceInHell>
c00156be:	85 c0                	test   eax,eax
c00156c0:	74 1c                	je     c00156de <HalInitialiseCoprocessor()+0x68>
c00156c2:	c7 05 0c 3f 02 c0 a8 be 01 c0 	mov    DWORD PTR ds:0xc0023f0c,0xc001bea8
c00156cc:	c7 05 08 3f 02 c0 b0 be 01 c0 	mov    DWORD PTR ds:0xc0023f08,0xc001beb0
c00156d6:	83 c4 0c             	add    esp,0xc
c00156d9:	e9 da 67 00 00       	jmp    c001beb8 <sseInit>
c00156de:	e8 f3 67 00 00       	call   c001bed6 <x87Detect>
c00156e3:	85 c0                	test   eax,eax
c00156e5:	74 1c                	je     c0015703 <HalInitialiseCoprocessor()+0x8d>
c00156e7:	c7 05 0c 3f 02 c0 f1 be 01 c0 	mov    DWORD PTR ds:0xc0023f0c,0xc001bef1
c00156f1:	c7 05 08 3f 02 c0 f8 be 01 c0 	mov    DWORD PTR ds:0xc0023f08,0xc001bef8
c00156fb:	83 c4 0c             	add    esp,0xc
c00156fe:	e9 fc 67 00 00       	jmp    c001beff <x87Init>
c0015703:	c7 05 0c 3f 02 c0 fc 4f 01 c0 	mov    DWORD PTR ds:0xc0023f0c,0xc0014ffc
c001570d:	c7 05 08 3f 02 c0 fc 4f 01 c0 	mov    DWORD PTR ds:0xc0023f08,0xc0014ffc
c0015717:	0f 20 c0             	mov    eax,cr0
c001571a:	83 c8 04             	or     eax,0x4
c001571d:	0f 22 c0             	mov    cr0,eax
c0015720:	83 c4 0c             	add    esp,0xc
c0015723:	c3                   	ret    

c0015724 <HalPanic(char const*)>:
c0015724:	53                   	push   ebx
c0015725:	83 ec 10             	sub    esp,0x10
c0015728:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001572c:	fa                   	cli    
c001572d:	53                   	push   ebx
c001572e:	68 02 ee 01 c0       	push   0xc001ee02
c0015733:	e8 f4 51 ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c0015738:	83 c4 0c             	add    esp,0xc
c001573b:	6a 01                	push   0x1
c001573d:	6a 0f                	push   0xf
c001573f:	ff 35 04 0a 02 c0    	push   DWORD PTR ds:0xc0020a04
c0015745:	e8 d8 2f ff ff       	call   c0008722 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001574a:	58                   	pop    eax
c001574b:	ff 35 04 0a 02 c0    	push   DWORD PTR ds:0xc0020a04
c0015751:	e8 c4 31 ff ff       	call   c000891a <VgaText::clearScreen()>
c0015756:	5a                   	pop    edx
c0015757:	59                   	pop    ecx
c0015758:	68 6a ee 01 c0       	push   0xc001ee6a
c001575d:	ff 35 04 0a 02 c0    	push   DWORD PTR ds:0xc0020a04
c0015763:	e8 f2 2f ff ff       	call   c000875a <VgaText::setTitle(char*)>
c0015768:	83 c4 0c             	add    esp,0xc
c001576b:	6a 01                	push   0x1
c001576d:	6a 0f                	push   0xf
c001576f:	ff 35 04 0a 02 c0    	push   DWORD PTR ds:0xc0020a04
c0015775:	e8 a8 2f ff ff       	call   c0008722 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001577a:	58                   	pop    eax
c001577b:	5a                   	pop    edx
c001577c:	68 1b ee 01 c0       	push   0xc001ee1b
c0015781:	ff 35 04 0a 02 c0    	push   DWORD PTR ds:0xc0020a04
c0015787:	e8 82 34 ff ff       	call   c0008c0e <VgaText::puts(char const*)>
c001578c:	83 c4 0c             	add    esp,0xc
c001578f:	6a 0f                	push   0xf
c0015791:	6a 01                	push   0x1
c0015793:	ff 35 04 0a 02 c0    	push   DWORD PTR ds:0xc0020a04
c0015799:	e8 84 2f ff ff       	call   c0008722 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001579e:	59                   	pop    ecx
c001579f:	58                   	pop    eax
c00157a0:	68 24 ee 01 c0       	push   0xc001ee24
c00157a5:	ff 35 04 0a 02 c0    	push   DWORD PTR ds:0xc0020a04
c00157ab:	e8 5e 34 ff ff       	call   c0008c0e <VgaText::puts(char const*)>
c00157b0:	83 c4 0c             	add    esp,0xc
c00157b3:	6a 01                	push   0x1
c00157b5:	6a 0f                	push   0xf
c00157b7:	ff 35 04 0a 02 c0    	push   DWORD PTR ds:0xc0020a04
c00157bd:	e8 60 2f ff ff       	call   c0008722 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00157c2:	58                   	pop    eax
c00157c3:	5a                   	pop    edx
c00157c4:	68 68 ee 01 c0       	push   0xc001ee68
c00157c9:	ff 35 04 0a 02 c0    	push   DWORD PTR ds:0xc0020a04
c00157cf:	e8 3a 34 ff ff       	call   c0008c0e <VgaText::puts(char const*)>
c00157d4:	59                   	pop    ecx
c00157d5:	58                   	pop    eax
c00157d6:	68 31 ee 01 c0       	push   0xc001ee31
c00157db:	ff 35 04 0a 02 c0    	push   DWORD PTR ds:0xc0020a04
c00157e1:	e8 28 34 ff ff       	call   c0008c0e <VgaText::puts(char const*)>
c00157e6:	58                   	pop    eax
c00157e7:	5a                   	pop    edx
c00157e8:	68 6b ee 01 c0       	push   0xc001ee6b
c00157ed:	ff 35 04 0a 02 c0    	push   DWORD PTR ds:0xc0020a04
c00157f3:	e8 16 34 ff ff       	call   c0008c0e <VgaText::puts(char const*)>
c00157f8:	59                   	pop    ecx
c00157f9:	58                   	pop    eax
c00157fa:	53                   	push   ebx
c00157fb:	ff 35 04 0a 02 c0    	push   DWORD PTR ds:0xc0020a04
c0015801:	e8 08 34 ff ff       	call   c0008c0e <VgaText::puts(char const*)>
c0015806:	58                   	pop    eax
c0015807:	5a                   	pop    edx
c0015808:	68 68 ee 01 c0       	push   0xc001ee68
c001580d:	ff 35 04 0a 02 c0    	push   DWORD PTR ds:0xc0020a04
c0015813:	e8 f6 33 ff ff       	call   c0008c0e <VgaText::puts(char const*)>
c0015818:	83 c4 10             	add    esp,0x10
c001581b:	eb fe                	jmp    c001581b <HalPanic(char const*)+0xf7>

c001581d <HalQueryPerformanceCounter()>:
c001581d:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c0015822:	31 d2                	xor    edx,edx
c0015824:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001582a:	31 c0                	xor    eax,eax
c001582c:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0015833:	74 02                	je     c0015837 <HalQueryPerformanceCounter()+0x1a>
c0015835:	0f 31                	rdtsc  
c0015837:	c3                   	ret    

c0015838 <HalInitialise()>:
c0015838:	53                   	push   ebx
c0015839:	83 ec 08             	sub    esp,0x8
c001583c:	e8 92 6c ff ff       	call   c000c4d3 <setupINTS()>
c0015841:	80 3d 80 32 02 c0 00 	cmp    BYTE PTR ds:0xc0023280,0x0
c0015848:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c001584d:	75 07                	jne    c0015856 <HalInitialise()+0x1e>
c001584f:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0015856:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001585c:	83 e0 01             	and    eax,0x1
c001585f:	a2 00 3f 02 c0       	mov    ds:0xc0023f00,al
c0015864:	e8 a7 02 00 00       	call   c0015b10 <picOpen()>
c0015869:	80 3d 00 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023f00,0x0
c0015870:	74 0a                	je     c001587c <HalInitialise()+0x44>
c0015872:	e8 e1 01 00 00       	call   c0015a58 <picDisable()>
c0015877:	e8 08 5d 00 00       	call   c001b584 <apicOpen()>
c001587c:	bb 0f 00 00 00       	mov    ebx,0xf
c0015881:	50                   	push   eax
c0015882:	6a 00                	push   0x0
c0015884:	68 fd 54 01 c0       	push   0xc00154fd
c0015889:	6a 00                	push   0x0
c001588b:	e8 10 6a ff ff       	call   c000c2a0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015890:	83 c4 0c             	add    esp,0xc
c0015893:	6a 00                	push   0x0
c0015895:	68 fd 54 01 c0       	push   0xc00154fd
c001589a:	6a 01                	push   0x1
c001589c:	e8 ff 69 ff ff       	call   c000c2a0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158a1:	83 c4 0c             	add    esp,0xc
c00158a4:	6a 00                	push   0x0
c00158a6:	68 fd 4f 01 c0       	push   0xc0014ffd
c00158ab:	6a 02                	push   0x2
c00158ad:	e8 ee 69 ff ff       	call   c000c2a0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158b2:	83 c4 0c             	add    esp,0xc
c00158b5:	6a 00                	push   0x0
c00158b7:	68 fd 54 01 c0       	push   0xc00154fd
c00158bc:	6a 03                	push   0x3
c00158be:	e8 dd 69 ff ff       	call   c000c2a0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158c3:	83 c4 0c             	add    esp,0xc
c00158c6:	6a 00                	push   0x0
c00158c8:	68 fd 54 01 c0       	push   0xc00154fd
c00158cd:	6a 04                	push   0x4
c00158cf:	e8 cc 69 ff ff       	call   c000c2a0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158d4:	83 c4 0c             	add    esp,0xc
c00158d7:	6a 00                	push   0x0
c00158d9:	68 fd 54 01 c0       	push   0xc00154fd
c00158de:	6a 05                	push   0x5
c00158e0:	e8 bb 69 ff ff       	call   c000c2a0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158e5:	83 c4 0c             	add    esp,0xc
c00158e8:	6a 00                	push   0x0
c00158ea:	68 31 55 01 c0       	push   0xc0015531
c00158ef:	6a 06                	push   0x6
c00158f1:	e8 aa 69 ff ff       	call   c000c2a0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158f6:	83 c4 0c             	add    esp,0xc
c00158f9:	6a 00                	push   0x0
c00158fb:	68 16 50 01 c0       	push   0xc0015016
c0015900:	6a 08                	push   0x8
c0015902:	e8 99 69 ff ff       	call   c000c2a0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015907:	83 c4 0c             	add    esp,0xc
c001590a:	6a 00                	push   0x0
c001590c:	68 fd 54 01 c0       	push   0xc00154fd
c0015911:	6a 09                	push   0x9
c0015913:	e8 88 69 ff ff       	call   c000c2a0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015918:	83 c4 0c             	add    esp,0xc
c001591b:	6a 00                	push   0x0
c001591d:	68 fd 54 01 c0       	push   0xc00154fd
c0015922:	6a 0a                	push   0xa
c0015924:	e8 77 69 ff ff       	call   c000c2a0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015929:	83 c4 0c             	add    esp,0xc
c001592c:	6a 00                	push   0x0
c001592e:	68 fd 54 01 c0       	push   0xc00154fd
c0015933:	6a 0b                	push   0xb
c0015935:	e8 66 69 ff ff       	call   c000c2a0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001593a:	83 c4 0c             	add    esp,0xc
c001593d:	6a 00                	push   0x0
c001593f:	68 12 54 01 c0       	push   0xc0015412
c0015944:	6a 0d                	push   0xd
c0015946:	e8 55 69 ff ff       	call   c000c2a0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001594b:	83 c4 0c             	add    esp,0xc
c001594e:	6a 00                	push   0x0
c0015950:	68 77 54 01 c0       	push   0xc0015477
c0015955:	6a 0e                	push   0xe
c0015957:	e8 44 69 ff ff       	call   c000c2a0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001595c:	83 c4 10             	add    esp,0x10
c001595f:	50                   	push   eax
c0015960:	6a 00                	push   0x0
c0015962:	68 fd 54 01 c0       	push   0xc00154fd
c0015967:	53                   	push   ebx
c0015968:	43                   	inc    ebx
c0015969:	e8 32 69 ff ff       	call   c000c2a0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001596e:	83 c4 10             	add    esp,0x10
c0015971:	83 fb 1e             	cmp    ebx,0x1e
c0015974:	75 e9                	jne    c001595f <HalInitialise()+0x127>
c0015976:	50                   	push   eax
c0015977:	6a 00                	push   0x0
c0015979:	68 0a 16 01 c0       	push   0xc001160a
c001597e:	6a 60                	push   0x60
c0015980:	e8 1b 69 ff ff       	call   c000c2a0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015985:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c001598a:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0015994:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001599b:	e8 f1 22 ff ff       	call   c0007c91 <malloc>
c00159a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00159a3:	89 c3                	mov    ebx,eax
c00159a5:	e8 2e 09 00 00       	call   c00162d8 <RTC::RTC()>
c00159aa:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00159b4:	5a                   	pop    edx
c00159b5:	59                   	pop    ecx
c00159b6:	53                   	push   ebx
c00159b7:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c00159bd:	e8 aa 63 ff ff       	call   c000bd6c <Device::addChild(Device*)>
c00159c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00159c4:	6a 00                	push   0x0
c00159c6:	6a 00                	push   0x0
c00159c8:	6a 00                	push   0x0
c00159ca:	53                   	push   ebx
c00159cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00159ce:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c00159d3:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00159d9:	83 c4 28             	add    esp,0x28
c00159dc:	5b                   	pop    ebx
c00159dd:	c3                   	ret    

c00159de <HalMakeBeep(int)>:
c00159de:	53                   	push   ebx
c00159df:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00159e3:	85 db                	test   ebx,ebx
c00159e5:	75 07                	jne    c00159ee <HalMakeBeep(int)+0x10>
c00159e7:	e4 61                	in     al,0x61
c00159e9:	83 e0 fc             	and    eax,0xfffffffc
c00159ec:	eb 26                	jmp    c0015a14 <HalMakeBeep(int)+0x36>
c00159ee:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00159f3:	99                   	cdq    
c00159f4:	f7 fb                	idiv   ebx
c00159f6:	89 c1                	mov    ecx,eax
c00159f8:	b0 b6                	mov    al,0xb6
c00159fa:	e6 43                	out    0x43,al
c00159fc:	88 c8                	mov    al,cl
c00159fe:	e6 42                	out    0x42,al
c0015a00:	89 c8                	mov    eax,ecx
c0015a02:	c1 e8 08             	shr    eax,0x8
c0015a05:	e6 42                	out    0x42,al
c0015a07:	e4 61                	in     al,0x61
c0015a09:	88 c2                	mov    dl,al
c0015a0b:	83 ca 03             	or     edx,0x3
c0015a0e:	38 c2                	cmp    dl,al
c0015a10:	74 04                	je     c0015a16 <HalMakeBeep(int)+0x38>
c0015a12:	88 d0                	mov    al,dl
c0015a14:	e6 61                	out    0x61,al
c0015a16:	5b                   	pop    ebx
c0015a17:	c3                   	ret    

c0015a18 <HalGetRand()>:
c0015a18:	31 c0                	xor    eax,eax
c0015a1a:	c3                   	ret    

c0015a1b <HalEndOfInterrupt(int)>:
c0015a1b:	80 3d 00 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023f00,0x0
c0015a22:	74 23                	je     c0015a47 <HalEndOfInterrupt(int)+0x2c>
c0015a24:	83 ec 14             	sub    esp,0x14
c0015a27:	6a 1b                	push   0x1b
c0015a29:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0015a2f:	e8 94 18 ff ff       	call   c00072c8 <Computer::rdmsr(unsigned int)>
c0015a34:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015a39:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0015a43:	83 c4 1c             	add    esp,0x1c
c0015a46:	c3                   	ret    
c0015a47:	e9 54 02 00 00       	jmp    c0015ca0 <picEOI(int)>

c0015a4c <HalRestart()>:
c0015a4c:	c3                   	ret    

c0015a4d <HalShutdown()>:
c0015a4d:	c3                   	ret    

c0015a4e <HalSleep()>:
c0015a4e:	c3                   	ret    
c0015a4f:	90                   	nop

c0015a50 <picIoWait()>:
c0015a50:	eb 00                	jmp    c0015a52 <picIoWait()+0x2>
c0015a52:	eb 00                	jmp    c0015a54 <picIoWait()+0x4>
c0015a54:	90                   	nop
c0015a55:	c3                   	ret    
c0015a56:	66 90                	xchg   ax,ax

c0015a58 <picDisable()>:
c0015a58:	83 ec 10             	sub    esp,0x10
c0015a5b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0015a62:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0015a67:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015a6b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015a70:	ee                   	out    dx,al
c0015a71:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0015a78:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0015a7d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015a81:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0015a86:	ee                   	out    dx,al
c0015a87:	90                   	nop
c0015a88:	83 c4 10             	add    esp,0x10
c0015a8b:	c3                   	ret    

c0015a8c <picGetIRQReg(int)>:
c0015a8c:	83 ec 10             	sub    esp,0x10
c0015a8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a93:	25 ff 00 00 00       	and    eax,0xff
c0015a98:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015a9f:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015aa3:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015aa7:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015aac:	ee                   	out    dx,al
c0015aad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ab1:	25 ff 00 00 00       	and    eax,0xff
c0015ab6:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015abd:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015ac1:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015ac5:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015aca:	ee                   	out    dx,al
c0015acb:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0015ad2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0015ad7:	89 c2                	mov    edx,eax
c0015ad9:	ec                   	in     al,dx
c0015ada:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015ade:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015ae2:	25 ff 00 00 00       	and    eax,0xff
c0015ae7:	c1 e0 08             	shl    eax,0x8
c0015aea:	89 c1                	mov    ecx,eax
c0015aec:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0015af3:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015af8:	89 c2                	mov    edx,eax
c0015afa:	ec                   	in     al,dx
c0015afb:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0015aff:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015b03:	25 ff 00 00 00       	and    eax,0xff
c0015b08:	09 c8                	or     eax,ecx
c0015b0a:	83 c4 10             	add    esp,0x10
c0015b0d:	c3                   	ret    
c0015b0e:	66 90                	xchg   ax,ax

c0015b10 <picOpen()>:
c0015b10:	83 ec 50             	sub    esp,0x50
c0015b13:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015b1a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015b1f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015b23:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b27:	ee                   	out    dx,al
c0015b28:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0015b2f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0015b34:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015b38:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015b3c:	ee                   	out    dx,al
c0015b3d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0015b45:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015b4d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0015b54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015b58:	89 c2                	mov    edx,eax
c0015b5a:	ec                   	in     al,dx
c0015b5b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0015b5f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015b63:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015b67:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0015b6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015b72:	89 c2                	mov    edx,eax
c0015b74:	ec                   	in     al,dx
c0015b75:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015b79:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015b7d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015b81:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015b88:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015b8d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015b91:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015b95:	ee                   	out    dx,al
c0015b96:	e8 b5 fe ff ff       	call   c0015a50 <picIoWait()>
c0015b9b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015ba2:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015ba7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015bab:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015baf:	ee                   	out    dx,al
c0015bb0:	e8 9b fe ff ff       	call   c0015a50 <picIoWait()>
c0015bb5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015bb9:	25 ff 00 00 00       	and    eax,0xff
c0015bbe:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015bc5:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015bc9:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015bcd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015bd1:	ee                   	out    dx,al
c0015bd2:	e8 79 fe ff ff       	call   c0015a50 <picIoWait()>
c0015bd7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015bdb:	25 ff 00 00 00       	and    eax,0xff
c0015be0:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015be7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015beb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015bef:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015bf3:	ee                   	out    dx,al
c0015bf4:	e8 57 fe ff ff       	call   c0015a50 <picIoWait()>
c0015bf9:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015c00:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015c05:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015c09:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015c0d:	ee                   	out    dx,al
c0015c0e:	e8 3d fe ff ff       	call   c0015a50 <picIoWait()>
c0015c13:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015c1a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015c1f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015c23:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015c27:	ee                   	out    dx,al
c0015c28:	e8 23 fe ff ff       	call   c0015a50 <picIoWait()>
c0015c2d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015c34:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015c39:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015c3d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015c41:	ee                   	out    dx,al
c0015c42:	e8 09 fe ff ff       	call   c0015a50 <picIoWait()>
c0015c47:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015c4e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015c53:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015c57:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015c5b:	ee                   	out    dx,al
c0015c5c:	e8 ef fd ff ff       	call   c0015a50 <picIoWait()>
c0015c61:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015c65:	25 ff 00 00 00       	and    eax,0xff
c0015c6a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015c71:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015c75:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015c79:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015c7d:	ee                   	out    dx,al
c0015c7e:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015c82:	25 ff 00 00 00       	and    eax,0xff
c0015c87:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015c8e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015c92:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015c96:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015c9a:	ee                   	out    dx,al
c0015c9b:	90                   	nop
c0015c9c:	83 c4 50             	add    esp,0x50
c0015c9f:	c3                   	ret    

c0015ca0 <picEOI(int)>:
c0015ca0:	83 ec 10             	sub    esp,0x10
c0015ca3:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015ca8:	75 22                	jne    c0015ccc <picEOI(int)+0x2c>
c0015caa:	6a 0b                	push   0xb
c0015cac:	e8 db fd ff ff       	call   c0015a8c <picGetIRQReg(int)>
c0015cb1:	83 c4 04             	add    esp,0x4
c0015cb4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015cb9:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015cbe:	25 ff ff 00 00       	and    eax,0xffff
c0015cc3:	25 80 00 00 00       	and    eax,0x80
c0015cc8:	74 72                	je     c0015d3c <picEOI(int)+0x9c>
c0015cca:	66 90                	xchg   ax,ax
c0015ccc:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015cd1:	75 31                	jne    c0015d04 <picEOI(int)+0x64>
c0015cd3:	6a 0b                	push   0xb
c0015cd5:	e8 b2 fd ff ff       	call   c0015a8c <picGetIRQReg(int)>
c0015cda:	83 c4 04             	add    esp,0x4
c0015cdd:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015ce2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015ce6:	66 85 c0             	test   ax,ax
c0015ce9:	78 19                	js     c0015d04 <picEOI(int)+0x64>
c0015ceb:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015cf2:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015cf7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015cfb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015d00:	ee                   	out    dx,al
c0015d01:	eb 3d                	jmp    c0015d40 <picEOI(int)+0xa0>
c0015d03:	90                   	nop
c0015d04:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015d09:	7e 19                	jle    c0015d24 <picEOI(int)+0x84>
c0015d0b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015d12:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015d17:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015d1b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015d20:	ee                   	out    dx,al
c0015d21:	8d 76 00             	lea    esi,[esi+0x0]
c0015d24:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015d2b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015d30:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015d34:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015d39:	ee                   	out    dx,al
c0015d3a:	eb 04                	jmp    c0015d40 <picEOI(int)+0xa0>
c0015d3c:	90                   	nop
c0015d3d:	8d 76 00             	lea    esi,[esi+0x0]
c0015d40:	83 c4 10             	add    esp,0x10
c0015d43:	c3                   	ret    

c0015d44 <RTC::open(int, int, void*)>:
c0015d44:	31 c0                	xor    eax,eax
c0015d46:	c3                   	ret    
c0015d47:	90                   	nop

c0015d48 <RTC::close(int, int, void*)>:
c0015d48:	31 c0                	xor    eax,eax
c0015d4a:	c3                   	ret    
c0015d4b:	90                   	nop

c0015d4c <RTC::timeInSecondsUTC()>:
c0015d4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d50:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015d56:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015d5c:	c3                   	ret    
c0015d5d:	90                   	nop

c0015d5e <RTC::timeInDatetimeUTC()>:
c0015d5e:	53                   	push   ebx
c0015d5f:	83 ec 14             	sub    esp,0x14
c0015d62:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015d66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0015d6c:	50                   	push   eax
c0015d6d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015d70:	83 c4 0c             	add    esp,0xc
c0015d73:	52                   	push   edx
c0015d74:	50                   	push   eax
c0015d75:	53                   	push   ebx
c0015d76:	e8 65 5d ff ff       	call   c000bae0 <secondsToDatetime(unsigned long long)>
c0015d7b:	89 d8                	mov    eax,ebx
c0015d7d:	83 c4 14             	add    esp,0x14
c0015d80:	5b                   	pop    ebx
c0015d81:	c2 04 00             	ret    0x4

c0015d84 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015d84:	56                   	push   esi
c0015d85:	53                   	push   ebx
c0015d86:	83 ec 14             	sub    esp,0x14
c0015d89:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015d8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d8f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015d92:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015d96:	52                   	push   edx
c0015d97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d9f:	50                   	push   eax
c0015da0:	e8 3b 5d ff ff       	call   c000bae0 <secondsToDatetime(unsigned long long)>
c0015da5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015da9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015dad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015db1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015db5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015db9:	89 f0                	mov    eax,esi
c0015dbb:	83 c4 20             	add    esp,0x20
c0015dbe:	5b                   	pop    ebx
c0015dbf:	5e                   	pop    esi
c0015dc0:	ff e0                	jmp    eax

c0015dc2 <RTC::~RTC()>:
c0015dc2:	83 ec 0c             	sub    esp,0xc
c0015dc5:	ba 08 ef 01 c0       	mov    edx,0xc001ef08
c0015dca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dce:	89 10                	mov    DWORD PTR [eax],edx
c0015dd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dd4:	83 ec 0c             	sub    esp,0xc
c0015dd7:	50                   	push   eax
c0015dd8:	e8 87 5a ff ff       	call   c000b864 <Clock::~Clock()>
c0015ddd:	83 c4 10             	add    esp,0x10
c0015de0:	90                   	nop
c0015de1:	83 c4 0c             	add    esp,0xc
c0015de4:	c3                   	ret    
c0015de5:	90                   	nop

c0015de6 <RTC::~RTC()>:
c0015de6:	83 ec 0c             	sub    esp,0xc
c0015de9:	83 ec 0c             	sub    esp,0xc
c0015dec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015df0:	e8 cd ff ff ff       	call   c0015dc2 <RTC::~RTC()>
c0015df5:	83 c4 10             	add    esp,0x10
c0015df8:	83 ec 08             	sub    esp,0x8
c0015dfb:	68 60 01 00 00       	push   0x160
c0015e00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e04:	e8 2d 4a ff ff       	call   c000a836 <operator delete(void*, unsigned long)>
c0015e09:	83 c4 10             	add    esp,0x10
c0015e0c:	83 c4 0c             	add    esp,0xc
c0015e0f:	c3                   	ret    

c0015e10 <RTC::get_update_in_progress_flag()>:
c0015e10:	83 ec 14             	sub    esp,0x14
c0015e13:	6a 0a                	push   0xa
c0015e15:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0015e1b:	e8 5c 15 ff ff       	call   c000737c <Computer::readCMOS(unsigned char)>
c0015e20:	83 c4 1c             	add    esp,0x1c
c0015e23:	c0 e8 07             	shr    al,0x7
c0015e26:	c3                   	ret    
c0015e27:	90                   	nop

c0015e28 <RTC::completeRTCRefresh()>:
c0015e28:	55                   	push   ebp
c0015e29:	57                   	push   edi
c0015e2a:	56                   	push   esi
c0015e2b:	53                   	push   ebx
c0015e2c:	83 ec 2c             	sub    esp,0x2c
c0015e2f:	8b 1d 8c 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f8c
c0015e35:	83 ec 0c             	sub    esp,0xc
c0015e38:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015e3c:	e8 cf ff ff ff       	call   c0015e10 <RTC::get_update_in_progress_flag()>
c0015e41:	83 c4 10             	add    esp,0x10
c0015e44:	84 c0                	test   al,al
c0015e46:	74 0e                	je     c0015e56 <RTC::completeRTCRefresh()+0x2e>
c0015e48:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015e4e:	3b 05 8c 2f 02 c0    	cmp    eax,DWORD PTR ds:0xc0022f8c
c0015e54:	73 df                	jae    c0015e35 <RTC::completeRTCRefresh()+0xd>
c0015e56:	55                   	push   ebp
c0015e57:	55                   	push   ebp
c0015e58:	6a 00                	push   0x0
c0015e5a:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0015e60:	e8 17 15 ff ff       	call   c000737c <Computer::readCMOS(unsigned char)>
c0015e65:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015e69:	58                   	pop    eax
c0015e6a:	5a                   	pop    edx
c0015e6b:	6a 02                	push   0x2
c0015e6d:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0015e73:	e8 04 15 ff ff       	call   c000737c <Computer::readCMOS(unsigned char)>
c0015e78:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015e7c:	59                   	pop    ecx
c0015e7d:	5b                   	pop    ebx
c0015e7e:	6a 04                	push   0x4
c0015e80:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0015e86:	e8 f1 14 ff ff       	call   c000737c <Computer::readCMOS(unsigned char)>
c0015e8b:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015e8f:	5e                   	pop    esi
c0015e90:	5f                   	pop    edi
c0015e91:	6a 07                	push   0x7
c0015e93:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0015e99:	e8 de 14 ff ff       	call   c000737c <Computer::readCMOS(unsigned char)>
c0015e9e:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015ea2:	5d                   	pop    ebp
c0015ea3:	58                   	pop    eax
c0015ea4:	6a 08                	push   0x8
c0015ea6:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0015eac:	e8 cb 14 ff ff       	call   c000737c <Computer::readCMOS(unsigned char)>
c0015eb1:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015eb5:	58                   	pop    eax
c0015eb6:	5a                   	pop    edx
c0015eb7:	6a 09                	push   0x9
c0015eb9:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0015ebf:	e8 b8 14 ff ff       	call   c000737c <Computer::readCMOS(unsigned char)>
c0015ec4:	83 c4 10             	add    esp,0x10
c0015ec7:	0f b6 e8             	movzx  ebp,al
c0015eca:	8b 1d 8c 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f8c
c0015ed0:	83 ec 0c             	sub    esp,0xc
c0015ed3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015ed7:	e8 34 ff ff ff       	call   c0015e10 <RTC::get_update_in_progress_flag()>
c0015edc:	83 c4 10             	add    esp,0x10
c0015edf:	84 c0                	test   al,al
c0015ee1:	74 0e                	je     c0015ef1 <RTC::completeRTCRefresh()+0xc9>
c0015ee3:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015ee9:	3b 05 8c 2f 02 c0    	cmp    eax,DWORD PTR ds:0xc0022f8c
c0015eef:	73 df                	jae    c0015ed0 <RTC::completeRTCRefresh()+0xa8>
c0015ef1:	50                   	push   eax
c0015ef2:	50                   	push   eax
c0015ef3:	6a 00                	push   0x0
c0015ef5:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0015efb:	e8 7c 14 ff ff       	call   c000737c <Computer::readCMOS(unsigned char)>
c0015f00:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015f04:	58                   	pop    eax
c0015f05:	5a                   	pop    edx
c0015f06:	6a 02                	push   0x2
c0015f08:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0015f0e:	e8 69 14 ff ff       	call   c000737c <Computer::readCMOS(unsigned char)>
c0015f13:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015f17:	59                   	pop    ecx
c0015f18:	5b                   	pop    ebx
c0015f19:	6a 04                	push   0x4
c0015f1b:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0015f21:	e8 56 14 ff ff       	call   c000737c <Computer::readCMOS(unsigned char)>
c0015f26:	5e                   	pop    esi
c0015f27:	88 c3                	mov    bl,al
c0015f29:	5f                   	pop    edi
c0015f2a:	6a 07                	push   0x7
c0015f2c:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0015f32:	e8 45 14 ff ff       	call   c000737c <Computer::readCMOS(unsigned char)>
c0015f37:	89 c6                	mov    esi,eax
c0015f39:	58                   	pop    eax
c0015f3a:	5a                   	pop    edx
c0015f3b:	6a 08                	push   0x8
c0015f3d:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0015f43:	e8 34 14 ff ff       	call   c000737c <Computer::readCMOS(unsigned char)>
c0015f48:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015f4c:	59                   	pop    ecx
c0015f4d:	5f                   	pop    edi
c0015f4e:	6a 09                	push   0x9
c0015f50:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0015f56:	e8 21 14 ff ff       	call   c000737c <Computer::readCMOS(unsigned char)>
c0015f5b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015f5f:	0f b6 f8             	movzx  edi,al
c0015f62:	83 c4 10             	add    esp,0x10
c0015f65:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015f69:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015f6d:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015f71:	89 f1                	mov    ecx,esi
c0015f73:	0f 94 c0             	sete   al
c0015f76:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015f7a:	0f 94 c2             	sete   dl
c0015f7d:	21 d0                	and    eax,edx
c0015f7f:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015f83:	0f 94 c2             	sete   dl
c0015f86:	21 c2                	and    edx,eax
c0015f88:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015f8c:	0f 94 c0             	sete   al
c0015f8f:	21 d0                	and    eax,edx
c0015f91:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015f95:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015f99:	0f 94 c1             	sete   cl
c0015f9c:	84 c8                	test   al,cl
c0015f9e:	75 29                	jne    c0015fc9 <RTC::completeRTCRefresh()+0x1a1>
c0015fa0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015fa4:	89 fd                	mov    ebp,edi
c0015fa6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015faa:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015fae:	89 f0                	mov    eax,esi
c0015fb0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015fb4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015fb8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015fbc:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015fc0:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015fc4:	e9 01 ff ff ff       	jmp    c0015eca <RTC::completeRTCRefresh()+0xa2>
c0015fc9:	39 fd                	cmp    ebp,edi
c0015fcb:	75 d3                	jne    c0015fa0 <RTC::completeRTCRefresh()+0x178>
c0015fcd:	55                   	push   ebp
c0015fce:	55                   	push   ebp
c0015fcf:	6a 0b                	push   0xb
c0015fd1:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0015fd7:	e8 a0 13 ff ff       	call   c000737c <Computer::readCMOS(unsigned char)>
c0015fdc:	83 c4 10             	add    esp,0x10
c0015fdf:	89 c5                	mov    ebp,eax
c0015fe1:	a8 04                	test   al,0x4
c0015fe3:	75 78                	jne    c001605d <RTC::completeRTCRefresh()+0x235>
c0015fe5:	b1 0a                	mov    cl,0xa
c0015fe7:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015feb:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015fef:	83 e2 0f             	and    edx,0xf
c0015ff2:	c0 e8 04             	shr    al,0x4
c0015ff5:	c1 ef 04             	shr    edi,0x4
c0015ff8:	f6 e1                	mul    cl
c0015ffa:	6b ff 0a             	imul   edi,edi,0xa
c0015ffd:	01 d0                	add    eax,edx
c0015fff:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0016003:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0016007:	83 e2 0f             	and    edx,0xf
c001600a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001600e:	c0 e8 04             	shr    al,0x4
c0016011:	f6 e1                	mul    cl
c0016013:	01 d0                	add    eax,edx
c0016015:	88 da                	mov    dl,bl
c0016017:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001601b:	83 e2 0f             	and    edx,0xf
c001601e:	88 d8                	mov    al,bl
c0016020:	83 e3 80             	and    ebx,0xffffff80
c0016023:	c0 e8 04             	shr    al,0x4
c0016026:	83 e0 07             	and    eax,0x7
c0016029:	f6 e1                	mul    cl
c001602b:	01 d0                	add    eax,edx
c001602d:	89 f2                	mov    edx,esi
c001602f:	09 c3                	or     ebx,eax
c0016031:	83 e2 0f             	and    edx,0xf
c0016034:	89 f0                	mov    eax,esi
c0016036:	c0 e8 04             	shr    al,0x4
c0016039:	f6 e1                	mul    cl
c001603b:	8d 34 02             	lea    esi,[edx+eax*1]
c001603e:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0016042:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0016046:	83 e2 0f             	and    edx,0xf
c0016049:	c0 e8 04             	shr    al,0x4
c001604c:	f6 e1                	mul    cl
c001604e:	01 d0                	add    eax,edx
c0016050:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0016054:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016058:	83 e0 0f             	and    eax,0xf
c001605b:	01 c7                	add    edi,eax
c001605d:	83 e5 02             	and    ebp,0x2
c0016060:	75 14                	jne    c0016076 <RTC::completeRTCRefresh()+0x24e>
c0016062:	84 db                	test   bl,bl
c0016064:	79 10                	jns    c0016076 <RTC::completeRTCRefresh()+0x24e>
c0016066:	83 e3 7f             	and    ebx,0x7f
c0016069:	b9 18 00 00 00       	mov    ecx,0x18
c001606e:	8d 43 0c             	lea    eax,[ebx+0xc]
c0016071:	99                   	cdq    
c0016072:	f7 f9                	idiv   ecx
c0016074:	88 d3                	mov    bl,dl
c0016076:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001607c:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0016082:	77 06                	ja     c001608a <RTC::completeRTCRefresh()+0x262>
c0016084:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c001608a:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c001608f:	31 d2                	xor    edx,edx
c0016091:	c1 e1 10             	shl    ecx,0x10
c0016094:	89 d7                	mov    edi,edx
c0016096:	c1 e5 10             	shl    ebp,0x10
c0016099:	31 c0                	xor    eax,eax
c001609b:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c00160a1:	09 cf                	or     edi,ecx
c00160a3:	89 fa                	mov    edx,edi
c00160a5:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c00160a9:	88 da                	mov    dl,bl
c00160ab:	89 f3                	mov    ebx,esi
c00160ad:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c00160b1:	88 d8                	mov    al,bl
c00160b3:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c00160b7:	0f b7 c8             	movzx  ecx,ax
c00160ba:	09 e9                	or     ecx,ebp
c00160bc:	89 c8                	mov    eax,ecx
c00160be:	51                   	push   ecx
c00160bf:	51                   	push   ecx
c00160c0:	52                   	push   edx
c00160c1:	50                   	push   eax
c00160c2:	e8 8c 58 ff ff       	call   c000b953 <datetimeToSeconds(datetime_t)>
c00160c7:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00160cb:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00160d1:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00160d7:	83 c4 3c             	add    esp,0x3c
c00160da:	5b                   	pop    ebx
c00160db:	5e                   	pop    esi
c00160dc:	5f                   	pop    edi
c00160dd:	5d                   	pop    ebp
c00160de:	c3                   	ret    
c00160df:	90                   	nop

c00160e0 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00160e0:	55                   	push   ebp
c00160e1:	57                   	push   edi
c00160e2:	56                   	push   esi
c00160e3:	53                   	push   ebx
c00160e4:	83 ec 30             	sub    esp,0x30
c00160e7:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00160eb:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00160ef:	6a 00                	push   0x0
c00160f1:	6a 00                	push   0x0
c00160f3:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c00160f9:	e8 94 13 ff ff       	call   c0007492 <Computer::writeCMOS(unsigned char, unsigned char)>
c00160fe:	83 c4 0c             	add    esp,0xc
c0016101:	6a 00                	push   0x0
c0016103:	6a 02                	push   0x2
c0016105:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c001610b:	e8 82 13 ff ff       	call   c0007492 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016110:	31 d2                	xor    edx,edx
c0016112:	89 f9                	mov    ecx,edi
c0016114:	89 f8                	mov    eax,edi
c0016116:	c1 e9 10             	shr    ecx,0x10
c0016119:	0f b6 c4             	movzx  eax,ah
c001611c:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0016120:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0016124:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016128:	b9 64 00 00 00       	mov    ecx,0x64
c001612d:	89 f0                	mov    eax,esi
c001612f:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0016133:	89 f0                	mov    eax,esi
c0016135:	0f b6 c4             	movzx  eax,ah
c0016138:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001613c:	89 f0                	mov    eax,esi
c001613e:	c1 e8 10             	shr    eax,0x10
c0016141:	66 f7 f1             	div    cx
c0016144:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0016149:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c001614e:	59                   	pop    ecx
c001614f:	5b                   	pop    ebx
c0016150:	89 fb                	mov    ebx,edi
c0016152:	6a 0b                	push   0xb
c0016154:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c001615a:	e8 1d 12 ff ff       	call   c000737c <Computer::readCMOS(unsigned char)>
c001615f:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0016163:	83 c4 10             	add    esp,0x10
c0016166:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c001616b:	75 74                	jne    c00161e1 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c001616d:	b2 0a                	mov    dl,0xa
c001616f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016173:	0f b6 c1             	movzx  eax,cl
c0016176:	f6 f2                	div    dl
c0016178:	88 c3                	mov    bl,al
c001617a:	88 e0                	mov    al,ah
c001617c:	c1 e3 04             	shl    ebx,0x4
c001617f:	09 c3                	or     ebx,eax
c0016181:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016186:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c001618a:	f6 f2                	div    dl
c001618c:	88 c1                	mov    cl,al
c001618e:	88 e0                	mov    al,ah
c0016190:	c1 e1 04             	shl    ecx,0x4
c0016193:	09 c1                	or     ecx,eax
c0016195:	89 f8                	mov    eax,edi
c0016197:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001619b:	0f b6 c0             	movzx  eax,al
c001619e:	f6 f2                	div    dl
c00161a0:	88 c3                	mov    bl,al
c00161a2:	88 e0                	mov    al,ah
c00161a4:	c1 e3 04             	shl    ebx,0x4
c00161a7:	09 c3                	or     ebx,eax
c00161a9:	89 f0                	mov    eax,esi
c00161ab:	0f b6 c0             	movzx  eax,al
c00161ae:	f6 f2                	div    dl
c00161b0:	88 c1                	mov    cl,al
c00161b2:	88 e0                	mov    al,ah
c00161b4:	c1 e1 04             	shl    ecx,0x4
c00161b7:	09 c1                	or     ecx,eax
c00161b9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00161be:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c00161c2:	f6 f2                	div    dl
c00161c4:	88 c1                	mov    cl,al
c00161c6:	88 e0                	mov    al,ah
c00161c8:	c1 e1 04             	shl    ecx,0x4
c00161cb:	09 c1                	or     ecx,eax
c00161cd:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c00161d2:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00161d6:	f6 f2                	div    dl
c00161d8:	89 c5                	mov    ebp,eax
c00161da:	88 e0                	mov    al,ah
c00161dc:	c1 e5 04             	shl    ebp,0x4
c00161df:	09 c5                	or     ebp,eax
c00161e1:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c00161e6:	75 17                	jne    c00161ff <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161e8:	80 fb 0b             	cmp    bl,0xb
c00161eb:	76 0c                	jbe    c00161f9 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c00161ed:	80 eb 0c             	sub    bl,0xc
c00161f0:	75 02                	jne    c00161f4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00161f2:	b3 0c                	mov    bl,0xc
c00161f4:	83 cb 80             	or     ebx,0xffffff80
c00161f7:	eb 06                	jmp    c00161ff <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161f9:	84 db                	test   bl,bl
c00161fb:	75 02                	jne    c00161ff <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00161fd:	b3 0c                	mov    bl,0xc
c00161ff:	0f b6 db             	movzx  ebx,bl
c0016202:	50                   	push   eax
c0016203:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0016208:	50                   	push   eax
c0016209:	6a 00                	push   0x0
c001620b:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0016211:	e8 7c 12 ff ff       	call   c0007492 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016216:	83 c4 0c             	add    esp,0xc
c0016219:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001621e:	50                   	push   eax
c001621f:	6a 02                	push   0x2
c0016221:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0016227:	e8 66 12 ff ff       	call   c0007492 <Computer::writeCMOS(unsigned char, unsigned char)>
c001622c:	83 c4 0c             	add    esp,0xc
c001622f:	53                   	push   ebx
c0016230:	6a 04                	push   0x4
c0016232:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0016238:	e8 55 12 ff ff       	call   c0007492 <Computer::writeCMOS(unsigned char, unsigned char)>
c001623d:	83 c4 0c             	add    esp,0xc
c0016240:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0016245:	50                   	push   eax
c0016246:	6a 07                	push   0x7
c0016248:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c001624e:	e8 3f 12 ff ff       	call   c0007492 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016253:	83 c4 0c             	add    esp,0xc
c0016256:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001625b:	50                   	push   eax
c001625c:	6a 08                	push   0x8
c001625e:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c0016264:	e8 29 12 ff ff       	call   c0007492 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016269:	83 c4 0c             	add    esp,0xc
c001626c:	89 e8                	mov    eax,ebp
c001626e:	0f b6 e8             	movzx  ebp,al
c0016271:	55                   	push   ebp
c0016272:	6a 09                	push   0x9
c0016274:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c001627a:	e8 13 12 ff ff       	call   c0007492 <Computer::writeCMOS(unsigned char, unsigned char)>
c001627f:	5a                   	pop    edx
c0016280:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016284:	e8 9f fb ff ff       	call   c0015e28 <RTC::completeRTCRefresh()>
c0016289:	83 c4 3c             	add    esp,0x3c
c001628c:	b0 01                	mov    al,0x1
c001628e:	5b                   	pop    ebx
c001628f:	5e                   	pop    esi
c0016290:	5f                   	pop    edi
c0016291:	5d                   	pop    ebp
c0016292:	c3                   	ret    

c0016293 <rtcIRQHandler(regs*, void*)>:
c0016293:	53                   	push   ebx
c0016294:	83 ec 10             	sub    esp,0x10
c0016297:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001629b:	6a 0c                	push   0xc
c001629d:	ff 35 b8 09 02 c0    	push   DWORD PTR ds:0xc00209b8
c00162a3:	e8 d4 10 ff ff       	call   c000737c <Computer::readCMOS(unsigned char)>
c00162a8:	83 c4 10             	add    esp,0x10
c00162ab:	84 c0                	test   al,al
c00162ad:	79 24                	jns    c00162d3 <rtcIRQHandler(regs*, void*)+0x40>
c00162af:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00162b6:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00162bd:	66 ff 05 14 3f 02 c0 	inc    WORD PTR ds:0xc0023f14
c00162c4:	75 0d                	jne    c00162d3 <rtcIRQHandler(regs*, void*)+0x40>
c00162c6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00162ca:	83 c4 08             	add    esp,0x8
c00162cd:	5b                   	pop    ebx
c00162ce:	e9 55 fb ff ff       	jmp    c0015e28 <RTC::completeRTCRefresh()>
c00162d3:	83 c4 08             	add    esp,0x8
c00162d6:	5b                   	pop    ebx
c00162d7:	c3                   	ret    

c00162d8 <RTC::RTC()>:
c00162d8:	83 ec 1c             	sub    esp,0x1c
c00162db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162df:	83 ec 08             	sub    esp,0x8
c00162e2:	68 eb ee 01 c0       	push   0xc001eeeb
c00162e7:	50                   	push   eax
c00162e8:	e8 41 55 ff ff       	call   c000b82e <Clock::Clock(char const*)>
c00162ed:	83 c4 10             	add    esp,0x10
c00162f0:	ba 08 ef 01 c0       	mov    edx,0xc001ef08
c00162f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162f9:	89 10                	mov    DWORD PTR [eax],edx
c00162fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162ff:	83 ec 0c             	sub    esp,0xc
c0016302:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016306:	6a 01                	push   0x1
c0016308:	68 93 62 01 c0       	push   0xc0016293
c001630d:	6a 08                	push   0x8
c001630f:	50                   	push   eax
c0016310:	e8 03 5a ff ff       	call   c000bd18 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0016315:	83 c4 20             	add    esp,0x20
c0016318:	89 c2                	mov    edx,eax
c001631a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001631e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0016324:	fa                   	cli    
c0016325:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c001632a:	40                   	inc    eax
c001632b:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c0016330:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c0016335:	83 ec 08             	sub    esp,0x8
c0016338:	6a 0b                	push   0xb
c001633a:	50                   	push   eax
c001633b:	e8 3c 10 ff ff       	call   c000737c <Computer::readCMOS(unsigned char)>
c0016340:	83 c4 10             	add    esp,0x10
c0016343:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016347:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c001634c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0016350:	83 ca 10             	or     edx,0x10
c0016353:	81 e2 ff 00 00 00    	and    edx,0xff
c0016359:	83 ec 04             	sub    esp,0x4
c001635c:	52                   	push   edx
c001635d:	6a 0b                	push   0xb
c001635f:	50                   	push   eax
c0016360:	e8 2d 11 ff ff       	call   c0007492 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016365:	83 c4 10             	add    esp,0x10
c0016368:	83 ec 0c             	sub    esp,0xc
c001636b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001636f:	e8 b4 fa ff ff       	call   c0015e28 <RTC::completeRTCRefresh()>
c0016374:	83 c4 10             	add    esp,0x10
c0016377:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c001637c:	48                   	dec    eax
c001637d:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c0016382:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c0016387:	85 c0                	test   eax,eax
c0016389:	75 01                	jne    c001638c <RTC::RTC()+0xb4>
c001638b:	fb                   	sti    
c001638c:	90                   	nop
c001638d:	83 c4 1c             	add    esp,0x1c
c0016390:	c3                   	ret    
c0016391:	66 90                	xchg   ax,ax
c0016393:	90                   	nop

c0016394 <HalConsoleScroll(int, int)>:
c0016394:	83 ec 10             	sub    esp,0x10
c0016397:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001639f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00163a7:	90                   	nop
c00163a8:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00163ad:	0f 8f e1 00 00 00    	jg     c0016494 <HalConsoleScroll(int, int)+0x100>
c00163b3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00163bb:	90                   	nop
c00163bc:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00163c4:	0f 8f be 00 00 00    	jg     c0016488 <HalConsoleScroll(int, int)+0xf4>
c00163ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163ce:	89 d0                	mov    eax,edx
c00163d0:	c1 e0 02             	shl    eax,0x2
c00163d3:	01 d0                	add    eax,edx
c00163d5:	c1 e0 05             	shl    eax,0x5
c00163d8:	89 c2                	mov    edx,eax
c00163da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163de:	01 d0                	add    eax,edx
c00163e0:	89 c2                	mov    edx,eax
c00163e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163e6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00163e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163ed:	89 d0                	mov    eax,edx
c00163ef:	c1 e0 02             	shl    eax,0x2
c00163f2:	01 d0                	add    eax,edx
c00163f4:	c1 e0 05             	shl    eax,0x5
c00163f7:	89 c2                	mov    edx,eax
c00163f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163fd:	01 d0                	add    eax,edx
c00163ff:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0016405:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016409:	01 c2                	add    edx,eax
c001640b:	8a 01                	mov    al,BYTE PTR [ecx]
c001640d:	88 02                	mov    BYTE PTR [edx],al
c001640f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016414:	75 66                	jne    c001647c <HalConsoleScroll(int, int)+0xe8>
c0016416:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001641a:	83 e0 01             	and    eax,0x1
c001641d:	74 39                	je     c0016458 <HalConsoleScroll(int, int)+0xc4>
c001641f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016423:	83 e0 0f             	and    eax,0xf
c0016426:	88 c2                	mov    dl,al
c0016428:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001642c:	c1 e0 04             	shl    eax,0x4
c001642f:	88 d1                	mov    cl,dl
c0016431:	09 c1                	or     ecx,eax
c0016433:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016437:	89 d0                	mov    eax,edx
c0016439:	c1 e0 02             	shl    eax,0x2
c001643c:	01 d0                	add    eax,edx
c001643e:	c1 e0 05             	shl    eax,0x5
c0016441:	89 c2                	mov    edx,eax
c0016443:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016447:	01 d0                	add    eax,edx
c0016449:	89 c2                	mov    edx,eax
c001644b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001644f:	01 d0                	add    eax,edx
c0016451:	88 ca                	mov    dl,cl
c0016453:	88 10                	mov    BYTE PTR [eax],dl
c0016455:	eb 25                	jmp    c001647c <HalConsoleScroll(int, int)+0xe8>
c0016457:	90                   	nop
c0016458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001645c:	89 d0                	mov    eax,edx
c001645e:	c1 e0 02             	shl    eax,0x2
c0016461:	01 d0                	add    eax,edx
c0016463:	c1 e0 05             	shl    eax,0x5
c0016466:	89 c2                	mov    edx,eax
c0016468:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001646c:	01 d0                	add    eax,edx
c001646e:	89 c2                	mov    edx,eax
c0016470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016474:	01 d0                	add    eax,edx
c0016476:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0016479:	8d 76 00             	lea    esi,[esi+0x0]
c001647c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0016480:	e9 37 ff ff ff       	jmp    c00163bc <HalConsoleScroll(int, int)+0x28>
c0016485:	8d 76 00             	lea    esi,[esi+0x0]
c0016488:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001648c:	e9 17 ff ff ff       	jmp    c00163a8 <HalConsoleScroll(int, int)+0x14>
c0016491:	8d 76 00             	lea    esi,[esi+0x0]
c0016494:	90                   	nop
c0016495:	83 c4 10             	add    esp,0x10
c0016498:	c3                   	ret    
c0016499:	8d 76 00             	lea    esi,[esi+0x0]

c001649c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001649c:	83 ec 14             	sub    esp,0x14
c001649f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00164a3:	88 04 24             	mov    BYTE PTR [esp],al
c00164a6:	8a 04 24             	mov    al,BYTE PTR [esp]
c00164a9:	25 ff 00 00 00       	and    eax,0xff
c00164ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00164b2:	89 d1                	mov    ecx,edx
c00164b4:	83 e1 0f             	and    ecx,0xf
c00164b7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00164bb:	c1 e2 04             	shl    edx,0x4
c00164be:	81 e2 ff 00 00 00    	and    edx,0xff
c00164c4:	09 ca                	or     edx,ecx
c00164c6:	c1 e2 08             	shl    edx,0x8
c00164c9:	09 d0                	or     eax,edx
c00164cb:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00164d0:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00164d8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00164dc:	89 d0                	mov    eax,edx
c00164de:	c1 e0 02             	shl    eax,0x2
c00164e1:	01 d0                	add    eax,edx
c00164e3:	c1 e0 04             	shl    eax,0x4
c00164e6:	89 c2                	mov    edx,eax
c00164e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00164ec:	01 d0                	add    eax,edx
c00164ee:	01 c0                	add    eax,eax
c00164f0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00164f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00164f8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00164fd:	66 89 02             	mov    WORD PTR [edx],ax
c0016500:	90                   	nop
c0016501:	83 c4 14             	add    esp,0x14
c0016504:	c3                   	ret    
c0016505:	8d 76 00             	lea    esi,[esi+0x0]

c0016508 <HalConsoleCursorUpdate(int, int)>:
c0016508:	83 ec 20             	sub    esp,0x20
c001650b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001650f:	89 c2                	mov    edx,eax
c0016511:	89 d0                	mov    eax,edx
c0016513:	c1 e0 02             	shl    eax,0x2
c0016516:	01 d0                	add    eax,edx
c0016518:	c1 e0 04             	shl    eax,0x4
c001651b:	89 c2                	mov    edx,eax
c001651d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016521:	01 d0                	add    eax,edx
c0016523:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0016528:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001652f:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0016534:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016538:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001653c:	ee                   	out    dx,al
c001653d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0016542:	25 ff 00 00 00       	and    eax,0xff
c0016547:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001654e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0016552:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0016556:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001655a:	ee                   	out    dx,al
c001655b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0016562:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0016567:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001656b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001656f:	ee                   	out    dx,al
c0016570:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0016575:	66 c1 e8 08          	shr    ax,0x8
c0016579:	25 ff 00 00 00       	and    eax,0xff
c001657e:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0016585:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016589:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001658d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016591:	ee                   	out    dx,al
c0016592:	90                   	nop
c0016593:	83 c4 20             	add    esp,0x20
c0016596:	c3                   	ret    
c0016597:	90                   	nop

c0016598 <FAT::getName()>:
c0016598:	b8 3c ef 01 c0       	mov    eax,0xc001ef3c
c001659d:	c3                   	ret    
c001659e:	66 90                	xchg   ax,ax

c00165a0 <FAT::tell(void*, unsigned long long*)>:
c00165a0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00165a5:	75 09                	jne    c00165b0 <FAT::tell(void*, unsigned long long*)+0x10>
c00165a7:	b8 04 00 00 00       	mov    eax,0x4
c00165ac:	c3                   	ret    
c00165ad:	8d 76 00             	lea    esi,[esi+0x0]
c00165b0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00165b5:	75 09                	jne    c00165c0 <FAT::tell(void*, unsigned long long*)+0x20>
c00165b7:	b8 04 00 00 00       	mov    eax,0x4
c00165bc:	c3                   	ret    
c00165bd:	8d 76 00             	lea    esi,[esi+0x0]
c00165c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165c4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00165c7:	ba 00 00 00 00       	mov    edx,0x0
c00165cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165d0:	89 01                	mov    DWORD PTR [ecx],eax
c00165d2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00165d5:	b8 00 00 00 00       	mov    eax,0x0
c00165da:	c3                   	ret    
c00165db:	90                   	nop

c00165dc <FAT::stat(void*, unsigned long long*)>:
c00165dc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00165e1:	75 09                	jne    c00165ec <FAT::stat(void*, unsigned long long*)+0x10>
c00165e3:	b8 04 00 00 00       	mov    eax,0x4
c00165e8:	c3                   	ret    
c00165e9:	8d 76 00             	lea    esi,[esi+0x0]
c00165ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00165f1:	75 09                	jne    c00165fc <FAT::stat(void*, unsigned long long*)+0x20>
c00165f3:	b8 04 00 00 00       	mov    eax,0x4
c00165f8:	c3                   	ret    
c00165f9:	8d 76 00             	lea    esi,[esi+0x0]
c00165fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016600:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0016603:	ba 00 00 00 00       	mov    edx,0x0
c0016608:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001660c:	89 01                	mov    DWORD PTR [ecx],eax
c001660e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016611:	b8 00 00 00 00       	mov    eax,0x0
c0016616:	c3                   	ret    
c0016617:	90                   	nop

c0016618 <FAT::~FAT()>:
c0016618:	83 ec 0c             	sub    esp,0xc
c001661b:	ba 88 ef 01 c0       	mov    edx,0xc001ef88
c0016620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016624:	89 10                	mov    DWORD PTR [eax],edx
c0016626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001662a:	83 ec 0c             	sub    esp,0xc
c001662d:	50                   	push   eax
c001662e:	e8 3f 46 ff ff       	call   c000ac72 <Filesystem::~Filesystem()>
c0016633:	83 c4 10             	add    esp,0x10
c0016636:	90                   	nop
c0016637:	83 c4 0c             	add    esp,0xc
c001663a:	c3                   	ret    
c001663b:	90                   	nop

c001663c <FAT::~FAT()>:
c001663c:	83 ec 0c             	sub    esp,0xc
c001663f:	83 ec 0c             	sub    esp,0xc
c0016642:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016646:	e8 cd ff ff ff       	call   c0016618 <FAT::~FAT()>
c001664b:	83 c4 10             	add    esp,0x10
c001664e:	83 ec 08             	sub    esp,0x8
c0016651:	6a 08                	push   0x8
c0016653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016657:	e8 da 41 ff ff       	call   c000a836 <operator delete(void*, unsigned long)>
c001665c:	83 c4 10             	add    esp,0x10
c001665f:	83 c4 0c             	add    esp,0xc
c0016662:	c3                   	ret    
c0016663:	90                   	nop

c0016664 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0016664:	83 ec 1c             	sub    esp,0x1c
c0016667:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001666e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0016673:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016677:	8b 04 85 40 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0c0]
c001667e:	83 f8 ff             	cmp    eax,0xffffffff
c0016681:	75 35                	jne    c00166b8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0016683:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016687:	88 c2                	mov    dl,al
c0016689:	a1 20 3f 02 c0       	mov    eax,ds:0xc0023f20
c001668e:	01 d0                	add    eax,edx
c0016690:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016694:	8b 15 20 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023f20
c001669a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001669e:	89 14 85 40 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0c0],edx
c00166a5:	a1 20 3f 02 c0       	mov    eax,ds:0xc0023f20
c00166aa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00166ae:	89 14 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],edx
c00166b5:	eb 19                	jmp    c00166d0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00166b7:	90                   	nop
c00166b8:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00166bc:	88 c2                	mov    dl,al
c00166be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00166c2:	8b 04 85 40 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0c0]
c00166c9:	01 d0                	add    eax,edx
c00166cb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00166cf:	90                   	nop
c00166d0:	83 ec 04             	sub    esp,0x4
c00166d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00166d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00166db:	8d 44 24 15          	lea    eax,[esp+0x15]
c00166df:	50                   	push   eax
c00166e0:	e8 6f e7 fe ff       	call   c0004e54 <f_getlabel>
c00166e5:	83 c4 10             	add    esp,0x10
c00166e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00166ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00166f1:	75 09                	jne    c00166fc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00166f3:	b8 00 00 00 00       	mov    eax,0x0
c00166f8:	eb 0a                	jmp    c0016704 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00166fa:	66 90                	xchg   ax,ax
c00166fc:	b8 01 00 00 00       	mov    eax,0x1
c0016701:	8d 76 00             	lea    esi,[esi+0x0]
c0016704:	83 c4 1c             	add    esp,0x1c
c0016707:	c3                   	ret    

c0016708 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0016708:	57                   	push   edi
c0016709:	83 ec 58             	sub    esp,0x58
c001670c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0016714:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016718:	b8 00 00 00 00       	mov    eax,0x0
c001671d:	b9 0f 00 00 00       	mov    ecx,0xf
c0016722:	fc                   	cld    
c0016723:	89 d7                	mov    edi,edx
c0016725:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0016727:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001672b:	8b 04 85 40 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0c0]
c0016732:	83 f8 ff             	cmp    eax,0xffffffff
c0016735:	75 35                	jne    c001676c <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0016737:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001673b:	88 c2                	mov    dl,al
c001673d:	a1 20 3f 02 c0       	mov    eax,ds:0xc0023f20
c0016742:	01 d0                	add    eax,edx
c0016744:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016748:	8b 15 20 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023f20
c001674e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016752:	89 14 85 40 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0c0],edx
c0016759:	a1 20 3f 02 c0       	mov    eax,ds:0xc0023f20
c001675e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0016762:	89 14 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],edx
c0016769:	eb 19                	jmp    c0016784 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001676b:	90                   	nop
c001676c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016770:	88 c2                	mov    dl,al
c0016772:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016776:	8b 04 85 40 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0c0]
c001677d:	01 d0                	add    eax,edx
c001677f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016783:	90                   	nop
c0016784:	83 ec 08             	sub    esp,0x8
c0016787:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001678b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001678f:	50                   	push   eax
c0016790:	e8 2b a0 fe ff       	call   c00007c0 <strcat>
c0016795:	83 c4 10             	add    esp,0x10
c0016798:	83 ec 0c             	sub    esp,0xc
c001679b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001679f:	50                   	push   eax
c00167a0:	e8 00 e8 fe ff       	call   c0004fa5 <f_setlabel>
c00167a5:	83 c4 10             	add    esp,0x10
c00167a8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00167ac:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00167b1:	75 09                	jne    c00167bc <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00167b3:	b8 00 00 00 00       	mov    eax,0x0
c00167b8:	eb 0a                	jmp    c00167c4 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00167ba:	66 90                	xchg   ax,ax
c00167bc:	b8 01 00 00 00       	mov    eax,0x1
c00167c1:	8d 76 00             	lea    esi,[esi+0x0]
c00167c4:	83 c4 58             	add    esp,0x58
c00167c7:	5f                   	pop    edi
c00167c8:	c3                   	ret    
c00167c9:	90                   	nop
c00167ca:	66 90                	xchg   ax,ax

c00167cc <FAT::format(LogicalDisk*, int, char const*, int)>:
c00167cc:	83 ec 2c             	sub    esp,0x2c
c00167cf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00167d7:	83 ec 08             	sub    esp,0x8
c00167da:	68 60 ef 01 c0       	push   0xc001ef60
c00167df:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167e3:	e8 f8 9e fe ff       	call   c00006e0 <strcmp>
c00167e8:	83 c4 10             	add    esp,0x10
c00167eb:	85 c0                	test   eax,eax
c00167ed:	0f 94 c0             	sete   al
c00167f0:	84 c0                	test   al,al
c00167f2:	74 10                	je     c0016804 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00167f4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00167fc:	e9 b3 00 00 00       	jmp    c00168b4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016801:	8d 76 00             	lea    esi,[esi+0x0]
c0016804:	83 ec 08             	sub    esp,0x8
c0016807:	68 52 ef 01 c0       	push   0xc001ef52
c001680c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016810:	e8 cb 9e fe ff       	call   c00006e0 <strcmp>
c0016815:	83 c4 10             	add    esp,0x10
c0016818:	85 c0                	test   eax,eax
c001681a:	0f 94 c0             	sete   al
c001681d:	84 c0                	test   al,al
c001681f:	74 0f                	je     c0016830 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0016821:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016829:	e9 86 00 00 00       	jmp    c00168b4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001682e:	66 90                	xchg   ax,ax
c0016830:	83 ec 08             	sub    esp,0x8
c0016833:	68 58 ef 01 c0       	push   0xc001ef58
c0016838:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001683c:	e8 9f 9e fe ff       	call   c00006e0 <strcmp>
c0016841:	83 c4 10             	add    esp,0x10
c0016844:	85 c0                	test   eax,eax
c0016846:	0f 94 c0             	sete   al
c0016849:	84 c0                	test   al,al
c001684b:	74 0b                	je     c0016858 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001684d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016855:	eb 5d                	jmp    c00168b4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016857:	90                   	nop
c0016858:	83 ec 08             	sub    esp,0x8
c001685b:	68 fc cf 01 c0       	push   0xc001cffc
c0016860:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016864:	e8 77 9e fe ff       	call   c00006e0 <strcmp>
c0016869:	83 c4 10             	add    esp,0x10
c001686c:	85 c0                	test   eax,eax
c001686e:	0f 94 c0             	sete   al
c0016871:	84 c0                	test   al,al
c0016873:	74 0b                	je     c0016880 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0016875:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001687d:	eb 35                	jmp    c00168b4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001687f:	90                   	nop
c0016880:	83 ec 08             	sub    esp,0x8
c0016883:	68 5e ef 01 c0       	push   0xc001ef5e
c0016888:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001688c:	e8 4f 9e fe ff       	call   c00006e0 <strcmp>
c0016891:	83 c4 10             	add    esp,0x10
c0016894:	85 c0                	test   eax,eax
c0016896:	0f 94 c0             	sete   al
c0016899:	84 c0                	test   al,al
c001689b:	74 0b                	je     c00168a8 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001689d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00168a5:	eb 0d                	jmp    c00168b4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00168a7:	90                   	nop
c00168a8:	b8 08 00 00 00       	mov    eax,0x8
c00168ad:	e9 ea 00 00 00       	jmp    c001699c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00168b2:	66 90                	xchg   ax,ax
c00168b4:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00168bb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00168c0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00168c4:	8b 04 85 40 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0c0]
c00168cb:	83 f8 ff             	cmp    eax,0xffffffff
c00168ce:	75 34                	jne    c0016904 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c00168d0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00168d4:	88 c2                	mov    dl,al
c00168d6:	a1 20 3f 02 c0       	mov    eax,ds:0xc0023f20
c00168db:	01 d0                	add    eax,edx
c00168dd:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00168e1:	8b 15 20 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023f20
c00168e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00168eb:	89 14 85 40 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0c0],edx
c00168f2:	a1 20 3f 02 c0       	mov    eax,ds:0xc0023f20
c00168f7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00168fb:	89 14 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],edx
c0016902:	eb 18                	jmp    c001691c <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c0016904:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016908:	88 c2                	mov    dl,al
c001690a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001690e:	8b 04 85 40 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0c0]
c0016915:	01 d0                	add    eax,edx
c0016917:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001691b:	90                   	nop
c001691c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016920:	88 04 24             	mov    BYTE PTR [esp],al
c0016923:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016927:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001692b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016933:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0016938:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016940:	83 ec 0c             	sub    esp,0xc
c0016943:	68 00 20 00 00       	push   0x2000
c0016948:	e8 44 13 ff ff       	call   c0007c91 <malloc>
c001694d:	83 c4 10             	add    esp,0x10
c0016950:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016954:	68 00 20 00 00       	push   0x2000
c0016959:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001695d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016961:	50                   	push   eax
c0016962:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0016966:	50                   	push   eax
c0016967:	e8 29 e9 fe ff       	call   c0005295 <f_mkfs>
c001696c:	83 c4 10             	add    esp,0x10
c001696f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016973:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016978:	75 0a                	jne    c0016984 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001697a:	b8 00 00 00 00       	mov    eax,0x0
c001697f:	eb 1b                	jmp    c001699c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016981:	8d 76 00             	lea    esi,[esi+0x0]
c0016984:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0016989:	75 09                	jne    c0016994 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001698b:	b8 09 00 00 00       	mov    eax,0x9
c0016990:	eb 0a                	jmp    c001699c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016992:	66 90                	xchg   ax,ax
c0016994:	b8 01 00 00 00       	mov    eax,0x1
c0016999:	8d 76 00             	lea    esi,[esi+0x0]
c001699c:	83 c4 2c             	add    esp,0x2c
c001699f:	c3                   	ret    

c00169a0 <FAT::tryMount(LogicalDisk*, int)>:
c00169a0:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00169a6:	a1 20 3f 02 c0       	mov    eax,ds:0xc0023f20
c00169ab:	83 f8 14             	cmp    eax,0x14
c00169ae:	75 18                	jne    c00169c8 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00169b0:	83 ec 0c             	sub    esp,0xc
c00169b3:	68 64 ef 01 c0       	push   0xc001ef64
c00169b8:	e8 d2 9b ff ff       	call   c001058f <KePanic(char const*)>
c00169bd:	83 c4 10             	add    esp,0x10
c00169c0:	b0 00                	mov    al,0x0
c00169c2:	e9 e9 01 00 00       	jmp    c0016bb0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169c7:	90                   	nop
c00169c8:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00169cf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00169d5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00169db:	3d 00 02 00 00       	cmp    eax,0x200
c00169e0:	74 0a                	je     c00169ec <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00169e2:	b0 00                	mov    al,0x0
c00169e4:	e9 c7 01 00 00       	jmp    c0016bb0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169e9:	8d 76 00             	lea    esi,[esi+0x0]
c00169ec:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00169f4:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00169fb:	8b 04 85 40 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0c0]
c0016a02:	83 f8 ff             	cmp    eax,0xffffffff
c0016a05:	74 09                	je     c0016a10 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0016a07:	b0 01                	mov    al,0x1
c0016a09:	e9 a2 01 00 00       	jmp    c0016bb0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016a0e:	66 90                	xchg   ax,ax
c0016a10:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0016a1a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0016a22:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0016a29:	88 c2                	mov    dl,al
c0016a2b:	a1 20 3f 02 c0       	mov    eax,ds:0xc0023f20
c0016a30:	01 d0                	add    eax,edx
c0016a32:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0016a39:	8b 15 20 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023f20
c0016a3f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016a46:	89 14 85 40 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0c0],edx
c0016a4d:	a1 20 3f 02 c0       	mov    eax,ds:0xc0023f20
c0016a52:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0016a59:	89 14 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],edx
c0016a60:	83 ec 0c             	sub    esp,0xc
c0016a63:	68 34 02 00 00       	push   0x234
c0016a68:	e8 24 12 ff ff       	call   c0007c91 <malloc>
c0016a6d:	83 c4 10             	add    esp,0x10
c0016a70:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0016a77:	83 ec 04             	sub    esp,0x4
c0016a7a:	6a 00                	push   0x0
c0016a7c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016a83:	50                   	push   eax
c0016a84:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016a8b:	e8 2b d0 fe ff       	call   c0003abb <f_mount>
c0016a90:	83 c4 10             	add    esp,0x10
c0016a93:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016a9a:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0016aa2:	74 1c                	je     c0016ac0 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0016aa4:	83 ec 0c             	sub    esp,0xc
c0016aa7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016aae:	e8 fe 11 ff ff       	call   c0007cb1 <rfree>
c0016ab3:	83 c4 10             	add    esp,0x10
c0016ab6:	b0 00                	mov    al,0x0
c0016ab8:	e9 f3 00 00 00       	jmp    c0016bb0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016abd:	8d 76 00             	lea    esi,[esi+0x0]
c0016ac0:	83 ec 04             	sub    esp,0x4
c0016ac3:	68 00 01 00 00       	push   0x100
c0016ac8:	6a 00                	push   0x0
c0016aca:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016ad1:	50                   	push   eax
c0016ad2:	e8 f9 99 fe ff       	call   c00004d0 <memset>
c0016ad7:	83 c4 10             	add    esp,0x10
c0016ada:	83 ec 08             	sub    esp,0x8
c0016add:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016ae4:	50                   	push   eax
c0016ae5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016aec:	50                   	push   eax
c0016aed:	e8 ce 9c fe ff       	call   c00007c0 <strcat>
c0016af2:	83 c4 10             	add    esp,0x10
c0016af5:	83 ec 08             	sub    esp,0x8
c0016af8:	68 72 ef 01 c0       	push   0xc001ef72
c0016afd:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016b04:	50                   	push   eax
c0016b05:	e8 b6 9c fe ff       	call   c00007c0 <strcat>
c0016b0a:	83 c4 10             	add    esp,0x10
c0016b0d:	83 ec 04             	sub    esp,0x4
c0016b10:	6a 01                	push   0x1
c0016b12:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016b19:	50                   	push   eax
c0016b1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016b1e:	50                   	push   eax
c0016b1f:	e8 f9 cf fe ff       	call   c0003b1d <f_open>
c0016b24:	83 c4 10             	add    esp,0x10
c0016b27:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016b2e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0016b35:	85 c0                	test   eax,eax
c0016b37:	74 0b                	je     c0016b44 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016b39:	78 31                	js     c0016b6c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016b3b:	83 e8 04             	sub    eax,0x4
c0016b3e:	83 f8 01             	cmp    eax,0x1
c0016b41:	77 29                	ja     c0016b6c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016b43:	90                   	nop
c0016b44:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016b4c:	83 ec 0c             	sub    esp,0xc
c0016b4f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016b53:	50                   	push   eax
c0016b54:	e8 77 d7 fe ff       	call   c00042d0 <f_close>
c0016b59:	83 c4 10             	add    esp,0x10
c0016b5c:	90                   	nop
c0016b5d:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016b65:	74 41                	je     c0016ba8 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0016b67:	eb 33                	jmp    c0016b9c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016b69:	8d 76 00             	lea    esi,[esi+0x0]
c0016b6c:	83 ec 0c             	sub    esp,0xc
c0016b6f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016b76:	e8 36 11 ff ff       	call   c0007cb1 <rfree>
c0016b7b:	83 c4 10             	add    esp,0x10
c0016b7e:	83 ec 04             	sub    esp,0x4
c0016b81:	6a 00                	push   0x0
c0016b83:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016b8a:	50                   	push   eax
c0016b8b:	6a 00                	push   0x0
c0016b8d:	e8 29 cf fe ff       	call   c0003abb <f_mount>
c0016b92:	83 c4 10             	add    esp,0x10
c0016b95:	b0 00                	mov    al,0x0
c0016b97:	eb 17                	jmp    c0016bb0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016b99:	8d 76 00             	lea    esi,[esi+0x0]
c0016b9c:	a1 20 3f 02 c0       	mov    eax,ds:0xc0023f20
c0016ba1:	40                   	inc    eax
c0016ba2:	a3 20 3f 02 c0       	mov    ds:0xc0023f20,eax
c0016ba7:	90                   	nop
c0016ba8:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016baf:	90                   	nop
c0016bb0:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016bb6:	c3                   	ret    
c0016bb7:	90                   	nop

c0016bb8 <FAT::allocateSwapfile(char const*, int)>:
c0016bb8:	55                   	push   ebp
c0016bb9:	57                   	push   edi
c0016bba:	56                   	push   esi
c0016bbb:	53                   	push   ebx
c0016bbc:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016bc2:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016bcd:	83 ec 0c             	sub    esp,0xc
c0016bd0:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016bd7:	e8 b5 10 ff ff       	call   c0007c91 <malloc>
c0016bdc:	83 c4 10             	add    esp,0x10
c0016bdf:	89 c7                	mov    edi,eax
c0016be1:	a1 90 3e 02 c0       	mov    eax,ds:0xc0023e90
c0016be6:	83 ec 04             	sub    esp,0x4
c0016be9:	50                   	push   eax
c0016bea:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016bf1:	57                   	push   edi
c0016bf2:	e8 ab 42 ff ff       	call   c000aea2 <File::File(char const*, Process*)>
c0016bf7:	83 c4 10             	add    esp,0x10
c0016bfa:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016c01:	83 ec 04             	sub    esp,0x4
c0016c04:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016c08:	50                   	push   eax
c0016c09:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016c0d:	50                   	push   eax
c0016c0e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c15:	e8 f4 45 ff ff       	call   c000b20e <File::stat(unsigned long long*, bool*)>
c0016c1a:	83 c4 10             	add    esp,0x10
c0016c1d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016c24:	c1 e0 14             	shl    eax,0x14
c0016c27:	89 c7                	mov    edi,eax
c0016c29:	89 c5                	mov    ebp,eax
c0016c2b:	c1 fd 1f             	sar    ebp,0x1f
c0016c2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c32:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c36:	89 f9                	mov    ecx,edi
c0016c38:	31 c1                	xor    ecx,eax
c0016c3a:	89 cb                	mov    ebx,ecx
c0016c3c:	89 e9                	mov    ecx,ebp
c0016c3e:	31 d1                	xor    ecx,edx
c0016c40:	89 ce                	mov    esi,ecx
c0016c42:	89 f0                	mov    eax,esi
c0016c44:	09 d8                	or     eax,ebx
c0016c46:	0f 84 9c 00 00 00    	je     c0016ce8 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016c4c:	83 ec 0c             	sub    esp,0xc
c0016c4f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c56:	e8 7f 44 ff ff       	call   c000b0da <File::unlink()>
c0016c5b:	83 c4 10             	add    esp,0x10
c0016c5e:	83 ec 08             	sub    esp,0x8
c0016c61:	6a 12                	push   0x12
c0016c63:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c6a:	e8 f3 42 ff ff       	call   c000af62 <File::open(FileOpenMode)>
c0016c6f:	83 c4 10             	add    esp,0x10
c0016c72:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c79:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016c7f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016c86:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016c8d:	c1 e0 14             	shl    eax,0x14
c0016c90:	83 ec 04             	sub    esp,0x4
c0016c93:	6a 01                	push   0x1
c0016c95:	50                   	push   eax
c0016c96:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016c9d:	e8 93 e4 fe ff       	call   c0005135 <f_expand>
c0016ca2:	83 c4 10             	add    esp,0x10
c0016ca5:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016cac:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cae:	83 c0 10             	add    eax,0x10
c0016cb1:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cb3:	83 ec 0c             	sub    esp,0xc
c0016cb6:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016cba:	52                   	push   edx
c0016cbb:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016cbf:	52                   	push   edx
c0016cc0:	6a 00                	push   0x0
c0016cc2:	68 00 04 00 00       	push   0x400
c0016cc7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016cce:	ff d0                	call   eax
c0016cd0:	83 c4 20             	add    esp,0x20
c0016cd3:	83 ec 0c             	sub    esp,0xc
c0016cd6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016cdd:	e8 de 42 ff ff       	call   c000afc0 <File::close()>
c0016ce2:	83 c4 10             	add    esp,0x10
c0016ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ce8:	83 ec 08             	sub    esp,0x8
c0016ceb:	6a 01                	push   0x1
c0016ced:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016cf4:	e8 69 42 ff ff       	call   c000af62 <File::open(FileOpenMode)>
c0016cf9:	83 c4 10             	add    esp,0x10
c0016cfc:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016d03:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d05:	83 c0 0c             	add    eax,0xc
c0016d08:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d0a:	83 ec 0c             	sub    esp,0xc
c0016d0d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016d11:	52                   	push   edx
c0016d12:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016d16:	52                   	push   edx
c0016d17:	6a 00                	push   0x0
c0016d19:	6a 04                	push   0x4
c0016d1b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016d22:	ff d0                	call   eax
c0016d24:	83 c4 20             	add    esp,0x20
c0016d27:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016d2e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016d34:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016d3b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016d42:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016d45:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016d4c:	83 ec 0c             	sub    esp,0xc
c0016d4f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016d56:	e8 65 42 ff ff       	call   c000afc0 <File::close()>
c0016d5b:	83 c4 10             	add    esp,0x10
c0016d5e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016d65:	ba 00 00 00 00       	mov    edx,0x0
c0016d6a:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016d70:	5b                   	pop    ebx
c0016d71:	5e                   	pop    esi
c0016d72:	5f                   	pop    edi
c0016d73:	5d                   	pop    ebp
c0016d74:	c3                   	ret    
c0016d75:	90                   	nop
c0016d76:	66 90                	xchg   ax,ax

c0016d78 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016d78:	57                   	push   edi
c0016d79:	56                   	push   esi
c0016d7a:	53                   	push   ebx
c0016d7b:	81 ec 50 02 00 00    	sub    esp,0x250
c0016d81:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016d89:	74 0d                	je     c0016d98 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016d8b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016d93:	75 0f                	jne    c0016da4 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016d95:	8d 76 00             	lea    esi,[esi+0x0]
c0016d98:	b8 04 00 00 00       	mov    eax,0x4
c0016d9d:	e9 36 01 00 00       	jmp    c0016ed8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016da2:	66 90                	xchg   ax,ax
c0016da4:	83 ec 08             	sub    esp,0x8
c0016da7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016dae:	50                   	push   eax
c0016daf:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016db6:	e8 d8 d7 fe ff       	call   c0004593 <f_readdir>
c0016dbb:	83 c4 10             	add    esp,0x10
c0016dbe:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016dc5:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016dcc:	83 ec 0c             	sub    esp,0xc
c0016dcf:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016dd6:	83 c0 16             	add    eax,0x16
c0016dd9:	50                   	push   eax
c0016dda:	e8 61 97 fe ff       	call   c0000540 <strlen>
c0016ddf:	83 c4 10             	add    esp,0x10
c0016de2:	ba 00 00 00 00       	mov    edx,0x0
c0016de7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016deb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016def:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016df6:	25 ff 00 00 00       	and    eax,0xff
c0016dfb:	83 e0 10             	and    eax,0x10
c0016dfe:	74 08                	je     c0016e08 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016e00:	b8 02 00 00 00       	mov    eax,0x2
c0016e05:	eb 09                	jmp    c0016e10 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016e07:	90                   	nop
c0016e08:	b8 01 00 00 00       	mov    eax,0x1
c0016e0d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e10:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e14:	83 ec 08             	sub    esp,0x8
c0016e17:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016e1e:	83 c0 16             	add    eax,0x16
c0016e21:	50                   	push   eax
c0016e22:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016e26:	83 c0 10             	add    eax,0x10
c0016e29:	50                   	push   eax
c0016e2a:	e8 d1 97 fe ff       	call   c0000600 <strcpy>
c0016e2f:	83 c4 10             	add    esp,0x10
c0016e32:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016e39:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016e40:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e44:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016e4b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016e52:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016e59:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016e60:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016e67:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016e6e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016e75:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016e7c:	89 c6                	mov    esi,eax
c0016e7e:	89 d7                	mov    edi,edx
c0016e80:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e82:	89 c8                	mov    eax,ecx
c0016e84:	89 fa                	mov    edx,edi
c0016e86:	89 f3                	mov    ebx,esi
c0016e88:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016e8f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016e96:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016e9d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016ea4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016eaa:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016eb1:	84 c0                	test   al,al
c0016eb3:	75 07                	jne    c0016ebc <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016eb5:	b8 07 00 00 00       	mov    eax,0x7
c0016eba:	eb 1c                	jmp    c0016ed8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016ebc:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016ec3:	85 c0                	test   eax,eax
c0016ec5:	75 09                	jne    c0016ed0 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016ec7:	b8 00 00 00 00       	mov    eax,0x0
c0016ecc:	eb 0a                	jmp    c0016ed8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016ece:	66 90                	xchg   ax,ax
c0016ed0:	b8 01 00 00 00       	mov    eax,0x1
c0016ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ed8:	81 c4 50 02 00 00    	add    esp,0x250
c0016ede:	5b                   	pop    ebx
c0016edf:	5e                   	pop    esi
c0016ee0:	5f                   	pop    edi
c0016ee1:	c3                   	ret    
c0016ee2:	66 90                	xchg   ax,ax

c0016ee4 <FAT::read(void*, unsigned long, void*, int*)>:
c0016ee4:	83 ec 1c             	sub    esp,0x1c
c0016ee7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016eec:	74 0a                	je     c0016ef8 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016eee:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016ef3:	75 0b                	jne    c0016f00 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ef8:	b8 04 00 00 00       	mov    eax,0x4
c0016efd:	eb 41                	jmp    c0016f40 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016eff:	90                   	nop
c0016f00:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f04:	50                   	push   eax
c0016f05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016f0d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f11:	e8 d2 ce fe ff       	call   c0003de8 <f_read>
c0016f16:	83 c4 10             	add    esp,0x10
c0016f19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f1d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f21:	89 c2                	mov    edx,eax
c0016f23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f27:	89 10                	mov    DWORD PTR [eax],edx
c0016f29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f2d:	85 c0                	test   eax,eax
c0016f2f:	75 07                	jne    c0016f38 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016f31:	b8 00 00 00 00       	mov    eax,0x0
c0016f36:	eb 08                	jmp    c0016f40 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016f38:	b8 01 00 00 00       	mov    eax,0x1
c0016f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f40:	83 c4 1c             	add    esp,0x1c
c0016f43:	c3                   	ret    

c0016f44 <FAT::write(void*, unsigned long, void*, int*)>:
c0016f44:	83 ec 1c             	sub    esp,0x1c
c0016f47:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f4c:	74 0a                	je     c0016f58 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016f4e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016f53:	75 0b                	jne    c0016f60 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016f55:	8d 76 00             	lea    esi,[esi+0x0]
c0016f58:	b8 04 00 00 00       	mov    eax,0x4
c0016f5d:	eb 41                	jmp    c0016fa0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016f5f:	90                   	nop
c0016f60:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f64:	50                   	push   eax
c0016f65:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f69:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016f6d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f71:	e8 71 d0 fe ff       	call   c0003fe7 <f_write>
c0016f76:	83 c4 10             	add    esp,0x10
c0016f79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f81:	89 c2                	mov    edx,eax
c0016f83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f87:	89 10                	mov    DWORD PTR [eax],edx
c0016f89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f8d:	85 c0                	test   eax,eax
c0016f8f:	75 07                	jne    c0016f98 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016f91:	b8 00 00 00 00       	mov    eax,0x0
c0016f96:	eb 08                	jmp    c0016fa0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016f98:	b8 01 00 00 00       	mov    eax,0x1
c0016f9d:	8d 76 00             	lea    esi,[esi+0x0]
c0016fa0:	83 c4 1c             	add    esp,0x1c
c0016fa3:	c3                   	ret    

c0016fa4 <FAT::close(void*)>:
c0016fa4:	83 ec 1c             	sub    esp,0x1c
c0016fa7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016fac:	75 0a                	jne    c0016fb8 <FAT::close(void*)+0x14>
c0016fae:	b8 04 00 00 00       	mov    eax,0x4
c0016fb3:	eb 3f                	jmp    c0016ff4 <FAT::close(void*)+0x50>
c0016fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0016fb8:	83 ec 0c             	sub    esp,0xc
c0016fbb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fbf:	e8 0c d3 fe ff       	call   c00042d0 <f_close>
c0016fc4:	83 c4 10             	add    esp,0x10
c0016fc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fcb:	83 ec 0c             	sub    esp,0xc
c0016fce:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fd2:	e8 ca 0c ff ff       	call   c0007ca1 <free>
c0016fd7:	83 c4 10             	add    esp,0x10
c0016fda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fde:	85 c0                	test   eax,eax
c0016fe0:	75 0a                	jne    c0016fec <FAT::close(void*)+0x48>
c0016fe2:	b8 00 00 00 00       	mov    eax,0x0
c0016fe7:	eb 0b                	jmp    c0016ff4 <FAT::close(void*)+0x50>
c0016fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0016fec:	b8 01 00 00 00       	mov    eax,0x1
c0016ff1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ff4:	83 c4 1c             	add    esp,0x1c
c0016ff7:	c3                   	ret    

c0016ff8 <FAT::closeDir(void*)>:
c0016ff8:	83 ec 1c             	sub    esp,0x1c
c0016ffb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017000:	75 0a                	jne    c001700c <FAT::closeDir(void*)+0x14>
c0017002:	b8 04 00 00 00       	mov    eax,0x4
c0017007:	eb 3f                	jmp    c0017048 <FAT::closeDir(void*)+0x50>
c0017009:	8d 76 00             	lea    esi,[esi+0x0]
c001700c:	83 ec 0c             	sub    esp,0xc
c001700f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017013:	e8 59 d5 fe ff       	call   c0004571 <f_closedir>
c0017018:	83 c4 10             	add    esp,0x10
c001701b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001701f:	83 ec 0c             	sub    esp,0xc
c0017022:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017026:	e8 76 0c ff ff       	call   c0007ca1 <free>
c001702b:	83 c4 10             	add    esp,0x10
c001702e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017032:	85 c0                	test   eax,eax
c0017034:	75 0a                	jne    c0017040 <FAT::closeDir(void*)+0x48>
c0017036:	b8 00 00 00 00       	mov    eax,0x0
c001703b:	eb 0b                	jmp    c0017048 <FAT::closeDir(void*)+0x50>
c001703d:	8d 76 00             	lea    esi,[esi+0x0]
c0017040:	b8 01 00 00 00       	mov    eax,0x1
c0017045:	8d 76 00             	lea    esi,[esi+0x0]
c0017048:	83 c4 1c             	add    esp,0x1c
c001704b:	c3                   	ret    

c001704c <FAT::seek(void*, unsigned long long)>:
c001704c:	83 ec 2c             	sub    esp,0x2c
c001704f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017053:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017057:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001705b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001705f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0017064:	75 0a                	jne    c0017070 <FAT::seek(void*, unsigned long long)+0x24>
c0017066:	b8 04 00 00 00       	mov    eax,0x4
c001706b:	eb 33                	jmp    c00170a0 <FAT::seek(void*, unsigned long long)+0x54>
c001706d:	8d 76 00             	lea    esi,[esi+0x0]
c0017070:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017074:	83 ec 08             	sub    esp,0x8
c0017077:	50                   	push   eax
c0017078:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001707c:	e8 7e d2 fe ff       	call   c00042ff <f_lseek>
c0017081:	83 c4 10             	add    esp,0x10
c0017084:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017088:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001708c:	85 c0                	test   eax,eax
c001708e:	75 08                	jne    c0017098 <FAT::seek(void*, unsigned long long)+0x4c>
c0017090:	b8 00 00 00 00       	mov    eax,0x0
c0017095:	eb 09                	jmp    c00170a0 <FAT::seek(void*, unsigned long long)+0x54>
c0017097:	90                   	nop
c0017098:	b8 01 00 00 00       	mov    eax,0x1
c001709d:	8d 76 00             	lea    esi,[esi+0x0]
c00170a0:	83 c4 2c             	add    esp,0x2c
c00170a3:	c3                   	ret    

c00170a4 <fatWrapperReadDisk>:
c00170a4:	53                   	push   ebx
c00170a5:	83 ec 18             	sub    esp,0x18
c00170a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ac:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00170b0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170b4:	25 ff 00 00 00       	and    eax,0xff
c00170b9:	8b 0c 85 20 2f 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd0e0]
c00170c0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00170c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170c8:	ba 00 00 00 00       	mov    edx,0x0
c00170cd:	83 ec 0c             	sub    esp,0xc
c00170d0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170d4:	53                   	push   ebx
c00170d5:	52                   	push   edx
c00170d6:	50                   	push   eax
c00170d7:	51                   	push   ecx
c00170d8:	e8 37 5f ff ff       	call   c000d014 <LogicalDisk::read(unsigned long long, int, void*)>
c00170dd:	83 c4 20             	add    esp,0x20
c00170e0:	83 c4 18             	add    esp,0x18
c00170e3:	5b                   	pop    ebx
c00170e4:	c3                   	ret    
c00170e5:	8d 76 00             	lea    esi,[esi+0x0]

c00170e8 <fatWrapperWriteDisk>:
c00170e8:	53                   	push   ebx
c00170e9:	83 ec 18             	sub    esp,0x18
c00170ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170f0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00170f4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170f8:	25 ff 00 00 00       	and    eax,0xff
c00170fd:	8b 0c 85 20 2f 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd0e0]
c0017104:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017108:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001710c:	ba 00 00 00 00       	mov    edx,0x0
c0017111:	83 ec 0c             	sub    esp,0xc
c0017114:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017118:	53                   	push   ebx
c0017119:	52                   	push   edx
c001711a:	50                   	push   eax
c001711b:	51                   	push   ecx
c001711c:	e8 5f 5f ff ff       	call   c000d080 <LogicalDisk::write(unsigned long long, int, void*)>
c0017121:	83 c4 20             	add    esp,0x20
c0017124:	83 c4 18             	add    esp,0x18
c0017127:	5b                   	pop    ebx
c0017128:	c3                   	ret    
c0017129:	8d 76 00             	lea    esi,[esi+0x0]

c001712c <fatWrapperIoctl>:
c001712c:	53                   	push   ebx
c001712d:	83 ec 28             	sub    esp,0x28
c0017130:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017134:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017138:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001713c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017140:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0017145:	75 35                	jne    c001717c <fatWrapperIoctl+0x50>
c0017147:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001714b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001714f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017153:	25 ff 00 00 00       	and    eax,0xff
c0017158:	8b 04 85 20 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0e0]
c001715f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017165:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001716b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001716f:	66 89 02             	mov    WORD PTR [edx],ax
c0017172:	b8 00 00 00 00       	mov    eax,0x0
c0017177:	e9 c4 00 00 00       	jmp    c0017240 <fatWrapperIoctl+0x114>
c001717c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0017181:	75 75                	jne    c00171f8 <fatWrapperIoctl+0xcc>
c0017183:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017187:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001718b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001718f:	25 ff 00 00 00       	and    eax,0xff
c0017194:	8b 04 85 20 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0e0]
c001719b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00171a1:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00171a7:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00171ad:	89 c8                	mov    eax,ecx
c00171af:	89 da                	mov    edx,ebx
c00171b1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00171b5:	c1 e0 0a             	shl    eax,0xa
c00171b8:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00171bc:	81 e1 ff 00 00 00    	and    ecx,0xff
c00171c2:	8b 0c 8d 20 2f 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd0e0]
c00171c9:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00171cf:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00171d5:	89 cb                	mov    ebx,ecx
c00171d7:	c1 fb 1f             	sar    ebx,0x1f
c00171da:	53                   	push   ebx
c00171db:	51                   	push   ecx
c00171dc:	52                   	push   edx
c00171dd:	50                   	push   eax
c00171de:	e8 2d 50 00 00       	call   c001c210 <__udivdi3>
c00171e3:	83 c4 10             	add    esp,0x10
c00171e6:	89 c2                	mov    edx,eax
c00171e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00171ec:	89 10                	mov    DWORD PTR [eax],edx
c00171ee:	b8 00 00 00 00       	mov    eax,0x0
c00171f3:	eb 4b                	jmp    c0017240 <fatWrapperIoctl+0x114>
c00171f5:	8d 76 00             	lea    esi,[esi+0x0]
c00171f8:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00171fd:	75 09                	jne    c0017208 <fatWrapperIoctl+0xdc>
c00171ff:	b8 00 00 00 00       	mov    eax,0x0
c0017204:	eb 3a                	jmp    c0017240 <fatWrapperIoctl+0x114>
c0017206:	66 90                	xchg   ax,ax
c0017208:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001720d:	75 19                	jne    c0017228 <fatWrapperIoctl+0xfc>
c001720f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017213:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017217:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001721b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0017221:	b8 00 00 00 00       	mov    eax,0x0
c0017226:	eb 18                	jmp    c0017240 <fatWrapperIoctl+0x114>
c0017228:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001722d:	75 09                	jne    c0017238 <fatWrapperIoctl+0x10c>
c001722f:	b8 00 00 00 00       	mov    eax,0x0
c0017234:	eb 0a                	jmp    c0017240 <fatWrapperIoctl+0x114>
c0017236:	66 90                	xchg   ax,ax
c0017238:	b8 04 00 00 00       	mov    eax,0x4
c001723d:	8d 76 00             	lea    esi,[esi+0x0]
c0017240:	83 c4 28             	add    esp,0x28
c0017243:	5b                   	pop    ebx
c0017244:	c3                   	ret    
c0017245:	90                   	nop
c0017246:	66 90                	xchg   ax,ax

c0017248 <FAT::FAT()>:
c0017248:	83 ec 1c             	sub    esp,0x1c
c001724b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001724f:	83 ec 0c             	sub    esp,0xc
c0017252:	50                   	push   eax
c0017253:	e8 f6 39 ff ff       	call   c000ac4e <Filesystem::Filesystem()>
c0017258:	83 c4 10             	add    esp,0x10
c001725b:	ba 88 ef 01 c0       	mov    edx,0xc001ef88
c0017260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017264:	89 10                	mov    DWORD PTR [eax],edx
c0017266:	c7 05 20 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023f20,0x0
c0017270:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017278:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001727d:	7f 15                	jg     c0017294 <FAT::FAT()+0x4c>
c001727f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017283:	c7 04 85 40 3f 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdc0c0],0xffffffff
c001728e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017292:	eb e4                	jmp    c0017278 <FAT::FAT()+0x30>
c0017294:	90                   	nop
c0017295:	83 c4 1c             	add    esp,0x1c
c0017298:	c3                   	ret    
c0017299:	90                   	nop
c001729a:	66 90                	xchg   ax,ax

c001729c <FAT::fixFilepath(char*)>:
c001729c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172a0:	8a 00                	mov    al,BYTE PTR [eax]
c00172a2:	3c 40                	cmp    al,0x40
c00172a4:	7e 2e                	jle    c00172d4 <FAT::fixFilepath(char*)+0x38>
c00172a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172aa:	8a 00                	mov    al,BYTE PTR [eax]
c00172ac:	83 e8 41             	sub    eax,0x41
c00172af:	88 c2                	mov    dl,al
c00172b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172b5:	88 10                	mov    BYTE PTR [eax],dl
c00172b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172bb:	8a 00                	mov    al,BYTE PTR [eax]
c00172bd:	0f be c0             	movsx  eax,al
c00172c0:	8b 04 85 40 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0c0]
c00172c7:	83 c0 30             	add    eax,0x30
c00172ca:	88 c2                	mov    dl,al
c00172cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172d0:	88 10                	mov    BYTE PTR [eax],dl
c00172d2:	66 90                	xchg   ax,ax
c00172d4:	90                   	nop
c00172d5:	c3                   	ret    
c00172d6:	66 90                	xchg   ax,ax

c00172d8 <FAT::open(char const*, void**, FileOpenMode)>:
c00172d8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00172de:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00172e6:	74 0c                	je     c00172f4 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00172e8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00172f0:	75 0e                	jne    c0017300 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00172f2:	66 90                	xchg   ax,ax
c00172f4:	b8 04 00 00 00       	mov    eax,0x4
c00172f9:	e9 0a 01 00 00       	jmp    c0017408 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00172fe:	66 90                	xchg   ax,ax
c0017300:	83 ec 08             	sub    esp,0x8
c0017303:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001730a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001730e:	50                   	push   eax
c001730f:	e8 ec 92 fe ff       	call   c0000600 <strcpy>
c0017314:	83 c4 10             	add    esp,0x10
c0017317:	83 ec 08             	sub    esp,0x8
c001731a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001731e:	50                   	push   eax
c001731f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017326:	e8 71 ff ff ff       	call   c001729c <FAT::fixFilepath(char*)>
c001732b:	83 c4 10             	add    esp,0x10
c001732e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0017336:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001733d:	83 e0 01             	and    eax,0x1
c0017340:	74 0a                	je     c001734c <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0017342:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001734a:	66 90                	xchg   ax,ax
c001734c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017353:	83 e0 04             	and    eax,0x4
c0017356:	74 10                	je     c0017368 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0017358:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0017360:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0017368:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001736f:	83 e0 02             	and    eax,0x2
c0017372:	74 08                	je     c001737c <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0017374:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001737c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017383:	83 e0 08             	and    eax,0x8
c0017386:	74 08                	je     c0017390 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0017388:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0017390:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017397:	83 e0 10             	and    eax,0x10
c001739a:	74 08                	je     c00173a4 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001739c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00173a4:	83 ec 0c             	sub    esp,0xc
c00173a7:	68 28 02 00 00       	push   0x228
c00173ac:	e8 e0 08 ff ff       	call   c0007c91 <malloc>
c00173b1:	83 c4 10             	add    esp,0x10
c00173b4:	89 c2                	mov    edx,eax
c00173b6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00173bd:	89 10                	mov    DWORD PTR [eax],edx
c00173bf:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00173c6:	31 d2                	xor    edx,edx
c00173c8:	88 c2                	mov    dl,al
c00173ca:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00173d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00173d3:	83 ec 04             	sub    esp,0x4
c00173d6:	52                   	push   edx
c00173d7:	8d 54 24 10          	lea    edx,[esp+0x10]
c00173db:	52                   	push   edx
c00173dc:	50                   	push   eax
c00173dd:	e8 3b c7 fe ff       	call   c0003b1d <f_open>
c00173e2:	83 c4 10             	add    esp,0x10
c00173e5:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00173ec:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00173f4:	74 0a                	je     c0017400 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c00173f6:	b8 01 00 00 00       	mov    eax,0x1
c00173fb:	eb 0b                	jmp    c0017408 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00173fd:	8d 76 00             	lea    esi,[esi+0x0]
c0017400:	b8 00 00 00 00       	mov    eax,0x0
c0017405:	8d 76 00             	lea    esi,[esi+0x0]
c0017408:	81 c4 1c 01 00 00    	add    esp,0x11c
c001740e:	c3                   	ret    
c001740f:	90                   	nop

c0017410 <FAT::openDir(char const*, void**)>:
c0017410:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017416:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001741e:	74 0c                	je     c001742c <FAT::openDir(char const*, void**)+0x1c>
c0017420:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017428:	75 0e                	jne    c0017438 <FAT::openDir(char const*, void**)+0x28>
c001742a:	66 90                	xchg   ax,ax
c001742c:	b8 04 00 00 00       	mov    eax,0x4
c0017431:	e9 82 00 00 00       	jmp    c00174b8 <FAT::openDir(char const*, void**)+0xa8>
c0017436:	66 90                	xchg   ax,ax
c0017438:	83 ec 08             	sub    esp,0x8
c001743b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017442:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017446:	50                   	push   eax
c0017447:	e8 b4 91 fe ff       	call   c0000600 <strcpy>
c001744c:	83 c4 10             	add    esp,0x10
c001744f:	83 ec 08             	sub    esp,0x8
c0017452:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017456:	50                   	push   eax
c0017457:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001745e:	e8 39 fe ff ff       	call   c001729c <FAT::fixFilepath(char*)>
c0017463:	83 c4 10             	add    esp,0x10
c0017466:	83 ec 0c             	sub    esp,0xc
c0017469:	6a 30                	push   0x30
c001746b:	e8 21 08 ff ff       	call   c0007c91 <malloc>
c0017470:	83 c4 10             	add    esp,0x10
c0017473:	89 c2                	mov    edx,eax
c0017475:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001747c:	89 10                	mov    DWORD PTR [eax],edx
c001747e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017485:	8b 00                	mov    eax,DWORD PTR [eax]
c0017487:	83 ec 08             	sub    esp,0x8
c001748a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001748e:	52                   	push   edx
c001748f:	50                   	push   eax
c0017490:	e8 11 d0 fe ff       	call   c00044a6 <f_opendir>
c0017495:	83 c4 10             	add    esp,0x10
c0017498:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001749f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00174a7:	74 07                	je     c00174b0 <FAT::openDir(char const*, void**)+0xa0>
c00174a9:	b8 01 00 00 00       	mov    eax,0x1
c00174ae:	eb 08                	jmp    c00174b8 <FAT::openDir(char const*, void**)+0xa8>
c00174b0:	b8 00 00 00 00       	mov    eax,0x0
c00174b5:	8d 76 00             	lea    esi,[esi+0x0]
c00174b8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00174be:	c3                   	ret    
c00174bf:	90                   	nop

c00174c0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00174c0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00174c6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00174ce:	75 0c                	jne    c00174dc <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00174d0:	b8 04 00 00 00       	mov    eax,0x4
c00174d5:	e9 d6 00 00 00       	jmp    c00175b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174da:	66 90                	xchg   ax,ax
c00174dc:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00174e4:	75 0a                	jne    c00174f0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00174e6:	b8 04 00 00 00       	mov    eax,0x4
c00174eb:	e9 c0 00 00 00       	jmp    c00175b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174f0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00174f8:	75 0a                	jne    c0017504 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00174fa:	b8 04 00 00 00       	mov    eax,0x4
c00174ff:	e9 ac 00 00 00       	jmp    c00175b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017504:	83 ec 08             	sub    esp,0x8
c0017507:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001750e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017515:	50                   	push   eax
c0017516:	e8 e5 90 fe ff       	call   c0000600 <strcpy>
c001751b:	83 c4 10             	add    esp,0x10
c001751e:	83 ec 08             	sub    esp,0x8
c0017521:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0017528:	50                   	push   eax
c0017529:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017530:	e8 67 fd ff ff       	call   c001729c <FAT::fixFilepath(char*)>
c0017535:	83 c4 10             	add    esp,0x10
c0017538:	83 ec 08             	sub    esp,0x8
c001753b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001753f:	50                   	push   eax
c0017540:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017547:	50                   	push   eax
c0017548:	e8 d8 d0 fe ff       	call   c0004625 <f_stat>
c001754d:	83 c4 10             	add    esp,0x10
c0017550:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0017557:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001755e:	85 c0                	test   eax,eax
c0017560:	74 0a                	je     c001756c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0017562:	83 f8 04             	cmp    eax,0x4
c0017565:	74 39                	je     c00175a0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0017567:	eb 3f                	jmp    c00175a8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0017569:	8d 76 00             	lea    esi,[esi+0x0]
c001756c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017570:	25 ff 00 00 00       	and    eax,0xff
c0017575:	83 e0 10             	and    eax,0x10
c0017578:	0f 95 c2             	setne  dl
c001757b:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0017582:	88 10                	mov    BYTE PTR [eax],dl
c0017584:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017588:	ba 00 00 00 00       	mov    edx,0x0
c001758d:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0017594:	89 01                	mov    DWORD PTR [ecx],eax
c0017596:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017599:	b8 00 00 00 00       	mov    eax,0x0
c001759e:	eb 10                	jmp    c00175b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00175a0:	b8 02 00 00 00       	mov    eax,0x2
c00175a5:	eb 09                	jmp    c00175b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00175a7:	90                   	nop
c00175a8:	b8 01 00 00 00       	mov    eax,0x1
c00175ad:	8d 76 00             	lea    esi,[esi+0x0]
c00175b0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00175b6:	c3                   	ret    
c00175b7:	90                   	nop

c00175b8 <FAT::unlink(char const*)>:
c00175b8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00175be:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00175c6:	75 08                	jne    c00175d0 <FAT::unlink(char const*)+0x18>
c00175c8:	b8 04 00 00 00       	mov    eax,0x4
c00175cd:	eb 61                	jmp    c0017630 <FAT::unlink(char const*)+0x78>
c00175cf:	90                   	nop
c00175d0:	83 ec 08             	sub    esp,0x8
c00175d3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00175da:	8d 44 24 18          	lea    eax,[esp+0x18]
c00175de:	50                   	push   eax
c00175df:	e8 1c 90 fe ff       	call   c0000600 <strcpy>
c00175e4:	83 c4 10             	add    esp,0x10
c00175e7:	83 ec 08             	sub    esp,0x8
c00175ea:	8d 44 24 14          	lea    eax,[esp+0x14]
c00175ee:	50                   	push   eax
c00175ef:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00175f6:	e8 a1 fc ff ff       	call   c001729c <FAT::fixFilepath(char*)>
c00175fb:	83 c4 10             	add    esp,0x10
c00175fe:	83 ec 0c             	sub    esp,0xc
c0017601:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017605:	50                   	push   eax
c0017606:	e8 7f d2 fe ff       	call   c000488a <f_unlink>
c001760b:	83 c4 10             	add    esp,0x10
c001760e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017615:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001761c:	85 c0                	test   eax,eax
c001761e:	75 08                	jne    c0017628 <FAT::unlink(char const*)+0x70>
c0017620:	b8 00 00 00 00       	mov    eax,0x0
c0017625:	eb 09                	jmp    c0017630 <FAT::unlink(char const*)+0x78>
c0017627:	90                   	nop
c0017628:	b8 01 00 00 00       	mov    eax,0x1
c001762d:	8d 76 00             	lea    esi,[esi+0x0]
c0017630:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017636:	c3                   	ret    
c0017637:	90                   	nop

c0017638 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0017638:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001763e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0017645:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001764c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017650:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017654:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001765c:	75 0a                	jne    c0017668 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001765e:	b8 04 00 00 00       	mov    eax,0x4
c0017663:	e9 54 01 00 00       	jmp    c00177bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017668:	83 ec 08             	sub    esp,0x8
c001766b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0017672:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017676:	50                   	push   eax
c0017677:	e8 84 8f fe ff       	call   c0000600 <strcpy>
c001767c:	83 c4 10             	add    esp,0x10
c001767f:	83 ec 08             	sub    esp,0x8
c0017682:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017686:	50                   	push   eax
c0017687:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001768e:	e8 09 fc ff ff       	call   c001729c <FAT::fixFilepath(char*)>
c0017693:	83 c4 10             	add    esp,0x10
c0017696:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001769e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00176a6:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176aa:	25 ff 00 00 00       	and    eax,0xff
c00176af:	83 e0 01             	and    eax,0x1
c00176b2:	74 08                	je     c00176bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c00176b4:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00176bc:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176c0:	25 ff 00 00 00       	and    eax,0xff
c00176c5:	83 e0 02             	and    eax,0x2
c00176c8:	74 0a                	je     c00176d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c00176ca:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00176d2:	66 90                	xchg   ax,ax
c00176d4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176d8:	25 ff 00 00 00       	and    eax,0xff
c00176dd:	83 e0 04             	and    eax,0x4
c00176e0:	74 0a                	je     c00176ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c00176e2:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00176ea:	66 90                	xchg   ax,ax
c00176ec:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00176f0:	25 ff 00 00 00       	and    eax,0xff
c00176f5:	83 e0 08             	and    eax,0x8
c00176f8:	74 0a                	je     c0017704 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c00176fa:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0017702:	66 90                	xchg   ax,ax
c0017704:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017708:	25 ff 00 00 00       	and    eax,0xff
c001770d:	83 e0 01             	and    eax,0x1
c0017710:	74 0a                	je     c001771c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0017712:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001771a:	66 90                	xchg   ax,ax
c001771c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017720:	25 ff 00 00 00       	and    eax,0xff
c0017725:	83 e0 02             	and    eax,0x2
c0017728:	74 0a                	je     c0017734 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001772a:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0017732:	66 90                	xchg   ax,ax
c0017734:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017738:	25 ff 00 00 00       	and    eax,0xff
c001773d:	83 e0 04             	and    eax,0x4
c0017740:	74 0a                	je     c001774c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c0017742:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001774a:	66 90                	xchg   ax,ax
c001774c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017750:	25 ff 00 00 00       	and    eax,0xff
c0017755:	83 e0 08             	and    eax,0x8
c0017758:	74 0a                	je     c0017764 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c001775a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0017762:	66 90                	xchg   ax,ax
c0017764:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001776b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0017772:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0017779:	31 d2                	xor    edx,edx
c001777b:	88 c2                	mov    dl,al
c001777d:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017784:	25 ff 00 00 00       	and    eax,0xff
c0017789:	83 ec 04             	sub    esp,0x4
c001778c:	52                   	push   edx
c001778d:	50                   	push   eax
c001778e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017792:	50                   	push   eax
c0017793:	e8 65 d5 fe ff       	call   c0004cfd <f_chmod>
c0017798:	83 c4 10             	add    esp,0x10
c001779b:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00177a2:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00177a9:	85 c0                	test   eax,eax
c00177ab:	75 07                	jne    c00177b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c00177ad:	b8 00 00 00 00       	mov    eax,0x0
c00177b2:	eb 08                	jmp    c00177bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00177b4:	b8 01 00 00 00       	mov    eax,0x1
c00177b9:	8d 76 00             	lea    esi,[esi+0x0]
c00177bc:	81 c4 2c 01 00 00    	add    esp,0x12c
c00177c2:	c3                   	ret    
c00177c3:	90                   	nop

c00177c4 <FAT::rename(char const*, char const*)>:
c00177c4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00177ca:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00177d2:	74 0c                	je     c00177e0 <FAT::rename(char const*, char const*)+0x1c>
c00177d4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00177dc:	75 0e                	jne    c00177ec <FAT::rename(char const*, char const*)+0x28>
c00177de:	66 90                	xchg   ax,ax
c00177e0:	b8 04 00 00 00       	mov    eax,0x4
c00177e5:	e9 9e 00 00 00       	jmp    c0017888 <FAT::rename(char const*, char const*)+0xc4>
c00177ea:	66 90                	xchg   ax,ax
c00177ec:	83 ec 08             	sub    esp,0x8
c00177ef:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00177f6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00177fd:	50                   	push   eax
c00177fe:	e8 fd 8d fe ff       	call   c0000600 <strcpy>
c0017803:	83 c4 10             	add    esp,0x10
c0017806:	83 ec 08             	sub    esp,0x8
c0017809:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0017810:	50                   	push   eax
c0017811:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017818:	e8 7f fa ff ff       	call   c001729c <FAT::fixFilepath(char*)>
c001781d:	83 c4 10             	add    esp,0x10
c0017820:	83 ec 08             	sub    esp,0x8
c0017823:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001782a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001782e:	50                   	push   eax
c001782f:	e8 cc 8d fe ff       	call   c0000600 <strcpy>
c0017834:	83 c4 10             	add    esp,0x10
c0017837:	83 ec 08             	sub    esp,0x8
c001783a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001783e:	50                   	push   eax
c001783f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017846:	e8 51 fa ff ff       	call   c001729c <FAT::fixFilepath(char*)>
c001784b:	83 c4 10             	add    esp,0x10
c001784e:	83 ec 08             	sub    esp,0x8
c0017851:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017855:	50                   	push   eax
c0017856:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001785d:	50                   	push   eax
c001785e:	e8 e4 d2 fe ff       	call   c0004b47 <f_rename>
c0017863:	83 c4 10             	add    esp,0x10
c0017866:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001786d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0017874:	85 c0                	test   eax,eax
c0017876:	75 08                	jne    c0017880 <FAT::rename(char const*, char const*)+0xbc>
c0017878:	b8 00 00 00 00       	mov    eax,0x0
c001787d:	eb 09                	jmp    c0017888 <FAT::rename(char const*, char const*)+0xc4>
c001787f:	90                   	nop
c0017880:	b8 01 00 00 00       	mov    eax,0x1
c0017885:	8d 76 00             	lea    esi,[esi+0x0]
c0017888:	81 c4 1c 02 00 00    	add    esp,0x21c
c001788e:	c3                   	ret    
c001788f:	90                   	nop

c0017890 <FAT::mkdir(char const*)>:
c0017890:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017896:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001789e:	75 08                	jne    c00178a8 <FAT::mkdir(char const*)+0x18>
c00178a0:	b8 04 00 00 00       	mov    eax,0x4
c00178a5:	eb 61                	jmp    c0017908 <FAT::mkdir(char const*)+0x78>
c00178a7:	90                   	nop
c00178a8:	83 ec 08             	sub    esp,0x8
c00178ab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00178b2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178b6:	50                   	push   eax
c00178b7:	e8 44 8d fe ff       	call   c0000600 <strcpy>
c00178bc:	83 c4 10             	add    esp,0x10
c00178bf:	83 ec 08             	sub    esp,0x8
c00178c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00178c6:	50                   	push   eax
c00178c7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00178ce:	e8 c9 f9 ff ff       	call   c001729c <FAT::fixFilepath(char*)>
c00178d3:	83 c4 10             	add    esp,0x10
c00178d6:	83 ec 0c             	sub    esp,0xc
c00178d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178dd:	50                   	push   eax
c00178de:	e8 c9 d0 fe ff       	call   c00049ac <f_mkdir>
c00178e3:	83 c4 10             	add    esp,0x10
c00178e6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00178ed:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00178f4:	85 c0                	test   eax,eax
c00178f6:	75 08                	jne    c0017900 <FAT::mkdir(char const*)+0x70>
c00178f8:	b8 00 00 00 00       	mov    eax,0x0
c00178fd:	eb 09                	jmp    c0017908 <FAT::mkdir(char const*)+0x78>
c00178ff:	90                   	nop
c0017900:	b8 01 00 00 00       	mov    eax,0x1
c0017905:	8d 76 00             	lea    esi,[esi+0x0]
c0017908:	81 c4 1c 01 00 00    	add    esp,0x11c
c001790e:	c3                   	ret    
c001790f:	90                   	nop

c0017910 <FAT::exists(char const*)>:
c0017910:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0017916:	83 ec 08             	sub    esp,0x8
c0017919:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017920:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017924:	50                   	push   eax
c0017925:	e8 d6 8c fe ff       	call   c0000600 <strcpy>
c001792a:	83 c4 10             	add    esp,0x10
c001792d:	83 ec 08             	sub    esp,0x8
c0017930:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017934:	50                   	push   eax
c0017935:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001793c:	e8 5b f9 ff ff       	call   c001729c <FAT::fixFilepath(char*)>
c0017941:	83 c4 10             	add    esp,0x10
c0017944:	83 ec 08             	sub    esp,0x8
c0017947:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001794e:	50                   	push   eax
c001794f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017953:	50                   	push   eax
c0017954:	e8 cc cc fe ff       	call   c0004625 <f_stat>
c0017959:	83 c4 10             	add    esp,0x10
c001795c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0017963:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001796a:	85 c0                	test   eax,eax
c001796c:	75 06                	jne    c0017974 <FAT::exists(char const*)+0x64>
c001796e:	b0 01                	mov    al,0x1
c0017970:	eb 06                	jmp    c0017978 <FAT::exists(char const*)+0x68>
c0017972:	66 90                	xchg   ax,ax
c0017974:	b0 00                	mov    al,0x0
c0017976:	66 90                	xchg   ax,ax
c0017978:	81 c4 2c 02 00 00    	add    esp,0x22c
c001797e:	c3                   	ret    
c001797f:	90                   	nop

c0017980 <isoReadDiscSectorHelper>:
c0017980:	83 ec 2c             	sub    esp,0x2c
c0017983:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017987:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001798b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0017990:	83 e8 41             	sub    eax,0x41
c0017993:	8b 0c 85 20 2f 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd0e0]
c001799a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001799e:	ba 00 00 00 00       	mov    edx,0x0
c00179a3:	83 ec 0c             	sub    esp,0xc
c00179a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00179aa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00179ae:	52                   	push   edx
c00179af:	50                   	push   eax
c00179b0:	51                   	push   ecx
c00179b1:	e8 5e 56 ff ff       	call   c000d014 <LogicalDisk::read(unsigned long long, int, void*)>
c00179b6:	83 c4 20             	add    esp,0x20
c00179b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00179bd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00179c2:	74 0c                	je     c00179d0 <isoReadDiscSectorHelper+0x50>
c00179c4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00179c8:	c1 e0 0b             	shl    eax,0xb
c00179cb:	eb 0b                	jmp    c00179d8 <isoReadDiscSectorHelper+0x58>
c00179cd:	8d 76 00             	lea    esi,[esi+0x0]
c00179d0:	b8 00 00 00 00       	mov    eax,0x0
c00179d5:	8d 76 00             	lea    esi,[esi+0x0]
c00179d8:	83 c4 2c             	add    esp,0x2c
c00179db:	c3                   	ret    

c00179dc <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00179dc:	b8 08 00 00 00       	mov    eax,0x8
c00179e1:	c3                   	ret    

c00179e2 <ISO9660::getName()>:
c00179e2:	b8 e8 ef 01 c0       	mov    eax,0xc001efe8
c00179e7:	c3                   	ret    

c00179e8 <ISO9660::closeDir(void*)>:
c00179e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00179ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00179ee:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00179f1:	90                   	nop

c00179f2 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00179f2:	b8 01 00 00 00       	mov    eax,0x1
c00179f7:	c3                   	ret    

c00179f8 <ISO9660::unlink(char const*)>:
c00179f8:	b8 01 00 00 00       	mov    eax,0x1
c00179fd:	c3                   	ret    

c00179fe <ISO9660::write(void*, unsigned long, void*, int*)>:
c00179fe:	b8 03 00 00 00       	mov    eax,0x3
c0017a03:	c3                   	ret    

c0017a04 <ISO9660::rename(char const*, char const*)>:
c0017a04:	b8 01 00 00 00       	mov    eax,0x1
c0017a09:	c3                   	ret    

c0017a0a <ISO9660::mkdir(char const*)>:
c0017a0a:	b8 01 00 00 00       	mov    eax,0x1
c0017a0f:	c3                   	ret    

c0017a10 <ISO9660::~ISO9660()>:
c0017a10:	83 ec 0c             	sub    esp,0xc
c0017a13:	ba 68 f0 01 c0       	mov    edx,0xc001f068
c0017a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a1c:	89 10                	mov    DWORD PTR [eax],edx
c0017a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a22:	83 ec 0c             	sub    esp,0xc
c0017a25:	50                   	push   eax
c0017a26:	e8 47 32 ff ff       	call   c000ac72 <Filesystem::~Filesystem()>
c0017a2b:	83 c4 10             	add    esp,0x10
c0017a2e:	90                   	nop
c0017a2f:	83 c4 0c             	add    esp,0xc
c0017a32:	c3                   	ret    
c0017a33:	90                   	nop

c0017a34 <ISO9660::~ISO9660()>:
c0017a34:	83 ec 0c             	sub    esp,0xc
c0017a37:	83 ec 0c             	sub    esp,0xc
c0017a3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a3e:	e8 cd ff ff ff       	call   c0017a10 <ISO9660::~ISO9660()>
c0017a43:	83 c4 10             	add    esp,0x10
c0017a46:	83 ec 08             	sub    esp,0x8
c0017a49:	6a 08                	push   0x8
c0017a4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a4f:	e8 e2 2d ff ff       	call   c000a836 <operator delete(void*, unsigned long)>
c0017a54:	83 c4 10             	add    esp,0x10
c0017a57:	83 c4 0c             	add    esp,0xc
c0017a5a:	c3                   	ret    
c0017a5b:	90                   	nop

c0017a5c <ISO9660::exists(char const*)>:
c0017a5c:	83 ec 18             	sub    esp,0x18
c0017a5f:	68 03 f0 01 c0       	push   0xc001f003
c0017a64:	e8 26 8b ff ff       	call   c001058f <KePanic(char const*)>
c0017a69:	31 c0                	xor    eax,eax
c0017a6b:	83 c4 1c             	add    esp,0x1c
c0017a6e:	c3                   	ret    
c0017a6f:	90                   	nop

c0017a70 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017a70:	56                   	push   esi
c0017a71:	53                   	push   ebx
c0017a72:	53                   	push   ebx
c0017a73:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017a77:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017a7b:	85 db                	test   ebx,ebx
c0017a7d:	74 72                	je     c0017af1 <ISO9660::open(char const*, void**, FileOpenMode)+0x81>
c0017a7f:	85 f6                	test   esi,esi
c0017a81:	74 6e                	je     c0017af1 <ISO9660::open(char const*, void**, FileOpenMode)+0x81>
c0017a83:	ba 03 00 00 00       	mov    edx,0x3
c0017a88:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0017a8d:	75 67                	jne    c0017af6 <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017a8f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017a92:	3a 05 20 40 02 c0    	cmp    al,BYTE PTR ds:0xc0024020
c0017a98:	74 34                	je     c0017ace <ISO9660::open(char const*, void**, FileOpenMode)+0x5e>
c0017a9a:	83 ec 0c             	sub    esp,0xc
c0017a9d:	50                   	push   eax
c0017a9e:	e8 cf f1 fe ff       	call   c0006c72 <init_percd>
c0017aa3:	83 c4 10             	add    esp,0x10
c0017aa6:	ba 0b 00 00 00       	mov    edx,0xb
c0017aab:	40                   	inc    eax
c0017aac:	74 48                	je     c0017af6 <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017aae:	80 3d 20 40 02 c0 00 	cmp    BYTE PTR ds:0xc0024020,0x0
c0017ab5:	74 10                	je     c0017ac7 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0017ab7:	83 ec 0c             	sub    esp,0xc
c0017aba:	68 21 f0 01 c0       	push   0xc001f021
c0017abf:	e8 cb 8a ff ff       	call   c001058f <KePanic(char const*)>
c0017ac4:	83 c4 10             	add    esp,0x10
c0017ac7:	8a 03                	mov    al,BYTE PTR [ebx]
c0017ac9:	a2 20 40 02 c0       	mov    ds:0xc0024020,al
c0017ace:	83 c3 03             	add    ebx,0x3
c0017ad1:	51                   	push   ecx
c0017ad2:	51                   	push   ecx
c0017ad3:	6a 00                	push   0x0
c0017ad5:	53                   	push   ebx
c0017ad6:	e8 07 ea fe ff       	call   c00064e2 <iso_open>
c0017adb:	83 c4 10             	add    esp,0x10
c0017ade:	ba 01 00 00 00       	mov    edx,0x1
c0017ae3:	83 f8 ff             	cmp    eax,0xffffffff
c0017ae6:	74 0e                	je     c0017af6 <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017ae8:	83 c0 64             	add    eax,0x64
c0017aeb:	31 d2                	xor    edx,edx
c0017aed:	89 06                	mov    DWORD PTR [esi],eax
c0017aef:	eb 05                	jmp    c0017af6 <ISO9660::open(char const*, void**, FileOpenMode)+0x86>
c0017af1:	ba 04 00 00 00       	mov    edx,0x4
c0017af6:	89 d0                	mov    eax,edx
c0017af8:	5a                   	pop    edx
c0017af9:	5b                   	pop    ebx
c0017afa:	5e                   	pop    esi
c0017afb:	c3                   	ret    

c0017afc <ISO9660::openDir(char const*, void**)>:
c0017afc:	56                   	push   esi
c0017afd:	53                   	push   ebx
c0017afe:	53                   	push   ebx
c0017aff:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017b03:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017b07:	85 db                	test   ebx,ebx
c0017b09:	74 66                	je     c0017b71 <ISO9660::openDir(char const*, void**)+0x75>
c0017b0b:	85 f6                	test   esi,esi
c0017b0d:	74 62                	je     c0017b71 <ISO9660::openDir(char const*, void**)+0x75>
c0017b0f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017b12:	3a 05 20 40 02 c0    	cmp    al,BYTE PTR ds:0xc0024020
c0017b18:	74 34                	je     c0017b4e <ISO9660::openDir(char const*, void**)+0x52>
c0017b1a:	83 ec 0c             	sub    esp,0xc
c0017b1d:	50                   	push   eax
c0017b1e:	e8 4f f1 fe ff       	call   c0006c72 <init_percd>
c0017b23:	83 c4 10             	add    esp,0x10
c0017b26:	ba 0b 00 00 00       	mov    edx,0xb
c0017b2b:	40                   	inc    eax
c0017b2c:	74 48                	je     c0017b76 <ISO9660::openDir(char const*, void**)+0x7a>
c0017b2e:	80 3d 20 40 02 c0 00 	cmp    BYTE PTR ds:0xc0024020,0x0
c0017b35:	74 10                	je     c0017b47 <ISO9660::openDir(char const*, void**)+0x4b>
c0017b37:	83 ec 0c             	sub    esp,0xc
c0017b3a:	68 21 f0 01 c0       	push   0xc001f021
c0017b3f:	e8 4b 8a ff ff       	call   c001058f <KePanic(char const*)>
c0017b44:	83 c4 10             	add    esp,0x10
c0017b47:	8a 03                	mov    al,BYTE PTR [ebx]
c0017b49:	a2 20 40 02 c0       	mov    ds:0xc0024020,al
c0017b4e:	83 c3 03             	add    ebx,0x3
c0017b51:	51                   	push   ecx
c0017b52:	51                   	push   ecx
c0017b53:	6a 01                	push   0x1
c0017b55:	53                   	push   ebx
c0017b56:	e8 87 e9 fe ff       	call   c00064e2 <iso_open>
c0017b5b:	83 c4 10             	add    esp,0x10
c0017b5e:	ba 01 00 00 00       	mov    edx,0x1
c0017b63:	83 f8 ff             	cmp    eax,0xffffffff
c0017b66:	74 0e                	je     c0017b76 <ISO9660::openDir(char const*, void**)+0x7a>
c0017b68:	83 c0 64             	add    eax,0x64
c0017b6b:	31 d2                	xor    edx,edx
c0017b6d:	89 06                	mov    DWORD PTR [esi],eax
c0017b6f:	eb 05                	jmp    c0017b76 <ISO9660::openDir(char const*, void**)+0x7a>
c0017b71:	ba 04 00 00 00       	mov    edx,0x4
c0017b76:	89 d0                	mov    eax,edx
c0017b78:	5a                   	pop    edx
c0017b79:	5b                   	pop    ebx
c0017b7a:	5e                   	pop    esi
c0017b7b:	c3                   	ret    

c0017b7c <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017b7c:	53                   	push   ebx
c0017b7d:	83 ec 08             	sub    esp,0x8
c0017b80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b84:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017b88:	85 c0                	test   eax,eax
c0017b8a:	74 25                	je     c0017bb1 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017b8c:	85 db                	test   ebx,ebx
c0017b8e:	74 21                	je     c0017bb1 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017b90:	83 e8 64             	sub    eax,0x64
c0017b93:	52                   	push   edx
c0017b94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017b9c:	50                   	push   eax
c0017b9d:	e8 40 ea fe ff       	call   c00065e2 <iso_read>
c0017ba2:	83 c4 10             	add    esp,0x10
c0017ba5:	89 03                	mov    DWORD PTR [ebx],eax
c0017ba7:	09 d0                	or     eax,edx
c0017ba9:	0f 94 c0             	sete   al
c0017bac:	0f b6 c0             	movzx  eax,al
c0017baf:	eb 05                	jmp    c0017bb6 <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017bb1:	b8 04 00 00 00       	mov    eax,0x4
c0017bb6:	83 c4 08             	add    esp,0x8
c0017bb9:	5b                   	pop    ebx
c0017bba:	c3                   	ret    
c0017bbb:	90                   	nop

c0017bbc <ISO9660::seek(void*, unsigned long long)>:
c0017bbc:	57                   	push   edi
c0017bbd:	56                   	push   esi
c0017bbe:	b8 04 00 00 00       	mov    eax,0x4
c0017bc3:	51                   	push   ecx
c0017bc4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017bc8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017bcc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017bd0:	85 d2                	test   edx,edx
c0017bd2:	74 1c                	je     c0017bf0 <ISO9660::seek(void*, unsigned long long)+0x34>
c0017bd4:	6a 00                	push   0x0
c0017bd6:	83 ea 64             	sub    edx,0x64
c0017bd9:	57                   	push   edi
c0017bda:	56                   	push   esi
c0017bdb:	52                   	push   edx
c0017bdc:	e8 ff eb fe ff       	call   c00067e0 <iso_seek>
c0017be1:	83 c4 10             	add    esp,0x10
c0017be4:	31 f0                	xor    eax,esi
c0017be6:	31 fa                	xor    edx,edi
c0017be8:	09 d0                	or     eax,edx
c0017bea:	0f 95 c0             	setne  al
c0017bed:	0f b6 c0             	movzx  eax,al
c0017bf0:	5a                   	pop    edx
c0017bf1:	5e                   	pop    esi
c0017bf2:	5f                   	pop    edi
c0017bf3:	c3                   	ret    

c0017bf4 <ISO9660::tell(void*, unsigned long long*)>:
c0017bf4:	53                   	push   ebx
c0017bf5:	83 ec 08             	sub    esp,0x8
c0017bf8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bfc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017c00:	85 c0                	test   eax,eax
c0017c02:	74 1c                	je     c0017c20 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017c04:	85 db                	test   ebx,ebx
c0017c06:	74 18                	je     c0017c20 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017c08:	83 ec 0c             	sub    esp,0xc
c0017c0b:	83 e8 64             	sub    eax,0x64
c0017c0e:	50                   	push   eax
c0017c0f:	e8 aa ec fe ff       	call   c00068be <iso_tell>
c0017c14:	83 c4 10             	add    esp,0x10
c0017c17:	89 03                	mov    DWORD PTR [ebx],eax
c0017c19:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017c1c:	31 c0                	xor    eax,eax
c0017c1e:	eb 05                	jmp    c0017c25 <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017c20:	b8 04 00 00 00       	mov    eax,0x4
c0017c25:	83 c4 08             	add    esp,0x8
c0017c28:	5b                   	pop    ebx
c0017c29:	c3                   	ret    

c0017c2a <ISO9660::stat(void*, unsigned long long*)>:
c0017c2a:	53                   	push   ebx
c0017c2b:	83 ec 08             	sub    esp,0x8
c0017c2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c32:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017c36:	85 c0                	test   eax,eax
c0017c38:	74 20                	je     c0017c5a <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017c3a:	85 db                	test   ebx,ebx
c0017c3c:	74 1c                	je     c0017c5a <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017c3e:	83 ec 0c             	sub    esp,0xc
c0017c41:	83 e8 64             	sub    eax,0x64
c0017c44:	50                   	push   eax
c0017c45:	e8 d1 ec fe ff       	call   c000691b <iso_total>
c0017c4a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017c51:	89 03                	mov    DWORD PTR [ebx],eax
c0017c53:	83 c4 10             	add    esp,0x10
c0017c56:	31 c0                	xor    eax,eax
c0017c58:	eb 05                	jmp    c0017c5f <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017c5a:	b8 04 00 00 00       	mov    eax,0x4
c0017c5f:	83 c4 08             	add    esp,0x8
c0017c62:	5b                   	pop    ebx
c0017c63:	c3                   	ret    

c0017c64 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017c64:	55                   	push   ebp
c0017c65:	57                   	push   edi
c0017c66:	56                   	push   esi
c0017c67:	53                   	push   ebx
c0017c68:	83 ec 0c             	sub    esp,0xc
c0017c6b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017c6f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0017c73:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017c77:	85 ff                	test   edi,edi
c0017c79:	0f 94 c2             	sete   dl
c0017c7c:	85 f6                	test   esi,esi
c0017c7e:	0f 94 c0             	sete   al
c0017c81:	08 c2                	or     dl,al
c0017c83:	0f 85 b7 00 00 00    	jne    c0017d40 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xdc>
c0017c89:	85 db                	test   ebx,ebx
c0017c8b:	0f 84 af 00 00 00    	je     c0017d40 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xdc>
c0017c91:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0017c94:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017c9a:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017ca1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017ca4:	3a 05 20 40 02 c0    	cmp    al,BYTE PTR ds:0xc0024020
c0017caa:	74 38                	je     c0017ce4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x80>
c0017cac:	83 ec 0c             	sub    esp,0xc
c0017caf:	50                   	push   eax
c0017cb0:	e8 bd ef fe ff       	call   c0006c72 <init_percd>
c0017cb5:	83 c4 10             	add    esp,0x10
c0017cb8:	ba 0b 00 00 00       	mov    edx,0xb
c0017cbd:	40                   	inc    eax
c0017cbe:	0f 84 81 00 00 00    	je     c0017d45 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe1>
c0017cc4:	80 3d 20 40 02 c0 00 	cmp    BYTE PTR ds:0xc0024020,0x0
c0017ccb:	74 10                	je     c0017cdd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x79>
c0017ccd:	83 ec 0c             	sub    esp,0xc
c0017cd0:	68 21 f0 01 c0       	push   0xc001f021
c0017cd5:	e8 b5 88 ff ff       	call   c001058f <KePanic(char const*)>
c0017cda:	83 c4 10             	add    esp,0x10
c0017cdd:	8a 03                	mov    al,BYTE PTR [ebx]
c0017cdf:	a2 20 40 02 c0       	mov    ds:0xc0024020,al
c0017ce4:	83 c3 03             	add    ebx,0x3
c0017ce7:	55                   	push   ebp
c0017ce8:	55                   	push   ebp
c0017ce9:	6a 00                	push   0x0
c0017ceb:	53                   	push   ebx
c0017cec:	e8 f1 e7 fe ff       	call   c00064e2 <iso_open>
c0017cf1:	83 c4 10             	add    esp,0x10
c0017cf4:	89 c5                	mov    ebp,eax
c0017cf6:	83 f8 ff             	cmp    eax,0xffffffff
c0017cf9:	75 0f                	jne    c0017d0a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa6>
c0017cfb:	56                   	push   esi
c0017cfc:	56                   	push   esi
c0017cfd:	6a 01                	push   0x1
c0017cff:	53                   	push   ebx
c0017d00:	e8 dd e7 fe ff       	call   c00064e2 <iso_open>
c0017d05:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017d08:	eb 2f                	jmp    c0017d39 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xd5>
c0017d0a:	83 ec 0c             	sub    esp,0xc
c0017d0d:	50                   	push   eax
c0017d0e:	e8 08 ec fe ff       	call   c000691b <iso_total>
c0017d13:	5a                   	pop    edx
c0017d14:	59                   	pop    ecx
c0017d15:	50                   	push   eax
c0017d16:	68 31 f0 01 c0       	push   0xc001f031
c0017d1b:	e8 0c 2c ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c0017d20:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017d23:	e8 f3 eb fe ff       	call   c000691b <iso_total>
c0017d28:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017d2f:	89 06                	mov    DWORD PTR [esi],eax
c0017d31:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017d34:	e8 89 e8 fe ff       	call   c00065c2 <iso_close>
c0017d39:	83 c4 10             	add    esp,0x10
c0017d3c:	31 d2                	xor    edx,edx
c0017d3e:	eb 05                	jmp    c0017d45 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe1>
c0017d40:	ba 04 00 00 00       	mov    edx,0x4
c0017d45:	83 c4 0c             	add    esp,0xc
c0017d48:	89 d0                	mov    eax,edx
c0017d4a:	5b                   	pop    ebx
c0017d4b:	5e                   	pop    esi
c0017d4c:	5f                   	pop    edi
c0017d4d:	5d                   	pop    ebp
c0017d4e:	c3                   	ret    
c0017d4f:	90                   	nop

c0017d50 <ISO9660::close(void*)>:
c0017d50:	83 ec 0c             	sub    esp,0xc
c0017d53:	b8 04 00 00 00       	mov    eax,0x4
c0017d58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d5c:	85 d2                	test   edx,edx
c0017d5e:	74 11                	je     c0017d71 <ISO9660::close(void*)+0x21>
c0017d60:	83 ec 0c             	sub    esp,0xc
c0017d63:	83 ea 64             	sub    edx,0x64
c0017d66:	52                   	push   edx
c0017d67:	e8 56 e8 fe ff       	call   c00065c2 <iso_close>
c0017d6c:	83 c4 10             	add    esp,0x10
c0017d6f:	31 c0                	xor    eax,eax
c0017d71:	83 c4 0c             	add    esp,0xc
c0017d74:	c3                   	ret    
c0017d75:	90                   	nop

c0017d76 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017d76:	55                   	push   ebp
c0017d77:	57                   	push   edi
c0017d78:	56                   	push   esi
c0017d79:	53                   	push   ebx
c0017d7a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017d80:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0017d87:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017d8e:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017d95:	85 c0                	test   eax,eax
c0017d97:	0f 84 96 00 00 00    	je     c0017e33 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017d9d:	85 db                	test   ebx,ebx
c0017d9f:	0f 84 8e 00 00 00    	je     c0017e33 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017da5:	83 ec 0c             	sub    esp,0xc
c0017da8:	83 e8 64             	sub    eax,0x64
c0017dab:	50                   	push   eax
c0017dac:	e8 e7 eb fe ff       	call   c0006998 <iso_readdir>
c0017db1:	83 c4 10             	add    esp,0x10
c0017db4:	89 c6                	mov    esi,eax
c0017db6:	85 c0                	test   eax,eax
c0017db8:	75 18                	jne    c0017dd2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c0017dba:	52                   	push   edx
c0017dbb:	68 10 01 00 00       	push   0x110
c0017dc0:	6a 00                	push   0x0
c0017dc2:	57                   	push   edi
c0017dc3:	e8 08 87 fe ff       	call   c00004d0 <memset>
c0017dc8:	83 c4 10             	add    esp,0x10
c0017dcb:	b8 01 00 00 00       	mov    eax,0x1
c0017dd0:	eb 66                	jmp    c0017e38 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017dd2:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017dd8:	8d 68 08             	lea    ebp,[eax+0x8]
c0017ddb:	83 ec 0c             	sub    esp,0xc
c0017dde:	55                   	push   ebp
c0017ddf:	e8 5c 87 fe ff       	call   c0000540 <strlen>
c0017de4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017dec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017df0:	83 c4 10             	add    esp,0x10
c0017df3:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017df7:	75 0a                	jne    c0017e03 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c0017df9:	b8 02 00 00 00       	mov    eax,0x2
c0017dfe:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017e01:	74 05                	je     c0017e08 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0017e03:	b8 01 00 00 00       	mov    eax,0x1
c0017e08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017e0c:	50                   	push   eax
c0017e0d:	50                   	push   eax
c0017e0e:	55                   	push   ebp
c0017e0f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017e13:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017e17:	50                   	push   eax
c0017e18:	e8 e3 87 fe ff       	call   c0000600 <strcpy>
c0017e1d:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017e24:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017e26:	31 c0                	xor    eax,eax
c0017e28:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0017e2e:	83 c4 10             	add    esp,0x10
c0017e31:	eb 05                	jmp    c0017e38 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017e33:	b8 04 00 00 00       	mov    eax,0x4
c0017e38:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017e3e:	5b                   	pop    ebx
c0017e3f:	5e                   	pop    esi
c0017e40:	5f                   	pop    edi
c0017e41:	5d                   	pop    ebp
c0017e42:	c3                   	ret    

c0017e43 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017e43:	57                   	push   edi
c0017e44:	56                   	push   esi
c0017e45:	53                   	push   ebx
c0017e46:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017e4a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017e4e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017e52:	39 35 24 40 02 c0    	cmp    DWORD PTR ds:0xc0024024,esi
c0017e58:	75 08                	jne    c0017e62 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017e5a:	38 1d 94 f9 01 c0    	cmp    BYTE PTR ds:0xc001f994,bl
c0017e60:	74 59                	je     c0017ebb <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c0017e62:	83 ec 0c             	sub    esp,0xc
c0017e65:	31 d2                	xor    edx,edx
c0017e67:	68 40 40 02 c0       	push   0xc0024040
c0017e6c:	0f be c3             	movsx  eax,bl
c0017e6f:	6a 01                	push   0x1
c0017e71:	52                   	push   edx
c0017e72:	56                   	push   esi
c0017e73:	ff 34 85 1c 2e 02 c0 	push   DWORD PTR [eax*4-0x3ffdd1e4]
c0017e7a:	e8 95 51 ff ff       	call   c000d014 <LogicalDisk::read(unsigned long long, int, void*)>
c0017e7f:	83 c4 20             	add    esp,0x20
c0017e82:	85 c0                	test   eax,eax
c0017e84:	75 0e                	jne    c0017e94 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017e86:	89 35 24 40 02 c0    	mov    DWORD PTR ds:0xc0024024,esi
c0017e8c:	88 1d 94 f9 01 c0    	mov    BYTE PTR ds:0xc001f994,bl
c0017e92:	eb 27                	jmp    c0017ebb <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c0017e94:	83 ec 0c             	sub    esp,0xc
c0017e97:	68 43 f0 01 c0       	push   0xc001f043
c0017e9c:	e8 8b 2a ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c0017ea1:	83 c4 0c             	add    esp,0xc
c0017ea4:	68 00 08 00 00       	push   0x800
c0017ea9:	6a 00                	push   0x0
c0017eab:	57                   	push   edi
c0017eac:	e8 1f 86 fe ff       	call   c00004d0 <memset>
c0017eb1:	83 c4 10             	add    esp,0x10
c0017eb4:	b8 01 00 00 00       	mov    eax,0x1
c0017eb9:	eb 0e                	jmp    c0017ec9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x86>
c0017ebb:	be 40 40 02 c0       	mov    esi,0xc0024040
c0017ec0:	b9 00 08 00 00       	mov    ecx,0x800
c0017ec5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017ec7:	31 c0                	xor    eax,eax
c0017ec9:	5b                   	pop    ebx
c0017eca:	5e                   	pop    esi
c0017ecb:	5f                   	pop    edi
c0017ecc:	c3                   	ret    
c0017ecd:	90                   	nop

c0017ece <ISO9660::tryMount(LogicalDisk*, int)>:
c0017ece:	53                   	push   ebx
c0017ecf:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017ed5:	c7 05 24 40 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0024024,0xdeadbeef
c0017edf:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017ee6:	8d 58 41             	lea    ebx,[eax+0x41]
c0017ee9:	0f be db             	movsx  ebx,bl
c0017eec:	53                   	push   ebx
c0017eed:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017ef1:	50                   	push   eax
c0017ef2:	6a 10                	push   0x10
c0017ef4:	e8 4a ff ff ff       	call   c0017e43 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017ef9:	83 c4 10             	add    esp,0x10
c0017efc:	31 d2                	xor    edx,edx
c0017efe:	85 c0                	test   eax,eax
c0017f00:	75 33                	jne    c0017f35 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f02:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017f07:	75 2c                	jne    c0017f35 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f09:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017f0e:	75 25                	jne    c0017f35 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f10:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017f15:	75 1e                	jne    c0017f35 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f17:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017f1c:	75 17                	jne    c0017f35 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f1e:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017f23:	75 10                	jne    c0017f35 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017f25:	83 ec 0c             	sub    esp,0xc
c0017f28:	53                   	push   ebx
c0017f29:	e8 44 ed fe ff       	call   c0006c72 <init_percd>
c0017f2e:	83 c4 10             	add    esp,0x10
c0017f31:	40                   	inc    eax
c0017f32:	0f 95 c2             	setne  dl
c0017f35:	88 d0                	mov    al,dl
c0017f37:	81 c4 08 08 00 00    	add    esp,0x808
c0017f3d:	5b                   	pop    ebx
c0017f3e:	c3                   	ret    
c0017f3f:	90                   	nop

c0017f40 <ISO9660::ISO9660()>:
c0017f40:	83 ec 0c             	sub    esp,0xc
c0017f43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f47:	83 ec 0c             	sub    esp,0xc
c0017f4a:	50                   	push   eax
c0017f4b:	e8 fe 2c ff ff       	call   c000ac4e <Filesystem::Filesystem()>
c0017f50:	83 c4 10             	add    esp,0x10
c0017f53:	ba 68 f0 01 c0       	mov    edx,0xc001f068
c0017f58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f5c:	89 10                	mov    DWORD PTR [eax],edx
c0017f5e:	e8 1f ee fe ff       	call   c0006d82 <fs_iso9660_init>
c0017f63:	90                   	nop
c0017f64:	83 c4 0c             	add    esp,0xc
c0017f67:	c3                   	ret    

c0017f68 <SoundCard::beginPlayback()>:
c0017f68:	c7 44 24 04 c8 f0 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f0c8
c0017f70:	e9 1a 86 ff ff       	jmp    c001058f <KePanic(char const*)>
c0017f75:	90                   	nop

c0017f76 <SoundCard::stopPlayback()>:
c0017f76:	c7 44 24 04 c8 f0 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f0c8
c0017f7e:	e9 0c 86 ff ff       	jmp    c001058f <KePanic(char const*)>
c0017f83:	90                   	nop

c0017f84 <SoundCard::SoundCard(char const*)>:
c0017f84:	83 ec 1c             	sub    esp,0x1c
c0017f87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f8b:	83 ec 08             	sub    esp,0x8
c0017f8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f92:	50                   	push   eax
c0017f93:	e8 6c 3f ff ff       	call   c000bf04 <Device::Device(char const*)>
c0017f98:	83 c4 10             	add    esp,0x10
c0017f9b:	ba 14 f1 01 c0       	mov    edx,0xc001f114
c0017fa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fa4:	89 10                	mov    DWORD PTR [eax],edx
c0017fa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017faa:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017fb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fb5:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017fbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fc3:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017fcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fd1:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017fdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fdf:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017fe9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017ff1:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017ff6:	7f 19                	jg     c0018011 <SoundCard::SoundCard(char const*)+0x8d>
c0017ff8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ffc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018000:	83 c2 54             	add    edx,0x54
c0018003:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001800b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001800f:	eb e0                	jmp    c0017ff1 <SoundCard::SoundCard(char const*)+0x6d>
c0018011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018015:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001801c:	90                   	nop
c001801d:	83 c4 1c             	add    esp,0x1c
c0018020:	c3                   	ret    
c0018021:	90                   	nop

c0018022 <SoundCard::~SoundCard()>:
c0018022:	83 ec 0c             	sub    esp,0xc
c0018025:	ba 14 f1 01 c0       	mov    edx,0xc001f114
c001802a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001802e:	89 10                	mov    DWORD PTR [eax],edx
c0018030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018034:	83 ec 0c             	sub    esp,0xc
c0018037:	50                   	push   eax
c0018038:	e8 31 3c ff ff       	call   c000bc6e <Device::~Device()>
c001803d:	83 c4 10             	add    esp,0x10
c0018040:	90                   	nop
c0018041:	83 c4 0c             	add    esp,0xc
c0018044:	c3                   	ret    
c0018045:	90                   	nop

c0018046 <SoundCard::~SoundCard()>:
c0018046:	83 ec 0c             	sub    esp,0xc
c0018049:	83 ec 0c             	sub    esp,0xc
c001804c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018050:	e8 cd ff ff ff       	call   c0018022 <SoundCard::~SoundCard()>
c0018055:	83 c4 10             	add    esp,0x10
c0018058:	83 ec 08             	sub    esp,0x8
c001805b:	68 e8 01 00 00       	push   0x1e8
c0018060:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018064:	e8 cd 27 ff ff       	call   c000a836 <operator delete(void*, unsigned long)>
c0018069:	83 c4 10             	add    esp,0x10
c001806c:	83 c4 0c             	add    esp,0xc
c001806f:	c3                   	ret    

c0018070 <SoundCard::configureRates(int, int, int)>:
c0018070:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018074:	31 c0                	xor    eax,eax
c0018076:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001807d:	75 20                	jne    c001809f <SoundCard::configureRates(int, int, int)+0x2f>
c001807f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018083:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0018089:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001808d:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0018093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018097:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001809d:	b0 01                	mov    al,0x1
c001809f:	c3                   	ret    

c00180a0 <SoundCard::getSamples16(int, short*)>:
c00180a0:	55                   	push   ebp
c00180a1:	57                   	push   edi
c00180a2:	31 ff                	xor    edi,edi
c00180a4:	56                   	push   esi
c00180a5:	53                   	push   ebx
c00180a6:	31 db                	xor    ebx,ebx
c00180a8:	83 ec 10             	sub    esp,0x10
c00180ab:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00180af:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00180b3:	8d 04 36             	lea    eax,[esi+esi*1]
c00180b6:	50                   	push   eax
c00180b7:	6a 00                	push   0x0
c00180b9:	55                   	push   ebp
c00180ba:	e8 11 84 fe ff       	call   c00004d0 <memset>
c00180bf:	83 c4 10             	add    esp,0x10
c00180c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180c6:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c00180cd:	85 c0                	test   eax,eax
c00180cf:	74 1b                	je     c00180ec <SoundCard::getSamples16(int, short*)+0x4c>
c00180d1:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00180d5:	75 15                	jne    c00180ec <SoundCard::getSamples16(int, short*)+0x4c>
c00180d7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00180db:	55                   	push   ebp
c00180dc:	56                   	push   esi
c00180dd:	50                   	push   eax
c00180de:	e8 ed 02 00 00       	call   c00183d0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c00180e3:	83 c4 10             	add    esp,0x10
c00180e6:	39 c7                	cmp    edi,eax
c00180e8:	7d 02                	jge    c00180ec <SoundCard::getSamples16(int, short*)+0x4c>
c00180ea:	89 c7                	mov    edi,eax
c00180ec:	43                   	inc    ebx
c00180ed:	83 fb 20             	cmp    ebx,0x20
c00180f0:	75 d0                	jne    c00180c2 <SoundCard::getSamples16(int, short*)+0x22>
c00180f2:	83 c4 0c             	add    esp,0xc
c00180f5:	89 f8                	mov    eax,edi
c00180f7:	5b                   	pop    ebx
c00180f8:	5e                   	pop    esi
c00180f9:	5f                   	pop    edi
c00180fa:	5d                   	pop    ebp
c00180fb:	c3                   	ret    

c00180fc <SoundCard::getSamples32(int, int*)>:
c00180fc:	55                   	push   ebp
c00180fd:	57                   	push   edi
c00180fe:	31 ff                	xor    edi,edi
c0018100:	56                   	push   esi
c0018101:	31 f6                	xor    esi,esi
c0018103:	53                   	push   ebx
c0018104:	83 ec 10             	sub    esp,0x10
c0018107:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001810b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001810f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0018113:	c1 e0 02             	shl    eax,0x2
c0018116:	50                   	push   eax
c0018117:	6a 00                	push   0x0
c0018119:	55                   	push   ebp
c001811a:	e8 b1 83 fe ff       	call   c00004d0 <memset>
c001811f:	83 c4 10             	add    esp,0x10
c0018122:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0018129:	85 c0                	test   eax,eax
c001812b:	74 1b                	je     c0018148 <SoundCard::getSamples32(int, int*)+0x4c>
c001812d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018131:	75 15                	jne    c0018148 <SoundCard::getSamples32(int, int*)+0x4c>
c0018133:	53                   	push   ebx
c0018134:	55                   	push   ebp
c0018135:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018139:	50                   	push   eax
c001813a:	e8 55 03 00 00       	call   c0018494 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001813f:	83 c4 10             	add    esp,0x10
c0018142:	39 c6                	cmp    esi,eax
c0018144:	7d 02                	jge    c0018148 <SoundCard::getSamples32(int, int*)+0x4c>
c0018146:	89 c6                	mov    esi,eax
c0018148:	47                   	inc    edi
c0018149:	83 ff 20             	cmp    edi,0x20
c001814c:	75 d4                	jne    c0018122 <SoundCard::getSamples32(int, int*)+0x26>
c001814e:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0018154:	85 f6                	test   esi,esi
c0018156:	75 0f                	jne    c0018167 <SoundCard::getSamples32(int, int*)+0x6b>
c0018158:	84 c0                	test   al,al
c001815a:	74 1b                	je     c0018177 <SoundCard::getSamples32(int, int*)+0x7b>
c001815c:	83 ec 0c             	sub    esp,0xc
c001815f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018161:	53                   	push   ebx
c0018162:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0018165:	eb 0d                	jmp    c0018174 <SoundCard::getSamples32(int, int*)+0x78>
c0018167:	84 c0                	test   al,al
c0018169:	75 0c                	jne    c0018177 <SoundCard::getSamples32(int, int*)+0x7b>
c001816b:	83 ec 0c             	sub    esp,0xc
c001816e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018170:	53                   	push   ebx
c0018171:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0018174:	83 c4 10             	add    esp,0x10
c0018177:	83 c4 0c             	add    esp,0xc
c001817a:	89 f0                	mov    eax,esi
c001817c:	5b                   	pop    ebx
c001817d:	5e                   	pop    esi
c001817e:	5f                   	pop    edi
c001817f:	5d                   	pop    ebp
c0018180:	c3                   	ret    
c0018181:	90                   	nop

c0018182 <SoundCard::addChannel(SoundPort*)>:
c0018182:	83 ec 0c             	sub    esp,0xc
c0018185:	31 c0                	xor    eax,eax
c0018187:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001818b:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0018193:	74 1b                	je     c00181b0 <SoundCard::addChannel(SoundPort*)+0x2e>
c0018195:	40                   	inc    eax
c0018196:	83 f8 20             	cmp    eax,0x20
c0018199:	75 f0                	jne    c001818b <SoundCard::addChannel(SoundPort*)+0x9>
c001819b:	83 ec 0c             	sub    esp,0xc
c001819e:	68 ed f0 01 c0       	push   0xc001f0ed
c00181a3:	e8 e7 83 ff ff       	call   c001058f <KePanic(char const*)>
c00181a8:	83 c4 10             	add    esp,0x10
c00181ab:	83 c8 ff             	or     eax,0xffffffff
c00181ae:	eb 0b                	jmp    c00181bb <SoundCard::addChannel(SoundPort*)+0x39>
c00181b0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00181b4:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c00181bb:	83 c4 0c             	add    esp,0xc
c00181be:	c3                   	ret    
c00181bf:	90                   	nop

c00181c0 <SoundCard::removeChannel(int)>:
c00181c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00181c8:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c00181d3:	c3                   	ret    

c00181d4 <SoundPort::SoundPort(int, int, int, int)>:
c00181d4:	83 ec 0c             	sub    esp,0xc
c00181d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181db:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00181e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181e6:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00181ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00181f2:	89 10                	mov    DWORD PTR [eax],edx
c00181f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181fc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00181ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018203:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018207:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001820a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001820f:	75 13                	jne    c0018224 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0018211:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018215:	8b 00                	mov    eax,DWORD PTR [eax]
c0018217:	05 a0 0f 00 00       	add    eax,0xfa0
c001821c:	01 c0                	add    eax,eax
c001821e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018222:	66 90                	xchg   ax,ax
c0018224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018228:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001822c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001822f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018233:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001823a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001823e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018241:	c1 e0 02             	shl    eax,0x2
c0018244:	83 ec 0c             	sub    esp,0xc
c0018247:	50                   	push   eax
c0018248:	e8 44 fa fe ff       	call   c0007c91 <malloc>
c001824d:	83 c4 10             	add    esp,0x10
c0018250:	89 c2                	mov    edx,eax
c0018252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018256:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018259:	90                   	nop
c001825a:	83 c4 0c             	add    esp,0xc
c001825d:	c3                   	ret    
c001825e:	66 90                	xchg   ax,ax

c0018260 <SoundPort::~SoundPort()>:
c0018260:	83 ec 0c             	sub    esp,0xc
c0018263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018267:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001826a:	85 c0                	test   eax,eax
c001826c:	74 1e                	je     c001828c <SoundPort::~SoundPort()+0x2c>
c001826e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018272:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018275:	83 ec 0c             	sub    esp,0xc
c0018278:	50                   	push   eax
c0018279:	e8 23 fa fe ff       	call   c0007ca1 <free>
c001827e:	83 c4 10             	add    esp,0x10
c0018281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018285:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001828c:	90                   	nop
c001828d:	83 c4 0c             	add    esp,0xc
c0018290:	c3                   	ret    
c0018291:	90                   	nop
c0018292:	66 90                	xchg   ax,ax

c0018294 <SoundPort::unpause()>:
c0018294:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018298:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001829c:	c3                   	ret    
c001829d:	90                   	nop
c001829e:	66 90                	xchg   ax,ax

c00182a0 <SoundPort::pause()>:
c00182a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182a4:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00182a8:	c3                   	ret    
c00182a9:	90                   	nop
c00182aa:	66 90                	xchg   ax,ax

c00182ac <SoundPort::getBufferUsed()>:
c00182ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182b0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00182b3:	c3                   	ret    

c00182b4 <SoundPort::getBufferSize()>:
c00182b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00182bb:	c3                   	ret    

c00182bc <SoundPort::buffer16(short*, int)>:
c00182bc:	55                   	push   ebp
c00182bd:	57                   	push   edi
c00182be:	56                   	push   esi
c00182bf:	53                   	push   ebx
c00182c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00182c4:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00182c8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00182cb:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c00182ce:	74 68                	je     c0018338 <SoundPort::buffer16(short*, int)+0x7c>
c00182d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00182d4:	85 c9                	test   ecx,ecx
c00182d6:	7e 60                	jle    c0018338 <SoundPort::buffer16(short*, int)+0x7c>
c00182d8:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c00182dc:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00182df:	c1 e1 0f             	shl    ecx,0xf
c00182e2:	8d 70 01             	lea    esi,[eax+0x1]
c00182e5:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00182e8:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c00182eb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00182ee:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00182f1:	74 4d                	je     c0018340 <SoundPort::buffer16(short*, int)+0x84>
c00182f3:	31 f6                	xor    esi,esi
c00182f5:	eb 21                	jmp    c0018318 <SoundPort::buffer16(short*, int)+0x5c>
c00182f7:	90                   	nop
c00182f8:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c00182fd:	8d 79 01             	lea    edi,[ecx+0x1]
c0018300:	c1 e3 0f             	shl    ebx,0xf
c0018303:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0018306:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0018309:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001830c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001830f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018312:	74 1c                	je     c0018330 <SoundPort::buffer16(short*, int)+0x74>
c0018314:	89 c6                	mov    esi,eax
c0018316:	66 90                	xchg   ax,ax
c0018318:	8d 46 01             	lea    eax,[esi+0x1]
c001831b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001831f:	75 d7                	jne    c00182f8 <SoundPort::buffer16(short*, int)+0x3c>
c0018321:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018325:	8d 76 00             	lea    esi,[esi+0x0]
c0018328:	5b                   	pop    ebx
c0018329:	5e                   	pop    esi
c001832a:	5f                   	pop    edi
c001832b:	5d                   	pop    ebp
c001832c:	c3                   	ret    
c001832d:	8d 76 00             	lea    esi,[esi+0x0]
c0018330:	5b                   	pop    ebx
c0018331:	8d 46 02             	lea    eax,[esi+0x2]
c0018334:	5e                   	pop    esi
c0018335:	5f                   	pop    edi
c0018336:	5d                   	pop    ebp
c0018337:	c3                   	ret    
c0018338:	5b                   	pop    ebx
c0018339:	31 c0                	xor    eax,eax
c001833b:	5e                   	pop    esi
c001833c:	5f                   	pop    edi
c001833d:	5d                   	pop    ebp
c001833e:	c3                   	ret    
c001833f:	90                   	nop
c0018340:	b8 01 00 00 00       	mov    eax,0x1
c0018345:	eb e1                	jmp    c0018328 <SoundPort::buffer16(short*, int)+0x6c>
c0018347:	90                   	nop

c0018348 <SoundPort::buffer32(int*, int)>:
c0018348:	55                   	push   ebp
c0018349:	57                   	push   edi
c001834a:	56                   	push   esi
c001834b:	53                   	push   ebx
c001834c:	51                   	push   ecx
c001834d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018351:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018355:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018358:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001835c:	89 04 24             	mov    DWORD PTR [esp],eax
c001835f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018362:	74 5c                	je     c00183c0 <SoundPort::buffer32(int*, int)+0x78>
c0018364:	85 c0                	test   eax,eax
c0018366:	7e 58                	jle    c00183c0 <SoundPort::buffer32(int*, int)+0x78>
c0018368:	8d 71 01             	lea    esi,[ecx+0x1]
c001836b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001836e:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018371:	8b 37                	mov    esi,DWORD PTR [edi]
c0018373:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0018376:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018379:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001837c:	74 4a                	je     c00183c8 <SoundPort::buffer32(int*, int)+0x80>
c001837e:	31 f6                	xor    esi,esi
c0018380:	eb 1e                	jmp    c00183a0 <SoundPort::buffer32(int*, int)+0x58>
c0018382:	66 90                	xchg   ax,ax
c0018384:	8d 69 01             	lea    ebp,[ecx+0x1]
c0018387:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001838a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001838d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018390:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0018394:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018397:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001839a:	74 18                	je     c00183b4 <SoundPort::buffer32(int*, int)+0x6c>
c001839c:	89 de                	mov    esi,ebx
c001839e:	66 90                	xchg   ax,ax
c00183a0:	8d 5e 01             	lea    ebx,[esi+0x1]
c00183a3:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c00183a6:	75 dc                	jne    c0018384 <SoundPort::buffer32(int*, int)+0x3c>
c00183a8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00183ab:	90                   	nop
c00183ac:	5a                   	pop    edx
c00183ad:	5b                   	pop    ebx
c00183ae:	5e                   	pop    esi
c00183af:	5f                   	pop    edi
c00183b0:	5d                   	pop    ebp
c00183b1:	c3                   	ret    
c00183b2:	66 90                	xchg   ax,ax
c00183b4:	5a                   	pop    edx
c00183b5:	8d 46 02             	lea    eax,[esi+0x2]
c00183b8:	5b                   	pop    ebx
c00183b9:	5e                   	pop    esi
c00183ba:	5f                   	pop    edi
c00183bb:	5d                   	pop    ebp
c00183bc:	c3                   	ret    
c00183bd:	8d 76 00             	lea    esi,[esi+0x0]
c00183c0:	5a                   	pop    edx
c00183c1:	31 c0                	xor    eax,eax
c00183c3:	5b                   	pop    ebx
c00183c4:	5e                   	pop    esi
c00183c5:	5f                   	pop    edi
c00183c6:	5d                   	pop    ebp
c00183c7:	c3                   	ret    
c00183c8:	b8 01 00 00 00       	mov    eax,0x1
c00183cd:	eb dd                	jmp    c00183ac <SoundPort::buffer32(int*, int)+0x64>
c00183cf:	90                   	nop

c00183d0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c00183d0:	57                   	push   edi
c00183d1:	56                   	push   esi
c00183d2:	53                   	push   ebx
c00183d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00183d7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00183db:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c00183e1:	39 03                	cmp    DWORD PTR [ebx],eax
c00183e3:	74 13                	je     c00183f8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c00183e5:	83 ec 0c             	sub    esp,0xc
c00183e8:	68 40 f1 01 c0       	push   0xc001f140
c00183ed:	e8 9d 81 ff ff       	call   c001058f <KePanic(char const*)>
c00183f2:	83 c4 10             	add    esp,0x10
c00183f5:	8d 76 00             	lea    esi,[esi+0x0]
c00183f8:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c00183fe:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0018401:	74 11                	je     c0018414 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0018403:	83 ec 0c             	sub    esp,0xc
c0018406:	68 7f f1 01 c0       	push   0xc001f17f
c001840b:	e8 7f 81 ff ff       	call   c001058f <KePanic(char const*)>
c0018410:	83 c4 10             	add    esp,0x10
c0018413:	90                   	nop
c0018414:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001841a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001841d:	74 11                	je     c0018430 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001841f:	83 ec 0c             	sub    esp,0xc
c0018422:	68 7f f1 01 c0       	push   0xc001f17f
c0018427:	e8 63 81 ff ff       	call   c001058f <KePanic(char const*)>
c001842c:	83 c4 10             	add    esp,0x10
c001842f:	90                   	nop
c0018430:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0018433:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0018437:	7e 07                	jle    c0018440 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0018439:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001843d:	8d 76 00             	lea    esi,[esi+0x0]
c0018440:	85 f6                	test   esi,esi
c0018442:	7e 2c                	jle    c0018470 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0018444:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018448:	8d 3c 36             	lea    edi,[esi+esi*1]
c001844b:	31 c9                	xor    ecx,ecx
c001844d:	01 d7                	add    edi,edx
c001844f:	90                   	nop
c0018450:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0018453:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0018456:	85 c0                	test   eax,eax
c0018458:	79 06                	jns    c0018460 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001845a:	05 ff 7f 00 00       	add    eax,0x7fff
c001845f:	90                   	nop
c0018460:	c1 f8 0f             	sar    eax,0xf
c0018463:	83 c1 04             	add    ecx,0x4
c0018466:	66 01 02             	add    WORD PTR [edx],ax
c0018469:	83 c2 02             	add    edx,0x2
c001846c:	39 d7                	cmp    edi,edx
c001846e:	75 e0                	jne    c0018450 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0018470:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0018473:	50                   	push   eax
c0018474:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018477:	29 f0                	sub    eax,esi
c0018479:	c1 e0 02             	shl    eax,0x2
c001847c:	50                   	push   eax
c001847d:	8d 04 b2             	lea    eax,[edx+esi*4]
c0018480:	50                   	push   eax
c0018481:	52                   	push   edx
c0018482:	e8 59 7f fe ff       	call   c00003e0 <memmove>
c0018487:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001848a:	83 c4 10             	add    esp,0x10
c001848d:	89 f0                	mov    eax,esi
c001848f:	5b                   	pop    ebx
c0018490:	5e                   	pop    esi
c0018491:	5f                   	pop    edi
c0018492:	c3                   	ret    
c0018493:	90                   	nop

c0018494 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0018494:	57                   	push   edi
c0018495:	56                   	push   esi
c0018496:	53                   	push   ebx
c0018497:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001849b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001849f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00184a3:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c00184a9:	39 06                	cmp    DWORD PTR [esi],eax
c00184ab:	74 13                	je     c00184c0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c00184ad:	83 ec 0c             	sub    esp,0xc
c00184b0:	68 60 f1 01 c0       	push   0xc001f160
c00184b5:	e8 d5 80 ff ff       	call   c001058f <KePanic(char const*)>
c00184ba:	83 c4 10             	add    esp,0x10
c00184bd:	8d 76 00             	lea    esi,[esi+0x0]
c00184c0:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c00184c6:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c00184c9:	74 11                	je     c00184dc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c00184cb:	83 ec 0c             	sub    esp,0xc
c00184ce:	68 9b f1 01 c0       	push   0xc001f19b
c00184d3:	e8 b7 80 ff ff       	call   c001058f <KePanic(char const*)>
c00184d8:	83 c4 10             	add    esp,0x10
c00184db:	90                   	nop
c00184dc:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c00184e2:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c00184e5:	74 11                	je     c00184f8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c00184e7:	83 ec 0c             	sub    esp,0xc
c00184ea:	68 9b f1 01 c0       	push   0xc001f19b
c00184ef:	e8 9b 80 ff ff       	call   c001058f <KePanic(char const*)>
c00184f4:	83 c4 10             	add    esp,0x10
c00184f7:	90                   	nop
c00184f8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00184fb:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c00184ff:	7e 07                	jle    c0018508 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0018501:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018505:	8d 76 00             	lea    esi,[esi+0x0]
c0018508:	85 ff                	test   edi,edi
c001850a:	7e 1c                	jle    c0018528 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001850c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0018513:	31 c0                	xor    eax,eax
c0018515:	8d 76 00             	lea    esi,[esi+0x0]
c0018518:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001851b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001851e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0018521:	83 c0 04             	add    eax,0x4
c0018524:	39 c1                	cmp    ecx,eax
c0018526:	75 f0                	jne    c0018518 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0018528:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001852b:	50                   	push   eax
c001852c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001852f:	29 f8                	sub    eax,edi
c0018531:	c1 e0 02             	shl    eax,0x2
c0018534:	50                   	push   eax
c0018535:	8d 04 ba             	lea    eax,[edx+edi*4]
c0018538:	50                   	push   eax
c0018539:	52                   	push   edx
c001853a:	e8 a1 7e fe ff       	call   c00003e0 <memmove>
c001853f:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c0018542:	83 c4 10             	add    esp,0x10
c0018545:	89 f8                	mov    eax,edi
c0018547:	5b                   	pop    ebx
c0018548:	5e                   	pop    esi
c0018549:	5f                   	pop    edi
c001854a:	c3                   	ret    
c001854b:	90                   	nop

c001854c <PCI::open(int, int, void*)>:
c001854c:	83 ec 18             	sub    esp,0x18
c001854f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018553:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018557:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001855d:	8b 10                	mov    edx,DWORD PTR [eax]
c001855f:	50                   	push   eax
c0018560:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0018563:	31 c0                	xor    eax,eax
c0018565:	83 c4 1c             	add    esp,0x1c
c0018568:	c3                   	ret    
c0018569:	90                   	nop

c001856a <PCI::close(int, int, void*)>:
c001856a:	31 c0                	xor    eax,eax
c001856c:	c3                   	ret    
c001856d:	90                   	nop

c001856e <PCI::PCI()>:
c001856e:	83 ec 0c             	sub    esp,0xc
c0018571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018575:	83 ec 08             	sub    esp,0x8
c0018578:	68 b7 f1 01 c0       	push   0xc001f1b7
c001857d:	50                   	push   eax
c001857e:	e8 3d 31 ff ff       	call   c000b6c0 <Bus::Bus(char const*)>
c0018583:	83 c4 10             	add    esp,0x10
c0018586:	ba 60 f2 01 c0       	mov    edx,0xc001f260
c001858b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001858f:	89 10                	mov    DWORD PTR [eax],edx
c0018591:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018595:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001859f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185a3:	a3 40 48 02 c0       	mov    ds:0xc0024840,eax
c00185a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185ac:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00185b2:	31 d2                	xor    edx,edx
c00185b4:	88 c2                	mov    dl,al
c00185b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185ba:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00185c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185c5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00185cb:	31 d2                	xor    edx,edx
c00185cd:	88 c2                	mov    dl,al
c00185cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185d3:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00185d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185dc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00185e2:	8d 50 01             	lea    edx,[eax+0x1]
c00185e5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00185e9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00185ef:	31 d2                	xor    edx,edx
c00185f1:	88 c2                	mov    dl,al
c00185f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185f7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00185fb:	83 c9 c0             	or     ecx,0xffffffc0
c00185fe:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0018602:	90                   	nop
c0018603:	83 c4 0c             	add    esp,0xc
c0018606:	c3                   	ret    
c0018607:	90                   	nop

c0018608 <PCI::readBAR8(unsigned int, int)>:
c0018608:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001860c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018610:	f6 c2 01             	test   dl,0x1
c0018613:	74 07                	je     c001861c <PCI::readBAR8(unsigned int, int)+0x14>
c0018615:	83 e2 fc             	and    edx,0xfffffffc
c0018618:	01 c2                	add    edx,eax
c001861a:	ec                   	in     al,dx
c001861b:	c3                   	ret    
c001861c:	83 e2 f0             	and    edx,0xfffffff0
c001861f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0018622:	c3                   	ret    
c0018623:	90                   	nop

c0018624 <PCI::readBAR16(unsigned int, int)>:
c0018624:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018628:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001862c:	f6 c2 01             	test   dl,0x1
c001862f:	74 08                	je     c0018639 <PCI::readBAR16(unsigned int, int)+0x15>
c0018631:	83 e2 fc             	and    edx,0xfffffffc
c0018634:	01 c2                	add    edx,eax
c0018636:	66 ed                	in     ax,dx
c0018638:	c3                   	ret    
c0018639:	83 e2 f0             	and    edx,0xfffffff0
c001863c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0018640:	c3                   	ret    
c0018641:	90                   	nop

c0018642 <PCI::readBAR32(unsigned int, int)>:
c0018642:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001864a:	f6 c2 01             	test   dl,0x1
c001864d:	74 07                	je     c0018656 <PCI::readBAR32(unsigned int, int)+0x14>
c001864f:	83 e2 fc             	and    edx,0xfffffffc
c0018652:	01 c2                	add    edx,eax
c0018654:	ed                   	in     eax,dx
c0018655:	c3                   	ret    
c0018656:	83 e2 f0             	and    edx,0xfffffff0
c0018659:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001865c:	c3                   	ret    
c001865d:	90                   	nop

c001865e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001865e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018662:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018666:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001866a:	f6 c2 01             	test   dl,0x1
c001866d:	74 07                	je     c0018676 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001866f:	83 e2 fc             	and    edx,0xfffffffc
c0018672:	01 ca                	add    edx,ecx
c0018674:	ee                   	out    dx,al
c0018675:	c3                   	ret    
c0018676:	83 e2 f0             	and    edx,0xfffffff0
c0018679:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001867c:	c3                   	ret    
c001867d:	90                   	nop

c001867e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001867e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018682:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018686:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001868a:	f6 c2 01             	test   dl,0x1
c001868d:	74 08                	je     c0018697 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001868f:	83 e2 fc             	and    edx,0xfffffffc
c0018692:	01 ca                	add    edx,ecx
c0018694:	66 ef                	out    dx,ax
c0018696:	c3                   	ret    
c0018697:	83 e2 f0             	and    edx,0xfffffff0
c001869a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001869e:	c3                   	ret    
c001869f:	90                   	nop

c00186a0 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00186a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00186a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00186ac:	f6 c2 01             	test   dl,0x1
c00186af:	74 07                	je     c00186b8 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00186b1:	83 e2 fc             	and    edx,0xfffffffc
c00186b4:	01 ca                	add    edx,ecx
c00186b6:	ef                   	out    dx,eax
c00186b7:	c3                   	ret    
c00186b8:	83 e2 f0             	and    edx,0xfffffff0
c00186bb:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00186be:	c3                   	ret    
c00186bf:	90                   	nop

c00186c0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00186c0:	55                   	push   ebp
c00186c1:	57                   	push   edi
c00186c2:	56                   	push   esi
c00186c3:	53                   	push   ebx
c00186c4:	83 ec 0c             	sub    esp,0xc
c00186c7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00186cb:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00186cf:	89 f0                	mov    eax,esi
c00186d1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00186d5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00186d9:	3c 07                	cmp    al,0x7
c00186db:	76 10                	jbe    c00186ed <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00186dd:	83 ec 0c             	sub    esp,0xc
c00186e0:	68 bf f1 01 c0       	push   0xc001f1bf
c00186e5:	e8 a5 7e ff ff       	call   c001058f <KePanic(char const*)>
c00186ea:	83 c4 10             	add    esp,0x10
c00186ed:	80 fb 0f             	cmp    bl,0xf
c00186f0:	76 10                	jbe    c0018702 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00186f2:	83 ec 0c             	sub    esp,0xc
c00186f5:	68 ef f1 01 c0       	push   0xc001f1ef
c00186fa:	e8 90 7e ff ff       	call   c001058f <KePanic(char const*)>
c00186ff:	83 c4 10             	add    esp,0x10
c0018702:	8d 04 36             	lea    eax,[esi+esi*1]
c0018705:	ba f8 0c 00 00       	mov    edx,0xcf8
c001870a:	83 c8 f0             	or     eax,0xfffffff0
c001870d:	ee                   	out    dx,al
c001870e:	ba fa 0c 00 00       	mov    edx,0xcfa
c0018713:	89 e8                	mov    eax,ebp
c0018715:	ee                   	out    dx,al
c0018716:	83 c4 0c             	add    esp,0xc
c0018719:	89 d8                	mov    eax,ebx
c001871b:	66 81 e7 fc 00       	and    di,0xfc
c0018720:	5b                   	pop    ebx
c0018721:	c1 e0 08             	shl    eax,0x8
c0018724:	5e                   	pop    esi
c0018725:	09 f8                	or     eax,edi
c0018727:	5f                   	pop    edi
c0018728:	66 0d 00 c0          	or     ax,0xc000
c001872c:	5d                   	pop    ebp
c001872d:	c3                   	ret    

c001872e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001872e:	57                   	push   edi
c001872f:	56                   	push   esi
c0018730:	53                   	push   ebx
c0018731:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018735:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018739:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001873f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018743:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018747:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001874b:	83 ff 01             	cmp    edi,0x1
c001874e:	75 3e                	jne    c001878e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0018750:	89 de                	mov    esi,ebx
c0018752:	0f b6 c0             	movzx  eax,al
c0018755:	81 e6 fc 00 00 00    	and    esi,0xfc
c001875b:	c1 e0 10             	shl    eax,0x10
c001875e:	0f b6 c9             	movzx  ecx,cl
c0018761:	09 f0                	or     eax,esi
c0018763:	c1 e1 08             	shl    ecx,0x8
c0018766:	0f b6 d2             	movzx  edx,dl
c0018769:	09 c8                	or     eax,ecx
c001876b:	c1 e2 0b             	shl    edx,0xb
c001876e:	09 d0                	or     eax,edx
c0018770:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018775:	0d 00 00 00 80       	or     eax,0x80000000
c001877a:	ef                   	out    dx,eax
c001877b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018780:	ed                   	in     eax,dx
c0018781:	83 e3 02             	and    ebx,0x2
c0018784:	0f b6 cb             	movzx  ecx,bl
c0018787:	c1 e1 03             	shl    ecx,0x3
c001878a:	d3 e8                	shr    eax,cl
c001878c:	eb 43                	jmp    c00187d1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001878e:	83 ff 02             	cmp    edi,0x2
c0018791:	75 2c                	jne    c00187bf <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0018793:	83 ec 0c             	sub    esp,0xc
c0018796:	0f b6 c9             	movzx  ecx,cl
c0018799:	0f b6 d2             	movzx  edx,dl
c001879c:	0f b6 fb             	movzx  edi,bl
c001879f:	0f b6 c0             	movzx  eax,al
c00187a2:	57                   	push   edi
c00187a3:	51                   	push   ecx
c00187a4:	52                   	push   edx
c00187a5:	50                   	push   eax
c00187a6:	56                   	push   esi
c00187a7:	e8 14 ff ff ff       	call   c00186c0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187ac:	89 c2                	mov    edx,eax
c00187ae:	ed                   	in     eax,dx
c00187af:	83 e3 02             	and    ebx,0x2
c00187b2:	83 c4 20             	add    esp,0x20
c00187b5:	0f b6 cb             	movzx  ecx,bl
c00187b8:	c1 e1 03             	shl    ecx,0x3
c00187bb:	d3 e8                	shr    eax,cl
c00187bd:	eb 12                	jmp    c00187d1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00187bf:	83 ec 0c             	sub    esp,0xc
c00187c2:	68 1f f2 01 c0       	push   0xc001f21f
c00187c7:	e8 c3 7d ff ff       	call   c001058f <KePanic(char const*)>
c00187cc:	83 c4 10             	add    esp,0x10
c00187cf:	31 c0                	xor    eax,eax
c00187d1:	5b                   	pop    ebx
c00187d2:	5e                   	pop    esi
c00187d3:	5f                   	pop    edi
c00187d4:	c3                   	ret    
c00187d5:	90                   	nop

c00187d6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00187d6:	83 ec 18             	sub    esp,0x18
c00187d9:	6a 00                	push   0x0
c00187db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187e0:	50                   	push   eax
c00187e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187e6:	50                   	push   eax
c00187e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187ec:	50                   	push   eax
c00187ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187f1:	e8 38 ff ff ff       	call   c001872e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187f6:	83 c4 2c             	add    esp,0x2c
c00187f9:	c3                   	ret    

c00187fa <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00187fa:	83 ec 18             	sub    esp,0x18
c00187fd:	6a 0e                	push   0xe
c00187ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018804:	50                   	push   eax
c0018805:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001880a:	50                   	push   eax
c001880b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018810:	50                   	push   eax
c0018811:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018815:	e8 14 ff ff ff       	call   c001872e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001881a:	83 c4 2c             	add    esp,0x2c
c001881d:	0f b6 c0             	movzx  eax,al
c0018820:	c3                   	ret    
c0018821:	90                   	nop

c0018822 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0018822:	55                   	push   ebp
c0018823:	57                   	push   edi
c0018824:	56                   	push   esi
c0018825:	53                   	push   ebx
c0018826:	83 ec 18             	sub    esp,0x18
c0018829:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001882e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0018833:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0018838:	6a 0a                	push   0xa
c001883a:	56                   	push   esi
c001883b:	55                   	push   ebp
c001883c:	57                   	push   edi
c001883d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018841:	e8 e8 fe ff ff       	call   c001872e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018846:	83 c4 14             	add    esp,0x14
c0018849:	89 c3                	mov    ebx,eax
c001884b:	6a 0a                	push   0xa
c001884d:	0f b6 db             	movzx  ebx,bl
c0018850:	56                   	push   esi
c0018851:	55                   	push   ebp
c0018852:	57                   	push   edi
c0018853:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018857:	e8 d2 fe ff ff       	call   c001872e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001885c:	83 c4 2c             	add    esp,0x2c
c001885f:	25 00 ff 00 00       	and    eax,0xff00
c0018864:	09 d8                	or     eax,ebx
c0018866:	5b                   	pop    ebx
c0018867:	5e                   	pop    esi
c0018868:	5f                   	pop    edi
c0018869:	5d                   	pop    ebp
c001886a:	c3                   	ret    
c001886b:	90                   	nop

c001886c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001886c:	83 ec 18             	sub    esp,0x18
c001886f:	6a 08                	push   0x8
c0018871:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018876:	50                   	push   eax
c0018877:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001887c:	50                   	push   eax
c001887d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018882:	50                   	push   eax
c0018883:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018887:	e8 a2 fe ff ff       	call   c001872e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001888c:	83 c4 2c             	add    esp,0x2c
c001888f:	0f b6 c4             	movzx  eax,ah
c0018892:	c3                   	ret    
c0018893:	90                   	nop

c0018894 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0018894:	83 ec 18             	sub    esp,0x18
c0018897:	6a 08                	push   0x8
c0018899:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001889e:	50                   	push   eax
c001889f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188a4:	50                   	push   eax
c00188a5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188aa:	50                   	push   eax
c00188ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188af:	e8 7a fe ff ff       	call   c001872e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188b4:	83 c4 2c             	add    esp,0x2c
c00188b7:	c3                   	ret    

c00188b8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00188b8:	83 ec 18             	sub    esp,0x18
c00188bb:	6a 3c                	push   0x3c
c00188bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188c2:	50                   	push   eax
c00188c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188c8:	50                   	push   eax
c00188c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188ce:	50                   	push   eax
c00188cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188d3:	e8 56 fe ff ff       	call   c001872e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188d8:	83 c4 2c             	add    esp,0x2c
c00188db:	c3                   	ret    

c00188dc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00188dc:	83 ec 18             	sub    esp,0x18
c00188df:	6a 18                	push   0x18
c00188e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188e6:	50                   	push   eax
c00188e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188ec:	50                   	push   eax
c00188ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188f2:	50                   	push   eax
c00188f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00188f7:	e8 32 fe ff ff       	call   c001872e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188fc:	83 c4 2c             	add    esp,0x2c
c00188ff:	0f b6 c4             	movzx  eax,ah
c0018902:	c3                   	ret    
c0018903:	90                   	nop

c0018904 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018904:	55                   	push   ebp
c0018905:	57                   	push   edi
c0018906:	56                   	push   esi
c0018907:	53                   	push   ebx
c0018908:	83 ec 28             	sub    esp,0x28
c001890b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001890f:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0018914:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0018919:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001891e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0018925:	8d 43 12             	lea    eax,[ebx+0x12]
c0018928:	83 c3 10             	add    ebx,0x10
c001892b:	0f b6 c0             	movzx  eax,al
c001892e:	0f b6 db             	movzx  ebx,bl
c0018931:	50                   	push   eax
c0018932:	51                   	push   ecx
c0018933:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0018937:	57                   	push   edi
c0018938:	55                   	push   ebp
c0018939:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001893d:	e8 ec fd ff ff       	call   c001872e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018942:	83 c4 14             	add    esp,0x14
c0018945:	89 c6                	mov    esi,eax
c0018947:	53                   	push   ebx
c0018948:	c1 e6 10             	shl    esi,0x10
c001894b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001894f:	51                   	push   ecx
c0018950:	57                   	push   edi
c0018951:	55                   	push   ebp
c0018952:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018956:	e8 d3 fd ff ff       	call   c001872e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001895b:	83 c4 3c             	add    esp,0x3c
c001895e:	0f b7 c0             	movzx  eax,ax
c0018961:	5b                   	pop    ebx
c0018962:	09 f0                	or     eax,esi
c0018964:	5e                   	pop    esi
c0018965:	5f                   	pop    edi
c0018966:	5d                   	pop    ebp
c0018967:	c3                   	ret    

c0018968 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0018968:	55                   	push   ebp
c0018969:	57                   	push   edi
c001896a:	56                   	push   esi
c001896b:	53                   	push   ebx
c001896c:	83 ec 0c             	sub    esp,0xc
c001896f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018973:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018977:	89 f5                	mov    ebp,esi
c0018979:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001897f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018983:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018987:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001898b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001898f:	83 f9 01             	cmp    ecx,0x1
c0018992:	75 5d                	jne    c00189f1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0018994:	0f b6 c8             	movzx  ecx,al
c0018997:	0f b6 d2             	movzx  edx,dl
c001899a:	c1 e1 10             	shl    ecx,0x10
c001899d:	c1 e2 0b             	shl    edx,0xb
c00189a0:	89 f0                	mov    eax,esi
c00189a2:	25 fc 00 00 00       	and    eax,0xfc
c00189a7:	09 c1                	or     ecx,eax
c00189a9:	89 e8                	mov    eax,ebp
c00189ab:	0f b6 c0             	movzx  eax,al
c00189ae:	c1 e0 08             	shl    eax,0x8
c00189b1:	09 c1                	or     ecx,eax
c00189b3:	09 d1                	or     ecx,edx
c00189b5:	ba f8 0c 00 00       	mov    edx,0xcf8
c00189ba:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00189c0:	89 c8                	mov    eax,ecx
c00189c2:	ef                   	out    dx,eax
c00189c3:	ba fc 0c 00 00       	mov    edx,0xcfc
c00189c8:	ed                   	in     eax,dx
c00189c9:	0f b7 db             	movzx  ebx,bx
c00189cc:	83 e6 02             	and    esi,0x2
c00189cf:	74 0a                	je     c00189db <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00189d1:	0f b7 d0             	movzx  edx,ax
c00189d4:	c1 e3 10             	shl    ebx,0x10
c00189d7:	09 d3                	or     ebx,edx
c00189d9:	eb 05                	jmp    c00189e0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00189db:	66 31 c0             	xor    ax,ax
c00189de:	09 c3                	or     ebx,eax
c00189e0:	ba f8 0c 00 00       	mov    edx,0xcf8
c00189e5:	89 c8                	mov    eax,ecx
c00189e7:	ef                   	out    dx,eax
c00189e8:	ba fc 0c 00 00       	mov    edx,0xcfc
c00189ed:	89 d8                	mov    eax,ebx
c00189ef:	eb 41                	jmp    c0018a32 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00189f1:	83 f9 02             	cmp    ecx,0x2
c00189f4:	75 45                	jne    c0018a3b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00189f6:	83 ec 0c             	sub    esp,0xc
c00189f9:	0f b6 d2             	movzx  edx,dl
c00189fc:	89 f1                	mov    ecx,esi
c00189fe:	0f b6 c0             	movzx  eax,al
c0018a01:	0f b6 f1             	movzx  esi,cl
c0018a04:	89 e9                	mov    ecx,ebp
c0018a06:	56                   	push   esi
c0018a07:	0f b6 c9             	movzx  ecx,cl
c0018a0a:	51                   	push   ecx
c0018a0b:	52                   	push   edx
c0018a0c:	50                   	push   eax
c0018a0d:	57                   	push   edi
c0018a0e:	e8 ad fc ff ff       	call   c00186c0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018a13:	89 c2                	mov    edx,eax
c0018a15:	ed                   	in     eax,dx
c0018a16:	83 c4 20             	add    esp,0x20
c0018a19:	0f b7 db             	movzx  ebx,bx
c0018a1c:	f6 c2 02             	test   dl,0x2
c0018a1f:	74 0c                	je     c0018a2d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0018a21:	0f b7 c8             	movzx  ecx,ax
c0018a24:	89 d8                	mov    eax,ebx
c0018a26:	c1 e0 10             	shl    eax,0x10
c0018a29:	09 c8                	or     eax,ecx
c0018a2b:	eb 05                	jmp    c0018a32 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018a2d:	66 31 c0             	xor    ax,ax
c0018a30:	09 d8                	or     eax,ebx
c0018a32:	ef                   	out    dx,eax
c0018a33:	83 c4 0c             	add    esp,0xc
c0018a36:	5b                   	pop    ebx
c0018a37:	5e                   	pop    esi
c0018a38:	5f                   	pop    edi
c0018a39:	5d                   	pop    ebp
c0018a3a:	c3                   	ret    
c0018a3b:	c7 44 24 20 1f f2 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f21f
c0018a43:	83 c4 0c             	add    esp,0xc
c0018a46:	5b                   	pop    ebx
c0018a47:	5e                   	pop    esi
c0018a48:	5f                   	pop    edi
c0018a49:	5d                   	pop    ebp
c0018a4a:	e9 40 7b ff ff       	jmp    c001058f <KePanic(char const*)>
c0018a4f:	90                   	nop

c0018a50 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0018a50:	55                   	push   ebp
c0018a51:	57                   	push   edi
c0018a52:	56                   	push   esi
c0018a53:	53                   	push   ebx
c0018a54:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018a5a:	80 3d 4c 48 02 c0 00 	cmp    BYTE PTR ds:0xc002484c,0x0
c0018a61:	0f 85 84 00 00 00    	jne    c0018aeb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0018a67:	83 ec 0c             	sub    esp,0xc
c0018a6a:	68 14 01 00 00       	push   0x114
c0018a6f:	e8 1d f2 fe ff       	call   c0007c91 <malloc>
c0018a74:	83 c4 0c             	add    esp,0xc
c0018a77:	89 c3                	mov    ebx,eax
c0018a79:	ff 35 90 3e 02 c0    	push   DWORD PTR ds:0xc0023e90
c0018a7f:	68 25 f2 01 c0       	push   0xc001f225
c0018a84:	50                   	push   eax
c0018a85:	e8 18 24 ff ff       	call   c000aea2 <File::File(char const*, Process*)>
c0018a8a:	5a                   	pop    edx
c0018a8b:	59                   	pop    ecx
c0018a8c:	6a 01                	push   0x1
c0018a8e:	53                   	push   ebx
c0018a8f:	e8 ce 24 ff ff       	call   c000af62 <File::open(FileOpenMode)>
c0018a94:	83 c4 0c             	add    esp,0xc
c0018a97:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0018a9b:	50                   	push   eax
c0018a9c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018aa0:	50                   	push   eax
c0018aa1:	53                   	push   ebx
c0018aa2:	e8 67 27 ff ff       	call   c000b20e <File::stat(unsigned long long*, bool*)>
c0018aa7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018aab:	40                   	inc    eax
c0018aac:	89 04 24             	mov    DWORD PTR [esp],eax
c0018aaf:	e8 dd f1 fe ff       	call   c0007c91 <malloc>
c0018ab4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018ab8:	a3 48 48 02 c0       	mov    ds:0xc0024848,eax
c0018abd:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018ac1:	5e                   	pop    esi
c0018ac2:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018ac4:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018ac8:	51                   	push   ecx
c0018ac9:	50                   	push   eax
c0018aca:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018ace:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018ad2:	53                   	push   ebx
c0018ad3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018ad6:	83 c4 14             	add    esp,0x14
c0018ad9:	53                   	push   ebx
c0018ada:	e8 e1 24 ff ff       	call   c000afc0 <File::close()>
c0018adf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018ae3:	83 c4 10             	add    esp,0x10
c0018ae6:	a3 44 48 02 c0       	mov    ds:0xc0024844,eax
c0018aeb:	a1 44 48 02 c0       	mov    eax,ds:0xc0024844
c0018af0:	8b 15 48 48 02 c0    	mov    edx,DWORD PTR ds:0xc0024848
c0018af6:	89 04 24             	mov    DWORD PTR [esp],eax
c0018af9:	31 ff                	xor    edi,edi
c0018afb:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018b03:	31 f6                	xor    esi,esi
c0018b05:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018b0a:	31 db                	xor    ebx,ebx
c0018b0c:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018b14:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018b19:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018b20:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018b24:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018b2b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018b2f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018b32:	0f 8e 6b 01 00 00    	jle    c0018ca3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018b38:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018b3b:	d4 40                	aam    0x40
c0018b3d:	d5 39                	aad    0x39
c0018b3f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b43:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018b47:	d4 40                	aam    0x40
c0018b49:	d5 39                	aad    0x39
c0018b4b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018b4f:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018b53:	d4 40                	aam    0x40
c0018b55:	d5 39                	aad    0x39
c0018b57:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018b5b:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018b5f:	d4 40                	aam    0x40
c0018b61:	d5 39                	aad    0x39
c0018b63:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018b67:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018b6b:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018b6f:	3c 56                	cmp    al,0x56
c0018b71:	74 45                	je     c0018bb8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018b73:	d4 40                	aam    0x40
c0018b75:	d5 39                	aad    0x39
c0018b77:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018b7a:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018b7e:	0f b6 c9             	movzx  ecx,cl
c0018b81:	c1 e1 04             	shl    ecx,0x4
c0018b84:	d4 40                	aam    0x40
c0018b86:	d5 39                	aad    0x39
c0018b88:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018b8b:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018b8f:	0f b6 db             	movzx  ebx,bl
c0018b92:	09 cb                	or     ebx,ecx
c0018b94:	c1 e3 04             	shl    ebx,0x4
c0018b97:	d4 40                	aam    0x40
c0018b99:	d5 39                	aad    0x39
c0018b9b:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018b9e:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018ba2:	0f b6 c9             	movzx  ecx,cl
c0018ba5:	09 cb                	or     ebx,ecx
c0018ba7:	c1 e3 04             	shl    ebx,0x4
c0018baa:	89 d9                	mov    ecx,ebx
c0018bac:	d4 40                	aam    0x40
c0018bae:	d5 39                	aad    0x39
c0018bb0:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018bb3:	0f b6 db             	movzx  ebx,bl
c0018bb6:	09 cb                	or     ebx,ecx
c0018bb8:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018bbc:	80 f9 44             	cmp    cl,0x44
c0018bbf:	74 47                	je     c0018c08 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018bc1:	88 c8                	mov    al,cl
c0018bc3:	d4 40                	aam    0x40
c0018bc5:	d5 39                	aad    0x39
c0018bc7:	83 e8 30             	sub    eax,0x30
c0018bca:	0f b6 e8             	movzx  ebp,al
c0018bcd:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018bd1:	c1 e5 04             	shl    ebp,0x4
c0018bd4:	d4 40                	aam    0x40
c0018bd6:	d5 39                	aad    0x39
c0018bd8:	83 e8 30             	sub    eax,0x30
c0018bdb:	0f b6 f0             	movzx  esi,al
c0018bde:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018be2:	09 ee                	or     esi,ebp
c0018be4:	c1 e6 04             	shl    esi,0x4
c0018be7:	d4 40                	aam    0x40
c0018be9:	d5 39                	aad    0x39
c0018beb:	83 e8 30             	sub    eax,0x30
c0018bee:	0f b6 e8             	movzx  ebp,al
c0018bf1:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018bf5:	09 ee                	or     esi,ebp
c0018bf7:	c1 e6 04             	shl    esi,0x4
c0018bfa:	89 f5                	mov    ebp,esi
c0018bfc:	d4 40                	aam    0x40
c0018bfe:	d5 39                	aad    0x39
c0018c00:	83 e8 30             	sub    eax,0x30
c0018c03:	0f b6 f0             	movzx  esi,al
c0018c06:	09 ee                	or     esi,ebp
c0018c08:	83 c7 10             	add    edi,0x10
c0018c0b:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018c0f:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018c12:	3c 0a                	cmp    al,0xa
c0018c14:	74 09                	je     c0018c1f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018c16:	45                   	inc    ebp
c0018c17:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018c1a:	75 16                	jne    c0018c32 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018c1c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018c1f:	3c 0a                	cmp    al,0xa
c0018c21:	0f 94 c0             	sete   al
c0018c24:	0f b6 c0             	movzx  eax,al
c0018c27:	01 c7                	add    edi,eax
c0018c29:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018c2e:	75 0c                	jne    c0018c3c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018c30:	eb 15                	jmp    c0018c47 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018c32:	47                   	inc    edi
c0018c33:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018c36:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018c3a:	eb d3                	jmp    c0018c0f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018c3c:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018c41:	0f 85 e8 fe ff ff    	jne    c0018b2f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c47:	80 f9 44             	cmp    cl,0x44
c0018c4a:	74 0b                	je     c0018c57 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018c4c:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018c51:	0f 85 d8 fe ff ff    	jne    c0018b2f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c57:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018c5b:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018c5f:	c1 e1 04             	shl    ecx,0x4
c0018c62:	83 e8 30             	sub    eax,0x30
c0018c65:	09 c8                	or     eax,ecx
c0018c67:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018c6b:	0f 85 be fe ff ff    	jne    c0018b2f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c71:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018c75:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018c79:	c1 e1 04             	shl    ecx,0x4
c0018c7c:	83 e8 30             	sub    eax,0x30
c0018c7f:	09 c8                	or     eax,ecx
c0018c81:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018c85:	0f 85 a4 fe ff ff    	jne    c0018b2f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c8b:	50                   	push   eax
c0018c8c:	50                   	push   eax
c0018c8d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c91:	50                   	push   eax
c0018c92:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018c99:	e8 62 79 fe ff       	call   c0000600 <strcpy>
c0018c9e:	83 c4 10             	add    esp,0x10
c0018ca1:	eb 15                	jmp    c0018cb8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018ca3:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018caa:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018cb5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018cb8:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018cbf:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018cc5:	5b                   	pop    ebx
c0018cc6:	5e                   	pop    esi
c0018cc7:	5f                   	pop    edi
c0018cc8:	5d                   	pop    ebp
c0018cc9:	c3                   	ret    

c0018cca <PCI::checkBus(unsigned char)>:
c0018cca:	56                   	push   esi
c0018ccb:	53                   	push   ebx
c0018ccc:	31 f6                	xor    esi,esi
c0018cce:	51                   	push   ecx
c0018ccf:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018cd3:	0f b6 c3             	movzx  eax,bl
c0018cd6:	52                   	push   edx
c0018cd7:	56                   	push   esi
c0018cd8:	46                   	inc    esi
c0018cd9:	50                   	push   eax
c0018cda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018cde:	e8 f3 02 00 00       	call   c0018fd6 <PCI::checkDevice(unsigned char, unsigned char)>
c0018ce3:	83 c4 10             	add    esp,0x10
c0018ce6:	83 fe 20             	cmp    esi,0x20
c0018ce9:	75 e8                	jne    c0018cd3 <PCI::checkBus(unsigned char)+0x9>
c0018ceb:	58                   	pop    eax
c0018cec:	5b                   	pop    ebx
c0018ced:	5e                   	pop    esi
c0018cee:	c3                   	ret    
c0018cef:	90                   	nop

c0018cf0 <PCI::foundDevice(PCIDeviceInfo)>:
c0018cf0:	55                   	push   ebp
c0018cf1:	57                   	push   edi
c0018cf2:	56                   	push   esi
c0018cf3:	53                   	push   ebx
c0018cf4:	83 ec 1c             	sub    esp,0x1c
c0018cf7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018cfb:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018d01:	0f 84 52 01 00 00    	je     c0018e59 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018d07:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018d0b:	66 81 f9 06 04       	cmp    cx,0x406
c0018d10:	75 2c                	jne    c0018d3e <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018d12:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018d17:	50                   	push   eax
c0018d18:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018d1d:	50                   	push   eax
c0018d1e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018d23:	50                   	push   eax
c0018d24:	56                   	push   esi
c0018d25:	e8 b2 fb ff ff       	call   c00188dc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018d2a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018d2e:	0f b6 c0             	movzx  eax,al
c0018d31:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018d35:	83 c4 2c             	add    esp,0x2c
c0018d38:	5b                   	pop    ebx
c0018d39:	5e                   	pop    esi
c0018d3a:	5f                   	pop    edi
c0018d3b:	5d                   	pop    ebp
c0018d3c:	eb 8c                	jmp    c0018cca <PCI::checkBus(unsigned char)>
c0018d3e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018d42:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018d48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018d4c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018d50:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018d54:	88 d3                	mov    bl,dl
c0018d56:	85 c0                	test   eax,eax
c0018d58:	74 33                	je     c0018d8d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018d5a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018d5d:	85 d2                	test   edx,edx
c0018d5f:	74 28                	je     c0018d89 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d61:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018d67:	31 ef                	xor    edi,ebp
c0018d69:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018d6f:	75 18                	jne    c0018d89 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d71:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018d75:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018d7b:	75 0c                	jne    c0018d89 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d7d:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018d83:	0f 84 d0 00 00 00    	je     c0018e59 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018d89:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d8b:	eb c9                	jmp    c0018d56 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018d8d:	66 81 f9 01 06       	cmp    cx,0x601
c0018d92:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018d96:	75 19                	jne    c0018db1 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018d98:	83 ec 0c             	sub    esp,0xc
c0018d9b:	68 64 01 00 00       	push   0x164
c0018da0:	e8 ec ee fe ff       	call   c0007c91 <malloc>
c0018da5:	89 c5                	mov    ebp,eax
c0018da7:	89 04 24             	mov    DWORD PTR [esp],eax
c0018daa:	e8 47 0e 00 00       	call   c0019bf6 <SATABus::SATABus()>
c0018daf:	eb 1e                	jmp    c0018dcf <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018db1:	66 81 f9 01 01       	cmp    cx,0x101
c0018db6:	75 60                	jne    c0018e18 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018db8:	83 ec 0c             	sub    esp,0xc
c0018dbb:	68 70 02 00 00       	push   0x270
c0018dc0:	e8 cc ee fe ff       	call   c0007c91 <malloc>
c0018dc5:	89 c5                	mov    ebp,eax
c0018dc7:	89 04 24             	mov    DWORD PTR [esp],eax
c0018dca:	e8 cb 02 00 00       	call   c001909a <IDE::IDE()>
c0018dcf:	58                   	pop    eax
c0018dd0:	5a                   	pop    edx
c0018dd1:	55                   	push   ebp
c0018dd2:	56                   	push   esi
c0018dd3:	e8 94 2f ff ff       	call   c000bd6c <Device::addChild(Device*)>
c0018dd8:	83 ec 1c             	sub    esp,0x1c
c0018ddb:	b9 09 00 00 00       	mov    ecx,0x9
c0018de0:	fc                   	cld    
c0018de1:	89 e7                	mov    edi,esp
c0018de3:	89 de                	mov    esi,ebx
c0018de5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018de7:	55                   	push   ebp
c0018de8:	e8 c5 2e ff ff       	call   c000bcb2 <Device::preOpenPCI(PCIDeviceInfo)>
c0018ded:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018df0:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018df4:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018dfc:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018e04:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018e0c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018e0f:	83 c4 4c             	add    esp,0x4c
c0018e12:	5b                   	pop    ebx
c0018e13:	5e                   	pop    esi
c0018e14:	5f                   	pop    edi
c0018e15:	5d                   	pop    ebp
c0018e16:	ff e0                	jmp    eax
c0018e18:	83 ec 0c             	sub    esp,0xc
c0018e1b:	68 58 01 00 00       	push   0x158
c0018e20:	e8 6c ee fe ff       	call   c0007c91 <malloc>
c0018e25:	89 c5                	mov    ebp,eax
c0018e27:	58                   	pop    eax
c0018e28:	5a                   	pop    edx
c0018e29:	68 3e f2 01 c0       	push   0xc001f23e
c0018e2e:	55                   	push   ebp
c0018e2f:	e8 d6 31 ff ff       	call   c000c00a <DriverlessDevice::DriverlessDevice(char const*)>
c0018e34:	59                   	pop    ecx
c0018e35:	5f                   	pop    edi
c0018e36:	55                   	push   ebp
c0018e37:	56                   	push   esi
c0018e38:	e8 2f 2f ff ff       	call   c000bd6c <Device::addChild(Device*)>
c0018e3d:	b9 09 00 00 00       	mov    ecx,0x9
c0018e42:	fc                   	cld    
c0018e43:	89 df                	mov    edi,ebx
c0018e45:	89 de                	mov    esi,ebx
c0018e47:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018e49:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018e4d:	83 c4 2c             	add    esp,0x2c
c0018e50:	5b                   	pop    ebx
c0018e51:	5e                   	pop    esi
c0018e52:	5f                   	pop    edi
c0018e53:	5d                   	pop    ebp
c0018e54:	e9 59 2e ff ff       	jmp    c000bcb2 <Device::preOpenPCI(PCIDeviceInfo)>
c0018e59:	83 c4 1c             	add    esp,0x1c
c0018e5c:	5b                   	pop    ebx
c0018e5d:	5e                   	pop    esi
c0018e5e:	5f                   	pop    edi
c0018e5f:	5d                   	pop    ebp
c0018e60:	c3                   	ret    
c0018e61:	90                   	nop

c0018e62 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018e62:	55                   	push   ebp
c0018e63:	57                   	push   edi
c0018e64:	56                   	push   esi
c0018e65:	53                   	push   ebx
c0018e66:	83 ec 68             	sub    esp,0x68
c0018e69:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018e6d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018e74:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018e78:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018e7f:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018e84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018e88:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018e8f:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018e94:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018e98:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018e9d:	6a 0c                	push   0xc
c0018e9f:	57                   	push   edi
c0018ea0:	53                   	push   ebx
c0018ea1:	56                   	push   esi
c0018ea2:	55                   	push   ebp
c0018ea3:	e8 86 f8 ff ff       	call   c001872e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018ea8:	83 c4 20             	add    esp,0x20
c0018eab:	57                   	push   edi
c0018eac:	53                   	push   ebx
c0018ead:	56                   	push   esi
c0018eae:	55                   	push   ebp
c0018eaf:	e8 6e f9 ff ff       	call   c0018822 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018eb4:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018eb9:	57                   	push   edi
c0018eba:	53                   	push   ebx
c0018ebb:	56                   	push   esi
c0018ebc:	55                   	push   ebp
c0018ebd:	e8 f6 f9 ff ff       	call   c00188b8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018ec2:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018ec6:	83 c4 14             	add    esp,0x14
c0018ec9:	6a 3c                	push   0x3c
c0018ecb:	57                   	push   edi
c0018ecc:	53                   	push   ebx
c0018ecd:	56                   	push   esi
c0018ece:	55                   	push   ebp
c0018ecf:	e8 5a f8 ff ff       	call   c001872e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018ed4:	0f b6 c4             	movzx  eax,ah
c0018ed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018edb:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018edf:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018ee3:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c0018ee8:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018eee:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018ef4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018ef8:	83 c4 20             	add    esp,0x20
c0018efb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018f00:	74 30                	je     c0018f32 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018f02:	31 c0                	xor    eax,eax
c0018f04:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018f08:	7e 28                	jle    c0018f32 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018f0a:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018f12:	39 cb                	cmp    ebx,ecx
c0018f14:	75 19                	jne    c0018f2f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018f16:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018f1e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018f22:	75 0b                	jne    c0018f2f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018f24:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018f2b:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018f2f:	40                   	inc    eax
c0018f30:	eb d2                	jmp    c0018f04 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018f32:	31 d2                	xor    edx,edx
c0018f34:	83 ec 0c             	sub    esp,0xc
c0018f37:	57                   	push   edi
c0018f38:	53                   	push   ebx
c0018f39:	56                   	push   esi
c0018f3a:	52                   	push   edx
c0018f3b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018f3f:	55                   	push   ebp
c0018f40:	e8 bf f9 ff ff       	call   c0018904 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f45:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018f49:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018f4d:	42                   	inc    edx
c0018f4e:	83 c4 20             	add    esp,0x20
c0018f51:	83 fa 06             	cmp    edx,0x6
c0018f54:	75 de                	jne    c0018f34 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018f56:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018f5b:	83 ec 0c             	sub    esp,0xc
c0018f5e:	86 e0                	xchg   al,ah
c0018f60:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018f65:	6a 02                	push   0x2
c0018f67:	57                   	push   edi
c0018f68:	53                   	push   ebx
c0018f69:	56                   	push   esi
c0018f6a:	55                   	push   ebp
c0018f6b:	e8 be f7 ff ff       	call   c001872e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f70:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018f75:	83 c4 20             	add    esp,0x20
c0018f78:	57                   	push   edi
c0018f79:	53                   	push   ebx
c0018f7a:	56                   	push   esi
c0018f7b:	55                   	push   ebp
c0018f7c:	e8 eb f8 ff ff       	call   c001886c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018f81:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018f85:	57                   	push   edi
c0018f86:	53                   	push   ebx
c0018f87:	56                   	push   esi
c0018f88:	55                   	push   ebp
c0018f89:	e8 48 f8 ff ff       	call   c00187d6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f8e:	b9 09 00 00 00       	mov    ecx,0x9
c0018f93:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018f98:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018f9c:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018fa0:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018fa4:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018fa8:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018fac:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018fb0:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018fb4:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018fb8:	83 ec 0c             	sub    esp,0xc
c0018fbb:	fc                   	cld    
c0018fbc:	89 e7                	mov    edi,esp
c0018fbe:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018fc2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018fc4:	55                   	push   ebp
c0018fc5:	e8 26 fd ff ff       	call   c0018cf0 <PCI::foundDevice(PCIDeviceInfo)>
c0018fca:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018fd0:	5b                   	pop    ebx
c0018fd1:	5e                   	pop    esi
c0018fd2:	5f                   	pop    edi
c0018fd3:	5d                   	pop    ebp
c0018fd4:	c3                   	ret    
c0018fd5:	90                   	nop

c0018fd6 <PCI::checkDevice(unsigned char, unsigned char)>:
c0018fd6:	55                   	push   ebp
c0018fd7:	57                   	push   edi
c0018fd8:	56                   	push   esi
c0018fd9:	53                   	push   ebx
c0018fda:	83 ec 0c             	sub    esp,0xc
c0018fdd:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018fe1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018fe6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018feb:	6a 00                	push   0x0
c0018fed:	56                   	push   esi
c0018fee:	57                   	push   edi
c0018fef:	55                   	push   ebp
c0018ff0:	e8 e1 f7 ff ff       	call   c00187d6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018ff5:	6a 00                	push   0x0
c0018ff7:	56                   	push   esi
c0018ff8:	57                   	push   edi
c0018ff9:	55                   	push   ebp
c0018ffa:	e8 63 fe ff ff       	call   c0018e62 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018fff:	83 c4 20             	add    esp,0x20
c0019002:	6a 00                	push   0x0
c0019004:	56                   	push   esi
c0019005:	57                   	push   edi
c0019006:	55                   	push   ebp
c0019007:	e8 ee f7 ff ff       	call   c00187fa <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001900c:	83 c4 10             	add    esp,0x10
c001900f:	84 c0                	test   al,al
c0019011:	79 27                	jns    c001903a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0019013:	bb 01 00 00 00       	mov    ebx,0x1
c0019018:	53                   	push   ebx
c0019019:	56                   	push   esi
c001901a:	57                   	push   edi
c001901b:	55                   	push   ebp
c001901c:	e8 b5 f7 ff ff       	call   c00187d6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019021:	83 c4 10             	add    esp,0x10
c0019024:	66 40                	inc    ax
c0019026:	74 0c                	je     c0019034 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0019028:	53                   	push   ebx
c0019029:	56                   	push   esi
c001902a:	57                   	push   edi
c001902b:	55                   	push   ebp
c001902c:	e8 31 fe ff ff       	call   c0018e62 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0019031:	83 c4 10             	add    esp,0x10
c0019034:	43                   	inc    ebx
c0019035:	83 fb 08             	cmp    ebx,0x8
c0019038:	75 de                	jne    c0019018 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001903a:	83 c4 0c             	add    esp,0xc
c001903d:	5b                   	pop    ebx
c001903e:	5e                   	pop    esi
c001903f:	5f                   	pop    edi
c0019040:	5d                   	pop    ebp
c0019041:	c3                   	ret    

c0019042 <PCI::detect()>:
c0019042:	56                   	push   esi
c0019043:	53                   	push   ebx
c0019044:	53                   	push   ebx
c0019045:	31 db                	xor    ebx,ebx
c0019047:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001904b:	6a 00                	push   0x0
c001904d:	6a 00                	push   0x0
c001904f:	6a 00                	push   0x0
c0019051:	56                   	push   esi
c0019052:	e8 a3 f7 ff ff       	call   c00187fa <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0019057:	83 c4 10             	add    esp,0x10
c001905a:	a8 80                	test   al,0x80
c001905c:	75 21                	jne    c001907f <PCI::detect()+0x3d>
c001905e:	51                   	push   ecx
c001905f:	51                   	push   ecx
c0019060:	6a 00                	push   0x0
c0019062:	56                   	push   esi
c0019063:	e8 62 fc ff ff       	call   c0018cca <PCI::checkBus(unsigned char)>
c0019068:	83 c4 10             	add    esp,0x10
c001906b:	eb 24                	jmp    c0019091 <PCI::detect()+0x4f>
c001906d:	52                   	push   edx
c001906e:	52                   	push   edx
c001906f:	53                   	push   ebx
c0019070:	43                   	inc    ebx
c0019071:	56                   	push   esi
c0019072:	e8 53 fc ff ff       	call   c0018cca <PCI::checkBus(unsigned char)>
c0019077:	83 c4 10             	add    esp,0x10
c001907a:	83 fb 08             	cmp    ebx,0x8
c001907d:	74 12                	je     c0019091 <PCI::detect()+0x4f>
c001907f:	53                   	push   ebx
c0019080:	6a 00                	push   0x0
c0019082:	6a 00                	push   0x0
c0019084:	56                   	push   esi
c0019085:	e8 4c f7 ff ff       	call   c00187d6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001908a:	83 c4 10             	add    esp,0x10
c001908d:	66 40                	inc    ax
c001908f:	74 dc                	je     c001906d <PCI::detect()+0x2b>
c0019091:	58                   	pop    eax
c0019092:	5b                   	pop    ebx
c0019093:	5e                   	pop    esi
c0019094:	c3                   	ret    
c0019095:	90                   	nop

c0019096 <IDE::close(int, int, void*)>:
c0019096:	83 c8 ff             	or     eax,0xffffffff
c0019099:	c3                   	ret    

c001909a <IDE::IDE()>:
c001909a:	83 ec 0c             	sub    esp,0xc
c001909d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190a1:	83 ec 08             	sub    esp,0x8
c00190a4:	68 84 f2 01 c0       	push   0xc001f284
c00190a9:	50                   	push   eax
c00190aa:	e8 01 30 ff ff       	call   c000c0b0 <HardDiskController::HardDiskController(char const*)>
c00190af:	83 c4 10             	add    esp,0x10
c00190b2:	ba 14 f3 01 c0       	mov    edx,0xc001f314
c00190b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190bb:	89 10                	mov    DWORD PTR [eax],edx
c00190bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190c1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00190c8:	90                   	nop
c00190c9:	83 c4 0c             	add    esp,0xc
c00190cc:	c3                   	ret    
c00190cd:	90                   	nop

c00190ce <IDE::prepareInterrupt(unsigned char)>:
c00190ce:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00190d3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00190d7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00190df:	c3                   	ret    

c00190e0 <selectDrive(unsigned char, unsigned char)>:
c00190e0:	c3                   	ret    
c00190e1:	90                   	nop

c00190e2 <IDE::getBase(unsigned char)>:
c00190e2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00190e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00190eb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00190f3:	c3                   	ret    

c00190f4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00190f4:	55                   	push   ebp
c00190f5:	57                   	push   edi
c00190f6:	56                   	push   esi
c00190f7:	53                   	push   ebx
c00190f8:	83 ec 1c             	sub    esp,0x1c
c00190fb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00190ff:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019103:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0019106:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001910a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001910e:	80 f9 03             	cmp    cl,0x3
c0019111:	77 51                	ja     c0019164 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0019113:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019117:	0f b6 f2             	movzx  esi,dl
c001911a:	0f b6 db             	movzx  ebx,bl
c001911d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019120:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0019124:	83 ca 80             	or     edx,0xffffff80
c0019127:	0f b6 d2             	movzx  edx,dl
c001912a:	52                   	push   edx
c001912b:	6a 0c                	push   0xc
c001912d:	56                   	push   esi
c001912e:	57                   	push   edi
c001912f:	e8 c0 ff ff ff       	call   c00190f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019134:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0019139:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001913d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0019141:	ee                   	out    dx,al
c0019142:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0019147:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001914b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001914f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019153:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001915b:	83 c4 2c             	add    esp,0x2c
c001915e:	5b                   	pop    ebx
c001915f:	5e                   	pop    esi
c0019160:	5f                   	pop    edi
c0019161:	5d                   	pop    ebp
c0019162:	eb 90                	jmp    c00190f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019164:	80 fb 07             	cmp    bl,0x7
c0019167:	77 12                	ja     c001917b <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0019169:	0f b6 d2             	movzx  edx,dl
c001916c:	0f b6 db             	movzx  ebx,bl
c001916f:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0019177:	89 da                	mov    edx,ebx
c0019179:	eb 2f                	jmp    c00191aa <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001917b:	80 fb 0d             	cmp    bl,0xd
c001917e:	77 13                	ja     c0019193 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0019180:	0f b6 d2             	movzx  edx,dl
c0019183:	0f b6 db             	movzx  ebx,bl
c0019186:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001918d:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0019191:	eb 17                	jmp    c00191aa <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0019193:	80 fb 15             	cmp    bl,0x15
c0019196:	77 13                	ja     c00191ab <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0019198:	0f b6 d2             	movzx  edx,dl
c001919b:	0f b6 db             	movzx  ebx,bl
c001919e:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00191a6:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00191aa:	ee                   	out    dx,al
c00191ab:	83 c4 1c             	add    esp,0x1c
c00191ae:	5b                   	pop    ebx
c00191af:	5e                   	pop    esi
c00191b0:	5f                   	pop    edi
c00191b1:	5d                   	pop    ebp
c00191b2:	c3                   	ret    
c00191b3:	90                   	nop

c00191b4 <IDE::read(unsigned char, unsigned char)>:
c00191b4:	55                   	push   ebp
c00191b5:	57                   	push   edi
c00191b6:	56                   	push   esi
c00191b7:	53                   	push   ebx
c00191b8:	83 ec 1c             	sub    esp,0x1c
c00191bb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00191bf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00191c3:	8d 43 f8             	lea    eax,[ebx-0x8]
c00191c6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00191ca:	3c 03                	cmp    al,0x3
c00191cc:	77 43                	ja     c0019211 <IDE::read(unsigned char, unsigned char)+0x5d>
c00191ce:	0f b6 f2             	movzx  esi,dl
c00191d1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00191d4:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00191d8:	83 c8 80             	or     eax,0xffffff80
c00191db:	0f b6 c0             	movzx  eax,al
c00191de:	50                   	push   eax
c00191df:	6a 0c                	push   0xc
c00191e1:	56                   	push   esi
c00191e2:	57                   	push   edi
c00191e3:	e8 0c ff ff ff       	call   c00190f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00191e8:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00191ed:	0f b6 c3             	movzx  eax,bl
c00191f0:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00191f4:	ec                   	in     al,dx
c00191f5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00191f9:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00191fe:	52                   	push   edx
c00191ff:	6a 0c                	push   0xc
c0019201:	56                   	push   esi
c0019202:	57                   	push   edi
c0019203:	e8 ec fe ff ff       	call   c00190f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019208:	83 c4 20             	add    esp,0x20
c001920b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001920f:	eb 49                	jmp    c001925a <IDE::read(unsigned char, unsigned char)+0xa6>
c0019211:	80 fb 07             	cmp    bl,0x7
c0019214:	77 12                	ja     c0019228 <IDE::read(unsigned char, unsigned char)+0x74>
c0019216:	0f b6 d2             	movzx  edx,dl
c0019219:	0f b6 c3             	movzx  eax,bl
c001921c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0019224:	89 c2                	mov    edx,eax
c0019226:	eb 31                	jmp    c0019259 <IDE::read(unsigned char, unsigned char)+0xa5>
c0019228:	80 fb 0d             	cmp    bl,0xd
c001922b:	77 13                	ja     c0019240 <IDE::read(unsigned char, unsigned char)+0x8c>
c001922d:	0f b6 d2             	movzx  edx,dl
c0019230:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0019237:	0f b6 d3             	movzx  edx,bl
c001923a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001923e:	eb 19                	jmp    c0019259 <IDE::read(unsigned char, unsigned char)+0xa5>
c0019240:	31 c0                	xor    eax,eax
c0019242:	80 fb 15             	cmp    bl,0x15
c0019245:	77 13                	ja     c001925a <IDE::read(unsigned char, unsigned char)+0xa6>
c0019247:	0f b6 d2             	movzx  edx,dl
c001924a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0019252:	0f b6 d3             	movzx  edx,bl
c0019255:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0019259:	ec                   	in     al,dx
c001925a:	83 c4 1c             	add    esp,0x1c
c001925d:	5b                   	pop    ebx
c001925e:	5e                   	pop    esi
c001925f:	5f                   	pop    edi
c0019260:	5d                   	pop    ebp
c0019261:	c3                   	ret    

c0019262 <IDE::waitInterrupt(unsigned char)>:
c0019262:	57                   	push   edi
c0019263:	56                   	push   esi
c0019264:	31 f6                	xor    esi,esi
c0019266:	53                   	push   ebx
c0019267:	83 ec 10             	sub    esp,0x10
c001926a:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001926e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019272:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019276:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001927b:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c0019282:	84 db                	test   bl,bl
c0019284:	75 33                	jne    c00192b9 <IDE::waitInterrupt(unsigned char)+0x57>
c0019286:	52                   	push   edx
c0019287:	6a 0c                	push   0xc
c0019289:	50                   	push   eax
c001928a:	57                   	push   edi
c001928b:	e8 24 ff ff ff       	call   c00191b4 <IDE::read(unsigned char, unsigned char)>
c0019290:	83 c4 10             	add    esp,0x10
c0019293:	a8 01                	test   al,0x1
c0019295:	75 2a                	jne    c00192c1 <IDE::waitInterrupt(unsigned char)+0x5f>
c0019297:	f7 c6 04 00 00 00    	test   esi,0x4
c001929d:	75 12                	jne    c00192b1 <IDE::waitInterrupt(unsigned char)+0x4f>
c001929f:	83 fe 32             	cmp    esi,0x32
c00192a2:	7e 0d                	jle    c00192b1 <IDE::waitInterrupt(unsigned char)+0x4f>
c00192a4:	83 ec 0c             	sub    esp,0xc
c00192a7:	6a 64                	push   0x64
c00192a9:	e8 7e a9 ff ff       	call   c0013c2c <milliTenthSleep(unsigned int)>
c00192ae:	83 c4 10             	add    esp,0x10
c00192b1:	83 fe 3c             	cmp    esi,0x3c
c00192b4:	74 0b                	je     c00192c1 <IDE::waitInterrupt(unsigned char)+0x5f>
c00192b6:	46                   	inc    esi
c00192b7:	eb bd                	jmp    c0019276 <IDE::waitInterrupt(unsigned char)+0x14>
c00192b9:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c00192c1:	83 c4 10             	add    esp,0x10
c00192c4:	88 d8                	mov    al,bl
c00192c6:	5b                   	pop    ebx
c00192c7:	5e                   	pop    esi
c00192c8:	5f                   	pop    edi
c00192c9:	c3                   	ret    

c00192ca <ideChannel0IRQHandler(regs*, void*)>:
c00192ca:	83 ec 10             	sub    esp,0x10
c00192cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00192d1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00192d8:	6a 07                	push   0x7
c00192da:	6a 00                	push   0x0
c00192dc:	50                   	push   eax
c00192dd:	e8 d2 fe ff ff       	call   c00191b4 <IDE::read(unsigned char, unsigned char)>
c00192e2:	83 c4 1c             	add    esp,0x1c
c00192e5:	c3                   	ret    

c00192e6 <ideChannel1IRQHandler(regs*, void*)>:
c00192e6:	83 ec 10             	sub    esp,0x10
c00192e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00192ed:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00192f4:	6a 07                	push   0x7
c00192f6:	6a 01                	push   0x1
c00192f8:	50                   	push   eax
c00192f9:	e8 b6 fe ff ff       	call   c00191b4 <IDE::read(unsigned char, unsigned char)>
c00192fe:	83 c4 1c             	add    esp,0x1c
c0019301:	c3                   	ret    

c0019302 <IDE::enableIRQs(unsigned char, bool)>:
c0019302:	57                   	push   edi
c0019303:	56                   	push   esi
c0019304:	be 04 00 00 00       	mov    esi,0x4
c0019309:	53                   	push   ebx
c001930a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001930f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019313:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0019318:	0f 94 c0             	sete   al
c001931b:	01 c0                	add    eax,eax
c001931d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0019324:	0f b6 c0             	movzx  eax,al
c0019327:	50                   	push   eax
c0019328:	6a 0c                	push   0xc
c001932a:	57                   	push   edi
c001932b:	53                   	push   ebx
c001932c:	e8 c3 fd ff ff       	call   c00190f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019331:	83 c4 10             	add    esp,0x10
c0019334:	50                   	push   eax
c0019335:	6a 0c                	push   0xc
c0019337:	57                   	push   edi
c0019338:	53                   	push   ebx
c0019339:	e8 76 fe ff ff       	call   c00191b4 <IDE::read(unsigned char, unsigned char)>
c001933e:	83 c4 10             	add    esp,0x10
c0019341:	4e                   	dec    esi
c0019342:	75 f0                	jne    c0019334 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0019344:	5b                   	pop    ebx
c0019345:	5e                   	pop    esi
c0019346:	5f                   	pop    edi
c0019347:	c3                   	ret    

c0019348 <IDE::open(int, int, void*)>:
c0019348:	55                   	push   ebp
c0019349:	57                   	push   edi
c001934a:	56                   	push   esi
c001934b:	53                   	push   ebx
c001934c:	83 ec 1c             	sub    esp,0x1c
c001934f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019353:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001935c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0019365:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001936c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0019373:	0f 85 b0 02 00 00    	jne    c0019629 <IDE::open(int, int, void*)+0x2e1>
c0019379:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001937f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0019383:	83 e0 7f             	and    eax,0x7f
c0019386:	3c 05                	cmp    al,0x5
c0019388:	74 04                	je     c001938e <IDE::open(int, int, void*)+0x46>
c001938a:	3c 0f                	cmp    al,0xf
c001938c:	75 32                	jne    c00193c0 <IDE::open(int, int, void*)+0x78>
c001938e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0019394:	83 e0 fc             	and    eax,0xfffffffc
c0019397:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001939e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00193a4:	83 e0 fc             	and    eax,0xfffffffc
c00193a7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00193ae:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00193b4:	83 e0 fc             	and    eax,0xfffffffc
c00193b7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00193be:	eb 14                	jmp    c00193d4 <IDE::open(int, int, void*)+0x8c>
c00193c0:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00193ca:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00193d4:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00193db:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00193e2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00193e6:	89 c6                	mov    esi,eax
c00193e8:	bf f8 0c 00 00       	mov    edi,0xcf8
c00193ed:	c1 e6 10             	shl    esi,0x10
c00193f0:	89 e8                	mov    eax,ebp
c00193f2:	89 fa                	mov    edx,edi
c00193f4:	c1 e0 0b             	shl    eax,0xb
c00193f7:	09 f0                	or     eax,esi
c00193f9:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0019400:	c1 e6 08             	shl    esi,0x8
c0019403:	09 c6                	or     esi,eax
c0019405:	89 f0                	mov    eax,esi
c0019407:	0d 08 00 00 80       	or     eax,0x80000008
c001940c:	ef                   	out    dx,eax
c001940d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0019412:	89 ca                	mov    edx,ecx
c0019414:	ed                   	in     eax,dx
c0019415:	c1 e8 10             	shr    eax,0x10
c0019418:	3d ff ff 00 00       	cmp    eax,0xffff
c001941d:	0f 84 f5 00 00 00    	je     c0019518 <IDE::open(int, int, void*)+0x1d0>
c0019423:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0019429:	89 fa                	mov    edx,edi
c001942b:	89 f0                	mov    eax,esi
c001942d:	ef                   	out    dx,eax
c001942e:	b0 fe                	mov    al,0xfe
c0019430:	89 ca                	mov    edx,ecx
c0019432:	ee                   	out    dx,al
c0019433:	89 f0                	mov    eax,esi
c0019435:	89 fa                	mov    edx,edi
c0019437:	ef                   	out    dx,eax
c0019438:	89 ca                	mov    edx,ecx
c001943a:	ed                   	in     eax,dx
c001943b:	3c fe                	cmp    al,0xfe
c001943d:	0f 85 a9 00 00 00    	jne    c00194ec <IDE::open(int, int, void*)+0x1a4>
c0019443:	8b 15 b8 09 02 c0    	mov    edx,DWORD PTR ds:0xc00209b8
c0019449:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c0019450:	74 33                	je     c0019485 <IDE::open(int, int, void*)+0x13d>
c0019452:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0019458:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001945c:	40                   	inc    eax
c001945d:	83 ec 0c             	sub    esp,0xc
c0019460:	0f b6 c0             	movzx  eax,al
c0019463:	50                   	push   eax
c0019464:	55                   	push   ebp
c0019465:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019469:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001946f:	51                   	push   ecx
c0019470:	e8 33 56 ff ff       	call   c000eaa8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0019475:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001947a:	83 c4 1c             	add    esp,0x1c
c001947d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019483:	eb 0a                	jmp    c001948f <IDE::open(int, int, void*)+0x147>
c0019485:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001948f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0019496:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001949d:	c1 e1 10             	shl    ecx,0x10
c00194a0:	c1 e0 08             	shl    eax,0x8
c00194a3:	bf f8 0c 00 00       	mov    edi,0xcf8
c00194a8:	09 c1                	or     ecx,eax
c00194aa:	89 fa                	mov    edx,edi
c00194ac:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00194b3:	c1 e0 0b             	shl    eax,0xb
c00194b6:	09 c1                	or     ecx,eax
c00194b8:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00194be:	89 c8                	mov    eax,ecx
c00194c0:	ef                   	out    dx,eax
c00194c1:	be fc 0c 00 00       	mov    esi,0xcfc
c00194c6:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00194cc:	89 f2                	mov    edx,esi
c00194ce:	ee                   	out    dx,al
c00194cf:	89 c8                	mov    eax,ecx
c00194d1:	89 fa                	mov    edx,edi
c00194d3:	ef                   	out    dx,eax
c00194d4:	89 f2                	mov    edx,esi
c00194d6:	ed                   	in     eax,dx
c00194d7:	0f b6 c0             	movzx  eax,al
c00194da:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00194e0:	74 46                	je     c0019528 <IDE::open(int, int, void*)+0x1e0>
c00194e2:	83 ec 0c             	sub    esp,0xc
c00194e5:	68 9c f2 01 c0       	push   0xc001f29c
c00194ea:	eb 34                	jmp    c0019520 <IDE::open(int, int, void*)+0x1d8>
c00194ec:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00194f5:	75 17                	jne    c001950e <IDE::open(int, int, void*)+0x1c6>
c00194f7:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00194fc:	74 07                	je     c0019505 <IDE::open(int, int, void*)+0x1bd>
c00194fe:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0019503:	75 09                	jne    c001950e <IDE::open(int, int, void*)+0x1c6>
c0019505:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001950c:	eb 1a                	jmp    c0019528 <IDE::open(int, int, void*)+0x1e0>
c001950e:	83 ec 0c             	sub    esp,0xc
c0019511:	68 a4 f2 01 c0       	push   0xc001f2a4
c0019516:	eb 08                	jmp    c0019520 <IDE::open(int, int, void*)+0x1d8>
c0019518:	83 ec 0c             	sub    esp,0xc
c001951b:	68 d5 f2 01 c0       	push   0xc001f2d5
c0019520:	e8 6a 70 ff ff       	call   c001058f <KePanic(char const*)>
c0019525:	83 c4 10             	add    esp,0x10
c0019528:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001952f:	79 1a                	jns    c001954b <IDE::open(int, int, void*)+0x203>
c0019531:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0019537:	83 e0 fc             	and    eax,0xfffffffc
c001953a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0019541:	83 c0 08             	add    eax,0x8
c0019544:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001954b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019551:	89 c2                	mov    edx,eax
c0019553:	83 e2 0f             	and    edx,0xf
c0019556:	66 83 fa 08          	cmp    dx,0x8
c001955a:	75 0a                	jne    c0019566 <IDE::open(int, int, void*)+0x21e>
c001955c:	83 e8 02             	sub    eax,0x2
c001955f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019566:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001956c:	89 c2                	mov    edx,eax
c001956e:	83 e2 0f             	and    edx,0xf
c0019571:	66 83 fa 08          	cmp    dx,0x8
c0019575:	75 0a                	jne    c0019581 <IDE::open(int, int, void*)+0x239>
c0019577:	83 e8 02             	sub    eax,0x2
c001957a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019581:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019588:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001958f:	89 d0                	mov    eax,edx
c0019591:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019594:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019598:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001959c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001959f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00195a4:	0f b6 c9             	movzx  ecx,cl
c00195a7:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00195ae:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00195b1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00195b5:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00195b9:	8d 50 02             	lea    edx,[eax+0x2]
c00195bc:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00195c1:	0f b6 d2             	movzx  edx,dl
c00195c4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00195ca:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00195cd:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00195d1:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00195d5:	8d 48 03             	lea    ecx,[eax+0x3]
c00195d8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00195dd:	0f b6 c9             	movzx  ecx,cl
c00195e0:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00195e6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00195e9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00195ed:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00195f1:	8d 50 04             	lea    edx,[eax+0x4]
c00195f4:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00195fa:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00195ff:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0019606:	66 85 f6             	test   si,si
c0019609:	74 5b                	je     c0019666 <IDE::open(int, int, void*)+0x31e>
c001960b:	0f b6 d2             	movzx  edx,dl
c001960e:	83 c0 05             	add    eax,0x5
c0019611:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019614:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019618:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001961c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019622:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019627:	eb 3d                	jmp    c0019666 <IDE::open(int, int, void*)+0x31e>
c0019629:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001962f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0019636:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001963d:	66 05 06 02          	add    ax,0x206
c0019641:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019648:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001964f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0019656:	66 05 06 02          	add    ax,0x206
c001965a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019661:	e9 e5 fe ff ff       	jmp    c001954b <IDE::open(int, int, void*)+0x203>
c0019666:	50                   	push   eax
c0019667:	50                   	push   eax
c0019668:	6a 00                	push   0x0
c001966a:	53                   	push   ebx
c001966b:	e8 5e fa ff ff       	call   c00190ce <IDE::prepareInterrupt(unsigned char)>
c0019670:	5a                   	pop    edx
c0019671:	59                   	pop    ecx
c0019672:	6a 01                	push   0x1
c0019674:	53                   	push   ebx
c0019675:	e8 54 fa ff ff       	call   c00190ce <IDE::prepareInterrupt(unsigned char)>
c001967a:	83 c4 0c             	add    esp,0xc
c001967d:	6a 00                	push   0x0
c001967f:	6a 00                	push   0x0
c0019681:	53                   	push   ebx
c0019682:	e8 7b fc ff ff       	call   c0019302 <IDE::enableIRQs(unsigned char, bool)>
c0019687:	83 c4 0c             	add    esp,0xc
c001968a:	6a 00                	push   0x0
c001968c:	6a 01                	push   0x1
c001968e:	53                   	push   ebx
c001968f:	e8 6e fc ff ff       	call   c0019302 <IDE::enableIRQs(unsigned char, bool)>
c0019694:	83 c4 10             	add    esp,0x10
c0019697:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001969e:	74 34                	je     c00196d4 <IDE::open(int, int, void*)+0x38c>
c00196a0:	83 ec 0c             	sub    esp,0xc
c00196a3:	53                   	push   ebx
c00196a4:	6a 01                	push   0x1
c00196a6:	68 ca 92 01 c0       	push   0xc00192ca
c00196ab:	6a 0e                	push   0xe
c00196ad:	53                   	push   ebx
c00196ae:	e8 65 26 ff ff       	call   c000bd18 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196b3:	83 c4 14             	add    esp,0x14
c00196b6:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00196bc:	53                   	push   ebx
c00196bd:	6a 01                	push   0x1
c00196bf:	68 e6 92 01 c0       	push   0xc00192e6
c00196c4:	6a 0f                	push   0xf
c00196c6:	53                   	push   ebx
c00196c7:	e8 4c 26 ff ff       	call   c000bd18 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196cc:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00196d2:	eb 38                	jmp    c001970c <IDE::open(int, int, void*)+0x3c4>
c00196d4:	83 ec 0c             	sub    esp,0xc
c00196d7:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00196e1:	53                   	push   ebx
c00196e2:	6a 00                	push   0x0
c00196e4:	68 ca 92 01 c0       	push   0xc00192ca
c00196e9:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00196ef:	53                   	push   ebx
c00196f0:	e8 23 26 ff ff       	call   c000bd18 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196f5:	83 c4 14             	add    esp,0x14
c00196f8:	53                   	push   ebx
c00196f9:	6a 00                	push   0x0
c00196fb:	68 e6 92 01 c0       	push   0xc00192e6
c0019700:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0019706:	53                   	push   ebx
c0019707:	e8 0c 26 ff ff       	call   c000bd18 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001970c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001970e:	83 c4 20             	add    esp,0x20
c0019711:	83 ec 0c             	sub    esp,0xc
c0019714:	53                   	push   ebx
c0019715:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0019718:	83 c4 0c             	add    esp,0xc
c001971b:	6a 07                	push   0x7
c001971d:	6a 00                	push   0x0
c001971f:	53                   	push   ebx
c0019720:	e8 8f fa ff ff       	call   c00191b4 <IDE::read(unsigned char, unsigned char)>
c0019725:	83 c4 0c             	add    esp,0xc
c0019728:	6a 07                	push   0x7
c001972a:	6a 01                	push   0x1
c001972c:	53                   	push   ebx
c001972d:	e8 82 fa ff ff       	call   c00191b4 <IDE::read(unsigned char, unsigned char)>
c0019732:	83 c4 0c             	add    esp,0xc
c0019735:	6a 01                	push   0x1
c0019737:	6a 00                	push   0x0
c0019739:	53                   	push   ebx
c001973a:	e8 c3 fb ff ff       	call   c0019302 <IDE::enableIRQs(unsigned char, bool)>
c001973f:	83 c4 0c             	add    esp,0xc
c0019742:	6a 01                	push   0x1
c0019744:	6a 01                	push   0x1
c0019746:	53                   	push   ebx
c0019747:	e8 b6 fb ff ff       	call   c0019302 <IDE::enableIRQs(unsigned char, bool)>
c001974c:	83 c4 2c             	add    esp,0x2c
c001974f:	31 c0                	xor    eax,eax
c0019751:	5b                   	pop    ebx
c0019752:	5e                   	pop    esi
c0019753:	5f                   	pop    edi
c0019754:	5d                   	pop    ebp
c0019755:	c3                   	ret    

c0019756 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0019756:	55                   	push   ebp
c0019757:	57                   	push   edi
c0019758:	56                   	push   esi
c0019759:	53                   	push   ebx
c001975a:	83 ec 1c             	sub    esp,0x1c
c001975d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019761:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019765:	8d 50 f8             	lea    edx,[eax-0x8]
c0019768:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001976c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0019770:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019774:	80 fa 03             	cmp    dl,0x3
c0019777:	77 5d                	ja     c00197d6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0019779:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001977d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019781:	0f b6 db             	movzx  ebx,bl
c0019784:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0019787:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001978b:	83 ca 80             	or     edx,0xffffff80
c001978e:	0f b6 d2             	movzx  edx,dl
c0019791:	52                   	push   edx
c0019792:	6a 0c                	push   0xc
c0019794:	53                   	push   ebx
c0019795:	56                   	push   esi
c0019796:	e8 59 f9 ff ff       	call   c00190f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001979b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00197a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00197a4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00197a8:	0f b6 c0             	movzx  eax,al
c00197ab:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00197af:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00197b1:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00197b6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00197ba:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00197be:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00197c2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00197ca:	83 c4 2c             	add    esp,0x2c
c00197cd:	5b                   	pop    ebx
c00197ce:	5e                   	pop    esi
c00197cf:	5f                   	pop    edi
c00197d0:	5d                   	pop    ebp
c00197d1:	e9 1e f9 ff ff       	jmp    c00190f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00197d6:	3c 07                	cmp    al,0x7
c00197d8:	77 10                	ja     c00197ea <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00197da:	0f b6 db             	movzx  ebx,bl
c00197dd:	0f b6 d0             	movzx  edx,al
c00197e0:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00197e8:	eb 2d                	jmp    c0019817 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00197ea:	3c 0d                	cmp    al,0xd
c00197ec:	77 13                	ja     c0019801 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00197ee:	0f b6 db             	movzx  ebx,bl
c00197f1:	0f b6 c0             	movzx  eax,al
c00197f4:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00197fb:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00197ff:	eb 16                	jmp    c0019817 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019801:	3c 15                	cmp    al,0x15
c0019803:	77 14                	ja     c0019819 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0019805:	0f b6 db             	movzx  ebx,bl
c0019808:	0f b6 c0             	movzx  eax,al
c001980b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0019813:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0019817:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019819:	83 c4 1c             	add    esp,0x1c
c001981c:	5b                   	pop    ebx
c001981d:	5e                   	pop    esi
c001981e:	5f                   	pop    edi
c001981f:	5d                   	pop    ebp
c0019820:	c3                   	ret    
c0019821:	90                   	nop

c0019822 <IDE::detect()>:
c0019822:	55                   	push   ebp
c0019823:	57                   	push   edi
c0019824:	56                   	push   esi
c0019825:	53                   	push   ebx
c0019826:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001982c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0019833:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001983a:	0f 85 97 02 00 00    	jne    c0019ad7 <IDE::detect()+0x2b5>
c0019840:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0019847:	31 f6                	xor    esi,esi
c0019849:	31 ed                	xor    ebp,ebp
c001984b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019853:	89 e8                	mov    eax,ebp
c0019855:	c1 e0 06             	shl    eax,0x6
c0019858:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0019860:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019864:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019868:	c1 e0 04             	shl    eax,0x4
c001986b:	83 c8 a0             	or     eax,0xffffffa0
c001986e:	0f b6 c0             	movzx  eax,al
c0019871:	50                   	push   eax
c0019872:	6a 06                	push   0x6
c0019874:	56                   	push   esi
c0019875:	53                   	push   ebx
c0019876:	e8 79 f8 ff ff       	call   c00190f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001987b:	83 c4 0c             	add    esp,0xc
c001987e:	6a 0c                	push   0xc
c0019880:	56                   	push   esi
c0019881:	53                   	push   ebx
c0019882:	e8 2d f9 ff ff       	call   c00191b4 <IDE::read(unsigned char, unsigned char)>
c0019887:	83 c4 0c             	add    esp,0xc
c001988a:	6a 0c                	push   0xc
c001988c:	56                   	push   esi
c001988d:	53                   	push   ebx
c001988e:	e8 21 f9 ff ff       	call   c00191b4 <IDE::read(unsigned char, unsigned char)>
c0019893:	83 c4 0c             	add    esp,0xc
c0019896:	6a 0c                	push   0xc
c0019898:	56                   	push   esi
c0019899:	53                   	push   ebx
c001989a:	e8 15 f9 ff ff       	call   c00191b4 <IDE::read(unsigned char, unsigned char)>
c001989f:	83 c4 0c             	add    esp,0xc
c00198a2:	6a 0c                	push   0xc
c00198a4:	56                   	push   esi
c00198a5:	53                   	push   ebx
c00198a6:	e8 09 f9 ff ff       	call   c00191b4 <IDE::read(unsigned char, unsigned char)>
c00198ab:	68 ec 00 00 00       	push   0xec
c00198b0:	6a 07                	push   0x7
c00198b2:	56                   	push   esi
c00198b3:	53                   	push   ebx
c00198b4:	e8 3b f8 ff ff       	call   c00190f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00198b9:	83 c4 1c             	add    esp,0x1c
c00198bc:	6a 0c                	push   0xc
c00198be:	56                   	push   esi
c00198bf:	53                   	push   ebx
c00198c0:	e8 ef f8 ff ff       	call   c00191b4 <IDE::read(unsigned char, unsigned char)>
c00198c5:	83 c4 0c             	add    esp,0xc
c00198c8:	6a 0c                	push   0xc
c00198ca:	56                   	push   esi
c00198cb:	53                   	push   ebx
c00198cc:	e8 e3 f8 ff ff       	call   c00191b4 <IDE::read(unsigned char, unsigned char)>
c00198d1:	83 c4 0c             	add    esp,0xc
c00198d4:	6a 0c                	push   0xc
c00198d6:	56                   	push   esi
c00198d7:	53                   	push   ebx
c00198d8:	e8 d7 f8 ff ff       	call   c00191b4 <IDE::read(unsigned char, unsigned char)>
c00198dd:	83 c4 0c             	add    esp,0xc
c00198e0:	6a 0c                	push   0xc
c00198e2:	56                   	push   esi
c00198e3:	53                   	push   ebx
c00198e4:	e8 cb f8 ff ff       	call   c00191b4 <IDE::read(unsigned char, unsigned char)>
c00198e9:	83 c4 0c             	add    esp,0xc
c00198ec:	6a 0c                	push   0xc
c00198ee:	56                   	push   esi
c00198ef:	53                   	push   ebx
c00198f0:	e8 bf f8 ff ff       	call   c00191b4 <IDE::read(unsigned char, unsigned char)>
c00198f5:	83 c4 10             	add    esp,0x10
c00198f8:	84 c0                	test   al,al
c00198fa:	0f 84 5f 01 00 00    	je     c0019a5f <IDE::detect()+0x23d>
c0019900:	31 ff                	xor    edi,edi
c0019902:	50                   	push   eax
c0019903:	6a 0c                	push   0xc
c0019905:	56                   	push   esi
c0019906:	53                   	push   ebx
c0019907:	e8 a8 f8 ff ff       	call   c00191b4 <IDE::read(unsigned char, unsigned char)>
c001990c:	83 c4 10             	add    esp,0x10
c001990f:	a8 01                	test   al,0x1
c0019911:	0f 85 69 01 00 00    	jne    c0019a80 <IDE::detect()+0x25e>
c0019917:	84 c0                	test   al,al
c0019919:	78 04                	js     c001991f <IDE::detect()+0xfd>
c001991b:	a8 08                	test   al,0x8
c001991d:	75 23                	jne    c0019942 <IDE::detect()+0x120>
c001991f:	47                   	inc    edi
c0019920:	81 ff 17 01 00 00    	cmp    edi,0x117
c0019926:	7e da                	jle    c0019902 <IDE::detect()+0xe0>
c0019928:	83 ec 0c             	sub    esp,0xc
c001992b:	6a 32                	push   0x32
c001992d:	e8 fa a2 ff ff       	call   c0013c2c <milliTenthSleep(unsigned int)>
c0019932:	83 c4 10             	add    esp,0x10
c0019935:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001993b:	75 c5                	jne    c0019902 <IDE::detect()+0xe0>
c001993d:	e9 3e 01 00 00       	jmp    c0019a80 <IDE::detect()+0x25e>
c0019942:	31 c9                	xor    ecx,ecx
c0019944:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0019948:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001994c:	83 ec 0c             	sub    esp,0xc
c001994f:	68 80 00 00 00       	push   0x80
c0019954:	57                   	push   edi
c0019955:	6a 00                	push   0x0
c0019957:	56                   	push   esi
c0019958:	53                   	push   ebx
c0019959:	e8 f8 fd ff ff       	call   c0019756 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001995e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0019963:	89 e8                	mov    eax,ebp
c0019965:	89 d1                	mov    ecx,edx
c0019967:	c1 e0 06             	shl    eax,0x6
c001996a:	01 d8                	add    eax,ebx
c001996c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0019973:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001997a:	89 f2                	mov    edx,esi
c001997c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0019982:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0019986:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001998c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019990:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0019997:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001999f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00199a6:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00199ae:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00199b4:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00199bb:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00199c1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00199c5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00199c9:	83 c4 20             	add    esp,0x20
c00199cc:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00199cf:	83 c0 02             	add    eax,0x2
c00199d2:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00199d8:	83 c7 02             	add    edi,0x2
c00199db:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00199de:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00199e4:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00199e8:	75 e2                	jne    c00199cc <IDE::detect()+0x1aa>
c00199ea:	89 e8                	mov    eax,ebp
c00199ec:	c1 e0 06             	shl    eax,0x6
c00199ef:	01 d8                	add    eax,ebx
c00199f1:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00199f7:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00199fe:	66 c1 ea 09          	shr    dx,0x9
c0019a02:	83 e2 01             	and    edx,0x1
c0019a05:	84 c9                	test   cl,cl
c0019a07:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0019a0d:	75 22                	jne    c0019a31 <IDE::detect()+0x20f>
c0019a0f:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0019a16:	74 46                	je     c0019a5e <IDE::detect()+0x23c>
c0019a18:	83 ec 0c             	sub    esp,0xc
c0019a1b:	68 7c 01 00 00       	push   0x17c
c0019a20:	e8 6c e2 fe ff       	call   c0007c91 <malloc>
c0019a25:	89 c7                	mov    edi,eax
c0019a27:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a2a:	e8 11 05 00 00       	call   c0019f40 <ATA::ATA()>
c0019a2f:	eb 17                	jmp    c0019a48 <IDE::detect()+0x226>
c0019a31:	83 ec 0c             	sub    esp,0xc
c0019a34:	68 84 01 00 00       	push   0x184
c0019a39:	e8 53 e2 fe ff       	call   c0007c91 <malloc>
c0019a3e:	89 c7                	mov    edi,eax
c0019a40:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a43:	e8 f0 0a 00 00       	call   c001a538 <ATAPI::ATAPI()>
c0019a48:	5a                   	pop    edx
c0019a49:	59                   	pop    ecx
c0019a4a:	57                   	push   edi
c0019a4b:	53                   	push   ebx
c0019a4c:	e8 1b 23 ff ff       	call   c000bd6c <Device::addChild(Device*)>
c0019a51:	8b 07                	mov    eax,DWORD PTR [edi]
c0019a53:	53                   	push   ebx
c0019a54:	55                   	push   ebp
c0019a55:	6a 00                	push   0x0
c0019a57:	57                   	push   edi
c0019a58:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a5b:	83 c4 20             	add    esp,0x20
c0019a5e:	45                   	inc    ebp
c0019a5f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019a64:	74 0d                	je     c0019a73 <IDE::detect()+0x251>
c0019a66:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0019a6e:	e9 e0 fd ff ff       	jmp    c0019853 <IDE::detect()+0x31>
c0019a73:	4e                   	dec    esi
c0019a74:	74 61                	je     c0019ad7 <IDE::detect()+0x2b5>
c0019a76:	be 01 00 00 00       	mov    esi,0x1
c0019a7b:	e9 cb fd ff ff       	jmp    c001984b <IDE::detect()+0x29>
c0019a80:	50                   	push   eax
c0019a81:	6a 04                	push   0x4
c0019a83:	56                   	push   esi
c0019a84:	53                   	push   ebx
c0019a85:	e8 2a f7 ff ff       	call   c00191b4 <IDE::read(unsigned char, unsigned char)>
c0019a8a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019a8e:	83 c4 0c             	add    esp,0xc
c0019a91:	6a 05                	push   0x5
c0019a93:	56                   	push   esi
c0019a94:	53                   	push   ebx
c0019a95:	e8 1a f7 ff ff       	call   c00191b4 <IDE::read(unsigned char, unsigned char)>
c0019a9a:	83 c4 10             	add    esp,0x10
c0019a9d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019aa1:	80 fa 14             	cmp    dl,0x14
c0019aa4:	75 04                	jne    c0019aaa <IDE::detect()+0x288>
c0019aa6:	3c eb                	cmp    al,0xeb
c0019aa8:	eb 07                	jmp    c0019ab1 <IDE::detect()+0x28f>
c0019aaa:	3c 96                	cmp    al,0x96
c0019aac:	75 b1                	jne    c0019a5f <IDE::detect()+0x23d>
c0019aae:	80 fa 69             	cmp    dl,0x69
c0019ab1:	75 ac                	jne    c0019a5f <IDE::detect()+0x23d>
c0019ab3:	68 a1 00 00 00       	push   0xa1
c0019ab8:	6a 07                	push   0x7
c0019aba:	56                   	push   esi
c0019abb:	53                   	push   ebx
c0019abc:	e8 33 f6 ff ff       	call   c00190f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019ac1:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019ac8:	e8 5f a1 ff ff       	call   c0013c2c <milliTenthSleep(unsigned int)>
c0019acd:	83 c4 10             	add    esp,0x10
c0019ad0:	b1 01                	mov    cl,0x1
c0019ad2:	e9 6d fe ff ff       	jmp    c0019944 <IDE::detect()+0x122>
c0019ad7:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019add:	5b                   	pop    ebx
c0019ade:	5e                   	pop    esi
c0019adf:	5f                   	pop    edi
c0019ae0:	5d                   	pop    ebp
c0019ae1:	c3                   	ret    

c0019ae2 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019ae2:	55                   	push   ebp
c0019ae3:	57                   	push   edi
c0019ae4:	56                   	push   esi
c0019ae5:	53                   	push   ebx
c0019ae6:	83 ec 1c             	sub    esp,0x1c
c0019ae9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019aed:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019af1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019af5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019af9:	88 c3                	mov    bl,al
c0019afb:	84 c0                	test   al,al
c0019afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019b01:	0f 84 81 00 00 00    	je     c0019b88 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b07:	83 ec 0c             	sub    esp,0xc
c0019b0a:	68 ff f2 01 c0       	push   0xc001f2ff
c0019b0f:	e8 18 0e ff ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c0019b14:	83 c4 10             	add    esp,0x10
c0019b17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b1b:	3c 01                	cmp    al,0x1
c0019b1d:	74 63                	je     c0019b82 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0019b1f:	3c 02                	cmp    al,0x2
c0019b21:	75 53                	jne    c0019b76 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019b23:	01 f6                	add    esi,esi
c0019b25:	09 ee                	or     esi,ebp
c0019b27:	50                   	push   eax
c0019b28:	89 f0                	mov    eax,esi
c0019b2a:	6a 01                	push   0x1
c0019b2c:	0f b6 f0             	movzx  esi,al
c0019b2f:	c1 e6 06             	shl    esi,0x6
c0019b32:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019b3a:	50                   	push   eax
c0019b3b:	57                   	push   edi
c0019b3c:	e8 73 f6 ff ff       	call   c00191b4 <IDE::read(unsigned char, unsigned char)>
c0019b41:	83 c4 10             	add    esp,0x10
c0019b44:	a8 01                	test   al,0x1
c0019b46:	74 02                	je     c0019b4a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019b48:	b3 07                	mov    bl,0x7
c0019b4a:	a8 02                	test   al,0x2
c0019b4c:	74 02                	je     c0019b50 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019b4e:	b3 03                	mov    bl,0x3
c0019b50:	a8 04                	test   al,0x4
c0019b52:	74 02                	je     c0019b56 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019b54:	b3 14                	mov    bl,0x14
c0019b56:	a8 08                	test   al,0x8
c0019b58:	74 02                	je     c0019b5c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019b5a:	b3 03                	mov    bl,0x3
c0019b5c:	a8 10                	test   al,0x10
c0019b5e:	74 02                	je     c0019b62 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019b60:	b3 15                	mov    bl,0x15
c0019b62:	a8 20                	test   al,0x20
c0019b64:	74 02                	je     c0019b68 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019b66:	b3 03                	mov    bl,0x3
c0019b68:	a8 40                	test   al,0x40
c0019b6a:	74 02                	je     c0019b6e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019b6c:	b3 16                	mov    bl,0x16
c0019b6e:	84 c0                	test   al,al
c0019b70:	79 16                	jns    c0019b88 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b72:	b3 0d                	mov    bl,0xd
c0019b74:	eb 12                	jmp    c0019b88 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b76:	3c 03                	cmp    al,0x3
c0019b78:	74 0c                	je     c0019b86 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019b7a:	3c 04                	cmp    al,0x4
c0019b7c:	75 0a                	jne    c0019b88 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b7e:	b3 08                	mov    bl,0x8
c0019b80:	eb 06                	jmp    c0019b88 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b82:	b3 13                	mov    bl,0x13
c0019b84:	eb 02                	jmp    c0019b88 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b86:	b3 17                	mov    bl,0x17
c0019b88:	83 c4 1c             	add    esp,0x1c
c0019b8b:	88 d8                	mov    al,bl
c0019b8d:	5b                   	pop    ebx
c0019b8e:	5e                   	pop    esi
c0019b8f:	5f                   	pop    edi
c0019b90:	5d                   	pop    ebp
c0019b91:	c3                   	ret    

c0019b92 <IDE::polling(unsigned char, unsigned int)>:
c0019b92:	55                   	push   ebp
c0019b93:	bd 04 00 00 00       	mov    ebp,0x4
c0019b98:	57                   	push   edi
c0019b99:	56                   	push   esi
c0019b9a:	53                   	push   ebx
c0019b9b:	83 ec 0c             	sub    esp,0xc
c0019b9e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019ba2:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019ba6:	0f b6 f3             	movzx  esi,bl
c0019ba9:	52                   	push   edx
c0019baa:	6a 0c                	push   0xc
c0019bac:	56                   	push   esi
c0019bad:	57                   	push   edi
c0019bae:	e8 01 f6 ff ff       	call   c00191b4 <IDE::read(unsigned char, unsigned char)>
c0019bb3:	83 c4 10             	add    esp,0x10
c0019bb6:	4d                   	dec    ebp
c0019bb7:	75 ed                	jne    c0019ba6 <IDE::polling(unsigned char, unsigned int)+0x14>
c0019bb9:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019bbe:	50                   	push   eax
c0019bbf:	6a 0c                	push   0xc
c0019bc1:	56                   	push   esi
c0019bc2:	57                   	push   edi
c0019bc3:	e8 ec f5 ff ff       	call   c00191b4 <IDE::read(unsigned char, unsigned char)>
c0019bc8:	83 c4 10             	add    esp,0x10
c0019bcb:	a8 01                	test   al,0x1
c0019bcd:	75 17                	jne    c0019be6 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019bcf:	a8 20                	test   al,0x20
c0019bd1:	75 0f                	jne    c0019be2 <IDE::polling(unsigned char, unsigned int)+0x50>
c0019bd3:	4b                   	dec    ebx
c0019bd4:	74 10                	je     c0019be6 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019bd6:	84 c0                	test   al,al
c0019bd8:	78 e4                	js     c0019bbe <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019bda:	a8 08                	test   al,0x8
c0019bdc:	74 e0                	je     c0019bbe <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019bde:	31 c0                	xor    eax,eax
c0019be0:	eb 06                	jmp    c0019be8 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019be2:	b0 01                	mov    al,0x1
c0019be4:	eb 02                	jmp    c0019be8 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019be6:	b0 02                	mov    al,0x2
c0019be8:	83 c4 0c             	add    esp,0xc
c0019beb:	5b                   	pop    ebx
c0019bec:	5e                   	pop    esi
c0019bed:	5f                   	pop    edi
c0019bee:	5d                   	pop    ebp
c0019bef:	c3                   	ret    

c0019bf0 <SATABus::close(int, int, void*)>:
c0019bf0:	31 c0                	xor    eax,eax
c0019bf2:	c3                   	ret    
c0019bf3:	90                   	nop

c0019bf4 <SATABus::detect()>:
c0019bf4:	c3                   	ret    
c0019bf5:	90                   	nop

c0019bf6 <SATABus::SATABus()>:
c0019bf6:	83 ec 0c             	sub    esp,0xc
c0019bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bfd:	83 ec 08             	sub    esp,0x8
c0019c00:	68 38 f3 01 c0       	push   0xc001f338
c0019c05:	50                   	push   eax
c0019c06:	e8 a5 24 ff ff       	call   c000c0b0 <HardDiskController::HardDiskController(char const*)>
c0019c0b:	83 c4 10             	add    esp,0x10
c0019c0e:	ba 64 f3 01 c0       	mov    edx,0xc001f364
c0019c13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c17:	89 10                	mov    DWORD PTR [eax],edx
c0019c19:	83 ec 0c             	sub    esp,0xc
c0019c1c:	6a 50                	push   0x50
c0019c1e:	e8 08 e4 fe ff       	call   c000802b <Phys::allocateContiguousPages(int)>
c0019c23:	83 c4 10             	add    esp,0x10
c0019c26:	89 c2                	mov    edx,eax
c0019c28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c2c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019c32:	83 ec 0c             	sub    esp,0xc
c0019c35:	6a 50                	push   0x50
c0019c37:	e8 9d fa fe ff       	call   c00096d9 <Virt::allocateKernelVirtualPages(int)>
c0019c3c:	83 c4 10             	add    esp,0x10
c0019c3f:	89 c2                	mov    edx,eax
c0019c41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c45:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019c4b:	a1 b0 0a 02 c0       	mov    eax,ds:0xc0020ab0
c0019c50:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c54:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019c5a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c5e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019c64:	83 ec 0c             	sub    esp,0xc
c0019c67:	6a 03                	push   0x3
c0019c69:	6a 50                	push   0x50
c0019c6b:	51                   	push   ecx
c0019c6c:	52                   	push   edx
c0019c6d:	50                   	push   eax
c0019c6e:	e8 f5 03 ff ff       	call   c000a068 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019c73:	83 c4 20             	add    esp,0x20
c0019c76:	90                   	nop
c0019c77:	83 c4 0c             	add    esp,0xc
c0019c7a:	c3                   	ret    
c0019c7b:	90                   	nop

c0019c7c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019c7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c80:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019c83:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019c86:	09 c2                	or     edx,eax
c0019c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c8c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019c92:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019c94:	31 c0                	xor    eax,eax
c0019c96:	c1 e9 08             	shr    ecx,0x8
c0019c99:	83 e1 0f             	and    ecx,0xf
c0019c9c:	39 c8                	cmp    eax,ecx
c0019c9e:	74 0a                	je     c0019caa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019ca0:	f6 c2 01             	test   dl,0x1
c0019ca3:	74 08                	je     c0019cad <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019ca5:	d1 ea                	shr    edx,1
c0019ca7:	40                   	inc    eax
c0019ca8:	eb f2                	jmp    c0019c9c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019caa:	83 c8 ff             	or     eax,0xffffffff
c0019cad:	c3                   	ret    

c0019cae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019cae:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019cb2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019cb5:	89 c2                	mov    edx,eax
c0019cb7:	c1 ea 08             	shr    edx,0x8
c0019cba:	83 e2 0f             	and    edx,0xf
c0019cbd:	fe ca                	dec    dl
c0019cbf:	75 31                	jne    c0019cf2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019cc1:	83 e0 0f             	and    eax,0xf
c0019cc4:	3c 03                	cmp    al,0x3
c0019cc6:	75 2a                	jne    c0019cf2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019cc8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019ccb:	b8 02 00 00 00       	mov    eax,0x2
c0019cd0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019cd6:	74 1c                	je     c0019cf4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019cd8:	b8 04 00 00 00       	mov    eax,0x4
c0019cdd:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019ce3:	74 0f                	je     c0019cf4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019ce5:	31 c0                	xor    eax,eax
c0019ce7:	83 fa 03             	cmp    edx,0x3
c0019cea:	0f 94 c0             	sete   al
c0019ced:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019cf1:	c3                   	ret    
c0019cf2:	31 c0                	xor    eax,eax
c0019cf4:	c3                   	ret    
c0019cf5:	90                   	nop

c0019cf6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019cf6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cfa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cfd:	0f ba e2 0f          	bt     edx,0xf
c0019d01:	72 f7                	jb     c0019cfa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019d03:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d06:	83 ca 10             	or     edx,0x10
c0019d09:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d0c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d0f:	83 ca 01             	or     edx,0x1
c0019d12:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d15:	c3                   	ret    

c0019d16 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019d16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d1a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d1d:	83 e2 fe             	and    edx,0xfffffffe
c0019d20:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d23:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d26:	83 e2 ef             	and    edx,0xffffffef
c0019d29:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019d2c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d2f:	0f ba e2 0e          	bt     edx,0xe
c0019d33:	72 f7                	jb     c0019d2c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019d35:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019d38:	0f ba e2 0f          	bt     edx,0xf
c0019d3c:	72 ee                	jb     c0019d2c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019d3e:	c3                   	ret    
c0019d3f:	90                   	nop

c0019d40 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019d40:	55                   	push   ebp
c0019d41:	57                   	push   edi
c0019d42:	56                   	push   esi
c0019d43:	53                   	push   ebx
c0019d44:	83 ec 1c             	sub    esp,0x1c
c0019d47:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019d4b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019d4f:	53                   	push   ebx
c0019d50:	56                   	push   esi
c0019d51:	e8 c0 ff ff ff       	call   c0019d16 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019d56:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019d5a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019d60:	83 ec 0c             	sub    esp,0xc
c0019d63:	c1 e5 0a             	shl    ebp,0xa
c0019d66:	01 e8                	add    eax,ebp
c0019d68:	89 03                	mov    DWORD PTR [ebx],eax
c0019d6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d6c:	68 00 04 00 00       	push   0x400
c0019d71:	6a 00                	push   0x0
c0019d73:	50                   	push   eax
c0019d74:	e8 57 67 fe ff       	call   c00004d0 <memset>
c0019d79:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019d7f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019d83:	01 e8                	add    eax,ebp
c0019d85:	83 c4 1c             	add    esp,0x1c
c0019d88:	89 03                	mov    DWORD PTR [ebx],eax
c0019d8a:	c1 e2 08             	shl    edx,0x8
c0019d8d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019d94:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019d9a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019da0:	01 f8                	add    eax,edi
c0019da2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019da5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019da8:	68 00 01 00 00       	push   0x100
c0019dad:	6a 00                	push   0x0
c0019daf:	50                   	push   eax
c0019db0:	e8 1b 67 fe ff       	call   c00004d0 <memset>
c0019db5:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019dbb:	01 fa                	add    edx,edi
c0019dbd:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019dc1:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019dc4:	c1 e7 0d             	shl    edi,0xd
c0019dc7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019dce:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019dd4:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019dda:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019dde:	31 ff                	xor    edi,edi
c0019de0:	83 c4 10             	add    esp,0x10
c0019de3:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019de9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ded:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019df3:	83 c5 20             	add    ebp,0x20
c0019df6:	01 f8                	add    eax,edi
c0019df8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019dfb:	52                   	push   edx
c0019dfc:	68 00 01 00 00       	push   0x100
c0019e01:	6a 00                	push   0x0
c0019e03:	50                   	push   eax
c0019e04:	e8 c7 66 fe ff       	call   c00004d0 <memset>
c0019e09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019e0d:	83 c4 10             	add    esp,0x10
c0019e10:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019e16:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019e1d:	01 f8                	add    eax,edi
c0019e1f:	81 c7 00 01 00 00    	add    edi,0x100
c0019e25:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019e28:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019e2e:	75 b3                	jne    c0019de3 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019e30:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019e37:	50                   	push   eax
c0019e38:	50                   	push   eax
c0019e39:	53                   	push   ebx
c0019e3a:	56                   	push   esi
c0019e3b:	e8 b6 fe ff ff       	call   c0019cf6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019e40:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019e47:	83 c4 2c             	add    esp,0x2c
c0019e4a:	5b                   	pop    ebx
c0019e4b:	5e                   	pop    esi
c0019e4c:	5f                   	pop    edi
c0019e4d:	5d                   	pop    ebp
c0019e4e:	c3                   	ret    
c0019e4f:	90                   	nop

c0019e50 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019e50:	55                   	push   ebp
c0019e51:	57                   	push   edi
c0019e52:	56                   	push   esi
c0019e53:	53                   	push   ebx
c0019e54:	31 db                	xor    ebx,ebx
c0019e56:	83 ec 0c             	sub    esp,0xc
c0019e59:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019e5d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019e61:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019e64:	f7 c7 01 00 00 00    	test   edi,0x1
c0019e6a:	74 7a                	je     c0019ee6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019e6c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019e70:	89 d8                	mov    eax,ebx
c0019e72:	c1 e0 07             	shl    eax,0x7
c0019e75:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019e7c:	55                   	push   ebp
c0019e7d:	56                   	push   esi
c0019e7e:	e8 2b fe ff ff       	call   c0019cae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019e83:	5a                   	pop    edx
c0019e84:	83 f8 01             	cmp    eax,0x1
c0019e87:	59                   	pop    ecx
c0019e88:	75 21                	jne    c0019eab <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019e8a:	50                   	push   eax
c0019e8b:	53                   	push   ebx
c0019e8c:	55                   	push   ebp
c0019e8d:	56                   	push   esi
c0019e8e:	e8 ad fe ff ff       	call   c0019d40 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019e93:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019e9a:	e8 f2 dd fe ff       	call   c0007c91 <malloc>
c0019e9f:	89 c5                	mov    ebp,eax
c0019ea1:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ea4:	e8 43 0d 00 00       	call   c001abec <SATA::SATA()>
c0019ea9:	eb 24                	jmp    c0019ecf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019eab:	83 f8 04             	cmp    eax,0x4
c0019eae:	75 36                	jne    c0019ee6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019eb0:	51                   	push   ecx
c0019eb1:	53                   	push   ebx
c0019eb2:	55                   	push   ebp
c0019eb3:	56                   	push   esi
c0019eb4:	e8 87 fe ff ff       	call   c0019d40 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019eb9:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019ec0:	e8 cc dd fe ff       	call   c0007c91 <malloc>
c0019ec5:	89 c5                	mov    ebp,eax
c0019ec7:	89 04 24             	mov    DWORD PTR [esp],eax
c0019eca:	e8 79 10 00 00       	call   c001af48 <SATAPI::SATAPI()>
c0019ecf:	58                   	pop    eax
c0019ed0:	5a                   	pop    edx
c0019ed1:	55                   	push   ebp
c0019ed2:	56                   	push   esi
c0019ed3:	e8 94 1e ff ff       	call   c000bd6c <Device::addChild(Device*)>
c0019ed8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019edb:	56                   	push   esi
c0019edc:	6a 00                	push   0x0
c0019ede:	53                   	push   ebx
c0019edf:	55                   	push   ebp
c0019ee0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019ee3:	83 c4 20             	add    esp,0x20
c0019ee6:	d1 ef                	shr    edi,1
c0019ee8:	43                   	inc    ebx
c0019ee9:	83 fb 20             	cmp    ebx,0x20
c0019eec:	0f 85 72 ff ff ff    	jne    c0019e64 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019ef2:	83 c4 0c             	add    esp,0xc
c0019ef5:	5b                   	pop    ebx
c0019ef6:	5e                   	pop    esi
c0019ef7:	5f                   	pop    edi
c0019ef8:	5d                   	pop    ebp
c0019ef9:	c3                   	ret    

c0019efa <SATABus::open(int, int, void*)>:
c0019efa:	83 ec 14             	sub    esp,0x14
c0019efd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019f01:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019f07:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019f0d:	52                   	push   edx
c0019f0e:	50                   	push   eax
c0019f0f:	e8 3c ff ff ff       	call   c0019e50 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019f14:	31 c0                	xor    eax,eax
c0019f16:	83 c4 1c             	add    esp,0x1c
c0019f19:	c3                   	ret    

c0019f1a <ATA::close(int, int, void*)>:
c0019f1a:	83 ec 0c             	sub    esp,0xc
c0019f1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f21:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019f27:	85 c0                	test   eax,eax
c0019f29:	74 0c                	je     c0019f37 <ATA::close(int, int, void*)+0x1d>
c0019f2b:	83 ec 0c             	sub    esp,0xc
c0019f2e:	8b 10                	mov    edx,DWORD PTR [eax]
c0019f30:	50                   	push   eax
c0019f31:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019f34:	83 c4 10             	add    esp,0x10
c0019f37:	31 c0                	xor    eax,eax
c0019f39:	83 c4 0c             	add    esp,0xc
c0019f3c:	c3                   	ret    
c0019f3d:	90                   	nop

c0019f3e <ATA::powerSaving(PowerSavingLevel)>:
c0019f3e:	c3                   	ret    
c0019f3f:	90                   	nop

c0019f40 <ATA::ATA()>:
c0019f40:	83 ec 0c             	sub    esp,0xc
c0019f43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f47:	83 ec 04             	sub    esp,0x4
c0019f4a:	68 00 02 00 00       	push   0x200
c0019f4f:	68 31 f4 01 c0       	push   0xc001f431
c0019f54:	50                   	push   eax
c0019f55:	e8 e0 21 ff ff       	call   c000c13a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019f5a:	83 c4 10             	add    esp,0x10
c0019f5d:	ba a4 f3 01 c0       	mov    edx,0xc001f3a4
c0019f62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f66:	89 10                	mov    DWORD PTR [eax],edx
c0019f68:	90                   	nop
c0019f69:	83 c4 0c             	add    esp,0xc
c0019f6c:	c3                   	ret    
c0019f6d:	90                   	nop

c0019f6e <ATA::flush(bool)>:
c0019f6e:	53                   	push   ebx
c0019f6f:	83 ec 08             	sub    esp,0x8
c0019f72:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019f77:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f7b:	19 c0                	sbb    eax,eax
c0019f7d:	83 e0 fd             	and    eax,0xfffffffd
c0019f80:	05 ea 00 00 00       	add    eax,0xea
c0019f85:	50                   	push   eax
c0019f86:	6a 07                	push   0x7
c0019f88:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f8f:	50                   	push   eax
c0019f90:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f96:	e8 59 f1 ff ff       	call   c00190f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019f9b:	83 c4 0c             	add    esp,0xc
c0019f9e:	6a 00                	push   0x0
c0019fa0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019fa7:	50                   	push   eax
c0019fa8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019fae:	e8 df fb ff ff       	call   c0019b92 <IDE::polling(unsigned char, unsigned int)>
c0019fb3:	83 c4 18             	add    esp,0x18
c0019fb6:	5b                   	pop    ebx
c0019fb7:	c3                   	ret    

c0019fb8 <ATA::readyForCommand()>:
c0019fb8:	56                   	push   esi
c0019fb9:	53                   	push   ebx
c0019fba:	53                   	push   ebx
c0019fbb:	31 db                	xor    ebx,ebx
c0019fbd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019fc1:	51                   	push   ecx
c0019fc2:	6a 0c                	push   0xc
c0019fc4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019fcb:	50                   	push   eax
c0019fcc:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019fd2:	e8 dd f1 ff ff       	call   c00191b4 <IDE::read(unsigned char, unsigned char)>
c0019fd7:	83 c4 10             	add    esp,0x10
c0019fda:	a8 88                	test   al,0x88
c0019fdc:	74 1f                	je     c0019ffd <ATA::readyForCommand()+0x45>
c0019fde:	43                   	inc    ebx
c0019fdf:	83 fb 63             	cmp    ebx,0x63
c0019fe2:	7e dd                	jle    c0019fc1 <ATA::readyForCommand()+0x9>
c0019fe4:	83 ec 0c             	sub    esp,0xc
c0019fe7:	6a 0a                	push   0xa
c0019fe9:	e8 3e 9c ff ff       	call   c0013c2c <milliTenthSleep(unsigned int)>
c0019fee:	83 c4 10             	add    esp,0x10
c0019ff1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019ff7:	75 c8                	jne    c0019fc1 <ATA::readyForCommand()+0x9>
c0019ff9:	31 c0                	xor    eax,eax
c0019ffb:	eb 02                	jmp    c0019fff <ATA::readyForCommand()+0x47>
c0019ffd:	b0 01                	mov    al,0x1
c0019fff:	5a                   	pop    edx
c001a000:	5b                   	pop    ebx
c001a001:	5e                   	pop    esi
c001a002:	c3                   	ret    
c001a003:	90                   	nop

c001a004 <ATA::access(unsigned long long, int, void*, bool)>:
c001a004:	55                   	push   ebp
c001a005:	57                   	push   edi
c001a006:	56                   	push   esi
c001a007:	53                   	push   ebx
c001a008:	83 ec 2c             	sub    esp,0x2c
c001a00b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001a00f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a013:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a017:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a01b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001a01f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a023:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a027:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001a02d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a031:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a037:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a03b:	c1 e0 06             	shl    eax,0x6
c001a03e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001a046:	74 5d                	je     c001a0a5 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001a048:	89 fa                	mov    edx,edi
c001a04a:	89 f0                	mov    eax,esi
c001a04c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001a050:	c1 ea 1c             	shr    edx,0x1c
c001a053:	89 d1                	mov    ecx,edx
c001a055:	09 c1                	or     ecx,eax
c001a057:	74 25                	je     c001a07e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001a059:	31 ed                	xor    ebp,ebp
c001a05b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001a062:	89 fa                	mov    edx,edi
c001a064:	89 f0                	mov    eax,esi
c001a066:	0f ad d0             	shrd   eax,edx,cl
c001a069:	d3 ea                	shr    edx,cl
c001a06b:	f6 c1 20             	test   cl,0x20
c001a06e:	74 02                	je     c001a072 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001a070:	89 d0                	mov    eax,edx
c001a072:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001a076:	45                   	inc    ebp
c001a077:	83 fd 06             	cmp    ebp,0x6
c001a07a:	75 df                	jne    c001a05b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001a07c:	eb 76                	jmp    c001a0f4 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001a07e:	89 f0                	mov    eax,esi
c001a080:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001a085:	89 fa                	mov    edx,edi
c001a087:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a08e:	0f ac d0 10          	shrd   eax,edx,0x10
c001a092:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a097:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a09b:	c1 ee 18             	shr    esi,0x18
c001a09e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001a0a3:	eb 56                	jmp    c001a0fb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a0a5:	6a 00                	push   0x0
c001a0a7:	6a 3f                	push   0x3f
c001a0a9:	57                   	push   edi
c001a0aa:	56                   	push   esi
c001a0ab:	e8 60 22 00 00       	call   c001c310 <__umoddi3>
c001a0b0:	83 c4 10             	add    esp,0x10
c001a0b3:	40                   	inc    eax
c001a0b4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001a0b8:	6a 00                	push   0x0
c001a0ba:	68 f0 03 00 00       	push   0x3f0
c001a0bf:	57                   	push   edi
c001a0c0:	56                   	push   esi
c001a0c1:	e8 4a 21 00 00       	call   c001c210 <__udivdi3>
c001a0c6:	83 c4 10             	add    esp,0x10
c001a0c9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001a0ce:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a0d5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a0da:	6a 00                	push   0x0
c001a0dc:	6a 3f                	push   0x3f
c001a0de:	57                   	push   edi
c001a0df:	56                   	push   esi
c001a0e0:	e8 2b 21 00 00       	call   c001c210 <__udivdi3>
c001a0e5:	83 c4 10             	add    esp,0x10
c001a0e8:	89 c6                	mov    esi,eax
c001a0ea:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001a0ef:	83 e6 0f             	and    esi,0xf
c001a0f2:	eb 07                	jmp    c001a0fb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a0f4:	31 f6                	xor    esi,esi
c001a0f6:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001a0fb:	bf 01 00 00 00       	mov    edi,0x1
c001a100:	50                   	push   eax
c001a101:	6a 00                	push   0x0
c001a103:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a10a:	50                   	push   eax
c001a10b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a10f:	e8 ee f1 ff ff       	call   c0019302 <IDE::enableIRQs(unsigned char, bool)>
c001a114:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a117:	e8 9c fe ff ff       	call   c0019fb8 <ATA::readyForCommand()>
c001a11c:	83 c4 10             	add    esp,0x10
c001a11f:	84 c0                	test   al,al
c001a121:	0f 84 4e 02 00 00    	je     c001a375 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a127:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a12d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a133:	c1 e0 04             	shl    eax,0x4
c001a136:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a13d:	09 c6                	or     esi,eax
c001a13f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a144:	75 05                	jne    c001a14b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a146:	83 ce a0             	or     esi,0xffffffa0
c001a149:	eb 03                	jmp    c001a14e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a14b:	83 ce e0             	or     esi,0xffffffe0
c001a14e:	89 f0                	mov    eax,esi
c001a150:	0f b6 f0             	movzx  esi,al
c001a153:	56                   	push   esi
c001a154:	6a 06                	push   0x6
c001a156:	51                   	push   ecx
c001a157:	52                   	push   edx
c001a158:	e8 97 ef ff ff       	call   c00190f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a15d:	83 c4 10             	add    esp,0x10
c001a160:	6a 00                	push   0x0
c001a162:	6a 01                	push   0x1
c001a164:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a16b:	50                   	push   eax
c001a16c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a172:	e8 7d ef ff ff       	call   c00190f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a177:	83 c4 10             	add    esp,0x10
c001a17a:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a17f:	75 6e                	jne    c001a1ef <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a181:	6a 00                	push   0x0
c001a183:	6a 08                	push   0x8
c001a185:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a18c:	50                   	push   eax
c001a18d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a193:	e8 5c ef ff ff       	call   c00190f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a198:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a19d:	50                   	push   eax
c001a19e:	6a 09                	push   0x9
c001a1a0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1a7:	50                   	push   eax
c001a1a8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1ae:	e8 41 ef ff ff       	call   c00190f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1b3:	83 c4 20             	add    esp,0x20
c001a1b6:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a1bb:	50                   	push   eax
c001a1bc:	6a 0a                	push   0xa
c001a1be:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1c5:	50                   	push   eax
c001a1c6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1cc:	e8 23 ef ff ff       	call   c00190f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1d1:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a1d6:	50                   	push   eax
c001a1d7:	6a 0b                	push   0xb
c001a1d9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1e0:	50                   	push   eax
c001a1e1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1e7:	e8 08 ef ff ff       	call   c00190f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1ec:	83 c4 20             	add    esp,0x20
c001a1ef:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a1f4:	50                   	push   eax
c001a1f5:	6a 02                	push   0x2
c001a1f7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1fe:	50                   	push   eax
c001a1ff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a205:	e8 ea ee ff ff       	call   c00190f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a20a:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a20f:	50                   	push   eax
c001a210:	6a 03                	push   0x3
c001a212:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a219:	50                   	push   eax
c001a21a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a220:	e8 cf ee ff ff       	call   c00190f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a225:	83 c4 20             	add    esp,0x20
c001a228:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a22d:	50                   	push   eax
c001a22e:	6a 04                	push   0x4
c001a230:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a237:	50                   	push   eax
c001a238:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a23e:	e8 b1 ee ff ff       	call   c00190f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a243:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a248:	50                   	push   eax
c001a249:	6a 05                	push   0x5
c001a24b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a252:	50                   	push   eax
c001a253:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a259:	e8 96 ee ff ff       	call   c00190f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a25e:	83 c4 20             	add    esp,0x20
c001a261:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a266:	0f 94 c0             	sete   al
c001a269:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a26e:	74 09                	je     c001a279 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a270:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a277:	eb 07                	jmp    c001a280 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a279:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a280:	0f b6 c0             	movzx  eax,al
c001a283:	50                   	push   eax
c001a284:	6a 07                	push   0x7
c001a286:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a28d:	50                   	push   eax
c001a28e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a294:	e8 5b ee ff ff       	call   c00190f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a299:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a29d:	83 c4 10             	add    esp,0x10
c001a2a0:	85 f6                	test   esi,esi
c001a2a2:	0f 84 ae 00 00 00    	je     c001a356 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a2a8:	50                   	push   eax
c001a2a9:	6a 01                	push   0x1
c001a2ab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a2b2:	50                   	push   eax
c001a2b3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2b9:	e8 d4 f8 ff ff       	call   c0019b92 <IDE::polling(unsigned char, unsigned int)>
c001a2be:	83 c4 10             	add    esp,0x10
c001a2c1:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a2c7:	84 c0                	test   al,al
c001a2c9:	74 20                	je     c001a2eb <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a2cb:	0f b6 f8             	movzx  edi,al
c001a2ce:	0f b6 d2             	movzx  edx,dl
c001a2d1:	57                   	push   edi
c001a2d2:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a2d9:	50                   	push   eax
c001a2da:	52                   	push   edx
c001a2db:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2e1:	e8 fc f7 ff ff       	call   c0019ae2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a2e6:	e9 87 00 00 00       	jmp    c001a372 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a2eb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a2f0:	74 33                	je     c001a325 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a2f2:	31 ed                	xor    ebp,ebp
c001a2f4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a2f8:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a2fc:	50                   	push   eax
c001a2fd:	50                   	push   eax
c001a2fe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a305:	50                   	push   eax
c001a306:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a30c:	e8 d1 ed ff ff       	call   c00190e2 <IDE::getBase(unsigned char)>
c001a311:	89 c2                	mov    edx,eax
c001a313:	89 f8                	mov    eax,edi
c001a315:	66 ef                	out    dx,ax
c001a317:	45                   	inc    ebp
c001a318:	83 c4 10             	add    esp,0x10
c001a31b:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a321:	75 d1                	jne    c001a2f4 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a323:	eb 23                	jmp    c001a348 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a325:	0f b6 d2             	movzx  edx,dl
c001a328:	51                   	push   ecx
c001a329:	51                   	push   ecx
c001a32a:	52                   	push   edx
c001a32b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a331:	e8 ac ed ff ff       	call   c00190e2 <IDE::getBase(unsigned char)>
c001a336:	b9 00 01 00 00       	mov    ecx,0x100
c001a33b:	89 c2                	mov    edx,eax
c001a33d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a341:	fc                   	cld    
c001a342:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a345:	83 c4 10             	add    esp,0x10
c001a348:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a350:	4e                   	dec    esi
c001a351:	e9 4a ff ff ff       	jmp    c001a2a0 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a356:	31 ff                	xor    edi,edi
c001a358:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a35d:	74 16                	je     c001a375 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a35f:	50                   	push   eax
c001a360:	50                   	push   eax
c001a361:	31 c0                	xor    eax,eax
c001a363:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a368:	0f 94 c0             	sete   al
c001a36b:	50                   	push   eax
c001a36c:	53                   	push   ebx
c001a36d:	e8 fc fb ff ff       	call   c0019f6e <ATA::flush(bool)>
c001a372:	83 c4 10             	add    esp,0x10
c001a375:	83 c4 2c             	add    esp,0x2c
c001a378:	89 f8                	mov    eax,edi
c001a37a:	5b                   	pop    ebx
c001a37b:	5e                   	pop    esi
c001a37c:	5f                   	pop    edi
c001a37d:	5d                   	pop    ebp
c001a37e:	c3                   	ret    
c001a37f:	90                   	nop

c001a380 <ATA::read(unsigned long long, int, void*)>:
c001a380:	57                   	push   edi
c001a381:	b8 04 00 00 00       	mov    eax,0x4
c001a386:	56                   	push   esi
c001a387:	53                   	push   ebx
c001a388:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a38c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a390:	8d 7a ff             	lea    edi,[edx-0x1]
c001a393:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a397:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a39b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a3a1:	77 25                	ja     c001a3c8 <ATA::read(unsigned long long, int, void*)+0x48>
c001a3a3:	b8 06 00 00 00       	mov    eax,0x6
c001a3a8:	85 f6                	test   esi,esi
c001a3aa:	74 1c                	je     c001a3c8 <ATA::read(unsigned long long, int, void*)+0x48>
c001a3ac:	50                   	push   eax
c001a3ad:	50                   	push   eax
c001a3ae:	6a 00                	push   0x0
c001a3b0:	56                   	push   esi
c001a3b1:	52                   	push   edx
c001a3b2:	53                   	push   ebx
c001a3b3:	51                   	push   ecx
c001a3b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3b8:	e8 47 fc ff ff       	call   c001a004 <ATA::access(unsigned long long, int, void*, bool)>
c001a3bd:	83 c4 20             	add    esp,0x20
c001a3c0:	85 c0                	test   eax,eax
c001a3c2:	0f 95 c0             	setne  al
c001a3c5:	0f b6 c0             	movzx  eax,al
c001a3c8:	5b                   	pop    ebx
c001a3c9:	5e                   	pop    esi
c001a3ca:	5f                   	pop    edi
c001a3cb:	c3                   	ret    

c001a3cc <ATA::write(unsigned long long, int, void*)>:
c001a3cc:	57                   	push   edi
c001a3cd:	b8 04 00 00 00       	mov    eax,0x4
c001a3d2:	56                   	push   esi
c001a3d3:	53                   	push   ebx
c001a3d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a3dc:	8d 7a ff             	lea    edi,[edx-0x1]
c001a3df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a3e3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a3e7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a3ed:	77 25                	ja     c001a414 <ATA::write(unsigned long long, int, void*)+0x48>
c001a3ef:	b8 06 00 00 00       	mov    eax,0x6
c001a3f4:	85 f6                	test   esi,esi
c001a3f6:	74 1c                	je     c001a414 <ATA::write(unsigned long long, int, void*)+0x48>
c001a3f8:	50                   	push   eax
c001a3f9:	50                   	push   eax
c001a3fa:	6a 01                	push   0x1
c001a3fc:	56                   	push   esi
c001a3fd:	52                   	push   edx
c001a3fe:	53                   	push   ebx
c001a3ff:	51                   	push   ecx
c001a400:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a404:	e8 fb fb ff ff       	call   c001a004 <ATA::access(unsigned long long, int, void*, bool)>
c001a409:	83 c4 20             	add    esp,0x20
c001a40c:	85 c0                	test   eax,eax
c001a40e:	0f 95 c0             	setne  al
c001a411:	0f b6 c0             	movzx  eax,al
c001a414:	5b                   	pop    ebx
c001a415:	5e                   	pop    esi
c001a416:	5f                   	pop    edi
c001a417:	c3                   	ret    

c001a418 <ATA::detectCHS()>:
c001a418:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a41c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a422:	c1 e0 06             	shl    eax,0x6
c001a425:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a42b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a435:	c7 44 24 04 88 f3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f388
c001a43d:	e9 4d 61 ff ff       	jmp    c001058f <KePanic(char const*)>

c001a442 <ATA::open(int, int, void*)>:
c001a442:	53                   	push   ebx
c001a443:	83 ec 08             	sub    esp,0x8
c001a446:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a44a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a44e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a452:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a458:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a45e:	c1 e0 06             	shl    eax,0x6
c001a461:	01 d0                	add    eax,edx
c001a463:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a46a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a470:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a477:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a481:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a487:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a48e:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a495:	75 0c                	jne    c001a4a3 <ATA::open(int, int, void*)+0x61>
c001a497:	83 ec 0c             	sub    esp,0xc
c001a49a:	53                   	push   ebx
c001a49b:	e8 78 ff ff ff       	call   c001a418 <ATA::detectCHS()>
c001a4a0:	83 c4 10             	add    esp,0x10
c001a4a3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a4a9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a4af:	c1 e0 06             	shl    eax,0x6
c001a4b2:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a4b9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a4c3:	d1 e8                	shr    eax,1
c001a4c5:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a4cb:	6a 04                	push   0x4
c001a4cd:	6a 0c                	push   0xc
c001a4cf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a4d6:	50                   	push   eax
c001a4d7:	52                   	push   edx
c001a4d8:	e8 17 ec ff ff       	call   c00190f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4dd:	90                   	nop
c001a4de:	90                   	nop
c001a4df:	6a 00                	push   0x0
c001a4e1:	6a 0c                	push   0xc
c001a4e3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a4ea:	50                   	push   eax
c001a4eb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a4f1:	e8 fe eb ff ff       	call   c00190f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4f6:	83 c4 14             	add    esp,0x14
c001a4f9:	53                   	push   ebx
c001a4fa:	e8 a3 1c ff ff       	call   c000c1a2 <PhysicalDisk::startCache()>
c001a4ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a502:	e8 13 2d ff ff       	call   c000d21a <createPartitionsForDisk(PhysicalDisk*)>
c001a507:	31 c0                	xor    eax,eax
c001a509:	83 c4 18             	add    esp,0x18
c001a50c:	5b                   	pop    ebx
c001a50d:	c3                   	ret    

c001a50e <ATAPI::write(unsigned long long, int, void*)>:
c001a50e:	b8 03 00 00 00       	mov    eax,0x3
c001a513:	c3                   	ret    

c001a514 <ATAPI::close(int, int, void*)>:
c001a514:	83 ec 0c             	sub    esp,0xc
c001a517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a51b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a521:	85 c0                	test   eax,eax
c001a523:	74 0c                	je     c001a531 <ATAPI::close(int, int, void*)+0x1d>
c001a525:	83 ec 0c             	sub    esp,0xc
c001a528:	8b 10                	mov    edx,DWORD PTR [eax]
c001a52a:	50                   	push   eax
c001a52b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a52e:	83 c4 10             	add    esp,0x10
c001a531:	31 c0                	xor    eax,eax
c001a533:	83 c4 0c             	add    esp,0xc
c001a536:	c3                   	ret    
c001a537:	90                   	nop

c001a538 <ATAPI::ATAPI()>:
c001a538:	83 ec 0c             	sub    esp,0xc
c001a53b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a53f:	83 ec 04             	sub    esp,0x4
c001a542:	68 00 08 00 00       	push   0x800
c001a547:	68 d1 f4 01 c0       	push   0xc001f4d1
c001a54c:	50                   	push   eax
c001a54d:	e8 e8 1b ff ff       	call   c000c13a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a552:	83 c4 10             	add    esp,0x10
c001a555:	ba ec f3 01 c0       	mov    edx,0xc001f3ec
c001a55a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a55e:	89 10                	mov    DWORD PTR [eax],edx
c001a560:	90                   	nop
c001a561:	83 c4 0c             	add    esp,0xc
c001a564:	c3                   	ret    
c001a565:	90                   	nop

c001a566 <ATAPI::readyForCommand()>:
c001a566:	56                   	push   esi
c001a567:	53                   	push   ebx
c001a568:	53                   	push   ebx
c001a569:	31 db                	xor    ebx,ebx
c001a56b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a56f:	51                   	push   ecx
c001a570:	6a 0c                	push   0xc
c001a572:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a579:	50                   	push   eax
c001a57a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a580:	e8 2f ec ff ff       	call   c00191b4 <IDE::read(unsigned char, unsigned char)>
c001a585:	83 c4 10             	add    esp,0x10
c001a588:	a8 88                	test   al,0x88
c001a58a:	74 25                	je     c001a5b1 <ATAPI::readyForCommand()+0x4b>
c001a58c:	43                   	inc    ebx
c001a58d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a593:	7e da                	jle    c001a56f <ATAPI::readyForCommand()+0x9>
c001a595:	83 ec 0c             	sub    esp,0xc
c001a598:	68 5e 01 00 00       	push   0x15e
c001a59d:	e8 8a 96 ff ff       	call   c0013c2c <milliTenthSleep(unsigned int)>
c001a5a2:	83 c4 10             	add    esp,0x10
c001a5a5:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a5ab:	75 c2                	jne    c001a56f <ATAPI::readyForCommand()+0x9>
c001a5ad:	31 c0                	xor    eax,eax
c001a5af:	eb 02                	jmp    c001a5b3 <ATAPI::readyForCommand()+0x4d>
c001a5b1:	b0 01                	mov    al,0x1
c001a5b3:	5a                   	pop    edx
c001a5b4:	5b                   	pop    ebx
c001a5b5:	5e                   	pop    esi
c001a5b6:	c3                   	ret    
c001a5b7:	90                   	nop

c001a5b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a5b8:	55                   	push   ebp
c001a5b9:	57                   	push   edi
c001a5ba:	56                   	push   esi
c001a5bb:	53                   	push   ebx
c001a5bc:	83 ec 20             	sub    esp,0x20
c001a5bf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a5c3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a5c7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a5cb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a5cf:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a5d3:	6a 01                	push   0x1
c001a5d5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5dc:	50                   	push   eax
c001a5dd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5e3:	e8 1a ed ff ff       	call   c0019302 <IDE::enableIRQs(unsigned char, bool)>
c001a5e8:	5e                   	pop    esi
c001a5e9:	58                   	pop    eax
c001a5ea:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5f1:	50                   	push   eax
c001a5f2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5f8:	e8 d1 ea ff ff       	call   c00190ce <IDE::prepareInterrupt(unsigned char)>
c001a5fd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a600:	e8 61 ff ff ff       	call   c001a566 <ATAPI::readyForCommand()>
c001a605:	83 c4 10             	add    esp,0x10
c001a608:	84 c0                	test   al,al
c001a60a:	75 0a                	jne    c001a616 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a60c:	bb 01 00 00 00       	mov    ebx,0x1
c001a611:	e9 57 02 00 00       	jmp    c001a86d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a616:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a61c:	c1 e0 04             	shl    eax,0x4
c001a61f:	0f b6 c0             	movzx  eax,al
c001a622:	50                   	push   eax
c001a623:	6a 06                	push   0x6
c001a625:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a62c:	50                   	push   eax
c001a62d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a633:	e8 bc ea ff ff       	call   c00190f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a638:	6a 00                	push   0x0
c001a63a:	6a 01                	push   0x1
c001a63c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a643:	50                   	push   eax
c001a644:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a64a:	e8 a5 ea ff ff       	call   c00190f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a64f:	83 c4 20             	add    esp,0x20
c001a652:	0f b6 c3             	movzx  eax,bl
c001a655:	0f b6 df             	movzx  ebx,bh
c001a658:	50                   	push   eax
c001a659:	6a 04                	push   0x4
c001a65b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a662:	50                   	push   eax
c001a663:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a669:	e8 86 ea ff ff       	call   c00190f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a66e:	53                   	push   ebx
c001a66f:	6a 05                	push   0x5
c001a671:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a678:	50                   	push   eax
c001a679:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a67f:	e8 70 ea ff ff       	call   c00190f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a684:	83 c4 20             	add    esp,0x20
c001a687:	68 a0 00 00 00       	push   0xa0
c001a68c:	6a 07                	push   0x7
c001a68e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a695:	50                   	push   eax
c001a696:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a69c:	e8 53 ea ff ff       	call   c00190f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a6a1:	83 c4 0c             	add    esp,0xc
c001a6a4:	6a 01                	push   0x1
c001a6a6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6ad:	50                   	push   eax
c001a6ae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6b4:	e8 d9 f4 ff ff       	call   c0019b92 <IDE::polling(unsigned char, unsigned int)>
c001a6b9:	83 c4 10             	add    esp,0x10
c001a6bc:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a6c2:	84 c0                	test   al,al
c001a6c4:	74 23                	je     c001a6e9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a6c6:	0f b6 d8             	movzx  ebx,al
c001a6c9:	0f b6 d2             	movzx  edx,dl
c001a6cc:	53                   	push   ebx
c001a6cd:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a6d4:	50                   	push   eax
c001a6d5:	52                   	push   edx
c001a6d6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6dc:	e8 01 f4 ff ff       	call   c0019ae2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a6e1:	83 c4 10             	add    esp,0x10
c001a6e4:	e9 84 01 00 00       	jmp    c001a86d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a6e9:	0f b6 d2             	movzx  edx,dl
c001a6ec:	53                   	push   ebx
c001a6ed:	53                   	push   ebx
c001a6ee:	52                   	push   edx
c001a6ef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6f5:	e8 e8 e9 ff ff       	call   c00190e2 <IDE::getBase(unsigned char)>
c001a6fa:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a6fe:	b9 06 00 00 00       	mov    ecx,0x6
c001a703:	89 c2                	mov    edx,eax
c001a705:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a708:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a70c:	83 c4 10             	add    esp,0x10
c001a70f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a715:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a71c:	85 db                	test   ebx,ebx
c001a71e:	0f 84 ec 00 00 00    	je     c001a810 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a724:	51                   	push   ecx
c001a725:	51                   	push   ecx
c001a726:	52                   	push   edx
c001a727:	50                   	push   eax
c001a728:	e8 35 eb ff ff       	call   c0019262 <IDE::waitInterrupt(unsigned char)>
c001a72d:	83 c4 10             	add    esp,0x10
c001a730:	84 c0                	test   al,al
c001a732:	0f 84 d4 fe ff ff    	je     c001a60c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a738:	56                   	push   esi
c001a739:	56                   	push   esi
c001a73a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a741:	50                   	push   eax
c001a742:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a748:	e8 81 e9 ff ff       	call   c00190ce <IDE::prepareInterrupt(unsigned char)>
c001a74d:	83 c4 0c             	add    esp,0xc
c001a750:	6a 04                	push   0x4
c001a752:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a759:	50                   	push   eax
c001a75a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a760:	e8 4f ea ff ff       	call   c00191b4 <IDE::read(unsigned char, unsigned char)>
c001a765:	83 c4 0c             	add    esp,0xc
c001a768:	89 c6                	mov    esi,eax
c001a76a:	6a 05                	push   0x5
c001a76c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a773:	50                   	push   eax
c001a774:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a77a:	e8 35 ea ff ff       	call   c00191b4 <IDE::read(unsigned char, unsigned char)>
c001a77f:	89 f1                	mov    ecx,esi
c001a781:	0f b6 c0             	movzx  eax,al
c001a784:	0f b6 f1             	movzx  esi,cl
c001a787:	c1 e0 08             	shl    eax,0x8
c001a78a:	09 c6                	or     esi,eax
c001a78c:	d1 fe                	sar    esi,1
c001a78e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a792:	83 c4 10             	add    esp,0x10
c001a795:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a79a:	74 41                	je     c001a7dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a79c:	31 c9                	xor    ecx,ecx
c001a79e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a7a4:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a7ab:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a7af:	75 0a                	jne    c001a7bb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a7b1:	01 c9                	add    ecx,ecx
c001a7b3:	01 cd                	add    ebp,ecx
c001a7b5:	4b                   	dec    ebx
c001a7b6:	e9 54 ff ff ff       	jmp    c001a70f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a7bb:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a7c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a7c4:	51                   	push   ecx
c001a7c5:	51                   	push   ecx
c001a7c6:	52                   	push   edx
c001a7c7:	50                   	push   eax
c001a7c8:	e8 15 e9 ff ff       	call   c00190e2 <IDE::getBase(unsigned char)>
c001a7cd:	89 c2                	mov    edx,eax
c001a7cf:	89 f0                	mov    eax,esi
c001a7d1:	66 ef                	out    dx,ax
c001a7d3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a7d7:	83 c4 10             	add    esp,0x10
c001a7da:	41                   	inc    ecx
c001a7db:	eb c1                	jmp    c001a79e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a7dd:	31 f6                	xor    esi,esi
c001a7df:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a7e5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a7ec:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a7f0:	75 06                	jne    c001a7f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a7f2:	01 f6                	add    esi,esi
c001a7f4:	01 f5                	add    ebp,esi
c001a7f6:	eb bd                	jmp    c001a7b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a7f8:	51                   	push   ecx
c001a7f9:	51                   	push   ecx
c001a7fa:	52                   	push   edx
c001a7fb:	50                   	push   eax
c001a7fc:	e8 e1 e8 ff ff       	call   c00190e2 <IDE::getBase(unsigned char)>
c001a801:	89 c2                	mov    edx,eax
c001a803:	66 ed                	in     ax,dx
c001a805:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a80a:	83 c4 10             	add    esp,0x10
c001a80d:	46                   	inc    esi
c001a80e:	eb cf                	jmp    c001a7df <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a810:	51                   	push   ecx
c001a811:	51                   	push   ecx
c001a812:	52                   	push   edx
c001a813:	50                   	push   eax
c001a814:	e8 49 ea ff ff       	call   c0019262 <IDE::waitInterrupt(unsigned char)>
c001a819:	83 c4 10             	add    esp,0x10
c001a81c:	84 c0                	test   al,al
c001a81e:	0f 84 e8 fd ff ff    	je     c001a60c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a824:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a829:	52                   	push   edx
c001a82a:	52                   	push   edx
c001a82b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a832:	50                   	push   eax
c001a833:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a839:	e8 90 e8 ff ff       	call   c00190ce <IDE::prepareInterrupt(unsigned char)>
c001a83e:	83 c4 10             	add    esp,0x10
c001a841:	50                   	push   eax
c001a842:	50                   	push   eax
c001a843:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a84a:	50                   	push   eax
c001a84b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a851:	e8 8c e8 ff ff       	call   c00190e2 <IDE::getBase(unsigned char)>
c001a856:	8d 50 07             	lea    edx,[eax+0x7]
c001a859:	ec                   	in     al,dx
c001a85a:	83 c4 10             	add    esp,0x10
c001a85d:	a8 88                	test   al,0x88
c001a85f:	74 0a                	je     c001a86b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a861:	4b                   	dec    ebx
c001a862:	75 dd                	jne    c001a841 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a864:	bb 02 00 00 00       	mov    ebx,0x2
c001a869:	eb 02                	jmp    c001a86d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a86b:	31 db                	xor    ebx,ebx
c001a86d:	83 c4 1c             	add    esp,0x1c
c001a870:	89 d8                	mov    eax,ebx
c001a872:	5b                   	pop    ebx
c001a873:	5e                   	pop    esi
c001a874:	5f                   	pop    edi
c001a875:	5d                   	pop    ebp
c001a876:	c3                   	ret    
c001a877:	90                   	nop

c001a878 <ATAPI::diskRemoved()>:
c001a878:	53                   	push   ebx
c001a879:	83 ec 14             	sub    esp,0x14
c001a87c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a880:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a887:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a88d:	e8 08 27 ff ff       	call   c000cf9a <LogicalDisk::unmount()>
c001a892:	58                   	pop    eax
c001a893:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a899:	e8 42 30 ff ff       	call   c000d8e0 <VCache::writeWriteBuffer()>
c001a89e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a8a4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a8a8:	83 c4 18             	add    esp,0x18
c001a8ab:	5b                   	pop    ebx
c001a8ac:	e9 1f 30 ff ff       	jmp    c000d8d0 <VCache::invalidateReadBuffer()>
c001a8b1:	90                   	nop

c001a8b2 <ATAPI::eject()>:
c001a8b2:	57                   	push   edi
c001a8b3:	b9 03 00 00 00       	mov    ecx,0x3
c001a8b8:	53                   	push   ebx
c001a8b9:	83 ec 14             	sub    esp,0x14
c001a8bc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a8c0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a8c4:	fc                   	cld    
c001a8c5:	31 c0                	xor    eax,eax
c001a8c7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a8c9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a8ce:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a8d3:	50                   	push   eax
c001a8d4:	50                   	push   eax
c001a8d5:	6a 00                	push   0x0
c001a8d7:	6a 00                	push   0x0
c001a8d9:	6a 00                	push   0x0
c001a8db:	6a 02                	push   0x2
c001a8dd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a8e1:	50                   	push   eax
c001a8e2:	53                   	push   ebx
c001a8e3:	e8 d0 fc ff ff       	call   c001a5b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a8e8:	83 c4 14             	add    esp,0x14
c001a8eb:	53                   	push   ebx
c001a8ec:	e8 87 ff ff ff       	call   c001a878 <ATAPI::diskRemoved()>
c001a8f1:	83 c4 24             	add    esp,0x24
c001a8f4:	31 c0                	xor    eax,eax
c001a8f6:	5b                   	pop    ebx
c001a8f7:	5f                   	pop    edi
c001a8f8:	c3                   	ret    
c001a8f9:	90                   	nop

c001a8fa <ATAPI::diskInserted()>:
c001a8fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8fe:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a905:	c3                   	ret    

c001a906 <ATAPI::detectMedia()>:
c001a906:	56                   	push   esi
c001a907:	53                   	push   ebx
c001a908:	83 ec 28             	sub    esp,0x28
c001a90b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a90f:	6a 0c                	push   0xc
c001a911:	6a 00                	push   0x0
c001a913:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a917:	56                   	push   esi
c001a918:	e8 b3 5b fe ff       	call   c00004d0 <memset>
c001a91d:	58                   	pop    eax
c001a91e:	5a                   	pop    edx
c001a91f:	6a 00                	push   0x0
c001a921:	6a 00                	push   0x0
c001a923:	6a 00                	push   0x0
c001a925:	6a 00                	push   0x0
c001a927:	56                   	push   esi
c001a928:	53                   	push   ebx
c001a929:	e8 8a fc ff ff       	call   c001a5b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a92e:	83 c4 1c             	add    esp,0x1c
c001a931:	6a 0c                	push   0xc
c001a933:	6a 00                	push   0x0
c001a935:	56                   	push   esi
c001a936:	e8 95 5b fe ff       	call   c00004d0 <memset>
c001a93b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a940:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a945:	59                   	pop    ecx
c001a946:	58                   	pop    eax
c001a947:	6a 01                	push   0x1
c001a949:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a94d:	50                   	push   eax
c001a94e:	6a 00                	push   0x0
c001a950:	6a 12                	push   0x12
c001a952:	56                   	push   esi
c001a953:	53                   	push   ebx
c001a954:	e8 5f fc ff ff       	call   c001a5b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a959:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a95d:	83 c4 20             	add    esp,0x20
c001a960:	83 e0 7f             	and    eax,0x7f
c001a963:	3c 70                	cmp    al,0x70
c001a965:	74 15                	je     c001a97c <ATAPI::detectMedia()+0x76>
c001a967:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a96e:	75 0c                	jne    c001a97c <ATAPI::detectMedia()+0x76>
c001a970:	83 ec 0c             	sub    esp,0xc
c001a973:	53                   	push   ebx
c001a974:	e8 81 ff ff ff       	call   c001a8fa <ATAPI::diskInserted()>
c001a979:	83 c4 10             	add    esp,0x10
c001a97c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a980:	83 e0 0f             	and    eax,0xf
c001a983:	3c 02                	cmp    al,0x2
c001a985:	75 1b                	jne    c001a9a2 <ATAPI::detectMedia()+0x9c>
c001a987:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a98c:	75 2d                	jne    c001a9bb <ATAPI::detectMedia()+0xb5>
c001a98e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a995:	74 24                	je     c001a9bb <ATAPI::detectMedia()+0xb5>
c001a997:	83 ec 0c             	sub    esp,0xc
c001a99a:	53                   	push   ebx
c001a99b:	e8 d8 fe ff ff       	call   c001a878 <ATAPI::diskRemoved()>
c001a9a0:	eb 16                	jmp    c001a9b8 <ATAPI::detectMedia()+0xb2>
c001a9a2:	84 c0                	test   al,al
c001a9a4:	75 15                	jne    c001a9bb <ATAPI::detectMedia()+0xb5>
c001a9a6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a9ad:	75 0c                	jne    c001a9bb <ATAPI::detectMedia()+0xb5>
c001a9af:	83 ec 0c             	sub    esp,0xc
c001a9b2:	53                   	push   ebx
c001a9b3:	e8 42 ff ff ff       	call   c001a8fa <ATAPI::diskInserted()>
c001a9b8:	83 c4 10             	add    esp,0x10
c001a9bb:	83 c4 24             	add    esp,0x24
c001a9be:	5b                   	pop    ebx
c001a9bf:	5e                   	pop    esi
c001a9c0:	c3                   	ret    
c001a9c1:	90                   	nop

c001a9c2 <ATAPI::open(int, int, void*)>:
c001a9c2:	56                   	push   esi
c001a9c3:	53                   	push   ebx
c001a9c4:	50                   	push   eax
c001a9c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a9c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a9cd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a9d1:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a9d7:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a9dd:	c1 e0 06             	shl    eax,0x6
c001a9e0:	01 d0                	add    eax,edx
c001a9e2:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a9e9:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a9ef:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a9f6:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001aa00:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001aa06:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001aa0d:	6a 04                	push   0x4
c001aa0f:	6a 0c                	push   0xc
c001aa11:	51                   	push   ecx
c001aa12:	52                   	push   edx
c001aa13:	e8 dc e6 ff ff       	call   c00190f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aa18:	90                   	nop
c001aa19:	90                   	nop
c001aa1a:	6a 00                	push   0x0
c001aa1c:	6a 0c                	push   0xc
c001aa1e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001aa25:	50                   	push   eax
c001aa26:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001aa2c:	e8 c3 e6 ff ff       	call   c00190f4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aa31:	83 c4 14             	add    esp,0x14
c001aa34:	68 74 01 00 00       	push   0x174
c001aa39:	e8 53 d2 fe ff       	call   c0007c91 <malloc>
c001aa3e:	83 c4 0c             	add    esp,0xc
c001aa41:	89 c6                	mov    esi,eax
c001aa43:	6a 00                	push   0x0
c001aa45:	68 ff ff ff 7f       	push   0x7fffffff
c001aa4a:	6a 00                	push   0x0
c001aa4c:	6a 00                	push   0x0
c001aa4e:	53                   	push   ebx
c001aa4f:	68 bc f5 01 c0       	push   0xc001f5bc
c001aa54:	50                   	push   eax
c001aa55:	e8 8c 23 ff ff       	call   c000cde6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001aa5a:	83 c4 14             	add    esp,0x14
c001aa5d:	56                   	push   esi
c001aa5e:	e8 39 24 ff ff       	call   c000ce9c <LogicalDisk::assignDriveLetter()>
c001aa63:	5a                   	pop    edx
c001aa64:	0f be c0             	movsx  eax,al
c001aa67:	59                   	pop    ecx
c001aa68:	50                   	push   eax
c001aa69:	68 d4 f3 01 c0       	push   0xc001f3d4
c001aa6e:	e8 b9 fe fe ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c001aa73:	58                   	pop    eax
c001aa74:	5a                   	pop    edx
c001aa75:	56                   	push   esi
c001aa76:	53                   	push   ebx
c001aa77:	e8 f0 12 ff ff       	call   c000bd6c <Device::addChild(Device*)>
c001aa7c:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001aa82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa85:	e8 18 17 ff ff       	call   c000c1a2 <PhysicalDisk::startCache()>
c001aa8a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001aa91:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa94:	e8 6d fe ff ff       	call   c001a906 <ATAPI::detectMedia()>
c001aa99:	83 c4 14             	add    esp,0x14
c001aa9c:	31 c0                	xor    eax,eax
c001aa9e:	5b                   	pop    ebx
c001aa9f:	5e                   	pop    esi
c001aaa0:	c3                   	ret    
c001aaa1:	90                   	nop

c001aaa2 <ATAPI::read(unsigned long long, int, void*)>:
c001aaa2:	55                   	push   ebp
c001aaa3:	57                   	push   edi
c001aaa4:	56                   	push   esi
c001aaa5:	53                   	push   ebx
c001aaa6:	83 ec 1c             	sub    esp,0x1c
c001aaa9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001aaad:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001aab1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001aab5:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aabc:	74 3c                	je     c001aafa <ATAPI::read(unsigned long long, int, void*)+0x58>
c001aabe:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001aac2:	b9 03 00 00 00       	mov    ecx,0x3
c001aac7:	fc                   	cld    
c001aac8:	31 c0                	xor    eax,eax
c001aaca:	0f ce                	bswap  esi
c001aacc:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001aace:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001aad3:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001aad7:	89 e8                	mov    eax,ebp
c001aad9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001aadd:	50                   	push   eax
c001aade:	50                   	push   eax
c001aadf:	55                   	push   ebp
c001aae0:	c1 e5 0b             	shl    ebp,0xb
c001aae3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001aae7:	6a 00                	push   0x0
c001aae9:	55                   	push   ebp
c001aaea:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aaee:	50                   	push   eax
c001aaef:	53                   	push   ebx
c001aaf0:	e8 c3 fa ff ff       	call   c001a5b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001aaf5:	83 c4 20             	add    esp,0x20
c001aaf8:	eb 1a                	jmp    c001ab14 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001aafa:	83 ec 0c             	sub    esp,0xc
c001aafd:	53                   	push   ebx
c001aafe:	e8 03 fe ff ff       	call   c001a906 <ATAPI::detectMedia()>
c001ab03:	83 c4 10             	add    esp,0x10
c001ab06:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ab0d:	75 af                	jne    c001aabe <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001ab0f:	b8 02 00 00 00       	mov    eax,0x2
c001ab14:	83 c4 1c             	add    esp,0x1c
c001ab17:	5b                   	pop    ebx
c001ab18:	5e                   	pop    esi
c001ab19:	5f                   	pop    edi
c001ab1a:	5d                   	pop    ebp
c001ab1b:	c3                   	ret    

c001ab1c <SATA::close(int, int, void*)>:
c001ab1c:	83 ec 0c             	sub    esp,0xc
c001ab1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab23:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ab29:	85 c0                	test   eax,eax
c001ab2b:	74 0c                	je     c001ab39 <SATA::close(int, int, void*)+0x1d>
c001ab2d:	83 ec 0c             	sub    esp,0xc
c001ab30:	8b 10                	mov    edx,DWORD PTR [eax]
c001ab32:	50                   	push   eax
c001ab33:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ab36:	83 c4 10             	add    esp,0x10
c001ab39:	31 c0                	xor    eax,eax
c001ab3b:	83 c4 0c             	add    esp,0xc
c001ab3e:	c3                   	ret    
c001ab3f:	90                   	nop

c001ab40 <SATA::powerSaving(PowerSavingLevel)>:
c001ab40:	c3                   	ret    
c001ab41:	90                   	nop

c001ab42 <SATA::open(int, int, void*)>:
c001ab42:	56                   	push   esi
c001ab43:	53                   	push   ebx
c001ab44:	50                   	push   eax
c001ab45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab4d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ab57:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ab5d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ab67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab6b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ab75:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ab7b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ab82:	e8 e6 d3 fe ff       	call   c0007f6d <Phys::allocatePage()>
c001ab87:	89 c6                	mov    esi,eax
c001ab89:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ab8f:	81 c6 00 10 00 00    	add    esi,0x1000
c001ab95:	e8 d3 d3 fe ff       	call   c0007f6d <Phys::allocatePage()>
c001ab9a:	39 c6                	cmp    esi,eax
c001ab9c:	74 10                	je     c001abae <SATA::open(int, int, void*)+0x6c>
c001ab9e:	83 ec 0c             	sub    esp,0xc
c001aba1:	68 1c f4 01 c0       	push   0xc001f41c
c001aba6:	e8 e4 59 ff ff       	call   c001058f <KePanic(char const*)>
c001abab:	83 c4 10             	add    esp,0x10
c001abae:	83 ec 0c             	sub    esp,0xc
c001abb1:	6a 02                	push   0x2
c001abb3:	e8 21 eb fe ff       	call   c00096d9 <Virt::allocateKernelVirtualPages(int)>
c001abb8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001abbe:	6a 03                	push   0x3
c001abc0:	50                   	push   eax
c001abc1:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001abc7:	ff 35 b0 0a 02 c0    	push   DWORD PTR ds:0xc0020ab0
c001abcd:	e8 9c f1 fe ff       	call   c0009d6e <VAS::mapPage(unsigned long, unsigned long, int)>
c001abd2:	83 c4 14             	add    esp,0x14
c001abd5:	53                   	push   ebx
c001abd6:	e8 c7 15 ff ff       	call   c000c1a2 <PhysicalDisk::startCache()>
c001abdb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001abde:	e8 37 26 ff ff       	call   c000d21a <createPartitionsForDisk(PhysicalDisk*)>
c001abe3:	83 c4 14             	add    esp,0x14
c001abe6:	31 c0                	xor    eax,eax
c001abe8:	5b                   	pop    ebx
c001abe9:	5e                   	pop    esi
c001abea:	c3                   	ret    
c001abeb:	90                   	nop

c001abec <SATA::SATA()>:
c001abec:	83 ec 0c             	sub    esp,0xc
c001abef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abf3:	83 ec 04             	sub    esp,0x4
c001abf6:	68 00 02 00 00       	push   0x200
c001abfb:	68 30 f4 01 c0       	push   0xc001f430
c001ac00:	50                   	push   eax
c001ac01:	e8 34 15 ff ff       	call   c000c13a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ac06:	83 c4 10             	add    esp,0x10
c001ac09:	ba a0 f4 01 c0       	mov    edx,0xc001f4a0
c001ac0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac12:	89 10                	mov    DWORD PTR [eax],edx
c001ac14:	90                   	nop
c001ac15:	83 c4 0c             	add    esp,0xc
c001ac18:	c3                   	ret    
c001ac19:	90                   	nop

c001ac1a <SATA::access(unsigned long long, int, void*, bool)>:
c001ac1a:	55                   	push   ebp
c001ac1b:	57                   	push   edi
c001ac1c:	56                   	push   esi
c001ac1d:	53                   	push   ebx
c001ac1e:	83 ec 2c             	sub    esp,0x2c
c001ac21:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ac25:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ac29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ac2d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ac31:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ac35:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001ac3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac3e:	7e 10                	jle    c001ac50 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001ac40:	83 ec 0c             	sub    esp,0xc
c001ac43:	68 40 f4 01 c0       	push   0xc001f440
c001ac48:	e8 42 59 ff ff       	call   c001058f <KePanic(char const*)>
c001ac4d:	83 c4 10             	add    esp,0x10
c001ac50:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ac56:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ac5c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ac62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac66:	89 d0                	mov    eax,edx
c001ac68:	c1 e0 07             	shl    eax,0x7
c001ac6b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ac6f:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ac79:	51                   	push   ecx
c001ac7a:	8d 42 02             	lea    eax,[edx+0x2]
c001ac7d:	51                   	push   ecx
c001ac7e:	c1 e0 07             	shl    eax,0x7
c001ac81:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ac85:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ac89:	50                   	push   eax
c001ac8a:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001ac90:	e8 e7 ef ff ff       	call   c0019c7c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ac95:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ac99:	83 c4 10             	add    esp,0x10
c001ac9c:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001aca1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aca5:	0f 84 4f 01 00 00    	je     c001adfa <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001acab:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001acaf:	c1 e0 09             	shl    eax,0x9
c001acb2:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001acb7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001acbb:	74 0e                	je     c001accb <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001acbd:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001acc3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001acc7:	89 c1                	mov    ecx,eax
c001acc9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001accb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001accf:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001acd5:	8d 42 02             	lea    eax,[edx+0x2]
c001acd8:	c1 e0 07             	shl    eax,0x7
c001acdb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001acdf:	8b 00                	mov    eax,DWORD PTR [eax]
c001ace1:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ace7:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001aced:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001acf1:	c1 e1 05             	shl    ecx,0x5
c001acf4:	01 c8                	add    eax,ecx
c001acf6:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001acfa:	83 e1 01             	and    ecx,0x1
c001acfd:	89 ce                	mov    esi,ecx
c001acff:	8a 08                	mov    cl,BYTE PTR [eax]
c001ad01:	c1 e6 06             	shl    esi,0x6
c001ad04:	83 e1 bf             	and    ecx,0xffffffbf
c001ad07:	09 f1                	or     ecx,esi
c001ad09:	88 08                	mov    BYTE PTR [eax],cl
c001ad0b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ad0d:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001ad13:	81 c9 05 00 01 00    	or     ecx,0x10005
c001ad19:	89 08                	mov    DWORD PTR [eax],ecx
c001ad1b:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ad21:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001ad27:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001ad2d:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001ad30:	50                   	push   eax
c001ad31:	68 90 00 00 00       	push   0x90
c001ad36:	6a 00                	push   0x0
c001ad38:	56                   	push   esi
c001ad39:	e8 92 57 fe ff       	call   c00004d0 <memset>
c001ad3e:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ad44:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001ad48:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001ad4e:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ad52:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ad56:	83 c4 10             	add    esp,0x10
c001ad59:	48                   	dec    eax
c001ad5a:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ad5f:	89 c1                	mov    ecx,eax
c001ad61:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001ad67:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ad6c:	09 c8                	or     eax,ecx
c001ad6e:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ad74:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ad77:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001ad7e:	66 25 00 7f          	and    ax,0x7f00
c001ad82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad86:	66 0d 27 80          	or     ax,0x8027
c001ad8a:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001ad8f:	66 89 06             	mov    WORD PTR [esi],ax
c001ad92:	19 c0                	sbb    eax,eax
c001ad94:	83 e0 f0             	and    eax,0xfffffff0
c001ad97:	83 c0 35             	add    eax,0x35
c001ad9a:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ad9d:	89 e8                	mov    eax,ebp
c001ad9f:	c1 e8 10             	shr    eax,0x10
c001ada2:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ada5:	89 e8                	mov    eax,ebp
c001ada7:	c1 e8 18             	shr    eax,0x18
c001adaa:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001adad:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001adb1:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001adb4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001adb8:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001adbb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001adbf:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001adc3:	89 d6                	mov    esi,edx
c001adc5:	31 c0                	xor    eax,eax
c001adc7:	c1 e6 07             	shl    esi,0x7
c001adca:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001adce:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001add4:	80 e1 88             	and    cl,0x88
c001add7:	74 0a                	je     c001ade3 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001add9:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001adde:	74 0a                	je     c001adea <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001ade0:	40                   	inc    eax
c001ade1:	eb eb                	jmp    c001adce <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001ade3:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ade8:	75 17                	jne    c001ae01 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001adea:	83 ec 0c             	sub    esp,0xc
c001aded:	68 79 f4 01 c0       	push   0xc001f479
c001adf2:	e8 35 fb fe ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c001adf7:	83 c4 10             	add    esp,0x10
c001adfa:	b8 01 00 00 00       	mov    eax,0x1
c001adff:	eb 5d                	jmp    c001ae5e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ae01:	b8 01 00 00 00       	mov    eax,0x1
c001ae06:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ae0a:	c1 e2 07             	shl    edx,0x7
c001ae0d:	d3 e0                	shl    eax,cl
c001ae0f:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001ae13:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001ae19:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001ae1f:	85 c8                	test   eax,ecx
c001ae21:	74 16                	je     c001ae39 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001ae23:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001ae29:	0f ba e1 1e          	bt     ecx,0x1e
c001ae2d:	73 ea                	jae    c001ae19 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001ae2f:	83 ec 0c             	sub    esp,0xc
c001ae32:	68 87 f4 01 c0       	push   0xc001f487
c001ae37:	eb b9                	jmp    c001adf2 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ae39:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001ae3f:	0f ba e0 1e          	bt     eax,0x1e
c001ae43:	72 b5                	jb     c001adfa <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ae45:	31 c0                	xor    eax,eax
c001ae47:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ae4c:	75 10                	jne    c001ae5e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ae4e:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ae54:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ae58:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae5c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae5e:	83 c4 2c             	add    esp,0x2c
c001ae61:	5b                   	pop    ebx
c001ae62:	5e                   	pop    esi
c001ae63:	5f                   	pop    edi
c001ae64:	5d                   	pop    ebp
c001ae65:	c3                   	ret    

c001ae66 <SATA::read(unsigned long long, int, void*)>:
c001ae66:	57                   	push   edi
c001ae67:	b8 04 00 00 00       	mov    eax,0x4
c001ae6c:	56                   	push   esi
c001ae6d:	53                   	push   ebx
c001ae6e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ae72:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae76:	8d 7a ff             	lea    edi,[edx-0x1]
c001ae79:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ae7d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ae81:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ae87:	77 25                	ja     c001aeae <SATA::read(unsigned long long, int, void*)+0x48>
c001ae89:	b8 06 00 00 00       	mov    eax,0x6
c001ae8e:	85 f6                	test   esi,esi
c001ae90:	74 1c                	je     c001aeae <SATA::read(unsigned long long, int, void*)+0x48>
c001ae92:	50                   	push   eax
c001ae93:	50                   	push   eax
c001ae94:	6a 00                	push   0x0
c001ae96:	56                   	push   esi
c001ae97:	52                   	push   edx
c001ae98:	53                   	push   ebx
c001ae99:	51                   	push   ecx
c001ae9a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae9e:	e8 77 fd ff ff       	call   c001ac1a <SATA::access(unsigned long long, int, void*, bool)>
c001aea3:	83 c4 20             	add    esp,0x20
c001aea6:	85 c0                	test   eax,eax
c001aea8:	0f 95 c0             	setne  al
c001aeab:	0f b6 c0             	movzx  eax,al
c001aeae:	5b                   	pop    ebx
c001aeaf:	5e                   	pop    esi
c001aeb0:	5f                   	pop    edi
c001aeb1:	c3                   	ret    

c001aeb2 <SATA::write(unsigned long long, int, void*)>:
c001aeb2:	55                   	push   ebp
c001aeb3:	b8 04 00 00 00       	mov    eax,0x4
c001aeb8:	57                   	push   edi
c001aeb9:	56                   	push   esi
c001aeba:	53                   	push   ebx
c001aebb:	83 ec 0c             	sub    esp,0xc
c001aebe:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001aec2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aec6:	8d 73 ff             	lea    esi,[ebx-0x1]
c001aec9:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001aecd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001aed1:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001aed7:	77 3d                	ja     c001af16 <SATA::write(unsigned long long, int, void*)+0x64>
c001aed9:	b8 06 00 00 00       	mov    eax,0x6
c001aede:	85 ed                	test   ebp,ebp
c001aee0:	74 34                	je     c001af16 <SATA::write(unsigned long long, int, void*)+0x64>
c001aee2:	c1 e3 09             	shl    ebx,0x9
c001aee5:	01 eb                	add    ebx,ebp
c001aee7:	89 d6                	mov    esi,edx
c001aee9:	89 cf                	mov    edi,ecx
c001aeeb:	83 c6 01             	add    esi,0x1
c001aeee:	83 d7 00             	adc    edi,0x0
c001aef1:	50                   	push   eax
c001aef2:	50                   	push   eax
c001aef3:	6a 01                	push   0x1
c001aef5:	55                   	push   ebp
c001aef6:	81 c5 00 02 00 00    	add    ebp,0x200
c001aefc:	6a 01                	push   0x1
c001aefe:	51                   	push   ecx
c001aeff:	52                   	push   edx
c001af00:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001af04:	e8 11 fd ff ff       	call   c001ac1a <SATA::access(unsigned long long, int, void*, bool)>
c001af09:	83 c4 20             	add    esp,0x20
c001af0c:	89 f2                	mov    edx,esi
c001af0e:	89 f9                	mov    ecx,edi
c001af10:	39 dd                	cmp    ebp,ebx
c001af12:	75 d3                	jne    c001aee7 <SATA::write(unsigned long long, int, void*)+0x35>
c001af14:	31 c0                	xor    eax,eax
c001af16:	83 c4 0c             	add    esp,0xc
c001af19:	5b                   	pop    ebx
c001af1a:	5e                   	pop    esi
c001af1b:	5f                   	pop    edi
c001af1c:	5d                   	pop    ebp
c001af1d:	c3                   	ret    

c001af1e <SATAPI::write(unsigned long long, int, void*)>:
c001af1e:	b8 03 00 00 00       	mov    eax,0x3
c001af23:	c3                   	ret    

c001af24 <SATAPI::close(int, int, void*)>:
c001af24:	83 ec 0c             	sub    esp,0xc
c001af27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af2b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001af31:	85 c0                	test   eax,eax
c001af33:	74 0c                	je     c001af41 <SATAPI::close(int, int, void*)+0x1d>
c001af35:	83 ec 0c             	sub    esp,0xc
c001af38:	8b 10                	mov    edx,DWORD PTR [eax]
c001af3a:	50                   	push   eax
c001af3b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001af3e:	83 c4 10             	add    esp,0x10
c001af41:	31 c0                	xor    eax,eax
c001af43:	83 c4 0c             	add    esp,0xc
c001af46:	c3                   	ret    
c001af47:	90                   	nop

c001af48 <SATAPI::SATAPI()>:
c001af48:	83 ec 0c             	sub    esp,0xc
c001af4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af4f:	83 ec 04             	sub    esp,0x4
c001af52:	68 00 08 00 00       	push   0x800
c001af57:	68 d0 f4 01 c0       	push   0xc001f4d0
c001af5c:	50                   	push   eax
c001af5d:	e8 d8 11 ff ff       	call   c000c13a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001af62:	83 c4 10             	add    esp,0x10
c001af65:	ba 30 f6 01 c0       	mov    edx,0xc001f630
c001af6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af6e:	89 10                	mov    DWORD PTR [eax],edx
c001af70:	90                   	nop
c001af71:	83 c4 0c             	add    esp,0xc
c001af74:	c3                   	ret    
c001af75:	90                   	nop

c001af76 <SATAPI::diskRemoved()>:
c001af76:	c3                   	ret    
c001af77:	90                   	nop

c001af78 <SATAPI::diskInserted()>:
c001af78:	83 ec 18             	sub    esp,0x18
c001af7b:	68 dc f4 01 c0       	push   0xc001f4dc
c001af80:	e8 a7 f9 fe ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c001af85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af89:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001af90:	83 c4 1c             	add    esp,0x1c
c001af93:	c3                   	ret    

c001af94 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001af94:	55                   	push   ebp
c001af95:	57                   	push   edi
c001af96:	56                   	push   esi
c001af97:	53                   	push   ebx
c001af98:	83 ec 38             	sub    esp,0x38
c001af9b:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001af9f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001afa3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001afa7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001afab:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001afaf:	68 f4 f4 01 c0       	push   0xc001f4f4
c001afb4:	e8 73 f9 fe ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c001afb9:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001afbf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001afc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001afc9:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001afcf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001afd3:	c1 e0 07             	shl    eax,0x7
c001afd6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001afda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001afde:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001afe8:	58                   	pop    eax
c001afe9:	5a                   	pop    edx
c001afea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001afee:	8d 58 02             	lea    ebx,[eax+0x2]
c001aff1:	c1 e3 07             	shl    ebx,0x7
c001aff4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001aff8:	53                   	push   ebx
c001aff9:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001afff:	e8 78 ec ff ff       	call   c0019c7c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001b004:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b008:	83 c4 10             	add    esp,0x10
c001b00b:	b8 01 00 00 00       	mov    eax,0x1
c001b010:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001b015:	0f 84 4c 02 00 00    	je     c001b267 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001b01b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b021:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b023:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001b029:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001b02f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b033:	c1 e1 05             	shl    ecx,0x5
c001b036:	01 c8                	add    eax,ecx
c001b038:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b03a:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001b040:	81 c9 25 00 01 00    	or     ecx,0x10025
c001b046:	89 08                	mov    DWORD PTR [eax],ecx
c001b048:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001b04e:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001b054:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001b05a:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001b05d:	8d 7b 40             	lea    edi,[ebx+0x40]
c001b060:	50                   	push   eax
c001b061:	68 90 00 00 00       	push   0x90
c001b066:	6a 00                	push   0x0
c001b068:	53                   	push   ebx
c001b069:	e8 62 54 fe ff       	call   c00004d0 <memset>
c001b06e:	b9 0c 00 00 00       	mov    ecx,0xc
c001b073:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001b077:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b079:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001b07f:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001b083:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001b089:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001b08d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001b091:	48                   	dec    eax
c001b092:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b097:	89 c1                	mov    ecx,eax
c001b099:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001b09f:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b0a4:	09 c8                	or     eax,ecx
c001b0a6:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001b0ac:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001b0af:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001b0b6:	66 25 00 7f          	and    ax,0x7f00
c001b0ba:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b0be:	66 0d 27 80          	or     ax,0x8027
c001b0c2:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001b0c6:	66 89 03             	mov    WORD PTR [ebx],ax
c001b0c9:	89 d0                	mov    eax,edx
c001b0cb:	c1 ea 18             	shr    edx,0x18
c001b0ce:	c1 e8 10             	shr    eax,0x10
c001b0d1:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001b0d4:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001b0d7:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b0db:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001b0de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b0e2:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001b0e5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b0e9:	83 c4 10             	add    esp,0x10
c001b0ec:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001b0f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b0f4:	31 c0                	xor    eax,eax
c001b0f6:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001b0fc:	80 e1 88             	and    cl,0x88
c001b0ff:	74 0a                	je     c001b10b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c001b101:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b106:	74 0a                	je     c001b112 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c001b108:	40                   	inc    eax
c001b109:	eb eb                	jmp    c001b0f6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c001b10b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b110:	75 16                	jne    c001b128 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x194>
c001b112:	83 ec 0c             	sub    esp,0xc
c001b115:	68 0e f5 01 c0       	push   0xc001f50e
c001b11a:	e8 0d f8 fe ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c001b11f:	5f                   	pop    edi
c001b120:	5d                   	pop    ebp
c001b121:	68 23 f5 01 c0       	push   0xc001f523
c001b126:	eb 4f                	jmp    c001b177 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001b128:	be 01 00 00 00       	mov    esi,0x1
c001b12d:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b131:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b135:	d3 e6                	shl    esi,cl
c001b137:	c1 e7 07             	shl    edi,0x7
c001b13a:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b140:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b145:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b149:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b14f:	85 c6                	test   esi,eax
c001b151:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b157:	0f 84 cb 00 00 00    	je     c001b228 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c001b15d:	0f ba e0 1e          	bt     eax,0x1e
c001b161:	73 2c                	jae    c001b18f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c001b163:	83 ec 0c             	sub    esp,0xc
c001b166:	68 35 f5 01 c0       	push   0xc001f535
c001b16b:	e8 bc f7 fe ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c001b170:	5b                   	pop    ebx
c001b171:	5e                   	pop    esi
c001b172:	68 48 f5 01 c0       	push   0xc001f548
c001b177:	ff 35 04 0a 02 c0    	push   DWORD PTR ds:0xc0020a04
c001b17d:	e8 8c da fe ff       	call   c0008c0e <VgaText::puts(char const*)>
c001b182:	83 c4 10             	add    esp,0x10
c001b185:	b8 01 00 00 00       	mov    eax,0x1
c001b18a:	e9 d8 00 00 00       	jmp    c001b267 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001b18f:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b195:	83 f8 0d             	cmp    eax,0xd
c001b198:	77 0a                	ja     c001b1a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x210>
c001b19a:	83 ec 0c             	sub    esp,0xc
c001b19d:	68 c8 00 00 00       	push   0xc8
c001b1a2:	eb 28                	jmp    c001b1cc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001b1a4:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b1aa:	83 f8 0d             	cmp    eax,0xd
c001b1ad:	77 0a                	ja     c001b1b9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x225>
c001b1af:	83 ec 0c             	sub    esp,0xc
c001b1b2:	68 58 02 00 00       	push   0x258
c001b1b7:	eb 13                	jmp    c001b1cc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001b1b9:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b1bf:	83 f8 06             	cmp    eax,0x6
c001b1c2:	77 10                	ja     c001b1d4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x240>
c001b1c4:	83 ec 0c             	sub    esp,0xc
c001b1c7:	68 dc 05 00 00       	push   0x5dc
c001b1cc:	e8 5b 8a ff ff       	call   c0013c2c <milliTenthSleep(unsigned int)>
c001b1d1:	83 c4 10             	add    esp,0x10
c001b1d4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b1d8:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b1db:	75 06                	jne    c001b1e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24f>
c001b1dd:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b1e1:	74 15                	je     c001b1f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001b1e3:	83 fb 06             	cmp    ebx,0x6
c001b1e6:	77 10                	ja     c001b1f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001b1e8:	83 ec 0c             	sub    esp,0xc
c001b1eb:	68 c4 09 00 00       	push   0x9c4
c001b1f0:	e8 37 8a ff ff       	call   c0013c2c <milliTenthSleep(unsigned int)>
c001b1f5:	83 c4 10             	add    esp,0x10
c001b1f8:	43                   	inc    ebx
c001b1f9:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b1ff:	0f 85 44 ff ff ff    	jne    c001b149 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b5>
c001b205:	51                   	push   ecx
c001b206:	51                   	push   ecx
c001b207:	68 59 f5 01 c0       	push   0xc001f559
c001b20c:	ff 35 04 0a 02 c0    	push   DWORD PTR ds:0xc0020a04
c001b212:	e8 f7 d9 fe ff       	call   c0008c0e <VgaText::puts(char const*)>
c001b217:	c7 04 24 69 f5 01 c0 	mov    DWORD PTR [esp],0xc001f569
c001b21e:	e8 09 f7 fe ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c001b223:	e9 5a ff ff ff       	jmp    c001b182 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ee>
c001b228:	0f ba e0 1e          	bt     eax,0x1e
c001b22c:	73 19                	jae    c001b247 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b3>
c001b22e:	83 ec 0c             	sub    esp,0xc
c001b231:	68 7d f5 01 c0       	push   0xc001f57d
c001b236:	e8 f1 f6 fe ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c001b23b:	58                   	pop    eax
c001b23c:	5a                   	pop    edx
c001b23d:	68 92 f5 01 c0       	push   0xc001f592
c001b242:	e9 30 ff ff ff       	jmp    c001b177 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001b247:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b24c:	74 17                	je     c001b265 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001b24e:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b253:	74 10                	je     c001b265 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001b255:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b25b:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b25f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b263:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b265:	31 c0                	xor    eax,eax
c001b267:	83 c4 2c             	add    esp,0x2c
c001b26a:	5b                   	pop    ebx
c001b26b:	5e                   	pop    esi
c001b26c:	5f                   	pop    edi
c001b26d:	5d                   	pop    ebp
c001b26e:	c3                   	ret    
c001b26f:	90                   	nop

c001b270 <SATAPI::eject()>:
c001b270:	57                   	push   edi
c001b271:	b9 03 00 00 00       	mov    ecx,0x3
c001b276:	83 ec 18             	sub    esp,0x18
c001b279:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b27d:	fc                   	cld    
c001b27e:	31 c0                	xor    eax,eax
c001b280:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b282:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b287:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b28c:	50                   	push   eax
c001b28d:	6a 00                	push   0x0
c001b28f:	6a 00                	push   0x0
c001b291:	6a 00                	push   0x0
c001b293:	6a 00                	push   0x0
c001b295:	6a 02                	push   0x2
c001b297:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b29b:	50                   	push   eax
c001b29c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b2a0:	e8 ef fc ff ff       	call   c001af94 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b2a5:	31 c0                	xor    eax,eax
c001b2a7:	83 c4 38             	add    esp,0x38
c001b2aa:	5f                   	pop    edi
c001b2ab:	c3                   	ret    

c001b2ac <SATAPI::detectMedia()>:
c001b2ac:	53                   	push   ebx
c001b2ad:	83 ec 14             	sub    esp,0x14
c001b2b0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b2b4:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b2ba:	e8 21 26 ff ff       	call   c000d8e0 <VCache::writeWriteBuffer()>
c001b2bf:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b2c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b2c9:	83 c4 18             	add    esp,0x18
c001b2cc:	5b                   	pop    ebx
c001b2cd:	e9 fe 25 ff ff       	jmp    c000d8d0 <VCache::invalidateReadBuffer()>

c001b2d2 <SATAPI::open(int, int, void*)>:
c001b2d2:	56                   	push   esi
c001b2d3:	53                   	push   ebx
c001b2d4:	51                   	push   ecx
c001b2d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b2d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b2dd:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001b2e7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001b2ed:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b2f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2fb:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001b305:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001b30b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001b312:	e8 56 cc fe ff       	call   c0007f6d <Phys::allocatePage()>
c001b317:	89 c6                	mov    esi,eax
c001b319:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001b31f:	81 c6 00 10 00 00    	add    esi,0x1000
c001b325:	e8 43 cc fe ff       	call   c0007f6d <Phys::allocatePage()>
c001b32a:	39 c6                	cmp    esi,eax
c001b32c:	74 10                	je     c001b33e <SATAPI::open(int, int, void*)+0x6c>
c001b32e:	83 ec 0c             	sub    esp,0xc
c001b331:	68 a5 f5 01 c0       	push   0xc001f5a5
c001b336:	e8 54 52 ff ff       	call   c001058f <KePanic(char const*)>
c001b33b:	83 c4 10             	add    esp,0x10
c001b33e:	83 ec 0c             	sub    esp,0xc
c001b341:	6a 02                	push   0x2
c001b343:	e8 91 e3 fe ff       	call   c00096d9 <Virt::allocateKernelVirtualPages(int)>
c001b348:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001b34e:	6a 03                	push   0x3
c001b350:	50                   	push   eax
c001b351:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001b357:	ff 35 b0 0a 02 c0    	push   DWORD PTR ds:0xc0020ab0
c001b35d:	e8 0c ea fe ff       	call   c0009d6e <VAS::mapPage(unsigned long, unsigned long, int)>
c001b362:	83 c4 14             	add    esp,0x14
c001b365:	68 74 01 00 00       	push   0x174
c001b36a:	e8 22 c9 fe ff       	call   c0007c91 <malloc>
c001b36f:	83 c4 0c             	add    esp,0xc
c001b372:	89 c6                	mov    esi,eax
c001b374:	6a 00                	push   0x0
c001b376:	68 ff ff ff 7f       	push   0x7fffffff
c001b37b:	6a 00                	push   0x0
c001b37d:	6a 00                	push   0x0
c001b37f:	53                   	push   ebx
c001b380:	68 bb f5 01 c0       	push   0xc001f5bb
c001b385:	50                   	push   eax
c001b386:	e8 5b 1a ff ff       	call   c000cde6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001b38b:	83 c4 14             	add    esp,0x14
c001b38e:	56                   	push   esi
c001b38f:	e8 08 1b ff ff       	call   c000ce9c <LogicalDisk::assignDriveLetter()>
c001b394:	5a                   	pop    edx
c001b395:	0f be c0             	movsx  eax,al
c001b398:	59                   	pop    ecx
c001b399:	50                   	push   eax
c001b39a:	68 d4 f3 01 c0       	push   0xc001f3d4
c001b39f:	e8 88 f5 fe ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c001b3a4:	58                   	pop    eax
c001b3a5:	5a                   	pop    edx
c001b3a6:	56                   	push   esi
c001b3a7:	53                   	push   ebx
c001b3a8:	e8 bf 09 ff ff       	call   c000bd6c <Device::addChild(Device*)>
c001b3ad:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001b3b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b3b6:	e8 e7 0d ff ff       	call   c000c1a2 <PhysicalDisk::startCache()>
c001b3bb:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001b3c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b3c5:	e8 e2 fe ff ff       	call   c001b2ac <SATAPI::detectMedia()>
c001b3ca:	83 c4 14             	add    esp,0x14
c001b3cd:	31 c0                	xor    eax,eax
c001b3cf:	5b                   	pop    ebx
c001b3d0:	5e                   	pop    esi
c001b3d1:	c3                   	ret    

c001b3d2 <SATAPI::read(unsigned long long, int, void*)>:
c001b3d2:	57                   	push   edi
c001b3d3:	56                   	push   esi
c001b3d4:	53                   	push   ebx
c001b3d5:	83 ec 3c             	sub    esp,0x3c
c001b3d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b3dc:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b3e0:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b3e4:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001b3e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b3ec:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b3f0:	68 c9 f5 01 c0       	push   0xc001f5c9
c001b3f5:	e8 32 f5 fe ff       	call   c000a92c <Dbg::kprintf(char const*, ...)>
c001b3fa:	83 c4 10             	add    esp,0x10
c001b3fd:	83 fe 04             	cmp    esi,0x4
c001b400:	7e 10                	jle    c001b412 <SATAPI::read(unsigned long long, int, void*)+0x40>
c001b402:	83 ec 0c             	sub    esp,0xc
c001b405:	68 da f5 01 c0       	push   0xc001f5da
c001b40a:	e8 80 51 ff ff       	call   c001058f <KePanic(char const*)>
c001b40f:	83 c4 10             	add    esp,0x10
c001b412:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b418:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b41e:	51                   	push   ecx
c001b41f:	50                   	push   eax
c001b420:	83 c0 02             	add    eax,0x2
c001b423:	c1 e0 07             	shl    eax,0x7
c001b426:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001b42c:	50                   	push   eax
c001b42d:	52                   	push   edx
c001b42e:	e8 0d e9 ff ff       	call   c0019d40 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b433:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001b437:	b9 03 00 00 00       	mov    ecx,0x3
c001b43c:	fc                   	cld    
c001b43d:	31 c0                	xor    eax,eax
c001b43f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b441:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001b446:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001b44b:	83 c4 0c             	add    esp,0xc
c001b44e:	6a 00                	push   0x0
c001b450:	6a 00                	push   0x0
c001b452:	6a 00                	push   0x0
c001b454:	6a 00                	push   0x0
c001b456:	6a 02                	push   0x2
c001b458:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b45c:	50                   	push   eax
c001b45d:	53                   	push   ebx
c001b45e:	e8 31 fb ff ff       	call   c001af94 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b463:	83 c4 20             	add    esp,0x20
c001b466:	85 c0                	test   eax,eax
c001b468:	74 27                	je     c001b491 <SATAPI::read(unsigned long long, int, void*)+0xbf>
c001b46a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b46e:	50                   	push   eax
c001b46f:	50                   	push   eax
c001b470:	68 04 f6 01 c0       	push   0xc001f604
c001b475:	ff 35 04 0a 02 c0    	push   DWORD PTR ds:0xc0020a04
c001b47b:	e8 8e d7 fe ff       	call   c0008c0e <VgaText::puts(char const*)>
c001b480:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b483:	e8 24 fe ff ff       	call   c001b2ac <SATAPI::detectMedia()>
c001b488:	58                   	pop    eax
c001b489:	5a                   	pop    edx
c001b48a:	68 0c f6 01 c0       	push   0xc001f60c
c001b48f:	eb 69                	jmp    c001b4fa <SATAPI::read(unsigned long long, int, void*)+0x128>
c001b491:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b495:	b9 03 00 00 00       	mov    ecx,0x3
c001b49a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b49c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4a0:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001b4a5:	0f c8                	bswap  eax
c001b4a7:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001b4ab:	89 f0                	mov    eax,esi
c001b4ad:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b4b1:	57                   	push   edi
c001b4b2:	56                   	push   esi
c001b4b3:	c1 e6 0b             	shl    esi,0xb
c001b4b6:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b4ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b4c2:	56                   	push   esi
c001b4c3:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b4c7:	50                   	push   eax
c001b4c8:	53                   	push   ebx
c001b4c9:	e8 c6 fa ff ff       	call   c001af94 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b4ce:	83 c4 20             	add    esp,0x20
c001b4d1:	85 c0                	test   eax,eax
c001b4d3:	74 37                	je     c001b50c <SATAPI::read(unsigned long long, int, void*)+0x13a>
c001b4d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b4d9:	50                   	push   eax
c001b4da:	50                   	push   eax
c001b4db:	68 16 f6 01 c0       	push   0xc001f616
c001b4e0:	ff 35 04 0a 02 c0    	push   DWORD PTR ds:0xc0020a04
c001b4e6:	e8 23 d7 fe ff       	call   c0008c0e <VgaText::puts(char const*)>
c001b4eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b4ee:	e8 b9 fd ff ff       	call   c001b2ac <SATAPI::detectMedia()>
c001b4f3:	5a                   	pop    edx
c001b4f4:	59                   	pop    ecx
c001b4f5:	68 1e f6 01 c0       	push   0xc001f61e
c001b4fa:	ff 35 04 0a 02 c0    	push   DWORD PTR ds:0xc0020a04
c001b500:	e8 09 d7 fe ff       	call   c0008c0e <VgaText::puts(char const*)>
c001b505:	83 c4 10             	add    esp,0x10
c001b508:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b50c:	83 c4 30             	add    esp,0x30
c001b50f:	5b                   	pop    ebx
c001b510:	5e                   	pop    esi
c001b511:	5f                   	pop    edi
c001b512:	c3                   	ret    
c001b513:	90                   	nop

c001b514 <IOAPIC::close(int, int, void*)>:
c001b514:	b8 00 00 00 00       	mov    eax,0x0
c001b519:	c3                   	ret    

c001b51a <apicGetBase()>:
c001b51a:	55                   	push   ebp
c001b51b:	89 e5                	mov    ebp,esp
c001b51d:	83 ec 18             	sub    esp,0x18
c001b520:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c001b525:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001b52b:	83 e0 08             	and    eax,0x8
c001b52e:	84 c0                	test   al,al
c001b530:	75 07                	jne    c001b539 <apicGetBase()+0x1f>
c001b532:	b8 00 00 00 00       	mov    eax,0x0
c001b537:	eb 21                	jmp    c001b55a <apicGetBase()+0x40>
c001b539:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c001b53e:	83 ec 08             	sub    esp,0x8
c001b541:	6a 1b                	push   0x1b
c001b543:	50                   	push   eax
c001b544:	e8 7f bd fe ff       	call   c00072c8 <Computer::rdmsr(unsigned int)>
c001b549:	83 c4 10             	add    esp,0x10
c001b54c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b54f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b552:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b555:	25 00 00 ff ff       	and    eax,0xffff0000
c001b55a:	c9                   	leave  
c001b55b:	c3                   	ret    

c001b55c <IOAPIC::IOAPIC()>:
c001b55c:	83 ec 0c             	sub    esp,0xc
c001b55f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b563:	83 ec 08             	sub    esp,0x8
c001b566:	68 60 f6 01 c0       	push   0xc001f660
c001b56b:	50                   	push   eax
c001b56c:	e8 93 09 ff ff       	call   c000bf04 <Device::Device(char const*)>
c001b571:	83 c4 10             	add    esp,0x10
c001b574:	ba 70 f6 01 c0       	mov    edx,0xc001f670
c001b579:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b57d:	89 10                	mov    DWORD PTR [eax],edx
c001b57f:	90                   	nop
c001b580:	83 c4 0c             	add    esp,0xc
c001b583:	c3                   	ret    

c001b584 <apicOpen()>:
c001b584:	55                   	push   ebp
c001b585:	89 e5                	mov    ebp,esp
c001b587:	53                   	push   ebx
c001b588:	83 ec 34             	sub    esp,0x34
c001b58b:	a0 a0 48 02 c0       	mov    al,ds:0xc00248a0
c001b590:	83 f0 01             	xor    eax,0x1
c001b593:	84 c0                	test   al,al
c001b595:	0f 84 9d 00 00 00    	je     c001b638 <apicOpen()+0xb4>
c001b59b:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b59f:	a0 80 32 02 c0       	mov    al,ds:0xc0023280
c001b5a4:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b5a7:	0f 83 84 00 00 00    	jae    c001b631 <apicOpen()+0xad>
c001b5ad:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b5b4:	83 ec 0c             	sub    esp,0xc
c001b5b7:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b5ba:	e8 d2 c6 fe ff       	call   c0007c91 <malloc>
c001b5bf:	83 c4 10             	add    esp,0x10
c001b5c2:	89 c3                	mov    ebx,eax
c001b5c4:	83 ec 0c             	sub    esp,0xc
c001b5c7:	53                   	push   ebx
c001b5c8:	e8 8f ff ff ff       	call   c001b55c <IOAPIC::IOAPIC()>
c001b5cd:	83 c4 10             	add    esp,0x10
c001b5d0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b5d3:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b5d6:	25 ff 00 00 00       	and    eax,0xff
c001b5db:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b5de:	89 14 85 80 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb780],edx
c001b5e5:	a1 60 48 02 c0       	mov    eax,ds:0xc0024860
c001b5ea:	40                   	inc    eax
c001b5eb:	a3 60 48 02 c0       	mov    ds:0xc0024860,eax
c001b5f0:	a1 b8 09 02 c0       	mov    eax,ds:0xc00209b8
c001b5f5:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b5fb:	83 ec 08             	sub    esp,0x8
c001b5fe:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b601:	50                   	push   eax
c001b602:	e8 65 07 ff ff       	call   c000bd6c <Device::addChild(Device*)>
c001b607:	83 c4 10             	add    esp,0x10
c001b60a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b60d:	8b 00                	mov    eax,DWORD PTR [eax]
c001b60f:	83 c0 08             	add    eax,0x8
c001b612:	8b 10                	mov    edx,DWORD PTR [eax]
c001b614:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b617:	25 ff 00 00 00       	and    eax,0xff
c001b61c:	6a 00                	push   0x0
c001b61e:	6a 00                	push   0x0
c001b620:	50                   	push   eax
c001b621:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b624:	ff d2                	call   edx
c001b626:	83 c4 10             	add    esp,0x10
c001b629:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b62c:	e9 6e ff ff ff       	jmp    c001b59f <apicOpen()+0x1b>
c001b631:	c6 05 a0 48 02 c0 01 	mov    BYTE PTR ds:0xc00248a0,0x1
c001b638:	e8 dd fe ff ff       	call   c001b51a <apicGetBase()>
c001b63d:	05 f0 00 00 00       	add    eax,0xf0
c001b642:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b645:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b648:	8b 00                	mov    eax,DWORD PTR [eax]
c001b64a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b64d:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b654:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b65b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b65e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b661:	89 10                	mov    DWORD PTR [eax],edx
c001b663:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b66a:	a1 d0 31 02 c0       	mov    eax,ds:0xc00231d0
c001b66f:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b672:	7d 70                	jge    c001b6e4 <apicOpen()+0x160>
c001b674:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b677:	8b 04 85 e0 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce20]
c001b67e:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b681:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b684:	8b 04 85 e0 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce20]
c001b68b:	c1 e8 08             	shr    eax,0x8
c001b68e:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b692:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b695:	8b 04 85 e0 31 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdce20]
c001b69c:	c1 e8 18             	shr    eax,0x18
c001b69f:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b6a2:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b6a6:	75 37                	jne    c001b6df <apicOpen()+0x15b>
c001b6a8:	e8 6d fe ff ff       	call   c001b51a <apicGetBase()>
c001b6ad:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b6b1:	75 07                	jne    c001b6ba <apicOpen()+0x136>
c001b6b3:	ba 60 03 00 00       	mov    edx,0x360
c001b6b8:	eb 05                	jmp    c001b6bf <apicOpen()+0x13b>
c001b6ba:	ba 50 03 00 00       	mov    edx,0x350
c001b6bf:	01 d0                	add    eax,edx
c001b6c1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b6c4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b6c7:	8b 00                	mov    eax,DWORD PTR [eax]
c001b6c9:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b6cc:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b6d3:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b6d7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b6da:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b6dd:	89 10                	mov    DWORD PTR [eax],edx
c001b6df:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b6e2:	eb 86                	jmp    c001b66a <apicOpen()+0xe6>
c001b6e4:	90                   	nop
c001b6e5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b6e8:	c9                   	leave  
c001b6e9:	c3                   	ret    

c001b6ea <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b6ea:	55                   	push   ebp
c001b6eb:	89 e5                	mov    ebp,esp
c001b6ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6f0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b6f6:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b6f9:	72 1d                	jb     c001b718 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b6fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6fe:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b704:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b707:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b70d:	01 d0                	add    eax,edx
c001b70f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b712:	73 04                	jae    c001b718 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b714:	b0 01                	mov    al,0x1
c001b716:	eb 02                	jmp    c001b71a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b718:	b0 00                	mov    al,0x0
c001b71a:	5d                   	pop    ebp
c001b71b:	c3                   	ret    

c001b71c <IOAPIC::read(int)>:
c001b71c:	55                   	push   ebp
c001b71d:	89 e5                	mov    ebp,esp
c001b71f:	83 ec 10             	sub    esp,0x10
c001b722:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b725:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b72b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b72e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b731:	31 d2                	xor    edx,edx
c001b733:	88 c2                	mov    dl,al
c001b735:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b738:	89 10                	mov    DWORD PTR [eax],edx
c001b73a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b73d:	83 c0 10             	add    eax,0x10
c001b740:	8b 00                	mov    eax,DWORD PTR [eax]
c001b742:	c9                   	leave  
c001b743:	c3                   	ret    

c001b744 <IOAPIC::open(int, int, void*)>:
c001b744:	55                   	push   ebp
c001b745:	89 e5                	mov    ebp,esp
c001b747:	57                   	push   edi
c001b748:	56                   	push   esi
c001b749:	53                   	push   ebx
c001b74a:	83 ec 04             	sub    esp,0x4
c001b74d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b750:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b753:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b759:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b75c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b762:	8b 14 85 c0 32 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcd40]
c001b769:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b76c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b772:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b775:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b77b:	8b 14 85 40 33 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdccc0]
c001b782:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b785:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b78b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b78e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b794:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b797:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b79d:	89 c6                	mov    esi,eax
c001b79f:	81 e6 ff 00 00 00    	and    esi,0xff
c001b7a5:	89 d0                	mov    eax,edx
c001b7a7:	ba 00 00 00 00       	mov    edx,0x0
c001b7ac:	89 c7                	mov    edi,eax
c001b7ae:	83 e7 ff             	and    edi,0xffffffff
c001b7b1:	89 f9                	mov    ecx,edi
c001b7b3:	89 d0                	mov    eax,edx
c001b7b5:	25 ff 00 00 00       	and    eax,0xff
c001b7ba:	89 c3                	mov    ebx,eax
c001b7bc:	89 c8                	mov    eax,ecx
c001b7be:	89 da                	mov    edx,ebx
c001b7c0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b7c3:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b7c6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b7ca:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b7ce:	83 e0 00             	and    eax,0x0
c001b7d1:	09 d0                	or     eax,edx
c001b7d3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b7d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7da:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b7e0:	8d 50 01             	lea    edx,[eax+0x1]
c001b7e3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b7e6:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b7ec:	31 d2                	xor    edx,edx
c001b7ee:	88 c2                	mov    dl,al
c001b7f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b7f3:	83 c2 08             	add    edx,0x8
c001b7f6:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b7fa:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b800:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b806:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b80a:	6a 01                	push   0x1
c001b80c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b80f:	e8 08 ff ff ff       	call   c001b71c <IOAPIC::read(int)>
c001b814:	83 c4 08             	add    esp,0x8
c001b817:	c1 f8 10             	sar    eax,0x10
c001b81a:	25 ff 00 00 00       	and    eax,0xff
c001b81f:	8d 50 01             	lea    edx,[eax+0x1]
c001b822:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b825:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b82b:	b8 00 00 00 00       	mov    eax,0x0
c001b830:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b833:	5b                   	pop    ebx
c001b834:	5e                   	pop    esi
c001b835:	5f                   	pop    edi
c001b836:	5d                   	pop    ebp
c001b837:	c3                   	ret    

c001b838 <IOAPIC::write(int, int)>:
c001b838:	55                   	push   ebp
c001b839:	89 e5                	mov    ebp,esp
c001b83b:	83 ec 10             	sub    esp,0x10
c001b83e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b841:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b847:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b84a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b84d:	31 d2                	xor    edx,edx
c001b84f:	88 c2                	mov    dl,al
c001b851:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b854:	89 10                	mov    DWORD PTR [eax],edx
c001b856:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b859:	8d 50 10             	lea    edx,[eax+0x10]
c001b85c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b85f:	89 02                	mov    DWORD PTR [edx],eax
c001b861:	90                   	nop
c001b862:	c9                   	leave  
c001b863:	c3                   	ret    

c001b864 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b864:	55                   	push   ebp
c001b865:	89 e5                	mov    ebp,esp
c001b867:	53                   	push   ebx
c001b868:	83 ec 2c             	sub    esp,0x2c
c001b86b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b86e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b871:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b874:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b877:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b87a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b87d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b880:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b883:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b886:	88 d8                	mov    al,bl
c001b888:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b88b:	88 c8                	mov    al,cl
c001b88d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b890:	88 d0                	mov    al,dl
c001b892:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b895:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b898:	25 ff 00 00 00       	and    eax,0xff
c001b89d:	83 c0 08             	add    eax,0x8
c001b8a0:	01 c0                	add    eax,eax
c001b8a2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b8a5:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b8a8:	25 ff 00 00 00       	and    eax,0xff
c001b8ad:	83 c0 08             	add    eax,0x8
c001b8b0:	01 c0                	add    eax,eax
c001b8b2:	40                   	inc    eax
c001b8b3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b8b6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b8b9:	50                   	push   eax
c001b8ba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b8bd:	e8 5a fe ff ff       	call   c001b71c <IOAPIC::read(int)>
c001b8c2:	83 c4 08             	add    esp,0x8
c001b8c5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b8c8:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b8cf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b8d2:	c1 e0 18             	shl    eax,0x18
c001b8d5:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b8d8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b8db:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b8de:	52                   	push   edx
c001b8df:	50                   	push   eax
c001b8e0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b8e3:	e8 50 ff ff ff       	call   c001b838 <IOAPIC::write(int, int)>
c001b8e8:	83 c4 0c             	add    esp,0xc
c001b8eb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b8ee:	50                   	push   eax
c001b8ef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b8f2:	e8 25 fe ff ff       	call   c001b71c <IOAPIC::read(int)>
c001b8f7:	83 c4 08             	add    esp,0x8
c001b8fa:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b8fd:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b904:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b90b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b912:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b916:	74 09                	je     c001b921 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b918:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b91f:	eb 07                	jmp    c001b928 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b921:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b928:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b92c:	74 09                	je     c001b937 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b92e:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b935:	eb 07                	jmp    c001b93e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b937:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b93e:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b945:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b948:	25 ff 00 00 00       	and    eax,0xff
c001b94d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b950:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b953:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b956:	52                   	push   edx
c001b957:	50                   	push   eax
c001b958:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b95b:	e8 d8 fe ff ff       	call   c001b838 <IOAPIC::write(int, int)>
c001b960:	83 c4 0c             	add    esp,0xc
c001b963:	90                   	nop
c001b964:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b967:	c9                   	leave  
c001b968:	c3                   	ret    
c001b969:	66 90                	xchg   ax,ax
c001b96b:	90                   	nop

c001b96c <APICTimer::close(int, int, void*)>:
c001b96c:	b8 00 00 00 00       	mov    eax,0x0
c001b971:	c3                   	ret    
c001b972:	66 90                	xchg   ax,ax

c001b974 <apicTimerHandler(regs*, void*)>:
c001b974:	83 ec 0c             	sub    esp,0xc
c001b977:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b97b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b97d:	b8 10 27 00 00       	mov    eax,0x2710
c001b982:	ba 00 00 00 00       	mov    edx,0x0
c001b987:	f7 f1                	div    ecx
c001b989:	83 ec 0c             	sub    esp,0xc
c001b98c:	50                   	push   eax
c001b98d:	e8 6e 1c ff ff       	call   c000d600 <timerHandler(unsigned int)>
c001b992:	83 c4 10             	add    esp,0x10
c001b995:	90                   	nop
c001b996:	83 c4 0c             	add    esp,0xc
c001b999:	c3                   	ret    
c001b99a:	66 90                	xchg   ax,ax

c001b99c <APICTimer::open(int, int, void*)>:
c001b99c:	83 ec 0c             	sub    esp,0xc
c001b99f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9a3:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9a5:	83 c0 24             	add    eax,0x24
c001b9a8:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9aa:	83 ec 08             	sub    esp,0x8
c001b9ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9b5:	ff d0                	call   eax
c001b9b7:	83 c4 10             	add    esp,0x10
c001b9ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9be:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b9c2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b9c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b9d0:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b9d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b9da:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b9e0:	83 ec 0c             	sub    esp,0xc
c001b9e3:	51                   	push   ecx
c001b9e4:	6a 01                	push   0x1
c001b9e6:	68 74 b9 01 c0       	push   0xc001b974
c001b9eb:	52                   	push   edx
c001b9ec:	50                   	push   eax
c001b9ed:	e8 26 03 ff ff       	call   c000bd18 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b9f2:	83 c4 20             	add    esp,0x20
c001b9f5:	89 c2                	mov    edx,eax
c001b9f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9fb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ba01:	b8 00 00 00 00       	mov    eax,0x0
c001ba06:	83 c4 0c             	add    esp,0xc
c001ba09:	c3                   	ret    
c001ba0a:	66 90                	xchg   ax,ax

c001ba0c <APICTimer::write(int)>:
c001ba0c:	83 ec 0c             	sub    esp,0xc
c001ba0f:	83 ec 0c             	sub    esp,0xc
c001ba12:	68 94 f6 01 c0       	push   0xc001f694
c001ba17:	e8 73 4b ff ff       	call   c001058f <KePanic(char const*)>
c001ba1c:	83 c4 10             	add    esp,0x10
c001ba1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ba27:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ba2d:	90                   	nop
c001ba2e:	83 c4 0c             	add    esp,0xc
c001ba31:	c3                   	ret    
c001ba32:	66 90                	xchg   ax,ax

c001ba34 <APICTimer::APICTimer()>:
c001ba34:	83 ec 0c             	sub    esp,0xc
c001ba37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba3b:	83 ec 08             	sub    esp,0x8
c001ba3e:	68 a4 f6 01 c0       	push   0xc001f6a4
c001ba43:	50                   	push   eax
c001ba44:	e8 eb 1a ff ff       	call   c000d534 <Timer::Timer(char const*)>
c001ba49:	83 c4 10             	add    esp,0x10
c001ba4c:	ba b8 f6 01 c0       	mov    edx,0xc001f6b8
c001ba51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba55:	89 10                	mov    DWORD PTR [eax],edx
c001ba57:	90                   	nop
c001ba58:	83 c4 0c             	add    esp,0xc
c001ba5b:	c3                   	ret    

c001ba5c <PIT::write(int)>:
c001ba5c:	83 ec 10             	sub    esp,0x10
c001ba5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba63:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ba67:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ba6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba71:	a3 a4 48 02 c0       	mov    ds:0xc00248a4,eax
c001ba76:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ba7b:	99                   	cdq    
c001ba7c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ba80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba84:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ba8b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ba90:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ba94:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ba99:	ee                   	out    dx,al
c001ba9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba9e:	25 ff 00 00 00       	and    eax,0xff
c001baa3:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001baaa:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001baae:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001bab2:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001bab7:	ee                   	out    dx,al
c001bab8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001babc:	c1 f8 08             	sar    eax,0x8
c001babf:	25 ff 00 00 00       	and    eax,0xff
c001bac4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001bacb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001bacf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001bad3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001bad8:	ee                   	out    dx,al
c001bad9:	90                   	nop
c001bada:	83 c4 10             	add    esp,0x10
c001badd:	c3                   	ret    
c001bade:	66 90                	xchg   ax,ax

c001bae0 <pitHandler(regs*, void*)>:
c001bae0:	83 ec 0c             	sub    esp,0xc
c001bae3:	8b 0d a4 48 02 c0    	mov    ecx,DWORD PTR ds:0xc00248a4
c001bae9:	b8 10 27 00 00       	mov    eax,0x2710
c001baee:	99                   	cdq    
c001baef:	f7 f9                	idiv   ecx
c001baf1:	83 ec 0c             	sub    esp,0xc
c001baf4:	50                   	push   eax
c001baf5:	e8 06 1b ff ff       	call   c000d600 <timerHandler(unsigned int)>
c001bafa:	83 c4 10             	add    esp,0x10
c001bafd:	90                   	nop
c001bafe:	83 c4 0c             	add    esp,0xc
c001bb01:	c3                   	ret    
c001bb02:	66 90                	xchg   ax,ax

c001bb04 <PIT::open(int, int, void*)>:
c001bb04:	83 ec 0c             	sub    esp,0xc
c001bb07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb0b:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb0d:	83 c0 24             	add    eax,0x24
c001bb10:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb12:	83 ec 08             	sub    esp,0x8
c001bb15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb1d:	ff d0                	call   eax
c001bb1f:	83 c4 10             	add    esp,0x10
c001bb22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb26:	83 ec 0c             	sub    esp,0xc
c001bb29:	6a 00                	push   0x0
c001bb2b:	6a 01                	push   0x1
c001bb2d:	68 e0 ba 01 c0       	push   0xc001bae0
c001bb32:	6a 00                	push   0x0
c001bb34:	50                   	push   eax
c001bb35:	e8 de 01 ff ff       	call   c000bd18 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bb3a:	83 c4 20             	add    esp,0x20
c001bb3d:	89 c2                	mov    edx,eax
c001bb3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb43:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001bb49:	b8 00 00 00 00       	mov    eax,0x0
c001bb4e:	83 c4 0c             	add    esp,0xc
c001bb51:	c3                   	ret    
c001bb52:	66 90                	xchg   ax,ax

c001bb54 <PIT::close(int, int, void*)>:
c001bb54:	83 ec 0c             	sub    esp,0xc
c001bb57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb5b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001bb65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb69:	6a 01                	push   0x1
c001bb6b:	68 e0 ba 01 c0       	push   0xc001bae0
c001bb70:	6a 00                	push   0x0
c001bb72:	50                   	push   eax
c001bb73:	e8 d6 01 ff ff       	call   c000bd4e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001bb78:	83 c4 10             	add    esp,0x10
c001bb7b:	b8 00 00 00 00       	mov    eax,0x0
c001bb80:	83 c4 0c             	add    esp,0xc
c001bb83:	c3                   	ret    

c001bb84 <PIT::PIT()>:
c001bb84:	83 ec 0c             	sub    esp,0xc
c001bb87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb8b:	83 ec 08             	sub    esp,0x8
c001bb8e:	68 e0 f6 01 c0       	push   0xc001f6e0
c001bb93:	50                   	push   eax
c001bb94:	e8 9b 19 ff ff       	call   c000d534 <Timer::Timer(char const*)>
c001bb99:	83 c4 10             	add    esp,0x10
c001bb9c:	ba 08 f7 01 c0       	mov    edx,0xc001f708
c001bba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bba5:	89 10                	mov    DWORD PTR [eax],edx
c001bba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbab:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bbb1:	31 d2                	xor    edx,edx
c001bbb3:	88 c2                	mov    dl,al
c001bbb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbb9:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001bbc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbc4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bbca:	31 d2                	xor    edx,edx
c001bbcc:	88 c2                	mov    dl,al
c001bbce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbd2:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001bbd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbdb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bbe1:	8d 50 01             	lea    edx,[eax+0x1]
c001bbe4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bbe8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001bbee:	31 d2                	xor    edx,edx
c001bbf0:	88 c2                	mov    dl,al
c001bbf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbf6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bbfa:	83 e1 3f             	and    ecx,0x3f
c001bbfd:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bc01:	90                   	nop
c001bc02:	83 c4 0c             	add    esp,0xc
c001bc05:	c3                   	ret    
c001bc06:	66 90                	xchg   ax,ax
c001bc08:	66 90                	xchg   ax,ax
c001bc0a:	66 90                	xchg   ax,ax
c001bc0c:	66 90                	xchg   ax,ax
c001bc0e:	66 90                	xchg   ax,ax

c001bc10 <avxDetect>:
c001bc10:	b8 01 00 00 00       	mov    eax,0x1
c001bc15:	0f a2                	cpuid  
c001bc17:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001bc1d:	74 15                	je     c001bc34 <avxDetect.noAVX>
c001bc1f:	b8 01 00 00 00       	mov    eax,0x1
c001bc24:	0f a2                	cpuid  
c001bc26:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001bc2c:	74 06                	je     c001bc34 <avxDetect.noAVX>
c001bc2e:	b8 01 00 00 00       	mov    eax,0x1
c001bc33:	c3                   	ret    

c001bc34 <avxDetect.noAVX>:
c001bc34:	b8 00 00 00 00       	mov    eax,0x0
c001bc39:	c3                   	ret    

c001bc3a <avxSave>:
c001bc3a:	53                   	push   ebx
c001bc3b:	52                   	push   edx
c001bc3c:	31 c0                	xor    eax,eax
c001bc3e:	48                   	dec    eax
c001bc3f:	89 c2                	mov    edx,eax
c001bc41:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bc45:	0f ae 23             	xsave  [ebx]
c001bc48:	5a                   	pop    edx
c001bc49:	5b                   	pop    ebx
c001bc4a:	c3                   	ret    

c001bc4b <avxLoad>:
c001bc4b:	53                   	push   ebx
c001bc4c:	52                   	push   edx
c001bc4d:	31 c0                	xor    eax,eax
c001bc4f:	48                   	dec    eax
c001bc50:	89 c2                	mov    edx,eax
c001bc52:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bc56:	0f ae 2b             	xrstor [ebx]
c001bc59:	5a                   	pop    edx
c001bc5a:	5b                   	pop    ebx
c001bc5b:	c3                   	ret    

c001bc5c <avxInit>:
c001bc5c:	e8 57 02 00 00       	call   c001beb8 <sseInit>
c001bc61:	50                   	push   eax
c001bc62:	51                   	push   ecx
c001bc63:	0f 20 e0             	mov    eax,cr4
c001bc66:	0d 00 00 04 00       	or     eax,0x40000
c001bc6b:	0f 22 e0             	mov    cr4,eax
c001bc6e:	31 c9                	xor    ecx,ecx
c001bc70:	0f 01 d0             	xgetbv 
c001bc73:	0d 07 00 00 00       	or     eax,0x7
c001bc78:	0f 01 d1             	xsetbv 
c001bc7b:	59                   	pop    ecx
c001bc7c:	58                   	pop    eax
c001bc7d:	c3                   	ret    

c001bc7e <avxClose>:
c001bc7e:	c3                   	ret    

c001bc7f <wouldSheSayYes>:
c001bc7f:	c3                   	ret    
c001bc80:	49                   	dec    ecx
c001bc81:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001bc85:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001bc89:	75 20                	jne    c001bcab <isr0+0xb>
c001bc8b:	4e                   	dec    esi
c001bc8c:	79 61                	jns    c001bcef <isr7+0x3>
c001bc8e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001bc93:	66 90                	xchg   ax,ax
c001bc95:	66 90                	xchg   ax,ax
c001bc97:	66 90                	xchg   ax,ax
c001bc99:	66 90                	xchg   ax,ax
c001bc9b:	66 90                	xchg   ax,ax
c001bc9d:	66 90                	xchg   ax,ax
c001bc9f:	90                   	nop

c001bca0 <isr0>:
c001bca0:	fa                   	cli    
c001bca1:	68 00 00 00 00       	push   0x0
c001bca6:	68 00 00 00 00       	push   0x0
c001bcab:	e9 44 01 00 00       	jmp    c001bdf4 <int_common_stub>

c001bcb0 <isr1>:
c001bcb0:	fa                   	cli    
c001bcb1:	6a 00                	push   0x0
c001bcb3:	6a 01                	push   0x1
c001bcb5:	e9 3a 01 00 00       	jmp    c001bdf4 <int_common_stub>

c001bcba <isr2>:
c001bcba:	fa                   	cli    
c001bcbb:	6a 00                	push   0x0
c001bcbd:	6a 02                	push   0x2
c001bcbf:	e9 30 01 00 00       	jmp    c001bdf4 <int_common_stub>

c001bcc4 <isr3>:
c001bcc4:	fa                   	cli    
c001bcc5:	6a 00                	push   0x0
c001bcc7:	6a 03                	push   0x3
c001bcc9:	e9 26 01 00 00       	jmp    c001bdf4 <int_common_stub>

c001bcce <isr4>:
c001bcce:	fa                   	cli    
c001bccf:	6a 00                	push   0x0
c001bcd1:	6a 04                	push   0x4
c001bcd3:	e9 1c 01 00 00       	jmp    c001bdf4 <int_common_stub>

c001bcd8 <isr5>:
c001bcd8:	fa                   	cli    
c001bcd9:	6a 00                	push   0x0
c001bcdb:	6a 05                	push   0x5
c001bcdd:	e9 12 01 00 00       	jmp    c001bdf4 <int_common_stub>

c001bce2 <isr6>:
c001bce2:	fa                   	cli    
c001bce3:	6a 00                	push   0x0
c001bce5:	6a 06                	push   0x6
c001bce7:	e9 08 01 00 00       	jmp    c001bdf4 <int_common_stub>

c001bcec <isr7>:
c001bcec:	fa                   	cli    
c001bced:	6a 00                	push   0x0
c001bcef:	6a 07                	push   0x7
c001bcf1:	e9 fe 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bcf6 <isr8>:
c001bcf6:	fa                   	cli    
c001bcf7:	6a 08                	push   0x8
c001bcf9:	e9 f6 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bcfe <isr9>:
c001bcfe:	fa                   	cli    
c001bcff:	6a 00                	push   0x0
c001bd01:	6a 09                	push   0x9
c001bd03:	e9 ec 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd08 <isr10>:
c001bd08:	fa                   	cli    
c001bd09:	6a 0a                	push   0xa
c001bd0b:	e9 e4 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd10 <isr11>:
c001bd10:	fa                   	cli    
c001bd11:	6a 0b                	push   0xb
c001bd13:	e9 dc 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd18 <isr12>:
c001bd18:	fa                   	cli    
c001bd19:	6a 0c                	push   0xc
c001bd1b:	e9 d4 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd20 <isr13>:
c001bd20:	fa                   	cli    
c001bd21:	6a 0d                	push   0xd
c001bd23:	e9 cc 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd28 <isr14>:
c001bd28:	fa                   	cli    
c001bd29:	6a 0e                	push   0xe
c001bd2b:	e9 c4 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd30 <isr15>:
c001bd30:	fa                   	cli    
c001bd31:	6a 00                	push   0x0
c001bd33:	6a 0f                	push   0xf
c001bd35:	e9 ba 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd3a <isr16>:
c001bd3a:	fa                   	cli    
c001bd3b:	6a 00                	push   0x0
c001bd3d:	6a 10                	push   0x10
c001bd3f:	e9 b0 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd44 <isr17>:
c001bd44:	fa                   	cli    
c001bd45:	6a 00                	push   0x0
c001bd47:	6a 11                	push   0x11
c001bd49:	e9 a6 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd4e <isr18>:
c001bd4e:	fa                   	cli    
c001bd4f:	6a 00                	push   0x0
c001bd51:	6a 12                	push   0x12
c001bd53:	e9 9c 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd58 <irq3>:
c001bd58:	fa                   	cli    
c001bd59:	6a 00                	push   0x0
c001bd5b:	6a 23                	push   0x23
c001bd5d:	e9 92 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd62 <irq4>:
c001bd62:	fa                   	cli    
c001bd63:	6a 00                	push   0x0
c001bd65:	6a 24                	push   0x24
c001bd67:	e9 88 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd6c <irq5>:
c001bd6c:	fa                   	cli    
c001bd6d:	6a 00                	push   0x0
c001bd6f:	6a 25                	push   0x25
c001bd71:	e9 7e 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd76 <irq6>:
c001bd76:	fa                   	cli    
c001bd77:	6a 00                	push   0x0
c001bd79:	6a 26                	push   0x26
c001bd7b:	e9 74 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd80 <irq7>:
c001bd80:	fa                   	cli    
c001bd81:	6a 00                	push   0x0
c001bd83:	6a 27                	push   0x27
c001bd85:	e9 6a 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd8a <irq8>:
c001bd8a:	fa                   	cli    
c001bd8b:	6a 00                	push   0x0
c001bd8d:	6a 28                	push   0x28
c001bd8f:	e9 60 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd94 <irq9>:
c001bd94:	fa                   	cli    
c001bd95:	6a 00                	push   0x0
c001bd97:	6a 29                	push   0x29
c001bd99:	e9 56 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bd9e <irq10>:
c001bd9e:	fa                   	cli    
c001bd9f:	6a 00                	push   0x0
c001bda1:	6a 2a                	push   0x2a
c001bda3:	e9 4c 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bda8 <irq11>:
c001bda8:	fa                   	cli    
c001bda9:	6a 00                	push   0x0
c001bdab:	6a 2b                	push   0x2b
c001bdad:	e9 42 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bdb2 <irq12>:
c001bdb2:	fa                   	cli    
c001bdb3:	6a 00                	push   0x0
c001bdb5:	6a 2c                	push   0x2c
c001bdb7:	e9 38 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bdbc <irq13>:
c001bdbc:	fa                   	cli    
c001bdbd:	6a 00                	push   0x0
c001bdbf:	6a 2d                	push   0x2d
c001bdc1:	e9 2e 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bdc6 <irq14>:
c001bdc6:	fa                   	cli    
c001bdc7:	6a 00                	push   0x0
c001bdc9:	6a 2e                	push   0x2e
c001bdcb:	e9 24 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bdd0 <irq15>:
c001bdd0:	fa                   	cli    
c001bdd1:	6a 00                	push   0x0
c001bdd3:	6a 2f                	push   0x2f
c001bdd5:	e9 1a 00 00 00       	jmp    c001bdf4 <int_common_stub>

c001bdda <irq1>:
c001bdda:	fa                   	cli    
c001bddb:	6a 00                	push   0x0
c001bddd:	6a 21                	push   0x21
c001bddf:	eb 13                	jmp    c001bdf4 <int_common_stub>

c001bde1 <irq2>:
c001bde1:	fa                   	cli    
c001bde2:	6a 00                	push   0x0
c001bde4:	6a 22                	push   0x22
c001bde6:	eb 0c                	jmp    c001bdf4 <int_common_stub>

c001bde8 <isr96>:
c001bde8:	6a 00                	push   0x0
c001bdea:	6a 60                	push   0x60
c001bdec:	fb                   	sti    
c001bded:	eb 05                	jmp    c001bdf4 <int_common_stub>

c001bdef <irq0>:
c001bdef:	fa                   	cli    
c001bdf0:	6a 00                	push   0x0
c001bdf2:	6a 20                	push   0x20

c001bdf4 <int_common_stub>:
c001bdf4:	60                   	pusha  
c001bdf5:	1e                   	push   ds
c001bdf6:	06                   	push   es
c001bdf7:	0f a0                	push   fs
c001bdf9:	0f a8                	push   gs
c001bdfb:	66 b8 10 00          	mov    ax,0x10
c001bdff:	66 8e d8             	mov    ds,ax
c001be02:	66 8e c0             	mov    es,ax
c001be05:	66 8e e0             	mov    fs,ax
c001be08:	66 8e e8             	mov    gs,ax
c001be0b:	54                   	push   esp
c001be0c:	fc                   	cld    
c001be0d:	e8 06 04 ff ff       	call   c000c218 <int_handler>
c001be12:	81 c4 04 00 00 00    	add    esp,0x4
c001be18:	0f a9                	pop    gs
c001be1a:	0f a1                	pop    fs
c001be1c:	07                   	pop    es
c001be1d:	1f                   	pop    ds
c001be1e:	61                   	popa   
c001be1f:	81 c4 08 00 00 00    	add    esp,0x8
c001be25:	cf                   	iret   

c001be26 <irq16>:
c001be26:	fa                   	cli    
c001be27:	6a 00                	push   0x0
c001be29:	6a 30                	push   0x30
c001be2b:	e9 c4 ff ff ff       	jmp    c001bdf4 <int_common_stub>

c001be30 <irq17>:
c001be30:	fa                   	cli    
c001be31:	6a 00                	push   0x0
c001be33:	6a 31                	push   0x31
c001be35:	e9 ba ff ff ff       	jmp    c001bdf4 <int_common_stub>

c001be3a <irq18>:
c001be3a:	fa                   	cli    
c001be3b:	6a 00                	push   0x0
c001be3d:	6a 32                	push   0x32
c001be3f:	e9 b0 ff ff ff       	jmp    c001bdf4 <int_common_stub>

c001be44 <irq19>:
c001be44:	fa                   	cli    
c001be45:	6a 00                	push   0x0
c001be47:	6a 33                	push   0x33
c001be49:	e9 a6 ff ff ff       	jmp    c001bdf4 <int_common_stub>

c001be4e <irq20>:
c001be4e:	fa                   	cli    
c001be4f:	6a 00                	push   0x0
c001be51:	6a 34                	push   0x34
c001be53:	e9 9c ff ff ff       	jmp    c001bdf4 <int_common_stub>

c001be58 <irq21>:
c001be58:	fa                   	cli    
c001be59:	6a 00                	push   0x0
c001be5b:	6a 35                	push   0x35
c001be5d:	e9 92 ff ff ff       	jmp    c001bdf4 <int_common_stub>

c001be62 <irq22>:
c001be62:	fa                   	cli    
c001be63:	6a 00                	push   0x0
c001be65:	6a 36                	push   0x36
c001be67:	e9 88 ff ff ff       	jmp    c001bdf4 <int_common_stub>

c001be6c <irq23>:
c001be6c:	fa                   	cli    
c001be6d:	6a 00                	push   0x0
c001be6f:	6a 37                	push   0x37
c001be71:	e9 7e ff ff ff       	jmp    c001bdf4 <int_common_stub>
c001be76:	66 90                	xchg   ax,ax
c001be78:	66 90                	xchg   ax,ax
c001be7a:	66 90                	xchg   ax,ax
c001be7c:	66 90                	xchg   ax,ax
c001be7e:	66 90                	xchg   ax,ax

c001be80 <i386GetRDRAND>:
c001be80:	b9 64 00 00 00       	mov    ecx,0x64

c001be85 <retry>:
c001be85:	0f c7 f0             	rdrand eax
c001be88:	72 05                	jb     c001be8f <retry.done>
c001be8a:	e2 f9                	loop   c001be85 <retry>

c001be8c <retry.fail>:
c001be8c:	31 c0                	xor    eax,eax
c001be8e:	c3                   	ret    

c001be8f <retry.done>:
c001be8f:	c3                   	ret    

c001be90 <absolutelyNoChanceInHell>:
c001be90:	b8 01 00 00 00       	mov    eax,0x1
c001be95:	0f a2                	cpuid  
c001be97:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001be9d:	74 06                	je     c001bea5 <sseDetect.noSSE>
c001be9f:	b8 01 00 00 00       	mov    eax,0x1
c001bea4:	c3                   	ret    

c001bea5 <sseDetect.noSSE>:
c001bea5:	31 c0                	xor    eax,eax
c001bea7:	c3                   	ret    

c001bea8 <sseSave>:
c001bea8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001beac:	0f ae 00             	fxsave [eax]
c001beaf:	c3                   	ret    

c001beb0 <sseLoad>:
c001beb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001beb4:	0f ae 08             	fxrstor [eax]
c001beb7:	c3                   	ret    

c001beb8 <sseInit>:
c001beb8:	e8 42 00 00 00       	call   c001beff <x87Init>
c001bebd:	0f 20 e0             	mov    eax,cr4
c001bec0:	66 0d 00 06          	or     ax,0x600
c001bec4:	0f 22 e0             	mov    cr4,eax
c001bec7:	c3                   	ret    

c001bec8 <sseClose>:
c001bec8:	c3                   	ret    
c001bec9:	66 90                	xchg   ax,ax
c001becb:	66 90                	xchg   ax,ax
c001becd:	66 90                	xchg   ax,ax
c001becf:	90                   	nop

c001bed0 <value_37F>:
c001bed0:	7f 03                	jg     c001bed5 <value_37A+0x1>

c001bed2 <value_37E>:
c001bed2:	7e 03                	jle    c001bed7 <x87Detect+0x1>

c001bed4 <value_37A>:
c001bed4:	7a 03                	jp     c001bed9 <x87Detect+0x3>

c001bed6 <x87Detect>:
c001bed6:	b8 01 00 00 00       	mov    eax,0x1
c001bedb:	0f a2                	cpuid  
c001bedd:	f7 c2 01 00 00 00    	test   edx,0x1
c001bee3:	74 06                	je     c001beeb <x87Detect.nox87>
c001bee5:	b8 01 00 00 00       	mov    eax,0x1
c001beea:	c3                   	ret    

c001beeb <x87Detect.nox87>:
c001beeb:	b8 00 00 00 00       	mov    eax,0x0
c001bef0:	c3                   	ret    

c001bef1 <x87Save>:
c001bef1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bef5:	dd 30                	fnsave [eax]
c001bef7:	c3                   	ret    

c001bef8 <x87Load>:
c001bef8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001befc:	dd 20                	frstor [eax]
c001befe:	c3                   	ret    

c001beff <x87Init>:
c001beff:	0f 20 c0             	mov    eax,cr0
c001bf02:	66 25 fb ff          	and    ax,0xfffb
c001bf06:	66 0d 22 00          	or     ax,0x22
c001bf0a:	0f 22 c0             	mov    cr0,eax
c001bf0d:	db e3                	fninit 
c001bf0f:	0f 06                	clts   
c001bf11:	d9 2d d4 be 01 c0    	fldcw  WORD PTR ds:0xc001bed4
c001bf17:	c3                   	ret    

c001bf18 <x87Close>:
c001bf18:	c3                   	ret    
c001bf19:	66 90                	xchg   ax,ax
c001bf1b:	90                   	nop

c001bf1c <__do_global_ctors_aux>:
c001bf1c:	a1 cc ce 01 c0       	mov    eax,ds:0xc001cecc
c001bf21:	83 f8 ff             	cmp    eax,0xffffffff
c001bf24:	74 1a                	je     c001bf40 <__do_global_ctors_aux+0x24>
c001bf26:	55                   	push   ebp
c001bf27:	89 e5                	mov    ebp,esp
c001bf29:	53                   	push   ebx
c001bf2a:	52                   	push   edx
c001bf2b:	bb cc ce 01 c0       	mov    ebx,0xc001cecc
c001bf30:	ff d0                	call   eax
c001bf32:	83 eb 04             	sub    ebx,0x4
c001bf35:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf37:	83 f8 ff             	cmp    eax,0xffffffff
c001bf3a:	75 f4                	jne    c001bf30 <__do_global_ctors_aux+0x14>
c001bf3c:	58                   	pop    eax
c001bf3d:	5b                   	pop    ebx
c001bf3e:	5d                   	pop    ebp
c001bf3f:	c3                   	ret    
c001bf40:	c3                   	ret    
c001bf41:	66 90                	xchg   ax,ax
c001bf43:	90                   	nop

c001bf44 <__divdi3>:
c001bf44:	55                   	push   ebp
c001bf45:	57                   	push   edi
c001bf46:	56                   	push   esi
c001bf47:	53                   	push   ebx
c001bf48:	83 ec 1c             	sub    esp,0x1c
c001bf4b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bf4f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bf53:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bf56:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bf5a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bf5e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bf62:	85 db                	test   ebx,ebx
c001bf64:	0f 88 8e 00 00 00    	js     c001bff8 <__divdi3+0xb4>
c001bf6a:	89 dd                	mov    ebp,ebx
c001bf6c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bf74:	89 d3                	mov    ebx,edx
c001bf76:	85 d2                	test   edx,edx
c001bf78:	79 0d                	jns    c001bf87 <__divdi3+0x43>
c001bf7a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001bf7e:	f7 d8                	neg    eax
c001bf80:	83 d2 00             	adc    edx,0x0
c001bf83:	f7 da                	neg    edx
c001bf85:	89 d3                	mov    ebx,edx
c001bf87:	89 c7                	mov    edi,eax
c001bf89:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bf8c:	85 db                	test   ebx,ebx
c001bf8e:	75 48                	jne    c001bfd8 <__divdi3+0x94>
c001bf90:	39 ef                	cmp    edi,ebp
c001bf92:	76 24                	jbe    c001bfb8 <__divdi3+0x74>
c001bf94:	89 ea                	mov    edx,ebp
c001bf96:	f7 f7                	div    edi
c001bf98:	89 c1                	mov    ecx,eax
c001bf9a:	31 f6                	xor    esi,esi
c001bf9c:	89 c8                	mov    eax,ecx
c001bf9e:	89 f2                	mov    edx,esi
c001bfa0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bfa4:	85 c9                	test   ecx,ecx
c001bfa6:	74 07                	je     c001bfaf <__divdi3+0x6b>
c001bfa8:	f7 d8                	neg    eax
c001bfaa:	83 d2 00             	adc    edx,0x0
c001bfad:	f7 da                	neg    edx
c001bfaf:	83 c4 1c             	add    esp,0x1c
c001bfb2:	5b                   	pop    ebx
c001bfb3:	5e                   	pop    esi
c001bfb4:	5f                   	pop    edi
c001bfb5:	5d                   	pop    ebp
c001bfb6:	c3                   	ret    
c001bfb7:	90                   	nop
c001bfb8:	85 ff                	test   edi,edi
c001bfba:	75 0b                	jne    c001bfc7 <__divdi3+0x83>
c001bfbc:	b8 01 00 00 00       	mov    eax,0x1
c001bfc1:	31 d2                	xor    edx,edx
c001bfc3:	f7 f3                	div    ebx
c001bfc5:	89 c7                	mov    edi,eax
c001bfc7:	31 d2                	xor    edx,edx
c001bfc9:	89 e8                	mov    eax,ebp
c001bfcb:	f7 f7                	div    edi
c001bfcd:	89 c6                	mov    esi,eax
c001bfcf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bfd2:	f7 f7                	div    edi
c001bfd4:	89 c1                	mov    ecx,eax
c001bfd6:	eb c4                	jmp    c001bf9c <__divdi3+0x58>
c001bfd8:	39 eb                	cmp    ebx,ebp
c001bfda:	77 3c                	ja     c001c018 <__divdi3+0xd4>
c001bfdc:	0f bd f3             	bsr    esi,ebx
c001bfdf:	83 f6 1f             	xor    esi,0x1f
c001bfe2:	75 40                	jne    c001c024 <__divdi3+0xe0>
c001bfe4:	39 eb                	cmp    ebx,ebp
c001bfe6:	72 09                	jb     c001bff1 <__divdi3+0xad>
c001bfe8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001bfeb:	0f 87 97 00 00 00    	ja     c001c088 <__divdi3+0x144>
c001bff1:	b9 01 00 00 00       	mov    ecx,0x1
c001bff6:	eb a4                	jmp    c001bf9c <__divdi3+0x58>
c001bff8:	f7 d9                	neg    ecx
c001bffa:	83 d3 00             	adc    ebx,0x0
c001bffd:	f7 db                	neg    ebx
c001bfff:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001c002:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001c006:	89 dd                	mov    ebp,ebx
c001c008:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001c010:	e9 5f ff ff ff       	jmp    c001bf74 <__divdi3+0x30>
c001c015:	8d 76 00             	lea    esi,[esi+0x0]
c001c018:	31 f6                	xor    esi,esi
c001c01a:	31 c9                	xor    ecx,ecx
c001c01c:	e9 7b ff ff ff       	jmp    c001bf9c <__divdi3+0x58>
c001c021:	8d 76 00             	lea    esi,[esi+0x0]
c001c024:	b8 20 00 00 00       	mov    eax,0x20
c001c029:	29 f0                	sub    eax,esi
c001c02b:	89 f1                	mov    ecx,esi
c001c02d:	d3 e3                	shl    ebx,cl
c001c02f:	89 fa                	mov    edx,edi
c001c031:	88 c1                	mov    cl,al
c001c033:	d3 ea                	shr    edx,cl
c001c035:	09 da                	or     edx,ebx
c001c037:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c03b:	89 f1                	mov    ecx,esi
c001c03d:	d3 e7                	shl    edi,cl
c001c03f:	89 eb                	mov    ebx,ebp
c001c041:	88 c1                	mov    cl,al
c001c043:	d3 eb                	shr    ebx,cl
c001c045:	89 f1                	mov    ecx,esi
c001c047:	d3 e5                	shl    ebp,cl
c001c049:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001c04c:	88 c1                	mov    cl,al
c001c04e:	d3 ea                	shr    edx,cl
c001c050:	09 d5                	or     ebp,edx
c001c052:	89 e8                	mov    eax,ebp
c001c054:	89 da                	mov    edx,ebx
c001c056:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001c05a:	89 d3                	mov    ebx,edx
c001c05c:	89 c5                	mov    ebp,eax
c001c05e:	f7 e7                	mul    edi
c001c060:	39 d3                	cmp    ebx,edx
c001c062:	72 18                	jb     c001c07c <__divdi3+0x138>
c001c064:	74 0a                	je     c001c070 <__divdi3+0x12c>
c001c066:	89 e9                	mov    ecx,ebp
c001c068:	31 f6                	xor    esi,esi
c001c06a:	e9 2d ff ff ff       	jmp    c001bf9c <__divdi3+0x58>
c001c06f:	90                   	nop
c001c070:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001c073:	89 f1                	mov    ecx,esi
c001c075:	d3 e7                	shl    edi,cl
c001c077:	39 c7                	cmp    edi,eax
c001c079:	73 eb                	jae    c001c066 <__divdi3+0x122>
c001c07b:	90                   	nop
c001c07c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001c07f:	31 f6                	xor    esi,esi
c001c081:	e9 16 ff ff ff       	jmp    c001bf9c <__divdi3+0x58>
c001c086:	66 90                	xchg   ax,ax
c001c088:	31 c9                	xor    ecx,ecx
c001c08a:	e9 0d ff ff ff       	jmp    c001bf9c <__divdi3+0x58>
c001c08f:	90                   	nop

c001c090 <__moddi3>:
c001c090:	55                   	push   ebp
c001c091:	57                   	push   edi
c001c092:	56                   	push   esi
c001c093:	53                   	push   ebx
c001c094:	83 ec 2c             	sub    esp,0x2c
c001c097:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c09b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001c09f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c0a3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001c0a7:	85 db                	test   ebx,ebx
c001c0a9:	0f 88 85 00 00 00    	js     c001c134 <__moddi3+0xa4>
c001c0af:	89 de                	mov    esi,ebx
c001c0b1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c0b9:	89 d7                	mov    edi,edx
c001c0bb:	85 d2                	test   edx,edx
c001c0bd:	79 09                	jns    c001c0c8 <__moddi3+0x38>
c001c0bf:	f7 d8                	neg    eax
c001c0c1:	83 d2 00             	adc    edx,0x0
c001c0c4:	f7 da                	neg    edx
c001c0c6:	89 d7                	mov    edi,edx
c001c0c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0cc:	89 cd                	mov    ebp,ecx
c001c0ce:	85 ff                	test   edi,edi
c001c0d0:	75 52                	jne    c001c124 <__moddi3+0x94>
c001c0d2:	89 c3                	mov    ebx,eax
c001c0d4:	39 f0                	cmp    eax,esi
c001c0d6:	76 24                	jbe    c001c0fc <__moddi3+0x6c>
c001c0d8:	89 c8                	mov    eax,ecx
c001c0da:	89 f2                	mov    edx,esi
c001c0dc:	f7 f3                	div    ebx
c001c0de:	89 d6                	mov    esi,edx
c001c0e0:	89 f0                	mov    eax,esi
c001c0e2:	31 d2                	xor    edx,edx
c001c0e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c0e8:	85 c9                	test   ecx,ecx
c001c0ea:	74 07                	je     c001c0f3 <__moddi3+0x63>
c001c0ec:	f7 d8                	neg    eax
c001c0ee:	83 d2 00             	adc    edx,0x0
c001c0f1:	f7 da                	neg    edx
c001c0f3:	83 c4 2c             	add    esp,0x2c
c001c0f6:	5b                   	pop    ebx
c001c0f7:	5e                   	pop    esi
c001c0f8:	5f                   	pop    edi
c001c0f9:	5d                   	pop    ebp
c001c0fa:	c3                   	ret    
c001c0fb:	90                   	nop
c001c0fc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c100:	85 db                	test   ebx,ebx
c001c102:	75 0d                	jne    c001c111 <__moddi3+0x81>
c001c104:	b8 01 00 00 00       	mov    eax,0x1
c001c109:	31 d2                	xor    edx,edx
c001c10b:	f7 f7                	div    edi
c001c10d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c111:	89 f0                	mov    eax,esi
c001c113:	31 d2                	xor    edx,edx
c001c115:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c119:	f7 f7                	div    edi
c001c11b:	89 e8                	mov    eax,ebp
c001c11d:	f7 f7                	div    edi
c001c11f:	89 d6                	mov    esi,edx
c001c121:	eb bd                	jmp    c001c0e0 <__moddi3+0x50>
c001c123:	90                   	nop
c001c124:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c128:	39 f7                	cmp    edi,esi
c001c12a:	76 20                	jbe    c001c14c <__moddi3+0xbc>
c001c12c:	89 c8                	mov    eax,ecx
c001c12e:	89 f2                	mov    edx,esi
c001c130:	eb b2                	jmp    c001c0e4 <__moddi3+0x54>
c001c132:	66 90                	xchg   ax,ax
c001c134:	f7 d9                	neg    ecx
c001c136:	83 d3 00             	adc    ebx,0x0
c001c139:	f7 db                	neg    ebx
c001c13b:	89 de                	mov    esi,ebx
c001c13d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c145:	e9 6f ff ff ff       	jmp    c001c0b9 <__moddi3+0x29>
c001c14a:	66 90                	xchg   ax,ax
c001c14c:	0f bd c7             	bsr    eax,edi
c001c14f:	83 f0 1f             	xor    eax,0x1f
c001c152:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c156:	75 24                	jne    c001c17c <__moddi3+0xec>
c001c158:	39 f7                	cmp    edi,esi
c001c15a:	72 06                	jb     c001c162 <__moddi3+0xd2>
c001c15c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c160:	77 0c                	ja     c001c16e <__moddi3+0xde>
c001c162:	89 e9                	mov    ecx,ebp
c001c164:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c168:	19 fe                	sbb    esi,edi
c001c16a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c16e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c172:	89 f2                	mov    edx,esi
c001c174:	e9 6b ff ff ff       	jmp    c001c0e4 <__moddi3+0x54>
c001c179:	8d 76 00             	lea    esi,[esi+0x0]
c001c17c:	b8 20 00 00 00       	mov    eax,0x20
c001c181:	89 c2                	mov    edx,eax
c001c183:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c187:	29 da                	sub    edx,ebx
c001c189:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c18d:	88 d9                	mov    cl,bl
c001c18f:	d3 e7                	shl    edi,cl
c001c191:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c195:	88 d1                	mov    cl,dl
c001c197:	d3 e8                	shr    eax,cl
c001c199:	09 c7                	or     edi,eax
c001c19b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c19f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c1a3:	89 d8                	mov    eax,ebx
c001c1a5:	88 d9                	mov    cl,bl
c001c1a7:	d3 e7                	shl    edi,cl
c001c1a9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c1ad:	89 f3                	mov    ebx,esi
c001c1af:	88 d1                	mov    cl,dl
c001c1b1:	d3 eb                	shr    ebx,cl
c001c1b3:	89 c7                	mov    edi,eax
c001c1b5:	88 c1                	mov    cl,al
c001c1b7:	d3 e6                	shl    esi,cl
c001c1b9:	89 e8                	mov    eax,ebp
c001c1bb:	88 d1                	mov    cl,dl
c001c1bd:	d3 e8                	shr    eax,cl
c001c1bf:	09 f0                	or     eax,esi
c001c1c1:	89 f9                	mov    ecx,edi
c001c1c3:	d3 e5                	shl    ebp,cl
c001c1c5:	89 da                	mov    edx,ebx
c001c1c7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c1cb:	89 d3                	mov    ebx,edx
c001c1cd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c1d1:	89 c6                	mov    esi,eax
c001c1d3:	89 d1                	mov    ecx,edx
c001c1d5:	39 d3                	cmp    ebx,edx
c001c1d7:	72 27                	jb     c001c200 <__moddi3+0x170>
c001c1d9:	74 21                	je     c001c1fc <__moddi3+0x16c>
c001c1db:	29 f5                	sub    ebp,esi
c001c1dd:	19 cb                	sbb    ebx,ecx
c001c1df:	89 de                	mov    esi,ebx
c001c1e1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c1e5:	d3 e6                	shl    esi,cl
c001c1e7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c1eb:	89 f9                	mov    ecx,edi
c001c1ed:	d3 ed                	shr    ebp,cl
c001c1ef:	09 ee                	or     esi,ebp
c001c1f1:	89 f0                	mov    eax,esi
c001c1f3:	d3 eb                	shr    ebx,cl
c001c1f5:	89 da                	mov    edx,ebx
c001c1f7:	e9 e8 fe ff ff       	jmp    c001c0e4 <__moddi3+0x54>
c001c1fc:	39 c5                	cmp    ebp,eax
c001c1fe:	73 db                	jae    c001c1db <__moddi3+0x14b>
c001c200:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c204:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c208:	89 d1                	mov    ecx,edx
c001c20a:	89 c6                	mov    esi,eax
c001c20c:	eb cd                	jmp    c001c1db <__moddi3+0x14b>
c001c20e:	66 90                	xchg   ax,ax

c001c210 <__udivdi3>:
c001c210:	55                   	push   ebp
c001c211:	57                   	push   edi
c001c212:	56                   	push   esi
c001c213:	53                   	push   ebx
c001c214:	83 ec 1c             	sub    esp,0x1c
c001c217:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c21b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c21f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c223:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c227:	85 d2                	test   edx,edx
c001c229:	75 41                	jne    c001c26c <__udivdi3+0x5c>
c001c22b:	39 f7                	cmp    edi,esi
c001c22d:	76 15                	jbe    c001c244 <__udivdi3+0x34>
c001c22f:	89 e8                	mov    eax,ebp
c001c231:	89 f2                	mov    edx,esi
c001c233:	f7 f7                	div    edi
c001c235:	31 db                	xor    ebx,ebx
c001c237:	89 da                	mov    edx,ebx
c001c239:	83 c4 1c             	add    esp,0x1c
c001c23c:	5b                   	pop    ebx
c001c23d:	5e                   	pop    esi
c001c23e:	5f                   	pop    edi
c001c23f:	5d                   	pop    ebp
c001c240:	c3                   	ret    
c001c241:	8d 76 00             	lea    esi,[esi+0x0]
c001c244:	89 f9                	mov    ecx,edi
c001c246:	85 ff                	test   edi,edi
c001c248:	75 0b                	jne    c001c255 <__udivdi3+0x45>
c001c24a:	b8 01 00 00 00       	mov    eax,0x1
c001c24f:	31 d2                	xor    edx,edx
c001c251:	f7 f7                	div    edi
c001c253:	89 c1                	mov    ecx,eax
c001c255:	31 d2                	xor    edx,edx
c001c257:	89 f0                	mov    eax,esi
c001c259:	f7 f1                	div    ecx
c001c25b:	89 c3                	mov    ebx,eax
c001c25d:	89 e8                	mov    eax,ebp
c001c25f:	f7 f1                	div    ecx
c001c261:	89 da                	mov    edx,ebx
c001c263:	83 c4 1c             	add    esp,0x1c
c001c266:	5b                   	pop    ebx
c001c267:	5e                   	pop    esi
c001c268:	5f                   	pop    edi
c001c269:	5d                   	pop    ebp
c001c26a:	c3                   	ret    
c001c26b:	90                   	nop
c001c26c:	39 f2                	cmp    edx,esi
c001c26e:	77 1c                	ja     c001c28c <__udivdi3+0x7c>
c001c270:	0f bd da             	bsr    ebx,edx
c001c273:	83 f3 1f             	xor    ebx,0x1f
c001c276:	75 24                	jne    c001c29c <__udivdi3+0x8c>
c001c278:	39 f2                	cmp    edx,esi
c001c27a:	72 08                	jb     c001c284 <__udivdi3+0x74>
c001c27c:	39 ef                	cmp    edi,ebp
c001c27e:	0f 87 84 00 00 00    	ja     c001c308 <__udivdi3+0xf8>
c001c284:	b8 01 00 00 00       	mov    eax,0x1
c001c289:	eb ac                	jmp    c001c237 <__udivdi3+0x27>
c001c28b:	90                   	nop
c001c28c:	31 db                	xor    ebx,ebx
c001c28e:	31 c0                	xor    eax,eax
c001c290:	89 da                	mov    edx,ebx
c001c292:	83 c4 1c             	add    esp,0x1c
c001c295:	5b                   	pop    ebx
c001c296:	5e                   	pop    esi
c001c297:	5f                   	pop    edi
c001c298:	5d                   	pop    ebp
c001c299:	c3                   	ret    
c001c29a:	66 90                	xchg   ax,ax
c001c29c:	b8 20 00 00 00       	mov    eax,0x20
c001c2a1:	29 d8                	sub    eax,ebx
c001c2a3:	88 d9                	mov    cl,bl
c001c2a5:	d3 e2                	shl    edx,cl
c001c2a7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c2ab:	89 fa                	mov    edx,edi
c001c2ad:	88 c1                	mov    cl,al
c001c2af:	d3 ea                	shr    edx,cl
c001c2b1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c2b5:	09 d1                	or     ecx,edx
c001c2b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c2bb:	88 d9                	mov    cl,bl
c001c2bd:	d3 e7                	shl    edi,cl
c001c2bf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c2c3:	89 f7                	mov    edi,esi
c001c2c5:	88 c1                	mov    cl,al
c001c2c7:	d3 ef                	shr    edi,cl
c001c2c9:	88 d9                	mov    cl,bl
c001c2cb:	d3 e6                	shl    esi,cl
c001c2cd:	89 ea                	mov    edx,ebp
c001c2cf:	88 c1                	mov    cl,al
c001c2d1:	d3 ea                	shr    edx,cl
c001c2d3:	09 d6                	or     esi,edx
c001c2d5:	89 f0                	mov    eax,esi
c001c2d7:	89 fa                	mov    edx,edi
c001c2d9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c2dd:	89 d7                	mov    edi,edx
c001c2df:	89 c6                	mov    esi,eax
c001c2e1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c2e5:	39 d7                	cmp    edi,edx
c001c2e7:	72 13                	jb     c001c2fc <__udivdi3+0xec>
c001c2e9:	74 09                	je     c001c2f4 <__udivdi3+0xe4>
c001c2eb:	89 f0                	mov    eax,esi
c001c2ed:	31 db                	xor    ebx,ebx
c001c2ef:	e9 43 ff ff ff       	jmp    c001c237 <__udivdi3+0x27>
c001c2f4:	88 d9                	mov    cl,bl
c001c2f6:	d3 e5                	shl    ebp,cl
c001c2f8:	39 c5                	cmp    ebp,eax
c001c2fa:	73 ef                	jae    c001c2eb <__udivdi3+0xdb>
c001c2fc:	8d 46 ff             	lea    eax,[esi-0x1]
c001c2ff:	31 db                	xor    ebx,ebx
c001c301:	e9 31 ff ff ff       	jmp    c001c237 <__udivdi3+0x27>
c001c306:	66 90                	xchg   ax,ax
c001c308:	31 c0                	xor    eax,eax
c001c30a:	e9 28 ff ff ff       	jmp    c001c237 <__udivdi3+0x27>
c001c30f:	90                   	nop

c001c310 <__umoddi3>:
c001c310:	55                   	push   ebp
c001c311:	57                   	push   edi
c001c312:	56                   	push   esi
c001c313:	53                   	push   ebx
c001c314:	83 ec 1c             	sub    esp,0x1c
c001c317:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c31b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c31f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c323:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c327:	89 da                	mov    edx,ebx
c001c329:	85 c0                	test   eax,eax
c001c32b:	75 37                	jne    c001c364 <__umoddi3+0x54>
c001c32d:	39 df                	cmp    edi,ebx
c001c32f:	76 13                	jbe    c001c344 <__umoddi3+0x34>
c001c331:	89 f0                	mov    eax,esi
c001c333:	f7 f7                	div    edi
c001c335:	89 d0                	mov    eax,edx
c001c337:	31 d2                	xor    edx,edx
c001c339:	83 c4 1c             	add    esp,0x1c
c001c33c:	5b                   	pop    ebx
c001c33d:	5e                   	pop    esi
c001c33e:	5f                   	pop    edi
c001c33f:	5d                   	pop    ebp
c001c340:	c3                   	ret    
c001c341:	8d 76 00             	lea    esi,[esi+0x0]
c001c344:	89 fd                	mov    ebp,edi
c001c346:	85 ff                	test   edi,edi
c001c348:	75 0b                	jne    c001c355 <__umoddi3+0x45>
c001c34a:	b8 01 00 00 00       	mov    eax,0x1
c001c34f:	31 d2                	xor    edx,edx
c001c351:	f7 f7                	div    edi
c001c353:	89 c5                	mov    ebp,eax
c001c355:	89 d8                	mov    eax,ebx
c001c357:	31 d2                	xor    edx,edx
c001c359:	f7 f5                	div    ebp
c001c35b:	89 f0                	mov    eax,esi
c001c35d:	f7 f5                	div    ebp
c001c35f:	89 d0                	mov    eax,edx
c001c361:	eb d4                	jmp    c001c337 <__umoddi3+0x27>
c001c363:	90                   	nop
c001c364:	89 f1                	mov    ecx,esi
c001c366:	39 d8                	cmp    eax,ebx
c001c368:	76 0a                	jbe    c001c374 <__umoddi3+0x64>
c001c36a:	89 f0                	mov    eax,esi
c001c36c:	83 c4 1c             	add    esp,0x1c
c001c36f:	5b                   	pop    ebx
c001c370:	5e                   	pop    esi
c001c371:	5f                   	pop    edi
c001c372:	5d                   	pop    ebp
c001c373:	c3                   	ret    
c001c374:	0f bd e8             	bsr    ebp,eax
c001c377:	83 f5 1f             	xor    ebp,0x1f
c001c37a:	75 1c                	jne    c001c398 <__umoddi3+0x88>
c001c37c:	39 d8                	cmp    eax,ebx
c001c37e:	72 04                	jb     c001c384 <__umoddi3+0x74>
c001c380:	39 f7                	cmp    edi,esi
c001c382:	77 08                	ja     c001c38c <__umoddi3+0x7c>
c001c384:	89 da                	mov    edx,ebx
c001c386:	29 fe                	sub    esi,edi
c001c388:	19 c2                	sbb    edx,eax
c001c38a:	89 f1                	mov    ecx,esi
c001c38c:	89 c8                	mov    eax,ecx
c001c38e:	83 c4 1c             	add    esp,0x1c
c001c391:	5b                   	pop    ebx
c001c392:	5e                   	pop    esi
c001c393:	5f                   	pop    edi
c001c394:	5d                   	pop    ebp
c001c395:	c3                   	ret    
c001c396:	66 90                	xchg   ax,ax
c001c398:	ba 20 00 00 00       	mov    edx,0x20
c001c39d:	29 ea                	sub    edx,ebp
c001c39f:	89 e9                	mov    ecx,ebp
c001c3a1:	d3 e0                	shl    eax,cl
c001c3a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c3a7:	89 f8                	mov    eax,edi
c001c3a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c3ad:	88 d1                	mov    cl,dl
c001c3af:	d3 e8                	shr    eax,cl
c001c3b1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c3b5:	09 c1                	or     ecx,eax
c001c3b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c3bb:	89 e9                	mov    ecx,ebp
c001c3bd:	d3 e7                	shl    edi,cl
c001c3bf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c3c3:	89 d8                	mov    eax,ebx
c001c3c5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c3c9:	88 d1                	mov    cl,dl
c001c3cb:	d3 e8                	shr    eax,cl
c001c3cd:	89 c7                	mov    edi,eax
c001c3cf:	89 e9                	mov    ecx,ebp
c001c3d1:	d3 e3                	shl    ebx,cl
c001c3d3:	89 f0                	mov    eax,esi
c001c3d5:	88 d1                	mov    cl,dl
c001c3d7:	d3 e8                	shr    eax,cl
c001c3d9:	09 d8                	or     eax,ebx
c001c3db:	89 e9                	mov    ecx,ebp
c001c3dd:	d3 e6                	shl    esi,cl
c001c3df:	89 f3                	mov    ebx,esi
c001c3e1:	89 fa                	mov    edx,edi
c001c3e3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c3e7:	89 d1                	mov    ecx,edx
c001c3e9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c3ed:	89 c6                	mov    esi,eax
c001c3ef:	89 d7                	mov    edi,edx
c001c3f1:	39 d1                	cmp    ecx,edx
c001c3f3:	72 27                	jb     c001c41c <__umoddi3+0x10c>
c001c3f5:	74 21                	je     c001c418 <__umoddi3+0x108>
c001c3f7:	89 ca                	mov    edx,ecx
c001c3f9:	29 f3                	sub    ebx,esi
c001c3fb:	19 fa                	sbb    edx,edi
c001c3fd:	89 d0                	mov    eax,edx
c001c3ff:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c403:	d3 e0                	shl    eax,cl
c001c405:	89 e9                	mov    ecx,ebp
c001c407:	d3 eb                	shr    ebx,cl
c001c409:	09 d8                	or     eax,ebx
c001c40b:	d3 ea                	shr    edx,cl
c001c40d:	83 c4 1c             	add    esp,0x1c
c001c410:	5b                   	pop    ebx
c001c411:	5e                   	pop    esi
c001c412:	5f                   	pop    edi
c001c413:	5d                   	pop    ebp
c001c414:	c3                   	ret    
c001c415:	8d 76 00             	lea    esi,[esi+0x0]
c001c418:	39 c3                	cmp    ebx,eax
c001c41a:	73 db                	jae    c001c3f7 <__umoddi3+0xe7>
c001c41c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c420:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c424:	89 d7                	mov    edi,edx
c001c426:	89 c6                	mov    esi,eax
c001c428:	eb cd                	jmp    c001c3f7 <__umoddi3+0xe7>

Disassembly of section .init:

c001c42a <_init>:
c001c42a:	55                   	push   ebp
c001c42b:	89 e5                	mov    ebp,esp
c001c42d:	e8 c2 3c fe ff       	call   c00000f4 <frame_dummy>
c001c432:	e8 e5 fa ff ff       	call   c001bf1c <__do_global_ctors_aux>
c001c437:	5d                   	pop    ebp
c001c438:	c3                   	ret    

Disassembly of section .fini:

c001c439 <_fini>:
c001c439:	55                   	push   ebp
c001c43a:	89 e5                	mov    ebp,esp
c001c43c:	e8 43 3c fe ff       	call   c0000084 <__do_global_dtors_aux>
c001c441:	5d                   	pop    ebp
c001c442:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c444 <Computer::~Computer()>:
c001c444:	83 ec 0c             	sub    esp,0xc
c001c447:	ba f8 d6 01 c0       	mov    edx,0xc001d6f8
c001c44c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c450:	89 10                	mov    DWORD PTR [eax],edx
c001c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c456:	83 ec 0c             	sub    esp,0xc
c001c459:	50                   	push   eax
c001c45a:	e8 0f f8 fe ff       	call   c000bc6e <Device::~Device()>
c001c45f:	83 c4 10             	add    esp,0x10
c001c462:	90                   	nop
c001c463:	83 c4 0c             	add    esp,0xc
c001c466:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c468 <Computer::~Computer()>:
c001c468:	83 ec 0c             	sub    esp,0xc
c001c46b:	83 ec 0c             	sub    esp,0xc
c001c46e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c472:	e8 cd ff ff ff       	call   c001c444 <Computer::~Computer()>
c001c477:	83 c4 10             	add    esp,0x10
c001c47a:	83 ec 08             	sub    esp,0x8
c001c47d:	68 70 01 00 00       	push   0x170
c001c482:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c486:	e8 ab e3 fe ff       	call   c000a836 <operator delete(void*, unsigned long)>
c001c48b:	83 c4 10             	add    esp,0x10
c001c48e:	83 c4 0c             	add    esp,0xc
c001c491:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c492 <idleCommon()>:
c001c492:	83 ec 0c             	sub    esp,0xc
c001c495:	fa                   	cli    
c001c496:	ff 05 68 3e 02 c0    	inc    DWORD PTR ds:0xc0023e68
c001c49c:	e8 8b 74 ff ff       	call   c001392c <schedule()>
c001c4a1:	a1 68 3e 02 c0       	mov    eax,ds:0xc0023e68
c001c4a6:	48                   	dec    eax
c001c4a7:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c001c4ac:	75 01                	jne    c001c4af <idleCommon()+0x1d>
c001c4ae:	fb                   	sti    
c001c4af:	83 c4 0c             	add    esp,0xc
c001c4b2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c4b4 <LinkedList<UnixFile>::~LinkedList()>:
c001c4b4:	90                   	nop
c001c4b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c4b6 <LinkedList<UnixFile>::LinkedList()>:
c001c4b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4ba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c4c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4c4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4cf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c4d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c4e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4ef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c4f6:	90                   	nop
c001c4f7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c4f8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c4f8:	83 ec 0c             	sub    esp,0xc
c001c4fb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c500:	75 10                	jne    c001c512 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c502:	83 ec 0c             	sub    esp,0xc
c001c505:	68 4c d9 01 c0       	push   0xc001d94c
c001c50a:	e8 80 40 ff ff       	call   c001058f <KePanic(char const*)>
c001c50f:	83 c4 10             	add    esp,0x10
c001c512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c516:	8b 00                	mov    eax,DWORD PTR [eax]
c001c518:	85 c0                	test   eax,eax
c001c51a:	74 34                	je     c001c550 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c51c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c520:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c523:	85 c0                	test   eax,eax
c001c525:	74 29                	je     c001c550 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c527:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c52b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c52e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c532:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c539:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c53d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c544:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c547:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c54e:	eb 65                	jmp    c001c5b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c554:	8b 00                	mov    eax,DWORD PTR [eax]
c001c556:	85 c0                	test   eax,eax
c001c558:	75 4b                	jne    c001c5a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c55a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c55e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c561:	85 c0                	test   eax,eax
c001c563:	75 40                	jne    c001c5a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c569:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c56d:	89 10                	mov    DWORD PTR [eax],edx
c001c56f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c573:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c577:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c57a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c57e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c581:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c58c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c58f:	85 c0                	test   eax,eax
c001c591:	74 22                	je     c001c5b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c593:	83 ec 0c             	sub    esp,0xc
c001c596:	68 6e d9 01 c0       	push   0xc001d96e
c001c59b:	e8 ef 3f ff ff       	call   c001058f <KePanic(char const*)>
c001c5a0:	83 c4 10             	add    esp,0x10
c001c5a3:	eb 10                	jmp    c001c5b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c5a5:	83 ec 0c             	sub    esp,0xc
c001c5a8:	68 78 d9 01 c0       	push   0xc001d978
c001c5ad:	e8 dd 3f ff ff       	call   c001058f <KePanic(char const*)>
c001c5b2:	83 c4 10             	add    esp,0x10
c001c5b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5b9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5bc:	8d 50 01             	lea    edx,[eax+0x1]
c001c5bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5c3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c5c6:	90                   	nop
c001c5c7:	83 c4 0c             	add    esp,0xc
c001c5ca:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c5cc <LinkedList<UnixFile>::getFirstElement()>:
c001c5cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5d2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c5d4 <LinkedList<UnixFile>::removeFirst()>:
c001c5d4:	83 ec 0c             	sub    esp,0xc
c001c5d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5db:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5dd:	85 c0                	test   eax,eax
c001c5df:	75 12                	jne    c001c5f3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c5e1:	83 ec 0c             	sub    esp,0xc
c001c5e4:	68 84 d9 01 c0       	push   0xc001d984
c001c5e9:	e8 a1 3f ff ff       	call   c001058f <KePanic(char const*)>
c001c5ee:	83 c4 10             	add    esp,0x10
c001c5f1:	eb 7e                	jmp    c001c671 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c5f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c5fa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5fd:	85 c0                	test   eax,eax
c001c5ff:	74 10                	je     c001c611 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c601:	83 ec 0c             	sub    esp,0xc
c001c604:	68 cf d9 01 c0       	push   0xc001d9cf
c001c609:	e8 81 3f ff ff       	call   c001058f <KePanic(char const*)>
c001c60e:	83 c4 10             	add    esp,0x10
c001c611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c615:	8b 00                	mov    eax,DWORD PTR [eax]
c001c617:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c61a:	85 c0                	test   eax,eax
c001c61c:	75 33                	jne    c001c651 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c61e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c62c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c637:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c63a:	83 f8 01             	cmp    eax,0x1
c001c63d:	74 21                	je     c001c660 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c63f:	83 ec 0c             	sub    esp,0xc
c001c642:	68 a8 d9 01 c0       	push   0xc001d9a8
c001c647:	e8 43 3f ff ff       	call   c001058f <KePanic(char const*)>
c001c64c:	83 c4 10             	add    esp,0x10
c001c64f:	eb 0f                	jmp    c001c660 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c655:	8b 00                	mov    eax,DWORD PTR [eax]
c001c657:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c65a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c65e:	89 10                	mov    DWORD PTR [eax],edx
c001c660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c664:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c667:	8d 50 ff             	lea    edx,[eax-0x1]
c001c66a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c66e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c671:	83 c4 0c             	add    esp,0xc
c001c674:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c676 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c676:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c67a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c67d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c67e <DriverlessDevice::~DriverlessDevice()>:
c001c67e:	ba 1c e0 01 c0       	mov    edx,0xc001e01c
c001c683:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c687:	89 10                	mov    DWORD PTR [eax],edx
c001c689:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c68d:	50                   	push   eax
c001c68e:	e8 db f5 fe ff       	call   c000bc6e <Device::~Device()>
c001c693:	83 c4 04             	add    esp,0x4
c001c696:	90                   	nop
c001c697:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c698 <DriverlessDevice::~DriverlessDevice()>:
c001c698:	83 ec 0c             	sub    esp,0xc
c001c69b:	83 ec 0c             	sub    esp,0xc
c001c69e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6a2:	e8 d7 ff ff ff       	call   c001c67e <DriverlessDevice::~DriverlessDevice()>
c001c6a7:	83 c4 10             	add    esp,0x10
c001c6aa:	83 ec 08             	sub    esp,0x8
c001c6ad:	68 58 01 00 00       	push   0x158
c001c6b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6b6:	e8 7b e1 fe ff       	call   c000a836 <operator delete(void*, unsigned long)>
c001c6bb:	83 c4 10             	add    esp,0x10
c001c6be:	83 c4 0c             	add    esp,0xc
c001c6c1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c6c2 <LinkedList<Device>::addElement(Device*)>:
c001c6c2:	83 ec 0c             	sub    esp,0xc
c001c6c5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c6ca:	75 10                	jne    c001c6dc <LinkedList<Device>::addElement(Device*)+0x1a>
c001c6cc:	83 ec 0c             	sub    esp,0xc
c001c6cf:	68 4c d9 01 c0       	push   0xc001d94c
c001c6d4:	e8 b6 3e ff ff       	call   c001058f <KePanic(char const*)>
c001c6d9:	83 c4 10             	add    esp,0x10
c001c6dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6e2:	85 c0                	test   eax,eax
c001c6e4:	74 3a                	je     c001c720 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6ed:	85 c0                	test   eax,eax
c001c6ef:	74 2f                	je     c001c720 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c6f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6f5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c6fc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c706:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c70a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c70d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c711:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c714:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c71e:	eb 68                	jmp    c001c788 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c724:	8b 00                	mov    eax,DWORD PTR [eax]
c001c726:	85 c0                	test   eax,eax
c001c728:	75 4e                	jne    c001c778 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c72a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c72e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c731:	85 c0                	test   eax,eax
c001c733:	75 43                	jne    c001c778 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c739:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c73d:	89 10                	mov    DWORD PTR [eax],edx
c001c73f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c743:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c747:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c74a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c74e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c751:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c75b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c75f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c762:	85 c0                	test   eax,eax
c001c764:	74 22                	je     c001c788 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c766:	83 ec 0c             	sub    esp,0xc
c001c769:	68 6e d9 01 c0       	push   0xc001d96e
c001c76e:	e8 1c 3e ff ff       	call   c001058f <KePanic(char const*)>
c001c773:	83 c4 10             	add    esp,0x10
c001c776:	eb 10                	jmp    c001c788 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c778:	83 ec 0c             	sub    esp,0xc
c001c77b:	68 78 d9 01 c0       	push   0xc001d978
c001c780:	e8 0a 3e ff ff       	call   c001058f <KePanic(char const*)>
c001c785:	83 c4 10             	add    esp,0x10
c001c788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c78c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c78f:	8d 50 01             	lea    edx,[eax+0x1]
c001c792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c796:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c799:	90                   	nop
c001c79a:	83 c4 0c             	add    esp,0xc
c001c79d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c79e <LinkedList<Device>::LinkedList()>:
c001c79e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c7b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7b7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c7be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c7c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c7d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7d7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c7de:	90                   	nop
c001c7df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c7e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c7e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7e6:	85 c0                	test   eax,eax
c001c7e8:	75 0e                	jne    c001c7f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c7ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7f1:	85 c0                	test   eax,eax
c001c7f3:	75 03                	jne    c001c7f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c7f5:	b0 01                	mov    al,0x1
c001c7f7:	c3                   	ret    
c001c7f8:	b0 00                	mov    al,0x0
c001c7fa:	90                   	nop
c001c7fb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c7fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c800:	8b 00                	mov    eax,DWORD PTR [eax]
c001c802:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c804 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c804:	83 ec 0c             	sub    esp,0xc
c001c807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c80b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c80d:	85 c0                	test   eax,eax
c001c80f:	75 17                	jne    c001c828 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c811:	83 ec 0c             	sub    esp,0xc
c001c814:	68 84 d9 01 c0       	push   0xc001d984
c001c819:	e8 71 3d ff ff       	call   c001058f <KePanic(char const*)>
c001c81e:	83 c4 10             	add    esp,0x10
c001c821:	e9 92 00 00 00       	jmp    c001c8b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c826:	66 90                	xchg   ax,ax
c001c828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c82c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c82f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c832:	85 c0                	test   eax,eax
c001c834:	0f 95 c0             	setne  al
c001c837:	84 c0                	test   al,al
c001c839:	74 11                	je     c001c84c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c83b:	83 ec 0c             	sub    esp,0xc
c001c83e:	68 cf d9 01 c0       	push   0xc001d9cf
c001c843:	e8 47 3d ff ff       	call   c001058f <KePanic(char const*)>
c001c848:	83 c4 10             	add    esp,0x10
c001c84b:	90                   	nop
c001c84c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c850:	8b 00                	mov    eax,DWORD PTR [eax]
c001c852:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c855:	85 c0                	test   eax,eax
c001c857:	0f 94 c0             	sete   al
c001c85a:	84 c0                	test   al,al
c001c85c:	74 36                	je     c001c894 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c85e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c862:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c86c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c877:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c87a:	83 f8 01             	cmp    eax,0x1
c001c87d:	74 25                	je     c001c8a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c87f:	83 ec 0c             	sub    esp,0xc
c001c882:	68 a8 d9 01 c0       	push   0xc001d9a8
c001c887:	e8 03 3d ff ff       	call   c001058f <KePanic(char const*)>
c001c88c:	83 c4 10             	add    esp,0x10
c001c88f:	eb 13                	jmp    c001c8a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c891:	8d 76 00             	lea    esi,[esi+0x0]
c001c894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c898:	8b 00                	mov    eax,DWORD PTR [eax]
c001c89a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c89d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8a1:	89 10                	mov    DWORD PTR [eax],edx
c001c8a3:	90                   	nop
c001c8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c8ab:	8d 50 ff             	lea    edx,[eax-0x1]
c001c8ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8b2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c8b5:	8d 76 00             	lea    esi,[esi+0x0]
c001c8b8:	83 c4 0c             	add    esp,0xc
c001c8bb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c8bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c8bc:	83 ec 0c             	sub    esp,0xc
c001c8bf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c8c4:	75 12                	jne    c001c8d8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c8c6:	83 ec 0c             	sub    esp,0xc
c001c8c9:	68 4c d9 01 c0       	push   0xc001d94c
c001c8ce:	e8 bc 3c ff ff       	call   c001058f <KePanic(char const*)>
c001c8d3:	83 c4 10             	add    esp,0x10
c001c8d6:	66 90                	xchg   ax,ax
c001c8d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8dc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8de:	85 c0                	test   eax,eax
c001c8e0:	74 36                	je     c001c918 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c8e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8e9:	85 c0                	test   eax,eax
c001c8eb:	74 2b                	je     c001c918 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c8ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8f8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8ff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c903:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c90a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c90d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c914:	eb 6a                	jmp    c001c980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c916:	66 90                	xchg   ax,ax
c001c918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c91c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c91e:	85 c0                	test   eax,eax
c001c920:	75 4e                	jne    c001c970 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c926:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c929:	85 c0                	test   eax,eax
c001c92b:	75 43                	jne    c001c970 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c92d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c931:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c935:	89 10                	mov    DWORD PTR [eax],edx
c001c937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c93b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c93f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c946:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c949:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c954:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c957:	85 c0                	test   eax,eax
c001c959:	74 25                	je     c001c980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c95b:	83 ec 0c             	sub    esp,0xc
c001c95e:	68 6e d9 01 c0       	push   0xc001d96e
c001c963:	e8 27 3c ff ff       	call   c001058f <KePanic(char const*)>
c001c968:	83 c4 10             	add    esp,0x10
c001c96b:	eb 13                	jmp    c001c980 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c96d:	8d 76 00             	lea    esi,[esi+0x0]
c001c970:	83 ec 0c             	sub    esp,0xc
c001c973:	68 78 d9 01 c0       	push   0xc001d978
c001c978:	e8 12 3c ff ff       	call   c001058f <KePanic(char const*)>
c001c97d:	83 c4 10             	add    esp,0x10
c001c980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c984:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c987:	8d 50 01             	lea    edx,[eax+0x1]
c001c98a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c98e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c991:	90                   	nop
c001c992:	83 c4 0c             	add    esp,0xc
c001c995:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c998 <ACPI::~ACPI()>:
c001c998:	83 ec 0c             	sub    esp,0xc
c001c99b:	ba 84 e5 01 c0       	mov    edx,0xc001e584
c001c9a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9a4:	89 10                	mov    DWORD PTR [eax],edx
c001c9a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9aa:	83 ec 0c             	sub    esp,0xc
c001c9ad:	50                   	push   eax
c001c9ae:	e8 bb f2 fe ff       	call   c000bc6e <Device::~Device()>
c001c9b3:	83 c4 10             	add    esp,0x10
c001c9b6:	90                   	nop
c001c9b7:	83 c4 0c             	add    esp,0xc
c001c9ba:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c9bc <ACPI::~ACPI()>:
c001c9bc:	83 ec 0c             	sub    esp,0xc
c001c9bf:	83 ec 0c             	sub    esp,0xc
c001c9c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9c6:	e8 cd ff ff ff       	call   c001c998 <ACPI::~ACPI()>
c001c9cb:	83 c4 10             	add    esp,0x10
c001c9ce:	83 ec 08             	sub    esp,0x8
c001c9d1:	68 64 12 00 00       	push   0x1264
c001c9d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9da:	e8 57 de fe ff       	call   c000a836 <operator delete(void*, unsigned long)>
c001c9df:	83 c4 10             	add    esp,0x10
c001c9e2:	83 c4 0c             	add    esp,0xc
c001c9e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c9e8 <LinkedList<Device>::~LinkedList()>:
c001c9e8:	90                   	nop
c001c9e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c9ec <LinkedList<Device>::isEmpty()>:
c001c9ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9f2:	85 c0                	test   eax,eax
c001c9f4:	75 0e                	jne    c001ca04 <LinkedList<Device>::isEmpty()+0x18>
c001c9f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c9fd:	85 c0                	test   eax,eax
c001c9ff:	75 03                	jne    c001ca04 <LinkedList<Device>::isEmpty()+0x18>
c001ca01:	b0 01                	mov    al,0x1
c001ca03:	c3                   	ret    
c001ca04:	b0 00                	mov    al,0x0
c001ca06:	90                   	nop
c001ca07:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ca08 <LinkedList<Device>::getFirstElement()>:
c001ca08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca0c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca0e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ca10 <LinkedList<Device>::removeFirst()>:
c001ca10:	83 ec 0c             	sub    esp,0xc
c001ca13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca17:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca19:	85 c0                	test   eax,eax
c001ca1b:	75 17                	jne    c001ca34 <LinkedList<Device>::removeFirst()+0x24>
c001ca1d:	83 ec 0c             	sub    esp,0xc
c001ca20:	68 84 d9 01 c0       	push   0xc001d984
c001ca25:	e8 65 3b ff ff       	call   c001058f <KePanic(char const*)>
c001ca2a:	83 c4 10             	add    esp,0x10
c001ca2d:	e9 92 00 00 00       	jmp    c001cac4 <LinkedList<Device>::removeFirst()+0xb4>
c001ca32:	66 90                	xchg   ax,ax
c001ca34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ca3b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ca41:	85 c0                	test   eax,eax
c001ca43:	74 13                	je     c001ca58 <LinkedList<Device>::removeFirst()+0x48>
c001ca45:	83 ec 0c             	sub    esp,0xc
c001ca48:	68 cf d9 01 c0       	push   0xc001d9cf
c001ca4d:	e8 3d 3b ff ff       	call   c001058f <KePanic(char const*)>
c001ca52:	83 c4 10             	add    esp,0x10
c001ca55:	8d 76 00             	lea    esi,[esi+0x0]
c001ca58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca5c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca5e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ca64:	85 c0                	test   eax,eax
c001ca66:	75 34                	jne    c001ca9c <LinkedList<Device>::removeFirst()+0x8c>
c001ca68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca6c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ca72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca76:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca81:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ca84:	83 f8 01             	cmp    eax,0x1
c001ca87:	74 27                	je     c001cab0 <LinkedList<Device>::removeFirst()+0xa0>
c001ca89:	83 ec 0c             	sub    esp,0xc
c001ca8c:	68 a8 d9 01 c0       	push   0xc001d9a8
c001ca91:	e8 f9 3a ff ff       	call   c001058f <KePanic(char const*)>
c001ca96:	83 c4 10             	add    esp,0x10
c001ca99:	eb 15                	jmp    c001cab0 <LinkedList<Device>::removeFirst()+0xa0>
c001ca9b:	90                   	nop
c001ca9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caa0:	8b 00                	mov    eax,DWORD PTR [eax]
c001caa2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001caa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caac:	89 10                	mov    DWORD PTR [eax],edx
c001caae:	66 90                	xchg   ax,ax
c001cab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cab4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001cab7:	8d 50 ff             	lea    edx,[eax-0x1]
c001caba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cabe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cac1:	8d 76 00             	lea    esi,[esi+0x0]
c001cac4:	83 c4 0c             	add    esp,0xc
c001cac7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001cac8 <CPU::~CPU()>:
c001cac8:	83 ec 0c             	sub    esp,0xc
c001cacb:	ba 20 e7 01 c0       	mov    edx,0xc001e720
c001cad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cad4:	89 10                	mov    DWORD PTR [eax],edx
c001cad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cada:	83 ec 0c             	sub    esp,0xc
c001cadd:	50                   	push   eax
c001cade:	e8 8b f1 fe ff       	call   c000bc6e <Device::~Device()>
c001cae3:	83 c4 10             	add    esp,0x10
c001cae6:	90                   	nop
c001cae7:	83 c4 0c             	add    esp,0xc
c001caea:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001caec <CPU::~CPU()>:
c001caec:	83 ec 0c             	sub    esp,0xc
c001caef:	83 ec 0c             	sub    esp,0xc
c001caf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001caf6:	e8 cd ff ff ff       	call   c001cac8 <CPU::~CPU()>
c001cafb:	83 c4 10             	add    esp,0x10
c001cafe:	83 ec 08             	sub    esp,0x8
c001cb01:	68 94 11 00 00       	push   0x1194
c001cb06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb0a:	e8 27 dd fe ff       	call   c000a836 <operator delete(void*, unsigned long)>
c001cb0f:	83 c4 10             	add    esp,0x10
c001cb12:	83 c4 0c             	add    esp,0xc
c001cb15:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001cb18 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001cb18:	90                   	nop
c001cb19:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001cb1c <ThreadControlBlock::ThreadControlBlock()>:
c001cb1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb20:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001cb27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb2b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001cb32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb36:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001cb3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb41:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001cb48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb4c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001cb53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb57:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001cb5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb5f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001cb63:	90                   	nop
c001cb64:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001cb68 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001cb68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb6c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cb72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb76:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cb7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb81:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cb88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb8c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cb92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb96:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cb9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cba1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cba8:	90                   	nop
c001cba9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001cbac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001cbac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cbb0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cbb3:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001cbb4 <PCI::~PCI()>:
c001cbb4:	83 ec 0c             	sub    esp,0xc
c001cbb7:	ba 60 f2 01 c0       	mov    edx,0xc001f260
c001cbbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbc0:	89 10                	mov    DWORD PTR [eax],edx
c001cbc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbc6:	83 ec 0c             	sub    esp,0xc
c001cbc9:	50                   	push   eax
c001cbca:	e8 29 eb fe ff       	call   c000b6f8 <Bus::~Bus()>
c001cbcf:	83 c4 10             	add    esp,0x10
c001cbd2:	90                   	nop
c001cbd3:	83 c4 0c             	add    esp,0xc
c001cbd6:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001cbd8 <PCI::~PCI()>:
c001cbd8:	83 ec 0c             	sub    esp,0xc
c001cbdb:	83 ec 0c             	sub    esp,0xc
c001cbde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbe2:	e8 cd ff ff ff       	call   c001cbb4 <PCI::~PCI()>
c001cbe7:	83 c4 10             	add    esp,0x10
c001cbea:	83 ec 08             	sub    esp,0x8
c001cbed:	68 5c 01 00 00       	push   0x15c
c001cbf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbf6:	e8 3b dc fe ff       	call   c000a836 <operator delete(void*, unsigned long)>
c001cbfb:	83 c4 10             	add    esp,0x10
c001cbfe:	83 c4 0c             	add    esp,0xc
c001cc01:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001cc02 <IDE::~IDE()>:
c001cc02:	83 ec 0c             	sub    esp,0xc
c001cc05:	ba 14 f3 01 c0       	mov    edx,0xc001f314
c001cc0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc0e:	89 10                	mov    DWORD PTR [eax],edx
c001cc10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc14:	83 ec 0c             	sub    esp,0xc
c001cc17:	50                   	push   eax
c001cc18:	e8 cb f4 fe ff       	call   c000c0e8 <HardDiskController::~HardDiskController()>
c001cc1d:	83 c4 10             	add    esp,0x10
c001cc20:	90                   	nop
c001cc21:	83 c4 0c             	add    esp,0xc
c001cc24:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001cc26 <IDE::~IDE()>:
c001cc26:	83 ec 0c             	sub    esp,0xc
c001cc29:	83 ec 0c             	sub    esp,0xc
c001cc2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc30:	e8 cd ff ff ff       	call   c001cc02 <IDE::~IDE()>
c001cc35:	83 c4 10             	add    esp,0x10
c001cc38:	83 ec 08             	sub    esp,0x8
c001cc3b:	68 70 02 00 00       	push   0x270
c001cc40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc44:	e8 ed db fe ff       	call   c000a836 <operator delete(void*, unsigned long)>
c001cc49:	83 c4 10             	add    esp,0x10
c001cc4c:	83 c4 0c             	add    esp,0xc
c001cc4f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001cc50 <SATABus::~SATABus()>:
c001cc50:	83 ec 0c             	sub    esp,0xc
c001cc53:	ba 64 f3 01 c0       	mov    edx,0xc001f364
c001cc58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc5c:	89 10                	mov    DWORD PTR [eax],edx
c001cc5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc62:	83 ec 0c             	sub    esp,0xc
c001cc65:	50                   	push   eax
c001cc66:	e8 7d f4 fe ff       	call   c000c0e8 <HardDiskController::~HardDiskController()>
c001cc6b:	83 c4 10             	add    esp,0x10
c001cc6e:	90                   	nop
c001cc6f:	83 c4 0c             	add    esp,0xc
c001cc72:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001cc74 <SATABus::~SATABus()>:
c001cc74:	83 ec 0c             	sub    esp,0xc
c001cc77:	83 ec 0c             	sub    esp,0xc
c001cc7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc7e:	e8 cd ff ff ff       	call   c001cc50 <SATABus::~SATABus()>
c001cc83:	83 c4 10             	add    esp,0x10
c001cc86:	83 ec 08             	sub    esp,0x8
c001cc89:	68 64 01 00 00       	push   0x164
c001cc8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc92:	e8 9f db fe ff       	call   c000a836 <operator delete(void*, unsigned long)>
c001cc97:	83 c4 10             	add    esp,0x10
c001cc9a:	83 c4 0c             	add    esp,0xc
c001cc9d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001cc9e <ATA::~ATA()>:
c001cc9e:	83 ec 0c             	sub    esp,0xc
c001cca1:	ba a4 f3 01 c0       	mov    edx,0xc001f3a4
c001cca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccaa:	89 10                	mov    DWORD PTR [eax],edx
c001ccac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccb0:	83 ec 0c             	sub    esp,0xc
c001ccb3:	50                   	push   eax
c001ccb4:	e8 11 f5 fe ff       	call   c000c1ca <PhysicalDisk::~PhysicalDisk()>
c001ccb9:	83 c4 10             	add    esp,0x10
c001ccbc:	90                   	nop
c001ccbd:	83 c4 0c             	add    esp,0xc
c001ccc0:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ccc2 <ATA::~ATA()>:
c001ccc2:	83 ec 0c             	sub    esp,0xc
c001ccc5:	83 ec 0c             	sub    esp,0xc
c001ccc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cccc:	e8 cd ff ff ff       	call   c001cc9e <ATA::~ATA()>
c001ccd1:	83 c4 10             	add    esp,0x10
c001ccd4:	83 ec 08             	sub    esp,0x8
c001ccd7:	68 7c 01 00 00       	push   0x17c
c001ccdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cce0:	e8 51 db fe ff       	call   c000a836 <operator delete(void*, unsigned long)>
c001cce5:	83 c4 10             	add    esp,0x10
c001cce8:	83 c4 0c             	add    esp,0xc
c001cceb:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001ccec <ATAPI::~ATAPI()>:
c001ccec:	83 ec 0c             	sub    esp,0xc
c001ccef:	ba ec f3 01 c0       	mov    edx,0xc001f3ec
c001ccf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccf8:	89 10                	mov    DWORD PTR [eax],edx
c001ccfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccfe:	83 ec 0c             	sub    esp,0xc
c001cd01:	50                   	push   eax
c001cd02:	e8 c3 f4 fe ff       	call   c000c1ca <PhysicalDisk::~PhysicalDisk()>
c001cd07:	83 c4 10             	add    esp,0x10
c001cd0a:	90                   	nop
c001cd0b:	83 c4 0c             	add    esp,0xc
c001cd0e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001cd10 <ATAPI::~ATAPI()>:
c001cd10:	83 ec 0c             	sub    esp,0xc
c001cd13:	83 ec 0c             	sub    esp,0xc
c001cd16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd1a:	e8 cd ff ff ff       	call   c001ccec <ATAPI::~ATAPI()>
c001cd1f:	83 c4 10             	add    esp,0x10
c001cd22:	83 ec 08             	sub    esp,0x8
c001cd25:	68 84 01 00 00       	push   0x184
c001cd2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd2e:	e8 03 db fe ff       	call   c000a836 <operator delete(void*, unsigned long)>
c001cd33:	83 c4 10             	add    esp,0x10
c001cd36:	83 c4 0c             	add    esp,0xc
c001cd39:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001cd3a <SATA::~SATA()>:
c001cd3a:	83 ec 0c             	sub    esp,0xc
c001cd3d:	ba a0 f4 01 c0       	mov    edx,0xc001f4a0
c001cd42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd46:	89 10                	mov    DWORD PTR [eax],edx
c001cd48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd4c:	83 ec 0c             	sub    esp,0xc
c001cd4f:	50                   	push   eax
c001cd50:	e8 75 f4 fe ff       	call   c000c1ca <PhysicalDisk::~PhysicalDisk()>
c001cd55:	83 c4 10             	add    esp,0x10
c001cd58:	90                   	nop
c001cd59:	83 c4 0c             	add    esp,0xc
c001cd5c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001cd5e <SATA::~SATA()>:
c001cd5e:	83 ec 0c             	sub    esp,0xc
c001cd61:	83 ec 0c             	sub    esp,0xc
c001cd64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd68:	e8 cd ff ff ff       	call   c001cd3a <SATA::~SATA()>
c001cd6d:	83 c4 10             	add    esp,0x10
c001cd70:	83 ec 08             	sub    esp,0x8
c001cd73:	68 7c 01 00 00       	push   0x17c
c001cd78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd7c:	e8 b5 da fe ff       	call   c000a836 <operator delete(void*, unsigned long)>
c001cd81:	83 c4 10             	add    esp,0x10
c001cd84:	83 c4 0c             	add    esp,0xc
c001cd87:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001cd88 <SATAPI::~SATAPI()>:
c001cd88:	83 ec 0c             	sub    esp,0xc
c001cd8b:	ba 30 f6 01 c0       	mov    edx,0xc001f630
c001cd90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd94:	89 10                	mov    DWORD PTR [eax],edx
c001cd96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd9a:	83 ec 0c             	sub    esp,0xc
c001cd9d:	50                   	push   eax
c001cd9e:	e8 27 f4 fe ff       	call   c000c1ca <PhysicalDisk::~PhysicalDisk()>
c001cda3:	83 c4 10             	add    esp,0x10
c001cda6:	90                   	nop
c001cda7:	83 c4 0c             	add    esp,0xc
c001cdaa:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001cdac <SATAPI::~SATAPI()>:
c001cdac:	83 ec 0c             	sub    esp,0xc
c001cdaf:	83 ec 0c             	sub    esp,0xc
c001cdb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdb6:	e8 cd ff ff ff       	call   c001cd88 <SATAPI::~SATAPI()>
c001cdbb:	83 c4 10             	add    esp,0x10
c001cdbe:	83 ec 08             	sub    esp,0x8
c001cdc1:	68 84 01 00 00       	push   0x184
c001cdc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdca:	e8 67 da fe ff       	call   c000a836 <operator delete(void*, unsigned long)>
c001cdcf:	83 c4 10             	add    esp,0x10
c001cdd2:	83 c4 0c             	add    esp,0xc
c001cdd5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001cdd6 <IOAPIC::~IOAPIC()>:
c001cdd6:	83 ec 0c             	sub    esp,0xc
c001cdd9:	ba 70 f6 01 c0       	mov    edx,0xc001f670
c001cdde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cde2:	89 10                	mov    DWORD PTR [eax],edx
c001cde4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cde8:	83 ec 0c             	sub    esp,0xc
c001cdeb:	50                   	push   eax
c001cdec:	e8 7d ee fe ff       	call   c000bc6e <Device::~Device()>
c001cdf1:	83 c4 10             	add    esp,0x10
c001cdf4:	90                   	nop
c001cdf5:	83 c4 0c             	add    esp,0xc
c001cdf8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001cdfa <IOAPIC::~IOAPIC()>:
c001cdfa:	83 ec 0c             	sub    esp,0xc
c001cdfd:	83 ec 0c             	sub    esp,0xc
c001ce00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce04:	e8 cd ff ff ff       	call   c001cdd6 <IOAPIC::~IOAPIC()>
c001ce09:	83 c4 10             	add    esp,0x10
c001ce0c:	83 ec 08             	sub    esp,0x8
c001ce0f:	68 68 01 00 00       	push   0x168
c001ce14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce18:	e8 19 da fe ff       	call   c000a836 <operator delete(void*, unsigned long)>
c001ce1d:	83 c4 10             	add    esp,0x10
c001ce20:	83 c4 0c             	add    esp,0xc
c001ce23:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001ce24 <APICTimer::~APICTimer()>:
c001ce24:	83 ec 0c             	sub    esp,0xc
c001ce27:	ba b8 f6 01 c0       	mov    edx,0xc001f6b8
c001ce2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce30:	89 10                	mov    DWORD PTR [eax],edx
c001ce32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce36:	83 ec 0c             	sub    esp,0xc
c001ce39:	50                   	push   eax
c001ce3a:	e8 2d 07 ff ff       	call   c000d56c <Timer::~Timer()>
c001ce3f:	83 c4 10             	add    esp,0x10
c001ce42:	90                   	nop
c001ce43:	83 c4 0c             	add    esp,0xc
c001ce46:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001ce48 <APICTimer::~APICTimer()>:
c001ce48:	83 ec 0c             	sub    esp,0xc
c001ce4b:	83 ec 0c             	sub    esp,0xc
c001ce4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce52:	e8 cd ff ff ff       	call   c001ce24 <APICTimer::~APICTimer()>
c001ce57:	83 c4 10             	add    esp,0x10
c001ce5a:	83 ec 08             	sub    esp,0x8
c001ce5d:	68 60 01 00 00       	push   0x160
c001ce62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce66:	e8 cb d9 fe ff       	call   c000a836 <operator delete(void*, unsigned long)>
c001ce6b:	83 c4 10             	add    esp,0x10
c001ce6e:	83 c4 0c             	add    esp,0xc
c001ce71:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ce74 <PIT::~PIT()>:
c001ce74:	83 ec 0c             	sub    esp,0xc
c001ce77:	ba 08 f7 01 c0       	mov    edx,0xc001f708
c001ce7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce80:	89 10                	mov    DWORD PTR [eax],edx
c001ce82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce86:	83 ec 0c             	sub    esp,0xc
c001ce89:	50                   	push   eax
c001ce8a:	e8 dd 06 ff ff       	call   c000d56c <Timer::~Timer()>
c001ce8f:	83 c4 10             	add    esp,0x10
c001ce92:	90                   	nop
c001ce93:	83 c4 0c             	add    esp,0xc
c001ce96:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001ce98 <PIT::~PIT()>:
c001ce98:	83 ec 0c             	sub    esp,0xc
c001ce9b:	83 ec 0c             	sub    esp,0xc
c001ce9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cea2:	e8 cd ff ff ff       	call   c001ce74 <PIT::~PIT()>
c001cea7:	83 c4 10             	add    esp,0x10
c001ceaa:	83 ec 08             	sub    esp,0x8
c001cead:	68 5c 01 00 00       	push   0x15c
c001ceb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ceb6:	e8 7b d9 fe ff       	call   c000a836 <operator delete(void*, unsigned long)>
c001cebb:	83 c4 10             	add    esp,0x10
c001cebe:	83 c4 0c             	add    esp,0xc
c001cec1:	c3                   	ret    
