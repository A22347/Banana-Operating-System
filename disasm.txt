
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 af 78 00 00       	call   c00078cf <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 88 14 02 c0       	mov    eax,0xc0021488
c0000025:	3d 88 14 02 c0       	cmp    eax,0xc0021488
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 88 14 02 c0       	push   0xc0021488
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 88 14 02 c0       	mov    eax,0xc0021488
c0000051:	2d 88 14 02 c0       	sub    eax,0xc0021488
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 88 14 02 c0       	push   0xc0021488
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 30 02 c0 00 	cmp    BYTE PTR ds:0xc00230c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 18 e5 01 c0       	mov    ebx,0xc001e518
c0000097:	81 eb 14 e5 01 c0    	sub    ebx,0xc001e514
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 14 e5 01 c0       	mov    esi,0xc001e514
c00000a6:	a1 c4 30 02 c0       	mov    eax,ds:0xc00230c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 30 02 c0       	mov    ds:0xc00230c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 30 02 c0       	mov    eax,ds:0xc00230c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 88 14 02 c0       	push   0xc0021488
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 30 02 c0 01 	mov    BYTE PTR ds:0xc00230c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 30 02 c0       	push   0xc00230c8
c0000108:	68 88 14 02 c0       	push   0xc0021488
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 b0 3b 01 00       	call   c0013e60 <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 06 a1 00 00       	call   c000a3ce <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 8e 3b 01 00       	call   c0013e60 <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 97 40 01 00       	call   c0014388 <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 e6 46 01 00       	call   c00149e0 <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 c0 3e 02 c0 	lgdtd  ds:0xc0023ec0
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 04 00 01 00       	jmp    c0010386 <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 e0 30 02 c0       	mov    ds:0xc00230e0,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 e0 30 02 c0    	mov    DWORD PTR ds:0xc00230e0,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d e0 30 02 c0    	mov    ebx,DWORD PTR ds:0xc00230e0
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 20 e5 01 c0 02 	test   BYTE PTR [edx-0x3ffe1ae0],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 20 e5 01 c0 01 	test   BYTE PTR [edx-0x3ffe1ae0],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 20 e5 01 c0 08 	test   BYTE PTR [edx-0x3ffe1ae0],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 20 e5 01 c0 04 	test   BYTE PTR [ebx-0x3ffe1ae0],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 20 e5 01 c0 01 	test   BYTE PTR [edx-0x3ffe1ae0],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d 00 31 02 c0    	mov    ecx,DWORD PTR ds:0xc0023100
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d 00 31 02 c0    	mov    DWORD PTR ds:0xc0023100,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 04 31 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcefc]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 04 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcefc],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d 00 31 02 c0    	mov    DWORD PTR ds:0xc0023100,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 2c 31 02 c0    	cmp    DWORD PTR ds:0xc002312c,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d 3c 31 02 c0    	mov    ecx,DWORD PTR ds:0xc002313c
c0000d3d:	c7 42 0c 34 31 02 c0 	mov    DWORD PTR [edx+0xc],0xc0023134
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 00 31 02 c0 02 	test   BYTE PTR ds:0xc0023100,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 2e 69 00 00       	call   c000774c <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 70 68 00 00       	call   c000774c <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 5a 68 00 00       	call   c000774c <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 36 68 00 00       	call   c000774c <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d 00 31 02 c0    	mov    edi,DWORD PTR ds:0xc0023100
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 04 31 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcefc]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 04 31 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcefc],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 34 31 02 c0 	lea    edx,[eax*8-0x3ffdcecc]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 00 31 02 c0       	mov    eax,0xc0023100
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d 40 31 02 c0    	mov    ebx,DWORD PTR ds:0xc0023140
c00010bf:	81 fb 34 31 02 c0    	cmp    ebx,0xc0023134
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d 34 31 02 c0       	cmp    eax,0xc0023134
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d 30 31 02 c0    	cmp    DWORD PTR ds:0xc0023130,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 3c 31 02 c0       	mov    ds:0xc002313c,eax
c00010fb:	a3 40 31 02 c0       	mov    ds:0xc0023140,eax
c0001100:	a3 30 31 02 c0       	mov    ds:0xc0023130,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 34 31 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023134
c000110e:	c7 40 0c 34 31 02 c0 	mov    DWORD PTR [eax+0xc],0xc0023134
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 40 31 02 c0       	mov    ds:0xc0023140,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 34 31 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023134
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 f8 30 02 c0 	lea    ebp,[edx*4-0x3ffdcf08]
c000115f:	8b 14 95 00 31 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf00]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 00 31 02 c0 	lea    ecx,[edx*4-0x3ffdcf00]
c000117a:	8b 14 95 00 31 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf00]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd 34 34 02 c0 	or     DWORD PTR [edi*4-0x3ffdcbcc],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 34 31 02 c0 	lea    eax,[eax*8-0x3ffdcecc]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,ecx
c0001234:	89 0d 40 31 02 c0    	mov    DWORD PTR ds:0xc0023140,ecx
c000123a:	c7 41 08 34 31 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0023134
c0001241:	c7 41 0c 34 31 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0023134
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd 2c 31 02 c0 	lea    edx,[ecx*8-0x3ffdced4]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d 34 34 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdcbcc]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d 34 34 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdcbcc]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 2c 31 02 c0 	lea    edx,[eax*4-0x3ffdced4]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d 34 34 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcbcc],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,edi
c0001307:	89 3d 40 31 02 c0    	mov    DWORD PTR ds:0xc0023140,edi
c000130d:	c7 47 08 34 31 02 c0 	mov    DWORD PTR [edi+0x8],0xc0023134
c0001314:	c7 47 0c 34 31 02 c0 	mov    DWORD PTR [edi+0xc],0xc0023134
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d 30 31 02 c0    	mov    DWORD PTR ds:0xc0023130,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 2c 31 02 c0       	mov    eax,ds:0xc002312c
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba 00 31 02 c0       	mov    edx,0xc0023100
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 00 31 02 c0       	mov    eax,0xc0023100
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d 54 34 02 c0    	mov    ebx,DWORD PTR ds:0xc0023454
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 54 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023454,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d 54 34 02 c0    	mov    DWORD PTR ds:0xc0023454,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 2c 31 02 c0    	cmp    DWORD PTR ds:0xc002312c,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 00 31 02 c0       	mov    eax,0xc0023100
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 5c 34 02 c0    	push   DWORD PTR ds:0xc002345c
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 00 31 02 c0       	mov    eax,0xc0023100
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 5c 34 02 c0       	mov    eax,ds:0xc002345c
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d 2c 31 02 c0 00 	cmp    DWORD PTR ds:0xc002312c,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 00 31 02 c0       	mov    eax,0xc0023100
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 2c 31 02 c0       	mov    eax,ds:0xc002312c
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 04 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcefc]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 34 31 02 c0       	mov    eax,0xc0023134
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d 2c 34 02 c0       	cmp    eax,0xc002342c
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 68 34 02 c0       	mov    eax,ds:0xc0023468
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 50 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023450
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 64 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023464
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 74 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023474
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 24 e6 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe19dc]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 00 31 02 c0       	mov    eax,ds:0xc0023100
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 00 31 02 c0       	mov    ds:0xc0023100,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d 44 34 02 c0    	mov    DWORD PTR ds:0xc0023444,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d 48 34 02 c0    	mov    DWORD PTR ds:0xc0023448,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d 4c 34 02 c0    	mov    DWORD PTR ds:0xc002344c,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 54 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023454,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 c0 72 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8d40]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 c2 60 01 00       	jmp    c0017dac <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 c0 72 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8d40]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 f0 60 01 00       	jmp    c0017df0 <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 c0 72 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8d40]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 15 61 01 00       	jmp    c0017e34 <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 80 e7 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe1880]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 80 e7 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe1880]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba ac 07 02 c0       	mov    edx,0xc00207ac
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba 3c e6 01 c0       	mov    edx,0xc001e63c
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 a0 34 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdcb60]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 80 34 02 c0    	mov    ax,ds:0xc0023480
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 80 34 02 c0    	mov    ds:0xc0023480,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 42 e6 01 c0       	mov    eax,0xc001e642
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad 00 e7 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe1900]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 4b e6 01 c0       	mov    eax,0xc001e64b
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 80 e7 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe1880]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 a0 34 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcb60]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 a0 34 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcb60],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 d0 e6 01 c0       	mov    eax,0xc001e6d0
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 a0 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcb60]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb c0 e6 01 c0       	mov    ebx,0xc001e6c0
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba a0 e6 01 c0       	mov    edx,0xc001e6a0
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba b0 e6 01 c0       	mov    edx,0xc001e6b0
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba 52 e6 01 c0       	mov    edx,0xc001e652
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba 5e e6 01 c0       	mov    edx,0xc001e65e
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba 72 e6 01 c0       	mov    edx,0xc001e672
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 fa 1d 00 00       	call   c0007875 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 f2 1d 00 00       	call   c0007885 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c a0 ea 01 c0 	mov    DWORD PTR [esp+0xc],0xc001eaa0
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 a0 ea 01 c0 	mov    DWORD PTR [esp+0x10],0xc001eaa0
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 a0 e8 01 c0       	mov    eax,0xc001e8a0
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 e0 e7 01 c0       	mov    eax,0xc001e7e0
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 a0 e7 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe1860]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bgrad_cache>:
c0005e15:	83 fa 0e             	cmp    edx,0xe
c0005e18:	77 16                	ja     c0005e30 <bgrad_cache+0x1b>
c0005e1a:	53                   	push   ebx
c0005e1b:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e1e:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e22:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e25:	42                   	inc    edx
c0005e26:	83 fa 0f             	cmp    edx,0xf
c0005e29:	75 f3                	jne    c0005e1e <bgrad_cache+0x9>
c0005e2b:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e2e:	5b                   	pop    ebx
c0005e2f:	c3                   	ret    
c0005e30:	c3                   	ret    

c0005e31 <ucscompare>:
c0005e31:	55                   	push   ebp
c0005e32:	57                   	push   edi
c0005e33:	89 c7                	mov    edi,eax
c0005e35:	56                   	push   esi
c0005e36:	89 d6                	mov    esi,edx
c0005e38:	53                   	push   ebx
c0005e39:	31 d2                	xor    edx,edx
c0005e3b:	83 ec 1c             	sub    esp,0x1c
c0005e3e:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e42:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e47:	c1 e3 08             	shl    ebx,0x8
c0005e4a:	09 c3                	or     ebx,eax
c0005e4c:	39 ca                	cmp    edx,ecx
c0005e4e:	7d 42                	jge    c0005e92 <ucscompare+0x61>
c0005e50:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e54:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e59:	c1 e0 08             	shl    eax,0x8
c0005e5c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e60:	09 e8                	or     eax,ebp
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	83 f8 3b             	cmp    eax,0x3b
c0005e69:	74 27                	je     c0005e92 <ucscompare+0x61>
c0005e6b:	83 ec 0c             	sub    esp,0xc
c0005e6e:	50                   	push   eax
c0005e6f:	e8 5c aa ff ff       	call   c00008d0 <tolower>
c0005e74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005e77:	89 c5                	mov    ebp,eax
c0005e79:	e8 52 aa ff ff       	call   c00008d0 <tolower>
c0005e7e:	83 c4 10             	add    esp,0x10
c0005e81:	39 c5                	cmp    ebp,eax
c0005e83:	75 20                	jne    c0005ea5 <ucscompare+0x74>
c0005e85:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005e89:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005e8d:	83 c2 02             	add    edx,0x2
c0005e90:	eb ac                	jmp    c0005e3e <ucscompare+0xd>
c0005e92:	85 db                	test   ebx,ebx
c0005e94:	0f 95 c2             	setne  dl
c0005e97:	31 c0                	xor    eax,eax
c0005e99:	83 fb 2f             	cmp    ebx,0x2f
c0005e9c:	0f 95 c0             	setne  al
c0005e9f:	21 d0                	and    eax,edx
c0005ea1:	f7 d8                	neg    eax
c0005ea3:	eb 03                	jmp    c0005ea8 <ucscompare+0x77>
c0005ea5:	83 c8 ff             	or     eax,0xffffffff
c0005ea8:	83 c4 1c             	add    esp,0x1c
c0005eab:	5b                   	pop    ebx
c0005eac:	5e                   	pop    esi
c0005ead:	5f                   	pop    edi
c0005eae:	5d                   	pop    ebp
c0005eaf:	c3                   	ret    

c0005eb0 <fncompare>:
c0005eb0:	55                   	push   ebp
c0005eb1:	57                   	push   edi
c0005eb2:	89 c7                	mov    edi,eax
c0005eb4:	56                   	push   esi
c0005eb5:	89 ce                	mov    esi,ecx
c0005eb7:	53                   	push   ebx
c0005eb8:	31 db                	xor    ebx,ebx
c0005eba:	83 ec 1c             	sub    esp,0x1c
c0005ebd:	39 d3                	cmp    ebx,edx
c0005ebf:	7d 43                	jge    c0005f04 <fncompare+0x54>
c0005ec1:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005ec5:	3c 3b                	cmp    al,0x3b
c0005ec7:	74 3b                	je     c0005f04 <fncompare+0x54>
c0005ec9:	3c 2e                	cmp    al,0x2e
c0005ecb:	75 0e                	jne    c0005edb <fncompare+0x2b>
c0005ecd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005ed0:	39 d9                	cmp    ecx,ebx
c0005ed2:	74 30                	je     c0005f04 <fncompare+0x54>
c0005ed4:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005ed9:	74 29                	je     c0005f04 <fncompare+0x54>
c0005edb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005edf:	83 ec 0c             	sub    esp,0xc
c0005ee2:	50                   	push   eax
c0005ee3:	e8 e8 a9 ff ff       	call   c00008d0 <tolower>
c0005ee8:	89 c5                	mov    ebp,eax
c0005eea:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005eee:	89 04 24             	mov    DWORD PTR [esp],eax
c0005ef1:	e8 da a9 ff ff       	call   c00008d0 <tolower>
c0005ef6:	83 c4 10             	add    esp,0x10
c0005ef9:	39 c5                	cmp    ebp,eax
c0005efb:	75 1d                	jne    c0005f1a <fncompare+0x6a>
c0005efd:	43                   	inc    ebx
c0005efe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f02:	eb b9                	jmp    c0005ebd <fncompare+0xd>
c0005f04:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f07:	84 d2                	test   dl,dl
c0005f09:	0f 95 c1             	setne  cl
c0005f0c:	31 c0                	xor    eax,eax
c0005f0e:	80 fa 2f             	cmp    dl,0x2f
c0005f11:	0f 95 c0             	setne  al
c0005f14:	21 c8                	and    eax,ecx
c0005f16:	f7 d8                	neg    eax
c0005f18:	eb 03                	jmp    c0005f1d <fncompare+0x6d>
c0005f1a:	83 c8 ff             	or     eax,0xffffffff
c0005f1d:	83 c4 1c             	add    esp,0x1c
c0005f20:	5b                   	pop    ebx
c0005f21:	5e                   	pop    esi
c0005f22:	5f                   	pop    edi
c0005f23:	5d                   	pop    ebp
c0005f24:	c3                   	ret    

c0005f25 <bclear_cache>:
c0005f25:	83 ec 18             	sub    esp,0x18
c0005f28:	68 a0 eb 01 c0       	push   0xc001eba0
c0005f2d:	e8 b2 27 01 00       	call   c00186e4 <iso_kprintf>
c0005f32:	83 c4 10             	add    esp,0x10
c0005f35:	31 c0                	xor    eax,eax
c0005f37:	8b 14 85 20 30 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcfe0]
c0005f3e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005f44:	8b 14 85 80 30 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcf80]
c0005f4b:	40                   	inc    eax
c0005f4c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005f52:	83 f8 10             	cmp    eax,0x10
c0005f55:	75 e0                	jne    c0005f37 <bclear_cache+0x12>
c0005f57:	83 c4 0c             	add    esp,0xc
c0005f5a:	c3                   	ret    

c0005f5b <bclear>:
c0005f5b:	eb c8                	jmp    c0005f25 <bclear_cache>

c0005f5d <iso_break_all>:
c0005f5d:	83 ec 18             	sub    esp,0x18
c0005f60:	68 ae eb 01 c0       	push   0xc001ebae
c0005f65:	e8 7a 27 01 00       	call   c00186e4 <iso_kprintf>
c0005f6a:	83 c4 10             	add    esp,0x10
c0005f6d:	31 c0                	xor    eax,eax
c0005f6f:	c7 80 d0 35 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdca30],0x1
c0005f79:	05 94 00 00 00       	add    eax,0x94
c0005f7e:	3d 40 09 00 00       	cmp    eax,0x940
c0005f83:	75 ea                	jne    c0005f6f <iso_break_all+0x12>
c0005f85:	83 c4 0c             	add    esp,0xc
c0005f88:	c3                   	ret    

c0005f89 <isoReadDiscSector>:
c0005f89:	83 ec 0c             	sub    esp,0xc
c0005f8c:	0f be 05 60 30 02 c0 	movsx  eax,BYTE PTR ds:0xc0023060
c0005f93:	50                   	push   eax
c0005f94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005fa0:	e8 e3 26 01 00       	call   c0018688 <isoReadDiscSectorHelper>
c0005fa5:	83 c4 1c             	add    esp,0x1c
c0005fa8:	c3                   	ret    

c0005fa9 <bread_cache>:
c0005fa9:	55                   	push   ebp
c0005faa:	57                   	push   edi
c0005fab:	89 d7                	mov    edi,edx
c0005fad:	56                   	push   esi
c0005fae:	ba 0f 00 00 00       	mov    edx,0xf
c0005fb3:	53                   	push   ebx
c0005fb4:	89 c6                	mov    esi,eax
c0005fb6:	83 ec 0c             	sub    esp,0xc
c0005fb9:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005fbc:	39 38                	cmp    DWORD PTR [eax],edi
c0005fbe:	74 3c                	je     c0005ffc <bread_cache+0x53>
c0005fc0:	4a                   	dec    edx
c0005fc1:	83 fa ff             	cmp    edx,0xffffffff
c0005fc4:	75 f3                	jne    c0005fb9 <bread_cache+0x10>
c0005fc6:	31 db                	xor    ebx,ebx
c0005fc8:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fcb:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fce:	74 08                	je     c0005fd8 <bread_cache+0x2f>
c0005fd0:	43                   	inc    ebx
c0005fd1:	83 fb 10             	cmp    ebx,0x10
c0005fd4:	75 f2                	jne    c0005fc8 <bread_cache+0x1f>
c0005fd6:	31 db                	xor    ebx,ebx
c0005fd8:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fdb:	50                   	push   eax
c0005fdc:	6a 01                	push   0x1
c0005fde:	57                   	push   edi
c0005fdf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fe2:	83 c0 04             	add    eax,0x4
c0005fe5:	50                   	push   eax
c0005fe6:	e8 9e ff ff ff       	call   c0005f89 <isoReadDiscSector>
c0005feb:	83 c4 10             	add    esp,0x10
c0005fee:	83 c9 ff             	or     ecx,0xffffffff
c0005ff1:	85 c0                	test   eax,eax
c0005ff3:	78 13                	js     c0006008 <bread_cache+0x5f>
c0005ff5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005ff8:	89 da                	mov    edx,ebx
c0005ffa:	89 38                	mov    DWORD PTR [eax],edi
c0005ffc:	89 f0                	mov    eax,esi
c0005ffe:	e8 12 fe ff ff       	call   c0005e15 <bgrad_cache>
c0006003:	b9 0f 00 00 00       	mov    ecx,0xf
c0006008:	83 c4 0c             	add    esp,0xc
c000600b:	89 c8                	mov    eax,ecx
c000600d:	5b                   	pop    ebx
c000600e:	5e                   	pop    esi
c000600f:	5f                   	pop    edi
c0006010:	5d                   	pop    ebp
c0006011:	c3                   	ret    

c0006012 <biread>:
c0006012:	89 c2                	mov    edx,eax
c0006014:	b8 80 30 02 c0       	mov    eax,0xc0023080
c0006019:	eb 8e                	jmp    c0005fa9 <bread_cache>

c000601b <bdread>:
c000601b:	89 c2                	mov    edx,eax
c000601d:	b8 20 30 02 c0       	mov    eax,0xc0023020
c0006022:	eb 85                	jmp    c0005fa9 <bread_cache>

c0006024 <strnicmp>:
c0006024:	55                   	push   ebp
c0006025:	57                   	push   edi
c0006026:	56                   	push   esi
c0006027:	31 f6                	xor    esi,esi
c0006029:	53                   	push   ebx
c000602a:	83 ec 0c             	sub    esp,0xc
c000602d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0006031:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c0006035:	74 42                	je     c0006079 <strnicmp+0x55>
c0006037:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000603b:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c000603f:	84 c0                	test   al,al
c0006041:	74 36                	je     c0006079 <strnicmp+0x55>
c0006043:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006046:	84 d2                	test   dl,dl
c0006048:	74 2f                	je     c0006079 <strnicmp+0x55>
c000604a:	38 d0                	cmp    al,dl
c000604c:	8d 6e 01             	lea    ebp,[esi+0x1]
c000604f:	75 04                	jne    c0006055 <strnicmp+0x31>
c0006051:	89 ee                	mov    esi,ebp
c0006053:	eb dc                	jmp    c0006031 <strnicmp+0xd>
c0006055:	83 ec 0c             	sub    esp,0xc
c0006058:	50                   	push   eax
c0006059:	e8 72 a8 ff ff       	call   c00008d0 <tolower>
c000605e:	89 c7                	mov    edi,eax
c0006060:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c0006064:	89 ee                	mov    esi,ebp
c0006066:	89 04 24             	mov    DWORD PTR [esp],eax
c0006069:	e8 62 a8 ff ff       	call   c00008d0 <tolower>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	29 c7                	sub    edi,eax
c0006073:	89 f8                	mov    eax,edi
c0006075:	74 ba                	je     c0006031 <strnicmp+0xd>
c0006077:	eb 02                	jmp    c000607b <strnicmp+0x57>
c0006079:	31 c0                	xor    eax,eax
c000607b:	83 c4 0c             	add    esp,0xc
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	5d                   	pop    ebp
c0006082:	c3                   	ret    

c0006083 <find_object>:
c0006083:	55                   	push   ebp
c0006084:	89 c5                	mov    ebp,eax
c0006086:	57                   	push   edi
c0006087:	56                   	push   esi
c0006088:	53                   	push   ebx
c0006089:	89 d3                	mov    ebx,edx
c000608b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006091:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006098:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000609c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060a0:	83 3d b4 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023eb4,0x0
c00060a7:	74 0b                	je     c00060b4 <find_object+0x31>
c00060a9:	89 ea                	mov    edx,ebp
c00060ab:	8d 44 24 20          	lea    eax,[esp+0x20]
c00060af:	e8 90 fc ff ff       	call   c0005d44 <utf2ucs>
c00060b4:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00060b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00060bb:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00060c0:	7e 11                	jle    c00060d3 <find_object+0x50>
c00060c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060c6:	e8 47 ff ff ff       	call   c0006012 <biread>
c00060cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060cf:	85 c0                	test   eax,eax
c00060d1:	79 07                	jns    c00060da <find_object+0x57>
c00060d3:	31 db                	xor    ebx,ebx
c00060d5:	e9 5b 01 00 00       	jmp    c0006235 <find_object+0x1b2>
c00060da:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060e6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060ea:	8b 04 85 80 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf80]
c00060f1:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060f5:	8a 03                	mov    al,BYTE PTR [ebx]
c00060f7:	84 c0                	test   al,al
c00060f9:	75 0e                	jne    c0006109 <find_object+0x86>
c00060fb:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060ff:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c0006107:	eb b2                	jmp    c00060bb <find_object+0x38>
c0006109:	8b 35 b4 3e 02 c0    	mov    esi,DWORD PTR ds:0xc0023eb4
c000610f:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006113:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006117:	89 ca                	mov    edx,ecx
c0006119:	85 f6                	test   esi,esi
c000611b:	74 2b                	je     c0006148 <find_object+0xc5>
c000611d:	8d 43 21             	lea    eax,[ebx+0x21]
c0006120:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006124:	e8 08 fd ff ff       	call   c0005e31 <ucscompare>
c0006129:	85 c0                	test   eax,eax
c000612b:	0f 84 c1 00 00 00    	je     c00061f2 <find_object+0x16f>
c0006131:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006134:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006138:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c0006140:	0f 8e dc 00 00 00    	jle    c0006222 <find_object+0x19f>
c0006146:	eb b3                	jmp    c00060fb <find_object+0x78>
c0006148:	0f b6 f0             	movzx  esi,al
c000614b:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c000614f:	29 ce                	sub    esi,ecx
c0006151:	80 e2 01             	and    dl,0x1
c0006154:	74 05                	je     c000615b <find_object+0xd8>
c0006156:	83 ee 21             	sub    esi,0x21
c0006159:	eb 55                	jmp    c00061b0 <find_object+0x12d>
c000615b:	47                   	inc    edi
c000615c:	83 ee 22             	sub    esi,0x22
c000615f:	eb 4f                	jmp    c00061b0 <find_object+0x12d>
c0006161:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006164:	48                   	dec    eax
c0006165:	3c 01                	cmp    al,0x1
c0006167:	77 4c                	ja     c00061b5 <find_object+0x132>
c0006169:	50                   	push   eax
c000616a:	6a 02                	push   0x2
c000616c:	68 bd eb 01 c0       	push   0xc001ebbd
c0006171:	57                   	push   edi
c0006172:	e8 e9 a5 ff ff       	call   c0000760 <strncmp>
c0006177:	83 c4 10             	add    esp,0x10
c000617a:	85 c0                	test   eax,eax
c000617c:	75 2a                	jne    c00061a8 <find_object+0x125>
c000617e:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c0006182:	8d 42 fb             	lea    eax,[edx-0x5]
c0006185:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006189:	50                   	push   eax
c000618a:	8d 47 05             	lea    eax,[edi+0x5]
c000618d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0006191:	50                   	push   eax
c0006192:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006196:	50                   	push   eax
c0006197:	e8 94 a4 ff ff       	call   c0000630 <strncpy>
c000619c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061a0:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c00061a5:	83 c4 10             	add    esp,0x10
c00061a8:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00061ac:	29 c6                	sub    esi,eax
c00061ae:	01 c7                	add    edi,eax
c00061b0:	83 fe 03             	cmp    esi,0x3
c00061b3:	7f ac                	jg     c0006161 <find_object+0xde>
c00061b5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00061ba:	7e 40                	jle    c00061fc <find_object+0x179>
c00061bc:	51                   	push   ecx
c00061bd:	51                   	push   ecx
c00061be:	6a 2f                	push   0x2f
c00061c0:	55                   	push   ebp
c00061c1:	e8 6a a5 ff ff       	call   c0000730 <strchr>
c00061c6:	83 c4 10             	add    esp,0x10
c00061c9:	85 c0                	test   eax,eax
c00061cb:	74 04                	je     c00061d1 <find_object+0x14e>
c00061cd:	29 e8                	sub    eax,ebp
c00061cf:	eb 0c                	jmp    c00061dd <find_object+0x15a>
c00061d1:	83 ec 0c             	sub    esp,0xc
c00061d4:	55                   	push   ebp
c00061d5:	e8 66 a3 ff ff       	call   c0000540 <strlen>
c00061da:	83 c4 10             	add    esp,0x10
c00061dd:	52                   	push   edx
c00061de:	50                   	push   eax
c00061df:	55                   	push   ebp
c00061e0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061e4:	50                   	push   eax
c00061e5:	e8 3a fe ff ff       	call   c0006024 <strnicmp>
c00061ea:	83 c4 10             	add    esp,0x10
c00061ed:	e9 37 ff ff ff       	jmp    c0006129 <find_object+0xa6>
c00061f2:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061f6:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061fa:	eb 1e                	jmp    c000621a <find_object+0x197>
c00061fc:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006200:	8d 43 21             	lea    eax,[ebx+0x21]
c0006203:	89 e9                	mov    ecx,ebp
c0006205:	e8 a6 fc ff ff       	call   c0005eb0 <fncompare>
c000620a:	85 c0                	test   eax,eax
c000620c:	0f 85 1f ff ff ff    	jne    c0006131 <find_object+0xae>
c0006212:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006216:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000621a:	0f 85 11 ff ff ff    	jne    c0006131 <find_object+0xae>
c0006220:	eb 13                	jmp    c0006235 <find_object+0x1b2>
c0006222:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006226:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c000622a:	0f 8f b2 fe ff ff    	jg     c00060e2 <find_object+0x5f>
c0006230:	e9 c6 fe ff ff       	jmp    c00060fb <find_object+0x78>
c0006235:	81 c4 2c 01 00 00    	add    esp,0x12c
c000623b:	89 d8                	mov    eax,ebx
c000623d:	5b                   	pop    ebx
c000623e:	5e                   	pop    esi
c000623f:	5f                   	pop    edi
c0006240:	5d                   	pop    ebp
c0006241:	c3                   	ret    

c0006242 <find_object_path>:
c0006242:	55                   	push   ebp
c0006243:	57                   	push   edi
c0006244:	89 d7                	mov    edi,edx
c0006246:	56                   	push   esi
c0006247:	89 c6                	mov    esi,eax
c0006249:	53                   	push   ebx
c000624a:	89 cb                	mov    ebx,ecx
c000624c:	83 ec 0c             	sub    esp,0xc
c000624f:	50                   	push   eax
c0006250:	50                   	push   eax
c0006251:	6a 2f                	push   0x2f
c0006253:	56                   	push   esi
c0006254:	e8 d7 a4 ff ff       	call   c0000730 <strchr>
c0006259:	83 c4 10             	add    esp,0x10
c000625c:	89 c5                	mov    ebp,eax
c000625e:	85 c0                	test   eax,eax
c0006260:	74 3a                	je     c000629c <find_object_path+0x5a>
c0006262:	39 ee                	cmp    esi,ebp
c0006264:	74 31                	je     c0006297 <find_object_path+0x55>
c0006266:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006269:	e8 a5 fb ff ff       	call   c0005e13 <iso_733>
c000626e:	89 c2                	mov    edx,eax
c0006270:	8d 43 02             	lea    eax,[ebx+0x2]
c0006273:	e8 9b fb ff ff       	call   c0005e13 <iso_733>
c0006278:	83 ec 0c             	sub    esp,0xc
c000627b:	89 c1                	mov    ecx,eax
c000627d:	52                   	push   edx
c000627e:	89 f0                	mov    eax,esi
c0006280:	ba 01 00 00 00       	mov    edx,0x1
c0006285:	e8 f9 fd ff ff       	call   c0006083 <find_object>
c000628a:	83 c4 10             	add    esp,0x10
c000628d:	89 c3                	mov    ebx,eax
c000628f:	85 c0                	test   eax,eax
c0006291:	75 04                	jne    c0006297 <find_object_path+0x55>
c0006293:	31 db                	xor    ebx,ebx
c0006295:	eb 36                	jmp    c00062cd <find_object_path+0x8b>
c0006297:	8d 75 01             	lea    esi,[ebp+0x1]
c000629a:	eb b3                	jmp    c000624f <find_object_path+0xd>
c000629c:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000629f:	74 28                	je     c00062c9 <find_object_path+0x87>
c00062a1:	8d 43 0a             	lea    eax,[ebx+0xa]
c00062a4:	e8 6a fb ff ff       	call   c0005e13 <iso_733>
c00062a9:	89 c2                	mov    edx,eax
c00062ab:	8d 43 02             	lea    eax,[ebx+0x2]
c00062ae:	e8 60 fb ff ff       	call   c0005e13 <iso_733>
c00062b3:	83 ec 0c             	sub    esp,0xc
c00062b6:	89 c1                	mov    ecx,eax
c00062b8:	52                   	push   edx
c00062b9:	89 f0                	mov    eax,esi
c00062bb:	89 fa                	mov    edx,edi
c00062bd:	e8 c1 fd ff ff       	call   c0006083 <find_object>
c00062c2:	83 c4 10             	add    esp,0x10
c00062c5:	89 c3                	mov    ebx,eax
c00062c7:	eb 04                	jmp    c00062cd <find_object_path+0x8b>
c00062c9:	85 ff                	test   edi,edi
c00062cb:	74 c6                	je     c0006293 <find_object_path+0x51>
c00062cd:	83 c4 0c             	add    esp,0xc
c00062d0:	89 d8                	mov    eax,ebx
c00062d2:	5b                   	pop    ebx
c00062d3:	5e                   	pop    esi
c00062d4:	5f                   	pop    edi
c00062d5:	5d                   	pop    ebp
c00062d6:	c3                   	ret    

c00062d7 <stricmp>:
c00062d7:	57                   	push   edi
c00062d8:	56                   	push   esi
c00062d9:	31 f6                	xor    esi,esi
c00062db:	53                   	push   ebx
c00062dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e0:	83 ec 0c             	sub    esp,0xc
c00062e3:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062eb:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062ef:	50                   	push   eax
c00062f0:	e8 bb a5 ff ff       	call   c00008b0 <toupper>
c00062f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00062f8:	e8 d3 a5 ff ff       	call   c00008d0 <tolower>
c00062fd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006300:	89 c3                	mov    ebx,eax
c0006302:	e8 a9 a5 ff ff       	call   c00008b0 <toupper>
c0006307:	89 04 24             	mov    DWORD PTR [esp],eax
c000630a:	e8 c1 a5 ff ff       	call   c00008d0 <tolower>
c000630f:	83 c4 10             	add    esp,0x10
c0006312:	39 c3                	cmp    ebx,eax
c0006314:	75 05                	jne    c000631b <stricmp+0x44>
c0006316:	46                   	inc    esi
c0006317:	85 db                	test   ebx,ebx
c0006319:	75 c1                	jne    c00062dc <stricmp+0x5>
c000631b:	29 c3                	sub    ebx,eax
c000631d:	89 d8                	mov    eax,ebx
c000631f:	5b                   	pop    ebx
c0006320:	5e                   	pop    esi
c0006321:	5f                   	pop    edi
c0006322:	c3                   	ret    

c0006323 <iso_open>:
c0006323:	57                   	push   edi
c0006324:	31 c0                	xor    eax,eax
c0006326:	56                   	push   esi
c0006327:	b9 80 3e 02 c0       	mov    ecx,0xc0023e80
c000632c:	53                   	push   ebx
c000632d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006332:	0f 95 c0             	setne  al
c0006335:	89 c2                	mov    edx,eax
c0006337:	89 c6                	mov    esi,eax
c0006339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000633d:	e8 00 ff ff ff       	call   c0006242 <find_object_path>
c0006342:	83 ca ff             	or     edx,0xffffffff
c0006345:	85 c0                	test   eax,eax
c0006347:	74 5e                	je     c00063a7 <iso_open+0x84>
c0006349:	89 c1                	mov    ecx,eax
c000634b:	31 d2                	xor    edx,edx
c000634d:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006353:	83 bf 40 35 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdcac0],0x0
c000635a:	75 42                	jne    c000639e <iso_open+0x7b>
c000635c:	8d 41 02             	lea    eax,[ecx+0x2]
c000635f:	c7 87 40 35 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdcac0],0xffffffff
c0006369:	e8 a5 fa ff ff       	call   c0005e13 <iso_733>
c000636e:	89 b7 44 35 02 c0    	mov    DWORD PTR [edi-0x3ffdcabc],esi
c0006374:	89 87 40 35 02 c0    	mov    DWORD PTR [edi-0x3ffdcac0],eax
c000637a:	c7 87 48 35 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdcab8],0x0
c0006384:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006387:	e8 87 fa ff ff       	call   c0005e13 <iso_733>
c000638c:	c7 87 d0 35 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdca30],0x0
c0006396:	89 87 4c 35 02 c0    	mov    DWORD PTR [edi-0x3ffdcab4],eax
c000639c:	eb 09                	jmp    c00063a7 <iso_open+0x84>
c000639e:	42                   	inc    edx
c000639f:	83 fa 10             	cmp    edx,0x10
c00063a2:	75 a9                	jne    c000634d <iso_open+0x2a>
c00063a4:	83 ca ff             	or     edx,0xffffffff
c00063a7:	5b                   	pop    ebx
c00063a8:	89 d0                	mov    eax,edx
c00063aa:	5e                   	pop    esi
c00063ab:	5f                   	pop    edi
c00063ac:	c3                   	ret    

c00063ad <iso_close>:
c00063ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00063b1:	83 f8 0f             	cmp    eax,0xf
c00063b4:	7f 10                	jg     c00063c6 <iso_close+0x19>
c00063b6:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00063bc:	c7 80 40 35 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdcac0],0x0
c00063c6:	e9 5a fb ff ff       	jmp    c0005f25 <bclear_cache>

c00063cb <iso_read>:
c00063cb:	55                   	push   ebp
c00063cc:	57                   	push   edi
c00063cd:	56                   	push   esi
c00063ce:	53                   	push   ebx
c00063cf:	83 ec 1c             	sub    esp,0x1c
c00063d2:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063d6:	83 fd 0f             	cmp    ebp,0xf
c00063d9:	7e 0a                	jle    c00063e5 <iso_read+0x1a>
c00063db:	83 c8 ff             	or     eax,0xffffffff
c00063de:	89 c2                	mov    edx,eax
c00063e0:	e9 f4 00 00 00       	jmp    c00064d9 <iso_read+0x10e>
c00063e5:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063eb:	83 bd 40 35 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdcac0],0x0
c00063f2:	74 e7                	je     c00063db <iso_read+0x10>
c00063f4:	8b 95 d0 35 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdca30]
c00063fa:	85 d2                	test   edx,edx
c00063fc:	75 dd                	jne    c00063db <iso_read+0x10>
c00063fe:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0006403:	0f 84 cd 00 00 00    	je     c00064d6 <iso_read+0x10b>
c0006409:	8b 85 48 35 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdcab8]
c000640f:	8b 8d 4c 35 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdcab4]
c0006415:	29 c1                	sub    ecx,eax
c0006417:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c000641b:	76 04                	jbe    c0006421 <iso_read+0x56>
c000641d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006421:	85 c9                	test   ecx,ecx
c0006423:	0f 84 ad 00 00 00    	je     c00064d6 <iso_read+0x10b>
c0006429:	89 c6                	mov    esi,eax
c000642b:	bb 00 08 00 00       	mov    ebx,0x800
c0006430:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006436:	c1 e8 0b             	shr    eax,0xb
c0006439:	29 f3                	sub    ebx,esi
c000643b:	03 85 40 35 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdcac0]
c0006441:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006447:	7e 3f                	jle    c0006488 <iso_read+0xbd>
c0006449:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000644f:	75 37                	jne    c0006488 <iso_read+0xbd>
c0006451:	be 20 00 00 00       	mov    esi,0x20
c0006456:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000645c:	7f 05                	jg     c0006463 <iso_read+0x98>
c000645e:	89 ce                	mov    esi,ecx
c0006460:	c1 fe 0b             	sar    esi,0xb
c0006463:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006467:	89 f3                	mov    ebx,esi
c0006469:	c1 e3 0b             	shl    ebx,0xb
c000646c:	52                   	push   edx
c000646d:	56                   	push   esi
c000646e:	50                   	push   eax
c000646f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006473:	e8 11 fb ff ff       	call   c0005f89 <isoReadDiscSector>
c0006478:	83 c4 10             	add    esp,0x10
c000647b:	85 c0                	test   eax,eax
c000647d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006481:	7f 3e                	jg     c00064c1 <iso_read+0xf6>
c0006483:	e9 53 ff ff ff       	jmp    c00063db <iso_read+0x10>
c0006488:	39 cb                	cmp    ebx,ecx
c000648a:	7e 02                	jle    c000648e <iso_read+0xc3>
c000648c:	89 cb                	mov    ebx,ecx
c000648e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006492:	e8 84 fb ff ff       	call   c000601b <bdread>
c0006497:	85 c0                	test   eax,eax
c0006499:	0f 88 3c ff ff ff    	js     c00063db <iso_read+0x10>
c000649f:	8b 0c 85 20 30 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcfe0]
c00064a6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00064aa:	8b 85 48 35 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdcab8]
c00064b0:	25 ff 07 00 00       	and    eax,0x7ff
c00064b5:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00064b9:	89 d9                	mov    ecx,ebx
c00064bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00064bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00064c1:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00064c5:	01 9d 48 35 02 c0    	add    DWORD PTR [ebp-0x3ffdcab8],ebx
c00064cb:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064cf:	01 da                	add    edx,ebx
c00064d1:	e9 28 ff ff ff       	jmp    c00063fe <iso_read+0x33>
c00064d6:	89 d0                	mov    eax,edx
c00064d8:	99                   	cdq    
c00064d9:	83 c4 1c             	add    esp,0x1c
c00064dc:	5b                   	pop    ebx
c00064dd:	5e                   	pop    esi
c00064de:	5f                   	pop    edi
c00064df:	5d                   	pop    ebp
c00064e0:	c3                   	ret    

c00064e1 <iso_seek>:
c00064e1:	55                   	push   ebp
c00064e2:	83 c8 ff             	or     eax,0xffffffff
c00064e5:	57                   	push   edi
c00064e6:	89 c2                	mov    edx,eax
c00064e8:	56                   	push   esi
c00064e9:	53                   	push   ebx
c00064ea:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064ee:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064f2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064f6:	83 fe 0f             	cmp    esi,0xf
c00064f9:	7f 65                	jg     c0006560 <iso_seek+0x7f>
c00064fb:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006501:	8d 8d 40 35 02 c0    	lea    ecx,[ebp-0x3ffdcac0]
c0006507:	83 bd 40 35 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdcac0],0x0
c000650e:	74 50                	je     c0006560 <iso_seek+0x7f>
c0006510:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006517:	75 47                	jne    c0006560 <iso_seek+0x7f>
c0006519:	83 fb 01             	cmp    ebx,0x1
c000651c:	74 0e                	je     c000652c <iso_seek+0x4b>
c000651e:	83 fb 02             	cmp    ebx,0x2
c0006521:	74 0e                	je     c0006531 <iso_seek+0x50>
c0006523:	85 db                	test   ebx,ebx
c0006525:	75 39                	jne    c0006560 <iso_seek+0x7f>
c0006527:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c000652a:	eb 0d                	jmp    c0006539 <iso_seek+0x58>
c000652c:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c000652f:	eb 08                	jmp    c0006539 <iso_seek+0x58>
c0006531:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006534:	01 f8                	add    eax,edi
c0006536:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006539:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c000653f:	8b 88 4c 35 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdcab4]
c0006545:	05 40 35 02 c0       	add    eax,0xc0023540
c000654a:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000654d:	76 03                	jbe    c0006552 <iso_seek+0x71>
c000654f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006552:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006558:	8b 82 48 35 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdcab8]
c000655e:	31 d2                	xor    edx,edx
c0006560:	5b                   	pop    ebx
c0006561:	5e                   	pop    esi
c0006562:	5f                   	pop    edi
c0006563:	5d                   	pop    ebp
c0006564:	c3                   	ret    

c0006565 <iso_tell>:
c0006565:	83 c8 ff             	or     eax,0xffffffff
c0006568:	53                   	push   ebx
c0006569:	89 c2                	mov    edx,eax
c000656b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000656f:	83 f9 0f             	cmp    ecx,0xf
c0006572:	7f 20                	jg     c0006594 <iso_tell+0x2f>
c0006574:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000657a:	83 bb 40 35 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdcac0],0x0
c0006581:	74 11                	je     c0006594 <iso_tell+0x2f>
c0006583:	83 bb d0 35 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdca30],0x0
c000658a:	75 08                	jne    c0006594 <iso_tell+0x2f>
c000658c:	8b 83 48 35 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdcab8]
c0006592:	31 d2                	xor    edx,edx
c0006594:	5b                   	pop    ebx
c0006595:	c3                   	ret    

c0006596 <iso_total>:
c0006596:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659a:	83 c8 ff             	or     eax,0xffffffff
c000659d:	83 fa 0f             	cmp    edx,0xf
c00065a0:	7f 1e                	jg     c00065c0 <iso_total+0x2a>
c00065a2:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00065a8:	83 ba 40 35 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdcac0],0x0
c00065af:	74 0f                	je     c00065c0 <iso_total+0x2a>
c00065b1:	83 ba d0 35 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdca30],0x0
c00065b8:	75 06                	jne    c00065c0 <iso_total+0x2a>
c00065ba:	8b 82 4c 35 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdcab4]
c00065c0:	c3                   	ret    

c00065c1 <fn_postprocess>:
c00065c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00065c5:	89 d0                	mov    eax,edx
c00065c7:	8a 08                	mov    cl,BYTE PTR [eax]
c00065c9:	80 f9 3b             	cmp    cl,0x3b
c00065cc:	74 07                	je     c00065d5 <fn_postprocess+0x14>
c00065ce:	84 c9                	test   cl,cl
c00065d0:	74 03                	je     c00065d5 <fn_postprocess+0x14>
c00065d2:	40                   	inc    eax
c00065d3:	eb f2                	jmp    c00065c7 <fn_postprocess+0x6>
c00065d5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065d8:	39 d0                	cmp    eax,edx
c00065da:	76 0a                	jbe    c00065e6 <fn_postprocess+0x25>
c00065dc:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065e0:	75 04                	jne    c00065e6 <fn_postprocess+0x25>
c00065e2:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065e6:	c3                   	ret    

c00065e7 <iso_readdir>:
c00065e7:	55                   	push   ebp
c00065e8:	57                   	push   edi
c00065e9:	56                   	push   esi
c00065ea:	53                   	push   ebx
c00065eb:	83 ec 1c             	sub    esp,0x1c
c00065ee:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00065f2:	83 fb 0f             	cmp    ebx,0xf
c00065f5:	7f 28                	jg     c000661f <iso_readdir+0x38>
c00065f7:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00065fd:	8d b8 40 35 02 c0    	lea    edi,[eax-0x3ffdcac0]
c0006603:	83 b8 40 35 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdcac0],0x0
c000660a:	74 13                	je     c000661f <iso_readdir+0x38>
c000660c:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006610:	74 0d                	je     c000661f <iso_readdir+0x38>
c0006612:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006619:	0f 84 b1 00 00 00    	je     c00066d0 <iso_readdir+0xe9>
c000661f:	83 ec 0c             	sub    esp,0xc
c0006622:	68 c0 eb 01 c0       	push   0xc001ebc0
c0006627:	e8 b8 20 01 00       	call   c00186e4 <iso_kprintf>
c000662c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000662f:	e8 cc 20 01 00       	call   c0018700 <iso_kprintfd>
c0006634:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000663a:	c7 04 24 c5 eb 01 c0 	mov    DWORD PTR [esp],0xc001ebc5
c0006641:	e8 9e 20 01 00       	call   c00186e4 <iso_kprintf>
c0006646:	5d                   	pop    ebp
c0006647:	ff b3 40 35 02 c0    	push   DWORD PTR [ebx-0x3ffdcac0]
c000664d:	e8 ae 20 01 00       	call   c0018700 <iso_kprintfd>
c0006652:	c7 04 24 cb eb 01 c0 	mov    DWORD PTR [esp],0xc001ebcb
c0006659:	e8 86 20 01 00       	call   c00186e4 <iso_kprintf>
c000665e:	58                   	pop    eax
c000665f:	ff b3 44 35 02 c0    	push   DWORD PTR [ebx-0x3ffdcabc]
c0006665:	e8 96 20 01 00       	call   c0018700 <iso_kprintfd>
c000666a:	c7 04 24 d1 eb 01 c0 	mov    DWORD PTR [esp],0xc001ebd1
c0006671:	e8 6e 20 01 00       	call   c00186e4 <iso_kprintf>
c0006676:	58                   	pop    eax
c0006677:	ff b3 d0 35 02 c0    	push   DWORD PTR [ebx-0x3ffdca30]
c000667d:	e8 7e 20 01 00       	call   c0018700 <iso_kprintfd>
c0006682:	83 c4 10             	add    esp,0x10
c0006685:	eb 42                	jmp    c00066c9 <iso_readdir+0xe2>
c0006687:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000668a:	8b 34 85 80 30 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdcf80]
c0006691:	89 d1                	mov    ecx,edx
c0006693:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006699:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c000669d:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00066a0:	75 35                	jne    c00066d7 <iso_readdir+0xf0>
c00066a2:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00066a8:	81 c2 00 08 00 00    	add    edx,0x800
c00066ae:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00066b1:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00066b4:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00066b7:	73 1e                	jae    c00066d7 <iso_readdir+0xf0>
c00066b9:	c1 ea 0b             	shr    edx,0xb
c00066bc:	8b 07                	mov    eax,DWORD PTR [edi]
c00066be:	01 d0                	add    eax,edx
c00066c0:	e8 4d f9 ff ff       	call   c0006012 <biread>
c00066c5:	85 c0                	test   eax,eax
c00066c7:	79 be                	jns    c0006687 <iso_readdir+0xa0>
c00066c9:	31 c0                	xor    eax,eax
c00066cb:	e9 66 01 00 00       	jmp    c0006836 <iso_readdir+0x24f>
c00066d0:	31 f6                	xor    esi,esi
c00066d2:	83 c8 ff             	or     eax,0xffffffff
c00066d5:	eb da                	jmp    c00066b1 <iso_readdir+0xca>
c00066d7:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00066dd:	8b ba 48 35 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdcab8]
c00066e3:	81 c2 40 35 02 c0    	add    edx,0xc0023540
c00066e9:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00066ec:	73 db                	jae    c00066c9 <iso_readdir+0xe2>
c00066ee:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00066f2:	75 34                	jne    c0006728 <iso_readdir+0x141>
c00066f4:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00066f8:	75 2e                	jne    c0006728 <iso_readdir+0x141>
c00066fa:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00066fd:	8b 34 85 80 30 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdcf80]
c0006704:	01 f9                	add    ecx,edi
c0006706:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006709:	89 c8                	mov    eax,ecx
c000670b:	25 ff 07 00 00       	and    eax,0x7ff
c0006710:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006715:	01 c8                	add    eax,ecx
c0006717:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000671a:	25 ff 07 00 00       	and    eax,0x7ff
c000671f:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006723:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006726:	74 a1                	je     c00066c9 <iso_readdir+0xe2>
c0006728:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000672e:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006732:	8d 56 21             	lea    edx,[esi+0x21]
c0006735:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006739:	8d a8 58 35 02 c0    	lea    ebp,[eax-0x3ffdcaa8]
c000673f:	83 3d b4 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023eb4,0x0
c0006746:	74 0c                	je     c0006754 <iso_readdir+0x16d>
c0006748:	89 e8                	mov    eax,ebp
c000674a:	e8 17 f6 ff ff       	call   c0005d66 <ucs2utfn>
c000674f:	e9 a6 00 00 00       	jmp    c00067fa <iso_readdir+0x213>
c0006754:	57                   	push   edi
c0006755:	51                   	push   ecx
c0006756:	52                   	push   edx
c0006757:	55                   	push   ebp
c0006758:	e8 d3 9e ff ff       	call   c0000630 <strncpy>
c000675d:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006761:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006767:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000676a:	c6 84 01 58 35 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdcaa8],0x0
c0006772:	e8 4a fe ff ff       	call   c00065c1 <fn_postprocess>
c0006777:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c000677b:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000677e:	83 c4 10             	add    esp,0x10
c0006781:	29 d0                	sub    eax,edx
c0006783:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006787:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c000678b:	74 05                	je     c0006792 <iso_readdir+0x1ab>
c000678d:	83 e8 21             	sub    eax,0x21
c0006790:	eb 04                	jmp    c0006796 <iso_readdir+0x1af>
c0006792:	47                   	inc    edi
c0006793:	83 e8 22             	sub    eax,0x22
c0006796:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000679a:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00067a4:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00067a9:	7e 4f                	jle    c00067fa <iso_readdir+0x213>
c00067ab:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c00067ae:	48                   	dec    eax
c00067af:	3c 01                	cmp    al,0x1
c00067b1:	77 47                	ja     c00067fa <iso_readdir+0x213>
c00067b3:	52                   	push   edx
c00067b4:	6a 02                	push   0x2
c00067b6:	68 bd eb 01 c0       	push   0xc001ebbd
c00067bb:	57                   	push   edi
c00067bc:	e8 9f 9f ff ff       	call   c0000760 <strncmp>
c00067c1:	83 c4 10             	add    esp,0x10
c00067c4:	85 c0                	test   eax,eax
c00067c6:	75 26                	jne    c00067ee <iso_readdir+0x207>
c00067c8:	50                   	push   eax
c00067c9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067cd:	83 e8 05             	sub    eax,0x5
c00067d0:	50                   	push   eax
c00067d1:	8d 47 05             	lea    eax,[edi+0x5]
c00067d4:	50                   	push   eax
c00067d5:	55                   	push   ebp
c00067d6:	e8 55 9e ff ff       	call   c0000630 <strncpy>
c00067db:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00067df:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067e3:	83 c4 10             	add    esp,0x10
c00067e6:	c6 84 08 53 35 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdcaad],0x0
c00067ee:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067f2:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00067f6:	01 c7                	add    edi,eax
c00067f8:	eb aa                	jmp    c00067a4 <iso_readdir+0x1bd>
c00067fa:	83 c8 ff             	or     eax,0xffffffff
c00067fd:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006801:	89 c2                	mov    edx,eax
c0006803:	75 0a                	jne    c000680f <iso_readdir+0x228>
c0006805:	8d 46 0a             	lea    eax,[esi+0xa]
c0006808:	e8 06 f6 ff ff       	call   c0005e13 <iso_733>
c000680d:	31 d2                	xor    edx,edx
c000680f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006815:	89 83 50 35 02 c0    	mov    DWORD PTR [ebx-0x3ffdcab0],eax
c000681b:	89 93 54 35 02 c0    	mov    DWORD PTR [ebx-0x3ffdcaac],edx
c0006821:	81 c3 40 35 02 c0    	add    ebx,0xc0023540
c0006827:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000682a:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c000682d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006831:	05 50 35 02 c0       	add    eax,0xc0023550
c0006836:	83 c4 1c             	add    esp,0x1c
c0006839:	5b                   	pop    ebx
c000683a:	5e                   	pop    esi
c000683b:	5f                   	pop    edi
c000683c:	5d                   	pop    ebp
c000683d:	c3                   	ret    

c000683e <iso_reset>:
c000683e:	83 ec 18             	sub    esp,0x18
c0006841:	68 da eb 01 c0       	push   0xc001ebda
c0006846:	e8 99 1e 01 00       	call   c00186e4 <iso_kprintf>
c000684b:	e8 0d f7 ff ff       	call   c0005f5d <iso_break_all>
c0006850:	e8 06 f7 ff ff       	call   c0005f5b <bclear>
c0006855:	31 c0                	xor    eax,eax
c0006857:	83 c4 1c             	add    esp,0x1c
c000685a:	c3                   	ret    

c000685b <init_percd>:
c000685b:	57                   	push   edi
c000685c:	56                   	push   esi
c000685d:	53                   	push   ebx
c000685e:	bb 01 00 00 00       	mov    ebx,0x1
c0006863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006867:	a2 60 30 02 c0       	mov    ds:0xc0023060,al
c000686c:	e8 cd ff ff ff       	call   c000683e <iso_reset>
c0006871:	c7 05 b4 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023eb4,0x0
c000687b:	a1 ac 3e 02 c0       	mov    eax,ds:0xc0023eac
c0006880:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006884:	e8 89 f7 ff ff       	call   c0006012 <biread>
c0006889:	89 c6                	mov    esi,eax
c000688b:	85 c0                	test   eax,eax
c000688d:	0f 88 ba 00 00 00    	js     c000694d <init_percd+0xf2>
c0006893:	8b 04 85 80 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf80]
c000689a:	83 c0 04             	add    eax,0x4
c000689d:	52                   	push   edx
c000689e:	6a 06                	push   0x6
c00068a0:	68 e5 eb 01 c0       	push   0xc001ebe5
c00068a5:	50                   	push   eax
c00068a6:	e8 e5 9a ff ff       	call   c0000390 <memcmp>
c00068ab:	83 c4 10             	add    esp,0x10
c00068ae:	85 c0                	test   eax,eax
c00068b0:	74 08                	je     c00068ba <init_percd+0x5f>
c00068b2:	43                   	inc    ebx
c00068b3:	83 fb 04             	cmp    ebx,0x4
c00068b6:	75 c3                	jne    c000687b <init_percd+0x20>
c00068b8:	eb 1a                	jmp    c00068d4 <init_percd+0x79>
c00068ba:	8b 04 b5 80 30 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdcf80]
c00068c1:	83 c0 5c             	add    eax,0x5c
c00068c4:	e8 1b f5 ff ff       	call   c0005de4 <isjoliet>
c00068c9:	a3 b4 3e 02 c0       	mov    ds:0xc0023eb4,eax
c00068ce:	85 c0                	test   eax,eax
c00068d0:	74 e0                	je     c00068b2 <init_percd+0x57>
c00068d2:	eb 3e                	jmp    c0006912 <init_percd+0xb7>
c00068d4:	83 3d b4 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023eb4,0x0
c00068db:	75 35                	jne    c0006912 <init_percd+0xb7>
c00068dd:	a1 ac 3e 02 c0       	mov    eax,ds:0xc0023eac
c00068e2:	83 c0 10             	add    eax,0x10
c00068e5:	e8 28 f7 ff ff       	call   c0006012 <biread>
c00068ea:	89 c6                	mov    esi,eax
c00068ec:	85 c0                	test   eax,eax
c00068ee:	78 5f                	js     c000694f <init_percd+0xf4>
c00068f0:	83 cb ff             	or     ebx,0xffffffff
c00068f3:	50                   	push   eax
c00068f4:	8b 04 b5 80 30 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdcf80]
c00068fb:	6a 06                	push   0x6
c00068fd:	83 c0 04             	add    eax,0x4
c0006900:	68 ec eb 01 c0       	push   0xc001ebec
c0006905:	50                   	push   eax
c0006906:	e8 85 9a ff ff       	call   c0000390 <memcmp>
c000690b:	83 c4 10             	add    esp,0x10
c000690e:	85 c0                	test   eax,eax
c0006910:	75 3d                	jne    c000694f <init_percd+0xf4>
c0006912:	8b 34 b5 80 30 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdcf80]
c0006919:	bf 80 3e 02 c0       	mov    edi,0xc0023e80
c000691e:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006924:	b9 22 00 00 00       	mov    ecx,0x22
c0006929:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000692b:	b8 82 3e 02 c0       	mov    eax,0xc0023e82
c0006930:	31 db                	xor    ebx,ebx
c0006932:	e8 dc f4 ff ff       	call   c0005e13 <iso_733>
c0006937:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c000693c:	b8 8a 3e 02 c0       	mov    eax,0xc0023e8a
c0006941:	e8 cd f4 ff ff       	call   c0005e13 <iso_733>
c0006946:	a3 a4 3e 02 c0       	mov    ds:0xc0023ea4,eax
c000694b:	eb 02                	jmp    c000694f <init_percd+0xf4>
c000694d:	89 c3                	mov    ebx,eax
c000694f:	89 d8                	mov    eax,ebx
c0006951:	5b                   	pop    ebx
c0006952:	5e                   	pop    esi
c0006953:	5f                   	pop    edi
c0006954:	c3                   	ret    

c0006955 <iso_ioctl>:
c0006955:	83 ec 18             	sub    esp,0x18
c0006958:	68 f3 eb 01 c0       	push   0xc001ebf3
c000695d:	e8 82 1d 01 00       	call   c00186e4 <iso_kprintf>
c0006962:	e8 d7 fe ff ff       	call   c000683e <iso_reset>
c0006967:	31 c0                	xor    eax,eax
c0006969:	83 c4 1c             	add    esp,0x1c
c000696c:	c3                   	ret    

c000696d <fs_iso9660_init>:
c000696d:	53                   	push   ebx
c000696e:	31 db                	xor    ebx,ebx
c0006970:	83 ec 14             	sub    esp,0x14
c0006973:	68 fe eb 01 c0       	push   0xc001ebfe
c0006978:	e8 67 1d 01 00       	call   c00186e4 <iso_kprintf>
c000697d:	83 c4 0c             	add    esp,0xc
c0006980:	68 40 09 00 00       	push   0x940
c0006985:	6a 00                	push   0x0
c0006987:	68 40 35 02 c0       	push   0xc0023540
c000698c:	e8 3f 9b ff ff       	call   c00004d0 <memset>
c0006991:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006998:	c7 05 40 35 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0023540,0xffffffff
c00069a2:	e8 ce 0e 00 00       	call   c0007875 <malloc>
c00069a7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00069ae:	a3 b0 3e 02 c0       	mov    ds:0xc0023eb0,eax
c00069b3:	e8 bd 0e 00 00       	call   c0007875 <malloc>
c00069b8:	83 c4 10             	add    esp,0x10
c00069bb:	a3 20 35 02 c0       	mov    ds:0xc0023520,eax
c00069c0:	83 ec 0c             	sub    esp,0xc
c00069c3:	68 04 08 00 00       	push   0x804
c00069c8:	e8 a8 0e 00 00       	call   c0007875 <malloc>
c00069cd:	89 04 9d 80 30 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcf80],eax
c00069d4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00069da:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c00069e1:	e8 8f 0e 00 00       	call   c0007875 <malloc>
c00069e6:	83 c4 10             	add    esp,0x10
c00069e9:	89 04 9d 20 30 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcfe0],eax
c00069f0:	43                   	inc    ebx
c00069f1:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00069f7:	83 fb 10             	cmp    ebx,0x10
c00069fa:	75 c4                	jne    c00069c0 <fs_iso9660_init+0x53>
c00069fc:	31 c0                	xor    eax,eax
c00069fe:	83 c4 08             	add    esp,0x8
c0006a01:	5b                   	pop    ebx
c0006a02:	c3                   	ret    

c0006a03 <fs_iso9660_shutdown>:
c0006a03:	53                   	push   ebx
c0006a04:	31 db                	xor    ebx,ebx
c0006a06:	83 ec 08             	sub    esp,0x8
c0006a09:	83 ec 0c             	sub    esp,0xc
c0006a0c:	ff 34 9d 80 30 02 c0 	push   DWORD PTR [ebx*4-0x3ffdcf80]
c0006a13:	e8 6d 0e 00 00       	call   c0007885 <free>
c0006a18:	58                   	pop    eax
c0006a19:	ff 34 9d 20 30 02 c0 	push   DWORD PTR [ebx*4-0x3ffdcfe0]
c0006a20:	43                   	inc    ebx
c0006a21:	e8 5f 0e 00 00       	call   c0007885 <free>
c0006a26:	83 c4 10             	add    esp,0x10
c0006a29:	83 fb 10             	cmp    ebx,0x10
c0006a2c:	75 db                	jne    c0006a09 <fs_iso9660_shutdown+0x6>
c0006a2e:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c0006a33:	85 c0                	test   eax,eax
c0006a35:	74 0c                	je     c0006a43 <fs_iso9660_shutdown+0x40>
c0006a37:	83 ec 0c             	sub    esp,0xc
c0006a3a:	50                   	push   eax
c0006a3b:	e8 45 0e 00 00       	call   c0007885 <free>
c0006a40:	83 c4 10             	add    esp,0x10
c0006a43:	a1 20 35 02 c0       	mov    eax,ds:0xc0023520
c0006a48:	85 c0                	test   eax,eax
c0006a4a:	74 0c                	je     c0006a58 <fs_iso9660_shutdown+0x55>
c0006a4c:	83 ec 0c             	sub    esp,0xc
c0006a4f:	50                   	push   eax
c0006a50:	e8 30 0e 00 00       	call   c0007885 <free>
c0006a55:	83 c4 10             	add    esp,0x10
c0006a58:	c7 05 20 35 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023520,0x0
c0006a62:	c7 05 b0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023eb0,0x0
c0006a6c:	31 c0                	xor    eax,eax
c0006a6e:	83 c4 08             	add    esp,0x8
c0006a71:	5b                   	pop    ebx
c0006a72:	c3                   	ret    
c0006a73:	90                   	nop

c0006a74 <Computer::close(int, int, void*)>:
c0006a74:	57                   	push   edi
c0006a75:	56                   	push   esi
c0006a76:	53                   	push   ebx
c0006a77:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006a7b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006a7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006a83:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006a89:	83 ec 0c             	sub    esp,0xc
c0006a8c:	50                   	push   eax
c0006a8d:	e8 d4 50 00 00       	call   c000bb66 <Device::closeAll()>
c0006a92:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006a98:	83 c4 10             	add    esp,0x10
c0006a9b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a9d:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006aa1:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006aa9:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006aad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ab1:	5b                   	pop    ebx
c0006ab2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006ab5:	5e                   	pop    esi
c0006ab6:	5f                   	pop    edi
c0006ab7:	ff e0                	jmp    eax

c0006ab9 <Krnl::firstTask()>:
c0006ab9:	53                   	push   ebx
c0006aba:	83 ec 14             	sub    esp,0x14
c0006abd:	fb                   	sti    
c0006abe:	68 0f ec 01 c0       	push   0xc001ec0f
c0006ac3:	e8 5b 92 00 00       	call   c000fd23 <KeSetBootMessage(char const*)>
c0006ac8:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006acf:	e8 a1 0d 00 00       	call   c0007875 <malloc>
c0006ad4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006adb:	89 c3                	mov    ebx,eax
c0006add:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0006ae2:	50                   	push   eax
c0006ae3:	68 28 ec 01 c0       	push   0xc001ec28
c0006ae8:	6a 01                	push   0x1
c0006aea:	53                   	push   ebx
c0006aeb:	e8 c0 d6 00 00       	call   c00141b0 <Process::Process(bool, char const*, Process*, char**)>
c0006af0:	83 c4 20             	add    esp,0x20
c0006af3:	68 ff 00 00 00       	push   0xff
c0006af8:	6a 00                	push   0x0
c0006afa:	68 c9 72 00 c0       	push   0xc00072c9
c0006aff:	53                   	push   ebx
c0006b00:	e8 d3 d8 00 00       	call   c00143d8 <Process::createThread(void (*)(void*), void*, int)>
c0006b05:	8b 15 90 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027190
c0006b0b:	6a 7a                	push   0x7a
c0006b0d:	6a 00                	push   0x0
c0006b0f:	68 2c 4e 01 c0       	push   0xc0014e2c
c0006b14:	52                   	push   edx
c0006b15:	e8 be d8 00 00       	call   c00143d8 <Process::createThread(void (*)(void*), void*, int)>
c0006b1a:	83 c4 14             	add    esp,0x14
c0006b1d:	a3 48 71 02 c0       	mov    ds:0xc0027148,eax
c0006b22:	68 24 ed 01 c0       	push   0xc001ed24
c0006b27:	c6 05 bd 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023ebd,0x1
c0006b2e:	e8 f0 91 00 00       	call   c000fd23 <KeSetBootMessage(char const*)>
c0006b33:	e8 d3 e6 00 00       	call   c001520b <Vm::initialise8086()>
c0006b38:	e8 6f 3e 00 00       	call   c000a9ac <Fs::initVFS()>
c0006b3d:	c7 04 24 35 ec 01 c0 	mov    DWORD PTR [esp],0xc001ec35
c0006b44:	e8 da 91 00 00       	call   c000fd23 <KeSetBootMessage(char const*)>
c0006b49:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0006b4e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006b54:	8b 10                	mov    edx,DWORD PTR [eax]
c0006b56:	6a 00                	push   0x0
c0006b58:	6a 00                	push   0x0
c0006b5a:	6a 00                	push   0x0
c0006b5c:	50                   	push   eax
c0006b5d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006b60:	83 c4 14             	add    esp,0x14
c0006b63:	68 24 ed 01 c0       	push   0xc001ed24
c0006b68:	e8 b6 91 00 00       	call   c000fd23 <KeSetBootMessage(char const*)>
c0006b6d:	e8 8c 96 00 00       	call   c00101fe <Krnl::loadSystemEnv()>
c0006b72:	e8 e9 98 00 00       	call   c0010460 <Krnl::setupPowerManager()>
c0006b77:	83 c4 0c             	add    esp,0xc
c0006b7a:	6a 3a                	push   0x3a
c0006b7c:	68 4f ec 01 c0       	push   0xc001ec4f
c0006b81:	68 58 ec 01 c0       	push   0xc001ec58
c0006b86:	e8 ce bb 00 00       	call   c0012759 <Reg::readIntWithDefault(char*, char*, int)>
c0006b8b:	89 04 24             	mov    DWORD PTR [esp],eax
c0006b8e:	e8 25 49 00 00       	call   c000b4b8 <User::loadClockSettings(int)>
c0006b93:	c7 04 24 48 ed 01 c0 	mov    DWORD PTR [esp],0xc001ed48
c0006b9a:	e8 84 91 00 00       	call   c000fd23 <KeSetBootMessage(char const*)>
c0006b9f:	59                   	pop    ecx
c0006ba0:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0006ba5:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006bab:	53                   	push   ebx
c0006bac:	e8 b3 4f 00 00       	call   c000bb64 <Device::loadDriversForAll()>
c0006bb1:	c7 04 24 60 ec 01 c0 	mov    DWORD PTR [esp],0xc001ec60
c0006bb8:	e8 66 91 00 00       	call   c000fd23 <KeSetBootMessage(char const*)>
c0006bbd:	58                   	pop    eax
c0006bbe:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c0006bc4:	5a                   	pop    edx
c0006bc5:	6a 01                	push   0x1
c0006bc7:	68 71 ec 01 c0       	push   0xc001ec71
c0006bcc:	e8 fd cf 00 00       	call   c0013bce <Thr::loadDLL(char const*, bool)>
c0006bd1:	59                   	pop    ecx
c0006bd2:	5a                   	pop    edx
c0006bd3:	53                   	push   ebx
c0006bd4:	50                   	push   eax
c0006bd5:	e8 25 d2 00 00       	call   c0013dff <Thr::executeDLL(unsigned long, void*)>
c0006bda:	83 c4 10             	add    esp,0x10
c0006bdd:	83 ec 0c             	sub    esp,0xc
c0006be0:	6a 02                	push   0x2
c0006be2:	e8 0d dc 00 00       	call   c00147f4 <blockTask(TaskState)>
c0006be7:	83 c4 10             	add    esp,0x10
c0006bea:	eb f1                	jmp    c0006bdd <Krnl::firstTask()+0x124>

c0006bec <Computer::Computer()>:
c0006bec:	83 ec 0c             	sub    esp,0xc
c0006bef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bf3:	83 ec 08             	sub    esp,0x8
c0006bf6:	68 8d ec 01 c0       	push   0xc001ec8d
c0006bfb:	50                   	push   eax
c0006bfc:	e8 df 4f 00 00       	call   c000bbe0 <Device::Device(char const*)>
c0006c01:	83 c4 10             	add    esp,0x10
c0006c04:	ba 94 ed 01 c0       	mov    edx,0xc001ed94
c0006c09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0d:	89 10                	mov    DWORD PTR [eax],edx
c0006c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c13:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006c1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c21:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006c2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c2f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006c35:	83 ca 04             	or     edx,0x4
c0006c38:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c42:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c48:	31 d2                	xor    edx,edx
c0006c4a:	88 c2                	mov    dl,al
c0006c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c50:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c5b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c61:	31 d2                	xor    edx,edx
c0006c63:	88 c2                	mov    dl,al
c0006c65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c69:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c72:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c78:	8d 50 01             	lea    edx,[eax+0x1]
c0006c7b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006c7f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006c85:	31 d2                	xor    edx,edx
c0006c87:	88 c2                	mov    dl,al
c0006c89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c8d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006c91:	83 e1 3f             	and    ecx,0x3f
c0006c94:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006c98:	90                   	nop
c0006c99:	83 c4 0c             	add    esp,0xc
c0006c9c:	c3                   	ret    
c0006c9d:	90                   	nop

c0006c9e <Computer::setBootMessage(char const*)>:
c0006c9e:	c3                   	ret    
c0006c9f:	90                   	nop

c0006ca0 <Computer::detectFeatures()>:
c0006ca0:	55                   	push   ebp
c0006ca1:	57                   	push   edi
c0006ca2:	56                   	push   esi
c0006ca3:	53                   	push   ebx
c0006ca4:	83 ec 1c             	sub    esp,0x1c
c0006ca7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006cab:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006cb5:	e8 3f 95 ff ff       	call   c00001f9 <detectCPUID>
c0006cba:	85 c0                	test   eax,eax
c0006cbc:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006cc2:	0f 95 c2             	setne  dl
c0006cc5:	83 e0 fd             	and    eax,0xfffffffd
c0006cc8:	01 d2                	add    edx,edx
c0006cca:	09 d0                	or     eax,edx
c0006ccc:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cd2:	a8 02                	test   al,0x2
c0006cd4:	75 46                	jne    c0006d1c <Computer::detectFeatures()+0x7c>
c0006cd6:	f6 05 d1 3e 02 c0 04 	test   BYTE PTR ds:0xc0023ed1,0x4
c0006cdd:	74 07                	je     c0006ce6 <Computer::detectFeatures()+0x46>
c0006cdf:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006ce6:	e8 2b 68 01 00       	call   c001d516 <x87Detect>
c0006ceb:	83 e0 01             	and    eax,0x1
c0006cee:	c1 e0 04             	shl    eax,0x4
c0006cf1:	88 c2                	mov    dl,al
c0006cf3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006cf9:	83 e0 ef             	and    eax,0xffffffef
c0006cfc:	09 d0                	or     eax,edx
c0006cfe:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d04:	a8 10                	test   al,0x10
c0006d06:	0f 85 2a 01 00 00    	jne    c0006e36 <Computer::detectFeatures()+0x196>
c0006d0c:	84 c0                	test   al,al
c0006d0e:	0f 88 45 01 00 00    	js     c0006e59 <Computer::detectFeatures()+0x1b9>
c0006d14:	83 c4 1c             	add    esp,0x1c
c0006d17:	5b                   	pop    ebx
c0006d18:	5e                   	pop    esi
c0006d19:	5f                   	pop    edi
c0006d1a:	5d                   	pop    ebp
c0006d1b:	c3                   	ret    
c0006d1c:	83 ec 0c             	sub    esp,0xc
c0006d1f:	6a 20                	push   0x20
c0006d21:	e8 2a 85 00 00       	call   c000f250 <CPU::cpuidCheckEDX(unsigned int)>
c0006d26:	83 e0 01             	and    eax,0x1
c0006d29:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006d30:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d36:	83 e0 f7             	and    eax,0xfffffff7
c0006d39:	09 d0                	or     eax,edx
c0006d3b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d41:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006d48:	e8 03 85 00 00       	call   c000f250 <CPU::cpuidCheckEDX(unsigned int)>
c0006d4d:	83 e0 01             	and    eax,0x1
c0006d50:	88 c2                	mov    dl,al
c0006d52:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006d58:	83 e0 fe             	and    eax,0xfffffffe
c0006d5b:	09 d0                	or     eax,edx
c0006d5d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006d63:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006d6a:	e8 e1 84 00 00       	call   c000f250 <CPU::cpuidCheckEDX(unsigned int)>
c0006d6f:	c1 e0 07             	shl    eax,0x7
c0006d72:	88 c2                	mov    dl,al
c0006d74:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006d7a:	83 e0 7f             	and    eax,0x7f
c0006d7d:	09 d0                	or     eax,edx
c0006d7f:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006d85:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006d8c:	e8 bf 84 00 00       	call   c000f250 <CPU::cpuidCheckEDX(unsigned int)>
c0006d91:	83 c4 10             	add    esp,0x10
c0006d94:	83 e0 01             	and    eax,0x1
c0006d97:	c1 e0 05             	shl    eax,0x5
c0006d9a:	88 c2                	mov    dl,al
c0006d9c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006da2:	83 e0 df             	and    eax,0xffffffdf
c0006da5:	09 d0                	or     eax,edx
c0006da7:	f7 05 d0 3e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0023ed0,0x401
c0006db1:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006db7:	0f 84 c2 00 00 00    	je     c0006e7f <Computer::detectFeatures()+0x1df>
c0006dbd:	83 e0 fe             	and    eax,0xfffffffe
c0006dc0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006dc6:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006dcc:	88 c2                	mov    dl,al
c0006dce:	83 e2 09             	and    edx,0x9
c0006dd1:	fe ca                	dec    dl
c0006dd3:	75 09                	jne    c0006dde <Computer::detectFeatures()+0x13e>
c0006dd5:	83 e0 fe             	and    eax,0xfffffffe
c0006dd8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006dde:	83 ec 0c             	sub    esp,0xc
c0006de1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006de5:	50                   	push   eax
c0006de6:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006dea:	55                   	push   ebp
c0006deb:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006def:	57                   	push   edi
c0006df0:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006df4:	56                   	push   esi
c0006df5:	68 00 00 00 80       	push   0x80000000
c0006dfa:	e8 cd 83 00 00       	call   c000f1cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006dff:	83 c4 20             	add    esp,0x20
c0006e02:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006e09:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006e0d:	0f 86 c3 fe ff ff    	jbe    c0006cd6 <Computer::detectFeatures()+0x36>
c0006e13:	83 ec 0c             	sub    esp,0xc
c0006e16:	50                   	push   eax
c0006e17:	55                   	push   ebp
c0006e18:	57                   	push   edi
c0006e19:	56                   	push   esi
c0006e1a:	68 01 00 00 80       	push   0x80000001
c0006e1f:	e8 a8 83 00 00       	call   c000f1cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006e24:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006e2e:	83 c4 20             	add    esp,0x20
c0006e31:	e9 a0 fe ff ff       	jmp    c0006cd6 <Computer::detectFeatures()+0x36>
c0006e36:	e8 95 66 01 00       	call   c001d4d0 <absolutelyNoChanceInHell>
c0006e3b:	88 c2                	mov    dl,al
c0006e3d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e43:	c1 e2 07             	shl    edx,0x7
c0006e46:	83 e0 7f             	and    eax,0x7f
c0006e49:	09 d0                	or     eax,edx
c0006e4b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006e51:	84 c0                	test   al,al
c0006e53:	0f 89 bb fe ff ff    	jns    c0006d14 <Computer::detectFeatures()+0x74>
c0006e59:	e8 92 63 01 00       	call   c001d1f0 <avxDetect>
c0006e5e:	83 e0 01             	and    eax,0x1
c0006e61:	c1 e0 05             	shl    eax,0x5
c0006e64:	88 c2                	mov    dl,al
c0006e66:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006e6c:	83 e0 df             	and    eax,0xffffffdf
c0006e6f:	09 d0                	or     eax,edx
c0006e71:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006e77:	83 c4 1c             	add    esp,0x1c
c0006e7a:	5b                   	pop    ebx
c0006e7b:	5e                   	pop    esi
c0006e7c:	5f                   	pop    edi
c0006e7d:	5d                   	pop    ebp
c0006e7e:	c3                   	ret    
c0006e7f:	83 ec 0c             	sub    esp,0xc
c0006e82:	68 00 02 00 00       	push   0x200
c0006e87:	e8 c4 83 00 00       	call   c000f250 <CPU::cpuidCheckEDX(unsigned int)>
c0006e8c:	83 c4 10             	add    esp,0x10
c0006e8f:	83 e0 01             	and    eax,0x1
c0006e92:	88 c2                	mov    dl,al
c0006e94:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e9a:	83 e0 fe             	and    eax,0xfffffffe
c0006e9d:	09 d0                	or     eax,edx
c0006e9f:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ea5:	e9 1c ff ff ff       	jmp    c0006dc6 <Computer::detectFeatures()+0x126>

c0006eaa <Computer::displayFeatures()>:
c0006eaa:	c3                   	ret    
c0006eab:	90                   	nop

c0006eac <Computer::rdmsr(unsigned int)>:
c0006eac:	83 ec 0c             	sub    esp,0xc
c0006eaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006eb3:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006eba:	74 0a                	je     c0006ec6 <Computer::rdmsr(unsigned int)+0x1a>
c0006ebc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006ec0:	0f 32                	rdmsr  
c0006ec2:	83 c4 0c             	add    esp,0xc
c0006ec5:	c3                   	ret    
c0006ec6:	83 ec 0c             	sub    esp,0xc
c0006ec9:	68 96 ec 01 c0       	push   0xc001ec96
c0006ece:	e8 c8 94 00 00       	call   c001039b <KePanic(char const*)>
c0006ed3:	83 c4 10             	add    esp,0x10
c0006ed6:	eb e4                	jmp    c0006ebc <Computer::rdmsr(unsigned int)+0x10>

c0006ed8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006ed8:	57                   	push   edi
c0006ed9:	56                   	push   esi
c0006eda:	52                   	push   edx
c0006edb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006edf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006ee3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006ee7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006eee:	74 0e                	je     c0006efe <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006ef0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006ef4:	89 f0                	mov    eax,esi
c0006ef6:	89 fa                	mov    edx,edi
c0006ef8:	0f 30                	wrmsr  
c0006efa:	58                   	pop    eax
c0006efb:	5e                   	pop    esi
c0006efc:	5f                   	pop    edi
c0006efd:	c3                   	ret    
c0006efe:	83 ec 0c             	sub    esp,0xc
c0006f01:	68 9c ec 01 c0       	push   0xc001ec9c
c0006f06:	e8 90 94 00 00       	call   c001039b <KePanic(char const*)>
c0006f0b:	83 c4 10             	add    esp,0x10
c0006f0e:	eb e0                	jmp    c0006ef0 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006f10 <Computer::shutdown()>:
c0006f10:	83 ec 0c             	sub    esp,0xc
c0006f13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006f17:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f19:	6a 00                	push   0x0
c0006f1b:	6a 00                	push   0x0
c0006f1d:	6a 00                	push   0x0
c0006f1f:	50                   	push   eax
c0006f20:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006f23:	83 c4 1c             	add    esp,0x1c
c0006f26:	c3                   	ret    
c0006f27:	90                   	nop

c0006f28 <Computer::restart()>:
c0006f28:	83 ec 0c             	sub    esp,0xc
c0006f2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006f2f:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f31:	6a 00                	push   0x0
c0006f33:	6a 00                	push   0x0
c0006f35:	6a 01                	push   0x1
c0006f37:	50                   	push   eax
c0006f38:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006f3b:	83 c4 1c             	add    esp,0x1c
c0006f3e:	c3                   	ret    
c0006f3f:	90                   	nop

c0006f40 <Computer::sleep()>:
c0006f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f44:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006f4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f4e:	e9 75 7d 00 00       	jmp    c000ecc8 <ACPI::sleep()>
c0006f53:	90                   	nop

c0006f54 <Computer::nmiEnabled()>:
c0006f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f58:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006f5e:	c3                   	ret    
c0006f5f:	90                   	nop

c0006f60 <Computer::readCMOS(unsigned char)>:
c0006f60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f64:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006f6b:	19 c0                	sbb    eax,eax
c0006f6d:	83 e0 80             	and    eax,0xffffff80
c0006f70:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006f74:	e6 70                	out    0x70,al
c0006f76:	e4 71                	in     al,0x71
c0006f78:	c3                   	ret    
c0006f79:	90                   	nop

c0006f7a <Computer::enableNMI(bool)>:
c0006f7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006f7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f82:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006f88:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006f90:	eb ce                	jmp    c0006f60 <Computer::readCMOS(unsigned char)>

c0006f92 <Computer::open(int, int, void*)>:
c0006f92:	56                   	push   esi
c0006f93:	53                   	push   ebx
c0006f94:	83 ec 10             	sub    esp,0x10
c0006f97:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006f9b:	f6 05 d0 3e 02 c0 04 	test   BYTE PTR ds:0xc0023ed0,0x4
c0006fa2:	68 a2 ec 01 c0       	push   0xc001eca2
c0006fa7:	0f 94 05 e0 0f 02 c0 	sete   BYTE PTR ds:0xc0020fe0
c0006fae:	e8 70 8d 00 00       	call   c000fd23 <KeSetBootMessage(char const*)>
c0006fb3:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006fba:	e8 b6 08 00 00       	call   c0007875 <malloc>
c0006fbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0006fc2:	89 c6                	mov    esi,eax
c0006fc4:	e8 97 78 00 00       	call   c000e860 <ACPI::ACPI()>
c0006fc9:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006fcf:	58                   	pop    eax
c0006fd0:	5a                   	pop    edx
c0006fd1:	56                   	push   esi
c0006fd2:	53                   	push   ebx
c0006fd3:	e8 70 4a 00 00       	call   c000ba48 <Device::addChild(Device*)>
c0006fd8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006fdb:	e8 c0 fc ff ff       	call   c0006ca0 <Computer::detectFeatures()>
c0006fe0:	59                   	pop    ecx
c0006fe1:	5e                   	pop    esi
c0006fe2:	6a 01                	push   0x1
c0006fe4:	53                   	push   ebx
c0006fe5:	e8 90 ff ff ff       	call   c0006f7a <Computer::enableNMI(bool)>
c0006fea:	c7 04 24 ba ec 01 c0 	mov    DWORD PTR [esp],0xc001ecba
c0006ff1:	e8 2d 8d 00 00       	call   c000fd23 <KeSetBootMessage(char const*)>
c0006ff6:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006ffd:	e8 73 08 00 00       	call   c0007875 <malloc>
c0007002:	89 04 24             	mov    DWORD PTR [esp],eax
c0007005:	89 c6                	mov    esi,eax
c0007007:	e8 fc 82 00 00       	call   c000f308 <CPU::CPU()>
c000700c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007012:	58                   	pop    eax
c0007013:	5a                   	pop    edx
c0007014:	56                   	push   esi
c0007015:	53                   	push   ebx
c0007016:	e8 2d 4a 00 00       	call   c000ba48 <Device::addChild(Device*)>
c000701b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007021:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007025:	8b 10                	mov    edx,DWORD PTR [eax]
c0007027:	51                   	push   ecx
c0007028:	6a 00                	push   0x0
c000702a:	6a 00                	push   0x0
c000702c:	50                   	push   eax
c000702d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007030:	83 c4 14             	add    esp,0x14
c0007033:	68 68 ed 01 c0       	push   0xc001ed68
c0007038:	e8 e6 8c 00 00       	call   c000fd23 <KeSetBootMessage(char const*)>
c000703d:	e8 3b f3 00 00       	call   c001637d <HalInitialiseCoprocessor()>
c0007042:	c7 04 24 d4 ec 01 c0 	mov    DWORD PTR [esp],0xc001ecd4
c0007049:	e8 d5 8c 00 00       	call   c000fd23 <KeSetBootMessage(char const*)>
c000704e:	c7 04 24 b9 6a 00 c0 	mov    DWORD PTR [esp],0xc0006ab9
c0007055:	e8 96 d4 00 00       	call   c00144f0 <setupMultitasking(void (*)())>
c000705a:	83 c4 14             	add    esp,0x14
c000705d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007062:	5b                   	pop    ebx
c0007063:	5e                   	pop    esi
c0007064:	c3                   	ret    
c0007065:	90                   	nop

c0007066 <Computer::disableNMI()>:
c0007066:	6a 00                	push   0x0
c0007068:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000706c:	50                   	push   eax
c000706d:	e8 08 ff ff ff       	call   c0006f7a <Computer::enableNMI(bool)>
c0007072:	5a                   	pop    edx
c0007073:	59                   	pop    ecx
c0007074:	c3                   	ret    
c0007075:	90                   	nop

c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007076:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000707a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0007081:	19 c0                	sbb    eax,eax
c0007083:	83 e0 80             	and    eax,0xffffff80
c0007086:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000708a:	e6 70                	out    0x70,al
c000708c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007090:	e6 71                	out    0x71,al
c0007092:	c3                   	ret    
c0007093:	90                   	nop

c0007094 <Computer::handleNMI()>:
c0007094:	56                   	push   esi
c0007095:	53                   	push   ebx
c0007096:	83 ec 10             	sub    esp,0x10
c0007099:	e4 92                	in     al,0x92
c000709b:	89 c6                	mov    esi,eax
c000709d:	e4 61                	in     al,0x61
c000709f:	68 ef ec 01 c0       	push   0xc001ecef
c00070a4:	88 c3                	mov    bl,al
c00070a6:	e8 5f 35 00 00       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c00070ab:	83 c4 10             	add    esp,0x10
c00070ae:	83 e6 10             	and    esi,0x10
c00070b1:	75 0d                	jne    c00070c0 <Computer::handleNMI()+0x2c>
c00070b3:	f6 c3 40             	test   bl,0x40
c00070b6:	75 1d                	jne    c00070d5 <Computer::handleNMI()+0x41>
c00070b8:	84 db                	test   bl,bl
c00070ba:	78 2d                	js     c00070e9 <Computer::handleNMI()+0x55>
c00070bc:	58                   	pop    eax
c00070bd:	5b                   	pop    ebx
c00070be:	5e                   	pop    esi
c00070bf:	c3                   	ret    
c00070c0:	83 ec 0c             	sub    esp,0xc
c00070c3:	68 00 ed 01 c0       	push   0xc001ed00
c00070c8:	e8 ce 92 00 00       	call   c001039b <KePanic(char const*)>
c00070cd:	83 c4 10             	add    esp,0x10
c00070d0:	f6 c3 40             	test   bl,0x40
c00070d3:	74 e3                	je     c00070b8 <Computer::handleNMI()+0x24>
c00070d5:	83 ec 0c             	sub    esp,0xc
c00070d8:	68 0d ed 01 c0       	push   0xc001ed0d
c00070dd:	e8 b9 92 00 00       	call   c001039b <KePanic(char const*)>
c00070e2:	83 c4 10             	add    esp,0x10
c00070e5:	84 db                	test   bl,bl
c00070e7:	79 d3                	jns    c00070bc <Computer::handleNMI()+0x28>
c00070e9:	c7 44 24 10 17 ed 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ed17
c00070f1:	5a                   	pop    edx
c00070f2:	5b                   	pop    ebx
c00070f3:	5e                   	pop    esi
c00070f4:	e9 a2 92 00 00       	jmp    c001039b <KePanic(char const*)>
c00070f9:	90                   	nop

c00070fa <GDTEntry::setBase(unsigned int)>:
c00070fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070fe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007102:	89 c1                	mov    ecx,eax
c0007104:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007108:	c1 e9 10             	shr    ecx,0x10
c000710b:	c1 e8 18             	shr    eax,0x18
c000710e:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007111:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007114:	c3                   	ret    
c0007115:	90                   	nop

c0007116 <GDTEntry::setLimit(unsigned int)>:
c0007116:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000711a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007121:	66 89 01             	mov    WORD PTR [ecx],ax
c0007124:	83 e2 f0             	and    edx,0xfffffff0
c0007127:	c1 e8 10             	shr    eax,0x10
c000712a:	83 e0 0f             	and    eax,0xf
c000712d:	09 d0                	or     eax,edx
c000712f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007132:	c3                   	ret    
c0007133:	90                   	nop

c0007134 <GDT::GDT()>:
c0007134:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007138:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000713e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007142:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007148:	90                   	nop
c0007149:	c3                   	ret    

c000714a <GDT::addEntry(GDTEntry)>:
c000714a:	53                   	push   ebx
c000714b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000714f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007153:	8b 02                	mov    eax,DWORD PTR [edx]
c0007155:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007159:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000715d:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007161:	8d 48 01             	lea    ecx,[eax+0x1]
c0007164:	c1 e0 03             	shl    eax,0x3
c0007167:	89 0a                	mov    DWORD PTR [edx],ecx
c0007169:	5b                   	pop    ebx
c000716a:	c3                   	ret    
c000716b:	90                   	nop

c000716c <GDT::getNumberOfEntries()>:
c000716c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007170:	8b 00                	mov    eax,DWORD PTR [eax]
c0007172:	c3                   	ret    
c0007173:	90                   	nop

c0007174 <GDT::flush()>:
c0007174:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007178:	8b 10                	mov    edx,DWORD PTR [eax]
c000717a:	83 c0 04             	add    eax,0x4
c000717d:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0007184:	a3 c2 3e 02 c0       	mov    ds:0xc0023ec2,eax
c0007189:	66 89 15 c0 3e 02 c0 	mov    WORD PTR ds:0xc0023ec0,dx
c0007190:	e9 c8 91 ff ff       	jmp    c000035d <loadGDT>
c0007195:	90                   	nop

c0007196 <GDT::setup()>:
c0007196:	57                   	push   edi
c0007197:	56                   	push   esi
c0007198:	53                   	push   ebx
c0007199:	83 ec 30             	sub    esp,0x30
c000719c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a0:	6a 00                	push   0x0
c00071a2:	8d 74 24 14          	lea    esi,[esp+0x14]
c00071a6:	56                   	push   esi
c00071a7:	e8 4e ff ff ff       	call   c00070fa <GDTEntry::setBase(unsigned int)>
c00071ac:	6a 00                	push   0x0
c00071ae:	56                   	push   esi
c00071af:	e8 62 ff ff ff       	call   c0007116 <GDTEntry::setLimit(unsigned int)>
c00071b4:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00071bc:	6a 00                	push   0x0
c00071be:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00071c2:	56                   	push   esi
c00071c3:	e8 32 ff ff ff       	call   c00070fa <GDTEntry::setBase(unsigned int)>
c00071c8:	68 ff ff ff 00       	push   0xffffff
c00071cd:	56                   	push   esi
c00071ce:	e8 43 ff ff ff       	call   c0007116 <GDTEntry::setLimit(unsigned int)>
c00071d3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00071d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00071db:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00071df:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00071e3:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00071e8:	0d 00 9a c0 00       	or     eax,0xc09a00
c00071ed:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00071f1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00071f5:	89 f8                	mov    eax,edi
c00071f7:	89 fa                	mov    edx,edi
c00071f9:	80 e4 f7             	and    ah,0xf7
c00071fc:	80 ce 60             	or     dh,0x60
c00071ff:	89 c7                	mov    edi,eax
c0007201:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007205:	80 cc 60             	or     ah,0x60
c0007208:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000720c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007210:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007214:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007218:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000721c:	83 c4 20             	add    esp,0x20
c000721f:	6a 00                	push   0x0
c0007221:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007225:	50                   	push   eax
c0007226:	e8 cf fe ff ff       	call   c00070fa <GDTEntry::setBase(unsigned int)>
c000722b:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000722f:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007233:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c0007238:	6a 00                	push   0x0
c000723a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000723e:	50                   	push   eax
c000723f:	e8 b6 fe ff ff       	call   c00070fa <GDTEntry::setBase(unsigned int)>
c0007244:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c0007249:	83 c4 0c             	add    esp,0xc
c000724c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007250:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007254:	53                   	push   ebx
c0007255:	e8 f0 fe ff ff       	call   c000714a <GDT::addEntry(GDTEntry)>
c000725a:	83 c4 0c             	add    esp,0xc
c000725d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007261:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007265:	53                   	push   ebx
c0007266:	e8 df fe ff ff       	call   c000714a <GDT::addEntry(GDTEntry)>
c000726b:	83 c4 0c             	add    esp,0xc
c000726e:	57                   	push   edi
c000726f:	56                   	push   esi
c0007270:	53                   	push   ebx
c0007271:	e8 d4 fe ff ff       	call   c000714a <GDT::addEntry(GDTEntry)>
c0007276:	83 c4 0c             	add    esp,0xc
c0007279:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000727d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007281:	53                   	push   ebx
c0007282:	e8 c3 fe ff ff       	call   c000714a <GDT::addEntry(GDTEntry)>
c0007287:	83 c4 0c             	add    esp,0xc
c000728a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000728e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007292:	53                   	push   ebx
c0007293:	e8 b2 fe ff ff       	call   c000714a <GDT::addEntry(GDTEntry)>
c0007298:	83 c4 0c             	add    esp,0xc
c000729b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000729f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072a3:	53                   	push   ebx
c00072a4:	e8 a1 fe ff ff       	call   c000714a <GDT::addEntry(GDTEntry)>
c00072a9:	83 c4 0c             	add    esp,0xc
c00072ac:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00072b0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00072b4:	53                   	push   ebx
c00072b5:	e8 90 fe ff ff       	call   c000714a <GDT::addEntry(GDTEntry)>
c00072ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00072bd:	e8 b2 fe ff ff       	call   c0007174 <GDT::flush()>
c00072c2:	83 c4 40             	add    esp,0x40
c00072c5:	5b                   	pop    ebx
c00072c6:	5e                   	pop    esi
c00072c7:	5f                   	pop    edi
c00072c8:	c3                   	ret    

c00072c9 <idleFunction(void*)>:
c00072c9:	83 ec 0c             	sub    esp,0xc
c00072cc:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00072d1:	48                   	dec    eax
c00072d2:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00072d7:	75 01                	jne    c00072da <idleFunction(void*)+0x11>
c00072d9:	fb                   	sti    
c00072da:	e8 78 ed 00 00       	call   c0016057 <HalSystemIdle()>
c00072df:	e8 ee 67 01 00       	call   c001dad2 <idleCommon()>
c00072e4:	eb f4                	jmp    c00072da <idleFunction(void*)+0x11>
c00072e6:	66 90                	xchg   ax,ax

c00072e8 <IDTEntry::IDTEntry(bool)>:
c00072e8:	83 ec 04             	sub    esp,0x4
c00072eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072ef:	88 04 24             	mov    BYTE PTR [esp],al
c00072f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072f6:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00072fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007300:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007304:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007308:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000730b:	83 e2 f0             	and    edx,0xfffffff0
c000730e:	83 ca 0e             	or     edx,0xe
c0007311:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007314:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007318:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000731b:	83 e2 ef             	and    edx,0xffffffef
c000731e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007321:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007325:	74 05                	je     c000732c <IDTEntry::IDTEntry(bool)+0x44>
c0007327:	b2 03                	mov    dl,0x3
c0007329:	eb 05                	jmp    c0007330 <IDTEntry::IDTEntry(bool)+0x48>
c000732b:	90                   	nop
c000732c:	b2 00                	mov    dl,0x0
c000732e:	66 90                	xchg   ax,ax
c0007330:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007334:	83 e2 03             	and    edx,0x3
c0007337:	88 d1                	mov    cl,dl
c0007339:	c1 e1 05             	shl    ecx,0x5
c000733c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000733f:	83 e2 9f             	and    edx,0xffffff9f
c0007342:	09 ca                	or     edx,ecx
c0007344:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007347:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000734b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000734e:	83 ca 80             	or     edx,0xffffff80
c0007351:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007354:	90                   	nop
c0007355:	83 c4 04             	add    esp,0x4
c0007358:	c3                   	ret    
c0007359:	90                   	nop

c000735a <IDTEntry::setOffset(unsigned int)>:
c000735a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000735e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007362:	66 89 02             	mov    WORD PTR [edx],ax
c0007365:	c1 e8 10             	shr    eax,0x10
c0007368:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000736c:	c3                   	ret    
c000736d:	90                   	nop
c000736e:	66 90                	xchg   ax,ax

c0007370 <IDT::IDT()>:
c0007370:	90                   	nop
c0007371:	c3                   	ret    

c0007372 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0007372:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007376:	83 c0 30             	add    eax,0x30
c0007379:	c3                   	ret    

c000737a <IDT::addEntry(IDTEntry, int)>:
c000737a:	53                   	push   ebx
c000737b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000737f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007383:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007387:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000738b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000738e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0007392:	5b                   	pop    ebx
c0007393:	c3                   	ret    

c0007394 <IDT::addEntry(int, void (*)(), bool)>:
c0007394:	53                   	push   ebx
c0007395:	83 ec 10             	sub    esp,0x10
c0007398:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000739d:	50                   	push   eax
c000739e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00073a2:	53                   	push   ebx
c00073a3:	e8 40 ff ff ff       	call   c00072e8 <IDTEntry::IDTEntry(bool)>
c00073a8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00073ac:	53                   	push   ebx
c00073ad:	e8 a8 ff ff ff       	call   c000735a <IDTEntry::setOffset(unsigned int)>
c00073b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00073b6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00073ba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00073be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00073c2:	e8 b3 ff ff ff       	call   c000737a <IDT::addEntry(IDTEntry, int)>
c00073c7:	83 c4 30             	add    esp,0x30
c00073ca:	5b                   	pop    ebx
c00073cb:	c3                   	ret    

c00073cc <IDT::flush()>:
c00073cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073d0:	66 c7 05 c8 3e 02 c0 ff 07 	mov    WORD PTR ds:0xc0023ec8,0x7ff
c00073d9:	a3 ca 3e 02 c0       	mov    ds:0xc0023eca,eax
c00073de:	0f 01 1d c8 3e 02 c0 	lidtd  ds:0xc0023ec8
c00073e5:	c3                   	ret    

c00073e6 <IDT::setup()>:
c00073e6:	57                   	push   edi
c00073e7:	56                   	push   esi
c00073e8:	53                   	push   ebx
c00073e9:	83 ec 10             	sub    esp,0x10
c00073ec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00073f0:	6a 00                	push   0x0
c00073f2:	68 80 d2 01 c0       	push   0xc001d280
c00073f7:	6a 00                	push   0x0
c00073f9:	53                   	push   ebx
c00073fa:	e8 95 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00073ff:	6a 00                	push   0x0
c0007401:	68 90 d2 01 c0       	push   0xc001d290
c0007406:	6a 01                	push   0x1
c0007408:	53                   	push   ebx
c0007409:	e8 86 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000740e:	83 c4 20             	add    esp,0x20
c0007411:	6a 00                	push   0x0
c0007413:	68 9a d2 01 c0       	push   0xc001d29a
c0007418:	6a 02                	push   0x2
c000741a:	53                   	push   ebx
c000741b:	e8 74 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007420:	6a 00                	push   0x0
c0007422:	68 a4 d2 01 c0       	push   0xc001d2a4
c0007427:	6a 03                	push   0x3
c0007429:	53                   	push   ebx
c000742a:	e8 65 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000742f:	83 c4 20             	add    esp,0x20
c0007432:	6a 00                	push   0x0
c0007434:	68 ae d2 01 c0       	push   0xc001d2ae
c0007439:	6a 04                	push   0x4
c000743b:	53                   	push   ebx
c000743c:	e8 53 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007441:	6a 00                	push   0x0
c0007443:	68 b8 d2 01 c0       	push   0xc001d2b8
c0007448:	6a 05                	push   0x5
c000744a:	53                   	push   ebx
c000744b:	e8 44 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007450:	83 c4 20             	add    esp,0x20
c0007453:	6a 00                	push   0x0
c0007455:	68 c2 d2 01 c0       	push   0xc001d2c2
c000745a:	6a 06                	push   0x6
c000745c:	53                   	push   ebx
c000745d:	e8 32 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007462:	6a 00                	push   0x0
c0007464:	68 cc d2 01 c0       	push   0xc001d2cc
c0007469:	6a 07                	push   0x7
c000746b:	53                   	push   ebx
c000746c:	e8 23 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007471:	83 c4 20             	add    esp,0x20
c0007474:	6a 00                	push   0x0
c0007476:	68 d6 d2 01 c0       	push   0xc001d2d6
c000747b:	6a 08                	push   0x8
c000747d:	53                   	push   ebx
c000747e:	e8 11 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007483:	6a 00                	push   0x0
c0007485:	68 de d2 01 c0       	push   0xc001d2de
c000748a:	6a 09                	push   0x9
c000748c:	53                   	push   ebx
c000748d:	e8 02 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007492:	83 c4 20             	add    esp,0x20
c0007495:	6a 00                	push   0x0
c0007497:	68 e8 d2 01 c0       	push   0xc001d2e8
c000749c:	6a 0a                	push   0xa
c000749e:	53                   	push   ebx
c000749f:	e8 f0 fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00074a4:	6a 00                	push   0x0
c00074a6:	68 f0 d2 01 c0       	push   0xc001d2f0
c00074ab:	6a 0b                	push   0xb
c00074ad:	53                   	push   ebx
c00074ae:	e8 e1 fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00074b3:	83 c4 20             	add    esp,0x20
c00074b6:	6a 00                	push   0x0
c00074b8:	68 f8 d2 01 c0       	push   0xc001d2f8
c00074bd:	6a 0c                	push   0xc
c00074bf:	53                   	push   ebx
c00074c0:	e8 cf fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00074c5:	6a 00                	push   0x0
c00074c7:	68 00 d3 01 c0       	push   0xc001d300
c00074cc:	6a 0d                	push   0xd
c00074ce:	53                   	push   ebx
c00074cf:	e8 c0 fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00074d4:	83 c4 20             	add    esp,0x20
c00074d7:	6a 00                	push   0x0
c00074d9:	68 08 d3 01 c0       	push   0xc001d308
c00074de:	6a 0e                	push   0xe
c00074e0:	53                   	push   ebx
c00074e1:	e8 ae fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00074e6:	6a 00                	push   0x0
c00074e8:	68 10 d3 01 c0       	push   0xc001d310
c00074ed:	6a 0f                	push   0xf
c00074ef:	53                   	push   ebx
c00074f0:	e8 9f fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00074f5:	83 c4 20             	add    esp,0x20
c00074f8:	6a 00                	push   0x0
c00074fa:	68 1a d3 01 c0       	push   0xc001d31a
c00074ff:	6a 10                	push   0x10
c0007501:	53                   	push   ebx
c0007502:	e8 8d fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007507:	6a 00                	push   0x0
c0007509:	68 24 d3 01 c0       	push   0xc001d324
c000750e:	6a 11                	push   0x11
c0007510:	53                   	push   ebx
c0007511:	e8 7e fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007516:	83 c4 20             	add    esp,0x20
c0007519:	6a 00                	push   0x0
c000751b:	68 2e d3 01 c0       	push   0xc001d32e
c0007520:	6a 12                	push   0x12
c0007522:	53                   	push   ebx
c0007523:	e8 6c fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007528:	6a 01                	push   0x1
c000752a:	68 c8 d3 01 c0       	push   0xc001d3c8
c000752f:	6a 60                	push   0x60
c0007531:	53                   	push   ebx
c0007532:	e8 5d fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007537:	83 c4 20             	add    esp,0x20
c000753a:	6a 00                	push   0x0
c000753c:	68 cf d3 01 c0       	push   0xc001d3cf
c0007541:	6a 20                	push   0x20
c0007543:	53                   	push   ebx
c0007544:	e8 4b fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007549:	6a 00                	push   0x0
c000754b:	68 ba d3 01 c0       	push   0xc001d3ba
c0007550:	6a 21                	push   0x21
c0007552:	53                   	push   ebx
c0007553:	e8 3c fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007558:	83 c4 20             	add    esp,0x20
c000755b:	6a 00                	push   0x0
c000755d:	68 c1 d3 01 c0       	push   0xc001d3c1
c0007562:	6a 22                	push   0x22
c0007564:	53                   	push   ebx
c0007565:	e8 2a fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000756a:	6a 00                	push   0x0
c000756c:	68 38 d3 01 c0       	push   0xc001d338
c0007571:	6a 23                	push   0x23
c0007573:	53                   	push   ebx
c0007574:	e8 1b fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007579:	83 c4 20             	add    esp,0x20
c000757c:	6a 00                	push   0x0
c000757e:	68 42 d3 01 c0       	push   0xc001d342
c0007583:	6a 24                	push   0x24
c0007585:	53                   	push   ebx
c0007586:	e8 09 fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000758b:	6a 00                	push   0x0
c000758d:	68 4c d3 01 c0       	push   0xc001d34c
c0007592:	6a 25                	push   0x25
c0007594:	53                   	push   ebx
c0007595:	e8 fa fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000759a:	83 c4 20             	add    esp,0x20
c000759d:	6a 00                	push   0x0
c000759f:	68 56 d3 01 c0       	push   0xc001d356
c00075a4:	6a 26                	push   0x26
c00075a6:	53                   	push   ebx
c00075a7:	e8 e8 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00075ac:	6a 00                	push   0x0
c00075ae:	68 60 d3 01 c0       	push   0xc001d360
c00075b3:	6a 27                	push   0x27
c00075b5:	53                   	push   ebx
c00075b6:	e8 d9 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00075bb:	83 c4 20             	add    esp,0x20
c00075be:	6a 00                	push   0x0
c00075c0:	68 6a d3 01 c0       	push   0xc001d36a
c00075c5:	6a 28                	push   0x28
c00075c7:	53                   	push   ebx
c00075c8:	e8 c7 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00075cd:	6a 00                	push   0x0
c00075cf:	68 74 d3 01 c0       	push   0xc001d374
c00075d4:	6a 29                	push   0x29
c00075d6:	53                   	push   ebx
c00075d7:	e8 b8 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00075dc:	83 c4 20             	add    esp,0x20
c00075df:	6a 00                	push   0x0
c00075e1:	68 7e d3 01 c0       	push   0xc001d37e
c00075e6:	6a 2a                	push   0x2a
c00075e8:	53                   	push   ebx
c00075e9:	e8 a6 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00075ee:	6a 00                	push   0x0
c00075f0:	68 88 d3 01 c0       	push   0xc001d388
c00075f5:	6a 2b                	push   0x2b
c00075f7:	53                   	push   ebx
c00075f8:	e8 97 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00075fd:	83 c4 20             	add    esp,0x20
c0007600:	6a 00                	push   0x0
c0007602:	68 92 d3 01 c0       	push   0xc001d392
c0007607:	6a 2c                	push   0x2c
c0007609:	53                   	push   ebx
c000760a:	e8 85 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000760f:	6a 00                	push   0x0
c0007611:	68 9c d3 01 c0       	push   0xc001d39c
c0007616:	6a 2d                	push   0x2d
c0007618:	53                   	push   ebx
c0007619:	e8 76 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000761e:	83 c4 20             	add    esp,0x20
c0007621:	6a 00                	push   0x0
c0007623:	68 a6 d3 01 c0       	push   0xc001d3a6
c0007628:	6a 2e                	push   0x2e
c000762a:	53                   	push   ebx
c000762b:	e8 64 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007630:	6a 00                	push   0x0
c0007632:	68 b0 d3 01 c0       	push   0xc001d3b0
c0007637:	6a 2f                	push   0x2f
c0007639:	53                   	push   ebx
c000763a:	e8 55 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000763f:	83 c4 20             	add    esp,0x20
c0007642:	6a 00                	push   0x0
c0007644:	68 61 d4 01 c0       	push   0xc001d461
c0007649:	6a 30                	push   0x30
c000764b:	53                   	push   ebx
c000764c:	e8 43 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007651:	6a 00                	push   0x0
c0007653:	68 6b d4 01 c0       	push   0xc001d46b
c0007658:	6a 31                	push   0x31
c000765a:	53                   	push   ebx
c000765b:	e8 34 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007660:	83 c4 20             	add    esp,0x20
c0007663:	6a 00                	push   0x0
c0007665:	68 75 d4 01 c0       	push   0xc001d475
c000766a:	6a 32                	push   0x32
c000766c:	53                   	push   ebx
c000766d:	e8 22 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007672:	6a 00                	push   0x0
c0007674:	68 7f d4 01 c0       	push   0xc001d47f
c0007679:	6a 33                	push   0x33
c000767b:	53                   	push   ebx
c000767c:	e8 13 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007681:	83 c4 20             	add    esp,0x20
c0007684:	6a 00                	push   0x0
c0007686:	68 89 d4 01 c0       	push   0xc001d489
c000768b:	6a 34                	push   0x34
c000768d:	53                   	push   ebx
c000768e:	e8 01 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007693:	6a 00                	push   0x0
c0007695:	68 93 d4 01 c0       	push   0xc001d493
c000769a:	6a 35                	push   0x35
c000769c:	53                   	push   ebx
c000769d:	e8 f2 fc ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00076a2:	83 c4 20             	add    esp,0x20
c00076a5:	6a 00                	push   0x0
c00076a7:	68 9d d4 01 c0       	push   0xc001d49d
c00076ac:	6a 36                	push   0x36
c00076ae:	53                   	push   ebx
c00076af:	e8 e0 fc ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00076b4:	6a 00                	push   0x0
c00076b6:	68 a7 d4 01 c0       	push   0xc001d4a7
c00076bb:	6a 37                	push   0x37
c00076bd:	53                   	push   ebx
c00076be:	e8 d1 fc ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00076c3:	83 c4 1c             	add    esp,0x1c
c00076c6:	6a 03                	push   0x3
c00076c8:	6a 02                	push   0x2
c00076ca:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c00076d0:	e8 3f 24 00 00       	call   c0009b14 <VAS::allocatePages(int, int)>
c00076d5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00076dc:	89 c6                	mov    esi,eax
c00076de:	e8 92 01 00 00       	call   c0007875 <malloc>
c00076e3:	81 c6 00 20 00 00    	add    esi,0x2000
c00076e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00076ec:	89 c7                	mov    edi,eax
c00076ee:	e8 9d 15 00 00       	call   c0008c90 <TSS::TSS()>
c00076f3:	83 c4 0c             	add    esp,0xc
c00076f6:	68 d6 d2 01 c0       	push   0xc001d2d6
c00076fb:	56                   	push   esi
c00076fc:	57                   	push   edi
c00076fd:	e8 d2 15 00 00       	call   c0008cd4 <TSS::setup(unsigned long, unsigned long)>
c0007702:	89 c6                	mov    esi,eax
c0007704:	58                   	pop    eax
c0007705:	5a                   	pop    edx
c0007706:	6a 00                	push   0x0
c0007708:	8d 44 24 14          	lea    eax,[esp+0x14]
c000770c:	50                   	push   eax
c000770d:	e8 d6 fb ff ff       	call   c00072e8 <IDTEntry::IDTEntry(bool)>
c0007712:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007716:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000771b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007722:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007728:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000772c:	80 ce 05             	or     dh,0x5
c000772f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007732:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007736:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000773a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000773d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007740:	e8 87 fc ff ff       	call   c00073cc <IDT::flush()>
c0007745:	83 c4 20             	add    esp,0x20
c0007748:	5b                   	pop    ebx
c0007749:	5e                   	pop    esi
c000774a:	5f                   	pop    edi
c000774b:	c3                   	ret    

c000774c <sbrk>:
c000774c:	55                   	push   ebp
c000774d:	57                   	push   edi
c000774e:	56                   	push   esi
c000774f:	53                   	push   ebx
c0007750:	83 ec 1c             	sub    esp,0x1c
c0007753:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007757:	85 c0                	test   eax,eax
c0007759:	74 5f                	je     c00077ba <sbrk+0x6e>
c000775b:	78 64                	js     c00077c1 <sbrk+0x75>
c000775d:	8b 15 d4 0f 02 c0    	mov    edx,DWORD PTR ds:0xc0020fd4
c0007763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007767:	05 ff 0f 00 00       	add    eax,0xfff
c000776c:	89 c5                	mov    ebp,eax
c000776e:	78 69                	js     c00077d9 <sbrk+0x8d>
c0007770:	c1 fd 0c             	sar    ebp,0xc
c0007773:	bb 00 00 00 00       	mov    ebx,0x0
c0007778:	8b 35 b0 3f 02 c0    	mov    esi,DWORD PTR ds:0xc0023fb0
c000777e:	8b 3d d4 0f 02 c0    	mov    edi,DWORD PTR ds:0xc0020fd4
c0007784:	e8 c8 03 00 00       	call   c0007b51 <Phys::allocatePage()>
c0007789:	68 01 04 00 00       	push   0x401
c000778e:	57                   	push   edi
c000778f:	50                   	push   eax
c0007790:	56                   	push   esi
c0007791:	e8 7a 22 00 00       	call   c0009a10 <VAS::mapPage(unsigned long, unsigned long, int)>
c0007796:	81 05 d4 0f 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0020fd4,0x1000
c00077a0:	43                   	inc    ebx
c00077a1:	83 c4 10             	add    esp,0x10
c00077a4:	39 dd                	cmp    ebp,ebx
c00077a6:	75 d0                	jne    c0007778 <sbrk+0x2c>
c00077a8:	0f 20 d8             	mov    eax,cr3
c00077ab:	0f 22 d8             	mov    cr3,eax
c00077ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00077b2:	83 c4 1c             	add    esp,0x1c
c00077b5:	5b                   	pop    ebx
c00077b6:	5e                   	pop    esi
c00077b7:	5f                   	pop    edi
c00077b8:	5d                   	pop    ebp
c00077b9:	c3                   	ret    
c00077ba:	a1 d4 0f 02 c0       	mov    eax,ds:0xc0020fd4
c00077bf:	eb f1                	jmp    c00077b2 <sbrk+0x66>
c00077c1:	83 ec 08             	sub    esp,0x8
c00077c4:	50                   	push   eax
c00077c5:	68 b8 ed 01 c0       	push   0xc001edb8
c00077ca:	e8 3b 2e 00 00       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c00077cf:	83 c4 10             	add    esp,0x10
c00077d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00077d7:	eb d9                	jmp    c00077b2 <sbrk+0x66>
c00077d9:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c00077df:	eb 8f                	jmp    c0007770 <sbrk+0x24>

c00077e1 <mmap>:
c00077e1:	83 ec 18             	sub    esp,0x18
c00077e4:	68 e8 ed 01 c0       	push   0xc001ede8
c00077e9:	e8 ad 8b 00 00       	call   c001039b <KePanic(char const*)>
c00077ee:	b8 00 00 00 00       	mov    eax,0x0
c00077f3:	83 c4 1c             	add    esp,0x1c
c00077f6:	c3                   	ret    

c00077f7 <munmap>:
c00077f7:	83 ec 18             	sub    esp,0x18
c00077fa:	68 ed ed 01 c0       	push   0xc001eded
c00077ff:	e8 97 8b 00 00       	call   c001039b <KePanic(char const*)>
c0007804:	b8 00 00 00 00       	mov    eax,0x0
c0007809:	83 c4 1c             	add    esp,0x1c
c000780c:	c3                   	ret    

c000780d <liballoc_lock()>:
c000780d:	fa                   	cli    
c000780e:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0007814:	b8 00 00 00 00       	mov    eax,0x0
c0007819:	c3                   	ret    

c000781a <liballoc_unlock()>:
c000781a:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000781f:	48                   	dec    eax
c0007820:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0007825:	75 01                	jne    c0007828 <liballoc_unlock()+0xe>
c0007827:	fb                   	sti    
c0007828:	b8 00 00 00 00       	mov    eax,0x0
c000782d:	c3                   	ret    

c000782e <liballoc_alloc(int)>:
c000782e:	83 ec 10             	sub    esp,0x10
c0007831:	6a 01                	push   0x1
c0007833:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007837:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c000783d:	e8 d2 22 00 00       	call   c0009b14 <VAS::allocatePages(int, int)>
c0007842:	83 c4 1c             	add    esp,0x1c
c0007845:	c3                   	ret    

c0007846 <liballoc_free(void*, int)>:
c0007846:	83 ec 14             	sub    esp,0x14
c0007849:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000784d:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c0007853:	e8 0e 1f 00 00       	call   c0009766 <VAS::freeAllocatedPages(unsigned long)>
c0007858:	b8 00 00 00 00       	mov    eax,0x0
c000785d:	83 c4 1c             	add    esp,0x1c
c0007860:	c3                   	ret    

c0007861 <realloc>:
c0007861:	83 ec 14             	sub    esp,0x14
c0007864:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000786c:	e8 c0 9c ff ff       	call   c0001531 <dlrealloc>
c0007871:	83 c4 1c             	add    esp,0x1c
c0007874:	c3                   	ret    

c0007875 <malloc>:
c0007875:	83 ec 18             	sub    esp,0x18
c0007878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000787c:	e8 73 97 ff ff       	call   c0000ff4 <dlmalloc>
c0007881:	83 c4 1c             	add    esp,0x1c
c0007884:	c3                   	ret    

c0007885 <free>:
c0007885:	83 ec 18             	sub    esp,0x18
c0007888:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000788c:	e8 08 94 ff ff       	call   c0000c99 <dlfree>
c0007891:	83 c4 1c             	add    esp,0x1c
c0007894:	c3                   	ret    

c0007895 <rfree>:
c0007895:	83 ec 18             	sub    esp,0x18
c0007898:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000789c:	e8 f8 93 ff ff       	call   c0000c99 <dlfree>
c00078a1:	83 c4 1c             	add    esp,0x1c
c00078a4:	c3                   	ret    

c00078a5 <calloc>:
c00078a5:	56                   	push   esi
c00078a6:	53                   	push   ebx
c00078a7:	83 ec 10             	sub    esp,0x10
c00078aa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00078ae:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00078b3:	53                   	push   ebx
c00078b4:	e8 bc ff ff ff       	call   c0007875 <malloc>
c00078b9:	89 c6                	mov    esi,eax
c00078bb:	83 c4 0c             	add    esp,0xc
c00078be:	53                   	push   ebx
c00078bf:	6a 00                	push   0x0
c00078c1:	50                   	push   eax
c00078c2:	e8 09 8c ff ff       	call   c00004d0 <memset>
c00078c7:	89 f0                	mov    eax,esi
c00078c9:	83 c4 14             	add    esp,0x14
c00078cc:	5b                   	pop    ebx
c00078cd:	5e                   	pop    esi
c00078ce:	c3                   	ret    

c00078cf <KeEntryPoint>:
c00078cf:	57                   	push   edi
c00078d0:	bf f9 03 00 00       	mov    edi,0x3f9
c00078d5:	56                   	push   esi
c00078d6:	89 fa                	mov    edx,edi
c00078d8:	53                   	push   ebx
c00078d9:	31 f6                	xor    esi,esi
c00078db:	83 ec 2c             	sub    esp,0x2c
c00078de:	a1 00 05 00 00       	mov    eax,ds:0x500
c00078e3:	a3 d0 3e 02 c0       	mov    ds:0xc0023ed0,eax
c00078e8:	89 f0                	mov    eax,esi
c00078ea:	ee                   	out    dx,al
c00078eb:	bb fb 03 00 00       	mov    ebx,0x3fb
c00078f0:	b0 80                	mov    al,0x80
c00078f2:	89 da                	mov    edx,ebx
c00078f4:	ee                   	out    dx,al
c00078f5:	b1 03                	mov    cl,0x3
c00078f7:	ba f8 03 00 00       	mov    edx,0x3f8
c00078fc:	88 c8                	mov    al,cl
c00078fe:	ee                   	out    dx,al
c00078ff:	89 f0                	mov    eax,esi
c0007901:	89 fa                	mov    edx,edi
c0007903:	ee                   	out    dx,al
c0007904:	88 c8                	mov    al,cl
c0007906:	89 da                	mov    edx,ebx
c0007908:	ee                   	out    dx,al
c0007909:	b0 c7                	mov    al,0xc7
c000790b:	ba fa 03 00 00       	mov    edx,0x3fa
c0007910:	ee                   	out    dx,al
c0007911:	b0 0b                	mov    al,0xb
c0007913:	ba fc 03 00 00       	mov    edx,0x3fc
c0007918:	ee                   	out    dx,al
c0007919:	68 f4 ed 01 c0       	push   0xc001edf4
c000791e:	e8 e7 2c 00 00       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0007923:	e8 8d 83 00 00       	call   c000fcb5 <KeDisplaySplashScreen()>
c0007928:	a1 24 05 00 00       	mov    eax,ds:0x524
c000792d:	05 ff 0f 00 00       	add    eax,0xfff
c0007932:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007937:	89 04 24             	mov    DWORD PTR [esp],eax
c000793a:	e8 64 03 00 00       	call   c0007ca3 <Phys::physicalMemorySetup(unsigned int)>
c000793f:	e8 c8 1b 00 00       	call   c000950c <Virt::virtualMemorySetup()>
c0007944:	58                   	pop    eax
c0007945:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007949:	53                   	push   ebx
c000794a:	e8 95 1e 00 00       	call   c00097e4 <VAS::VAS()>
c000794f:	89 1d b0 3f 02 c0    	mov    DWORD PTR ds:0xc0023fb0,ebx
c0007955:	e8 10 61 01 00       	call   c001da6a <_init>
c000795a:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007961:	e8 0f ff ff ff       	call   c0007875 <malloc>
c0007966:	89 04 24             	mov    DWORD PTR [esp],eax
c0007969:	89 c6                	mov    esi,eax
c000796b:	e8 7c f2 ff ff       	call   c0006bec <Computer::Computer()>
c0007970:	6a 00                	push   0x0
c0007972:	89 35 b8 3e 02 c0    	mov    DWORD PTR ds:0xc0023eb8,esi
c0007978:	6a 00                	push   0x0
c000797a:	6a 00                	push   0x0
c000797c:	56                   	push   esi
c000797d:	e8 10 f6 ff ff       	call   c0006f92 <Computer::open(int, int, void*)>
c0007982:	83 c4 14             	add    esp,0x14
c0007985:	53                   	push   ebx
c0007986:	e8 21 1f 00 00       	call   c00098ac <VAS::~VAS()>
c000798b:	83 c4 30             	add    esp,0x30
c000798e:	5b                   	pop    ebx
c000798f:	5e                   	pop    esi
c0007990:	5f                   	pop    edi
c0007991:	c3                   	ret    

c0007992 <Phys::allocateDMA(unsigned long)>:
c0007992:	55                   	push   ebp
c0007993:	31 ed                	xor    ebp,ebp
c0007995:	57                   	push   edi
c0007996:	56                   	push   esi
c0007997:	53                   	push   ebx
c0007998:	31 db                	xor    ebx,ebx
c000799a:	83 ec 1c             	sub    esp,0x1c
c000799d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079a1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00079a9:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00079af:	31 c0                	xor    eax,eax
c00079b1:	c1 ef 0c             	shr    edi,0xc
c00079b4:	eb 19                	jmp    c00079cf <Phys::allocateDMA(unsigned long)+0x3d>
c00079b6:	85 c0                	test   eax,eax
c00079b8:	75 06                	jne    c00079c0 <Phys::allocateDMA(unsigned long)+0x2e>
c00079ba:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00079be:	89 dd                	mov    ebp,ebx
c00079c0:	8d 70 01             	lea    esi,[eax+0x1]
c00079c3:	39 f7                	cmp    edi,esi
c00079c5:	74 33                	je     c00079fa <Phys::allocateDMA(unsigned long)+0x68>
c00079c7:	89 f0                	mov    eax,esi
c00079c9:	43                   	inc    ebx
c00079ca:	83 fb 0f             	cmp    ebx,0xf
c00079cd:	7f 11                	jg     c00079e0 <Phys::allocateDMA(unsigned long)+0x4e>
c00079cf:	80 bb ec 3e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdc114],0x0
c00079d6:	74 de                	je     c00079b6 <Phys::allocateDMA(unsigned long)+0x24>
c00079d8:	31 c0                	xor    eax,eax
c00079da:	43                   	inc    ebx
c00079db:	83 fb 0f             	cmp    ebx,0xf
c00079de:	7e ef                	jle    c00079cf <Phys::allocateDMA(unsigned long)+0x3d>
c00079e0:	83 ec 0c             	sub    esp,0xc
c00079e3:	68 0c ee 01 c0       	push   0xc001ee0c
c00079e8:	e8 ae 89 00 00       	call   c001039b <KePanic(char const*)>
c00079ed:	83 c4 10             	add    esp,0x10
c00079f0:	31 c0                	xor    eax,eax
c00079f2:	83 c4 1c             	add    esp,0x1c
c00079f5:	5b                   	pop    ebx
c00079f6:	5e                   	pop    esi
c00079f7:	5f                   	pop    edi
c00079f8:	5d                   	pop    ebp
c00079f9:	c3                   	ret    
c00079fa:	89 e9                	mov    ecx,ebp
c00079fc:	c1 f9 04             	sar    ecx,0x4
c00079ff:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007a03:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007a07:	89 ca                	mov    edx,ecx
c0007a09:	4a                   	dec    edx
c0007a0a:	79 03                	jns    c0007a0f <Phys::allocateDMA(unsigned long)+0x7d>
c0007a0c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007a0f:	c1 fa 04             	sar    edx,0x4
c0007a12:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007a16:	74 08                	je     c0007a20 <Phys::allocateDMA(unsigned long)+0x8e>
c0007a18:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007a1c:	31 c0                	xor    eax,eax
c0007a1e:	eb ba                	jmp    c00079da <Phys::allocateDMA(unsigned long)+0x48>
c0007a20:	85 f6                	test   esi,esi
c0007a22:	74 15                	je     c0007a39 <Phys::allocateDMA(unsigned long)+0xa7>
c0007a24:	8d 95 ec 3e 02 c0    	lea    edx,[ebp-0x3ffdc114]
c0007a2a:	8d 84 05 ed 3e 02 c0 	lea    eax,[ebp+eax*1-0x3ffdc113]
c0007a31:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007a34:	42                   	inc    edx
c0007a35:	39 d0                	cmp    eax,edx
c0007a37:	75 f8                	jne    c0007a31 <Phys::allocateDMA(unsigned long)+0x9f>
c0007a39:	01 3d e4 3e 02 c0    	add    DWORD PTR ds:0xc0023ee4,edi
c0007a3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a43:	85 c0                	test   eax,eax
c0007a45:	74 17                	je     c0007a5e <Phys::allocateDMA(unsigned long)+0xcc>
c0007a47:	83 ec 0c             	sub    esp,0xc
c0007a4a:	68 0c ee 01 c0       	push   0xc001ee0c
c0007a4f:	e8 47 89 00 00       	call   c001039b <KePanic(char const*)>
c0007a54:	83 c4 10             	add    esp,0x10
c0007a57:	89 f0                	mov    eax,esi
c0007a59:	e9 6b ff ff ff       	jmp    c00079c9 <Phys::allocateDMA(unsigned long)+0x37>
c0007a5e:	c1 e5 0c             	shl    ebp,0xc
c0007a61:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007a67:	eb 89                	jmp    c00079f2 <Phys::allocateDMA(unsigned long)+0x60>

c0007a69 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007a69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a6d:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007a73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a77:	c1 ea 0c             	shr    edx,0xc
c0007a7a:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007a7f:	29 15 e4 3e 02 c0    	sub    DWORD PTR ds:0xc0023ee4,edx
c0007a85:	c1 e8 0c             	shr    eax,0xc
c0007a88:	85 d2                	test   edx,edx
c0007a8a:	74 0f                	je     c0007a9b <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0007a8c:	05 ec 3e 02 c0       	add    eax,0xc0023eec
c0007a91:	01 c2                	add    edx,eax
c0007a93:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007a96:	40                   	inc    eax
c0007a97:	39 d0                	cmp    eax,edx
c0007a99:	75 f8                	jne    c0007a93 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0007a9b:	c3                   	ret    

c0007a9c <Phys::setPageState(unsigned long, bool)>:
c0007a9c:	56                   	push   esi
c0007a9d:	ba 01 00 00 00       	mov    edx,0x1
c0007aa2:	53                   	push   ebx
c0007aa3:	8b 35 d8 0f 02 c0    	mov    esi,DWORD PTR ds:0xc0020fd8
c0007aa9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007aad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ab1:	89 c8                	mov    eax,ecx
c0007ab3:	83 e1 07             	and    ecx,0x7
c0007ab6:	c1 e8 03             	shr    eax,0x3
c0007ab9:	d3 e3                	shl    ebx,cl
c0007abb:	01 c6                	add    esi,eax
c0007abd:	d3 e2                	shl    edx,cl
c0007abf:	f7 d2                	not    edx
c0007ac1:	20 16                	and    BYTE PTR [esi],dl
c0007ac3:	03 05 d8 0f 02 c0    	add    eax,DWORD PTR ds:0xc0020fd8
c0007ac9:	08 18                	or     BYTE PTR [eax],bl
c0007acb:	5b                   	pop    ebx
c0007acc:	5e                   	pop    esi
c0007acd:	c3                   	ret    

c0007ace <Phys::getPageState(unsigned long)>:
c0007ace:	53                   	push   ebx
c0007acf:	8b 15 d8 0f 02 c0    	mov    edx,DWORD PTR ds:0xc0020fd8
c0007ad5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007ad9:	31 db                	xor    ebx,ebx
c0007adb:	89 c8                	mov    eax,ecx
c0007add:	83 e1 07             	and    ecx,0x7
c0007ae0:	c1 e8 03             	shr    eax,0x3
c0007ae3:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007ae6:	89 d8                	mov    eax,ebx
c0007ae8:	5b                   	pop    ebx
c0007ae9:	d3 f8                	sar    eax,cl
c0007aeb:	83 e0 01             	and    eax,0x1
c0007aee:	c3                   	ret    

c0007aef <Phys::freePage(unsigned long)>:
c0007aef:	53                   	push   ebx
c0007af0:	83 ec 08             	sub    esp,0x8
c0007af3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007af7:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007afd:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007b03:	76 3a                	jbe    c0007b3f <Phys::freePage(unsigned long)+0x50>
c0007b05:	c1 e8 0c             	shr    eax,0xc
c0007b08:	50                   	push   eax
c0007b09:	89 c3                	mov    ebx,eax
c0007b0b:	e8 be ff ff ff       	call   c0007ace <Phys::getPageState(unsigned long)>
c0007b10:	5a                   	pop    edx
c0007b11:	84 c0                	test   al,al
c0007b13:	74 19                	je     c0007b2e <Phys::freePage(unsigned long)+0x3f>
c0007b15:	83 ec 08             	sub    esp,0x8
c0007b18:	ff 0d e4 3e 02 c0    	dec    DWORD PTR ds:0xc0023ee4
c0007b1e:	6a 00                	push   0x0
c0007b20:	53                   	push   ebx
c0007b21:	e8 76 ff ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007b26:	83 c4 10             	add    esp,0x10
c0007b29:	83 c4 08             	add    esp,0x8
c0007b2c:	5b                   	pop    ebx
c0007b2d:	c3                   	ret    
c0007b2e:	c7 44 24 10 b1 ee 01 c0 	mov    DWORD PTR [esp+0x10],0xc001eeb1
c0007b36:	83 c4 08             	add    esp,0x8
c0007b39:	5b                   	pop    ebx
c0007b3a:	e9 5c 88 00 00       	jmp    c001039b <KePanic(char const*)>
c0007b3f:	68 00 10 00 00       	push   0x1000
c0007b44:	50                   	push   eax
c0007b45:	e8 1f ff ff ff       	call   c0007a69 <Phys::freeDMA(unsigned long, unsigned long)>
c0007b4a:	59                   	pop    ecx
c0007b4b:	5b                   	pop    ebx
c0007b4c:	83 c4 08             	add    esp,0x8
c0007b4f:	5b                   	pop    ebx
c0007b50:	c3                   	ret    

c0007b51 <Phys::allocatePage()>:
c0007b51:	56                   	push   esi
c0007b52:	53                   	push   ebx
c0007b53:	83 ec 14             	sub    esp,0x14
c0007b56:	8b 35 d8 3e 02 c0    	mov    esi,DWORD PTR ds:0xc0023ed8
c0007b5c:	89 f3                	mov    ebx,esi
c0007b5e:	eb 0a                	jmp    c0007b6a <Phys::allocatePage()+0x19>
c0007b60:	89 1d d8 3e 02 c0    	mov    DWORD PTR ds:0xc0023ed8,ebx
c0007b66:	39 de                	cmp    esi,ebx
c0007b68:	74 24                	je     c0007b8e <Phys::allocatePage()+0x3d>
c0007b6a:	53                   	push   ebx
c0007b6b:	e8 5e ff ff ff       	call   c0007ace <Phys::getPageState(unsigned long)>
c0007b70:	5a                   	pop    edx
c0007b71:	84 c0                	test   al,al
c0007b73:	74 5f                	je     c0007bd4 <Phys::allocatePage()+0x83>
c0007b75:	43                   	inc    ebx
c0007b76:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007b7c:	75 e2                	jne    c0007b60 <Phys::allocatePage()+0xf>
c0007b7e:	31 db                	xor    ebx,ebx
c0007b80:	c7 05 d8 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ed8,0x0
c0007b8a:	39 de                	cmp    esi,ebx
c0007b8c:	75 dc                	jne    c0007b6a <Phys::allocatePage()+0x19>
c0007b8e:	83 ec 0c             	sub    esp,0xc
c0007b91:	80 35 fc 3e 02 c0 01 	xor    BYTE PTR ds:0xc0023efc,0x1
c0007b98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007b9d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007ba0:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007ba6:	50                   	push   eax
c0007ba7:	e8 42 27 00 00       	call   c000a2ee <VAS::scanForEviction()>
c0007bac:	83 c4 10             	add    esp,0x10
c0007baf:	85 c0                	test   eax,eax
c0007bb1:	75 3f                	jne    c0007bf2 <Phys::allocatePage()+0xa1>
c0007bb3:	83 ec 0c             	sub    esp,0xc
c0007bb6:	68 34 ee 01 c0       	push   0xc001ee34
c0007bbb:	e8 db 87 00 00       	call   c001039b <KePanic(char const*)>
c0007bc0:	83 c4 10             	add    esp,0x10
c0007bc3:	8b 1d d8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023ed8
c0007bc9:	53                   	push   ebx
c0007bca:	e8 ff fe ff ff       	call   c0007ace <Phys::getPageState(unsigned long)>
c0007bcf:	5a                   	pop    edx
c0007bd0:	84 c0                	test   al,al
c0007bd2:	75 a1                	jne    c0007b75 <Phys::allocatePage()+0x24>
c0007bd4:	6a 01                	push   0x1
c0007bd6:	53                   	push   ebx
c0007bd7:	e8 c0 fe ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007bdc:	a1 d8 3e 02 c0       	mov    eax,ds:0xc0023ed8
c0007be1:	5a                   	pop    edx
c0007be2:	ff 05 e4 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee4
c0007be8:	c1 e0 0c             	shl    eax,0xc
c0007beb:	59                   	pop    ecx
c0007bec:	83 c4 14             	add    esp,0x14
c0007bef:	5b                   	pop    ebx
c0007bf0:	5e                   	pop    esi
c0007bf1:	c3                   	ret    
c0007bf2:	83 ec 08             	sub    esp,0x8
c0007bf5:	89 c2                	mov    edx,eax
c0007bf7:	6a 01                	push   0x1
c0007bf9:	c1 ea 0c             	shr    edx,0xc
c0007bfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c00:	52                   	push   edx
c0007c01:	e8 96 fe ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007c06:	83 c4 10             	add    esp,0x10
c0007c09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c0d:	eb dd                	jmp    c0007bec <Phys::allocatePage()+0x9b>

c0007c0f <Phys::allocateContiguousPages(int)>:
c0007c0f:	57                   	push   edi
c0007c10:	56                   	push   esi
c0007c11:	53                   	push   ebx
c0007c12:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c16:	fa                   	cli    
c0007c17:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0007c1d:	31 db                	xor    ebx,ebx
c0007c1f:	85 db                	test   ebx,ebx
c0007c21:	75 11                	jne    c0007c34 <Phys::allocateContiguousPages(int)+0x25>
c0007c23:	e8 29 ff ff ff       	call   c0007b51 <Phys::allocatePage()>
c0007c28:	83 fe 01             	cmp    esi,0x1
c0007c2b:	89 c7                	mov    edi,eax
c0007c2d:	74 21                	je     c0007c50 <Phys::allocateContiguousPages(int)+0x41>
c0007c2f:	bb 01 00 00 00       	mov    ebx,0x1
c0007c34:	e8 18 ff ff ff       	call   c0007b51 <Phys::allocatePage()>
c0007c39:	89 da                	mov    edx,ebx
c0007c3b:	c1 e2 0c             	shl    edx,0xc
c0007c3e:	01 fa                	add    edx,edi
c0007c40:	39 c2                	cmp    edx,eax
c0007c42:	74 20                	je     c0007c64 <Phys::allocateContiguousPages(int)+0x55>
c0007c44:	bb 01 00 00 00       	mov    ebx,0x1
c0007c49:	89 c7                	mov    edi,eax
c0007c4b:	83 fe 01             	cmp    esi,0x1
c0007c4e:	75 e4                	jne    c0007c34 <Phys::allocateContiguousPages(int)+0x25>
c0007c50:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0007c55:	48                   	dec    eax
c0007c56:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0007c5b:	75 01                	jne    c0007c5e <Phys::allocateContiguousPages(int)+0x4f>
c0007c5d:	fb                   	sti    
c0007c5e:	89 f8                	mov    eax,edi
c0007c60:	5b                   	pop    ebx
c0007c61:	5e                   	pop    esi
c0007c62:	5f                   	pop    edi
c0007c63:	c3                   	ret    
c0007c64:	43                   	inc    ebx
c0007c65:	39 f3                	cmp    ebx,esi
c0007c67:	75 b6                	jne    c0007c1f <Phys::allocateContiguousPages(int)+0x10>
c0007c69:	eb e5                	jmp    c0007c50 <Phys::allocateContiguousPages(int)+0x41>

c0007c6b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007c6b:	56                   	push   esi
c0007c6c:	53                   	push   ebx
c0007c6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007c71:	39 1d dc 3e 02 c0    	cmp    DWORD PTR ds:0xc0023edc,ebx
c0007c77:	73 06                	jae    c0007c7f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007c79:	89 1d dc 3e 02 c0    	mov    DWORD PTR ds:0xc0023edc,ebx
c0007c7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c83:	c1 eb 0c             	shr    ebx,0xc
c0007c86:	c1 e8 0c             	shr    eax,0xc
c0007c89:	39 d8                	cmp    eax,ebx
c0007c8b:	73 13                	jae    c0007ca0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007c8d:	6a 00                	push   0x0
c0007c8f:	8d 70 01             	lea    esi,[eax+0x1]
c0007c92:	50                   	push   eax
c0007c93:	e8 04 fe ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007c98:	5a                   	pop    edx
c0007c99:	89 f0                	mov    eax,esi
c0007c9b:	59                   	pop    ecx
c0007c9c:	39 f3                	cmp    ebx,esi
c0007c9e:	75 ed                	jne    c0007c8d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007ca0:	5b                   	pop    ebx
c0007ca1:	5e                   	pop    esi
c0007ca2:	c3                   	ret    

c0007ca3 <Phys::physicalMemorySetup(unsigned int)>:
c0007ca3:	55                   	push   ebp
c0007ca4:	57                   	push   edi
c0007ca5:	56                   	push   esi
c0007ca6:	53                   	push   ebx
c0007ca7:	31 db                	xor    ebx,ebx
c0007ca9:	83 ec 40             	sub    esp,0x40
c0007cac:	6a 10                	push   0x10
c0007cae:	6a 00                	push   0x0
c0007cb0:	68 ec 3e 02 c0       	push   0xc0023eec
c0007cb5:	e8 16 88 ff ff       	call   c00004d0 <memset>
c0007cba:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007cbe:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007cc3:	05 00 10 00 00       	add    eax,0x1000
c0007cc8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007ccc:	5a                   	pop    edx
c0007ccd:	59                   	pop    ecx
c0007cce:	50                   	push   eax
c0007ccf:	68 c7 ee 01 c0       	push   0xc001eec7
c0007cd4:	e8 31 29 00 00       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0007cd9:	83 c4 10             	add    esp,0x10
c0007cdc:	83 ec 08             	sub    esp,0x8
c0007cdf:	6a 01                	push   0x1
c0007ce1:	53                   	push   ebx
c0007ce2:	43                   	inc    ebx
c0007ce3:	e8 b4 fd ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007ce8:	83 c4 10             	add    esp,0x10
c0007ceb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007cf1:	75 e9                	jne    c0007cdc <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007cf3:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007cf9:	66 85 c0             	test   ax,ax
c0007cfc:	0f 84 97 01 00 00    	je     c0007e99 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007d02:	89 c7                	mov    edi,eax
c0007d04:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007d0c:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007d12:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007d17:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007d1b:	eb 15                	jmp    c0007d32 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007d1d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007d21:	83 c3 18             	add    ebx,0x18
c0007d24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d28:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007d2c:	0f 84 77 01 00 00    	je     c0007ea9 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007d32:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007d35:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007d38:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007d3b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007d3f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007d43:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007d45:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007d48:	01 f0                	add    eax,esi
c0007d4a:	55                   	push   ebp
c0007d4b:	11 fa                	adc    edx,edi
c0007d4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007d51:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007d55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d59:	50                   	push   eax
c0007d5a:	56                   	push   esi
c0007d5b:	68 64 ee 01 c0       	push   0xc001ee64
c0007d60:	e8 a5 28 00 00       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0007d65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007d69:	83 c4 10             	add    esp,0x10
c0007d6c:	09 f8                	or     eax,edi
c0007d6e:	0f 85 35 01 00 00    	jne    c0007ea9 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007d74:	4d                   	dec    ebp
c0007d75:	75 a6                	jne    c0007d1d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d77:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007d7b:	ba 00 00 08 00       	mov    edx,0x80000
c0007d80:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007d84:	39 f2                	cmp    edx,esi
c0007d86:	89 c1                	mov    ecx,eax
c0007d88:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007d90:	19 f9                	sbb    ecx,edi
c0007d92:	0f 82 a7 00 00 00    	jb     c0007e3f <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007d98:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007d9c:	89 c1                	mov    ecx,eax
c0007d9e:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007da2:	0f 83 97 00 00 00    	jae    c0007e3f <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007da8:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007dad:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007db1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007db5:	39 fa                	cmp    edx,edi
c0007db7:	19 e8                	sbb    eax,ebp
c0007db9:	0f 82 9a 01 00 00    	jb     c0007f59 <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007dbf:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dc3:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007dc7:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007dcd:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007dd2:	83 d5 ff             	adc    ebp,0xffffffff
c0007dd5:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007dd9:	31 c0                	xor    eax,eax
c0007ddb:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007ddf:	39 fa                	cmp    edx,edi
c0007de1:	89 c1                	mov    ecx,eax
c0007de3:	19 e9                	sbb    ecx,ebp
c0007de5:	0f 83 32 ff ff ff    	jae    c0007d1d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007deb:	be 00 00 08 00       	mov    esi,0x80000
c0007df0:	51                   	push   ecx
c0007df1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007df5:	57                   	push   edi
c0007df6:	56                   	push   esi
c0007df7:	68 88 ee 01 c0       	push   0xc001ee88
c0007dfc:	e8 09 28 00 00       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0007e01:	5d                   	pop    ebp
c0007e02:	58                   	pop    eax
c0007e03:	57                   	push   edi
c0007e04:	56                   	push   esi
c0007e05:	e8 61 fe ff ff       	call   c0007c6b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007e0a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007e0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e12:	83 c4 0c             	add    esp,0xc
c0007e15:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007e19:	03 05 e8 3e 02 c0    	add    eax,DWORD PTR ds:0xc0023ee8
c0007e1f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007e26:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007e2b:	52                   	push   edx
c0007e2c:	50                   	push   eax
c0007e2d:	68 ed ee 01 c0       	push   0xc001eeed
c0007e32:	e8 d3 27 00 00       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0007e37:	83 c4 10             	add    esp,0x10
c0007e3a:	e9 de fe ff ff       	jmp    c0007d1d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007e3f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007e43:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007e47:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007e4b:	39 ea                	cmp    edx,ebp
c0007e4d:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007e51:	0f 82 c6 fe ff ff    	jb     c0007d1d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007e57:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007e5c:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007e60:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007e64:	0f 83 b3 fe ff ff    	jae    c0007d1d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007e6a:	39 ee                	cmp    esi,ebp
c0007e6c:	89 f8                	mov    eax,edi
c0007e6e:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007e72:	0f 83 78 ff ff ff    	jae    c0007df0 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007e78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e7c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007e80:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007e84:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007e88:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007e8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007e94:	e9 57 ff ff ff       	jmp    c0007df0 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007e99:	83 ec 0c             	sub    esp,0xc
c0007e9c:	68 df ee 01 c0       	push   0xc001eedf
c0007ea1:	e8 f5 84 00 00       	call   c001039b <KePanic(char const*)>
c0007ea6:	83 c4 10             	add    esp,0x10
c0007ea9:	83 ec 08             	sub    esp,0x8
c0007eac:	bb 60 00 00 00       	mov    ebx,0x60
c0007eb1:	6a 00                	push   0x0
c0007eb3:	6a 06                	push   0x6
c0007eb5:	e8 e2 fb ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007eba:	58                   	pop    eax
c0007ebb:	5a                   	pop    edx
c0007ebc:	6a 00                	push   0x0
c0007ebe:	6a 07                	push   0x7
c0007ec0:	e8 d7 fb ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007ec5:	83 05 e8 3e 02 c0 02 	add    DWORD PTR ds:0xc0023ee8,0x2
c0007ecc:	83 c4 10             	add    esp,0x10
c0007ecf:	83 ec 08             	sub    esp,0x8
c0007ed2:	6a 00                	push   0x0
c0007ed4:	53                   	push   ebx
c0007ed5:	43                   	inc    ebx
c0007ed6:	e8 c1 fb ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007edb:	83 c4 10             	add    esp,0x10
c0007ede:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007ee4:	75 e9                	jne    c0007ecf <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007ee6:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007eeb:	bb 40 01 00 00       	mov    ebx,0x140
c0007ef0:	83 c0 20             	add    eax,0x20
c0007ef3:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007ef8:	eb 22                	jmp    c0007f1c <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007efa:	83 ec 08             	sub    esp,0x8
c0007efd:	6a 00                	push   0x0
c0007eff:	53                   	push   ebx
c0007f00:	43                   	inc    ebx
c0007f01:	e8 96 fb ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007f06:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007f0b:	83 c4 10             	add    esp,0x10
c0007f0e:	40                   	inc    eax
c0007f0f:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007f15:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007f1a:	74 07                	je     c0007f23 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007f1c:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007f21:	7e d7                	jle    c0007efa <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007f23:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007f28:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007f2d:	7f 22                	jg     c0007f51 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007f2f:	83 ec 08             	sub    esp,0x8
c0007f32:	6a 00                	push   0x0
c0007f34:	53                   	push   ebx
c0007f35:	43                   	inc    ebx
c0007f36:	e8 61 fb ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007f3b:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007f40:	83 c4 10             	add    esp,0x10
c0007f43:	40                   	inc    eax
c0007f44:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007f4a:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007f4f:	75 d7                	jne    c0007f28 <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007f51:	83 c4 3c             	add    esp,0x3c
c0007f54:	5b                   	pop    ebx
c0007f55:	5e                   	pop    esi
c0007f56:	5f                   	pop    edi
c0007f57:	5d                   	pop    ebp
c0007f58:	c3                   	ret    
c0007f59:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007f61:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007f69:	e9 51 fe ff ff       	jmp    c0007dbf <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007f6e <Pipe::isAtty()>:
c0007f6e:	31 c0                	xor    eax,eax
c0007f70:	c3                   	ret    
c0007f71:	90                   	nop

c0007f72 <Pipe::~Pipe()>:
c0007f72:	83 ec 0c             	sub    esp,0xc
c0007f75:	ba 4c ef 01 c0       	mov    edx,0xc001ef4c
c0007f7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f7e:	89 10                	mov    DWORD PTR [eax],edx
c0007f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f84:	83 ec 0c             	sub    esp,0xc
c0007f87:	50                   	push   eax
c0007f88:	e8 5f 11 00 00       	call   c00090ec <UnixFile::~UnixFile()>
c0007f8d:	83 c4 10             	add    esp,0x10
c0007f90:	90                   	nop
c0007f91:	83 c4 0c             	add    esp,0xc
c0007f94:	c3                   	ret    
c0007f95:	90                   	nop

c0007f96 <Pipe::~Pipe()>:
c0007f96:	83 ec 0c             	sub    esp,0xc
c0007f99:	83 ec 0c             	sub    esp,0xc
c0007f9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007fa0:	e8 cd ff ff ff       	call   c0007f72 <Pipe::~Pipe()>
c0007fa5:	83 c4 10             	add    esp,0x10
c0007fa8:	83 ec 08             	sub    esp,0x8
c0007fab:	6a 20                	push   0x20
c0007fad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007fb1:	e8 5e 25 00 00       	call   c000a514 <operator delete(void*, unsigned long)>
c0007fb6:	83 c4 10             	add    esp,0x10
c0007fb9:	83 c4 0c             	add    esp,0xc
c0007fbc:	c3                   	ret    
c0007fbd:	90                   	nop

c0007fbe <Pipe::write(unsigned long long, void*, int*)>:
c0007fbe:	55                   	push   ebp
c0007fbf:	57                   	push   edi
c0007fc0:	56                   	push   esi
c0007fc1:	53                   	push   ebx
c0007fc2:	83 ec 1c             	sub    esp,0x1c
c0007fc5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007fc9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007fcd:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007fd0:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007fd4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007fd7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007fdb:	89 d8                	mov    eax,ebx
c0007fdd:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007fe0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fe4:	89 d6                	mov    esi,edx
c0007fe6:	89 d7                	mov    edi,edx
c0007fe8:	c1 ff 1f             	sar    edi,0x1f
c0007feb:	03 34 24             	add    esi,DWORD PTR [esp]
c0007fee:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007ff2:	c1 f8 1f             	sar    eax,0x1f
c0007ff5:	39 f3                	cmp    ebx,esi
c0007ff7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ffb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007fff:	19 f8                	sbb    eax,edi
c0008001:	b8 01 00 00 00       	mov    eax,0x1
c0008006:	72 6e                	jb     c0008076 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0008008:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000800b:	01 d0                	add    eax,edx
c000800d:	99                   	cdq    
c000800e:	f7 fb                	idiv   ebx
c0008010:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008014:	29 d3                	sub    ebx,edx
c0008016:	89 d7                	mov    edi,edx
c0008018:	89 de                	mov    esi,ebx
c000801a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000801d:	c1 fb 1f             	sar    ebx,0x1f
c0008020:	39 f2                	cmp    edx,esi
c0008022:	19 d8                	sbb    eax,ebx
c0008024:	b8 00 00 00 00       	mov    eax,0x0
c0008029:	72 04                	jb     c000802f <Pipe::write(unsigned long long, void*, int*)+0x71>
c000802b:	89 d0                	mov    eax,edx
c000802d:	29 f0                	sub    eax,esi
c000802f:	89 d3                	mov    ebx,edx
c0008031:	29 c3                	sub    ebx,eax
c0008033:	74 0b                	je     c0008040 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0008035:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0008038:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000803c:	89 d9                	mov    ecx,ebx
c000803e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008040:	85 c0                	test   eax,eax
c0008042:	74 0d                	je     c0008051 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0008044:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0008048:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000804b:	89 de                	mov    esi,ebx
c000804d:	89 c1                	mov    ecx,eax
c000804f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008051:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008054:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008059:	75 10                	jne    c000806b <Pipe::write(unsigned long long, void*, int*)+0xad>
c000805b:	83 ec 0c             	sub    esp,0xc
c000805e:	68 09 ef 01 c0       	push   0xc001ef09
c0008063:	e8 33 83 00 00       	call   c001039b <KePanic(char const*)>
c0008068:	83 c4 10             	add    esp,0x10
c000806b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000806f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008072:	89 08                	mov    DWORD PTR [eax],ecx
c0008074:	31 c0                	xor    eax,eax
c0008076:	83 c4 1c             	add    esp,0x1c
c0008079:	5b                   	pop    ebx
c000807a:	5e                   	pop    esi
c000807b:	5f                   	pop    edi
c000807c:	5d                   	pop    ebp
c000807d:	c3                   	ret    

c000807e <Pipe::read(unsigned long long, void*, int*)>:
c000807e:	55                   	push   ebp
c000807f:	57                   	push   edi
c0008080:	56                   	push   esi
c0008081:	53                   	push   ebx
c0008082:	83 ec 1c             	sub    esp,0x1c
c0008085:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008089:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000808d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008091:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008094:	89 c8                	mov    eax,ecx
c0008096:	99                   	cdq    
c0008097:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000809b:	74 24                	je     c00080c1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000809d:	39 f9                	cmp    ecx,edi
c000809f:	89 d1                	mov    ecx,edx
c00080a1:	19 f1                	sbb    ecx,esi
c00080a3:	73 1c                	jae    c00080c1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c00080a5:	fa                   	cli    
c00080a6:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00080ac:	e8 47 c5 00 00       	call   c00145f8 <schedule()>
c00080b1:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00080b6:	48                   	dec    eax
c00080b7:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00080bc:	75 d3                	jne    c0008091 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00080be:	fb                   	sti    
c00080bf:	eb d0                	jmp    c0008091 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00080c1:	39 f8                	cmp    eax,edi
c00080c3:	89 d1                	mov    ecx,edx
c00080c5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00080c8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00080cc:	19 f1                	sbb    ecx,esi
c00080ce:	73 07                	jae    c00080d7 <Pipe::read(unsigned long long, void*, int*)+0x59>
c00080d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00080d3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00080d7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00080da:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00080dd:	29 f7                	sub    edi,esi
c00080df:	89 f8                	mov    eax,edi
c00080e1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00080e5:	99                   	cdq    
c00080e6:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00080e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00080ed:	19 d0                	sbb    eax,edx
c00080ef:	73 07                	jae    c00080f8 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00080f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00080f8:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00080fb:	89 ea                	mov    edx,ebp
c00080fd:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008101:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0008106:	74 0d                	je     c0008115 <Pipe::read(unsigned long long, void*, int*)+0x97>
c0008108:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000810b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000810f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008113:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008115:	85 d2                	test   edx,edx
c0008117:	74 11                	je     c000812a <Pipe::read(unsigned long long, void*, int*)+0xac>
c0008119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000811d:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008120:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008124:	89 d1                	mov    ecx,edx
c0008126:	89 c7                	mov    edi,eax
c0008128:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000812a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000812d:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008130:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008133:	99                   	cdq    
c0008134:	89 f7                	mov    edi,esi
c0008136:	03 04 24             	add    eax,DWORD PTR [esp]
c0008139:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000813d:	c1 ff 1f             	sar    edi,0x1f
c0008140:	57                   	push   edi
c0008141:	56                   	push   esi
c0008142:	52                   	push   edx
c0008143:	50                   	push   eax
c0008144:	e8 07 58 01 00       	call   c001d950 <__umoddi3>
c0008149:	83 c4 10             	add    esp,0x10
c000814c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000814f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008154:	75 10                	jne    c0008166 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008156:	83 ec 0c             	sub    esp,0xc
c0008159:	68 26 ef 01 c0       	push   0xc001ef26
c000815e:	e8 38 82 00 00       	call   c001039b <KePanic(char const*)>
c0008163:	83 c4 10             	add    esp,0x10
c0008166:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000816a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000816d:	89 10                	mov    DWORD PTR [eax],edx
c000816f:	83 c4 1c             	add    esp,0x1c
c0008172:	31 c0                	xor    eax,eax
c0008174:	5b                   	pop    ebx
c0008175:	5e                   	pop    esi
c0008176:	5f                   	pop    edi
c0008177:	5d                   	pop    ebp
c0008178:	c3                   	ret    
c0008179:	90                   	nop

c000817a <Pipe::Pipe(int)>:
c000817a:	83 ec 0c             	sub    esp,0xc
c000817d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008181:	83 ec 08             	sub    esp,0x8
c0008184:	6a 00                	push   0x0
c0008186:	50                   	push   eax
c0008187:	e8 7e 0d 00 00       	call   c0008f0a <UnixFile::UnixFile(int)>
c000818c:	83 c4 10             	add    esp,0x10
c000818f:	ba 4c ef 01 c0       	mov    edx,0xc001ef4c
c0008194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008198:	89 10                	mov    DWORD PTR [eax],edx
c000819a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000819e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00081a2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00081a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081a9:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00081b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081b4:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00081bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00081bf:	83 ec 0c             	sub    esp,0xc
c00081c2:	50                   	push   eax
c00081c3:	e8 ad f6 ff ff       	call   c0007875 <malloc>
c00081c8:	83 c4 10             	add    esp,0x10
c00081cb:	89 c2                	mov    edx,eax
c00081cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081d1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00081d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081d8:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00081dc:	90                   	nop
c00081dd:	83 c4 0c             	add    esp,0xc
c00081e0:	c3                   	ret    
c00081e1:	90                   	nop

c00081e2 <VgaText::isAtty()>:
c00081e2:	b0 01                	mov    al,0x1
c00081e4:	c3                   	ret    
c00081e5:	90                   	nop

c00081e6 <VgaText::~VgaText()>:
c00081e6:	83 ec 0c             	sub    esp,0xc
c00081e9:	ba 94 ef 01 c0       	mov    edx,0xc001ef94
c00081ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081f2:	89 10                	mov    DWORD PTR [eax],edx
c00081f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081f8:	83 ec 0c             	sub    esp,0xc
c00081fb:	50                   	push   eax
c00081fc:	e8 eb 0e 00 00       	call   c00090ec <UnixFile::~UnixFile()>
c0008201:	83 c4 10             	add    esp,0x10
c0008204:	90                   	nop
c0008205:	83 c4 0c             	add    esp,0xc
c0008208:	c3                   	ret    
c0008209:	90                   	nop

c000820a <VgaText::~VgaText()>:
c000820a:	83 ec 0c             	sub    esp,0xc
c000820d:	83 ec 0c             	sub    esp,0xc
c0008210:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008214:	e8 cd ff ff ff       	call   c00081e6 <VgaText::~VgaText()>
c0008219:	83 c4 10             	add    esp,0x10
c000821c:	83 ec 08             	sub    esp,0x8
c000821f:	68 84 01 00 00       	push   0x184
c0008224:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008228:	e8 e7 22 00 00       	call   c000a514 <operator delete(void*, unsigned long)>
c000822d:	83 c4 10             	add    esp,0x10
c0008230:	83 c4 0c             	add    esp,0xc
c0008233:	c3                   	ret    

c0008234 <VgaText::read(unsigned long long, void*, int*)>:
c0008234:	83 ec 10             	sub    esp,0x10
c0008237:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000823b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000823f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008243:	e8 20 46 00 00       	call   c000c868 <readKeyboard(VgaText*, char*, unsigned long)>
c0008248:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000824c:	89 02                	mov    DWORD PTR [edx],eax
c000824e:	31 c0                	xor    eax,eax
c0008250:	83 c4 1c             	add    esp,0x1c
c0008253:	c3                   	ret    

c0008254 <setTerminalScrollLock(bool)>:
c0008254:	c3                   	ret    

c0008255 <doTerminalCycle()>:
c0008255:	c3                   	ret    

c0008256 <addToTerminalCycle(VgaText*)>:
c0008256:	c3                   	ret    

c0008257 <scrollTerminalScrollLock(int)>:
c0008257:	c3                   	ret    

c0008258 <VgaText::updateTitle()>:
c0008258:	c3                   	ret    
c0008259:	90                   	nop

c000825a <VgaText::load()>:
c000825a:	c3                   	ret    
c000825b:	90                   	nop

c000825c <VgaText::updateCursor()>:
c000825c:	83 ec 14             	sub    esp,0x14
c000825f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008263:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008266:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008269:	e8 a2 ef 00 00       	call   c0017210 <HalConsoleCursorUpdate(int, int)>
c000826e:	83 c4 1c             	add    esp,0x1c
c0008271:	c3                   	ret    

c0008272 <VgaText::doANSI_SGR(int)>:
c0008272:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000827a:	85 d2                	test   edx,edx
c000827c:	75 0b                	jne    c0008289 <VgaText::doANSI_SGR(int)+0x17>
c000827e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008281:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008284:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008287:	eb 59                	jmp    c00082e2 <VgaText::doANSI_SGR(int)+0x70>
c0008289:	83 fa 07             	cmp    edx,0x7
c000828c:	75 0b                	jne    c0008299 <VgaText::doANSI_SGR(int)+0x27>
c000828e:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008291:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008294:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008297:	eb 49                	jmp    c00082e2 <VgaText::doANSI_SGR(int)+0x70>
c0008299:	83 fa 1b             	cmp    edx,0x1b
c000829c:	74 e0                	je     c000827e <VgaText::doANSI_SGR(int)+0xc>
c000829e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00082a1:	83 f9 07             	cmp    ecx,0x7
c00082a4:	77 09                	ja     c00082af <VgaText::doANSI_SGR(int)+0x3d>
c00082a6:	8b 14 8d 00 10 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdf000]
c00082ad:	eb 20                	jmp    c00082cf <VgaText::doANSI_SGR(int)+0x5d>
c00082af:	8d 4a d8             	lea    ecx,[edx-0x28]
c00082b2:	83 f9 07             	cmp    ecx,0x7
c00082b5:	77 09                	ja     c00082c0 <VgaText::doANSI_SGR(int)+0x4e>
c00082b7:	8b 14 8d 00 10 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdf000]
c00082be:	eb 22                	jmp    c00082e2 <VgaText::doANSI_SGR(int)+0x70>
c00082c0:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00082c3:	83 f9 07             	cmp    ecx,0x7
c00082c6:	77 0b                	ja     c00082d3 <VgaText::doANSI_SGR(int)+0x61>
c00082c8:	8b 14 95 b8 0e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdf148]
c00082cf:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00082d2:	c3                   	ret    
c00082d3:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00082d6:	83 f9 07             	cmp    ecx,0x7
c00082d9:	77 0a                	ja     c00082e5 <VgaText::doANSI_SGR(int)+0x73>
c00082db:	8b 14 95 90 0e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdf170]
c00082e2:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00082e5:	c3                   	ret    

c00082e6 <VgaText::setDefaultBgColour(VgaColour)>:
c00082e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00082ee:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00082f1:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00082f4:	c3                   	ret    
c00082f5:	90                   	nop

c00082f6 <VgaText::setDefaultFgColour(VgaColour)>:
c00082f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00082fe:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008301:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008304:	c3                   	ret    
c0008305:	90                   	nop

c0008306 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0008306:	53                   	push   ebx
c0008307:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000830b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000830f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008313:	51                   	push   ecx
c0008314:	e8 cd ff ff ff       	call   c00082e6 <VgaText::setDefaultBgColour(VgaColour)>
c0008319:	58                   	pop    eax
c000831a:	5a                   	pop    edx
c000831b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000831f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008323:	5b                   	pop    ebx
c0008324:	eb d0                	jmp    c00082f6 <VgaText::setDefaultFgColour(VgaColour)>

c0008326 <VgaText::setTitleTextColour(VgaColour)>:
c0008326:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000832a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000832e:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008331:	c3                   	ret    

c0008332 <VgaText::setTitleColour(VgaColour)>:
c0008332:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008336:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000833a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000833d:	c3                   	ret    

c000833e <VgaText::setTitle(char*)>:
c000833e:	c3                   	ret    
c000833f:	90                   	nop

c0008340 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008340:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008344:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0008349:	83 e0 0f             	and    eax,0xf
c000834c:	c1 e2 04             	shl    edx,0x4
c000834f:	09 d0                	or     eax,edx
c0008351:	c3                   	ret    

c0008352 <VgaText::scrollScreen()>:
c0008352:	55                   	push   ebp
c0008353:	57                   	push   edi
c0008354:	56                   	push   esi
c0008355:	be 01 00 00 00       	mov    esi,0x1
c000835a:	53                   	push   ebx
c000835b:	83 ec 0c             	sub    esp,0xc
c000835e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008362:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008365:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000836b:	31 ff                	xor    edi,edi
c000836d:	01 e9                	add    ecx,ebp
c000836f:	8a 01                	mov    al,BYTE PTR [ecx]
c0008371:	83 fe 18             	cmp    esi,0x18
c0008374:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000837a:	75 20                	jne    c000839c <VgaText::scrollScreen()+0x4a>
c000837c:	f7 c7 01 00 00 00    	test   edi,0x1
c0008382:	74 15                	je     c0008399 <VgaText::scrollScreen()+0x47>
c0008384:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008388:	50                   	push   eax
c0008389:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000838d:	50                   	push   eax
c000838e:	e8 ad ff ff ff       	call   c0008340 <VgaText::combineColours(unsigned char, unsigned char)>
c0008393:	5a                   	pop    edx
c0008394:	5a                   	pop    edx
c0008395:	88 01                	mov    BYTE PTR [ecx],al
c0008397:	eb 03                	jmp    c000839c <VgaText::scrollScreen()+0x4a>
c0008399:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000839c:	47                   	inc    edi
c000839d:	41                   	inc    ecx
c000839e:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00083a4:	75 c9                	jne    c000836f <VgaText::scrollScreen()+0x1d>
c00083a6:	46                   	inc    esi
c00083a7:	83 fe 19             	cmp    esi,0x19
c00083aa:	75 b9                	jne    c0008365 <VgaText::scrollScreen()+0x13>
c00083ac:	39 1d 04 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f04,ebx
c00083b2:	75 1f                	jne    c00083d3 <VgaText::scrollScreen()+0x81>
c00083b4:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00083b8:	74 05                	je     c00083bf <VgaText::scrollScreen()+0x6d>
c00083ba:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00083bd:	eb 14                	jmp    c00083d3 <VgaText::scrollScreen()+0x81>
c00083bf:	50                   	push   eax
c00083c0:	50                   	push   eax
c00083c1:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00083c5:	50                   	push   eax
c00083c6:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00083ca:	50                   	push   eax
c00083cb:	e8 cc ec 00 00       	call   c001709c <HalConsoleScroll(int, int)>
c00083d0:	83 c4 10             	add    esp,0x10
c00083d3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00083d7:	83 c4 0c             	add    esp,0xc
c00083da:	5b                   	pop    ebx
c00083db:	5e                   	pop    esi
c00083dc:	5f                   	pop    edi
c00083dd:	5d                   	pop    ebp
c00083de:	e9 79 fe ff ff       	jmp    c000825c <VgaText::updateCursor()>
c00083e3:	90                   	nop

c00083e4 <VgaText::combineCharAndColour(char, unsigned char)>:
c00083e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00083e9:	c1 e0 08             	shl    eax,0x8
c00083ec:	89 c2                	mov    edx,eax
c00083ee:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00083f3:	09 d0                	or     eax,edx
c00083f5:	c3                   	ret    

c00083f6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00083f6:	55                   	push   ebp
c00083f7:	57                   	push   edi
c00083f8:	56                   	push   esi
c00083f9:	53                   	push   ebx
c00083fa:	83 ec 1c             	sub    esp,0x1c
c00083fd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008401:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008405:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008409:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000840d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0008411:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008415:	0f b6 c3             	movzx  eax,bl
c0008418:	50                   	push   eax
c0008419:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c000841e:	50                   	push   eax
c000841f:	e8 1c ff ff ff       	call   c0008340 <VgaText::combineColours(unsigned char, unsigned char)>
c0008424:	5a                   	pop    edx
c0008425:	0f b6 c0             	movzx  eax,al
c0008428:	59                   	pop    ecx
c0008429:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c000842e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008432:	50                   	push   eax
c0008433:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008437:	e8 a8 ff ff ff       	call   c00083e4 <VgaText::combineCharAndColour(char, unsigned char)>
c000843c:	5a                   	pop    edx
c000843d:	66 6b d7 50          	imul   dx,di,0x50
c0008441:	59                   	pop    ecx
c0008442:	01 f2                	add    edx,esi
c0008444:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008447:	0f b7 d2             	movzx  edx,dx
c000844a:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000844e:	39 2d 04 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f04,ebp
c0008454:	75 28                	jne    c000847e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c0008456:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000845a:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000845e:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008462:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008466:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000846a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000846e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008472:	83 c4 1c             	add    esp,0x1c
c0008475:	5b                   	pop    ebx
c0008476:	5e                   	pop    esi
c0008477:	5f                   	pop    edi
c0008478:	5d                   	pop    ebp
c0008479:	e9 26 ed 00 00       	jmp    c00171a4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000847e:	83 c4 1c             	add    esp,0x1c
c0008481:	5b                   	pop    ebx
c0008482:	5e                   	pop    esi
c0008483:	5f                   	pop    edi
c0008484:	5d                   	pop    ebp
c0008485:	c3                   	ret    

c0008486 <VgaText::getCursorX()>:
c0008486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000848a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000848d:	c3                   	ret    

c000848e <VgaText::getCursorY()>:
c000848e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008492:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008495:	c3                   	ret    

c0008496 <VgaText::setCursor(int, int)>:
c0008496:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000849a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000849e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00084a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00084a5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00084a8:	e9 af fd ff ff       	jmp    c000825c <VgaText::updateCursor()>

c00084ad <setActiveTerminal(VgaText*)>:
c00084ad:	53                   	push   ebx
c00084ae:	83 ec 08             	sub    esp,0x8
c00084b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084b5:	85 db                	test   ebx,ebx
c00084b7:	75 11                	jne    c00084ca <setActiveTerminal(VgaText*)+0x1d>
c00084b9:	c7 44 24 10 60 ef 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ef60
c00084c1:	83 c4 08             	add    esp,0x8
c00084c4:	5b                   	pop    ebx
c00084c5:	e9 d1 7e 00 00       	jmp    c001039b <KePanic(char const*)>
c00084ca:	a1 04 3f 02 c0       	mov    eax,ds:0xc0023f04
c00084cf:	85 c0                	test   eax,eax
c00084d1:	74 0c                	je     c00084df <setActiveTerminal(VgaText*)+0x32>
c00084d3:	83 ec 0c             	sub    esp,0xc
c00084d6:	50                   	push   eax
c00084d7:	e8 80 fd ff ff       	call   c000825c <VgaText::updateCursor()>
c00084dc:	83 c4 10             	add    esp,0x10
c00084df:	89 1d 04 3f 02 c0    	mov    DWORD PTR ds:0xc0023f04,ebx
c00084e5:	50                   	push   eax
c00084e6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00084e9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00084ec:	53                   	push   ebx
c00084ed:	e8 a4 ff ff ff       	call   c0008496 <VgaText::setCursor(int, int)>
c00084f2:	83 c4 18             	add    esp,0x18
c00084f5:	5b                   	pop    ebx
c00084f6:	c3                   	ret    
c00084f7:	90                   	nop

c00084f8 <VgaText::clearScreen()>:
c00084f8:	57                   	push   edi
c00084f9:	56                   	push   esi
c00084fa:	31 f6                	xor    esi,esi
c00084fc:	53                   	push   ebx
c00084fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008501:	52                   	push   edx
c0008502:	6a 00                	push   0x0
c0008504:	6a 00                	push   0x0
c0008506:	53                   	push   ebx
c0008507:	e8 8a ff ff ff       	call   c0008496 <VgaText::setCursor(int, int)>
c000850c:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008513:	83 c4 10             	add    esp,0x10
c0008516:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008519:	7e 20                	jle    c000853b <VgaText::clearScreen()+0x43>
c000851b:	31 ff                	xor    edi,edi
c000851d:	50                   	push   eax
c000851e:	50                   	push   eax
c000851f:	56                   	push   esi
c0008520:	57                   	push   edi
c0008521:	47                   	inc    edi
c0008522:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008525:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008528:	6a 20                	push   0x20
c000852a:	53                   	push   ebx
c000852b:	e8 c6 fe ff ff       	call   c00083f6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008530:	83 c4 20             	add    esp,0x20
c0008533:	83 ff 50             	cmp    edi,0x50
c0008536:	75 e5                	jne    c000851d <VgaText::clearScreen()+0x25>
c0008538:	46                   	inc    esi
c0008539:	eb db                	jmp    c0008516 <VgaText::clearScreen()+0x1e>
c000853b:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008542:	5b                   	pop    ebx
c0008543:	5e                   	pop    esi
c0008544:	5f                   	pop    edi
c0008545:	c3                   	ret    

c0008546 <VgaText::setCursorX(int)>:
c0008546:	83 ec 10             	sub    esp,0x10
c0008549:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000854d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008550:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008554:	50                   	push   eax
c0008555:	e8 3c ff ff ff       	call   c0008496 <VgaText::setCursor(int, int)>
c000855a:	83 c4 1c             	add    esp,0x1c
c000855d:	c3                   	ret    

c000855e <VgaText::setCursorY(int)>:
c000855e:	83 ec 10             	sub    esp,0x10
c0008561:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008565:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008569:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000856c:	50                   	push   eax
c000856d:	e8 24 ff ff ff       	call   c0008496 <VgaText::setCursor(int, int)>
c0008572:	83 c4 1c             	add    esp,0x1c
c0008575:	c3                   	ret    

c0008576 <VgaText::incrementCursor(bool)>:
c0008576:	56                   	push   esi
c0008577:	53                   	push   ebx
c0008578:	51                   	push   ecx
c0008579:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000857d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008581:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008584:	40                   	inc    eax
c0008585:	83 f8 50             	cmp    eax,0x50
c0008588:	74 05                	je     c000858f <VgaText::incrementCursor(bool)+0x19>
c000858a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000858d:	eb 24                	jmp    c00085b3 <VgaText::incrementCursor(bool)+0x3d>
c000858f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008592:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008599:	8d 50 01             	lea    edx,[eax+0x1]
c000859c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000859f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00085a2:	75 0f                	jne    c00085b3 <VgaText::incrementCursor(bool)+0x3d>
c00085a4:	83 ec 0c             	sub    esp,0xc
c00085a7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00085aa:	53                   	push   ebx
c00085ab:	e8 a2 fd ff ff       	call   c0008352 <VgaText::scrollScreen()>
c00085b0:	83 c4 10             	add    esp,0x10
c00085b3:	89 f0                	mov    eax,esi
c00085b5:	84 c0                	test   al,al
c00085b7:	74 0c                	je     c00085c5 <VgaText::incrementCursor(bool)+0x4f>
c00085b9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085bd:	5a                   	pop    edx
c00085be:	5b                   	pop    ebx
c00085bf:	5e                   	pop    esi
c00085c0:	e9 97 fc ff ff       	jmp    c000825c <VgaText::updateCursor()>
c00085c5:	58                   	pop    eax
c00085c6:	5b                   	pop    ebx
c00085c7:	5e                   	pop    esi
c00085c8:	c3                   	ret    
c00085c9:	90                   	nop

c00085ca <VgaText::decrementCursor(bool)>:
c00085ca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00085ce:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085d2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00085d5:	85 c0                	test   eax,eax
c00085d7:	74 04                	je     c00085dd <VgaText::decrementCursor(bool)+0x13>
c00085d9:	48                   	dec    eax
c00085da:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00085dd:	84 c9                	test   cl,cl
c00085df:	74 09                	je     c00085ea <VgaText::decrementCursor(bool)+0x20>
c00085e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00085e5:	e9 72 fc ff ff       	jmp    c000825c <VgaText::updateCursor()>
c00085ea:	c3                   	ret    
c00085eb:	90                   	nop

c00085ec <VgaText::putchar(char, VgaColour, VgaColour)>:
c00085ec:	53                   	push   ebx
c00085ed:	83 ec 08             	sub    esp,0x8
c00085f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00085f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00085fc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008600:	3c 07                	cmp    al,0x7
c0008602:	75 21                	jne    c0008625 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c0008604:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000860c:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0008614:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c000861c:	83 c4 08             	add    esp,0x8
c000861f:	5b                   	pop    ebx
c0008620:	e9 3a 2e 00 00       	jmp    c000b45f <Krnl::beep(int, int, bool)>
c0008625:	3c 0d                	cmp    al,0xd
c0008627:	75 09                	jne    c0008632 <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008629:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008630:	eb 2c                	jmp    c000865e <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008632:	3c 0a                	cmp    al,0xa
c0008634:	75 31                	jne    c0008667 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008636:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008639:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008640:	8d 50 01             	lea    edx,[eax+0x1]
c0008643:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008646:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008649:	75 0f                	jne    c000865a <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c000864b:	83 ec 0c             	sub    esp,0xc
c000864e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008651:	53                   	push   ebx
c0008652:	e8 fb fc ff ff       	call   c0008352 <VgaText::scrollScreen()>
c0008657:	83 c4 10             	add    esp,0x10
c000865a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000865e:	83 c4 08             	add    esp,0x8
c0008661:	5b                   	pop    ebx
c0008662:	e9 f5 fb ff ff       	jmp    c000825c <VgaText::updateCursor()>
c0008667:	3c 08                	cmp    al,0x8
c0008669:	75 25                	jne    c0008690 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c000866b:	50                   	push   eax
c000866c:	50                   	push   eax
c000866d:	6a 01                	push   0x1
c000866f:	53                   	push   ebx
c0008670:	e8 55 ff ff ff       	call   c00085ca <VgaText::decrementCursor(bool)>
c0008675:	5a                   	pop    edx
c0008676:	59                   	pop    ecx
c0008677:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000867a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000867d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008680:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008683:	6a 20                	push   0x20
c0008685:	53                   	push   ebx
c0008686:	e8 6b fd ff ff       	call   c00083f6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000868b:	83 c4 28             	add    esp,0x28
c000868e:	5b                   	pop    ebx
c000868f:	c3                   	ret    
c0008690:	83 ec 08             	sub    esp,0x8
c0008693:	0f be c0             	movsx  eax,al
c0008696:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008699:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000869c:	51                   	push   ecx
c000869d:	52                   	push   edx
c000869e:	50                   	push   eax
c000869f:	53                   	push   ebx
c00086a0:	e8 51 fd ff ff       	call   c00083f6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00086a5:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00086a9:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00086b1:	83 c4 28             	add    esp,0x28
c00086b4:	5b                   	pop    ebx
c00086b5:	e9 bc fe ff ff       	jmp    c0008576 <VgaText::incrementCursor(bool)>

c00086ba <VgaText::putchar(char)>:
c00086ba:	56                   	push   esi
c00086bb:	53                   	push   ebx
c00086bc:	83 ec 14             	sub    esp,0x14
c00086bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00086c3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00086c7:	3c 5b                	cmp    al,0x5b
c00086c9:	75 18                	jne    c00086e3 <VgaText::putchar(char)+0x29>
c00086cb:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00086cf:	74 1f                	je     c00086f0 <VgaText::putchar(char)+0x36>
c00086d1:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00086d7:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00086de:	e9 bd 00 00 00       	jmp    c00087a0 <VgaText::putchar(char)+0xe6>
c00086e3:	3c 1b                	cmp    al,0x1b
c00086e5:	75 09                	jne    c00086f0 <VgaText::putchar(char)+0x36>
c00086e7:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00086eb:	e9 b0 00 00 00       	jmp    c00087a0 <VgaText::putchar(char)+0xe6>
c00086f0:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00086f3:	84 c9                	test   cl,cl
c00086f5:	0f 84 92 00 00 00    	je     c000878d <VgaText::putchar(char)+0xd3>
c00086fb:	8d 50 c0             	lea    edx,[eax-0x40]
c00086fe:	80 fa 3e             	cmp    dl,0x3e
c0008701:	77 76                	ja     c0008779 <VgaText::putchar(char)+0xbf>
c0008703:	3c 6d                	cmp    al,0x6d
c0008705:	75 47                	jne    c000874e <VgaText::putchar(char)+0x94>
c0008707:	31 f6                	xor    esi,esi
c0008709:	31 d2                	xor    edx,edx
c000870b:	31 c0                	xor    eax,eax
c000870d:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0008710:	7e 2d                	jle    c000873f <VgaText::putchar(char)+0x85>
c0008712:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008717:	80 fa 3b             	cmp    dl,0x3b
c000871a:	75 17                	jne    c0008733 <VgaText::putchar(char)+0x79>
c000871c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0008720:	50                   	push   eax
c0008721:	53                   	push   ebx
c0008722:	e8 4b fb ff ff       	call   c0008272 <VgaText::doANSI_SGR(int)>
c0008727:	59                   	pop    ecx
c0008728:	31 d2                	xor    edx,edx
c000872a:	58                   	pop    eax
c000872b:	31 c0                	xor    eax,eax
c000872d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0008731:	eb 09                	jmp    c000873c <VgaText::putchar(char)+0x82>
c0008733:	6b c0 0a             	imul   eax,eax,0xa
c0008736:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000873a:	88 ca                	mov    dl,cl
c000873c:	46                   	inc    esi
c000873d:	eb ce                	jmp    c000870d <VgaText::putchar(char)+0x53>
c000873f:	84 d2                	test   dl,dl
c0008741:	74 2e                	je     c0008771 <VgaText::putchar(char)+0xb7>
c0008743:	50                   	push   eax
c0008744:	53                   	push   ebx
c0008745:	e8 28 fb ff ff       	call   c0008272 <VgaText::doANSI_SGR(int)>
c000874a:	58                   	pop    eax
c000874b:	5a                   	pop    edx
c000874c:	eb 23                	jmp    c0008771 <VgaText::putchar(char)+0xb7>
c000874e:	3c 4a                	cmp    al,0x4a
c0008750:	75 1f                	jne    c0008771 <VgaText::putchar(char)+0xb7>
c0008752:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008756:	75 19                	jne    c0008771 <VgaText::putchar(char)+0xb7>
c0008758:	83 ec 0c             	sub    esp,0xc
c000875b:	53                   	push   ebx
c000875c:	e8 97 fd ff ff       	call   c00084f8 <VgaText::clearScreen()>
c0008761:	83 c4 0c             	add    esp,0xc
c0008764:	6a 00                	push   0x0
c0008766:	6a 00                	push   0x0
c0008768:	53                   	push   ebx
c0008769:	e8 28 fd ff ff       	call   c0008496 <VgaText::setCursor(int, int)>
c000876e:	83 c4 10             	add    esp,0x10
c0008771:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008777:	eb 27                	jmp    c00087a0 <VgaText::putchar(char)+0xe6>
c0008779:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000877c:	83 fa 0e             	cmp    edx,0xe
c000877f:	7f 1f                	jg     c00087a0 <VgaText::putchar(char)+0xe6>
c0008781:	8d 4a 01             	lea    ecx,[edx+0x1]
c0008784:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008787:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000878b:	eb 13                	jmp    c00087a0 <VgaText::putchar(char)+0xe6>
c000878d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008790:	0f be c0             	movsx  eax,al
c0008793:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008796:	50                   	push   eax
c0008797:	53                   	push   ebx
c0008798:	e8 4f fe ff ff       	call   c00085ec <VgaText::putchar(char, VgaColour, VgaColour)>
c000879d:	83 c4 10             	add    esp,0x10
c00087a0:	83 c4 14             	add    esp,0x14
c00087a3:	5b                   	pop    ebx
c00087a4:	5e                   	pop    esi
c00087a5:	c3                   	ret    

c00087a6 <VgaText::putx(unsigned int)>:
c00087a6:	57                   	push   edi
c00087a7:	b9 11 00 00 00       	mov    ecx,0x11
c00087ac:	56                   	push   esi
c00087ad:	be 6e ef 01 c0       	mov    esi,0xc001ef6e
c00087b2:	53                   	push   ebx
c00087b3:	83 ec 20             	sub    esp,0x20
c00087b6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087ba:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00087be:	fc                   	cld    
c00087bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00087c1:	be 08 00 00 00       	mov    esi,0x8
c00087c6:	50                   	push   eax
c00087c7:	50                   	push   eax
c00087c8:	89 d8                	mov    eax,ebx
c00087ca:	c1 e3 04             	shl    ebx,0x4
c00087cd:	c1 e8 1c             	shr    eax,0x1c
c00087d0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00087d5:	50                   	push   eax
c00087d6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00087da:	e8 db fe ff ff       	call   c00086ba <VgaText::putchar(char)>
c00087df:	83 c4 10             	add    esp,0x10
c00087e2:	4e                   	dec    esi
c00087e3:	75 e1                	jne    c00087c6 <VgaText::putx(unsigned int)+0x20>
c00087e5:	83 c4 20             	add    esp,0x20
c00087e8:	5b                   	pop    ebx
c00087e9:	5e                   	pop    esi
c00087ea:	5f                   	pop    edi
c00087eb:	c3                   	ret    

c00087ec <VgaText::puts(char const*)>:
c00087ec:	53                   	push   ebx
c00087ed:	83 ec 08             	sub    esp,0x8
c00087f0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00087f4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00087f7:	84 c0                	test   al,al
c00087f9:	74 12                	je     c000880d <VgaText::puts(char const*)+0x21>
c00087fb:	43                   	inc    ebx
c00087fc:	51                   	push   ecx
c00087fd:	51                   	push   ecx
c00087fe:	50                   	push   eax
c00087ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008803:	e8 b2 fe ff ff       	call   c00086ba <VgaText::putchar(char)>
c0008808:	83 c4 10             	add    esp,0x10
c000880b:	eb e7                	jmp    c00087f4 <VgaText::puts(char const*)+0x8>
c000880d:	83 c4 08             	add    esp,0x8
c0008810:	5b                   	pop    ebx
c0008811:	c3                   	ret    

c0008812 <VgaText::write(unsigned long long, void*, int*)>:
c0008812:	55                   	push   ebp
c0008813:	57                   	push   edi
c0008814:	56                   	push   esi
c0008815:	53                   	push   ebx
c0008816:	83 ec 0c             	sub    esp,0xc
c0008819:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000881d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008821:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008825:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000882c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000882f:	39 eb                	cmp    ebx,ebp
c0008831:	74 13                	je     c0008846 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008833:	43                   	inc    ebx
c0008834:	50                   	push   eax
c0008835:	50                   	push   eax
c0008836:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000883a:	50                   	push   eax
c000883b:	56                   	push   esi
c000883c:	e8 79 fe ff ff       	call   c00086ba <VgaText::putchar(char)>
c0008841:	83 c4 10             	add    esp,0x10
c0008844:	eb e9                	jmp    c000882f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008846:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000884d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008851:	89 38                	mov    DWORD PTR [eax],edi
c0008853:	83 c4 0c             	add    esp,0xc
c0008856:	31 c0                	xor    eax,eax
c0008858:	5b                   	pop    ebx
c0008859:	5e                   	pop    esi
c000885a:	5f                   	pop    edi
c000885b:	5d                   	pop    ebp
c000885c:	c3                   	ret    
c000885d:	90                   	nop

c000885e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000885e:	55                   	push   ebp
c000885f:	57                   	push   edi
c0008860:	56                   	push   esi
c0008861:	53                   	push   ebx
c0008862:	83 ec 0c             	sub    esp,0xc
c0008865:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008869:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000886e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008875:	50                   	push   eax
c0008876:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000887b:	50                   	push   eax
c000887c:	e8 bf fa ff ff       	call   c0008340 <VgaText::combineColours(unsigned char, unsigned char)>
c0008881:	5a                   	pop    edx
c0008882:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008887:	59                   	pop    ecx
c0008888:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000888b:	89 c5                	mov    ebp,eax
c000888d:	0f b7 f6             	movzx  esi,si
c0008890:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008894:	01 f6                	add    esi,esi
c0008896:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008899:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000889c:	84 c0                	test   al,al
c000889e:	0f 84 f4 00 00 00    	je     c0008998 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00088a4:	3c 0d                	cmp    al,0xd
c00088a6:	75 0c                	jne    c00088b4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c00088a8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088af:	e9 de 00 00 00       	jmp    c0008992 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088b4:	3c 0a                	cmp    al,0xa
c00088b6:	75 45                	jne    c00088fd <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c00088b8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088bb:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088c2:	8d 48 01             	lea    ecx,[eax+0x1]
c00088c5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00088c8:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00088cb:	75 0f                	jne    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c00088cd:	83 ec 0c             	sub    esp,0xc
c00088d0:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00088d3:	53                   	push   ebx
c00088d4:	e8 79 fa ff ff       	call   c0008352 <VgaText::scrollScreen()>
c00088d9:	83 c4 10             	add    esp,0x10
c00088dc:	83 ec 0c             	sub    esp,0xc
c00088df:	53                   	push   ebx
c00088e0:	e8 77 f9 ff ff       	call   c000825c <VgaText::updateCursor()>
c00088e5:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088ea:	83 c4 10             	add    esp,0x10
c00088ed:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00088f0:	0f b7 f6             	movzx  esi,si
c00088f3:	01 f6                	add    esi,esi
c00088f5:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088f8:	e9 95 00 00 00       	jmp    c0008992 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088fd:	3c 08                	cmp    al,0x8
c00088ff:	75 35                	jne    c0008936 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c0008901:	51                   	push   ecx
c0008902:	51                   	push   ecx
c0008903:	6a 01                	push   0x1
c0008905:	53                   	push   ebx
c0008906:	e8 bf fc ff ff       	call   c00085ca <VgaText::decrementCursor(bool)>
c000890b:	5e                   	pop    esi
c000890c:	58                   	pop    eax
c000890d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008910:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008913:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008916:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008919:	6a 20                	push   0x20
c000891b:	53                   	push   ebx
c000891c:	e8 d5 fa ff ff       	call   c00083f6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008921:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008926:	83 c4 20             	add    esp,0x20
c0008929:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000892c:	0f b7 f6             	movzx  esi,si
c000892f:	01 f6                	add    esi,esi
c0008931:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008934:	eb 5c                	jmp    c0008992 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008936:	52                   	push   edx
c0008937:	52                   	push   edx
c0008938:	89 ea                	mov    edx,ebp
c000893a:	0f b6 ca             	movzx  ecx,dl
c000893d:	51                   	push   ecx
c000893e:	50                   	push   eax
c000893f:	e8 a0 fa ff ff       	call   c00083e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0008944:	83 c4 10             	add    esp,0x10
c0008947:	66 89 06             	mov    WORD PTR [esi],ax
c000894a:	39 1d 04 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f04,ebx
c0008950:	75 1d                	jne    c000896f <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c0008952:	83 ec 0c             	sub    esp,0xc
c0008955:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008958:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000895b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000895f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008963:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008966:	50                   	push   eax
c0008967:	e8 38 e8 00 00       	call   c00171a4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000896c:	83 c4 20             	add    esp,0x20
c000896f:	83 c6 02             	add    esi,0x2
c0008972:	50                   	push   eax
c0008973:	50                   	push   eax
c0008974:	6a 00                	push   0x0
c0008976:	53                   	push   ebx
c0008977:	e8 fa fb ff ff       	call   c0008576 <VgaText::incrementCursor(bool)>
c000897c:	83 c4 10             	add    esp,0x10
c000897f:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008983:	75 0d                	jne    c0008992 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008985:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000898a:	0f b7 f6             	movzx  esi,si
c000898d:	01 f6                	add    esi,esi
c000898f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008992:	47                   	inc    edi
c0008993:	e9 01 ff ff ff       	jmp    c0008899 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008998:	83 ec 0c             	sub    esp,0xc
c000899b:	53                   	push   ebx
c000899c:	e8 bb f8 ff ff       	call   c000825c <VgaText::updateCursor()>
c00089a1:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00089a8:	83 c4 1c             	add    esp,0x1c
c00089ab:	5b                   	pop    ebx
c00089ac:	5e                   	pop    esi
c00089ad:	5f                   	pop    edi
c00089ae:	5d                   	pop    ebp
c00089af:	c3                   	ret    

c00089b0 <VgaText::VgaText(char const*)>:
c00089b0:	56                   	push   esi
c00089b1:	53                   	push   ebx
c00089b2:	83 ec 04             	sub    esp,0x4
c00089b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089b9:	83 ec 08             	sub    esp,0x8
c00089bc:	6a 00                	push   0x0
c00089be:	50                   	push   eax
c00089bf:	e8 46 05 00 00       	call   c0008f0a <UnixFile::UnixFile(int)>
c00089c4:	83 c4 10             	add    esp,0x10
c00089c7:	ba 94 ef 01 c0       	mov    edx,0xc001ef94
c00089cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089d0:	89 10                	mov    DWORD PTR [eax],edx
c00089d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089d6:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00089dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089e1:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00089e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089ec:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00089f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089f4:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00089f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089fc:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008a03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a07:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a12:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008a19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a1d:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008a24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a28:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008a2f:	83 ec 0c             	sub    esp,0xc
c0008a32:	6a 01                	push   0x1
c0008a34:	e8 14 09 00 00       	call   c000934d <Virt::allocateKernelVirtualPages(int)>
c0008a39:	83 c4 10             	add    esp,0x10
c0008a3c:	89 c2                	mov    edx,eax
c0008a3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a42:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008a45:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c0008a4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a4f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008a52:	89 c6                	mov    esi,eax
c0008a54:	e8 f8 f0 ff ff       	call   c0007b51 <Phys::allocatePage()>
c0008a59:	68 05 0c 00 00       	push   0xc05
c0008a5e:	56                   	push   esi
c0008a5f:	50                   	push   eax
c0008a60:	53                   	push   ebx
c0008a61:	e8 aa 0f 00 00       	call   c0009a10 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008a66:	83 c4 10             	add    esp,0x10
c0008a69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a6d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008a70:	83 ec 04             	sub    esp,0x4
c0008a73:	68 a0 0f 00 00       	push   0xfa0
c0008a78:	6a 00                	push   0x0
c0008a7a:	50                   	push   eax
c0008a7b:	e8 50 7a ff ff       	call   c00004d0 <memset>
c0008a80:	83 c4 10             	add    esp,0x10
c0008a83:	83 ec 04             	sub    esp,0x4
c0008a86:	6a 00                	push   0x0
c0008a88:	6a 07                	push   0x7
c0008a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a8e:	e8 73 f8 ff ff       	call   c0008306 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008a93:	83 c4 10             	add    esp,0x10
c0008a96:	83 ec 04             	sub    esp,0x4
c0008a99:	6a 00                	push   0x0
c0008a9b:	6a 00                	push   0x0
c0008a9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008aa1:	e8 f0 f9 ff ff       	call   c0008496 <VgaText::setCursor(int, int)>
c0008aa6:	83 c4 10             	add    esp,0x10
c0008aa9:	83 ec 0c             	sub    esp,0xc
c0008aac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ab0:	e8 43 fa ff ff       	call   c00084f8 <VgaText::clearScreen()>
c0008ab5:	83 c4 10             	add    esp,0x10
c0008ab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008abc:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ac4:	05 82 00 00 00       	add    eax,0x82
c0008ac9:	83 ec 04             	sub    esp,0x4
c0008acc:	68 80 00 00 00       	push   0x80
c0008ad1:	6a 00                	push   0x0
c0008ad3:	50                   	push   eax
c0008ad4:	e8 f7 79 ff ff       	call   c00004d0 <memset>
c0008ad9:	83 c4 10             	add    esp,0x10
c0008adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ae0:	05 02 01 00 00       	add    eax,0x102
c0008ae5:	83 ec 04             	sub    esp,0x4
c0008ae8:	68 80 00 00 00       	push   0x80
c0008aed:	6a 00                	push   0x0
c0008aef:	50                   	push   eax
c0008af0:	e8 db 79 ff ff       	call   c00004d0 <memset>
c0008af5:	83 c4 10             	add    esp,0x10
c0008af8:	90                   	nop
c0008af9:	83 c4 04             	add    esp,0x4
c0008afc:	5b                   	pop    ebx
c0008afd:	5e                   	pop    esi
c0008afe:	c3                   	ret    
c0008aff:	90                   	nop

c0008b00 <VgaText::receiveKey(unsigned char)>:
c0008b00:	55                   	push   ebp
c0008b01:	57                   	push   edi
c0008b02:	56                   	push   esi
c0008b03:	53                   	push   ebx
c0008b04:	83 ec 1c             	sub    esp,0x1c
c0008b07:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0008b0b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008b0f:	89 f0                	mov    eax,esi
c0008b11:	84 c0                	test   al,al
c0008b13:	0f 84 47 01 00 00    	je     c0008c60 <VgaText::receiveKey(unsigned char)+0x160>
c0008b19:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008b1f:	3c 08                	cmp    al,0x8
c0008b21:	75 6b                	jne    c0008b8e <VgaText::receiveKey(unsigned char)+0x8e>
c0008b23:	83 ec 0c             	sub    esp,0xc
c0008b26:	57                   	push   edi
c0008b27:	e8 14 7a ff ff       	call   c0000540 <strlen>
c0008b2c:	83 c4 10             	add    esp,0x10
c0008b2f:	85 c0                	test   eax,eax
c0008b31:	0f 84 ee 00 00 00    	je     c0008c25 <VgaText::receiveKey(unsigned char)+0x125>
c0008b37:	50                   	push   eax
c0008b38:	50                   	push   eax
c0008b39:	6a 08                	push   0x8
c0008b3b:	53                   	push   ebx
c0008b3c:	e8 79 fb ff ff       	call   c00086ba <VgaText::putchar(char)>
c0008b41:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b44:	e8 f7 79 ff ff       	call   c0000540 <strlen>
c0008b49:	83 c4 10             	add    esp,0x10
c0008b4c:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008b53:	3c 0d                	cmp    al,0xd
c0008b55:	0f 95 c1             	setne  cl
c0008b58:	3c 18                	cmp    al,0x18
c0008b5a:	0f 9e c2             	setle  dl
c0008b5d:	84 d1                	test   cl,dl
c0008b5f:	74 17                	je     c0008b78 <VgaText::receiveKey(unsigned char)+0x78>
c0008b61:	83 e8 08             	sub    eax,0x8
c0008b64:	3c 02                	cmp    al,0x2
c0008b66:	76 10                	jbe    c0008b78 <VgaText::receiveKey(unsigned char)+0x78>
c0008b68:	55                   	push   ebp
c0008b69:	55                   	push   ebp
c0008b6a:	68 7f ef 01 c0       	push   0xc001ef7f
c0008b6f:	53                   	push   ebx
c0008b70:	e8 77 fc ff ff       	call   c00087ec <VgaText::puts(char const*)>
c0008b75:	83 c4 10             	add    esp,0x10
c0008b78:	83 ec 0c             	sub    esp,0xc
c0008b7b:	57                   	push   edi
c0008b7c:	e8 bf 79 ff ff       	call   c0000540 <strlen>
c0008b81:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008b89:	e9 94 00 00 00       	jmp    c0008c22 <VgaText::receiveKey(unsigned char)+0x122>
c0008b8e:	83 ec 0c             	sub    esp,0xc
c0008b91:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008b97:	50                   	push   eax
c0008b98:	e8 a3 79 ff ff       	call   c0000540 <strlen>
c0008b9d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008ba0:	89 c5                	mov    ebp,eax
c0008ba2:	e8 99 79 ff ff       	call   c0000540 <strlen>
c0008ba7:	83 c4 10             	add    esp,0x10
c0008baa:	8d 44 05 03          	lea    eax,[ebp+eax*1+0x3]
c0008bae:	3d 80 00 00 00       	cmp    eax,0x80
c0008bb3:	0f 87 a7 00 00 00    	ja     c0008c60 <VgaText::receiveKey(unsigned char)+0x160>
c0008bb9:	89 f0                	mov    eax,esi
c0008bbb:	3c 18                	cmp    al,0x18
c0008bbd:	0f 96 c2             	setbe  dl
c0008bc0:	3c 0d                	cmp    al,0xd
c0008bc2:	0f 95 c0             	setne  al
c0008bc5:	84 c2                	test   dl,al
c0008bc7:	74 30                	je     c0008bf9 <VgaText::receiveKey(unsigned char)+0xf9>
c0008bc9:	8d 46 f7             	lea    eax,[esi-0x9]
c0008bcc:	3c 01                	cmp    al,0x1
c0008bce:	76 29                	jbe    c0008bf9 <VgaText::receiveKey(unsigned char)+0xf9>
c0008bd0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd3:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bd6:	68 85 ef 01 c0       	push   0xc001ef85
c0008bdb:	53                   	push   ebx
c0008bdc:	e8 7d fc ff ff       	call   c000885e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008be1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008be4:	8d 46 40             	lea    eax,[esi+0x40]
c0008be7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bea:	0f b6 c0             	movzx  eax,al
c0008bed:	50                   	push   eax
c0008bee:	53                   	push   ebx
c0008bef:	e8 f8 f9 ff ff       	call   c00085ec <VgaText::putchar(char, VgaColour, VgaColour)>
c0008bf4:	83 c4 20             	add    esp,0x20
c0008bf7:	eb 11                	jmp    c0008c0a <VgaText::receiveKey(unsigned char)+0x10a>
c0008bf9:	89 f0                	mov    eax,esi
c0008bfb:	51                   	push   ecx
c0008bfc:	0f be c0             	movsx  eax,al
c0008bff:	51                   	push   ecx
c0008c00:	50                   	push   eax
c0008c01:	53                   	push   ebx
c0008c02:	e8 b3 fa ff ff       	call   c00086ba <VgaText::putchar(char)>
c0008c07:	83 c4 10             	add    esp,0x10
c0008c0a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008c0f:	89 f0                	mov    eax,esi
c0008c11:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008c15:	52                   	push   edx
c0008c16:	52                   	push   edx
c0008c17:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008c1b:	50                   	push   eax
c0008c1c:	57                   	push   edi
c0008c1d:	e8 9e 7b ff ff       	call   c00007c0 <strcat>
c0008c22:	83 c4 10             	add    esp,0x10
c0008c25:	89 f0                	mov    eax,esi
c0008c27:	3c 03                	cmp    al,0x3
c0008c29:	0f 94 c2             	sete   dl
c0008c2c:	3c 0a                	cmp    al,0xa
c0008c2e:	0f 94 c0             	sete   al
c0008c31:	08 c2                	or     dl,al
c0008c33:	75 09                	jne    c0008c3e <VgaText::receiveKey(unsigned char)+0x13e>
c0008c35:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008c3c:	74 22                	je     c0008c60 <VgaText::receiveKey(unsigned char)+0x160>
c0008c3e:	81 c3 02 01 00 00    	add    ebx,0x102
c0008c44:	50                   	push   eax
c0008c45:	50                   	push   eax
c0008c46:	57                   	push   edi
c0008c47:	53                   	push   ebx
c0008c48:	e8 73 7b ff ff       	call   c00007c0 <strcat>
c0008c4d:	83 c4 0c             	add    esp,0xc
c0008c50:	68 80 00 00 00       	push   0x80
c0008c55:	6a 00                	push   0x0
c0008c57:	57                   	push   edi
c0008c58:	e8 73 78 ff ff       	call   c00004d0 <memset>
c0008c5d:	83 c4 10             	add    esp,0x10
c0008c60:	83 c4 1c             	add    esp,0x1c
c0008c63:	5b                   	pop    ebx
c0008c64:	5e                   	pop    esi
c0008c65:	5f                   	pop    edi
c0008c66:	5d                   	pop    ebp
c0008c67:	c3                   	ret    

c0008c68 <VgaText::doUpdate()>:
c0008c68:	c3                   	ret    

c0008c69 <newTerminal(char*)>:
c0008c69:	83 ec 28             	sub    esp,0x28
c0008c6c:	68 84 01 00 00       	push   0x184
c0008c71:	e8 ff eb ff ff       	call   c0007875 <malloc>
c0008c76:	5a                   	pop    edx
c0008c77:	59                   	pop    ecx
c0008c78:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008c7c:	50                   	push   eax
c0008c7d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008c81:	e8 2a fd ff ff       	call   c00089b0 <VgaText::VgaText(char const*)>
c0008c86:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c8a:	83 c4 2c             	add    esp,0x2c
c0008c8d:	c3                   	ret    
c0008c8e:	66 90                	xchg   ax,ax

c0008c90 <TSS::TSS()>:
c0008c90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008c94:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008c9b:	90                   	nop
c0008c9c:	c3                   	ret    
c0008c9d:	90                   	nop
c0008c9e:	66 90                	xchg   ax,ax

c0008ca0 <TSS::setESP(unsigned long)>:
c0008ca0:	55                   	push   ebp
c0008ca1:	89 e5                	mov    ebp,esp
c0008ca3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ca6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ca9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008cac:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008caf:	90                   	nop
c0008cb0:	5d                   	pop    ebp
c0008cb1:	c3                   	ret    
c0008cb2:	66 90                	xchg   ax,ax

c0008cb4 <TSS::flush()>:
c0008cb4:	55                   	push   ebp
c0008cb5:	89 e5                	mov    ebp,esp
c0008cb7:	83 ec 10             	sub    esp,0x10
c0008cba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0008cbf:	83 c8 03             	or     eax,0x3
c0008cc2:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008cc6:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008cca:	66 89 d0             	mov    ax,dx
c0008ccd:	0f 00 d8             	ltr    ax
c0008cd0:	90                   	nop
c0008cd1:	c9                   	leave  
c0008cd2:	c3                   	ret    
c0008cd3:	90                   	nop

c0008cd4 <TSS::setup(unsigned long, unsigned long)>:
c0008cd4:	55                   	push   ebp
c0008cd5:	89 e5                	mov    ebp,esp
c0008cd7:	83 ec 18             	sub    esp,0x18
c0008cda:	83 ec 0c             	sub    esp,0xc
c0008cdd:	6a 68                	push   0x68
c0008cdf:	e8 91 eb ff ff       	call   c0007875 <malloc>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	89 c2                	mov    edx,eax
c0008ce9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008cef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cf2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cf5:	83 ec 04             	sub    esp,0x4
c0008cf8:	6a 68                	push   0x68
c0008cfa:	6a 00                	push   0x0
c0008cfc:	50                   	push   eax
c0008cfd:	e8 ce 77 ff ff       	call   c00004d0 <memset>
c0008d02:	83 c4 10             	add    esp,0x10
c0008d05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d0b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008d11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d17:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008d1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d23:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008d26:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008d29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d2f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008d35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d3b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008d41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d47:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008d4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d53:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008d59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d5f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008d65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d6b:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008d71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d77:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008d7a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008d7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d83:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008d86:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008d89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d8f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008d96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d99:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d9c:	0f 20 da             	mov    edx,cr3
c0008d9f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008da2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008da5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008da8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008dab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008dae:	83 ec 08             	sub    esp,0x8
c0008db1:	50                   	push   eax
c0008db2:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008db5:	50                   	push   eax
c0008db6:	e8 3f e3 ff ff       	call   c00070fa <GDTEntry::setBase(unsigned int)>
c0008dbb:	83 c4 10             	add    esp,0x10
c0008dbe:	83 ec 08             	sub    esp,0x8
c0008dc1:	6a 68                	push   0x68
c0008dc3:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008dc6:	50                   	push   eax
c0008dc7:	e8 4a e3 ff ff       	call   c0007116 <GDTEntry::setLimit(unsigned int)>
c0008dcc:	83 c4 10             	add    esp,0x10
c0008dcf:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008dd3:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008dd6:	83 e0 0f             	and    eax,0xf
c0008dd9:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008ddc:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008ddf:	83 c8 40             	or     eax,0x40
c0008de2:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008de5:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0008dea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008df0:	05 78 01 00 00       	add    eax,0x178
c0008df5:	83 ec 04             	sub    esp,0x4
c0008df8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008dfb:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008dfe:	50                   	push   eax
c0008dff:	e8 46 e3 ff ff       	call   c000714a <GDT::addEntry(GDTEntry)>
c0008e04:	83 c4 10             	add    esp,0x10
c0008e07:	89 c2                	mov    edx,eax
c0008e09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e0c:	89 10                	mov    DWORD PTR [eax],edx
c0008e0e:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0008e13:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008e19:	05 78 01 00 00       	add    eax,0x178
c0008e1e:	83 ec 0c             	sub    esp,0xc
c0008e21:	50                   	push   eax
c0008e22:	e8 4d e3 ff ff       	call   c0007174 <GDT::flush()>
c0008e27:	83 c4 10             	add    esp,0x10
c0008e2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e2f:	c9                   	leave  
c0008e30:	c3                   	ret    
c0008e31:	90                   	nop

c0008e32 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008e32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008e3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e3d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008e42:	75 08                	jne    c0008e4c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008e44:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008e4a:	eb 38                	jmp    c0008e84 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008e4c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008e51:	75 17                	jne    c0008e6a <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008e53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e58:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e5b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e61:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e67:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008e6a:	89 c1                	mov    ecx,eax
c0008e6c:	83 e1 fd             	and    ecx,0xfffffffd
c0008e6f:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008e75:	74 cd                	je     c0008e44 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008e77:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e7c:	83 e0 ef             	and    eax,0xffffffef
c0008e7f:	83 f8 08             	cmp    eax,0x8
c0008e82:	76 c0                	jbe    c0008e44 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008e84:	31 c0                	xor    eax,eax
c0008e86:	c3                   	ret    
c0008e87:	90                   	nop

c0008e88 <ReservedFilename::isAtty()>:
c0008e88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e8c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e8f:	31 c0                	xor    eax,eax
c0008e91:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008e97:	74 09                	je     c0008ea2 <ReservedFilename::isAtty()+0x1a>
c0008e99:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008e9f:	0f 94 c0             	sete   al
c0008ea2:	c3                   	ret    
c0008ea3:	90                   	nop

c0008ea4 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008ea4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008eac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008eaf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008eb3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008eb8:	75 08                	jne    c0008ec2 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008eba:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008ec0:	eb 3d                	jmp    c0008eff <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008ec2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008ec7:	75 17                	jne    c0008ee0 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008ec9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008ece:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008ed1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008ed7:	8b 10                	mov    edx,DWORD PTR [eax]
c0008ed9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008edd:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008ee0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008ee5:	75 04                	jne    c0008eeb <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008ee7:	89 0a                	mov    DWORD PTR [edx],ecx
c0008ee9:	eb 14                	jmp    c0008eff <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008eeb:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008ef0:	74 c8                	je     c0008eba <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008ef2:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008ef7:	83 e0 ef             	and    eax,0xffffffef
c0008efa:	83 f8 08             	cmp    eax,0x8
c0008efd:	76 bb                	jbe    c0008eba <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008eff:	31 c0                	xor    eax,eax
c0008f01:	c3                   	ret    

c0008f02 <UnixFile::getFileDescriptor()>:
c0008f02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f09:	c3                   	ret    

c0008f0a <UnixFile::UnixFile(int)>:
c0008f0a:	53                   	push   ebx
c0008f0b:	83 ec 28             	sub    esp,0x28
c0008f0e:	ba 5c f0 01 c0       	mov    edx,0xc001f05c
c0008f13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008f17:	89 10                	mov    DWORD PTR [eax],edx
c0008f19:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008f21:	0f 8f 8c 01 00 00    	jg     c00090b3 <UnixFile::UnixFile(int)+0x1a9>
c0008f27:	a1 40 10 02 c0       	mov    eax,ds:0xc0021040
c0008f2c:	8d 50 01             	lea    edx,[eax+0x1]
c0008f2f:	89 15 40 10 02 c0    	mov    DWORD PTR ds:0xc0021040,edx
c0008f35:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008f39:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008f3c:	83 ec 08             	sub    esp,0x8
c0008f3f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008f43:	68 98 3f 02 c0       	push   0xc0023f98
c0008f48:	e8 eb 4b 01 00       	call   c001db38 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008f4d:	83 c4 10             	add    esp,0x10
c0008f50:	a0 94 3f 02 c0       	mov    al,ds:0xc0023f94
c0008f55:	83 f0 01             	xor    eax,0x1
c0008f58:	84 c0                	test   al,al
c0008f5a:	0f 84 54 01 00 00    	je     c00090b4 <UnixFile::UnixFile(int)+0x1aa>
c0008f60:	c6 05 94 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023f94,0x1
c0008f67:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008f6f:	83 ec 0c             	sub    esp,0xc
c0008f72:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008f76:	e8 fa e8 ff ff       	call   c0007875 <malloc>
c0008f7b:	83 c4 10             	add    esp,0x10
c0008f7e:	89 c3                	mov    ebx,eax
c0008f80:	83 ec 08             	sub    esp,0x8
c0008f83:	68 03 ff ff 0f       	push   0xfffff03
c0008f88:	53                   	push   ebx
c0008f89:	e8 2c 01 00 00       	call   c00090ba <ReservedFilename::ReservedFilename(int)>
c0008f8e:	83 c4 10             	add    esp,0x10
c0008f91:	89 1d 8c 3f 02 c0    	mov    DWORD PTR ds:0xc0023f8c,ebx
c0008f97:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008f9f:	83 ec 0c             	sub    esp,0xc
c0008fa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008fa6:	e8 ca e8 ff ff       	call   c0007875 <malloc>
c0008fab:	83 c4 10             	add    esp,0x10
c0008fae:	89 c3                	mov    ebx,eax
c0008fb0:	83 ec 08             	sub    esp,0x8
c0008fb3:	68 01 ff ff 0f       	push   0xfffff01
c0008fb8:	53                   	push   ebx
c0008fb9:	e8 fc 00 00 00       	call   c00090ba <ReservedFilename::ReservedFilename(int)>
c0008fbe:	83 c4 10             	add    esp,0x10
c0008fc1:	89 1d 90 3f 02 c0    	mov    DWORD PTR ds:0xc0023f90,ebx
c0008fc7:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008fcf:	83 ec 0c             	sub    esp,0xc
c0008fd2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008fd6:	e8 9a e8 ff ff       	call   c0007875 <malloc>
c0008fdb:	83 c4 10             	add    esp,0x10
c0008fde:	89 c3                	mov    ebx,eax
c0008fe0:	83 ec 08             	sub    esp,0x8
c0008fe3:	68 00 ff ff 0f       	push   0xfffff00
c0008fe8:	53                   	push   ebx
c0008fe9:	e8 cc 00 00 00       	call   c00090ba <ReservedFilename::ReservedFilename(int)>
c0008fee:	83 c4 10             	add    esp,0x10
c0008ff1:	89 1d 84 3f 02 c0    	mov    DWORD PTR ds:0xc0023f84,ebx
c0008ff7:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008fff:	83 ec 0c             	sub    esp,0xc
c0009002:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009006:	e8 6a e8 ff ff       	call   c0007875 <malloc>
c000900b:	83 c4 10             	add    esp,0x10
c000900e:	89 c3                	mov    ebx,eax
c0009010:	83 ec 08             	sub    esp,0x8
c0009013:	68 02 ff ff 0f       	push   0xfffff02
c0009018:	53                   	push   ebx
c0009019:	e8 9c 00 00 00       	call   c00090ba <ReservedFilename::ReservedFilename(int)>
c000901e:	83 c4 10             	add    esp,0x10
c0009021:	89 1d 88 3f 02 c0    	mov    DWORD PTR ds:0xc0023f88,ebx
c0009027:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000902f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0009034:	7f 7e                	jg     c00090b4 <UnixFile::UnixFile(int)+0x1aa>
c0009036:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000903e:	83 ec 0c             	sub    esp,0xc
c0009041:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009045:	e8 2b e8 ff ff       	call   c0007875 <malloc>
c000904a:	83 c4 10             	add    esp,0x10
c000904d:	89 c3                	mov    ebx,eax
c000904f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009053:	05 10 ff ff 0f       	add    eax,0xfffff10
c0009058:	83 ec 08             	sub    esp,0x8
c000905b:	50                   	push   eax
c000905c:	53                   	push   ebx
c000905d:	e8 58 00 00 00       	call   c00090ba <ReservedFilename::ReservedFilename(int)>
c0009062:	83 c4 10             	add    esp,0x10
c0009065:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009069:	89 1c 85 60 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0a0],ebx
c0009070:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009078:	83 ec 0c             	sub    esp,0xc
c000907b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000907f:	e8 f1 e7 ff ff       	call   c0007875 <malloc>
c0009084:	83 c4 10             	add    esp,0x10
c0009087:	89 c3                	mov    ebx,eax
c0009089:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000908d:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009092:	83 ec 08             	sub    esp,0x8
c0009095:	50                   	push   eax
c0009096:	53                   	push   ebx
c0009097:	e8 1e 00 00 00       	call   c00090ba <ReservedFilename::ReservedFilename(int)>
c000909c:	83 c4 10             	add    esp,0x10
c000909f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00090a3:	89 1c 85 20 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0e0],ebx
c00090aa:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00090ae:	e9 7c ff ff ff       	jmp    c000902f <UnixFile::UnixFile(int)+0x125>
c00090b3:	90                   	nop
c00090b4:	83 c4 28             	add    esp,0x28
c00090b7:	5b                   	pop    ebx
c00090b8:	c3                   	ret    
c00090b9:	90                   	nop

c00090ba <ReservedFilename::ReservedFilename(int)>:
c00090ba:	83 ec 0c             	sub    esp,0xc
c00090bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090c1:	83 ec 08             	sub    esp,0x8
c00090c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c8:	50                   	push   eax
c00090c9:	e8 3c fe ff ff       	call   c0008f0a <UnixFile::UnixFile(int)>
c00090ce:	83 c4 10             	add    esp,0x10
c00090d1:	ba 78 f0 01 c0       	mov    edx,0xc001f078
c00090d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090da:	89 10                	mov    DWORD PTR [eax],edx
c00090dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090e4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00090e7:	90                   	nop
c00090e8:	83 c4 0c             	add    esp,0xc
c00090eb:	c3                   	ret    

c00090ec <UnixFile::~UnixFile()>:
c00090ec:	83 ec 1c             	sub    esp,0x1c
c00090ef:	ba 5c f0 01 c0       	mov    edx,0xc001f05c
c00090f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00090f8:	89 10                	mov    DWORD PTR [eax],edx
c00090fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00090fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009101:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0009106:	7f 73                	jg     c000917b <UnixFile::~UnixFile()+0x8f>
c0009108:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	68 98 3f 02 c0       	push   0xc0023f98
c0009118:	e8 ef 4a 01 00       	call   c001dc0c <LinkedList<UnixFile>::getFirstElement()>
c000911d:	83 c4 10             	add    esp,0x10
c0009120:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009124:	83 ec 0c             	sub    esp,0xc
c0009127:	68 98 3f 02 c0       	push   0xc0023f98
c000912c:	e8 e3 4a 01 00       	call   c001dc14 <LinkedList<UnixFile>::removeFirst()>
c0009131:	83 c4 10             	add    esp,0x10
c0009134:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009138:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000913c:	74 40                	je     c000917e <UnixFile::~UnixFile()+0x92>
c000913e:	83 ec 08             	sub    esp,0x8
c0009141:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009145:	68 98 3f 02 c0       	push   0xc0023f98
c000914a:	e8 e9 49 01 00       	call   c001db38 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000914f:	83 c4 10             	add    esp,0x10
c0009152:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009156:	8d 50 01             	lea    edx,[eax+0x1]
c0009159:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000915d:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009162:	0f 94 c0             	sete   al
c0009165:	84 c0                	test   al,al
c0009167:	74 a7                	je     c0009110 <UnixFile::~UnixFile()+0x24>
c0009169:	83 ec 0c             	sub    esp,0xc
c000916c:	68 34 f0 01 c0       	push   0xc001f034
c0009171:	e8 25 72 00 00       	call   c001039b <KePanic(char const*)>
c0009176:	83 c4 10             	add    esp,0x10
c0009179:	eb 95                	jmp    c0009110 <UnixFile::~UnixFile()+0x24>
c000917b:	90                   	nop
c000917c:	eb 01                	jmp    c000917f <UnixFile::~UnixFile()+0x93>
c000917e:	90                   	nop
c000917f:	90                   	nop
c0009180:	83 c4 1c             	add    esp,0x1c
c0009183:	c3                   	ret    

c0009184 <UnixFile::~UnixFile()>:
c0009184:	83 ec 0c             	sub    esp,0xc
c0009187:	83 ec 0c             	sub    esp,0xc
c000918a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000918e:	e8 59 ff ff ff       	call   c00090ec <UnixFile::~UnixFile()>
c0009193:	83 c4 10             	add    esp,0x10
c0009196:	83 ec 08             	sub    esp,0x8
c0009199:	6a 0c                	push   0xc
c000919b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000919f:	e8 70 13 00 00       	call   c000a514 <operator delete(void*, unsigned long)>
c00091a4:	83 c4 10             	add    esp,0x10
c00091a7:	83 c4 0c             	add    esp,0xc
c00091aa:	c3                   	ret    
c00091ab:	90                   	nop

c00091ac <ReservedFilename::~ReservedFilename()>:
c00091ac:	83 ec 0c             	sub    esp,0xc
c00091af:	ba 78 f0 01 c0       	mov    edx,0xc001f078
c00091b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091b8:	89 10                	mov    DWORD PTR [eax],edx
c00091ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091be:	83 ec 0c             	sub    esp,0xc
c00091c1:	50                   	push   eax
c00091c2:	e8 25 ff ff ff       	call   c00090ec <UnixFile::~UnixFile()>
c00091c7:	83 c4 10             	add    esp,0x10
c00091ca:	90                   	nop
c00091cb:	83 c4 0c             	add    esp,0xc
c00091ce:	c3                   	ret    
c00091cf:	90                   	nop

c00091d0 <ReservedFilename::~ReservedFilename()>:
c00091d0:	83 ec 0c             	sub    esp,0xc
c00091d3:	83 ec 0c             	sub    esp,0xc
c00091d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091da:	e8 cd ff ff ff       	call   c00091ac <ReservedFilename::~ReservedFilename()>
c00091df:	83 c4 10             	add    esp,0x10
c00091e2:	83 ec 08             	sub    esp,0x8
c00091e5:	6a 0c                	push   0xc
c00091e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091eb:	e8 24 13 00 00       	call   c000a514 <operator delete(void*, unsigned long)>
c00091f0:	83 c4 10             	add    esp,0x10
c00091f3:	83 c4 0c             	add    esp,0xc
c00091f6:	c3                   	ret    

c00091f7 <getFromFileDescriptor(int)>:
c00091f7:	53                   	push   ebx
c00091f8:	83 ec 08             	sub    esp,0x8
c00091fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00091ff:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0009205:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000920b:	7f 2c                	jg     c0009239 <getFromFileDescriptor(int)+0x42>
c000920d:	83 ec 0c             	sub    esp,0xc
c0009210:	68 98 3f 02 c0       	push   0xc0023f98
c0009215:	e8 f2 49 01 00       	call   c001dc0c <LinkedList<UnixFile>::getFirstElement()>
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	85 c0                	test   eax,eax
c000921f:	75 04                	jne    c0009225 <getFromFileDescriptor(int)+0x2e>
c0009221:	31 c0                	xor    eax,eax
c0009223:	eb 6e                	jmp    c0009293 <getFromFileDescriptor(int)+0x9c>
c0009225:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009228:	74 69                	je     c0009293 <getFromFileDescriptor(int)+0x9c>
c000922a:	52                   	push   edx
c000922b:	52                   	push   edx
c000922c:	50                   	push   eax
c000922d:	68 98 3f 02 c0       	push   0xc0023f98
c0009232:	e8 7f 4a 01 00       	call   c001dcb6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0009237:	eb e1                	jmp    c000921a <getFromFileDescriptor(int)+0x23>
c0009239:	a1 8c 3f 02 c0       	mov    eax,ds:0xc0023f8c
c000923e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009244:	74 4d                	je     c0009293 <getFromFileDescriptor(int)+0x9c>
c0009246:	a1 90 3f 02 c0       	mov    eax,ds:0xc0023f90
c000924b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009251:	74 40                	je     c0009293 <getFromFileDescriptor(int)+0x9c>
c0009253:	a1 88 3f 02 c0       	mov    eax,ds:0xc0023f88
c0009258:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000925e:	74 33                	je     c0009293 <getFromFileDescriptor(int)+0x9c>
c0009260:	a1 84 3f 02 c0       	mov    eax,ds:0xc0023f84
c0009265:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000926b:	74 26                	je     c0009293 <getFromFileDescriptor(int)+0x9c>
c000926d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009273:	83 f8 08             	cmp    eax,0x8
c0009276:	77 09                	ja     c0009281 <getFromFileDescriptor(int)+0x8a>
c0009278:	8b 04 85 60 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0a0]
c000927f:	eb 12                	jmp    c0009293 <getFromFileDescriptor(int)+0x9c>
c0009281:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009287:	83 fb 08             	cmp    ebx,0x8
c000928a:	77 95                	ja     c0009221 <getFromFileDescriptor(int)+0x2a>
c000928c:	8b 04 9d 20 3f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdc0e0]
c0009293:	83 c4 08             	add    esp,0x8
c0009296:	5b                   	pop    ebx
c0009297:	c3                   	ret    

c0009298 <__static_initialization_and_destruction_0(int, int)>:
c0009298:	83 ec 0c             	sub    esp,0xc
c000929b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00092a0:	75 34                	jne    c00092d6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00092a2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00092aa:	75 2a                	jne    c00092d6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00092ac:	83 ec 0c             	sub    esp,0xc
c00092af:	68 98 3f 02 c0       	push   0xc0023f98
c00092b4:	e8 3d 48 01 00       	call   c001daf6 <LinkedList<UnixFile>::LinkedList()>
c00092b9:	83 c4 10             	add    esp,0x10
c00092bc:	83 ec 04             	sub    esp,0x4
c00092bf:	68 d0 0f 02 c0       	push   0xc0020fd0
c00092c4:	68 98 3f 02 c0       	push   0xc0023f98
c00092c9:	68 f4 da 01 c0       	push   0xc001daf4
c00092ce:	e8 f1 11 00 00       	call   c000a4c4 <__cxa_atexit>
c00092d3:	83 c4 10             	add    esp,0x10
c00092d6:	90                   	nop
c00092d7:	83 c4 0c             	add    esp,0xc
c00092da:	c3                   	ret    

c00092db <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00092db:	83 ec 0c             	sub    esp,0xc
c00092de:	83 ec 08             	sub    esp,0x8
c00092e1:	68 ff ff 00 00       	push   0xffff
c00092e6:	6a 01                	push   0x1
c00092e8:	e8 ab ff ff ff       	call   c0009298 <__static_initialization_and_destruction_0(int, int)>
c00092ed:	83 c4 10             	add    esp,0x10
c00092f0:	83 c4 0c             	add    esp,0xc
c00092f3:	c3                   	ret    

c00092f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00092f4:	53                   	push   ebx
c00092f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00092f9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00092fd:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0009303:	89 c8                	mov    eax,ecx
c0009305:	d1 e8                	shr    eax,1
c0009307:	03 05 48 10 02 c0    	add    eax,DWORD PTR ds:0xc0021048
c000930d:	83 e1 01             	and    ecx,0x1
c0009310:	8a 10                	mov    dl,BYTE PTR [eax]
c0009312:	75 09                	jne    c000931d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0009314:	83 e2 f0             	and    edx,0xfffffff0
c0009317:	09 da                	or     edx,ebx
c0009319:	88 10                	mov    BYTE PTR [eax],dl
c000931b:	5b                   	pop    ebx
c000931c:	c3                   	ret    
c000931d:	c1 e3 04             	shl    ebx,0x4
c0009320:	83 e2 0f             	and    edx,0xf
c0009323:	09 da                	or     edx,ebx
c0009325:	88 10                	mov    BYTE PTR [eax],dl
c0009327:	5b                   	pop    ebx
c0009328:	c3                   	ret    

c0009329 <Virt::getPageState(unsigned long)>:
c0009329:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000932d:	8b 0d 48 10 02 c0    	mov    ecx,DWORD PTR ds:0xc0021048
c0009333:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009339:	89 d0                	mov    eax,edx
c000933b:	d1 e8                	shr    eax,1
c000933d:	83 e2 01             	and    edx,0x1
c0009340:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009343:	75 04                	jne    c0009349 <Virt::getPageState(unsigned long)+0x20>
c0009345:	83 e0 0f             	and    eax,0xf
c0009348:	c3                   	ret    
c0009349:	c0 e8 04             	shr    al,0x4
c000934c:	c3                   	ret    

c000934d <Virt::allocateKernelVirtualPages(int)>:
c000934d:	55                   	push   ebp
c000934e:	31 ed                	xor    ebp,ebp
c0009350:	57                   	push   edi
c0009351:	56                   	push   esi
c0009352:	53                   	push   ebx
c0009353:	31 db                	xor    ebx,ebx
c0009355:	83 ec 1c             	sub    esp,0x1c
c0009358:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000935c:	8b 3d 44 10 02 c0    	mov    edi,DWORD PTR ds:0xc0021044
c0009362:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009367:	57                   	push   edi
c0009368:	e8 bc ff ff ff       	call   c0009329 <Virt::getPageState(unsigned long)>
c000936d:	5a                   	pop    edx
c000936e:	84 c0                	test   al,al
c0009370:	75 3a                	jne    c00093ac <Virt::allocateKernelVirtualPages(int)+0x5f>
c0009372:	85 db                	test   ebx,ebx
c0009374:	75 02                	jne    c0009378 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0009376:	89 fd                	mov    ebp,edi
c0009378:	43                   	inc    ebx
c0009379:	39 f3                	cmp    ebx,esi
c000937b:	74 5a                	je     c00093d7 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000937d:	47                   	inc    edi
c000937e:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0009384:	76 31                	jbe    c00093b7 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0009386:	c7 05 44 10 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0021044,0xc8000
c0009390:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0009395:	75 28                	jne    c00093bf <Virt::allocateKernelVirtualPages(int)+0x72>
c0009397:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000939c:	bf 00 80 0c 00       	mov    edi,0xc8000
c00093a1:	57                   	push   edi
c00093a2:	e8 82 ff ff ff       	call   c0009329 <Virt::getPageState(unsigned long)>
c00093a7:	5a                   	pop    edx
c00093a8:	84 c0                	test   al,al
c00093aa:	74 c6                	je     c0009372 <Virt::allocateKernelVirtualPages(int)+0x25>
c00093ac:	31 db                	xor    ebx,ebx
c00093ae:	47                   	inc    edi
c00093af:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00093b5:	77 cf                	ja     c0009386 <Virt::allocateKernelVirtualPages(int)+0x39>
c00093b7:	89 3d 44 10 02 c0    	mov    DWORD PTR ds:0xc0021044,edi
c00093bd:	eb a8                	jmp    c0009367 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00093bf:	83 ec 0c             	sub    esp,0xc
c00093c2:	68 8c f0 01 c0       	push   0xc001f08c
c00093c7:	e8 cf 6f 00 00       	call   c001039b <KePanic(char const*)>
c00093cc:	8b 3d 44 10 02 c0    	mov    edi,DWORD PTR ds:0xc0021044
c00093d2:	83 c4 10             	add    esp,0x10
c00093d5:	eb 90                	jmp    c0009367 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00093d7:	89 2d 44 10 02 c0    	mov    DWORD PTR ds:0xc0021044,ebp
c00093dd:	4b                   	dec    ebx
c00093de:	74 5f                	je     c000943f <Virt::allocateKernelVirtualPages(int)+0xf2>
c00093e0:	85 f6                	test   esi,esi
c00093e2:	74 3d                	je     c0009421 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00093e4:	89 e8                	mov    eax,ebp
c00093e6:	31 db                	xor    ebx,ebx
c00093e8:	8d 7e ff             	lea    edi,[esi-0x1]
c00093eb:	eb 14                	jmp    c0009401 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00093ed:	6a 01                	push   0x1
c00093ef:	43                   	inc    ebx
c00093f0:	50                   	push   eax
c00093f1:	e8 fe fe ff ff       	call   c00092f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00093f6:	58                   	pop    eax
c00093f7:	39 f3                	cmp    ebx,esi
c00093f9:	5a                   	pop    edx
c00093fa:	74 25                	je     c0009421 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00093fc:	a1 44 10 02 c0       	mov    eax,ds:0xc0021044
c0009401:	8d 50 01             	lea    edx,[eax+0x1]
c0009404:	85 db                	test   ebx,ebx
c0009406:	89 15 44 10 02 c0    	mov    DWORD PTR ds:0xc0021044,edx
c000940c:	74 20                	je     c000942e <Virt::allocateKernelVirtualPages(int)+0xe1>
c000940e:	39 df                	cmp    edi,ebx
c0009410:	75 db                	jne    c00093ed <Virt::allocateKernelVirtualPages(int)+0xa0>
c0009412:	6a 03                	push   0x3
c0009414:	43                   	inc    ebx
c0009415:	50                   	push   eax
c0009416:	e8 d9 fe ff ff       	call   c00092f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000941b:	59                   	pop    ecx
c000941c:	39 f3                	cmp    ebx,esi
c000941e:	58                   	pop    eax
c000941f:	75 db                	jne    c00093fc <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009421:	83 c4 1c             	add    esp,0x1c
c0009424:	89 e8                	mov    eax,ebp
c0009426:	5b                   	pop    ebx
c0009427:	c1 e0 0c             	shl    eax,0xc
c000942a:	5e                   	pop    esi
c000942b:	5f                   	pop    edi
c000942c:	5d                   	pop    ebp
c000942d:	c3                   	ret    
c000942e:	6a 02                	push   0x2
c0009430:	bb 01 00 00 00       	mov    ebx,0x1
c0009435:	50                   	push   eax
c0009436:	e8 b9 fe ff ff       	call   c00092f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000943b:	58                   	pop    eax
c000943c:	5a                   	pop    edx
c000943d:	eb bd                	jmp    c00093fc <Virt::allocateKernelVirtualPages(int)+0xaf>
c000943f:	6a 04                	push   0x4
c0009441:	8d 45 01             	lea    eax,[ebp+0x1]
c0009444:	55                   	push   ebp
c0009445:	a3 44 10 02 c0       	mov    ds:0xc0021044,eax
c000944a:	e8 a5 fe ff ff       	call   c00092f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000944f:	59                   	pop    ecx
c0009450:	89 e8                	mov    eax,ebp
c0009452:	5b                   	pop    ebx
c0009453:	c1 e0 0c             	shl    eax,0xc
c0009456:	83 c4 1c             	add    esp,0x1c
c0009459:	5b                   	pop    ebx
c000945a:	5e                   	pop    esi
c000945b:	5f                   	pop    edi
c000945c:	5d                   	pop    ebp
c000945d:	c3                   	ret    

c000945e <Virt::freeSwapfilePage(unsigned long)>:
c000945e:	53                   	push   ebx
c000945f:	8b 15 ac 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fac
c0009465:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009469:	b8 01 00 00 00       	mov    eax,0x1
c000946e:	89 cb                	mov    ebx,ecx
c0009470:	d3 e0                	shl    eax,cl
c0009472:	c1 eb 05             	shr    ebx,0x5
c0009475:	f7 d0                	not    eax
c0009477:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000947a:	5b                   	pop    ebx
c000947b:	c3                   	ret    

c000947c <Virt::swapIDToSector(unsigned long)>:
c000947c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009480:	0f af 05 4c 10 02 c0 	imul   eax,DWORD PTR ds:0xc002104c
c0009487:	03 05 54 10 02 c0    	add    eax,DWORD PTR ds:0xc0021054
c000948d:	c3                   	ret    

c000948e <Virt::allocateSwapfilePage()>:
c000948e:	55                   	push   ebp
c000948f:	31 d2                	xor    edx,edx
c0009491:	57                   	push   edi
c0009492:	56                   	push   esi
c0009493:	53                   	push   ebx
c0009494:	83 ec 0c             	sub    esp,0xc
c0009497:	8b 0d 4c 10 02 c0    	mov    ecx,DWORD PTR ds:0xc002104c
c000949d:	a1 50 10 02 c0       	mov    eax,ds:0xc0021050
c00094a2:	f7 f1                	div    ecx
c00094a4:	39 0d 50 10 02 c0    	cmp    DWORD PTR ds:0xc0021050,ecx
c00094aa:	72 2d                	jb     c00094d9 <Virt::allocateSwapfilePage()+0x4b>
c00094ac:	8b 35 ac 3f 02 c0    	mov    esi,DWORD PTR ds:0xc0023fac
c00094b2:	8b 16                	mov    edx,DWORD PTR [esi]
c00094b4:	f6 c2 01             	test   dl,0x1
c00094b7:	74 3c                	je     c00094f5 <Virt::allocateSwapfilePage()+0x67>
c00094b9:	31 c9                	xor    ecx,ecx
c00094bb:	bf 01 00 00 00       	mov    edi,0x1
c00094c0:	eb 12                	jmp    c00094d4 <Virt::allocateSwapfilePage()+0x46>
c00094c2:	89 fd                	mov    ebp,edi
c00094c4:	89 ca                	mov    edx,ecx
c00094c6:	d3 e5                	shl    ebp,cl
c00094c8:	c1 ea 05             	shr    edx,0x5
c00094cb:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00094ce:	8b 13                	mov    edx,DWORD PTR [ebx]
c00094d0:	85 ea                	test   edx,ebp
c00094d2:	74 2a                	je     c00094fe <Virt::allocateSwapfilePage()+0x70>
c00094d4:	41                   	inc    ecx
c00094d5:	39 c8                	cmp    eax,ecx
c00094d7:	77 e9                	ja     c00094c2 <Virt::allocateSwapfilePage()+0x34>
c00094d9:	83 ec 0c             	sub    esp,0xc
c00094dc:	68 f3 f1 01 c0       	push   0xc001f1f3
c00094e1:	e8 b5 6e 00 00       	call   c001039b <KePanic(char const*)>
c00094e6:	83 c4 10             	add    esp,0x10
c00094e9:	31 c9                	xor    ecx,ecx
c00094eb:	83 c4 0c             	add    esp,0xc
c00094ee:	89 c8                	mov    eax,ecx
c00094f0:	5b                   	pop    ebx
c00094f1:	5e                   	pop    esi
c00094f2:	5f                   	pop    edi
c00094f3:	5d                   	pop    ebp
c00094f4:	c3                   	ret    
c00094f5:	89 f3                	mov    ebx,esi
c00094f7:	bd 01 00 00 00       	mov    ebp,0x1
c00094fc:	31 c9                	xor    ecx,ecx
c00094fe:	09 ea                	or     edx,ebp
c0009500:	89 c8                	mov    eax,ecx
c0009502:	89 13                	mov    DWORD PTR [ebx],edx
c0009504:	83 c4 0c             	add    esp,0xc
c0009507:	5b                   	pop    ebx
c0009508:	5e                   	pop    esi
c0009509:	5f                   	pop    edi
c000950a:	5d                   	pop    ebp
c000950b:	c3                   	ret    

c000950c <Virt::virtualMemorySetup()>:
c000950c:	53                   	push   ebx
c000950d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009512:	6a 0f                	push   0xf
c0009514:	53                   	push   ebx
c0009515:	43                   	inc    ebx
c0009516:	e8 d9 fd ff ff       	call   c00092f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000951b:	58                   	pop    eax
c000951c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009522:	5a                   	pop    edx
c0009523:	75 ed                	jne    c0009512 <Virt::virtualMemorySetup()+0x6>
c0009525:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000952a:	6a 00                	push   0x0
c000952c:	53                   	push   ebx
c000952d:	43                   	inc    ebx
c000952e:	e8 c1 fd ff ff       	call   c00092f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009533:	59                   	pop    ecx
c0009534:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000953a:	58                   	pop    eax
c000953b:	75 ed                	jne    c000952a <Virt::virtualMemorySetup()+0x1e>
c000953d:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009542:	6a 0f                	push   0xf
c0009544:	53                   	push   ebx
c0009545:	43                   	inc    ebx
c0009546:	e8 a9 fd ff ff       	call   c00092f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000954b:	58                   	pop    eax
c000954c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009552:	5a                   	pop    edx
c0009553:	75 ed                	jne    c0009542 <Virt::virtualMemorySetup()+0x36>
c0009555:	5b                   	pop    ebx
c0009556:	c3                   	ret    

c0009557 <Virt::setupPageSwapping(int)>:
c0009557:	53                   	push   ebx
c0009558:	83 ec 0c             	sub    esp,0xc
c000955b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000955f:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c0009564:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000956a:	8b 10                	mov    edx,DWORD PTR [eax]
c000956c:	53                   	push   ebx
c000956d:	c1 e3 0b             	shl    ebx,0xb
c0009570:	68 0a f2 01 c0       	push   0xc001f20a
c0009575:	50                   	push   eax
c0009576:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009579:	89 1d 50 10 02 c0    	mov    DWORD PTR ds:0xc0021050,ebx
c000957f:	c6 05 58 10 02 c0 43 	mov    BYTE PTR ds:0xc0021058,0x43
c0009586:	c1 eb 08             	shr    ebx,0x8
c0009589:	a3 54 10 02 c0       	mov    ds:0xc0021054,eax
c000958e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009591:	c7 05 4c 10 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002104c,0x8
c000959b:	e8 d5 e2 ff ff       	call   c0007875 <malloc>
c00095a0:	83 c4 0c             	add    esp,0xc
c00095a3:	89 c1                	mov    ecx,eax
c00095a5:	a3 ac 3f 02 c0       	mov    ds:0xc0023fac,eax
c00095aa:	31 d2                	xor    edx,edx
c00095ac:	a1 50 10 02 c0       	mov    eax,ds:0xc0021050
c00095b1:	f7 35 4c 10 02 c0    	div    DWORD PTR ds:0xc002104c
c00095b7:	c1 e8 05             	shr    eax,0x5
c00095ba:	50                   	push   eax
c00095bb:	6a 00                	push   0x0
c00095bd:	51                   	push   ecx
c00095be:	e8 0d 6f ff ff       	call   c00004d0 <memset>
c00095c3:	83 c4 18             	add    esp,0x18
c00095c6:	5b                   	pop    ebx
c00095c7:	c3                   	ret    

c00095c8 <VAS::VAS(VAS*)>:
c00095c8:	83 ec 0c             	sub    esp,0xc
c00095cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095cf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00095d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095da:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00095e1:	83 ec 0c             	sub    esp,0xc
c00095e4:	68 ac f0 01 c0       	push   0xc001f0ac
c00095e9:	e8 ad 6d 00 00       	call   c001039b <KePanic(char const*)>
c00095ee:	83 c4 10             	add    esp,0x10
c00095f1:	90                   	nop
c00095f2:	83 c4 0c             	add    esp,0xc
c00095f5:	c3                   	ret    

c00095f6 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00095f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095fa:	89 c2                	mov    edx,eax
c00095fc:	c1 e8 0a             	shr    eax,0xa
c00095ff:	c1 ea 16             	shr    edx,0x16
c0009602:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009607:	19 c9                	sbb    ecx,ecx
c0009609:	c1 e2 0c             	shl    edx,0xc
c000960c:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009612:	25 fc 0f 00 00       	and    eax,0xffc
c0009617:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000961e:	01 d0                	add    eax,edx
c0009620:	c3                   	ret    
c0009621:	90                   	nop

c0009622 <VAS::getPageTableEntry(unsigned long)>:
c0009622:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009626:	89 ca                	mov    edx,ecx
c0009628:	c1 e9 0a             	shr    ecx,0xa
c000962b:	c1 ea 16             	shr    edx,0x16
c000962e:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009634:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000963a:	c1 e0 0c             	shl    eax,0xc
c000963d:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009640:	c3                   	ret    

c0009641 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009641:	57                   	push   edi
c0009642:	56                   	push   esi
c0009643:	be 01 00 00 00       	mov    esi,0x1
c0009648:	53                   	push   ebx
c0009649:	83 ec 10             	sub    esp,0x10
c000964c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009650:	c1 eb 0c             	shr    ebx,0xc
c0009653:	eb 3f                	jmp    c0009694 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0009655:	83 ec 08             	sub    esp,0x8
c0009658:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c000965d:	57                   	push   edi
c000965e:	50                   	push   eax
c000965f:	e8 be ff ff ff       	call   c0009622 <VAS::getPageTableEntry(unsigned long)>
c0009664:	83 c4 10             	add    esp,0x10
c0009667:	8b 00                	mov    eax,DWORD PTR [eax]
c0009669:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000966d:	f6 c4 04             	test   ah,0x4
c0009670:	75 60                	jne    c00096d2 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c0009672:	80 fa 04             	cmp    dl,0x4
c0009675:	74 79                	je     c00096f0 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c0009677:	80 fa 02             	cmp    dl,0x2
c000967a:	0f 84 89 00 00 00    	je     c0009709 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0009680:	80 fa 03             	cmp    dl,0x3
c0009683:	0f 84 ae 00 00 00    	je     c0009737 <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c0009689:	fe ca                	dec    dl
c000968b:	0f 84 93 00 00 00    	je     c0009724 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009691:	43                   	inc    ebx
c0009692:	31 f6                	xor    esi,esi
c0009694:	53                   	push   ebx
c0009695:	89 df                	mov    edi,ebx
c0009697:	e8 8d fc ff ff       	call   c0009329 <Virt::getPageState(unsigned long)>
c000969c:	c1 e7 0c             	shl    edi,0xc
c000969f:	5a                   	pop    edx
c00096a0:	84 c0                	test   al,al
c00096a2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00096a6:	75 ad                	jne    c0009655 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00096a8:	83 ec 0c             	sub    esp,0xc
c00096ab:	68 21 f2 01 c0       	push   0xc001f221
c00096b0:	e8 e6 6c 00 00       	call   c001039b <KePanic(char const*)>
c00096b5:	5a                   	pop    edx
c00096b6:	59                   	pop    ecx
c00096b7:	57                   	push   edi
c00096b8:	8b 3d b0 3f 02 c0    	mov    edi,DWORD PTR ds:0xc0023fb0
c00096be:	57                   	push   edi
c00096bf:	e8 5e ff ff ff       	call   c0009622 <VAS::getPageTableEntry(unsigned long)>
c00096c4:	83 c4 10             	add    esp,0x10
c00096c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00096c9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00096cd:	f6 c4 04             	test   ah,0x4
c00096d0:	74 bf                	je     c0009691 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00096d2:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00096d6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 0b e4 ff ff       	call   c0007aef <Phys::freePage(unsigned long)>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00096eb:	80 fa 04             	cmp    dl,0x4
c00096ee:	75 87                	jne    c0009677 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00096f0:	89 f0                	mov    eax,esi
c00096f2:	84 c0                	test   al,al
c00096f4:	75 47                	jne    c000973d <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c00096f6:	c7 44 24 20 d0 f0 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f0d0
c00096fe:	83 c4 10             	add    esp,0x10
c0009701:	5b                   	pop    ebx
c0009702:	5e                   	pop    esi
c0009703:	5f                   	pop    edi
c0009704:	e9 92 6c 00 00       	jmp    c001039b <KePanic(char const*)>
c0009709:	89 f0                	mov    eax,esi
c000970b:	84 c0                	test   al,al
c000970d:	75 15                	jne    c0009724 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c000970f:	83 ec 0c             	sub    esp,0xc
c0009712:	68 3d f2 01 c0       	push   0xc001f23d
c0009717:	e8 7f 6c 00 00       	call   c001039b <KePanic(char const*)>
c000971c:	83 c4 10             	add    esp,0x10
c000971f:	e9 6d ff ff ff       	jmp    c0009691 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009724:	83 ec 08             	sub    esp,0x8
c0009727:	6a 00                	push   0x0
c0009729:	53                   	push   ebx
c000972a:	e8 c5 fb ff ff       	call   c00092f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000972f:	83 c4 10             	add    esp,0x10
c0009732:	e9 5a ff ff ff       	jmp    c0009691 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009737:	89 f0                	mov    eax,esi
c0009739:	84 c0                	test   al,al
c000973b:	75 15                	jne    c0009752 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c000973d:	83 ec 08             	sub    esp,0x8
c0009740:	6a 00                	push   0x0
c0009742:	53                   	push   ebx
c0009743:	e8 ac fb ff ff       	call   c00092f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009748:	83 c4 10             	add    esp,0x10
c000974b:	83 c4 10             	add    esp,0x10
c000974e:	5b                   	pop    ebx
c000974f:	5e                   	pop    esi
c0009750:	5f                   	pop    edi
c0009751:	c3                   	ret    
c0009752:	c7 44 24 20 59 f2 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f259
c000975a:	83 c4 10             	add    esp,0x10
c000975d:	5b                   	pop    ebx
c000975e:	5e                   	pop    esi
c000975f:	5f                   	pop    edi
c0009760:	e9 36 6c 00 00       	jmp    c001039b <KePanic(char const*)>
c0009765:	90                   	nop

c0009766 <VAS::freeAllocatedPages(unsigned long)>:
c0009766:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000976a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000976e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009772:	74 09                	je     c000977d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009774:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009778:	e9 c4 fe ff ff       	jmp    c0009641 <Virt::freeKernelVirtualPages(unsigned long)>
c000977d:	c7 44 24 04 f4 f0 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f0f4
c0009785:	e9 80 0e 00 00       	jmp    c000a60a <Dbg::kprintf(char const*, ...)>

c000978a <VAS::virtualToPhysical(unsigned long)>:
c000978a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000978e:	50                   	push   eax
c000978f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009793:	52                   	push   edx
c0009794:	e8 89 fe ff ff       	call   c0009622 <VAS::getPageTableEntry(unsigned long)>
c0009799:	59                   	pop    ecx
c000979a:	8b 00                	mov    eax,DWORD PTR [eax]
c000979c:	5a                   	pop    edx
c000979d:	25 00 f0 ff ff       	and    eax,0xfffff000
c00097a2:	c3                   	ret    
c00097a3:	90                   	nop

c00097a4 <VAS::reflagRange(unsigned long, int, int, int)>:
c00097a4:	55                   	push   ebp
c00097a5:	57                   	push   edi
c00097a6:	56                   	push   esi
c00097a7:	53                   	push   ebx
c00097a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00097ac:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00097b0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00097b4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00097b8:	85 db                	test   ebx,ebx
c00097ba:	7e 22                	jle    c00097de <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00097bc:	c1 e3 0c             	shl    ebx,0xc
c00097bf:	01 f3                	add    ebx,esi
c00097c1:	56                   	push   esi
c00097c2:	81 c6 00 10 00 00    	add    esi,0x1000
c00097c8:	55                   	push   ebp
c00097c9:	e8 54 fe ff ff       	call   c0009622 <VAS::getPageTableEntry(unsigned long)>
c00097ce:	5a                   	pop    edx
c00097cf:	59                   	pop    ecx
c00097d0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00097d2:	21 f9                	and    ecx,edi
c00097d4:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00097d8:	39 f3                	cmp    ebx,esi
c00097da:	89 08                	mov    DWORD PTR [eax],ecx
c00097dc:	75 e3                	jne    c00097c1 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00097de:	5b                   	pop    ebx
c00097df:	5e                   	pop    esi
c00097e0:	5f                   	pop    edi
c00097e1:	5d                   	pop    ebp
c00097e2:	c3                   	ret    
c00097e3:	90                   	nop

c00097e4 <VAS::VAS()>:
c00097e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00097ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097f3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00097fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097fe:	a3 b0 3f 02 c0       	mov    ds:0xc0023fb0,eax
c0009803:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009807:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000980b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000980f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009812:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009816:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000981d:	ba 7d 20 02 c0       	mov    edx,0xc002207d
c0009822:	b8 00 20 02 c0       	mov    eax,0xc0022000
c0009827:	29 c2                	sub    edx,eax
c0009829:	89 d0                	mov    eax,edx
c000982b:	05 ff 0f 00 00       	add    eax,0xfff
c0009830:	c1 e8 0c             	shr    eax,0xc
c0009833:	89 c2                	mov    edx,eax
c0009835:	b8 00 20 02 c0       	mov    eax,0xc0022000
c000983a:	6a 04                	push   0x4
c000983c:	6a ff                	push   0xffffffff
c000983e:	52                   	push   edx
c000983f:	50                   	push   eax
c0009840:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009844:	e8 5b ff ff ff       	call   c00097a4 <VAS::reflagRange(unsigned long, int, int, int)>
c0009849:	83 c4 14             	add    esp,0x14
c000984c:	90                   	nop
c000984d:	c3                   	ret    

c000984e <VAS::setToWriteCombining(unsigned long, int)>:
c000984e:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009853:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009859:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009860:	75 01                	jne    c0009863 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009862:	c3                   	ret    
c0009863:	68 80 00 00 00       	push   0x80
c0009868:	6a ff                	push   0xffffffff
c000986a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000986e:	50                   	push   eax
c000986f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009873:	52                   	push   edx
c0009874:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009878:	51                   	push   ecx
c0009879:	e8 26 ff ff ff       	call   c00097a4 <VAS::reflagRange(unsigned long, int, int, int)>
c000987e:	83 c4 14             	add    esp,0x14
c0009881:	c3                   	ret    

c0009882 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009882:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009887:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000988b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000988e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009892:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009895:	19 c0                	sbb    eax,eax
c0009897:	83 ca 03             	or     edx,0x3
c000989a:	83 e0 fc             	and    eax,0xfffffffc
c000989d:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00098a4:	0f 20 d8             	mov    eax,cr3
c00098a7:	0f 22 d8             	mov    cr3,eax
c00098aa:	c3                   	ret    
c00098ab:	90                   	nop

c00098ac <VAS::~VAS()>:
c00098ac:	83 ec 2c             	sub    esp,0x2c
c00098af:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00098b7:	fa                   	cli    
c00098b8:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00098bd:	40                   	inc    eax
c00098be:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00098c3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00098c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00098ca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00098cd:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00098d3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00098d7:	6a 01                	push   0x1
c00098d9:	50                   	push   eax
c00098da:	e8 a3 ff ff ff       	call   c0009882 <VAS::mapOtherVASIn(bool, VAS*)>
c00098df:	83 c4 0c             	add    esp,0xc
c00098e2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00098ea:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00098f2:	0f 8f d4 00 00 00    	jg     c00099cc <VAS::~VAS()+0x120>
c00098f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098fc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009903:	c1 e2 02             	shl    edx,0x2
c0009906:	01 d0                	add    eax,edx
c0009908:	8b 00                	mov    eax,DWORD PTR [eax]
c000990a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000990e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009912:	83 e0 01             	and    eax,0x1
c0009915:	0f 84 a8 00 00 00    	je     c00099c3 <VAS::~VAS()+0x117>
c000991b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009923:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000992b:	7f 72                	jg     c000999f <VAS::~VAS()+0xf3>
c000992d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009931:	c1 e0 0a             	shl    eax,0xa
c0009934:	89 c2                	mov    edx,eax
c0009936:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000993a:	01 d0                	add    eax,edx
c000993c:	c1 e0 0c             	shl    eax,0xc
c000993f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009943:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009948:	8b 00                	mov    eax,DWORD PTR [eax]
c000994a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000994d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009953:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009957:	6a 01                	push   0x1
c0009959:	50                   	push   eax
c000995a:	e8 97 fc ff ff       	call   c00095f6 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000995f:	83 c4 0c             	add    esp,0xc
c0009962:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009966:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000996a:	8b 00                	mov    eax,DWORD PTR [eax]
c000996c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009970:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009974:	25 01 04 00 00       	and    eax,0x401
c0009979:	3d 01 04 00 00       	cmp    eax,0x401
c000997e:	75 19                	jne    c0009999 <VAS::~VAS()+0xed>
c0009980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009984:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009989:	83 ec 0c             	sub    esp,0xc
c000998c:	50                   	push   eax
c000998d:	e8 5d e1 ff ff       	call   c0007aef <Phys::freePage(unsigned long)>
c0009992:	83 c4 10             	add    esp,0x10
c0009995:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009999:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000999d:	eb 84                	jmp    c0009923 <VAS::~VAS()+0x77>
c000999f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099a3:	25 00 04 00 00       	and    eax,0x400
c00099a8:	74 19                	je     c00099c3 <VAS::~VAS()+0x117>
c00099aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099ae:	25 00 f0 ff ff       	and    eax,0xfffff000
c00099b3:	83 ec 0c             	sub    esp,0xc
c00099b6:	50                   	push   eax
c00099b7:	e8 33 e1 ff ff       	call   c0007aef <Phys::freePage(unsigned long)>
c00099bc:	83 c4 10             	add    esp,0x10
c00099bf:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00099c3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00099c7:	e9 1e ff ff ff       	jmp    c00098ea <VAS::~VAS()+0x3e>
c00099cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00099d0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	50                   	push   eax
c00099d7:	e8 65 fc ff ff       	call   c0009641 <Virt::freeKernelVirtualPages(unsigned long)>
c00099dc:	83 c4 10             	add    esp,0x10
c00099df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00099e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00099e6:	83 ec 0c             	sub    esp,0xc
c00099e9:	50                   	push   eax
c00099ea:	e8 00 e1 ff ff       	call   c0007aef <Phys::freePage(unsigned long)>
c00099ef:	83 c4 10             	add    esp,0x10
c00099f2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00099f6:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00099fb:	48                   	dec    eax
c00099fc:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0009a01:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0009a06:	85 c0                	test   eax,eax
c0009a08:	75 01                	jne    c0009a0b <VAS::~VAS()+0x15f>
c0009a0a:	fb                   	sti    
c0009a0b:	90                   	nop
c0009a0c:	83 c4 2c             	add    esp,0x2c
c0009a0f:	c3                   	ret    

c0009a10 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009a10:	55                   	push   ebp
c0009a11:	57                   	push   edi
c0009a12:	56                   	push   esi
c0009a13:	53                   	push   ebx
c0009a14:	83 ec 1c             	sub    esp,0x1c
c0009a17:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009a1b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a1f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009a25:	77 0b                	ja     c0009a32 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009a27:	0f 20 d8             	mov    eax,cr3
c0009a2a:	0f 20 d8             	mov    eax,cr3
c0009a2d:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009a30:	75 47                	jne    c0009a79 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0009a32:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a36:	09 d8                	or     eax,ebx
c0009a38:	a9 ff 0f 00 00       	test   eax,0xfff
c0009a3d:	75 57                	jne    c0009a96 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009a3f:	89 de                	mov    esi,ebx
c0009a41:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009a44:	c1 ee 16             	shr    esi,0x16
c0009a47:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009a4e:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009a52:	74 54                	je     c0009aa8 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0009a54:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009a58:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009a5e:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0009a62:	c1 e6 0c             	shl    esi,0xc
c0009a65:	c1 eb 0a             	shr    ebx,0xa
c0009a68:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009a6e:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009a71:	83 c4 1c             	add    esp,0x1c
c0009a74:	5b                   	pop    ebx
c0009a75:	5e                   	pop    esi
c0009a76:	5f                   	pop    edi
c0009a77:	5d                   	pop    ebp
c0009a78:	c3                   	ret    
c0009a79:	83 ec 0c             	sub    esp,0xc
c0009a7c:	68 18 f1 01 c0       	push   0xc001f118
c0009a81:	e8 84 0b 00 00       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0009a86:	83 c4 10             	add    esp,0x10
c0009a89:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a8d:	09 d8                	or     eax,ebx
c0009a8f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009a94:	74 a9                	je     c0009a3f <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009a96:	83 ec 0c             	sub    esp,0xc
c0009a99:	68 80 f1 01 c0       	push   0xc001f180
c0009a9e:	e8 f8 68 00 00       	call   c001039b <KePanic(char const*)>
c0009aa3:	83 c4 10             	add    esp,0x10
c0009aa6:	eb 97                	jmp    c0009a3f <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009aa8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009aac:	e8 a0 e0 ff ff       	call   c0007b51 <Phys::allocatePage()>
c0009ab1:	83 ec 0c             	sub    esp,0xc
c0009ab4:	89 c5                	mov    ebp,eax
c0009ab6:	8b 0d b0 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fb0
c0009abc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009ac0:	6a 01                	push   0x1
c0009ac2:	e8 86 f8 ff ff       	call   c000934d <Virt::allocateKernelVirtualPages(int)>
c0009ac7:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ace:	6a 01                	push   0x1
c0009ad0:	50                   	push   eax
c0009ad1:	55                   	push   ebp
c0009ad2:	81 cd 07 04 00 00    	or     ebp,0x407
c0009ad8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009adc:	51                   	push   ecx
c0009add:	e8 28 02 00 00       	call   c0009d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009ae2:	83 c4 1c             	add    esp,0x1c
c0009ae5:	68 00 10 00 00       	push   0x1000
c0009aea:	6a 00                	push   0x0
c0009aec:	50                   	push   eax
c0009aed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009af1:	e8 da 69 ff ff       	call   c00004d0 <memset>
c0009af6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009afa:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009afd:	e8 3f fb ff ff       	call   c0009641 <Virt::freeKernelVirtualPages(unsigned long)>
c0009b02:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009b06:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009b09:	83 c4 10             	add    esp,0x10
c0009b0c:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009b0f:	e9 40 ff ff ff       	jmp    c0009a54 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009b14 <VAS::allocatePages(int, int)>:
c0009b14:	55                   	push   ebp
c0009b15:	57                   	push   edi
c0009b16:	56                   	push   esi
c0009b17:	53                   	push   ebx
c0009b18:	83 ec 1c             	sub    esp,0x1c
c0009b1b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009b1f:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009b24:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b2a:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009b30:	83 e0 01             	and    eax,0x1
c0009b33:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009b37:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009b3b:	0f 85 cc 00 00 00    	jne    c0009c0d <VAS::allocatePages(int, int)+0xf9>
c0009b41:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009b44:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b48:	85 c0                	test   eax,eax
c0009b4a:	0f 84 a1 00 00 00    	je     c0009bf1 <VAS::allocatePages(int, int)+0xdd>
c0009b50:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009b54:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b58:	c1 e6 0c             	shl    esi,0xc
c0009b5b:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009b5f:	85 c0                	test   eax,eax
c0009b61:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009b64:	7e 33                	jle    c0009b99 <VAS::allocatePages(int, int)+0x85>
c0009b66:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009b6a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b6e:	81 cd 00 04 00 00    	or     ebp,0x400
c0009b74:	e8 d8 df ff ff       	call   c0007b51 <Phys::allocatePage()>
c0009b79:	55                   	push   ebp
c0009b7a:	53                   	push   ebx
c0009b7b:	50                   	push   eax
c0009b7c:	57                   	push   edi
c0009b7d:	e8 8e fe ff ff       	call   c0009a10 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b82:	83 c4 10             	add    esp,0x10
c0009b85:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b8a:	74 03                	je     c0009b8f <VAS::allocatePages(int, int)+0x7b>
c0009b8c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b8f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b95:	39 de                	cmp    esi,ebx
c0009b97:	75 db                	jne    c0009b74 <VAS::allocatePages(int, int)+0x60>
c0009b99:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b9e:	75 12                	jne    c0009bb2 <VAS::allocatePages(int, int)+0x9e>
c0009ba0:	0f 20 d8             	mov    eax,cr3
c0009ba3:	0f 22 d8             	mov    cr3,eax
c0009ba6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009baa:	83 c4 1c             	add    esp,0x1c
c0009bad:	5b                   	pop    ebx
c0009bae:	5e                   	pop    esi
c0009baf:	5f                   	pop    edi
c0009bb0:	5d                   	pop    ebp
c0009bb1:	c3                   	ret    
c0009bb2:	c1 ee 0a             	shr    esi,0xa
c0009bb5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009bb9:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009bbf:	c1 eb 0a             	shr    ebx,0xa
c0009bc2:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009bc8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009bce:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009bd4:	39 c3                	cmp    ebx,eax
c0009bd6:	77 ce                	ja     c0009ba6 <VAS::allocatePages(int, int)+0x92>
c0009bd8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bdb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009be1:	39 d8                	cmp    eax,ebx
c0009be3:	73 f3                	jae    c0009bd8 <VAS::allocatePages(int, int)+0xc4>
c0009be5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009be9:	83 c4 1c             	add    esp,0x1c
c0009bec:	5b                   	pop    ebx
c0009bed:	5e                   	pop    esi
c0009bee:	5f                   	pop    edi
c0009bef:	5d                   	pop    ebp
c0009bf0:	c3                   	ret    
c0009bf1:	83 ec 0c             	sub    esp,0xc
c0009bf4:	68 a4 f1 01 c0       	push   0xc001f1a4
c0009bf9:	e8 9d 67 00 00       	call   c001039b <KePanic(char const*)>
c0009bfe:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009c01:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c05:	83 c4 10             	add    esp,0x10
c0009c08:	e9 43 ff ff ff       	jmp    c0009b50 <VAS::allocatePages(int, int)+0x3c>
c0009c0d:	83 ec 0c             	sub    esp,0xc
c0009c10:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009c14:	51                   	push   ecx
c0009c15:	e8 33 f7 ff ff       	call   c000934d <Virt::allocateKernelVirtualPages(int)>
c0009c1a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c1e:	83 c4 10             	add    esp,0x10
c0009c21:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009c26:	0f 87 9b 00 00 00    	ja     c0009cc7 <VAS::allocatePages(int, int)+0x1b3>
c0009c2c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009c30:	85 d2                	test   edx,edx
c0009c32:	7e 3c                	jle    c0009c70 <VAS::allocatePages(int, int)+0x15c>
c0009c34:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c38:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009c3c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009c40:	c1 e5 0c             	shl    ebp,0xc
c0009c43:	81 ce 00 04 00 00    	or     esi,0x400
c0009c49:	01 dd                	add    ebp,ebx
c0009c4b:	e8 01 df ff ff       	call   c0007b51 <Phys::allocatePage()>
c0009c50:	56                   	push   esi
c0009c51:	53                   	push   ebx
c0009c52:	50                   	push   eax
c0009c53:	57                   	push   edi
c0009c54:	e8 b7 fd ff ff       	call   c0009a10 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c61:	74 03                	je     c0009c66 <VAS::allocatePages(int, int)+0x152>
c0009c63:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c66:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c6c:	39 dd                	cmp    ebp,ebx
c0009c6e:	75 db                	jne    c0009c4b <VAS::allocatePages(int, int)+0x137>
c0009c70:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c75:	0f 84 25 ff ff ff    	je     c0009ba0 <VAS::allocatePages(int, int)+0x8c>
c0009c7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c7f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009c83:	89 d3                	mov    ebx,edx
c0009c85:	c1 e0 0c             	shl    eax,0xc
c0009c88:	c1 eb 0a             	shr    ebx,0xa
c0009c8b:	01 d0                	add    eax,edx
c0009c8d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009c93:	c1 e8 0a             	shr    eax,0xa
c0009c96:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009c9c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ca1:	2d 00 00 40 00       	sub    eax,0x400000
c0009ca6:	39 c3                	cmp    ebx,eax
c0009ca8:	0f 87 f8 fe ff ff    	ja     c0009ba6 <VAS::allocatePages(int, int)+0x92>
c0009cae:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009cb1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009cb7:	39 d8                	cmp    eax,ebx
c0009cb9:	73 f3                	jae    c0009cae <VAS::allocatePages(int, int)+0x19a>
c0009cbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009cbf:	83 c4 1c             	add    esp,0x1c
c0009cc2:	5b                   	pop    ebx
c0009cc3:	5e                   	pop    esi
c0009cc4:	5f                   	pop    edi
c0009cc5:	5d                   	pop    ebp
c0009cc6:	c3                   	ret    
c0009cc7:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009ccc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009cd2:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009cd9:	0f 84 4d ff ff ff    	je     c0009c2c <VAS::allocatePages(int, int)+0x118>
c0009cdf:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009ce7:	e9 40 ff ff ff       	jmp    c0009c2c <VAS::allocatePages(int, int)+0x118>

c0009cec <VAS::setCPUSpecific(unsigned long)>:
c0009cec:	83 ec 0c             	sub    esp,0xc
c0009cef:	6a 05                	push   0x5
c0009cf1:	68 00 00 40 c2       	push   0xc2400000
c0009cf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009cfa:	50                   	push   eax
c0009cfb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009cff:	52                   	push   edx
c0009d00:	e8 0b fd ff ff       	call   c0009a10 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009d05:	83 c4 1c             	add    esp,0x1c
c0009d08:	c3                   	ret    
c0009d09:	90                   	nop

c0009d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009d0a:	55                   	push   ebp
c0009d0b:	57                   	push   edi
c0009d0c:	56                   	push   esi
c0009d0d:	53                   	push   ebx
c0009d0e:	83 ec 1c             	sub    esp,0x1c
c0009d11:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009d16:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d1a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009d20:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009d24:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009d2a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009d2e:	83 e0 01             	and    eax,0x1
c0009d31:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009d35:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d39:	85 c0                	test   eax,eax
c0009d3b:	7e 39                	jle    c0009d76 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009d3d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d41:	89 f3                	mov    ebx,esi
c0009d43:	c1 e0 0c             	shl    eax,0xc
c0009d46:	01 f0                	add    eax,esi
c0009d48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009d4c:	55                   	push   ebp
c0009d4d:	53                   	push   ebx
c0009d4e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d52:	29 f0                	sub    eax,esi
c0009d54:	01 d8                	add    eax,ebx
c0009d56:	50                   	push   eax
c0009d57:	57                   	push   edi
c0009d58:	e8 b3 fc ff ff       	call   c0009a10 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009d5d:	83 c4 10             	add    esp,0x10
c0009d60:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009d65:	74 03                	je     c0009d6a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009d67:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009d6a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009d70:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009d74:	75 d6                	jne    c0009d4c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009d76:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009d7b:	75 10                	jne    c0009d8d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009d7d:	0f 20 d8             	mov    eax,cr3
c0009d80:	0f 22 d8             	mov    cr3,eax
c0009d83:	83 c4 1c             	add    esp,0x1c
c0009d86:	89 f0                	mov    eax,esi
c0009d88:	5b                   	pop    ebx
c0009d89:	5e                   	pop    esi
c0009d8a:	5f                   	pop    edi
c0009d8b:	5d                   	pop    ebp
c0009d8c:	c3                   	ret    
c0009d8d:	89 f3                	mov    ebx,esi
c0009d8f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d93:	c1 eb 0a             	shr    ebx,0xa
c0009d96:	c1 e0 0c             	shl    eax,0xc
c0009d99:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009d9f:	01 f0                	add    eax,esi
c0009da1:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009da7:	c1 e8 0a             	shr    eax,0xa
c0009daa:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009daf:	2d 00 00 40 00       	sub    eax,0x400000
c0009db4:	39 c3                	cmp    ebx,eax
c0009db6:	77 cb                	ja     c0009d83 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009db8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009dbb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009dc1:	39 d8                	cmp    eax,ebx
c0009dc3:	73 f3                	jae    c0009db8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009dc5:	83 c4 1c             	add    esp,0x1c
c0009dc8:	89 f0                	mov    eax,esi
c0009dca:	5b                   	pop    ebx
c0009dcb:	5e                   	pop    esi
c0009dcc:	5f                   	pop    edi
c0009dcd:	5d                   	pop    ebp
c0009dce:	c3                   	ret    
c0009dcf:	90                   	nop

c0009dd0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009dd0:	55                   	push   ebp
c0009dd1:	57                   	push   edi
c0009dd2:	56                   	push   esi
c0009dd3:	53                   	push   ebx
c0009dd4:	83 ec 1c             	sub    esp,0x1c
c0009dd7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009ddb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ddf:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009de3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009de7:	a9 ff 0f 00 00       	test   eax,0xfff
c0009dec:	75 4a                	jne    c0009e38 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009dee:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009df2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009df5:	c1 eb 16             	shr    ebx,0x16
c0009df8:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009dff:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009e03:	74 4d                	je     c0009e52 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009e05:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009e09:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009e0d:	c1 e8 0a             	shr    eax,0xa
c0009e10:	80 fa 01             	cmp    dl,0x1
c0009e13:	19 d2                	sbb    edx,edx
c0009e15:	c1 e3 0c             	shl    ebx,0xc
c0009e18:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009e1c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009e22:	25 fc 0f 00 00       	and    eax,0xffc
c0009e27:	01 d8                	add    eax,ebx
c0009e29:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009e30:	83 c4 1c             	add    esp,0x1c
c0009e33:	5b                   	pop    ebx
c0009e34:	5e                   	pop    esi
c0009e35:	5f                   	pop    edi
c0009e36:	5d                   	pop    ebp
c0009e37:	c3                   	ret    
c0009e38:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009e3c:	83 ec 0c             	sub    esp,0xc
c0009e3f:	68 d0 f1 01 c0       	push   0xc001f1d0
c0009e44:	e8 52 65 00 00       	call   c001039b <KePanic(char const*)>
c0009e49:	83 c4 10             	add    esp,0x10
c0009e4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009e50:	eb 9c                	jmp    c0009dee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009e52:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e56:	e8 f6 dc ff ff       	call   c0007b51 <Phys::allocatePage()>
c0009e5b:	83 ec 0c             	sub    esp,0xc
c0009e5e:	89 c5                	mov    ebp,eax
c0009e60:	8b 0d b0 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fb0
c0009e66:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009e6a:	6a 01                	push   0x1
c0009e6c:	e8 dc f4 ff ff       	call   c000934d <Virt::allocateKernelVirtualPages(int)>
c0009e71:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009e78:	6a 01                	push   0x1
c0009e7a:	50                   	push   eax
c0009e7b:	55                   	push   ebp
c0009e7c:	81 cd 07 04 00 00    	or     ebp,0x407
c0009e82:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009e86:	51                   	push   ecx
c0009e87:	e8 7e fe ff ff       	call   c0009d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e8c:	83 c4 1c             	add    esp,0x1c
c0009e8f:	68 00 10 00 00       	push   0x1000
c0009e94:	6a 00                	push   0x0
c0009e96:	50                   	push   eax
c0009e97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e9b:	e8 30 66 ff ff       	call   c00004d0 <memset>
c0009ea0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009ea4:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ea7:	e8 95 f7 ff ff       	call   c0009641 <Virt::freeKernelVirtualPages(unsigned long)>
c0009eac:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009eaf:	83 c4 10             	add    esp,0x10
c0009eb2:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009eb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009eb9:	e9 47 ff ff ff       	jmp    c0009e05 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009ebe <VAS::VAS(bool)>:
c0009ebe:	53                   	push   ebx
c0009ebf:	83 ec 28             	sub    esp,0x28
c0009ec2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ec6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009eca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ece:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ed5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ed9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009ee0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ee4:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009ee8:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009eeb:	e8 61 dc ff ff       	call   c0007b51 <Phys::allocatePage()>
c0009ef0:	89 c2                	mov    edx,eax
c0009ef2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ef6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009ef9:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c0009eff:	83 ec 0c             	sub    esp,0xc
c0009f02:	6a 01                	push   0x1
c0009f04:	e8 44 f4 ff ff       	call   c000934d <Virt::allocateKernelVirtualPages(int)>
c0009f09:	83 c4 10             	add    esp,0x10
c0009f0c:	89 c2                	mov    edx,eax
c0009f0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f12:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009f15:	83 ec 0c             	sub    esp,0xc
c0009f18:	6a 03                	push   0x3
c0009f1a:	6a 01                	push   0x1
c0009f1c:	52                   	push   edx
c0009f1d:	50                   	push   eax
c0009f1e:	53                   	push   ebx
c0009f1f:	e8 e6 fd ff ff       	call   c0009d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009f24:	83 c4 20             	add    esp,0x20
c0009f27:	89 c2                	mov    edx,eax
c0009f29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f2d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009f30:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009f38:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009f40:	7f 1c                	jg     c0009f5e <VAS::VAS(bool)+0xa0>
c0009f42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f46:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f49:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009f4d:	c1 e2 02             	shl    edx,0x2
c0009f50:	01 d0                	add    eax,edx
c0009f52:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009f58:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009f5c:	eb da                	jmp    c0009f38 <VAS::VAS(bool)+0x7a>
c0009f5e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009f66:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009f6e:	7f 7a                	jg     c0009fea <VAS::VAS(bool)+0x12c>
c0009f70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f74:	2d 00 02 00 00       	sub    eax,0x200
c0009f79:	c1 e0 0c             	shl    eax,0xc
c0009f7c:	83 c8 05             	or     eax,0x5
c0009f7f:	89 c2                	mov    edx,eax
c0009f81:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009f86:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f8c:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f92:	83 e0 10             	and    eax,0x10
c0009f95:	84 c0                	test   al,al
c0009f97:	74 07                	je     c0009fa0 <VAS::VAS(bool)+0xe2>
c0009f99:	b8 00 01 00 00       	mov    eax,0x100
c0009f9e:	eb 05                	jmp    c0009fa5 <VAS::VAS(bool)+0xe7>
c0009fa0:	b8 00 00 00 00       	mov    eax,0x0
c0009fa5:	09 d0                	or     eax,edx
c0009fa7:	89 c1                	mov    ecx,eax
c0009fa9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fad:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fb0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009fb4:	c1 e2 02             	shl    edx,0x2
c0009fb7:	01 d0                	add    eax,edx
c0009fb9:	89 ca                	mov    edx,ecx
c0009fbb:	89 10                	mov    DWORD PTR [eax],edx
c0009fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009fc1:	2d 40 03 00 00       	sub    eax,0x340
c0009fc6:	83 f8 7f             	cmp    eax,0x7f
c0009fc9:	77 16                	ja     c0009fe1 <VAS::VAS(bool)+0x123>
c0009fcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fcf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fd2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009fd6:	c1 e2 02             	shl    edx,0x2
c0009fd9:	01 d0                	add    eax,edx
c0009fdb:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009fe1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009fe5:	e9 7c ff ff ff       	jmp    c0009f66 <VAS::VAS(bool)+0xa8>
c0009fea:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009fef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ff5:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009ffb:	83 e0 10             	and    eax,0x10
c0009ffe:	84 c0                	test   al,al
c000a000:	74 07                	je     c000a009 <VAS::VAS(bool)+0x14b>
c000a002:	b8 03 41 00 00       	mov    eax,0x4103
c000a007:	eb 05                	jmp    c000a00e <VAS::VAS(bool)+0x150>
c000a009:	b8 03 40 00 00       	mov    eax,0x4003
c000a00e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a012:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a015:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a01b:	89 02                	mov    DWORD PTR [edx],eax
c000a01d:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a022:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a028:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a02e:	83 ec 08             	sub    esp,0x8
c000a031:	50                   	push   eax
c000a032:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a036:	e8 b1 fc ff ff       	call   c0009cec <VAS::setCPUSpecific(unsigned long)>
c000a03b:	83 c4 10             	add    esp,0x10
c000a03e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a042:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a045:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a04a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a050:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a056:	83 e0 10             	and    eax,0x10
c000a059:	84 c0                	test   al,al
c000a05b:	74 07                	je     c000a064 <VAS::VAS(bool)+0x1a6>
c000a05d:	b8 00 01 00 00       	mov    eax,0x100
c000a062:	eb 05                	jmp    c000a069 <VAS::VAS(bool)+0x1ab>
c000a064:	b8 00 00 00 00       	mov    eax,0x0
c000a069:	09 c2                	or     edx,eax
c000a06b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a072:	05 fc 0f 00 00       	add    eax,0xffc
c000a077:	83 ca 03             	or     edx,0x3
c000a07a:	89 10                	mov    DWORD PTR [eax],edx
c000a07c:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a081:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a087:	83 ec 0c             	sub    esp,0xc
c000a08a:	50                   	push   eax
c000a08b:	e8 4c 1c 00 00       	call   c000bcdc <Device::getName()>
c000a090:	83 c4 10             	add    esp,0x10
c000a093:	83 ec 08             	sub    esp,0x8
c000a096:	68 73 f2 01 c0       	push   0xc001f273
c000a09b:	50                   	push   eax
c000a09c:	e8 3f 66 ff ff       	call   c00006e0 <strcmp>
c000a0a1:	83 c4 10             	add    esp,0x10
c000a0a4:	85 c0                	test   eax,eax
c000a0a6:	0f 94 c0             	sete   al
c000a0a9:	84 c0                	test   al,al
c000a0ab:	0f 84 87 00 00 00    	je     c000a138 <VAS::VAS(bool)+0x27a>
c000a0b1:	fa                   	cli    
c000a0b2:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a0b7:	40                   	inc    eax
c000a0b8:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000a0bd:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a0c2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a0c8:	05 7c 09 00 00       	add    eax,0x97c
c000a0cd:	83 ec 0c             	sub    esp,0xc
c000a0d0:	50                   	push   eax
c000a0d1:	e8 9c d2 ff ff       	call   c0007372 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a0d6:	83 c4 10             	add    esp,0x10
c000a0d9:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a0de:	89 c3                	mov    ebx,eax
c000a0e0:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a0e5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a0eb:	05 7c 09 00 00       	add    eax,0x97c
c000a0f0:	83 ec 0c             	sub    esp,0xc
c000a0f3:	50                   	push   eax
c000a0f4:	e8 79 d2 ff ff       	call   c0007372 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a0f9:	83 c4 10             	add    esp,0x10
c000a0fc:	83 ec 08             	sub    esp,0x8
c000a0ff:	50                   	push   eax
c000a100:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a104:	e8 19 f5 ff ff       	call   c0009622 <VAS::getPageTableEntry(unsigned long)>
c000a109:	83 c4 10             	add    esp,0x10
c000a10c:	8b 00                	mov    eax,DWORD PTR [eax]
c000a10e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a113:	6a 11                	push   0x11
c000a115:	53                   	push   ebx
c000a116:	50                   	push   eax
c000a117:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a11b:	e8 f0 f8 ff ff       	call   c0009a10 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a120:	83 c4 10             	add    esp,0x10
c000a123:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a128:	48                   	dec    eax
c000a129:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000a12e:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a133:	85 c0                	test   eax,eax
c000a135:	75 01                	jne    c000a138 <VAS::VAS(bool)+0x27a>
c000a137:	fb                   	sti    
c000a138:	90                   	nop
c000a139:	83 c4 28             	add    esp,0x28
c000a13c:	5b                   	pop    ebx
c000a13d:	c3                   	ret    

c000a13e <VAS::evict(unsigned long)>:
c000a13e:	55                   	push   ebp
c000a13f:	57                   	push   edi
c000a140:	56                   	push   esi
c000a141:	53                   	push   ebx
c000a142:	83 ec 1c             	sub    esp,0x1c
c000a145:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a149:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a14d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a151:	e8 38 f3 ff ff       	call   c000948e <Virt::allocateSwapfilePage()>
c000a156:	8b 0d 4c 10 02 c0    	mov    ecx,DWORD PTR ds:0xc002104c
c000a15c:	89 c7                	mov    edi,eax
c000a15e:	85 c9                	test   ecx,ecx
c000a160:	7e 3e                	jle    c000a1a0 <VAS::evict(unsigned long)+0x62>
c000a162:	89 ee                	mov    esi,ebp
c000a164:	31 db                	xor    ebx,ebx
c000a166:	83 ec 0c             	sub    esp,0xc
c000a169:	57                   	push   edi
c000a16a:	e8 0d f3 ff ff       	call   c000947c <Virt::swapIDToSector(unsigned long)>
c000a16f:	89 34 24             	mov    DWORD PTR [esp],esi
c000a172:	01 d8                	add    eax,ebx
c000a174:	6a 01                	push   0x1
c000a176:	31 d2                	xor    edx,edx
c000a178:	43                   	inc    ebx
c000a179:	52                   	push   edx
c000a17a:	81 c6 00 02 00 00    	add    esi,0x200
c000a180:	50                   	push   eax
c000a181:	0f be 05 58 10 02 c0 	movsx  eax,BYTE PTR ds:0xc0021058
c000a188:	8b 14 85 1c 63 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9ce4]
c000a18f:	52                   	push   edx
c000a190:	e8 01 2c 00 00       	call   c000cd96 <LogicalDisk::write(unsigned long long, int, void*)>
c000a195:	83 c4 20             	add    esp,0x20
c000a198:	39 1d 4c 10 02 c0    	cmp    DWORD PTR ds:0xc002104c,ebx
c000a19e:	7f c6                	jg     c000a166 <VAS::evict(unsigned long)+0x28>
c000a1a0:	83 ec 08             	sub    esp,0x8
c000a1a3:	c1 e7 0b             	shl    edi,0xb
c000a1a6:	55                   	push   ebp
c000a1a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a1ab:	50                   	push   eax
c000a1ac:	e8 71 f4 ff ff       	call   c0009622 <VAS::getPageTableEntry(unsigned long)>
c000a1b1:	8b 10                	mov    edx,DWORD PTR [eax]
c000a1b3:	89 d1                	mov    ecx,edx
c000a1b5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a1bb:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a1c1:	09 cf                	or     edi,ecx
c000a1c3:	89 38                	mov    DWORD PTR [eax],edi
c000a1c5:	89 14 24             	mov    DWORD PTR [esp],edx
c000a1c8:	ff 05 a8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fa8
c000a1ce:	e8 1c d9 ff ff       	call   c0007aef <Phys::freePage(unsigned long)>
c000a1d3:	0f 20 d8             	mov    eax,cr3
c000a1d6:	0f 22 d8             	mov    cr3,eax
c000a1d9:	a1 a4 3f 02 c0       	mov    eax,ds:0xc0023fa4
c000a1de:	c7 44 24 40 81 f2 01 c0 	mov    DWORD PTR [esp+0x40],0xc001f281
c000a1e6:	8d 50 01             	lea    edx,[eax+0x1]
c000a1e9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a1ed:	89 15 a4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fa4,edx
c000a1f3:	83 c4 2c             	add    esp,0x2c
c000a1f6:	5b                   	pop    ebx
c000a1f7:	5e                   	pop    esi
c000a1f8:	5f                   	pop    edi
c000a1f9:	5d                   	pop    ebp
c000a1fa:	e9 0b 04 00 00       	jmp    c000a60a <Dbg::kprintf(char const*, ...)>
c000a1ff:	90                   	nop

c000a200 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a200:	55                   	push   ebp
c000a201:	57                   	push   edi
c000a202:	56                   	push   esi
c000a203:	53                   	push   ebx
c000a204:	83 ec 14             	sub    esp,0x14
c000a207:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a20b:	53                   	push   ebx
c000a20c:	68 92 f2 01 c0       	push   0xc001f292
c000a211:	e8 f4 03 00 00       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c000a216:	83 c4 10             	add    esp,0x10
c000a219:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a21f:	74 21                	je     c000a242 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a221:	83 ec 08             	sub    esp,0x8
c000a224:	53                   	push   ebx
c000a225:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a229:	57                   	push   edi
c000a22a:	e8 f3 f3 ff ff       	call   c0009622 <VAS::getPageTableEntry(unsigned long)>
c000a22f:	83 c4 10             	add    esp,0x10
c000a232:	89 c6                	mov    esi,eax
c000a234:	85 c0                	test   eax,eax
c000a236:	74 0a                	je     c000a242 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a238:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a23a:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a240:	74 0a                	je     c000a24c <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a242:	31 c0                	xor    eax,eax
c000a244:	83 c4 0c             	add    esp,0xc
c000a247:	5b                   	pop    ebx
c000a248:	5e                   	pop    esi
c000a249:	5f                   	pop    edi
c000a24a:	5d                   	pop    ebp
c000a24b:	c3                   	ret    
c000a24c:	e8 00 d9 ff ff       	call   c0007b51 <Phys::allocatePage()>
c000a251:	c1 ed 0b             	shr    ebp,0xb
c000a254:	8b 16                	mov    edx,DWORD PTR [esi]
c000a256:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a25c:	09 c2                	or     edx,eax
c000a25e:	81 ca 01 08 00 00    	or     edx,0x801
c000a264:	89 16                	mov    DWORD PTR [esi],edx
c000a266:	8b 35 4c 10 02 c0    	mov    esi,DWORD PTR ds:0xc002104c
c000a26c:	85 f6                	test   esi,esi
c000a26e:	7e 3e                	jle    c000a2ae <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a270:	89 df                	mov    edi,ebx
c000a272:	31 f6                	xor    esi,esi
c000a274:	83 ec 0c             	sub    esp,0xc
c000a277:	55                   	push   ebp
c000a278:	e8 ff f1 ff ff       	call   c000947c <Virt::swapIDToSector(unsigned long)>
c000a27d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a280:	01 f0                	add    eax,esi
c000a282:	6a 01                	push   0x1
c000a284:	31 d2                	xor    edx,edx
c000a286:	46                   	inc    esi
c000a287:	52                   	push   edx
c000a288:	81 c7 00 02 00 00    	add    edi,0x200
c000a28e:	50                   	push   eax
c000a28f:	0f be 05 58 10 02 c0 	movsx  eax,BYTE PTR ds:0xc0021058
c000a296:	8b 0c 85 1c 63 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9ce4]
c000a29d:	51                   	push   ecx
c000a29e:	e8 87 2a 00 00       	call   c000cd2a <LogicalDisk::read(unsigned long long, int, void*)>
c000a2a3:	83 c4 20             	add    esp,0x20
c000a2a6:	39 35 4c 10 02 c0    	cmp    DWORD PTR ds:0xc002104c,esi
c000a2ac:	7f c6                	jg     c000a274 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a2ae:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c000a2b3:	48                   	dec    eax
c000a2b4:	52                   	push   edx
c000a2b5:	a3 a8 3f 02 c0       	mov    ds:0xc0023fa8,eax
c000a2ba:	50                   	push   eax
c000a2bb:	53                   	push   ebx
c000a2bc:	68 a5 f2 01 c0       	push   0xc001f2a5
c000a2c1:	e8 44 03 00 00       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c000a2c6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a2c9:	e8 90 f1 ff ff       	call   c000945e <Virt::freeSwapfilePage(unsigned long)>
c000a2ce:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a2d3:	83 c4 10             	add    esp,0x10
c000a2d6:	48                   	dec    eax
c000a2d7:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000a2dc:	85 c0                	test   eax,eax
c000a2de:	75 01                	jne    c000a2e1 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a2e0:	fb                   	sti    
c000a2e1:	0f 20 d8             	mov    eax,cr3
c000a2e4:	0f 22 d8             	mov    cr3,eax
c000a2e7:	b0 01                	mov    al,0x1
c000a2e9:	e9 56 ff ff ff       	jmp    c000a244 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a2ee <VAS::scanForEviction()>:
c000a2ee:	57                   	push   edi
c000a2ef:	31 ff                	xor    edi,edi
c000a2f1:	56                   	push   esi
c000a2f2:	53                   	push   ebx
c000a2f3:	83 ec 10             	sub    esp,0x10
c000a2f6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a2fa:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a2fd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a303:	75 0e                	jne    c000a313 <VAS::scanForEviction()+0x25>
c000a305:	89 da                	mov    edx,ebx
c000a307:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a30a:	c1 ea 16             	shr    edx,0x16
c000a30d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a311:	74 4e                	je     c000a361 <VAS::scanForEviction()+0x73>
c000a313:	53                   	push   ebx
c000a314:	56                   	push   esi
c000a315:	e8 08 f3 ff ff       	call   c0009622 <VAS::getPageTableEntry(unsigned long)>
c000a31a:	5a                   	pop    edx
c000a31b:	8b 10                	mov    edx,DWORD PTR [eax]
c000a31d:	59                   	pop    ecx
c000a31e:	89 d1                	mov    ecx,edx
c000a320:	81 e1 01 08 00 00    	and    ecx,0x801
c000a326:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a32c:	74 3e                	je     c000a36c <VAS::scanForEviction()+0x7e>
c000a32e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a334:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a33a:	76 2b                	jbe    c000a367 <VAS::scanForEviction()+0x79>
c000a33c:	47                   	inc    edi
c000a33d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a344:	83 ff 03             	cmp    edi,0x3
c000a347:	74 32                	je     c000a37b <VAS::scanForEviction()+0x8d>
c000a349:	31 db                	xor    ebx,ebx
c000a34b:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a351:	75 c0                	jne    c000a313 <VAS::scanForEviction()+0x25>
c000a353:	89 da                	mov    edx,ebx
c000a355:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a358:	c1 ea 16             	shr    edx,0x16
c000a35b:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a35f:	75 b2                	jne    c000a313 <VAS::scanForEviction()+0x25>
c000a361:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a367:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a36a:	eb 91                	jmp    c000a2fd <VAS::scanForEviction()+0xf>
c000a36c:	f6 c2 20             	test   dl,0x20
c000a36f:	74 13                	je     c000a384 <VAS::scanForEviction()+0x96>
c000a371:	83 e2 df             	and    edx,0xffffffdf
c000a374:	89 10                	mov    DWORD PTR [eax],edx
c000a376:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a379:	eb b3                	jmp    c000a32e <VAS::scanForEviction()+0x40>
c000a37b:	83 c4 10             	add    esp,0x10
c000a37e:	31 c0                	xor    eax,eax
c000a380:	5b                   	pop    ebx
c000a381:	5e                   	pop    esi
c000a382:	5f                   	pop    edi
c000a383:	c3                   	ret    
c000a384:	83 ec 08             	sub    esp,0x8
c000a387:	89 d0                	mov    eax,edx
c000a389:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a38e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a392:	53                   	push   ebx
c000a393:	68 ba f2 01 c0       	push   0xc001f2ba
c000a398:	e8 6d 02 00 00       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c000a39d:	58                   	pop    eax
c000a39e:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a3a1:	5a                   	pop    edx
c000a3a2:	51                   	push   ecx
c000a3a3:	56                   	push   esi
c000a3a4:	e8 95 fd ff ff       	call   c000a13e <VAS::evict(unsigned long)>
c000a3a9:	5b                   	pop    ebx
c000a3aa:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a3ad:	5f                   	pop    edi
c000a3ae:	50                   	push   eax
c000a3af:	68 ce f2 01 c0       	push   0xc001f2ce
c000a3b4:	e8 51 02 00 00       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c000a3b9:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a3c0:	83 c4 10             	add    esp,0x10
c000a3c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a3c7:	83 c4 10             	add    esp,0x10
c000a3ca:	5b                   	pop    ebx
c000a3cb:	5e                   	pop    esi
c000a3cc:	5f                   	pop    edi
c000a3cd:	c3                   	ret    

c000a3ce <mapVASFirstTime>:
c000a3ce:	55                   	push   ebp
c000a3cf:	57                   	push   edi
c000a3d0:	56                   	push   esi
c000a3d1:	53                   	push   ebx
c000a3d2:	83 ec 0c             	sub    esp,0xc
c000a3d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a3da:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a3dd:	4a                   	dec    edx
c000a3de:	0f 84 c8 00 00 00    	je     c000a4ac <mapVASFirstTime+0xde>
c000a3e4:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a3e7:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a3ea:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a3ef:	c1 e5 15             	shl    ebp,0x15
c000a3f2:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a3f7:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a3fd:	29 eb                	sub    ebx,ebp
c000a3ff:	29 ef                	sub    edi,ebp
c000a401:	e8 4b d7 ff ff       	call   c0007b51 <Phys::allocatePage()>
c000a406:	83 ec 0c             	sub    esp,0xc
c000a409:	68 03 04 00 00       	push   0x403
c000a40e:	6a 01                	push   0x1
c000a410:	53                   	push   ebx
c000a411:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a417:	50                   	push   eax
c000a418:	56                   	push   esi
c000a419:	e8 ec f8 ff ff       	call   c0009d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a41e:	83 c4 20             	add    esp,0x20
c000a421:	39 fb                	cmp    ebx,edi
c000a423:	75 dc                	jne    c000a401 <mapVASFirstTime+0x33>
c000a425:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a42a:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a42f:	29 eb                	sub    ebx,ebp
c000a431:	29 ef                	sub    edi,ebp
c000a433:	e8 19 d7 ff ff       	call   c0007b51 <Phys::allocatePage()>
c000a438:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a43c:	19 d2                	sbb    edx,edx
c000a43e:	83 ec 0c             	sub    esp,0xc
c000a441:	83 e2 04             	and    edx,0x4
c000a444:	81 c2 03 04 00 00    	add    edx,0x403
c000a44a:	52                   	push   edx
c000a44b:	6a 01                	push   0x1
c000a44d:	53                   	push   ebx
c000a44e:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a454:	50                   	push   eax
c000a455:	56                   	push   esi
c000a456:	e8 af f8 ff ff       	call   c0009d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a45b:	83 c4 20             	add    esp,0x20
c000a45e:	39 df                	cmp    edi,ebx
c000a460:	75 d1                	jne    c000a433 <mapVASFirstTime+0x65>
c000a462:	83 ec 0c             	sub    esp,0xc
c000a465:	bb 7c 30 02 c0       	mov    ebx,0xc002307c
c000a46a:	6a 04                	push   0x4
c000a46c:	81 eb 00 20 02 c0    	sub    ebx,0xc0022000
c000a472:	6a ff                	push   0xffffffff
c000a474:	c1 eb 0c             	shr    ebx,0xc
c000a477:	53                   	push   ebx
c000a478:	68 00 20 02 c0       	push   0xc0022000
c000a47d:	56                   	push   esi
c000a47e:	e8 21 f3 ff ff       	call   c00097a4 <VAS::reflagRange(unsigned long, int, int, int)>
c000a483:	83 c4 14             	add    esp,0x14
c000a486:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c000a48b:	6a 04                	push   0x4
c000a48d:	6a ff                	push   0xffffffff
c000a48f:	53                   	push   ebx
c000a490:	68 00 20 02 c0       	push   0xc0022000
c000a495:	50                   	push   eax
c000a496:	e8 09 f3 ff ff       	call   c00097a4 <VAS::reflagRange(unsigned long, int, int, int)>
c000a49b:	0f 20 d8             	mov    eax,cr3
c000a49e:	0f 22 d8             	mov    cr3,eax
c000a4a1:	83 c4 20             	add    esp,0x20
c000a4a4:	83 c4 0c             	add    esp,0xc
c000a4a7:	5b                   	pop    ebx
c000a4a8:	5e                   	pop    esi
c000a4a9:	5f                   	pop    edi
c000a4aa:	5d                   	pop    ebp
c000a4ab:	c3                   	ret    
c000a4ac:	83 ec 0c             	sub    esp,0xc
c000a4af:	68 e1 f2 01 c0       	push   0xc001f2e1
c000a4b4:	e8 51 01 00 00       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c000a4b9:	83 c4 10             	add    esp,0x10
c000a4bc:	83 c4 0c             	add    esp,0xc
c000a4bf:	5b                   	pop    ebx
c000a4c0:	5e                   	pop    esi
c000a4c1:	5f                   	pop    edi
c000a4c2:	5d                   	pop    ebp
c000a4c3:	c3                   	ret    

c000a4c4 <__cxa_atexit>:
c000a4c4:	31 c0                	xor    eax,eax
c000a4c6:	c3                   	ret    

c000a4c7 <__cxa_finalize>:
c000a4c7:	c3                   	ret    

c000a4c8 <__stack_chk_fail>:
c000a4c8:	55                   	push   ebp
c000a4c9:	89 e5                	mov    ebp,esp
c000a4cb:	83 ec 10             	sub    esp,0x10
c000a4ce:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a4d1:	68 fa f2 01 c0       	push   0xc001f2fa
c000a4d6:	e8 2f 01 00 00       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c000a4db:	58                   	pop    eax
c000a4dc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a4df:	5a                   	pop    edx
c000a4e0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a4e3:	68 fa f2 01 c0       	push   0xc001f2fa
c000a4e8:	e8 1d 01 00 00       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c000a4ed:	c7 04 24 02 f3 01 c0 	mov    DWORD PTR [esp],0xc001f302
c000a4f4:	e8 a2 5e 00 00       	call   c001039b <KePanic(char const*)>
c000a4f9:	83 c4 10             	add    esp,0x10
c000a4fc:	c9                   	leave  
c000a4fd:	c3                   	ret    

c000a4fe <__cxa_pure_virtual>:
c000a4fe:	83 ec 18             	sub    esp,0x18
c000a501:	68 1a f3 01 c0       	push   0xc001f31a
c000a506:	e8 90 5e 00 00       	call   c001039b <KePanic(char const*)>
c000a50b:	83 c4 1c             	add    esp,0x1c
c000a50e:	c3                   	ret    

c000a50f <operator new[](unsigned long)>:
c000a50f:	e9 61 d3 ff ff       	jmp    c0007875 <malloc>

c000a514 <operator delete(void*, unsigned long)>:
c000a514:	e9 7c d3 ff ff       	jmp    c0007895 <rfree>

c000a519 <operator delete[](void*)>:
c000a519:	e9 77 d3 ff ff       	jmp    c0007895 <rfree>

c000a51e <operator delete[](void*, unsigned long)>:
c000a51e:	e9 72 d3 ff ff       	jmp    c0007895 <rfree>

c000a523 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a523:	55                   	push   ebp
c000a524:	b9 04 00 00 00       	mov    ecx,0x4
c000a529:	57                   	push   edi
c000a52a:	56                   	push   esi
c000a52b:	be 6f ef 01 c0       	mov    esi,0xc001ef6f
c000a530:	53                   	push   ebx
c000a531:	83 ec 20             	sub    esp,0x20
c000a534:	a1 6e ef 01 c0       	mov    eax,ds:0xc001ef6e
c000a539:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a53d:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a541:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a545:	a1 7b ef 01 c0       	mov    eax,ds:0xc001ef7b
c000a54a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a54e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a552:	fc                   	cld    
c000a553:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a555:	89 ee                	mov    esi,ebp
c000a557:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a55b:	eb 02                	jmp    c000a55f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a55d:	89 c6                	mov    esi,eax
c000a55f:	31 d2                	xor    edx,edx
c000a561:	41                   	inc    ecx
c000a562:	89 f0                	mov    eax,esi
c000a564:	f7 f3                	div    ebx
c000a566:	39 de                	cmp    esi,ebx
c000a568:	73 f3                	jae    c000a55d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a56a:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a56d:	eb 02                	jmp    c000a571 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a56f:	89 c5                	mov    ebp,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	49                   	dec    ecx
c000a574:	89 e8                	mov    eax,ebp
c000a576:	f7 f3                	div    ebx
c000a578:	39 dd                	cmp    ebp,ebx
c000a57a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a57e:	88 11                	mov    BYTE PTR [ecx],dl
c000a580:	73 ed                	jae    c000a56f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a582:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a586:	83 c4 20             	add    esp,0x20
c000a589:	5b                   	pop    ebx
c000a58a:	5e                   	pop    esi
c000a58b:	5f                   	pop    edi
c000a58c:	5d                   	pop    ebp
c000a58d:	c3                   	ret    

c000a58e <Dbg::logc(char)>:
c000a58e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a592:	f6 05 d0 3e 02 c0 10 	test   BYTE PTR ds:0xc0023ed0,0x10
c000a599:	75 12                	jne    c000a5ad <Dbg::logc(char)+0x1f>
c000a59b:	ba fd 03 00 00       	mov    edx,0x3fd
c000a5a0:	ec                   	in     al,dx
c000a5a1:	a8 20                	test   al,0x20
c000a5a3:	74 fb                	je     c000a5a0 <Dbg::logc(char)+0x12>
c000a5a5:	ba f8 03 00 00       	mov    edx,0x3f8
c000a5aa:	88 c8                	mov    al,cl
c000a5ac:	ee                   	out    dx,al
c000a5ad:	c3                   	ret    

c000a5ae <Dbg::logs(char*)>:
c000a5ae:	53                   	push   ebx
c000a5af:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a5b3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a5b6:	84 c0                	test   al,al
c000a5b8:	74 0f                	je     c000a5c9 <Dbg::logs(char*)+0x1b>
c000a5ba:	50                   	push   eax
c000a5bb:	43                   	inc    ebx
c000a5bc:	e8 cd ff ff ff       	call   c000a58e <Dbg::logc(char)>
c000a5c1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a5c4:	5a                   	pop    edx
c000a5c5:	84 c0                	test   al,al
c000a5c7:	75 f1                	jne    c000a5ba <Dbg::logs(char*)+0xc>
c000a5c9:	5b                   	pop    ebx
c000a5ca:	c3                   	ret    

c000a5cb <Dbg::logWriteInt(unsigned int)>:
c000a5cb:	83 ec 10             	sub    esp,0x10
c000a5ce:	6a 0a                	push   0xa
c000a5d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a5d4:	50                   	push   eax
c000a5d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5d9:	50                   	push   eax
c000a5da:	e8 44 ff ff ff       	call   c000a523 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a5df:	50                   	push   eax
c000a5e0:	e8 c9 ff ff ff       	call   c000a5ae <Dbg::logs(char*)>
c000a5e5:	83 c4 20             	add    esp,0x20
c000a5e8:	c3                   	ret    

c000a5e9 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a5e9:	83 ec 10             	sub    esp,0x10
c000a5ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a5f0:	50                   	push   eax
c000a5f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a5f5:	50                   	push   eax
c000a5f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a5fa:	52                   	push   edx
c000a5fb:	e8 23 ff ff ff       	call   c000a523 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a600:	50                   	push   eax
c000a601:	e8 a8 ff ff ff       	call   c000a5ae <Dbg::logs(char*)>
c000a606:	83 c4 20             	add    esp,0x20
c000a609:	c3                   	ret    

c000a60a <Dbg::kprintf(char const*, ...)>:
c000a60a:	55                   	push   ebp
c000a60b:	57                   	push   edi
c000a60c:	56                   	push   esi
c000a60d:	53                   	push   ebx
c000a60e:	83 ec 0c             	sub    esp,0xc
c000a611:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a615:	f6 05 d0 3e 02 c0 10 	test   BYTE PTR ds:0xc0023ed0,0x10
c000a61c:	74 08                	je     c000a626 <Dbg::kprintf(char const*, ...)+0x1c>
c000a61e:	83 c4 0c             	add    esp,0xc
c000a621:	5b                   	pop    ebx
c000a622:	5e                   	pop    esi
c000a623:	5f                   	pop    edi
c000a624:	5d                   	pop    ebp
c000a625:	c3                   	ret    
c000a626:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a62a:	31 ff                	xor    edi,edi
c000a62c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a630:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a633:	84 c0                	test   al,al
c000a635:	74 e7                	je     c000a61e <Dbg::kprintf(char const*, ...)+0x14>
c000a637:	8d 77 01             	lea    esi,[edi+0x1]
c000a63a:	3c 25                	cmp    al,0x25
c000a63c:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a63f:	75 47                	jne    c000a688 <Dbg::kprintf(char const*, ...)+0x7e>
c000a641:	83 c7 02             	add    edi,0x2
c000a644:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a647:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a64a:	83 e8 25             	sub    eax,0x25
c000a64d:	3c 53                	cmp    al,0x53
c000a64f:	0f 87 d2 00 00 00    	ja     c000a727 <Dbg::kprintf(char const*, ...)+0x11d>
c000a655:	25 ff 00 00 00       	and    eax,0xff
c000a65a:	ff 24 85 30 f3 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0cd0]
c000a661:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a665:	89 c8                	mov    eax,ecx
c000a667:	83 c1 04             	add    ecx,0x4
c000a66a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a66e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a670:	55                   	push   ebp
c000a671:	e8 55 ff ff ff       	call   c000a5cb <Dbg::logWriteInt(unsigned int)>
c000a676:	58                   	pop    eax
c000a677:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a67a:	84 c0                	test   al,al
c000a67c:	74 a0                	je     c000a61e <Dbg::kprintf(char const*, ...)+0x14>
c000a67e:	8d 77 01             	lea    esi,[edi+0x1]
c000a681:	3c 25                	cmp    al,0x25
c000a683:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a686:	74 b9                	je     c000a641 <Dbg::kprintf(char const*, ...)+0x37>
c000a688:	50                   	push   eax
c000a689:	89 f7                	mov    edi,esi
c000a68b:	e8 fe fe ff ff       	call   c000a58e <Dbg::logc(char)>
c000a690:	89 ee                	mov    esi,ebp
c000a692:	58                   	pop    eax
c000a693:	eb e2                	jmp    c000a677 <Dbg::kprintf(char const*, ...)+0x6d>
c000a695:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a699:	89 c8                	mov    eax,ecx
c000a69b:	83 c1 04             	add    ecx,0x4
c000a69e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a6a0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a6a4:	50                   	push   eax
c000a6a5:	e8 04 ff ff ff       	call   c000a5ae <Dbg::logs(char*)>
c000a6aa:	58                   	pop    eax
c000a6ab:	eb ca                	jmp    c000a677 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6ad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6b1:	89 d0                	mov    eax,edx
c000a6b3:	83 c2 04             	add    edx,0x4
c000a6b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a6ba:	8b 00                	mov    eax,DWORD PTR [eax]
c000a6bc:	50                   	push   eax
c000a6bd:	e8 09 ff ff ff       	call   c000a5cb <Dbg::logWriteInt(unsigned int)>
c000a6c2:	58                   	pop    eax
c000a6c3:	eb b2                	jmp    c000a677 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6c5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6c9:	89 d0                	mov    eax,edx
c000a6cb:	83 c2 04             	add    edx,0x4
c000a6ce:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a6d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a6d5:	50                   	push   eax
c000a6d6:	e8 b3 fe ff ff       	call   c000a58e <Dbg::logc(char)>
c000a6db:	58                   	pop    eax
c000a6dc:	eb 99                	jmp    c000a677 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6de:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a6e2:	89 c8                	mov    eax,ecx
c000a6e4:	83 c1 04             	add    ecx,0x4
c000a6e7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a6eb:	6a 10                	push   0x10
c000a6ed:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6ef:	51                   	push   ecx
c000a6f0:	e8 f4 fe ff ff       	call   c000a5e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000a6f5:	5d                   	pop    ebp
c000a6f6:	58                   	pop    eax
c000a6f7:	e9 7b ff ff ff       	jmp    c000a677 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a700:	89 d0                	mov    eax,edx
c000a702:	83 c2 08             	add    edx,0x8
c000a705:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a709:	6a 10                	push   0x10
c000a70b:	8b 00                	mov    eax,DWORD PTR [eax]
c000a70d:	50                   	push   eax
c000a70e:	e8 d6 fe ff ff       	call   c000a5e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000a713:	58                   	pop    eax
c000a714:	5a                   	pop    edx
c000a715:	e9 5d ff ff ff       	jmp    c000a677 <Dbg::kprintf(char const*, ...)+0x6d>
c000a71a:	6a 25                	push   0x25
c000a71c:	e8 6d fe ff ff       	call   c000a58e <Dbg::logc(char)>
c000a721:	5a                   	pop    edx
c000a722:	e9 50 ff ff ff       	jmp    c000a677 <Dbg::kprintf(char const*, ...)+0x6d>
c000a727:	6a 25                	push   0x25
c000a729:	e8 60 fe ff ff       	call   c000a58e <Dbg::logc(char)>
c000a72e:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a732:	50                   	push   eax
c000a733:	e8 56 fe ff ff       	call   c000a58e <Dbg::logc(char)>
c000a738:	5a                   	pop    edx
c000a739:	59                   	pop    ecx
c000a73a:	e9 38 ff ff ff       	jmp    c000a677 <Dbg::kprintf(char const*, ...)+0x6d>
c000a73f:	90                   	nop

c000a740 <File::read(unsigned long long, void*, int*)>:
c000a740:	53                   	push   ebx
c000a741:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a745:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a749:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a750:	3c 19                	cmp    al,0x19
c000a752:	77 35                	ja     c000a789 <File::read(unsigned long long, void*, int*)+0x49>
c000a754:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000a75b:	85 c0                	test   eax,eax
c000a75d:	74 2a                	je     c000a789 <File::read(unsigned long long, void*, int*)+0x49>
c000a75f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a765:	85 c0                	test   eax,eax
c000a767:	74 20                	je     c000a789 <File::read(unsigned long long, void*, int*)+0x49>
c000a769:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a76d:	74 21                	je     c000a790 <File::read(unsigned long long, void*, int*)+0x50>
c000a76f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a771:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a775:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a77b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a77f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a783:	5b                   	pop    ebx
c000a784:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a787:	ff e0                	jmp    eax
c000a789:	b8 0b 00 00 00       	mov    eax,0xb
c000a78e:	eb 05                	jmp    c000a795 <File::read(unsigned long long, void*, int*)+0x55>
c000a790:	b8 05 00 00 00       	mov    eax,0x5
c000a795:	5b                   	pop    ebx
c000a796:	c3                   	ret    
c000a797:	90                   	nop

c000a798 <File::write(unsigned long long, void*, int*)>:
c000a798:	53                   	push   ebx
c000a799:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a79d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a7a1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a7a8:	3c 19                	cmp    al,0x19
c000a7aa:	77 35                	ja     c000a7e1 <File::write(unsigned long long, void*, int*)+0x49>
c000a7ac:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000a7b3:	85 c0                	test   eax,eax
c000a7b5:	74 2a                	je     c000a7e1 <File::write(unsigned long long, void*, int*)+0x49>
c000a7b7:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a7bd:	85 c0                	test   eax,eax
c000a7bf:	74 20                	je     c000a7e1 <File::write(unsigned long long, void*, int*)+0x49>
c000a7c1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a7c5:	74 21                	je     c000a7e8 <File::write(unsigned long long, void*, int*)+0x50>
c000a7c7:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a7c9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a7cd:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a7d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a7d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a7db:	5b                   	pop    ebx
c000a7dc:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a7df:	ff e0                	jmp    eax
c000a7e1:	b8 0b 00 00 00       	mov    eax,0xb
c000a7e6:	eb 05                	jmp    c000a7ed <File::write(unsigned long long, void*, int*)+0x55>
c000a7e8:	b8 05 00 00 00       	mov    eax,0x5
c000a7ed:	5b                   	pop    ebx
c000a7ee:	c3                   	ret    
c000a7ef:	90                   	nop

c000a7f0 <Directory::read(unsigned long long, void*, int*)>:
c000a7f0:	53                   	push   ebx
c000a7f1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7f5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a7f9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a800:	3c 19                	cmp    al,0x19
c000a802:	77 35                	ja     c000a839 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a804:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000a80b:	85 c0                	test   eax,eax
c000a80d:	74 2a                	je     c000a839 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a80f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a815:	85 c0                	test   eax,eax
c000a817:	74 20                	je     c000a839 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a819:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a81d:	74 21                	je     c000a840 <Directory::read(unsigned long long, void*, int*)+0x50>
c000a81f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a821:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a825:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a82b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a82f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a833:	5b                   	pop    ebx
c000a834:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a837:	ff e0                	jmp    eax
c000a839:	b8 0b 00 00 00       	mov    eax,0xb
c000a83e:	eb 05                	jmp    c000a845 <Directory::read(unsigned long long, void*, int*)+0x55>
c000a840:	b8 05 00 00 00       	mov    eax,0x5
c000a845:	5b                   	pop    ebx
c000a846:	c3                   	ret    
c000a847:	90                   	nop

c000a848 <Directory::write(unsigned long long, void*, int*)>:
c000a848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a84c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a853:	b8 0b 00 00 00       	mov    eax,0xb
c000a858:	80 fa 19             	cmp    dl,0x19
c000a85b:	77 18                	ja     c000a875 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a85d:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000a864:	85 d2                	test   edx,edx
c000a866:	74 0d                	je     c000a875 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a868:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000a86f:	19 c0                	sbb    eax,eax
c000a871:	83 e0 0a             	and    eax,0xa
c000a874:	40                   	inc    eax
c000a875:	c3                   	ret    

c000a876 <File::isAtty()>:
c000a876:	31 c0                	xor    eax,eax
c000a878:	c3                   	ret    
c000a879:	90                   	nop

c000a87a <Directory::isAtty()>:
c000a87a:	31 c0                	xor    eax,eax
c000a87c:	c3                   	ret    
c000a87d:	90                   	nop

c000a87e <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a87e:	b8 0a 00 00 00       	mov    eax,0xa
c000a883:	c3                   	ret    

c000a884 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a884:	b8 0a 00 00 00       	mov    eax,0xa
c000a889:	c3                   	ret    

c000a88a <Filesystem::allocateSwapfile(char const*, int)>:
c000a88a:	31 c0                	xor    eax,eax
c000a88c:	31 d2                	xor    edx,edx
c000a88e:	c3                   	ret    
c000a88f:	90                   	nop

c000a890 <File::~File()>:
c000a890:	83 ec 0c             	sub    esp,0xc
c000a893:	ba f0 f4 01 c0       	mov    edx,0xc001f4f0
c000a898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a89c:	89 10                	mov    DWORD PTR [eax],edx
c000a89e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8a2:	83 ec 0c             	sub    esp,0xc
c000a8a5:	50                   	push   eax
c000a8a6:	e8 41 e8 ff ff       	call   c00090ec <UnixFile::~UnixFile()>
c000a8ab:	83 c4 10             	add    esp,0x10
c000a8ae:	90                   	nop
c000a8af:	83 c4 0c             	add    esp,0xc
c000a8b2:	c3                   	ret    
c000a8b3:	90                   	nop

c000a8b4 <File::~File()>:
c000a8b4:	83 ec 0c             	sub    esp,0xc
c000a8b7:	83 ec 0c             	sub    esp,0xc
c000a8ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8be:	e8 cd ff ff ff       	call   c000a890 <File::~File()>
c000a8c3:	83 c4 10             	add    esp,0x10
c000a8c6:	83 ec 08             	sub    esp,0x8
c000a8c9:	68 14 01 00 00       	push   0x114
c000a8ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8d2:	e8 3d fc ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c000a8d7:	83 c4 10             	add    esp,0x10
c000a8da:	83 c4 0c             	add    esp,0xc
c000a8dd:	c3                   	ret    

c000a8de <Directory::~Directory()>:
c000a8de:	83 ec 0c             	sub    esp,0xc
c000a8e1:	ba 0c f5 01 c0       	mov    edx,0xc001f50c
c000a8e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8ea:	89 10                	mov    DWORD PTR [eax],edx
c000a8ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8f0:	83 ec 0c             	sub    esp,0xc
c000a8f3:	50                   	push   eax
c000a8f4:	e8 f3 e7 ff ff       	call   c00090ec <UnixFile::~UnixFile()>
c000a8f9:	83 c4 10             	add    esp,0x10
c000a8fc:	90                   	nop
c000a8fd:	83 c4 0c             	add    esp,0xc
c000a900:	c3                   	ret    
c000a901:	90                   	nop

c000a902 <Directory::~Directory()>:
c000a902:	83 ec 0c             	sub    esp,0xc
c000a905:	83 ec 0c             	sub    esp,0xc
c000a908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a90c:	e8 cd ff ff ff       	call   c000a8de <Directory::~Directory()>
c000a911:	83 c4 10             	add    esp,0x10
c000a914:	83 ec 08             	sub    esp,0x8
c000a917:	68 14 01 00 00       	push   0x114
c000a91c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a920:	e8 ef fb ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c000a925:	83 c4 10             	add    esp,0x10
c000a928:	83 c4 0c             	add    esp,0xc
c000a92b:	c3                   	ret    

c000a92c <Filesystem::Filesystem()>:
c000a92c:	ba 88 f4 01 c0       	mov    edx,0xc001f488
c000a931:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a935:	89 10                	mov    DWORD PTR [eax],edx
c000a937:	8b 15 b4 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fb4
c000a93d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a941:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a944:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a948:	a3 b4 3f 02 c0       	mov    ds:0xc0023fb4,eax
c000a94d:	90                   	nop
c000a94e:	c3                   	ret    
c000a94f:	90                   	nop

c000a950 <Filesystem::~Filesystem()>:
c000a950:	ba 88 f4 01 c0       	mov    edx,0xc001f488
c000a955:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a959:	89 10                	mov    DWORD PTR [eax],edx
c000a95b:	90                   	nop
c000a95c:	c3                   	ret    
c000a95d:	90                   	nop

c000a95e <Filesystem::~Filesystem()>:
c000a95e:	83 ec 0c             	sub    esp,0xc
c000a961:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a965:	e8 e6 ff ff ff       	call   c000a950 <Filesystem::~Filesystem()>
c000a96a:	83 c4 04             	add    esp,0x4
c000a96d:	83 ec 08             	sub    esp,0x8
c000a970:	6a 08                	push   0x8
c000a972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a976:	e8 99 fb ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c000a97b:	83 c4 10             	add    esp,0x10
c000a97e:	83 c4 0c             	add    esp,0xc
c000a981:	c3                   	ret    

c000a982 <Fs::getcwd(Process*, char*, int)>:
c000a982:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a986:	31 c0                	xor    eax,eax
c000a988:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a98b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a98f:	7d 15                	jge    c000a9a6 <Fs::getcwd(Process*, char*, int)+0x24>
c000a991:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a995:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a99c:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a99f:	84 c9                	test   cl,cl
c000a9a1:	74 06                	je     c000a9a9 <Fs::getcwd(Process*, char*, int)+0x27>
c000a9a3:	40                   	inc    eax
c000a9a4:	eb e2                	jmp    c000a988 <Fs::getcwd(Process*, char*, int)+0x6>
c000a9a6:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a9a9:	31 c0                	xor    eax,eax
c000a9ab:	c3                   	ret    

c000a9ac <Fs::initVFS()>:
c000a9ac:	83 ec 18             	sub    esp,0x18
c000a9af:	6a 08                	push   0x8
c000a9b1:	e8 bf ce ff ff       	call   c0007875 <malloc>
c000a9b6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9b9:	e8 92 d5 00 00       	call   c0017f50 <FAT::FAT()>
c000a9be:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a9c5:	e8 ab ce ff ff       	call   c0007875 <malloc>
c000a9ca:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9cd:	e8 1a e4 00 00       	call   c0018dec <ISO9660::ISO9660()>
c000a9d2:	83 c4 1c             	add    esp,0x1c
c000a9d5:	c3                   	ret    

c000a9d6 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a9d6:	55                   	push   ebp
c000a9d7:	57                   	push   edi
c000a9d8:	56                   	push   esi
c000a9d9:	53                   	push   ebx
c000a9da:	81 ec 10 04 00 00    	sub    esp,0x410
c000a9e0:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a9e7:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a9ee:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a9f5:	68 00 04 00 00       	push   0x400
c000a9fa:	6a 00                	push   0x0
c000a9fc:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000aa00:	56                   	push   esi
c000aa01:	e8 ca 5a ff ff       	call   c00004d0 <memset>
c000aa06:	83 c4 10             	add    esp,0x10
c000aa09:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000aa0d:	75 0b                	jne    c000aa1a <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000aa0f:	50                   	push   eax
c000aa10:	50                   	push   eax
c000aa11:	57                   	push   edi
c000aa12:	56                   	push   esi
c000aa13:	e8 e8 5b ff ff       	call   c0000600 <strcpy>
c000aa18:	eb 41                	jmp    c000aa5b <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000aa1a:	8a 07                	mov    al,BYTE PTR [edi]
c000aa1c:	3c 5c                	cmp    al,0x5c
c000aa1e:	74 04                	je     c000aa24 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000aa20:	3c 2f                	cmp    al,0x2f
c000aa22:	75 18                	jne    c000aa3c <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000aa24:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000aa27:	3c 60                	cmp    al,0x60
c000aa29:	7e 03                	jle    c000aa2e <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000aa2b:	83 e8 20             	sub    eax,0x20
c000aa2e:	88 04 24             	mov    BYTE PTR [esp],al
c000aa31:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aa38:	50                   	push   eax
c000aa39:	50                   	push   eax
c000aa3a:	eb 18                	jmp    c000aa54 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000aa3c:	50                   	push   eax
c000aa3d:	50                   	push   eax
c000aa3e:	55                   	push   ebp
c000aa3f:	56                   	push   esi
c000aa40:	e8 bb 5b ff ff       	call   c0000600 <strcpy>
c000aa45:	5a                   	pop    edx
c000aa46:	59                   	pop    ecx
c000aa47:	68 03 03 02 c0       	push   0xc0020303
c000aa4c:	56                   	push   esi
c000aa4d:	e8 6e 5d ff ff       	call   c00007c0 <strcat>
c000aa52:	5d                   	pop    ebp
c000aa53:	58                   	pop    eax
c000aa54:	57                   	push   edi
c000aa55:	56                   	push   esi
c000aa56:	e8 65 5d ff ff       	call   c00007c0 <strcat>
c000aa5b:	83 c4 10             	add    esp,0x10
c000aa5e:	8a 04 24             	mov    al,BYTE PTR [esp]
c000aa61:	3c 60                	cmp    al,0x60
c000aa63:	7e 03                	jle    c000aa68 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000aa65:	83 e8 20             	sub    eax,0x20
c000aa68:	88 04 24             	mov    BYTE PTR [esp],al
c000aa6b:	88 03                	mov    BYTE PTR [ebx],al
c000aa6d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aa74:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000aa7a:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000aa7e:	bf 03 00 00 00       	mov    edi,0x3
c000aa83:	b8 03 00 00 00       	mov    eax,0x3
c000aa88:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000aa8b:	84 d2                	test   dl,dl
c000aa8d:	0f 84 91 00 00 00    	je     c000ab24 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000aa93:	8d 4f 01             	lea    ecx,[edi+0x1]
c000aa96:	80 fa 5c             	cmp    dl,0x5c
c000aa99:	74 05                	je     c000aaa0 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000aa9b:	80 fa 2f             	cmp    dl,0x2f
c000aa9e:	75 12                	jne    c000aab2 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aaa0:	89 c5                	mov    ebp,eax
c000aaa2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aaa7:	74 09                	je     c000aab2 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aaa9:	40                   	inc    eax
c000aaaa:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000aaae:	89 cf                	mov    edi,ecx
c000aab0:	eb d6                	jmp    c000aa88 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000aab2:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000aab7:	75 5b                	jne    c000ab14 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aab9:	80 fa 2e             	cmp    dl,0x2e
c000aabc:	75 56                	jne    c000ab14 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aabe:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000aac2:	74 19                	je     c000aadd <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000aac4:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aac9:	74 53                	je     c000ab1e <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aacb:	89 f9                	mov    ecx,edi
c000aacd:	41                   	inc    ecx
c000aace:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aad1:	80 fa 2f             	cmp    dl,0x2f
c000aad4:	74 f7                	je     c000aacd <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aad6:	80 fa 5c             	cmp    dl,0x5c
c000aad9:	74 f2                	je     c000aacd <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aadb:	eb d1                	jmp    c000aaae <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aadd:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aae2:	74 3a                	je     c000ab1e <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aae4:	83 f8 03             	cmp    eax,0x3
c000aae7:	74 c5                	je     c000aaae <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aae9:	41                   	inc    ecx
c000aaea:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aaed:	80 fa 2f             	cmp    dl,0x2f
c000aaf0:	74 f7                	je     c000aae9 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aaf2:	80 fa 5c             	cmp    dl,0x5c
c000aaf5:	74 f2                	je     c000aae9 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aaf7:	48                   	dec    eax
c000aaf8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aafc:	75 06                	jne    c000ab04 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000aafe:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab02:	eb f3                	jmp    c000aaf7 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000ab04:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ab08:	74 07                	je     c000ab11 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000ab0a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab0e:	48                   	dec    eax
c000ab0f:	eb f3                	jmp    c000ab04 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000ab11:	40                   	inc    eax
c000ab12:	eb 9a                	jmp    c000aaae <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab14:	80 fa 2f             	cmp    dl,0x2f
c000ab17:	74 95                	je     c000aaae <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab19:	80 fa 5c             	cmp    dl,0x5c
c000ab1c:	74 90                	je     c000aaae <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab1e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000ab21:	40                   	inc    eax
c000ab22:	eb 8a                	jmp    c000aaae <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab24:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab28:	83 ec 0c             	sub    esp,0xc
c000ab2b:	53                   	push   ebx
c000ab2c:	e8 0f 5a ff ff       	call   c0000540 <strlen>
c000ab31:	83 c4 10             	add    esp,0x10
c000ab34:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000ab39:	75 26                	jne    c000ab61 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000ab3b:	83 ec 0c             	sub    esp,0xc
c000ab3e:	53                   	push   ebx
c000ab3f:	e8 fc 59 ff ff       	call   c0000540 <strlen>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000ab4c:	74 26                	je     c000ab74 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000ab4e:	83 ec 0c             	sub    esp,0xc
c000ab51:	53                   	push   ebx
c000ab52:	e8 e9 59 ff ff       	call   c0000540 <strlen>
c000ab57:	83 c4 10             	add    esp,0x10
c000ab5a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000ab5f:	eb c7                	jmp    c000ab28 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000ab61:	83 ec 0c             	sub    esp,0xc
c000ab64:	53                   	push   ebx
c000ab65:	e8 d6 59 ff ff       	call   c0000540 <strlen>
c000ab6a:	83 c4 10             	add    esp,0x10
c000ab6d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ab72:	74 c7                	je     c000ab3b <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000ab74:	81 c4 0c 04 00 00    	add    esp,0x40c
c000ab7a:	5b                   	pop    ebx
c000ab7b:	5e                   	pop    esi
c000ab7c:	5f                   	pop    edi
c000ab7d:	5d                   	pop    ebp
c000ab7e:	c3                   	ret    
c000ab7f:	90                   	nop

c000ab80 <File::File(char const*, Process*)>:
c000ab80:	83 ec 0c             	sub    esp,0xc
c000ab83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab87:	83 ec 08             	sub    esp,0x8
c000ab8a:	6a 00                	push   0x0
c000ab8c:	50                   	push   eax
c000ab8d:	e8 78 e3 ff ff       	call   c0008f0a <UnixFile::UnixFile(int)>
c000ab92:	83 c4 10             	add    esp,0x10
c000ab95:	ba f0 f4 01 c0       	mov    edx,0xc001f4f0
c000ab9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab9e:	89 10                	mov    DWORD PTR [eax],edx
c000aba0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aba4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000abaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abae:	83 c0 0d             	add    eax,0xd
c000abb1:	83 ec 04             	sub    esp,0x4
c000abb4:	52                   	push   edx
c000abb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abb9:	50                   	push   eax
c000abba:	e8 17 fe ff ff       	call   c000a9d6 <Fs::standardiseFiles(char*, char const*, char const*)>
c000abbf:	83 c4 10             	add    esp,0x10
c000abc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abc6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000abc9:	8d 50 bf             	lea    edx,[eax-0x41]
c000abcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abd0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000abd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abda:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000abde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abe2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000abe8:	25 ff 00 00 00       	and    eax,0xff
c000abed:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000abf4:	85 c0                	test   eax,eax
c000abf6:	74 42                	je     c000ac3a <File::File(char const*, Process*)+0xba>
c000abf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abfc:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ac02:	25 ff 00 00 00       	and    eax,0xff
c000ac07:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000ac0e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ac14:	85 c0                	test   eax,eax
c000ac16:	75 22                	jne    c000ac3a <File::File(char const*, Process*)+0xba>
c000ac18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac1c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ac22:	25 ff 00 00 00       	and    eax,0xff
c000ac27:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000ac2e:	83 ec 0c             	sub    esp,0xc
c000ac31:	50                   	push   eax
c000ac32:	e8 31 20 00 00       	call   c000cc68 <LogicalDisk::mount()>
c000ac37:	83 c4 10             	add    esp,0x10
c000ac3a:	90                   	nop
c000ac3b:	83 c4 0c             	add    esp,0xc
c000ac3e:	c3                   	ret    
c000ac3f:	90                   	nop

c000ac40 <File::open(FileOpenMode)>:
c000ac40:	53                   	push   ebx
c000ac41:	b8 0b 00 00 00       	mov    eax,0xb
c000ac46:	83 ec 08             	sub    esp,0x8
c000ac49:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ac4d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000ac54:	80 fa 19             	cmp    dl,0x19
c000ac57:	77 40                	ja     c000ac99 <File::open(FileOpenMode)+0x59>
c000ac59:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000ac60:	85 d2                	test   edx,edx
c000ac62:	74 35                	je     c000ac99 <File::open(FileOpenMode)+0x59>
c000ac64:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ac6a:	85 d2                	test   edx,edx
c000ac6c:	74 2b                	je     c000ac99 <File::open(FileOpenMode)+0x59>
c000ac6e:	b8 06 00 00 00       	mov    eax,0x6
c000ac73:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000ac77:	75 20                	jne    c000ac99 <File::open(FileOpenMode)+0x59>
c000ac79:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac7b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000ac81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac85:	51                   	push   ecx
c000ac86:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000ac89:	51                   	push   ecx
c000ac8a:	52                   	push   edx
c000ac8b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ac8e:	83 c4 10             	add    esp,0x10
c000ac91:	85 c0                	test   eax,eax
c000ac93:	75 04                	jne    c000ac99 <File::open(FileOpenMode)+0x59>
c000ac95:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ac99:	83 c4 08             	add    esp,0x8
c000ac9c:	5b                   	pop    ebx
c000ac9d:	c3                   	ret    

c000ac9e <File::close()>:
c000ac9e:	53                   	push   ebx
c000ac9f:	b8 0b 00 00 00       	mov    eax,0xb
c000aca4:	83 ec 08             	sub    esp,0x8
c000aca7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000acab:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000acb2:	80 fa 19             	cmp    dl,0x19
c000acb5:	77 41                	ja     c000acf8 <File::close()+0x5a>
c000acb7:	8b 1c 95 20 64 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd9be0]
c000acbe:	85 db                	test   ebx,ebx
c000acc0:	74 36                	je     c000acf8 <File::close()+0x5a>
c000acc2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000acc9:	74 2d                	je     c000acf8 <File::close()+0x5a>
c000accb:	b8 05 00 00 00       	mov    eax,0x5
c000acd0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000acd4:	74 22                	je     c000acf8 <File::close()+0x5a>
c000acd6:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000acda:	8b 04 95 20 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9be0]
c000ace1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ace7:	53                   	push   ebx
c000ace8:	53                   	push   ebx
c000ace9:	8b 10                	mov    edx,DWORD PTR [eax]
c000aceb:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000acf1:	50                   	push   eax
c000acf2:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000acf5:	83 c4 10             	add    esp,0x10
c000acf8:	83 c4 08             	add    esp,0x8
c000acfb:	5b                   	pop    ebx
c000acfc:	c3                   	ret    
c000acfd:	90                   	nop

c000acfe <File::seek(unsigned long long)>:
c000acfe:	56                   	push   esi
c000acff:	53                   	push   ebx
c000ad00:	b8 0b 00 00 00       	mov    eax,0xb
c000ad05:	51                   	push   ecx
c000ad06:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ad0a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ad0e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ad15:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ad19:	80 fa 19             	cmp    dl,0x19
c000ad1c:	77 31                	ja     c000ad4f <File::seek(unsigned long long)+0x51>
c000ad1e:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000ad25:	85 d2                	test   edx,edx
c000ad27:	74 26                	je     c000ad4f <File::seek(unsigned long long)+0x51>
c000ad29:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ad2f:	85 d2                	test   edx,edx
c000ad31:	74 1c                	je     c000ad4f <File::seek(unsigned long long)+0x51>
c000ad33:	b8 05 00 00 00       	mov    eax,0x5
c000ad38:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ad3c:	74 11                	je     c000ad4f <File::seek(unsigned long long)+0x51>
c000ad3e:	8b 02                	mov    eax,DWORD PTR [edx]
c000ad40:	53                   	push   ebx
c000ad41:	51                   	push   ecx
c000ad42:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ad48:	52                   	push   edx
c000ad49:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ad4c:	83 c4 10             	add    esp,0x10
c000ad4f:	5a                   	pop    edx
c000ad50:	5b                   	pop    ebx
c000ad51:	5e                   	pop    esi
c000ad52:	c3                   	ret    
c000ad53:	90                   	nop

c000ad54 <File::tell(unsigned long long*)>:
c000ad54:	83 ec 0c             	sub    esp,0xc
c000ad57:	b8 0b 00 00 00       	mov    eax,0xb
c000ad5c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ad60:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ad67:	80 fa 19             	cmp    dl,0x19
c000ad6a:	77 34                	ja     c000ada0 <File::tell(unsigned long long*)+0x4c>
c000ad6c:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000ad73:	85 d2                	test   edx,edx
c000ad75:	74 29                	je     c000ada0 <File::tell(unsigned long long*)+0x4c>
c000ad77:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ad7d:	85 d2                	test   edx,edx
c000ad7f:	74 1f                	je     c000ada0 <File::tell(unsigned long long*)+0x4c>
c000ad81:	b8 05 00 00 00       	mov    eax,0x5
c000ad86:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ad8a:	74 14                	je     c000ada0 <File::tell(unsigned long long*)+0x4c>
c000ad8c:	50                   	push   eax
c000ad8d:	8b 02                	mov    eax,DWORD PTR [edx]
c000ad8f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad93:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ad99:	52                   	push   edx
c000ad9a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ad9d:	83 c4 10             	add    esp,0x10
c000ada0:	83 c4 0c             	add    esp,0xc
c000ada3:	c3                   	ret    

c000ada4 <File::rewind()>:
c000ada4:	83 ec 10             	sub    esp,0x10
c000ada7:	6a 00                	push   0x0
c000ada9:	6a 00                	push   0x0
c000adab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000adaf:	e8 4a ff ff ff       	call   c000acfe <File::seek(unsigned long long)>
c000adb4:	83 c4 1c             	add    esp,0x1c
c000adb7:	c3                   	ret    

c000adb8 <File::unlink()>:
c000adb8:	83 ec 0c             	sub    esp,0xc
c000adbb:	b8 0b 00 00 00       	mov    eax,0xb
c000adc0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000adc4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000adcb:	80 f9 19             	cmp    cl,0x19
c000adce:	77 2f                	ja     c000adff <File::unlink()+0x47>
c000add0:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000add7:	85 c9                	test   ecx,ecx
c000add9:	74 24                	je     c000adff <File::unlink()+0x47>
c000addb:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ade1:	85 c9                	test   ecx,ecx
c000ade3:	74 1a                	je     c000adff <File::unlink()+0x47>
c000ade5:	b8 06 00 00 00       	mov    eax,0x6
c000adea:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adee:	75 0f                	jne    c000adff <File::unlink()+0x47>
c000adf0:	83 c2 0d             	add    edx,0xd
c000adf3:	50                   	push   eax
c000adf4:	50                   	push   eax
c000adf5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000adf7:	52                   	push   edx
c000adf8:	51                   	push   ecx
c000adf9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000adfc:	83 c4 10             	add    esp,0x10
c000adff:	83 c4 0c             	add    esp,0xc
c000ae02:	c3                   	ret    
c000ae03:	90                   	nop

c000ae04 <File::rename(char const*)>:
c000ae04:	83 ec 0c             	sub    esp,0xc
c000ae07:	b8 0b 00 00 00       	mov    eax,0xb
c000ae0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae10:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae17:	80 f9 19             	cmp    cl,0x19
c000ae1a:	77 32                	ja     c000ae4e <File::rename(char const*)+0x4a>
c000ae1c:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000ae23:	85 c9                	test   ecx,ecx
c000ae25:	74 27                	je     c000ae4e <File::rename(char const*)+0x4a>
c000ae27:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ae2d:	85 c9                	test   ecx,ecx
c000ae2f:	74 1d                	je     c000ae4e <File::rename(char const*)+0x4a>
c000ae31:	b8 06 00 00 00       	mov    eax,0x6
c000ae36:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae3a:	75 12                	jne    c000ae4e <File::rename(char const*)+0x4a>
c000ae3c:	83 c2 0d             	add    edx,0xd
c000ae3f:	50                   	push   eax
c000ae40:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ae46:	52                   	push   edx
c000ae47:	51                   	push   ecx
c000ae48:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ae4b:	83 c4 10             	add    esp,0x10
c000ae4e:	83 c4 0c             	add    esp,0xc
c000ae51:	c3                   	ret    

c000ae52 <File::chfatattr(unsigned char, unsigned char)>:
c000ae52:	57                   	push   edi
c000ae53:	b8 0b 00 00 00       	mov    eax,0xb
c000ae58:	56                   	push   esi
c000ae59:	53                   	push   ebx
c000ae5a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae5e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ae62:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae69:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ae6d:	80 f9 19             	cmp    cl,0x19
c000ae70:	77 37                	ja     c000aea9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae72:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000ae79:	85 c9                	test   ecx,ecx
c000ae7b:	74 2c                	je     c000aea9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae7d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ae83:	85 c9                	test   ecx,ecx
c000ae85:	74 22                	je     c000aea9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae87:	b8 06 00 00 00       	mov    eax,0x6
c000ae8c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae90:	75 17                	jne    c000aea9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae92:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ae94:	89 f0                	mov    eax,esi
c000ae96:	83 c2 0d             	add    edx,0xd
c000ae99:	0f b6 f0             	movzx  esi,al
c000ae9c:	0f b6 db             	movzx  ebx,bl
c000ae9f:	56                   	push   esi
c000aea0:	53                   	push   ebx
c000aea1:	52                   	push   edx
c000aea2:	51                   	push   ecx
c000aea3:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000aea6:	83 c4 10             	add    esp,0x10
c000aea9:	5b                   	pop    ebx
c000aeaa:	5e                   	pop    esi
c000aeab:	5f                   	pop    edi
c000aeac:	c3                   	ret    
c000aead:	90                   	nop

c000aeae <File::exists()>:
c000aeae:	83 ec 0c             	sub    esp,0xc
c000aeb1:	31 c0                	xor    eax,eax
c000aeb3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aeb7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000aebe:	80 f9 19             	cmp    cl,0x19
c000aec1:	77 24                	ja     c000aee7 <File::exists()+0x39>
c000aec3:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000aeca:	85 c9                	test   ecx,ecx
c000aecc:	74 19                	je     c000aee7 <File::exists()+0x39>
c000aece:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000aed4:	85 c9                	test   ecx,ecx
c000aed6:	74 0f                	je     c000aee7 <File::exists()+0x39>
c000aed8:	83 c2 0d             	add    edx,0xd
c000aedb:	50                   	push   eax
c000aedc:	50                   	push   eax
c000aedd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000aedf:	52                   	push   edx
c000aee0:	51                   	push   ecx
c000aee1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000aee4:	83 c4 10             	add    esp,0x10
c000aee7:	83 c4 0c             	add    esp,0xc
c000aeea:	c3                   	ret    
c000aeeb:	90                   	nop

c000aeec <File::stat(unsigned long long*, bool*)>:
c000aeec:	56                   	push   esi
c000aeed:	53                   	push   ebx
c000aeee:	50                   	push   eax
c000aeef:	b8 0b 00 00 00       	mov    eax,0xb
c000aef4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aef8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000aefc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000af03:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000af07:	80 f9 19             	cmp    cl,0x19
c000af0a:	77 3d                	ja     c000af49 <File::stat(unsigned long long*, bool*)+0x5d>
c000af0c:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000af13:	85 c9                	test   ecx,ecx
c000af15:	74 32                	je     c000af49 <File::stat(unsigned long long*, bool*)+0x5d>
c000af17:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000af1d:	85 c9                	test   ecx,ecx
c000af1f:	74 28                	je     c000af49 <File::stat(unsigned long long*, bool*)+0x5d>
c000af21:	8b 01                	mov    eax,DWORD PTR [ecx]
c000af23:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000af27:	74 13                	je     c000af3c <File::stat(unsigned long long*, bool*)+0x50>
c000af29:	83 ec 04             	sub    esp,0x4
c000af2c:	56                   	push   esi
c000af2d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000af33:	51                   	push   ecx
c000af34:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000af37:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000af3a:	eb 0a                	jmp    c000af46 <File::stat(unsigned long long*, bool*)+0x5a>
c000af3c:	53                   	push   ebx
c000af3d:	83 c2 0d             	add    edx,0xd
c000af40:	56                   	push   esi
c000af41:	52                   	push   edx
c000af42:	51                   	push   ecx
c000af43:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000af46:	83 c4 10             	add    esp,0x10
c000af49:	5a                   	pop    edx
c000af4a:	5b                   	pop    ebx
c000af4b:	5e                   	pop    esi
c000af4c:	c3                   	ret    

c000af4d <Fs::setcwd(Process*, char*)>:
c000af4d:	55                   	push   ebp
c000af4e:	57                   	push   edi
c000af4f:	56                   	push   esi
c000af50:	53                   	push   ebx
c000af51:	81 ec 20 02 00 00    	sub    esp,0x220
c000af57:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000af5e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000af64:	57                   	push   edi
c000af65:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000af6c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000af70:	56                   	push   esi
c000af71:	e8 60 fa ff ff       	call   c000a9d6 <Fs::standardiseFiles(char*, char const*, char const*)>
c000af76:	89 34 24             	mov    DWORD PTR [esp],esi
c000af79:	e8 c2 55 ff ff       	call   c0000540 <strlen>
c000af7e:	83 c4 10             	add    esp,0x10
c000af81:	83 f8 02             	cmp    eax,0x2
c000af84:	77 15                	ja     c000af9b <Fs::setcwd(Process*, char*)+0x4e>
c000af86:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000af8b:	83 eb 41             	sub    ebx,0x41
c000af8e:	8b 04 9d 20 64 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9be0]
c000af95:	85 c0                	test   eax,eax
c000af97:	75 1c                	jne    c000afb5 <Fs::setcwd(Process*, char*)+0x68>
c000af99:	eb 2f                	jmp    c000afca <Fs::setcwd(Process*, char*)+0x7d>
c000af9b:	83 ec 0c             	sub    esp,0xc
c000af9e:	56                   	push   esi
c000af9f:	e8 9c 55 ff ff       	call   c0000540 <strlen>
c000afa4:	83 c4 10             	add    esp,0x10
c000afa7:	83 f8 03             	cmp    eax,0x3
c000afaa:	75 57                	jne    c000b003 <Fs::setcwd(Process*, char*)+0xb6>
c000afac:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000afb1:	75 50                	jne    c000b003 <Fs::setcwd(Process*, char*)+0xb6>
c000afb3:	eb d1                	jmp    c000af86 <Fs::setcwd(Process*, char*)+0x39>
c000afb5:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000afbc:	75 0c                	jne    c000afca <Fs::setcwd(Process*, char*)+0x7d>
c000afbe:	83 ec 0c             	sub    esp,0xc
c000afc1:	50                   	push   eax
c000afc2:	e8 a1 1c 00 00       	call   c000cc68 <LogicalDisk::mount()>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	b8 03 00 00 00       	mov    eax,0x3
c000afcf:	83 fb 19             	cmp    ebx,0x19
c000afd2:	0f 87 c6 00 00 00    	ja     c000b09e <Fs::setcwd(Process*, char*)+0x151>
c000afd8:	8b 14 9d 20 64 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd9be0]
c000afdf:	b8 05 00 00 00       	mov    eax,0x5
c000afe4:	85 d2                	test   edx,edx
c000afe6:	0f 84 b2 00 00 00    	je     c000b09e <Fs::setcwd(Process*, char*)+0x151>
c000afec:	b8 06 00 00 00       	mov    eax,0x6
c000aff1:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000aff8:	0f 85 92 00 00 00    	jne    c000b090 <Fs::setcwd(Process*, char*)+0x143>
c000affe:	e9 9b 00 00 00       	jmp    c000b09e <Fs::setcwd(Process*, char*)+0x151>
c000b003:	83 ec 0c             	sub    esp,0xc
c000b006:	68 14 01 00 00       	push   0x114
c000b00b:	e8 65 c8 ff ff       	call   c0007875 <malloc>
c000b010:	83 c4 0c             	add    esp,0xc
c000b013:	89 c3                	mov    ebx,eax
c000b015:	55                   	push   ebp
c000b016:	56                   	push   esi
c000b017:	50                   	push   eax
c000b018:	e8 63 fb ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c000b01d:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b022:	83 c4 0c             	add    esp,0xc
c000b025:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b029:	50                   	push   eax
c000b02a:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b02e:	50                   	push   eax
c000b02f:	53                   	push   ebx
c000b030:	e8 b7 fe ff ff       	call   c000aeec <File::stat(unsigned long long*, bool*)>
c000b035:	83 c4 10             	add    esp,0x10
c000b038:	83 f8 02             	cmp    eax,0x2
c000b03b:	74 27                	je     c000b064 <Fs::setcwd(Process*, char*)+0x117>
c000b03d:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b042:	75 1c                	jne    c000b060 <Fs::setcwd(Process*, char*)+0x113>
c000b044:	b8 02 00 00 00       	mov    eax,0x2
c000b049:	85 db                	test   ebx,ebx
c000b04b:	74 51                	je     c000b09e <Fs::setcwd(Process*, char*)+0x151>
c000b04d:	83 ec 0c             	sub    esp,0xc
c000b050:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b052:	53                   	push   ebx
c000b053:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b056:	83 c4 10             	add    esp,0x10
c000b059:	b8 02 00 00 00       	mov    eax,0x2
c000b05e:	eb 3e                	jmp    c000b09e <Fs::setcwd(Process*, char*)+0x151>
c000b060:	85 c0                	test   eax,eax
c000b062:	74 1c                	je     c000b080 <Fs::setcwd(Process*, char*)+0x133>
c000b064:	b8 01 00 00 00       	mov    eax,0x1
c000b069:	85 db                	test   ebx,ebx
c000b06b:	74 31                	je     c000b09e <Fs::setcwd(Process*, char*)+0x151>
c000b06d:	83 ec 0c             	sub    esp,0xc
c000b070:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b072:	53                   	push   ebx
c000b073:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b076:	83 c4 10             	add    esp,0x10
c000b079:	b8 01 00 00 00       	mov    eax,0x1
c000b07e:	eb 1e                	jmp    c000b09e <Fs::setcwd(Process*, char*)+0x151>
c000b080:	85 db                	test   ebx,ebx
c000b082:	74 0c                	je     c000b090 <Fs::setcwd(Process*, char*)+0x143>
c000b084:	83 ec 0c             	sub    esp,0xc
c000b087:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b089:	53                   	push   ebx
c000b08a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b08d:	83 c4 10             	add    esp,0x10
c000b090:	50                   	push   eax
c000b091:	50                   	push   eax
c000b092:	56                   	push   esi
c000b093:	57                   	push   edi
c000b094:	e8 67 55 ff ff       	call   c0000600 <strcpy>
c000b099:	83 c4 10             	add    esp,0x10
c000b09c:	31 c0                	xor    eax,eax
c000b09e:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b0a4:	5b                   	pop    ebx
c000b0a5:	5e                   	pop    esi
c000b0a6:	5f                   	pop    edi
c000b0a7:	5d                   	pop    ebp
c000b0a8:	c3                   	ret    
c000b0a9:	90                   	nop

c000b0aa <Directory::Directory(char const*, Process*)>:
c000b0aa:	83 ec 0c             	sub    esp,0xc
c000b0ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0b1:	83 ec 08             	sub    esp,0x8
c000b0b4:	6a 00                	push   0x0
c000b0b6:	50                   	push   eax
c000b0b7:	e8 4e de ff ff       	call   c0008f0a <UnixFile::UnixFile(int)>
c000b0bc:	83 c4 10             	add    esp,0x10
c000b0bf:	ba 0c f5 01 c0       	mov    edx,0xc001f50c
c000b0c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0c8:	89 10                	mov    DWORD PTR [eax],edx
c000b0ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b0ce:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b0d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0d8:	83 c0 0d             	add    eax,0xd
c000b0db:	83 ec 04             	sub    esp,0x4
c000b0de:	52                   	push   edx
c000b0df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0e3:	50                   	push   eax
c000b0e4:	e8 ed f8 ff ff       	call   c000a9d6 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b0e9:	83 c4 10             	add    esp,0x10
c000b0ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0f0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b0f3:	8d 50 bf             	lea    edx,[eax-0x41]
c000b0f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0fa:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b104:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b10c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b112:	25 ff 00 00 00       	and    eax,0xff
c000b117:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000b11e:	85 c0                	test   eax,eax
c000b120:	74 42                	je     c000b164 <Directory::Directory(char const*, Process*)+0xba>
c000b122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b126:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b12c:	25 ff 00 00 00       	and    eax,0xff
c000b131:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000b138:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b13e:	85 c0                	test   eax,eax
c000b140:	75 22                	jne    c000b164 <Directory::Directory(char const*, Process*)+0xba>
c000b142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b146:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b14c:	25 ff 00 00 00       	and    eax,0xff
c000b151:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000b158:	83 ec 0c             	sub    esp,0xc
c000b15b:	50                   	push   eax
c000b15c:	e8 07 1b 00 00       	call   c000cc68 <LogicalDisk::mount()>
c000b161:	83 c4 10             	add    esp,0x10
c000b164:	90                   	nop
c000b165:	83 c4 0c             	add    esp,0xc
c000b168:	c3                   	ret    
c000b169:	90                   	nop

c000b16a <Directory::open()>:
c000b16a:	53                   	push   ebx
c000b16b:	b8 0b 00 00 00       	mov    eax,0xb
c000b170:	83 ec 08             	sub    esp,0x8
c000b173:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b177:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b17e:	80 fa 19             	cmp    dl,0x19
c000b181:	77 3d                	ja     c000b1c0 <Directory::open()+0x56>
c000b183:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000b18a:	85 d2                	test   edx,edx
c000b18c:	74 32                	je     c000b1c0 <Directory::open()+0x56>
c000b18e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b194:	85 d2                	test   edx,edx
c000b196:	74 28                	je     c000b1c0 <Directory::open()+0x56>
c000b198:	b8 06 00 00 00       	mov    eax,0x6
c000b19d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b1a1:	75 1d                	jne    c000b1c0 <Directory::open()+0x56>
c000b1a3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b1a9:	50                   	push   eax
c000b1aa:	8b 02                	mov    eax,DWORD PTR [edx]
c000b1ac:	51                   	push   ecx
c000b1ad:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b1b0:	51                   	push   ecx
c000b1b1:	52                   	push   edx
c000b1b2:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b1b5:	83 c4 10             	add    esp,0x10
c000b1b8:	85 c0                	test   eax,eax
c000b1ba:	75 04                	jne    c000b1c0 <Directory::open()+0x56>
c000b1bc:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b1c0:	83 c4 08             	add    esp,0x8
c000b1c3:	5b                   	pop    ebx
c000b1c4:	c3                   	ret    
c000b1c5:	90                   	nop

c000b1c6 <Directory::close()>:
c000b1c6:	53                   	push   ebx
c000b1c7:	b8 0b 00 00 00       	mov    eax,0xb
c000b1cc:	83 ec 08             	sub    esp,0x8
c000b1cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b1d3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b1da:	80 fa 19             	cmp    dl,0x19
c000b1dd:	77 41                	ja     c000b220 <Directory::close()+0x5a>
c000b1df:	8b 1c 95 20 64 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd9be0]
c000b1e6:	85 db                	test   ebx,ebx
c000b1e8:	74 36                	je     c000b220 <Directory::close()+0x5a>
c000b1ea:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b1f1:	74 2d                	je     c000b220 <Directory::close()+0x5a>
c000b1f3:	b8 05 00 00 00       	mov    eax,0x5
c000b1f8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b1fc:	74 22                	je     c000b220 <Directory::close()+0x5a>
c000b1fe:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b202:	8b 04 95 20 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9be0]
c000b209:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b20f:	53                   	push   ebx
c000b210:	53                   	push   ebx
c000b211:	8b 10                	mov    edx,DWORD PTR [eax]
c000b213:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b219:	50                   	push   eax
c000b21a:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b21d:	83 c4 10             	add    esp,0x10
c000b220:	83 c4 08             	add    esp,0x8
c000b223:	5b                   	pop    ebx
c000b224:	c3                   	ret    
c000b225:	90                   	nop

c000b226 <Directory::unlink()>:
c000b226:	83 ec 0c             	sub    esp,0xc
c000b229:	b8 0b 00 00 00       	mov    eax,0xb
c000b22e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b232:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b239:	80 f9 19             	cmp    cl,0x19
c000b23c:	77 2f                	ja     c000b26d <Directory::unlink()+0x47>
c000b23e:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b245:	85 c9                	test   ecx,ecx
c000b247:	74 24                	je     c000b26d <Directory::unlink()+0x47>
c000b249:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b24f:	85 c9                	test   ecx,ecx
c000b251:	74 1a                	je     c000b26d <Directory::unlink()+0x47>
c000b253:	b8 06 00 00 00       	mov    eax,0x6
c000b258:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b25c:	75 0f                	jne    c000b26d <Directory::unlink()+0x47>
c000b25e:	83 c2 0d             	add    edx,0xd
c000b261:	50                   	push   eax
c000b262:	50                   	push   eax
c000b263:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b265:	52                   	push   edx
c000b266:	51                   	push   ecx
c000b267:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b26a:	83 c4 10             	add    esp,0x10
c000b26d:	83 c4 0c             	add    esp,0xc
c000b270:	c3                   	ret    
c000b271:	90                   	nop

c000b272 <Directory::rename(char const*)>:
c000b272:	83 ec 0c             	sub    esp,0xc
c000b275:	b8 0b 00 00 00       	mov    eax,0xb
c000b27a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b27e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b285:	80 f9 19             	cmp    cl,0x19
c000b288:	77 32                	ja     c000b2bc <Directory::rename(char const*)+0x4a>
c000b28a:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b291:	85 c9                	test   ecx,ecx
c000b293:	74 27                	je     c000b2bc <Directory::rename(char const*)+0x4a>
c000b295:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b29b:	85 c9                	test   ecx,ecx
c000b29d:	74 1d                	je     c000b2bc <Directory::rename(char const*)+0x4a>
c000b29f:	b8 06 00 00 00       	mov    eax,0x6
c000b2a4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2a8:	75 12                	jne    c000b2bc <Directory::rename(char const*)+0x4a>
c000b2aa:	83 c2 0d             	add    edx,0xd
c000b2ad:	50                   	push   eax
c000b2ae:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b2b4:	52                   	push   edx
c000b2b5:	51                   	push   ecx
c000b2b6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b2b9:	83 c4 10             	add    esp,0x10
c000b2bc:	83 c4 0c             	add    esp,0xc
c000b2bf:	c3                   	ret    

c000b2c0 <Directory::exists()>:
c000b2c0:	83 ec 0c             	sub    esp,0xc
c000b2c3:	31 c0                	xor    eax,eax
c000b2c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2c9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2d0:	80 f9 19             	cmp    cl,0x19
c000b2d3:	77 24                	ja     c000b2f9 <Directory::exists()+0x39>
c000b2d5:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b2dc:	85 c9                	test   ecx,ecx
c000b2de:	74 19                	je     c000b2f9 <Directory::exists()+0x39>
c000b2e0:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b2e6:	85 c9                	test   ecx,ecx
c000b2e8:	74 0f                	je     c000b2f9 <Directory::exists()+0x39>
c000b2ea:	83 c2 0d             	add    edx,0xd
c000b2ed:	50                   	push   eax
c000b2ee:	50                   	push   eax
c000b2ef:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2f1:	52                   	push   edx
c000b2f2:	51                   	push   ecx
c000b2f3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b2f6:	83 c4 10             	add    esp,0x10
c000b2f9:	83 c4 0c             	add    esp,0xc
c000b2fc:	c3                   	ret    
c000b2fd:	90                   	nop

c000b2fe <Directory::read(dirent*)>:
c000b2fe:	83 ec 1c             	sub    esp,0x1c
c000b301:	b8 0b 00 00 00       	mov    eax,0xb
c000b306:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b30a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b311:	80 fa 19             	cmp    dl,0x19
c000b314:	77 30                	ja     c000b346 <Directory::read(dirent*)+0x48>
c000b316:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000b31d:	85 d2                	test   edx,edx
c000b31f:	74 25                	je     c000b346 <Directory::read(dirent*)+0x48>
c000b321:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b328:	74 1c                	je     c000b346 <Directory::read(dirent*)+0x48>
c000b32a:	83 ec 0c             	sub    esp,0xc
c000b32d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b32f:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b333:	52                   	push   edx
c000b334:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b338:	6a 00                	push   0x0
c000b33a:	68 10 01 00 00       	push   0x110
c000b33f:	51                   	push   ecx
c000b340:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b343:	83 c4 20             	add    esp,0x20
c000b346:	83 c4 1c             	add    esp,0x1c
c000b349:	c3                   	ret    

c000b34a <Directory::create()>:
c000b34a:	83 ec 0c             	sub    esp,0xc
c000b34d:	b8 0b 00 00 00       	mov    eax,0xb
c000b352:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b356:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b35d:	80 f9 19             	cmp    cl,0x19
c000b360:	77 2f                	ja     c000b391 <Directory::create()+0x47>
c000b362:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b369:	85 c9                	test   ecx,ecx
c000b36b:	74 24                	je     c000b391 <Directory::create()+0x47>
c000b36d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b373:	85 c9                	test   ecx,ecx
c000b375:	74 1a                	je     c000b391 <Directory::create()+0x47>
c000b377:	b8 06 00 00 00       	mov    eax,0x6
c000b37c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b380:	75 0f                	jne    c000b391 <Directory::create()+0x47>
c000b382:	83 c2 0d             	add    edx,0xd
c000b385:	50                   	push   eax
c000b386:	50                   	push   eax
c000b387:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b389:	52                   	push   edx
c000b38a:	51                   	push   ecx
c000b38b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b38e:	83 c4 10             	add    esp,0x10
c000b391:	83 c4 0c             	add    esp,0xc
c000b394:	c3                   	ret    
c000b395:	90                   	nop

c000b396 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b396:	b8 0a 00 00 00       	mov    eax,0xa
c000b39b:	c3                   	ret    

c000b39c <Bus::Bus(char const*)>:
c000b39c:	83 ec 0c             	sub    esp,0xc
c000b39f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3a3:	83 ec 08             	sub    esp,0x8
c000b3a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3aa:	50                   	push   eax
c000b3ab:	e8 30 08 00 00       	call   c000bbe0 <Device::Device(char const*)>
c000b3b0:	83 c4 10             	add    esp,0x10
c000b3b3:	ba 28 f5 01 c0       	mov    edx,0xc001f528
c000b3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3bc:	89 10                	mov    DWORD PTR [eax],edx
c000b3be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3c2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b3cc:	90                   	nop
c000b3cd:	83 c4 0c             	add    esp,0xc
c000b3d0:	c3                   	ret    
c000b3d1:	90                   	nop
c000b3d2:	66 90                	xchg   ax,ax

c000b3d4 <Bus::~Bus()>:
c000b3d4:	83 ec 0c             	sub    esp,0xc
c000b3d7:	ba 28 f5 01 c0       	mov    edx,0xc001f528
c000b3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e0:	89 10                	mov    DWORD PTR [eax],edx
c000b3e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e6:	83 ec 0c             	sub    esp,0xc
c000b3e9:	50                   	push   eax
c000b3ea:	e8 5b 05 00 00       	call   c000b94a <Device::~Device()>
c000b3ef:	83 c4 10             	add    esp,0x10
c000b3f2:	90                   	nop
c000b3f3:	83 c4 0c             	add    esp,0xc
c000b3f6:	c3                   	ret    
c000b3f7:	90                   	nop

c000b3f8 <Bus::~Bus()>:
c000b3f8:	83 ec 0c             	sub    esp,0xc
c000b3fb:	83 ec 0c             	sub    esp,0xc
c000b3fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b402:	e8 cd ff ff ff       	call   c000b3d4 <Bus::~Bus()>
c000b407:	83 c4 10             	add    esp,0x10
c000b40a:	83 ec 08             	sub    esp,0x8
c000b40d:	68 58 01 00 00       	push   0x158
c000b412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b416:	e8 f9 f0 ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c000b41b:	83 c4 10             	add    esp,0x10
c000b41e:	83 c4 0c             	add    esp,0xc
c000b421:	c3                   	ret    

c000b422 <beepThread(void*)>:
c000b422:	83 ec 0c             	sub    esp,0xc
c000b425:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000b42a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b42e:	48                   	dec    eax
c000b42f:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000b434:	75 01                	jne    c000b437 <beepThread(void*)+0x15>
c000b436:	fb                   	sti    
c000b437:	83 ec 0c             	sub    esp,0xc
c000b43a:	6b c2 0a             	imul   eax,edx,0xa
c000b43d:	50                   	push   eax
c000b43e:	e8 b5 94 00 00       	call   c00148f8 <milliTenthSleep(unsigned int)>
c000b443:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b44a:	e8 96 b2 00 00       	call   c00166e5 <HalMakeBeep(int)>
c000b44f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b457:	83 c4 1c             	add    esp,0x1c
c000b45a:	e9 95 93 00 00       	jmp    c00147f4 <blockTask(TaskState)>

c000b45f <Krnl::beep(int, int, bool)>:
c000b45f:	56                   	push   esi
c000b460:	53                   	push   ebx
c000b461:	83 ec 10             	sub    esp,0x10
c000b464:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b468:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b46c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b470:	e8 70 b2 00 00       	call   c00166e5 <HalMakeBeep(int)>
c000b475:	83 c4 10             	add    esp,0x10
c000b478:	89 f0                	mov    eax,esi
c000b47a:	84 c0                	test   al,al
c000b47c:	74 1e                	je     c000b49c <Krnl::beep(int, int, bool)+0x3d>
c000b47e:	83 ec 0c             	sub    esp,0xc
c000b481:	6b db 0a             	imul   ebx,ebx,0xa
c000b484:	53                   	push   ebx
c000b485:	e8 6e 94 00 00       	call   c00148f8 <milliTenthSleep(unsigned int)>
c000b48a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b492:	83 c4 14             	add    esp,0x14
c000b495:	5b                   	pop    ebx
c000b496:	5e                   	pop    esi
c000b497:	e9 49 b2 00 00       	jmp    c00166e5 <HalMakeBeep(int)>
c000b49c:	68 e6 00 00 00       	push   0xe6
c000b4a1:	53                   	push   ebx
c000b4a2:	68 22 b4 00 c0       	push   0xc000b422
c000b4a7:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c000b4ad:	e8 26 8f 00 00       	call   c00143d8 <Process::createThread(void (*)(void*), void*, int)>
c000b4b2:	83 c4 14             	add    esp,0x14
c000b4b5:	5b                   	pop    ebx
c000b4b6:	5e                   	pop    esi
c000b4b7:	c3                   	ret    

c000b4b8 <User::loadClockSettings(int)>:
c000b4b8:	53                   	push   ebx
c000b4b9:	83 ec 14             	sub    esp,0x14
c000b4bc:	68 14 01 00 00       	push   0x114
c000b4c1:	e8 af c3 ff ff       	call   c0007875 <malloc>
c000b4c6:	83 c4 0c             	add    esp,0xc
c000b4c9:	89 c3                	mov    ebx,eax
c000b4cb:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c000b4d1:	68 4c f5 01 c0       	push   0xc001f54c
c000b4d6:	50                   	push   eax
c000b4d7:	e8 a4 f6 ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c000b4dc:	58                   	pop    eax
c000b4dd:	5a                   	pop    edx
c000b4de:	6a 01                	push   0x1
c000b4e0:	53                   	push   ebx
c000b4e1:	e8 5a f7 ff ff       	call   c000ac40 <File::open(FileOpenMode)>
c000b4e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b4e9:	e8 b0 f7 ff ff       	call   c000ac9e <File::close()>
c000b4ee:	83 c4 10             	add    esp,0x10
c000b4f1:	85 db                	test   ebx,ebx
c000b4f3:	74 0f                	je     c000b504 <User::loadClockSettings(int)+0x4c>
c000b4f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4f7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b4fb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b4fe:	83 c4 08             	add    esp,0x8
c000b501:	5b                   	pop    ebx
c000b502:	ff e0                	jmp    eax
c000b504:	83 c4 08             	add    esp,0x8
c000b507:	5b                   	pop    ebx
c000b508:	c3                   	ret    
c000b509:	90                   	nop

c000b50a <Clock::Clock(char const*)>:
c000b50a:	83 ec 0c             	sub    esp,0xc
c000b50d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b511:	83 ec 08             	sub    esp,0x8
c000b514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b518:	50                   	push   eax
c000b519:	e8 c2 06 00 00       	call   c000bbe0 <Device::Device(char const*)>
c000b51e:	83 c4 10             	add    esp,0x10
c000b521:	ba 74 f5 01 c0       	mov    edx,0xc001f574
c000b526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b52a:	89 10                	mov    DWORD PTR [eax],edx
c000b52c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b530:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b53a:	90                   	nop
c000b53b:	83 c4 0c             	add    esp,0xc
c000b53e:	c3                   	ret    
c000b53f:	90                   	nop

c000b540 <Clock::~Clock()>:
c000b540:	83 ec 0c             	sub    esp,0xc
c000b543:	ba 74 f5 01 c0       	mov    edx,0xc001f574
c000b548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b54c:	89 10                	mov    DWORD PTR [eax],edx
c000b54e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b552:	83 ec 0c             	sub    esp,0xc
c000b555:	50                   	push   eax
c000b556:	e8 ef 03 00 00       	call   c000b94a <Device::~Device()>
c000b55b:	83 c4 10             	add    esp,0x10
c000b55e:	90                   	nop
c000b55f:	83 c4 0c             	add    esp,0xc
c000b562:	c3                   	ret    
c000b563:	90                   	nop

c000b564 <Clock::~Clock()>:
c000b564:	83 ec 0c             	sub    esp,0xc
c000b567:	83 ec 0c             	sub    esp,0xc
c000b56a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b56e:	e8 cd ff ff ff       	call   c000b540 <Clock::~Clock()>
c000b573:	83 c4 10             	add    esp,0x10
c000b576:	83 ec 08             	sub    esp,0x8
c000b579:	68 58 01 00 00       	push   0x158
c000b57e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b582:	e8 8d ef ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c000b587:	83 c4 10             	add    esp,0x10
c000b58a:	83 c4 0c             	add    esp,0xc
c000b58d:	c3                   	ret    

c000b58e <Clock::timeInSecondsLocal()>:
c000b58e:	53                   	push   ebx
c000b58f:	83 ec 14             	sub    esp,0x14
c000b592:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b596:	8b 10                	mov    edx,DWORD PTR [eax]
c000b598:	50                   	push   eax
c000b599:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b59c:	0f b6 0d b8 3f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023fb8
c000b5a3:	03 0d bc 3f 02 c0    	add    ecx,DWORD PTR ds:0xc0023fbc
c000b5a9:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b5af:	89 cb                	mov    ebx,ecx
c000b5b1:	c1 fb 1f             	sar    ebx,0x1f
c000b5b4:	01 c8                	add    eax,ecx
c000b5b6:	11 da                	adc    edx,ebx
c000b5b8:	83 c4 10             	add    esp,0x10
c000b5bb:	31 c9                	xor    ecx,ecx
c000b5bd:	80 3d b9 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fb9,0x0
c000b5c4:	74 05                	je     c000b5cb <Clock::timeInSecondsLocal()+0x3d>
c000b5c6:	b9 08 07 00 00       	mov    ecx,0x708
c000b5cb:	31 db                	xor    ebx,ebx
c000b5cd:	01 c8                	add    eax,ecx
c000b5cf:	11 da                	adc    edx,ebx
c000b5d1:	83 c4 08             	add    esp,0x8
c000b5d4:	5b                   	pop    ebx
c000b5d5:	c3                   	ret    

c000b5d6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b5d6:	57                   	push   edi
c000b5d7:	56                   	push   esi
c000b5d8:	53                   	push   ebx
c000b5d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b5dd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b5e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b5e3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b5e7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b5ea:	0f b6 05 b8 3f 02 c0 	movzx  eax,BYTE PTR ds:0xc0023fb8
c000b5f1:	03 05 bc 3f 02 c0    	add    eax,DWORD PTR ds:0xc0023fbc
c000b5f7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b5fd:	99                   	cdq    
c000b5fe:	29 c6                	sub    esi,eax
c000b600:	19 d7                	sbb    edi,edx
c000b602:	89 f0                	mov    eax,esi
c000b604:	89 fa                	mov    edx,edi
c000b606:	31 f6                	xor    esi,esi
c000b608:	80 3d b9 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fb9,0x0
c000b60f:	74 05                	je     c000b616 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b611:	be 08 07 00 00       	mov    esi,0x708
c000b616:	31 ff                	xor    edi,edi
c000b618:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b61c:	29 f0                	sub    eax,esi
c000b61e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b622:	19 fa                	sbb    edx,edi
c000b624:	89 d8                	mov    eax,ebx
c000b626:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b62a:	5b                   	pop    ebx
c000b62b:	5e                   	pop    esi
c000b62c:	5f                   	pop    edi
c000b62d:	ff e0                	jmp    eax

c000b62f <datetimeToSeconds(datetime_t)>:
c000b62f:	55                   	push   ebp
c000b630:	57                   	push   edi
c000b631:	56                   	push   esi
c000b632:	53                   	push   ebx
c000b633:	83 ec 14             	sub    esp,0x14
c000b636:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b63a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b63e:	89 d3                	mov    ebx,edx
c000b640:	0f b6 c6             	movzx  eax,dh
c000b643:	c1 eb 10             	shr    ebx,0x10
c000b646:	48                   	dec    eax
c000b647:	66 81 eb 6c 07       	sub    bx,0x76c
c000b64c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b650:	0f b6 f5             	movzx  esi,ch
c000b653:	89 cf                	mov    edi,ecx
c000b655:	6b f6 3c             	imul   esi,esi,0x3c
c000b658:	c1 ef 10             	shr    edi,0x10
c000b65b:	0f b6 c9             	movzx  ecx,cl
c000b65e:	89 f8                	mov    eax,edi
c000b660:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b666:	0f b6 f8             	movzx  edi,al
c000b669:	0f b6 d2             	movzx  edx,dl
c000b66c:	01 fe                	add    esi,edi
c000b66e:	01 f1                	add    ecx,esi
c000b670:	0f b7 f3             	movzx  esi,bx
c000b673:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b677:	c1 f9 1f             	sar    ecx,0x1f
c000b67a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b67f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b683:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b688:	8b 0c 8d c0 f5 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe0a40]
c000b68f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b693:	76 29                	jbe    c000b6be <datetimeToSeconds(datetime_t)+0x8f>
c000b695:	f6 c3 03             	test   bl,0x3
c000b698:	75 24                	jne    c000b6be <datetimeToSeconds(datetime_t)+0x8f>
c000b69a:	31 d2                	xor    edx,edx
c000b69c:	bf 64 00 00 00       	mov    edi,0x64
c000b6a1:	89 d8                	mov    eax,ebx
c000b6a3:	66 f7 f7             	div    di
c000b6a6:	66 85 d2             	test   dx,dx
c000b6a9:	75 12                	jne    c000b6bd <datetimeToSeconds(datetime_t)+0x8e>
c000b6ab:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b6b1:	bf 90 01 00 00       	mov    edi,0x190
c000b6b6:	99                   	cdq    
c000b6b7:	f7 ff                	idiv   edi
c000b6b9:	85 d2                	test   edx,edx
c000b6bb:	75 01                	jne    c000b6be <datetimeToSeconds(datetime_t)+0x8f>
c000b6bd:	41                   	inc    ecx
c000b6be:	66 83 fb 46          	cmp    bx,0x46
c000b6c2:	76 45                	jbe    c000b709 <datetimeToSeconds(datetime_t)+0xda>
c000b6c4:	bb 46 00 00 00       	mov    ebx,0x46
c000b6c9:	bf 64 00 00 00       	mov    edi,0x64
c000b6ce:	bd 90 01 00 00       	mov    ebp,0x190
c000b6d3:	b8 6d 01 00 00       	mov    eax,0x16d
c000b6d8:	f6 c3 03             	test   bl,0x3
c000b6db:	75 23                	jne    c000b700 <datetimeToSeconds(datetime_t)+0xd1>
c000b6dd:	89 d8                	mov    eax,ebx
c000b6df:	99                   	cdq    
c000b6e0:	f7 ff                	idiv   edi
c000b6e2:	b8 6e 01 00 00       	mov    eax,0x16e
c000b6e7:	85 d2                	test   edx,edx
c000b6e9:	75 15                	jne    c000b700 <datetimeToSeconds(datetime_t)+0xd1>
c000b6eb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b6f1:	99                   	cdq    
c000b6f2:	f7 fd                	idiv   ebp
c000b6f4:	31 c0                	xor    eax,eax
c000b6f6:	85 d2                	test   edx,edx
c000b6f8:	0f 94 c0             	sete   al
c000b6fb:	05 6d 01 00 00       	add    eax,0x16d
c000b700:	01 c1                	add    ecx,eax
c000b702:	43                   	inc    ebx
c000b703:	39 f3                	cmp    ebx,esi
c000b705:	7c cc                	jl     c000b6d3 <datetimeToSeconds(datetime_t)+0xa4>
c000b707:	eb 3b                	jmp    c000b744 <datetimeToSeconds(datetime_t)+0x115>
c000b709:	74 39                	je     c000b744 <datetimeToSeconds(datetime_t)+0x115>
c000b70b:	b8 45 00 00 00       	mov    eax,0x45
c000b710:	89 c2                	mov    edx,eax
c000b712:	83 e2 03             	and    edx,0x3
c000b715:	39 f0                	cmp    eax,esi
c000b717:	7e 13                	jle    c000b72c <datetimeToSeconds(datetime_t)+0xfd>
c000b719:	85 d2                	test   edx,edx
c000b71b:	0f 94 c2             	sete   dl
c000b71e:	48                   	dec    eax
c000b71f:	0f b6 d2             	movzx  edx,dl
c000b722:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b728:	29 d1                	sub    ecx,edx
c000b72a:	eb e4                	jmp    c000b710 <datetimeToSeconds(datetime_t)+0xe1>
c000b72c:	b8 6d 01 00 00       	mov    eax,0x16d
c000b731:	85 d2                	test   edx,edx
c000b733:	75 0d                	jne    c000b742 <datetimeToSeconds(datetime_t)+0x113>
c000b735:	31 c0                	xor    eax,eax
c000b737:	66 85 db             	test   bx,bx
c000b73a:	0f 95 c0             	setne  al
c000b73d:	05 6d 01 00 00       	add    eax,0x16d
c000b742:	29 c1                	sub    ecx,eax
c000b744:	b8 80 51 01 00       	mov    eax,0x15180
c000b749:	f7 e9                	imul   ecx
c000b74b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b74f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b753:	83 c4 14             	add    esp,0x14
c000b756:	5b                   	pop    ebx
c000b757:	5e                   	pop    esi
c000b758:	5f                   	pop    edi
c000b759:	5d                   	pop    ebp
c000b75a:	c3                   	ret    
c000b75b:	90                   	nop

c000b75c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b75c:	57                   	push   edi
c000b75d:	56                   	push   esi
c000b75e:	53                   	push   ebx
c000b75f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b763:	8b 06                	mov    eax,DWORD PTR [esi]
c000b765:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b768:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b76c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b770:	e8 ba fe ff ff       	call   c000b62f <datetimeToSeconds(datetime_t)>
c000b775:	59                   	pop    ecx
c000b776:	0f b6 0d b8 3f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023fb8
c000b77d:	5b                   	pop    ebx
c000b77e:	03 0d bc 3f 02 c0    	add    ecx,DWORD PTR ds:0xc0023fbc
c000b784:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b78a:	89 cb                	mov    ebx,ecx
c000b78c:	c1 fb 1f             	sar    ebx,0x1f
c000b78f:	29 c8                	sub    eax,ecx
c000b791:	19 da                	sbb    edx,ebx
c000b793:	31 c9                	xor    ecx,ecx
c000b795:	80 3d b9 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fb9,0x0
c000b79c:	74 05                	je     c000b7a3 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b79e:	b9 08 07 00 00       	mov    ecx,0x708
c000b7a3:	31 db                	xor    ebx,ebx
c000b7a5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b7a9:	29 c8                	sub    eax,ecx
c000b7ab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b7af:	19 da                	sbb    edx,ebx
c000b7b1:	89 f8                	mov    eax,edi
c000b7b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b7b7:	5b                   	pop    ebx
c000b7b8:	5e                   	pop    esi
c000b7b9:	5f                   	pop    edi
c000b7ba:	ff e0                	jmp    eax

c000b7bc <secondsToDatetime(unsigned long long)>:
c000b7bc:	55                   	push   ebp
c000b7bd:	57                   	push   edi
c000b7be:	56                   	push   esi
c000b7bf:	53                   	push   ebx
c000b7c0:	83 ec 1c             	sub    esp,0x1c
c000b7c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b7c7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7cb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b7cf:	6a 00                	push   0x0
c000b7d1:	68 80 51 01 00       	push   0x15180
c000b7d6:	55                   	push   ebp
c000b7d7:	57                   	push   edi
c000b7d8:	e8 73 20 01 00       	call   c001d850 <__udivdi3>
c000b7dd:	83 c4 10             	add    esp,0x10
c000b7e0:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b7e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ea:	6a 00                	push   0x0
c000b7ec:	68 80 51 01 00       	push   0x15180
c000b7f1:	55                   	push   ebp
c000b7f2:	57                   	push   edi
c000b7f3:	bf 10 0e 00 00       	mov    edi,0xe10
c000b7f8:	e8 53 21 01 00       	call   c001d950 <__umoddi3>
c000b7fd:	83 c4 10             	add    esp,0x10
c000b800:	99                   	cdq    
c000b801:	f7 ff                	idiv   edi
c000b803:	bf 3c 00 00 00       	mov    edi,0x3c
c000b808:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b80b:	89 d0                	mov    eax,edx
c000b80d:	99                   	cdq    
c000b80e:	f7 ff                	idiv   edi
c000b810:	85 db                	test   ebx,ebx
c000b812:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b815:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b818:	79 11                	jns    c000b82b <secondsToDatetime(unsigned long long)+0x6f>
c000b81a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b81e:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b824:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b829:	eb 07                	jmp    c000b832 <secondsToDatetime(unsigned long long)+0x76>
c000b82b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b830:	89 d8                	mov    eax,ebx
c000b832:	bf b4 05 00 00       	mov    edi,0x5b4
c000b837:	99                   	cdq    
c000b838:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b83d:	f7 f9                	idiv   ecx
c000b83f:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b844:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b848:	31 d2                	xor    edx,edx
c000b84a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b852:	01 c3                	add    ebx,eax
c000b854:	89 d8                	mov    eax,ebx
c000b856:	f7 f1                	div    ecx
c000b858:	31 d2                	xor    edx,edx
c000b85a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b85d:	89 d8                	mov    eax,ebx
c000b85f:	f7 f7                	div    edi
c000b861:	31 d2                	xor    edx,edx
c000b863:	29 c1                	sub    ecx,eax
c000b865:	89 d8                	mov    eax,ebx
c000b867:	f7 f5                	div    ebp
c000b869:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b86e:	29 c1                	sub    ecx,eax
c000b870:	31 d2                	xor    edx,edx
c000b872:	89 c8                	mov    eax,ecx
c000b874:	f7 f5                	div    ebp
c000b876:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b87b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b87f:	31 d2                	xor    edx,edx
c000b881:	89 c8                	mov    eax,ecx
c000b883:	f7 f5                	div    ebp
c000b885:	31 d2                	xor    edx,edx
c000b887:	01 c3                	add    ebx,eax
c000b889:	89 c8                	mov    eax,ecx
c000b88b:	f7 f7                	div    edi
c000b88d:	bf 99 00 00 00       	mov    edi,0x99
c000b892:	29 c3                	sub    ebx,eax
c000b894:	31 d2                	xor    edx,edx
c000b896:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b89e:	29 c3                	sub    ebx,eax
c000b8a0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b8a3:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b8a6:	bb 05 00 00 00       	mov    ebx,0x5
c000b8ab:	83 c1 02             	add    ecx,0x2
c000b8ae:	89 c8                	mov    eax,ecx
c000b8b0:	f7 f7                	div    edi
c000b8b2:	31 d2                	xor    edx,edx
c000b8b4:	89 c7                	mov    edi,eax
c000b8b6:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b8bc:	83 c0 02             	add    eax,0x2
c000b8bf:	f7 f3                	div    ebx
c000b8c1:	89 eb                	mov    ebx,ebp
c000b8c3:	29 c3                	sub    ebx,eax
c000b8c5:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b8cb:	88 1e                	mov    BYTE PTR [esi],bl
c000b8cd:	19 c0                	sbb    eax,eax
c000b8cf:	31 d2                	xor    edx,edx
c000b8d1:	83 e0 0c             	and    eax,0xc
c000b8d4:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b8d8:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b8e0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b8e4:	83 f9 01             	cmp    ecx,0x1
c000b8e7:	0f 96 c2             	setbe  dl
c000b8ea:	41                   	inc    ecx
c000b8eb:	01 d0                	add    eax,edx
c000b8ed:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b8f0:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b8f4:	83 c4 1c             	add    esp,0x1c
c000b8f7:	89 f0                	mov    eax,esi
c000b8f9:	5b                   	pop    ebx
c000b8fa:	5e                   	pop    esi
c000b8fb:	5f                   	pop    edi
c000b8fc:	5d                   	pop    ebp
c000b8fd:	c2 04 00             	ret    0x4

c000b900 <Clock::timeInDatetimeLocal()>:
c000b900:	53                   	push   ebx
c000b901:	83 ec 14             	sub    esp,0x14
c000b904:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b908:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b90c:	e8 7d fc ff ff       	call   c000b58e <Clock::timeInSecondsLocal()>
c000b911:	83 c4 0c             	add    esp,0xc
c000b914:	52                   	push   edx
c000b915:	50                   	push   eax
c000b916:	53                   	push   ebx
c000b917:	e8 a0 fe ff ff       	call   c000b7bc <secondsToDatetime(unsigned long long)>
c000b91c:	89 d8                	mov    eax,ebx
c000b91e:	83 c4 14             	add    esp,0x14
c000b921:	5b                   	pop    ebx
c000b922:	c2 04 00             	ret    0x4
c000b925:	90                   	nop

c000b926 <Device::hibernate()>:
c000b926:	c3                   	ret    
c000b927:	90                   	nop

c000b928 <Device::wake()>:
c000b928:	c3                   	ret    
c000b929:	90                   	nop

c000b92a <Device::detect()>:
c000b92a:	c3                   	ret    
c000b92b:	90                   	nop

c000b92c <Device::disableLegacy()>:
c000b92c:	c3                   	ret    
c000b92d:	90                   	nop

c000b92e <Device::powerSaving(PowerSavingLevel)>:
c000b92e:	c3                   	ret    
c000b92f:	90                   	nop

c000b930 <DriverlessDevice::close(int, int, void*)>:
c000b930:	31 c0                	xor    eax,eax
c000b932:	c3                   	ret    
c000b933:	90                   	nop

c000b934 <DriverlessDevice::detect()>:
c000b934:	c3                   	ret    
c000b935:	90                   	nop

c000b936 <DriverlessDevice::open(int, int, void*)>:
c000b936:	83 ec 18             	sub    esp,0x18
c000b939:	68 f0 f5 01 c0       	push   0xc001f5f0
c000b93e:	e8 58 4a 00 00       	call   c001039b <KePanic(char const*)>
c000b943:	83 c8 ff             	or     eax,0xffffffff
c000b946:	83 c4 1c             	add    esp,0x1c
c000b949:	c3                   	ret    

c000b94a <Device::~Device()>:
c000b94a:	ba 50 f6 01 c0       	mov    edx,0xc001f650
c000b94f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b953:	89 10                	mov    DWORD PTR [eax],edx
c000b955:	90                   	nop
c000b956:	c3                   	ret    
c000b957:	90                   	nop

c000b958 <Device::~Device()>:
c000b958:	83 ec 0c             	sub    esp,0xc
c000b95b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b95f:	e8 e6 ff ff ff       	call   c000b94a <Device::~Device()>
c000b964:	83 c4 04             	add    esp,0x4
c000b967:	83 ec 08             	sub    esp,0x8
c000b96a:	68 58 01 00 00       	push   0x158
c000b96f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b973:	e8 9c eb ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c000b978:	83 c4 10             	add    esp,0x10
c000b97b:	83 c4 0c             	add    esp,0xc
c000b97e:	c3                   	ret    
c000b97f:	90                   	nop

c000b980 <Device::findAndLoadDriver()>:
c000b980:	c7 44 24 04 0e f6 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f60e
c000b988:	e9 7d ec ff ff       	jmp    c000a60a <Dbg::kprintf(char const*, ...)>
c000b98d:	90                   	nop

c000b98e <Device::preOpenPCI(PCIDeviceInfo)>:
c000b98e:	57                   	push   edi
c000b98f:	b9 09 00 00 00       	mov    ecx,0x9
c000b994:	56                   	push   esi
c000b995:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b999:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b99d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b9a7:	81 c7 18 01 00 00    	add    edi,0x118
c000b9ad:	fc                   	cld    
c000b9ae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b9b0:	5e                   	pop    esi
c000b9b1:	5f                   	pop    edi
c000b9b2:	c3                   	ret    
c000b9b3:	90                   	nop

c000b9b4 <Device::preOpenACPI(void*, char*, char*)>:
c000b9b4:	57                   	push   edi
c000b9b5:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b9ba:	56                   	push   esi
c000b9bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9c3:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b9cd:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b9d3:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b9d9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b9dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b9df:	b9 0e 00 00 00       	mov    ecx,0xe
c000b9e4:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b9ea:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b9ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b9f0:	5e                   	pop    esi
c000b9f1:	5f                   	pop    edi
c000b9f2:	c3                   	ret    
c000b9f3:	90                   	nop

c000b9f4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b9f4:	53                   	push   ebx
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b9fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ba01:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba05:	0f b6 c0             	movzx  eax,al
c000ba08:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ba0c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba10:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ba14:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ba18:	5b                   	pop    ebx
c000ba19:	e9 a6 05 00 00       	jmp    c000bfc4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000ba1e <Device::getParent()>:
c000ba1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba22:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000ba28:	c3                   	ret    
c000ba29:	90                   	nop

c000ba2a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ba2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba2e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba32:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000ba37:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ba3b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ba3f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ba43:	e9 e8 06 00 00       	jmp    c000c130 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000ba48 <Device::addChild(Device*)>:
c000ba48:	53                   	push   ebx
c000ba49:	83 ec 08             	sub    esp,0x8
c000ba4c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ba54:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ba5a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ba60:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ba62:	85 d2                	test   edx,edx
c000ba64:	74 04                	je     c000ba6a <Device::addChild(Device*)+0x22>
c000ba66:	89 d3                	mov    ebx,edx
c000ba68:	eb f6                	jmp    c000ba60 <Device::addChild(Device*)+0x18>
c000ba6a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ba6d:	83 ec 0c             	sub    esp,0xc
c000ba70:	6a 08                	push   0x8
c000ba72:	e8 fe bd ff ff       	call   c0007875 <malloc>
c000ba77:	89 03                	mov    DWORD PTR [ebx],eax
c000ba79:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ba7f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ba86:	83 c4 18             	add    esp,0x18
c000ba89:	5b                   	pop    ebx
c000ba8a:	c3                   	ret    
c000ba8b:	90                   	nop

c000ba8c <Device::removeAllChildren()>:
c000ba8c:	56                   	push   esi
c000ba8d:	53                   	push   ebx
c000ba8e:	52                   	push   edx
c000ba8f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ba93:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ba99:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba9c:	74 17                	je     c000bab5 <Device::removeAllChildren()+0x29>
c000ba9e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000baa1:	85 c0                	test   eax,eax
c000baa3:	74 0c                	je     c000bab1 <Device::removeAllChildren()+0x25>
c000baa5:	83 ec 0c             	sub    esp,0xc
c000baa8:	8b 10                	mov    edx,DWORD PTR [eax]
c000baaa:	50                   	push   eax
c000baab:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000baae:	83 c4 10             	add    esp,0x10
c000bab1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bab3:	eb e4                	jmp    c000ba99 <Device::removeAllChildren()+0xd>
c000bab5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000babb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bac1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bac7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bace:	58                   	pop    eax
c000bacf:	5b                   	pop    ebx
c000bad0:	5e                   	pop    esi
c000bad1:	c3                   	ret    

c000bad2 <Device::hibernateAll()>:
c000bad2:	53                   	push   ebx
c000bad3:	83 ec 14             	sub    esp,0x14
c000bad6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bada:	8b 03                	mov    eax,DWORD PTR [ebx]
c000badc:	53                   	push   ebx
c000badd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bae0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bae6:	83 c4 10             	add    esp,0x10
c000bae9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000baec:	74 0f                	je     c000bafd <Device::hibernateAll()+0x2b>
c000baee:	83 ec 0c             	sub    esp,0xc
c000baf1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000baf4:	e8 d9 ff ff ff       	call   c000bad2 <Device::hibernateAll()>
c000baf9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bafb:	eb e9                	jmp    c000bae6 <Device::hibernateAll()+0x14>
c000bafd:	83 c4 08             	add    esp,0x8
c000bb00:	5b                   	pop    ebx
c000bb01:	c3                   	ret    

c000bb02 <Device::wakeAll()>:
c000bb02:	53                   	push   ebx
c000bb03:	83 ec 14             	sub    esp,0x14
c000bb06:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb0c:	53                   	push   ebx
c000bb0d:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000bb10:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb16:	83 c4 10             	add    esp,0x10
c000bb19:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb1c:	74 0f                	je     c000bb2d <Device::wakeAll()+0x2b>
c000bb1e:	83 ec 0c             	sub    esp,0xc
c000bb21:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb24:	e8 d9 ff ff ff       	call   c000bb02 <Device::wakeAll()>
c000bb29:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb2b:	eb e9                	jmp    c000bb16 <Device::wakeAll()+0x14>
c000bb2d:	83 c4 08             	add    esp,0x8
c000bb30:	5b                   	pop    ebx
c000bb31:	c3                   	ret    

c000bb32 <Device::detectAll()>:
c000bb32:	53                   	push   ebx
c000bb33:	83 ec 14             	sub    esp,0x14
c000bb36:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb3c:	53                   	push   ebx
c000bb3d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bb40:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb46:	83 c4 10             	add    esp,0x10
c000bb49:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb4c:	74 0f                	je     c000bb5d <Device::detectAll()+0x2b>
c000bb4e:	83 ec 0c             	sub    esp,0xc
c000bb51:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb54:	e8 d9 ff ff ff       	call   c000bb32 <Device::detectAll()>
c000bb59:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb5b:	eb e9                	jmp    c000bb46 <Device::detectAll()+0x14>
c000bb5d:	83 c4 08             	add    esp,0x8
c000bb60:	5b                   	pop    ebx
c000bb61:	c3                   	ret    

c000bb62 <Device::disableLegacyAll()>:
c000bb62:	c3                   	ret    
c000bb63:	90                   	nop

c000bb64 <Device::loadDriversForAll()>:
c000bb64:	c3                   	ret    
c000bb65:	90                   	nop

c000bb66 <Device::closeAll()>:
c000bb66:	53                   	push   ebx
c000bb67:	83 ec 08             	sub    esp,0x8
c000bb6a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb70:	6a 00                	push   0x0
c000bb72:	6a 00                	push   0x0
c000bb74:	6a 00                	push   0x0
c000bb76:	53                   	push   ebx
c000bb77:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bb7a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb80:	83 c4 10             	add    esp,0x10
c000bb83:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb86:	74 0f                	je     c000bb97 <Device::closeAll()+0x31>
c000bb88:	83 ec 0c             	sub    esp,0xc
c000bb8b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb8e:	e8 d3 ff ff ff       	call   c000bb66 <Device::closeAll()>
c000bb93:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb95:	eb e9                	jmp    c000bb80 <Device::closeAll()+0x1a>
c000bb97:	83 c4 08             	add    esp,0x8
c000bb9a:	5b                   	pop    ebx
c000bb9b:	c3                   	ret    

c000bb9c <Device::powerSavingAll(PowerSavingLevel)>:
c000bb9c:	56                   	push   esi
c000bb9d:	53                   	push   ebx
c000bb9e:	83 ec 0c             	sub    esp,0xc
c000bba1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bba5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bba9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bbab:	56                   	push   esi
c000bbac:	53                   	push   ebx
c000bbad:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bbb0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bbb6:	83 c4 10             	add    esp,0x10
c000bbb9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bbbc:	74 0f                	je     c000bbcd <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bbbe:	52                   	push   edx
c000bbbf:	52                   	push   edx
c000bbc0:	56                   	push   esi
c000bbc1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bbc4:	e8 d3 ff ff ff       	call   c000bb9c <Device::powerSavingAll(PowerSavingLevel)>
c000bbc9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bbcb:	eb e9                	jmp    c000bbb6 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bbcd:	58                   	pop    eax
c000bbce:	5b                   	pop    ebx
c000bbcf:	5e                   	pop    esi
c000bbd0:	c3                   	ret    
c000bbd1:	90                   	nop

c000bbd2 <Device::setName(char const*)>:
c000bbd2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bbda:	e9 21 4a ff ff       	jmp    c0000600 <strcpy>
c000bbdf:	90                   	nop

c000bbe0 <Device::Device(char const*)>:
c000bbe0:	83 ec 1c             	sub    esp,0x1c
c000bbe3:	ba 50 f6 01 c0       	mov    edx,0xc001f650
c000bbe8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbec:	89 10                	mov    DWORD PTR [eax],edx
c000bbee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbf2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bbfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc00:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bc0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc0e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bc18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc1c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bc26:	83 ec 08             	sub    esp,0x8
c000bc29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc31:	e8 9c ff ff ff       	call   c000bbd2 <Device::setName(char const*)>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bc41:	83 ec 0c             	sub    esp,0xc
c000bc44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc48:	e8 28 bc ff ff       	call   c0007875 <malloc>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bc56:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc5d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bc61:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bc67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc6b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bc71:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bc77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc7b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bc81:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc8c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bc93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc97:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bc9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bca2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bcac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcb0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bcba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcbe:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bcc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bccc:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000bcd6:	90                   	nop
c000bcd7:	83 c4 1c             	add    esp,0x1c
c000bcda:	c3                   	ret    
c000bcdb:	90                   	nop

c000bcdc <Device::getName()>:
c000bcdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bce0:	05 d0 00 00 00       	add    eax,0xd0
c000bce5:	c3                   	ret    

c000bce6 <DriverlessDevice::DriverlessDevice(char const*)>:
c000bce6:	83 ec 0c             	sub    esp,0xc
c000bce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bced:	83 ec 08             	sub    esp,0x8
c000bcf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf4:	50                   	push   eax
c000bcf5:	e8 e6 fe ff ff       	call   c000bbe0 <Device::Device(char const*)>
c000bcfa:	83 c4 10             	add    esp,0x10
c000bcfd:	ba 7c f6 01 c0       	mov    edx,0xc001f67c
c000bd02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd06:	89 10                	mov    DWORD PTR [eax],edx
c000bd08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd0c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bd16:	90                   	nop
c000bd17:	83 c4 0c             	add    esp,0xc
c000bd1a:	c3                   	ret    
c000bd1b:	90                   	nop

c000bd1c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bd1c:	57                   	push   edi
c000bd1d:	56                   	push   esi
c000bd1e:	53                   	push   ebx
c000bd1f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bd23:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bd27:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bd2b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bd31:	75 0c                	jne    c000bd3f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bd33:	52                   	push   edx
c000bd34:	52                   	push   edx
c000bd35:	53                   	push   ebx
c000bd36:	56                   	push   esi
c000bd37:	e8 c6 1f 01 00       	call   c001dd02 <LinkedList<Device>::addElement(Device*)>
c000bd3c:	83 c4 10             	add    esp,0x10
c000bd3f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bd45:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bd48:	74 12                	je     c000bd5c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bd4a:	50                   	push   eax
c000bd4b:	57                   	push   edi
c000bd4c:	56                   	push   esi
c000bd4d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bd50:	e8 c7 ff ff ff       	call   c000bd1c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bd55:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bd57:	83 c4 10             	add    esp,0x10
c000bd5a:	eb e9                	jmp    c000bd45 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bd5c:	5b                   	pop    ebx
c000bd5d:	5e                   	pop    esi
c000bd5e:	5f                   	pop    edi
c000bd5f:	c3                   	ret    

c000bd60 <getDevicesOfType(DeviceType)>:
c000bd60:	53                   	push   ebx
c000bd61:	83 ec 14             	sub    esp,0x14
c000bd64:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bd68:	53                   	push   ebx
c000bd69:	e8 70 20 01 00       	call   c001ddde <LinkedList<Device>::LinkedList()>
c000bd6e:	83 c4 0c             	add    esp,0xc
c000bd71:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd75:	53                   	push   ebx
c000bd76:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c000bd7c:	e8 9b ff ff ff       	call   c000bd1c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bd81:	89 d8                	mov    eax,ebx
c000bd83:	83 c4 18             	add    esp,0x18
c000bd86:	5b                   	pop    ebx
c000bd87:	c2 04 00             	ret    0x4
c000bd8a:	66 90                	xchg   ax,ax

c000bd8c <HardDiskController::HardDiskController(char const*)>:
c000bd8c:	83 ec 0c             	sub    esp,0xc
c000bd8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd93:	83 ec 08             	sub    esp,0x8
c000bd96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd9a:	50                   	push   eax
c000bd9b:	e8 40 fe ff ff       	call   c000bbe0 <Device::Device(char const*)>
c000bda0:	83 c4 10             	add    esp,0x10
c000bda3:	ba a8 f6 01 c0       	mov    edx,0xc001f6a8
c000bda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdac:	89 10                	mov    DWORD PTR [eax],edx
c000bdae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdb2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bdbc:	90                   	nop
c000bdbd:	83 c4 0c             	add    esp,0xc
c000bdc0:	c3                   	ret    
c000bdc1:	90                   	nop
c000bdc2:	66 90                	xchg   ax,ax

c000bdc4 <HardDiskController::~HardDiskController()>:
c000bdc4:	83 ec 0c             	sub    esp,0xc
c000bdc7:	ba a8 f6 01 c0       	mov    edx,0xc001f6a8
c000bdcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdd0:	89 10                	mov    DWORD PTR [eax],edx
c000bdd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdd6:	83 ec 0c             	sub    esp,0xc
c000bdd9:	50                   	push   eax
c000bdda:	e8 6b fb ff ff       	call   c000b94a <Device::~Device()>
c000bddf:	83 c4 10             	add    esp,0x10
c000bde2:	90                   	nop
c000bde3:	83 c4 0c             	add    esp,0xc
c000bde6:	c3                   	ret    
c000bde7:	90                   	nop

c000bde8 <HardDiskController::~HardDiskController()>:
c000bde8:	83 ec 0c             	sub    esp,0xc
c000bdeb:	83 ec 0c             	sub    esp,0xc
c000bdee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdf2:	e8 cd ff ff ff       	call   c000bdc4 <HardDiskController::~HardDiskController()>
c000bdf7:	83 c4 10             	add    esp,0x10
c000bdfa:	83 ec 08             	sub    esp,0x8
c000bdfd:	68 58 01 00 00       	push   0x158
c000be02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be06:	e8 09 e7 ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c000be0b:	83 c4 10             	add    esp,0x10
c000be0e:	83 c4 0c             	add    esp,0xc
c000be11:	c3                   	ret    

c000be12 <PhysicalDisk::eject()>:
c000be12:	83 c8 ff             	or     eax,0xffffffff
c000be15:	c3                   	ret    

c000be16 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000be16:	83 ec 0c             	sub    esp,0xc
c000be19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be1d:	83 ec 08             	sub    esp,0x8
c000be20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be24:	50                   	push   eax
c000be25:	e8 b6 fd ff ff       	call   c000bbe0 <Device::Device(char const*)>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	ba d4 f6 01 c0       	mov    edx,0xc001f6d4
c000be32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be36:	89 10                	mov    DWORD PTR [eax],edx
c000be38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be3c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000be43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be47:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000be4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be52:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000be5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be60:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000be64:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000be6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be6e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000be78:	90                   	nop
c000be79:	83 c4 0c             	add    esp,0xc
c000be7c:	c3                   	ret    
c000be7d:	90                   	nop

c000be7e <PhysicalDisk::startCache()>:
c000be7e:	56                   	push   esi
c000be7f:	53                   	push   ebx
c000be80:	83 ec 10             	sub    esp,0x10
c000be83:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be87:	6a 44                	push   0x44
c000be89:	e8 e7 b9 ff ff       	call   c0007875 <malloc>
c000be8e:	89 c6                	mov    esi,eax
c000be90:	58                   	pop    eax
c000be91:	5a                   	pop    edx
c000be92:	53                   	push   ebx
c000be93:	56                   	push   esi
c000be94:	e8 77 16 00 00       	call   c000d510 <VCache::VCache(PhysicalDisk*)>
c000be99:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000be9f:	83 c4 14             	add    esp,0x14
c000bea2:	5b                   	pop    ebx
c000bea3:	5e                   	pop    esi
c000bea4:	c3                   	ret    
c000bea5:	90                   	nop

c000bea6 <PhysicalDisk::~PhysicalDisk()>:
c000bea6:	83 ec 0c             	sub    esp,0xc
c000bea9:	ba d4 f6 01 c0       	mov    edx,0xc001f6d4
c000beae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000beb2:	89 10                	mov    DWORD PTR [eax],edx
c000beb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000beb8:	83 ec 0c             	sub    esp,0xc
c000bebb:	50                   	push   eax
c000bebc:	e8 89 fa ff ff       	call   c000b94a <Device::~Device()>
c000bec1:	83 c4 10             	add    esp,0x10
c000bec4:	90                   	nop
c000bec5:	83 c4 0c             	add    esp,0xc
c000bec8:	c3                   	ret    
c000bec9:	90                   	nop

c000beca <PhysicalDisk::~PhysicalDisk()>:
c000beca:	83 ec 0c             	sub    esp,0xc
c000becd:	83 ec 0c             	sub    esp,0xc
c000bed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bed4:	e8 cd ff ff ff       	call   c000bea6 <PhysicalDisk::~PhysicalDisk()>
c000bed9:	83 c4 10             	add    esp,0x10
c000bedc:	83 ec 08             	sub    esp,0x8
c000bedf:	68 6c 01 00 00       	push   0x16c
c000bee4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bee8:	e8 27 e6 ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c000beed:	83 c4 10             	add    esp,0x10
c000bef0:	83 c4 0c             	add    esp,0xc
c000bef3:	c3                   	ret    

c000bef4 <int_handler>:
c000bef4:	55                   	push   ebp
c000bef5:	57                   	push   edi
c000bef6:	56                   	push   esi
c000bef7:	53                   	push   ebx
c000bef8:	83 ec 0c             	sub    esp,0xc
c000befb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000beff:	80 3d 38 69 02 c0 00 	cmp    BYTE PTR ds:0xc0026938,0x0
c000bf06:	74 0b                	je     c000bf13 <int_handler+0x1f>
c000bf08:	fa                   	cli    
c000bf09:	f4                   	hlt    
c000bf0a:	80 3d 38 69 02 c0 00 	cmp    BYTE PTR ds:0xc0026938,0x0
c000bf11:	75 f5                	jne    c000bf08 <int_handler+0x14>
c000bf13:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000bf16:	8d 46 e0             	lea    eax,[esi-0x20]
c000bf19:	83 f8 17             	cmp    eax,0x17
c000bf1c:	76 3e                	jbe    c000bf5c <int_handler+0x68>
c000bf1e:	c1 e6 04             	shl    esi,0x4
c000bf21:	31 db                	xor    ebx,ebx
c000bf23:	8d ae c0 4f 02 c0    	lea    ebp,[esi-0x3ffdb040]
c000bf29:	81 c6 c0 3f 02 c0    	add    esi,0xc0023fc0
c000bf2f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000bf33:	85 c0                	test   eax,eax
c000bf35:	74 13                	je     c000bf4a <int_handler+0x56>
c000bf37:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000bf3a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000bf3e:	74 2a                	je     c000bf6a <int_handler+0x76>
c000bf40:	83 ec 08             	sub    esp,0x8
c000bf43:	52                   	push   edx
c000bf44:	57                   	push   edi
c000bf45:	ff d0                	call   eax
c000bf47:	83 c4 10             	add    esp,0x10
c000bf4a:	43                   	inc    ebx
c000bf4b:	83 fb 04             	cmp    ebx,0x4
c000bf4e:	75 df                	jne    c000bf2f <int_handler+0x3b>
c000bf50:	83 c4 0c             	add    esp,0xc
c000bf53:	31 c0                	xor    eax,eax
c000bf55:	5b                   	pop    ebx
c000bf56:	31 d2                	xor    edx,edx
c000bf58:	5e                   	pop    esi
c000bf59:	5f                   	pop    edi
c000bf5a:	5d                   	pop    ebp
c000bf5b:	c3                   	ret    
c000bf5c:	83 ec 0c             	sub    esp,0xc
c000bf5f:	50                   	push   eax
c000bf60:	e8 bd a7 00 00       	call   c0016722 <HalEndOfInterrupt(int)>
c000bf65:	83 c4 10             	add    esp,0x10
c000bf68:	eb b4                	jmp    c000bf1e <int_handler+0x2a>
c000bf6a:	83 ec 08             	sub    esp,0x8
c000bf6d:	52                   	push   edx
c000bf6e:	57                   	push   edi
c000bf6f:	ff d0                	call   eax
c000bf71:	83 c4 10             	add    esp,0x10
c000bf74:	83 c4 0c             	add    esp,0xc
c000bf77:	5b                   	pop    ebx
c000bf78:	5e                   	pop    esi
c000bf79:	5f                   	pop    edi
c000bf7a:	5d                   	pop    ebp
c000bf7b:	c3                   	ret    

c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000bf7c:	56                   	push   esi
c000bf7d:	31 c0                	xor    eax,eax
c000bf7f:	53                   	push   ebx
c000bf80:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bf84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf88:	89 ca                	mov    edx,ecx
c000bf8a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bf8e:	c1 e2 04             	shl    edx,0x4
c000bf91:	83 bc 82 c0 4f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdb040],0x0
c000bf99:	74 15                	je     c000bfb0 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000bf9b:	40                   	inc    eax
c000bf9c:	83 f8 04             	cmp    eax,0x4
c000bf9f:	75 f0                	jne    c000bf91 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000bfa1:	c7 44 24 0c 04 f7 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f704
c000bfa9:	5b                   	pop    ebx
c000bfaa:	5e                   	pop    esi
c000bfab:	e9 eb 43 00 00       	jmp    c001039b <KePanic(char const*)>
c000bfb0:	8d 04 88             	lea    eax,[eax+ecx*4]
c000bfb3:	89 1c 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],ebx
c000bfba:	89 34 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],esi
c000bfc1:	5b                   	pop    ebx
c000bfc2:	5e                   	pop    esi
c000bfc3:	c3                   	ret    

c000bfc4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bfc4:	57                   	push   edi
c000bfc5:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000bfcb:	56                   	push   esi
c000bfcc:	53                   	push   ebx
c000bfcd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bfd1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bfd5:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000bfdc:	74 5b                	je     c000c039 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bfde:	89 c7                	mov    edi,eax
c000bfe0:	84 c0                	test   al,al
c000bfe2:	74 24                	je     c000c008 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bfe4:	83 fe 0f             	cmp    esi,0xf
c000bfe7:	0f 8f d9 00 00 00    	jg     c000c0c6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000bfed:	8a 86 60 10 02 c0    	mov    al,BYTE PTR [esi-0x3ffdefa0]
c000bff3:	25 ff 00 00 00       	and    eax,0xff
c000bff8:	66 8b bc 00 60 67 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffd98a0]
c000c000:	89 c6                	mov    esi,eax
c000c002:	66 d1 ef             	shr    di,1
c000c005:	83 e7 01             	and    edi,0x1
c000c008:	83 ec 08             	sub    esp,0x8
c000c00b:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c000c010:	31 db                	xor    ebx,ebx
c000c012:	50                   	push   eax
c000c013:	68 11 f7 01 c0       	push   0xc001f711
c000c018:	e8 ed e5 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c000c01d:	83 c4 10             	add    esp,0x10
c000c020:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c000c025:	85 c0                	test   eax,eax
c000c027:	7f 51                	jg     c000c07a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000c029:	83 ec 0c             	sub    esp,0xc
c000c02c:	68 28 f7 01 c0       	push   0xc001f728
c000c031:	e8 65 43 00 00       	call   c001039b <KePanic(char const*)>
c000c036:	83 c4 10             	add    esp,0x10
c000c039:	8d 4e 20             	lea    ecx,[esi+0x20]
c000c03c:	31 d2                	xor    edx,edx
c000c03e:	89 c8                	mov    eax,ecx
c000c040:	c1 e0 04             	shl    eax,0x4
c000c043:	8b 9c 90 c0 4f 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdb040]
c000c04a:	85 db                	test   ebx,ebx
c000c04c:	0f 84 8b 00 00 00    	je     c000c0dd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000c052:	42                   	inc    edx
c000c053:	83 fa 04             	cmp    edx,0x4
c000c056:	75 eb                	jne    c000c043 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c058:	83 ec 0c             	sub    esp,0xc
c000c05b:	68 7c f7 01 c0       	push   0xc001f77c
c000c060:	e8 36 43 00 00       	call   c001039b <KePanic(char const*)>
c000c065:	83 c4 10             	add    esp,0x10
c000c068:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c06d:	5b                   	pop    ebx
c000c06e:	5e                   	pop    esi
c000c06f:	5f                   	pop    edi
c000c070:	c3                   	ret    
c000c071:	43                   	inc    ebx
c000c072:	39 1d 60 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b60,ebx
c000c078:	7e af                	jle    c000c029 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c07a:	83 ec 08             	sub    esp,0x8
c000c07d:	8b 04 9d 80 7b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8480]
c000c084:	56                   	push   esi
c000c085:	50                   	push   eax
c000c086:	e8 41 0c 01 00       	call   c001cccc <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c08b:	83 c4 10             	add    esp,0x10
c000c08e:	84 c0                	test   al,al
c000c090:	74 df                	je     c000c071 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000c092:	81 e7 ff 00 00 00    	and    edi,0xff
c000c098:	50                   	push   eax
c000c099:	8d 46 20             	lea    eax,[esi+0x20]
c000c09c:	57                   	push   edi
c000c09d:	25 ff 00 00 00       	and    eax,0xff
c000c0a2:	6a 00                	push   0x0
c000c0a4:	50                   	push   eax
c000c0a5:	89 f0                	mov    eax,esi
c000c0a7:	6a 00                	push   0x0
c000c0a9:	25 ff 00 00 00       	and    eax,0xff
c000c0ae:	6a 00                	push   0x0
c000c0b0:	50                   	push   eax
c000c0b1:	8b 04 9d 80 7b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8480]
c000c0b8:	50                   	push   eax
c000c0b9:	e8 88 0d 01 00       	call   c001ce46 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c0be:	83 c4 20             	add    esp,0x20
c000c0c1:	e9 73 ff ff ff       	jmp    c000c039 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c0c6:	83 ec 0c             	sub    esp,0xc
c000c0c9:	31 ff                	xor    edi,edi
c000c0cb:	68 44 f7 01 c0       	push   0xc001f744
c000c0d0:	e8 c6 42 00 00       	call   c001039b <KePanic(char const*)>
c000c0d5:	83 c4 10             	add    esp,0x10
c000c0d8:	e9 2b ff ff ff       	jmp    c000c008 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c0dd:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c0e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c0e4:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c0eb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c0ef:	5b                   	pop    ebx
c000c0f0:	89 14 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],edx
c000c0f7:	89 f0                	mov    eax,esi
c000c0f9:	5e                   	pop    esi
c000c0fa:	5f                   	pop    edi
c000c0fb:	c3                   	ret    

c000c0fc <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c0fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c100:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c104:	c1 e0 04             	shl    eax,0x4
c000c107:	8d 50 10             	lea    edx,[eax+0x10]
c000c10a:	39 88 c0 4f 02 c0    	cmp    DWORD PTR [eax-0x3ffdb040],ecx
c000c110:	74 08                	je     c000c11a <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c112:	83 c0 04             	add    eax,0x4
c000c115:	39 d0                	cmp    eax,edx
c000c117:	75 f1                	jne    c000c10a <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c119:	c3                   	ret    
c000c11a:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c124:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c12e:	eb e2                	jmp    c000c112 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c130 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c130:	53                   	push   ebx
c000c131:	83 ec 08             	sub    esp,0x8
c000c134:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c138:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c13d:	74 0e                	je     c000c14d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c13f:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000c144:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c14b:	75 37                	jne    c000c184 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c14d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c151:	83 c0 20             	add    eax,0x20
c000c154:	c1 e0 04             	shl    eax,0x4
c000c157:	8d 50 10             	lea    edx,[eax+0x10]
c000c15a:	39 98 c0 4f 02 c0    	cmp    DWORD PTR [eax-0x3ffdb040],ebx
c000c160:	74 0c                	je     c000c16e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c162:	83 c0 04             	add    eax,0x4
c000c165:	39 d0                	cmp    eax,edx
c000c167:	75 f1                	jne    c000c15a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c169:	83 c4 08             	add    esp,0x8
c000c16c:	5b                   	pop    ebx
c000c16d:	c3                   	ret    
c000c16e:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c178:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c182:	eb de                	jmp    c000c162 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c184:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c189:	7f 12                	jg     c000c19d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c18b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c18f:	31 c0                	xor    eax,eax
c000c191:	8a 81 60 10 02 c0    	mov    al,BYTE PTR [ecx-0x3ffdefa0]
c000c197:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c19b:	eb b0                	jmp    c000c14d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c19d:	83 ec 0c             	sub    esp,0xc
c000c1a0:	68 35 f7 01 c0       	push   0xc001f735
c000c1a5:	e8 f1 41 00 00       	call   c001039b <KePanic(char const*)>
c000c1aa:	83 c4 10             	add    esp,0x10
c000c1ad:	eb 9e                	jmp    c000c14d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c1af <setupINTS()>:
c000c1af:	31 c0                	xor    eax,eax
c000c1b1:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c1bb:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c1c5:	c7 80 c4 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb03c],0x0
c000c1cf:	c7 80 c4 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc03c],0x0
c000c1d9:	c7 80 c8 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb038],0x0
c000c1e3:	c7 80 c8 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc038],0x0
c000c1ed:	c7 80 cc 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb034],0x0
c000c1f7:	c7 80 cc 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc034],0x0
c000c201:	83 c0 10             	add    eax,0x10
c000c204:	3d 00 10 00 00       	cmp    eax,0x1000
c000c209:	75 a6                	jne    c000c1b1 <setupINTS()+0x2>
c000c20b:	c3                   	ret    

c000c20c <convertLegacyIRQNumber(int)>:
c000c20c:	83 ec 0c             	sub    esp,0xc
c000c20f:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000c215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c219:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c220:	74 0f                	je     c000c231 <convertLegacyIRQNumber(int)+0x25>
c000c222:	83 f8 0f             	cmp    eax,0xf
c000c225:	7f 0e                	jg     c000c235 <convertLegacyIRQNumber(int)+0x29>
c000c227:	31 c9                	xor    ecx,ecx
c000c229:	8a 88 60 10 02 c0    	mov    cl,BYTE PTR [eax-0x3ffdefa0]
c000c22f:	89 c8                	mov    eax,ecx
c000c231:	83 c4 0c             	add    esp,0xc
c000c234:	c3                   	ret    
c000c235:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c239:	83 ec 0c             	sub    esp,0xc
c000c23c:	68 44 f7 01 c0       	push   0xc001f744
c000c241:	e8 55 41 00 00       	call   c001039b <KePanic(char const*)>
c000c246:	83 c4 10             	add    esp,0x10
c000c249:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c24d:	83 c4 0c             	add    esp,0xc
c000c250:	c3                   	ret    
c000c251:	90                   	nop

c000c252 <startGUI(void*)>:
c000c252:	55                   	push   ebp
c000c253:	89 e5                	mov    ebp,esp
c000c255:	53                   	push   ebx
c000c256:	83 ec 04             	sub    esp,0x4
c000c259:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c25e:	48                   	dec    eax
c000c25f:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c264:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c269:	85 c0                	test   eax,eax
c000c26b:	75 01                	jne    c000c26e <startGUI(void*)+0x1c>
c000c26d:	fb                   	sti    
c000c26e:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c274:	83 ec 08             	sub    esp,0x8
c000c277:	6a 01                	push   0x1
c000c279:	68 a1 f7 01 c0       	push   0xc001f7a1
c000c27e:	e8 4b 79 00 00       	call   c0013bce <Thr::loadDLL(char const*, bool)>
c000c283:	83 c4 10             	add    esp,0x10
c000c286:	83 ec 08             	sub    esp,0x8
c000c289:	53                   	push   ebx
c000c28a:	50                   	push   eax
c000c28b:	e8 6f 7b 00 00       	call   c0013dff <Thr::executeDLL(unsigned long, void*)>
c000c290:	83 c4 10             	add    esp,0x10
c000c293:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c299:	83 ec 08             	sub    esp,0x8
c000c29c:	6a 01                	push   0x1
c000c29e:	68 bb f7 01 c0       	push   0xc001f7bb
c000c2a3:	e8 26 79 00 00       	call   c0013bce <Thr::loadDLL(char const*, bool)>
c000c2a8:	83 c4 10             	add    esp,0x10
c000c2ab:	83 ec 08             	sub    esp,0x8
c000c2ae:	53                   	push   ebx
c000c2af:	50                   	push   eax
c000c2b0:	e8 4a 7b 00 00       	call   c0013dff <Thr::executeDLL(unsigned long, void*)>
c000c2b5:	83 c4 10             	add    esp,0x10
c000c2b8:	90                   	nop
c000c2b9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c2bc:	c9                   	leave  
c000c2bd:	c3                   	ret    

c000c2be <startGUIVESA(void*)>:
c000c2be:	55                   	push   ebp
c000c2bf:	89 e5                	mov    ebp,esp
c000c2c1:	53                   	push   ebx
c000c2c2:	83 ec 04             	sub    esp,0x4
c000c2c5:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c2ca:	48                   	dec    eax
c000c2cb:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c2d0:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c2d5:	85 c0                	test   eax,eax
c000c2d7:	75 01                	jne    c000c2da <startGUIVESA(void*)+0x1c>
c000c2d9:	fb                   	sti    
c000c2da:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c2e0:	83 ec 08             	sub    esp,0x8
c000c2e3:	6a 01                	push   0x1
c000c2e5:	68 d9 f7 01 c0       	push   0xc001f7d9
c000c2ea:	e8 df 78 00 00       	call   c0013bce <Thr::loadDLL(char const*, bool)>
c000c2ef:	83 c4 10             	add    esp,0x10
c000c2f2:	83 ec 08             	sub    esp,0x8
c000c2f5:	53                   	push   ebx
c000c2f6:	50                   	push   eax
c000c2f7:	e8 03 7b 00 00       	call   c0013dff <Thr::executeDLL(unsigned long, void*)>
c000c2fc:	83 c4 10             	add    esp,0x10
c000c2ff:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c305:	83 ec 08             	sub    esp,0x8
c000c308:	6a 01                	push   0x1
c000c30a:	68 bb f7 01 c0       	push   0xc001f7bb
c000c30f:	e8 ba 78 00 00       	call   c0013bce <Thr::loadDLL(char const*, bool)>
c000c314:	83 c4 10             	add    esp,0x10
c000c317:	83 ec 08             	sub    esp,0x8
c000c31a:	53                   	push   ebx
c000c31b:	50                   	push   eax
c000c31c:	e8 de 7a 00 00       	call   c0013dff <Thr::executeDLL(unsigned long, void*)>
c000c321:	83 c4 10             	add    esp,0x10
c000c324:	90                   	nop
c000c325:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c328:	c9                   	leave  
c000c329:	c3                   	ret    

c000c32a <sendKeyToTerminal(unsigned char)>:
c000c32a:	55                   	push   ebp
c000c32b:	89 e5                	mov    ebp,esp
c000c32d:	83 ec 28             	sub    esp,0x28
c000c330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c333:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c336:	8b 15 04 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023f04
c000c33c:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c33f:	25 ff 00 00 00       	and    eax,0xff
c000c344:	83 ec 08             	sub    esp,0x8
c000c347:	50                   	push   eax
c000c348:	52                   	push   edx
c000c349:	e8 b2 c7 ff ff       	call   c0008b00 <VgaText::receiveKey(unsigned char)>
c000c34e:	83 c4 10             	add    esp,0x10
c000c351:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c355:	74 0a                	je     c000c361 <sendKeyToTerminal(unsigned char)+0x37>
c000c357:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c35b:	0f 85 8f 00 00 00    	jne    c000c3f0 <sendKeyToTerminal(unsigned char)+0xc6>
c000c361:	fa                   	cli    
c000c362:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c367:	40                   	inc    eax
c000c368:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c36d:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000c372:	40                   	inc    eax
c000c373:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c000c378:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000c37d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c380:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000c38a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c38e:	74 1f                	je     c000c3af <sendKeyToTerminal(unsigned char)+0x85>
c000c390:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c393:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c396:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c399:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c39c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c39f:	83 ec 0c             	sub    esp,0xc
c000c3a2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c3a5:	e8 12 87 00 00       	call   c0014abc <unblockTask(ThreadControlBlock*)>
c000c3aa:	83 c4 10             	add    esp,0x10
c000c3ad:	eb db                	jmp    c000c38a <sendKeyToTerminal(unsigned char)+0x60>
c000c3af:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000c3b4:	48                   	dec    eax
c000c3b5:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c000c3ba:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000c3bf:	85 c0                	test   eax,eax
c000c3c1:	75 18                	jne    c000c3db <sendKeyToTerminal(unsigned char)+0xb1>
c000c3c3:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c000c3c8:	85 c0                	test   eax,eax
c000c3ca:	74 0f                	je     c000c3db <sendKeyToTerminal(unsigned char)+0xb1>
c000c3cc:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c000c3d6:	e8 1d 82 00 00       	call   c00145f8 <schedule()>
c000c3db:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c3e0:	48                   	dec    eax
c000c3e1:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c3e6:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c3eb:	85 c0                	test   eax,eax
c000c3ed:	75 01                	jne    c000c3f0 <sendKeyToTerminal(unsigned char)+0xc6>
c000c3ef:	fb                   	sti    
c000c3f0:	90                   	nop
c000c3f1:	c9                   	leave  
c000c3f2:	c3                   	ret    

c000c3f3 <sendKeyboardToken(KeyboardToken)>:
c000c3f3:	55                   	push   ebp
c000c3f4:	89 e5                	mov    ebp,esp
c000c3f6:	83 ec 18             	sub    esp,0x18
c000c3f9:	e8 ed 3f 00 00       	call   c00103eb <Krnl::userIOReceived()>
c000c3fe:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c401:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c404:	25 ff ff 00 00       	and    eax,0xffff
c000c409:	83 f2 01             	xor    edx,0x1
c000c40c:	88 90 e0 5f 02 c0    	mov    BYTE PTR [eax-0x3ffda020],dl
c000c412:	a1 c8 5f 02 c0       	mov    eax,ds:0xc0025fc8
c000c417:	85 c0                	test   eax,eax
c000c419:	74 24                	je     c000c43f <sendKeyboardToken(KeyboardToken)+0x4c>
c000c41b:	8b 0d c8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fc8
c000c421:	83 ec 04             	sub    esp,0x4
c000c424:	68 e0 5f 02 c0       	push   0xc0025fe0
c000c429:	83 ec 08             	sub    esp,0x8
c000c42c:	89 e2                	mov    edx,esp
c000c42e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c431:	89 02                	mov    DWORD PTR [edx],eax
c000c433:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c436:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c43a:	ff d1                	call   ecx
c000c43c:	83 c4 10             	add    esp,0x10
c000c43f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c443:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c446:	a0 e8 63 02 c0       	mov    al,ds:0xc00263e8
c000c44b:	38 c2                	cmp    dl,al
c000c44d:	74 1e                	je     c000c46d <sendKeyboardToken(KeyboardToken)+0x7a>
c000c44f:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c452:	a2 e8 63 02 c0       	mov    ds:0xc00263e8,al
c000c457:	a0 e8 63 02 c0       	mov    al,ds:0xc00263e8
c000c45c:	25 ff 00 00 00       	and    eax,0xff
c000c461:	83 ec 0c             	sub    esp,0xc
c000c464:	50                   	push   eax
c000c465:	e8 ea bd ff ff       	call   c0008254 <setTerminalScrollLock(bool)>
c000c46a:	83 c4 10             	add    esp,0x10
c000c46d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c470:	84 c0                	test   al,al
c000c472:	0f 84 ae 00 00 00    	je     c000c526 <sendKeyboardToken(KeyboardToken)+0x133>
c000c478:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c47b:	66 3d 18 03          	cmp    ax,0x318
c000c47f:	75 06                	jne    c000c487 <sendKeyboardToken(KeyboardToken)+0x94>
c000c481:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c487:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c48a:	66 3d 19 03          	cmp    ax,0x319
c000c48e:	75 06                	jne    c000c496 <sendKeyboardToken(KeyboardToken)+0xa3>
c000c490:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c496:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c499:	66 3d 1a 03          	cmp    ax,0x31a
c000c49d:	75 06                	jne    c000c4a5 <sendKeyboardToken(KeyboardToken)+0xb2>
c000c49f:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c4a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4a8:	66 3d 1b 03          	cmp    ax,0x31b
c000c4ac:	75 06                	jne    c000c4b4 <sendKeyboardToken(KeyboardToken)+0xc1>
c000c4ae:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c4b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4b7:	66 3d 1c 03          	cmp    ax,0x31c
c000c4bb:	75 06                	jne    c000c4c3 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c4bd:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c4c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4c6:	66 3d 1d 03          	cmp    ax,0x31d
c000c4ca:	75 06                	jne    c000c4d2 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c4cc:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c4d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4d5:	66 3d 1e 03          	cmp    ax,0x31e
c000c4d9:	75 06                	jne    c000c4e1 <sendKeyboardToken(KeyboardToken)+0xee>
c000c4db:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c4e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4e4:	66 3d 1f 03          	cmp    ax,0x31f
c000c4e8:	75 06                	jne    c000c4f0 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c4ea:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c4f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4f3:	66 3d 20 03          	cmp    ax,0x320
c000c4f7:	75 06                	jne    c000c4ff <sendKeyboardToken(KeyboardToken)+0x10c>
c000c4f9:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c4ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c502:	66 3d 21 03          	cmp    ax,0x321
c000c506:	75 06                	jne    c000c50e <sendKeyboardToken(KeyboardToken)+0x11b>
c000c508:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c50e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c511:	66 3d 22 03          	cmp    ax,0x322
c000c515:	0f 85 c9 00 00 00    	jne    c000c5e4 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c51b:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c521:	e9 be 00 00 00       	jmp    c000c5e4 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c526:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c529:	66 3d 18 03          	cmp    ax,0x318
c000c52d:	75 0a                	jne    c000c539 <sendKeyboardToken(KeyboardToken)+0x146>
c000c52f:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c535:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c53c:	66 3d 19 03          	cmp    ax,0x319
c000c540:	75 0a                	jne    c000c54c <sendKeyboardToken(KeyboardToken)+0x159>
c000c542:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c548:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c54c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c54f:	66 3d 1a 03          	cmp    ax,0x31a
c000c553:	75 0a                	jne    c000c55f <sendKeyboardToken(KeyboardToken)+0x16c>
c000c555:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c55b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c55f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c562:	66 3d 1b 03          	cmp    ax,0x31b
c000c566:	75 0a                	jne    c000c572 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c568:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c56e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c572:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c575:	66 3d 1c 03          	cmp    ax,0x31c
c000c579:	75 0a                	jne    c000c585 <sendKeyboardToken(KeyboardToken)+0x192>
c000c57b:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c581:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c585:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c588:	66 3d 1d 03          	cmp    ax,0x31d
c000c58c:	75 0a                	jne    c000c598 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c58e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c594:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c598:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c59b:	66 3d 1e 03          	cmp    ax,0x31e
c000c59f:	75 0a                	jne    c000c5ab <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c5a1:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c5a7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5ae:	66 3d 1f 03          	cmp    ax,0x31f
c000c5b2:	75 0a                	jne    c000c5be <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c5b4:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c5ba:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5c1:	66 3d 20 03          	cmp    ax,0x320
c000c5c5:	75 0a                	jne    c000c5d1 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c5c7:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c5cd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5d4:	66 3d 21 03          	cmp    ax,0x321
c000c5d8:	75 0a                	jne    c000c5e4 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c5da:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c5e0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5e7:	66 3d 00 02          	cmp    ax,0x200
c000c5eb:	75 2c                	jne    c000c619 <sendKeyboardToken(KeyboardToken)+0x226>
c000c5ed:	a0 e0 63 02 c0       	mov    al,ds:0xc00263e0
c000c5f2:	83 f0 01             	xor    eax,0x1
c000c5f5:	84 c0                	test   al,al
c000c5f7:	74 20                	je     c000c619 <sendKeyboardToken(KeyboardToken)+0x226>
c000c5f9:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000c5fe:	6a 01                	push   0x1
c000c600:	6a 00                	push   0x0
c000c602:	68 52 c2 00 c0       	push   0xc000c252
c000c607:	50                   	push   eax
c000c608:	e8 cb 7d 00 00       	call   c00143d8 <Process::createThread(void (*)(void*), void*, int)>
c000c60d:	83 c4 10             	add    esp,0x10
c000c610:	c6 05 e0 63 02 c0 01 	mov    BYTE PTR ds:0xc00263e0,0x1
c000c617:	eb 33                	jmp    c000c64c <sendKeyboardToken(KeyboardToken)+0x259>
c000c619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c61c:	66 3d 01 02          	cmp    ax,0x201
c000c620:	75 2a                	jne    c000c64c <sendKeyboardToken(KeyboardToken)+0x259>
c000c622:	a0 e0 63 02 c0       	mov    al,ds:0xc00263e0
c000c627:	83 f0 01             	xor    eax,0x1
c000c62a:	84 c0                	test   al,al
c000c62c:	74 1e                	je     c000c64c <sendKeyboardToken(KeyboardToken)+0x259>
c000c62e:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000c633:	6a 01                	push   0x1
c000c635:	6a 00                	push   0x0
c000c637:	68 be c2 00 c0       	push   0xc000c2be
c000c63c:	50                   	push   eax
c000c63d:	e8 96 7d 00 00       	call   c00143d8 <Process::createThread(void (*)(void*), void*, int)>
c000c642:	83 c4 10             	add    esp,0x10
c000c645:	c6 05 e0 63 02 c0 01 	mov    BYTE PTR ds:0xc00263e0,0x1
c000c64c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c64f:	66 3d 25 03          	cmp    ax,0x325
c000c653:	75 06                	jne    c000c65b <sendKeyboardToken(KeyboardToken)+0x268>
c000c655:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c65b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c65e:	66 3d 24 03          	cmp    ax,0x324
c000c662:	75 06                	jne    c000c66a <sendKeyboardToken(KeyboardToken)+0x277>
c000c664:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c66a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c66d:	66 3d 23 03          	cmp    ax,0x323
c000c671:	75 06                	jne    c000c679 <sendKeyboardToken(KeyboardToken)+0x286>
c000c673:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c679:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c67c:	66 3d 26 03          	cmp    ax,0x326
c000c680:	75 06                	jne    c000c688 <sendKeyboardToken(KeyboardToken)+0x295>
c000c682:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c688:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c68b:	66 3d 27 03          	cmp    ax,0x327
c000c68f:	75 06                	jne    c000c697 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c691:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c697:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c69a:	66 3d 22 03          	cmp    ax,0x322
c000c69e:	75 06                	jne    c000c6a6 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c6a0:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c6a6:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c6aa:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6ad:	83 f0 01             	xor    eax,0x1
c000c6b0:	84 c0                	test   al,al
c000c6b2:	74 7b                	je     c000c72f <sendKeyboardToken(KeyboardToken)+0x33c>
c000c6b4:	a0 e1 60 02 c0       	mov    al,ds:0xc00260e1
c000c6b9:	84 c0                	test   al,al
c000c6bb:	74 43                	je     c000c700 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c6bd:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c6c1:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c6c5:	74 2d                	je     c000c6f4 <sendKeyboardToken(KeyboardToken)+0x301>
c000c6c7:	8b 15 e4 63 02 c0    	mov    edx,DWORD PTR ds:0xc00263e4
c000c6cd:	89 d0                	mov    eax,edx
c000c6cf:	c1 e0 02             	shl    eax,0x2
c000c6d2:	01 d0                	add    eax,edx
c000c6d4:	01 c0                	add    eax,eax
c000c6d6:	a3 e4 63 02 c0       	mov    ds:0xc00263e4,eax
c000c6db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6de:	25 ff ff 00 00       	and    eax,0xffff
c000c6e3:	8d 50 d0             	lea    edx,[eax-0x30]
c000c6e6:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c6eb:	01 d0                	add    eax,edx
c000c6ed:	a3 e4 63 02 c0       	mov    ds:0xc00263e4,eax
c000c6f2:	eb 71                	jmp    c000c765 <sendKeyboardToken(KeyboardToken)+0x372>
c000c6f4:	c7 05 e4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263e4,0x0
c000c6fe:	eb 65                	jmp    c000c765 <sendKeyboardToken(KeyboardToken)+0x372>
c000c700:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c705:	85 c0                	test   eax,eax
c000c707:	74 1a                	je     c000c723 <sendKeyboardToken(KeyboardToken)+0x330>
c000c709:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c70e:	25 ff 00 00 00       	and    eax,0xff
c000c713:	83 ec 0c             	sub    esp,0xc
c000c716:	50                   	push   eax
c000c717:	e8 0e fc ff ff       	call   c000c32a <sendKeyToTerminal(unsigned char)>
c000c71c:	83 c4 10             	add    esp,0x10
c000c71f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c723:	c7 05 e4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263e4,0x0
c000c72d:	eb 36                	jmp    c000c765 <sendKeyboardToken(KeyboardToken)+0x372>
c000c72f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c732:	66 3d 01 01          	cmp    ax,0x101
c000c736:	75 2d                	jne    c000c765 <sendKeyboardToken(KeyboardToken)+0x372>
c000c738:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c73d:	85 c0                	test   eax,eax
c000c73f:	74 1a                	je     c000c75b <sendKeyboardToken(KeyboardToken)+0x368>
c000c741:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c746:	25 ff 00 00 00       	and    eax,0xff
c000c74b:	83 ec 0c             	sub    esp,0xc
c000c74e:	50                   	push   eax
c000c74f:	e8 d6 fb ff ff       	call   c000c32a <sendKeyToTerminal(unsigned char)>
c000c754:	83 c4 10             	add    esp,0x10
c000c757:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c75b:	c7 05 e4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263e4,0x0
c000c765:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c768:	83 f0 01             	xor    eax,0x1
c000c76b:	84 c0                	test   al,al
c000c76d:	74 4e                	je     c000c7bd <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c76f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c772:	83 f0 01             	xor    eax,0x1
c000c775:	84 c0                	test   al,al
c000c777:	74 44                	je     c000c7bd <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c779:	a0 e0 60 02 c0       	mov    al,ds:0xc00260e0
c000c77e:	83 f0 01             	xor    eax,0x1
c000c781:	84 c0                	test   al,al
c000c783:	74 38                	je     c000c7bd <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c785:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c788:	66 83 f8 1f          	cmp    ax,0x1f
c000c78c:	76 09                	jbe    c000c797 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c78e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c791:	66 83 f8 7e          	cmp    ax,0x7e
c000c795:	76 12                	jbe    c000c7a9 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c797:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c79a:	66 83 f8 0a          	cmp    ax,0xa
c000c79e:	74 09                	je     c000c7a9 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c7a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7a3:	66 83 f8 08          	cmp    ax,0x8
c000c7a7:	75 14                	jne    c000c7bd <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c7a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7ac:	25 ff 00 00 00       	and    eax,0xff
c000c7b1:	83 ec 0c             	sub    esp,0xc
c000c7b4:	50                   	push   eax
c000c7b5:	e8 70 fb ff ff       	call   c000c32a <sendKeyToTerminal(unsigned char)>
c000c7ba:	83 c4 10             	add    esp,0x10
c000c7bd:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c7c0:	83 f0 01             	xor    eax,0x1
c000c7c3:	84 c0                	test   al,al
c000c7c5:	74 51                	je     c000c818 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7c7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c7ca:	83 f0 01             	xor    eax,0x1
c000c7cd:	84 c0                	test   al,al
c000c7cf:	74 47                	je     c000c818 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7d1:	a0 e0 60 02 c0       	mov    al,ds:0xc00260e0
c000c7d6:	84 c0                	test   al,al
c000c7d8:	74 3e                	je     c000c818 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7dd:	66 83 f8 3f          	cmp    ax,0x3f
c000c7e1:	76 35                	jbe    c000c818 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7e6:	66 83 f8 7f          	cmp    ax,0x7f
c000c7ea:	77 2c                	ja     c000c818 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7ef:	88 c2                	mov    dl,al
c000c7f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7f4:	66 83 f8 5f          	cmp    ax,0x5f
c000c7f8:	76 04                	jbe    c000c7fe <sendKeyboardToken(KeyboardToken)+0x40b>
c000c7fa:	b0 20                	mov    al,0x20
c000c7fc:	eb 02                	jmp    c000c800 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c7fe:	b0 00                	mov    al,0x0
c000c800:	29 c2                	sub    edx,eax
c000c802:	88 d0                	mov    al,dl
c000c804:	83 e8 40             	sub    eax,0x40
c000c807:	25 ff 00 00 00       	and    eax,0xff
c000c80c:	83 ec 0c             	sub    esp,0xc
c000c80f:	50                   	push   eax
c000c810:	e8 15 fb ff ff       	call   c000c32a <sendKeyToTerminal(unsigned char)>
c000c815:	83 c4 10             	add    esp,0x10
c000c818:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c81b:	66 3d 00 03          	cmp    ax,0x300
c000c81f:	75 0f                	jne    c000c830 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c821:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c824:	83 f0 01             	xor    eax,0x1
c000c827:	84 c0                	test   al,al
c000c829:	74 05                	je     c000c830 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c82b:	e8 25 ba ff ff       	call   c0008255 <doTerminalCycle()>
c000c830:	90                   	nop
c000c831:	c9                   	leave  
c000c832:	c3                   	ret    

c000c833 <clearInternalKeybuffer(VgaText*)>:
c000c833:	55                   	push   ebp
c000c834:	89 e5                	mov    ebp,esp
c000c836:	83 ec 08             	sub    esp,0x8
c000c839:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c83c:	05 02 01 00 00       	add    eax,0x102
c000c841:	83 ec 0c             	sub    esp,0xc
c000c844:	50                   	push   eax
c000c845:	e8 f6 3c ff ff       	call   c0000540 <strlen>
c000c84a:	83 c4 10             	add    esp,0x10
c000c84d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c850:	81 c2 02 01 00 00    	add    edx,0x102
c000c856:	83 ec 04             	sub    esp,0x4
c000c859:	50                   	push   eax
c000c85a:	6a 00                	push   0x0
c000c85c:	52                   	push   edx
c000c85d:	e8 6e 3c ff ff       	call   c00004d0 <memset>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	90                   	nop
c000c866:	c9                   	leave  
c000c867:	c3                   	ret    

c000c868 <readKeyboard(VgaText*, char*, unsigned long)>:
c000c868:	55                   	push   ebp
c000c869:	89 e5                	mov    ebp,esp
c000c86b:	83 ec 18             	sub    esp,0x18
c000c86e:	a1 c8 5f 02 c0       	mov    eax,ds:0xc0025fc8
c000c873:	85 c0                	test   eax,eax
c000c875:	74 2a                	je     c000c8a1 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c877:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c87d:	8b 0d c8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fc8
c000c883:	83 ec 04             	sub    esp,0x4
c000c886:	68 e0 5f 02 c0       	push   0xc0025fe0
c000c88b:	83 ec 08             	sub    esp,0x8
c000c88e:	89 e2                	mov    edx,esp
c000c890:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c893:	89 02                	mov    DWORD PTR [edx],eax
c000c895:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c898:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c89c:	ff d1                	call   ecx
c000c89e:	83 c4 10             	add    esp,0x10
c000c8a1:	fb                   	sti    
c000c8a2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c8a9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c8ad:	0f 84 cb 00 00 00    	je     c000c97e <readKeyboard(VgaText*, char*, unsigned long)+0x116>
c000c8b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8b6:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000c8bc:	84 c0                	test   al,al
c000c8be:	75 28                	jne    c000c8e8 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c8c0:	fa                   	cli    
c000c8c1:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c8c6:	40                   	inc    eax
c000c8c7:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c8cc:	e8 27 7d 00 00       	call   c00145f8 <schedule()>
c000c8d1:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c8d6:	48                   	dec    eax
c000c8d7:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c8dc:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c8e1:	85 c0                	test   eax,eax
c000c8e3:	75 ce                	jne    c000c8b3 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c8e5:	fb                   	sti    
c000c8e6:	eb cb                	jmp    c000c8b3 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c8e8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c8eb:	8d 50 01             	lea    edx,[eax+0x1]
c000c8ee:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8f1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c8f4:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000c8fa:	88 10                	mov    BYTE PTR [eax],dl
c000c8fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8ff:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000c905:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c908:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c90c:	75 1e                	jne    c000c92c <readKeyboard(VgaText*, char*, unsigned long)+0xc4>
c000c90e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c913:	8b 00                	mov    eax,DWORD PTR [eax]
c000c915:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c918:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c91e:	83 ec 08             	sub    esp,0x8
c000c921:	6a 02                	push   0x2
c000c923:	50                   	push   eax
c000c924:	e8 5e 3e 00 00       	call   c0010787 <KeRaiseSignal(SigHandlerBlock*, int)>
c000c929:	83 c4 10             	add    esp,0x10
c000c92c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c92f:	05 02 01 00 00       	add    eax,0x102
c000c934:	83 ec 0c             	sub    esp,0xc
c000c937:	50                   	push   eax
c000c938:	e8 03 3c ff ff       	call   c0000540 <strlen>
c000c93d:	83 c4 10             	add    esp,0x10
c000c940:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c943:	81 c2 02 01 00 00    	add    edx,0x102
c000c949:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c94c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c94f:	81 c2 02 01 00 00    	add    edx,0x102
c000c955:	83 ec 04             	sub    esp,0x4
c000c958:	50                   	push   eax
c000c959:	51                   	push   ecx
c000c95a:	52                   	push   edx
c000c95b:	e8 80 3a ff ff       	call   c00003e0 <memmove>
c000c960:	83 c4 10             	add    esp,0x10
c000c963:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c966:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c969:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c96d:	74 0a                	je     c000c979 <readKeyboard(VgaText*, char*, unsigned long)+0x111>
c000c96f:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c973:	0f 85 30 ff ff ff    	jne    c000c8a9 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c979:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c97c:	eb 03                	jmp    c000c981 <readKeyboard(VgaText*, char*, unsigned long)+0x119>
c000c97e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c981:	c9                   	leave  
c000c982:	c3                   	ret    
c000c983:	90                   	nop

c000c984 <Keyboard::Keyboard(char const*)>:
c000c984:	83 ec 0c             	sub    esp,0xc
c000c987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c98b:	83 ec 08             	sub    esp,0x8
c000c98e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c992:	50                   	push   eax
c000c993:	e8 48 f2 ff ff       	call   c000bbe0 <Device::Device(char const*)>
c000c998:	83 c4 10             	add    esp,0x10
c000c99b:	ba fc f7 01 c0       	mov    edx,0xc001f7fc
c000c9a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9a4:	89 10                	mov    DWORD PTR [eax],edx
c000c9a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9aa:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c9b4:	c6 05 c4 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025fc4,0x1
c000c9bb:	90                   	nop
c000c9bc:	83 c4 0c             	add    esp,0xc
c000c9bf:	c3                   	ret    

c000c9c0 <Keyboard::~Keyboard()>:
c000c9c0:	83 ec 0c             	sub    esp,0xc
c000c9c3:	ba fc f7 01 c0       	mov    edx,0xc001f7fc
c000c9c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9cc:	89 10                	mov    DWORD PTR [eax],edx
c000c9ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9d2:	83 ec 0c             	sub    esp,0xc
c000c9d5:	50                   	push   eax
c000c9d6:	e8 6f ef ff ff       	call   c000b94a <Device::~Device()>
c000c9db:	83 c4 10             	add    esp,0x10
c000c9de:	90                   	nop
c000c9df:	83 c4 0c             	add    esp,0xc
c000c9e2:	c3                   	ret    
c000c9e3:	90                   	nop

c000c9e4 <Keyboard::~Keyboard()>:
c000c9e4:	83 ec 0c             	sub    esp,0xc
c000c9e7:	83 ec 0c             	sub    esp,0xc
c000c9ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9ee:	e8 cd ff ff ff       	call   c000c9c0 <Keyboard::~Keyboard()>
c000c9f3:	83 c4 10             	add    esp,0x10
c000c9f6:	83 ec 08             	sub    esp,0x8
c000c9f9:	68 5c 01 00 00       	push   0x15c
c000c9fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca02:	e8 0d db ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c000ca07:	83 c4 10             	add    esp,0x10
c000ca0a:	83 c4 0c             	add    esp,0xc
c000ca0d:	c3                   	ret    

c000ca0e <LogicalDisk::close(int, int, void*)>:
c000ca0e:	83 c8 ff             	or     eax,0xffffffff
c000ca11:	c3                   	ret    

c000ca12 <LogicalDisk::~LogicalDisk()>:
c000ca12:	83 ec 0c             	sub    esp,0xc
c000ca15:	ba 74 f8 01 c0       	mov    edx,0xc001f874
c000ca1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca1e:	89 10                	mov    DWORD PTR [eax],edx
c000ca20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca24:	83 ec 0c             	sub    esp,0xc
c000ca27:	50                   	push   eax
c000ca28:	e8 1d ef ff ff       	call   c000b94a <Device::~Device()>
c000ca2d:	83 c4 10             	add    esp,0x10
c000ca30:	90                   	nop
c000ca31:	83 c4 0c             	add    esp,0xc
c000ca34:	c3                   	ret    
c000ca35:	90                   	nop

c000ca36 <LogicalDisk::~LogicalDisk()>:
c000ca36:	83 ec 0c             	sub    esp,0xc
c000ca39:	83 ec 0c             	sub    esp,0xc
c000ca3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca40:	e8 cd ff ff ff       	call   c000ca12 <LogicalDisk::~LogicalDisk()>
c000ca45:	83 c4 10             	add    esp,0x10
c000ca48:	83 ec 08             	sub    esp,0x8
c000ca4b:	68 78 01 00 00       	push   0x178
c000ca50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca54:	e8 bb da ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c000ca59:	83 c4 10             	add    esp,0x10
c000ca5c:	83 c4 0c             	add    esp,0xc
c000ca5f:	c3                   	ret    

c000ca60 <LogicalDisk::open(int, int, void*)>:
c000ca60:	83 ec 18             	sub    esp,0x18
c000ca63:	68 28 f8 01 c0       	push   0xc001f828
c000ca68:	e8 2e 39 00 00       	call   c001039b <KePanic(char const*)>
c000ca6d:	83 c8 ff             	or     eax,0xffffffff
c000ca70:	83 c4 1c             	add    esp,0x1c
c000ca73:	c3                   	ret    

c000ca74 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000ca74:	53                   	push   ebx
c000ca75:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ca79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ca7d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca81:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000ca87:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000ca8d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000ca93:	77 10                	ja     c000caa5 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000ca95:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000ca9b:	89 d3                	mov    ebx,edx
c000ca9d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000caa3:	72 05                	jb     c000caaa <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000caa5:	83 c8 ff             	or     eax,0xffffffff
c000caa8:	89 c2                	mov    edx,eax
c000caaa:	5b                   	pop    ebx
c000caab:	c3                   	ret    

c000caac <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000caac:	56                   	push   esi
c000caad:	83 c8 ff             	or     eax,0xffffffff
c000cab0:	53                   	push   ebx
c000cab1:	89 c2                	mov    edx,eax
c000cab3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cab7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cabb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cabf:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cac5:	77 27                	ja     c000caee <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cac7:	89 d8                	mov    eax,ebx
c000cac9:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cacf:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cad5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cada:	89 c2                	mov    edx,eax
c000cadc:	73 10                	jae    c000caee <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cade:	89 c8                	mov    eax,ecx
c000cae0:	89 da                	mov    edx,ebx
c000cae2:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cae8:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000caee:	5b                   	pop    ebx
c000caef:	5e                   	pop    esi
c000caf0:	c3                   	ret    
c000caf1:	90                   	nop

c000caf2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000caf2:	83 ec 1c             	sub    esp,0x1c
c000caf5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000caf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cafd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb05:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cb09:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb0c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cb10:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cb14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb18:	83 ec 08             	sub    esp,0x8
c000cb1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb1f:	50                   	push   eax
c000cb20:	e8 bb f0 ff ff       	call   c000bbe0 <Device::Device(char const*)>
c000cb25:	83 c4 10             	add    esp,0x10
c000cb28:	ba 74 f8 01 c0       	mov    edx,0xc001f874
c000cb2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb31:	89 10                	mov    DWORD PTR [eax],edx
c000cb33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb37:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb42:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000cb49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb4d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb58:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cb62:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cb66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb6a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb6e:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cb74:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cb7a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cb7e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cb81:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb85:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cb8b:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cb91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb95:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cb99:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000cb9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cba3:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000cbad:	90                   	nop
c000cbae:	83 c4 1c             	add    esp,0x1c
c000cbb1:	c3                   	ret    

c000cbb2 <LogicalDisk::assignDriveLetter()>:
c000cbb2:	55                   	push   ebp
c000cbb3:	57                   	push   edi
c000cbb4:	56                   	push   esi
c000cbb5:	53                   	push   ebx
c000cbb6:	83 ec 14             	sub    esp,0x14
c000cbb9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cbbd:	8b 3d 00 64 02 c0    	mov    edi,DWORD PTR ds:0xc0026400
c000cbc3:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000cbc9:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000cbcd:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000cbd3:	8b 3d 04 64 02 c0    	mov    edi,DWORD PTR ds:0xc0026404
c000cbd9:	3c 01                	cmp    al,0x1
c000cbdb:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000cbdf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000cbe3:	19 c0                	sbb    eax,eax
c000cbe5:	83 e0 02             	and    eax,0x2
c000cbe8:	83 c0 41             	add    eax,0x41
c000cbeb:	0f be e8             	movsx  ebp,al
c000cbee:	3c 43                	cmp    al,0x43
c000cbf0:	75 10                	jne    c000cc02 <LogicalDisk::assignDriveLetter()+0x50>
c000cbf2:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cbf9:	75 5d                	jne    c000cc58 <LogicalDisk::assignDriveLetter()+0xa6>
c000cbfb:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cc00:	75 56                	jne    c000cc58 <LogicalDisk::assignDriveLetter()+0xa6>
c000cc02:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cc05:	ba 01 00 00 00       	mov    edx,0x1
c000cc0a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cc0e:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cc12:	d3 e2                	shl    edx,cl
c000cc14:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cc18:	89 d7                	mov    edi,edx
c000cc1a:	89 d6                	mov    esi,edx
c000cc1c:	c1 ff 1f             	sar    edi,0x1f
c000cc1f:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cc23:	21 f9                	and    ecx,edi
c000cc25:	09 d1                	or     ecx,edx
c000cc27:	75 2f                	jne    c000cc58 <LogicalDisk::assignDriveLetter()+0xa6>
c000cc29:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cc2d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc31:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cc37:	09 f2                	or     edx,esi
c000cc39:	89 15 00 64 02 c0    	mov    DWORD PTR ds:0xc0026400,edx
c000cc3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cc43:	09 fa                	or     edx,edi
c000cc45:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cc49:	89 15 04 64 02 c0    	mov    DWORD PTR ds:0xc0026404,edx
c000cc4f:	89 1c bd 20 64 02 c0 	mov    DWORD PTR [edi*4-0x3ffd9be0],ebx
c000cc56:	eb 08                	jmp    c000cc60 <LogicalDisk::assignDriveLetter()+0xae>
c000cc58:	45                   	inc    ebp
c000cc59:	40                   	inc    eax
c000cc5a:	3c 5b                	cmp    al,0x5b
c000cc5c:	75 90                	jne    c000cbee <LogicalDisk::assignDriveLetter()+0x3c>
c000cc5e:	31 c0                	xor    eax,eax
c000cc60:	83 c4 14             	add    esp,0x14
c000cc63:	5b                   	pop    ebx
c000cc64:	5e                   	pop    esi
c000cc65:	5f                   	pop    edi
c000cc66:	5d                   	pop    ebp
c000cc67:	c3                   	ret    

c000cc68 <LogicalDisk::mount()>:
c000cc68:	56                   	push   esi
c000cc69:	53                   	push   ebx
c000cc6a:	53                   	push   ebx
c000cc6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc6f:	8b 1d b4 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb4
c000cc75:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000cc7f:	85 db                	test   ebx,ebx
c000cc81:	74 27                	je     c000ccaa <LogicalDisk::mount()+0x42>
c000cc83:	51                   	push   ecx
c000cc84:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cc8b:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cc8d:	83 e8 41             	sub    eax,0x41
c000cc90:	50                   	push   eax
c000cc91:	56                   	push   esi
c000cc92:	53                   	push   ebx
c000cc93:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cc96:	83 c4 10             	add    esp,0x10
c000cc99:	84 c0                	test   al,al
c000cc9b:	74 08                	je     c000cca5 <LogicalDisk::mount()+0x3d>
c000cc9d:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000cca3:	eb 07                	jmp    c000ccac <LogicalDisk::mount()+0x44>
c000cca5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cca8:	eb d5                	jmp    c000cc7f <LogicalDisk::mount()+0x17>
c000ccaa:	31 c0                	xor    eax,eax
c000ccac:	5a                   	pop    edx
c000ccad:	5b                   	pop    ebx
c000ccae:	5e                   	pop    esi
c000ccaf:	c3                   	ret    

c000ccb0 <LogicalDisk::unmount()>:
c000ccb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccb4:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000ccbe:	c3                   	ret    
c000ccbf:	90                   	nop

c000ccc0 <LogicalDisk::eject()>:
c000ccc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccc4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ccca:	8b 10                	mov    edx,DWORD PTR [eax]
c000cccc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ccd0:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000ccd3:	90                   	nop

c000ccd4 <LogicalDisk::unassignDriveLetter()>:
c000ccd4:	57                   	push   edi
c000ccd5:	56                   	push   esi
c000ccd6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ccda:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cce1:	84 c9                	test   cl,cl
c000cce3:	75 0f                	jne    c000ccf4 <LogicalDisk::unassignDriveLetter()+0x20>
c000cce5:	c7 44 24 0c 4c f8 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f84c
c000cced:	5e                   	pop    esi
c000ccee:	5f                   	pop    edi
c000ccef:	e9 a7 36 00 00       	jmp    c001039b <KePanic(char const*)>
c000ccf4:	83 e9 41             	sub    ecx,0x41
c000ccf7:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000ccfe:	b8 01 00 00 00       	mov    eax,0x1
c000cd03:	c7 04 8d 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd9be0],0x0
c000cd0e:	d3 e0                	shl    eax,cl
c000cd10:	89 c7                	mov    edi,eax
c000cd12:	f7 d0                	not    eax
c000cd14:	c1 ff 1f             	sar    edi,0x1f
c000cd17:	21 05 00 64 02 c0    	and    DWORD PTR ds:0xc0026400,eax
c000cd1d:	89 fe                	mov    esi,edi
c000cd1f:	f7 d6                	not    esi
c000cd21:	21 35 04 64 02 c0    	and    DWORD PTR ds:0xc0026404,esi
c000cd27:	5e                   	pop    esi
c000cd28:	5f                   	pop    edi
c000cd29:	c3                   	ret    

c000cd2a <LogicalDisk::read(unsigned long long, int, void*)>:
c000cd2a:	57                   	push   edi
c000cd2b:	56                   	push   esi
c000cd2c:	53                   	push   ebx
c000cd2d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cd35:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cd39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cd3d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cd43:	77 41                	ja     c000cd86 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cd45:	99                   	cdq    
c000cd46:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cd4c:	01 c8                	add    eax,ecx
c000cd4e:	11 da                	adc    edx,ebx
c000cd50:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cd56:	19 d7                	sbb    edi,edx
c000cd58:	72 33                	jb     c000cd8d <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cd5a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cd60:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cd66:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cd6a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cd6e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cd74:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cd7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cd7e:	5b                   	pop    ebx
c000cd7f:	5e                   	pop    esi
c000cd80:	5f                   	pop    edi
c000cd81:	e9 c0 0a 00 00       	jmp    c000d846 <VCache::read(unsigned long long, int, void*)>
c000cd86:	b8 05 00 00 00       	mov    eax,0x5
c000cd8b:	eb 05                	jmp    c000cd92 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cd8d:	b8 07 00 00 00       	mov    eax,0x7
c000cd92:	5b                   	pop    ebx
c000cd93:	5e                   	pop    esi
c000cd94:	5f                   	pop    edi
c000cd95:	c3                   	ret    

c000cd96 <LogicalDisk::write(unsigned long long, int, void*)>:
c000cd96:	57                   	push   edi
c000cd97:	56                   	push   esi
c000cd98:	53                   	push   ebx
c000cd99:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd9d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cda1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cda5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cda9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cdaf:	77 41                	ja     c000cdf2 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cdb1:	99                   	cdq    
c000cdb2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cdb8:	01 c8                	add    eax,ecx
c000cdba:	11 da                	adc    edx,ebx
c000cdbc:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cdc2:	19 d7                	sbb    edi,edx
c000cdc4:	72 33                	jb     c000cdf9 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cdc6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cdcc:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cdd2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cdd6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cdda:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cde0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cde6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cdea:	5b                   	pop    ebx
c000cdeb:	5e                   	pop    esi
c000cdec:	5f                   	pop    edi
c000cded:	e9 66 09 00 00       	jmp    c000d758 <VCache::write(unsigned long long, int, void*)>
c000cdf2:	b8 05 00 00 00       	mov    eax,0x5
c000cdf7:	eb 05                	jmp    c000cdfe <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000cdf9:	b8 07 00 00 00       	mov    eax,0x7
c000cdfe:	5b                   	pop    ebx
c000cdff:	5e                   	pop    esi
c000ce00:	5f                   	pop    edi
c000ce01:	c3                   	ret    
c000ce02:	66 90                	xchg   ax,ax

c000ce04 <Mouse::Mouse(char const*)>:
c000ce04:	83 ec 0c             	sub    esp,0xc
c000ce07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce0b:	83 ec 08             	sub    esp,0x8
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	50                   	push   eax
c000ce13:	e8 c8 ed ff ff       	call   c000bbe0 <Device::Device(char const*)>
c000ce18:	83 c4 10             	add    esp,0x10
c000ce1b:	ba a0 f8 01 c0       	mov    edx,0xc001f8a0
c000ce20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce24:	89 10                	mov    DWORD PTR [eax],edx
c000ce26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce2a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ce34:	90                   	nop
c000ce35:	83 c4 0c             	add    esp,0xc
c000ce38:	c3                   	ret    
c000ce39:	90                   	nop
c000ce3a:	66 90                	xchg   ax,ax

c000ce3c <Mouse::~Mouse()>:
c000ce3c:	83 ec 0c             	sub    esp,0xc
c000ce3f:	ba a0 f8 01 c0       	mov    edx,0xc001f8a0
c000ce44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce48:	89 10                	mov    DWORD PTR [eax],edx
c000ce4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce4e:	83 ec 0c             	sub    esp,0xc
c000ce51:	50                   	push   eax
c000ce52:	e8 f3 ea ff ff       	call   c000b94a <Device::~Device()>
c000ce57:	83 c4 10             	add    esp,0x10
c000ce5a:	90                   	nop
c000ce5b:	83 c4 0c             	add    esp,0xc
c000ce5e:	c3                   	ret    
c000ce5f:	90                   	nop

c000ce60 <Mouse::~Mouse()>:
c000ce60:	83 ec 0c             	sub    esp,0xc
c000ce63:	83 ec 0c             	sub    esp,0xc
c000ce66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce6a:	e8 cd ff ff ff       	call   c000ce3c <Mouse::~Mouse()>
c000ce6f:	83 c4 10             	add    esp,0x10
c000ce72:	83 ec 08             	sub    esp,0x8
c000ce75:	68 58 01 00 00       	push   0x158
c000ce7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7e:	e8 91 d6 ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c000ce83:	83 c4 10             	add    esp,0x10
c000ce86:	83 c4 0c             	add    esp,0xc
c000ce89:	c3                   	ret    

c000ce8a <NIC::getMAC()>:
c000ce8a:	31 c0                	xor    eax,eax
c000ce8c:	31 d2                	xor    edx,edx
c000ce8e:	c3                   	ret    
c000ce8f:	90                   	nop

c000ce90 <NIC::write(int, unsigned char*, int*)>:
c000ce90:	b8 01 00 00 00       	mov    eax,0x1
c000ce95:	c3                   	ret    

c000ce96 <NIC::NIC(char const*)>:
c000ce96:	83 ec 0c             	sub    esp,0xc
c000ce99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce9d:	83 ec 08             	sub    esp,0x8
c000cea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea4:	50                   	push   eax
c000cea5:	e8 36 ed ff ff       	call   c000bbe0 <Device::Device(char const*)>
c000ceaa:	83 c4 10             	add    esp,0x10
c000cead:	ba cc f8 01 c0       	mov    edx,0xc001f8cc
c000ceb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ceb6:	89 10                	mov    DWORD PTR [eax],edx
c000ceb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cebc:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000cec6:	90                   	nop
c000cec7:	83 c4 0c             	add    esp,0xc
c000ceca:	c3                   	ret    
c000cecb:	90                   	nop

c000cecc <NIC::~NIC()>:
c000cecc:	83 ec 0c             	sub    esp,0xc
c000cecf:	ba cc f8 01 c0       	mov    edx,0xc001f8cc
c000ced4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ced8:	89 10                	mov    DWORD PTR [eax],edx
c000ceda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cede:	83 ec 0c             	sub    esp,0xc
c000cee1:	50                   	push   eax
c000cee2:	e8 63 ea ff ff       	call   c000b94a <Device::~Device()>
c000cee7:	83 c4 10             	add    esp,0x10
c000ceea:	90                   	nop
c000ceeb:	83 c4 0c             	add    esp,0xc
c000ceee:	c3                   	ret    
c000ceef:	90                   	nop

c000cef0 <NIC::~NIC()>:
c000cef0:	83 ec 0c             	sub    esp,0xc
c000cef3:	83 ec 0c             	sub    esp,0xc
c000cef6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cefa:	e8 cd ff ff ff       	call   c000cecc <NIC::~NIC()>
c000ceff:	83 c4 10             	add    esp,0x10
c000cf02:	83 ec 08             	sub    esp,0x8
c000cf05:	68 58 01 00 00       	push   0x158
c000cf0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf0e:	e8 01 d6 ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c000cf13:	83 c4 10             	add    esp,0x10
c000cf16:	83 c4 0c             	add    esp,0xc
c000cf19:	c3                   	ret    

c000cf1a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cf1a:	55                   	push   ebp
c000cf1b:	57                   	push   edi
c000cf1c:	56                   	push   esi
c000cf1d:	53                   	push   ebx
c000cf1e:	81 ec 28 01 00 00    	sub    esp,0x128
c000cf24:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000cf2b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000cf32:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cf39:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cf40:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf44:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf48:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cf4f:	e8 88 ed ff ff       	call   c000bcdc <Device::getName()>
c000cf54:	5a                   	pop    edx
c000cf55:	59                   	pop    ecx
c000cf56:	50                   	push   eax
c000cf57:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cf5b:	55                   	push   ebp
c000cf5c:	e8 9f 36 ff ff       	call   c0000600 <strcpy>
c000cf61:	5b                   	pop    ebx
c000cf62:	58                   	pop    eax
c000cf63:	68 f8 f8 01 c0       	push   0xc001f8f8
c000cf68:	55                   	push   ebp
c000cf69:	e8 52 38 ff ff       	call   c00007c0 <strcat>
c000cf6e:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000cf75:	e8 fb a8 ff ff       	call   c0007875 <malloc>
c000cf7a:	83 c4 0c             	add    esp,0xc
c000cf7d:	89 c3                	mov    ebx,eax
c000cf7f:	57                   	push   edi
c000cf80:	56                   	push   esi
c000cf81:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf85:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf89:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cf90:	55                   	push   ebp
c000cf91:	50                   	push   eax
c000cf92:	e8 5b fb ff ff       	call   c000caf2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000cf97:	83 c4 14             	add    esp,0x14
c000cf9a:	53                   	push   ebx
c000cf9b:	e8 12 fc ff ff       	call   c000cbb2 <LogicalDisk::assignDriveLetter()>
c000cfa0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cfa3:	e8 c0 fc ff ff       	call   c000cc68 <LogicalDisk::mount()>
c000cfa8:	58                   	pop    eax
c000cfa9:	5a                   	pop    edx
c000cfaa:	53                   	push   ebx
c000cfab:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cfb2:	e8 91 ea ff ff       	call   c000ba48 <Device::addChild(Device*)>
c000cfb7:	81 c4 2c 01 00 00    	add    esp,0x12c
c000cfbd:	5b                   	pop    ebx
c000cfbe:	5e                   	pop    esi
c000cfbf:	5f                   	pop    edi
c000cfc0:	5d                   	pop    ebp
c000cfc1:	c3                   	ret    

c000cfc2 <createPartitionsForDisk(PhysicalDisk*)>:
c000cfc2:	55                   	push   ebp
c000cfc3:	57                   	push   edi
c000cfc4:	56                   	push   esi
c000cfc5:	53                   	push   ebx
c000cfc6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000cfcc:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000cfd3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000cfd9:	3d 00 02 00 00       	cmp    eax,0x200
c000cfde:	74 27                	je     c000d007 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000cfe0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000cfe6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000cfec:	83 ec 10             	sub    esp,0x10
c000cfef:	0f a4 f7 0a          	shld   edi,esi,0xa
c000cff3:	99                   	cdq    
c000cff4:	c1 e6 0a             	shl    esi,0xa
c000cff7:	52                   	push   edx
c000cff8:	89 fd                	mov    ebp,edi
c000cffa:	50                   	push   eax
c000cffb:	55                   	push   ebp
c000cffc:	56                   	push   esi
c000cffd:	e8 4e 08 01 00       	call   c001d850 <__udivdi3>
c000d002:	e9 b1 00 00 00       	jmp    c000d0b8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d007:	83 ec 0c             	sub    esp,0xc
c000d00a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d00c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d010:	56                   	push   esi
c000d011:	6a 01                	push   0x1
c000d013:	6a 00                	push   0x0
c000d015:	6a 00                	push   0x0
c000d017:	53                   	push   ebx
c000d018:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d01b:	83 c4 20             	add    esp,0x20
c000d01e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d026:	75 0a                	jne    c000d032 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d028:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d030:	74 2c                	je     c000d05e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d032:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d038:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d03e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d044:	83 ec 10             	sub    esp,0x10
c000d047:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d04b:	89 f7                	mov    edi,esi
c000d04d:	c1 e0 0a             	shl    eax,0xa
c000d050:	c1 ff 1f             	sar    edi,0x1f
c000d053:	57                   	push   edi
c000d054:	56                   	push   esi
c000d055:	52                   	push   edx
c000d056:	50                   	push   eax
c000d057:	e8 f4 07 01 00       	call   c001d850 <__udivdi3>
c000d05c:	eb 5a                	jmp    c000d0b8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d05e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d065:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000d06c:	83 e1 7f             	and    ecx,0x7f
c000d06f:	83 e0 7f             	and    eax,0x7f
c000d072:	01 c1                	add    ecx,eax
c000d074:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d07b:	83 e0 7f             	and    eax,0x7f
c000d07e:	01 c1                	add    ecx,eax
c000d080:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d087:	83 e0 7f             	and    eax,0x7f
c000d08a:	00 c1                	add    cl,al
c000d08c:	74 41                	je     c000d0cf <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000d08e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d094:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d09a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d0a0:	83 ec 10             	sub    esp,0x10
c000d0a3:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d0a7:	89 f7                	mov    edi,esi
c000d0a9:	c1 e0 0a             	shl    eax,0xa
c000d0ac:	c1 ff 1f             	sar    edi,0x1f
c000d0af:	57                   	push   edi
c000d0b0:	56                   	push   esi
c000d0b1:	52                   	push   edx
c000d0b2:	50                   	push   eax
c000d0b3:	e8 98 07 01 00       	call   c001d850 <__udivdi3>
c000d0b8:	83 c4 14             	add    esp,0x14
c000d0bb:	52                   	push   edx
c000d0bc:	50                   	push   eax
c000d0bd:	6a 00                	push   0x0
c000d0bf:	6a 00                	push   0x0
c000d0c1:	53                   	push   ebx
c000d0c2:	e8 53 fe ff ff       	call   c000cf1a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d0c7:	83 c4 20             	add    esp,0x20
c000d0ca:	e9 79 01 00 00       	jmp    c000d248 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000d0cf:	89 f0                	mov    eax,esi
c000d0d1:	31 f6                	xor    esi,esi
c000d0d3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d0da:	75 02                	jne    c000d0de <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000d0dc:	89 f1                	mov    ecx,esi
c000d0de:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d0e5:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000d0ec:	c1 e2 08             	shl    edx,0x8
c000d0ef:	c1 e7 10             	shl    edi,0x10
c000d0f2:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000d0fa:	09 fa                	or     edx,edi
c000d0fc:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000d104:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000d10b:	83 c0 10             	add    eax,0x10
c000d10e:	09 fa                	or     edx,edi
c000d110:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d117:	c1 e7 18             	shl    edi,0x18
c000d11a:	09 fa                	or     edx,edi
c000d11c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d123:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d127:	c1 e7 10             	shl    edi,0x10
c000d12a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d131:	c1 e2 08             	shl    edx,0x8
c000d134:	09 fa                	or     edx,edi
c000d136:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d13d:	09 fa                	or     edx,edi
c000d13f:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d146:	c1 e7 18             	shl    edi,0x18
c000d149:	09 fa                	or     edx,edi
c000d14b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d14f:	46                   	inc    esi
c000d150:	83 fe 04             	cmp    esi,0x4
c000d153:	0f 85 7a ff ff ff    	jne    c000d0d3 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d159:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d15d:	83 f0 01             	xor    eax,0x1
c000d160:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d164:	75 57                	jne    c000d1bd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d166:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d16a:	83 f0 01             	xor    eax,0x1
c000d16d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d171:	75 4a                	jne    c000d1bd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d173:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d177:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d17f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d187:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d18d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d193:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d199:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d19d:	89 f7                	mov    edi,esi
c000d19f:	c1 e0 0a             	shl    eax,0xa
c000d1a2:	c1 ff 1f             	sar    edi,0x1f
c000d1a5:	57                   	push   edi
c000d1a6:	56                   	push   esi
c000d1a7:	52                   	push   edx
c000d1a8:	50                   	push   eax
c000d1a9:	e8 a2 06 01 00       	call   c001d850 <__udivdi3>
c000d1ae:	83 c4 10             	add    esp,0x10
c000d1b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1b5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d1b9:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d1bd:	84 c9                	test   cl,cl
c000d1bf:	74 53                	je     c000d214 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d1c1:	0f b6 c9             	movzx  ecx,cl
c000d1c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1cc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d1d0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d1d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d1dc:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d1e0:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d1e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d1ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1f4:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d1f8:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d1fc:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d200:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d204:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d208:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d20c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d210:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d214:	31 ed                	xor    ebp,ebp
c000d216:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d21a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d21e:	89 f8                	mov    eax,edi
c000d220:	09 f0                	or     eax,esi
c000d222:	74 1e                	je     c000d242 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d224:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d228:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d22c:	89 d1                	mov    ecx,edx
c000d22e:	09 c1                	or     ecx,eax
c000d230:	74 10                	je     c000d242 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d232:	83 ec 0c             	sub    esp,0xc
c000d235:	57                   	push   edi
c000d236:	56                   	push   esi
c000d237:	52                   	push   edx
c000d238:	50                   	push   eax
c000d239:	53                   	push   ebx
c000d23a:	e8 db fc ff ff       	call   c000cf1a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d23f:	83 c4 20             	add    esp,0x20
c000d242:	45                   	inc    ebp
c000d243:	83 fd 04             	cmp    ebp,0x4
c000d246:	75 ce                	jne    c000d216 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d248:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d24e:	5b                   	pop    ebx
c000d24f:	5e                   	pop    esi
c000d250:	5f                   	pop    edi
c000d251:	5d                   	pop    ebp
c000d252:	c3                   	ret    
c000d253:	90                   	nop

c000d254 <Serial::Serial(char const*)>:
c000d254:	83 ec 0c             	sub    esp,0xc
c000d257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d25b:	83 ec 08             	sub    esp,0x8
c000d25e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d262:	50                   	push   eax
c000d263:	e8 78 e9 ff ff       	call   c000bbe0 <Device::Device(char const*)>
c000d268:	83 c4 10             	add    esp,0x10
c000d26b:	ba 0c f9 01 c0       	mov    edx,0xc001f90c
c000d270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d274:	89 10                	mov    DWORD PTR [eax],edx
c000d276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d27a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d284:	90                   	nop
c000d285:	83 c4 0c             	add    esp,0xc
c000d288:	c3                   	ret    
c000d289:	90                   	nop
c000d28a:	66 90                	xchg   ax,ax

c000d28c <Serial::~Serial()>:
c000d28c:	83 ec 0c             	sub    esp,0xc
c000d28f:	ba 0c f9 01 c0       	mov    edx,0xc001f90c
c000d294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d298:	89 10                	mov    DWORD PTR [eax],edx
c000d29a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d29e:	83 ec 0c             	sub    esp,0xc
c000d2a1:	50                   	push   eax
c000d2a2:	e8 a3 e6 ff ff       	call   c000b94a <Device::~Device()>
c000d2a7:	83 c4 10             	add    esp,0x10
c000d2aa:	90                   	nop
c000d2ab:	83 c4 0c             	add    esp,0xc
c000d2ae:	c3                   	ret    
c000d2af:	90                   	nop

c000d2b0 <Serial::~Serial()>:
c000d2b0:	83 ec 0c             	sub    esp,0xc
c000d2b3:	83 ec 0c             	sub    esp,0xc
c000d2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ba:	e8 cd ff ff ff       	call   c000d28c <Serial::~Serial()>
c000d2bf:	83 c4 10             	add    esp,0x10
c000d2c2:	83 ec 08             	sub    esp,0x8
c000d2c5:	68 58 01 00 00       	push   0x158
c000d2ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ce:	e8 41 d2 ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c000d2d3:	83 c4 10             	add    esp,0x10
c000d2d6:	83 c4 0c             	add    esp,0xc
c000d2d9:	c3                   	ret    
c000d2da:	66 90                	xchg   ax,ax

c000d2dc <Timer::Timer(char const*)>:
c000d2dc:	83 ec 0c             	sub    esp,0xc
c000d2df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2e3:	83 ec 08             	sub    esp,0x8
c000d2e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ea:	50                   	push   eax
c000d2eb:	e8 f0 e8 ff ff       	call   c000bbe0 <Device::Device(char const*)>
c000d2f0:	83 c4 10             	add    esp,0x10
c000d2f3:	ba 50 f9 01 c0       	mov    edx,0xc001f950
c000d2f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2fc:	89 10                	mov    DWORD PTR [eax],edx
c000d2fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d302:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000d30c:	90                   	nop
c000d30d:	83 c4 0c             	add    esp,0xc
c000d310:	c3                   	ret    
c000d311:	90                   	nop
c000d312:	66 90                	xchg   ax,ax

c000d314 <Timer::~Timer()>:
c000d314:	83 ec 0c             	sub    esp,0xc
c000d317:	ba 50 f9 01 c0       	mov    edx,0xc001f950
c000d31c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d320:	89 10                	mov    DWORD PTR [eax],edx
c000d322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d326:	83 ec 0c             	sub    esp,0xc
c000d329:	50                   	push   eax
c000d32a:	e8 1b e6 ff ff       	call   c000b94a <Device::~Device()>
c000d32f:	83 c4 10             	add    esp,0x10
c000d332:	90                   	nop
c000d333:	83 c4 0c             	add    esp,0xc
c000d336:	c3                   	ret    
c000d337:	90                   	nop

c000d338 <Timer::~Timer()>:
c000d338:	83 ec 0c             	sub    esp,0xc
c000d33b:	83 ec 0c             	sub    esp,0xc
c000d33e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d342:	e8 cd ff ff ff       	call   c000d314 <Timer::~Timer()>
c000d347:	83 c4 10             	add    esp,0x10
c000d34a:	83 ec 08             	sub    esp,0x8
c000d34d:	68 5c 01 00 00       	push   0x15c
c000d352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d356:	e8 b9 d1 ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c000d35b:	83 c4 10             	add    esp,0x10
c000d35e:	83 c4 0c             	add    esp,0xc
c000d361:	c3                   	ret    

c000d362 <Timer::read()>:
c000d362:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d366:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d36c:	c3                   	ret    

c000d36d <setupTimer(int)>:
c000d36d:	53                   	push   ebx
c000d36e:	83 ec 14             	sub    esp,0x14
c000d371:	68 5c 01 00 00       	push   0x15c
c000d376:	e8 fa a4 ff ff       	call   c0007875 <malloc>
c000d37b:	89 04 24             	mov    DWORD PTR [esp],eax
c000d37e:	89 c3                	mov    ebx,eax
c000d380:	e8 df fd 00 00       	call   c001d164 <PIT::PIT()>
c000d385:	58                   	pop    eax
c000d386:	5a                   	pop    edx
c000d387:	53                   	push   ebx
c000d388:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c000d38e:	e8 b5 e6 ff ff       	call   c000ba48 <Device::addChild(Device*)>
c000d393:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d395:	6a 00                	push   0x0
c000d397:	6a 00                	push   0x0
c000d399:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d39d:	53                   	push   ebx
c000d39e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d3a1:	89 d8                	mov    eax,ebx
c000d3a3:	83 c4 28             	add    esp,0x28
c000d3a6:	5b                   	pop    ebx
c000d3a7:	c3                   	ret    

c000d3a8 <timerHandler(unsigned int)>:
c000d3a8:	56                   	push   esi
c000d3a9:	53                   	push   ebx
c000d3aa:	51                   	push   ecx
c000d3ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3af:	01 05 8c 64 02 c0    	add    DWORD PTR ds:0xc002648c,eax
c000d3b5:	80 3d bd 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ebd,0x0
c000d3bc:	0f 84 4a 01 00 00    	je     c000d50c <timerHandler(unsigned int)+0x164>
c000d3c2:	fa                   	cli    
c000d3c3:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c000d3c9:	83 ec 0c             	sub    esp,0xc
c000d3cc:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c000d3d2:	68 78 71 02 c0       	push   0xc0027178
c000d3d7:	e8 44 0a 01 00       	call   c001de20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d3dc:	83 c4 10             	add    esp,0x10
c000d3df:	84 c0                	test   al,al
c000d3e1:	0f 85 a1 00 00 00    	jne    c000d488 <timerHandler(unsigned int)+0xe0>
c000d3e7:	83 ec 0c             	sub    esp,0xc
c000d3ea:	68 78 71 02 c0       	push   0xc0027178
c000d3ef:	e8 48 0a 01 00       	call   c001de3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d3f4:	83 c4 10             	add    esp,0x10
c000d3f7:	89 c6                	mov    esi,eax
c000d3f9:	8d 76 00             	lea    esi,[esi+0x0]
c000d3fc:	83 ec 0c             	sub    esp,0xc
c000d3ff:	68 78 71 02 c0       	push   0xc0027178
c000d404:	e8 33 0a 01 00       	call   c001de3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d409:	c7 04 24 78 71 02 c0 	mov    DWORD PTR [esp],0xc0027178
c000d410:	89 c3                	mov    ebx,eax
c000d412:	e8 2d 0a 01 00       	call   c001de44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d417:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d41a:	83 c4 10             	add    esp,0x10
c000d41d:	3b 05 8c 64 02 c0    	cmp    eax,DWORD PTR ds:0xc002648c
c000d423:	77 23                	ja     c000d448 <timerHandler(unsigned int)+0xa0>
c000d425:	83 ec 0c             	sub    esp,0xc
c000d428:	53                   	push   ebx
c000d429:	e8 8e 76 00 00       	call   c0014abc <unblockTask(ThreadControlBlock*)>
c000d42e:	83 c4 10             	add    esp,0x10
c000d431:	39 de                	cmp    esi,ebx
c000d433:	75 27                	jne    c000d45c <timerHandler(unsigned int)+0xb4>
c000d435:	83 ec 0c             	sub    esp,0xc
c000d438:	68 78 71 02 c0       	push   0xc0027178
c000d43d:	e8 fa 09 01 00       	call   c001de3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d442:	89 c6                	mov    esi,eax
c000d444:	eb 12                	jmp    c000d458 <timerHandler(unsigned int)+0xb0>
c000d446:	66 90                	xchg   ax,ax
c000d448:	52                   	push   edx
c000d449:	52                   	push   edx
c000d44a:	53                   	push   ebx
c000d44b:	68 78 71 02 c0       	push   0xc0027178
c000d450:	e8 a7 0a 01 00       	call   c001defc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d455:	8d 76 00             	lea    esi,[esi+0x0]
c000d458:	83 c4 10             	add    esp,0x10
c000d45b:	90                   	nop
c000d45c:	83 ec 0c             	sub    esp,0xc
c000d45f:	68 78 71 02 c0       	push   0xc0027178
c000d464:	e8 b7 09 01 00       	call   c001de20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d469:	83 c4 10             	add    esp,0x10
c000d46c:	84 c0                	test   al,al
c000d46e:	75 18                	jne    c000d488 <timerHandler(unsigned int)+0xe0>
c000d470:	83 ec 0c             	sub    esp,0xc
c000d473:	68 78 71 02 c0       	push   0xc0027178
c000d478:	e8 bf 09 01 00       	call   c001de3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d47d:	83 c4 10             	add    esp,0x10
c000d480:	39 f0                	cmp    eax,esi
c000d482:	0f 85 74 ff ff ff    	jne    c000d3fc <timerHandler(unsigned int)+0x54>
c000d488:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d48d:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d491:	74 41                	je     c000d4d4 <timerHandler(unsigned int)+0x12c>
c000d493:	80 3d bc 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ebc,0x0
c000d49a:	74 38                	je     c000d4d4 <timerHandler(unsigned int)+0x12c>
c000d49c:	fa                   	cli    
c000d49d:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c000d4a3:	a1 8c 64 02 c0       	mov    eax,ds:0xc002648c
c000d4a8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d4ae:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d4b1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d4b7:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d4ba:	72 08                	jb     c000d4c4 <timerHandler(unsigned int)+0x11c>
c000d4bc:	e8 37 71 00 00       	call   c00145f8 <schedule()>
c000d4c1:	8d 76 00             	lea    esi,[esi+0x0]
c000d4c4:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000d4c9:	48                   	dec    eax
c000d4ca:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000d4cf:	75 03                	jne    c000d4d4 <timerHandler(unsigned int)+0x12c>
c000d4d1:	fb                   	sti    
c000d4d2:	66 90                	xchg   ax,ax
c000d4d4:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000d4d9:	48                   	dec    eax
c000d4da:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c000d4df:	75 1b                	jne    c000d4fc <timerHandler(unsigned int)+0x154>
c000d4e1:	83 3d 60 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027160,0x0
c000d4e8:	74 12                	je     c000d4fc <timerHandler(unsigned int)+0x154>
c000d4ea:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c000d4f4:	e8 ff 70 00 00       	call   c00145f8 <schedule()>
c000d4f9:	8d 76 00             	lea    esi,[esi+0x0]
c000d4fc:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000d501:	48                   	dec    eax
c000d502:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000d507:	75 03                	jne    c000d50c <timerHandler(unsigned int)+0x164>
c000d509:	fb                   	sti    
c000d50a:	66 90                	xchg   ax,ax
c000d50c:	58                   	pop    eax
c000d50d:	5b                   	pop    ebx
c000d50e:	5e                   	pop    esi
c000d50f:	c3                   	ret    

c000d510 <VCache::VCache(PhysicalDisk*)>:
c000d510:	53                   	push   ebx
c000d511:	83 ec 18             	sub    esp,0x18
c000d514:	ba 80 f9 01 c0       	mov    edx,0xc001f980
c000d519:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d51d:	89 10                	mov    DWORD PTR [eax],edx
c000d51f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d523:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d52a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d52e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d535:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d539:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d540:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d547:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d54b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d552:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d559:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d55d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d564:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d568:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d56c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d570:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d577:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d57e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d582:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d586:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d58a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d58e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d592:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d596:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d59a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d5a1:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d5a9:	83 ec 0c             	sub    esp,0xc
c000d5ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d5b0:	e8 c0 a2 ff ff       	call   c0007875 <malloc>
c000d5b5:	83 c4 10             	add    esp,0x10
c000d5b8:	89 c3                	mov    ebx,eax
c000d5ba:	83 ec 0c             	sub    esp,0xc
c000d5bd:	53                   	push   ebx
c000d5be:	e8 01 6e 00 00       	call   c00143c4 <Mutex::Mutex()>
c000d5c3:	83 c4 10             	add    esp,0x10
c000d5c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5ca:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d5cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5d1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d5d5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d5d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5dc:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d5e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d5e7:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d5ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5f1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d5f4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d5f8:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d5fe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d604:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d608:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d60b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d60e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d612:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d616:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d61a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d620:	05 00 02 00 00       	add    eax,0x200
c000d625:	c1 e0 03             	shl    eax,0x3
c000d628:	83 ec 0c             	sub    esp,0xc
c000d62b:	50                   	push   eax
c000d62c:	e8 44 a2 ff ff       	call   c0007875 <malloc>
c000d631:	83 c4 10             	add    esp,0x10
c000d634:	89 c2                	mov    edx,eax
c000d636:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d63a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d63d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d641:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d648:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d64c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d650:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d654:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d65a:	89 d0                	mov    eax,edx
c000d65c:	c1 e0 02             	shl    eax,0x2
c000d65f:	01 d0                	add    eax,edx
c000d661:	c1 e0 04             	shl    eax,0x4
c000d664:	83 ec 0c             	sub    esp,0xc
c000d667:	50                   	push   eax
c000d668:	e8 08 a2 ff ff       	call   c0007875 <malloc>
c000d66d:	83 c4 10             	add    esp,0x10
c000d670:	89 c2                	mov    edx,eax
c000d672:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d676:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d679:	90                   	nop
c000d67a:	83 c4 18             	add    esp,0x18
c000d67d:	5b                   	pop    ebx
c000d67e:	c3                   	ret    
c000d67f:	90                   	nop

c000d680 <VCache::invalidateReadBuffer()>:
c000d680:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d684:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d68a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d68e:	c3                   	ret    
c000d68f:	90                   	nop

c000d690 <VCache::writeWriteBuffer()>:
c000d690:	53                   	push   ebx
c000d691:	83 ec 08             	sub    esp,0x8
c000d694:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d698:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d69c:	74 1e                	je     c000d6bc <VCache::writeWriteBuffer()+0x2c>
c000d69e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d6a1:	83 ec 0c             	sub    esp,0xc
c000d6a4:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6a6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d6a9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d6ac:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d6af:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d6b2:	50                   	push   eax
c000d6b3:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d6b6:	83 c4 20             	add    esp,0x20
c000d6b9:	8d 76 00             	lea    esi,[esi+0x0]
c000d6bc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d6c3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d6ca:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d6ce:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d6d5:	83 c4 08             	add    esp,0x8
c000d6d8:	5b                   	pop    ebx
c000d6d9:	c3                   	ret    
c000d6da:	66 90                	xchg   ax,ax

c000d6dc <VCache::~VCache()>:
c000d6dc:	83 ec 0c             	sub    esp,0xc
c000d6df:	ba 80 f9 01 c0       	mov    edx,0xc001f980
c000d6e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6e8:	89 10                	mov    DWORD PTR [eax],edx
c000d6ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6ee:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d6f1:	84 c0                	test   al,al
c000d6f3:	74 0f                	je     c000d704 <VCache::~VCache()+0x28>
c000d6f5:	83 ec 0c             	sub    esp,0xc
c000d6f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6fc:	e8 8f ff ff ff       	call   c000d690 <VCache::writeWriteBuffer()>
c000d701:	83 c4 10             	add    esp,0x10
c000d704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d708:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d70b:	83 ec 0c             	sub    esp,0xc
c000d70e:	50                   	push   eax
c000d70f:	e8 71 a1 ff ff       	call   c0007885 <free>
c000d714:	83 c4 10             	add    esp,0x10
c000d717:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d71b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d71e:	83 ec 0c             	sub    esp,0xc
c000d721:	50                   	push   eax
c000d722:	e8 5e a1 ff ff       	call   c0007885 <free>
c000d727:	83 c4 10             	add    esp,0x10
c000d72a:	90                   	nop
c000d72b:	83 c4 0c             	add    esp,0xc
c000d72e:	c3                   	ret    
c000d72f:	90                   	nop

c000d730 <VCache::~VCache()>:
c000d730:	83 ec 0c             	sub    esp,0xc
c000d733:	83 ec 0c             	sub    esp,0xc
c000d736:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d73a:	e8 9d ff ff ff       	call   c000d6dc <VCache::~VCache()>
c000d73f:	83 c4 10             	add    esp,0x10
c000d742:	83 ec 08             	sub    esp,0x8
c000d745:	6a 44                	push   0x44
c000d747:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d74b:	e8 c4 cd ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c000d750:	83 c4 10             	add    esp,0x10
c000d753:	83 c4 0c             	add    esp,0xc
c000d756:	c3                   	ret    
c000d757:	90                   	nop

c000d758 <VCache::write(unsigned long long, int, void*)>:
c000d758:	55                   	push   ebp
c000d759:	57                   	push   edi
c000d75a:	56                   	push   esi
c000d75b:	53                   	push   ebx
c000d75c:	83 ec 1c             	sub    esp,0x1c
c000d75f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d763:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d767:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000d773:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d777:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d77b:	74 07                	je     c000d784 <VCache::write(unsigned long long, int, void*)+0x2c>
c000d77d:	53                   	push   ebx
c000d77e:	e8 fd fe ff ff       	call   c000d680 <VCache::invalidateReadBuffer()>
c000d783:	58                   	pop    eax
c000d784:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d788:	74 62                	je     c000d7ec <VCache::write(unsigned long long, int, void*)+0x94>
c000d78a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d78d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d791:	99                   	cdq    
c000d792:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d796:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d799:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d79c:	31 c1                	xor    ecx,eax
c000d79e:	89 d0                	mov    eax,edx
c000d7a0:	89 ca                	mov    edx,ecx
c000d7a2:	31 e8                	xor    eax,ebp
c000d7a4:	09 c2                	or     edx,eax
c000d7a6:	75 38                	jne    c000d7e0 <VCache::write(unsigned long long, int, void*)+0x88>
c000d7a8:	83 ff 01             	cmp    edi,0x1
c000d7ab:	75 33                	jne    c000d7e0 <VCache::write(unsigned long long, int, void*)+0x88>
c000d7ad:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d7b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d7b4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d7ba:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d7bd:	0f af c8             	imul   ecx,eax
c000d7c0:	01 cf                	add    edi,ecx
c000d7c2:	89 c1                	mov    ecx,eax
c000d7c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7c6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d7c9:	40                   	inc    eax
c000d7ca:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d7cd:	83 f8 50             	cmp    eax,0x50
c000d7d0:	75 6a                	jne    c000d83c <VCache::write(unsigned long long, int, void*)+0xe4>
c000d7d2:	83 ec 0c             	sub    esp,0xc
c000d7d5:	53                   	push   ebx
c000d7d6:	e8 b5 fe ff ff       	call   c000d690 <VCache::writeWriteBuffer()>
c000d7db:	83 c4 10             	add    esp,0x10
c000d7de:	eb 5c                	jmp    c000d83c <VCache::write(unsigned long long, int, void*)+0xe4>
c000d7e0:	83 ec 0c             	sub    esp,0xc
c000d7e3:	53                   	push   ebx
c000d7e4:	e8 a7 fe ff ff       	call   c000d690 <VCache::writeWriteBuffer()>
c000d7e9:	83 c4 10             	add    esp,0x10
c000d7ec:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d7ef:	83 ff 4f             	cmp    edi,0x4f
c000d7f2:	7f 20                	jg     c000d814 <VCache::write(unsigned long long, int, void*)+0xbc>
c000d7f4:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000d7f7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d7fb:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000d7fe:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d801:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d805:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d808:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d80e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d810:	eb 2a                	jmp    c000d83c <VCache::write(unsigned long long, int, void*)+0xe4>
c000d812:	66 90                	xchg   ax,ax
c000d814:	8b 10                	mov    edx,DWORD PTR [eax]
c000d816:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d81a:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000d81e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d822:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000d826:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d82a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d82e:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d831:	83 c4 1c             	add    esp,0x1c
c000d834:	5b                   	pop    ebx
c000d835:	5e                   	pop    esi
c000d836:	5f                   	pop    edi
c000d837:	5d                   	pop    ebp
c000d838:	ff e0                	jmp    eax
c000d83a:	66 90                	xchg   ax,ax
c000d83c:	83 c4 1c             	add    esp,0x1c
c000d83f:	31 c0                	xor    eax,eax
c000d841:	5b                   	pop    ebx
c000d842:	5e                   	pop    esi
c000d843:	5f                   	pop    edi
c000d844:	5d                   	pop    ebp
c000d845:	c3                   	ret    

c000d846 <VCache::read(unsigned long long, int, void*)>:
c000d846:	55                   	push   ebp
c000d847:	57                   	push   edi
c000d848:	56                   	push   esi
c000d849:	53                   	push   ebx
c000d84a:	83 ec 1c             	sub    esp,0x1c
c000d84d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000d851:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d855:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d859:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000d85d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d861:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d865:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000d869:	74 0d                	je     c000d878 <VCache::read(unsigned long long, int, void*)+0x32>
c000d86b:	83 ec 0c             	sub    esp,0xc
c000d86e:	57                   	push   edi
c000d86f:	e8 1c fe ff ff       	call   c000d690 <VCache::writeWriteBuffer()>
c000d874:	83 c4 10             	add    esp,0x10
c000d877:	90                   	nop
c000d878:	83 fd 01             	cmp    ebp,0x1
c000d87b:	0f 85 93 00 00 00    	jne    c000d914 <VCache::read(unsigned long long, int, void*)+0xce>
c000d881:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d884:	89 04 24             	mov    DWORD PTR [esp],eax
c000d887:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000d88e:	0f 85 80 00 00 00    	jne    c000d914 <VCache::read(unsigned long long, int, void*)+0xce>
c000d894:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000d897:	89 e9                	mov    ecx,ebp
c000d899:	f7 d9                	neg    ecx
c000d89b:	89 c8                	mov    eax,ecx
c000d89d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000d8a1:	c1 f8 1f             	sar    eax,0x1f
c000d8a4:	21 d9                	and    ecx,ebx
c000d8a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d8aa:	89 c8                	mov    eax,ecx
c000d8ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d8b0:	21 f1                	and    ecx,esi
c000d8b2:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000d8b6:	89 ca                	mov    edx,ecx
c000d8b8:	74 2e                	je     c000d8e8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d8ba:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000d8bd:	75 29                	jne    c000d8e8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d8bf:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000d8c2:	75 24                	jne    c000d8e8 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d8c4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d8c7:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d8cd:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000d8d0:	8d 70 ff             	lea    esi,[eax-0x1]
c000d8d3:	21 f3                	and    ebx,esi
c000d8d5:	0f af d9             	imul   ebx,ecx
c000d8d8:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000d8db:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000d8df:	89 de                	mov    esi,ebx
c000d8e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d8e3:	31 c0                	xor    eax,eax
c000d8e5:	eb 61                	jmp    c000d948 <VCache::read(unsigned long long, int, void*)+0x102>
c000d8e7:	90                   	nop
c000d8e8:	83 ec 0c             	sub    esp,0xc
c000d8eb:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000d8ef:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d8f3:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000d8f6:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000d8f9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d8fb:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000d8fe:	55                   	push   ebp
c000d8ff:	52                   	push   edx
c000d900:	50                   	push   eax
c000d901:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d905:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000d908:	83 c4 20             	add    esp,0x20
c000d90b:	85 c0                	test   eax,eax
c000d90d:	75 39                	jne    c000d948 <VCache::read(unsigned long long, int, void*)+0x102>
c000d90f:	eb b3                	jmp    c000d8c4 <VCache::read(unsigned long long, int, void*)+0x7e>
c000d911:	8d 76 00             	lea    esi,[esi+0x0]
c000d914:	83 ec 0c             	sub    esp,0xc
c000d917:	57                   	push   edi
c000d918:	e8 63 fd ff ff       	call   c000d680 <VCache::invalidateReadBuffer()>
c000d91d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d920:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d924:	8b 10                	mov    edx,DWORD PTR [eax]
c000d926:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000d92a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000d92e:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000d932:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000d936:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d93a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d93d:	83 c4 2c             	add    esp,0x2c
c000d940:	5b                   	pop    ebx
c000d941:	5e                   	pop    esi
c000d942:	5f                   	pop    edi
c000d943:	5d                   	pop    ebp
c000d944:	ff e0                	jmp    eax
c000d946:	66 90                	xchg   ax,ax
c000d948:	83 c4 1c             	add    esp,0x1c
c000d94b:	5b                   	pop    ebx
c000d94c:	5e                   	pop    esi
c000d94d:	5f                   	pop    edi
c000d94e:	5d                   	pop    ebp
c000d94f:	c3                   	ret    

c000d950 <Video::putrect(int, int, int, int, unsigned int)>:
c000d950:	55                   	push   ebp
c000d951:	57                   	push   edi
c000d952:	56                   	push   esi
c000d953:	53                   	push   ebx
c000d954:	83 ec 1c             	sub    esp,0x1c
c000d957:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d95b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d95f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d963:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d967:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d96b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d96f:	01 df                	add    edi,ebx
c000d971:	39 fb                	cmp    ebx,edi
c000d973:	7d 1f                	jge    c000d994 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d975:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d979:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d97d:	7d 12                	jge    c000d991 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d97f:	8b 16                	mov    edx,DWORD PTR [esi]
c000d981:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d985:	53                   	push   ebx
c000d986:	55                   	push   ebp
c000d987:	45                   	inc    ebp
c000d988:	56                   	push   esi
c000d989:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d98c:	83 c4 10             	add    esp,0x10
c000d98f:	eb e8                	jmp    c000d979 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d991:	43                   	inc    ebx
c000d992:	eb dd                	jmp    c000d971 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d994:	83 c4 1c             	add    esp,0x1c
c000d997:	5b                   	pop    ebx
c000d998:	5e                   	pop    esi
c000d999:	5f                   	pop    edi
c000d99a:	5d                   	pop    ebp
c000d99b:	c3                   	ret    

c000d99c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d99c:	55                   	push   ebp
c000d99d:	57                   	push   edi
c000d99e:	31 ff                	xor    edi,edi
c000d9a0:	56                   	push   esi
c000d9a1:	53                   	push   ebx
c000d9a2:	83 ec 1c             	sub    esp,0x1c
c000d9a5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d9a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d9ad:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d9b4:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d9b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9bd:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d9c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d9c5:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d9c8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d9cc:	01 f9                	add    ecx,edi
c000d9ce:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d9d2:	7d 2f                	jge    c000da03 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d9d4:	31 f6                	xor    esi,esi
c000d9d6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d9da:	01 f2                	add    edx,esi
c000d9dc:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d9e0:	7d 1a                	jge    c000d9fc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d9e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d9e5:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d9e8:	46                   	inc    esi
c000d9e9:	51                   	push   ecx
c000d9ea:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d9ee:	52                   	push   edx
c000d9ef:	55                   	push   ebp
c000d9f0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d9f3:	83 c4 10             	add    esp,0x10
c000d9f6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d9fa:	eb da                	jmp    c000d9d6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d9fc:	47                   	inc    edi
c000d9fd:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000da01:	eb c5                	jmp    c000d9c8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000da03:	83 c4 1c             	add    esp,0x1c
c000da06:	5b                   	pop    ebx
c000da07:	5e                   	pop    esi
c000da08:	5f                   	pop    edi
c000da09:	5d                   	pop    ebp
c000da0a:	c3                   	ret    
c000da0b:	90                   	nop

c000da0c <Video::blit(unsigned int*, int, int, int, int)>:
c000da0c:	55                   	push   ebp
c000da0d:	57                   	push   edi
c000da0e:	56                   	push   esi
c000da0f:	53                   	push   ebx
c000da10:	83 ec 1c             	sub    esp,0x1c
c000da13:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000da17:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000da1b:	85 c0                	test   eax,eax
c000da1d:	79 02                	jns    c000da21 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000da1f:	31 c0                	xor    eax,eax
c000da21:	c1 e0 02             	shl    eax,0x2
c000da24:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000da28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000da2c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000da30:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000da34:	39 d8                	cmp    eax,ebx
c000da36:	7e 49                	jle    c000da81 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000da38:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000da3e:	7c 41                	jl     c000da81 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000da40:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000da44:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000da48:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000da4c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000da50:	39 f9                	cmp    ecx,edi
c000da52:	7e 22                	jle    c000da76 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000da54:	83 c5 04             	add    ebp,0x4
c000da57:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000da5d:	7c 14                	jl     c000da73 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000da5f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000da61:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000da64:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000da68:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000da6c:	56                   	push   esi
c000da6d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000da70:	83 c4 10             	add    esp,0x10
c000da73:	47                   	inc    edi
c000da74:	eb d2                	jmp    c000da48 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000da76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da7a:	43                   	inc    ebx
c000da7b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000da7f:	eb ab                	jmp    c000da2c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000da81:	83 c4 1c             	add    esp,0x1c
c000da84:	5b                   	pop    ebx
c000da85:	5e                   	pop    esi
c000da86:	5f                   	pop    edi
c000da87:	5d                   	pop    ebp
c000da88:	c3                   	ret    
c000da89:	90                   	nop

c000da8a <Video::clearScreen(unsigned int)>:
c000da8a:	57                   	push   edi
c000da8b:	56                   	push   esi
c000da8c:	53                   	push   ebx
c000da8d:	31 db                	xor    ebx,ebx
c000da8f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da93:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000da99:	7e 1f                	jle    c000daba <Video::clearScreen(unsigned int)+0x30>
c000da9b:	31 ff                	xor    edi,edi
c000da9d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000daa3:	7e 12                	jle    c000dab7 <Video::clearScreen(unsigned int)+0x2d>
c000daa5:	8b 06                	mov    eax,DWORD PTR [esi]
c000daa7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000daab:	53                   	push   ebx
c000daac:	57                   	push   edi
c000daad:	47                   	inc    edi
c000daae:	56                   	push   esi
c000daaf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dab2:	83 c4 10             	add    esp,0x10
c000dab5:	eb e6                	jmp    c000da9d <Video::clearScreen(unsigned int)+0x13>
c000dab7:	43                   	inc    ebx
c000dab8:	eb d9                	jmp    c000da93 <Video::clearScreen(unsigned int)+0x9>
c000daba:	5b                   	pop    ebx
c000dabb:	5e                   	pop    esi
c000dabc:	5f                   	pop    edi
c000dabd:	c3                   	ret    

c000dabe <Video::putpixel(int, int, unsigned int)>:
c000dabe:	c7 44 24 04 88 f9 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f988
c000dac6:	e9 d0 28 00 00       	jmp    c001039b <KePanic(char const*)>
c000dacb:	90                   	nop

c000dacc <Video::readPixelApprox(int, int)>:
c000dacc:	83 ec 18             	sub    esp,0x18
c000dacf:	68 a9 f9 01 c0       	push   0xc001f9a9
c000dad4:	e8 c2 28 00 00       	call   c001039b <KePanic(char const*)>
c000dad9:	31 c0                	xor    eax,eax
c000dadb:	83 c4 1c             	add    esp,0x1c
c000dade:	c3                   	ret    
c000dadf:	90                   	nop

c000dae0 <Video::Video(char const*)>:
c000dae0:	83 ec 0c             	sub    esp,0xc
c000dae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dae7:	83 ec 08             	sub    esp,0x8
c000daea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daee:	50                   	push   eax
c000daef:	e8 ec e0 ff ff       	call   c000bbe0 <Device::Device(char const*)>
c000daf4:	83 c4 10             	add    esp,0x10
c000daf7:	ba 24 fa 01 c0       	mov    edx,0xc001fa24
c000dafc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db00:	89 10                	mov    DWORD PTR [eax],edx
c000db02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db06:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000db10:	90                   	nop
c000db11:	83 c4 0c             	add    esp,0xc
c000db14:	c3                   	ret    
c000db15:	90                   	nop

c000db16 <Video::~Video()>:
c000db16:	83 ec 0c             	sub    esp,0xc
c000db19:	ba 24 fa 01 c0       	mov    edx,0xc001fa24
c000db1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db22:	89 10                	mov    DWORD PTR [eax],edx
c000db24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db28:	83 ec 0c             	sub    esp,0xc
c000db2b:	50                   	push   eax
c000db2c:	e8 19 de ff ff       	call   c000b94a <Device::~Device()>
c000db31:	83 c4 10             	add    esp,0x10
c000db34:	90                   	nop
c000db35:	83 c4 0c             	add    esp,0xc
c000db38:	c3                   	ret    
c000db39:	90                   	nop

c000db3a <Video::~Video()>:
c000db3a:	83 ec 0c             	sub    esp,0xc
c000db3d:	83 ec 0c             	sub    esp,0xc
c000db40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db44:	e8 cd ff ff ff       	call   c000db16 <Video::~Video()>
c000db49:	83 c4 10             	add    esp,0x10
c000db4c:	83 ec 08             	sub    esp,0x8
c000db4f:	68 64 01 00 00       	push   0x164
c000db54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db58:	e8 b7 c9 ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c000db5d:	83 c4 10             	add    esp,0x10
c000db60:	83 c4 0c             	add    esp,0xc
c000db63:	c3                   	ret    

c000db64 <Video::isMonochrome()>:
c000db64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db68:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000db6e:	c3                   	ret    
c000db6f:	90                   	nop

c000db70 <Video::getWidth()>:
c000db70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db74:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000db7a:	c3                   	ret    
c000db7b:	90                   	nop

c000db7c <Video::getHeight()>:
c000db7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db80:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000db86:	c3                   	ret    
c000db87:	90                   	nop

c000db88 <Video::drawCursor(int, int, unsigned int*, int)>:
c000db88:	55                   	push   ebp
c000db89:	57                   	push   edi
c000db8a:	56                   	push   esi
c000db8b:	53                   	push   ebx
c000db8c:	83 ec 2c             	sub    esp,0x2c
c000db8f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000db93:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000db97:	83 f8 01             	cmp    eax,0x1
c000db9a:	19 c9                	sbb    ecx,ecx
c000db9c:	31 db                	xor    ebx,ebx
c000db9e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000dba2:	89 cd                	mov    ebp,ecx
c000dba4:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000dbac:	f7 d5                	not    ebp
c000dbae:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000dbb4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dbb8:	01 d8                	add    eax,ebx
c000dbba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dbbe:	56                   	push   esi
c000dbbf:	e8 b8 ff ff ff       	call   c000db7c <Video::getHeight()>
c000dbc4:	59                   	pop    ecx
c000dbc5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000dbc9:	7e 70                	jle    c000dc3b <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000dbcb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dbcf:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000dbd3:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000dbd6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dbda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dbde:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000dbe5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbe9:	89 f8                	mov    eax,edi
c000dbeb:	83 c0 20             	add    eax,0x20
c000dbee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dbf2:	56                   	push   esi
c000dbf3:	e8 78 ff ff ff       	call   c000db70 <Video::getWidth()>
c000dbf8:	5a                   	pop    edx
c000dbf9:	39 c7                	cmp    edi,eax
c000dbfb:	7d 34                	jge    c000dc31 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000dbfd:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000dc02:	74 05                	je     c000dc09 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000dc04:	8b 06                	mov    eax,DWORD PTR [esi]
c000dc06:	55                   	push   ebp
c000dc07:	eb 0d                	jmp    c000dc16 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000dc09:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000dc0e:	74 12                	je     c000dc22 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000dc10:	8b 06                	mov    eax,DWORD PTR [esi]
c000dc12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc16:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dc1a:	57                   	push   edi
c000dc1b:	56                   	push   esi
c000dc1c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dc1f:	83 c4 10             	add    esp,0x10
c000dc22:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000dc26:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000dc2a:	47                   	inc    edi
c000dc2b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000dc2f:	75 c1                	jne    c000dbf2 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000dc31:	43                   	inc    ebx
c000dc32:	83 fb 20             	cmp    ebx,0x20
c000dc35:	0f 85 79 ff ff ff    	jne    c000dbb4 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000dc3b:	83 c4 2c             	add    esp,0x2c
c000dc3e:	5b                   	pop    ebx
c000dc3f:	5e                   	pop    esi
c000dc40:	5f                   	pop    edi
c000dc41:	5d                   	pop    ebp
c000dc42:	c3                   	ret    
c000dc43:	90                   	nop

c000dc44 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000dc44:	55                   	push   ebp
c000dc45:	57                   	push   edi
c000dc46:	56                   	push   esi
c000dc47:	53                   	push   ebx
c000dc48:	83 ec 28             	sub    esp,0x28
c000dc4b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000dc4f:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000dc53:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000dc57:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000dc5b:	c1 e6 08             	shl    esi,0x8
c000dc5e:	01 c6                	add    esi,eax
c000dc60:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000dc64:	c1 e0 08             	shl    eax,0x8
c000dc67:	01 d0                	add    eax,edx
c000dc69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dc71:	0f af c6             	imul   eax,esi
c000dc74:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000dc7b:	50                   	push   eax
c000dc7c:	e8 f4 9b ff ff       	call   c0007875 <malloc>
c000dc81:	83 c4 10             	add    esp,0x10
c000dc84:	89 c7                	mov    edi,eax
c000dc86:	85 c0                	test   eax,eax
c000dc88:	75 10                	jne    c000dc9a <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000dc8a:	83 ec 0c             	sub    esp,0xc
c000dc8d:	68 d4 f9 01 c0       	push   0xc001f9d4
c000dc92:	e8 04 27 00 00       	call   c001039b <KePanic(char const*)>
c000dc97:	83 c4 10             	add    esp,0x10
c000dc9a:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000dc9d:	ba 12 00 00 00       	mov    edx,0x12
c000dca2:	84 c0                	test   al,al
c000dca4:	74 11                	je     c000dcb7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000dca6:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000dcaa:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000dcae:	c1 fa 03             	sar    edx,0x3
c000dcb1:	0f af d1             	imul   edx,ecx
c000dcb4:	83 c2 12             	add    edx,0x12
c000dcb7:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000dcbb:	74 04                	je     c000dcc1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000dcbd:	85 f6                	test   esi,esi
c000dcbf:	75 12                	jne    c000dcd3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000dcc1:	83 ec 0c             	sub    esp,0xc
c000dcc4:	68 e4 f9 01 c0       	push   0xc001f9e4
c000dcc9:	e8 3c c9 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c000dcce:	e9 b8 00 00 00       	jmp    c000dd8b <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000dcd3:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000dcd7:	80 f9 02             	cmp    cl,0x2
c000dcda:	0f 85 96 00 00 00    	jne    c000dd76 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000dce0:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000dce5:	75 0e                	jne    c000dcf5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dce7:	84 c0                	test   al,al
c000dce9:	75 0a                	jne    c000dcf5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dceb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000dcee:	83 e8 18             	sub    eax,0x18
c000dcf1:	a8 f7                	test   al,0xf7
c000dcf3:	74 0a                	je     c000dcff <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000dcf5:	83 ec 0c             	sub    esp,0xc
c000dcf8:	68 f9 f9 01 c0       	push   0xc001f9f9
c000dcfd:	eb 7f                	jmp    c000dd7e <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000dcff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dd07:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000dd0f:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000dd13:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dd1b:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000dd1f:	75 0c                	jne    c000dd2d <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000dd21:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000dd26:	c1 e0 18             	shl    eax,0x18
c000dd29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd2d:	45                   	inc    ebp
c000dd2e:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000dd33:	c1 e1 10             	shl    ecx,0x10
c000dd36:	89 c8                	mov    eax,ecx
c000dd38:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000dd3d:	c1 e1 08             	shl    ecx,0x8
c000dd40:	09 c1                	or     ecx,eax
c000dd42:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000dd46:	09 c1                	or     ecx,eax
c000dd48:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000dd4c:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000dd50:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000dd54:	c1 f8 03             	sar    eax,0x3
c000dd57:	01 c2                	add    edx,eax
c000dd59:	89 e8                	mov    eax,ebp
c000dd5b:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000dd5f:	39 c6                	cmp    esi,eax
c000dd61:	7f b0                	jg     c000dd13 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000dd63:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000dd67:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dd6b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000dd6e:	7e 22                	jle    c000dd92 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000dd70:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000dd74:	eb 99                	jmp    c000dd0f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000dd76:	50                   	push   eax
c000dd77:	50                   	push   eax
c000dd78:	51                   	push   ecx
c000dd79:	68 07 fa 01 c0       	push   0xc001fa07
c000dd7e:	e8 87 c8 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c000dd83:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dd86:	e8 fa 9a ff ff       	call   c0007885 <free>
c000dd8b:	83 c4 10             	add    esp,0x10
c000dd8e:	31 ff                	xor    edi,edi
c000dd90:	eb 0f                	jmp    c000dda1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000dd92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dd96:	89 30                	mov    DWORD PTR [eax],esi
c000dd98:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dd9c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dd9f:	89 30                	mov    DWORD PTR [eax],esi
c000dda1:	83 c4 1c             	add    esp,0x1c
c000dda4:	89 f8                	mov    eax,edi
c000dda6:	5b                   	pop    ebx
c000dda7:	5e                   	pop    esi
c000dda8:	5f                   	pop    edi
c000dda9:	5d                   	pop    ebp
c000ddaa:	c3                   	ret    
c000ddab:	90                   	nop

c000ddac <Video::putTGA(int, int, unsigned char*, int)>:
c000ddac:	55                   	push   ebp
c000ddad:	57                   	push   edi
c000ddae:	56                   	push   esi
c000ddaf:	53                   	push   ebx
c000ddb0:	83 ec 28             	sub    esp,0x28
c000ddb3:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ddb7:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ddbb:	50                   	push   eax
c000ddbc:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ddc0:	50                   	push   eax
c000ddc1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ddc5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ddc9:	56                   	push   esi
c000ddca:	e8 75 fe ff ff       	call   c000dc44 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ddcf:	83 c4 20             	add    esp,0x20
c000ddd2:	85 c0                	test   eax,eax
c000ddd4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ddd8:	74 35                	je     c000de0f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ddda:	89 c7                	mov    edi,eax
c000dddc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dde0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dde4:	39 d8                	cmp    eax,ebx
c000dde6:	7e 27                	jle    c000de0f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dde8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ddec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ddf0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ddf4:	39 e8                	cmp    eax,ebp
c000ddf6:	7e 14                	jle    c000de0c <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ddf8:	8b 06                	mov    eax,DWORD PTR [esi]
c000ddfa:	83 c7 04             	add    edi,0x4
c000ddfd:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000de00:	53                   	push   ebx
c000de01:	55                   	push   ebp
c000de02:	45                   	inc    ebp
c000de03:	56                   	push   esi
c000de04:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000de07:	83 c4 10             	add    esp,0x10
c000de0a:	eb e0                	jmp    c000ddec <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000de0c:	43                   	inc    ebx
c000de0d:	eb cd                	jmp    c000dddc <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000de0f:	83 c4 1c             	add    esp,0x1c
c000de12:	5b                   	pop    ebx
c000de13:	5e                   	pop    esi
c000de14:	5f                   	pop    edi
c000de15:	5d                   	pop    ebp
c000de16:	c3                   	ret    
c000de17:	90                   	nop

c000de18 <ACPI::close(int, int, void*)>:
c000de18:	83 ec 1c             	sub    esp,0x1c
c000de1b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000de23:	74 0b                	je     c000de30 <ACPI::close(int, int, void*)+0x18>
c000de25:	b8 00 00 00 00       	mov    eax,0x0
c000de2a:	e9 9d 00 00 00       	jmp    c000decc <ACPI::close(int, int, void*)+0xb4>
c000de2f:	90                   	nop
c000de30:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000de35:	75 29                	jne    c000de60 <ACPI::close(int, int, void*)+0x48>
c000de37:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000de3c:	85 c0                	test   eax,eax
c000de3e:	74 08                	je     c000de48 <ACPI::close(int, int, void*)+0x30>
c000de40:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000de45:	ff d0                	call   eax
c000de47:	90                   	nop
c000de48:	83 ec 0c             	sub    esp,0xc
c000de4b:	68 68 fa 01 c0       	push   0xc001fa68
c000de50:	e8 46 25 00 00       	call   c001039b <KePanic(char const*)>
c000de55:	83 c4 10             	add    esp,0x10
c000de58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000de5d:	eb 6d                	jmp    c000decc <ACPI::close(int, int, void*)+0xb4>
c000de5f:	90                   	nop
c000de60:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000de65:	75 5d                	jne    c000dec4 <ACPI::close(int, int, void*)+0xac>
c000de67:	a1 a4 64 02 c0       	mov    eax,ds:0xc00264a4
c000de6c:	85 c0                	test   eax,eax
c000de6e:	74 08                	je     c000de78 <ACPI::close(int, int, void*)+0x60>
c000de70:	a1 a4 64 02 c0       	mov    eax,ds:0xc00264a4
c000de75:	ff d0                	call   eax
c000de77:	90                   	nop
c000de78:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000de7d:	8d 76 00             	lea    esi,[esi+0x0]
c000de80:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000de84:	25 ff 00 00 00       	and    eax,0xff
c000de89:	83 e0 02             	and    eax,0x2
c000de8c:	74 1e                	je     c000deac <ACPI::close(int, int, void*)+0x94>
c000de8e:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000de95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de99:	89 c2                	mov    edx,eax
c000de9b:	ec                   	in     al,dx
c000de9c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000dea0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000dea4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dea8:	eb d6                	jmp    c000de80 <ACPI::close(int, int, void*)+0x68>
c000deaa:	66 90                	xchg   ax,ax
c000deac:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000deb3:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000deb8:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000debc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dec0:	ee                   	out    dx,al
c000dec1:	8d 76 00             	lea    esi,[esi+0x0]
c000dec4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dec9:	8d 76 00             	lea    esi,[esi+0x0]
c000decc:	83 c4 1c             	add    esp,0x1c
c000decf:	c3                   	ret    

c000ded0 <findRSDP()>:
c000ded0:	83 ec 1c             	sub    esp,0x1c
c000ded3:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000ded8:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dede:	83 e0 04             	and    eax,0x4
c000dee1:	84 c0                	test   al,al
c000dee3:	75 07                	jne    c000deec <findRSDP()+0x1c>
c000dee5:	b8 00 00 00 00       	mov    eax,0x0
c000deea:	eb 70                	jmp    c000df5c <findRSDP()+0x8c>
c000deec:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c000def1:	3d ff 07 00 00       	cmp    eax,0x7ff
c000def6:	7f 1c                	jg     c000df14 <findRSDP()+0x44>
c000def8:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000defd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000df03:	83 e2 fb             	and    edx,0xfffffffb
c000df06:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000df0c:	b8 00 00 00 00       	mov    eax,0x0
c000df11:	eb 49                	jmp    c000df5c <findRSDP()+0x8c>
c000df13:	90                   	nop
c000df14:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000df1c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000df24:	77 2e                	ja     c000df54 <findRSDP()+0x84>
c000df26:	83 ec 04             	sub    esp,0x4
c000df29:	6a 08                	push   0x8
c000df2b:	68 03 fb 01 c0       	push   0xc001fb03
c000df30:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000df34:	e8 57 24 ff ff       	call   c0000390 <memcmp>
c000df39:	83 c4 10             	add    esp,0x10
c000df3c:	85 c0                	test   eax,eax
c000df3e:	0f 94 c0             	sete   al
c000df41:	84 c0                	test   al,al
c000df43:	74 07                	je     c000df4c <findRSDP()+0x7c>
c000df45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df49:	eb 11                	jmp    c000df5c <findRSDP()+0x8c>
c000df4b:	90                   	nop
c000df4c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000df51:	eb c9                	jmp    c000df1c <findRSDP()+0x4c>
c000df53:	90                   	nop
c000df54:	b8 00 00 00 00       	mov    eax,0x0
c000df59:	8d 76 00             	lea    esi,[esi+0x0]
c000df5c:	83 c4 1c             	add    esp,0x1c
c000df5f:	c3                   	ret    

c000df60 <loadACPITables(unsigned char*)>:
c000df60:	57                   	push   edi
c000df61:	56                   	push   esi
c000df62:	53                   	push   ebx
c000df63:	83 ec 60             	sub    esp,0x60
c000df66:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000df6b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000df71:	83 e0 04             	and    eax,0x4
c000df74:	84 c0                	test   al,al
c000df76:	0f 84 3c 02 00 00    	je     c000e1b8 <loadACPITables(unsigned char*)+0x258>
c000df7c:	a0 c0 66 02 c0       	mov    al,ds:0xc00266c0
c000df81:	84 c0                	test   al,al
c000df83:	74 77                	je     c000dffc <loadACPITables(unsigned char*)+0x9c>
c000df85:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000df89:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000df8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000df91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df94:	83 e8 24             	sub    eax,0x24
c000df97:	c1 e8 03             	shr    eax,0x3
c000df9a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000df9e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000dfa6:	66 90                	xchg   ax,ax
c000dfa8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dfac:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000dfb0:	0f 8d b6 00 00 00    	jge    c000e06c <loadACPITables(unsigned char*)+0x10c>
c000dfb6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dfba:	83 c0 24             	add    eax,0x24
c000dfbd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dfc1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dfc5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dfc9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dfcd:	c1 e0 03             	shl    eax,0x3
c000dfd0:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000dfd4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000dfd8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dfdb:	8b 00                	mov    eax,DWORD PTR [eax]
c000dfdd:	89 c1                	mov    ecx,eax
c000dfdf:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000dfe4:	8d 50 01             	lea    edx,[eax+0x1]
c000dfe7:	89 15 ac 64 02 c0    	mov    DWORD PTR ds:0xc00264ac,edx
c000dfed:	89 ca                	mov    edx,ecx
c000dfef:	89 14 c5 c4 64 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9b3c],edx
c000dff6:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000dffa:	eb ac                	jmp    c000dfa8 <loadACPITables(unsigned char*)+0x48>
c000dffc:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e000:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e004:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e00b:	83 e8 24             	sub    eax,0x24
c000e00e:	c1 e8 02             	shr    eax,0x2
c000e011:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e015:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e01d:	8d 76 00             	lea    esi,[esi+0x0]
c000e020:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e024:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e028:	7d 42                	jge    c000e06c <loadACPITables(unsigned char*)+0x10c>
c000e02a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e02e:	83 c0 24             	add    eax,0x24
c000e031:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e035:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e039:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e03d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e041:	c1 e0 02             	shl    eax,0x2
c000e044:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e048:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e04c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e04e:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e053:	8d 50 01             	lea    edx,[eax+0x1]
c000e056:	89 15 ac 64 02 c0    	mov    DWORD PTR ds:0xc00264ac,edx
c000e05c:	89 ca                	mov    edx,ecx
c000e05e:	89 14 c5 c4 64 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9b3c],edx
c000e065:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000e069:	eb b5                	jmp    c000e020 <loadACPITables(unsigned char*)+0xc0>
c000e06b:	90                   	nop
c000e06c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e074:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e079:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e07d:	0f 8d 39 01 00 00    	jge    c000e1bc <loadACPITables(unsigned char*)+0x25c>
c000e083:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e087:	8b 04 c5 c4 64 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd9b3c]
c000e08e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e092:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e096:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e09a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e09e:	25 ff 0f 00 00       	and    eax,0xfff
c000e0a3:	89 c6                	mov    esi,eax
c000e0a5:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e0ab:	83 ec 0c             	sub    esp,0xc
c000e0ae:	6a 01                	push   0x1
c000e0b0:	e8 98 b2 ff ff       	call   c000934d <Virt::allocateKernelVirtualPages(int)>
c000e0b5:	83 c4 10             	add    esp,0x10
c000e0b8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e0bc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e0c2:	83 ec 0c             	sub    esp,0xc
c000e0c5:	6a 01                	push   0x1
c000e0c7:	6a 01                	push   0x1
c000e0c9:	50                   	push   eax
c000e0ca:	52                   	push   edx
c000e0cb:	53                   	push   ebx
c000e0cc:	e8 39 bc ff ff       	call   c0009d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e0d1:	83 c4 20             	add    esp,0x20
c000e0d4:	09 f0                	or     eax,esi
c000e0d6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e0da:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e0de:	c1 e0 03             	shl    eax,0x3
c000e0e1:	05 c0 64 02 c0       	add    eax,0xc00264c0
c000e0e6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e0ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e0fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e0fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e102:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e106:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e10a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e10e:	89 c6                	mov    esi,eax
c000e110:	89 d7                	mov    edi,edx
c000e112:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e114:	89 c8                	mov    eax,ecx
c000e116:	89 fa                	mov    edx,edi
c000e118:	89 f3                	mov    ebx,esi
c000e11a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e11e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e122:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e12a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e12d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e131:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e135:	05 00 10 00 00       	add    eax,0x1000
c000e13a:	c1 e8 0c             	shr    eax,0xc
c000e13d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e145:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e149:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e14d:	25 ff 0f 00 00       	and    eax,0xfff
c000e152:	89 c6                	mov    esi,eax
c000e154:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e15a:	83 ec 0c             	sub    esp,0xc
c000e15d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e161:	e8 e7 b1 ff ff       	call   c000934d <Virt::allocateKernelVirtualPages(int)>
c000e166:	83 c4 10             	add    esp,0x10
c000e169:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e16d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e173:	83 ec 0c             	sub    esp,0xc
c000e176:	6a 01                	push   0x1
c000e178:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e17c:	50                   	push   eax
c000e17d:	52                   	push   edx
c000e17e:	53                   	push   ebx
c000e17f:	e8 86 bb ff ff       	call   c0009d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e184:	83 c4 20             	add    esp,0x20
c000e187:	09 f0                	or     eax,esi
c000e189:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e18d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e191:	83 ec 0c             	sub    esp,0xc
c000e194:	50                   	push   eax
c000e195:	e8 a7 b4 ff ff       	call   c0009641 <Virt::freeKernelVirtualPages(unsigned long)>
c000e19a:	83 c4 10             	add    esp,0x10
c000e19d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e1a1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e1a5:	89 14 c5 c4 64 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9b3c],edx
c000e1ac:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e1b0:	e9 bf fe ff ff       	jmp    c000e074 <loadACPITables(unsigned char*)+0x114>
c000e1b5:	8d 76 00             	lea    esi,[esi+0x0]
c000e1b8:	90                   	nop
c000e1b9:	8d 76 00             	lea    esi,[esi+0x0]
c000e1bc:	83 c4 60             	add    esp,0x60
c000e1bf:	5b                   	pop    ebx
c000e1c0:	5e                   	pop    esi
c000e1c1:	5f                   	pop    edi
c000e1c2:	c3                   	ret    
c000e1c3:	90                   	nop

c000e1c4 <findRSDT(unsigned char*)>:
c000e1c4:	57                   	push   edi
c000e1c5:	56                   	push   esi
c000e1c6:	53                   	push   ebx
c000e1c7:	83 ec 50             	sub    esp,0x50
c000e1ca:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e1cf:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e1d5:	83 e0 04             	and    eax,0x4
c000e1d8:	84 c0                	test   al,al
c000e1da:	75 0c                	jne    c000e1e8 <findRSDT(unsigned char*)+0x24>
c000e1dc:	b8 00 00 00 00       	mov    eax,0x0
c000e1e1:	e9 26 01 00 00       	jmp    c000e30c <findRSDT(unsigned char*)+0x148>
c000e1e6:	66 90                	xchg   ax,ax
c000e1e8:	89 e0                	mov    eax,esp
c000e1ea:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e1ee:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e1f2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e1f6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e1fe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e202:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e206:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e20a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e20e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e212:	89 c6                	mov    esi,eax
c000e214:	89 d7                	mov    edi,edx
c000e216:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e218:	89 c8                	mov    eax,ecx
c000e21a:	89 fa                	mov    edx,edi
c000e21c:	89 f3                	mov    ebx,esi
c000e21e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e222:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e226:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e22a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e22e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e232:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e23a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e23e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e242:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e24a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e24e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e252:	25 ff 0f 00 00       	and    eax,0xfff
c000e257:	89 c6                	mov    esi,eax
c000e259:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e25f:	83 ec 0c             	sub    esp,0xc
c000e262:	6a 02                	push   0x2
c000e264:	e8 e4 b0 ff ff       	call   c000934d <Virt::allocateKernelVirtualPages(int)>
c000e269:	83 c4 10             	add    esp,0x10
c000e26c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e270:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e276:	83 ec 0c             	sub    esp,0xc
c000e279:	6a 01                	push   0x1
c000e27b:	6a 02                	push   0x2
c000e27d:	50                   	push   eax
c000e27e:	52                   	push   edx
c000e27f:	53                   	push   ebx
c000e280:	e8 85 ba ff ff       	call   c0009d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e285:	83 c4 20             	add    esp,0x20
c000e288:	09 f0                	or     eax,esi
c000e28a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e28e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e292:	25 ff 0f 00 00       	and    eax,0xfff
c000e297:	89 c6                	mov    esi,eax
c000e299:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e29f:	83 ec 0c             	sub    esp,0xc
c000e2a2:	6a 02                	push   0x2
c000e2a4:	e8 a4 b0 ff ff       	call   c000934d <Virt::allocateKernelVirtualPages(int)>
c000e2a9:	83 c4 10             	add    esp,0x10
c000e2ac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e2b0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e2b6:	83 ec 0c             	sub    esp,0xc
c000e2b9:	6a 01                	push   0x1
c000e2bb:	6a 02                	push   0x2
c000e2bd:	50                   	push   eax
c000e2be:	52                   	push   edx
c000e2bf:	53                   	push   ebx
c000e2c0:	e8 45 ba ff ff       	call   c0009d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e2c5:	83 c4 20             	add    esp,0x20
c000e2c8:	09 f0                	or     eax,esi
c000e2ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e2ce:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e2d3:	75 13                	jne    c000e2e8 <findRSDT(unsigned char*)+0x124>
c000e2d5:	c6 05 c0 66 02 c0 00 	mov    BYTE PTR ds:0xc00266c0,0x0
c000e2dc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e2e0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e2e4:	eb 22                	jmp    c000e308 <findRSDT(unsigned char*)+0x144>
c000e2e6:	66 90                	xchg   ax,ax
c000e2e8:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e2ed:	75 11                	jne    c000e300 <findRSDT(unsigned char*)+0x13c>
c000e2ef:	c6 05 c0 66 02 c0 01 	mov    BYTE PTR ds:0xc00266c0,0x1
c000e2f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e2fa:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e2fe:	eb 08                	jmp    c000e308 <findRSDT(unsigned char*)+0x144>
c000e300:	b8 00 00 00 00       	mov    eax,0x0
c000e305:	eb 05                	jmp    c000e30c <findRSDT(unsigned char*)+0x148>
c000e307:	90                   	nop
c000e308:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e30c:	83 c4 50             	add    esp,0x50
c000e30f:	5b                   	pop    ebx
c000e310:	5e                   	pop    esi
c000e311:	5f                   	pop    edi
c000e312:	c3                   	ret    
c000e313:	90                   	nop

c000e314 <findDataTable(unsigned char*, char*)>:
c000e314:	83 ec 1c             	sub    esp,0x1c
c000e317:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e31c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e322:	83 e0 04             	and    eax,0x4
c000e325:	84 c0                	test   al,al
c000e327:	75 07                	jne    c000e330 <findDataTable(unsigned char*, char*)+0x1c>
c000e329:	b8 00 00 00 00       	mov    eax,0x0
c000e32e:	eb 58                	jmp    c000e388 <findDataTable(unsigned char*, char*)+0x74>
c000e330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e338:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e33d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e341:	7d 3d                	jge    c000e380 <findDataTable(unsigned char*, char*)+0x6c>
c000e343:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e347:	c1 e0 03             	shl    eax,0x3
c000e34a:	05 c0 64 02 c0       	add    eax,0xc00264c0
c000e34f:	83 ec 04             	sub    esp,0x4
c000e352:	6a 04                	push   0x4
c000e354:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e358:	50                   	push   eax
c000e359:	e8 32 20 ff ff       	call   c0000390 <memcmp>
c000e35e:	83 c4 10             	add    esp,0x10
c000e361:	85 c0                	test   eax,eax
c000e363:	0f 94 c0             	sete   al
c000e366:	84 c0                	test   al,al
c000e368:	74 0e                	je     c000e378 <findDataTable(unsigned char*, char*)+0x64>
c000e36a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e36e:	8b 04 c5 c4 64 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd9b3c]
c000e375:	eb 11                	jmp    c000e388 <findDataTable(unsigned char*, char*)+0x74>
c000e377:	90                   	nop
c000e378:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e37c:	eb ba                	jmp    c000e338 <findDataTable(unsigned char*, char*)+0x24>
c000e37e:	66 90                	xchg   ax,ax
c000e380:	b8 00 00 00 00       	mov    eax,0x0
c000e385:	8d 76 00             	lea    esi,[esi+0x0]
c000e388:	83 c4 1c             	add    esp,0x1c
c000e38b:	c3                   	ret    

c000e38c <scanMADT()>:
c000e38c:	53                   	push   ebx
c000e38d:	83 ec 38             	sub    esp,0x38
c000e390:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c000e395:	25 00 04 00 00       	and    eax,0x400
c000e39a:	74 14                	je     c000e3b0 <scanMADT()+0x24>
c000e39c:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e3a1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e3a7:	83 e2 fb             	and    edx,0xfffffffb
c000e3aa:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e3b0:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e3b5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e3bb:	83 e0 04             	and    eax,0x4
c000e3be:	84 c0                	test   al,al
c000e3c0:	0f 84 8a 04 00 00    	je     c000e850 <scanMADT()+0x4c4>
c000e3c6:	e8 05 fb ff ff       	call   c000ded0 <findRSDP()>
c000e3cb:	a3 cc 66 02 c0       	mov    ds:0xc00266cc,eax
c000e3d0:	a1 cc 66 02 c0       	mov    eax,ds:0xc00266cc
c000e3d5:	85 c0                	test   eax,eax
c000e3d7:	75 1b                	jne    c000e3f4 <scanMADT()+0x68>
c000e3d9:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e3de:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e3e4:	83 e2 fb             	and    edx,0xfffffffb
c000e3e7:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e3ed:	e9 66 04 00 00       	jmp    c000e858 <scanMADT()+0x4cc>
c000e3f2:	66 90                	xchg   ax,ax
c000e3f4:	a1 cc 66 02 c0       	mov    eax,ds:0xc00266cc
c000e3f9:	83 ec 0c             	sub    esp,0xc
c000e3fc:	50                   	push   eax
c000e3fd:	e8 c2 fd ff ff       	call   c000e1c4 <findRSDT(unsigned char*)>
c000e402:	83 c4 10             	add    esp,0x10
c000e405:	a3 c8 66 02 c0       	mov    ds:0xc00266c8,eax
c000e40a:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000e40f:	85 c0                	test   eax,eax
c000e411:	75 19                	jne    c000e42c <scanMADT()+0xa0>
c000e413:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e418:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e41e:	83 e2 fb             	and    edx,0xfffffffb
c000e421:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e427:	e9 2c 04 00 00       	jmp    c000e858 <scanMADT()+0x4cc>
c000e42c:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000e431:	83 ec 0c             	sub    esp,0xc
c000e434:	50                   	push   eax
c000e435:	e8 26 fb ff ff       	call   c000df60 <loadACPITables(unsigned char*)>
c000e43a:	83 c4 10             	add    esp,0x10
c000e43d:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000e442:	83 ec 08             	sub    esp,0x8
c000e445:	68 0c fb 01 c0       	push   0xc001fb0c
c000e44a:	50                   	push   eax
c000e44b:	e8 c4 fe ff ff       	call   c000e314 <findDataTable(unsigned char*, char*)>
c000e450:	83 c4 10             	add    esp,0x10
c000e453:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e457:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e45c:	75 1a                	jne    c000e478 <scanMADT()+0xec>
c000e45e:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e463:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e469:	83 e2 fe             	and    edx,0xfffffffe
c000e46c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e472:	e9 e1 03 00 00       	jmp    c000e858 <scanMADT()+0x4cc>
c000e477:	90                   	nop
c000e478:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e484:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e487:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e48b:	0f 87 c7 03 00 00    	ja     c000e858 <scanMADT()+0x4cc>
c000e491:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e499:	0f 87 b9 03 00 00    	ja     c000e858 <scanMADT()+0x4cc>
c000e49f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4a3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e4a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4ab:	8d 50 01             	lea    edx,[eax+0x1]
c000e4ae:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e4b2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4b6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e4ba:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e4be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4c2:	8d 50 01             	lea    edx,[eax+0x1]
c000e4c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e4c9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4cd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e4d1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e4d5:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e4da:	0f 86 74 03 00 00    	jbe    c000e854 <scanMADT()+0x4c8>
c000e4e0:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e4e5:	75 5d                	jne    c000e544 <scanMADT()+0x1b8>
c000e4e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4eb:	8d 50 01             	lea    edx,[eax+0x1]
c000e4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e4f2:	8a 15 c0 68 02 c0    	mov    dl,BYTE PTR ds:0xc00268c0
c000e4f8:	81 e2 ff 00 00 00    	and    edx,0xff
c000e4fe:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e502:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e506:	88 82 00 69 02 c0    	mov    BYTE PTR [edx-0x3ffd9700],al
c000e50c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e510:	8d 42 01             	lea    eax,[edx+0x1]
c000e513:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e517:	a0 c0 68 02 c0       	mov    al,ds:0xc00268c0
c000e51c:	8d 48 01             	lea    ecx,[eax+0x1]
c000e51f:	88 0d c0 68 02 c0    	mov    BYTE PTR ds:0xc00268c0,cl
c000e525:	25 ff 00 00 00       	and    eax,0xff
c000e52a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e52e:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e532:	88 90 e0 68 02 c0    	mov    BYTE PTR [eax-0x3ffd9720],dl
c000e538:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e53d:	e9 f6 02 00 00       	jmp    c000e838 <scanMADT()+0x4ac>
c000e542:	66 90                	xchg   ax,ax
c000e544:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e549:	0f 85 29 01 00 00    	jne    c000e678 <scanMADT()+0x2ec>
c000e54f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e553:	8d 50 01             	lea    edx,[eax+0x1]
c000e556:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e55a:	8a 15 80 67 02 c0    	mov    dl,BYTE PTR ds:0xc0026780
c000e560:	81 e2 ff 00 00 00    	and    edx,0xff
c000e566:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e56a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e56e:	88 82 a0 67 02 c0    	mov    BYTE PTR [edx-0x3ffd9860],al
c000e574:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e578:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e57c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e580:	01 d0                	add    eax,edx
c000e582:	83 c0 2c             	add    eax,0x2c
c000e585:	8a 00                	mov    al,BYTE PTR [eax]
c000e587:	31 d2                	xor    edx,edx
c000e589:	88 c2                	mov    dl,al
c000e58b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e58f:	8d 48 01             	lea    ecx,[eax+0x1]
c000e592:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e596:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e59a:	25 ff 00 00 00       	and    eax,0xff
c000e59f:	c1 e0 08             	shl    eax,0x8
c000e5a2:	89 d1                	mov    ecx,edx
c000e5a4:	09 c1                	or     ecx,eax
c000e5a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5aa:	8d 50 02             	lea    edx,[eax+0x2]
c000e5ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5b1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e5b5:	25 ff 00 00 00       	and    eax,0xff
c000e5ba:	c1 e0 10             	shl    eax,0x10
c000e5bd:	09 c1                	or     ecx,eax
c000e5bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5c3:	8d 50 03             	lea    edx,[eax+0x3]
c000e5c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5ca:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e5ce:	25 ff 00 00 00       	and    eax,0xff
c000e5d3:	c1 e0 18             	shl    eax,0x18
c000e5d6:	09 c1                	or     ecx,eax
c000e5d8:	89 ca                	mov    edx,ecx
c000e5da:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c000e5df:	25 ff 00 00 00       	and    eax,0xff
c000e5e4:	89 14 85 c0 67 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9840],edx
c000e5eb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e5f0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5f8:	01 d0                	add    eax,edx
c000e5fa:	83 c0 2c             	add    eax,0x2c
c000e5fd:	8a 00                	mov    al,BYTE PTR [eax]
c000e5ff:	31 d2                	xor    edx,edx
c000e601:	88 c2                	mov    dl,al
c000e603:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e607:	8d 48 01             	lea    ecx,[eax+0x1]
c000e60a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e60e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e612:	25 ff 00 00 00       	and    eax,0xff
c000e617:	c1 e0 08             	shl    eax,0x8
c000e61a:	89 d1                	mov    ecx,edx
c000e61c:	09 c1                	or     ecx,eax
c000e61e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e622:	8d 50 02             	lea    edx,[eax+0x2]
c000e625:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e629:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e62d:	25 ff 00 00 00       	and    eax,0xff
c000e632:	c1 e0 10             	shl    eax,0x10
c000e635:	09 c1                	or     ecx,eax
c000e637:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e63b:	8d 50 03             	lea    edx,[eax+0x3]
c000e63e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e642:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e646:	25 ff 00 00 00       	and    eax,0xff
c000e64b:	c1 e0 18             	shl    eax,0x18
c000e64e:	09 c1                	or     ecx,eax
c000e650:	89 ca                	mov    edx,ecx
c000e652:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c000e657:	25 ff 00 00 00       	and    eax,0xff
c000e65c:	89 14 85 40 68 02 c0 	mov    DWORD PTR [eax*4-0x3ffd97c0],edx
c000e663:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e668:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c000e66d:	40                   	inc    eax
c000e66e:	a2 80 67 02 c0       	mov    ds:0xc0026780,al
c000e673:	e9 c0 01 00 00       	jmp    c000e838 <scanMADT()+0x4ac>
c000e678:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e67d:	0f 85 fd 00 00 00    	jne    c000e780 <scanMADT()+0x3f4>
c000e683:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e687:	8d 50 01             	lea    edx,[eax+0x1]
c000e68a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e68e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e692:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e696:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e69a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e69e:	8d 50 01             	lea    edx,[eax+0x1]
c000e6a1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e6a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6a9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e6ad:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e6b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6b5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6b9:	01 d0                	add    eax,edx
c000e6bb:	83 c0 2c             	add    eax,0x2c
c000e6be:	8a 00                	mov    al,BYTE PTR [eax]
c000e6c0:	31 d2                	xor    edx,edx
c000e6c2:	88 c2                	mov    dl,al
c000e6c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6c8:	8d 48 01             	lea    ecx,[eax+0x1]
c000e6cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e6cf:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e6d3:	25 ff 00 00 00       	and    eax,0xff
c000e6d8:	c1 e0 08             	shl    eax,0x8
c000e6db:	89 d1                	mov    ecx,edx
c000e6dd:	09 c1                	or     ecx,eax
c000e6df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6e3:	8d 50 02             	lea    edx,[eax+0x2]
c000e6e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e6ea:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e6ee:	25 ff 00 00 00       	and    eax,0xff
c000e6f3:	c1 e0 10             	shl    eax,0x10
c000e6f6:	09 c1                	or     ecx,eax
c000e6f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6fc:	8d 50 03             	lea    edx,[eax+0x3]
c000e6ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e703:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e707:	25 ff 00 00 00       	and    eax,0xff
c000e70c:	c1 e0 18             	shl    eax,0x18
c000e70f:	09 c8                	or     eax,ecx
c000e711:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e715:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e71a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e71e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e722:	01 d0                	add    eax,edx
c000e724:	83 c0 2c             	add    eax,0x2c
c000e727:	8a 00                	mov    al,BYTE PTR [eax]
c000e729:	25 ff 00 00 00       	and    eax,0xff
c000e72e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e732:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e735:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e739:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e73d:	81 e2 ff 00 00 00    	and    edx,0xff
c000e743:	c1 e2 08             	shl    edx,0x8
c000e746:	09 d0                	or     eax,edx
c000e748:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e74d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e752:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e756:	25 ff 00 00 00       	and    eax,0xff
c000e75b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e75f:	88 90 60 10 02 c0    	mov    BYTE PTR [eax-0x3ffdefa0],dl
c000e765:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e769:	31 d2                	xor    edx,edx
c000e76b:	88 c2                	mov    dl,al
c000e76d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e772:	66 89 84 12 60 67 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd98a0],ax
c000e77a:	e9 b9 00 00 00       	jmp    c000e838 <scanMADT()+0x4ac>
c000e77f:	90                   	nop
c000e780:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e785:	0f 85 a1 00 00 00    	jne    c000e82c <scanMADT()+0x4a0>
c000e78b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e78f:	8d 50 01             	lea    edx,[eax+0x1]
c000e792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e796:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e79a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e79e:	25 ff 00 00 00       	and    eax,0xff
c000e7a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e7a7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e7ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e7af:	01 d0                	add    eax,edx
c000e7b1:	83 c0 2c             	add    eax,0x2c
c000e7b4:	8a 00                	mov    al,BYTE PTR [eax]
c000e7b6:	31 d2                	xor    edx,edx
c000e7b8:	88 c2                	mov    dl,al
c000e7ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e7be:	8d 48 01             	lea    ecx,[eax+0x1]
c000e7c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e7c5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e7c9:	25 ff 00 00 00       	and    eax,0xff
c000e7ce:	c1 e0 08             	shl    eax,0x8
c000e7d1:	09 d0                	or     eax,edx
c000e7d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e7d7:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e7dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e7e0:	8d 50 01             	lea    edx,[eax+0x1]
c000e7e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e7e7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e7eb:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e7ef:	25 ff 00 00 00       	and    eax,0xff
c000e7f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e7f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fc:	c1 e0 08             	shl    eax,0x8
c000e7ff:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e803:	89 c1                	mov    ecx,eax
c000e805:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e809:	c1 e0 18             	shl    eax,0x18
c000e80c:	89 c3                	mov    ebx,eax
c000e80e:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c000e813:	8d 50 01             	lea    edx,[eax+0x1]
c000e816:	89 15 d0 66 02 c0    	mov    DWORD PTR ds:0xc00266d0,edx
c000e81c:	09 d9                	or     ecx,ebx
c000e81e:	89 ca                	mov    edx,ecx
c000e820:	89 14 85 e0 66 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9920],edx
c000e827:	eb 0f                	jmp    c000e838 <scanMADT()+0x4ac>
c000e829:	8d 76 00             	lea    esi,[esi+0x0]
c000e82c:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e831:	75 05                	jne    c000e838 <scanMADT()+0x4ac>
c000e833:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e838:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e83c:	31 d2                	xor    edx,edx
c000e83e:	88 c2                	mov    dl,al
c000e840:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e844:	01 d0                	add    eax,edx
c000e846:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e84a:	e9 31 fc ff ff       	jmp    c000e480 <scanMADT()+0xf4>
c000e84f:	90                   	nop
c000e850:	90                   	nop
c000e851:	eb 05                	jmp    c000e858 <scanMADT()+0x4cc>
c000e853:	90                   	nop
c000e854:	90                   	nop
c000e855:	8d 76 00             	lea    esi,[esi+0x0]
c000e858:	83 c4 38             	add    esp,0x38
c000e85b:	5b                   	pop    ebx
c000e85c:	c3                   	ret    
c000e85d:	90                   	nop
c000e85e:	66 90                	xchg   ax,ax

c000e860 <ACPI::ACPI()>:
c000e860:	83 ec 0c             	sub    esp,0xc
c000e863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e867:	83 ec 08             	sub    esp,0x8
c000e86a:	68 11 fb 01 c0       	push   0xc001fb11
c000e86f:	50                   	push   eax
c000e870:	e8 6b d3 ff ff       	call   c000bbe0 <Device::Device(char const*)>
c000e875:	83 c4 10             	add    esp,0x10
c000e878:	ba 48 fc 01 c0       	mov    edx,0xc001fc48
c000e87d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e881:	89 10                	mov    DWORD PTR [eax],edx
c000e883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e887:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e88e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e892:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e8aa:	e8 dd fa ff ff       	call   c000e38c <scanMADT()>
c000e8af:	90                   	nop
c000e8b0:	83 c4 0c             	add    esp,0xc
c000e8b3:	c3                   	ret    

c000e8b4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e8b4:	83 ec 2c             	sub    esp,0x2c
c000e8b7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e8bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e8bf:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e8c3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e8c7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e8cc:	88 d0                	mov    al,dl
c000e8ce:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e8d2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e8d7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e8df:	90                   	nop
c000e8e0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e8e4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e8ea:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e8ee:	0f 8d 9c 00 00 00    	jge    c000e990 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e8f4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e8f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e8fc:	83 c2 2a             	add    edx,0x2a
c000e8ff:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e903:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e908:	75 7a                	jne    c000e984 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e90a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e90e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e912:	83 c2 2a             	add    edx,0x2a
c000e915:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e919:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e91d:	75 65                	jne    c000e984 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e91f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e924:	74 3a                	je     c000e960 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e926:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e92a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e92e:	83 c2 2a             	add    edx,0x2a
c000e931:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e935:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e939:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e93c:	39 c2                	cmp    edx,eax
c000e93e:	74 10                	je     c000e950 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e940:	83 ec 0c             	sub    esp,0xc
c000e943:	68 8c fa 01 c0       	push   0xc001fa8c
c000e948:	e8 4e 1a 00 00       	call   c001039b <KePanic(char const*)>
c000e94d:	83 c4 10             	add    esp,0x10
c000e950:	83 ec 0c             	sub    esp,0xc
c000e953:	68 16 fb 01 c0       	push   0xc001fb16
c000e958:	e8 3e 1a 00 00       	call   c001039b <KePanic(char const*)>
c000e95d:	83 c4 10             	add    esp,0x10
c000e960:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e964:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e968:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e96c:	83 c2 2a             	add    edx,0x2a
c000e96f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e973:	8b 02                	mov    eax,DWORD PTR [edx]
c000e975:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e978:	89 01                	mov    DWORD PTR [ecx],eax
c000e97a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e97d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e982:	66 90                	xchg   ax,ax
c000e984:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e988:	e9 53 ff ff ff       	jmp    c000e8e0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e98d:	8d 76 00             	lea    esi,[esi+0x0]
c000e990:	90                   	nop
c000e991:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e995:	83 c4 2c             	add    esp,0x2c
c000e998:	c2 04 00             	ret    0x4
c000e99b:	90                   	nop

c000e99c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e99c:	83 ec 1c             	sub    esp,0x1c
c000e99f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e9a3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e9a7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e9ab:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e9b0:	88 c8                	mov    al,cl
c000e9b2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e9b6:	88 d0                	mov    al,dl
c000e9b8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e9bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9c0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e9c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9ca:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e9cd:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e9d1:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e9d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9d9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e9df:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e9e3:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e9e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9ea:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e9ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9f3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e9f9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e9fd:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea04:	83 c2 2a             	add    edx,0x2a
c000ea07:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ea0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea0f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ea15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea19:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ea1c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ea20:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ea24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea28:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ea2e:	8d 50 01             	lea    edx,[eax+0x1]
c000ea31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea35:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ea3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea3f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ea45:	3d 00 02 00 00       	cmp    eax,0x200
c000ea4a:	75 10                	jne    c000ea5c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000ea4c:	83 ec 0c             	sub    esp,0xc
c000ea4f:	68 25 fb 01 c0       	push   0xc001fb25
c000ea54:	e8 42 19 00 00       	call   c001039b <KePanic(char const*)>
c000ea59:	83 c4 10             	add    esp,0x10
c000ea5c:	90                   	nop
c000ea5d:	83 c4 1c             	add    esp,0x1c
c000ea60:	c3                   	ret    
c000ea61:	90                   	nop
c000ea62:	66 90                	xchg   ax,ax

c000ea64 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ea64:	b8 00 00 00 00       	mov    eax,0x0
c000ea69:	c3                   	ret    
c000ea6a:	66 90                	xchg   ax,ax

c000ea6c <ACPI::detectPCI()>:
c000ea6c:	53                   	push   ebx
c000ea6d:	83 ec 28             	sub    esp,0x28
c000ea70:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ea75:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ea7a:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000ea7f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ea85:	83 e0 04             	and    eax,0x4
c000ea88:	84 c0                	test   al,al
c000ea8a:	74 2c                	je     c000eab8 <ACPI::detectPCI()+0x4c>
c000ea8c:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000ea91:	83 ec 08             	sub    esp,0x8
c000ea94:	68 42 fb 01 c0       	push   0xc001fb42
c000ea99:	50                   	push   eax
c000ea9a:	e8 75 f8 ff ff       	call   c000e314 <findDataTable(unsigned char*, char*)>
c000ea9f:	83 c4 10             	add    esp,0x10
c000eaa2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eaa6:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000eaab:	74 0b                	je     c000eab8 <ACPI::detectPCI()+0x4c>
c000eaad:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eab2:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eab7:	90                   	nop
c000eab8:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000eac0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eac4:	8a 00                	mov    al,BYTE PTR [eax]
c000eac6:	3c 01                	cmp    al,0x1
c000eac8:	75 0e                	jne    c000ead8 <ACPI::detectPCI()+0x6c>
c000eaca:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eacf:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ead4:	eb 2a                	jmp    c000eb00 <ACPI::detectPCI()+0x94>
c000ead6:	66 90                	xchg   ax,ax
c000ead8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eadc:	8a 00                	mov    al,BYTE PTR [eax]
c000eade:	3c 02                	cmp    al,0x2
c000eae0:	75 1e                	jne    c000eb00 <ACPI::detectPCI()+0x94>
c000eae2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eae7:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eaec:	74 12                	je     c000eb00 <ACPI::detectPCI()+0x94>
c000eaee:	83 ec 0c             	sub    esp,0xc
c000eaf1:	68 bc fa 01 c0       	push   0xc001fabc
c000eaf6:	e8 a0 18 00 00       	call   c001039b <KePanic(char const*)>
c000eafb:	83 c4 10             	add    esp,0x10
c000eafe:	66 90                	xchg   ax,ax
c000eb00:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000eb04:	83 f0 01             	xor    eax,0x1
c000eb07:	84 c0                	test   al,al
c000eb09:	74 41                	je     c000eb4c <ACPI::detectPCI()+0xe0>
c000eb0b:	e8 20 16 ff ff       	call   c0000130 <manualPCIProbe>
c000eb10:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eb14:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000eb19:	75 0d                	jne    c000eb28 <ACPI::detectPCI()+0xbc>
c000eb1b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb20:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eb25:	eb 25                	jmp    c000eb4c <ACPI::detectPCI()+0xe0>
c000eb27:	90                   	nop
c000eb28:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000eb2d:	75 1d                	jne    c000eb4c <ACPI::detectPCI()+0xe0>
c000eb2f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb34:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eb39:	74 11                	je     c000eb4c <ACPI::detectPCI()+0xe0>
c000eb3b:	83 ec 0c             	sub    esp,0xc
c000eb3e:	68 bc fa 01 c0       	push   0xc001fabc
c000eb43:	e8 53 18 00 00       	call   c001039b <KePanic(char const*)>
c000eb48:	83 c4 10             	add    esp,0x10
c000eb4b:	90                   	nop
c000eb4c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000eb51:	0f 84 85 00 00 00    	je     c000ebdc <ACPI::detectPCI()+0x170>
c000eb57:	83 ec 0c             	sub    esp,0xc
c000eb5a:	68 47 fb 01 c0       	push   0xc001fb47
c000eb5f:	e8 bf 11 00 00       	call   c000fd23 <KeSetBootMessage(char const*)>
c000eb64:	83 c4 10             	add    esp,0x10
c000eb67:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000eb6f:	83 ec 0c             	sub    esp,0xc
c000eb72:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000eb76:	e8 fa 8c ff ff       	call   c0007875 <malloc>
c000eb7b:	83 c4 10             	add    esp,0x10
c000eb7e:	89 c3                	mov    ebx,eax
c000eb80:	83 ec 0c             	sub    esp,0xc
c000eb83:	53                   	push   ebx
c000eb84:	e8 91 a8 00 00       	call   c001941a <PCI::PCI()>
c000eb89:	83 c4 10             	add    esp,0x10
c000eb8c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000eb90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb94:	83 ec 08             	sub    esp,0x8
c000eb97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eb9b:	50                   	push   eax
c000eb9c:	e8 a7 ce ff ff       	call   c000ba48 <Device::addChild(Device*)>
c000eba1:	83 c4 10             	add    esp,0x10
c000eba4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eba8:	8b 00                	mov    eax,DWORD PTR [eax]
c000ebaa:	83 c0 08             	add    eax,0x8
c000ebad:	8b 00                	mov    eax,DWORD PTR [eax]
c000ebaf:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ebb4:	74 0a                	je     c000ebc0 <ACPI::detectPCI()+0x154>
c000ebb6:	ba 01 00 00 00       	mov    edx,0x1
c000ebbb:	eb 0b                	jmp    c000ebc8 <ACPI::detectPCI()+0x15c>
c000ebbd:	8d 76 00             	lea    esi,[esi+0x0]
c000ebc0:	ba 02 00 00 00       	mov    edx,0x2
c000ebc5:	8d 76 00             	lea    esi,[esi+0x0]
c000ebc8:	6a 00                	push   0x0
c000ebca:	6a 00                	push   0x0
c000ebcc:	52                   	push   edx
c000ebcd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ebd1:	ff d0                	call   eax
c000ebd3:	83 c4 10             	add    esp,0x10
c000ebd6:	e9 91 00 00 00       	jmp    c000ec6c <ACPI::detectPCI()+0x200>
c000ebdb:	90                   	nop
c000ebdc:	83 ec 0c             	sub    esp,0xc
c000ebdf:	68 5f fb 01 c0       	push   0xc001fb5f
c000ebe4:	e8 3a 11 00 00       	call   c000fd23 <KeSetBootMessage(char const*)>
c000ebe9:	83 c4 10             	add    esp,0x10
c000ebec:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000ebf3:	83 ec 0c             	sub    esp,0xc
c000ebf6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ebfa:	e8 76 8c ff ff       	call   c0007875 <malloc>
c000ebff:	83 c4 10             	add    esp,0x10
c000ec02:	89 c3                	mov    ebx,eax
c000ec04:	83 ec 0c             	sub    esp,0xc
c000ec07:	53                   	push   ebx
c000ec08:	e8 73 b3 00 00       	call   c0019f80 <IDE::IDE()>
c000ec0d:	83 c4 10             	add    esp,0x10
c000ec10:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ec14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec18:	83 ec 08             	sub    esp,0x8
c000ec1b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ec1f:	50                   	push   eax
c000ec20:	e8 23 ce ff ff       	call   c000ba48 <Device::addChild(Device*)>
c000ec25:	83 c4 10             	add    esp,0x10
c000ec28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec2c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000ec36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec3a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000ec43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec47:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000ec50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec54:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec56:	83 c0 08             	add    eax,0x8
c000ec59:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec5b:	6a 00                	push   0x0
c000ec5d:	6a 00                	push   0x0
c000ec5f:	6a 00                	push   0x0
c000ec61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ec65:	ff d0                	call   eax
c000ec67:	83 c4 10             	add    esp,0x10
c000ec6a:	66 90                	xchg   ax,ax
c000ec6c:	90                   	nop
c000ec6d:	83 c4 28             	add    esp,0x28
c000ec70:	5b                   	pop    ebx
c000ec71:	c3                   	ret    
c000ec72:	66 90                	xchg   ax,ax

c000ec74 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000ec74:	83 ec 1c             	sub    esp,0x1c
c000ec77:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ec7b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ec7e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ec82:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000ec88:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ec8c:	25 ff 00 00 00       	and    eax,0xff
c000ec91:	83 ec 08             	sub    esp,0x8
c000ec94:	50                   	push   eax
c000ec95:	52                   	push   edx
c000ec96:	e8 c5 82 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c000ec9b:	83 c4 10             	add    esp,0x10
c000ec9e:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000eca2:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000eca8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ecac:	25 ff 00 00 00       	and    eax,0xff
c000ecb1:	83 ec 04             	sub    esp,0x4
c000ecb4:	6a 01                	push   0x1
c000ecb6:	50                   	push   eax
c000ecb7:	52                   	push   edx
c000ecb8:	e8 b9 83 ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c000ecbd:	83 c4 10             	add    esp,0x10
c000ecc0:	90                   	nop
c000ecc1:	83 c4 1c             	add    esp,0x1c
c000ecc4:	c3                   	ret    
c000ecc5:	90                   	nop
c000ecc6:	66 90                	xchg   ax,ax

c000ecc8 <ACPI::sleep()>:
c000ecc8:	83 ec 0c             	sub    esp,0xc
c000eccb:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c000ecd0:	85 c0                	test   eax,eax
c000ecd2:	74 08                	je     c000ecdc <ACPI::sleep()+0x14>
c000ecd4:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c000ecd9:	ff d0                	call   eax
c000ecdb:	90                   	nop
c000ecdc:	90                   	nop
c000ecdd:	83 c4 0c             	add    esp,0xc
c000ece0:	c3                   	ret    
c000ece1:	90                   	nop
c000ece2:	66 90                	xchg   ax,ax

c000ece4 <ACPI::open(int, int, void*)>:
c000ece4:	57                   	push   edi
c000ece5:	56                   	push   esi
c000ece6:	53                   	push   ebx
c000ece7:	81 ec 70 01 00 00    	sub    esp,0x170
c000eced:	83 ec 0c             	sub    esp,0xc
c000ecf0:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ecf7:	e8 70 fd ff ff       	call   c000ea6c <ACPI::detectPCI()>
c000ecfc:	83 c4 10             	add    esp,0x10
c000ecff:	83 ec 0c             	sub    esp,0xc
c000ed02:	68 e4 fa 01 c0       	push   0xc001fae4
c000ed07:	e8 17 10 00 00       	call   c000fd23 <KeSetBootMessage(char const*)>
c000ed0c:	83 c4 10             	add    esp,0x10
c000ed0f:	83 ec 0c             	sub    esp,0xc
c000ed12:	68 74 fb 01 c0       	push   0xc001fb74
c000ed17:	e8 3b 44 00 00       	call   c0013157 <Thr::loadKernelSymbolTable(char const*)>
c000ed1c:	83 c4 10             	add    esp,0x10
c000ed1f:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000ed27:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000ed32:	83 ec 0c             	sub    esp,0xc
c000ed35:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ed3c:	e8 34 8b ff ff       	call   c0007875 <malloc>
c000ed41:	83 c4 10             	add    esp,0x10
c000ed44:	89 c3                	mov    ebx,eax
c000ed46:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000ed4b:	83 ec 04             	sub    esp,0x4
c000ed4e:	50                   	push   eax
c000ed4f:	68 92 fb 01 c0       	push   0xc001fb92
c000ed54:	53                   	push   ebx
c000ed55:	e8 26 be ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c000ed5a:	83 c4 10             	add    esp,0x10
c000ed5d:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000ed64:	83 ec 08             	sub    esp,0x8
c000ed67:	6a 01                	push   0x1
c000ed69:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ed70:	e8 cb be ff ff       	call   c000ac40 <File::open(FileOpenMode)>
c000ed75:	83 c4 10             	add    esp,0x10
c000ed78:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000ed7f:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000ed87:	75 17                	jne    c000eda0 <ACPI::open(int, int, void*)+0xbc>
c000ed89:	83 ec 0c             	sub    esp,0xc
c000ed8c:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ed93:	e8 06 bf ff ff       	call   c000ac9e <File::close()>
c000ed98:	83 c4 10             	add    esp,0x10
c000ed9b:	eb 0b                	jmp    c000eda8 <ACPI::open(int, int, void*)+0xc4>
c000ed9d:	8d 76 00             	lea    esi,[esi+0x0]
c000eda0:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000eda8:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000edb0:	74 1e                	je     c000edd0 <ACPI::open(int, int, void*)+0xec>
c000edb2:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000edb9:	8b 00                	mov    eax,DWORD PTR [eax]
c000edbb:	83 c0 08             	add    eax,0x8
c000edbe:	8b 00                	mov    eax,DWORD PTR [eax]
c000edc0:	83 ec 0c             	sub    esp,0xc
c000edc3:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000edca:	ff d0                	call   eax
c000edcc:	83 c4 10             	add    esp,0x10
c000edcf:	90                   	nop
c000edd0:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000edd7:	83 f0 01             	xor    eax,0x1
c000edda:	84 c0                	test   al,al
c000eddc:	74 42                	je     c000ee20 <ACPI::open(int, int, void*)+0x13c>
c000edde:	83 ec 0c             	sub    esp,0xc
c000ede1:	68 b0 fb 01 c0       	push   0xc001fbb0
c000ede6:	e8 38 0f 00 00       	call   c000fd23 <KeSetBootMessage(char const*)>
c000edeb:	83 c4 10             	add    esp,0x10
c000edee:	83 ec 04             	sub    esp,0x4
c000edf1:	6a 0c                	push   0xc
c000edf3:	68 cb fb 01 c0       	push   0xc001fbcb
c000edf8:	68 dc fb 01 c0       	push   0xc001fbdc
c000edfd:	e8 57 39 00 00       	call   c0012759 <Reg::readIntWithDefault(char*, char*, int)>
c000ee02:	83 c4 10             	add    esp,0x10
c000ee05:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ee0c:	83 ec 0c             	sub    esp,0xc
c000ee0f:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ee16:	e8 3c a7 ff ff       	call   c0009557 <Virt::setupPageSwapping(int)>
c000ee1b:	83 c4 10             	add    esp,0x10
c000ee1e:	66 90                	xchg   ax,ax
c000ee20:	83 ec 0c             	sub    esp,0xc
c000ee23:	68 35 ec 01 c0       	push   0xc001ec35
c000ee28:	e8 f6 0e 00 00       	call   c000fd23 <KeSetBootMessage(char const*)>
c000ee2d:	83 c4 10             	add    esp,0x10
c000ee30:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ee37:	83 ec 08             	sub    esp,0x8
c000ee3a:	6a 13                	push   0x13
c000ee3c:	50                   	push   eax
c000ee3d:	e8 1e cf ff ff       	call   c000bd60 <getDevicesOfType(DeviceType)>
c000ee42:	83 c4 0c             	add    esp,0xc
c000ee45:	8d 76 00             	lea    esi,[esi+0x0]
c000ee48:	83 ec 0c             	sub    esp,0xc
c000ee4b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ee52:	50                   	push   eax
c000ee53:	e8 d4 f1 00 00       	call   c001e02c <LinkedList<Device>::isEmpty()>
c000ee58:	83 c4 10             	add    esp,0x10
c000ee5b:	83 f0 01             	xor    eax,0x1
c000ee5e:	84 c0                	test   al,al
c000ee60:	0f 84 46 01 00 00    	je     c000efac <ACPI::open(int, int, void*)+0x2c8>
c000ee66:	83 ec 0c             	sub    esp,0xc
c000ee69:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ee70:	50                   	push   eax
c000ee71:	e8 d2 f1 00 00       	call   c001e048 <LinkedList<Device>::getFirstElement()>
c000ee76:	83 c4 10             	add    esp,0x10
c000ee79:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ee80:	83 ec 0c             	sub    esp,0xc
c000ee83:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ee8a:	50                   	push   eax
c000ee8b:	e8 c0 f1 00 00       	call   c001e050 <LinkedList<Device>::removeFirst()>
c000ee90:	83 c4 10             	add    esp,0x10
c000ee93:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ee9a:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000eea1:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000eea8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eeac:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000eeb2:	ba 09 00 00 00       	mov    edx,0x9
c000eeb7:	fc                   	cld    
c000eeb8:	89 c7                	mov    edi,eax
c000eeba:	89 de                	mov    esi,ebx
c000eebc:	89 d1                	mov    ecx,edx
c000eebe:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000eec0:	83 ec 08             	sub    esp,0x8
c000eec3:	8d 44 24 38          	lea    eax,[esp+0x38]
c000eec7:	50                   	push   eax
c000eec8:	83 ec 24             	sub    esp,0x24
c000eecb:	89 e0                	mov    eax,esp
c000eecd:	89 c3                	mov    ebx,eax
c000eecf:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000eed3:	ba 09 00 00 00       	mov    edx,0x9
c000eed8:	89 df                	mov    edi,ebx
c000eeda:	89 c6                	mov    esi,eax
c000eedc:	89 d1                	mov    ecx,edx
c000eede:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000eee0:	e8 17 aa 00 00       	call   c00198fc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000eee5:	83 c4 30             	add    esp,0x30
c000eee8:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000eeef:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000eef7:	0f 84 4b ff ff ff    	je     c000ee48 <ACPI::open(int, int, void*)+0x164>
c000eefd:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ef08:	83 ec 0c             	sub    esp,0xc
c000ef0b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ef12:	e8 5e 89 ff ff       	call   c0007875 <malloc>
c000ef17:	83 c4 10             	add    esp,0x10
c000ef1a:	89 c3                	mov    ebx,eax
c000ef1c:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000ef21:	83 ec 04             	sub    esp,0x4
c000ef24:	50                   	push   eax
c000ef25:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ef2c:	53                   	push   ebx
c000ef2d:	e8 4e bc ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c000ef32:	83 c4 10             	add    esp,0x10
c000ef35:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ef3c:	83 ec 0c             	sub    esp,0xc
c000ef3f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ef46:	e8 63 bf ff ff       	call   c000aeae <File::exists()>
c000ef4b:	83 c4 10             	add    esp,0x10
c000ef4e:	84 c0                	test   al,al
c000ef50:	74 2a                	je     c000ef7c <ACPI::open(int, int, void*)+0x298>
c000ef52:	83 ec 08             	sub    esp,0x8
c000ef55:	6a 01                	push   0x1
c000ef57:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ef5e:	e8 6b 4c 00 00       	call   c0013bce <Thr::loadDLL(char const*, bool)>
c000ef63:	83 c4 10             	add    esp,0x10
c000ef66:	83 ec 08             	sub    esp,0x8
c000ef69:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ef70:	50                   	push   eax
c000ef71:	e8 89 4e 00 00       	call   c0013dff <Thr::executeDLL(unsigned long, void*)>
c000ef76:	83 c4 10             	add    esp,0x10
c000ef79:	8d 76 00             	lea    esi,[esi+0x0]
c000ef7c:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000ef84:	0f 84 be fe ff ff    	je     c000ee48 <ACPI::open(int, int, void*)+0x164>
c000ef8a:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000ef91:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef93:	83 c0 08             	add    eax,0x8
c000ef96:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef98:	83 ec 0c             	sub    esp,0xc
c000ef9b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000efa2:	ff d0                	call   eax
c000efa4:	83 c4 10             	add    esp,0x10
c000efa7:	e9 9c fe ff ff       	jmp    c000ee48 <ACPI::open(int, int, void*)+0x164>
c000efac:	83 ec 0c             	sub    esp,0xc
c000efaf:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000efb6:	50                   	push   eax
c000efb7:	e8 6c f0 00 00       	call   c001e028 <LinkedList<Device>::~LinkedList()>
c000efbc:	83 c4 10             	add    esp,0x10
c000efbf:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000efc5:	83 ec 08             	sub    esp,0x8
c000efc8:	6a 01                	push   0x1
c000efca:	68 e3 fb 01 c0       	push   0xc001fbe3
c000efcf:	e8 fa 4b 00 00       	call   c0013bce <Thr::loadDLL(char const*, bool)>
c000efd4:	83 c4 10             	add    esp,0x10
c000efd7:	83 ec 08             	sub    esp,0x8
c000efda:	53                   	push   ebx
c000efdb:	50                   	push   eax
c000efdc:	e8 1e 4e 00 00       	call   c0013dff <Thr::executeDLL(unsigned long, void*)>
c000efe1:	83 c4 10             	add    esp,0x10
c000efe4:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000efe9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000efef:	83 e0 04             	and    eax,0x4
c000eff2:	84 c0                	test   al,al
c000eff4:	0f 84 16 01 00 00    	je     c000f110 <ACPI::open(int, int, void*)+0x42c>
c000effa:	83 ec 0c             	sub    esp,0xc
c000effd:	68 00 fc 01 c0       	push   0xc001fc00
c000f002:	e8 1c 0d 00 00       	call   c000fd23 <KeSetBootMessage(char const*)>
c000f007:	83 c4 10             	add    esp,0x10
c000f00a:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f015:	83 ec 0c             	sub    esp,0xc
c000f018:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f01f:	e8 51 88 ff ff       	call   c0007875 <malloc>
c000f024:	83 c4 10             	add    esp,0x10
c000f027:	89 c3                	mov    ebx,eax
c000f029:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000f02e:	83 ec 04             	sub    esp,0x4
c000f031:	50                   	push   eax
c000f032:	68 1d fc 01 c0       	push   0xc001fc1d
c000f037:	53                   	push   ebx
c000f038:	e8 43 bb ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c000f03d:	83 c4 10             	add    esp,0x10
c000f040:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f047:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f04f:	74 1b                	je     c000f06c <ACPI::open(int, int, void*)+0x388>
c000f051:	83 ec 0c             	sub    esp,0xc
c000f054:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f05b:	e8 4e be ff ff       	call   c000aeae <File::exists()>
c000f060:	83 c4 10             	add    esp,0x10
c000f063:	84 c0                	test   al,al
c000f065:	74 05                	je     c000f06c <ACPI::open(int, int, void*)+0x388>
c000f067:	b0 01                	mov    al,0x1
c000f069:	eb 05                	jmp    c000f070 <ACPI::open(int, int, void*)+0x38c>
c000f06b:	90                   	nop
c000f06c:	b0 00                	mov    al,0x0
c000f06e:	66 90                	xchg   ax,ax
c000f070:	84 c0                	test   al,al
c000f072:	74 28                	je     c000f09c <ACPI::open(int, int, void*)+0x3b8>
c000f074:	83 ec 08             	sub    esp,0x8
c000f077:	6a 01                	push   0x1
c000f079:	68 1d fc 01 c0       	push   0xc001fc1d
c000f07e:	e8 4b 4b 00 00       	call   c0013bce <Thr::loadDLL(char const*, bool)>
c000f083:	83 c4 10             	add    esp,0x10
c000f086:	83 ec 08             	sub    esp,0x8
c000f089:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f090:	50                   	push   eax
c000f091:	e8 69 4d 00 00       	call   c0013dff <Thr::executeDLL(unsigned long, void*)>
c000f096:	83 c4 10             	add    esp,0x10
c000f099:	8d 76 00             	lea    esi,[esi+0x0]
c000f09c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f0a4:	74 2a                	je     c000f0d0 <ACPI::open(int, int, void*)+0x3ec>
c000f0a6:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f0ae:	74 20                	je     c000f0d0 <ACPI::open(int, int, void*)+0x3ec>
c000f0b0:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f0b7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b9:	83 c0 08             	add    eax,0x8
c000f0bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0be:	83 ec 0c             	sub    esp,0xc
c000f0c1:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f0c8:	ff d0                	call   eax
c000f0ca:	83 c4 10             	add    esp,0x10
c000f0cd:	8d 76 00             	lea    esi,[esi+0x0]
c000f0d0:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000f0d5:	83 ec 08             	sub    esp,0x8
c000f0d8:	68 3a fc 01 c0       	push   0xc001fc3a
c000f0dd:	50                   	push   eax
c000f0de:	e8 31 f2 ff ff       	call   c000e314 <findDataTable(unsigned char*, char*)>
c000f0e3:	83 c4 10             	add    esp,0x10
c000f0e6:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f0ed:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f0f5:	74 19                	je     c000f110 <ACPI::open(int, int, void*)+0x42c>
c000f0f7:	83 ec 08             	sub    esp,0x8
c000f0fa:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f101:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f108:	e8 67 fb ff ff       	call   c000ec74 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f10d:	83 c4 10             	add    esp,0x10
c000f110:	b8 00 00 00 00       	mov    eax,0x0
c000f115:	81 c4 70 01 00 00    	add    esp,0x170
c000f11b:	5b                   	pop    ebx
c000f11c:	5e                   	pop    esi
c000f11d:	5f                   	pop    edi
c000f11e:	c3                   	ret    
c000f11f:	90                   	nop

c000f120 <CPU::close(int, int, void*)>:
c000f120:	31 c0                	xor    eax,eax
c000f122:	c3                   	ret    
c000f123:	90                   	nop

c000f124 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f124:	60                   	pusha  
c000f125:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f129:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f12d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f131:	9c                   	pushf  
c000f132:	fa                   	cli    
c000f133:	0f 09                	wbinvd 
c000f135:	0f 30                	wrmsr  
c000f137:	9d                   	popf   
c000f138:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f13c:	89 02                	mov    DWORD PTR [edx],eax
c000f13e:	61                   	popa   
c000f13f:	c3                   	ret    

c000f140 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f140:	60                   	pusha  
c000f141:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f145:	9c                   	pushf  
c000f146:	fa                   	cli    
c000f147:	0f 09                	wbinvd 
c000f149:	31 c0                	xor    eax,eax
c000f14b:	31 d2                	xor    edx,edx
c000f14d:	0f 32                	rdmsr  
c000f14f:	9d                   	popf   
c000f150:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f154:	89 02                	mov    DWORD PTR [edx],eax
c000f156:	61                   	popa   
c000f157:	c3                   	ret    

c000f158 <CPU::AMD_K6_writeback(int, int, int)>:
c000f158:	56                   	push   esi
c000f159:	53                   	push   ebx
c000f15a:	83 ec 10             	sub    esp,0x10
c000f15d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f161:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f166:	75 5d                	jne    c000f1c5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f168:	83 f8 08             	cmp    eax,0x8
c000f16b:	75 09                	jne    c000f176 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f16d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f172:	7e 13                	jle    c000f187 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f174:	eb 30                	jmp    c000f1a6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f176:	83 f8 06             	cmp    eax,0x6
c000f179:	7c 4a                	jl     c000f1c5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f17b:	83 f8 07             	cmp    eax,0x7
c000f17e:	7e 07                	jle    c000f187 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f180:	83 f8 09             	cmp    eax,0x9
c000f183:	74 21                	je     c000f1a6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f185:	eb 3e                	jmp    c000f1c5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f187:	89 e6                	mov    esi,esp
c000f189:	8b 1d dc 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023edc
c000f18f:	56                   	push   esi
c000f190:	c1 eb 15             	shr    ebx,0x15
c000f193:	68 82 00 00 c0       	push   0xc0000082
c000f198:	83 e3 7e             	and    ebx,0x7e
c000f19b:	e8 a0 ff ff ff       	call   c000f140 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f1a0:	56                   	push   esi
c000f1a1:	6a 00                	push   0x0
c000f1a3:	53                   	push   ebx
c000f1a4:	eb 12                	jmp    c000f1b8 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f1a6:	89 e3                	mov    ebx,esp
c000f1a8:	53                   	push   ebx
c000f1a9:	68 82 00 00 c0       	push   0xc0000082
c000f1ae:	e8 8d ff ff ff       	call   c000f140 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f1b3:	53                   	push   ebx
c000f1b4:	6a 00                	push   0x0
c000f1b6:	6a 00                	push   0x0
c000f1b8:	68 82 00 00 c0       	push   0xc0000082
c000f1bd:	e8 62 ff ff ff       	call   c000f124 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f1c2:	83 c4 18             	add    esp,0x18
c000f1c5:	83 c4 10             	add    esp,0x10
c000f1c8:	5b                   	pop    ebx
c000f1c9:	5e                   	pop    esi
c000f1ca:	c3                   	ret    
c000f1cb:	90                   	nop

c000f1cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f1cc:	55                   	push   ebp
c000f1cd:	57                   	push   edi
c000f1ce:	56                   	push   esi
c000f1cf:	53                   	push   ebx
c000f1d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f1d4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f1d8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f1dc:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f1e0:	39 05 70 10 02 c0    	cmp    DWORD PTR ds:0xc0021070,eax
c000f1e6:	75 23                	jne    c000f20b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f1e8:	a1 2c 69 02 c0       	mov    eax,ds:0xc002692c
c000f1ed:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f1f1:	89 06                	mov    DWORD PTR [esi],eax
c000f1f3:	a1 28 69 02 c0       	mov    eax,ds:0xc0026928
c000f1f8:	89 07                	mov    DWORD PTR [edi],eax
c000f1fa:	a1 24 69 02 c0       	mov    eax,ds:0xc0026924
c000f1ff:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f202:	a1 20 69 02 c0       	mov    eax,ds:0xc0026920
c000f207:	89 02                	mov    DWORD PTR [edx],eax
c000f209:	eb 3f                	jmp    c000f24a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f20b:	31 c9                	xor    ecx,ecx
c000f20d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f211:	0f a2                	cpuid  
c000f213:	89 06                	mov    DWORD PTR [esi],eax
c000f215:	89 1f                	mov    DWORD PTR [edi],ebx
c000f217:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f21b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f21e:	89 10                	mov    DWORD PTR [eax],edx
c000f220:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f224:	a3 70 10 02 c0       	mov    ds:0xc0021070,eax
c000f229:	8b 06                	mov    eax,DWORD PTR [esi]
c000f22b:	a3 2c 69 02 c0       	mov    ds:0xc002692c,eax
c000f230:	8b 07                	mov    eax,DWORD PTR [edi]
c000f232:	a3 28 69 02 c0       	mov    ds:0xc0026928,eax
c000f237:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f23a:	a3 24 69 02 c0       	mov    ds:0xc0026924,eax
c000f23f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f243:	8b 00                	mov    eax,DWORD PTR [eax]
c000f245:	a3 20 69 02 c0       	mov    ds:0xc0026920,eax
c000f24a:	5b                   	pop    ebx
c000f24b:	5e                   	pop    esi
c000f24c:	5f                   	pop    edi
c000f24d:	5d                   	pop    ebp
c000f24e:	c3                   	ret    
c000f24f:	90                   	nop

c000f250 <CPU::cpuidCheckEDX(unsigned int)>:
c000f250:	83 ec 10             	sub    esp,0x10
c000f253:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f257:	50                   	push   eax
c000f258:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f25c:	50                   	push   eax
c000f25d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f261:	50                   	push   eax
c000f262:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f266:	50                   	push   eax
c000f267:	6a 01                	push   0x1
c000f269:	e8 5e ff ff ff       	call   c000f1cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f26e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f272:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f276:	0f 95 c0             	setne  al
c000f279:	83 c4 24             	add    esp,0x24
c000f27c:	c3                   	ret    
c000f27d:	90                   	nop

c000f27e <CPU::cpuidCheckECX(unsigned int)>:
c000f27e:	83 ec 10             	sub    esp,0x10
c000f281:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f285:	50                   	push   eax
c000f286:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f28a:	50                   	push   eax
c000f28b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f28f:	50                   	push   eax
c000f290:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f294:	50                   	push   eax
c000f295:	6a 01                	push   0x1
c000f297:	e8 30 ff ff ff       	call   c000f1cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f29c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2a0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f2a4:	0f 95 c0             	setne  al
c000f2a7:	83 c4 24             	add    esp,0x24
c000f2aa:	c3                   	ret    
c000f2ab:	90                   	nop

c000f2ac <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f2ac:	83 ec 10             	sub    esp,0x10
c000f2af:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2b3:	50                   	push   eax
c000f2b4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2b8:	50                   	push   eax
c000f2b9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2bd:	50                   	push   eax
c000f2be:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2c2:	50                   	push   eax
c000f2c3:	6a 07                	push   0x7
c000f2c5:	e8 02 ff ff ff       	call   c000f1cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f2ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2ce:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f2d2:	0f 95 c0             	setne  al
c000f2d5:	83 c4 24             	add    esp,0x24
c000f2d8:	c3                   	ret    
c000f2d9:	90                   	nop

c000f2da <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f2da:	83 ec 10             	sub    esp,0x10
c000f2dd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2e1:	50                   	push   eax
c000f2e2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2e6:	50                   	push   eax
c000f2e7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2eb:	50                   	push   eax
c000f2ec:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2f0:	50                   	push   eax
c000f2f1:	6a 07                	push   0x7
c000f2f3:	e8 d4 fe ff ff       	call   c000f1cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f2f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2fc:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f300:	0f 95 c0             	setne  al
c000f303:	83 c4 24             	add    esp,0x24
c000f306:	c3                   	ret    
c000f307:	90                   	nop

c000f308 <CPU::CPU()>:
c000f308:	83 ec 0c             	sub    esp,0xc
c000f30b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f30f:	83 ec 08             	sub    esp,0x8
c000f312:	68 5d fd 01 c0       	push   0xc001fd5d
c000f317:	50                   	push   eax
c000f318:	e8 c3 c8 ff ff       	call   c000bbe0 <Device::Device(char const*)>
c000f31d:	83 c4 10             	add    esp,0x10
c000f320:	ba e4 fd 01 c0       	mov    edx,0xc001fde4
c000f325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f329:	89 10                	mov    DWORD PTR [eax],edx
c000f32b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f32f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f33d:	05 78 01 00 00       	add    eax,0x178
c000f342:	83 ec 0c             	sub    esp,0xc
c000f345:	50                   	push   eax
c000f346:	e8 e9 7d ff ff       	call   c0007134 <GDT::GDT()>
c000f34b:	83 c4 10             	add    esp,0x10
c000f34e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f352:	05 7c 09 00 00       	add    eax,0x97c
c000f357:	83 ec 0c             	sub    esp,0xc
c000f35a:	50                   	push   eax
c000f35b:	e8 10 80 ff ff       	call   c0007370 <IDT::IDT()>
c000f360:	83 c4 10             	add    esp,0x10
c000f363:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f367:	05 7c 11 00 00       	add    eax,0x117c
c000f36c:	83 ec 0c             	sub    esp,0xc
c000f36f:	50                   	push   eax
c000f370:	e8 1b 99 ff ff       	call   c0008c90 <TSS::TSS()>
c000f375:	83 c4 10             	add    esp,0x10
c000f378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f37c:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f387:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000f391:	90                   	nop
c000f392:	83 c4 0c             	add    esp,0xc
c000f395:	c3                   	ret    

c000f396 <CPU::displayFeatures()>:
c000f396:	c3                   	ret    
c000f397:	90                   	nop

c000f398 <CPU::detectFeatures()>:
c000f398:	55                   	push   ebp
c000f399:	57                   	push   edi
c000f39a:	56                   	push   esi
c000f39b:	53                   	push   ebx
c000f39c:	83 ec 30             	sub    esp,0x30
c000f39f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f3a3:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f3ad:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f3b4:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f3ba:	6a 0d                	push   0xd
c000f3bc:	6a 00                	push   0x0
c000f3be:	55                   	push   ebp
c000f3bf:	e8 0c 11 ff ff       	call   c00004d0 <memset>
c000f3c4:	83 c4 10             	add    esp,0x10
c000f3c7:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000f3cc:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f3d3:	0f 84 d5 05 00 00    	je     c000f9ae <CPU::detectFeatures()+0x616>
c000f3d9:	83 ec 0c             	sub    esp,0xc
c000f3dc:	89 ef                	mov    edi,ebp
c000f3de:	6a 10                	push   0x10
c000f3e0:	e8 6b fe ff ff       	call   c000f250 <CPU::cpuidCheckEDX(unsigned int)>
c000f3e5:	83 e0 01             	and    eax,0x1
c000f3e8:	8d 14 00             	lea    edx,[eax+eax*1]
c000f3eb:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f3f1:	83 e0 fd             	and    eax,0xfffffffd
c000f3f4:	09 d0                	or     eax,edx
c000f3f6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f3fc:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f403:	e8 48 fe ff ff       	call   c000f250 <CPU::cpuidCheckEDX(unsigned int)>
c000f408:	83 e0 01             	and    eax,0x1
c000f40b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f412:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f418:	83 e0 fb             	and    eax,0xfffffffb
c000f41b:	09 d0                	or     eax,edx
c000f41d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f423:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f42a:	e8 21 fe ff ff       	call   c000f250 <CPU::cpuidCheckEDX(unsigned int)>
c000f42f:	83 e0 01             	and    eax,0x1
c000f432:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f439:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f43f:	83 e0 f7             	and    eax,0xfffffff7
c000f442:	09 d0                	or     eax,edx
c000f444:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f44a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f451:	e8 fa fd ff ff       	call   c000f250 <CPU::cpuidCheckEDX(unsigned int)>
c000f456:	83 e0 01             	and    eax,0x1
c000f459:	c1 e0 04             	shl    eax,0x4
c000f45c:	88 c2                	mov    dl,al
c000f45e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f464:	83 e0 ef             	and    eax,0xffffffef
c000f467:	09 d0                	or     eax,edx
c000f469:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f46f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f476:	e8 d5 fd ff ff       	call   c000f250 <CPU::cpuidCheckEDX(unsigned int)>
c000f47b:	83 e0 01             	and    eax,0x1
c000f47e:	c1 e0 05             	shl    eax,0x5
c000f481:	88 c2                	mov    dl,al
c000f483:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f489:	83 e0 df             	and    eax,0xffffffdf
c000f48c:	09 d0                	or     eax,edx
c000f48e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f494:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f49b:	e8 b0 fd ff ff       	call   c000f250 <CPU::cpuidCheckEDX(unsigned int)>
c000f4a0:	83 e0 01             	and    eax,0x1
c000f4a3:	8d 14 00             	lea    edx,[eax+eax*1]
c000f4a6:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f4ac:	83 e0 fd             	and    eax,0xfffffffd
c000f4af:	09 d0                	or     eax,edx
c000f4b1:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f4b7:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f4be:	e8 8d fd ff ff       	call   c000f250 <CPU::cpuidCheckEDX(unsigned int)>
c000f4c3:	83 e0 01             	and    eax,0x1
c000f4c6:	c1 e0 06             	shl    eax,0x6
c000f4c9:	88 c2                	mov    dl,al
c000f4cb:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f4d1:	83 e0 bf             	and    eax,0xffffffbf
c000f4d4:	09 d0                	or     eax,edx
c000f4d6:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f4dc:	58                   	pop    eax
c000f4dd:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f4e1:	50                   	push   eax
c000f4e2:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f4e6:	50                   	push   eax
c000f4e7:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f4eb:	56                   	push   esi
c000f4ec:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f4f0:	50                   	push   eax
c000f4f1:	6a 00                	push   0x0
c000f4f3:	e8 d4 fc ff ff       	call   c000f1cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f4f8:	b8 04 00 00 00       	mov    eax,0x4
c000f4fd:	89 c1                	mov    ecx,eax
c000f4ff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f501:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f507:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f50b:	89 c1                	mov    ecx,eax
c000f50d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f50f:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f515:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f519:	89 c1                	mov    ecx,eax
c000f51b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f51d:	83 c4 18             	add    esp,0x18
c000f520:	68 6c fc 01 c0       	push   0xc001fc6c
c000f525:	55                   	push   ebp
c000f526:	e8 b5 11 ff ff       	call   c00006e0 <strcmp>
c000f52b:	83 c4 10             	add    esp,0x10
c000f52e:	85 c0                	test   eax,eax
c000f530:	75 0f                	jne    c000f541 <CPU::detectFeatures()+0x1a9>
c000f532:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f53c:	e9 22 02 00 00       	jmp    c000f763 <CPU::detectFeatures()+0x3cb>
c000f541:	50                   	push   eax
c000f542:	50                   	push   eax
c000f543:	68 79 fc 01 c0       	push   0xc001fc79
c000f548:	55                   	push   ebp
c000f549:	e8 92 11 ff ff       	call   c00006e0 <strcmp>
c000f54e:	83 c4 10             	add    esp,0x10
c000f551:	85 c0                	test   eax,eax
c000f553:	74 dd                	je     c000f532 <CPU::detectFeatures()+0x19a>
c000f555:	50                   	push   eax
c000f556:	50                   	push   eax
c000f557:	68 86 fc 01 c0       	push   0xc001fc86
c000f55c:	55                   	push   ebp
c000f55d:	e8 7e 11 ff ff       	call   c00006e0 <strcmp>
c000f562:	83 c4 10             	add    esp,0x10
c000f565:	85 c0                	test   eax,eax
c000f567:	74 2a                	je     c000f593 <CPU::detectFeatures()+0x1fb>
c000f569:	50                   	push   eax
c000f56a:	50                   	push   eax
c000f56b:	68 93 fc 01 c0       	push   0xc001fc93
c000f570:	55                   	push   ebp
c000f571:	e8 6a 11 ff ff       	call   c00006e0 <strcmp>
c000f576:	83 c4 10             	add    esp,0x10
c000f579:	85 c0                	test   eax,eax
c000f57b:	74 16                	je     c000f593 <CPU::detectFeatures()+0x1fb>
c000f57d:	50                   	push   eax
c000f57e:	50                   	push   eax
c000f57f:	68 a0 fc 01 c0       	push   0xc001fca0
c000f584:	55                   	push   ebp
c000f585:	e8 56 11 ff ff       	call   c00006e0 <strcmp>
c000f58a:	83 c4 10             	add    esp,0x10
c000f58d:	85 c0                	test   eax,eax
c000f58f:	74 48                	je     c000f5d9 <CPU::detectFeatures()+0x241>
c000f591:	eb 0f                	jmp    c000f5a2 <CPU::detectFeatures()+0x20a>
c000f593:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f59d:	e9 c1 01 00 00       	jmp    c000f763 <CPU::detectFeatures()+0x3cb>
c000f5a2:	50                   	push   eax
c000f5a3:	50                   	push   eax
c000f5a4:	68 ad fc 01 c0       	push   0xc001fcad
c000f5a9:	55                   	push   ebp
c000f5aa:	e8 31 11 ff ff       	call   c00006e0 <strcmp>
c000f5af:	83 c4 10             	add    esp,0x10
c000f5b2:	85 c0                	test   eax,eax
c000f5b4:	74 23                	je     c000f5d9 <CPU::detectFeatures()+0x241>
c000f5b6:	57                   	push   edi
c000f5b7:	57                   	push   edi
c000f5b8:	68 ba fc 01 c0       	push   0xc001fcba
c000f5bd:	55                   	push   ebp
c000f5be:	e8 1d 11 ff ff       	call   c00006e0 <strcmp>
c000f5c3:	83 c4 10             	add    esp,0x10
c000f5c6:	85 c0                	test   eax,eax
c000f5c8:	75 1e                	jne    c000f5e8 <CPU::detectFeatures()+0x250>
c000f5ca:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f5d4:	e9 8a 01 00 00       	jmp    c000f763 <CPU::detectFeatures()+0x3cb>
c000f5d9:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f5e3:	e9 7b 01 00 00       	jmp    c000f763 <CPU::detectFeatures()+0x3cb>
c000f5e8:	56                   	push   esi
c000f5e9:	56                   	push   esi
c000f5ea:	68 c7 fc 01 c0       	push   0xc001fcc7
c000f5ef:	55                   	push   ebp
c000f5f0:	e8 eb 10 ff ff       	call   c00006e0 <strcmp>
c000f5f5:	83 c4 10             	add    esp,0x10
c000f5f8:	85 c0                	test   eax,eax
c000f5fa:	75 0f                	jne    c000f60b <CPU::detectFeatures()+0x273>
c000f5fc:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f606:	e9 58 01 00 00       	jmp    c000f763 <CPU::detectFeatures()+0x3cb>
c000f60b:	51                   	push   ecx
c000f60c:	51                   	push   ecx
c000f60d:	68 86 fc 01 c0       	push   0xc001fc86
c000f612:	55                   	push   ebp
c000f613:	e8 c8 10 ff ff       	call   c00006e0 <strcmp>
c000f618:	83 c4 10             	add    esp,0x10
c000f61b:	85 c0                	test   eax,eax
c000f61d:	75 0f                	jne    c000f62e <CPU::detectFeatures()+0x296>
c000f61f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f629:	e9 35 01 00 00       	jmp    c000f763 <CPU::detectFeatures()+0x3cb>
c000f62e:	52                   	push   edx
c000f62f:	52                   	push   edx
c000f630:	68 d4 fc 01 c0       	push   0xc001fcd4
c000f635:	55                   	push   ebp
c000f636:	e8 a5 10 ff ff       	call   c00006e0 <strcmp>
c000f63b:	83 c4 10             	add    esp,0x10
c000f63e:	85 c0                	test   eax,eax
c000f640:	75 0f                	jne    c000f651 <CPU::detectFeatures()+0x2b9>
c000f642:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f64c:	e9 12 01 00 00       	jmp    c000f763 <CPU::detectFeatures()+0x3cb>
c000f651:	50                   	push   eax
c000f652:	50                   	push   eax
c000f653:	68 e1 fc 01 c0       	push   0xc001fce1
c000f658:	55                   	push   ebp
c000f659:	e8 82 10 ff ff       	call   c00006e0 <strcmp>
c000f65e:	83 c4 10             	add    esp,0x10
c000f661:	85 c0                	test   eax,eax
c000f663:	75 0f                	jne    c000f674 <CPU::detectFeatures()+0x2dc>
c000f665:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f66f:	e9 ef 00 00 00       	jmp    c000f763 <CPU::detectFeatures()+0x3cb>
c000f674:	50                   	push   eax
c000f675:	50                   	push   eax
c000f676:	68 ee fc 01 c0       	push   0xc001fcee
c000f67b:	55                   	push   ebp
c000f67c:	e8 5f 10 ff ff       	call   c00006e0 <strcmp>
c000f681:	83 c4 10             	add    esp,0x10
c000f684:	85 c0                	test   eax,eax
c000f686:	75 0f                	jne    c000f697 <CPU::detectFeatures()+0x2ff>
c000f688:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f692:	e9 cc 00 00 00       	jmp    c000f763 <CPU::detectFeatures()+0x3cb>
c000f697:	50                   	push   eax
c000f698:	50                   	push   eax
c000f699:	68 fb fc 01 c0       	push   0xc001fcfb
c000f69e:	55                   	push   ebp
c000f69f:	e8 3c 10 ff ff       	call   c00006e0 <strcmp>
c000f6a4:	83 c4 10             	add    esp,0x10
c000f6a7:	85 c0                	test   eax,eax
c000f6a9:	75 0f                	jne    c000f6ba <CPU::detectFeatures()+0x322>
c000f6ab:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f6b5:	e9 a9 00 00 00       	jmp    c000f763 <CPU::detectFeatures()+0x3cb>
c000f6ba:	50                   	push   eax
c000f6bb:	50                   	push   eax
c000f6bc:	68 08 fd 01 c0       	push   0xc001fd08
c000f6c1:	55                   	push   ebp
c000f6c2:	e8 19 10 ff ff       	call   c00006e0 <strcmp>
c000f6c7:	83 c4 10             	add    esp,0x10
c000f6ca:	85 c0                	test   eax,eax
c000f6cc:	75 0f                	jne    c000f6dd <CPU::detectFeatures()+0x345>
c000f6ce:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f6d8:	e9 86 00 00 00       	jmp    c000f763 <CPU::detectFeatures()+0x3cb>
c000f6dd:	50                   	push   eax
c000f6de:	50                   	push   eax
c000f6df:	68 15 fd 01 c0       	push   0xc001fd15
c000f6e4:	55                   	push   ebp
c000f6e5:	e8 f6 0f ff ff       	call   c00006e0 <strcmp>
c000f6ea:	83 c4 10             	add    esp,0x10
c000f6ed:	85 c0                	test   eax,eax
c000f6ef:	75 0c                	jne    c000f6fd <CPU::detectFeatures()+0x365>
c000f6f1:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f6fb:	eb 66                	jmp    c000f763 <CPU::detectFeatures()+0x3cb>
c000f6fd:	50                   	push   eax
c000f6fe:	50                   	push   eax
c000f6ff:	68 22 fd 01 c0       	push   0xc001fd22
c000f704:	55                   	push   ebp
c000f705:	e8 d6 0f ff ff       	call   c00006e0 <strcmp>
c000f70a:	83 c4 10             	add    esp,0x10
c000f70d:	85 c0                	test   eax,eax
c000f70f:	75 0c                	jne    c000f71d <CPU::detectFeatures()+0x385>
c000f711:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f71b:	eb 46                	jmp    c000f763 <CPU::detectFeatures()+0x3cb>
c000f71d:	57                   	push   edi
c000f71e:	57                   	push   edi
c000f71f:	68 2f fd 01 c0       	push   0xc001fd2f
c000f724:	55                   	push   ebp
c000f725:	e8 b6 0f ff ff       	call   c00006e0 <strcmp>
c000f72a:	83 c4 10             	add    esp,0x10
c000f72d:	85 c0                	test   eax,eax
c000f72f:	74 e0                	je     c000f711 <CPU::detectFeatures()+0x379>
c000f731:	56                   	push   esi
c000f732:	56                   	push   esi
c000f733:	68 3c fd 01 c0       	push   0xc001fd3c
c000f738:	55                   	push   ebp
c000f739:	e8 a2 0f ff ff       	call   c00006e0 <strcmp>
c000f73e:	83 c4 10             	add    esp,0x10
c000f741:	85 c0                	test   eax,eax
c000f743:	74 cc                	je     c000f711 <CPU::detectFeatures()+0x379>
c000f745:	51                   	push   ecx
c000f746:	51                   	push   ecx
c000f747:	68 49 fd 01 c0       	push   0xc001fd49
c000f74c:	55                   	push   ebp
c000f74d:	e8 8e 0f ff ff       	call   c00006e0 <strcmp>
c000f752:	83 c4 10             	add    esp,0x10
c000f755:	85 c0                	test   eax,eax
c000f757:	74 b8                	je     c000f711 <CPU::detectFeatures()+0x379>
c000f759:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f763:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f768:	0f 86 be 00 00 00    	jbe    c000f82c <CPU::detectFeatures()+0x494>
c000f76e:	83 ec 0c             	sub    esp,0xc
c000f771:	68 80 00 00 00       	push   0x80
c000f776:	e8 31 fb ff ff       	call   c000f2ac <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f77b:	83 e0 01             	and    eax,0x1
c000f77e:	c1 e0 06             	shl    eax,0x6
c000f781:	88 c2                	mov    dl,al
c000f783:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f789:	83 e0 bf             	and    eax,0xffffffbf
c000f78c:	09 d0                	or     eax,edx
c000f78e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f794:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f79b:	e8 0c fb ff ff       	call   c000f2ac <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f7a0:	83 e0 01             	and    eax,0x1
c000f7a3:	c1 e0 04             	shl    eax,0x4
c000f7a6:	88 c2                	mov    dl,al
c000f7a8:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f7ae:	83 e0 ef             	and    eax,0xffffffef
c000f7b1:	09 d0                	or     eax,edx
c000f7b3:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f7b9:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f7c0:	e8 e7 fa ff ff       	call   c000f2ac <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f7c5:	c1 e0 07             	shl    eax,0x7
c000f7c8:	88 c2                	mov    dl,al
c000f7ca:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f7d0:	83 e0 7f             	and    eax,0x7f
c000f7d3:	09 d0                	or     eax,edx
c000f7d5:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f7db:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f7e2:	e8 f3 fa ff ff       	call   c000f2da <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f7e7:	83 e0 01             	and    eax,0x1
c000f7ea:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f7f1:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f7f7:	83 e0 f7             	and    eax,0xfffffff7
c000f7fa:	09 d0                	or     eax,edx
c000f7fc:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f802:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f809:	e8 cc fa ff ff       	call   c000f2da <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f80e:	83 c4 10             	add    esp,0x10
c000f811:	83 e0 01             	and    eax,0x1
c000f814:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f81b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f821:	83 e0 fb             	and    eax,0xfffffffb
c000f824:	09 d0                	or     eax,edx
c000f826:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f82c:	83 ec 0c             	sub    esp,0xc
c000f82f:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f833:	50                   	push   eax
c000f834:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f838:	50                   	push   eax
c000f839:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f83d:	56                   	push   esi
c000f83e:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f842:	50                   	push   eax
c000f843:	6a 01                	push   0x1
c000f845:	e8 82 f9 ff ff       	call   c000f1cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f84a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f84e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f854:	88 ca                	mov    dl,cl
c000f856:	83 e0 f0             	and    eax,0xfffffff0
c000f859:	83 e2 0f             	and    edx,0xf
c000f85c:	09 d0                	or     eax,edx
c000f85e:	88 ca                	mov    dl,cl
c000f860:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f866:	c0 ea 04             	shr    dl,0x4
c000f869:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f86d:	0f b6 c2             	movzx  eax,dl
c000f870:	83 c4 20             	add    esp,0x20
c000f873:	c1 e0 06             	shl    eax,0x6
c000f876:	89 c7                	mov    edi,eax
c000f878:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f87e:	66 25 3f c0          	and    ax,0xc03f
c000f882:	09 f8                	or     eax,edi
c000f884:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f88b:	89 c8                	mov    eax,ecx
c000f88d:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f894:	c1 e8 08             	shr    eax,0x8
c000f897:	83 e5 3f             	and    ebp,0x3f
c000f89a:	83 e0 0f             	and    eax,0xf
c000f89d:	89 c7                	mov    edi,eax
c000f89f:	c1 e7 06             	shl    edi,0x6
c000f8a2:	09 ef                	or     edi,ebp
c000f8a4:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f8ab:	89 fa                	mov    edx,edi
c000f8ad:	83 e5 c0             	and    ebp,0xffffffc0
c000f8b0:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f8b6:	88 c2                	mov    dl,al
c000f8b8:	c0 ea 02             	shr    dl,0x2
c000f8bb:	89 d7                	mov    edi,edx
c000f8bd:	09 ef                	or     edi,ebp
c000f8bf:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f8c5:	89 fa                	mov    edx,edi
c000f8c7:	83 e5 cf             	and    ebp,0xffffffcf
c000f8ca:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f8d0:	89 cf                	mov    edi,ecx
c000f8d2:	c1 ef 0c             	shr    edi,0xc
c000f8d5:	83 e7 03             	and    edi,0x3
c000f8d8:	c1 e7 04             	shl    edi,0x4
c000f8db:	09 ef                	or     edi,ebp
c000f8dd:	3c 06                	cmp    al,0x6
c000f8df:	89 fa                	mov    edx,edi
c000f8e1:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f8e7:	74 04                	je     c000f8ed <CPU::detectFeatures()+0x555>
c000f8e9:	3c 0f                	cmp    al,0xf
c000f8eb:	75 5c                	jne    c000f949 <CPU::detectFeatures()+0x5b1>
c000f8ed:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f8f1:	89 cf                	mov    edi,ecx
c000f8f3:	c1 ef 10             	shr    edi,0x10
c000f8f6:	c1 e7 04             	shl    edi,0x4
c000f8f9:	09 fa                	or     edx,edi
c000f8fb:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f901:	0f b6 d2             	movzx  edx,dl
c000f904:	66 81 e7 3f c0       	and    di,0xc03f
c000f909:	c1 e2 06             	shl    edx,0x6
c000f90c:	09 fa                	or     edx,edi
c000f90e:	3c 0f                	cmp    al,0xf
c000f910:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f917:	75 30                	jne    c000f949 <CPU::detectFeatures()+0x5b1>
c000f919:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f91f:	c1 e9 14             	shr    ecx,0x14
c000f922:	83 e0 3f             	and    eax,0x3f
c000f925:	83 c1 0f             	add    ecx,0xf
c000f928:	88 ca                	mov    dl,cl
c000f92a:	c0 e9 02             	shr    cl,0x2
c000f92d:	c1 e2 06             	shl    edx,0x6
c000f930:	09 d0                	or     eax,edx
c000f932:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f938:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f93e:	83 e0 c0             	and    eax,0xffffffc0
c000f941:	09 c1                	or     ecx,eax
c000f943:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f949:	83 ec 0c             	sub    esp,0xc
c000f94c:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f953:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f957:	50                   	push   eax
c000f958:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f95c:	55                   	push   ebp
c000f95d:	56                   	push   esi
c000f95e:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f962:	57                   	push   edi
c000f963:	68 00 00 00 80       	push   0x80000000
c000f968:	e8 5f f8 ff ff       	call   c000f1cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f96d:	83 c4 20             	add    esp,0x20
c000f970:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f978:	76 22                	jbe    c000f99c <CPU::detectFeatures()+0x604>
c000f97a:	83 ec 0c             	sub    esp,0xc
c000f97d:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f981:	50                   	push   eax
c000f982:	55                   	push   ebp
c000f983:	56                   	push   esi
c000f984:	57                   	push   edi
c000f985:	68 01 00 00 80       	push   0x80000001
c000f98a:	e8 3d f8 ff ff       	call   c000f1cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f98f:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f999:	83 c4 20             	add    esp,0x20
c000f99c:	52                   	push   edx
c000f99d:	52                   	push   edx
c000f99e:	68 55 fd 01 c0       	push   0xc001fd55
c000f9a3:	53                   	push   ebx
c000f9a4:	e8 29 c2 ff ff       	call   c000bbd2 <Device::setName(char const*)>
c000f9a9:	83 c4 10             	add    esp,0x10
c000f9ac:	eb 67                	jmp    c000fa15 <CPU::detectFeatures()+0x67d>
c000f9ae:	50                   	push   eax
c000f9af:	50                   	push   eax
c000f9b0:	68 ba fc 01 c0       	push   0xc001fcba
c000f9b5:	55                   	push   ebp
c000f9b6:	e8 45 0c ff ff       	call   c0000600 <strcpy>
c000f9bb:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f9c5:	e8 f9 07 ff ff       	call   c00001c3 <is486>
c000f9ca:	83 c4 10             	add    esp,0x10
c000f9cd:	85 c0                	test   eax,eax
c000f9cf:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f9d5:	74 1d                	je     c000f9f4 <CPU::detectFeatures()+0x65c>
c000f9d7:	83 c8 07             	or     eax,0x7
c000f9da:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f9e0:	0f 20 c0             	mov    eax,cr0
c000f9e3:	83 e0 14             	and    eax,0x14
c000f9e6:	83 f8 04             	cmp    eax,0x4
c000f9e9:	75 0e                	jne    c000f9f9 <CPU::detectFeatures()+0x661>
c000f9eb:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f9f2:	eb 21                	jmp    c000fa15 <CPU::detectFeatures()+0x67d>
c000f9f4:	83 e0 f8             	and    eax,0xfffffff8
c000f9f7:	eb e1                	jmp    c000f9da <CPU::detectFeatures()+0x642>
c000f9f9:	e8 a0 07 ff ff       	call   c000019e <hasLegacyFPU>
c000f9fe:	83 e0 01             	and    eax,0x1
c000fa01:	8d 14 00             	lea    edx,[eax+eax*1]
c000fa04:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fa0a:	83 e0 fd             	and    eax,0xfffffffd
c000fa0d:	09 d0                	or     eax,edx
c000fa0f:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fa15:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000fa1c:	74 0e                	je     c000fa2c <CPU::detectFeatures()+0x694>
c000fa1e:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000fa23:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000fa2a:	eb 20                	jmp    c000fa4c <CPU::detectFeatures()+0x6b4>
c000fa2c:	e8 6d 07 ff ff       	call   c000019e <hasLegacyFPU>
c000fa31:	83 e0 01             	and    eax,0x1
c000fa34:	8d 14 00             	lea    edx,[eax+eax*1]
c000fa37:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fa3d:	83 e0 fd             	and    eax,0xfffffffd
c000fa40:	09 d0                	or     eax,edx
c000fa42:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fa48:	a8 02                	test   al,0x2
c000fa4a:	75 d2                	jne    c000fa1e <CPU::detectFeatures()+0x686>
c000fa4c:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000fa53:	83 c4 2c             	add    esp,0x2c
c000fa56:	5b                   	pop    ebx
c000fa57:	5e                   	pop    esi
c000fa58:	5f                   	pop    edi
c000fa59:	5d                   	pop    ebp
c000fa5a:	c3                   	ret    
c000fa5b:	90                   	nop

c000fa5c <CPU::setupSMEP()>:
c000fa5c:	0f 20 e0             	mov    eax,cr4
c000fa5f:	0d 00 00 10 00       	or     eax,0x100000
c000fa64:	0f 22 e0             	mov    cr4,eax
c000fa67:	c3                   	ret    

c000fa68 <CPU::setupUMIP()>:
c000fa68:	0f 20 e0             	mov    eax,cr4
c000fa6b:	80 cc 08             	or     ah,0x8
c000fa6e:	0f 22 e0             	mov    cr4,eax
c000fa71:	c3                   	ret    

c000fa72 <CPU::setupTSC()>:
c000fa72:	0f 20 e0             	mov    eax,cr4
c000fa75:	83 c8 04             	or     eax,0x4
c000fa78:	0f 22 e0             	mov    cr4,eax
c000fa7b:	c3                   	ret    

c000fa7c <CPU::setupLargePages()>:
c000fa7c:	0f 20 e0             	mov    eax,cr4
c000fa7f:	83 c8 10             	or     eax,0x10
c000fa82:	0f 22 e0             	mov    cr4,eax
c000fa85:	c3                   	ret    

c000fa86 <CPU::setupPAT()>:
c000fa86:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000fa8b:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000fa92:	74 2c                	je     c000fac0 <CPU::setupPAT()+0x3a>
c000fa94:	53                   	push   ebx
c000fa95:	83 ec 10             	sub    esp,0x10
c000fa98:	68 77 02 00 00       	push   0x277
c000fa9d:	50                   	push   eax
c000fa9e:	e8 09 74 ff ff       	call   c0006eac <Computer::rdmsr(unsigned int)>
c000faa3:	83 e2 f8             	and    edx,0xfffffff8
c000faa6:	83 ca 01             	or     edx,0x1
c000faa9:	52                   	push   edx
c000faaa:	50                   	push   eax
c000faab:	68 77 02 00 00       	push   0x277
c000fab0:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c000fab6:	e8 1d 74 ff ff       	call   c0006ed8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000fabb:	83 c4 28             	add    esp,0x28
c000fabe:	5b                   	pop    ebx
c000fabf:	c3                   	ret    
c000fac0:	c3                   	ret    
c000fac1:	90                   	nop

c000fac2 <CPU::setupMTRR()>:
c000fac2:	c3                   	ret    
c000fac3:	90                   	nop

c000fac4 <CPU::setupGlobalPages()>:
c000fac4:	0f 20 e0             	mov    eax,cr4
c000fac7:	0c 80                	or     al,0x80
c000fac9:	0f 22 e0             	mov    cr4,eax
c000facc:	c3                   	ret    
c000facd:	90                   	nop

c000face <CPU::allowUsermodeDataAccess()>:
c000face:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fad2:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fad9:	74 03                	je     c000fade <CPU::allowUsermodeDataAccess()+0x10>
c000fadb:	0f 01 cb             	stac   
c000fade:	c3                   	ret    
c000fadf:	90                   	nop

c000fae0 <CPU::prohibitUsermodeDataAccess()>:
c000fae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fae4:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000faeb:	74 03                	je     c000faf0 <CPU::prohibitUsermodeDataAccess()+0x10>
c000faed:	0f 01 ca             	clac   
c000faf0:	c3                   	ret    
c000faf1:	90                   	nop

c000faf2 <CPU::setupSMAP()>:
c000faf2:	0f 20 e0             	mov    eax,cr4
c000faf5:	0d 00 00 20 00       	or     eax,0x200000
c000fafa:	0f 22 e0             	mov    cr4,eax
c000fafd:	eb e1                	jmp    c000fae0 <CPU::prohibitUsermodeDataAccess()>
c000faff:	90                   	nop

c000fb00 <CPU::setupFeatures()>:
c000fb00:	53                   	push   ebx
c000fb01:	83 ec 08             	sub    esp,0x8
c000fb04:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb08:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000fb0f:	74 18                	je     c000fb29 <CPU::setupFeatures()+0x29>
c000fb11:	83 ec 0c             	sub    esp,0xc
c000fb14:	68 61 fd 01 c0       	push   0xc001fd61
c000fb19:	e8 ec aa ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c000fb1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb21:	e8 42 ff ff ff       	call   c000fa68 <CPU::setupUMIP()>
c000fb26:	83 c4 10             	add    esp,0x10
c000fb29:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000fb30:	74 18                	je     c000fb4a <CPU::setupFeatures()+0x4a>
c000fb32:	83 ec 0c             	sub    esp,0xc
c000fb35:	68 6b fd 01 c0       	push   0xc001fd6b
c000fb3a:	e8 cb aa ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c000fb3f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb42:	e8 2b ff ff ff       	call   c000fa72 <CPU::setupTSC()>
c000fb47:	83 c4 10             	add    esp,0x10
c000fb4a:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000fb51:	74 18                	je     c000fb6b <CPU::setupFeatures()+0x6b>
c000fb53:	83 ec 0c             	sub    esp,0xc
c000fb56:	68 74 fd 01 c0       	push   0xc001fd74
c000fb5b:	e8 aa aa ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c000fb60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb63:	e8 14 ff ff ff       	call   c000fa7c <CPU::setupLargePages()>
c000fb68:	83 c4 10             	add    esp,0x10
c000fb6b:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000fb72:	74 18                	je     c000fb8c <CPU::setupFeatures()+0x8c>
c000fb74:	83 ec 0c             	sub    esp,0xc
c000fb77:	68 7d fd 01 c0       	push   0xc001fd7d
c000fb7c:	e8 89 aa ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c000fb81:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb84:	e8 3b ff ff ff       	call   c000fac4 <CPU::setupGlobalPages()>
c000fb89:	83 c4 10             	add    esp,0x10
c000fb8c:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000fb93:	74 18                	je     c000fbad <CPU::setupFeatures()+0xad>
c000fb95:	83 ec 0c             	sub    esp,0xc
c000fb98:	68 8f fd 01 c0       	push   0xc001fd8f
c000fb9d:	e8 68 aa ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c000fba2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fba5:	e8 dc fe ff ff       	call   c000fa86 <CPU::setupPAT()>
c000fbaa:	83 c4 10             	add    esp,0x10
c000fbad:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000fbb4:	74 11                	je     c000fbc7 <CPU::setupFeatures()+0xc7>
c000fbb6:	c7 44 24 10 98 fd 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fd98
c000fbbe:	83 c4 08             	add    esp,0x8
c000fbc1:	5b                   	pop    ebx
c000fbc2:	e9 43 aa ff ff       	jmp    c000a60a <Dbg::kprintf(char const*, ...)>
c000fbc7:	83 c4 08             	add    esp,0x8
c000fbca:	5b                   	pop    ebx
c000fbcb:	c3                   	ret    

c000fbcc <CPU::open(int, int, void*)>:
c000fbcc:	57                   	push   edi
c000fbcd:	56                   	push   esi
c000fbce:	53                   	push   ebx
c000fbcf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fbd3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fbd7:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000fbdd:	83 ec 0c             	sub    esp,0xc
c000fbe0:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000fbe6:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000fbec:	50                   	push   eax
c000fbed:	e8 a4 75 ff ff       	call   c0007196 <GDT::setup()>
c000fbf2:	83 c4 0c             	add    esp,0xc
c000fbf5:	6a 00                	push   0x0
c000fbf7:	68 ef be ad de       	push   0xdeadbeef
c000fbfc:	57                   	push   edi
c000fbfd:	e8 d2 90 ff ff       	call   c0008cd4 <TSS::setup(unsigned long, unsigned long)>
c000fc02:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fc05:	e8 aa 90 ff ff       	call   c0008cb4 <TSS::flush()>
c000fc0a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000fc10:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc13:	e8 ce 77 ff ff       	call   c00073e6 <IDT::setup()>
c000fc18:	b8 00 04 00 00       	mov    eax,0x400
c000fc1d:	0f 23 f8             	mov    db7,eax
c000fc20:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000fc2a:	e8 22 7f ff ff       	call   c0007b51 <Phys::allocatePage()>
c000fc2f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000fc35:	89 30                	mov    DWORD PTR [eax],esi
c000fc37:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000fc3d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fc40:	58                   	pop    eax
c000fc41:	5a                   	pop    edx
c000fc42:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fc48:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fc4c:	e8 9b a0 ff ff       	call   c0009cec <VAS::setCPUSpecific(unsigned long)>
c000fc51:	c7 04 24 a2 fd 01 c0 	mov    DWORD PTR [esp],0xc001fda2
c000fc58:	e8 c6 00 00 00       	call   c000fd23 <KeSetBootMessage(char const*)>
c000fc5d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc60:	e8 33 f7 ff ff       	call   c000f398 <CPU::detectFeatures()>
c000fc65:	c7 04 24 c5 fd 01 c0 	mov    DWORD PTR [esp],0xc001fdc5
c000fc6c:	e8 b2 00 00 00       	call   c000fd23 <KeSetBootMessage(char const*)>
c000fc71:	e8 c9 68 00 00       	call   c001653f <HalInitialise()>
c000fc76:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c000fc7b:	83 e0 10             	and    eax,0x10
c000fc7e:	83 f8 01             	cmp    eax,0x1
c000fc81:	19 c0                	sbb    eax,eax
c000fc83:	83 e0 46             	and    eax,0x46
c000fc86:	83 c0 1e             	add    eax,0x1e
c000fc89:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc8c:	e8 dc d6 ff ff       	call   c000d36d <setupTimer(int)>
c000fc91:	83 c4 10             	add    esp,0x10
c000fc94:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fc9a:	f6 05 d0 3e 02 c0 20 	test   BYTE PTR ds:0xc0023ed0,0x20
c000fca1:	74 0c                	je     c000fcaf <CPU::open(int, int, void*)+0xe3>
c000fca3:	83 ec 0c             	sub    esp,0xc
c000fca6:	53                   	push   ebx
c000fca7:	e8 54 fe ff ff       	call   c000fb00 <CPU::setupFeatures()>
c000fcac:	83 c4 10             	add    esp,0x10
c000fcaf:	5b                   	pop    ebx
c000fcb0:	31 c0                	xor    eax,eax
c000fcb2:	5e                   	pop    esi
c000fcb3:	5f                   	pop    edi
c000fcb4:	c3                   	ret    

c000fcb5 <KeDisplaySplashScreen()>:
c000fcb5:	55                   	push   ebp
c000fcb6:	bd 05 00 00 00       	mov    ebp,0x5
c000fcbb:	57                   	push   edi
c000fcbc:	bf 80 10 02 c0       	mov    edi,0xc0021080
c000fcc1:	56                   	push   esi
c000fcc2:	be 0a 00 00 00       	mov    esi,0xa
c000fcc7:	53                   	push   ebx
c000fcc8:	31 db                	xor    ebx,ebx
c000fcca:	83 ec 0c             	sub    esp,0xc
c000fccd:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fcd0:	84 c0                	test   al,al
c000fcd2:	74 47                	je     c000fd1b <KeDisplaySplashScreen()+0x66>
c000fcd4:	80 bb b6 10 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdef4a],0xdb
c000fcdb:	75 13                	jne    c000fcf0 <KeDisplaySplashScreen()+0x3b>
c000fcdd:	0f b6 93 b5 10 02 c0 	movzx  edx,BYTE PTR [ebx-0x3ffdef4b]
c000fce4:	83 e2 fe             	and    edx,0xfffffffe
c000fce7:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fced:	75 01                	jne    c000fcf0 <KeDisplaySplashScreen()+0x3b>
c000fcef:	46                   	inc    esi
c000fcf0:	3c 0d                	cmp    al,0xd
c000fcf2:	74 24                	je     c000fd18 <KeDisplaySplashScreen()+0x63>
c000fcf4:	3c 0a                	cmp    al,0xa
c000fcf6:	75 0a                	jne    c000fd02 <KeDisplaySplashScreen()+0x4d>
c000fcf8:	45                   	inc    ebp
c000fcf9:	be 0a 00 00 00       	mov    esi,0xa
c000fcfe:	31 db                	xor    ebx,ebx
c000fd00:	eb 16                	jmp    c000fd18 <KeDisplaySplashScreen()+0x63>
c000fd02:	83 ec 0c             	sub    esp,0xc
c000fd05:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fd08:	55                   	push   ebp
c000fd09:	43                   	inc    ebx
c000fd0a:	52                   	push   edx
c000fd0b:	6a 00                	push   0x0
c000fd0d:	6a 0e                	push   0xe
c000fd0f:	50                   	push   eax
c000fd10:	e8 8f 74 00 00       	call   c00171a4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fd15:	83 c4 20             	add    esp,0x20
c000fd18:	47                   	inc    edi
c000fd19:	eb b2                	jmp    c000fccd <KeDisplaySplashScreen()+0x18>
c000fd1b:	83 c4 0c             	add    esp,0xc
c000fd1e:	5b                   	pop    ebx
c000fd1f:	5e                   	pop    esi
c000fd20:	5f                   	pop    edi
c000fd21:	5d                   	pop    ebp
c000fd22:	c3                   	ret    

c000fd23 <KeSetBootMessage(char const*)>:
c000fd23:	57                   	push   edi
c000fd24:	56                   	push   esi
c000fd25:	53                   	push   ebx
c000fd26:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fd2c:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fd33:	68 9e 00 00 00       	push   0x9e
c000fd38:	6a 00                	push   0x0
c000fd3a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fd3e:	56                   	push   esi
c000fd3f:	e8 8c 07 ff ff       	call   c00004d0 <memset>
c000fd44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd47:	e8 f4 07 ff ff       	call   c0000540 <strlen>
c000fd4c:	ba 50 00 00 00       	mov    edx,0x50
c000fd51:	83 c4 10             	add    esp,0x10
c000fd54:	29 c2                	sub    edx,eax
c000fd56:	31 c9                	xor    ecx,ecx
c000fd58:	83 e2 fe             	and    edx,0xfffffffe
c000fd5b:	01 f2                	add    edx,esi
c000fd5d:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fd62:	84 c0                	test   al,al
c000fd64:	74 0a                	je     c000fd70 <KeSetBootMessage(char const*)+0x4d>
c000fd66:	80 cc 0f             	or     ah,0xf
c000fd69:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fd6d:	41                   	inc    ecx
c000fd6e:	eb ed                	jmp    c000fd5d <KeSetBootMessage(char const*)+0x3a>
c000fd70:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fd75:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fd7a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd7c:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fd82:	5b                   	pop    ebx
c000fd83:	5e                   	pop    esi
c000fd84:	5f                   	pop    edi
c000fd85:	c3                   	ret    

c000fd86 <EnvVarContainer::getEnv(char const*)>:
c000fd86:	57                   	push   edi
c000fd87:	56                   	push   esi
c000fd88:	53                   	push   ebx
c000fd89:	31 db                	xor    ebx,ebx
c000fd8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fd8f:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fd91:	7e 2b                	jle    c000fdbe <EnvVarContainer::getEnv(char const*)+0x38>
c000fd93:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fd9a:	50                   	push   eax
c000fd9b:	50                   	push   eax
c000fd9c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fd9f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fda2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fda6:	e8 35 09 ff ff       	call   c00006e0 <strcmp>
c000fdab:	83 c4 10             	add    esp,0x10
c000fdae:	85 c0                	test   eax,eax
c000fdb0:	75 09                	jne    c000fdbb <EnvVarContainer::getEnv(char const*)+0x35>
c000fdb2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fdb5:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fdb9:	eb 05                	jmp    c000fdc0 <EnvVarContainer::getEnv(char const*)+0x3a>
c000fdbb:	43                   	inc    ebx
c000fdbc:	eb d1                	jmp    c000fd8f <EnvVarContainer::getEnv(char const*)+0x9>
c000fdbe:	31 c0                	xor    eax,eax
c000fdc0:	5b                   	pop    ebx
c000fdc1:	5e                   	pop    esi
c000fdc2:	5f                   	pop    edi
c000fdc3:	c3                   	ret    

c000fdc4 <EnvVarContainer::setEnv(char const*, char const*)>:
c000fdc4:	55                   	push   ebp
c000fdc5:	57                   	push   edi
c000fdc6:	56                   	push   esi
c000fdc7:	53                   	push   ebx
c000fdc8:	83 ec 28             	sub    esp,0x28
c000fdcb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fdcf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fdd3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fdd7:	56                   	push   esi
c000fdd8:	e8 63 07 ff ff       	call   c0000540 <strlen>
c000fddd:	40                   	inc    eax
c000fdde:	89 04 24             	mov    DWORD PTR [esp],eax
c000fde1:	e8 8f 7a ff ff       	call   c0007875 <malloc>
c000fde6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fde9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fded:	e8 4e 07 ff ff       	call   c0000540 <strlen>
c000fdf2:	40                   	inc    eax
c000fdf3:	89 04 24             	mov    DWORD PTR [esp],eax
c000fdf6:	e8 7a 7a ff ff       	call   c0007875 <malloc>
c000fdfb:	89 34 24             	mov    DWORD PTR [esp],esi
c000fdfe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fe02:	e8 39 07 ff ff       	call   c0000540 <strlen>
c000fe07:	83 c4 0c             	add    esp,0xc
c000fe0a:	40                   	inc    eax
c000fe0b:	50                   	push   eax
c000fe0c:	6a 00                	push   0x0
c000fe0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fe12:	e8 b9 06 ff ff       	call   c00004d0 <memset>
c000fe17:	89 34 24             	mov    DWORD PTR [esp],esi
c000fe1a:	e8 21 07 ff ff       	call   c0000540 <strlen>
c000fe1f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fe23:	8d 48 01             	lea    ecx,[eax+0x1]
c000fe26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fe2b:	89 de                	mov    esi,ebx
c000fe2d:	e8 0e 07 ff ff       	call   c0000540 <strlen>
c000fe32:	83 c4 0c             	add    esp,0xc
c000fe35:	40                   	inc    eax
c000fe36:	50                   	push   eax
c000fe37:	6a 00                	push   0x0
c000fe39:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fe3d:	e8 8e 06 ff ff       	call   c00004d0 <memset>
c000fe42:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fe45:	e8 f6 06 ff ff       	call   c0000540 <strlen>
c000fe4a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fe4e:	8d 48 01             	lea    ecx,[eax+0x1]
c000fe51:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe53:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fe56:	40                   	inc    eax
c000fe57:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fe5a:	c1 e0 03             	shl    eax,0x3
c000fe5d:	5a                   	pop    edx
c000fe5e:	59                   	pop    ecx
c000fe5f:	50                   	push   eax
c000fe60:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fe63:	e8 f9 79 ff ff       	call   c0007861 <realloc>
c000fe68:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fe6c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fe6f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fe72:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fe76:	b9 08 00 00 00       	mov    ecx,0x8
c000fe7b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe7d:	83 c4 2c             	add    esp,0x2c
c000fe80:	5b                   	pop    ebx
c000fe81:	5e                   	pop    esi
c000fe82:	5f                   	pop    edi
c000fe83:	5d                   	pop    ebp
c000fe84:	c3                   	ret    
c000fe85:	90                   	nop

c000fe86 <EnvVarContainer::deleteEnv(char const*)>:
c000fe86:	c3                   	ret    
c000fe87:	90                   	nop

c000fe88 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fe88:	55                   	push   ebp
c000fe89:	57                   	push   edi
c000fe8a:	56                   	push   esi
c000fe8b:	53                   	push   ebx
c000fe8c:	81 ec 38 01 00 00    	sub    esp,0x138
c000fe92:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fe99:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fea0:	68 14 01 00 00       	push   0x114
c000fea5:	e8 cb 79 ff ff       	call   c0007875 <malloc>
c000feaa:	83 c4 0c             	add    esp,0xc
c000fead:	89 c3                	mov    ebx,eax
c000feaf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000feb2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000feb9:	50                   	push   eax
c000feba:	e8 c1 ac ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c000febf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fec2:	e8 e7 af ff ff       	call   c000aeae <File::exists()>
c000fec7:	83 c4 10             	add    esp,0x10
c000feca:	84 c0                	test   al,al
c000fecc:	75 31                	jne    c000feff <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fece:	50                   	push   eax
c000fecf:	50                   	push   eax
c000fed0:	6a 12                	push   0x12
c000fed2:	53                   	push   ebx
c000fed3:	e8 68 ad ff ff       	call   c000ac40 <File::open(FileOpenMode)>
c000fed8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000feda:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fedd:	89 34 24             	mov    DWORD PTR [esp],esi
c000fee0:	e8 5b 06 ff ff       	call   c0000540 <strlen>
c000fee5:	5a                   	pop    edx
c000fee6:	31 d2                	xor    edx,edx
c000fee8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000feec:	51                   	push   ecx
c000feed:	56                   	push   esi
c000feee:	52                   	push   edx
c000feef:	50                   	push   eax
c000fef0:	53                   	push   ebx
c000fef1:	ff d7                	call   edi
c000fef3:	83 c4 14             	add    esp,0x14
c000fef6:	53                   	push   ebx
c000fef7:	e8 a2 ad ff ff       	call   c000ac9e <File::close()>
c000fefc:	83 c4 10             	add    esp,0x10
c000feff:	56                   	push   esi
c000ff00:	31 f6                	xor    esi,esi
c000ff02:	68 00 01 00 00       	push   0x100
c000ff07:	6a 00                	push   0x0
c000ff09:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000ff0d:	50                   	push   eax
c000ff0e:	e8 bd 05 ff ff       	call   c00004d0 <memset>
c000ff13:	5f                   	pop    edi
c000ff14:	58                   	pop    eax
c000ff15:	6a 01                	push   0x1
c000ff17:	53                   	push   ebx
c000ff18:	e8 23 ad ff ff       	call   c000ac40 <File::open(FileOpenMode)>
c000ff1d:	83 c4 10             	add    esp,0x10
c000ff20:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ff28:	83 ec 0c             	sub    esp,0xc
c000ff2b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ff2d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000ff31:	51                   	push   ecx
c000ff32:	8d 54 24 23          	lea    edx,[esp+0x23]
c000ff36:	52                   	push   edx
c000ff37:	6a 00                	push   0x0
c000ff39:	6a 01                	push   0x1
c000ff3b:	53                   	push   ebx
c000ff3c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ff3f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000ff43:	83 c4 20             	add    esp,0x20
c000ff46:	3c 0d                	cmp    al,0xd
c000ff48:	0f 84 09 01 00 00    	je     c0010057 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000ff4e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000ff53:	0f 84 ef 00 00 00    	je     c0010048 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000ff59:	3c 0a                	cmp    al,0xa
c000ff5b:	74 13                	je     c000ff70 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000ff5d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ff62:	74 0c                	je     c000ff70 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000ff64:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000ff6a:	0f 8e d8 00 00 00    	jle    c0010048 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000ff70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff74:	83 ec 0c             	sub    esp,0xc
c000ff77:	8d 78 01             	lea    edi,[eax+0x1]
c000ff7a:	57                   	push   edi
c000ff7b:	e8 f5 78 ff ff       	call   c0007875 <malloc>
c000ff80:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000ff84:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ff88:	8d 56 04             	lea    edx,[esi+0x4]
c000ff8b:	89 14 24             	mov    DWORD PTR [esp],edx
c000ff8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ff92:	e8 de 78 ff ff       	call   c0007875 <malloc>
c000ff97:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ff9b:	83 c4 0c             	add    esp,0xc
c000ff9e:	57                   	push   edi
c000ff9f:	6a 00                	push   0x0
c000ffa1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ffa5:	e8 26 05 ff ff       	call   c00004d0 <memset>
c000ffaa:	8d 74 24 30          	lea    esi,[esp+0x30]
c000ffae:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000ffb2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ffb6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ffb8:	83 c4 0c             	add    esp,0xc
c000ffbb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ffbf:	52                   	push   edx
c000ffc0:	6a 00                	push   0x0
c000ffc2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ffc6:	e8 05 05 ff ff       	call   c00004d0 <memset>
c000ffcb:	8d 74 24 30          	lea    esi,[esp+0x30]
c000ffcf:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000ffd3:	89 34 24             	mov    DWORD PTR [esp],esi
c000ffd6:	e8 65 05 ff ff       	call   c0000540 <strlen>
c000ffdb:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000ffdf:	89 c1                	mov    ecx,eax
c000ffe1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ffe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ffe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ffe9:	40                   	inc    eax
c000ffea:	83 c4 10             	add    esp,0x10
c000ffed:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fff0:	85 d2                	test   edx,edx
c000fff2:	75 0c                	jne    c0010000 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000fff4:	83 ec 0c             	sub    esp,0xc
c000fff7:	6a 08                	push   0x8
c000fff9:	e8 77 78 ff ff       	call   c0007875 <malloc>
c000fffe:	eb 0c                	jmp    c001000c <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0010000:	c1 e0 03             	shl    eax,0x3
c0010003:	51                   	push   ecx
c0010004:	51                   	push   ecx
c0010005:	50                   	push   eax
c0010006:	52                   	push   edx
c0010007:	e8 55 78 ff ff       	call   c0007861 <realloc>
c001000c:	83 c4 10             	add    esp,0x10
c001000f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010012:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010015:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010018:	8d 74 24 18          	lea    esi,[esp+0x18]
c001001c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010020:	b9 08 00 00 00       	mov    ecx,0x8
c0010025:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010027:	31 f6                	xor    esi,esi
c0010029:	50                   	push   eax
c001002a:	68 00 01 00 00       	push   0x100
c001002f:	6a 00                	push   0x0
c0010031:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010035:	50                   	push   eax
c0010036:	e8 95 04 ff ff       	call   c00004d0 <memset>
c001003b:	83 c4 10             	add    esp,0x10
c001003e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010046:	eb 0f                	jmp    c0010057 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010048:	3c 3d                	cmp    al,0x3d
c001004a:	74 07                	je     c0010053 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c001004c:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0010050:	46                   	inc    esi
c0010051:	eb 04                	jmp    c0010057 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010053:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010057:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001005c:	0f 85 c6 fe ff ff    	jne    c000ff28 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010062:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010068:	5b                   	pop    ebx
c0010069:	5e                   	pop    esi
c001006a:	5f                   	pop    edi
c001006b:	5d                   	pop    ebp
c001006c:	c3                   	ret    
c001006d:	90                   	nop

c001006e <EnvVarContainer::__loadSystem()>:
c001006e:	83 ec 10             	sub    esp,0x10
c0010071:	68 e0 11 02 c0       	push   0xc00211e0
c0010076:	68 08 fe 01 c0       	push   0xc001fe08
c001007b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001007f:	e8 04 fe ff ff       	call   c000fe88 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010084:	83 c4 1c             	add    esp,0x1c
c0010087:	c3                   	ret    

c0010088 <EnvVarContainer::__loadUser()>:
c0010088:	c3                   	ret    
c0010089:	90                   	nop

c001008a <EnvVarContainer::EnvVarContainer(Process*)>:
c001008a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001008e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010098:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001009c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001009f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00100aa:	90                   	nop
c00100ab:	c3                   	ret    

c00100ac <EnvVarContainer::~EnvVarContainer()>:
c00100ac:	83 ec 0c             	sub    esp,0xc
c00100af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100b3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00100b6:	85 c0                	test   eax,eax
c00100b8:	74 1d                	je     c00100d7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00100ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100be:	8b 00                	mov    eax,DWORD PTR [eax]
c00100c0:	85 c0                	test   eax,eax
c00100c2:	74 13                	je     c00100d7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00100c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00100cb:	83 ec 0c             	sub    esp,0xc
c00100ce:	50                   	push   eax
c00100cf:	e8 b1 77 ff ff       	call   c0007885 <free>
c00100d4:	83 c4 10             	add    esp,0x10
c00100d7:	90                   	nop
c00100d8:	83 c4 0c             	add    esp,0xc
c00100db:	c3                   	ret    

c00100dc <Krnl::getEnv(Process*, char const*)>:
c00100dc:	53                   	push   ebx
c00100dd:	83 ec 08             	sub    esp,0x8
c00100e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100e4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00100e8:	39 05 90 71 02 c0    	cmp    DWORD PTR ds:0xc0027190,eax
c00100ee:	74 04                	je     c00100f4 <Krnl::getEnv(Process*, char const*)+0x18>
c00100f0:	85 c0                	test   eax,eax
c00100f2:	75 0b                	jne    c00100ff <Krnl::getEnv(Process*, char const*)+0x23>
c00100f4:	a1 30 69 02 c0       	mov    eax,ds:0xc0026930
c00100f9:	85 c0                	test   eax,eax
c00100fb:	75 19                	jne    c0010116 <Krnl::getEnv(Process*, char const*)+0x3a>
c00100fd:	eb 27                	jmp    c0010126 <Krnl::getEnv(Process*, char const*)+0x4a>
c00100ff:	52                   	push   edx
c0010100:	52                   	push   edx
c0010101:	53                   	push   ebx
c0010102:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010108:	e8 79 fc ff ff       	call   c000fd86 <EnvVarContainer::getEnv(char const*)>
c001010d:	83 c4 10             	add    esp,0x10
c0010110:	85 c0                	test   eax,eax
c0010112:	75 28                	jne    c001013c <Krnl::getEnv(Process*, char const*)+0x60>
c0010114:	eb de                	jmp    c00100f4 <Krnl::getEnv(Process*, char const*)+0x18>
c0010116:	52                   	push   edx
c0010117:	52                   	push   edx
c0010118:	53                   	push   ebx
c0010119:	50                   	push   eax
c001011a:	e8 67 fc ff ff       	call   c000fd86 <EnvVarContainer::getEnv(char const*)>
c001011f:	83 c4 10             	add    esp,0x10
c0010122:	85 c0                	test   eax,eax
c0010124:	75 16                	jne    c001013c <Krnl::getEnv(Process*, char const*)+0x60>
c0010126:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001012a:	a1 34 69 02 c0       	mov    eax,ds:0xc0026934
c001012f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010133:	83 c4 08             	add    esp,0x8
c0010136:	5b                   	pop    ebx
c0010137:	e9 4a fc ff ff       	jmp    c000fd86 <EnvVarContainer::getEnv(char const*)>
c001013c:	83 c4 08             	add    esp,0x8
c001013f:	5b                   	pop    ebx
c0010140:	c3                   	ret    

c0010141 <Krnl::setEnvSystem(char const*, char const*)>:
c0010141:	83 ec 10             	sub    esp,0x10
c0010144:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010148:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001014c:	ff 35 34 69 02 c0    	push   DWORD PTR ds:0xc0026934
c0010152:	e8 6d fc ff ff       	call   c000fdc4 <EnvVarContainer::setEnv(char const*, char const*)>
c0010157:	83 c4 1c             	add    esp,0x1c
c001015a:	c3                   	ret    

c001015b <Krnl::setEnvUser(char const*, char const*)>:
c001015b:	a1 30 69 02 c0       	mov    eax,ds:0xc0026930
c0010160:	85 c0                	test   eax,eax
c0010162:	74 15                	je     c0010179 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0010164:	83 ec 10             	sub    esp,0x10
c0010167:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001016b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001016f:	50                   	push   eax
c0010170:	e8 4f fc ff ff       	call   c000fdc4 <EnvVarContainer::setEnv(char const*, char const*)>
c0010175:	83 c4 1c             	add    esp,0x1c
c0010178:	c3                   	ret    
c0010179:	c3                   	ret    

c001017a <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001017a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001017e:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010184:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010188:	e9 37 fc ff ff       	jmp    c000fdc4 <EnvVarContainer::setEnv(char const*, char const*)>

c001018d <Krnl::deleteEnvSystem(char const*)>:
c001018d:	c3                   	ret    

c001018e <Krnl::deleteEnvUser(char const*)>:
c001018e:	c3                   	ret    

c001018f <Krnl::deleteEnvProcess(Process*, char const*)>:
c001018f:	c3                   	ret    

c0010190 <Krnl::newProcessEnv(Process*)>:
c0010190:	83 ec 28             	sub    esp,0x28
c0010193:	6a 0c                	push   0xc
c0010195:	e8 db 76 ff ff       	call   c0007875 <malloc>
c001019a:	5a                   	pop    edx
c001019b:	59                   	pop    ecx
c001019c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00101a0:	50                   	push   eax
c00101a1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00101a5:	e8 e0 fe ff ff       	call   c001008a <EnvVarContainer::EnvVarContainer(Process*)>
c00101aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101ae:	83 c4 2c             	add    esp,0x2c
c00101b1:	c3                   	ret    

c00101b2 <Krnl::copyProcessEnv(Process*, Process*)>:
c00101b2:	57                   	push   edi
c00101b3:	56                   	push   esi
c00101b4:	53                   	push   ebx
c00101b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101b9:	83 ec 0c             	sub    esp,0xc
c00101bc:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00101c2:	6a 0c                	push   0xc
c00101c4:	e8 ac 76 ff ff       	call   c0007875 <malloc>
c00101c9:	89 c3                	mov    ebx,eax
c00101cb:	58                   	pop    eax
c00101cc:	5a                   	pop    edx
c00101cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101d1:	53                   	push   ebx
c00101d2:	e8 b3 fe ff ff       	call   c001008a <EnvVarContainer::EnvVarContainer(Process*)>
c00101d7:	8b 07                	mov    eax,DWORD PTR [edi]
c00101d9:	89 03                	mov    DWORD PTR [ebx],eax
c00101db:	c1 e0 03             	shl    eax,0x3
c00101de:	89 04 24             	mov    DWORD PTR [esp],eax
c00101e1:	e8 8f 76 ff ff       	call   c0007875 <malloc>
c00101e6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00101e9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00101eb:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00101ee:	c1 e1 03             	shl    ecx,0x3
c00101f1:	89 c7                	mov    edi,eax
c00101f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101f5:	83 c4 10             	add    esp,0x10
c00101f8:	89 d8                	mov    eax,ebx
c00101fa:	5b                   	pop    ebx
c00101fb:	5e                   	pop    esi
c00101fc:	5f                   	pop    edi
c00101fd:	c3                   	ret    

c00101fe <Krnl::loadSystemEnv()>:
c00101fe:	53                   	push   ebx
c00101ff:	83 ec 14             	sub    esp,0x14
c0010202:	6a 0c                	push   0xc
c0010204:	e8 6c 76 ff ff       	call   c0007875 <malloc>
c0010209:	89 c3                	mov    ebx,eax
c001020b:	58                   	pop    eax
c001020c:	5a                   	pop    edx
c001020d:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0010213:	53                   	push   ebx
c0010214:	e8 71 fe ff ff       	call   c001008a <EnvVarContainer::EnvVarContainer(Process*)>
c0010219:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001021c:	89 1d 34 69 02 c0    	mov    DWORD PTR ds:0xc0026934,ebx
c0010222:	e8 47 fe ff ff       	call   c001006e <EnvVarContainer::__loadSystem()>
c0010227:	83 c4 18             	add    esp,0x18
c001022a:	5b                   	pop    ebx
c001022b:	c3                   	ret    

c001022c <Krnl::loadUserEnv()>:
c001022c:	53                   	push   ebx
c001022d:	83 ec 14             	sub    esp,0x14
c0010230:	6a 0c                	push   0xc
c0010232:	e8 3e 76 ff ff       	call   c0007875 <malloc>
c0010237:	89 c3                	mov    ebx,eax
c0010239:	58                   	pop    eax
c001023a:	5a                   	pop    edx
c001023b:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0010241:	53                   	push   ebx
c0010242:	e8 43 fe ff ff       	call   c001008a <EnvVarContainer::EnvVarContainer(Process*)>
c0010247:	89 1d 30 69 02 c0    	mov    DWORD PTR ds:0xc0026930,ebx
c001024d:	83 c4 18             	add    esp,0x18
c0010250:	5b                   	pop    ebx
c0010251:	c3                   	ret    

c0010252 <Krnl::flushEnv()>:
c0010252:	c3                   	ret    

c0010253 <Krnl::getProcessTotalEnvCount(Process*)>:
c0010253:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010257:	8b 15 30 69 02 c0    	mov    edx,DWORD PTR ds:0xc0026930
c001025d:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010263:	a1 34 69 02 c0       	mov    eax,ds:0xc0026934
c0010268:	8b 00                	mov    eax,DWORD PTR [eax]
c001026a:	03 01                	add    eax,DWORD PTR [ecx]
c001026c:	85 d2                	test   edx,edx
c001026e:	74 02                	je     c0010272 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010270:	03 02                	add    eax,DWORD PTR [edx]
c0010272:	c3                   	ret    

c0010273 <Krnl::getProcessEnvPair(Process*, int)>:
c0010273:	57                   	push   edi
c0010274:	56                   	push   esi
c0010275:	8b 35 30 69 02 c0    	mov    esi,DWORD PTR ds:0xc0026930
c001027b:	53                   	push   ebx
c001027c:	85 f6                	test   esi,esi
c001027e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010282:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010286:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001028c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010290:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010292:	75 16                	jne    c00102aa <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010294:	39 c2                	cmp    edx,eax
c0010296:	7c 16                	jl     c00102ae <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010298:	8b 0d 34 69 02 c0    	mov    ecx,DWORD PTR ds:0xc0026934
c001029e:	8b 31                	mov    esi,DWORD PTR [ecx]
c00102a0:	01 c6                	add    esi,eax
c00102a2:	39 d6                	cmp    esi,edx
c00102a4:	7e 3c                	jle    c00102e2 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00102a6:	29 c2                	sub    edx,eax
c00102a8:	eb 04                	jmp    c00102ae <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00102aa:	39 c2                	cmp    edx,eax
c00102ac:	7d 05                	jge    c00102b3 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00102ae:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00102b1:	eb 20                	jmp    c00102d3 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00102b3:	8b 3e                	mov    edi,DWORD PTR [esi]
c00102b5:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00102b8:	39 d1                	cmp    ecx,edx
c00102ba:	7e 04                	jle    c00102c0 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00102bc:	29 c2                	sub    edx,eax
c00102be:	eb 10                	jmp    c00102d0 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00102c0:	8b 35 34 69 02 c0    	mov    esi,DWORD PTR ds:0xc0026934
c00102c6:	03 0e                	add    ecx,DWORD PTR [esi]
c00102c8:	39 d1                	cmp    ecx,edx
c00102ca:	7e 16                	jle    c00102e2 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00102cc:	29 c2                	sub    edx,eax
c00102ce:	29 fa                	sub    edx,edi
c00102d0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00102d3:	8d 14 d0             	lea    edx,[eax+edx*8]
c00102d6:	8b 02                	mov    eax,DWORD PTR [edx]
c00102d8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00102db:	89 03                	mov    DWORD PTR [ebx],eax
c00102dd:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00102e0:	eb 1d                	jmp    c00102ff <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00102e2:	83 ec 0c             	sub    esp,0xc
c00102e5:	68 2a fe 01 c0       	push   0xc001fe2a
c00102ea:	e8 ac 00 00 00       	call   c001039b <KePanic(char const*)>
c00102ef:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00102f5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00102fc:	83 c4 10             	add    esp,0x10
c00102ff:	89 d8                	mov    eax,ebx
c0010301:	5b                   	pop    ebx
c0010302:	5e                   	pop    esi
c0010303:	5f                   	pop    edi
c0010304:	c2 04 00             	ret    0x4

c0010307 <CPU::current()>:
c0010307:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001030c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010312:	c3                   	ret    

c0010313 <operator new(unsigned long)>:
c0010313:	e9 5d 75 ff ff       	jmp    c0007875 <malloc>

c0010318 <operator delete(void*)>:
c0010318:	e9 78 75 ff ff       	jmp    c0007895 <rfree>

c001031d <disableIRQs()>:
c001031d:	fa                   	cli    
c001031e:	c3                   	ret    

c001031f <enableIRQs()>:
c001031f:	fb                   	sti    
c0010320:	c3                   	ret    

c0010321 <lockScheduler()>:
c0010321:	fa                   	cli    
c0010322:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0010328:	c3                   	ret    

c0010329 <unlockScheduler()>:
c0010329:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001032e:	48                   	dec    eax
c001032f:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0010334:	75 01                	jne    c0010337 <unlockScheduler()+0xe>
c0010336:	fb                   	sti    
c0010337:	c3                   	ret    

c0010338 <lockStuff()>:
c0010338:	fa                   	cli    
c0010339:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001033f:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c0010345:	c3                   	ret    

c0010346 <unlockStuff()>:
c0010346:	83 ec 0c             	sub    esp,0xc
c0010349:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c001034e:	48                   	dec    eax
c001034f:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0010354:	75 18                	jne    c001036e <unlockStuff()+0x28>
c0010356:	83 3d 60 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027160,0x0
c001035d:	74 0f                	je     c001036e <unlockStuff()+0x28>
c001035f:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0010369:	e8 8a 42 00 00       	call   c00145f8 <schedule()>
c001036e:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0010373:	48                   	dec    eax
c0010374:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0010379:	75 01                	jne    c001037c <unlockStuff()+0x36>
c001037b:	fb                   	sti    
c001037c:	83 c4 0c             	add    esp,0xc
c001037f:	c3                   	ret    

c0010380 <Virt::getAKernelVAS()>:
c0010380:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c0010385:	c3                   	ret    

c0010386 <__not_memcpy>:
c0010386:	57                   	push   edi
c0010387:	56                   	push   esi
c0010388:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001038c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010390:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010394:	89 c7                	mov    edi,eax
c0010396:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010398:	5e                   	pop    esi
c0010399:	5f                   	pop    edi
c001039a:	c3                   	ret    

c001039b <KePanic(char const*)>:
c001039b:	c6 05 38 69 02 c0 01 	mov    BYTE PTR ds:0xc0026938,0x1
c00103a2:	e9 84 60 00 00       	jmp    c001642b <HalPanic(char const*)>

c00103a7 <Krnl::powerThread(void*)>:
c00103a7:	83 ec 0c             	sub    esp,0xc
c00103aa:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00103af:	48                   	dec    eax
c00103b0:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00103b5:	75 01                	jne    c00103b8 <Krnl::powerThread(void*)+0x11>
c00103b7:	fb                   	sti    
c00103b8:	83 ec 0c             	sub    esp,0xc
c00103bb:	c6 05 40 69 02 c0 00 	mov    BYTE PTR ds:0xc0026940,0x0
c00103c2:	6a 0a                	push   0xa
c00103c4:	e8 3f 45 00 00       	call   c0014908 <sleep(unsigned int)>
c00103c9:	83 05 84 69 02 c0 0a 	add    DWORD PTR ds:0xc0026984,0xa
c00103d0:	83 c4 10             	add    esp,0x10
c00103d3:	eb e3                	jmp    c00103b8 <Krnl::powerThread(void*)+0x11>

c00103d5 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00103d5:	57                   	push   edi
c00103d6:	b9 09 00 00 00       	mov    ecx,0x9
c00103db:	56                   	push   esi
c00103dc:	bf 60 69 02 c0       	mov    edi,0xc0026960
c00103e1:	fc                   	cld    
c00103e2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00103e6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00103e8:	5e                   	pop    esi
c00103e9:	5f                   	pop    edi
c00103ea:	c3                   	ret    

c00103eb <Krnl::userIOReceived()>:
c00103eb:	c7 05 84 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026984,0x0
c00103f5:	c3                   	ret    

c00103f6 <Krnl::handlePowerButton()>:
c00103f6:	83 ec 0c             	sub    esp,0xc
c00103f9:	a1 60 69 02 c0       	mov    eax,ds:0xc0026960
c00103fe:	83 f8 02             	cmp    eax,0x2
c0010401:	75 10                	jne    c0010413 <Krnl::handlePowerButton()+0x1d>
c0010403:	83 ec 0c             	sub    esp,0xc
c0010406:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001040c:	e8 ff 6a ff ff       	call   c0006f10 <Computer::shutdown()>
c0010411:	eb 11                	jmp    c0010424 <Krnl::handlePowerButton()+0x2e>
c0010413:	48                   	dec    eax
c0010414:	75 11                	jne    c0010427 <Krnl::handlePowerButton()+0x31>
c0010416:	83 ec 0c             	sub    esp,0xc
c0010419:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001041f:	e8 1c 6b ff ff       	call   c0006f40 <Computer::sleep()>
c0010424:	83 c4 10             	add    esp,0x10
c0010427:	83 c4 0c             	add    esp,0xc
c001042a:	c3                   	ret    

c001042b <Krnl::handleSleepButton()>:
c001042b:	83 ec 0c             	sub    esp,0xc
c001042e:	a1 64 69 02 c0       	mov    eax,ds:0xc0026964
c0010433:	83 f8 02             	cmp    eax,0x2
c0010436:	75 10                	jne    c0010448 <Krnl::handleSleepButton()+0x1d>
c0010438:	83 ec 0c             	sub    esp,0xc
c001043b:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0010441:	e8 ca 6a ff ff       	call   c0006f10 <Computer::shutdown()>
c0010446:	eb 11                	jmp    c0010459 <Krnl::handleSleepButton()+0x2e>
c0010448:	48                   	dec    eax
c0010449:	75 11                	jne    c001045c <Krnl::handleSleepButton()+0x31>
c001044b:	83 ec 0c             	sub    esp,0xc
c001044e:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0010454:	e8 e7 6a ff ff       	call   c0006f40 <Computer::sleep()>
c0010459:	83 c4 10             	add    esp,0x10
c001045c:	83 c4 0c             	add    esp,0xc
c001045f:	c3                   	ret    

c0010460 <Krnl::setupPowerManager()>:
c0010460:	83 ec 0c             	sub    esp,0xc
c0010463:	c7 05 84 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026984,0x0
c001046d:	68 f0 00 00 00       	push   0xf0
c0010472:	c6 05 40 69 02 c0 00 	mov    BYTE PTR ds:0xc0026940,0x0
c0010479:	6a 00                	push   0x0
c001047b:	68 a7 03 01 c0       	push   0xc00103a7
c0010480:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0010486:	e8 4d 3f 00 00       	call   c00143d8 <Process::createThread(void (*)(void*), void*, int)>
c001048b:	c7 05 60 69 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0026960,0x2
c0010495:	c7 05 64 69 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0026964,0x1
c001049f:	c7 05 68 69 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0026968,0x3
c00104a9:	c7 05 6c 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002696c,0x0
c00104b3:	c7 05 78 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026978,0x0
c00104bd:	c7 05 70 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026970,0x0
c00104c7:	c7 05 7c 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002697c,0x0
c00104d1:	c7 05 74 69 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0026974,0x3c
c00104db:	c7 05 80 69 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0026980,0x3c
c00104e5:	83 c4 1c             	add    esp,0x1c
c00104e8:	c3                   	ret    
c00104e9:	66 90                	xchg   ax,ax
c00104eb:	90                   	nop

c00104ec <KeResolveCompatibilitySymbol(char*)>:
c00104ec:	83 ec 0c             	sub    esp,0xc
c00104ef:	83 ec 08             	sub    esp,0x8
c00104f2:	68 44 fe 01 c0       	push   0xc001fe44
c00104f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104fb:	e8 e0 01 ff ff       	call   c00006e0 <strcmp>
c0010500:	83 c4 10             	add    esp,0x10
c0010503:	85 c0                	test   eax,eax
c0010505:	0f 94 c0             	sete   al
c0010508:	84 c0                	test   al,al
c001050a:	74 0c                	je     c0010518 <KeResolveCompatibilitySymbol(char*)+0x2c>
c001050c:	b8 b8 3e 02 c0       	mov    eax,0xc0023eb8
c0010511:	e9 62 01 00 00       	jmp    c0010678 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010516:	66 90                	xchg   ax,ax
c0010518:	83 ec 08             	sub    esp,0x8
c001051b:	68 4d fe 01 c0       	push   0xc001fe4d
c0010520:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010524:	e8 b7 01 ff ff       	call   c00006e0 <strcmp>
c0010529:	83 c4 10             	add    esp,0x10
c001052c:	85 c0                	test   eax,eax
c001052e:	0f 94 c0             	sete   al
c0010531:	84 c0                	test   al,al
c0010533:	74 0b                	je     c0010540 <KeResolveCompatibilitySymbol(char*)+0x54>
c0010535:	b8 50 d8 01 c0       	mov    eax,0xc001d850
c001053a:	e9 39 01 00 00       	jmp    c0010678 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001053f:	90                   	nop
c0010540:	83 ec 08             	sub    esp,0x8
c0010543:	68 57 fe 01 c0       	push   0xc001fe57
c0010548:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001054c:	e8 8f 01 ff ff       	call   c00006e0 <strcmp>
c0010551:	83 c4 10             	add    esp,0x10
c0010554:	85 c0                	test   eax,eax
c0010556:	0f 94 c0             	sete   al
c0010559:	84 c0                	test   al,al
c001055b:	74 0b                	je     c0010568 <KeResolveCompatibilitySymbol(char*)+0x7c>
c001055d:	b8 84 d5 01 c0       	mov    eax,0xc001d584
c0010562:	e9 11 01 00 00       	jmp    c0010678 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010567:	90                   	nop
c0010568:	83 ec 08             	sub    esp,0x8
c001056b:	68 60 fe 01 c0       	push   0xc001fe60
c0010570:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010574:	e8 67 01 ff ff       	call   c00006e0 <strcmp>
c0010579:	83 c4 10             	add    esp,0x10
c001057c:	85 c0                	test   eax,eax
c001057e:	0f 94 c0             	sete   al
c0010581:	84 c0                	test   al,al
c0010583:	74 0b                	je     c0010590 <KeResolveCompatibilitySymbol(char*)+0xa4>
c0010585:	b8 9b 03 01 c0       	mov    eax,0xc001039b
c001058a:	e9 e9 00 00 00       	jmp    c0010678 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001058f:	90                   	nop
c0010590:	83 ec 08             	sub    esp,0x8
c0010593:	68 73 fe 01 c0       	push   0xc001fe73
c0010598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001059c:	e8 3f 01 ff ff       	call   c00006e0 <strcmp>
c00105a1:	83 c4 10             	add    esp,0x10
c00105a4:	85 c0                	test   eax,eax
c00105a6:	0f 94 c0             	sete   al
c00105a9:	84 c0                	test   al,al
c00105ab:	74 0b                	je     c00105b8 <KeResolveCompatibilitySymbol(char*)+0xcc>
c00105ad:	b8 23 fd 00 c0       	mov    eax,0xc000fd23
c00105b2:	e9 c1 00 00 00       	jmp    c0010678 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00105b7:	90                   	nop
c00105b8:	83 ec 08             	sub    esp,0x8
c00105bb:	68 90 fe 01 c0       	push   0xc001fe90
c00105c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105c4:	e8 17 01 ff ff       	call   c00006e0 <strcmp>
c00105c9:	83 c4 10             	add    esp,0x10
c00105cc:	85 c0                	test   eax,eax
c00105ce:	0f 94 c0             	sete   al
c00105d1:	84 c0                	test   al,al
c00105d3:	74 0b                	je     c00105e0 <KeResolveCompatibilitySymbol(char*)+0xf4>
c00105d5:	b8 50 d9 01 c0       	mov    eax,0xc001d950
c00105da:	e9 99 00 00 00       	jmp    c0010678 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00105df:	90                   	nop
c00105e0:	83 ec 08             	sub    esp,0x8
c00105e3:	68 9a fe 01 c0       	push   0xc001fe9a
c00105e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105ec:	e8 ef 00 ff ff       	call   c00006e0 <strcmp>
c00105f1:	83 c4 10             	add    esp,0x10
c00105f4:	85 c0                	test   eax,eax
c00105f6:	0f 94 c0             	sete   al
c00105f9:	84 c0                	test   al,al
c00105fb:	74 07                	je     c0010604 <KeResolveCompatibilitySymbol(char*)+0x118>
c00105fd:	b8 d0 d6 01 c0       	mov    eax,0xc001d6d0
c0010602:	eb 74                	jmp    c0010678 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010604:	83 ec 08             	sub    esp,0x8
c0010607:	68 a3 fe 01 c0       	push   0xc001fea3
c001060c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010610:	e8 cb 00 ff ff       	call   c00006e0 <strcmp>
c0010615:	83 c4 10             	add    esp,0x10
c0010618:	85 c0                	test   eax,eax
c001061a:	0f 94 c0             	sete   al
c001061d:	84 c0                	test   al,al
c001061f:	74 07                	je     c0010628 <KeResolveCompatibilitySymbol(char*)+0x13c>
c0010621:	b8 bc 3e 02 c0       	mov    eax,0xc0023ebc
c0010626:	eb 50                	jmp    c0010678 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010628:	83 ec 08             	sub    esp,0x8
c001062b:	68 bb fe 01 c0       	push   0xc001febb
c0010630:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010634:	e8 a7 00 ff ff       	call   c00006e0 <strcmp>
c0010639:	83 c4 10             	add    esp,0x10
c001063c:	85 c0                	test   eax,eax
c001063e:	0f 94 c0             	sete   al
c0010641:	84 c0                	test   al,al
c0010643:	74 07                	je     c001064c <KeResolveCompatibilitySymbol(char*)+0x160>
c0010645:	b8 bc 3e 02 c0       	mov    eax,0xc0023ebc
c001064a:	eb 2c                	jmp    c0010678 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001064c:	83 ec 08             	sub    esp,0x8
c001064f:	68 c8 fe 01 c0       	push   0xc001fec8
c0010654:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010658:	e8 83 00 ff ff       	call   c00006e0 <strcmp>
c001065d:	83 c4 10             	add    esp,0x10
c0010660:	85 c0                	test   eax,eax
c0010662:	0f 94 c0             	sete   al
c0010665:	84 c0                	test   al,al
c0010667:	74 07                	je     c0010670 <KeResolveCompatibilitySymbol(char*)+0x184>
c0010669:	b8 bd 3e 02 c0       	mov    eax,0xc0023ebd
c001066e:	eb 08                	jmp    c0010678 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010670:	b8 00 00 00 00       	mov    eax,0x0
c0010675:	8d 76 00             	lea    esi,[esi+0x0]
c0010678:	83 c4 0c             	add    esp,0xc
c001067b:	c3                   	ret    

c001067c <KiSigKill(int)>:
c001067c:	57                   	push   edi
c001067d:	b9 0a 00 00 00       	mov    ecx,0xa
c0010682:	56                   	push   esi
c0010683:	be 11 ff 01 c0       	mov    esi,0xc001ff11
c0010688:	83 ec 14             	sub    esp,0x14
c001068b:	8d 7c 24 06          	lea    edi,[esp+0x6]
c001068f:	fc                   	cld    
c0010690:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010692:	8d 44 24 06          	lea    eax,[esp+0x6]
c0010696:	50                   	push   eax
c0010697:	6a 00                	push   0x0
c0010699:	6a 00                	push   0x0
c001069b:	6a 27                	push   0x27
c001069d:	e8 b0 19 01 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00106a2:	83 c4 24             	add    esp,0x24
c00106a5:	5e                   	pop    esi
c00106a6:	5f                   	pop    edi
c00106a7:	c3                   	ret    

c00106a8 <KiDefaultSignalHandlerIgnore(int)>:
c00106a8:	c3                   	ret    

c00106a9 <KiDefaultSignalHandlerPause(int)>:
c00106a9:	57                   	push   edi
c00106aa:	b9 07 00 00 00       	mov    ecx,0x7
c00106af:	56                   	push   esi
c00106b0:	be 1b ff 01 c0       	mov    esi,0xc001ff1b
c00106b5:	83 ec 24             	sub    esp,0x24
c00106b8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00106bc:	fc                   	cld    
c00106bd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00106bf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00106c3:	50                   	push   eax
c00106c4:	6a 00                	push   0x0
c00106c6:	6a 00                	push   0x0
c00106c8:	6a 27                	push   0x27
c00106ca:	e8 83 19 01 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00106cf:	83 c4 34             	add    esp,0x34
c00106d2:	5e                   	pop    esi
c00106d3:	5f                   	pop    edi
c00106d4:	c3                   	ret    

c00106d5 <KiDefaultSignalHandlerResume(int)>:
c00106d5:	57                   	push   edi
c00106d6:	b9 1d 00 00 00       	mov    ecx,0x1d
c00106db:	56                   	push   esi
c00106dc:	be 37 ff 01 c0       	mov    esi,0xc001ff37
c00106e1:	83 ec 24             	sub    esp,0x24
c00106e4:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00106e8:	fc                   	cld    
c00106e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106eb:	8d 44 24 03          	lea    eax,[esp+0x3]
c00106ef:	50                   	push   eax
c00106f0:	6a 00                	push   0x0
c00106f2:	6a 00                	push   0x0
c00106f4:	6a 27                	push   0x27
c00106f6:	e8 57 19 01 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00106fb:	83 c4 34             	add    esp,0x34
c00106fe:	5e                   	pop    esi
c00106ff:	5f                   	pop    edi
c0010700:	c3                   	ret    

c0010701 <KeDeinitSignals(SigHandlerBlock*)>:
c0010701:	e9 7f 71 ff ff       	jmp    c0007885 <free>

c0010706 <KeInitSignals()>:
c0010706:	53                   	push   ebx
c0010707:	83 ec 14             	sub    esp,0x14
c001070a:	68 c8 00 00 00       	push   0xc8
c001070f:	e8 61 71 ff ff       	call   c0007875 <malloc>
c0010714:	83 c4 0c             	add    esp,0xc
c0010717:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010721:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c001072b:	89 c3                	mov    ebx,eax
c001072d:	6a 20                	push   0x20
c001072f:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010735:	6a 00                	push   0x0
c0010737:	50                   	push   eax
c0010738:	e8 93 fd fe ff       	call   c00004d0 <memset>
c001073d:	83 c4 0c             	add    esp,0xc
c0010740:	6a 44                	push   0x44
c0010742:	6a 00                	push   0x0
c0010744:	53                   	push   ebx
c0010745:	e8 86 fd fe ff       	call   c00004d0 <memset>
c001074a:	89 d8                	mov    eax,ebx
c001074c:	83 c4 18             	add    esp,0x18
c001074f:	5b                   	pop    ebx
c0010750:	c3                   	ret    

c0010751 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010751:	53                   	push   ebx
c0010752:	b8 01 00 00 00       	mov    eax,0x1
c0010757:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001075b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001075f:	83 f9 10             	cmp    ecx,0x10
c0010762:	7f 21                	jg     c0010785 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010764:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010767:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001076b:	89 03                	mov    DWORD PTR [ebx],eax
c001076d:	b8 01 00 00 00       	mov    eax,0x1
c0010772:	d3 e0                	shl    eax,cl
c0010774:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010778:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001077b:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010783:	31 c0                	xor    eax,eax
c0010785:	5b                   	pop    ebx
c0010786:	c3                   	ret    

c0010787 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010787:	55                   	push   ebp
c0010788:	57                   	push   edi
c0010789:	bf 08 00 00 00       	mov    edi,0x8
c001078e:	56                   	push   esi
c001078f:	53                   	push   ebx
c0010790:	83 ec 18             	sub    esp,0x18
c0010793:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010797:	68 54 ff 01 c0       	push   0xc001ff54
c001079c:	e8 69 9e ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c00107a1:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00107a8:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00107ae:	83 c4 10             	add    esp,0x10
c00107b1:	31 c9                	xor    ecx,ecx
c00107b3:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00107b7:	99                   	cdq    
c00107b8:	f7 ff                	idiv   edi
c00107ba:	8d 42 24             	lea    eax,[edx+0x24]
c00107bd:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00107c1:	85 f6                	test   esi,esi
c00107c3:	75 1a                	jne    c00107df <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00107c5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00107c9:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00107cd:	50                   	push   eax
c00107ce:	50                   	push   eax
c00107cf:	52                   	push   edx
c00107d0:	68 65 ff 01 c0       	push   0xc001ff65
c00107d5:	e8 30 9e ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c00107da:	83 c4 10             	add    esp,0x10
c00107dd:	eb 1b                	jmp    c00107fa <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00107df:	41                   	inc    ecx
c00107e0:	83 f9 08             	cmp    ecx,0x8
c00107e3:	75 ce                	jne    c00107b3 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00107e5:	83 ec 0c             	sub    esp,0xc
c00107e8:	be 01 00 00 00       	mov    esi,0x1
c00107ed:	68 86 ff 01 c0       	push   0xc001ff86
c00107f2:	e8 13 9e ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c00107f7:	83 c4 10             	add    esp,0x10
c00107fa:	83 c4 0c             	add    esp,0xc
c00107fd:	89 f0                	mov    eax,esi
c00107ff:	5b                   	pop    ebx
c0010800:	5e                   	pop    esi
c0010801:	5f                   	pop    edi
c0010802:	5d                   	pop    ebp
c0010803:	c3                   	ret    

c0010804 <KeCheckSignal(SigHandlerBlock*)>:
c0010804:	55                   	push   ebp
c0010805:	57                   	push   edi
c0010806:	56                   	push   esi
c0010807:	53                   	push   ebx
c0010808:	51                   	push   ecx
c0010809:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001080d:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010814:	75 07                	jne    c001081d <KeCheckSignal(SigHandlerBlock*)+0x19>
c0010816:	31 c0                	xor    eax,eax
c0010818:	e9 cc 00 00 00       	jmp    c00108e9 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c001081d:	31 c9                	xor    ecx,ecx
c001081f:	bf 08 00 00 00       	mov    edi,0x8
c0010824:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c001082a:	8d 04 0e             	lea    eax,[esi+ecx*1]
c001082d:	99                   	cdq    
c001082e:	f7 ff                	idiv   edi
c0010830:	8b 94 93 9c 00 00 00 	mov    edx,DWORD PTR [ebx+edx*4+0x9c]
c0010837:	85 d2                	test   edx,edx
c0010839:	0f 84 94 00 00 00    	je     c00108d3 <KeCheckSignal(SigHandlerBlock*)+0xcf>
c001083f:	88 d1                	mov    cl,dl
c0010841:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010847:	bf 01 00 00 00       	mov    edi,0x1
c001084c:	89 04 24             	mov    DWORD PTR [esp],eax
c001084f:	d3 e7                	shl    edi,cl
c0010851:	bd 01 00 00 00       	mov    ebp,0x1
c0010856:	31 c9                	xor    ecx,ecx
c0010858:	89 e8                	mov    eax,ebp
c001085a:	d3 e0                	shl    eax,cl
c001085c:	85 04 24             	test   DWORD PTR [esp],eax
c001085f:	74 06                	je     c0010867 <KeCheckSignal(SigHandlerBlock*)+0x63>
c0010861:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010865:	75 af                	jne    c0010816 <KeCheckSignal(SigHandlerBlock*)+0x12>
c0010867:	41                   	inc    ecx
c0010868:	83 f9 11             	cmp    ecx,0x11
c001086b:	75 eb                	jne    c0010858 <KeCheckSignal(SigHandlerBlock*)+0x54>
c001086d:	8d 4e 01             	lea    ecx,[esi+0x1]
c0010870:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010873:	89 8b bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],ecx
c0010879:	09 f8                	or     eax,edi
c001087b:	c7 84 b3 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+esi*4+0x9c],0x0
c0010886:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c001088c:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010893:	31 c0                	xor    eax,eax
c0010895:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c001089d:	74 09                	je     c00108a8 <KeCheckSignal(SigHandlerBlock*)+0xa4>
c001089f:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00108a6:	eb 06                	jmp    c00108ae <KeCheckSignal(SigHandlerBlock*)+0xaa>
c00108a8:	40                   	inc    eax
c00108a9:	83 f8 08             	cmp    eax,0x8
c00108ac:	75 e7                	jne    c0010895 <KeCheckSignal(SigHandlerBlock*)+0x91>
c00108ae:	8b 04 93             	mov    eax,DWORD PTR [ebx+edx*4]
c00108b1:	83 fa 09             	cmp    edx,0x9
c00108b4:	75 07                	jne    c00108bd <KeCheckSignal(SigHandlerBlock*)+0xb9>
c00108b6:	b8 7c 06 01 c0       	mov    eax,0xc001067c
c00108bb:	eb 2c                	jmp    c00108e9 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00108bd:	83 f8 01             	cmp    eax,0x1
c00108c0:	0f 84 50 ff ff ff    	je     c0010816 <KeCheckSignal(SigHandlerBlock*)+0x12>
c00108c6:	85 c0                	test   eax,eax
c00108c8:	75 1f                	jne    c00108e9 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00108ca:	8b 04 95 40 12 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdedc0]
c00108d1:	eb 16                	jmp    c00108e9 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00108d3:	46                   	inc    esi
c00108d4:	41                   	inc    ecx
c00108d5:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00108db:	83 f9 08             	cmp    ecx,0x8
c00108de:	0f 85 40 ff ff ff    	jne    c0010824 <KeCheckSignal(SigHandlerBlock*)+0x20>
c00108e4:	e9 2d ff ff ff       	jmp    c0010816 <KeCheckSignal(SigHandlerBlock*)+0x12>
c00108e9:	5a                   	pop    edx
c00108ea:	5b                   	pop    ebx
c00108eb:	5e                   	pop    esi
c00108ec:	5f                   	pop    edi
c00108ed:	5d                   	pop    ebp
c00108ee:	c3                   	ret    

c00108ef <KiCheckSignalZ>:
c00108ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00108f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00108f7:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00108fd:	e8 02 ff ff ff       	call   c0010804 <KeCheckSignal(SigHandlerBlock*)>
c0010902:	5a                   	pop    edx
c0010903:	c3                   	ret    

c0010904 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010904:	56                   	push   esi
c0010905:	53                   	push   ebx
c0010906:	bb 01 00 00 00       	mov    ebx,0x1
c001090b:	52                   	push   edx
c001090c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010910:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010914:	d3 e3                	shl    ebx,cl
c0010916:	83 f9 10             	cmp    ecx,0x10
c0010919:	7f 08                	jg     c0010923 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c001091b:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010921:	75 10                	jne    c0010933 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010923:	83 ec 0c             	sub    esp,0xc
c0010926:	68 97 ff 01 c0       	push   0xc001ff97
c001092b:	e8 6b fa ff ff       	call   c001039b <KePanic(char const*)>
c0010930:	83 c4 10             	add    esp,0x10
c0010933:	f7 d3                	not    ebx
c0010935:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c001093b:	58                   	pop    eax
c001093c:	5b                   	pop    ebx
c001093d:	5e                   	pop    esi
c001093e:	c3                   	ret    

c001093f <SysSeekDir(regs*)>:
c001093f:	31 c0                	xor    eax,eax
c0010941:	31 d2                	xor    edx,edx
c0010943:	c3                   	ret    

c0010944 <SysTellDir(regs*)>:
c0010944:	31 c0                	xor    eax,eax
c0010946:	31 d2                	xor    edx,edx
c0010948:	c3                   	ret    

c0010949 <SysVerify(regs*)>:
c0010949:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001094d:	31 d2                	xor    edx,edx
c001094f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010952:	c3                   	ret    

c0010953 <SysGetArgc(regs*)>:
c0010953:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010958:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001095b:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010961:	99                   	cdq    
c0010962:	c3                   	ret    

c0010963 <SysTTYName(regs*)>:
c0010963:	b8 01 00 00 00       	mov    eax,0x1
c0010968:	31 d2                	xor    edx,edx
c001096a:	c3                   	ret    

c001096b <SysFormatDisk(regs*)>:
c001096b:	56                   	push   esi
c001096c:	53                   	push   ebx
c001096d:	50                   	push   eax
c001096e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010972:	8b 1d b4 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb4
c0010978:	eb 28                	jmp    c00109a2 <SysFormatDisk(regs*)+0x37>
c001097a:	83 ec 0c             	sub    esp,0xc
c001097d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010980:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010983:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010985:	51                   	push   ecx
c0010986:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010989:	51                   	push   ecx
c001098a:	50                   	push   eax
c001098b:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c0010992:	50                   	push   eax
c0010993:	53                   	push   ebx
c0010994:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010997:	83 c4 20             	add    esp,0x20
c001099a:	83 f8 08             	cmp    eax,0x8
c001099d:	75 12                	jne    c00109b1 <SysFormatDisk(regs*)+0x46>
c001099f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00109a2:	85 db                	test   ebx,ebx
c00109a4:	75 d4                	jne    c001097a <SysFormatDisk(regs*)+0xf>
c00109a6:	59                   	pop    ecx
c00109a7:	b8 03 00 00 00       	mov    eax,0x3
c00109ac:	31 d2                	xor    edx,edx
c00109ae:	5b                   	pop    ebx
c00109af:	5e                   	pop    esi
c00109b0:	c3                   	ret    
c00109b1:	85 c0                	test   eax,eax
c00109b3:	74 1b                	je     c00109d0 <SysFormatDisk(regs*)+0x65>
c00109b5:	83 f8 09             	cmp    eax,0x9
c00109b8:	74 0b                	je     c00109c5 <SysFormatDisk(regs*)+0x5a>
c00109ba:	59                   	pop    ecx
c00109bb:	b8 02 00 00 00       	mov    eax,0x2
c00109c0:	31 d2                	xor    edx,edx
c00109c2:	5b                   	pop    ebx
c00109c3:	5e                   	pop    esi
c00109c4:	c3                   	ret    
c00109c5:	59                   	pop    ecx
c00109c6:	b8 01 00 00 00       	mov    eax,0x1
c00109cb:	31 d2                	xor    edx,edx
c00109cd:	5b                   	pop    ebx
c00109ce:	5e                   	pop    esi
c00109cf:	c3                   	ret    
c00109d0:	59                   	pop    ecx
c00109d1:	31 c0                	xor    eax,eax
c00109d3:	31 d2                	xor    edx,edx
c00109d5:	5b                   	pop    ebx
c00109d6:	5e                   	pop    esi
c00109d7:	c3                   	ret    

c00109d8 <SysSetDiskVolumeLabel(regs*)>:
c00109d8:	56                   	push   esi
c00109d9:	53                   	push   ebx
c00109da:	53                   	push   ebx
c00109db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00109df:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00109e2:	83 f8 19             	cmp    eax,0x19
c00109e5:	77 2d                	ja     c0010a14 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00109e7:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c00109ee:	85 c9                	test   ecx,ecx
c00109f0:	74 22                	je     c0010a14 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00109f2:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00109f5:	85 db                	test   ebx,ebx
c00109f7:	74 1b                	je     c0010a14 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00109f9:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c00109ff:	85 d2                	test   edx,edx
c0010a01:	74 11                	je     c0010a14 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010a03:	8b 32                	mov    esi,DWORD PTR [edx]
c0010a05:	53                   	push   ebx
c0010a06:	50                   	push   eax
c0010a07:	51                   	push   ecx
c0010a08:	52                   	push   edx
c0010a09:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010a0c:	83 c4 10             	add    esp,0x10
c0010a0f:	99                   	cdq    
c0010a10:	59                   	pop    ecx
c0010a11:	5b                   	pop    ebx
c0010a12:	5e                   	pop    esi
c0010a13:	c3                   	ret    
c0010a14:	59                   	pop    ecx
c0010a15:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010a1a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a1f:	5b                   	pop    ebx
c0010a20:	5e                   	pop    esi
c0010a21:	c3                   	ret    

c0010a22 <SysGetDiskVolumeLabel(regs*)>:
c0010a22:	57                   	push   edi
c0010a23:	56                   	push   esi
c0010a24:	53                   	push   ebx
c0010a25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a29:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010a2c:	83 fa 19             	cmp    edx,0x19
c0010a2f:	77 38                	ja     c0010a69 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010a31:	8b 0c 95 20 64 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd9be0]
c0010a38:	85 c9                	test   ecx,ecx
c0010a3a:	74 2d                	je     c0010a69 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010a3c:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010a3f:	85 db                	test   ebx,ebx
c0010a41:	74 26                	je     c0010a69 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010a43:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010a46:	85 f6                	test   esi,esi
c0010a48:	74 1f                	je     c0010a69 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010a4a:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0010a50:	85 c0                	test   eax,eax
c0010a52:	74 15                	je     c0010a69 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010a54:	83 ec 0c             	sub    esp,0xc
c0010a57:	8b 38                	mov    edi,DWORD PTR [eax]
c0010a59:	56                   	push   esi
c0010a5a:	53                   	push   ebx
c0010a5b:	52                   	push   edx
c0010a5c:	51                   	push   ecx
c0010a5d:	50                   	push   eax
c0010a5e:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010a61:	83 c4 20             	add    esp,0x20
c0010a64:	99                   	cdq    
c0010a65:	5b                   	pop    ebx
c0010a66:	5e                   	pop    esi
c0010a67:	5f                   	pop    edi
c0010a68:	c3                   	ret    
c0010a69:	5b                   	pop    ebx
c0010a6a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010a6f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a74:	5e                   	pop    esi
c0010a75:	5f                   	pop    edi
c0010a76:	c3                   	ret    

c0010a77 <SysShutdown(regs*)>:
c0010a77:	83 ec 0c             	sub    esp,0xc
c0010a7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a7e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010a81:	85 c0                	test   eax,eax
c0010a83:	74 18                	je     c0010a9d <SysShutdown(regs*)+0x26>
c0010a85:	83 f8 01             	cmp    eax,0x1
c0010a88:	74 38                	je     c0010ac2 <SysShutdown(regs*)+0x4b>
c0010a8a:	83 f8 02             	cmp    eax,0x2
c0010a8d:	74 24                	je     c0010ab3 <SysShutdown(regs*)+0x3c>
c0010a8f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a94:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a99:	83 c4 0c             	add    esp,0xc
c0010a9c:	c3                   	ret    
c0010a9d:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0010aa2:	8b 10                	mov    edx,DWORD PTR [eax]
c0010aa4:	6a 00                	push   0x0
c0010aa6:	6a 00                	push   0x0
c0010aa8:	6a 00                	push   0x0
c0010aaa:	50                   	push   eax
c0010aab:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010aae:	83 c4 10             	add    esp,0x10
c0010ab1:	eb dc                	jmp    c0010a8f <SysShutdown(regs*)+0x18>
c0010ab3:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0010ab8:	8b 10                	mov    edx,DWORD PTR [eax]
c0010aba:	6a 00                	push   0x0
c0010abc:	6a 00                	push   0x0
c0010abe:	6a 01                	push   0x1
c0010ac0:	eb e8                	jmp    c0010aaa <SysShutdown(regs*)+0x33>
c0010ac2:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c0010ac7:	85 c0                	test   eax,eax
c0010ac9:	74 02                	je     c0010acd <SysShutdown(regs*)+0x56>
c0010acb:	ff d0                	call   eax
c0010acd:	31 c0                	xor    eax,eax
c0010acf:	31 d2                	xor    edx,edx
c0010ad1:	83 c4 0c             	add    esp,0xc
c0010ad4:	c3                   	ret    

c0010ad5 <SysRealpath(regs*)>:
c0010ad5:	83 ec 0c             	sub    esp,0xc
c0010ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010adc:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010adf:	85 d2                	test   edx,edx
c0010ae1:	74 07                	je     c0010aea <SysRealpath(regs*)+0x15>
c0010ae3:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010ae6:	85 c0                	test   eax,eax
c0010ae8:	75 0b                	jne    c0010af5 <SysRealpath(regs*)+0x20>
c0010aea:	b8 01 00 00 00       	mov    eax,0x1
c0010aef:	31 d2                	xor    edx,edx
c0010af1:	83 c4 0c             	add    esp,0xc
c0010af4:	c3                   	ret    
c0010af5:	51                   	push   ecx
c0010af6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010afc:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010aff:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010b05:	51                   	push   ecx
c0010b06:	52                   	push   edx
c0010b07:	50                   	push   eax
c0010b08:	e8 c9 9e ff ff       	call   c000a9d6 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010b0d:	83 c4 10             	add    esp,0x10
c0010b10:	31 c0                	xor    eax,eax
c0010b12:	31 d2                	xor    edx,edx
c0010b14:	83 c4 0c             	add    esp,0xc
c0010b17:	c3                   	ret    

c0010b18 <SysReadDir(regs*)>:
c0010b18:	53                   	push   ebx
c0010b19:	83 ec 18             	sub    esp,0x18
c0010b1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010b20:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010b23:	83 f8 02             	cmp    eax,0x2
c0010b26:	76 61                	jbe    c0010b89 <SysReadDir(regs*)+0x71>
c0010b28:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010b2f:	77 49                	ja     c0010b7a <SysReadDir(regs*)+0x62>
c0010b31:	83 ec 0c             	sub    esp,0xc
c0010b34:	50                   	push   eax
c0010b35:	e8 bd 86 ff ff       	call   c00091f7 <getFromFileDescriptor(int)>
c0010b3a:	83 c4 10             	add    esp,0x10
c0010b3d:	85 c0                	test   eax,eax
c0010b3f:	74 39                	je     c0010b7a <SysReadDir(regs*)+0x62>
c0010b41:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010b49:	83 ec 0c             	sub    esp,0xc
c0010b4c:	8b 10                	mov    edx,DWORD PTR [eax]
c0010b4e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010b52:	51                   	push   ecx
c0010b53:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010b56:	51                   	push   ecx
c0010b57:	6a 00                	push   0x0
c0010b59:	68 10 01 00 00       	push   0x110
c0010b5e:	50                   	push   eax
c0010b5f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010b62:	83 c4 20             	add    esp,0x20
c0010b65:	85 c0                	test   eax,eax
c0010b67:	74 29                	je     c0010b92 <SysReadDir(regs*)+0x7a>
c0010b69:	83 f8 07             	cmp    eax,0x7
c0010b6c:	74 1b                	je     c0010b89 <SysReadDir(regs*)+0x71>
c0010b6e:	b8 02 00 00 00       	mov    eax,0x2
c0010b73:	31 d2                	xor    edx,edx
c0010b75:	83 c4 18             	add    esp,0x18
c0010b78:	5b                   	pop    ebx
c0010b79:	c3                   	ret    
c0010b7a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b7f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b84:	83 c4 18             	add    esp,0x18
c0010b87:	5b                   	pop    ebx
c0010b88:	c3                   	ret    
c0010b89:	b8 01 00 00 00       	mov    eax,0x1
c0010b8e:	31 d2                	xor    edx,edx
c0010b90:	eb e3                	jmp    c0010b75 <SysReadDir(regs*)+0x5d>
c0010b92:	31 c0                	xor    eax,eax
c0010b94:	31 d2                	xor    edx,edx
c0010b96:	eb dd                	jmp    c0010b75 <SysReadDir(regs*)+0x5d>

c0010b98 <SysIsATTY(regs*)>:
c0010b98:	83 ec 0c             	sub    esp,0xc
c0010b9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b9f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010ba2:	83 f8 02             	cmp    eax,0x2
c0010ba5:	76 07                	jbe    c0010bae <SysIsATTY(regs*)+0x16>
c0010ba7:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010bac:	75 28                	jne    c0010bd6 <SysIsATTY(regs*)+0x3e>
c0010bae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010bb3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010bb6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010bbc:	85 c0                	test   eax,eax
c0010bbe:	74 26                	je     c0010be6 <SysIsATTY(regs*)+0x4e>
c0010bc0:	83 ec 0c             	sub    esp,0xc
c0010bc3:	8b 10                	mov    edx,DWORD PTR [eax]
c0010bc5:	50                   	push   eax
c0010bc6:	ff 12                	call   DWORD PTR [edx]
c0010bc8:	31 d2                	xor    edx,edx
c0010bca:	25 ff 00 00 00       	and    eax,0xff
c0010bcf:	83 c4 10             	add    esp,0x10
c0010bd2:	83 c4 0c             	add    esp,0xc
c0010bd5:	c3                   	ret    
c0010bd6:	83 ec 0c             	sub    esp,0xc
c0010bd9:	50                   	push   eax
c0010bda:	e8 18 86 ff ff       	call   c00091f7 <getFromFileDescriptor(int)>
c0010bdf:	83 c4 10             	add    esp,0x10
c0010be2:	85 c0                	test   eax,eax
c0010be4:	75 da                	jne    c0010bc0 <SysIsATTY(regs*)+0x28>
c0010be6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010beb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010bf0:	83 c4 0c             	add    esp,0xc
c0010bf3:	c3                   	ret    

c0010bf4 <SysSeek(regs*)>:
c0010bf4:	53                   	push   ebx
c0010bf5:	83 ec 08             	sub    esp,0x8
c0010bf8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bfc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010bff:	8d 50 fd             	lea    edx,[eax-0x3]
c0010c02:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010c08:	77 34                	ja     c0010c3e <SysSeek(regs*)+0x4a>
c0010c0a:	83 ec 0c             	sub    esp,0xc
c0010c0d:	50                   	push   eax
c0010c0e:	e8 e4 85 ff ff       	call   c00091f7 <getFromFileDescriptor(int)>
c0010c13:	83 c4 0c             	add    esp,0xc
c0010c16:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010c19:	31 db                	xor    ebx,ebx
c0010c1b:	53                   	push   ebx
c0010c1c:	51                   	push   ecx
c0010c1d:	50                   	push   eax
c0010c1e:	e8 db a0 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c0010c23:	83 c4 10             	add    esp,0x10
c0010c26:	85 c0                	test   eax,eax
c0010c28:	0f 95 c0             	setne  al
c0010c2b:	31 d2                	xor    edx,edx
c0010c2d:	25 ff 00 00 00       	and    eax,0xff
c0010c32:	f7 d8                	neg    eax
c0010c34:	83 d2 00             	adc    edx,0x0
c0010c37:	83 c4 08             	add    esp,0x8
c0010c3a:	f7 da                	neg    edx
c0010c3c:	5b                   	pop    ebx
c0010c3d:	c3                   	ret    
c0010c3e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c43:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c48:	83 c4 08             	add    esp,0x8
c0010c4b:	5b                   	pop    ebx
c0010c4c:	c3                   	ret    

c0010c4d <SysTell(regs*)>:
c0010c4d:	53                   	push   ebx
c0010c4e:	83 ec 08             	sub    esp,0x8
c0010c51:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c55:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c58:	83 f8 02             	cmp    eax,0x2
c0010c5b:	76 50                	jbe    c0010cad <SysTell(regs*)+0x60>
c0010c5d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010c62:	76 19                	jbe    c0010c7d <SysTell(regs*)+0x30>
c0010c64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010c67:	31 d2                	xor    edx,edx
c0010c69:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010c6f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c76:	31 c0                	xor    eax,eax
c0010c78:	83 c4 08             	add    esp,0x8
c0010c7b:	5b                   	pop    ebx
c0010c7c:	c3                   	ret    
c0010c7d:	83 ec 0c             	sub    esp,0xc
c0010c80:	50                   	push   eax
c0010c81:	e8 71 85 ff ff       	call   c00091f7 <getFromFileDescriptor(int)>
c0010c86:	5a                   	pop    edx
c0010c87:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010c8a:	59                   	pop    ecx
c0010c8b:	53                   	push   ebx
c0010c8c:	50                   	push   eax
c0010c8d:	e8 c2 a0 ff ff       	call   c000ad54 <File::tell(unsigned long long*)>
c0010c92:	83 c4 10             	add    esp,0x10
c0010c95:	85 c0                	test   eax,eax
c0010c97:	0f 95 c0             	setne  al
c0010c9a:	31 d2                	xor    edx,edx
c0010c9c:	25 ff 00 00 00       	and    eax,0xff
c0010ca1:	f7 d8                	neg    eax
c0010ca3:	83 d2 00             	adc    edx,0x0
c0010ca6:	83 c4 08             	add    esp,0x8
c0010ca9:	f7 da                	neg    edx
c0010cab:	5b                   	pop    ebx
c0010cac:	c3                   	ret    
c0010cad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010cb2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010cb7:	83 c4 08             	add    esp,0x8
c0010cba:	5b                   	pop    ebx
c0010cbb:	c3                   	ret    

c0010cbc <SysSize(regs*)>:
c0010cbc:	53                   	push   ebx
c0010cbd:	83 ec 18             	sub    esp,0x18
c0010cc0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010cc4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010cc7:	83 f8 02             	cmp    eax,0x2
c0010cca:	76 56                	jbe    c0010d22 <SysSize(regs*)+0x66>
c0010ccc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010cd1:	76 19                	jbe    c0010cec <SysSize(regs*)+0x30>
c0010cd3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010cd6:	31 d2                	xor    edx,edx
c0010cd8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010cde:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010ce5:	31 c0                	xor    eax,eax
c0010ce7:	83 c4 18             	add    esp,0x18
c0010cea:	5b                   	pop    ebx
c0010ceb:	c3                   	ret    
c0010cec:	83 ec 0c             	sub    esp,0xc
c0010cef:	50                   	push   eax
c0010cf0:	e8 02 85 ff ff       	call   c00091f7 <getFromFileDescriptor(int)>
c0010cf5:	83 c4 0c             	add    esp,0xc
c0010cf8:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010cfc:	52                   	push   edx
c0010cfd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010d00:	52                   	push   edx
c0010d01:	50                   	push   eax
c0010d02:	e8 e5 a1 ff ff       	call   c000aeec <File::stat(unsigned long long*, bool*)>
c0010d07:	83 c4 10             	add    esp,0x10
c0010d0a:	85 c0                	test   eax,eax
c0010d0c:	0f 95 c0             	setne  al
c0010d0f:	31 d2                	xor    edx,edx
c0010d11:	25 ff 00 00 00       	and    eax,0xff
c0010d16:	f7 d8                	neg    eax
c0010d18:	83 d2 00             	adc    edx,0x0
c0010d1b:	83 c4 18             	add    esp,0x18
c0010d1e:	f7 da                	neg    edx
c0010d20:	5b                   	pop    ebx
c0010d21:	c3                   	ret    
c0010d22:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d27:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d2c:	83 c4 18             	add    esp,0x18
c0010d2f:	5b                   	pop    ebx
c0010d30:	c3                   	ret    

c0010d31 <SysSizeFromFilename(regs*)>:
c0010d31:	57                   	push   edi
c0010d32:	56                   	push   esi
c0010d33:	53                   	push   ebx
c0010d34:	83 ec 20             	sub    esp,0x20
c0010d37:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010d3b:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010d3e:	83 fb 02             	cmp    ebx,0x2
c0010d41:	0f 86 8c 00 00 00    	jbe    c0010dd3 <SysSizeFromFilename(regs*)+0xa2>
c0010d47:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010d4d:	76 1b                	jbe    c0010d6a <SysSizeFromFilename(regs*)+0x39>
c0010d4f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010d52:	31 d2                	xor    edx,edx
c0010d54:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010d5a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010d61:	83 c4 20             	add    esp,0x20
c0010d64:	31 c0                	xor    eax,eax
c0010d66:	5b                   	pop    ebx
c0010d67:	5e                   	pop    esi
c0010d68:	5f                   	pop    edi
c0010d69:	c3                   	ret    
c0010d6a:	83 ec 0c             	sub    esp,0xc
c0010d6d:	68 14 01 00 00       	push   0x114
c0010d72:	e8 fe 6a ff ff       	call   c0007875 <malloc>
c0010d77:	83 c4 0c             	add    esp,0xc
c0010d7a:	89 c7                	mov    edi,eax
c0010d7c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d81:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d84:	50                   	push   eax
c0010d85:	53                   	push   ebx
c0010d86:	57                   	push   edi
c0010d87:	e8 f4 9d ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c0010d8c:	83 c4 0c             	add    esp,0xc
c0010d8f:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010d93:	50                   	push   eax
c0010d94:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010d97:	52                   	push   edx
c0010d98:	57                   	push   edi
c0010d99:	e8 4e a1 ff ff       	call   c000aeec <File::stat(unsigned long long*, bool*)>
c0010d9e:	83 c4 10             	add    esp,0x10
c0010da1:	85 ff                	test   edi,edi
c0010da3:	74 14                	je     c0010db9 <SysSizeFromFilename(regs*)+0x88>
c0010da5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010da9:	8b 17                	mov    edx,DWORD PTR [edi]
c0010dab:	83 ec 0c             	sub    esp,0xc
c0010dae:	57                   	push   edi
c0010daf:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010db2:	83 c4 10             	add    esp,0x10
c0010db5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010db9:	85 c0                	test   eax,eax
c0010dbb:	0f 95 c0             	setne  al
c0010dbe:	31 d2                	xor    edx,edx
c0010dc0:	25 ff 00 00 00       	and    eax,0xff
c0010dc5:	f7 d8                	neg    eax
c0010dc7:	83 d2 00             	adc    edx,0x0
c0010dca:	83 c4 20             	add    esp,0x20
c0010dcd:	f7 da                	neg    edx
c0010dcf:	5b                   	pop    ebx
c0010dd0:	5e                   	pop    esi
c0010dd1:	5f                   	pop    edi
c0010dd2:	c3                   	ret    
c0010dd3:	83 c4 20             	add    esp,0x20
c0010dd6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010ddb:	5b                   	pop    ebx
c0010ddc:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010de1:	5e                   	pop    esi
c0010de2:	5f                   	pop    edi
c0010de3:	c3                   	ret    

c0010de4 <SysClose(regs*)>:
c0010de4:	53                   	push   ebx
c0010de5:	83 ec 08             	sub    esp,0x8
c0010de8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dec:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010def:	83 f8 02             	cmp    eax,0x2
c0010df2:	76 41                	jbe    c0010e35 <SysClose(regs*)+0x51>
c0010df4:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010dfa:	83 fa 01             	cmp    edx,0x1
c0010dfd:	76 2d                	jbe    c0010e2c <SysClose(regs*)+0x48>
c0010dff:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010e04:	77 2f                	ja     c0010e35 <SysClose(regs*)+0x51>
c0010e06:	83 ec 0c             	sub    esp,0xc
c0010e09:	50                   	push   eax
c0010e0a:	e8 e8 83 ff ff       	call   c00091f7 <getFromFileDescriptor(int)>
c0010e0f:	89 c3                	mov    ebx,eax
c0010e11:	89 04 24             	mov    DWORD PTR [esp],eax
c0010e14:	e8 85 9e ff ff       	call   c000ac9e <File::close()>
c0010e19:	83 c4 10             	add    esp,0x10
c0010e1c:	85 db                	test   ebx,ebx
c0010e1e:	74 0c                	je     c0010e2c <SysClose(regs*)+0x48>
c0010e20:	83 ec 0c             	sub    esp,0xc
c0010e23:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e25:	53                   	push   ebx
c0010e26:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e29:	83 c4 10             	add    esp,0x10
c0010e2c:	31 c0                	xor    eax,eax
c0010e2e:	31 d2                	xor    edx,edx
c0010e30:	83 c4 08             	add    esp,0x8
c0010e33:	5b                   	pop    ebx
c0010e34:	c3                   	ret    
c0010e35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e3a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e3f:	83 c4 08             	add    esp,0x8
c0010e42:	5b                   	pop    ebx
c0010e43:	c3                   	ret    

c0010e44 <SysOpenDir(regs*)>:
c0010e44:	56                   	push   esi
c0010e45:	53                   	push   ebx
c0010e46:	50                   	push   eax
c0010e47:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010e4b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010e4e:	85 c0                	test   eax,eax
c0010e50:	74 5b                	je     c0010ead <SysOpenDir(regs*)+0x69>
c0010e52:	83 ec 0c             	sub    esp,0xc
c0010e55:	68 14 01 00 00       	push   0x114
c0010e5a:	e8 16 6a ff ff       	call   c0007875 <malloc>
c0010e5f:	83 c4 0c             	add    esp,0xc
c0010e62:	89 c6                	mov    esi,eax
c0010e64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e69:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e6c:	50                   	push   eax
c0010e6d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e70:	50                   	push   eax
c0010e71:	56                   	push   esi
c0010e72:	e8 33 a2 ff ff       	call   c000b0aa <Directory::Directory(char const*, Process*)>
c0010e77:	83 c4 10             	add    esp,0x10
c0010e7a:	85 f6                	test   esi,esi
c0010e7c:	74 2f                	je     c0010ead <SysOpenDir(regs*)+0x69>
c0010e7e:	83 ec 0c             	sub    esp,0xc
c0010e81:	56                   	push   esi
c0010e82:	e8 e3 a2 ff ff       	call   c000b16a <Directory::open()>
c0010e87:	83 c4 10             	add    esp,0x10
c0010e8a:	85 c0                	test   eax,eax
c0010e8c:	75 1f                	jne    c0010ead <SysOpenDir(regs*)+0x69>
c0010e8e:	83 ec 0c             	sub    esp,0xc
c0010e91:	56                   	push   esi
c0010e92:	e8 6b 80 ff ff       	call   c0008f02 <UnixFile::getFileDescriptor()>
c0010e97:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010e9a:	83 c4 10             	add    esp,0x10
c0010e9d:	89 02                	mov    DWORD PTR [edx],eax
c0010e9f:	c1 f8 1f             	sar    eax,0x1f
c0010ea2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010ea5:	31 c0                	xor    eax,eax
c0010ea7:	59                   	pop    ecx
c0010ea8:	31 d2                	xor    edx,edx
c0010eaa:	5b                   	pop    ebx
c0010eab:	5e                   	pop    esi
c0010eac:	c3                   	ret    
c0010ead:	59                   	pop    ecx
c0010eae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010eb3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010eb8:	5b                   	pop    ebx
c0010eb9:	5e                   	pop    esi
c0010eba:	c3                   	ret    

c0010ebb <SysMakeDir(regs*)>:
c0010ebb:	56                   	push   esi
c0010ebc:	53                   	push   ebx
c0010ebd:	83 ec 10             	sub    esp,0x10
c0010ec0:	68 14 01 00 00       	push   0x114
c0010ec5:	e8 ab 69 ff ff       	call   c0007875 <malloc>
c0010eca:	83 c4 0c             	add    esp,0xc
c0010ecd:	89 c3                	mov    ebx,eax
c0010ecf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ed4:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010ed7:	56                   	push   esi
c0010ed8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010edc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010edf:	50                   	push   eax
c0010ee0:	53                   	push   ebx
c0010ee1:	e8 c4 a1 ff ff       	call   c000b0aa <Directory::Directory(char const*, Process*)>
c0010ee6:	83 c4 10             	add    esp,0x10
c0010ee9:	85 db                	test   ebx,ebx
c0010eeb:	74 2a                	je     c0010f17 <SysMakeDir(regs*)+0x5c>
c0010eed:	83 ec 0c             	sub    esp,0xc
c0010ef0:	53                   	push   ebx
c0010ef1:	e8 54 a4 ff ff       	call   c000b34a <Directory::create()>
c0010ef6:	89 c6                	mov    esi,eax
c0010ef8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010efa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010efd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010f00:	83 c4 10             	add    esp,0x10
c0010f03:	31 c0                	xor    eax,eax
c0010f05:	59                   	pop    ecx
c0010f06:	85 f6                	test   esi,esi
c0010f08:	5b                   	pop    ebx
c0010f09:	0f 95 c0             	setne  al
c0010f0c:	5e                   	pop    esi
c0010f0d:	31 d2                	xor    edx,edx
c0010f0f:	f7 d8                	neg    eax
c0010f11:	83 d2 00             	adc    edx,0x0
c0010f14:	f7 da                	neg    edx
c0010f16:	c3                   	ret    
c0010f17:	59                   	pop    ecx
c0010f18:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010f1d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f22:	5b                   	pop    ebx
c0010f23:	5e                   	pop    esi
c0010f24:	c3                   	ret    

c0010f25 <SysCloseDir(regs*)>:
c0010f25:	53                   	push   ebx
c0010f26:	83 ec 08             	sub    esp,0x8
c0010f29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f2d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010f30:	8d 50 fd             	lea    edx,[eax-0x3]
c0010f33:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010f39:	77 2f                	ja     c0010f6a <SysCloseDir(regs*)+0x45>
c0010f3b:	83 ec 0c             	sub    esp,0xc
c0010f3e:	50                   	push   eax
c0010f3f:	e8 b3 82 ff ff       	call   c00091f7 <getFromFileDescriptor(int)>
c0010f44:	89 c3                	mov    ebx,eax
c0010f46:	89 04 24             	mov    DWORD PTR [esp],eax
c0010f49:	e8 78 a2 ff ff       	call   c000b1c6 <Directory::close()>
c0010f4e:	83 c4 10             	add    esp,0x10
c0010f51:	85 db                	test   ebx,ebx
c0010f53:	74 0c                	je     c0010f61 <SysCloseDir(regs*)+0x3c>
c0010f55:	83 ec 0c             	sub    esp,0xc
c0010f58:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010f5a:	53                   	push   ebx
c0010f5b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010f5e:	83 c4 10             	add    esp,0x10
c0010f61:	31 c0                	xor    eax,eax
c0010f63:	31 d2                	xor    edx,edx
c0010f65:	83 c4 08             	add    esp,0x8
c0010f68:	5b                   	pop    ebx
c0010f69:	c3                   	ret    
c0010f6a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010f6f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f74:	83 c4 08             	add    esp,0x8
c0010f77:	5b                   	pop    ebx
c0010f78:	c3                   	ret    

c0010f79 <SysWait(regs*)>:
c0010f79:	83 ec 10             	sub    esp,0x10
c0010f7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010f80:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010f83:	52                   	push   edx
c0010f84:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010f87:	51                   	push   ecx
c0010f88:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010f8b:	50                   	push   eax
c0010f8c:	e8 93 38 00 00       	call   c0014824 <waitTask(int, int*, int)>
c0010f91:	83 c4 1c             	add    esp,0x1c
c0010f94:	99                   	cdq    
c0010f95:	c3                   	ret    

c0010f96 <SysNotImpl(regs*)>:
c0010f96:	83 ec 18             	sub    esp,0x18
c0010f99:	68 a8 ff 01 c0       	push   0xc001ffa8
c0010f9e:	e8 f8 f3 ff ff       	call   c001039b <KePanic(char const*)>
c0010fa3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010fa8:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010fad:	83 c4 1c             	add    esp,0x1c
c0010fb0:	c3                   	ret    

c0010fb1 <SysPanic(regs*)>:
c0010fb1:	83 ec 18             	sub    esp,0x18
c0010fb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fb8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010fbb:	50                   	push   eax
c0010fbc:	e8 da f3 ff ff       	call   c001039b <KePanic(char const*)>
c0010fc1:	b8 01 00 00 00       	mov    eax,0x1
c0010fc6:	31 d2                	xor    edx,edx
c0010fc8:	83 c4 1c             	add    esp,0x1c
c0010fcb:	c3                   	ret    

c0010fcc <SysRmdir(regs*)>:
c0010fcc:	56                   	push   esi
c0010fcd:	53                   	push   ebx
c0010fce:	83 ec 20             	sub    esp,0x20
c0010fd1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010fd5:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010fd8:	68 14 01 00 00       	push   0x114
c0010fdd:	e8 93 68 ff ff       	call   c0007875 <malloc>
c0010fe2:	83 c4 0c             	add    esp,0xc
c0010fe5:	89 c3                	mov    ebx,eax
c0010fe7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010fef:	50                   	push   eax
c0010ff0:	56                   	push   esi
c0010ff1:	53                   	push   ebx
c0010ff2:	e8 89 9b ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c0010ff7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ffa:	e8 b9 9d ff ff       	call   c000adb8 <File::unlink()>
c0010fff:	83 c4 10             	add    esp,0x10
c0011002:	85 db                	test   ebx,ebx
c0011004:	74 14                	je     c001101a <SysRmdir(regs*)+0x4e>
c0011006:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001100a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001100c:	83 ec 0c             	sub    esp,0xc
c001100f:	53                   	push   ebx
c0011010:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011013:	83 c4 10             	add    esp,0x10
c0011016:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001101a:	85 c0                	test   eax,eax
c001101c:	0f 95 c0             	setne  al
c001101f:	31 d2                	xor    edx,edx
c0011021:	25 ff 00 00 00       	and    eax,0xff
c0011026:	f7 d8                	neg    eax
c0011028:	83 d2 00             	adc    edx,0x0
c001102b:	83 c4 14             	add    esp,0x14
c001102e:	f7 da                	neg    edx
c0011030:	5b                   	pop    ebx
c0011031:	5e                   	pop    esi
c0011032:	c3                   	ret    

c0011033 <SysUnlink(regs*)>:
c0011033:	56                   	push   esi
c0011034:	53                   	push   ebx
c0011035:	83 ec 20             	sub    esp,0x20
c0011038:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001103c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001103f:	68 14 01 00 00       	push   0x114
c0011044:	e8 2c 68 ff ff       	call   c0007875 <malloc>
c0011049:	83 c4 0c             	add    esp,0xc
c001104c:	89 c3                	mov    ebx,eax
c001104e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011053:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011056:	50                   	push   eax
c0011057:	56                   	push   esi
c0011058:	53                   	push   ebx
c0011059:	e8 22 9b ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c001105e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011061:	e8 52 9d ff ff       	call   c000adb8 <File::unlink()>
c0011066:	83 c4 10             	add    esp,0x10
c0011069:	85 db                	test   ebx,ebx
c001106b:	74 14                	je     c0011081 <SysUnlink(regs*)+0x4e>
c001106d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011071:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011073:	83 ec 0c             	sub    esp,0xc
c0011076:	53                   	push   ebx
c0011077:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001107a:	83 c4 10             	add    esp,0x10
c001107d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011081:	85 c0                	test   eax,eax
c0011083:	0f 95 c0             	setne  al
c0011086:	31 d2                	xor    edx,edx
c0011088:	25 ff 00 00 00       	and    eax,0xff
c001108d:	f7 d8                	neg    eax
c001108f:	83 d2 00             	adc    edx,0x0
c0011092:	83 c4 14             	add    esp,0x14
c0011095:	f7 da                	neg    edx
c0011097:	5b                   	pop    ebx
c0011098:	5e                   	pop    esi
c0011099:	c3                   	ret    

c001109a <SysGetArgv(regs*)>:
c001109a:	83 ec 0c             	sub    esp,0xc
c001109d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00110a1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00110a4:	85 c0                	test   eax,eax
c00110a6:	78 2c                	js     c00110d4 <SysGetArgv(regs*)+0x3a>
c00110a8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00110ae:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00110b1:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00110b7:	7d 1b                	jge    c00110d4 <SysGetArgv(regs*)+0x3a>
c00110b9:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00110c0:	85 c0                	test   eax,eax
c00110c2:	74 18                	je     c00110dc <SysGetArgv(regs*)+0x42>
c00110c4:	83 ec 08             	sub    esp,0x8
c00110c7:	50                   	push   eax
c00110c8:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00110cb:	50                   	push   eax
c00110cc:	e8 2f f5 fe ff       	call   c0000600 <strcpy>
c00110d1:	83 c4 10             	add    esp,0x10
c00110d4:	31 c0                	xor    eax,eax
c00110d6:	31 d2                	xor    edx,edx
c00110d8:	83 c4 0c             	add    esp,0xc
c00110db:	c3                   	ret    
c00110dc:	b8 01 00 00 00       	mov    eax,0x1
c00110e1:	31 d2                	xor    edx,edx
c00110e3:	83 c4 0c             	add    esp,0xc
c00110e6:	c3                   	ret    

c00110e7 <SysUSleep(regs*)>:
c00110e7:	83 ec 1c             	sub    esp,0x1c
c00110ea:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00110ee:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00110f1:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00110f4:	6a 00                	push   0x0
c00110f6:	6a 64                	push   0x64
c00110f8:	52                   	push   edx
c00110f9:	50                   	push   eax
c00110fa:	e8 51 c7 00 00       	call   c001d850 <__udivdi3>
c00110ff:	83 c4 14             	add    esp,0x14
c0011102:	50                   	push   eax
c0011103:	e8 f0 37 00 00       	call   c00148f8 <milliTenthSleep(unsigned int)>
c0011108:	31 c0                	xor    eax,eax
c001110a:	31 d2                	xor    edx,edx
c001110c:	83 c4 1c             	add    esp,0x1c
c001110f:	c3                   	ret    

c0011110 <SysSpawn(regs*)>:
c0011110:	56                   	push   esi
c0011111:	53                   	push   ebx
c0011112:	50                   	push   eax
c0011113:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011117:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001111a:	85 c0                	test   eax,eax
c001111c:	75 08                	jne    c0011126 <SysSpawn(regs*)+0x16>
c001111e:	59                   	pop    ecx
c001111f:	31 c0                	xor    eax,eax
c0011121:	31 d2                	xor    edx,edx
c0011123:	5b                   	pop    ebx
c0011124:	5e                   	pop    esi
c0011125:	c3                   	ret    
c0011126:	83 ec 0c             	sub    esp,0xc
c0011129:	68 24 07 00 00       	push   0x724
c001112e:	e8 42 67 ff ff       	call   c0007875 <malloc>
c0011133:	83 c4 10             	add    esp,0x10
c0011136:	89 c6                	mov    esi,eax
c0011138:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001113b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001113e:	85 c0                	test   eax,eax
c0011140:	75 33                	jne    c0011175 <SysSpawn(regs*)+0x65>
c0011142:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011147:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001114a:	52                   	push   edx
c001114b:	50                   	push   eax
c001114c:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c001114f:	53                   	push   ebx
c0011150:	56                   	push   esi
c0011151:	e8 4e 2e 00 00       	call   c0013fa4 <Process::Process(char const*, Process*, char**)>
c0011156:	83 c4 10             	add    esp,0x10
c0011159:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011160:	75 bc                	jne    c001111e <SysSpawn(regs*)+0xe>
c0011162:	83 ec 0c             	sub    esp,0xc
c0011165:	56                   	push   esi
c0011166:	e8 65 33 00 00       	call   c00144d0 <Process::createUserThread()>
c001116b:	8b 06                	mov    eax,DWORD PTR [esi]
c001116d:	83 c4 10             	add    esp,0x10
c0011170:	99                   	cdq    
c0011171:	59                   	pop    ecx
c0011172:	5b                   	pop    ebx
c0011173:	5e                   	pop    esi
c0011174:	c3                   	ret    
c0011175:	31 c0                	xor    eax,eax
c0011177:	eb d1                	jmp    c001114a <SysSpawn(regs*)+0x3a>

c0011179 <SysGetEnv(regs*)>:
c0011179:	57                   	push   edi
c001117a:	56                   	push   esi
c001117b:	53                   	push   ebx
c001117c:	83 ec 1c             	sub    esp,0x1c
c001117f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011183:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011188:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001118b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001118e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011191:	50                   	push   eax
c0011192:	e8 bc f0 ff ff       	call   c0010253 <Krnl::getProcessTotalEnvCount(Process*)>
c0011197:	83 c4 10             	add    esp,0x10
c001119a:	39 c7                	cmp    edi,eax
c001119c:	7c 14                	jl     c00111b2 <SysGetEnv(regs*)+0x39>
c001119e:	85 f6                	test   esi,esi
c00111a0:	75 0b                	jne    c00111ad <SysGetEnv(regs*)+0x34>
c00111a2:	83 c4 10             	add    esp,0x10
c00111a5:	31 c0                	xor    eax,eax
c00111a7:	5b                   	pop    ebx
c00111a8:	31 d2                	xor    edx,edx
c00111aa:	5e                   	pop    esi
c00111ab:	5f                   	pop    edi
c00111ac:	c3                   	ret    
c00111ad:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00111b0:	eb f0                	jmp    c00111a2 <SysGetEnv(regs*)+0x29>
c00111b2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00111b6:	52                   	push   edx
c00111b7:	57                   	push   edi
c00111b8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00111be:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c00111c1:	51                   	push   ecx
c00111c2:	50                   	push   eax
c00111c3:	e8 ab f0 ff ff       	call   c0010273 <Krnl::getProcessEnvPair(Process*, int)>
c00111c8:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00111cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00111cf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00111d3:	83 c4 0c             	add    esp,0xc
c00111d6:	85 db                	test   ebx,ebx
c00111d8:	75 23                	jne    c00111fd <SysGetEnv(regs*)+0x84>
c00111da:	83 ec 0c             	sub    esp,0xc
c00111dd:	50                   	push   eax
c00111de:	e8 5d f3 fe ff       	call   c0000540 <strlen>
c00111e3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00111e6:	89 c3                	mov    ebx,eax
c00111e8:	e8 53 f3 fe ff       	call   c0000540 <strlen>
c00111ed:	31 d2                	xor    edx,edx
c00111ef:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00111f3:	83 c4 10             	add    esp,0x10
c00111f6:	83 c4 10             	add    esp,0x10
c00111f9:	5b                   	pop    ebx
c00111fa:	5e                   	pop    esi
c00111fb:	5f                   	pop    edi
c00111fc:	c3                   	ret    
c00111fd:	83 ec 08             	sub    esp,0x8
c0011200:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011203:	50                   	push   eax
c0011204:	56                   	push   esi
c0011205:	e8 f6 f3 fe ff       	call   c0000600 <strcpy>
c001120a:	58                   	pop    eax
c001120b:	5a                   	pop    edx
c001120c:	68 c2 ff 01 c0       	push   0xc001ffc2
c0011211:	56                   	push   esi
c0011212:	e8 a9 f5 fe ff       	call   c00007c0 <strcat>
c0011217:	59                   	pop    ecx
c0011218:	5b                   	pop    ebx
c0011219:	57                   	push   edi
c001121a:	56                   	push   esi
c001121b:	e8 a0 f5 fe ff       	call   c00007c0 <strcat>
c0011220:	83 c4 10             	add    esp,0x10
c0011223:	e9 7a ff ff ff       	jmp    c00111a2 <SysGetEnv(regs*)+0x29>

c0011228 <SysSetFatAttrib(regs*)>:
c0011228:	57                   	push   edi
c0011229:	56                   	push   esi
c001122a:	53                   	push   ebx
c001122b:	83 ec 1c             	sub    esp,0x1c
c001122e:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011232:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011235:	68 14 01 00 00       	push   0x114
c001123a:	e8 36 66 ff ff       	call   c0007875 <malloc>
c001123f:	83 c4 0c             	add    esp,0xc
c0011242:	89 c3                	mov    ebx,eax
c0011244:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011249:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001124c:	50                   	push   eax
c001124d:	57                   	push   edi
c001124e:	53                   	push   ebx
c001124f:	e8 2c 99 ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c0011254:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011257:	83 c4 0c             	add    esp,0xc
c001125a:	0f b6 d4             	movzx  edx,ah
c001125d:	25 ff 00 00 00       	and    eax,0xff
c0011262:	52                   	push   edx
c0011263:	50                   	push   eax
c0011264:	53                   	push   ebx
c0011265:	e8 e8 9b ff ff       	call   c000ae52 <File::chfatattr(unsigned char, unsigned char)>
c001126a:	83 c4 10             	add    esp,0x10
c001126d:	85 db                	test   ebx,ebx
c001126f:	74 14                	je     c0011285 <SysSetFatAttrib(regs*)+0x5d>
c0011271:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011275:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011277:	83 ec 0c             	sub    esp,0xc
c001127a:	53                   	push   ebx
c001127b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001127e:	83 c4 10             	add    esp,0x10
c0011281:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011285:	85 c0                	test   eax,eax
c0011287:	0f 95 c0             	setne  al
c001128a:	31 d2                	xor    edx,edx
c001128c:	25 ff 00 00 00       	and    eax,0xff
c0011291:	f7 d8                	neg    eax
c0011293:	83 d2 00             	adc    edx,0x0
c0011296:	83 c4 10             	add    esp,0x10
c0011299:	f7 da                	neg    edx
c001129b:	5b                   	pop    ebx
c001129c:	5e                   	pop    esi
c001129d:	5f                   	pop    edi
c001129e:	c3                   	ret    

c001129f <SysPipe(regs*)>:
c001129f:	57                   	push   edi
c00112a0:	56                   	push   esi
c00112a1:	53                   	push   ebx
c00112a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112a6:	83 ec 0c             	sub    esp,0xc
c00112a9:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00112ac:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00112af:	6a 20                	push   0x20
c00112b1:	e8 bf 65 ff ff       	call   c0007875 <malloc>
c00112b6:	89 c3                	mov    ebx,eax
c00112b8:	58                   	pop    eax
c00112b9:	5a                   	pop    edx
c00112ba:	68 00 50 00 00       	push   0x5000
c00112bf:	53                   	push   ebx
c00112c0:	e8 b5 6e ff ff       	call   c000817a <Pipe::Pipe(int)>
c00112c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00112c8:	e8 35 7c ff ff       	call   c0008f02 <UnixFile::getFileDescriptor()>
c00112cd:	89 07                	mov    DWORD PTR [edi],eax
c00112cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00112d2:	e8 2b 7c ff ff       	call   c0008f02 <UnixFile::getFileDescriptor()>
c00112d7:	83 c4 10             	add    esp,0x10
c00112da:	89 06                	mov    DWORD PTR [esi],eax
c00112dc:	31 d2                	xor    edx,edx
c00112de:	5b                   	pop    ebx
c00112df:	31 c0                	xor    eax,eax
c00112e1:	5e                   	pop    esi
c00112e2:	5f                   	pop    edi
c00112e3:	c3                   	ret    

c00112e4 <SysGetUnixTime(regs*)>:
c00112e4:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c00112e9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00112ef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00112f3:	e9 96 a2 ff ff       	jmp    c000b58e <Clock::timeInSecondsLocal()>

c00112f8 <string_ends_with(char const*, char const*)>:
c00112f8:	57                   	push   edi
c00112f9:	56                   	push   esi
c00112fa:	53                   	push   ebx
c00112fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00112ff:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011303:	83 ec 0c             	sub    esp,0xc
c0011306:	53                   	push   ebx
c0011307:	e8 34 f2 fe ff       	call   c0000540 <strlen>
c001130c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001130f:	89 c6                	mov    esi,eax
c0011311:	e8 2a f2 fe ff       	call   c0000540 <strlen>
c0011316:	83 c4 10             	add    esp,0x10
c0011319:	39 c6                	cmp    esi,eax
c001131b:	7d 06                	jge    c0011323 <string_ends_with(char const*, char const*)+0x2b>
c001131d:	5b                   	pop    ebx
c001131e:	31 c0                	xor    eax,eax
c0011320:	5e                   	pop    esi
c0011321:	5f                   	pop    edi
c0011322:	c3                   	ret    
c0011323:	83 ec 08             	sub    esp,0x8
c0011326:	29 c6                	sub    esi,eax
c0011328:	57                   	push   edi
c0011329:	01 f3                	add    ebx,esi
c001132b:	53                   	push   ebx
c001132c:	e8 af f3 fe ff       	call   c00006e0 <strcmp>
c0011331:	83 c4 10             	add    esp,0x10
c0011334:	85 c0                	test   eax,eax
c0011336:	5b                   	pop    ebx
c0011337:	0f 94 c0             	sete   al
c001133a:	5e                   	pop    esi
c001133b:	25 ff 00 00 00       	and    eax,0xff
c0011340:	5f                   	pop    edi
c0011341:	c3                   	ret    

c0011342 <SysOpen(regs*)>:
c0011342:	56                   	push   esi
c0011343:	53                   	push   ebx
c0011344:	81 ec 04 01 00 00    	sub    esp,0x104
c001134a:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011351:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011354:	85 c9                	test   ecx,ecx
c0011356:	0f 84 b9 01 00 00    	je     c0011515 <SysOpen(regs*)+0x1d3>
c001135c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001135f:	85 c0                	test   eax,eax
c0011361:	0f 84 ae 01 00 00    	je     c0011515 <SysOpen(regs*)+0x1d3>
c0011367:	52                   	push   edx
c0011368:	68 c4 ff 01 c0       	push   0xc001ffc4
c001136d:	50                   	push   eax
c001136e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011372:	56                   	push   esi
c0011373:	e8 5e 96 ff ff       	call   c000a9d6 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011378:	89 34 24             	mov    DWORD PTR [esp],esi
c001137b:	e8 c0 f1 fe ff       	call   c0000540 <strlen>
c0011380:	83 c4 10             	add    esp,0x10
c0011383:	48                   	dec    eax
c0011384:	74 1d                	je     c00113a3 <SysOpen(regs*)+0x61>
c0011386:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0011389:	eb 0f                	jmp    c001139a <SysOpen(regs*)+0x58>
c001138b:	80 fa 3a             	cmp    dl,0x3a
c001138e:	74 0f                	je     c001139f <SysOpen(regs*)+0x5d>
c0011390:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011394:	48                   	dec    eax
c0011395:	74 0c                	je     c00113a3 <SysOpen(regs*)+0x61>
c0011397:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001139a:	80 fa 2e             	cmp    dl,0x2e
c001139d:	75 ec                	jne    c001138b <SysOpen(regs*)+0x49>
c001139f:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00113a3:	83 ec 08             	sub    esp,0x8
c00113a6:	68 c8 ff 01 c0       	push   0xc001ffc8
c00113ab:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00113ae:	50                   	push   eax
c00113af:	e8 44 ff ff ff       	call   c00112f8 <string_ends_with(char const*, char const*)>
c00113b4:	83 c4 10             	add    esp,0x10
c00113b7:	85 c0                	test   eax,eax
c00113b9:	74 1d                	je     c00113d8 <SysOpen(regs*)+0x96>
c00113bb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00113be:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00113c4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00113cb:	81 c4 04 01 00 00    	add    esp,0x104
c00113d1:	31 c0                	xor    eax,eax
c00113d3:	31 d2                	xor    edx,edx
c00113d5:	5b                   	pop    ebx
c00113d6:	5e                   	pop    esi
c00113d7:	c3                   	ret    
c00113d8:	83 ec 08             	sub    esp,0x8
c00113db:	68 cd ff 01 c0       	push   0xc001ffcd
c00113e0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00113e3:	50                   	push   eax
c00113e4:	e8 0f ff ff ff       	call   c00112f8 <string_ends_with(char const*, char const*)>
c00113e9:	83 c4 10             	add    esp,0x10
c00113ec:	85 c0                	test   eax,eax
c00113ee:	75 cb                	jne    c00113bb <SysOpen(regs*)+0x79>
c00113f0:	83 ec 08             	sub    esp,0x8
c00113f3:	68 c9 ff 01 c0       	push   0xc001ffc9
c00113f8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00113fb:	50                   	push   eax
c00113fc:	e8 df f2 fe ff       	call   c00006e0 <strcmp>
c0011401:	83 c4 10             	add    esp,0x10
c0011404:	85 c0                	test   eax,eax
c0011406:	74 b3                	je     c00113bb <SysOpen(regs*)+0x79>
c0011408:	83 ec 08             	sub    esp,0x8
c001140b:	68 c8 ff 01 c0       	push   0xc001ffc8
c0011410:	56                   	push   esi
c0011411:	e8 e2 fe ff ff       	call   c00112f8 <string_ends_with(char const*, char const*)>
c0011416:	83 c4 10             	add    esp,0x10
c0011419:	85 c0                	test   eax,eax
c001141b:	75 9e                	jne    c00113bb <SysOpen(regs*)+0x79>
c001141d:	83 ec 08             	sub    esp,0x8
c0011420:	68 d2 ff 01 c0       	push   0xc001ffd2
c0011425:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011428:	50                   	push   eax
c0011429:	e8 ca fe ff ff       	call   c00112f8 <string_ends_with(char const*, char const*)>
c001142e:	83 c4 10             	add    esp,0x10
c0011431:	85 c0                	test   eax,eax
c0011433:	0f 85 ef 00 00 00    	jne    c0011528 <SysOpen(regs*)+0x1e6>
c0011439:	83 ec 08             	sub    esp,0x8
c001143c:	68 d7 ff 01 c0       	push   0xc001ffd7
c0011441:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011444:	50                   	push   eax
c0011445:	e8 ae fe ff ff       	call   c00112f8 <string_ends_with(char const*, char const*)>
c001144a:	83 c4 10             	add    esp,0x10
c001144d:	85 c0                	test   eax,eax
c001144f:	0f 85 d3 00 00 00    	jne    c0011528 <SysOpen(regs*)+0x1e6>
c0011455:	83 ec 08             	sub    esp,0x8
c0011458:	68 d3 ff 01 c0       	push   0xc001ffd3
c001145d:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011460:	51                   	push   ecx
c0011461:	e8 7a f2 fe ff       	call   c00006e0 <strcmp>
c0011466:	83 c4 10             	add    esp,0x10
c0011469:	85 c0                	test   eax,eax
c001146b:	0f 84 b7 00 00 00    	je     c0011528 <SysOpen(regs*)+0x1e6>
c0011471:	83 ec 08             	sub    esp,0x8
c0011474:	68 d2 ff 01 c0       	push   0xc001ffd2
c0011479:	56                   	push   esi
c001147a:	e8 79 fe ff ff       	call   c00112f8 <string_ends_with(char const*, char const*)>
c001147f:	83 c4 10             	add    esp,0x10
c0011482:	85 c0                	test   eax,eax
c0011484:	0f 85 9e 00 00 00    	jne    c0011528 <SysOpen(regs*)+0x1e6>
c001148a:	83 ec 0c             	sub    esp,0xc
c001148d:	68 14 01 00 00       	push   0x114
c0011492:	e8 de 63 ff ff       	call   c0007875 <malloc>
c0011497:	83 c4 0c             	add    esp,0xc
c001149a:	89 c6                	mov    esi,eax
c001149c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114a1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00114a4:	50                   	push   eax
c00114a5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00114a8:	52                   	push   edx
c00114a9:	56                   	push   esi
c00114aa:	e8 d1 96 ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c00114af:	83 c4 10             	add    esp,0x10
c00114b2:	85 f6                	test   esi,esi
c00114b4:	74 5f                	je     c0011515 <SysOpen(regs*)+0x1d3>
c00114b6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00114b9:	89 d0                	mov    eax,edx
c00114bb:	25 ff 00 00 00       	and    eax,0xff
c00114c0:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00114c3:	89 d0                	mov    eax,edx
c00114c5:	83 e0 01             	and    eax,0x1
c00114c8:	f6 c2 02             	test   dl,0x2
c00114cb:	74 03                	je     c00114d0 <SysOpen(regs*)+0x18e>
c00114cd:	83 c8 02             	or     eax,0x2
c00114d0:	f6 c2 04             	test   dl,0x4
c00114d3:	74 03                	je     c00114d8 <SysOpen(regs*)+0x196>
c00114d5:	83 c8 04             	or     eax,0x4
c00114d8:	f6 c2 08             	test   dl,0x8
c00114db:	74 03                	je     c00114e0 <SysOpen(regs*)+0x19e>
c00114dd:	83 c8 0a             	or     eax,0xa
c00114e0:	83 e2 10             	and    edx,0x10
c00114e3:	74 03                	je     c00114e8 <SysOpen(regs*)+0x1a6>
c00114e5:	83 c8 12             	or     eax,0x12
c00114e8:	83 ec 08             	sub    esp,0x8
c00114eb:	50                   	push   eax
c00114ec:	56                   	push   esi
c00114ed:	e8 4e 97 ff ff       	call   c000ac40 <File::open(FileOpenMode)>
c00114f2:	83 c4 10             	add    esp,0x10
c00114f5:	85 c0                	test   eax,eax
c00114f7:	75 1c                	jne    c0011515 <SysOpen(regs*)+0x1d3>
c00114f9:	83 ec 0c             	sub    esp,0xc
c00114fc:	56                   	push   esi
c00114fd:	e8 00 7a ff ff       	call   c0008f02 <UnixFile::getFileDescriptor()>
c0011502:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011505:	83 c4 10             	add    esp,0x10
c0011508:	89 02                	mov    DWORD PTR [edx],eax
c001150a:	c1 f8 1f             	sar    eax,0x1f
c001150d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011510:	e9 b6 fe ff ff       	jmp    c00113cb <SysOpen(regs*)+0x89>
c0011515:	81 c4 04 01 00 00    	add    esp,0x104
c001151b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011520:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011525:	5b                   	pop    ebx
c0011526:	5e                   	pop    esi
c0011527:	c3                   	ret    
c0011528:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001152b:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011531:	e9 8e fe ff ff       	jmp    c00113c4 <SysOpen(regs*)+0x82>

c0011536 <KeSystemCall(regs*, void*)>:
c0011536:	53                   	push   ebx
c0011537:	83 ec 08             	sub    esp,0x8
c001153a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001153e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011541:	83 f8 32             	cmp    eax,0x32
c0011544:	77 16                	ja     c001155c <KeSystemCall(regs*, void*)+0x26>
c0011546:	8b 14 85 a0 12 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffded60]
c001154d:	85 d2                	test   edx,edx
c001154f:	74 0b                	je     c001155c <KeSystemCall(regs*, void*)+0x26>
c0011551:	83 ec 0c             	sub    esp,0xc
c0011554:	53                   	push   ebx
c0011555:	ff d2                	call   edx
c0011557:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001155a:	eb 0d                	jmp    c0011569 <KeSystemCall(regs*, void*)+0x33>
c001155c:	52                   	push   edx
c001155d:	52                   	push   edx
c001155e:	50                   	push   eax
c001155f:	68 dc ff 01 c0       	push   0xc001ffdc
c0011564:	e8 a1 90 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0011569:	83 c4 10             	add    esp,0x10
c001156c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011571:	31 d2                	xor    edx,edx
c0011573:	83 c4 08             	add    esp,0x8
c0011576:	5b                   	pop    ebx
c0011577:	c3                   	ret    

c0011578 <CmOpen(char const*)>:
c0011578:	57                   	push   edi
c0011579:	56                   	push   esi
c001157a:	53                   	push   ebx
c001157b:	83 ec 1c             	sub    esp,0x1c
c001157e:	6a 30                	push   0x30
c0011580:	e8 f0 62 ff ff       	call   c0007875 <malloc>
c0011585:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001158c:	89 c3                	mov    ebx,eax
c001158e:	e8 e2 62 ff ff       	call   c0007875 <malloc>
c0011593:	83 c4 0c             	add    esp,0xc
c0011596:	89 c6                	mov    esi,eax
c0011598:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c001159e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00115a2:	50                   	push   eax
c00115a3:	e8 d8 95 ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c00115a8:	83 c4 0c             	add    esp,0xc
c00115ab:	89 33                	mov    DWORD PTR [ebx],esi
c00115ad:	8d 44 24 07          	lea    eax,[esp+0x7]
c00115b1:	50                   	push   eax
c00115b2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00115b6:	50                   	push   eax
c00115b7:	56                   	push   esi
c00115b8:	e8 2f 99 ff ff       	call   c000aeec <File::stat(unsigned long long*, bool*)>
c00115bd:	5a                   	pop    edx
c00115be:	59                   	pop    ecx
c00115bf:	6a 01                	push   0x1
c00115c1:	ff 33                	push   DWORD PTR [ebx]
c00115c3:	e8 78 96 ff ff       	call   c000ac40 <File::open(FileOpenMode)>
c00115c8:	5e                   	pop    esi
c00115c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00115cd:	e8 a3 62 ff ff       	call   c0007875 <malloc>
c00115d2:	5a                   	pop    edx
c00115d3:	89 c7                	mov    edi,eax
c00115d5:	8d 74 24 10          	lea    esi,[esp+0x10]
c00115d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115db:	8b 10                	mov    edx,DWORD PTR [eax]
c00115dd:	56                   	push   esi
c00115de:	57                   	push   edi
c00115df:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00115e3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00115e7:	50                   	push   eax
c00115e8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00115eb:	83 c4 14             	add    esp,0x14
c00115ee:	ff 33                	push   DWORD PTR [ebx]
c00115f0:	e8 a9 96 ff ff       	call   c000ac9e <File::close()>
c00115f5:	59                   	pop    ecx
c00115f6:	58                   	pop    eax
c00115f7:	6a 13                	push   0x13
c00115f9:	ff 33                	push   DWORD PTR [ebx]
c00115fb:	e8 40 96 ff ff       	call   c000ac40 <File::open(FileOpenMode)>
c0011600:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011602:	8b 10                	mov    edx,DWORD PTR [eax]
c0011604:	89 34 24             	mov    DWORD PTR [esp],esi
c0011607:	57                   	push   edi
c0011608:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001160c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011610:	50                   	push   eax
c0011611:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011614:	83 c4 14             	add    esp,0x14
c0011617:	57                   	push   edi
c0011618:	e8 68 62 ff ff       	call   c0007885 <free>
c001161d:	83 c4 10             	add    esp,0x10
c0011620:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0011623:	75 10                	jne    c0011635 <CmOpen(char const*)+0xbd>
c0011625:	83 ec 0c             	sub    esp,0xc
c0011628:	68 f0 ff 01 c0       	push   0xc001fff0
c001162d:	e8 69 ed ff ff       	call   c001039b <KePanic(char const*)>
c0011632:	83 c4 10             	add    esp,0x10
c0011635:	8d 7b 05             	lea    edi,[ebx+0x5]
c0011638:	50                   	push   eax
c0011639:	6a 00                	push   0x0
c001163b:	6a 00                	push   0x0
c001163d:	ff 33                	push   DWORD PTR [ebx]
c001163f:	e8 ba 96 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c0011644:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011646:	8b 10                	mov    edx,DWORD PTR [eax]
c0011648:	89 34 24             	mov    DWORD PTR [esp],esi
c001164b:	57                   	push   edi
c001164c:	6a 00                	push   0x0
c001164e:	6a 2b                	push   0x2b
c0011650:	50                   	push   eax
c0011651:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011654:	83 c4 1c             	add    esp,0x1c
c0011657:	6a 00                	push   0x0
c0011659:	6a 00                	push   0x0
c001165b:	ff 33                	push   DWORD PTR [ebx]
c001165d:	e8 9c 96 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c0011662:	83 c4 0c             	add    esp,0xc
c0011665:	6a 08                	push   0x8
c0011667:	68 01 00 02 c0       	push   0xc0020001
c001166c:	57                   	push   edi
c001166d:	e8 1e ed fe ff       	call   c0000390 <memcmp>
c0011672:	83 c4 10             	add    esp,0x10
c0011675:	85 c0                	test   eax,eax
c0011677:	74 10                	je     c0011689 <CmOpen(char const*)+0x111>
c0011679:	83 ec 0c             	sub    esp,0xc
c001167c:	68 0a 00 02 c0       	push   0xc002000a
c0011681:	e8 15 ed ff ff       	call   c001039b <KePanic(char const*)>
c0011686:	83 c4 10             	add    esp,0x10
c0011689:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c001168d:	89 d8                	mov    eax,ebx
c001168f:	83 c4 10             	add    esp,0x10
c0011692:	5b                   	pop    ebx
c0011693:	5e                   	pop    esi
c0011694:	5f                   	pop    edi
c0011695:	c3                   	ret    

c0011696 <CmClose(Reghive_Tag*)>:
c0011696:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001169a:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c001169e:	74 0b                	je     c00116ab <CmClose(Reghive_Tag*)+0x15>
c00116a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00116a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116a6:	e9 f3 95 ff ff       	jmp    c000ac9e <File::close()>
c00116ab:	c3                   	ret    

c00116ac <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c00116ac:	57                   	push   edi
c00116ad:	56                   	push   esi
c00116ae:	53                   	push   ebx
c00116af:	83 ec 10             	sub    esp,0x10
c00116b2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00116b6:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00116ba:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00116be:	80 7f 04 00          	cmp    BYTE PTR [edi+0x4],0x0
c00116c2:	74 4f                	je     c0011713 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x67>
c00116c4:	50                   	push   eax
c00116c5:	6b c3 2b             	imul   eax,ebx,0x2b
c00116c8:	99                   	cdq    
c00116c9:	52                   	push   edx
c00116ca:	50                   	push   eax
c00116cb:	ff 37                	push   DWORD PTR [edi]
c00116cd:	e8 2c 96 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c00116d2:	5a                   	pop    edx
c00116d3:	8b 07                	mov    eax,DWORD PTR [edi]
c00116d5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00116d9:	8b 10                	mov    edx,DWORD PTR [eax]
c00116db:	51                   	push   ecx
c00116dc:	56                   	push   esi
c00116dd:	6a 00                	push   0x0
c00116df:	6a 2b                	push   0x2b
c00116e1:	50                   	push   eax
c00116e2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00116e5:	83 c4 20             	add    esp,0x20
c00116e8:	85 db                	test   ebx,ebx
c00116ea:	74 27                	je     c0011713 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x67>
c00116ec:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00116ee:	89 c8                	mov    eax,ecx
c00116f0:	85 c9                	test   ecx,ecx
c00116f2:	74 1d                	je     c0011711 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x65>
c00116f4:	6a 00                	push   0x0
c00116f6:	b8 49 91 17 17       	mov    eax,0x17179149
c00116fb:	68 00 28 6b ee       	push   0xee6b2800
c0011700:	f7 e1                	mul    ecx
c0011702:	52                   	push   edx
c0011703:	50                   	push   eax
c0011704:	e8 47 c2 00 00       	call   c001d950 <__umoddi3>
c0011709:	83 c4 10             	add    esp,0x10
c001170c:	6b cb 13             	imul   ecx,ebx,0x13
c001170f:	29 c8                	sub    eax,ecx
c0011711:	89 06                	mov    DWORD PTR [esi],eax
c0011713:	83 c4 10             	add    esp,0x10
c0011716:	5b                   	pop    ebx
c0011717:	5e                   	pop    esi
c0011718:	5f                   	pop    edi
c0011719:	c3                   	ret    

c001171a <CmGetString(Reghive_Tag*, int, char*)>:
c001171a:	55                   	push   ebp
c001171b:	57                   	push   edi
c001171c:	56                   	push   esi
c001171d:	53                   	push   ebx
c001171e:	31 db                	xor    ebx,ebx
c0011720:	83 ec 70             	sub    esp,0x70
c0011723:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c001172a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001172e:	50                   	push   eax
c001172f:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0011736:	55                   	push   ebp
c0011737:	e8 70 ff ff ff       	call   c00116ac <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001173c:	83 c4 10             	add    esp,0x10
c001173f:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0011744:	c1 e0 08             	shl    eax,0x8
c0011747:	89 c2                	mov    edx,eax
c0011749:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c001174e:	09 d0                	or     eax,edx
c0011750:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0011755:	c1 e0 08             	shl    eax,0x8
c0011758:	09 d0                	or     eax,edx
c001175a:	74 25                	je     c0011781 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c001175c:	6b fb 0d             	imul   edi,ebx,0xd
c001175f:	52                   	push   edx
c0011760:	8d 54 24 39          	lea    edx,[esp+0x39]
c0011764:	52                   	push   edx
c0011765:	50                   	push   eax
c0011766:	55                   	push   ebp
c0011767:	e8 40 ff ff ff       	call   c00116ac <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001176c:	8d 74 24 49          	lea    esi,[esp+0x49]
c0011770:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0011777:	b9 27 00 00 00       	mov    ecx,0x27
c001177c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001177e:	83 c4 10             	add    esp,0x10
c0011781:	83 c3 03             	add    ebx,0x3
c0011784:	83 fb 15             	cmp    ebx,0x15
c0011787:	75 b6                	jne    c001173f <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0011789:	83 c4 6c             	add    esp,0x6c
c001178c:	5b                   	pop    ebx
c001178d:	5e                   	pop    esi
c001178e:	5f                   	pop    edi
c001178f:	5d                   	pop    ebp
c0011790:	c3                   	ret    

c0011791 <CmEnterDirectory(Reghive_Tag*, int)>:
c0011791:	83 ec 40             	sub    esp,0x40
c0011794:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011798:	50                   	push   eax
c0011799:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001179d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00117a1:	e8 06 ff ff ff       	call   c00116ac <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00117a6:	83 c4 10             	add    esp,0x10
c00117a9:	83 c8 ff             	or     eax,0xffffffff
c00117ac:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c00117b1:	75 19                	jne    c00117cc <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c00117b3:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c00117b8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00117bd:	c1 e0 08             	shl    eax,0x8
c00117c0:	09 c2                	or     edx,eax
c00117c2:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c00117c7:	c1 e0 10             	shl    eax,0x10
c00117ca:	09 d0                	or     eax,edx
c00117cc:	83 c4 3c             	add    esp,0x3c
c00117cf:	c3                   	ret    

c00117d0 <CmGetNext(Reghive_Tag*, int)>:
c00117d0:	83 ec 40             	sub    esp,0x40
c00117d3:	8d 44 24 09          	lea    eax,[esp+0x9]
c00117d7:	50                   	push   eax
c00117d8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00117dc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00117e0:	e8 c7 fe ff ff       	call   c00116ac <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00117e5:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c00117ea:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00117ef:	c1 e0 08             	shl    eax,0x8
c00117f2:	09 c2                	or     edx,eax
c00117f4:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00117f9:	83 c4 4c             	add    esp,0x4c
c00117fc:	c1 e0 10             	shl    eax,0x10
c00117ff:	09 d0                	or     eax,edx
c0011801:	c3                   	ret    

c0011802 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0011802:	55                   	push   ebp
c0011803:	57                   	push   edi
c0011804:	56                   	push   esi
c0011805:	53                   	push   ebx
c0011806:	83 ec 1c             	sub    esp,0x1c
c0011809:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001180d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011811:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011815:	74 69                	je     c0011880 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x7e>
c0011817:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001181c:	74 3c                	je     c001185a <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x58>
c001181e:	31 d2                	xor    edx,edx
c0011820:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011823:	89 d7                	mov    edi,edx
c0011825:	09 c7                	or     edi,eax
c0011827:	74 2e                	je     c0011857 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x55>
c0011829:	6b 74 24 34 13       	imul   esi,DWORD PTR [esp+0x34],0x13
c001182e:	6a 00                	push   0x0
c0011830:	89 f7                	mov    edi,esi
c0011832:	68 00 28 6b ee       	push   0xee6b2800
c0011837:	c1 ff 1f             	sar    edi,0x1f
c001183a:	01 f0                	add    eax,esi
c001183c:	be f9 e0 66 d1       	mov    esi,0xd166e0f9
c0011841:	11 fa                	adc    edx,edi
c0011843:	69 ca f9 e0 66 d1    	imul   ecx,edx,0xd166e0f9
c0011849:	f7 e6                	mul    esi
c001184b:	01 ca                	add    edx,ecx
c001184d:	52                   	push   edx
c001184e:	50                   	push   eax
c001184f:	e8 fc c0 00 00       	call   c001d950 <__umoddi3>
c0011854:	83 c4 10             	add    esp,0x10
c0011857:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001185a:	50                   	push   eax
c001185b:	6b 44 24 38 2b       	imul   eax,DWORD PTR [esp+0x38],0x2b
c0011860:	99                   	cdq    
c0011861:	52                   	push   edx
c0011862:	50                   	push   eax
c0011863:	ff 33                	push   DWORD PTR [ebx]
c0011865:	e8 94 94 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c001186a:	5a                   	pop    edx
c001186b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001186d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011871:	8b 10                	mov    edx,DWORD PTR [eax]
c0011873:	51                   	push   ecx
c0011874:	55                   	push   ebp
c0011875:	6a 00                	push   0x0
c0011877:	6a 2b                	push   0x2b
c0011879:	50                   	push   eax
c001187a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001187d:	83 c4 20             	add    esp,0x20
c0011880:	83 c4 1c             	add    esp,0x1c
c0011883:	5b                   	pop    ebx
c0011884:	5e                   	pop    esi
c0011885:	5f                   	pop    edi
c0011886:	5d                   	pop    ebp
c0011887:	c3                   	ret    

c0011888 <CmFreeExtent(Reghive_Tag*, int)>:
c0011888:	53                   	push   ebx
c0011889:	83 ec 3c             	sub    esp,0x3c
c001188c:	6a 2b                	push   0x2b
c001188e:	6a 00                	push   0x0
c0011890:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0011894:	53                   	push   ebx
c0011895:	e8 36 ec fe ff       	call   c00004d0 <memset>
c001189a:	83 c4 0c             	add    esp,0xc
c001189d:	53                   	push   ebx
c001189e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00118a2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00118a6:	e8 57 ff ff ff       	call   c0011802 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00118ab:	83 c4 48             	add    esp,0x48
c00118ae:	5b                   	pop    ebx
c00118af:	c3                   	ret    

c00118b0 <CmUpdateHeader(Reghive_Tag*)>:
c00118b0:	83 ec 0c             	sub    esp,0xc
c00118b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118b7:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c00118bb:	74 10                	je     c00118cd <CmUpdateHeader(Reghive_Tag*)+0x1d>
c00118bd:	52                   	push   edx
c00118be:	8d 50 05             	lea    edx,[eax+0x5]
c00118c1:	52                   	push   edx
c00118c2:	6a 00                	push   0x0
c00118c4:	50                   	push   eax
c00118c5:	e8 38 ff ff ff       	call   c0011802 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00118ca:	83 c4 10             	add    esp,0x10
c00118cd:	83 c4 0c             	add    esp,0xc
c00118d0:	c3                   	ret    

c00118d1 <CmExpand(Reghive_Tag*, int)>:
c00118d1:	57                   	push   edi
c00118d2:	56                   	push   esi
c00118d3:	83 ce ff             	or     esi,0xffffffff
c00118d6:	53                   	push   ebx
c00118d7:	83 ec 30             	sub    esp,0x30
c00118da:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00118de:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00118e2:	74 5f                	je     c0011943 <CmExpand(Reghive_Tag*, int)+0x72>
c00118e4:	31 d2                	xor    edx,edx
c00118e6:	31 f6                	xor    esi,esi
c00118e8:	50                   	push   eax
c00118e9:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c00118ed:	52                   	push   edx
c00118ee:	50                   	push   eax
c00118ef:	ff 33                	push   DWORD PTR [ebx]
c00118f1:	e8 08 94 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c00118f6:	83 c4 0c             	add    esp,0xc
c00118f9:	6a 2b                	push   0x2b
c00118fb:	6a 00                	push   0x0
c00118fd:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0011901:	57                   	push   edi
c0011902:	e8 c9 eb fe ff       	call   c00004d0 <memset>
c0011907:	83 c4 10             	add    esp,0x10
c001190a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001190e:	7d 1b                	jge    c001192b <CmExpand(Reghive_Tag*, int)+0x5a>
c0011910:	83 ec 0c             	sub    esp,0xc
c0011913:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011915:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0011919:	8b 10                	mov    edx,DWORD PTR [eax]
c001191b:	46                   	inc    esi
c001191c:	51                   	push   ecx
c001191d:	57                   	push   edi
c001191e:	6a 00                	push   0x0
c0011920:	6a 2b                	push   0x2b
c0011922:	50                   	push   eax
c0011923:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011926:	83 c4 20             	add    esp,0x20
c0011929:	eb df                	jmp    c001190a <CmExpand(Reghive_Tag*, int)+0x39>
c001192b:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001192f:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0011932:	83 ec 0c             	sub    esp,0xc
c0011935:	01 f2                	add    edx,esi
c0011937:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c001193a:	53                   	push   ebx
c001193b:	e8 70 ff ff ff       	call   c00118b0 <CmUpdateHeader(Reghive_Tag*)>
c0011940:	83 c4 10             	add    esp,0x10
c0011943:	83 c4 30             	add    esp,0x30
c0011946:	89 f0                	mov    eax,esi
c0011948:	5b                   	pop    ebx
c0011949:	5e                   	pop    esi
c001194a:	5f                   	pop    edi
c001194b:	c3                   	ret    

c001194c <CmFindUnusedExtent(Reghive_Tag*)>:
c001194c:	55                   	push   ebp
c001194d:	57                   	push   edi
c001194e:	56                   	push   esi
c001194f:	53                   	push   ebx
c0011950:	83 cb ff             	or     ebx,0xffffffff
c0011953:	83 ec 1c             	sub    esp,0x1c
c0011956:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001195a:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c001195e:	74 68                	je     c00119c8 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0011960:	be 2b 00 00 00       	mov    esi,0x2b
c0011965:	51                   	push   ecx
c0011966:	31 ff                	xor    edi,edi
c0011968:	6a 00                	push   0x0
c001196a:	31 db                	xor    ebx,ebx
c001196c:	6a 00                	push   0x0
c001196e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0011971:	e8 88 93 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c0011976:	83 c4 10             	add    esp,0x10
c0011979:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c001197c:	76 3b                	jbe    c00119b9 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c001197e:	83 ec 0c             	sub    esp,0xc
c0011981:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011984:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011988:	8b 10                	mov    edx,DWORD PTR [eax]
c001198a:	51                   	push   ecx
c001198b:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c001198f:	51                   	push   ecx
c0011990:	6a 00                	push   0x0
c0011992:	6a 01                	push   0x1
c0011994:	50                   	push   eax
c0011995:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011998:	83 c4 20             	add    esp,0x20
c001199b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00119a0:	74 26                	je     c00119c8 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00119a2:	43                   	inc    ebx
c00119a3:	52                   	push   edx
c00119a4:	57                   	push   edi
c00119a5:	56                   	push   esi
c00119a6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00119a9:	e8 50 93 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c00119ae:	83 c6 2b             	add    esi,0x2b
c00119b1:	83 d7 00             	adc    edi,0x0
c00119b4:	83 c4 10             	add    esp,0x10
c00119b7:	eb c0                	jmp    c0011979 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c00119b9:	50                   	push   eax
c00119ba:	50                   	push   eax
c00119bb:	6a 40                	push   0x40
c00119bd:	55                   	push   ebp
c00119be:	e8 0e ff ff ff       	call   c00118d1 <CmExpand(Reghive_Tag*, int)>
c00119c3:	83 c4 10             	add    esp,0x10
c00119c6:	89 c3                	mov    ebx,eax
c00119c8:	83 c4 1c             	add    esp,0x1c
c00119cb:	89 d8                	mov    eax,ebx
c00119cd:	5b                   	pop    ebx
c00119ce:	5e                   	pop    esi
c00119cf:	5f                   	pop    edi
c00119d0:	5d                   	pop    ebp
c00119d1:	c3                   	ret    

c00119d2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c00119d2:	55                   	push   ebp
c00119d3:	57                   	push   edi
c00119d4:	56                   	push   esi
c00119d5:	53                   	push   ebx
c00119d6:	81 ec 88 00 00 00    	sub    esp,0x88
c00119dc:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c00119e3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00119ea:	e8 5d ff ff ff       	call   c001194c <CmFindUnusedExtent(Reghive_Tag*)>
c00119ef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00119f3:	83 c4 0c             	add    esp,0xc
c00119f6:	6a 2b                	push   0x2b
c00119f8:	6a 00                	push   0x0
c00119fa:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00119fe:	55                   	push   ebp
c00119ff:	e8 cc ea fe ff       	call   c00004d0 <memset>
c0011a04:	83 c4 10             	add    esp,0x10
c0011a07:	85 db                	test   ebx,ebx
c0011a09:	74 12                	je     c0011a1d <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0011a0b:	51                   	push   ecx
c0011a0c:	55                   	push   ebp
c0011a0d:	53                   	push   ebx
c0011a0e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011a15:	e8 92 fc ff ff       	call   c00116ac <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011a1a:	83 c4 10             	add    esp,0x10
c0011a1d:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0011a21:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0011a28:	b9 2b 00 00 00       	mov    ecx,0x2b
c0011a2d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a2f:	85 db                	test   ebx,ebx
c0011a31:	74 49                	je     c0011a7c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0011a33:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0011a38:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0011a3d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011a41:	c1 e0 08             	shl    eax,0x8
c0011a44:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0011a4a:	09 c8                	or     eax,ecx
c0011a4c:	74 11                	je     c0011a5f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0011a4e:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0011a52:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0011a56:	c1 e8 10             	shr    eax,0x10
c0011a59:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0011a5d:	eb 0f                	jmp    c0011a6e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0011a5f:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0011a64:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0011a69:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0011a6e:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0011a72:	c1 ea 08             	shr    edx,0x8
c0011a75:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0011a7a:	eb 0f                	jmp    c0011a8b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0011a7c:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0011a81:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0011a86:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0011a8b:	52                   	push   edx
c0011a8c:	8d 44 24 49          	lea    eax,[esp+0x49]
c0011a90:	50                   	push   eax
c0011a91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011a95:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011a9c:	e8 61 fd ff ff       	call   c0011802 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011aa1:	83 c4 10             	add    esp,0x10
c0011aa4:	85 db                	test   ebx,ebx
c0011aa6:	74 12                	je     c0011aba <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0011aa8:	50                   	push   eax
c0011aa9:	55                   	push   ebp
c0011aaa:	53                   	push   ebx
c0011aab:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011ab2:	e8 4b fd ff ff       	call   c0011802 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011ab7:	83 c4 10             	add    esp,0x10
c0011aba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011abe:	83 c4 7c             	add    esp,0x7c
c0011ac1:	5b                   	pop    ebx
c0011ac2:	5e                   	pop    esi
c0011ac3:	5f                   	pop    edi
c0011ac4:	5d                   	pop    ebp
c0011ac5:	c3                   	ret    

c0011ac6 <CmSetString(Reghive_Tag*, int, char const*)>:
c0011ac6:	55                   	push   ebp
c0011ac7:	57                   	push   edi
c0011ac8:	56                   	push   esi
c0011ac9:	53                   	push   ebx
c0011aca:	bb 27 00 00 00       	mov    ebx,0x27
c0011acf:	81 ec 88 00 00 00    	sub    esp,0x88
c0011ad5:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0011adc:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0011ae3:	e8 58 ea fe ff       	call   c0000540 <strlen>
c0011ae8:	8d 48 26             	lea    ecx,[eax+0x26]
c0011aeb:	89 c8                	mov    eax,ecx
c0011aed:	99                   	cdq    
c0011aee:	f7 fb                	idiv   ebx
c0011af0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011af4:	83 c4 10             	add    esp,0x10
c0011af7:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0011afd:	7e 10                	jle    c0011b0f <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0011aff:	83 ec 0c             	sub    esp,0xc
c0011b02:	68 1b 00 02 c0       	push   0xc002001b
c0011b07:	e8 8f e8 ff ff       	call   c001039b <KePanic(char const*)>
c0011b0c:	83 c4 10             	add    esp,0x10
c0011b0f:	31 ff                	xor    edi,edi
c0011b11:	50                   	push   eax
c0011b12:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0011b16:	53                   	push   ebx
c0011b17:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011b1e:	56                   	push   esi
c0011b1f:	e8 88 fb ff ff       	call   c00116ac <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011b24:	83 c4 10             	add    esp,0x10
c0011b27:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0011b2b:	89 d0                	mov    eax,edx
c0011b2d:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0011b31:	c1 e0 08             	shl    eax,0x8
c0011b34:	09 c2                	or     edx,eax
c0011b36:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0011b3a:	c1 e2 08             	shl    edx,0x8
c0011b3d:	09 c2                	or     edx,eax
c0011b3f:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0011b43:	7e 76                	jle    c0011bbb <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0011b45:	85 d2                	test   edx,edx
c0011b47:	75 25                	jne    c0011b6e <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0011b49:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0011b4e:	8d 44 24 45          	lea    eax,[esp+0x45]
c0011b52:	50                   	push   eax
c0011b53:	6a 00                	push   0x0
c0011b55:	6a 00                	push   0x0
c0011b57:	56                   	push   esi
c0011b58:	e8 75 fe ff ff       	call   c00119d2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0011b5d:	83 c4 10             	add    esp,0x10
c0011b60:	89 c2                	mov    edx,eax
c0011b62:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0011b65:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0011b68:	c1 f8 10             	sar    eax,0x10
c0011b6b:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0011b6e:	55                   	push   ebp
c0011b6f:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0011b73:	55                   	push   ebp
c0011b74:	52                   	push   edx
c0011b75:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0011b79:	56                   	push   esi
c0011b7a:	e8 2d fb ff ff       	call   c00116ac <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011b7f:	83 c4 0c             	add    esp,0xc
c0011b82:	6a 27                	push   0x27
c0011b84:	6a 00                	push   0x0
c0011b86:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0011b8a:	51                   	push   ecx
c0011b8b:	e8 40 e9 fe ff       	call   c00004d0 <memset>
c0011b90:	83 c4 0c             	add    esp,0xc
c0011b93:	6b c7 27             	imul   eax,edi,0x27
c0011b96:	6a 27                	push   0x27
c0011b98:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0011b9f:	50                   	push   eax
c0011ba0:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0011ba4:	51                   	push   ecx
c0011ba5:	e8 86 ea fe ff       	call   c0000630 <strncpy>
c0011baa:	83 c4 0c             	add    esp,0xc
c0011bad:	55                   	push   ebp
c0011bae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011bb2:	52                   	push   edx
c0011bb3:	56                   	push   esi
c0011bb4:	e8 49 fc ff ff       	call   c0011802 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011bb9:	eb 19                	jmp    c0011bd4 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0011bbb:	85 d2                	test   edx,edx
c0011bbd:	74 18                	je     c0011bd7 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0011bbf:	51                   	push   ecx
c0011bc0:	51                   	push   ecx
c0011bc1:	52                   	push   edx
c0011bc2:	56                   	push   esi
c0011bc3:	e8 c0 fc ff ff       	call   c0011888 <CmFreeExtent(Reghive_Tag*, int)>
c0011bc8:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0011bcc:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0011bd0:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0011bd4:	83 c4 10             	add    esp,0x10
c0011bd7:	47                   	inc    edi
c0011bd8:	83 c3 03             	add    ebx,0x3
c0011bdb:	83 ff 07             	cmp    edi,0x7
c0011bde:	0f 85 43 ff ff ff    	jne    c0011b27 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0011be4:	50                   	push   eax
c0011be5:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0011be9:	50                   	push   eax
c0011bea:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011bf1:	56                   	push   esi
c0011bf2:	e8 0b fc ff ff       	call   c0011802 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011bf7:	81 c4 8c 00 00 00    	add    esp,0x8c
c0011bfd:	5b                   	pop    ebx
c0011bfe:	5e                   	pop    esi
c0011bff:	5f                   	pop    edi
c0011c00:	5d                   	pop    ebp
c0011c01:	c3                   	ret    

c0011c02 <CmGetMatch(char*, char*, bool, bool*)>:
c0011c02:	56                   	push   esi
c0011c03:	53                   	push   ebx
c0011c04:	50                   	push   eax
c0011c05:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011c09:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0011c0e:	74 25                	je     c0011c35 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0011c10:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0011c13:	31 db                	xor    ebx,ebx
c0011c15:	50                   	push   eax
c0011c16:	50                   	push   eax
c0011c17:	8d 04 9d 80 13 02 c0 	lea    eax,[ebx*4-0x3ffdec80]
c0011c1e:	50                   	push   eax
c0011c1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c23:	e8 b8 ea fe ff       	call   c00006e0 <strcmp>
c0011c28:	83 c4 10             	add    esp,0x10
c0011c2b:	85 c0                	test   eax,eax
c0011c2d:	74 2e                	je     c0011c5d <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0011c2f:	43                   	inc    ebx
c0011c30:	83 fb 3f             	cmp    ebx,0x3f
c0011c33:	75 e0                	jne    c0011c15 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0011c35:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011c38:	31 db                	xor    ebx,ebx
c0011c3a:	8d 04 9d 80 13 02 c0 	lea    eax,[ebx*4-0x3ffdec80]
c0011c41:	51                   	push   ecx
c0011c42:	51                   	push   ecx
c0011c43:	50                   	push   eax
c0011c44:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011c48:	e8 93 ea fe ff       	call   c00006e0 <strcmp>
c0011c4d:	83 c4 10             	add    esp,0x10
c0011c50:	85 c0                	test   eax,eax
c0011c52:	74 09                	je     c0011c5d <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0011c54:	43                   	inc    ebx
c0011c55:	83 fb 3f             	cmp    ebx,0x3f
c0011c58:	75 e0                	jne    c0011c3a <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0011c5a:	83 cb ff             	or     ebx,0xffffffff
c0011c5d:	89 d8                	mov    eax,ebx
c0011c5f:	5a                   	pop    edx
c0011c60:	5b                   	pop    ebx
c0011c61:	5e                   	pop    esi
c0011c62:	c3                   	ret    

c0011c63 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0011c63:	55                   	push   ebp
c0011c64:	31 c0                	xor    eax,eax
c0011c66:	57                   	push   edi
c0011c67:	56                   	push   esi
c0011c68:	53                   	push   ebx
c0011c69:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011c6d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011c71:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0011c73:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011c77:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0011c7a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011c7e:	83 fd 1f             	cmp    ebp,0x1f
c0011c81:	7f 0b                	jg     c0011c8e <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0011c83:	0f b6 c2             	movzx  eax,dl
c0011c86:	d3 e0                	shl    eax,cl
c0011c88:	09 07                	or     DWORD PTR [edi],eax
c0011c8a:	b0 01                	mov    al,0x1
c0011c8c:	01 33                	add    DWORD PTR [ebx],esi
c0011c8e:	5b                   	pop    ebx
c0011c8f:	5e                   	pop    esi
c0011c90:	5f                   	pop    edi
c0011c91:	5d                   	pop    ebp
c0011c92:	c3                   	ret    

c0011c93 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0011c93:	57                   	push   edi
c0011c94:	56                   	push   esi
c0011c95:	53                   	push   ebx
c0011c96:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011c9a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011c9e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0011ca2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011ca6:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0011ca8:	7c 17                	jl     c0011cc1 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0011caa:	8b 17                	mov    edx,DWORD PTR [edi]
c0011cac:	b8 01 00 00 00       	mov    eax,0x1
c0011cb1:	d3 e0                	shl    eax,cl
c0011cb3:	48                   	dec    eax
c0011cb4:	21 d0                	and    eax,edx
c0011cb6:	d3 ea                	shr    edx,cl
c0011cb8:	89 17                	mov    DWORD PTR [edi],edx
c0011cba:	29 0b                	sub    DWORD PTR [ebx],ecx
c0011cbc:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0011cbf:	eb 05                	jmp    c0011cc6 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0011cc1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011cc4:	31 c0                	xor    eax,eax
c0011cc6:	5b                   	pop    ebx
c0011cc7:	5e                   	pop    esi
c0011cc8:	5f                   	pop    edi
c0011cc9:	c3                   	ret    

c0011cca <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0011cca:	83 ec 40             	sub    esp,0x40
c0011ccd:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011cd1:	50                   	push   eax
c0011cd2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011cd6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011cda:	e8 cd f9 ff ff       	call   c00116ac <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011cdf:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011ce3:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0011ce7:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0011ceb:	89 10                	mov    DWORD PTR [eax],edx
c0011ced:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0011cf0:	83 c4 4c             	add    esp,0x4c
c0011cf3:	c3                   	ret    

c0011cf4 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0011cf4:	55                   	push   ebp
c0011cf5:	57                   	push   edi
c0011cf6:	56                   	push   esi
c0011cf7:	53                   	push   ebx
c0011cf8:	83 ec 40             	sub    esp,0x40
c0011cfb:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0011cff:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0011d03:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0011d07:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0011d0b:	53                   	push   ebx
c0011d0c:	56                   	push   esi
c0011d0d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011d11:	e8 96 f9 ff ff       	call   c00116ac <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011d16:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0011d1a:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0011d1e:	83 c4 0c             	add    esp,0xc
c0011d21:	53                   	push   ebx
c0011d22:	56                   	push   esi
c0011d23:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011d27:	e8 d6 fa ff ff       	call   c0011802 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011d2c:	83 c4 4c             	add    esp,0x4c
c0011d2f:	5b                   	pop    ebx
c0011d30:	5e                   	pop    esi
c0011d31:	5f                   	pop    edi
c0011d32:	5d                   	pop    ebp
c0011d33:	c3                   	ret    

c0011d34 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0011d34:	55                   	push   ebp
c0011d35:	57                   	push   edi
c0011d36:	56                   	push   esi
c0011d37:	31 f6                	xor    esi,esi
c0011d39:	53                   	push   ebx
c0011d3a:	31 db                	xor    ebx,ebx
c0011d3c:	83 ec 40             	sub    esp,0x40
c0011d3f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011d47:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011d4f:	6a 12                	push   0x12
c0011d51:	68 ee 00 00 00       	push   0xee
c0011d56:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0011d5a:	e8 71 e7 fe ff       	call   c00004d0 <memset>
c0011d5f:	83 c4 10             	add    esp,0x10
c0011d62:	6a 08                	push   0x8
c0011d64:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011d68:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0011d6c:	50                   	push   eax
c0011d6d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0011d71:	57                   	push   edi
c0011d72:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0011d76:	55                   	push   ebp
c0011d77:	e8 e7 fe ff ff       	call   c0011c63 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0011d7c:	83 c4 10             	add    esp,0x10
c0011d7f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0011d83:	50                   	push   eax
c0011d84:	6a 06                	push   0x6
c0011d86:	57                   	push   edi
c0011d87:	55                   	push   ebp
c0011d88:	e8 06 ff ff ff       	call   c0011c93 <CmGetShift(unsigned int*, int*, int, bool*)>
c0011d8d:	83 c4 10             	add    esp,0x10
c0011d90:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011d95:	74 07                	je     c0011d9e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0011d97:	46                   	inc    esi
c0011d98:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0011d9c:	eb e1                	jmp    c0011d7f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0011d9e:	43                   	inc    ebx
c0011d9f:	83 fb 12             	cmp    ebx,0x12
c0011da2:	75 be                	jne    c0011d62 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x2e>
c0011da4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011da8:	31 db                	xor    ebx,ebx
c0011daa:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011dad:	50                   	push   eax
c0011dae:	50                   	push   eax
c0011daf:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0011db4:	43                   	inc    ebx
c0011db5:	8d 04 85 80 13 02 c0 	lea    eax,[eax*4-0x3ffdec80]
c0011dbc:	50                   	push   eax
c0011dbd:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0011dc1:	e8 fa e9 fe ff       	call   c00007c0 <strcat>
c0011dc6:	83 c4 10             	add    esp,0x10
c0011dc9:	83 fb 18             	cmp    ebx,0x18
c0011dcc:	75 df                	jne    c0011dad <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0011dce:	83 c4 3c             	add    esp,0x3c
c0011dd1:	31 c0                	xor    eax,eax
c0011dd3:	5b                   	pop    ebx
c0011dd4:	5e                   	pop    esi
c0011dd5:	5f                   	pop    edi
c0011dd6:	5d                   	pop    ebp
c0011dd7:	c3                   	ret    

c0011dd8 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0011dd8:	83 ec 40             	sub    esp,0x40
c0011ddb:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011ddf:	50                   	push   eax
c0011de0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011de4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011de8:	e8 bf f8 ff ff       	call   c00116ac <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011ded:	58                   	pop    eax
c0011dee:	5a                   	pop    edx
c0011def:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0011df3:	8d 44 24 15          	lea    eax,[esp+0x15]
c0011df7:	50                   	push   eax
c0011df8:	e8 37 ff ff ff       	call   c0011d34 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0011dfd:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0011e02:	83 c4 4c             	add    esp,0x4c
c0011e05:	c3                   	ret    

c0011e06 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0011e06:	55                   	push   ebp
c0011e07:	57                   	push   edi
c0011e08:	56                   	push   esi
c0011e09:	53                   	push   ebx
c0011e0a:	31 db                	xor    ebx,ebx
c0011e0c:	83 ec 70             	sub    esp,0x70
c0011e0f:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0011e16:	6a 30                	push   0x30
c0011e18:	6a 00                	push   0x0
c0011e1a:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0011e1e:	56                   	push   esi
c0011e1f:	e8 ac e6 fe ff       	call   c00004d0 <memset>
c0011e24:	83 c4 10             	add    esp,0x10
c0011e27:	83 ec 0c             	sub    esp,0xc
c0011e2a:	57                   	push   edi
c0011e2b:	e8 10 e7 fe ff       	call   c0000540 <strlen>
c0011e30:	83 c4 10             	add    esp,0x10
c0011e33:	39 d8                	cmp    eax,ebx
c0011e35:	76 16                	jbe    c0011e4d <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0011e37:	83 ec 0c             	sub    esp,0xc
c0011e3a:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0011e3e:	50                   	push   eax
c0011e3f:	e8 6c ea fe ff       	call   c00008b0 <toupper>
c0011e44:	83 c4 10             	add    esp,0x10
c0011e47:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0011e4a:	43                   	inc    ebx
c0011e4b:	eb da                	jmp    c0011e27 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0011e4d:	31 f6                	xor    esi,esi
c0011e4f:	52                   	push   edx
c0011e50:	31 ff                	xor    edi,edi
c0011e52:	6a 18                	push   0x18
c0011e54:	6a 3f                	push   0x3f
c0011e56:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011e5a:	50                   	push   eax
c0011e5b:	e8 70 e6 fe ff       	call   c00004d0 <memset>
c0011e60:	83 c4 10             	add    esp,0x10
c0011e63:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0011e67:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0011e6b:	84 c0                	test   al,al
c0011e6d:	0f 84 b0 00 00 00    	je     c0011f23 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0011e73:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0011e77:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0011e7c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0011e80:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c0011e85:	8d 6e 01             	lea    ebp,[esi+0x1]
c0011e88:	83 ec 0c             	sub    esp,0xc
c0011e8b:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0011e8f:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0011e93:	53                   	push   ebx
c0011e94:	e8 a7 e6 fe ff       	call   c0000540 <strlen>
c0011e99:	83 c4 10             	add    esp,0x10
c0011e9c:	85 c0                	test   eax,eax
c0011e9e:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0011ea2:	74 0b                	je     c0011eaf <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0011ea4:	50                   	push   eax
c0011ea5:	6a 01                	push   0x1
c0011ea7:	53                   	push   ebx
c0011ea8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0011eac:	50                   	push   eax
c0011ead:	eb 0a                	jmp    c0011eb9 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0011eaf:	50                   	push   eax
c0011eb0:	6a 00                	push   0x0
c0011eb2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0011eb6:	50                   	push   eax
c0011eb7:	6a 00                	push   0x0
c0011eb9:	e8 44 fd ff ff       	call   c0011c02 <CmGetMatch(char*, char*, bool, bool*)>
c0011ebe:	83 c4 10             	add    esp,0x10
c0011ec1:	83 f8 ff             	cmp    eax,0xffffffff
c0011ec4:	75 1a                	jne    c0011ee0 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0011ec6:	83 ec 0c             	sub    esp,0xc
c0011ec9:	68 30 00 02 c0       	push   0xc0020030
c0011ece:	e8 c8 e4 ff ff       	call   c001039b <KePanic(char const*)>
c0011ed3:	83 c4 10             	add    esp,0x10
c0011ed6:	b8 02 00 00 00       	mov    eax,0x2
c0011edb:	e9 bc 00 00 00       	jmp    c0011f9c <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0011ee0:	83 ff 18             	cmp    edi,0x18
c0011ee3:	75 1a                	jne    c0011eff <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0011ee5:	83 ec 0c             	sub    esp,0xc
c0011ee8:	68 45 00 02 c0       	push   0xc0020045
c0011eed:	e8 a9 e4 ff ff       	call   c001039b <KePanic(char const*)>
c0011ef2:	83 c4 10             	add    esp,0x10
c0011ef5:	b8 01 00 00 00       	mov    eax,0x1
c0011efa:	e9 9d 00 00 00       	jmp    c0011f9c <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0011eff:	47                   	inc    edi
c0011f00:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011f05:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0011f09:	74 02                	je     c0011f0d <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c0011f0b:	89 ee                	mov    esi,ebp
c0011f0d:	83 ec 0c             	sub    esp,0xc
c0011f10:	53                   	push   ebx
c0011f11:	e8 2a e6 fe ff       	call   c0000540 <strlen>
c0011f16:	83 c4 10             	add    esp,0x10
c0011f19:	85 c0                	test   eax,eax
c0011f1b:	74 06                	je     c0011f23 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0011f1d:	46                   	inc    esi
c0011f1e:	e9 40 ff ff ff       	jmp    c0011e63 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0011f23:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0011f2b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011f33:	31 f6                	xor    esi,esi
c0011f35:	50                   	push   eax
c0011f36:	31 ff                	xor    edi,edi
c0011f38:	6a 12                	push   0x12
c0011f3a:	68 ee 00 00 00       	push   0xee
c0011f3f:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0011f46:	e8 85 e5 fe ff       	call   c00004d0 <memset>
c0011f4b:	83 c4 10             	add    esp,0x10
c0011f4e:	83 fe 17             	cmp    esi,0x17
c0011f51:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0011f55:	7e 26                	jle    c0011f7d <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c0011f57:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0011f5b:	50                   	push   eax
c0011f5c:	6a 08                	push   0x8
c0011f5e:	55                   	push   ebp
c0011f5f:	53                   	push   ebx
c0011f60:	e8 2e fd ff ff       	call   c0011c93 <CmGetShift(unsigned int*, int*, int, bool*)>
c0011f65:	83 c4 10             	add    esp,0x10
c0011f68:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011f6d:	74 26                	je     c0011f95 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0011f6f:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0011f76:	4e                   	dec    esi
c0011f77:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0011f7a:	47                   	inc    edi
c0011f7b:	eb 1c                	jmp    c0011f99 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0011f7d:	6a 06                	push   0x6
c0011f7f:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c0011f84:	50                   	push   eax
c0011f85:	55                   	push   ebp
c0011f86:	53                   	push   ebx
c0011f87:	e8 d7 fc ff ff       	call   c0011c63 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0011f8c:	83 c4 10             	add    esp,0x10
c0011f8f:	84 c0                	test   al,al
c0011f91:	75 06                	jne    c0011f99 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0011f93:	eb c2                	jmp    c0011f57 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c0011f95:	31 c0                	xor    eax,eax
c0011f97:	eb 03                	jmp    c0011f9c <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0011f99:	46                   	inc    esi
c0011f9a:	eb b2                	jmp    c0011f4e <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c0011f9c:	83 c4 6c             	add    esp,0x6c
c0011f9f:	5b                   	pop    ebx
c0011fa0:	5e                   	pop    esi
c0011fa1:	5f                   	pop    edi
c0011fa2:	5d                   	pop    ebp
c0011fa3:	c3                   	ret    

c0011fa4 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0011fa4:	53                   	push   ebx
c0011fa5:	83 ec 3c             	sub    esp,0x3c
c0011fa8:	6a 2b                	push   0x2b
c0011faa:	6a 00                	push   0x0
c0011fac:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0011fb0:	53                   	push   ebx
c0011fb1:	e8 1a e5 fe ff       	call   c00004d0 <memset>
c0011fb6:	58                   	pop    eax
c0011fb7:	5a                   	pop    edx
c0011fb8:	8d 44 24 11          	lea    eax,[esp+0x11]
c0011fbc:	50                   	push   eax
c0011fbd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011fc1:	e8 40 fe ff ff       	call   c0011e06 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0011fc6:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0011fcb:	83 c4 0c             	add    esp,0xc
c0011fce:	6a 15                	push   0x15
c0011fd0:	6a 00                	push   0x0
c0011fd2:	8d 44 24 27          	lea    eax,[esp+0x27]
c0011fd6:	50                   	push   eax
c0011fd7:	e8 f4 e4 fe ff       	call   c00004d0 <memset>
c0011fdc:	53                   	push   ebx
c0011fdd:	6a 00                	push   0x0
c0011fdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011fe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011fe7:	e8 e6 f9 ff ff       	call   c00119d2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0011fec:	83 c4 58             	add    esp,0x58
c0011fef:	5b                   	pop    ebx
c0011ff0:	c3                   	ret    

c0011ff1 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0011ff1:	56                   	push   esi
c0011ff2:	53                   	push   ebx
c0011ff3:	83 ec 48             	sub    esp,0x48
c0011ff6:	6a 12                	push   0x12
c0011ff8:	68 ff 00 00 00       	push   0xff
c0011ffd:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0012001:	56                   	push   esi
c0012002:	e8 c9 e4 fe ff       	call   c00004d0 <memset>
c0012007:	5a                   	pop    edx
c0012008:	59                   	pop    ecx
c0012009:	56                   	push   esi
c001200a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001200e:	e8 f3 fd ff ff       	call   c0011e06 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012013:	83 c4 10             	add    esp,0x10
c0012016:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001201a:	85 db                	test   ebx,ebx
c001201c:	74 42                	je     c0012060 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c001201e:	50                   	push   eax
c001201f:	8d 44 24 19          	lea    eax,[esp+0x19]
c0012023:	50                   	push   eax
c0012024:	53                   	push   ebx
c0012025:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012029:	e8 7e f6 ff ff       	call   c00116ac <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001202e:	83 c4 0c             	add    esp,0xc
c0012031:	6a 12                	push   0x12
c0012033:	8d 44 24 21          	lea    eax,[esp+0x21]
c0012037:	50                   	push   eax
c0012038:	56                   	push   esi
c0012039:	e8 52 e3 fe ff       	call   c0000390 <memcmp>
c001203e:	83 c4 10             	add    esp,0x10
c0012041:	85 c0                	test   eax,eax
c0012043:	74 1e                	je     c0012063 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0012045:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001204a:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c001204f:	c1 e3 08             	shl    ebx,0x8
c0012052:	09 d8                	or     eax,ebx
c0012054:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0012059:	c1 e3 10             	shl    ebx,0x10
c001205c:	09 c3                	or     ebx,eax
c001205e:	eb ba                	jmp    c001201a <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0012060:	83 cb ff             	or     ebx,0xffffffff
c0012063:	89 d8                	mov    eax,ebx
c0012065:	83 c4 44             	add    esp,0x44
c0012068:	5b                   	pop    ebx
c0012069:	5e                   	pop    esi
c001206a:	c3                   	ret    

c001206b <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c001206b:	57                   	push   edi
c001206c:	56                   	push   esi
c001206d:	53                   	push   ebx
c001206e:	83 ec 34             	sub    esp,0x34
c0012071:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0012075:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0012079:	6a 2b                	push   0x2b
c001207b:	6a 00                	push   0x0
c001207d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012081:	53                   	push   ebx
c0012082:	e8 49 e4 fe ff       	call   c00004d0 <memset>
c0012087:	58                   	pop    eax
c0012088:	5a                   	pop    edx
c0012089:	8d 44 24 11          	lea    eax,[esp+0x11]
c001208d:	50                   	push   eax
c001208e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012092:	e8 6f fd ff ff       	call   c0011e06 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012097:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001209b:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c001209f:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c00120a3:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00120a7:	53                   	push   ebx
c00120a8:	6a 00                	push   0x0
c00120aa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00120ae:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00120b2:	e8 1b f9 ff ff       	call   c00119d2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00120b7:	83 c4 50             	add    esp,0x50
c00120ba:	5b                   	pop    ebx
c00120bb:	5e                   	pop    esi
c00120bc:	5f                   	pop    edi
c00120bd:	c3                   	ret    

c00120be <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c00120be:	57                   	push   edi
c00120bf:	56                   	push   esi
c00120c0:	53                   	push   ebx
c00120c1:	83 ec 34             	sub    esp,0x34
c00120c4:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00120c8:	6a 2b                	push   0x2b
c00120ca:	6a 00                	push   0x0
c00120cc:	8d 74 24 11          	lea    esi,[esp+0x11]
c00120d0:	56                   	push   esi
c00120d1:	e8 fa e3 fe ff       	call   c00004d0 <memset>
c00120d6:	58                   	pop    eax
c00120d7:	5a                   	pop    edx
c00120d8:	8d 44 24 11          	lea    eax,[esp+0x11]
c00120dc:	50                   	push   eax
c00120dd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00120e1:	e8 20 fd ff ff       	call   c0011e06 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00120e6:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00120eb:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00120f0:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00120f5:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00120fa:	56                   	push   esi
c00120fb:	6a 00                	push   0x0
c00120fd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012101:	53                   	push   ebx
c0012102:	e8 cb f8 ff ff       	call   c00119d2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012107:	83 c4 1c             	add    esp,0x1c
c001210a:	89 c7                	mov    edi,eax
c001210c:	56                   	push   esi
c001210d:	50                   	push   eax
c001210e:	53                   	push   ebx
c001210f:	e8 98 f5 ff ff       	call   c00116ac <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012114:	59                   	pop    ecx
c0012115:	58                   	pop    eax
c0012116:	6a 6c                	push   0x6c
c0012118:	6a 00                	push   0x0
c001211a:	6a 00                	push   0x0
c001211c:	68 56 00 02 c0       	push   0xc0020056
c0012121:	57                   	push   edi
c0012122:	53                   	push   ebx
c0012123:	e8 43 ff ff ff       	call   c001206b <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0012128:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001212c:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0012130:	c1 e8 10             	shr    eax,0x10
c0012133:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0012137:	83 c4 1c             	add    esp,0x1c
c001213a:	56                   	push   esi
c001213b:	57                   	push   edi
c001213c:	53                   	push   ebx
c001213d:	e8 c0 f6 ff ff       	call   c0011802 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012142:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0012147:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001214c:	c1 e0 08             	shl    eax,0x8
c001214f:	09 c2                	or     edx,eax
c0012151:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0012156:	83 c4 40             	add    esp,0x40
c0012159:	c1 e0 10             	shl    eax,0x10
c001215c:	5b                   	pop    ebx
c001215d:	09 d0                	or     eax,edx
c001215f:	5e                   	pop    esi
c0012160:	5f                   	pop    edi
c0012161:	c3                   	ret    

c0012162 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0012162:	57                   	push   edi
c0012163:	56                   	push   esi
c0012164:	53                   	push   ebx
c0012165:	81 ec 08 01 00 00    	sub    esp,0x108
c001216b:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0012172:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0012179:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c001217d:	53                   	push   ebx
c001217e:	e8 7d e4 fe ff       	call   c0000600 <strcpy>
c0012183:	59                   	pop    ecx
c0012184:	5e                   	pop    esi
c0012185:	68 03 03 02 c0       	push   0xc0020303
c001218a:	53                   	push   ebx
c001218b:	bb 01 00 00 00       	mov    ebx,0x1
c0012190:	e8 1b e4 fe ff       	call   c00005b0 <strtok>
c0012195:	83 c4 10             	add    esp,0x10
c0012198:	85 c0                	test   eax,eax
c001219a:	74 3b                	je     c00121d7 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001219c:	52                   	push   edx
c001219d:	50                   	push   eax
c001219e:	6a 01                	push   0x1
c00121a0:	57                   	push   edi
c00121a1:	e8 4b fe ff ff       	call   c0011ff1 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00121a6:	59                   	pop    ecx
c00121a7:	89 c3                	mov    ebx,eax
c00121a9:	5e                   	pop    esi
c00121aa:	68 03 03 02 c0       	push   0xc0020303
c00121af:	6a 00                	push   0x0
c00121b1:	e8 fa e3 fe ff       	call   c00005b0 <strtok>
c00121b6:	83 c4 10             	add    esp,0x10
c00121b9:	89 c6                	mov    esi,eax
c00121bb:	85 c0                	test   eax,eax
c00121bd:	74 18                	je     c00121d7 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00121bf:	52                   	push   edx
c00121c0:	52                   	push   edx
c00121c1:	53                   	push   ebx
c00121c2:	57                   	push   edi
c00121c3:	e8 c9 f5 ff ff       	call   c0011791 <CmEnterDirectory(Reghive_Tag*, int)>
c00121c8:	83 c4 10             	add    esp,0x10
c00121cb:	89 c3                	mov    ebx,eax
c00121cd:	83 f8 ff             	cmp    eax,0xffffffff
c00121d0:	74 05                	je     c00121d7 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00121d2:	50                   	push   eax
c00121d3:	56                   	push   esi
c00121d4:	53                   	push   ebx
c00121d5:	eb c9                	jmp    c00121a0 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00121d7:	81 c4 00 01 00 00    	add    esp,0x100
c00121dd:	89 d8                	mov    eax,ebx
c00121df:	5b                   	pop    ebx
c00121e0:	5e                   	pop    esi
c00121e1:	5f                   	pop    edi
c00121e2:	c3                   	ret    

c00121e3 <CmDisplayTree(Reghive_Tag*, int, int)>:
c00121e3:	55                   	push   ebp
c00121e4:	57                   	push   edi
c00121e5:	56                   	push   esi
c00121e6:	53                   	push   ebx
c00121e7:	83 ec 5c             	sub    esp,0x5c
c00121ea:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00121ee:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00121f2:	85 db                	test   ebx,ebx
c00121f4:	0f 8e 84 00 00 00    	jle    c001227e <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c00121fa:	31 ed                	xor    ebp,ebp
c00121fc:	57                   	push   edi
c00121fd:	6a 32                	push   0x32
c00121ff:	6a 00                	push   0x0
c0012201:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0012205:	57                   	push   edi
c0012206:	e8 c5 e2 fe ff       	call   c00004d0 <memset>
c001220b:	83 c4 0c             	add    esp,0xc
c001220e:	57                   	push   edi
c001220f:	53                   	push   ebx
c0012210:	56                   	push   esi
c0012211:	e8 c2 fb ff ff       	call   c0011dd8 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012216:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001221a:	83 c4 10             	add    esp,0x10
c001221d:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0012221:	7d 13                	jge    c0012236 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0012223:	83 ec 0c             	sub    esp,0xc
c0012226:	45                   	inc    ebp
c0012227:	68 70 06 02 c0       	push   0xc0020670
c001222c:	e8 d9 83 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0012231:	83 c4 10             	add    esp,0x10
c0012234:	eb e7                	jmp    c001221d <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0012236:	51                   	push   ecx
c0012237:	57                   	push   edi
c0012238:	53                   	push   ebx
c0012239:	68 5c 00 02 c0       	push   0xc002005c
c001223e:	e8 c7 83 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0012243:	83 c4 10             	add    esp,0x10
c0012246:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c001224b:	75 1e                	jne    c001226b <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c001224d:	52                   	push   edx
c001224e:	52                   	push   edx
c001224f:	53                   	push   ebx
c0012250:	56                   	push   esi
c0012251:	e8 3b f5 ff ff       	call   c0011791 <CmEnterDirectory(Reghive_Tag*, int)>
c0012256:	83 c4 0c             	add    esp,0xc
c0012259:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c001225d:	8d 51 04             	lea    edx,[ecx+0x4]
c0012260:	52                   	push   edx
c0012261:	50                   	push   eax
c0012262:	56                   	push   esi
c0012263:	e8 7b ff ff ff       	call   c00121e3 <CmDisplayTree(Reghive_Tag*, int, int)>
c0012268:	83 c4 10             	add    esp,0x10
c001226b:	50                   	push   eax
c001226c:	50                   	push   eax
c001226d:	53                   	push   ebx
c001226e:	56                   	push   esi
c001226f:	e8 5c f5 ff ff       	call   c00117d0 <CmGetNext(Reghive_Tag*, int)>
c0012274:	83 c4 10             	add    esp,0x10
c0012277:	89 c3                	mov    ebx,eax
c0012279:	e9 74 ff ff ff       	jmp    c00121f2 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c001227e:	83 c4 5c             	add    esp,0x5c
c0012281:	5b                   	pop    ebx
c0012282:	5e                   	pop    esi
c0012283:	5f                   	pop    edi
c0012284:	5d                   	pop    ebp
c0012285:	c3                   	ret    

c0012286 <CmSplitFinalSlashInPlace(char*)>:
c0012286:	53                   	push   ebx
c0012287:	83 ec 14             	sub    esp,0x14
c001228a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001228e:	53                   	push   ebx
c001228f:	e8 ac e2 fe ff       	call   c0000540 <strlen>
c0012294:	83 c4 10             	add    esp,0x10
c0012297:	48                   	dec    eax
c0012298:	85 c0                	test   eax,eax
c001229a:	74 15                	je     c00122b1 <CmSplitFinalSlashInPlace(char*)+0x2b>
c001229c:	8d 14 03             	lea    edx,[ebx+eax*1]
c001229f:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00122a3:	75 09                	jne    c00122ae <CmSplitFinalSlashInPlace(char*)+0x28>
c00122a5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00122a8:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00122ac:	eb 05                	jmp    c00122b3 <CmSplitFinalSlashInPlace(char*)+0x2d>
c00122ae:	48                   	dec    eax
c00122af:	eb e7                	jmp    c0012298 <CmSplitFinalSlashInPlace(char*)+0x12>
c00122b1:	31 c0                	xor    eax,eax
c00122b3:	83 c4 08             	add    esp,0x8
c00122b6:	5b                   	pop    ebx
c00122b7:	c3                   	ret    

c00122b8 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00122b8:	55                   	push   ebp
c00122b9:	57                   	push   edi
c00122ba:	56                   	push   esi
c00122bb:	53                   	push   ebx
c00122bc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00122c2:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00122c9:	8a 1e                	mov    bl,BYTE PTR [esi]
c00122cb:	8d 6e 01             	lea    ebp,[esi+0x1]
c00122ce:	80 fb 40             	cmp    bl,0x40
c00122d1:	75 1b                	jne    c00122ee <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c00122d3:	8a 16                	mov    dl,BYTE PTR [esi]
c00122d5:	84 d2                	test   dl,dl
c00122d7:	0f 84 f1 00 00 00    	je     c00123ce <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00122dd:	8d 46 01             	lea    eax,[esi+0x1]
c00122e0:	80 fa 3a             	cmp    dl,0x3a
c00122e3:	74 04                	je     c00122e9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00122e5:	89 c6                	mov    esi,eax
c00122e7:	eb ea                	jmp    c00122d3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00122e9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00122ec:	89 c6                	mov    esi,eax
c00122ee:	50                   	push   eax
c00122ef:	6a 40                	push   0x40
c00122f1:	6a 00                	push   0x0
c00122f3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00122f7:	50                   	push   eax
c00122f8:	e8 d3 e1 fe ff       	call   c00004d0 <memset>
c00122fd:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012304:	31 c0                	xor    eax,eax
c0012306:	83 c4 10             	add    esp,0x10
c0012309:	8a 0f                	mov    cl,BYTE PTR [edi]
c001230b:	84 c9                	test   cl,cl
c001230d:	0f 84 bb 00 00 00    	je     c00123ce <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0012313:	3d c7 00 00 00       	cmp    eax,0xc7
c0012318:	0f 8f b0 00 00 00    	jg     c00123ce <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001231e:	80 f9 0a             	cmp    cl,0xa
c0012321:	0f 85 98 00 00 00    	jne    c00123bf <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0012327:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001232c:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0012330:	a8 df                	test   al,0xdf
c0012332:	0f 94 c1             	sete   cl
c0012335:	3c 23                	cmp    al,0x23
c0012337:	0f 94 c2             	sete   dl
c001233a:	08 d1                	or     cl,dl
c001233c:	75 4a                	jne    c0012388 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001233e:	8d 50 f7             	lea    edx,[eax-0x9]
c0012341:	80 fa 01             	cmp    dl,0x1
c0012344:	76 42                	jbe    c0012388 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012346:	3c 5b                	cmp    al,0x5b
c0012348:	75 42                	jne    c001238c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001234a:	80 fb 40             	cmp    bl,0x40
c001234d:	75 39                	jne    c0012388 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001234f:	83 ec 0c             	sub    esp,0xc
c0012352:	8d 54 24 65          	lea    edx,[esp+0x65]
c0012356:	52                   	push   edx
c0012357:	e8 e4 e1 fe ff       	call   c0000540 <strlen>
c001235c:	83 c4 10             	add    esp,0x10
c001235f:	83 f8 3f             	cmp    eax,0x3f
c0012362:	77 6a                	ja     c00123ce <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0012364:	50                   	push   eax
c0012365:	50                   	push   eax
c0012366:	8d 54 24 61          	lea    edx,[esp+0x61]
c001236a:	52                   	push   edx
c001236b:	8d 54 24 24          	lea    edx,[esp+0x24]
c001236f:	52                   	push   edx
c0012370:	e8 8b e2 fe ff       	call   c0000600 <strcpy>
c0012375:	58                   	pop    eax
c0012376:	8d 54 24 24          	lea    edx,[esp+0x24]
c001237a:	52                   	push   edx
c001237b:	e8 c0 e1 fe ff       	call   c0000540 <strlen>
c0012380:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012385:	83 c4 10             	add    esp,0x10
c0012388:	31 d2                	xor    edx,edx
c001238a:	eb 3a                	jmp    c00123c6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001238c:	80 fb 40             	cmp    bl,0x40
c001238f:	74 06                	je     c0012397 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0012391:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012395:	eb 20                	jmp    c00123b7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0012397:	50                   	push   eax
c0012398:	50                   	push   eax
c0012399:	55                   	push   ebp
c001239a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001239e:	50                   	push   eax
c001239f:	e8 3c e3 fe ff       	call   c00006e0 <strcmp>
c00123a4:	83 c4 10             	add    esp,0x10
c00123a7:	85 c0                	test   eax,eax
c00123a9:	75 dd                	jne    c0012388 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00123ab:	eb e4                	jmp    c0012391 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c00123ad:	8d 50 01             	lea    edx,[eax+0x1]
c00123b0:	80 f9 3d             	cmp    cl,0x3d
c00123b3:	74 1d                	je     c00123d2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c00123b5:	89 d0                	mov    eax,edx
c00123b7:	8a 08                	mov    cl,BYTE PTR [eax]
c00123b9:	84 c9                	test   cl,cl
c00123bb:	75 f0                	jne    c00123ad <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c00123bd:	eb 0f                	jmp    c00123ce <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00123bf:	8d 50 01             	lea    edx,[eax+0x1]
c00123c2:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00123c6:	47                   	inc    edi
c00123c7:	89 d0                	mov    eax,edx
c00123c9:	e9 3b ff ff ff       	jmp    c0012309 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c00123ce:	31 c0                	xor    eax,eax
c00123d0:	eb 33                	jmp    c0012405 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c00123d2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123d6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00123d9:	50                   	push   eax
c00123da:	50                   	push   eax
c00123db:	8d 44 24 60          	lea    eax,[esp+0x60]
c00123df:	50                   	push   eax
c00123e0:	56                   	push   esi
c00123e1:	e8 fa e2 fe ff       	call   c00006e0 <strcmp>
c00123e6:	83 c4 10             	add    esp,0x10
c00123e9:	85 c0                	test   eax,eax
c00123eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00123ef:	75 97                	jne    c0012388 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00123f1:	51                   	push   ecx
c00123f2:	51                   	push   ecx
c00123f3:	52                   	push   edx
c00123f4:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00123fb:	e8 00 e2 fe ff       	call   c0000600 <strcpy>
c0012400:	83 c4 10             	add    esp,0x10
c0012403:	b0 01                	mov    al,0x1
c0012405:	81 c4 2c 01 00 00    	add    esp,0x12c
c001240b:	5b                   	pop    ebx
c001240c:	5e                   	pop    esi
c001240d:	5f                   	pop    edi
c001240e:	5d                   	pop    ebp
c001240f:	c3                   	ret    

c0012410 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012410:	57                   	push   edi
c0012411:	56                   	push   esi
c0012412:	53                   	push   ebx
c0012413:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012419:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012420:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012427:	53                   	push   ebx
c0012428:	e8 13 e1 fe ff       	call   c0000540 <strlen>
c001242d:	89 34 24             	mov    DWORD PTR [esp],esi
c0012430:	89 c7                	mov    edi,eax
c0012432:	e8 09 e1 fe ff       	call   c0000540 <strlen>
c0012437:	83 c4 10             	add    esp,0x10
c001243a:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001243e:	3d ff 00 00 00       	cmp    eax,0xff
c0012443:	0f 87 d3 00 00 00    	ja     c001251c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012449:	57                   	push   edi
c001244a:	57                   	push   edi
c001244b:	56                   	push   esi
c001244c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012450:	56                   	push   esi
c0012451:	e8 aa e1 fe ff       	call   c0000600 <strcpy>
c0012456:	58                   	pop    eax
c0012457:	5a                   	pop    edx
c0012458:	68 03 03 02 c0       	push   0xc0020303
c001245d:	56                   	push   esi
c001245e:	e8 5d e3 fe ff       	call   c00007c0 <strcat>
c0012463:	59                   	pop    ecx
c0012464:	5f                   	pop    edi
c0012465:	53                   	push   ebx
c0012466:	56                   	push   esi
c0012467:	e8 54 e3 fe ff       	call   c00007c0 <strcat>
c001246c:	58                   	pop    eax
c001246d:	5a                   	pop    edx
c001246e:	68 66 00 02 c0       	push   0xc0020066
c0012473:	56                   	push   esi
c0012474:	e8 47 e3 fe ff       	call   c00007c0 <strcat>
c0012479:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012480:	e8 f0 53 ff ff       	call   c0007875 <malloc>
c0012485:	83 c4 0c             	add    esp,0xc
c0012488:	89 c3                	mov    ebx,eax
c001248a:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0012490:	56                   	push   esi
c0012491:	50                   	push   eax
c0012492:	e8 e9 86 ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c0012497:	83 c4 10             	add    esp,0x10
c001249a:	85 db                	test   ebx,ebx
c001249c:	74 7e                	je     c001251c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001249e:	51                   	push   ecx
c001249f:	51                   	push   ecx
c00124a0:	6a 01                	push   0x1
c00124a2:	53                   	push   ebx
c00124a3:	e8 98 87 ff ff       	call   c000ac40 <File::open(FileOpenMode)>
c00124a8:	83 c4 10             	add    esp,0x10
c00124ab:	85 c0                	test   eax,eax
c00124ad:	74 08                	je     c00124b7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00124af:	83 ec 0c             	sub    esp,0xc
c00124b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124b4:	53                   	push   ebx
c00124b5:	eb 5f                	jmp    c0012516 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00124b7:	52                   	push   edx
c00124b8:	8d 44 24 17          	lea    eax,[esp+0x17]
c00124bc:	50                   	push   eax
c00124bd:	8d 44 24 20          	lea    eax,[esp+0x20]
c00124c1:	50                   	push   eax
c00124c2:	53                   	push   ebx
c00124c3:	e8 24 8a ff ff       	call   c000aeec <File::stat(unsigned long long*, bool*)>
c00124c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00124cc:	83 c4 10             	add    esp,0x10
c00124cf:	89 c1                	mov    ecx,eax
c00124d1:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00124d5:	74 31                	je     c0012508 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00124d7:	83 ec 0c             	sub    esp,0xc
c00124da:	50                   	push   eax
c00124db:	e8 95 53 ff ff       	call   c0007875 <malloc>
c00124e0:	89 c6                	mov    esi,eax
c00124e2:	58                   	pop    eax
c00124e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124e5:	8d 54 24 20          	lea    edx,[esp+0x20]
c00124e9:	52                   	push   edx
c00124ea:	56                   	push   esi
c00124eb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00124ef:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00124f3:	53                   	push   ebx
c00124f4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00124f7:	83 c4 20             	add    esp,0x20
c00124fa:	85 c0                	test   eax,eax
c00124fc:	75 0a                	jne    c0012508 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00124fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012502:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012506:	74 18                	je     c0012520 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012508:	83 ec 0c             	sub    esp,0xc
c001250b:	53                   	push   ebx
c001250c:	e8 8d 87 ff ff       	call   c000ac9e <File::close()>
c0012511:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012513:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012516:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012519:	83 c4 10             	add    esp,0x10
c001251c:	31 c0                	xor    eax,eax
c001251e:	eb 3b                	jmp    c001255b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0012520:	83 ec 0c             	sub    esp,0xc
c0012523:	53                   	push   ebx
c0012524:	e8 75 87 ff ff       	call   c000ac9e <File::close()>
c0012529:	8b 03                	mov    eax,DWORD PTR [ebx]
c001252b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001252e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012531:	83 c4 0c             	add    esp,0xc
c0012534:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001253b:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012542:	56                   	push   esi
c0012543:	e8 70 fd ff ff       	call   c00122b8 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0012548:	89 34 24             	mov    DWORD PTR [esp],esi
c001254b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001254f:	e8 31 53 ff ff       	call   c0007885 <free>
c0012554:	83 c4 10             	add    esp,0x10
c0012557:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001255b:	81 c4 20 01 00 00    	add    esp,0x120
c0012561:	5b                   	pop    ebx
c0012562:	5e                   	pop    esi
c0012563:	5f                   	pop    edi
c0012564:	c3                   	ret    

c0012565 <Reg::getLine(char*, char*, char*)>:
c0012565:	57                   	push   edi
c0012566:	56                   	push   esi
c0012567:	53                   	push   ebx
c0012568:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001256c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012570:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012574:	57                   	push   edi
c0012575:	56                   	push   esi
c0012576:	53                   	push   ebx
c0012577:	68 6b 00 02 c0       	push   0xc002006b
c001257c:	e8 8f fe ff ff       	call   c0012410 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012581:	83 c4 10             	add    esp,0x10
c0012584:	84 c0                	test   al,al
c0012586:	75 10                	jne    c0012598 <Reg::getLine(char*, char*, char*)+0x33>
c0012588:	57                   	push   edi
c0012589:	56                   	push   esi
c001258a:	53                   	push   ebx
c001258b:	68 90 00 02 c0       	push   0xc0020090
c0012590:	e8 7b fe ff ff       	call   c0012410 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012595:	83 c4 10             	add    esp,0x10
c0012598:	5b                   	pop    ebx
c0012599:	5e                   	pop    esi
c001259a:	5f                   	pop    edi
c001259b:	c3                   	ret    

c001259c <Reg::readInt(char*, char*, int*)>:
c001259c:	55                   	push   ebp
c001259d:	57                   	push   edi
c001259e:	56                   	push   esi
c001259f:	53                   	push   ebx
c00125a0:	81 ec f0 00 00 00    	sub    esp,0xf0
c00125a6:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00125aa:	57                   	push   edi
c00125ab:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00125b2:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00125b9:	e8 a7 ff ff ff       	call   c0012565 <Reg::getLine(char*, char*, char*)>
c00125be:	83 c4 10             	add    esp,0x10
c00125c1:	84 c0                	test   al,al
c00125c3:	0f 84 b3 00 00 00    	je     c001267c <Reg::readInt(char*, char*, int*)+0xe0>
c00125c9:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00125cd:	80 fa 2b             	cmp    dl,0x2b
c00125d0:	74 0c                	je     c00125de <Reg::readInt(char*, char*, int*)+0x42>
c00125d2:	80 fa 2d             	cmp    dl,0x2d
c00125d5:	75 0e                	jne    c00125e5 <Reg::readInt(char*, char*, int*)+0x49>
c00125d7:	ba 01 00 00 00       	mov    edx,0x1
c00125dc:	eb 0b                	jmp    c00125e9 <Reg::readInt(char*, char*, int*)+0x4d>
c00125de:	ba 01 00 00 00       	mov    edx,0x1
c00125e3:	eb 02                	jmp    c00125e7 <Reg::readInt(char*, char*, int*)+0x4b>
c00125e5:	31 d2                	xor    edx,edx
c00125e7:	31 c0                	xor    eax,eax
c00125e9:	be 0a 00 00 00       	mov    esi,0xa
c00125ee:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00125f3:	75 20                	jne    c0012615 <Reg::readInt(char*, char*, int*)+0x79>
c00125f5:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00125f9:	80 f9 78             	cmp    cl,0x78
c00125fc:	75 0a                	jne    c0012608 <Reg::readInt(char*, char*, int*)+0x6c>
c00125fe:	83 c2 02             	add    edx,0x2
c0012601:	be 10 00 00 00       	mov    esi,0x10
c0012606:	eb 0d                	jmp    c0012615 <Reg::readInt(char*, char*, int*)+0x79>
c0012608:	80 f9 62             	cmp    cl,0x62
c001260b:	75 08                	jne    c0012615 <Reg::readInt(char*, char*, int*)+0x79>
c001260d:	83 c2 02             	add    edx,0x2
c0012610:	be 02 00 00 00       	mov    esi,0x2
c0012615:	01 d7                	add    edi,edx
c0012617:	31 d2                	xor    edx,edx
c0012619:	8a 1f                	mov    bl,BYTE PTR [edi]
c001261b:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001261f:	80 fb 0d             	cmp    bl,0xd
c0012622:	0f 94 c3             	sete   bl
c0012625:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001262a:	0f 94 c1             	sete   cl
c001262d:	08 cb                	or     bl,cl
c001262f:	75 3a                	jne    c001266b <Reg::readInt(char*, char*, int*)+0xcf>
c0012631:	0f af d6             	imul   edx,esi
c0012634:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0012639:	83 fe 10             	cmp    esi,0x10
c001263c:	75 26                	jne    c0012664 <Reg::readInt(char*, char*, int*)+0xc8>
c001263e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0012642:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0012645:	89 e9                	mov    ecx,ebp
c0012647:	80 f9 05             	cmp    cl,0x5
c001264a:	77 06                	ja     c0012652 <Reg::readInt(char*, char*, int*)+0xb6>
c001264c:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0012650:	eb 16                	jmp    c0012668 <Reg::readInt(char*, char*, int*)+0xcc>
c0012652:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0012656:	83 e9 61             	sub    ecx,0x61
c0012659:	80 f9 05             	cmp    cl,0x5
c001265c:	77 06                	ja     c0012664 <Reg::readInt(char*, char*, int*)+0xc8>
c001265e:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0012662:	eb 04                	jmp    c0012668 <Reg::readInt(char*, char*, int*)+0xcc>
c0012664:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0012668:	47                   	inc    edi
c0012669:	eb ae                	jmp    c0012619 <Reg::readInt(char*, char*, int*)+0x7d>
c001266b:	84 c0                	test   al,al
c001266d:	74 02                	je     c0012671 <Reg::readInt(char*, char*, int*)+0xd5>
c001266f:	f7 da                	neg    edx
c0012671:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0012678:	89 10                	mov    DWORD PTR [eax],edx
c001267a:	88 d8                	mov    al,bl
c001267c:	81 c4 ec 00 00 00    	add    esp,0xec
c0012682:	5b                   	pop    ebx
c0012683:	5e                   	pop    esi
c0012684:	5f                   	pop    edi
c0012685:	5d                   	pop    ebp
c0012686:	c3                   	ret    

c0012687 <Reg::readString(char*, char*, char*, int)>:
c0012687:	57                   	push   edi
c0012688:	56                   	push   esi
c0012689:	53                   	push   ebx
c001268a:	81 ec d4 00 00 00    	sub    esp,0xd4
c0012690:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0012697:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001269b:	57                   	push   edi
c001269c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00126a3:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00126aa:	e8 b6 fe ff ff       	call   c0012565 <Reg::getLine(char*, char*, char*)>
c00126af:	83 c4 10             	add    esp,0x10
c00126b2:	89 c6                	mov    esi,eax
c00126b4:	84 c0                	test   al,al
c00126b6:	74 44                	je     c00126fc <Reg::readString(char*, char*, char*, int)+0x75>
c00126b8:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00126bf:	31 c0                	xor    eax,eax
c00126c1:	4a                   	dec    edx
c00126c2:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00126c5:	84 c9                	test   cl,cl
c00126c7:	74 0f                	je     c00126d8 <Reg::readString(char*, char*, char*, int)+0x51>
c00126c9:	39 c2                	cmp    edx,eax
c00126cb:	7e 0b                	jle    c00126d8 <Reg::readString(char*, char*, char*, int)+0x51>
c00126cd:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00126d0:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00126d5:	40                   	inc    eax
c00126d6:	eb ea                	jmp    c00126c2 <Reg::readString(char*, char*, char*, int)+0x3b>
c00126d8:	83 ec 0c             	sub    esp,0xc
c00126db:	53                   	push   ebx
c00126dc:	e8 5f de fe ff       	call   c0000540 <strlen>
c00126e1:	83 c4 10             	add    esp,0x10
c00126e4:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00126e9:	75 11                	jne    c00126fc <Reg::readString(char*, char*, char*, int)+0x75>
c00126eb:	83 ec 0c             	sub    esp,0xc
c00126ee:	53                   	push   ebx
c00126ef:	e8 4c de fe ff       	call   c0000540 <strlen>
c00126f4:	83 c4 10             	add    esp,0x10
c00126f7:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00126fc:	81 c4 d0 00 00 00    	add    esp,0xd0
c0012702:	89 f0                	mov    eax,esi
c0012704:	5b                   	pop    ebx
c0012705:	5e                   	pop    esi
c0012706:	5f                   	pop    edi
c0012707:	c3                   	ret    

c0012708 <Reg::readBool(char*, char*, bool*)>:
c0012708:	83 ec 20             	sub    esp,0x20
c001270b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001270f:	50                   	push   eax
c0012710:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012714:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012718:	e8 7f fe ff ff       	call   c001259c <Reg::readInt(char*, char*, int*)>
c001271d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012722:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012726:	0f 95 02             	setne  BYTE PTR [edx]
c0012729:	83 c4 2c             	add    esp,0x2c
c001272c:	c3                   	ret    

c001272d <Reg::readBoolWithDefault(char*, char*, bool)>:
c001272d:	53                   	push   ebx
c001272e:	83 ec 1c             	sub    esp,0x1c
c0012731:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0012735:	8d 44 24 13          	lea    eax,[esp+0x13]
c0012739:	50                   	push   eax
c001273a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001273e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012742:	e8 c1 ff ff ff       	call   c0012708 <Reg::readBool(char*, char*, bool*)>
c0012747:	83 c4 10             	add    esp,0x10
c001274a:	84 c0                	test   al,al
c001274c:	74 04                	je     c0012752 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001274e:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0012752:	88 d8                	mov    al,bl
c0012754:	83 c4 18             	add    esp,0x18
c0012757:	5b                   	pop    ebx
c0012758:	c3                   	ret    

c0012759 <Reg::readIntWithDefault(char*, char*, int)>:
c0012759:	53                   	push   ebx
c001275a:	83 ec 1c             	sub    esp,0x1c
c001275d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012761:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012765:	50                   	push   eax
c0012766:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001276a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001276e:	e8 29 fe ff ff       	call   c001259c <Reg::readInt(char*, char*, int*)>
c0012773:	83 c4 10             	add    esp,0x10
c0012776:	84 c0                	test   al,al
c0012778:	74 04                	je     c001277e <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001277a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001277e:	89 d8                	mov    eax,ebx
c0012780:	83 c4 18             	add    esp,0x18
c0012783:	5b                   	pop    ebx
c0012784:	c3                   	ret    

c0012785 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0012785:	57                   	push   edi
c0012786:	56                   	push   esi
c0012787:	56                   	push   esi
c0012788:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001278c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012790:	56                   	push   esi
c0012791:	57                   	push   edi
c0012792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001279a:	e8 e8 fe ff ff       	call   c0012687 <Reg::readString(char*, char*, char*, int)>
c001279f:	83 c4 10             	add    esp,0x10
c00127a2:	84 c0                	test   al,al
c00127a4:	75 1a                	jne    c00127c0 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00127a6:	51                   	push   ecx
c00127a7:	56                   	push   esi
c00127a8:	6a 00                	push   0x0
c00127aa:	57                   	push   edi
c00127ab:	e8 20 dd fe ff       	call   c00004d0 <memset>
c00127b0:	8d 4e ff             	lea    ecx,[esi-0x1]
c00127b3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00127b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00127b9:	83 c4 10             	add    esp,0x10
c00127bc:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00127c0:	89 f8                	mov    eax,edi
c00127c2:	5a                   	pop    edx
c00127c3:	5e                   	pop    esi
c00127c4:	5f                   	pop    edi
c00127c5:	c3                   	ret    

c00127c6 <SysEject(regs*)>:
c00127c6:	83 ec 0c             	sub    esp,0xc
c00127c9:	83 ca ff             	or     edx,0xffffffff
c00127cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127d0:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00127d3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00127d8:	83 e9 41             	sub    ecx,0x41
c00127db:	83 f9 19             	cmp    ecx,0x19
c00127de:	77 18                	ja     c00127f8 <SysEject(regs*)+0x32>
c00127e0:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c00127e7:	85 c9                	test   ecx,ecx
c00127e9:	74 0d                	je     c00127f8 <SysEject(regs*)+0x32>
c00127eb:	83 ec 0c             	sub    esp,0xc
c00127ee:	51                   	push   ecx
c00127ef:	e8 cc a4 ff ff       	call   c000ccc0 <LogicalDisk::eject()>
c00127f4:	83 c4 10             	add    esp,0x10
c00127f7:	99                   	cdq    
c00127f8:	83 c4 0c             	add    esp,0xc
c00127fb:	c3                   	ret    

c00127fc <SysExit(regs*)>:
c00127fc:	83 ec 18             	sub    esp,0x18
c00127ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012803:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012806:	e8 11 27 00 00       	call   c0014f1c <terminateTask(int)>
c001280b:	83 c8 ff             	or     eax,0xffffffff
c001280e:	83 c4 1c             	add    esp,0x1c
c0012811:	89 c2                	mov    edx,eax
c0012813:	c3                   	ret    

c0012814 <SysGetCwd(regs*)>:
c0012814:	83 ec 10             	sub    esp,0x10
c0012817:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001281b:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001281e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012821:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012826:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012829:	e8 54 81 ff ff       	call   c000a982 <Fs::getcwd(Process*, char*, int)>
c001282e:	83 c4 1c             	add    esp,0x1c
c0012831:	99                   	cdq    
c0012832:	c3                   	ret    

c0012833 <SysGetPID(regs*)>:
c0012833:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012838:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001283b:	8b 00                	mov    eax,DWORD PTR [eax]
c001283d:	99                   	cdq    
c001283e:	c3                   	ret    

c001283f <SysGetRAMData(regs*)>:
c001283f:	8b 0d e8 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023ee8
c0012845:	69 05 e4 3e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0023ee4,0xc8
c001284f:	99                   	cdq    
c0012850:	f7 f9                	idiv   ecx
c0012852:	c1 e0 18             	shl    eax,0x18
c0012855:	09 c8                	or     eax,ecx
c0012857:	99                   	cdq    
c0012858:	c3                   	ret    

c0012859 <SysGetVGAPtr(regs*)>:
c0012859:	55                   	push   ebp
c001285a:	57                   	push   edi
c001285b:	56                   	push   esi
c001285c:	53                   	push   ebx
c001285d:	83 ec 18             	sub    esp,0x18
c0012860:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012864:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012867:	e8 b0 21 00 00       	call   c0014a1c <Thr::processFromPID(int)>
c001286c:	83 c4 10             	add    esp,0x10
c001286f:	89 c1                	mov    ecx,eax
c0012871:	b8 01 00 00 00       	mov    eax,0x1
c0012876:	85 c9                	test   ecx,ecx
c0012878:	74 57                	je     c00128d1 <SysGetVGAPtr(regs*)+0x78>
c001287a:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0012880:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0012884:	74 0c                	je     c0012892 <SysGetVGAPtr(regs*)+0x39>
c0012886:	83 ec 0c             	sub    esp,0xc
c0012889:	55                   	push   ebp
c001288a:	e8 1e 5c ff ff       	call   c00084ad <setActiveTerminal(VgaText*)>
c001288f:	83 c4 10             	add    esp,0x10
c0012892:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0012895:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012898:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001289d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001289f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00128a2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00128a5:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00128ab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00128ae:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00128b1:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00128b7:	50                   	push   eax
c00128b8:	50                   	push   eax
c00128b9:	68 ab 00 02 c0       	push   0xc00200ab
c00128be:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00128c1:	05 a8 0f 00 00       	add    eax,0xfa8
c00128c6:	50                   	push   eax
c00128c7:	e8 34 dd fe ff       	call   c0000600 <strcpy>
c00128cc:	83 c4 10             	add    esp,0x10
c00128cf:	31 c0                	xor    eax,eax
c00128d1:	83 c4 0c             	add    esp,0xc
c00128d4:	31 d2                	xor    edx,edx
c00128d6:	5b                   	pop    ebx
c00128d7:	5e                   	pop    esi
c00128d8:	5f                   	pop    edi
c00128d9:	5d                   	pop    ebp
c00128da:	c3                   	ret    

c00128db <SysLoadDLL(regs*)>:
c00128db:	56                   	push   esi
c00128dc:	53                   	push   ebx
c00128dd:	31 d2                	xor    edx,edx
c00128df:	51                   	push   ecx
c00128e0:	b8 01 00 00 00       	mov    eax,0x1
c00128e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00128e9:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00128ed:	0f 84 8c 00 00 00    	je     c001297f <SysLoadDLL(regs*)+0xa4>
c00128f3:	83 ec 0c             	sub    esp,0xc
c00128f6:	68 14 01 00 00       	push   0x114
c00128fb:	e8 75 4f ff ff       	call   c0007875 <malloc>
c0012900:	83 c4 0c             	add    esp,0xc
c0012903:	89 c3                	mov    ebx,eax
c0012905:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001290a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001290d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0012910:	53                   	push   ebx
c0012911:	e8 6a 82 ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c0012916:	83 c4 10             	add    esp,0x10
c0012919:	31 d2                	xor    edx,edx
c001291b:	b8 02 00 00 00       	mov    eax,0x2
c0012920:	85 db                	test   ebx,ebx
c0012922:	74 5b                	je     c001297f <SysLoadDLL(regs*)+0xa4>
c0012924:	83 ec 0c             	sub    esp,0xc
c0012927:	53                   	push   ebx
c0012928:	e8 81 85 ff ff       	call   c000aeae <File::exists()>
c001292d:	83 c4 10             	add    esp,0x10
c0012930:	84 c0                	test   al,al
c0012932:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012934:	75 11                	jne    c0012947 <SysLoadDLL(regs*)+0x6c>
c0012936:	83 ec 0c             	sub    esp,0xc
c0012939:	53                   	push   ebx
c001293a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001293d:	83 c4 10             	add    esp,0x10
c0012940:	b8 03 00 00 00       	mov    eax,0x3
c0012945:	eb 36                	jmp    c001297d <SysLoadDLL(regs*)+0xa2>
c0012947:	83 ec 0c             	sub    esp,0xc
c001294a:	53                   	push   ebx
c001294b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001294e:	58                   	pop    eax
c001294f:	5a                   	pop    edx
c0012950:	6a 00                	push   0x0
c0012952:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0012955:	e8 74 12 00 00       	call   c0013bce <Thr::loadDLL(char const*, bool)>
c001295a:	83 c4 10             	add    esp,0x10
c001295d:	89 c1                	mov    ecx,eax
c001295f:	31 d2                	xor    edx,edx
c0012961:	b8 04 00 00 00       	mov    eax,0x4
c0012966:	85 c9                	test   ecx,ecx
c0012968:	74 15                	je     c001297f <SysLoadDLL(regs*)+0xa4>
c001296a:	53                   	push   ebx
c001296b:	53                   	push   ebx
c001296c:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0012972:	51                   	push   ecx
c0012973:	e8 87 14 00 00       	call   c0013dff <Thr::executeDLL(unsigned long, void*)>
c0012978:	83 c4 10             	add    esp,0x10
c001297b:	31 c0                	xor    eax,eax
c001297d:	31 d2                	xor    edx,edx
c001297f:	59                   	pop    ecx
c0012980:	5b                   	pop    ebx
c0012981:	5e                   	pop    esi
c0012982:	c3                   	ret    

c0012983 <SysRead(regs*)>:
c0012983:	57                   	push   edi
c0012984:	56                   	push   esi
c0012985:	53                   	push   ebx
c0012986:	83 ec 10             	sub    esp,0x10
c0012989:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001298d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012990:	83 f8 02             	cmp    eax,0x2
c0012993:	77 10                	ja     c00129a5 <SysRead(regs*)+0x22>
c0012995:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001299a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001299d:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00129a3:	eb 0e                	jmp    c00129b3 <SysRead(regs*)+0x30>
c00129a5:	83 ec 0c             	sub    esp,0xc
c00129a8:	50                   	push   eax
c00129a9:	e8 49 68 ff ff       	call   c00091f7 <getFromFileDescriptor(int)>
c00129ae:	83 c4 10             	add    esp,0x10
c00129b1:	89 c1                	mov    ecx,eax
c00129b3:	83 c8 ff             	or     eax,0xffffffff
c00129b6:	85 c9                	test   ecx,ecx
c00129b8:	89 c2                	mov    edx,eax
c00129ba:	74 28                	je     c00129e4 <SysRead(regs*)+0x61>
c00129bc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00129c4:	31 ff                	xor    edi,edi
c00129c6:	83 ec 0c             	sub    esp,0xc
c00129c9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00129cb:	8d 54 24 18          	lea    edx,[esp+0x18]
c00129cf:	52                   	push   edx
c00129d0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00129d3:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00129d6:	57                   	push   edi
c00129d7:	56                   	push   esi
c00129d8:	51                   	push   ecx
c00129d9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00129dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00129e0:	83 c4 20             	add    esp,0x20
c00129e3:	99                   	cdq    
c00129e4:	83 c4 10             	add    esp,0x10
c00129e7:	5b                   	pop    ebx
c00129e8:	5e                   	pop    esi
c00129e9:	5f                   	pop    edi
c00129ea:	c3                   	ret    

c00129eb <SysRegisterSignal(regs*)>:
c00129eb:	83 ec 18             	sub    esp,0x18
c00129ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00129f2:	6a 00                	push   0x0
c00129f4:	6a 00                	push   0x0
c00129f6:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00129f9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00129fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012a01:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012a04:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0012a0a:	e8 42 dd ff ff       	call   c0010751 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0012a0f:	83 c4 2c             	add    esp,0x2c
c0012a12:	99                   	cdq    
c0012a13:	c3                   	ret    

c0012a14 <SysSbrk(regs*)>:
c0012a14:	56                   	push   esi
c0012a15:	53                   	push   ebx
c0012a16:	50                   	push   eax
c0012a17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012a1c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a20:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012a23:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0012a26:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0012a2c:	85 db                	test   ebx,ebx
c0012a2e:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0012a31:	74 02                	je     c0012a35 <SysSbrk(regs*)+0x21>
c0012a33:	79 06                	jns    c0012a3b <SysSbrk(regs*)+0x27>
c0012a35:	89 f0                	mov    eax,esi
c0012a37:	31 d2                	xor    edx,edx
c0012a39:	eb 2a                	jmp    c0012a65 <SysSbrk(regs*)+0x51>
c0012a3b:	83 c8 ff             	or     eax,0xffffffff
c0012a3e:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0012a44:	89 c2                	mov    edx,eax
c0012a46:	77 1d                	ja     c0012a65 <SysSbrk(regs*)+0x51>
c0012a48:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0012a4e:	50                   	push   eax
c0012a4f:	c1 ea 0c             	shr    edx,0xc
c0012a52:	68 07 0c 00 00       	push   0xc07
c0012a57:	52                   	push   edx
c0012a58:	51                   	push   ecx
c0012a59:	e8 b6 70 ff ff       	call   c0009b14 <VAS::allocatePages(int, int)>
c0012a5e:	89 f0                	mov    eax,esi
c0012a60:	31 d2                	xor    edx,edx
c0012a62:	83 c4 10             	add    esp,0x10
c0012a65:	59                   	pop    ecx
c0012a66:	5b                   	pop    ebx
c0012a67:	5e                   	pop    esi
c0012a68:	c3                   	ret    

c0012a69 <SysSetCwd(regs*)>:
c0012a69:	83 ec 14             	sub    esp,0x14
c0012a6c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012a70:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012a73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012a78:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012a7b:	e8 cd 84 ff ff       	call   c000af4d <Fs::setcwd(Process*, char*)>
c0012a80:	83 c4 1c             	add    esp,0x1c
c0012a83:	99                   	cdq    
c0012a84:	c3                   	ret    

c0012a85 <SysSetTime(regs*)>:
c0012a85:	55                   	push   ebp
c0012a86:	31 c9                	xor    ecx,ecx
c0012a88:	57                   	push   edi
c0012a89:	bd 0c 00 00 00       	mov    ebp,0xc
c0012a8e:	56                   	push   esi
c0012a8f:	53                   	push   ebx
c0012a90:	31 db                	xor    ebx,ebx
c0012a92:	83 ec 10             	sub    esp,0x10
c0012a95:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012a99:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0012a9c:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0012a9f:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0012aa2:	89 c2                	mov    edx,eax
c0012aa4:	66 81 ef 6c 07       	sub    di,0x76c
c0012aa9:	83 e2 1f             	and    edx,0x1f
c0012aac:	c1 e7 10             	shl    edi,0x10
c0012aaf:	42                   	inc    edx
c0012ab0:	c1 e8 05             	shr    eax,0x5
c0012ab3:	88 d1                	mov    cl,dl
c0012ab5:	31 d2                	xor    edx,edx
c0012ab7:	f7 f5                	div    ebp
c0012ab9:	89 dd                	mov    ebp,ebx
c0012abb:	88 d5                	mov    ch,dl
c0012abd:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0012ac3:	0f b7 c1             	movzx  eax,cx
c0012ac6:	31 d2                	xor    edx,edx
c0012ac8:	09 f8                	or     eax,edi
c0012aca:	bf 3c 00 00 00       	mov    edi,0x3c
c0012acf:	89 c1                	mov    ecx,eax
c0012ad1:	89 f0                	mov    eax,esi
c0012ad3:	f7 f7                	div    edi
c0012ad5:	c1 e2 10             	shl    edx,0x10
c0012ad8:	09 d5                	or     ebp,edx
c0012ada:	31 d2                	xor    edx,edx
c0012adc:	89 eb                	mov    ebx,ebp
c0012ade:	f7 f7                	div    edi
c0012ae0:	bf 10 0e 00 00       	mov    edi,0xe10
c0012ae5:	88 d7                	mov    bh,dl
c0012ae7:	89 f0                	mov    eax,esi
c0012ae9:	31 d2                	xor    edx,edx
c0012aeb:	f7 f7                	div    edi
c0012aed:	bf 18 00 00 00       	mov    edi,0x18
c0012af2:	31 d2                	xor    edx,edx
c0012af4:	f7 f7                	div    edi
c0012af6:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0012afb:	88 d3                	mov    bl,dl
c0012afd:	53                   	push   ebx
c0012afe:	51                   	push   ecx
c0012aff:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0012b05:	e8 52 8c ff ff       	call   c000b75c <Clock::setTimeInDatetimeLocal(datetime_t)>
c0012b0a:	83 c4 1c             	add    esp,0x1c
c0012b0d:	83 f0 01             	xor    eax,0x1
c0012b10:	5b                   	pop    ebx
c0012b11:	0f b6 c0             	movzx  eax,al
c0012b14:	5e                   	pop    esi
c0012b15:	31 d2                	xor    edx,edx
c0012b17:	5f                   	pop    edi
c0012b18:	5d                   	pop    ebp
c0012b19:	c3                   	ret    

c0012b1a <SysTimezone(regs*)>:
c0012b1a:	53                   	push   ebx
c0012b1b:	83 ec 08             	sub    esp,0x8
c0012b1e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012b22:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0012b26:	75 17                	jne    c0012b3f <SysTimezone(regs*)+0x25>
c0012b28:	83 ec 0c             	sub    esp,0xc
c0012b2b:	68 b5 00 02 c0       	push   0xc00200b5
c0012b30:	e8 d5 7a ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0012b35:	83 c8 ff             	or     eax,0xffffffff
c0012b38:	83 c4 10             	add    esp,0x10
c0012b3b:	89 c2                	mov    edx,eax
c0012b3d:	eb 20                	jmp    c0012b5f <SysTimezone(regs*)+0x45>
c0012b3f:	83 ec 0c             	sub    esp,0xc
c0012b42:	68 ca 00 02 c0       	push   0xc00200ca
c0012b47:	e8 be 7a ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0012b4c:	58                   	pop    eax
c0012b4d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012b50:	e8 63 89 ff ff       	call   c000b4b8 <User::loadClockSettings(int)>
c0012b55:	83 c4 10             	add    esp,0x10
c0012b58:	b8 01 00 00 00       	mov    eax,0x1
c0012b5d:	31 d2                	xor    edx,edx
c0012b5f:	83 c4 08             	add    esp,0x8
c0012b62:	5b                   	pop    ebx
c0012b63:	c3                   	ret    

c0012b64 <SysWrite(regs*)>:
c0012b64:	57                   	push   edi
c0012b65:	56                   	push   esi
c0012b66:	53                   	push   ebx
c0012b67:	83 ec 10             	sub    esp,0x10
c0012b6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012b6e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012b71:	83 f8 02             	cmp    eax,0x2
c0012b74:	77 10                	ja     c0012b86 <SysWrite(regs*)+0x22>
c0012b76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b7b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012b7e:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0012b84:	eb 0e                	jmp    c0012b94 <SysWrite(regs*)+0x30>
c0012b86:	83 ec 0c             	sub    esp,0xc
c0012b89:	50                   	push   eax
c0012b8a:	e8 68 66 ff ff       	call   c00091f7 <getFromFileDescriptor(int)>
c0012b8f:	83 c4 10             	add    esp,0x10
c0012b92:	89 c1                	mov    ecx,eax
c0012b94:	83 c8 ff             	or     eax,0xffffffff
c0012b97:	85 c9                	test   ecx,ecx
c0012b99:	89 c2                	mov    edx,eax
c0012b9b:	74 28                	je     c0012bc5 <SysWrite(regs*)+0x61>
c0012b9d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012ba5:	31 ff                	xor    edi,edi
c0012ba7:	83 ec 0c             	sub    esp,0xc
c0012baa:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012bac:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012bb0:	52                   	push   edx
c0012bb1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012bb4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0012bb7:	57                   	push   edi
c0012bb8:	56                   	push   esi
c0012bb9:	51                   	push   ecx
c0012bba:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012bbd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012bc1:	83 c4 20             	add    esp,0x20
c0012bc4:	99                   	cdq    
c0012bc5:	83 c4 10             	add    esp,0x10
c0012bc8:	5b                   	pop    ebx
c0012bc9:	5e                   	pop    esi
c0012bca:	5f                   	pop    edi
c0012bcb:	c3                   	ret    

c0012bcc <SysWsbe(regs*)>:
c0012bcc:	57                   	push   edi
c0012bcd:	b9 0b 00 00 00       	mov    ecx,0xb
c0012bd2:	56                   	push   esi
c0012bd3:	be 09 01 02 c0       	mov    esi,0xc0020109
c0012bd8:	53                   	push   ebx
c0012bd9:	83 ec 30             	sub    esp,0x30
c0012bdc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0012be0:	fc                   	cld    
c0012be1:	83 ec 0c             	sub    esp,0xc
c0012be4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012be6:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012bea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012bef:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012bf2:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0012bf8:	8b 06                	mov    eax,DWORD PTR [esi]
c0012bfa:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0012bfd:	57                   	push   edi
c0012bfe:	e8 3d d9 fe ff       	call   c0000540 <strlen>
c0012c03:	5a                   	pop    edx
c0012c04:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0012c08:	52                   	push   edx
c0012c09:	31 d2                	xor    edx,edx
c0012c0b:	57                   	push   edi
c0012c0c:	52                   	push   edx
c0012c0d:	50                   	push   eax
c0012c0e:	56                   	push   esi
c0012c0f:	ff d3                	call   ebx
c0012c11:	83 c4 14             	add    esp,0x14
c0012c14:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012c18:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0012c1b:	e8 fc 22 00 00       	call   c0014f1c <terminateTask(int)>
c0012c20:	83 c4 40             	add    esp,0x40
c0012c23:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012c28:	5b                   	pop    ebx
c0012c29:	31 d2                	xor    edx,edx
c0012c2b:	5e                   	pop    esi
c0012c2c:	5f                   	pop    edi
c0012c2d:	c3                   	ret    

c0012c2e <SysYield(regs*)>:
c0012c2e:	83 ec 0c             	sub    esp,0xc
c0012c31:	fa                   	cli    
c0012c32:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0012c38:	e8 bb 19 00 00       	call   c00145f8 <schedule()>
c0012c3d:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0012c42:	48                   	dec    eax
c0012c43:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0012c48:	75 01                	jne    c0012c4b <SysYield(regs*)+0x1d>
c0012c4a:	fb                   	sti    
c0012c4b:	31 c0                	xor    eax,eax
c0012c4d:	31 d2                	xor    edx,edx
c0012c4f:	83 c4 0c             	add    esp,0xc
c0012c52:	c3                   	ret    

c0012c53 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0012c53:	55                   	push   ebp
c0012c54:	57                   	push   edi
c0012c55:	56                   	push   esi
c0012c56:	53                   	push   ebx
c0012c57:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0012c5d:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0012c65:	0f 95 c2             	setne  dl
c0012c68:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0012c70:	0f 94 c0             	sete   al
c0012c73:	84 c2                	test   dl,al
c0012c75:	74 34                	je     c0012cab <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0012c77:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0012c82:	74 27                	je     c0012cab <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0012c84:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0012c8b:	05 00 10 00 00       	add    eax,0x1000
c0012c90:	89 c1                	mov    ecx,eax
c0012c92:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012c97:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0012c9d:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0012ca4:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0012cab:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0012cb2:	83 ec 0c             	sub    esp,0xc
c0012cb5:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0012cbb:	6a 01                	push   0x1
c0012cbd:	e8 8b 66 ff ff       	call   c000934d <Virt::allocateKernelVirtualPages(int)>
c0012cc2:	83 c4 10             	add    esp,0x10
c0012cc5:	89 c3                	mov    ebx,eax
c0012cc7:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0012ccd:	0f 86 25 01 00 00    	jbe    c0012df8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0012cd3:	c1 ee 0c             	shr    esi,0xc
c0012cd6:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0012cdd:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0012ce1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012ce9:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0012cf0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012cf4:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0012cfb:	29 ef                	sub    edi,ebp
c0012cfd:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0012d01:	0f 83 f8 00 00 00    	jae    c0012dff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0012d07:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0012d0d:	76 05                	jbe    c0012d14 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0012d0f:	bf 00 10 00 00       	mov    edi,0x1000
c0012d14:	83 ec 0c             	sub    esp,0xc
c0012d17:	31 d2                	xor    edx,edx
c0012d19:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0012d20:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012d22:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012d26:	50                   	push   eax
c0012d27:	8d 74 24 30          	lea    esi,[esp+0x30]
c0012d2b:	56                   	push   esi
c0012d2c:	52                   	push   edx
c0012d2d:	57                   	push   edi
c0012d2e:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0012d35:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012d38:	83 c4 20             	add    esp,0x20
c0012d3b:	85 c0                	test   eax,eax
c0012d3d:	75 06                	jne    c0012d45 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0012d3f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0012d43:	74 13                	je     c0012d58 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0012d45:	83 ec 0c             	sub    esp,0xc
c0012d48:	53                   	push   ebx
c0012d49:	e8 f3 68 ff ff       	call   c0009641 <Virt::freeKernelVirtualPages(unsigned long)>
c0012d4e:	83 c4 10             	add    esp,0x10
c0012d51:	31 c0                	xor    eax,eax
c0012d53:	e9 7c 01 00 00       	jmp    c0012ed4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0012d58:	fa                   	cli    
c0012d59:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0012d5f:	e8 ed 4d ff ff       	call   c0007b51 <Phys::allocatePage()>
c0012d64:	6a 07                	push   0x7
c0012d66:	89 c7                	mov    edi,eax
c0012d68:	53                   	push   ebx
c0012d69:	50                   	push   eax
c0012d6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d6f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012d72:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012d78:	e8 93 6c ff ff       	call   c0009a10 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012d7d:	83 c4 0c             	add    esp,0xc
c0012d80:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0012d87:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012d8d:	6a 00                	push   0x0
c0012d8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d94:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012d97:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012d9d:	e8 e0 6a ff ff       	call   c0009882 <VAS::mapOtherVASIn(bool, VAS*)>
c0012da2:	58                   	pop    eax
c0012da3:	5a                   	pop    edx
c0012da4:	68 07 0c 00 00       	push   0xc07
c0012da9:	55                   	push   ebp
c0012daa:	57                   	push   edi
c0012dab:	89 df                	mov    edi,ebx
c0012dad:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012db4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012dba:	6a 00                	push   0x0
c0012dbc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012dc1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012dc4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012dca:	e8 01 70 ff ff       	call   c0009dd0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0012dcf:	b9 00 10 00 00       	mov    ecx,0x1000
c0012dd4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012dd6:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0012ddb:	83 c4 20             	add    esp,0x20
c0012dde:	48                   	dec    eax
c0012ddf:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0012de4:	85 c0                	test   eax,eax
c0012de6:	75 01                	jne    c0012de9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0012de8:	fb                   	sti    
c0012de9:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012def:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0012df3:	e9 f1 fe ff ff       	jmp    c0012ce9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0012df8:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0012dff:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0012e06:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0012e0c:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0012e12:	0f 86 ae 00 00 00    	jbe    c0012ec6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012e18:	fa                   	cli    
c0012e19:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0012e1f:	c1 ee 0c             	shr    esi,0xc
c0012e22:	51                   	push   ecx
c0012e23:	31 ff                	xor    edi,edi
c0012e25:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0012e2c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012e32:	6a 00                	push   0x0
c0012e34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012e39:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012e3c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012e42:	e8 3b 6a ff ff       	call   c0009882 <VAS::mapOtherVASIn(bool, VAS*)>
c0012e47:	83 c4 10             	add    esp,0x10
c0012e4a:	e8 02 4d ff ff       	call   c0007b51 <Phys::allocatePage()>
c0012e4f:	47                   	inc    edi
c0012e50:	6a 07                	push   0x7
c0012e52:	53                   	push   ebx
c0012e53:	50                   	push   eax
c0012e54:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012e58:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012e5e:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0012e61:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0012e67:	e8 a4 6b ff ff       	call   c0009a10 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012e6c:	58                   	pop    eax
c0012e6d:	5a                   	pop    edx
c0012e6e:	68 07 0c 00 00       	push   0xc07
c0012e73:	55                   	push   ebp
c0012e74:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012e7a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e7e:	50                   	push   eax
c0012e7f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012e86:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012e8c:	6a 00                	push   0x0
c0012e8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012e93:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012e96:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012e9c:	e8 2f 6f ff ff       	call   c0009dd0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0012ea1:	83 c4 1c             	add    esp,0x1c
c0012ea4:	68 00 10 00 00       	push   0x1000
c0012ea9:	6a 00                	push   0x0
c0012eab:	53                   	push   ebx
c0012eac:	e8 1f d6 fe ff       	call   c00004d0 <memset>
c0012eb1:	83 c4 10             	add    esp,0x10
c0012eb4:	39 fe                	cmp    esi,edi
c0012eb6:	77 92                	ja     c0012e4a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0012eb8:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0012ebd:	48                   	dec    eax
c0012ebe:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0012ec3:	75 01                	jne    c0012ec6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012ec5:	fb                   	sti    
c0012ec6:	83 ec 0c             	sub    esp,0xc
c0012ec9:	53                   	push   ebx
c0012eca:	e8 72 67 ff ff       	call   c0009641 <Virt::freeKernelVirtualPages(unsigned long)>
c0012ecf:	83 c4 10             	add    esp,0x10
c0012ed2:	b0 01                	mov    al,0x1
c0012ed4:	81 c4 2c 10 00 00    	add    esp,0x102c
c0012eda:	5b                   	pop    ebx
c0012edb:	5e                   	pop    esi
c0012edc:	5f                   	pop    edi
c0012edd:	5d                   	pop    ebp
c0012ede:	c3                   	ret    

c0012edf <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0012edf:	55                   	push   ebp
c0012ee0:	57                   	push   edi
c0012ee1:	56                   	push   esi
c0012ee2:	53                   	push   ebx
c0012ee3:	83 ec 48             	sub    esp,0x48
c0012ee6:	68 14 01 00 00       	push   0x114
c0012eeb:	e8 85 49 ff ff       	call   c0007875 <malloc>
c0012ef0:	83 c4 0c             	add    esp,0xc
c0012ef3:	89 c6                	mov    esi,eax
c0012ef5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012ef9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012efd:	50                   	push   eax
c0012efe:	e8 7d 7c ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c0012f03:	58                   	pop    eax
c0012f04:	5a                   	pop    edx
c0012f05:	6a 01                	push   0x1
c0012f07:	56                   	push   esi
c0012f08:	e8 33 7d ff ff       	call   c000ac40 <File::open(FileOpenMode)>
c0012f0d:	83 c4 10             	add    esp,0x10
c0012f10:	85 c0                	test   eax,eax
c0012f12:	0f 85 47 01 00 00    	jne    c001305f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012f18:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0012f20:	83 ec 0c             	sub    esp,0xc
c0012f23:	6a 34                	push   0x34
c0012f25:	e8 4b 49 ff ff       	call   c0007875 <malloc>
c0012f2a:	89 c3                	mov    ebx,eax
c0012f2c:	58                   	pop    eax
c0012f2d:	8b 06                	mov    eax,DWORD PTR [esi]
c0012f2f:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0012f33:	57                   	push   edi
c0012f34:	53                   	push   ebx
c0012f35:	6a 00                	push   0x0
c0012f37:	6a 34                	push   0x34
c0012f39:	56                   	push   esi
c0012f3a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012f3d:	83 c4 20             	add    esp,0x20
c0012f40:	85 c0                	test   eax,eax
c0012f42:	0f 85 17 01 00 00    	jne    c001305f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012f48:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0012f4e:	0f 85 0b 01 00 00    	jne    c001305f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012f54:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012f57:	85 c0                	test   eax,eax
c0012f59:	0f 84 00 01 00 00    	je     c001305f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012f5f:	31 d2                	xor    edx,edx
c0012f61:	55                   	push   ebp
c0012f62:	52                   	push   edx
c0012f63:	50                   	push   eax
c0012f64:	56                   	push   esi
c0012f65:	e8 94 7d ff ff       	call   c000acfe <File::seek(unsigned long long)>
c0012f6a:	83 c4 10             	add    esp,0x10
c0012f6d:	85 c0                	test   eax,eax
c0012f6f:	0f 85 ea 00 00 00    	jne    c001305f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012f75:	83 ec 0c             	sub    esp,0xc
c0012f78:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012f7b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0012f7f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012f83:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012f87:	0f af c2             	imul   eax,edx
c0012f8a:	50                   	push   eax
c0012f8b:	e8 e5 48 ff ff       	call   c0007875 <malloc>
c0012f90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012f92:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012f96:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012f99:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012f9d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0012fa1:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012fa5:	0f af c2             	imul   eax,edx
c0012fa8:	99                   	cdq    
c0012fa9:	52                   	push   edx
c0012faa:	50                   	push   eax
c0012fab:	56                   	push   esi
c0012fac:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012faf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0012fb2:	83 c4 20             	add    esp,0x20
c0012fb5:	85 c0                	test   eax,eax
c0012fb7:	0f 84 a2 00 00 00    	je     c001305f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012fbd:	31 d2                	xor    edx,edx
c0012fbf:	51                   	push   ecx
c0012fc0:	52                   	push   edx
c0012fc1:	50                   	push   eax
c0012fc2:	56                   	push   esi
c0012fc3:	e8 36 7d ff ff       	call   c000acfe <File::seek(unsigned long long)>
c0012fc8:	83 c4 10             	add    esp,0x10
c0012fcb:	85 c0                	test   eax,eax
c0012fcd:	0f 85 8c 00 00 00    	jne    c001305f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012fd3:	83 ec 0c             	sub    esp,0xc
c0012fd6:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012fda:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0012fde:	31 ed                	xor    ebp,ebp
c0012fe0:	0f af c2             	imul   eax,edx
c0012fe3:	50                   	push   eax
c0012fe4:	e8 8c 48 ff ff       	call   c0007875 <malloc>
c0012fe9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012feb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012fef:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012ff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ff6:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012ffa:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0012ffe:	0f af c2             	imul   eax,edx
c0013001:	99                   	cdq    
c0013002:	52                   	push   edx
c0013003:	50                   	push   eax
c0013004:	56                   	push   esi
c0013005:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013008:	83 c4 20             	add    esp,0x20
c001300b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013013:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0013017:	0f 86 80 00 00 00    	jbe    c001309d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001301d:	0f b7 fd             	movzx  edi,bp
c0013020:	c1 e7 05             	shl    edi,0x5
c0013023:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0013027:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001302a:	75 6b                	jne    c0013097 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001302c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001302f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013033:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013036:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001303a:	52                   	push   edx
c001303b:	31 d2                	xor    edx,edx
c001303d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0013040:	52                   	push   edx
c0013041:	50                   	push   eax
c0013042:	56                   	push   esi
c0013043:	e8 b6 7c ff ff       	call   c000acfe <File::seek(unsigned long long)>
c0013048:	83 c4 10             	add    esp,0x10
c001304b:	85 c0                	test   eax,eax
c001304d:	74 17                	je     c0013066 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001304f:	83 ec 0c             	sub    esp,0xc
c0013052:	68 35 01 02 c0       	push   0xc0020135
c0013057:	e8 ae 75 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c001305c:	83 c4 10             	add    esp,0x10
c001305f:	31 c0                	xor    eax,eax
c0013061:	e9 87 00 00 00       	jmp    c00130ed <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0013066:	83 ec 0c             	sub    esp,0xc
c0013069:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001306c:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001306f:	50                   	push   eax
c0013070:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013074:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013078:	56                   	push   esi
c0013079:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001307d:	e8 d1 fb ff ff       	call   c0012c53 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013082:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013086:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001308a:	83 c4 20             	add    esp,0x20
c001308d:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0013091:	73 04                	jae    c0013097 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0013093:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013097:	45                   	inc    ebp
c0013098:	e9 76 ff ff ff       	jmp    c0013013 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001309d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00130a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00130a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00130a9:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00130af:	83 ec 0c             	sub    esp,0xc
c00130b2:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00130b8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00130bd:	05 00 10 00 00       	add    eax,0x1000
c00130c2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00130c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130c9:	e8 b7 47 ff ff       	call   c0007885 <free>
c00130ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00130d1:	e8 af 47 ff ff       	call   c0007885 <free>
c00130d6:	58                   	pop    eax
c00130d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00130db:	e8 a5 47 ff ff       	call   c0007885 <free>
c00130e0:	89 34 24             	mov    DWORD PTR [esp],esi
c00130e3:	e8 b6 7b ff ff       	call   c000ac9e <File::close()>
c00130e8:	83 c4 10             	add    esp,0x10
c00130eb:	b0 01                	mov    al,0x1
c00130ed:	83 c4 3c             	add    esp,0x3c
c00130f0:	5b                   	pop    ebx
c00130f1:	5e                   	pop    esi
c00130f2:	5f                   	pop    edi
c00130f3:	5d                   	pop    ebp
c00130f4:	c3                   	ret    

c00130f5 <Thr::runtimeReferenceHelper()>:
c00130f5:	83 ec 18             	sub    esp,0x18
c00130f8:	68 3d 01 02 c0       	push   0xc002013d
c00130fd:	e8 08 75 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0013102:	fa                   	cli    
c0013103:	83 c4 10             	add    esp,0x10
c0013106:	eb fe                	jmp    c0013106 <Thr::runtimeReferenceHelper()+0x11>

c0013108 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013108:	57                   	push   edi
c0013109:	56                   	push   esi
c001310a:	53                   	push   ebx
c001310b:	31 db                	xor    ebx,ebx
c001310d:	39 1d 40 71 02 c0    	cmp    DWORD PTR ds:0xc0027140,ebx
c0013113:	7e 3c                	jle    c0013151 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013115:	8b 34 9d c0 70 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd8f40]
c001311c:	31 ff                	xor    edi,edi
c001311e:	39 3c 9d c0 6f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd9040],edi
c0013125:	7e 27                	jle    c001314e <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013127:	50                   	push   eax
c0013128:	50                   	push   eax
c0013129:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001312d:	8b 06                	mov    eax,DWORD PTR [esi]
c001312f:	03 04 9d 40 70 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd8fc0]
c0013136:	50                   	push   eax
c0013137:	e8 a4 d5 fe ff       	call   c00006e0 <strcmp>
c001313c:	83 c4 10             	add    esp,0x10
c001313f:	85 c0                	test   eax,eax
c0013141:	75 05                	jne    c0013148 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013143:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013146:	eb 0b                	jmp    c0013153 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013148:	83 c6 10             	add    esi,0x10
c001314b:	47                   	inc    edi
c001314c:	eb d0                	jmp    c001311e <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001314e:	43                   	inc    ebx
c001314f:	eb bc                	jmp    c001310d <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013151:	31 c0                	xor    eax,eax
c0013153:	5b                   	pop    ebx
c0013154:	5e                   	pop    esi
c0013155:	5f                   	pop    edi
c0013156:	c3                   	ret    

c0013157 <Thr::loadKernelSymbolTable(char const*)>:
c0013157:	55                   	push   ebp
c0013158:	57                   	push   edi
c0013159:	56                   	push   esi
c001315a:	53                   	push   ebx
c001315b:	83 ec 68             	sub    esp,0x68
c001315e:	8b 35 90 71 02 c0    	mov    esi,DWORD PTR ds:0xc0027190
c0013164:	68 14 01 00 00       	push   0x114
c0013169:	e8 07 47 ff ff       	call   c0007875 <malloc>
c001316e:	83 c4 0c             	add    esp,0xc
c0013171:	89 c3                	mov    ebx,eax
c0013173:	56                   	push   esi
c0013174:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013178:	50                   	push   eax
c0013179:	e8 02 7a ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c001317e:	5e                   	pop    esi
c001317f:	5f                   	pop    edi
c0013180:	6a 01                	push   0x1
c0013182:	53                   	push   ebx
c0013183:	e8 b8 7a ff ff       	call   c000ac40 <File::open(FileOpenMode)>
c0013188:	83 c4 10             	add    esp,0x10
c001318b:	85 c0                	test   eax,eax
c001318d:	74 0a                	je     c0013199 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001318f:	83 ec 0c             	sub    esp,0xc
c0013192:	68 5f 01 02 c0       	push   0xc002015f
c0013197:	eb 34                	jmp    c00131cd <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013199:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00131a1:	83 ec 0c             	sub    esp,0xc
c00131a4:	6a 34                	push   0x34
c00131a6:	e8 ca 46 ff ff       	call   c0007875 <malloc>
c00131ab:	59                   	pop    ecx
c00131ac:	89 c7                	mov    edi,eax
c00131ae:	8d 74 24 34          	lea    esi,[esp+0x34]
c00131b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00131b4:	56                   	push   esi
c00131b5:	57                   	push   edi
c00131b6:	6a 00                	push   0x0
c00131b8:	6a 34                	push   0x34
c00131ba:	53                   	push   ebx
c00131bb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00131be:	83 c4 20             	add    esp,0x20
c00131c1:	85 c0                	test   eax,eax
c00131c3:	74 17                	je     c00131dc <Thr::loadKernelSymbolTable(char const*)+0x85>
c00131c5:	83 ec 0c             	sub    esp,0xc
c00131c8:	68 76 01 02 c0       	push   0xc0020176
c00131cd:	e8 c9 d1 ff ff       	call   c001039b <KePanic(char const*)>
c00131d2:	83 c4 10             	add    esp,0x10
c00131d5:	31 c0                	xor    eax,eax
c00131d7:	e9 31 02 00 00       	jmp    c001340d <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00131dc:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00131e2:	75 e1                	jne    c00131c5 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00131e4:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00131e7:	85 c0                	test   eax,eax
c00131e9:	74 da                	je     c00131c5 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00131eb:	52                   	push   edx
c00131ec:	31 d2                	xor    edx,edx
c00131ee:	52                   	push   edx
c00131ef:	50                   	push   eax
c00131f0:	53                   	push   ebx
c00131f1:	e8 08 7b ff ff       	call   c000acfe <File::seek(unsigned long long)>
c00131f6:	83 c4 10             	add    esp,0x10
c00131f9:	85 c0                	test   eax,eax
c00131fb:	75 c8                	jne    c00131c5 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00131fd:	83 ec 0c             	sub    esp,0xc
c0013200:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013204:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013208:	31 ed                	xor    ebp,ebp
c001320a:	0f af c2             	imul   eax,edx
c001320d:	50                   	push   eax
c001320e:	e8 62 46 ff ff       	call   c0007875 <malloc>
c0013213:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013219:	89 34 24             	mov    DWORD PTR [esp],esi
c001321c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013220:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013224:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013228:	0f af c2             	imul   eax,edx
c001322b:	99                   	cdq    
c001322c:	52                   	push   edx
c001322d:	50                   	push   eax
c001322e:	53                   	push   ebx
c001322f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013232:	83 c4 20             	add    esp,0x20
c0013235:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001323d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013245:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001324d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013255:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0013259:	0f 86 aa 00 00 00    	jbe    c0013309 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001325f:	0f b7 f5             	movzx  esi,bp
c0013262:	6b f6 28             	imul   esi,esi,0x28
c0013265:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013269:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001326c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013270:	50                   	push   eax
c0013271:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013275:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013279:	8b 16                	mov    edx,DWORD PTR [esi]
c001327b:	6b c0 28             	imul   eax,eax,0x28
c001327e:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013282:	89 d0                	mov    eax,edx
c0013284:	31 d2                	xor    edx,edx
c0013286:	52                   	push   edx
c0013287:	50                   	push   eax
c0013288:	53                   	push   ebx
c0013289:	e8 70 7a ff ff       	call   c000acfe <File::seek(unsigned long long)>
c001328e:	83 c4 0c             	add    esp,0xc
c0013291:	6a 20                	push   0x20
c0013293:	6a 00                	push   0x0
c0013295:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013299:	52                   	push   edx
c001329a:	e8 31 d2 fe ff       	call   c00004d0 <memset>
c001329f:	58                   	pop    eax
c00132a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132a2:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00132a6:	51                   	push   ecx
c00132a7:	8d 54 24 40          	lea    edx,[esp+0x40]
c00132ab:	52                   	push   edx
c00132ac:	6a 00                	push   0x0
c00132ae:	6a 1f                	push   0x1f
c00132b0:	53                   	push   ebx
c00132b1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00132b4:	83 c4 18             	add    esp,0x18
c00132b7:	68 8d 01 02 c0       	push   0xc002018d
c00132bc:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00132c0:	52                   	push   edx
c00132c1:	e8 1a d4 fe ff       	call   c00006e0 <strcmp>
c00132c6:	83 c4 10             	add    esp,0x10
c00132c9:	85 c0                	test   eax,eax
c00132cb:	75 0f                	jne    c00132dc <Thr::loadKernelSymbolTable(char const*)+0x185>
c00132cd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00132d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00132d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00132dc:	50                   	push   eax
c00132dd:	50                   	push   eax
c00132de:	68 95 01 02 c0       	push   0xc0020195
c00132e3:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00132e7:	50                   	push   eax
c00132e8:	e8 f3 d3 fe ff       	call   c00006e0 <strcmp>
c00132ed:	83 c4 10             	add    esp,0x10
c00132f0:	85 c0                	test   eax,eax
c00132f2:	75 0f                	jne    c0013303 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00132f4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00132f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00132fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013303:	45                   	inc    ebp
c0013304:	e9 4c ff ff ff       	jmp    c0013255 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0013309:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001330e:	75 10                	jne    c0013320 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0013310:	83 ec 0c             	sub    esp,0xc
c0013313:	68 9d 01 02 c0       	push   0xc002019d
c0013318:	e8 7e d0 ff ff       	call   c001039b <KePanic(char const*)>
c001331d:	83 c4 10             	add    esp,0x10
c0013320:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013325:	75 10                	jne    c0013337 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0013327:	83 ec 0c             	sub    esp,0xc
c001332a:	68 9d 01 02 c0       	push   0xc002019d
c001332f:	e8 67 d0 ff ff       	call   c001039b <KePanic(char const*)>
c0013334:	83 c4 10             	add    esp,0x10
c0013337:	31 d2                	xor    edx,edx
c0013339:	50                   	push   eax
c001333a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001333e:	52                   	push   edx
c001333f:	50                   	push   eax
c0013340:	53                   	push   ebx
c0013341:	e8 b8 79 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c0013346:	5a                   	pop    edx
c0013347:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001334b:	e8 25 45 ff ff       	call   c0007875 <malloc>
c0013350:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013354:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013358:	31 c9                	xor    ecx,ecx
c001335a:	5e                   	pop    esi
c001335b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001335d:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0013361:	55                   	push   ebp
c0013362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013366:	51                   	push   ecx
c0013367:	52                   	push   edx
c0013368:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001336c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013370:	53                   	push   ebx
c0013371:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013374:	83 c4 14             	add    esp,0x14
c0013377:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001337b:	e8 f5 44 ff ff       	call   c0007875 <malloc>
c0013380:	89 c6                	mov    esi,eax
c0013382:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013384:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013387:	56                   	push   esi
c0013388:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001338c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013390:	51                   	push   ecx
c0013391:	52                   	push   edx
c0013392:	53                   	push   ebx
c0013393:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013396:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001339a:	8b 15 40 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027140
c00133a0:	83 c4 1c             	add    esp,0x1c
c00133a3:	c1 e8 04             	shr    eax,0x4
c00133a6:	89 04 95 c0 6f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9040],eax
c00133ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00133b1:	31 d2                	xor    edx,edx
c00133b3:	52                   	push   edx
c00133b4:	50                   	push   eax
c00133b5:	53                   	push   ebx
c00133b6:	e8 43 79 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c00133bb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00133bd:	31 d2                	xor    edx,edx
c00133bf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00133c2:	56                   	push   esi
c00133c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00133c7:	52                   	push   edx
c00133c8:	50                   	push   eax
c00133c9:	53                   	push   ebx
c00133ca:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00133cd:	83 c4 14             	add    esp,0x14
c00133d0:	53                   	push   ebx
c00133d1:	e8 c8 78 ff ff       	call   c000ac9e <File::close()>
c00133d6:	5d                   	pop    ebp
c00133d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00133db:	e8 a5 44 ff ff       	call   c0007885 <free>
c00133e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00133e3:	e8 9d 44 ff ff       	call   c0007885 <free>
c00133e8:	a1 40 71 02 c0       	mov    eax,ds:0xc0027140
c00133ed:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00133f1:	8d 50 01             	lea    edx,[eax+0x1]
c00133f4:	89 0c 85 c0 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8f40],ecx
c00133fb:	89 34 85 40 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8fc0],esi
c0013402:	89 15 40 71 02 c0    	mov    DWORD PTR ds:0xc0027140,edx
c0013408:	83 c4 10             	add    esp,0x10
c001340b:	b0 01                	mov    al,0x1
c001340d:	83 c4 5c             	add    esp,0x5c
c0013410:	5b                   	pop    ebx
c0013411:	5e                   	pop    esi
c0013412:	5f                   	pop    edi
c0013413:	5d                   	pop    ebp
c0013414:	c3                   	ret    

c0013415 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0013415:	55                   	push   ebp
c0013416:	57                   	push   edi
c0013417:	56                   	push   esi
c0013418:	53                   	push   ebx
c0013419:	81 ec 68 03 00 00    	sub    esp,0x368
c001341f:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0013426:	8b 1d 90 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027190
c001342c:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0013430:	68 14 01 00 00       	push   0x114
c0013435:	e8 3b 44 ff ff       	call   c0007875 <malloc>
c001343a:	83 c4 0c             	add    esp,0xc
c001343d:	89 c5                	mov    ebp,eax
c001343f:	53                   	push   ebx
c0013440:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0013447:	50                   	push   eax
c0013448:	e8 33 77 ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c001344d:	5e                   	pop    esi
c001344e:	5f                   	pop    edi
c001344f:	6a 01                	push   0x1
c0013451:	55                   	push   ebp
c0013452:	e8 e9 77 ff ff       	call   c000ac40 <File::open(FileOpenMode)>
c0013457:	83 c4 10             	add    esp,0x10
c001345a:	85 c0                	test   eax,eax
c001345c:	0f 85 a7 06 00 00    	jne    c0013b09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013462:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001346a:	83 ec 0c             	sub    esp,0xc
c001346d:	6a 34                	push   0x34
c001346f:	e8 01 44 ff ff       	call   c0007875 <malloc>
c0013474:	5b                   	pop    ebx
c0013475:	89 c7                	mov    edi,eax
c0013477:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001347b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001347e:	53                   	push   ebx
c001347f:	57                   	push   edi
c0013480:	6a 00                	push   0x0
c0013482:	6a 34                	push   0x34
c0013484:	55                   	push   ebp
c0013485:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013488:	83 c4 20             	add    esp,0x20
c001348b:	85 c0                	test   eax,eax
c001348d:	0f 85 76 06 00 00    	jne    c0013b09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013493:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013499:	0f 85 6a 06 00 00    	jne    c0013b09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001349f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00134a2:	85 c0                	test   eax,eax
c00134a4:	0f 84 5f 06 00 00    	je     c0013b09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00134aa:	31 d2                	xor    edx,edx
c00134ac:	51                   	push   ecx
c00134ad:	52                   	push   edx
c00134ae:	50                   	push   eax
c00134af:	55                   	push   ebp
c00134b0:	e8 49 78 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c00134b5:	83 c4 10             	add    esp,0x10
c00134b8:	85 c0                	test   eax,eax
c00134ba:	0f 85 49 06 00 00    	jne    c0013b09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00134c0:	83 ec 0c             	sub    esp,0xc
c00134c3:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00134c6:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00134ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00134ce:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00134d2:	0f af c2             	imul   eax,edx
c00134d5:	50                   	push   eax
c00134d6:	e8 9a 43 ff ff       	call   c0007875 <malloc>
c00134db:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00134de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00134e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00134e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00134e9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00134ed:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00134f1:	0f af c2             	imul   eax,edx
c00134f4:	99                   	cdq    
c00134f5:	52                   	push   edx
c00134f6:	50                   	push   eax
c00134f7:	55                   	push   ebp
c00134f8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00134fb:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00134fe:	83 c4 20             	add    esp,0x20
c0013501:	85 c0                	test   eax,eax
c0013503:	0f 84 00 06 00 00    	je     c0013b09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013509:	52                   	push   edx
c001350a:	31 d2                	xor    edx,edx
c001350c:	52                   	push   edx
c001350d:	50                   	push   eax
c001350e:	55                   	push   ebp
c001350f:	e8 ea 77 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c0013514:	83 c4 10             	add    esp,0x10
c0013517:	85 c0                	test   eax,eax
c0013519:	0f 85 ea 05 00 00    	jne    c0013b09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001351f:	83 ec 0c             	sub    esp,0xc
c0013522:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0013526:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001352a:	31 f6                	xor    esi,esi
c001352c:	0f af c2             	imul   eax,edx
c001352f:	50                   	push   eax
c0013530:	e8 40 43 ff ff       	call   c0007875 <malloc>
c0013535:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013538:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001353c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001353f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013543:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0013547:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001354b:	0f af c2             	imul   eax,edx
c001354e:	99                   	cdq    
c001354f:	52                   	push   edx
c0013550:	50                   	push   eax
c0013551:	55                   	push   ebp
c0013552:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013555:	83 c4 20             	add    esp,0x20
c0013558:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001355c:	0f 86 8a 00 00 00    	jbe    c00135ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0013562:	0f b7 de             	movzx  ebx,si
c0013565:	c1 e3 05             	shl    ebx,0x5
c0013568:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001356c:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001356f:	75 75                	jne    c00135e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0013571:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013574:	31 d2                	xor    edx,edx
c0013576:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001357a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001357d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013581:	50                   	push   eax
c0013582:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013585:	52                   	push   edx
c0013586:	50                   	push   eax
c0013587:	55                   	push   ebp
c0013588:	e8 71 77 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c001358d:	83 c4 10             	add    esp,0x10
c0013590:	85 c0                	test   eax,eax
c0013592:	0f 85 71 05 00 00    	jne    c0013b09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013598:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001359f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00135a2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00135a6:	31 d2                	xor    edx,edx
c00135a8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00135ac:	83 ec 0c             	sub    esp,0xc
c00135af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00135b3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00135ba:	50                   	push   eax
c00135bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00135bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135c3:	52                   	push   edx
c00135c4:	50                   	push   eax
c00135c5:	55                   	push   ebp
c00135c6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00135c9:	83 c4 1c             	add    esp,0x1c
c00135cc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00135cf:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00135d2:	50                   	push   eax
c00135d3:	6a 00                	push   0x0
c00135d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135d9:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00135dd:	50                   	push   eax
c00135de:	e8 ed ce fe ff       	call   c00004d0 <memset>
c00135e3:	83 c4 10             	add    esp,0x10
c00135e6:	46                   	inc    esi
c00135e7:	e9 6c ff ff ff       	jmp    c0013558 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00135ec:	53                   	push   ebx
c00135ed:	31 db                	xor    ebx,ebx
c00135ef:	68 00 01 00 00       	push   0x100
c00135f4:	6a 00                	push   0x0
c00135f6:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00135fa:	50                   	push   eax
c00135fb:	e8 d0 ce fe ff       	call   c00004d0 <memset>
c0013600:	83 c4 0c             	add    esp,0xc
c0013603:	68 00 01 00 00       	push   0x100
c0013608:	6a 00                	push   0x0
c001360a:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0013611:	50                   	push   eax
c0013612:	e8 b9 ce fe ff       	call   c00004d0 <memset>
c0013617:	83 c4 10             	add    esp,0x10
c001361a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013622:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001362a:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0013632:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001363a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013642:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0013646:	0f 86 30 01 00 00    	jbe    c001377c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001364c:	0f b7 f3             	movzx  esi,bx
c001364f:	6b f6 28             	imul   esi,esi,0x28
c0013652:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013656:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013659:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001365d:	52                   	push   edx
c001365e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013662:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0013666:	8b 06                	mov    eax,DWORD PTR [esi]
c0013668:	6b d2 28             	imul   edx,edx,0x28
c001366b:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001366f:	31 d2                	xor    edx,edx
c0013671:	52                   	push   edx
c0013672:	50                   	push   eax
c0013673:	55                   	push   ebp
c0013674:	e8 85 76 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c0013679:	83 c4 0c             	add    esp,0xc
c001367c:	6a 20                	push   0x20
c001367e:	6a 00                	push   0x0
c0013680:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0013687:	51                   	push   ecx
c0013688:	e8 43 ce fe ff       	call   c00004d0 <memset>
c001368d:	59                   	pop    ecx
c001368e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013691:	8d 54 24 58          	lea    edx,[esp+0x58]
c0013695:	52                   	push   edx
c0013696:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001369d:	51                   	push   ecx
c001369e:	6a 00                	push   0x0
c00136a0:	6a 1f                	push   0x1f
c00136a2:	55                   	push   ebp
c00136a3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00136a6:	83 c4 1c             	add    esp,0x1c
c00136a9:	6a 09                	push   0x9
c00136ab:	68 b7 01 02 c0       	push   0xc00201b7
c00136b0:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00136b7:	51                   	push   ecx
c00136b8:	e8 d3 cc fe ff       	call   c0000390 <memcmp>
c00136bd:	83 c4 10             	add    esp,0x10
c00136c0:	85 c0                	test   eax,eax
c00136c2:	75 21                	jne    c00136e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00136c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00136cc:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00136d0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00136d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00136d7:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00136de:	89 d0                	mov    eax,edx
c00136e0:	40                   	inc    eax
c00136e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00136e5:	50                   	push   eax
c00136e6:	6a 09                	push   0x9
c00136e8:	68 c1 01 02 c0       	push   0xc00201c1
c00136ed:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00136f4:	50                   	push   eax
c00136f5:	e8 96 cc fe ff       	call   c0000390 <memcmp>
c00136fa:	83 c4 10             	add    esp,0x10
c00136fd:	85 c0                	test   eax,eax
c00136ff:	75 21                	jne    c0013722 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0013701:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013705:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013709:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001370d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013711:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013714:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001371b:	89 d0                	mov    eax,edx
c001371d:	40                   	inc    eax
c001371e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013722:	50                   	push   eax
c0013723:	50                   	push   eax
c0013724:	68 8d 01 02 c0       	push   0xc002018d
c0013729:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013730:	50                   	push   eax
c0013731:	e8 aa cf fe ff       	call   c00006e0 <strcmp>
c0013736:	83 c4 10             	add    esp,0x10
c0013739:	85 c0                	test   eax,eax
c001373b:	75 0f                	jne    c001374c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001373d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013740:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013744:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013748:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001374c:	50                   	push   eax
c001374d:	50                   	push   eax
c001374e:	68 95 01 02 c0       	push   0xc0020195
c0013753:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001375a:	50                   	push   eax
c001375b:	e8 80 cf fe ff       	call   c00006e0 <strcmp>
c0013760:	83 c4 10             	add    esp,0x10
c0013763:	85 c0                	test   eax,eax
c0013765:	75 0f                	jne    c0013776 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0013767:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001376a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001376e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013772:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0013776:	43                   	inc    ebx
c0013777:	e9 c6 fe ff ff       	jmp    c0013642 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001377c:	31 d2                	xor    edx,edx
c001377e:	50                   	push   eax
c001377f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013783:	52                   	push   edx
c0013784:	50                   	push   eax
c0013785:	55                   	push   ebp
c0013786:	e8 73 75 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c001378b:	58                   	pop    eax
c001378c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013790:	e8 e0 40 ff ff       	call   c0007875 <malloc>
c0013795:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013798:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001379c:	31 d2                	xor    edx,edx
c001379e:	58                   	pop    eax
c001379f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00137a3:	53                   	push   ebx
c00137a4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00137a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00137ac:	52                   	push   edx
c00137ad:	50                   	push   eax
c00137ae:	55                   	push   ebp
c00137af:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00137b2:	83 c4 14             	add    esp,0x14
c00137b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00137b9:	e8 b7 40 ff ff       	call   c0007875 <malloc>
c00137be:	31 d2                	xor    edx,edx
c00137c0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00137c4:	83 c4 0c             	add    esp,0xc
c00137c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00137cb:	52                   	push   edx
c00137cc:	50                   	push   eax
c00137cd:	55                   	push   ebp
c00137ce:	e8 2b 75 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c00137d3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00137d6:	31 d2                	xor    edx,edx
c00137d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00137db:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00137df:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00137e3:	52                   	push   edx
c00137e4:	50                   	push   eax
c00137e5:	55                   	push   ebp
c00137e6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00137e9:	83 c4 20             	add    esp,0x20
c00137ec:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00137f4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00137f8:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00137fc:	0f 84 0b 03 00 00    	je     c0013b0d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0013802:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0013809:	31 d2                	xor    edx,edx
c001380b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001380f:	c1 e8 03             	shr    eax,0x3
c0013812:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0013816:	51                   	push   ecx
c0013817:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001381b:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001381f:	52                   	push   edx
c0013820:	50                   	push   eax
c0013821:	55                   	push   ebp
c0013822:	e8 d7 74 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c0013827:	5b                   	pop    ebx
c0013828:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001382c:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0013833:	e8 3d 40 ff ff       	call   c0007875 <malloc>
c0013838:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001383b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001383f:	31 d2                	xor    edx,edx
c0013841:	5e                   	pop    esi
c0013842:	8d 44 24 58          	lea    eax,[esp+0x58]
c0013846:	50                   	push   eax
c0013847:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001384b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001384f:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0013856:	52                   	push   edx
c0013857:	50                   	push   eax
c0013858:	55                   	push   ebp
c0013859:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001385c:	83 c4 20             	add    esp,0x20
c001385f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0013867:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001386b:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001386f:	0f 8d 7c 02 00 00    	jge    c0013af1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0013875:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001387d:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0013882:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0013885:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0013889:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001388d:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0013891:	89 d8                	mov    eax,ebx
c0013893:	c1 e8 08             	shr    eax,0x8
c0013896:	89 c6                	mov    esi,eax
c0013898:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001389c:	c1 e6 04             	shl    esi,0x4
c001389f:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00138a3:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00138a6:	85 d2                	test   edx,edx
c00138a8:	0f 85 bf 00 00 00    	jne    c001396d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00138ae:	83 ec 0c             	sub    esp,0xc
c00138b1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00138b5:	03 06                	add    eax,DWORD PTR [esi]
c00138b7:	50                   	push   eax
c00138b8:	e8 4b f8 ff ff       	call   c0013108 <Thr::getAddressOfKernelSymbol(char const*)>
c00138bd:	83 c4 10             	add    esp,0x10
c00138c0:	89 c2                	mov    edx,eax
c00138c2:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c00138c7:	85 c0                	test   eax,eax
c00138c9:	0f 85 9e 00 00 00    	jne    c001396d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00138cf:	83 ec 0c             	sub    esp,0xc
c00138d2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00138d6:	03 06                	add    eax,DWORD PTR [esi]
c00138d8:	50                   	push   eax
c00138d9:	e8 0e cc ff ff       	call   c00104ec <KeResolveCompatibilitySymbol(char*)>
c00138de:	83 c4 10             	add    esp,0x10
c00138e1:	89 c2                	mov    edx,eax
c00138e3:	85 c0                	test   eax,eax
c00138e5:	0f 85 82 00 00 00    	jne    c001396d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00138eb:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00138ef:	50                   	push   eax
c00138f0:	50                   	push   eax
c00138f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00138f5:	03 06                	add    eax,DWORD PTR [esi]
c00138f7:	50                   	push   eax
c00138f8:	68 cb 01 02 c0       	push   0xc00201cb
c00138fd:	e8 08 6d ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0013902:	58                   	pop    eax
c0013903:	5a                   	pop    edx
c0013904:	68 e5 01 02 c0       	push   0xc00201e5
c0013909:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013910:	50                   	push   eax
c0013911:	e8 ea cc fe ff       	call   c0000600 <strcpy>
c0013916:	59                   	pop    ecx
c0013917:	58                   	pop    eax
c0013918:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001391c:	03 06                	add    eax,DWORD PTR [esi]
c001391e:	50                   	push   eax
c001391f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013926:	50                   	push   eax
c0013927:	e8 94 ce fe ff       	call   c00007c0 <strcat>
c001392c:	58                   	pop    eax
c001392d:	5a                   	pop    edx
c001392e:	68 7b 02 02 c0       	push   0xc002027b
c0013933:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001393a:	50                   	push   eax
c001393b:	e8 80 ce fe ff       	call   c00007c0 <strcat>
c0013940:	83 c4 10             	add    esp,0x10
c0013943:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013948:	0f 84 5d 01 00 00    	je     c0013aab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001394e:	83 ec 0c             	sub    esp,0xc
c0013951:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013958:	50                   	push   eax
c0013959:	e8 3d ca ff ff       	call   c001039b <KePanic(char const*)>
c001395e:	83 c4 10             	add    esp,0x10
c0013961:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0013965:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013969:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001396d:	80 fb 01             	cmp    bl,0x1
c0013970:	0f 85 88 00 00 00    	jne    c00139fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0013976:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001397d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0013981:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0013985:	01 ce                	add    esi,ecx
c0013987:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001398d:	0f 94 c0             	sete   al
c0013990:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0013996:	0f 94 c3             	sete   bl
c0013999:	09 c3                	or     ebx,eax
c001399b:	8b 06                	mov    eax,DWORD PTR [esi]
c001399d:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00139a2:	74 41                	je     c00139e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c00139a4:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00139a7:	84 db                	test   bl,bl
c00139a9:	75 15                	jne    c00139c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c00139ab:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00139af:	66 83 f8 0c          	cmp    ax,0xc
c00139b3:	76 05                	jbe    c00139ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c00139b5:	b8 0c 00 00 00       	mov    eax,0xc
c00139ba:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00139be:	76 37                	jbe    c00139f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00139c0:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00139c4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00139c9:	0f 84 dc 00 00 00    	je     c0013aab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00139cf:	83 ec 0c             	sub    esp,0xc
c00139d2:	68 fc 01 02 c0       	push   0xc00201fc
c00139d7:	e8 bf c9 ff ff       	call   c001039b <KePanic(char const*)>
c00139dc:	83 c4 10             	add    esp,0x10
c00139df:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00139e3:	eb 12                	jmp    c00139f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00139e5:	01 c1                	add    ecx,eax
c00139e7:	84 db                	test   bl,bl
c00139e9:	75 0c                	jne    c00139f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00139eb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00139ef:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00139f3:	77 02                	ja     c00139f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00139f5:	01 d1                	add    ecx,edx
c00139f7:	89 0e                	mov    DWORD PTR [esi],ecx
c00139f9:	e9 ea 00 00 00       	jmp    c0013ae8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00139fe:	80 fb 02             	cmp    bl,0x2
c0013a01:	75 7c                	jne    c0013a7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0013a03:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0013a0a:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0013a0e:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0013a12:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0013a18:	74 20                	je     c0013a3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0013a1a:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0013a20:	74 18                	je     c0013a3a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0013a22:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013a26:	b9 0a 00 00 00       	mov    ecx,0xa
c0013a2b:	66 83 f8 0e          	cmp    ax,0xe
c0013a2f:	77 03                	ja     c0013a34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0013a31:	8d 48 fc             	lea    ecx,[eax-0x4]
c0013a34:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0013a38:	76 1f                	jbe    c0013a59 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0013a3a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0013a3e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013a43:	74 66                	je     c0013aab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0013a45:	83 ec 0c             	sub    esp,0xc
c0013a48:	68 18 02 02 c0       	push   0xc0020218
c0013a4d:	e8 49 c9 ff ff       	call   c001039b <KePanic(char const*)>
c0013a52:	83 c4 10             	add    esp,0x10
c0013a55:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013a59:	8b 06                	mov    eax,DWORD PTR [esi]
c0013a5b:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0013a60:	74 13                	je     c0013a75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0013a62:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0013a66:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0013a6d:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0013a71:	01 c8                	add    eax,ecx
c0013a73:	eb 04                	jmp    c0013a79 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0013a75:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0013a79:	01 c2                	add    edx,eax
c0013a7b:	89 16                	mov    DWORD PTR [esi],edx
c0013a7d:	eb 69                	jmp    c0013ae8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0013a7f:	0f b6 db             	movzx  ebx,bl
c0013a82:	50                   	push   eax
c0013a83:	50                   	push   eax
c0013a84:	53                   	push   ebx
c0013a85:	68 34 02 02 c0       	push   0xc0020234
c0013a8a:	e8 7b 6b ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0013a8f:	83 c4 10             	add    esp,0x10
c0013a92:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013a97:	74 12                	je     c0013aab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0013a99:	83 ec 0c             	sub    esp,0xc
c0013a9c:	68 3f 02 02 c0       	push   0xc002023f
c0013aa1:	e8 f5 c8 ff ff       	call   c001039b <KePanic(char const*)>
c0013aa6:	83 c4 10             	add    esp,0x10
c0013aa9:	eb 3d                	jmp    c0013ae8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0013aab:	83 ec 0c             	sub    esp,0xc
c0013aae:	55                   	push   ebp
c0013aaf:	e8 ea 71 ff ff       	call   c000ac9e <File::close()>
c0013ab4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013ab7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013aba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013abd:	59                   	pop    ecx
c0013abe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ac2:	e8 be 3d ff ff       	call   c0007885 <free>
c0013ac7:	5b                   	pop    ebx
c0013ac8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013acc:	e8 b4 3d ff ff       	call   c0007885 <free>
c0013ad1:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013ad4:	e8 ac 3d ff ff       	call   c0007885 <free>
c0013ad9:	5e                   	pop    esi
c0013ada:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ade:	e8 a2 3d ff ff       	call   c0007885 <free>
c0013ae3:	83 c4 10             	add    esp,0x10
c0013ae6:	eb 21                	jmp    c0013b09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013ae8:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0013aec:	e9 76 fd ff ff       	jmp    c0013867 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0013af1:	83 ec 0c             	sub    esp,0xc
c0013af4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013af8:	e8 88 3d ff ff       	call   c0007885 <free>
c0013afd:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0013b01:	83 c4 10             	add    esp,0x10
c0013b04:	e9 eb fc ff ff       	jmp    c00137f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0013b09:	31 c0                	xor    eax,eax
c0013b0b:	eb 33                	jmp    c0013b40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0013b0d:	83 ec 0c             	sub    esp,0xc
c0013b10:	55                   	push   ebp
c0013b11:	e8 88 71 ff ff       	call   c000ac9e <File::close()>
c0013b16:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013b19:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013b1c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013b1f:	58                   	pop    eax
c0013b20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013b24:	e8 5c 3d ff ff       	call   c0007885 <free>
c0013b29:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013b2c:	e8 54 3d ff ff       	call   c0007885 <free>
c0013b31:	5a                   	pop    edx
c0013b32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b36:	e8 4a 3d ff ff       	call   c0007885 <free>
c0013b3b:	83 c4 10             	add    esp,0x10
c0013b3e:	b0 01                	mov    al,0x1
c0013b40:	81 c4 5c 03 00 00    	add    esp,0x35c
c0013b46:	5b                   	pop    ebx
c0013b47:	5e                   	pop    esi
c0013b48:	5f                   	pop    edi
c0013b49:	5d                   	pop    ebp
c0013b4a:	c3                   	ret    

c0013b4b <Thr::getDriverBaseFromAddress(unsigned long)>:
c0013b4b:	56                   	push   esi
c0013b4c:	31 d2                	xor    edx,edx
c0013b4e:	53                   	push   ebx
c0013b4f:	8b 1d a0 69 02 c0    	mov    ebx,DWORD PTR ds:0xc00269a0
c0013b55:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013b59:	39 d3                	cmp    ebx,edx
c0013b5b:	7e 1b                	jle    c0013b78 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0013b5d:	8b 04 95 c0 6b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9440]
c0013b64:	39 c8                	cmp    eax,ecx
c0013b66:	77 0d                	ja     c0013b75 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0013b68:	8b 34 95 c0 69 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd9640]
c0013b6f:	01 c6                	add    esi,eax
c0013b71:	39 ce                	cmp    esi,ecx
c0013b73:	77 05                	ja     c0013b7a <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0013b75:	42                   	inc    edx
c0013b76:	eb e1                	jmp    c0013b59 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0013b78:	31 c0                	xor    eax,eax
c0013b7a:	5b                   	pop    ebx
c0013b7b:	5e                   	pop    esi
c0013b7c:	c3                   	ret    

c0013b7d <Thr::getDriverNameFromAddress(unsigned long)>:
c0013b7d:	53                   	push   ebx
c0013b7e:	31 c0                	xor    eax,eax
c0013b80:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013b84:	8b 1d a0 69 02 c0    	mov    ebx,DWORD PTR ds:0xc00269a0
c0013b8a:	39 c3                	cmp    ebx,eax
c0013b8c:	7e 22                	jle    c0013bb0 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0013b8e:	8b 14 85 c0 6b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9440]
c0013b95:	39 ca                	cmp    edx,ecx
c0013b97:	77 14                	ja     c0013bad <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0013b99:	03 14 85 c0 69 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd9640]
c0013ba0:	39 ca                	cmp    edx,ecx
c0013ba2:	76 09                	jbe    c0013bad <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0013ba4:	8b 04 85 c0 6d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9240]
c0013bab:	eb 05                	jmp    c0013bb2 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0013bad:	40                   	inc    eax
c0013bae:	eb da                	jmp    c0013b8a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0013bb0:	31 c0                	xor    eax,eax
c0013bb2:	5b                   	pop    ebx
c0013bb3:	c3                   	ret    

c0013bb4 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0013bb4:	53                   	push   ebx
c0013bb5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0013bb9:	53                   	push   ebx
c0013bba:	e8 8c ff ff ff       	call   c0013b4b <Thr::getDriverBaseFromAddress(unsigned long)>
c0013bbf:	5a                   	pop    edx
c0013bc0:	31 d2                	xor    edx,edx
c0013bc2:	85 c0                	test   eax,eax
c0013bc4:	74 04                	je     c0013bca <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0013bc6:	89 da                	mov    edx,ebx
c0013bc8:	29 c2                	sub    edx,eax
c0013bca:	89 d0                	mov    eax,edx
c0013bcc:	5b                   	pop    ebx
c0013bcd:	c3                   	ret    

c0013bce <Thr::loadDLL(char const*, bool)>:
c0013bce:	55                   	push   ebp
c0013bcf:	57                   	push   edi
c0013bd0:	56                   	push   esi
c0013bd1:	53                   	push   ebx
c0013bd2:	81 ec 34 01 00 00    	sub    esp,0x134
c0013bd8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0013bdf:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0013be6:	56                   	push   esi
c0013be7:	68 57 02 02 c0       	push   0xc0020257
c0013bec:	e8 19 6a ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0013bf1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013bf8:	e8 78 3c ff ff       	call   c0007875 <malloc>
c0013bfd:	83 c4 0c             	add    esp,0xc
c0013c00:	89 c3                	mov    ebx,eax
c0013c02:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0013c08:	56                   	push   esi
c0013c09:	50                   	push   eax
c0013c0a:	e8 71 6f ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c0013c0f:	83 c4 10             	add    esp,0x10
c0013c12:	85 db                	test   ebx,ebx
c0013c14:	75 3c                	jne    c0013c52 <Thr::loadDLL(char const*, bool)+0x84>
c0013c16:	89 f8                	mov    eax,edi
c0013c18:	84 c0                	test   al,al
c0013c1a:	0f 84 d2 01 00 00    	je     c0013df2 <Thr::loadDLL(char const*, bool)+0x224>
c0013c20:	55                   	push   ebp
c0013c21:	55                   	push   ebp
c0013c22:	68 68 02 02 c0       	push   0xc0020268
c0013c27:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0013c2b:	55                   	push   ebp
c0013c2c:	e8 cf c9 fe ff       	call   c0000600 <strcpy>
c0013c31:	58                   	pop    eax
c0013c32:	5a                   	pop    edx
c0013c33:	56                   	push   esi
c0013c34:	55                   	push   ebp
c0013c35:	e8 86 cb fe ff       	call   c00007c0 <strcat>
c0013c3a:	59                   	pop    ecx
c0013c3b:	58                   	pop    eax
c0013c3c:	68 7b 02 02 c0       	push   0xc002027b
c0013c41:	55                   	push   ebp
c0013c42:	e8 79 cb fe ff       	call   c00007c0 <strcat>
c0013c47:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013c4a:	e8 4c c7 ff ff       	call   c001039b <KePanic(char const*)>
c0013c4f:	83 c4 10             	add    esp,0x10
c0013c52:	51                   	push   ecx
c0013c53:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0013c57:	50                   	push   eax
c0013c58:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013c5c:	50                   	push   eax
c0013c5d:	53                   	push   ebx
c0013c5e:	e8 89 72 ff ff       	call   c000aeec <File::stat(unsigned long long*, bool*)>
c0013c63:	83 c4 10             	add    esp,0x10
c0013c66:	85 db                	test   ebx,ebx
c0013c68:	74 0c                	je     c0013c76 <Thr::loadDLL(char const*, bool)+0xa8>
c0013c6a:	83 ec 0c             	sub    esp,0xc
c0013c6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c6f:	53                   	push   ebx
c0013c70:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c73:	83 c4 10             	add    esp,0x10
c0013c76:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0013c7b:	75 0a                	jne    c0013c87 <Thr::loadDLL(char const*, bool)+0xb9>
c0013c7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c81:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0013c85:	75 3c                	jne    c0013cc3 <Thr::loadDLL(char const*, bool)+0xf5>
c0013c87:	89 f8                	mov    eax,edi
c0013c89:	84 c0                	test   al,al
c0013c8b:	0f 84 49 01 00 00    	je     c0013dda <Thr::loadDLL(char const*, bool)+0x20c>
c0013c91:	51                   	push   ecx
c0013c92:	51                   	push   ecx
c0013c93:	68 68 02 02 c0       	push   0xc0020268
c0013c98:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0013c9c:	53                   	push   ebx
c0013c9d:	e8 5e c9 fe ff       	call   c0000600 <strcpy>
c0013ca2:	5d                   	pop    ebp
c0013ca3:	58                   	pop    eax
c0013ca4:	56                   	push   esi
c0013ca5:	53                   	push   ebx
c0013ca6:	e8 15 cb fe ff       	call   c00007c0 <strcat>
c0013cab:	58                   	pop    eax
c0013cac:	5a                   	pop    edx
c0013cad:	68 7b 02 02 c0       	push   0xc002027b
c0013cb2:	53                   	push   ebx
c0013cb3:	e8 08 cb fe ff       	call   c00007c0 <strcat>
c0013cb8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013cbb:	e8 db c6 ff ff       	call   c001039b <KePanic(char const*)>
c0013cc0:	83 c4 10             	add    esp,0x10
c0013cc3:	52                   	push   edx
c0013cc4:	6a 03                	push   0x3
c0013cc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cca:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013cce:	05 ff 0f 00 00       	add    eax,0xfff
c0013cd3:	83 d2 00             	adc    edx,0x0
c0013cd6:	0f ac d0 0c          	shrd   eax,edx,0xc
c0013cda:	50                   	push   eax
c0013cdb:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c0013ce1:	e8 2e 5e ff ff       	call   c0009b14 <VAS::allocatePages(int, int)>
c0013ce6:	59                   	pop    ecx
c0013ce7:	89 c3                	mov    ebx,eax
c0013ce9:	5d                   	pop    ebp
c0013cea:	50                   	push   eax
c0013ceb:	68 d2 ee 01 c0       	push   0xc001eed2
c0013cf0:	e8 15 69 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0013cf5:	89 34 24             	mov    DWORD PTR [esp],esi
c0013cf8:	e8 43 c8 fe ff       	call   c0000540 <strlen>
c0013cfd:	8b 2d a0 69 02 c0    	mov    ebp,DWORD PTR ds:0xc00269a0
c0013d03:	40                   	inc    eax
c0013d04:	89 04 24             	mov    DWORD PTR [esp],eax
c0013d07:	e8 69 3b ff ff       	call   c0007875 <malloc>
c0013d0c:	89 04 ad c0 6d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd9240],eax
c0013d13:	58                   	pop    eax
c0013d14:	a1 a0 69 02 c0       	mov    eax,ds:0xc00269a0
c0013d19:	5a                   	pop    edx
c0013d1a:	56                   	push   esi
c0013d1b:	ff 34 85 c0 6d 02 c0 	push   DWORD PTR [eax*4-0x3ffd9240]
c0013d22:	e8 d9 c8 fe ff       	call   c0000600 <strcpy>
c0013d27:	a1 a0 69 02 c0       	mov    eax,ds:0xc00269a0
c0013d2c:	8d 50 01             	lea    edx,[eax+0x1]
c0013d2f:	89 1c 85 c0 6b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9440],ebx
c0013d36:	89 15 a0 69 02 c0    	mov    DWORD PTR ds:0xc00269a0,edx
c0013d3c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013d40:	83 c4 0c             	add    esp,0xc
c0013d43:	89 14 85 c0 69 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9640],edx
c0013d4a:	6a 01                	push   0x1
c0013d4c:	53                   	push   ebx
c0013d4d:	56                   	push   esi
c0013d4e:	e8 c2 f6 ff ff       	call   c0013415 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0013d53:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013d57:	83 c4 10             	add    esp,0x10
c0013d5a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013d5f:	0f 85 89 00 00 00    	jne    c0013dee <Thr::loadDLL(char const*, bool)+0x220>
c0013d65:	89 f8                	mov    eax,edi
c0013d67:	84 c0                	test   al,al
c0013d69:	74 73                	je     c0013dde <Thr::loadDLL(char const*, bool)+0x210>
c0013d6b:	83 ec 0c             	sub    esp,0xc
c0013d6e:	68 7d 02 02 c0       	push   0xc002027d
c0013d73:	e8 23 c6 ff ff       	call   c001039b <KePanic(char const*)>
c0013d78:	83 c4 10             	add    esp,0x10
c0013d7b:	eb 61                	jmp    c0013dde <Thr::loadDLL(char const*, bool)+0x210>
c0013d7d:	50                   	push   eax
c0013d7e:	50                   	push   eax
c0013d7f:	89 e8                	mov    eax,ebp
c0013d81:	c1 e0 0c             	shl    eax,0xc
c0013d84:	01 d8                	add    eax,ebx
c0013d86:	50                   	push   eax
c0013d87:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c0013d8d:	e8 90 58 ff ff       	call   c0009622 <VAS::getPageTableEntry(unsigned long)>
c0013d92:	83 c4 10             	add    esp,0x10
c0013d95:	8b 00                	mov    eax,DWORD PTR [eax]
c0013d97:	a8 60                	test   al,0x60
c0013d99:	75 11                	jne    c0013dac <Thr::loadDLL(char const*, bool)+0x1de>
c0013d9b:	83 ec 0c             	sub    esp,0xc
c0013d9e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013da3:	50                   	push   eax
c0013da4:	e8 46 3d ff ff       	call   c0007aef <Phys::freePage(unsigned long)>
c0013da9:	83 c4 10             	add    esp,0x10
c0013dac:	45                   	inc    ebp
c0013dad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013db1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013db5:	05 ff 0f 00 00       	add    eax,0xfff
c0013dba:	bf 00 00 00 00       	mov    edi,0x0
c0013dbf:	83 d2 00             	adc    edx,0x0
c0013dc2:	0f ac d0 0c          	shrd   eax,edx,0xc
c0013dc6:	c1 ea 0c             	shr    edx,0xc
c0013dc9:	39 c5                	cmp    ebp,eax
c0013dcb:	89 d1                	mov    ecx,edx
c0013dcd:	89 f8                	mov    eax,edi
c0013dcf:	19 c8                	sbb    eax,ecx
c0013dd1:	72 aa                	jb     c0013d7d <Thr::loadDLL(char const*, bool)+0x1af>
c0013dd3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013dd8:	75 18                	jne    c0013df2 <Thr::loadDLL(char const*, bool)+0x224>
c0013dda:	31 db                	xor    ebx,ebx
c0013ddc:	eb 14                	jmp    c0013df2 <Thr::loadDLL(char const*, bool)+0x224>
c0013dde:	83 ec 0c             	sub    esp,0xc
c0013de1:	68 9c 02 02 c0       	push   0xc002029c
c0013de6:	e8 b0 c5 ff ff       	call   c001039b <KePanic(char const*)>
c0013deb:	83 c4 10             	add    esp,0x10
c0013dee:	31 ed                	xor    ebp,ebp
c0013df0:	eb bb                	jmp    c0013dad <Thr::loadDLL(char const*, bool)+0x1df>
c0013df2:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013df8:	89 d8                	mov    eax,ebx
c0013dfa:	5b                   	pop    ebx
c0013dfb:	5e                   	pop    esi
c0013dfc:	5f                   	pop    edi
c0013dfd:	5d                   	pop    ebp
c0013dfe:	c3                   	ret    

c0013dff <Thr::executeDLL(unsigned long, void*)>:
c0013dff:	56                   	push   esi
c0013e00:	53                   	push   ebx
c0013e01:	52                   	push   edx
c0013e02:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e06:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e0a:	85 db                	test   ebx,ebx
c0013e0c:	75 10                	jne    c0013e1e <Thr::executeDLL(unsigned long, void*)+0x1f>
c0013e0e:	83 ec 0c             	sub    esp,0xc
c0013e11:	68 b8 02 02 c0       	push   0xc00202b8
c0013e16:	e8 80 c5 ff ff       	call   c001039b <KePanic(char const*)>
c0013e1b:	83 c4 10             	add    esp,0x10
c0013e1e:	50                   	push   eax
c0013e1f:	50                   	push   eax
c0013e20:	53                   	push   ebx
c0013e21:	68 e2 02 02 c0       	push   0xc00202e2
c0013e26:	e8 df 67 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0013e2b:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013e2f:	89 d8                	mov    eax,ebx
c0013e31:	83 c4 14             	add    esp,0x14
c0013e34:	5b                   	pop    ebx
c0013e35:	5e                   	pop    esi
c0013e36:	ff e0                	jmp    eax

c0013e38 <userModeEntryPoint(void*)>:
c0013e38:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0013e3d:	48                   	dec    eax
c0013e3e:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0013e43:	75 03                	jne    c0013e48 <userModeEntryPoint(void*)+0x10>
c0013e45:	fb                   	sti    
c0013e46:	66 90                	xchg   ax,ax
c0013e48:	fb                   	sti    
c0013e49:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e4e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013e51:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0013e57:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013e5b:	e9 df c3 fe ff       	jmp    c000023f <goToUsermode>

c0013e60 <changeTSS>:
c0013e60:	83 ec 14             	sub    esp,0x14
c0013e63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e68:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0013e6b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0013e70:	c1 e2 15             	shl    edx,0x15
c0013e73:	29 d0                	sub    eax,edx
c0013e75:	50                   	push   eax
c0013e76:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0013e7b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013e81:	05 7c 11 00 00       	add    eax,0x117c
c0013e86:	50                   	push   eax
c0013e87:	e8 14 4e ff ff       	call   c0008ca0 <TSS::setESP(unsigned long)>
c0013e8c:	83 c4 1c             	add    esp,0x1c
c0013e8f:	c3                   	ret    

c0013e90 <switchToThread(ThreadControlBlock*)>:
c0013e90:	57                   	push   edi
c0013e91:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0013e96:	56                   	push   esi
c0013e97:	85 c0                	test   eax,eax
c0013e99:	53                   	push   ebx
c0013e9a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e9e:	0f 85 90 00 00 00    	jne    c0013f34 <switchToThread(ThreadControlBlock*)+0xa4>
c0013ea4:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0013ea7:	80 fa ff             	cmp    dl,0xff
c0013eaa:	0f 84 80 00 00 00    	je     c0013f30 <switchToThread(ThreadControlBlock*)+0xa0>
c0013eb0:	81 e2 ff 00 00 00    	and    edx,0xff
c0013eb6:	b8 00 04 00 00       	mov    eax,0x400
c0013ebb:	29 d0                	sub    eax,edx
c0013ebd:	d1 f8                	sar    eax,1
c0013ebf:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0013ec2:	66 90                	xchg   ax,ax
c0013ec4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0013ec7:	e8 58 26 00 00       	call   c0016524 <HalQueryPerformanceCounter()>
c0013ecc:	a3 a8 71 02 c0       	mov    ds:0xc00271a8,eax
c0013ed1:	89 15 ac 71 02 c0    	mov    DWORD PTR ds:0xc00271ac,edx
c0013ed7:	89 c6                	mov    esi,eax
c0013ed9:	89 d7                	mov    edi,edx
c0013edb:	2b 35 98 71 02 c0    	sub    esi,DWORD PTR ds:0xc0027198
c0013ee1:	a3 98 71 02 c0       	mov    ds:0xc0027198,eax
c0013ee6:	1b 3d 9c 71 02 c0    	sbb    edi,DWORD PTR ds:0xc002719c
c0013eec:	89 35 a0 71 02 c0    	mov    DWORD PTR ds:0xc00271a0,esi
c0013ef2:	89 3d a4 71 02 c0    	mov    DWORD PTR ds:0xc00271a4,edi
c0013ef8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013efe:	89 15 9c 71 02 c0    	mov    DWORD PTR ds:0xc002719c,edx
c0013f04:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0013f07:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0013f0a:	01 c6                	add    esi,eax
c0013f0c:	11 d7                	adc    edi,edx
c0013f0e:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0013f11:	83 ec 0c             	sub    esp,0xc
c0013f14:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0013f17:	53                   	push   ebx
c0013f18:	e8 5a c3 fe ff       	call   c0000277 <switchToThreadASM>
c0013f1d:	0f 20 c0             	mov    eax,cr0
c0013f20:	83 c8 08             	or     eax,0x8
c0013f23:	0f 22 c0             	mov    cr0,eax
c0013f26:	83 c4 10             	add    esp,0x10
c0013f29:	5b                   	pop    ebx
c0013f2a:	5e                   	pop    esi
c0013f2b:	5f                   	pop    edi
c0013f2c:	c3                   	ret    
c0013f2d:	8d 76 00             	lea    esi,[esi+0x0]
c0013f30:	31 c0                	xor    eax,eax
c0013f32:	eb 90                	jmp    c0013ec4 <switchToThread(ThreadControlBlock*)+0x34>
c0013f34:	5b                   	pop    ebx
c0013f35:	c7 05 60 71 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x1
c0013f3f:	5e                   	pop    esi
c0013f40:	5f                   	pop    edi
c0013f41:	c3                   	ret    
c0013f42:	66 90                	xchg   ax,ax

c0013f44 <Process::addArgs(char**)>:
c0013f44:	57                   	push   edi
c0013f45:	56                   	push   esi
c0013f46:	53                   	push   ebx
c0013f47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f4b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0013f4f:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0013f59:	85 ff                	test   edi,edi
c0013f5b:	74 43                	je     c0013fa0 <Process::addArgs(char**)+0x5c>
c0013f5d:	8b 07                	mov    eax,DWORD PTR [edi]
c0013f5f:	85 c0                	test   eax,eax
c0013f61:	74 3d                	je     c0013fa0 <Process::addArgs(char**)+0x5c>
c0013f63:	31 db                	xor    ebx,ebx
c0013f65:	8d 76 00             	lea    esi,[esi+0x0]
c0013f68:	83 ec 0c             	sub    esp,0xc
c0013f6b:	50                   	push   eax
c0013f6c:	e8 cf c5 fe ff       	call   c0000540 <strlen>
c0013f71:	40                   	inc    eax
c0013f72:	89 04 24             	mov    DWORD PTR [esp],eax
c0013f75:	e8 fb 38 ff ff       	call   c0007875 <malloc>
c0013f7a:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0013f81:	5a                   	pop    edx
c0013f82:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013f85:	59                   	pop    ecx
c0013f86:	43                   	inc    ebx
c0013f87:	52                   	push   edx
c0013f88:	50                   	push   eax
c0013f89:	e8 72 c6 fe ff       	call   c0000600 <strcpy>
c0013f8e:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0013f94:	83 c4 10             	add    esp,0x10
c0013f97:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0013f9a:	85 c0                	test   eax,eax
c0013f9c:	75 ca                	jne    c0013f68 <Process::addArgs(char**)+0x24>
c0013f9e:	66 90                	xchg   ax,ax
c0013fa0:	5b                   	pop    ebx
c0013fa1:	5e                   	pop    esi
c0013fa2:	5f                   	pop    edi
c0013fa3:	c3                   	ret    

c0013fa4 <Process::Process(char const*, Process*, char**)>:
c0013fa4:	56                   	push   esi
c0013fa5:	53                   	push   ebx
c0013fa6:	83 ec 14             	sub    esp,0x14
c0013fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fad:	05 0c 02 00 00       	add    eax,0x20c
c0013fb2:	bb 07 00 00 00       	mov    ebx,0x7
c0013fb7:	89 c6                	mov    esi,eax
c0013fb9:	8d 76 00             	lea    esi,[esi+0x0]
c0013fbc:	85 db                	test   ebx,ebx
c0013fbe:	78 14                	js     c0013fd4 <Process::Process(char const*, Process*, char**)+0x30>
c0013fc0:	83 ec 0c             	sub    esp,0xc
c0013fc3:	56                   	push   esi
c0013fc4:	e8 93 a1 00 00       	call   c001e15c <ThreadControlBlock::ThreadControlBlock()>
c0013fc9:	83 c4 10             	add    esp,0x10
c0013fcc:	83 c6 5f             	add    esi,0x5f
c0013fcf:	4b                   	dec    ebx
c0013fd0:	eb ea                	jmp    c0013fbc <Process::Process(char const*, Process*, char**)+0x18>
c0013fd2:	66 90                	xchg   ax,ax
c0013fd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fd8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0013fdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fe3:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0013fea:	83 ec 0c             	sub    esp,0xc
c0013fed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ff1:	e8 9a c1 ff ff       	call   c0010190 <Krnl::newProcessEnv(Process*)>
c0013ff6:	83 c4 10             	add    esp,0x10
c0013ff9:	89 c2                	mov    edx,eax
c0013ffb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fff:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014005:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014009:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014012:	a1 80 14 02 c0       	mov    eax,ds:0xc0021480
c0014017:	8d 50 01             	lea    edx,[eax+0x1]
c001401a:	89 15 80 14 02 c0    	mov    DWORD PTR ds:0xc0021480,edx
c0014020:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014024:	89 02                	mov    DWORD PTR [edx],eax
c0014026:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001402e:	83 ec 0c             	sub    esp,0xc
c0014031:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014035:	e8 3b 38 ff ff       	call   c0007875 <malloc>
c001403a:	83 c4 10             	add    esp,0x10
c001403d:	89 c3                	mov    ebx,eax
c001403f:	83 ec 08             	sub    esp,0x8
c0014042:	6a 00                	push   0x0
c0014044:	53                   	push   ebx
c0014045:	e8 74 5e ff ff       	call   c0009ebe <VAS::VAS(bool)>
c001404a:	83 c4 10             	add    esp,0x10
c001404d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014051:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014057:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001405b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014065:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014069:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001406d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014073:	e8 8e c6 ff ff       	call   c0010706 <KeInitSignals()>
c0014078:	89 c2                	mov    edx,eax
c001407a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001407e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014084:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014088:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001408e:	85 c0                	test   eax,eax
c0014090:	74 42                	je     c00140d4 <Process::Process(char const*, Process*, char**)+0x130>
c0014092:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014096:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001409c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00140a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140a6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00140ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140b0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00140b6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00140bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140c0:	05 0c 01 00 00       	add    eax,0x10c
c00140c5:	83 ec 08             	sub    esp,0x8
c00140c8:	52                   	push   edx
c00140c9:	50                   	push   eax
c00140ca:	e8 31 c5 fe ff       	call   c0000600 <strcpy>
c00140cf:	83 c4 10             	add    esp,0x10
c00140d2:	eb 64                	jmp    c0014138 <Process::Process(char const*, Process*, char**)+0x194>
c00140d4:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c00140dc:	83 ec 0c             	sub    esp,0xc
c00140df:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00140e3:	e8 8d 37 ff ff       	call   c0007875 <malloc>
c00140e8:	83 c4 10             	add    esp,0x10
c00140eb:	89 c3                	mov    ebx,eax
c00140ed:	83 ec 08             	sub    esp,0x8
c00140f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00140f4:	53                   	push   ebx
c00140f5:	e8 b6 48 ff ff       	call   c00089b0 <VgaText::VgaText(char const*)>
c00140fa:	83 c4 10             	add    esp,0x10
c00140fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014101:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014107:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001410b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014111:	83 ec 0c             	sub    esp,0xc
c0014114:	50                   	push   eax
c0014115:	e8 3c 41 ff ff       	call   c0008256 <addToTerminalCycle(VgaText*)>
c001411a:	83 c4 10             	add    esp,0x10
c001411d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014121:	05 0c 01 00 00       	add    eax,0x10c
c0014126:	83 ec 08             	sub    esp,0x8
c0014129:	68 01 03 02 c0       	push   0xc0020301
c001412e:	50                   	push   eax
c001412f:	e8 cc c4 fe ff       	call   c0000600 <strcpy>
c0014134:	83 c4 10             	add    esp,0x10
c0014137:	90                   	nop
c0014138:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001413c:	83 c0 0c             	add    eax,0xc
c001413f:	83 ec 08             	sub    esp,0x8
c0014142:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014146:	50                   	push   eax
c0014147:	e8 b4 c4 fe ff       	call   c0000600 <strcpy>
c001414c:	83 c4 10             	add    esp,0x10
c001414f:	83 ec 08             	sub    esp,0x8
c0014152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014156:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001415a:	e8 e5 fd ff ff       	call   c0013f44 <Process::addArgs(char**)>
c001415f:	83 c4 10             	add    esp,0x10
c0014162:	83 ec 08             	sub    esp,0x8
c0014165:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014169:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001416d:	e8 6d ed ff ff       	call   c0012edf <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014172:	83 c4 10             	add    esp,0x10
c0014175:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014179:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001417d:	83 f0 01             	xor    eax,0x1
c0014180:	88 c2                	mov    dl,al
c0014182:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014186:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c001418c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014190:	25 ff 00 00 00       	and    eax,0xff
c0014195:	83 ec 08             	sub    esp,0x8
c0014198:	50                   	push   eax
c0014199:	68 58 03 02 c0       	push   0xc0020358
c001419e:	e8 67 64 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c00141a3:	83 c4 10             	add    esp,0x10
c00141a6:	90                   	nop
c00141a7:	83 c4 14             	add    esp,0x14
c00141aa:	5b                   	pop    ebx
c00141ab:	5e                   	pop    esi
c00141ac:	c3                   	ret    
c00141ad:	90                   	nop
c00141ae:	66 90                	xchg   ax,ax

c00141b0 <Process::Process(bool, char const*, Process*, char**)>:
c00141b0:	56                   	push   esi
c00141b1:	53                   	push   ebx
c00141b2:	83 ec 24             	sub    esp,0x24
c00141b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00141b9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00141bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00141c1:	05 0c 02 00 00       	add    eax,0x20c
c00141c6:	bb 07 00 00 00       	mov    ebx,0x7
c00141cb:	89 c6                	mov    esi,eax
c00141cd:	8d 76 00             	lea    esi,[esi+0x0]
c00141d0:	85 db                	test   ebx,ebx
c00141d2:	78 14                	js     c00141e8 <Process::Process(bool, char const*, Process*, char**)+0x38>
c00141d4:	83 ec 0c             	sub    esp,0xc
c00141d7:	56                   	push   esi
c00141d8:	e8 7f 9f 00 00       	call   c001e15c <ThreadControlBlock::ThreadControlBlock()>
c00141dd:	83 c4 10             	add    esp,0x10
c00141e0:	83 c6 5f             	add    esi,0x5f
c00141e3:	4b                   	dec    ebx
c00141e4:	eb ea                	jmp    c00141d0 <Process::Process(bool, char const*, Process*, char**)+0x20>
c00141e6:	66 90                	xchg   ax,ax
c00141e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00141ec:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00141f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00141f7:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00141fe:	83 ec 0c             	sub    esp,0xc
c0014201:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014205:	e8 86 bf ff ff       	call   c0010190 <Krnl::newProcessEnv(Process*)>
c001420a:	83 c4 10             	add    esp,0x10
c001420d:	89 c2                	mov    edx,eax
c001420f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014213:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014219:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001421d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014226:	a1 80 14 02 c0       	mov    eax,ds:0xc0021480
c001422b:	8d 50 01             	lea    edx,[eax+0x1]
c001422e:	89 15 80 14 02 c0    	mov    DWORD PTR ds:0xc0021480,edx
c0014234:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014238:	89 02                	mov    DWORD PTR [edx],eax
c001423a:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0014242:	83 ec 0c             	sub    esp,0xc
c0014245:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014249:	e8 27 36 ff ff       	call   c0007875 <malloc>
c001424e:	83 c4 10             	add    esp,0x10
c0014251:	89 c3                	mov    ebx,eax
c0014253:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0014257:	25 ff 00 00 00       	and    eax,0xff
c001425c:	83 ec 08             	sub    esp,0x8
c001425f:	50                   	push   eax
c0014260:	53                   	push   ebx
c0014261:	e8 58 5c ff ff       	call   c0009ebe <VAS::VAS(bool)>
c0014266:	83 c4 10             	add    esp,0x10
c0014269:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001426d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014273:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014277:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014281:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014285:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014289:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001428f:	e8 72 c4 ff ff       	call   c0010706 <KeInitSignals()>
c0014294:	89 c2                	mov    edx,eax
c0014296:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001429a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00142a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00142a4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00142aa:	85 c0                	test   eax,eax
c00142ac:	74 42                	je     c00142f0 <Process::Process(bool, char const*, Process*, char**)+0x140>
c00142ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00142b2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00142b8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00142be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00142c2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00142c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00142cc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00142d2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00142d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00142dc:	05 0c 01 00 00       	add    eax,0x10c
c00142e1:	83 ec 08             	sub    esp,0x8
c00142e4:	52                   	push   edx
c00142e5:	50                   	push   eax
c00142e6:	e8 15 c3 fe ff       	call   c0000600 <strcpy>
c00142eb:	83 c4 10             	add    esp,0x10
c00142ee:	eb 64                	jmp    c0014354 <Process::Process(bool, char const*, Process*, char**)+0x1a4>
c00142f0:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c00142f8:	83 ec 0c             	sub    esp,0xc
c00142fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00142ff:	e8 71 35 ff ff       	call   c0007875 <malloc>
c0014304:	83 c4 10             	add    esp,0x10
c0014307:	89 c3                	mov    ebx,eax
c0014309:	83 ec 08             	sub    esp,0x8
c001430c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014310:	53                   	push   ebx
c0014311:	e8 9a 46 ff ff       	call   c00089b0 <VgaText::VgaText(char const*)>
c0014316:	83 c4 10             	add    esp,0x10
c0014319:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001431d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014323:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014327:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001432d:	83 ec 0c             	sub    esp,0xc
c0014330:	50                   	push   eax
c0014331:	e8 20 3f ff ff       	call   c0008256 <addToTerminalCycle(VgaText*)>
c0014336:	83 c4 10             	add    esp,0x10
c0014339:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001433d:	05 0c 01 00 00       	add    eax,0x10c
c0014342:	83 ec 08             	sub    esp,0x8
c0014345:	68 01 03 02 c0       	push   0xc0020301
c001434a:	50                   	push   eax
c001434b:	e8 b0 c2 fe ff       	call   c0000600 <strcpy>
c0014350:	83 c4 10             	add    esp,0x10
c0014353:	90                   	nop
c0014354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014358:	83 c0 0c             	add    eax,0xc
c001435b:	83 ec 08             	sub    esp,0x8
c001435e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014362:	50                   	push   eax
c0014363:	e8 98 c2 fe ff       	call   c0000600 <strcpy>
c0014368:	83 c4 10             	add    esp,0x10
c001436b:	83 ec 08             	sub    esp,0x8
c001436e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014372:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014376:	e8 c9 fb ff ff       	call   c0013f44 <Process::addArgs(char**)>
c001437b:	83 c4 10             	add    esp,0x10
c001437e:	90                   	nop
c001437f:	83 c4 24             	add    esp,0x24
c0014382:	5b                   	pop    ebx
c0014383:	5e                   	pop    esi
c0014384:	c3                   	ret    
c0014385:	8d 76 00             	lea    esi,[esi+0x0]

c0014388 <taskStartupFunction>:
c0014388:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001438d:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0014390:	c3                   	ret    
c0014391:	90                   	nop
c0014392:	66 90                	xchg   ax,ax

c0014394 <Semaphore::Semaphore(int)>:
c0014394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014398:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001439c:	89 10                	mov    DWORD PTR [eax],edx
c001439e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00143a2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00143a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00143ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00143b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00143b8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00143bf:	90                   	nop
c00143c0:	c3                   	ret    
c00143c1:	90                   	nop
c00143c2:	66 90                	xchg   ax,ax

c00143c4 <Mutex::Mutex()>:
c00143c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00143c8:	6a 01                	push   0x1
c00143ca:	50                   	push   eax
c00143cb:	e8 c4 ff ff ff       	call   c0014394 <Semaphore::Semaphore(int)>
c00143d0:	83 c4 08             	add    esp,0x8
c00143d3:	90                   	nop
c00143d4:	c3                   	ret    
c00143d5:	90                   	nop
c00143d6:	66 90                	xchg   ax,ax

c00143d8 <Process::createThread(void (*)(void*), void*, int)>:
c00143d8:	57                   	push   edi
c00143d9:	31 c9                	xor    ecx,ecx
c00143db:	56                   	push   esi
c00143dc:	53                   	push   ebx
c00143dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00143e1:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00143e8:	89 f2                	mov    edx,esi
c00143ea:	66 90                	xchg   ax,ax
c00143ec:	31 c0                	xor    eax,eax
c00143ee:	66 89 d0             	mov    ax,dx
c00143f1:	83 e2 01             	and    edx,0x1
c00143f4:	74 12                	je     c0014408 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00143f6:	d1 f8                	sar    eax,1
c00143f8:	41                   	inc    ecx
c00143f9:	89 c2                	mov    edx,eax
c00143fb:	83 f9 10             	cmp    ecx,0x10
c00143fe:	75 ec                	jne    c00143ec <Process::createThread(void (*)(void*), void*, int)+0x14>
c0014400:	31 db                	xor    ebx,ebx
c0014402:	89 d8                	mov    eax,ebx
c0014404:	5b                   	pop    ebx
c0014405:	5e                   	pop    esi
c0014406:	5f                   	pop    edi
c0014407:	c3                   	ret    
c0014408:	b8 01 00 00 00       	mov    eax,0x1
c001440d:	d3 e0                	shl    eax,cl
c001440f:	09 c6                	or     esi,eax
c0014411:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0014414:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001441b:	01 c0                	add    eax,eax
c001441d:	01 c8                	add    eax,ecx
c001441f:	8d 04 80             	lea    eax,[eax+eax*4]
c0014422:	01 d8                	add    eax,ebx
c0014424:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001442b:	75 0b                	jne    c0014438 <Process::createThread(void (*)(void*), void*, int)+0x60>
c001442d:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0014437:	90                   	nop
c0014438:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001443e:	83 ec 08             	sub    esp,0x8
c0014441:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014444:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0014447:	01 c0                	add    eax,eax
c0014449:	01 c8                	add    eax,ecx
c001444b:	8d 3c 80             	lea    edi,[eax+eax*4]
c001444e:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0014451:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0014457:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c001445d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014461:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0014467:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c001446d:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0014474:	89 ca                	mov    edx,ecx
c0014476:	f7 da                	neg    edx
c0014478:	c1 e2 15             	shl    edx,0x15
c001447b:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0014481:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0014487:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001448b:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0014495:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c001449b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001449f:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00144a5:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00144af:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00144b9:	53                   	push   ebx
c00144ba:	68 84 71 02 c0       	push   0xc0027184
c00144bf:	e8 38 9a 00 00       	call   c001defc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00144c4:	83 c4 10             	add    esp,0x10
c00144c7:	89 d8                	mov    eax,ebx
c00144c9:	5b                   	pop    ebx
c00144ca:	5e                   	pop    esi
c00144cb:	5f                   	pop    edi
c00144cc:	c3                   	ret    
c00144cd:	90                   	nop
c00144ce:	66 90                	xchg   ax,ax

c00144d0 <Process::createUserThread()>:
c00144d0:	83 ec 0c             	sub    esp,0xc
c00144d3:	68 80 00 00 00       	push   0x80
c00144d8:	6a 00                	push   0x0
c00144da:	68 38 3e 01 c0       	push   0xc0013e38
c00144df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00144e3:	50                   	push   eax
c00144e4:	e8 ef fe ff ff       	call   c00143d8 <Process::createThread(void (*)(void*), void*, int)>
c00144e9:	83 c4 1c             	add    esp,0x1c
c00144ec:	c3                   	ret    
c00144ed:	8d 76 00             	lea    esi,[esi+0x0]

c00144f0 <setupMultitasking(void (*)())>:
c00144f0:	56                   	push   esi
c00144f1:	53                   	push   ebx
c00144f2:	53                   	push   ebx
c00144f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00144f7:	eb 13                	jmp    c001450c <setupMultitasking(void (*)())+0x1c>
c00144f9:	8d 76 00             	lea    esi,[esi+0x0]
c00144fc:	83 ec 0c             	sub    esp,0xc
c00144ff:	68 84 71 02 c0       	push   0xc0027184
c0014504:	e8 3b 99 00 00       	call   c001de44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014509:	83 c4 10             	add    esp,0x10
c001450c:	83 ec 0c             	sub    esp,0xc
c001450f:	68 84 71 02 c0       	push   0xc0027184
c0014514:	e8 07 99 00 00       	call   c001de20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014519:	83 c4 10             	add    esp,0x10
c001451c:	84 c0                	test   al,al
c001451e:	74 dc                	je     c00144fc <setupMultitasking(void (*)())+0xc>
c0014520:	83 ec 0c             	sub    esp,0xc
c0014523:	68 24 07 00 00       	push   0x724
c0014528:	e8 48 33 ff ff       	call   c0007875 <malloc>
c001452d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014534:	89 c3                	mov    ebx,eax
c0014536:	6a 00                	push   0x0
c0014538:	68 05 03 02 c0       	push   0xc0020305
c001453d:	6a 01                	push   0x1
c001453f:	50                   	push   eax
c0014540:	e8 6b fc ff ff       	call   c00141b0 <Process::Process(bool, char const*, Process*, char**)>
c0014545:	83 c4 14             	add    esp,0x14
c0014548:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001454e:	89 1d 90 71 02 c0    	mov    DWORD PTR ds:0xc0027190,ebx
c0014554:	50                   	push   eax
c0014555:	e8 53 3f ff ff       	call   c00084ad <setActiveTerminal(VgaText*)>
c001455a:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0014562:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c001456c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014572:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014575:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c001457f:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0014585:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001458b:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0014595:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c001459f:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00145a9:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00145af:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00145b5:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00145bf:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00145c5:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00145cf:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00145d5:	5a                   	pop    edx
c00145d6:	59                   	pop    ecx
c00145d7:	68 01 03 02 c0       	push   0xc0020301
c00145dc:	50                   	push   eax
c00145dd:	e8 1e c0 fe ff       	call   c0000600 <strcpy>
c00145e2:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00145e9:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00145ed:	83 c4 14             	add    esp,0x14
c00145f0:	5b                   	pop    ebx
c00145f1:	5e                   	pop    esi
c00145f2:	e9 72 bc fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00145f7:	90                   	nop

c00145f8 <schedule()>:
c00145f8:	8b 15 64 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027164
c00145fe:	85 d2                	test   edx,edx
c0014600:	74 0e                	je     c0014610 <schedule()+0x18>
c0014602:	c7 05 60 71 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x1
c001460c:	c3                   	ret    
c001460d:	8d 76 00             	lea    esi,[esi+0x0]
c0014610:	53                   	push   ebx
c0014611:	83 ec 14             	sub    esp,0x14
c0014614:	68 84 71 02 c0       	push   0xc0027184
c0014619:	e8 02 98 00 00       	call   c001de20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001461e:	83 c4 10             	add    esp,0x10
c0014621:	84 c0                	test   al,al
c0014623:	75 3b                	jne    c0014660 <schedule()+0x68>
c0014625:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001462a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001462d:	4a                   	dec    edx
c001462e:	74 38                	je     c0014668 <schedule()+0x70>
c0014630:	83 ec 0c             	sub    esp,0xc
c0014633:	68 84 71 02 c0       	push   0xc0027184
c0014638:	e8 ff 97 00 00       	call   c001de3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001463d:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0014644:	89 c3                	mov    ebx,eax
c0014646:	e8 f9 97 00 00       	call   c001de44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001464b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0014652:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014655:	e8 36 f8 ff ff       	call   c0013e90 <switchToThread(ThreadControlBlock*)>
c001465a:	83 c4 10             	add    esp,0x10
c001465d:	8d 76 00             	lea    esi,[esi+0x0]
c0014660:	83 c4 08             	add    esp,0x8
c0014663:	5b                   	pop    ebx
c0014664:	c3                   	ret    
c0014665:	8d 76 00             	lea    esi,[esi+0x0]
c0014668:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001466f:	83 ec 08             	sub    esp,0x8
c0014672:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014677:	50                   	push   eax
c0014678:	68 84 71 02 c0       	push   0xc0027184
c001467d:	e8 7a 98 00 00       	call   c001defc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014682:	83 c4 10             	add    esp,0x10
c0014685:	eb a9                	jmp    c0014630 <schedule()+0x38>
c0014687:	90                   	nop

c0014688 <Semaphore::tryAcquire()>:
c0014688:	53                   	push   ebx
c0014689:	83 ec 08             	sub    esp,0x8
c001468c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014690:	fa                   	cli    
c0014691:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014696:	8d 50 01             	lea    edx,[eax+0x1]
c0014699:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c001469f:	8b 15 64 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027164
c00146a5:	8d 5a 01             	lea    ebx,[edx+0x1]
c00146a8:	89 1d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ebx
c00146ae:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00146b1:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00146b3:	7c 33                	jl     c00146e8 <Semaphore::tryAcquire()+0x60>
c00146b5:	89 15 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,edx
c00146bb:	85 d2                	test   edx,edx
c00146bd:	75 0d                	jne    c00146cc <Semaphore::tryAcquire()+0x44>
c00146bf:	8b 15 60 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027160
c00146c5:	85 d2                	test   edx,edx
c00146c7:	75 6b                	jne    c0014734 <Semaphore::tryAcquire()+0xac>
c00146c9:	8d 76 00             	lea    esi,[esi+0x0]
c00146cc:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00146d1:	85 c0                	test   eax,eax
c00146d3:	74 0b                	je     c00146e0 <Semaphore::tryAcquire()+0x58>
c00146d5:	8d 76 00             	lea    esi,[esi+0x0]
c00146d8:	31 c0                	xor    eax,eax
c00146da:	83 c4 08             	add    esp,0x8
c00146dd:	5b                   	pop    ebx
c00146de:	c3                   	ret    
c00146df:	90                   	nop
c00146e0:	fb                   	sti    
c00146e1:	83 c4 08             	add    esp,0x8
c00146e4:	5b                   	pop    ebx
c00146e5:	c3                   	ret    
c00146e6:	66 90                	xchg   ax,ax
c00146e8:	43                   	inc    ebx
c00146e9:	89 15 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,edx
c00146ef:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00146f2:	85 d2                	test   edx,edx
c00146f4:	75 22                	jne    c0014718 <Semaphore::tryAcquire()+0x90>
c00146f6:	8b 0d 60 71 02 c0    	mov    ecx,DWORD PTR ds:0xc0027160
c00146fc:	85 c9                	test   ecx,ecx
c00146fe:	74 18                	je     c0014718 <Semaphore::tryAcquire()+0x90>
c0014700:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c001470a:	e8 e9 fe ff ff       	call   c00145f8 <schedule()>
c001470f:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014714:	48                   	dec    eax
c0014715:	8d 76 00             	lea    esi,[esi+0x0]
c0014718:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001471d:	85 c0                	test   eax,eax
c001471f:	75 0b                	jne    c001472c <Semaphore::tryAcquire()+0xa4>
c0014721:	fb                   	sti    
c0014722:	b0 01                	mov    al,0x1
c0014724:	83 c4 08             	add    esp,0x8
c0014727:	5b                   	pop    ebx
c0014728:	c3                   	ret    
c0014729:	8d 76 00             	lea    esi,[esi+0x0]
c001472c:	b0 01                	mov    al,0x1
c001472e:	83 c4 08             	add    esp,0x8
c0014731:	5b                   	pop    ebx
c0014732:	c3                   	ret    
c0014733:	90                   	nop
c0014734:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c001473e:	e8 b5 fe ff ff       	call   c00145f8 <schedule()>
c0014743:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014748:	48                   	dec    eax
c0014749:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001474e:	85 c0                	test   eax,eax
c0014750:	75 86                	jne    c00146d8 <Semaphore::tryAcquire()+0x50>
c0014752:	eb 8c                	jmp    c00146e0 <Semaphore::tryAcquire()+0x58>

c0014754 <Semaphore::assertLocked(char const*)>:
c0014754:	83 ec 0c             	sub    esp,0xc
c0014757:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001475b:	fa                   	cli    
c001475c:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014762:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014767:	8d 48 01             	lea    ecx,[eax+0x1]
c001476a:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c0014770:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014772:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0014775:	7c 29                	jl     c00147a0 <Semaphore::assertLocked(char const*)+0x4c>
c0014777:	90                   	nop
c0014778:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c001477d:	85 c0                	test   eax,eax
c001477f:	75 0b                	jne    c001478c <Semaphore::assertLocked(char const*)+0x38>
c0014781:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0014786:	85 c0                	test   eax,eax
c0014788:	75 2e                	jne    c00147b8 <Semaphore::assertLocked(char const*)+0x64>
c001478a:	66 90                	xchg   ax,ax
c001478c:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014791:	48                   	dec    eax
c0014792:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014797:	75 03                	jne    c001479c <Semaphore::assertLocked(char const*)+0x48>
c0014799:	fb                   	sti    
c001479a:	66 90                	xchg   ax,ax
c001479c:	83 c4 0c             	add    esp,0xc
c001479f:	c3                   	ret    
c00147a0:	83 ec 0c             	sub    esp,0xc
c00147a3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00147a7:	52                   	push   edx
c00147a8:	e8 ee bb ff ff       	call   c001039b <KePanic(char const*)>
c00147ad:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c00147b2:	83 c4 10             	add    esp,0x10
c00147b5:	48                   	dec    eax
c00147b6:	eb c0                	jmp    c0014778 <Semaphore::assertLocked(char const*)+0x24>
c00147b8:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c00147c2:	e8 31 fe ff ff       	call   c00145f8 <schedule()>
c00147c7:	eb c3                	jmp    c001478c <Semaphore::assertLocked(char const*)+0x38>
c00147c9:	8d 76 00             	lea    esi,[esi+0x0]

c00147cc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00147cc:	83 ec 0c             	sub    esp,0xc
c00147cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00147d8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00147db:	e8 18 fe ff ff       	call   c00145f8 <schedule()>
c00147e0:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00147e5:	48                   	dec    eax
c00147e6:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00147eb:	75 03                	jne    c00147f0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00147ed:	fb                   	sti    
c00147ee:	66 90                	xchg   ax,ax
c00147f0:	83 c4 0c             	add    esp,0xc
c00147f3:	c3                   	ret    

c00147f4 <blockTask(TaskState)>:
c00147f4:	83 ec 0c             	sub    esp,0xc
c00147f7:	fa                   	cli    
c00147f8:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00147fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014802:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014807:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001480a:	e8 e9 fd ff ff       	call   c00145f8 <schedule()>
c001480f:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014814:	48                   	dec    eax
c0014815:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001481a:	75 04                	jne    c0014820 <blockTask(TaskState)+0x2c>
c001481c:	fb                   	sti    
c001481d:	8d 76 00             	lea    esi,[esi+0x0]
c0014820:	83 c4 0c             	add    esp,0xc
c0014823:	c3                   	ret    

c0014824 <waitTask(int, int*, int)>:
c0014824:	83 ec 18             	sub    esp,0x18
c0014827:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001482c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014830:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0014833:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014837:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001483c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001483f:	6a 07                	push   0x7
c0014841:	e8 ae ff ff ff       	call   c00147f4 <blockTask(TaskState)>
c0014846:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001484b:	83 c4 10             	add    esp,0x10
c001484e:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0014851:	85 d2                	test   edx,edx
c0014853:	74 0b                	je     c0014860 <waitTask(int, int*, int)+0x3c>
c0014855:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0014858:	89 02                	mov    DWORD PTR [edx],eax
c001485a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001485f:	90                   	nop
c0014860:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0014863:	83 c4 0c             	add    esp,0xc
c0014866:	c3                   	ret    
c0014867:	90                   	nop

c0014868 <milliTenthSleepUntil(unsigned int)>:
c0014868:	83 ec 0c             	sub    esp,0xc
c001486b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001486f:	39 05 8c 64 02 c0    	cmp    DWORD PTR ds:0xc002648c,eax
c0014875:	76 05                	jbe    c001487c <milliTenthSleepUntil(unsigned int)+0x14>
c0014877:	90                   	nop
c0014878:	83 c4 0c             	add    esp,0xc
c001487b:	c3                   	ret    
c001487c:	fa                   	cli    
c001487d:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014883:	83 ec 08             	sub    esp,0x8
c0014886:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c001488c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014892:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0014895:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001489b:	52                   	push   edx
c001489c:	68 78 71 02 c0       	push   0xc0027178
c00148a1:	e8 56 96 00 00       	call   c001defc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00148a6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00148ad:	e8 42 ff ff ff       	call   c00147f4 <blockTask(TaskState)>
c00148b2:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c00148b7:	83 c4 10             	add    esp,0x10
c00148ba:	48                   	dec    eax
c00148bb:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c00148c0:	85 c0                	test   eax,eax
c00148c2:	75 0c                	jne    c00148d0 <milliTenthSleepUntil(unsigned int)+0x68>
c00148c4:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c00148c9:	85 c0                	test   eax,eax
c00148cb:	75 17                	jne    c00148e4 <milliTenthSleepUntil(unsigned int)+0x7c>
c00148cd:	8d 76 00             	lea    esi,[esi+0x0]
c00148d0:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00148d5:	48                   	dec    eax
c00148d6:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00148db:	75 9b                	jne    c0014878 <milliTenthSleepUntil(unsigned int)+0x10>
c00148dd:	fb                   	sti    
c00148de:	83 c4 0c             	add    esp,0xc
c00148e1:	c3                   	ret    
c00148e2:	66 90                	xchg   ax,ax
c00148e4:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c00148ee:	e8 05 fd ff ff       	call   c00145f8 <schedule()>
c00148f3:	eb db                	jmp    c00148d0 <milliTenthSleepUntil(unsigned int)+0x68>
c00148f5:	8d 76 00             	lea    esi,[esi+0x0]

c00148f8 <milliTenthSleep(unsigned int)>:
c00148f8:	a1 8c 64 02 c0       	mov    eax,ds:0xc002648c
c00148fd:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0014901:	e9 62 ff ff ff       	jmp    c0014868 <milliTenthSleepUntil(unsigned int)>
c0014906:	66 90                	xchg   ax,ax

c0014908 <sleep(unsigned int)>:
c0014908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001490c:	8d 04 80             	lea    eax,[eax+eax*4]
c001490f:	8d 04 80             	lea    eax,[eax+eax*4]
c0014912:	8d 04 80             	lea    eax,[eax+eax*4]
c0014915:	8d 04 80             	lea    eax,[eax+eax*4]
c0014918:	c1 e0 04             	shl    eax,0x4
c001491b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001491f:	eb d7                	jmp    c00148f8 <milliTenthSleep(unsigned int)>
c0014921:	90                   	nop
c0014922:	66 90                	xchg   ax,ax

c0014924 <Semaphore::acquire()>:
c0014924:	83 ec 0c             	sub    esp,0xc
c0014927:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001492b:	fa                   	cli    
c001492c:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014931:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014937:	8d 48 01             	lea    ecx,[eax+0x1]
c001493a:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c0014940:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0014943:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0014945:	7d 2d                	jge    c0014974 <Semaphore::acquire()+0x50>
c0014947:	41                   	inc    ecx
c0014948:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001494b:	90                   	nop
c001494c:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014951:	85 c0                	test   eax,eax
c0014953:	75 0b                	jne    c0014960 <Semaphore::acquire()+0x3c>
c0014955:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c001495a:	85 c0                	test   eax,eax
c001495c:	75 62                	jne    c00149c0 <Semaphore::acquire()+0x9c>
c001495e:	66 90                	xchg   ax,ax
c0014960:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014965:	48                   	dec    eax
c0014966:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001496b:	75 03                	jne    c0014970 <Semaphore::acquire()+0x4c>
c001496d:	fb                   	sti    
c001496e:	66 90                	xchg   ax,ax
c0014970:	83 c4 0c             	add    esp,0xc
c0014973:	c3                   	ret    
c0014974:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014979:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0014980:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0014983:	85 c9                	test   ecx,ecx
c0014985:	74 4d                	je     c00149d4 <Semaphore::acquire()+0xb0>
c0014987:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001498a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014990:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0014993:	90                   	nop
c0014994:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014999:	83 ec 0c             	sub    esp,0xc
c001499c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001499f:	68 80 03 02 c0       	push   0xc0020380
c00149a4:	e8 61 5c ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c00149a9:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00149b0:	e8 3f fe ff ff       	call   c00147f4 <blockTask(TaskState)>
c00149b5:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c00149ba:	83 c4 10             	add    esp,0x10
c00149bd:	48                   	dec    eax
c00149be:	eb 8c                	jmp    c001494c <Semaphore::acquire()+0x28>
c00149c0:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c00149ca:	e8 29 fc ff ff       	call   c00145f8 <schedule()>
c00149cf:	eb 8f                	jmp    c0014960 <Semaphore::acquire()+0x3c>
c00149d1:	8d 76 00             	lea    esi,[esi+0x0]
c00149d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149d9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00149dc:	eb b6                	jmp    c0014994 <Semaphore::acquire()+0x70>
c00149de:	66 90                	xchg   ax,ax

c00149e0 <taskReturned>:
c00149e0:	83 ec 18             	sub    esp,0x18
c00149e3:	68 a0 03 02 c0       	push   0xc00203a0
c00149e8:	e8 ae b9 ff ff       	call   c001039b <KePanic(char const*)>
c00149ed:	83 c4 10             	add    esp,0x10
c00149f0:	83 ec 0c             	sub    esp,0xc
c00149f3:	6a 02                	push   0x2
c00149f5:	e8 fa fd ff ff       	call   c00147f4 <blockTask(TaskState)>
c00149fa:	fa                   	cli    
c00149fb:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014a01:	e8 f2 fb ff ff       	call   c00145f8 <schedule()>
c0014a06:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014a0b:	83 c4 10             	add    esp,0x10
c0014a0e:	48                   	dec    eax
c0014a0f:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014a14:	85 c0                	test   eax,eax
c0014a16:	75 d8                	jne    c00149f0 <taskReturned+0x10>
c0014a18:	fb                   	sti    
c0014a19:	eb d5                	jmp    c00149f0 <taskReturned+0x10>
c0014a1b:	90                   	nop

c0014a1c <Thr::processFromPID(int)>:
c0014a1c:	57                   	push   edi
c0014a1d:	56                   	push   esi
c0014a1e:	53                   	push   ebx
c0014a1f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a23:	fa                   	cli    
c0014a24:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014a2a:	83 ec 0c             	sub    esp,0xc
c0014a2d:	68 84 71 02 c0       	push   0xc0027184
c0014a32:	e8 05 94 00 00       	call   c001de3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014a37:	83 c4 10             	add    esp,0x10
c0014a3a:	89 c7                	mov    edi,eax
c0014a3c:	eb 16                	jmp    c0014a54 <Thr::processFromPID(int)+0x38>
c0014a3e:	66 90                	xchg   ax,ax
c0014a40:	83 ec 0c             	sub    esp,0xc
c0014a43:	68 84 71 02 c0       	push   0xc0027184
c0014a48:	e8 ef 93 00 00       	call   c001de3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014a4d:	83 c4 10             	add    esp,0x10
c0014a50:	39 f8                	cmp    eax,edi
c0014a52:	74 4c                	je     c0014aa0 <Thr::processFromPID(int)+0x84>
c0014a54:	83 ec 0c             	sub    esp,0xc
c0014a57:	68 84 71 02 c0       	push   0xc0027184
c0014a5c:	e8 db 93 00 00       	call   c001de3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014a61:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0014a68:	89 c3                	mov    ebx,eax
c0014a6a:	e8 d5 93 00 00       	call   c001de44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014a6f:	58                   	pop    eax
c0014a70:	5a                   	pop    edx
c0014a71:	53                   	push   ebx
c0014a72:	68 84 71 02 c0       	push   0xc0027184
c0014a77:	e8 80 94 00 00       	call   c001defc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014a7c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014a7f:	83 c4 10             	add    esp,0x10
c0014a82:	39 30                	cmp    DWORD PTR [eax],esi
c0014a84:	75 ba                	jne    c0014a40 <Thr::processFromPID(int)+0x24>
c0014a86:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014a8b:	48                   	dec    eax
c0014a8c:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014a91:	74 09                	je     c0014a9c <Thr::processFromPID(int)+0x80>
c0014a93:	90                   	nop
c0014a94:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014a97:	5b                   	pop    ebx
c0014a98:	5e                   	pop    esi
c0014a99:	5f                   	pop    edi
c0014a9a:	c3                   	ret    
c0014a9b:	90                   	nop
c0014a9c:	fb                   	sti    
c0014a9d:	eb f5                	jmp    c0014a94 <Thr::processFromPID(int)+0x78>
c0014a9f:	90                   	nop
c0014aa0:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014aa5:	48                   	dec    eax
c0014aa6:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014aab:	75 07                	jne    c0014ab4 <Thr::processFromPID(int)+0x98>
c0014aad:	fb                   	sti    
c0014aae:	5b                   	pop    ebx
c0014aaf:	5e                   	pop    esi
c0014ab0:	5f                   	pop    edi
c0014ab1:	c3                   	ret    
c0014ab2:	66 90                	xchg   ax,ax
c0014ab4:	5b                   	pop    ebx
c0014ab5:	31 c0                	xor    eax,eax
c0014ab7:	5e                   	pop    esi
c0014ab8:	5f                   	pop    edi
c0014ab9:	c3                   	ret    
c0014aba:	66 90                	xchg   ax,ax

c0014abc <unblockTask(ThreadControlBlock*)>:
c0014abc:	53                   	push   ebx
c0014abd:	83 ec 08             	sub    esp,0x8
c0014ac0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014ac4:	fa                   	cli    
c0014ac5:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014acb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014ace:	85 c0                	test   eax,eax
c0014ad0:	74 66                	je     c0014b38 <unblockTask(ThreadControlBlock*)+0x7c>
c0014ad2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014ad5:	48                   	dec    eax
c0014ad6:	74 38                	je     c0014b10 <unblockTask(ThreadControlBlock*)+0x54>
c0014ad8:	83 ec 0c             	sub    esp,0xc
c0014adb:	68 84 71 02 c0       	push   0xc0027184
c0014ae0:	e8 57 93 00 00       	call   c001de3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014ae5:	83 c4 10             	add    esp,0x10
c0014ae8:	85 c0                	test   eax,eax
c0014aea:	75 1c                	jne    c0014b08 <unblockTask(ThreadControlBlock*)+0x4c>
c0014aec:	eb 5e                	jmp    c0014b4c <unblockTask(ThreadControlBlock*)+0x90>
c0014aee:	66 90                	xchg   ax,ax
c0014af0:	83 ec 08             	sub    esp,0x8
c0014af3:	50                   	push   eax
c0014af4:	68 84 71 02 c0       	push   0xc0027184
c0014af9:	e8 ee 96 00 00       	call   c001e1ec <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014afe:	83 c4 10             	add    esp,0x10
c0014b01:	85 c0                	test   eax,eax
c0014b03:	74 47                	je     c0014b4c <unblockTask(ThreadControlBlock*)+0x90>
c0014b05:	8d 76 00             	lea    esi,[esi+0x0]
c0014b08:	39 c3                	cmp    ebx,eax
c0014b0a:	75 e4                	jne    c0014af0 <unblockTask(ThreadControlBlock*)+0x34>
c0014b0c:	eb 12                	jmp    c0014b20 <unblockTask(ThreadControlBlock*)+0x64>
c0014b0e:	66 90                	xchg   ax,ax
c0014b10:	83 ec 0c             	sub    esp,0xc
c0014b13:	68 23 03 02 c0       	push   0xc0020323
c0014b18:	e8 ed 5a ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0014b1d:	83 c4 10             	add    esp,0x10
c0014b20:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014b25:	48                   	dec    eax
c0014b26:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014b2b:	75 03                	jne    c0014b30 <unblockTask(ThreadControlBlock*)+0x74>
c0014b2d:	fb                   	sti    
c0014b2e:	66 90                	xchg   ax,ax
c0014b30:	83 c4 08             	add    esp,0x8
c0014b33:	5b                   	pop    ebx
c0014b34:	c3                   	ret    
c0014b35:	8d 76 00             	lea    esi,[esi+0x0]
c0014b38:	83 ec 0c             	sub    esp,0xc
c0014b3b:	68 0c 03 02 c0       	push   0xc002030c
c0014b40:	e8 c5 5a ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0014b45:	83 c4 10             	add    esp,0x10
c0014b48:	eb d6                	jmp    c0014b20 <unblockTask(ThreadControlBlock*)+0x64>
c0014b4a:	66 90                	xchg   ax,ax
c0014b4c:	83 ec 08             	sub    esp,0x8
c0014b4f:	53                   	push   ebx
c0014b50:	68 84 71 02 c0       	push   0xc0027184
c0014b55:	e8 a2 93 00 00       	call   c001defc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014b5a:	83 c4 10             	add    esp,0x10
c0014b5d:	eb c1                	jmp    c0014b20 <unblockTask(ThreadControlBlock*)+0x64>
c0014b5f:	90                   	nop

c0014b60 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0014b60:	55                   	push   ebp
c0014b61:	57                   	push   edi
c0014b62:	56                   	push   esi
c0014b63:	53                   	push   ebx
c0014b64:	83 ec 1c             	sub    esp,0x1c
c0014b67:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014b6b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014b6e:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0014b74:	85 ed                	test   ebp,ebp
c0014b76:	7e 24                	jle    c0014b9c <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0014b78:	31 f6                	xor    esi,esi
c0014b7a:	66 90                	xchg   ax,ax
c0014b7c:	83 ec 0c             	sub    esp,0xc
c0014b7f:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0014b86:	46                   	inc    esi
c0014b87:	57                   	push   edi
c0014b88:	e8 f8 2c ff ff       	call   c0007885 <free>
c0014b8d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014b90:	83 c4 10             	add    esp,0x10
c0014b93:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0014b99:	7f e1                	jg     c0014b7c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0014b9b:	90                   	nop
c0014b9c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014ba6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0014bab:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0014bae:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0014bb1:	d3 c0                	rol    eax,cl
c0014bb3:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0014bba:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014bbd:	89 f7                	mov    edi,esi
c0014bbf:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0014bc7:	0f 85 77 01 00 00    	jne    c0014d44 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0014bcd:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0014bd3:	85 ed                	test   ebp,ebp
c0014bd5:	74 1d                	je     c0014bf4 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0014bd7:	83 ec 0c             	sub    esp,0xc
c0014bda:	55                   	push   ebp
c0014bdb:	e8 cc b4 ff ff       	call   c00100ac <EnvVarContainer::~EnvVarContainer()>
c0014be0:	59                   	pop    ecx
c0014be1:	5e                   	pop    esi
c0014be2:	6a 0c                	push   0xc
c0014be4:	55                   	push   ebp
c0014be5:	e8 2a 59 ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c0014bea:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014bed:	83 c4 10             	add    esp,0x10
c0014bf0:	89 f7                	mov    edi,esi
c0014bf2:	66 90                	xchg   ax,ax
c0014bf4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0014bfa:	85 c0                	test   eax,eax
c0014bfc:	0f 84 b6 00 00 00    	je     c0014cb8 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0014c02:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0014c05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0014c09:	31 c9                	xor    ecx,ecx
c0014c0b:	eb 17                	jmp    c0014c24 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0014c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0014c10:	41                   	inc    ecx
c0014c11:	83 f9 10             	cmp    ecx,0x10
c0014c14:	0f 84 9e 00 00 00    	je     c0014cb8 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0014c1a:	66 90                	xchg   ax,ax
c0014c1c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0014c22:	66 90                	xchg   ax,ax
c0014c24:	31 d2                	xor    edx,edx
c0014c26:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0014c2d:	d3 fa                	sar    edx,cl
c0014c2f:	83 e2 01             	and    edx,0x1
c0014c32:	74 dc                	je     c0014c10 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014c34:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0014c37:	01 d2                	add    edx,edx
c0014c39:	01 ca                	add    edx,ecx
c0014c3b:	8d 14 92             	lea    edx,[edx+edx*4]
c0014c3e:	01 d0                	add    eax,edx
c0014c40:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0014c46:	83 fd 07             	cmp    ebp,0x7
c0014c49:	75 c5                	jne    c0014c10 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014c4b:	05 40 02 00 00       	add    eax,0x240
c0014c50:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0014c53:	83 fd ff             	cmp    ebp,0xffffffff
c0014c56:	0f 8c f0 00 00 00    	jl     c0014d4c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0014c5c:	0f 84 ae 01 00 00    	je     c0014e10 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0014c62:	85 ed                	test   ebp,ebp
c0014c64:	0f 84 92 01 00 00    	je     c0014dfc <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0014c6a:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0014c6c:	75 a2                	jne    c0014c10 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014c6e:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0014c74:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014c78:	01 d0                	add    eax,edx
c0014c7a:	66 90                	xchg   ax,ax
c0014c7c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0014c80:	83 ec 0c             	sub    esp,0xc
c0014c83:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0014c89:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014c8c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014c92:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0014c99:	50                   	push   eax
c0014c9a:	e8 1d fe ff ff       	call   c0014abc <unblockTask(ThreadControlBlock*)>
c0014c9f:	83 c4 10             	add    esp,0x10
c0014ca2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014ca5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014ca9:	89 f7                	mov    edi,esi
c0014cab:	41                   	inc    ecx
c0014cac:	83 f9 10             	cmp    ecx,0x10
c0014caf:	0f 85 67 ff ff ff    	jne    c0014c1c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0014cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0014cb8:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0014cbe:	85 c0                	test   eax,eax
c0014cc0:	74 62                	je     c0014d24 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0014cc2:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0014cc8:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0014cce:	74 54                	je     c0014d24 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0014cd0:	83 ec 0c             	sub    esp,0xc
c0014cd3:	68 84 71 02 c0       	push   0xc0027184
c0014cd8:	e8 5f 91 00 00       	call   c001de3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014cdd:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0014ce4:	89 c7                	mov    edi,eax
c0014ce6:	e8 35 91 00 00       	call   c001de20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014ceb:	83 c4 10             	add    esp,0x10
c0014cee:	84 c0                	test   al,al
c0014cf0:	0f 84 ce 00 00 00    	je     c0014dc4 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0014cf6:	66 90                	xchg   ax,ax
c0014cf8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014cfb:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014d01:	85 d2                	test   edx,edx
c0014d03:	74 0f                	je     c0014d14 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0014d05:	83 ec 0c             	sub    esp,0xc
c0014d08:	8b 02                	mov    eax,DWORD PTR [edx]
c0014d0a:	52                   	push   edx
c0014d0b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014d0e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014d11:	83 c4 10             	add    esp,0x10
c0014d14:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0014d1e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0014d21:	8d 76 00             	lea    esi,[esi+0x0]
c0014d24:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0014d2a:	85 db                	test   ebx,ebx
c0014d2c:	74 16                	je     c0014d44 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0014d2e:	83 ec 0c             	sub    esp,0xc
c0014d31:	53                   	push   ebx
c0014d32:	e8 75 4b ff ff       	call   c00098ac <VAS::~VAS()>
c0014d37:	58                   	pop    eax
c0014d38:	5a                   	pop    edx
c0014d39:	6a 14                	push   0x14
c0014d3b:	53                   	push   ebx
c0014d3c:	e8 d3 57 ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c0014d41:	83 c4 10             	add    esp,0x10
c0014d44:	83 c4 1c             	add    esp,0x1c
c0014d47:	5b                   	pop    ebx
c0014d48:	5e                   	pop    esi
c0014d49:	5f                   	pop    edi
c0014d4a:	5d                   	pop    ebp
c0014d4b:	c3                   	ret    
c0014d4c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014d50:	83 ec 0c             	sub    esp,0xc
c0014d53:	68 d4 03 02 c0       	push   0xc00203d4
c0014d58:	e8 3e b6 ff ff       	call   c001039b <KePanic(char const*)>
c0014d5d:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014d60:	83 c4 10             	add    esp,0x10
c0014d63:	89 f7                	mov    edi,esi
c0014d65:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014d69:	e9 a2 fe ff ff       	jmp    c0014c10 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014d6e:	66 90                	xchg   ax,ax
c0014d70:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d76:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0014d7c:	75 1e                	jne    c0014d9c <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014d7e:	83 ec 0c             	sub    esp,0xc
c0014d81:	68 3c 04 02 c0       	push   0xc002043c
c0014d86:	e8 7f 58 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0014d8b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0014d92:	e8 5d fa ff ff       	call   c00147f4 <blockTask(TaskState)>
c0014d97:	83 c4 10             	add    esp,0x10
c0014d9a:	66 90                	xchg   ax,ax
c0014d9c:	83 ec 08             	sub    esp,0x8
c0014d9f:	56                   	push   esi
c0014da0:	68 84 71 02 c0       	push   0xc0027184
c0014da5:	e8 52 91 00 00       	call   c001defc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014daa:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0014db1:	e8 86 90 00 00       	call   c001de3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014db6:	83 c4 10             	add    esp,0x10
c0014db9:	39 f8                	cmp    eax,edi
c0014dbb:	0f 84 37 ff ff ff    	je     c0014cf8 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0014dc1:	8d 76 00             	lea    esi,[esi+0x0]
c0014dc4:	83 ec 0c             	sub    esp,0xc
c0014dc7:	68 84 71 02 c0       	push   0xc0027184
c0014dcc:	e8 6b 90 00 00       	call   c001de3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014dd1:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0014dd8:	89 c6                	mov    esi,eax
c0014dda:	e8 65 90 00 00       	call   c001de44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014ddf:	83 c4 10             	add    esp,0x10
c0014de2:	39 f3                	cmp    ebx,esi
c0014de4:	74 b6                	je     c0014d9c <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014de6:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0014de9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014dec:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0014df2:	75 a8                	jne    c0014d9c <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014df4:	e9 77 ff ff ff       	jmp    c0014d70 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0014df9:	8d 76 00             	lea    esi,[esi+0x0]
c0014dfc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014e00:	83 ec 0c             	sub    esp,0xc
c0014e03:	68 08 04 02 c0       	push   0xc0020408
c0014e08:	e9 4b ff ff ff       	jmp    c0014d58 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0014e0d:	8d 76 00             	lea    esi,[esi+0x0]
c0014e10:	8b 36                	mov    esi,DWORD PTR [esi]
c0014e12:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014e16:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0014e19:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014e1c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0014e22:	01 d7                	add    edi,edx
c0014e24:	89 f8                	mov    eax,edi
c0014e26:	e9 51 fe ff ff       	jmp    c0014c7c <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0014e2b:	90                   	nop

c0014e2c <cleanerTaskFunction(void*)>:
c0014e2c:	53                   	push   ebx
c0014e2d:	83 ec 08             	sub    esp,0x8
c0014e30:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014e35:	48                   	dec    eax
c0014e36:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014e3b:	75 03                	jne    c0014e40 <cleanerTaskFunction(void*)+0x14>
c0014e3d:	fb                   	sti    
c0014e3e:	66 90                	xchg   ax,ax
c0014e40:	fa                   	cli    
c0014e41:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014e46:	80 3d 4c 71 02 c0 00 	cmp    BYTE PTR ds:0xc002714c,0x0
c0014e4d:	8d 50 01             	lea    edx,[eax+0x1]
c0014e50:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c0014e56:	0f 84 ac 00 00 00    	je     c0014f08 <cleanerTaskFunction(void*)+0xdc>
c0014e5c:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014e61:	85 c0                	test   eax,eax
c0014e63:	75 03                	jne    c0014e68 <cleanerTaskFunction(void*)+0x3c>
c0014e65:	fb                   	sti    
c0014e66:	66 90                	xchg   ax,ax
c0014e68:	c6 05 4c 71 02 c0 00 	mov    BYTE PTR ds:0xc002714c,0x0
c0014e6f:	fa                   	cli    
c0014e70:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014e76:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c0014e7c:	fa                   	cli    
c0014e7d:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014e83:	eb 2b                	jmp    c0014eb0 <cleanerTaskFunction(void*)+0x84>
c0014e85:	8d 76 00             	lea    esi,[esi+0x0]
c0014e88:	83 ec 0c             	sub    esp,0xc
c0014e8b:	68 6c 71 02 c0       	push   0xc002716c
c0014e90:	e8 a7 8f 00 00       	call   c001de3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014e95:	c7 04 24 6c 71 02 c0 	mov    DWORD PTR [esp],0xc002716c
c0014e9c:	89 c3                	mov    ebx,eax
c0014e9e:	e8 a1 8f 00 00       	call   c001de44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014ea3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ea6:	e8 b5 fc ff ff       	call   c0014b60 <cleanupTerminatedTask(ThreadControlBlock*)>
c0014eab:	83 c4 10             	add    esp,0x10
c0014eae:	66 90                	xchg   ax,ax
c0014eb0:	83 ec 0c             	sub    esp,0xc
c0014eb3:	68 6c 71 02 c0       	push   0xc002716c
c0014eb8:	e8 63 8f 00 00       	call   c001de20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014ebd:	83 c4 10             	add    esp,0x10
c0014ec0:	84 c0                	test   al,al
c0014ec2:	74 c4                	je     c0014e88 <cleanerTaskFunction(void*)+0x5c>
c0014ec4:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014ec9:	48                   	dec    eax
c0014eca:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014ecf:	75 03                	jne    c0014ed4 <cleanerTaskFunction(void*)+0xa8>
c0014ed1:	fb                   	sti    
c0014ed2:	66 90                	xchg   ax,ax
c0014ed4:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014ed9:	48                   	dec    eax
c0014eda:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014edf:	0f 85 4b ff ff ff    	jne    c0014e30 <cleanerTaskFunction(void*)+0x4>
c0014ee5:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0014eea:	85 c0                	test   eax,eax
c0014eec:	0f 84 3e ff ff ff    	je     c0014e30 <cleanerTaskFunction(void*)+0x4>
c0014ef2:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014efc:	e8 f7 f6 ff ff       	call   c00145f8 <schedule()>
c0014f01:	e9 2a ff ff ff       	jmp    c0014e30 <cleanerTaskFunction(void*)+0x4>
c0014f06:	66 90                	xchg   ax,ax
c0014f08:	83 ec 0c             	sub    esp,0xc
c0014f0b:	6a 02                	push   0x2
c0014f0d:	e8 ba f8 ff ff       	call   c00147cc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0014f12:	83 c4 10             	add    esp,0x10
c0014f15:	e9 4e ff ff ff       	jmp    c0014e68 <cleanerTaskFunction(void*)+0x3c>
c0014f1a:	66 90                	xchg   ax,ax

c0014f1c <terminateTask(int)>:
c0014f1c:	83 ec 14             	sub    esp,0x14
c0014f1f:	fa                   	cli    
c0014f20:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014f26:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c0014f2c:	fa                   	cli    
c0014f2d:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014f33:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014f37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f3c:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0014f3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f44:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0014f47:	50                   	push   eax
c0014f48:	68 6c 71 02 c0       	push   0xc002716c
c0014f4d:	e8 aa 8f 00 00       	call   c001defc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014f52:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f57:	83 c4 10             	add    esp,0x10
c0014f5a:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0014f61:	a1 48 71 02 c0       	mov    eax,ds:0xc0027148
c0014f66:	85 c0                	test   eax,eax
c0014f68:	74 5e                	je     c0014fc8 <terminateTask(int)+0xac>
c0014f6a:	83 ec 0c             	sub    esp,0xc
c0014f6d:	c6 05 4c 71 02 c0 01 	mov    BYTE PTR ds:0xc002714c,0x1
c0014f74:	50                   	push   eax
c0014f75:	e8 42 fb ff ff       	call   c0014abc <unblockTask(ThreadControlBlock*)>
c0014f7a:	83 c4 10             	add    esp,0x10
c0014f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0014f80:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014f85:	48                   	dec    eax
c0014f86:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014f8b:	75 03                	jne    c0014f90 <terminateTask(int)+0x74>
c0014f8d:	fb                   	sti    
c0014f8e:	66 90                	xchg   ax,ax
c0014f90:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014f95:	48                   	dec    eax
c0014f96:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014f9b:	75 0b                	jne    c0014fa8 <terminateTask(int)+0x8c>
c0014f9d:	83 3d 60 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027160,0x0
c0014fa4:	75 36                	jne    c0014fdc <terminateTask(int)+0xc0>
c0014fa6:	66 90                	xchg   ax,ax
c0014fa8:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014fad:	48                   	dec    eax
c0014fae:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014fb3:	75 03                	jne    c0014fb8 <terminateTask(int)+0x9c>
c0014fb5:	fb                   	sti    
c0014fb6:	66 90                	xchg   ax,ax
c0014fb8:	fa                   	cli    
c0014fb9:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014fbf:	90                   	nop
c0014fc0:	e8 33 f6 ff ff       	call   c00145f8 <schedule()>
c0014fc5:	eb e1                	jmp    c0014fa8 <terminateTask(int)+0x8c>
c0014fc7:	90                   	nop
c0014fc8:	83 ec 0c             	sub    esp,0xc
c0014fcb:	68 3a 03 02 c0       	push   0xc002033a
c0014fd0:	e8 35 56 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0014fd5:	83 c4 10             	add    esp,0x10
c0014fd8:	eb a6                	jmp    c0014f80 <terminateTask(int)+0x64>
c0014fda:	66 90                	xchg   ax,ax
c0014fdc:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014fe6:	eb d8                	jmp    c0014fc0 <terminateTask(int)+0xa4>

c0014fe8 <Thr::terminateFromIRQ(int)>:
c0014fe8:	83 ec 18             	sub    esp,0x18
c0014feb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014fef:	50                   	push   eax
c0014ff0:	e8 27 ff ff ff       	call   c0014f1c <terminateTask(int)>
c0014ff5:	90                   	nop
c0014ff6:	66 90                	xchg   ax,ax

c0014ff8 <Semaphore::release()>:
c0014ff8:	83 ec 0c             	sub    esp,0xc
c0014ffb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014fff:	fa                   	cli    
c0015000:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0015005:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001500b:	8d 48 01             	lea    ecx,[eax+0x1]
c001500e:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c0015014:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015017:	85 c9                	test   ecx,ecx
c0015019:	74 41                	je     c001505c <Semaphore::release()+0x64>
c001501b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001501e:	83 ec 0c             	sub    esp,0xc
c0015021:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015024:	51                   	push   ecx
c0015025:	e8 92 fa ff ff       	call   c0014abc <unblockTask(ThreadControlBlock*)>
c001502a:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c001502f:	83 c4 10             	add    esp,0x10
c0015032:	48                   	dec    eax
c0015033:	90                   	nop
c0015034:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0015039:	85 c0                	test   eax,eax
c001503b:	75 0b                	jne    c0015048 <Semaphore::release()+0x50>
c001503d:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0015042:	85 c0                	test   eax,eax
c0015044:	75 1e                	jne    c0015064 <Semaphore::release()+0x6c>
c0015046:	66 90                	xchg   ax,ax
c0015048:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001504d:	48                   	dec    eax
c001504e:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015053:	75 03                	jne    c0015058 <Semaphore::release()+0x60>
c0015055:	fb                   	sti    
c0015056:	66 90                	xchg   ax,ax
c0015058:	83 c4 0c             	add    esp,0xc
c001505b:	c3                   	ret    
c001505c:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001505f:	eb d3                	jmp    c0015034 <Semaphore::release()+0x3c>
c0015061:	8d 76 00             	lea    esi,[esi+0x0]
c0015064:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c001506e:	e8 85 f5 ff ff       	call   c00145f8 <schedule()>
c0015073:	eb d3                	jmp    c0015048 <Semaphore::release()+0x50>
c0015075:	8d 76 00             	lea    esi,[esi+0x0]

c0015078 <__static_initialization_and_destruction_0(int, int)>:
c0015078:	83 ec 0c             	sub    esp,0xc
c001507b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015080:	0f 85 8e 00 00 00    	jne    c0015114 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015086:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001508e:	0f 85 80 00 00 00    	jne    c0015114 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015094:	83 ec 0c             	sub    esp,0xc
c0015097:	68 84 71 02 c0       	push   0xc0027184
c001509c:	e8 07 91 00 00       	call   c001e1a8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00150a1:	83 c4 10             	add    esp,0x10
c00150a4:	83 ec 04             	sub    esp,0x4
c00150a7:	68 d0 0f 02 c0       	push   0xc0020fd0
c00150ac:	68 84 71 02 c0       	push   0xc0027184
c00150b1:	68 58 e1 01 c0       	push   0xc001e158
c00150b6:	e8 09 54 ff ff       	call   c000a4c4 <__cxa_atexit>
c00150bb:	83 c4 10             	add    esp,0x10
c00150be:	83 ec 0c             	sub    esp,0xc
c00150c1:	68 78 71 02 c0       	push   0xc0027178
c00150c6:	e8 dd 90 00 00       	call   c001e1a8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00150cb:	83 c4 10             	add    esp,0x10
c00150ce:	83 ec 04             	sub    esp,0x4
c00150d1:	68 d0 0f 02 c0       	push   0xc0020fd0
c00150d6:	68 78 71 02 c0       	push   0xc0027178
c00150db:	68 58 e1 01 c0       	push   0xc001e158
c00150e0:	e8 df 53 ff ff       	call   c000a4c4 <__cxa_atexit>
c00150e5:	83 c4 10             	add    esp,0x10
c00150e8:	83 ec 0c             	sub    esp,0xc
c00150eb:	68 6c 71 02 c0       	push   0xc002716c
c00150f0:	e8 b3 90 00 00       	call   c001e1a8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00150f5:	83 c4 10             	add    esp,0x10
c00150f8:	83 ec 04             	sub    esp,0x4
c00150fb:	68 d0 0f 02 c0       	push   0xc0020fd0
c0015100:	68 6c 71 02 c0       	push   0xc002716c
c0015105:	68 58 e1 01 c0       	push   0xc001e158
c001510a:	e8 b5 53 ff ff       	call   c000a4c4 <__cxa_atexit>
c001510f:	83 c4 10             	add    esp,0x10
c0015112:	66 90                	xchg   ax,ax
c0015114:	90                   	nop
c0015115:	83 c4 0c             	add    esp,0xc
c0015118:	c3                   	ret    
c0015119:	8d 76 00             	lea    esi,[esi+0x0]

c001511c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001511c:	83 ec 0c             	sub    esp,0xc
c001511f:	83 ec 08             	sub    esp,0x8
c0015122:	68 ff ff 00 00       	push   0xffff
c0015127:	6a 01                	push   0x1
c0015129:	e8 4a ff ff ff       	call   c0015078 <__static_initialization_and_destruction_0(int, int)>
c001512e:	83 c4 10             	add    esp,0x10
c0015131:	83 c4 0c             	add    esp,0xc
c0015134:	c3                   	ret    

c0015135 <Vm::inbv(unsigned short)>:
c0015135:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015139:	66 81 fa fe fe       	cmp    dx,0xfefe
c001513e:	75 06                	jne    c0015146 <Vm::inbv(unsigned short)+0x11>
c0015140:	a0 cc 71 02 c0       	mov    al,ds:0xc00271cc
c0015145:	c3                   	ret    
c0015146:	ec                   	in     al,dx
c0015147:	c3                   	ret    

c0015148 <Vm::outbv(unsigned short, unsigned char)>:
c0015148:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001514c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015150:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015155:	75 25                	jne    c001517c <Vm::outbv(unsigned short, unsigned char)+0x34>
c0015157:	8b 0d cc 71 02 c0    	mov    ecx,DWORD PTR ds:0xc00271cc
c001515d:	8d 51 01             	lea    edx,[ecx+0x1]
c0015160:	88 81 e0 71 02 c0    	mov    BYTE PTR [ecx-0x3ffd8e20],al
c0015166:	89 15 cc 71 02 c0    	mov    DWORD PTR ds:0xc00271cc,edx
c001516c:	83 fa 20             	cmp    edx,0x20
c001516f:	75 0c                	jne    c001517d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015171:	c7 05 cc 71 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x1f
c001517b:	c3                   	ret    
c001517c:	ee                   	out    dx,al
c001517d:	c3                   	ret    

c001517e <Vm::realToLinear(unsigned short, unsigned short)>:
c001517e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015183:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015188:	c1 e0 04             	shl    eax,0x4
c001518b:	01 d0                	add    eax,edx
c001518d:	c3                   	ret    

c001518e <Vm::getSegment(unsigned int)>:
c001518e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015192:	c1 e8 10             	shr    eax,0x10
c0015195:	c3                   	ret    

c0015196 <Vm::getOffset(unsigned int)>:
c0015196:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001519a:	c3                   	ret    

c001519b <Vm::mainloop2()>:
c001519b:	83 ec 18             	sub    esp,0x18
c001519e:	fa                   	cli    
c001519f:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00151a5:	6a 02                	push   0x2
c00151a7:	c6 05 c5 71 02 c0 01 	mov    BYTE PTR ds:0xc00271c5,0x1
c00151ae:	e8 19 f6 ff ff       	call   c00147cc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00151b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151b8:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00151bc:	52                   	push   edx
c00151bd:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00151c1:	52                   	push   edx
c00151c2:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00151c6:	52                   	push   edx
c00151c7:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00151cb:	50                   	push   eax
c00151cc:	e8 3e b0 fe ff       	call   c000020f <goToVM86>
c00151d1:	83 c4 2c             	add    esp,0x2c
c00151d4:	c3                   	ret    

c00151d5 <Vm::mainVm8086Loop(void*)>:
c00151d5:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00151da:	48                   	dec    eax
c00151db:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00151e0:	75 01                	jne    c00151e3 <Vm::mainVm8086Loop(void*)+0xe>
c00151e2:	fb                   	sti    
c00151e3:	eb b6                	jmp    c001519b <Vm::mainloop2()>

c00151e5 <Vm::mainloop3(unsigned long)>:
c00151e5:	83 ec 18             	sub    esp,0x18
c00151e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00151ec:	fa                   	cli    
c00151ed:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00151f3:	6a 02                	push   0x2
c00151f5:	c6 05 c4 71 02 c0 01 	mov    BYTE PTR ds:0xc00271c4,0x1
c00151fc:	a3 c0 71 02 c0       	mov    ds:0xc00271c0,eax
c0015201:	e8 c6 f5 ff ff       	call   c00147cc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015206:	83 c4 1c             	add    esp,0x1c
c0015209:	eb 90                	jmp    c001519b <Vm::mainloop2()>

c001520b <Vm::initialise8086()>:
c001520b:	83 ec 0c             	sub    esp,0xc
c001520e:	68 80 00 00 00       	push   0x80
c0015213:	6a 00                	push   0x0
c0015215:	68 d5 51 01 c0       	push   0xc00151d5
c001521a:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0015220:	e8 b3 f1 ff ff       	call   c00143d8 <Process::createThread(void (*)(void*), void*, int)>
c0015225:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001522c:	a3 c8 71 02 c0       	mov    ds:0xc00271c8,eax
c0015231:	68 00 01 00 00       	push   0x100
c0015236:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001523b:	6a 00                	push   0x0
c001523d:	6a 00                	push   0x0
c001523f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015245:	e8 c0 4a ff ff       	call   c0009d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001524a:	83 c4 2c             	add    esp,0x2c
c001524d:	c3                   	ret    

c001524e <Vm::finish8086()>:
c001524e:	53                   	push   ebx
c001524f:	83 ec 08             	sub    esp,0x8
c0015252:	fa                   	cli    
c0015253:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0015259:	80 3d c4 71 02 c0 00 	cmp    BYTE PTR ds:0xc00271c4,0x0
c0015260:	75 15                	jne    c0015277 <Vm::finish8086()+0x29>
c0015262:	e8 91 f3 ff ff       	call   c00145f8 <schedule()>
c0015267:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001526c:	48                   	dec    eax
c001526d:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015272:	75 de                	jne    c0015252 <Vm::finish8086()+0x4>
c0015274:	fb                   	sti    
c0015275:	eb db                	jmp    c0015252 <Vm::finish8086()+0x4>
c0015277:	83 ec 0c             	sub    esp,0xc
c001527a:	8b 1d c0 71 02 c0    	mov    ebx,DWORD PTR ds:0xc00271c0
c0015280:	ff 35 c8 71 02 c0    	push   DWORD PTR ds:0xc00271c8
c0015286:	c6 05 c4 71 02 c0 00 	mov    BYTE PTR ds:0xc00271c4,0x0
c001528d:	e8 2a f8 ff ff       	call   c0014abc <unblockTask(ThreadControlBlock*)>
c0015292:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015297:	83 c4 10             	add    esp,0x10
c001529a:	8d 50 ff             	lea    edx,[eax-0x1]
c001529d:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c00152a3:	85 d2                	test   edx,edx
c00152a5:	75 01                	jne    c00152a8 <Vm::finish8086()+0x5a>
c00152a7:	fb                   	sti    
c00152a8:	89 d8                	mov    eax,ebx
c00152aa:	83 c4 08             	add    esp,0x8
c00152ad:	5b                   	pop    ebx
c00152ae:	c3                   	ret    

c00152af <Vm::getOutput8086(unsigned char*)>:
c00152af:	57                   	push   edi
c00152b0:	8b 0d cc 71 02 c0    	mov    ecx,DWORD PTR ds:0xc00271cc
c00152b6:	56                   	push   esi
c00152b7:	be e0 71 02 c0       	mov    esi,0xc00271e0
c00152bc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00152c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00152c2:	a1 cc 71 02 c0       	mov    eax,ds:0xc00271cc
c00152c7:	5e                   	pop    esi
c00152c8:	c7 05 cc 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x0
c00152d2:	5f                   	pop    edi
c00152d3:	c3                   	ret    

c00152d4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00152d4:	55                   	push   ebp
c00152d5:	57                   	push   edi
c00152d6:	56                   	push   esi
c00152d7:	53                   	push   ebx
c00152d8:	83 ec 0c             	sub    esp,0xc
c00152db:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00152df:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00152e3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00152e7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00152eb:	fa                   	cli    
c00152ec:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00152f2:	80 3d c5 71 02 c0 00 	cmp    BYTE PTR ds:0xc00271c5,0x0
c00152f9:	75 15                	jne    c0015310 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00152fb:	e8 f8 f2 ff ff       	call   c00145f8 <schedule()>
c0015300:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015305:	48                   	dec    eax
c0015306:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001530b:	75 de                	jne    c00152eb <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001530d:	fb                   	sti    
c001530e:	eb db                	jmp    c00152eb <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015310:	a1 c8 71 02 c0       	mov    eax,ds:0xc00271c8
c0015315:	c7 05 cc 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x0
c001531f:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015323:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015327:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001532b:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001532f:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015333:	0f b7 ff             	movzx  edi,di
c0015336:	0f b7 f6             	movzx  esi,si
c0015339:	50                   	push   eax
c001533a:	6a 20                	push   0x20
c001533c:	6a 00                	push   0x0
c001533e:	68 e0 71 02 c0       	push   0xc00271e0
c0015343:	e8 88 b1 fe ff       	call   c00004d0 <memset>
c0015348:	5a                   	pop    edx
c0015349:	59                   	pop    ecx
c001534a:	57                   	push   edi
c001534b:	56                   	push   esi
c001534c:	e8 2d fe ff ff       	call   c001517e <Vm::realToLinear(unsigned short, unsigned short)>
c0015351:	83 c4 10             	add    esp,0x10
c0015354:	89 c7                	mov    edi,eax
c0015356:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001535a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001535e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015360:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015365:	c6 05 c5 71 02 c0 00 	mov    BYTE PTR ds:0xc00271c5,0x0
c001536c:	48                   	dec    eax
c001536d:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015372:	75 01                	jne    c0015375 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0015374:	fb                   	sti    
c0015375:	83 ec 0c             	sub    esp,0xc
c0015378:	ff 35 c8 71 02 c0    	push   DWORD PTR ds:0xc00271c8
c001537e:	e8 39 f7 ff ff       	call   c0014abc <unblockTask(ThreadControlBlock*)>
c0015383:	83 c4 1c             	add    esp,0x1c
c0015386:	b0 01                	mov    al,0x1
c0015388:	5b                   	pop    ebx
c0015389:	5e                   	pop    esi
c001538a:	5f                   	pop    edi
c001538b:	5d                   	pop    ebp
c001538c:	c3                   	ret    

c001538d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001538d:	55                   	push   ebp
c001538e:	57                   	push   edi
c001538f:	56                   	push   esi
c0015390:	53                   	push   ebx
c0015391:	83 ec 2c             	sub    esp,0x2c
c0015394:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0015398:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001539c:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00153a0:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00153a4:	fa                   	cli    
c00153a5:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00153ab:	0f b6 35 c5 71 02 c0 	movzx  esi,BYTE PTR ds:0xc00271c5
c00153b2:	89 f0                	mov    eax,esi
c00153b4:	84 c0                	test   al,al
c00153b6:	75 1d                	jne    c00153d5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c00153b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00153bc:	e8 37 f2 ff ff       	call   c00145f8 <schedule()>
c00153c1:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00153c6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00153ca:	48                   	dec    eax
c00153cb:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00153d0:	75 d2                	jne    c00153a4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00153d2:	fb                   	sti    
c00153d3:	eb cf                	jmp    c00153a4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00153d5:	a1 c8 71 02 c0       	mov    eax,ds:0xc00271c8
c00153da:	c7 05 cc 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x0
c00153e4:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c00153e8:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00153ec:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c00153f0:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c00153f4:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00153f8:	50                   	push   eax
c00153f9:	6a 20                	push   0x20
c00153fb:	6a 00                	push   0x0
c00153fd:	68 e0 71 02 c0       	push   0xc00271e0
c0015402:	e8 c9 b0 fe ff       	call   c00004d0 <memset>
c0015407:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001540e:	e8 62 24 ff ff       	call   c0007875 <malloc>
c0015413:	83 c4 0c             	add    esp,0xc
c0015416:	89 c3                	mov    ebx,eax
c0015418:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c001541e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015422:	50                   	push   eax
c0015423:	e8 58 57 ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c0015428:	83 c4 10             	add    esp,0x10
c001542b:	85 db                	test   ebx,ebx
c001542d:	75 0a                	jne    c0015439 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001542f:	83 ec 0c             	sub    esp,0xc
c0015432:	68 64 04 02 c0       	push   0xc0020464
c0015437:	eb 3e                	jmp    c0015477 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0015439:	50                   	push   eax
c001543a:	8d 44 24 17          	lea    eax,[esp+0x17]
c001543e:	50                   	push   eax
c001543f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015443:	50                   	push   eax
c0015444:	53                   	push   ebx
c0015445:	e8 a2 5a ff ff       	call   c000aeec <File::stat(unsigned long long*, bool*)>
c001544a:	83 c4 10             	add    esp,0x10
c001544d:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0015452:	74 0a                	je     c001545e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0015454:	83 ec 0c             	sub    esp,0xc
c0015457:	68 78 04 02 c0       	push   0xc0020478
c001545c:	eb 19                	jmp    c0015477 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001545e:	51                   	push   ecx
c001545f:	51                   	push   ecx
c0015460:	6a 01                	push   0x1
c0015462:	53                   	push   ebx
c0015463:	e8 d8 57 ff ff       	call   c000ac40 <File::open(FileOpenMode)>
c0015468:	83 c4 10             	add    esp,0x10
c001546b:	85 c0                	test   eax,eax
c001546d:	74 24                	je     c0015493 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001546f:	83 ec 0c             	sub    esp,0xc
c0015472:	68 91 04 02 c0       	push   0xc0020491
c0015477:	e8 1f af ff ff       	call   c001039b <KePanic(char const*)>
c001547c:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015481:	83 c4 10             	add    esp,0x10
c0015484:	48                   	dec    eax
c0015485:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001548a:	85 c0                	test   eax,eax
c001548c:	75 01                	jne    c001548f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001548e:	fb                   	sti    
c001548f:	31 f6                	xor    esi,esi
c0015491:	eb 58                	jmp    c00154eb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0015493:	0f b7 ed             	movzx  ebp,bp
c0015496:	50                   	push   eax
c0015497:	0f b7 ff             	movzx  edi,di
c001549a:	50                   	push   eax
c001549b:	55                   	push   ebp
c001549c:	57                   	push   edi
c001549d:	e8 dc fc ff ff       	call   c001517e <Vm::realToLinear(unsigned short, unsigned short)>
c00154a2:	5a                   	pop    edx
c00154a3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00154a5:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00154a9:	51                   	push   ecx
c00154aa:	50                   	push   eax
c00154ab:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00154af:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00154b3:	53                   	push   ebx
c00154b4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00154b7:	83 c4 14             	add    esp,0x14
c00154ba:	53                   	push   ebx
c00154bb:	e8 de 57 ff ff       	call   c000ac9e <File::close()>
c00154c0:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00154c5:	83 c4 10             	add    esp,0x10
c00154c8:	48                   	dec    eax
c00154c9:	c6 05 c5 71 02 c0 00 	mov    BYTE PTR ds:0xc00271c5,0x0
c00154d0:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00154d5:	85 c0                	test   eax,eax
c00154d7:	75 01                	jne    c00154da <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c00154d9:	fb                   	sti    
c00154da:	83 ec 0c             	sub    esp,0xc
c00154dd:	ff 35 c8 71 02 c0    	push   DWORD PTR ds:0xc00271c8
c00154e3:	e8 d4 f5 ff ff       	call   c0014abc <unblockTask(ThreadControlBlock*)>
c00154e8:	83 c4 10             	add    esp,0x10
c00154eb:	83 c4 2c             	add    esp,0x2c
c00154ee:	89 f0                	mov    eax,esi
c00154f0:	5b                   	pop    ebx
c00154f1:	5e                   	pop    esi
c00154f2:	5f                   	pop    edi
c00154f3:	5d                   	pop    ebp
c00154f4:	c3                   	ret    

c00154f5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00154f5:	57                   	push   edi
c00154f6:	56                   	push   esi
c00154f7:	53                   	push   ebx
c00154f8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00154fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015500:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015504:	83 e8 06             	sub    eax,0x6
c0015507:	0f b7 c0             	movzx  eax,ax
c001550a:	50                   	push   eax
c001550b:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0015510:	50                   	push   eax
c0015511:	e8 68 fc ff ff       	call   c001517e <Vm::realToLinear(unsigned short, unsigned short)>
c0015516:	5a                   	pop    edx
c0015517:	5e                   	pop    esi
c0015518:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001551b:	8d 56 fa             	lea    edx,[esi-0x6]
c001551e:	81 e2 ff ff 00 00    	and    edx,0xffff
c0015524:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0015527:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001552a:	83 c2 02             	add    edx,0x2
c001552d:	66 89 10             	mov    WORD PTR [eax],dx
c0015530:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0015533:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0015537:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001553a:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001553e:	89 d6                	mov    esi,edx
c0015540:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0015546:	66 81 e6 ff fd       	and    si,0xfdff
c001554b:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c001554f:	74 07                	je     c0015558 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0015551:	89 d6                	mov    esi,edx
c0015553:	66 81 ce 00 02       	or     si,0x200
c0015558:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001555c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015561:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0015565:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001556d:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0015570:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0015578:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001557b:	5b                   	pop    ebx
c001557c:	5e                   	pop    esi
c001557d:	5f                   	pop    edi
c001557e:	c3                   	ret    

c001557f <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001557f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015584:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015589:	c1 e0 04             	shl    eax,0x4
c001558c:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001558f:	c3                   	ret    

c0015590 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0015590:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015595:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001559a:	c1 e0 04             	shl    eax,0x4
c001559d:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00155a1:	c3                   	ret    

c00155a2 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00155a2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00155a7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00155ac:	c1 e0 04             	shl    eax,0x4
c00155af:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00155b2:	c3                   	ret    

c00155b3 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00155b3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00155b8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00155bd:	c1 e0 04             	shl    eax,0x4
c00155c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00155c4:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00155c7:	c3                   	ret    

c00155c8 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00155c8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00155cd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00155d2:	c1 e0 04             	shl    eax,0x4
c00155d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00155d9:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00155dd:	c3                   	ret    

c00155de <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00155de:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00155e3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00155e8:	c1 e0 04             	shl    eax,0x4
c00155eb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00155ef:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00155f2:	c3                   	ret    

c00155f3 <Vm::faultHandler(regs*)>:
c00155f3:	55                   	push   ebp
c00155f4:	57                   	push   edi
c00155f5:	56                   	push   esi
c00155f6:	53                   	push   ebx
c00155f7:	83 ec 1c             	sub    esp,0x1c
c00155fa:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00155fe:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015601:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0015605:	0f b7 f8             	movzx  edi,ax
c0015608:	52                   	push   edx
c0015609:	0f b7 c0             	movzx  eax,ax
c001560c:	50                   	push   eax
c001560d:	e8 6c fb ff ff       	call   c001517e <Vm::realToLinear(unsigned short, unsigned short)>
c0015612:	5a                   	pop    edx
c0015613:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0015616:	59                   	pop    ecx
c0015617:	89 c1                	mov    ecx,eax
c0015619:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001561c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015620:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015625:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015629:	0f b7 c5             	movzx  eax,bp
c001562c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015630:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015634:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015638:	e8 41 fb ff ff       	call   c001517e <Vm::realToLinear(unsigned short, unsigned short)>
c001563d:	5e                   	pop    esi
c001563e:	be 06 00 00 00       	mov    esi,0x6
c0015643:	5a                   	pop    edx
c0015644:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0015649:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001564e:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0015651:	80 fa 9d             	cmp    dl,0x9d
c0015654:	0f 84 2c 02 00 00    	je     c0015886 <Vm::faultHandler(regs*)+0x293>
c001565a:	0f 87 91 00 00 00    	ja     c00156f1 <Vm::faultHandler(regs*)+0xfe>
c0015660:	80 fa 66             	cmp    dl,0x66
c0015663:	0f 84 98 01 00 00    	je     c0015801 <Vm::faultHandler(regs*)+0x20e>
c0015669:	77 47                	ja     c00156b2 <Vm::faultHandler(regs*)+0xbf>
c001566b:	80 fa 36             	cmp    dl,0x36
c001566e:	0f 84 80 01 00 00    	je     c00157f4 <Vm::faultHandler(regs*)+0x201>
c0015674:	77 1a                	ja     c0015690 <Vm::faultHandler(regs*)+0x9d>
c0015676:	80 fa 26             	cmp    dl,0x26
c0015679:	0f 84 4e 01 00 00    	je     c00157cd <Vm::faultHandler(regs*)+0x1da>
c001567f:	80 fa 2e             	cmp    dl,0x2e
c0015682:	0f 85 e2 05 00 00    	jne    c0015c6a <Vm::faultHandler(regs*)+0x677>
c0015688:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001568b:	31 f6                	xor    esi,esi
c001568d:	41                   	inc    ecx
c001568e:	eb be                	jmp    c001564e <Vm::faultHandler(regs*)+0x5b>
c0015690:	80 fa 64             	cmp    dl,0x64
c0015693:	0f 84 41 01 00 00    	je     c00157da <Vm::faultHandler(regs*)+0x1e7>
c0015699:	0f 87 48 01 00 00    	ja     c00157e7 <Vm::faultHandler(regs*)+0x1f4>
c001569f:	80 fa 3e             	cmp    dl,0x3e
c00156a2:	0f 85 c2 05 00 00    	jne    c0015c6a <Vm::faultHandler(regs*)+0x677>
c00156a8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00156ab:	be 01 00 00 00       	mov    esi,0x1
c00156b0:	eb db                	jmp    c001568d <Vm::faultHandler(regs*)+0x9a>
c00156b2:	80 fa 6d             	cmp    dl,0x6d
c00156b5:	0f 84 ec 02 00 00    	je     c00159a7 <Vm::faultHandler(regs*)+0x3b4>
c00156bb:	77 17                	ja     c00156d4 <Vm::faultHandler(regs*)+0xe1>
c00156bd:	80 fa 67             	cmp    dl,0x67
c00156c0:	0f 84 48 01 00 00    	je     c001580e <Vm::faultHandler(regs*)+0x21b>
c00156c6:	80 fa 6c             	cmp    dl,0x6c
c00156c9:	0f 84 69 02 00 00    	je     c0015938 <Vm::faultHandler(regs*)+0x345>
c00156cf:	e9 96 05 00 00       	jmp    c0015c6a <Vm::faultHandler(regs*)+0x677>
c00156d4:	80 fa 6f             	cmp    dl,0x6f
c00156d7:	0f 84 f4 03 00 00    	je     c0015ad1 <Vm::faultHandler(regs*)+0x4de>
c00156dd:	0f 82 59 03 00 00    	jb     c0015a3c <Vm::faultHandler(regs*)+0x449>
c00156e3:	80 fa 9c             	cmp    dl,0x9c
c00156e6:	0f 84 2f 01 00 00    	je     c001581b <Vm::faultHandler(regs*)+0x228>
c00156ec:	e9 79 05 00 00       	jmp    c0015c6a <Vm::faultHandler(regs*)+0x677>
c00156f1:	80 fa ec             	cmp    dl,0xec
c00156f4:	0f 84 14 05 00 00    	je     c0015c0e <Vm::faultHandler(regs*)+0x61b>
c00156fa:	77 7b                	ja     c0015777 <Vm::faultHandler(regs*)+0x184>
c00156fc:	80 fa e4             	cmp    dl,0xe4
c00156ff:	0f 84 93 04 00 00    	je     c0015b98 <Vm::faultHandler(regs*)+0x5a5>
c0015705:	77 53                	ja     c001575a <Vm::faultHandler(regs*)+0x167>
c0015707:	80 fa cd             	cmp    dl,0xcd
c001570a:	0f 84 d9 01 00 00    	je     c00158e9 <Vm::faultHandler(regs*)+0x2f6>
c0015710:	80 fa cf             	cmp    dl,0xcf
c0015713:	0f 85 51 05 00 00    	jne    c0015c6a <Vm::faultHandler(regs*)+0x677>
c0015719:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001571c:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001571f:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0015723:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0015726:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001572a:	81 ca 00 02 02 00    	or     edx,0x20200
c0015730:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0015733:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0015737:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001573d:	66 c1 e8 09          	shr    ax,0x9
c0015741:	83 e0 01             	and    eax,0x1
c0015744:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0015747:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001574a:	83 c0 06             	add    eax,0x6
c001574d:	25 ff ff 00 00       	and    eax,0xffff
c0015752:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0015755:	e9 0c 05 00 00       	jmp    c0015c66 <Vm::faultHandler(regs*)+0x673>
c001575a:	80 fa e6             	cmp    dl,0xe6
c001575d:	0f 84 7f 04 00 00    	je     c0015be2 <Vm::faultHandler(regs*)+0x5ef>
c0015763:	0f 82 4b 04 00 00    	jb     c0015bb4 <Vm::faultHandler(regs*)+0x5c1>
c0015769:	80 fa e7             	cmp    dl,0xe7
c001576c:	0f 84 87 04 00 00    	je     c0015bf9 <Vm::faultHandler(regs*)+0x606>
c0015772:	e9 f3 04 00 00       	jmp    c0015c6a <Vm::faultHandler(regs*)+0x677>
c0015777:	80 fa ef             	cmp    dl,0xef
c001577a:	0f 84 d1 04 00 00    	je     c0015c51 <Vm::faultHandler(regs*)+0x65e>
c0015780:	77 28                	ja     c00157aa <Vm::faultHandler(regs*)+0x1b7>
c0015782:	80 fa ed             	cmp    dl,0xed
c0015785:	0f 84 9f 04 00 00    	je     c0015c2a <Vm::faultHandler(regs*)+0x637>
c001578b:	80 fa ee             	cmp    dl,0xee
c001578e:	0f 85 d6 04 00 00    	jne    c0015c6a <Vm::faultHandler(regs*)+0x677>
c0015794:	50                   	push   eax
c0015795:	50                   	push   eax
c0015796:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001579a:	50                   	push   eax
c001579b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001579f:	50                   	push   eax
c00157a0:	e8 a3 f9 ff ff       	call   c0015148 <Vm::outbv(unsigned short, unsigned char)>
c00157a5:	e9 9f 04 00 00       	jmp    c0015c49 <Vm::faultHandler(regs*)+0x656>
c00157aa:	80 fa fa             	cmp    dl,0xfa
c00157ad:	0f 84 69 01 00 00    	je     c001591c <Vm::faultHandler(regs*)+0x329>
c00157b3:	80 fa fb             	cmp    dl,0xfb
c00157b6:	0f 84 6e 01 00 00    	je     c001592a <Vm::faultHandler(regs*)+0x337>
c00157bc:	80 fa f3             	cmp    dl,0xf3
c00157bf:	0f 85 a5 04 00 00    	jne    c0015c6a <Vm::faultHandler(regs*)+0x677>
c00157c5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00157c8:	e9 c0 fe ff ff       	jmp    c001568d <Vm::faultHandler(regs*)+0x9a>
c00157cd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00157d0:	be 02 00 00 00       	mov    esi,0x2
c00157d5:	e9 b3 fe ff ff       	jmp    c001568d <Vm::faultHandler(regs*)+0x9a>
c00157da:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00157dd:	be 03 00 00 00       	mov    esi,0x3
c00157e2:	e9 a6 fe ff ff       	jmp    c001568d <Vm::faultHandler(regs*)+0x9a>
c00157e7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00157ea:	be 04 00 00 00       	mov    esi,0x4
c00157ef:	e9 99 fe ff ff       	jmp    c001568d <Vm::faultHandler(regs*)+0x9a>
c00157f4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00157f7:	be 05 00 00 00       	mov    esi,0x5
c00157fc:	e9 8c fe ff ff       	jmp    c001568d <Vm::faultHandler(regs*)+0x9a>
c0015801:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015804:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0015809:	e9 7f fe ff ff       	jmp    c001568d <Vm::faultHandler(regs*)+0x9a>
c001580e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015811:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0015816:	e9 72 fe ff ff       	jmp    c001568d <Vm::faultHandler(regs*)+0x9a>
c001581b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001581e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015822:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015827:	74 30                	je     c0015859 <Vm::faultHandler(regs*)+0x266>
c0015829:	83 e9 04             	sub    ecx,0x4
c001582c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0015832:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0015838:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001583b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001583e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015844:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0015848:	0f 84 15 04 00 00    	je     c0015c63 <Vm::faultHandler(regs*)+0x670>
c001584e:	80 ce 02             	or     dh,0x2
c0015851:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0015854:	e9 0a 04 00 00       	jmp    c0015c63 <Vm::faultHandler(regs*)+0x670>
c0015859:	83 e9 02             	sub    ecx,0x2
c001585c:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0015862:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0015865:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0015869:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001586f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0015873:	74 05                	je     c001587a <Vm::faultHandler(regs*)+0x287>
c0015875:	80 ce 02             	or     dh,0x2
c0015878:	eb 03                	jmp    c001587d <Vm::faultHandler(regs*)+0x28a>
c001587a:	80 e6 fd             	and    dh,0xfd
c001587d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0015881:	e9 dd 03 00 00       	jmp    c0015c63 <Vm::faultHandler(regs*)+0x670>
c0015886:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001588b:	74 2a                	je     c00158b7 <Vm::faultHandler(regs*)+0x2c4>
c001588d:	8b 10                	mov    edx,DWORD PTR [eax]
c001588f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0015895:	81 ca 00 02 02 00    	or     edx,0x20200
c001589b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001589e:	8b 00                	mov    eax,DWORD PTR [eax]
c00158a0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00158a6:	c1 e8 09             	shr    eax,0x9
c00158a9:	83 e0 01             	and    eax,0x1
c00158ac:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00158af:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00158b2:	83 c0 04             	add    eax,0x4
c00158b5:	eb 25                	jmp    c00158dc <Vm::faultHandler(regs*)+0x2e9>
c00158b7:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00158ba:	81 ca 00 02 02 00    	or     edx,0x20200
c00158c0:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00158c3:	66 8b 00             	mov    ax,WORD PTR [eax]
c00158c6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00158cc:	66 c1 e8 09          	shr    ax,0x9
c00158d0:	83 e0 01             	and    eax,0x1
c00158d3:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00158d6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00158d9:	83 c0 02             	add    eax,0x2
c00158dc:	25 ff ff 00 00       	and    eax,0xffff
c00158e1:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00158e4:	e9 7a 03 00 00       	jmp    c0015c63 <Vm::faultHandler(regs*)+0x670>
c00158e9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00158ed:	3c ee                	cmp    al,0xee
c00158ef:	75 10                	jne    c0015901 <Vm::faultHandler(regs*)+0x30e>
c00158f1:	83 ec 0c             	sub    esp,0xc
c00158f4:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00158f7:	e8 e9 f8 ff ff       	call   c00151e5 <Vm::mainloop3(unsigned long)>
c00158fc:	e9 4b 03 00 00       	jmp    c0015c4c <Vm::faultHandler(regs*)+0x659>
c0015901:	83 ec 0c             	sub    esp,0xc
c0015904:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001590c:	51                   	push   ecx
c001590d:	50                   	push   eax
c001590e:	53                   	push   ebx
c001590f:	e8 e1 fb ff ff       	call   c00154f5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0015914:	83 c4 20             	add    esp,0x20
c0015917:	e9 4a 03 00 00       	jmp    c0015c66 <Vm::faultHandler(regs*)+0x673>
c001591c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015921:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0015925:	e9 39 03 00 00       	jmp    c0015c63 <Vm::faultHandler(regs*)+0x670>
c001592a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001592f:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0015933:	e9 2b 03 00 00       	jmp    c0015c63 <Vm::faultHandler(regs*)+0x670>
c0015938:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001593b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015940:	74 2b                	je     c001596d <Vm::faultHandler(regs*)+0x37a>
c0015942:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0015949:	76 22                	jbe    c001596d <Vm::faultHandler(regs*)+0x37a>
c001594b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001594f:	50                   	push   eax
c0015950:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015954:	50                   	push   eax
c0015955:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015959:	50                   	push   eax
c001595a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001595e:	50                   	push   eax
c001595f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015963:	50                   	push   eax
c0015964:	6a 6c                	push   0x6c
c0015966:	6a 6c                	push   0x6c
c0015968:	e9 b9 01 00 00       	jmp    c0015b26 <Vm::faultHandler(regs*)+0x533>
c001596d:	83 ec 0c             	sub    esp,0xc
c0015970:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015974:	0f b7 f6             	movzx  esi,si
c0015977:	50                   	push   eax
c0015978:	e8 b8 f7 ff ff       	call   c0015135 <Vm::inbv(unsigned short)>
c001597d:	83 c4 0c             	add    esp,0xc
c0015980:	0f b6 c0             	movzx  eax,al
c0015983:	50                   	push   eax
c0015984:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0015988:	50                   	push   eax
c0015989:	56                   	push   esi
c001598a:	e8 24 fc ff ff       	call   c00155b3 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001598f:	83 c4 10             	add    esp,0x10
c0015992:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015995:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015999:	74 03                	je     c001599e <Vm::faultHandler(regs*)+0x3ab>
c001599b:	48                   	dec    eax
c001599c:	eb 01                	jmp    c001599f <Vm::faultHandler(regs*)+0x3ac>
c001599e:	40                   	inc    eax
c001599f:	0f b7 c0             	movzx  eax,ax
c00159a2:	e9 8d 00 00 00       	jmp    c0015a34 <Vm::faultHandler(regs*)+0x441>
c00159a7:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00159aa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00159ad:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00159b2:	74 29                	je     c00159dd <Vm::faultHandler(regs*)+0x3ea>
c00159b4:	3d ff ff 00 00       	cmp    eax,0xffff
c00159b9:	76 22                	jbe    c00159dd <Vm::faultHandler(regs*)+0x3ea>
c00159bb:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00159bf:	50                   	push   eax
c00159c0:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00159c4:	50                   	push   eax
c00159c5:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00159c9:	50                   	push   eax
c00159ca:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00159ce:	50                   	push   eax
c00159cf:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00159d3:	50                   	push   eax
c00159d4:	6a 6d                	push   0x6d
c00159d6:	6a 6d                	push   0x6d
c00159d8:	e9 49 01 00 00       	jmp    c0015b26 <Vm::faultHandler(regs*)+0x533>
c00159dd:	0f b7 c8             	movzx  ecx,ax
c00159e0:	0f b7 f6             	movzx  esi,si
c00159e3:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00159e6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00159eb:	74 20                	je     c0015a0d <Vm::faultHandler(regs*)+0x41a>
c00159ed:	ed                   	in     eax,dx
c00159ee:	55                   	push   ebp
c00159ef:	50                   	push   eax
c00159f0:	51                   	push   ecx
c00159f1:	56                   	push   esi
c00159f2:	e8 e7 fb ff ff       	call   c00155de <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00159f7:	83 c4 10             	add    esp,0x10
c00159fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00159fd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015a01:	74 05                	je     c0015a08 <Vm::faultHandler(regs*)+0x415>
c0015a03:	83 e8 04             	sub    eax,0x4
c0015a06:	eb 27                	jmp    c0015a2f <Vm::faultHandler(regs*)+0x43c>
c0015a08:	83 c0 04             	add    eax,0x4
c0015a0b:	eb 22                	jmp    c0015a2f <Vm::faultHandler(regs*)+0x43c>
c0015a0d:	66 ed                	in     ax,dx
c0015a0f:	0f b7 c0             	movzx  eax,ax
c0015a12:	57                   	push   edi
c0015a13:	50                   	push   eax
c0015a14:	51                   	push   ecx
c0015a15:	56                   	push   esi
c0015a16:	e8 ad fb ff ff       	call   c00155c8 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0015a1b:	83 c4 10             	add    esp,0x10
c0015a1e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015a21:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015a25:	74 05                	je     c0015a2c <Vm::faultHandler(regs*)+0x439>
c0015a27:	83 e8 02             	sub    eax,0x2
c0015a2a:	eb 03                	jmp    c0015a2f <Vm::faultHandler(regs*)+0x43c>
c0015a2c:	83 c0 02             	add    eax,0x2
c0015a2f:	25 ff ff 00 00       	and    eax,0xffff
c0015a34:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0015a37:	e9 27 02 00 00       	jmp    c0015c63 <Vm::faultHandler(regs*)+0x670>
c0015a3c:	8d 46 ff             	lea    eax,[esi-0x1]
c0015a3f:	3c 05                	cmp    al,0x5
c0015a41:	77 24                	ja     c0015a67 <Vm::faultHandler(regs*)+0x474>
c0015a43:	0f b6 c0             	movzx  eax,al
c0015a46:	ff 24 85 04 05 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfafc]
c0015a4d:	0f b7 fd             	movzx  edi,bp
c0015a50:	eb 15                	jmp    c0015a67 <Vm::faultHandler(regs*)+0x474>
c0015a52:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0015a56:	eb 0f                	jmp    c0015a67 <Vm::faultHandler(regs*)+0x474>
c0015a58:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0015a5c:	eb 09                	jmp    c0015a67 <Vm::faultHandler(regs*)+0x474>
c0015a5e:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0015a62:	eb 03                	jmp    c0015a67 <Vm::faultHandler(regs*)+0x474>
c0015a64:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0015a67:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015a6a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015a6f:	74 29                	je     c0015a9a <Vm::faultHandler(regs*)+0x4a7>
c0015a71:	3d ff ff 00 00       	cmp    eax,0xffff
c0015a76:	76 22                	jbe    c0015a9a <Vm::faultHandler(regs*)+0x4a7>
c0015a78:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015a7c:	50                   	push   eax
c0015a7d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015a81:	50                   	push   eax
c0015a82:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015a86:	50                   	push   eax
c0015a87:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015a8b:	50                   	push   eax
c0015a8c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015a90:	50                   	push   eax
c0015a91:	6a 6e                	push   0x6e
c0015a93:	6a 6e                	push   0x6e
c0015a95:	e9 8c 00 00 00       	jmp    c0015b26 <Vm::faultHandler(regs*)+0x533>
c0015a9a:	0f b7 c0             	movzx  eax,ax
c0015a9d:	52                   	push   edx
c0015a9e:	52                   	push   edx
c0015a9f:	50                   	push   eax
c0015aa0:	57                   	push   edi
c0015aa1:	e8 d9 fa ff ff       	call   c001557f <Vm::readByteFromReal(unsigned short, unsigned short)>
c0015aa6:	59                   	pop    ecx
c0015aa7:	0f b6 c0             	movzx  eax,al
c0015aaa:	5e                   	pop    esi
c0015aab:	50                   	push   eax
c0015aac:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015ab0:	50                   	push   eax
c0015ab1:	e8 92 f6 ff ff       	call   c0015148 <Vm::outbv(unsigned short, unsigned char)>
c0015ab6:	83 c4 10             	add    esp,0x10
c0015ab9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015abc:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015ac0:	74 03                	je     c0015ac5 <Vm::faultHandler(regs*)+0x4d2>
c0015ac2:	48                   	dec    eax
c0015ac3:	eb 01                	jmp    c0015ac6 <Vm::faultHandler(regs*)+0x4d3>
c0015ac5:	40                   	inc    eax
c0015ac6:	0f b7 c0             	movzx  eax,ax
c0015ac9:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0015acc:	e9 92 01 00 00       	jmp    c0015c63 <Vm::faultHandler(regs*)+0x670>
c0015ad1:	8d 46 ff             	lea    eax,[esi-0x1]
c0015ad4:	3c 05                	cmp    al,0x5
c0015ad6:	77 1f                	ja     c0015af7 <Vm::faultHandler(regs*)+0x504>
c0015ad8:	0f b6 c0             	movzx  eax,al
c0015adb:	ff 24 85 1c 05 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfae4]
c0015ae2:	89 ef                	mov    edi,ebp
c0015ae4:	eb 11                	jmp    c0015af7 <Vm::faultHandler(regs*)+0x504>
c0015ae6:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0015ae9:	eb 0c                	jmp    c0015af7 <Vm::faultHandler(regs*)+0x504>
c0015aeb:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0015aee:	eb 07                	jmp    c0015af7 <Vm::faultHandler(regs*)+0x504>
c0015af0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0015af3:	eb 02                	jmp    c0015af7 <Vm::faultHandler(regs*)+0x504>
c0015af5:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0015af7:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0015afa:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015aff:	74 37                	je     c0015b38 <Vm::faultHandler(regs*)+0x545>
c0015b01:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0015b07:	76 2f                	jbe    c0015b38 <Vm::faultHandler(regs*)+0x545>
c0015b09:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015b0d:	50                   	push   eax
c0015b0e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015b12:	50                   	push   eax
c0015b13:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015b17:	50                   	push   eax
c0015b18:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015b1c:	50                   	push   eax
c0015b1d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015b21:	50                   	push   eax
c0015b22:	6a 6f                	push   0x6f
c0015b24:	6a 6f                	push   0x6f
c0015b26:	68 aa 04 02 c0       	push   0xc00204aa
c0015b2b:	e8 da 4a ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0015b30:	83 c4 20             	add    esp,0x20
c0015b33:	e9 86 01 00 00       	jmp    c0015cbe <Vm::faultHandler(regs*)+0x6cb>
c0015b38:	0f b7 d7             	movzx  edx,di
c0015b3b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0015b3e:	0f b7 c6             	movzx  eax,si
c0015b41:	81 e1 00 04 00 00    	and    ecx,0x400
c0015b47:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0015b4a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015b4f:	74 1d                	je     c0015b6e <Vm::faultHandler(regs*)+0x57b>
c0015b51:	55                   	push   ebp
c0015b52:	55                   	push   ebp
c0015b53:	50                   	push   eax
c0015b54:	52                   	push   edx
c0015b55:	e8 48 fa ff ff       	call   c00155a2 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0015b5a:	83 c4 10             	add    esp,0x10
c0015b5d:	89 fa                	mov    edx,edi
c0015b5f:	ef                   	out    dx,eax
c0015b60:	85 c9                	test   ecx,ecx
c0015b62:	74 05                	je     c0015b69 <Vm::faultHandler(regs*)+0x576>
c0015b64:	83 ee 04             	sub    esi,0x4
c0015b67:	eb 21                	jmp    c0015b8a <Vm::faultHandler(regs*)+0x597>
c0015b69:	83 c6 04             	add    esi,0x4
c0015b6c:	eb 1c                	jmp    c0015b8a <Vm::faultHandler(regs*)+0x597>
c0015b6e:	55                   	push   ebp
c0015b6f:	55                   	push   ebp
c0015b70:	50                   	push   eax
c0015b71:	52                   	push   edx
c0015b72:	e8 19 fa ff ff       	call   c0015590 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0015b77:	83 c4 10             	add    esp,0x10
c0015b7a:	89 fa                	mov    edx,edi
c0015b7c:	66 ef                	out    dx,ax
c0015b7e:	85 c9                	test   ecx,ecx
c0015b80:	74 05                	je     c0015b87 <Vm::faultHandler(regs*)+0x594>
c0015b82:	83 ee 02             	sub    esi,0x2
c0015b85:	eb 03                	jmp    c0015b8a <Vm::faultHandler(regs*)+0x597>
c0015b87:	83 c6 02             	add    esi,0x2
c0015b8a:	81 e6 ff ff 00 00    	and    esi,0xffff
c0015b90:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0015b93:	e9 cb 00 00 00       	jmp    c0015c63 <Vm::faultHandler(regs*)+0x670>
c0015b98:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0015b9f:	83 ec 0c             	sub    esp,0xc
c0015ba2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015ba6:	50                   	push   eax
c0015ba7:	e8 89 f5 ff ff       	call   c0015135 <Vm::inbv(unsigned short)>
c0015bac:	0f b6 c0             	movzx  eax,al
c0015baf:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0015bb2:	eb 3f                	jmp    c0015bf3 <Vm::faultHandler(regs*)+0x600>
c0015bb4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015bb9:	74 07                	je     c0015bc2 <Vm::faultHandler(regs*)+0x5cf>
c0015bbb:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015bbf:	ed                   	in     eax,dx
c0015bc0:	eb 14                	jmp    c0015bd6 <Vm::faultHandler(regs*)+0x5e3>
c0015bc2:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0015bc5:	66 31 f6             	xor    si,si
c0015bc8:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0015bcb:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015bcf:	66 ed                	in     ax,dx
c0015bd1:	0f b7 c0             	movzx  eax,ax
c0015bd4:	09 f0                	or     eax,esi
c0015bd6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0015bd9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0015bdd:	e9 84 00 00 00       	jmp    c0015c66 <Vm::faultHandler(regs*)+0x673>
c0015be2:	52                   	push   edx
c0015be3:	52                   	push   edx
c0015be4:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0015be8:	50                   	push   eax
c0015be9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015bed:	50                   	push   eax
c0015bee:	e8 55 f5 ff ff       	call   c0015148 <Vm::outbv(unsigned short, unsigned char)>
c0015bf3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0015bf7:	eb 53                	jmp    c0015c4c <Vm::faultHandler(regs*)+0x659>
c0015bf9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0015bfc:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015c00:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015c05:	74 03                	je     c0015c0a <Vm::faultHandler(regs*)+0x617>
c0015c07:	ef                   	out    dx,eax
c0015c08:	eb cf                	jmp    c0015bd9 <Vm::faultHandler(regs*)+0x5e6>
c0015c0a:	66 ef                	out    dx,ax
c0015c0c:	eb cb                	jmp    c0015bd9 <Vm::faultHandler(regs*)+0x5e6>
c0015c0e:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0015c15:	83 ec 0c             	sub    esp,0xc
c0015c18:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015c1c:	50                   	push   eax
c0015c1d:	e8 13 f5 ff ff       	call   c0015135 <Vm::inbv(unsigned short)>
c0015c22:	0f b6 c0             	movzx  eax,al
c0015c25:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0015c28:	eb 1f                	jmp    c0015c49 <Vm::faultHandler(regs*)+0x656>
c0015c2a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0015c2d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015c32:	74 03                	je     c0015c37 <Vm::faultHandler(regs*)+0x644>
c0015c34:	ed                   	in     eax,dx
c0015c35:	eb 0d                	jmp    c0015c44 <Vm::faultHandler(regs*)+0x651>
c0015c37:	66 ed                	in     ax,dx
c0015c39:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0015c3c:	0f b7 c0             	movzx  eax,ax
c0015c3f:	66 31 d2             	xor    dx,dx
c0015c42:	09 d0                	or     eax,edx
c0015c44:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0015c47:	eb 1a                	jmp    c0015c63 <Vm::faultHandler(regs*)+0x670>
c0015c49:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015c4c:	83 c4 10             	add    esp,0x10
c0015c4f:	eb 15                	jmp    c0015c66 <Vm::faultHandler(regs*)+0x673>
c0015c51:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0015c54:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0015c57:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015c5c:	74 03                	je     c0015c61 <Vm::faultHandler(regs*)+0x66e>
c0015c5e:	ef                   	out    dx,eax
c0015c5f:	eb 02                	jmp    c0015c63 <Vm::faultHandler(regs*)+0x670>
c0015c61:	66 ef                	out    dx,ax
c0015c63:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015c66:	b0 01                	mov    al,0x1
c0015c68:	eb 56                	jmp    c0015cc0 <Vm::faultHandler(regs*)+0x6cd>
c0015c6a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015c6e:	50                   	push   eax
c0015c6f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015c73:	50                   	push   eax
c0015c74:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015c78:	50                   	push   eax
c0015c79:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015c7d:	50                   	push   eax
c0015c7e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015c82:	50                   	push   eax
c0015c83:	52                   	push   edx
c0015c84:	52                   	push   edx
c0015c85:	68 d7 04 02 c0       	push   0xc00204d7
c0015c8a:	e8 7b 49 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0015c8f:	83 c4 20             	add    esp,0x20
c0015c92:	83 ec 0c             	sub    esp,0xc
c0015c95:	6a 60                	push   0x60
c0015c97:	e8 99 f4 ff ff       	call   c0015135 <Vm::inbv(unsigned short)>
c0015c9c:	83 c4 10             	add    esp,0x10
c0015c9f:	3c 1c                	cmp    al,0x1c
c0015ca1:	74 04                	je     c0015ca7 <Vm::faultHandler(regs*)+0x6b4>
c0015ca3:	3c 5a                	cmp    al,0x5a
c0015ca5:	75 eb                	jne    c0015c92 <Vm::faultHandler(regs*)+0x69f>
c0015ca7:	3c 1c                	cmp    al,0x1c
c0015ca9:	74 04                	je     c0015caf <Vm::faultHandler(regs*)+0x6bc>
c0015cab:	3c 5a                	cmp    al,0x5a
c0015cad:	75 0f                	jne    c0015cbe <Vm::faultHandler(regs*)+0x6cb>
c0015caf:	83 ec 0c             	sub    esp,0xc
c0015cb2:	6a 60                	push   0x60
c0015cb4:	e8 7c f4 ff ff       	call   c0015135 <Vm::inbv(unsigned short)>
c0015cb9:	83 c4 10             	add    esp,0x10
c0015cbc:	eb e9                	jmp    c0015ca7 <Vm::faultHandler(regs*)+0x6b4>
c0015cbe:	31 c0                	xor    eax,eax
c0015cc0:	83 c4 1c             	add    esp,0x1c
c0015cc3:	5b                   	pop    ebx
c0015cc4:	5e                   	pop    esi
c0015cc5:	5f                   	pop    edi
c0015cc6:	5d                   	pop    ebp
c0015cc7:	c3                   	ret    

c0015cc8 <noCopro(unsigned long)>:
c0015cc8:	c3                   	ret    

c0015cc9 <nmiHandler(regs*, void*)>:
c0015cc9:	83 ec 0c             	sub    esp,0xc
c0015ccc:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0015cd1:	83 ec 0c             	sub    esp,0xc
c0015cd4:	50                   	push   eax
c0015cd5:	e8 ba 13 ff ff       	call   c0007094 <Computer::handleNMI()>
c0015cda:	83 c4 10             	add    esp,0x10
c0015cdd:	90                   	nop
c0015cde:	83 c4 0c             	add    esp,0xc
c0015ce1:	c3                   	ret    

c0015ce2 <doubleFault(regs*, void*)>:
c0015ce2:	55                   	push   ebp
c0015ce3:	89 e5                	mov    ebp,esp
c0015ce5:	83 ec 08             	sub    esp,0x8
c0015ce8:	83 ec 0c             	sub    esp,0xc
c0015ceb:	68 34 05 02 c0       	push   0xc0020534
c0015cf0:	e8 a6 a6 ff ff       	call   c001039b <KePanic(char const*)>
c0015cf5:	83 c4 10             	add    esp,0x10
c0015cf8:	90                   	nop
c0015cf9:	c9                   	leave  
c0015cfa:	c3                   	ret    

c0015cfb <displayDebugInfo(regs*)>:
c0015cfb:	83 ec 1c             	sub    esp,0x1c
c0015cfe:	0f 20 c0             	mov    eax,cr0
c0015d01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d05:	0f 20 d0             	mov    eax,cr2
c0015d08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015d0c:	0f 20 d8             	mov    eax,cr3
c0015d0f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015d13:	0f 20 e0             	mov    eax,cr4
c0015d16:	89 04 24             	mov    DWORD PTR [esp],eax
c0015d19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d1d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015d20:	83 ec 08             	sub    esp,0x8
c0015d23:	50                   	push   eax
c0015d24:	68 50 05 02 c0       	push   0xc0020550
c0015d29:	e8 dc 48 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0015d2e:	83 c4 10             	add    esp,0x10
c0015d31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d35:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015d38:	83 ec 08             	sub    esp,0x8
c0015d3b:	50                   	push   eax
c0015d3c:	68 41 05 02 c0       	push   0xc0020541
c0015d41:	e8 c4 48 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0015d46:	83 c4 10             	add    esp,0x10
c0015d49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d4d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015d50:	83 ec 08             	sub    esp,0x8
c0015d53:	50                   	push   eax
c0015d54:	68 4c 05 02 c0       	push   0xc002054c
c0015d59:	e8 ac 48 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0015d5e:	83 c4 10             	add    esp,0x10
c0015d61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d65:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015d68:	83 ec 08             	sub    esp,0x8
c0015d6b:	50                   	push   eax
c0015d6c:	68 5b 05 02 c0       	push   0xc002055b
c0015d71:	e8 94 48 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0015d76:	83 c4 10             	add    esp,0x10
c0015d79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d7d:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0015d80:	83 ec 08             	sub    esp,0x8
c0015d83:	50                   	push   eax
c0015d84:	68 66 05 02 c0       	push   0xc0020566
c0015d89:	e8 7c 48 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0015d8e:	83 c4 10             	add    esp,0x10
c0015d91:	83 ec 08             	sub    esp,0x8
c0015d94:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015d98:	68 71 05 02 c0       	push   0xc0020571
c0015d9d:	e8 68 48 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0015da2:	83 c4 10             	add    esp,0x10
c0015da5:	83 ec 08             	sub    esp,0x8
c0015da8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015dac:	68 7c 05 02 c0       	push   0xc002057c
c0015db1:	e8 54 48 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0015db6:	83 c4 10             	add    esp,0x10
c0015db9:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015dbe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015dc4:	83 ec 0c             	sub    esp,0xc
c0015dc7:	50                   	push   eax
c0015dc8:	e8 e0 26 ff ff       	call   c00084ad <setActiveTerminal(VgaText*)>
c0015dcd:	83 c4 10             	add    esp,0x10
c0015dd0:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015dd5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015ddb:	83 ec 08             	sub    esp,0x8
c0015dde:	68 87 05 02 c0       	push   0xc0020587
c0015de3:	50                   	push   eax
c0015de4:	e8 03 2a ff ff       	call   c00087ec <VgaText::puts(char const*)>
c0015de9:	83 c4 10             	add    esp,0x10
c0015dec:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015df1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015df7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015dfb:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0015dfe:	83 ec 08             	sub    esp,0x8
c0015e01:	52                   	push   edx
c0015e02:	50                   	push   eax
c0015e03:	e8 9e 29 ff ff       	call   c00087a6 <VgaText::putx(unsigned int)>
c0015e08:	83 c4 10             	add    esp,0x10
c0015e0b:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015e10:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015e16:	83 ec 08             	sub    esp,0x8
c0015e19:	68 95 05 02 c0       	push   0xc0020595
c0015e1e:	50                   	push   eax
c0015e1f:	e8 c8 29 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c0015e24:	83 c4 10             	add    esp,0x10
c0015e27:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015e2c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015e32:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0015e37:	8b 12                	mov    edx,DWORD PTR [edx]
c0015e39:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015e3c:	83 c2 0c             	add    edx,0xc
c0015e3f:	83 ec 08             	sub    esp,0x8
c0015e42:	52                   	push   edx
c0015e43:	50                   	push   eax
c0015e44:	e8 a3 29 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c0015e49:	83 c4 10             	add    esp,0x10
c0015e4c:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015e51:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015e57:	83 ec 08             	sub    esp,0x8
c0015e5a:	68 9e 05 02 c0       	push   0xc002059e
c0015e5f:	50                   	push   eax
c0015e60:	e8 87 29 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c0015e65:	83 c4 10             	add    esp,0x10
c0015e68:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015e6d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015e73:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015e77:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0015e7a:	83 ec 08             	sub    esp,0x8
c0015e7d:	52                   	push   edx
c0015e7e:	50                   	push   eax
c0015e7f:	e8 22 29 ff ff       	call   c00087a6 <VgaText::putx(unsigned int)>
c0015e84:	83 c4 10             	add    esp,0x10
c0015e87:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015e8c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015e92:	83 ec 08             	sub    esp,0x8
c0015e95:	68 a6 05 02 c0       	push   0xc00205a6
c0015e9a:	50                   	push   eax
c0015e9b:	e8 4c 29 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c0015ea0:	83 c4 10             	add    esp,0x10
c0015ea3:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015ea8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015eae:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015eb2:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0015eb5:	83 ec 08             	sub    esp,0x8
c0015eb8:	52                   	push   edx
c0015eb9:	50                   	push   eax
c0015eba:	e8 e7 28 ff ff       	call   c00087a6 <VgaText::putx(unsigned int)>
c0015ebf:	83 c4 10             	add    esp,0x10
c0015ec2:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015ec7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015ecd:	83 ec 08             	sub    esp,0x8
c0015ed0:	68 ae 05 02 c0       	push   0xc00205ae
c0015ed5:	50                   	push   eax
c0015ed6:	e8 11 29 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c0015edb:	83 c4 10             	add    esp,0x10
c0015ede:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015ee3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015ee9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015eed:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0015ef0:	83 ec 08             	sub    esp,0x8
c0015ef3:	52                   	push   edx
c0015ef4:	50                   	push   eax
c0015ef5:	e8 ac 28 ff ff       	call   c00087a6 <VgaText::putx(unsigned int)>
c0015efa:	83 c4 10             	add    esp,0x10
c0015efd:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015f02:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015f08:	83 ec 08             	sub    esp,0x8
c0015f0b:	68 b6 05 02 c0       	push   0xc00205b6
c0015f10:	50                   	push   eax
c0015f11:	e8 d6 28 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c0015f16:	83 c4 10             	add    esp,0x10
c0015f19:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015f1e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015f24:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015f28:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015f2b:	83 ec 08             	sub    esp,0x8
c0015f2e:	52                   	push   edx
c0015f2f:	50                   	push   eax
c0015f30:	e8 71 28 ff ff       	call   c00087a6 <VgaText::putx(unsigned int)>
c0015f35:	83 c4 10             	add    esp,0x10
c0015f38:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015f3d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015f43:	83 ec 08             	sub    esp,0x8
c0015f46:	68 be 05 02 c0       	push   0xc00205be
c0015f4b:	50                   	push   eax
c0015f4c:	e8 9b 28 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c0015f51:	83 c4 10             	add    esp,0x10
c0015f54:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015f59:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015f5f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015f63:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0015f66:	83 ec 08             	sub    esp,0x8
c0015f69:	52                   	push   edx
c0015f6a:	50                   	push   eax
c0015f6b:	e8 36 28 ff ff       	call   c00087a6 <VgaText::putx(unsigned int)>
c0015f70:	83 c4 10             	add    esp,0x10
c0015f73:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015f78:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015f7e:	83 ec 08             	sub    esp,0x8
c0015f81:	68 c6 05 02 c0       	push   0xc00205c6
c0015f86:	50                   	push   eax
c0015f87:	e8 60 28 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c0015f8c:	83 c4 10             	add    esp,0x10
c0015f8f:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015f94:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015f9a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015f9e:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0015fa1:	83 ec 08             	sub    esp,0x8
c0015fa4:	52                   	push   edx
c0015fa5:	50                   	push   eax
c0015fa6:	e8 fb 27 ff ff       	call   c00087a6 <VgaText::putx(unsigned int)>
c0015fab:	83 c4 10             	add    esp,0x10
c0015fae:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015fb3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015fb9:	83 ec 08             	sub    esp,0x8
c0015fbc:	68 ce 05 02 c0       	push   0xc00205ce
c0015fc1:	50                   	push   eax
c0015fc2:	e8 25 28 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c0015fc7:	83 c4 10             	add    esp,0x10
c0015fca:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015fcf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015fd5:	83 ec 08             	sub    esp,0x8
c0015fd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015fdc:	50                   	push   eax
c0015fdd:	e8 c4 27 ff ff       	call   c00087a6 <VgaText::putx(unsigned int)>
c0015fe2:	83 c4 10             	add    esp,0x10
c0015fe5:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015fea:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015ff0:	83 ec 08             	sub    esp,0x8
c0015ff3:	68 d7 05 02 c0       	push   0xc00205d7
c0015ff8:	50                   	push   eax
c0015ff9:	e8 ee 27 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c0015ffe:	83 c4 10             	add    esp,0x10
c0016001:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016006:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001600c:	83 ec 08             	sub    esp,0x8
c001600f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016013:	50                   	push   eax
c0016014:	e8 8d 27 ff ff       	call   c00087a6 <VgaText::putx(unsigned int)>
c0016019:	83 c4 10             	add    esp,0x10
c001601c:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016021:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016027:	83 ec 08             	sub    esp,0x8
c001602a:	68 df 05 02 c0       	push   0xc00205df
c001602f:	50                   	push   eax
c0016030:	e8 b7 27 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c0016035:	83 c4 10             	add    esp,0x10
c0016038:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001603d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016043:	83 ec 08             	sub    esp,0x8
c0016046:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001604a:	50                   	push   eax
c001604b:	e8 56 27 ff ff       	call   c00087a6 <VgaText::putx(unsigned int)>
c0016050:	83 c4 10             	add    esp,0x10
c0016053:	fa                   	cli    
c0016054:	f4                   	hlt    
c0016055:	eb fe                	jmp    c0016055 <displayDebugInfo(regs*)+0x35a>

c0016057 <HalSystemIdle()>:
c0016057:	56                   	push   esi
c0016058:	53                   	push   ebx
c0016059:	83 ec 14             	sub    esp,0x14
c001605c:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016061:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016067:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c001606d:	83 e0 04             	and    eax,0x4
c0016070:	84 c0                	test   al,al
c0016072:	0f 95 c0             	setne  al
c0016075:	84 c0                	test   al,al
c0016077:	74 4c                	je     c00160c5 <HalSystemIdle()+0x6e>
c0016079:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001607e:	83 ec 08             	sub    esp,0x8
c0016081:	68 e1 00 00 00       	push   0xe1
c0016086:	50                   	push   eax
c0016087:	e8 20 0e ff ff       	call   c0006eac <Computer::rdmsr(unsigned int)>
c001608c:	83 c4 10             	add    esp,0x10
c001608f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016093:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016097:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00160a0:	83 e2 02             	and    edx,0x2
c00160a3:	89 d3                	mov    ebx,edx
c00160a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00160a9:	83 e2 00             	and    edx,0x0
c00160ac:	89 d6                	mov    esi,edx
c00160ae:	56                   	push   esi
c00160af:	53                   	push   ebx
c00160b0:	68 e1 00 00 00       	push   0xe1
c00160b5:	50                   	push   eax
c00160b6:	e8 1d 0e ff ff       	call   c0006ed8 <Computer::wrmsr(unsigned int, unsigned long long)>
c00160bb:	83 c4 10             	add    esp,0x10
c00160be:	e8 d1 a0 fe ff       	call   c0000194 <doTPAUSE>
c00160c3:	eb 01                	jmp    c00160c6 <HalSystemIdle()+0x6f>
c00160c5:	f4                   	hlt    
c00160c6:	90                   	nop
c00160c7:	83 c4 14             	add    esp,0x14
c00160ca:	5b                   	pop    ebx
c00160cb:	5e                   	pop    esi
c00160cc:	c3                   	ret    

c00160cd <displayProgramFault(char const*)>:
c00160cd:	83 ec 0c             	sub    esp,0xc
c00160d0:	83 ec 0c             	sub    esp,0xc
c00160d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160d7:	e8 2e 45 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c00160dc:	83 c4 10             	add    esp,0x10
c00160df:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00160e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00160e6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00160e9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00160ef:	85 c0                	test   eax,eax
c00160f1:	74 21                	je     c0016114 <displayProgramFault(char const*)+0x47>
c00160f3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00160f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00160fa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00160fd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016103:	6a 04                	push   0x4
c0016105:	6a 0f                	push   0xf
c0016107:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001610b:	50                   	push   eax
c001610c:	e8 4d 27 ff ff       	call   c000885e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0016111:	83 c4 10             	add    esp,0x10
c0016114:	90                   	nop
c0016115:	83 c4 0c             	add    esp,0xc
c0016118:	c3                   	ret    

c0016119 <gpFault(regs*, void*)>:
c0016119:	83 ec 1c             	sub    esp,0x1c
c001611c:	c7 05 10 72 02 c0 f3 55 01 c0 	mov    DWORD PTR ds:0xc0027210,0xc00155f3
c0016126:	a1 10 72 02 c0       	mov    eax,ds:0xc0027210
c001612b:	85 c0                	test   eax,eax
c001612d:	74 1c                	je     c001614b <gpFault(regs*, void*)+0x32>
c001612f:	a1 10 72 02 c0       	mov    eax,ds:0xc0027210
c0016134:	83 ec 0c             	sub    esp,0xc
c0016137:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001613b:	ff d0                	call   eax
c001613d:	83 c4 10             	add    esp,0x10
c0016140:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016144:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0016149:	75 2e                	jne    c0016179 <gpFault(regs*, void*)+0x60>
c001614b:	83 ec 0c             	sub    esp,0xc
c001614e:	68 e7 05 02 c0       	push   0xc00205e7
c0016153:	e8 75 ff ff ff       	call   c00160cd <displayProgramFault(char const*)>
c0016158:	83 c4 10             	add    esp,0x10
c001615b:	83 ec 0c             	sub    esp,0xc
c001615e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016162:	e8 94 fb ff ff       	call   c0015cfb <displayDebugInfo(regs*)>
c0016167:	83 c4 10             	add    esp,0x10
c001616a:	83 ec 0c             	sub    esp,0xc
c001616d:	6a 00                	push   0x0
c001616f:	e8 74 ee ff ff       	call   c0014fe8 <Thr::terminateFromIRQ(int)>
c0016174:	83 c4 10             	add    esp,0x10
c0016177:	eb 01                	jmp    c001617a <gpFault(regs*, void*)+0x61>
c0016179:	90                   	nop
c001617a:	83 c4 1c             	add    esp,0x1c
c001617d:	c3                   	ret    

c001617e <pgFault(regs*, void*)>:
c001617e:	83 ec 1c             	sub    esp,0x1c
c0016181:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016185:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0016188:	0f 20 d0             	mov    eax,cr2
c001618b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001618f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016193:	83 ec 04             	sub    esp,0x4
c0016196:	52                   	push   edx
c0016197:	50                   	push   eax
c0016198:	68 c4 06 02 c0       	push   0xc00206c4
c001619d:	e8 68 44 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c00161a2:	83 c4 10             	add    esp,0x10
c00161a5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00161aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00161ac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00161af:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00161b5:	0f 20 d2             	mov    edx,cr2
c00161b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00161bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00161c0:	83 ec 08             	sub    esp,0x8
c00161c3:	52                   	push   edx
c00161c4:	50                   	push   eax
c00161c5:	e8 36 40 ff ff       	call   c000a200 <VAS::tryLoadBackOffDisk(unsigned long)>
c00161ca:	83 c4 10             	add    esp,0x10
c00161cd:	84 c0                	test   al,al
c00161cf:	75 2e                	jne    c00161ff <pgFault(regs*, void*)+0x81>
c00161d1:	83 ec 0c             	sub    esp,0xc
c00161d4:	68 00 06 02 c0       	push   0xc0020600
c00161d9:	e8 ef fe ff ff       	call   c00160cd <displayProgramFault(char const*)>
c00161de:	83 c4 10             	add    esp,0x10
c00161e1:	83 ec 0c             	sub    esp,0xc
c00161e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00161e8:	e8 0e fb ff ff       	call   c0015cfb <displayDebugInfo(regs*)>
c00161ed:	83 c4 10             	add    esp,0x10
c00161f0:	83 ec 0c             	sub    esp,0xc
c00161f3:	6a 00                	push   0x0
c00161f5:	e8 ee ed ff ff       	call   c0014fe8 <Thr::terminateFromIRQ(int)>
c00161fa:	83 c4 10             	add    esp,0x10
c00161fd:	eb 01                	jmp    c0016200 <pgFault(regs*, void*)+0x82>
c00161ff:	90                   	nop
c0016200:	83 c4 1c             	add    esp,0x1c
c0016203:	c3                   	ret    

c0016204 <otherISRHandler(regs*, void*)>:
c0016204:	83 ec 0c             	sub    esp,0xc
c0016207:	83 ec 0c             	sub    esp,0xc
c001620a:	68 ec 06 02 c0       	push   0xc00206ec
c001620f:	e8 b9 fe ff ff       	call   c00160cd <displayProgramFault(char const*)>
c0016214:	83 c4 10             	add    esp,0x10
c0016217:	83 ec 0c             	sub    esp,0xc
c001621a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001621e:	e8 d8 fa ff ff       	call   c0015cfb <displayDebugInfo(regs*)>
c0016223:	83 c4 10             	add    esp,0x10
c0016226:	83 ec 0c             	sub    esp,0xc
c0016229:	6a 00                	push   0x0
c001622b:	e8 b8 ed ff ff       	call   c0014fe8 <Thr::terminateFromIRQ(int)>
c0016230:	83 c4 10             	add    esp,0x10
c0016233:	90                   	nop
c0016234:	83 c4 0c             	add    esp,0xc
c0016237:	c3                   	ret    

c0016238 <opcodeFault(regs*, void*)>:
c0016238:	55                   	push   ebp
c0016239:	89 e5                	mov    ebp,esp
c001623b:	83 ec 08             	sub    esp,0x8
c001623e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016241:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016244:	83 ec 08             	sub    esp,0x8
c0016247:	50                   	push   eax
c0016248:	68 0b 06 02 c0       	push   0xc002060b
c001624d:	e8 b8 43 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0016252:	83 c4 10             	add    esp,0x10
c0016255:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001625a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016260:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0016266:	84 c0                	test   al,al
c0016268:	74 21                	je     c001628b <opcodeFault(regs*, void*)+0x53>
c001626a:	83 ec 0c             	sub    esp,0xc
c001626d:	68 14 07 02 c0       	push   0xc0020714
c0016272:	e8 93 43 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0016277:	83 c4 10             	add    esp,0x10
c001627a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001627d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016280:	8d 50 19             	lea    edx,[eax+0x19]
c0016283:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016286:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016289:	eb 2b                	jmp    c00162b6 <opcodeFault(regs*, void*)+0x7e>
c001628b:	83 ec 0c             	sub    esp,0xc
c001628e:	68 19 06 02 c0       	push   0xc0020619
c0016293:	e8 35 fe ff ff       	call   c00160cd <displayProgramFault(char const*)>
c0016298:	83 c4 10             	add    esp,0x10
c001629b:	83 ec 0c             	sub    esp,0xc
c001629e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00162a1:	e8 55 fa ff ff       	call   c0015cfb <displayDebugInfo(regs*)>
c00162a6:	83 c4 10             	add    esp,0x10
c00162a9:	83 ec 0c             	sub    esp,0xc
c00162ac:	6a 00                	push   0x0
c00162ae:	e8 35 ed ff ff       	call   c0014fe8 <Thr::terminateFromIRQ(int)>
c00162b3:	83 c4 10             	add    esp,0x10
c00162b6:	c9                   	leave  
c00162b7:	c3                   	ret    

c00162b8 <i386SaveCoprocessor(void*)>:
c00162b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162bc:	83 c0 3f             	add    eax,0x3f
c00162bf:	83 e0 c0             	and    eax,0xffffffc0
c00162c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00162c6:	ff 25 0c 72 02 c0    	jmp    DWORD PTR ds:0xc002720c

c00162cc <i386LoadCoprocessor(void*)>:
c00162cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162d0:	83 c0 3f             	add    eax,0x3f
c00162d3:	83 e0 c0             	and    eax,0xffffffc0
c00162d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00162da:	ff 25 08 72 02 c0    	jmp    DWORD PTR ds:0xc0027208

c00162e0 <x87EmulHandler(regs*, void*)>:
c00162e0:	53                   	push   ebx
c00162e1:	83 ec 08             	sub    esp,0x8
c00162e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162e9:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00162ed:	74 10                	je     c00162ff <x87EmulHandler(regs*, void*)+0x1f>
c00162ef:	83 ec 0c             	sub    esp,0xc
c00162f2:	68 26 06 02 c0       	push   0xc0020626
c00162f7:	e8 9f a0 ff ff       	call   c001039b <KePanic(char const*)>
c00162fc:	83 c4 10             	add    esp,0x10
c00162ff:	0f 20 c0             	mov    eax,cr0
c0016302:	a8 08                	test   al,0x8
c0016304:	74 59                	je     c001635f <x87EmulHandler(regs*, void*)+0x7f>
c0016306:	0f 06                	clts   
c0016308:	a1 04 72 02 c0       	mov    eax,ds:0xc0027204
c001630d:	85 c0                	test   eax,eax
c001630f:	74 0e                	je     c001631f <x87EmulHandler(regs*, void*)+0x3f>
c0016311:	83 ec 0c             	sub    esp,0xc
c0016314:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016317:	e8 9c ff ff ff       	call   c00162b8 <i386SaveCoprocessor(void*)>
c001631c:	83 c4 10             	add    esp,0x10
c001631f:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0016325:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0016329:	75 12                	jne    c001633d <x87EmulHandler(regs*, void*)+0x5d>
c001632b:	83 ec 0c             	sub    esp,0xc
c001632e:	68 40 02 00 00       	push   0x240
c0016333:	e8 3d 15 ff ff       	call   c0007875 <malloc>
c0016338:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001633b:	eb 10                	jmp    c001634d <x87EmulHandler(regs*, void*)+0x6d>
c001633d:	83 ec 0c             	sub    esp,0xc
c0016340:	a1 04 72 02 c0       	mov    eax,ds:0xc0027204
c0016345:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016348:	e8 7f ff ff ff       	call   c00162cc <i386LoadCoprocessor(void*)>
c001634d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016352:	83 c4 10             	add    esp,0x10
c0016355:	a3 04 72 02 c0       	mov    ds:0xc0027204,eax
c001635a:	83 c4 08             	add    esp,0x8
c001635d:	5b                   	pop    ebx
c001635e:	c3                   	ret    
c001635f:	83 ec 0c             	sub    esp,0xc
c0016362:	68 3a 06 02 c0       	push   0xc002063a
c0016367:	e8 9e 42 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c001636c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016374:	83 c4 18             	add    esp,0x18
c0016377:	5b                   	pop    ebx
c0016378:	e9 6b ec ff ff       	jmp    c0014fe8 <Thr::terminateFromIRQ(int)>

c001637d <HalInitialiseCoprocessor()>:
c001637d:	83 ec 10             	sub    esp,0x10
c0016380:	c7 05 04 72 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027204,0x0
c001638a:	6a 00                	push   0x0
c001638c:	68 e0 62 01 c0       	push   0xc00162e0
c0016391:	6a 07                	push   0x7
c0016393:	e8 e4 5b ff ff       	call   c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016398:	e8 53 6e 00 00       	call   c001d1f0 <avxDetect>
c001639d:	83 c4 10             	add    esp,0x10
c00163a0:	85 c0                	test   eax,eax
c00163a2:	74 1c                	je     c00163c0 <HalInitialiseCoprocessor()+0x43>
c00163a4:	c7 05 0c 72 02 c0 1a d2 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001d21a
c00163ae:	c7 05 08 72 02 c0 2b d2 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001d22b
c00163b8:	83 c4 0c             	add    esp,0xc
c00163bb:	e9 7c 6e 00 00       	jmp    c001d23c <avxInit>
c00163c0:	e8 0b 71 00 00       	call   c001d4d0 <absolutelyNoChanceInHell>
c00163c5:	85 c0                	test   eax,eax
c00163c7:	74 1c                	je     c00163e5 <HalInitialiseCoprocessor()+0x68>
c00163c9:	c7 05 0c 72 02 c0 e8 d4 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001d4e8
c00163d3:	c7 05 08 72 02 c0 f0 d4 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001d4f0
c00163dd:	83 c4 0c             	add    esp,0xc
c00163e0:	e9 13 71 00 00       	jmp    c001d4f8 <sseInit>
c00163e5:	e8 2c 71 00 00       	call   c001d516 <x87Detect>
c00163ea:	85 c0                	test   eax,eax
c00163ec:	74 1c                	je     c001640a <HalInitialiseCoprocessor()+0x8d>
c00163ee:	c7 05 0c 72 02 c0 31 d5 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001d531
c00163f8:	c7 05 08 72 02 c0 38 d5 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001d538
c0016402:	83 c4 0c             	add    esp,0xc
c0016405:	e9 35 71 00 00       	jmp    c001d53f <x87Init>
c001640a:	c7 05 0c 72 02 c0 c8 5c 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc0015cc8
c0016414:	c7 05 08 72 02 c0 c8 5c 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc0015cc8
c001641e:	0f 20 c0             	mov    eax,cr0
c0016421:	83 c8 04             	or     eax,0x4
c0016424:	0f 22 c0             	mov    cr0,eax
c0016427:	83 c4 0c             	add    esp,0xc
c001642a:	c3                   	ret    

c001642b <HalPanic(char const*)>:
c001642b:	53                   	push   ebx
c001642c:	83 ec 10             	sub    esp,0x10
c001642f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016433:	fa                   	cli    
c0016434:	53                   	push   ebx
c0016435:	68 50 06 02 c0       	push   0xc0020650
c001643a:	e8 cb 41 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c001643f:	83 c4 0c             	add    esp,0xc
c0016442:	6a 01                	push   0x1
c0016444:	6a 0f                	push   0xf
c0016446:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c001644c:	e8 b5 1e ff ff       	call   c0008306 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016451:	58                   	pop    eax
c0016452:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016458:	e8 9b 20 ff ff       	call   c00084f8 <VgaText::clearScreen()>
c001645d:	5a                   	pop    edx
c001645e:	59                   	pop    ecx
c001645f:	68 84 ef 01 c0       	push   0xc001ef84
c0016464:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c001646a:	e8 cf 1e ff ff       	call   c000833e <VgaText::setTitle(char*)>
c001646f:	83 c4 0c             	add    esp,0xc
c0016472:	6a 01                	push   0x1
c0016474:	6a 0f                	push   0xf
c0016476:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c001647c:	e8 85 1e ff ff       	call   c0008306 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016481:	58                   	pop    eax
c0016482:	5a                   	pop    edx
c0016483:	68 69 06 02 c0       	push   0xc0020669
c0016488:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c001648e:	e8 59 23 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c0016493:	83 c4 0c             	add    esp,0xc
c0016496:	6a 0f                	push   0xf
c0016498:	6a 01                	push   0x1
c001649a:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00164a0:	e8 61 1e ff ff       	call   c0008306 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00164a5:	59                   	pop    ecx
c00164a6:	58                   	pop    eax
c00164a7:	68 72 06 02 c0       	push   0xc0020672
c00164ac:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00164b2:	e8 35 23 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c00164b7:	83 c4 0c             	add    esp,0xc
c00164ba:	6a 01                	push   0x1
c00164bc:	6a 0f                	push   0xf
c00164be:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00164c4:	e8 3d 1e ff ff       	call   c0008306 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00164c9:	58                   	pop    eax
c00164ca:	5a                   	pop    edx
c00164cb:	68 b6 06 02 c0       	push   0xc00206b6
c00164d0:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00164d6:	e8 11 23 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c00164db:	59                   	pop    ecx
c00164dc:	58                   	pop    eax
c00164dd:	68 7f 06 02 c0       	push   0xc002067f
c00164e2:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00164e8:	e8 ff 22 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c00164ed:	58                   	pop    eax
c00164ee:	5a                   	pop    edx
c00164ef:	68 b9 06 02 c0       	push   0xc00206b9
c00164f4:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00164fa:	e8 ed 22 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c00164ff:	59                   	pop    ecx
c0016500:	58                   	pop    eax
c0016501:	53                   	push   ebx
c0016502:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016508:	e8 df 22 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c001650d:	58                   	pop    eax
c001650e:	5a                   	pop    edx
c001650f:	68 b6 06 02 c0       	push   0xc00206b6
c0016514:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c001651a:	e8 cd 22 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c001651f:	83 c4 10             	add    esp,0x10
c0016522:	eb fe                	jmp    c0016522 <HalPanic(char const*)+0xf7>

c0016524 <HalQueryPerformanceCounter()>:
c0016524:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016529:	31 d2                	xor    edx,edx
c001652b:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0016531:	31 c0                	xor    eax,eax
c0016533:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c001653a:	74 02                	je     c001653e <HalQueryPerformanceCounter()+0x1a>
c001653c:	0f 31                	rdtsc  
c001653e:	c3                   	ret    

c001653f <HalInitialise()>:
c001653f:	53                   	push   ebx
c0016540:	83 ec 08             	sub    esp,0x8
c0016543:	e8 67 5c ff ff       	call   c000c1af <setupINTS()>
c0016548:	80 3d 80 67 02 c0 00 	cmp    BYTE PTR ds:0xc0026780,0x0
c001654f:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016554:	75 07                	jne    c001655d <HalInitialise()+0x1e>
c0016556:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c001655d:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0016564:	c6 05 00 72 02 c0 00 	mov    BYTE PTR ds:0xc0027200,0x0
c001656b:	e8 a8 02 00 00       	call   c0016818 <picOpen()>
c0016570:	80 3d 00 72 02 c0 00 	cmp    BYTE PTR ds:0xc0027200,0x0
c0016577:	74 0a                	je     c0016583 <HalInitialise()+0x44>
c0016579:	e8 e2 01 00 00       	call   c0016760 <picDisable()>
c001657e:	e8 e3 65 00 00       	call   c001cb66 <apicOpen()>
c0016583:	bb 0f 00 00 00       	mov    ebx,0xf
c0016588:	50                   	push   eax
c0016589:	6a 00                	push   0x0
c001658b:	68 04 62 01 c0       	push   0xc0016204
c0016590:	6a 00                	push   0x0
c0016592:	e8 e5 59 ff ff       	call   c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016597:	83 c4 0c             	add    esp,0xc
c001659a:	6a 00                	push   0x0
c001659c:	68 04 62 01 c0       	push   0xc0016204
c00165a1:	6a 01                	push   0x1
c00165a3:	e8 d4 59 ff ff       	call   c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00165a8:	83 c4 0c             	add    esp,0xc
c00165ab:	6a 00                	push   0x0
c00165ad:	68 c9 5c 01 c0       	push   0xc0015cc9
c00165b2:	6a 02                	push   0x2
c00165b4:	e8 c3 59 ff ff       	call   c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00165b9:	83 c4 0c             	add    esp,0xc
c00165bc:	6a 00                	push   0x0
c00165be:	68 04 62 01 c0       	push   0xc0016204
c00165c3:	6a 03                	push   0x3
c00165c5:	e8 b2 59 ff ff       	call   c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00165ca:	83 c4 0c             	add    esp,0xc
c00165cd:	6a 00                	push   0x0
c00165cf:	68 04 62 01 c0       	push   0xc0016204
c00165d4:	6a 04                	push   0x4
c00165d6:	e8 a1 59 ff ff       	call   c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00165db:	83 c4 0c             	add    esp,0xc
c00165de:	6a 00                	push   0x0
c00165e0:	68 04 62 01 c0       	push   0xc0016204
c00165e5:	6a 05                	push   0x5
c00165e7:	e8 90 59 ff ff       	call   c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00165ec:	83 c4 0c             	add    esp,0xc
c00165ef:	6a 00                	push   0x0
c00165f1:	68 38 62 01 c0       	push   0xc0016238
c00165f6:	6a 06                	push   0x6
c00165f8:	e8 7f 59 ff ff       	call   c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00165fd:	83 c4 0c             	add    esp,0xc
c0016600:	6a 00                	push   0x0
c0016602:	68 e2 5c 01 c0       	push   0xc0015ce2
c0016607:	6a 08                	push   0x8
c0016609:	e8 6e 59 ff ff       	call   c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001660e:	83 c4 0c             	add    esp,0xc
c0016611:	6a 00                	push   0x0
c0016613:	68 04 62 01 c0       	push   0xc0016204
c0016618:	6a 09                	push   0x9
c001661a:	e8 5d 59 ff ff       	call   c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001661f:	83 c4 0c             	add    esp,0xc
c0016622:	6a 00                	push   0x0
c0016624:	68 04 62 01 c0       	push   0xc0016204
c0016629:	6a 0a                	push   0xa
c001662b:	e8 4c 59 ff ff       	call   c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016630:	83 c4 0c             	add    esp,0xc
c0016633:	6a 00                	push   0x0
c0016635:	68 04 62 01 c0       	push   0xc0016204
c001663a:	6a 0b                	push   0xb
c001663c:	e8 3b 59 ff ff       	call   c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016641:	83 c4 0c             	add    esp,0xc
c0016644:	6a 00                	push   0x0
c0016646:	68 19 61 01 c0       	push   0xc0016119
c001664b:	6a 0d                	push   0xd
c001664d:	e8 2a 59 ff ff       	call   c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016652:	83 c4 0c             	add    esp,0xc
c0016655:	6a 00                	push   0x0
c0016657:	68 7e 61 01 c0       	push   0xc001617e
c001665c:	6a 0e                	push   0xe
c001665e:	e8 19 59 ff ff       	call   c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016663:	83 c4 10             	add    esp,0x10
c0016666:	50                   	push   eax
c0016667:	6a 00                	push   0x0
c0016669:	68 04 62 01 c0       	push   0xc0016204
c001666e:	53                   	push   ebx
c001666f:	43                   	inc    ebx
c0016670:	e8 07 59 ff ff       	call   c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016675:	83 c4 10             	add    esp,0x10
c0016678:	83 fb 1e             	cmp    ebx,0x1e
c001667b:	75 e9                	jne    c0016666 <HalInitialise()+0x127>
c001667d:	50                   	push   eax
c001667e:	6a 00                	push   0x0
c0016680:	68 36 15 01 c0       	push   0xc0011536
c0016685:	6a 60                	push   0x60
c0016687:	e8 f0 58 ff ff       	call   c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001668c:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016691:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001669b:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00166a2:	e8 ce 11 ff ff       	call   c0007875 <malloc>
c00166a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00166aa:	89 c3                	mov    ebx,eax
c00166ac:	e8 2f 09 00 00       	call   c0016fe0 <RTC::RTC()>
c00166b1:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00166bb:	5a                   	pop    edx
c00166bc:	59                   	pop    ecx
c00166bd:	53                   	push   ebx
c00166be:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00166c4:	e8 7f 53 ff ff       	call   c000ba48 <Device::addChild(Device*)>
c00166c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00166cb:	6a 00                	push   0x0
c00166cd:	6a 00                	push   0x0
c00166cf:	6a 00                	push   0x0
c00166d1:	53                   	push   ebx
c00166d2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00166d5:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c00166da:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00166e0:	83 c4 28             	add    esp,0x28
c00166e3:	5b                   	pop    ebx
c00166e4:	c3                   	ret    

c00166e5 <HalMakeBeep(int)>:
c00166e5:	53                   	push   ebx
c00166e6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00166ea:	85 db                	test   ebx,ebx
c00166ec:	75 07                	jne    c00166f5 <HalMakeBeep(int)+0x10>
c00166ee:	e4 61                	in     al,0x61
c00166f0:	83 e0 fc             	and    eax,0xfffffffc
c00166f3:	eb 26                	jmp    c001671b <HalMakeBeep(int)+0x36>
c00166f5:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00166fa:	99                   	cdq    
c00166fb:	f7 fb                	idiv   ebx
c00166fd:	89 c1                	mov    ecx,eax
c00166ff:	b0 b6                	mov    al,0xb6
c0016701:	e6 43                	out    0x43,al
c0016703:	88 c8                	mov    al,cl
c0016705:	e6 42                	out    0x42,al
c0016707:	89 c8                	mov    eax,ecx
c0016709:	c1 e8 08             	shr    eax,0x8
c001670c:	e6 42                	out    0x42,al
c001670e:	e4 61                	in     al,0x61
c0016710:	88 c2                	mov    dl,al
c0016712:	83 ca 03             	or     edx,0x3
c0016715:	38 c2                	cmp    dl,al
c0016717:	74 04                	je     c001671d <HalMakeBeep(int)+0x38>
c0016719:	88 d0                	mov    al,dl
c001671b:	e6 61                	out    0x61,al
c001671d:	5b                   	pop    ebx
c001671e:	c3                   	ret    

c001671f <HalGetRand()>:
c001671f:	31 c0                	xor    eax,eax
c0016721:	c3                   	ret    

c0016722 <HalEndOfInterrupt(int)>:
c0016722:	80 3d 00 72 02 c0 00 	cmp    BYTE PTR ds:0xc0027200,0x0
c0016729:	74 23                	je     c001674e <HalEndOfInterrupt(int)+0x2c>
c001672b:	83 ec 14             	sub    esp,0x14
c001672e:	6a 1b                	push   0x1b
c0016730:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016736:	e8 71 07 ff ff       	call   c0006eac <Computer::rdmsr(unsigned int)>
c001673b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016740:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001674a:	83 c4 1c             	add    esp,0x1c
c001674d:	c3                   	ret    
c001674e:	e9 55 02 00 00       	jmp    c00169a8 <picEOI(int)>

c0016753 <HalRestart()>:
c0016753:	c3                   	ret    

c0016754 <HalShutdown()>:
c0016754:	c3                   	ret    

c0016755 <HalSleep()>:
c0016755:	c3                   	ret    
c0016756:	66 90                	xchg   ax,ax

c0016758 <picIoWait()>:
c0016758:	eb 00                	jmp    c001675a <picIoWait()+0x2>
c001675a:	eb 00                	jmp    c001675c <picIoWait()+0x4>
c001675c:	90                   	nop
c001675d:	c3                   	ret    
c001675e:	66 90                	xchg   ax,ax

c0016760 <picDisable()>:
c0016760:	83 ec 10             	sub    esp,0x10
c0016763:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001676a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001676f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016773:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0016778:	ee                   	out    dx,al
c0016779:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0016780:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0016785:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0016789:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001678e:	ee                   	out    dx,al
c001678f:	90                   	nop
c0016790:	83 c4 10             	add    esp,0x10
c0016793:	c3                   	ret    

c0016794 <picGetIRQReg(int)>:
c0016794:	83 ec 10             	sub    esp,0x10
c0016797:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001679b:	25 ff 00 00 00       	and    eax,0xff
c00167a0:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00167a7:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00167ab:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00167af:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00167b4:	ee                   	out    dx,al
c00167b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00167b9:	25 ff 00 00 00       	and    eax,0xff
c00167be:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00167c5:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00167c9:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00167cd:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00167d2:	ee                   	out    dx,al
c00167d3:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00167da:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00167df:	89 c2                	mov    edx,eax
c00167e1:	ec                   	in     al,dx
c00167e2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00167e6:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00167ea:	25 ff 00 00 00       	and    eax,0xff
c00167ef:	c1 e0 08             	shl    eax,0x8
c00167f2:	89 c1                	mov    ecx,eax
c00167f4:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00167fb:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0016800:	89 c2                	mov    edx,eax
c0016802:	ec                   	in     al,dx
c0016803:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0016807:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001680b:	25 ff 00 00 00       	and    eax,0xff
c0016810:	09 c8                	or     eax,ecx
c0016812:	83 c4 10             	add    esp,0x10
c0016815:	c3                   	ret    
c0016816:	66 90                	xchg   ax,ax

c0016818 <picOpen()>:
c0016818:	83 ec 50             	sub    esp,0x50
c001681b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0016822:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016827:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001682b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001682f:	ee                   	out    dx,al
c0016830:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0016837:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001683c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0016840:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016844:	ee                   	out    dx,al
c0016845:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001684d:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0016855:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001685c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016860:	89 c2                	mov    edx,eax
c0016862:	ec                   	in     al,dx
c0016863:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0016867:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001686b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001686f:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0016876:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001687a:	89 c2                	mov    edx,eax
c001687c:	ec                   	in     al,dx
c001687d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016881:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016885:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0016889:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0016890:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0016895:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0016899:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001689d:	ee                   	out    dx,al
c001689e:	e8 b5 fe ff ff       	call   c0016758 <picIoWait()>
c00168a3:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00168aa:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00168af:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00168b3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00168b7:	ee                   	out    dx,al
c00168b8:	e8 9b fe ff ff       	call   c0016758 <picIoWait()>
c00168bd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00168c1:	25 ff 00 00 00       	and    eax,0xff
c00168c6:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00168cd:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00168d1:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00168d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00168d9:	ee                   	out    dx,al
c00168da:	e8 79 fe ff ff       	call   c0016758 <picIoWait()>
c00168df:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00168e3:	25 ff 00 00 00       	and    eax,0xff
c00168e8:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00168ef:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00168f3:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00168f7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00168fb:	ee                   	out    dx,al
c00168fc:	e8 57 fe ff ff       	call   c0016758 <picIoWait()>
c0016901:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0016908:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001690d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0016911:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016915:	ee                   	out    dx,al
c0016916:	e8 3d fe ff ff       	call   c0016758 <picIoWait()>
c001691b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0016922:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0016927:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001692b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001692f:	ee                   	out    dx,al
c0016930:	e8 23 fe ff ff       	call   c0016758 <picIoWait()>
c0016935:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001693c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0016941:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0016945:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016949:	ee                   	out    dx,al
c001694a:	e8 09 fe ff ff       	call   c0016758 <picIoWait()>
c001694f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0016956:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001695b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001695f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0016963:	ee                   	out    dx,al
c0016964:	e8 ef fd ff ff       	call   c0016758 <picIoWait()>
c0016969:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c001696d:	25 ff 00 00 00       	and    eax,0xff
c0016972:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0016979:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001697d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0016981:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0016985:	ee                   	out    dx,al
c0016986:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c001698a:	25 ff 00 00 00       	and    eax,0xff
c001698f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0016996:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001699a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001699e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00169a2:	ee                   	out    dx,al
c00169a3:	90                   	nop
c00169a4:	83 c4 50             	add    esp,0x50
c00169a7:	c3                   	ret    

c00169a8 <picEOI(int)>:
c00169a8:	83 ec 10             	sub    esp,0x10
c00169ab:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00169b0:	75 22                	jne    c00169d4 <picEOI(int)+0x2c>
c00169b2:	6a 0b                	push   0xb
c00169b4:	e8 db fd ff ff       	call   c0016794 <picGetIRQReg(int)>
c00169b9:	83 c4 04             	add    esp,0x4
c00169bc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00169c1:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00169c6:	25 ff ff 00 00       	and    eax,0xffff
c00169cb:	25 80 00 00 00       	and    eax,0x80
c00169d0:	74 72                	je     c0016a44 <picEOI(int)+0x9c>
c00169d2:	66 90                	xchg   ax,ax
c00169d4:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00169d9:	75 31                	jne    c0016a0c <picEOI(int)+0x64>
c00169db:	6a 0b                	push   0xb
c00169dd:	e8 b2 fd ff ff       	call   c0016794 <picGetIRQReg(int)>
c00169e2:	83 c4 04             	add    esp,0x4
c00169e5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00169ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169ee:	66 85 c0             	test   ax,ax
c00169f1:	78 19                	js     c0016a0c <picEOI(int)+0x64>
c00169f3:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00169fa:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00169ff:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016a03:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0016a08:	ee                   	out    dx,al
c0016a09:	eb 3d                	jmp    c0016a48 <picEOI(int)+0xa0>
c0016a0b:	90                   	nop
c0016a0c:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0016a11:	7e 19                	jle    c0016a2c <picEOI(int)+0x84>
c0016a13:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0016a1a:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0016a1f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0016a23:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0016a28:	ee                   	out    dx,al
c0016a29:	8d 76 00             	lea    esi,[esi+0x0]
c0016a2c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0016a33:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0016a38:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0016a3c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0016a41:	ee                   	out    dx,al
c0016a42:	eb 04                	jmp    c0016a48 <picEOI(int)+0xa0>
c0016a44:	90                   	nop
c0016a45:	8d 76 00             	lea    esi,[esi+0x0]
c0016a48:	83 c4 10             	add    esp,0x10
c0016a4b:	c3                   	ret    

c0016a4c <RTC::open(int, int, void*)>:
c0016a4c:	31 c0                	xor    eax,eax
c0016a4e:	c3                   	ret    
c0016a4f:	90                   	nop

c0016a50 <RTC::close(int, int, void*)>:
c0016a50:	31 c0                	xor    eax,eax
c0016a52:	c3                   	ret    
c0016a53:	90                   	nop

c0016a54 <RTC::timeInSecondsUTC()>:
c0016a54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016a58:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016a5e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016a64:	c3                   	ret    
c0016a65:	90                   	nop

c0016a66 <RTC::timeInDatetimeUTC()>:
c0016a66:	53                   	push   ebx
c0016a67:	83 ec 14             	sub    esp,0x14
c0016a6a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016a6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a72:	8b 10                	mov    edx,DWORD PTR [eax]
c0016a74:	50                   	push   eax
c0016a75:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016a78:	83 c4 0c             	add    esp,0xc
c0016a7b:	52                   	push   edx
c0016a7c:	50                   	push   eax
c0016a7d:	53                   	push   ebx
c0016a7e:	e8 39 4d ff ff       	call   c000b7bc <secondsToDatetime(unsigned long long)>
c0016a83:	89 d8                	mov    eax,ebx
c0016a85:	83 c4 14             	add    esp,0x14
c0016a88:	5b                   	pop    ebx
c0016a89:	c2 04 00             	ret    0x4

c0016a8c <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0016a8c:	56                   	push   esi
c0016a8d:	53                   	push   ebx
c0016a8e:	83 ec 14             	sub    esp,0x14
c0016a91:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016a95:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a97:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0016a9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016a9e:	52                   	push   edx
c0016a9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016aa3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016aa7:	50                   	push   eax
c0016aa8:	e8 0f 4d ff ff       	call   c000b7bc <secondsToDatetime(unsigned long long)>
c0016aad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016ab1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016ab5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016ab9:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0016abd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016ac1:	89 f0                	mov    eax,esi
c0016ac3:	83 c4 20             	add    esp,0x20
c0016ac6:	5b                   	pop    ebx
c0016ac7:	5e                   	pop    esi
c0016ac8:	ff e0                	jmp    eax

c0016aca <RTC::~RTC()>:
c0016aca:	83 ec 0c             	sub    esp,0xc
c0016acd:	ba 54 07 02 c0       	mov    edx,0xc0020754
c0016ad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ad6:	89 10                	mov    DWORD PTR [eax],edx
c0016ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016adc:	83 ec 0c             	sub    esp,0xc
c0016adf:	50                   	push   eax
c0016ae0:	e8 5b 4a ff ff       	call   c000b540 <Clock::~Clock()>
c0016ae5:	83 c4 10             	add    esp,0x10
c0016ae8:	90                   	nop
c0016ae9:	83 c4 0c             	add    esp,0xc
c0016aec:	c3                   	ret    
c0016aed:	90                   	nop

c0016aee <RTC::~RTC()>:
c0016aee:	83 ec 0c             	sub    esp,0xc
c0016af1:	83 ec 0c             	sub    esp,0xc
c0016af4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016af8:	e8 cd ff ff ff       	call   c0016aca <RTC::~RTC()>
c0016afd:	83 c4 10             	add    esp,0x10
c0016b00:	83 ec 08             	sub    esp,0x8
c0016b03:	68 60 01 00 00       	push   0x160
c0016b08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b0c:	e8 03 3a ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c0016b11:	83 c4 10             	add    esp,0x10
c0016b14:	83 c4 0c             	add    esp,0xc
c0016b17:	c3                   	ret    

c0016b18 <RTC::get_update_in_progress_flag()>:
c0016b18:	83 ec 14             	sub    esp,0x14
c0016b1b:	6a 0a                	push   0xa
c0016b1d:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016b23:	e8 38 04 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016b28:	83 c4 1c             	add    esp,0x1c
c0016b2b:	c0 e8 07             	shr    al,0x7
c0016b2e:	c3                   	ret    
c0016b2f:	90                   	nop

c0016b30 <RTC::completeRTCRefresh()>:
c0016b30:	55                   	push   ebp
c0016b31:	57                   	push   edi
c0016b32:	56                   	push   esi
c0016b33:	53                   	push   ebx
c0016b34:	83 ec 2c             	sub    esp,0x2c
c0016b37:	8b 1d 8c 64 02 c0    	mov    ebx,DWORD PTR ds:0xc002648c
c0016b3d:	83 ec 0c             	sub    esp,0xc
c0016b40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016b44:	e8 cf ff ff ff       	call   c0016b18 <RTC::get_update_in_progress_flag()>
c0016b49:	83 c4 10             	add    esp,0x10
c0016b4c:	84 c0                	test   al,al
c0016b4e:	74 0e                	je     c0016b5e <RTC::completeRTCRefresh()+0x2e>
c0016b50:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0016b56:	3b 05 8c 64 02 c0    	cmp    eax,DWORD PTR ds:0xc002648c
c0016b5c:	73 df                	jae    c0016b3d <RTC::completeRTCRefresh()+0xd>
c0016b5e:	55                   	push   ebp
c0016b5f:	55                   	push   ebp
c0016b60:	6a 00                	push   0x0
c0016b62:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016b68:	e8 f3 03 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016b6d:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0016b71:	58                   	pop    eax
c0016b72:	5a                   	pop    edx
c0016b73:	6a 02                	push   0x2
c0016b75:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016b7b:	e8 e0 03 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016b80:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0016b84:	59                   	pop    ecx
c0016b85:	5b                   	pop    ebx
c0016b86:	6a 04                	push   0x4
c0016b88:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016b8e:	e8 cd 03 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016b93:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0016b97:	5e                   	pop    esi
c0016b98:	5f                   	pop    edi
c0016b99:	6a 07                	push   0x7
c0016b9b:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016ba1:	e8 ba 03 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016ba6:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0016baa:	5d                   	pop    ebp
c0016bab:	58                   	pop    eax
c0016bac:	6a 08                	push   0x8
c0016bae:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016bb4:	e8 a7 03 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016bb9:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0016bbd:	58                   	pop    eax
c0016bbe:	5a                   	pop    edx
c0016bbf:	6a 09                	push   0x9
c0016bc1:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016bc7:	e8 94 03 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016bcc:	83 c4 10             	add    esp,0x10
c0016bcf:	0f b6 e8             	movzx  ebp,al
c0016bd2:	8b 1d 8c 64 02 c0    	mov    ebx,DWORD PTR ds:0xc002648c
c0016bd8:	83 ec 0c             	sub    esp,0xc
c0016bdb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016bdf:	e8 34 ff ff ff       	call   c0016b18 <RTC::get_update_in_progress_flag()>
c0016be4:	83 c4 10             	add    esp,0x10
c0016be7:	84 c0                	test   al,al
c0016be9:	74 0e                	je     c0016bf9 <RTC::completeRTCRefresh()+0xc9>
c0016beb:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0016bf1:	3b 05 8c 64 02 c0    	cmp    eax,DWORD PTR ds:0xc002648c
c0016bf7:	73 df                	jae    c0016bd8 <RTC::completeRTCRefresh()+0xa8>
c0016bf9:	50                   	push   eax
c0016bfa:	50                   	push   eax
c0016bfb:	6a 00                	push   0x0
c0016bfd:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016c03:	e8 58 03 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016c08:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0016c0c:	58                   	pop    eax
c0016c0d:	5a                   	pop    edx
c0016c0e:	6a 02                	push   0x2
c0016c10:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016c16:	e8 45 03 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016c1b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016c1f:	59                   	pop    ecx
c0016c20:	5b                   	pop    ebx
c0016c21:	6a 04                	push   0x4
c0016c23:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016c29:	e8 32 03 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016c2e:	5e                   	pop    esi
c0016c2f:	88 c3                	mov    bl,al
c0016c31:	5f                   	pop    edi
c0016c32:	6a 07                	push   0x7
c0016c34:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016c3a:	e8 21 03 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016c3f:	89 c6                	mov    esi,eax
c0016c41:	58                   	pop    eax
c0016c42:	5a                   	pop    edx
c0016c43:	6a 08                	push   0x8
c0016c45:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016c4b:	e8 10 03 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016c50:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0016c54:	59                   	pop    ecx
c0016c55:	5f                   	pop    edi
c0016c56:	6a 09                	push   0x9
c0016c58:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016c5e:	e8 fd 02 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016c63:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0016c67:	0f b6 f8             	movzx  edi,al
c0016c6a:	83 c4 10             	add    esp,0x10
c0016c6d:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0016c71:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0016c75:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0016c79:	89 f1                	mov    ecx,esi
c0016c7b:	0f 94 c0             	sete   al
c0016c7e:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0016c82:	0f 94 c2             	sete   dl
c0016c85:	21 d0                	and    eax,edx
c0016c87:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0016c8b:	0f 94 c2             	sete   dl
c0016c8e:	21 c2                	and    edx,eax
c0016c90:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0016c94:	0f 94 c0             	sete   al
c0016c97:	21 d0                	and    eax,edx
c0016c99:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0016c9d:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0016ca1:	0f 94 c1             	sete   cl
c0016ca4:	84 c8                	test   al,cl
c0016ca6:	75 29                	jne    c0016cd1 <RTC::completeRTCRefresh()+0x1a1>
c0016ca8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0016cac:	89 fd                	mov    ebp,edi
c0016cae:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0016cb2:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0016cb6:	89 f0                	mov    eax,esi
c0016cb8:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0016cbc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016cc0:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016cc4:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0016cc8:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016ccc:	e9 01 ff ff ff       	jmp    c0016bd2 <RTC::completeRTCRefresh()+0xa2>
c0016cd1:	39 fd                	cmp    ebp,edi
c0016cd3:	75 d3                	jne    c0016ca8 <RTC::completeRTCRefresh()+0x178>
c0016cd5:	55                   	push   ebp
c0016cd6:	55                   	push   ebp
c0016cd7:	6a 0b                	push   0xb
c0016cd9:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016cdf:	e8 7c 02 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016ce4:	83 c4 10             	add    esp,0x10
c0016ce7:	89 c5                	mov    ebp,eax
c0016ce9:	a8 04                	test   al,0x4
c0016ceb:	75 78                	jne    c0016d65 <RTC::completeRTCRefresh()+0x235>
c0016ced:	b1 0a                	mov    cl,0xa
c0016cef:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0016cf3:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0016cf7:	83 e2 0f             	and    edx,0xf
c0016cfa:	c0 e8 04             	shr    al,0x4
c0016cfd:	c1 ef 04             	shr    edi,0x4
c0016d00:	f6 e1                	mul    cl
c0016d02:	6b ff 0a             	imul   edi,edi,0xa
c0016d05:	01 d0                	add    eax,edx
c0016d07:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0016d0b:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0016d0f:	83 e2 0f             	and    edx,0xf
c0016d12:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016d16:	c0 e8 04             	shr    al,0x4
c0016d19:	f6 e1                	mul    cl
c0016d1b:	01 d0                	add    eax,edx
c0016d1d:	88 da                	mov    dl,bl
c0016d1f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016d23:	83 e2 0f             	and    edx,0xf
c0016d26:	88 d8                	mov    al,bl
c0016d28:	83 e3 80             	and    ebx,0xffffff80
c0016d2b:	c0 e8 04             	shr    al,0x4
c0016d2e:	83 e0 07             	and    eax,0x7
c0016d31:	f6 e1                	mul    cl
c0016d33:	01 d0                	add    eax,edx
c0016d35:	89 f2                	mov    edx,esi
c0016d37:	09 c3                	or     ebx,eax
c0016d39:	83 e2 0f             	and    edx,0xf
c0016d3c:	89 f0                	mov    eax,esi
c0016d3e:	c0 e8 04             	shr    al,0x4
c0016d41:	f6 e1                	mul    cl
c0016d43:	8d 34 02             	lea    esi,[edx+eax*1]
c0016d46:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0016d4a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0016d4e:	83 e2 0f             	and    edx,0xf
c0016d51:	c0 e8 04             	shr    al,0x4
c0016d54:	f6 e1                	mul    cl
c0016d56:	01 d0                	add    eax,edx
c0016d58:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0016d5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d60:	83 e0 0f             	and    eax,0xf
c0016d63:	01 c7                	add    edi,eax
c0016d65:	83 e5 02             	and    ebp,0x2
c0016d68:	75 14                	jne    c0016d7e <RTC::completeRTCRefresh()+0x24e>
c0016d6a:	84 db                	test   bl,bl
c0016d6c:	79 10                	jns    c0016d7e <RTC::completeRTCRefresh()+0x24e>
c0016d6e:	83 e3 7f             	and    ebx,0x7f
c0016d71:	b9 18 00 00 00       	mov    ecx,0x18
c0016d76:	8d 43 0c             	lea    eax,[ebx+0xc]
c0016d79:	99                   	cdq    
c0016d7a:	f7 f9                	idiv   ecx
c0016d7c:	88 d3                	mov    bl,dl
c0016d7e:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0016d84:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0016d8a:	77 06                	ja     c0016d92 <RTC::completeRTCRefresh()+0x262>
c0016d8c:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0016d92:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0016d97:	31 d2                	xor    edx,edx
c0016d99:	c1 e1 10             	shl    ecx,0x10
c0016d9c:	89 d7                	mov    edi,edx
c0016d9e:	c1 e5 10             	shl    ebp,0x10
c0016da1:	31 c0                	xor    eax,eax
c0016da3:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0016da9:	09 cf                	or     edi,ecx
c0016dab:	89 fa                	mov    edx,edi
c0016dad:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0016db1:	88 da                	mov    dl,bl
c0016db3:	89 f3                	mov    ebx,esi
c0016db5:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0016db9:	88 d8                	mov    al,bl
c0016dbb:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0016dbf:	0f b7 c8             	movzx  ecx,ax
c0016dc2:	09 e9                	or     ecx,ebp
c0016dc4:	89 c8                	mov    eax,ecx
c0016dc6:	51                   	push   ecx
c0016dc7:	51                   	push   ecx
c0016dc8:	52                   	push   edx
c0016dc9:	50                   	push   eax
c0016dca:	e8 60 48 ff ff       	call   c000b62f <datetimeToSeconds(datetime_t)>
c0016dcf:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016dd3:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0016dd9:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0016ddf:	83 c4 3c             	add    esp,0x3c
c0016de2:	5b                   	pop    ebx
c0016de3:	5e                   	pop    esi
c0016de4:	5f                   	pop    edi
c0016de5:	5d                   	pop    ebp
c0016de6:	c3                   	ret    
c0016de7:	90                   	nop

c0016de8 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0016de8:	55                   	push   ebp
c0016de9:	57                   	push   edi
c0016dea:	56                   	push   esi
c0016deb:	53                   	push   ebx
c0016dec:	83 ec 30             	sub    esp,0x30
c0016def:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016df3:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016df7:	6a 00                	push   0x0
c0016df9:	6a 00                	push   0x0
c0016dfb:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016e01:	e8 70 02 ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016e06:	83 c4 0c             	add    esp,0xc
c0016e09:	6a 00                	push   0x0
c0016e0b:	6a 02                	push   0x2
c0016e0d:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016e13:	e8 5e 02 ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016e18:	31 d2                	xor    edx,edx
c0016e1a:	89 f9                	mov    ecx,edi
c0016e1c:	89 f8                	mov    eax,edi
c0016e1e:	c1 e9 10             	shr    ecx,0x10
c0016e21:	0f b6 c4             	movzx  eax,ah
c0016e24:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0016e28:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0016e2c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016e30:	b9 64 00 00 00       	mov    ecx,0x64
c0016e35:	89 f0                	mov    eax,esi
c0016e37:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0016e3b:	89 f0                	mov    eax,esi
c0016e3d:	0f b6 c4             	movzx  eax,ah
c0016e40:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016e44:	89 f0                	mov    eax,esi
c0016e46:	c1 e8 10             	shr    eax,0x10
c0016e49:	66 f7 f1             	div    cx
c0016e4c:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0016e51:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0016e56:	59                   	pop    ecx
c0016e57:	5b                   	pop    ebx
c0016e58:	89 fb                	mov    ebx,edi
c0016e5a:	6a 0b                	push   0xb
c0016e5c:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016e62:	e8 f9 00 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016e67:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0016e6b:	83 c4 10             	add    esp,0x10
c0016e6e:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0016e73:	75 74                	jne    c0016ee9 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0016e75:	b2 0a                	mov    dl,0xa
c0016e77:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016e7b:	0f b6 c1             	movzx  eax,cl
c0016e7e:	f6 f2                	div    dl
c0016e80:	88 c3                	mov    bl,al
c0016e82:	88 e0                	mov    al,ah
c0016e84:	c1 e3 04             	shl    ebx,0x4
c0016e87:	09 c3                	or     ebx,eax
c0016e89:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016e8e:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0016e92:	f6 f2                	div    dl
c0016e94:	88 c1                	mov    cl,al
c0016e96:	88 e0                	mov    al,ah
c0016e98:	c1 e1 04             	shl    ecx,0x4
c0016e9b:	09 c1                	or     ecx,eax
c0016e9d:	89 f8                	mov    eax,edi
c0016e9f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0016ea3:	0f b6 c0             	movzx  eax,al
c0016ea6:	f6 f2                	div    dl
c0016ea8:	88 c3                	mov    bl,al
c0016eaa:	88 e0                	mov    al,ah
c0016eac:	c1 e3 04             	shl    ebx,0x4
c0016eaf:	09 c3                	or     ebx,eax
c0016eb1:	89 f0                	mov    eax,esi
c0016eb3:	0f b6 c0             	movzx  eax,al
c0016eb6:	f6 f2                	div    dl
c0016eb8:	88 c1                	mov    cl,al
c0016eba:	88 e0                	mov    al,ah
c0016ebc:	c1 e1 04             	shl    ecx,0x4
c0016ebf:	09 c1                	or     ecx,eax
c0016ec1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016ec6:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0016eca:	f6 f2                	div    dl
c0016ecc:	88 c1                	mov    cl,al
c0016ece:	88 e0                	mov    al,ah
c0016ed0:	c1 e1 04             	shl    ecx,0x4
c0016ed3:	09 c1                	or     ecx,eax
c0016ed5:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c0016eda:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0016ede:	f6 f2                	div    dl
c0016ee0:	89 c5                	mov    ebp,eax
c0016ee2:	88 e0                	mov    al,ah
c0016ee4:	c1 e5 04             	shl    ebp,0x4
c0016ee7:	09 c5                	or     ebp,eax
c0016ee9:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c0016eee:	75 17                	jne    c0016f07 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016ef0:	80 fb 0b             	cmp    bl,0xb
c0016ef3:	76 0c                	jbe    c0016f01 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0016ef5:	80 eb 0c             	sub    bl,0xc
c0016ef8:	75 02                	jne    c0016efc <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0016efa:	b3 0c                	mov    bl,0xc
c0016efc:	83 cb 80             	or     ebx,0xffffff80
c0016eff:	eb 06                	jmp    c0016f07 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016f01:	84 db                	test   bl,bl
c0016f03:	75 02                	jne    c0016f07 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016f05:	b3 0c                	mov    bl,0xc
c0016f07:	0f b6 db             	movzx  ebx,bl
c0016f0a:	50                   	push   eax
c0016f0b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0016f10:	50                   	push   eax
c0016f11:	6a 00                	push   0x0
c0016f13:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016f19:	e8 58 01 ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016f1e:	83 c4 0c             	add    esp,0xc
c0016f21:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016f26:	50                   	push   eax
c0016f27:	6a 02                	push   0x2
c0016f29:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016f2f:	e8 42 01 ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016f34:	83 c4 0c             	add    esp,0xc
c0016f37:	53                   	push   ebx
c0016f38:	6a 04                	push   0x4
c0016f3a:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016f40:	e8 31 01 ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016f45:	83 c4 0c             	add    esp,0xc
c0016f48:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0016f4d:	50                   	push   eax
c0016f4e:	6a 07                	push   0x7
c0016f50:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016f56:	e8 1b 01 ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016f5b:	83 c4 0c             	add    esp,0xc
c0016f5e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0016f63:	50                   	push   eax
c0016f64:	6a 08                	push   0x8
c0016f66:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016f6c:	e8 05 01 ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016f71:	83 c4 0c             	add    esp,0xc
c0016f74:	89 e8                	mov    eax,ebp
c0016f76:	0f b6 e8             	movzx  ebp,al
c0016f79:	55                   	push   ebp
c0016f7a:	6a 09                	push   0x9
c0016f7c:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016f82:	e8 ef 00 ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016f87:	5a                   	pop    edx
c0016f88:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016f8c:	e8 9f fb ff ff       	call   c0016b30 <RTC::completeRTCRefresh()>
c0016f91:	83 c4 3c             	add    esp,0x3c
c0016f94:	b0 01                	mov    al,0x1
c0016f96:	5b                   	pop    ebx
c0016f97:	5e                   	pop    esi
c0016f98:	5f                   	pop    edi
c0016f99:	5d                   	pop    ebp
c0016f9a:	c3                   	ret    

c0016f9b <rtcIRQHandler(regs*, void*)>:
c0016f9b:	53                   	push   ebx
c0016f9c:	83 ec 10             	sub    esp,0x10
c0016f9f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016fa3:	6a 0c                	push   0xc
c0016fa5:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016fab:	e8 b0 ff fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016fb0:	83 c4 10             	add    esp,0x10
c0016fb3:	84 c0                	test   al,al
c0016fb5:	79 24                	jns    c0016fdb <rtcIRQHandler(regs*, void*)+0x40>
c0016fb7:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0016fbe:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0016fc5:	66 ff 05 14 72 02 c0 	inc    WORD PTR ds:0xc0027214
c0016fcc:	75 0d                	jne    c0016fdb <rtcIRQHandler(regs*, void*)+0x40>
c0016fce:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0016fd2:	83 c4 08             	add    esp,0x8
c0016fd5:	5b                   	pop    ebx
c0016fd6:	e9 55 fb ff ff       	jmp    c0016b30 <RTC::completeRTCRefresh()>
c0016fdb:	83 c4 08             	add    esp,0x8
c0016fde:	5b                   	pop    ebx
c0016fdf:	c3                   	ret    

c0016fe0 <RTC::RTC()>:
c0016fe0:	83 ec 1c             	sub    esp,0x1c
c0016fe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fe7:	83 ec 08             	sub    esp,0x8
c0016fea:	68 37 07 02 c0       	push   0xc0020737
c0016fef:	50                   	push   eax
c0016ff0:	e8 15 45 ff ff       	call   c000b50a <Clock::Clock(char const*)>
c0016ff5:	83 c4 10             	add    esp,0x10
c0016ff8:	ba 54 07 02 c0       	mov    edx,0xc0020754
c0016ffd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017001:	89 10                	mov    DWORD PTR [eax],edx
c0017003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017007:	83 ec 0c             	sub    esp,0xc
c001700a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001700e:	6a 01                	push   0x1
c0017010:	68 9b 6f 01 c0       	push   0xc0016f9b
c0017015:	6a 08                	push   0x8
c0017017:	50                   	push   eax
c0017018:	e8 d7 49 ff ff       	call   c000b9f4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001701d:	83 c4 20             	add    esp,0x20
c0017020:	89 c2                	mov    edx,eax
c0017022:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017026:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001702c:	fa                   	cli    
c001702d:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0017032:	40                   	inc    eax
c0017033:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0017038:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001703d:	83 ec 08             	sub    esp,0x8
c0017040:	6a 0b                	push   0xb
c0017042:	50                   	push   eax
c0017043:	e8 18 ff fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0017048:	83 c4 10             	add    esp,0x10
c001704b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001704f:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0017054:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017058:	83 ca 10             	or     edx,0x10
c001705b:	81 e2 ff 00 00 00    	and    edx,0xff
c0017061:	83 ec 04             	sub    esp,0x4
c0017064:	52                   	push   edx
c0017065:	6a 0b                	push   0xb
c0017067:	50                   	push   eax
c0017068:	e8 09 00 ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c001706d:	83 c4 10             	add    esp,0x10
c0017070:	83 ec 0c             	sub    esp,0xc
c0017073:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017077:	e8 b4 fa ff ff       	call   c0016b30 <RTC::completeRTCRefresh()>
c001707c:	83 c4 10             	add    esp,0x10
c001707f:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0017084:	48                   	dec    eax
c0017085:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001708a:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001708f:	85 c0                	test   eax,eax
c0017091:	75 01                	jne    c0017094 <RTC::RTC()+0xb4>
c0017093:	fb                   	sti    
c0017094:	90                   	nop
c0017095:	83 c4 1c             	add    esp,0x1c
c0017098:	c3                   	ret    
c0017099:	66 90                	xchg   ax,ax
c001709b:	90                   	nop

c001709c <HalConsoleScroll(int, int)>:
c001709c:	83 ec 10             	sub    esp,0x10
c001709f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00170a7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00170af:	90                   	nop
c00170b0:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00170b5:	0f 8f e1 00 00 00    	jg     c001719c <HalConsoleScroll(int, int)+0x100>
c00170bb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00170c3:	90                   	nop
c00170c4:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00170cc:	0f 8f be 00 00 00    	jg     c0017190 <HalConsoleScroll(int, int)+0xf4>
c00170d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00170d6:	89 d0                	mov    eax,edx
c00170d8:	c1 e0 02             	shl    eax,0x2
c00170db:	01 d0                	add    eax,edx
c00170dd:	c1 e0 05             	shl    eax,0x5
c00170e0:	89 c2                	mov    edx,eax
c00170e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00170e6:	01 d0                	add    eax,edx
c00170e8:	89 c2                	mov    edx,eax
c00170ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170ee:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00170f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00170f5:	89 d0                	mov    eax,edx
c00170f7:	c1 e0 02             	shl    eax,0x2
c00170fa:	01 d0                	add    eax,edx
c00170fc:	c1 e0 05             	shl    eax,0x5
c00170ff:	89 c2                	mov    edx,eax
c0017101:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017105:	01 d0                	add    eax,edx
c0017107:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001710d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017111:	01 c2                	add    edx,eax
c0017113:	8a 01                	mov    al,BYTE PTR [ecx]
c0017115:	88 02                	mov    BYTE PTR [edx],al
c0017117:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001711c:	75 66                	jne    c0017184 <HalConsoleScroll(int, int)+0xe8>
c001711e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017122:	83 e0 01             	and    eax,0x1
c0017125:	74 39                	je     c0017160 <HalConsoleScroll(int, int)+0xc4>
c0017127:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001712b:	83 e0 0f             	and    eax,0xf
c001712e:	88 c2                	mov    dl,al
c0017130:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017134:	c1 e0 04             	shl    eax,0x4
c0017137:	88 d1                	mov    cl,dl
c0017139:	09 c1                	or     ecx,eax
c001713b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001713f:	89 d0                	mov    eax,edx
c0017141:	c1 e0 02             	shl    eax,0x2
c0017144:	01 d0                	add    eax,edx
c0017146:	c1 e0 05             	shl    eax,0x5
c0017149:	89 c2                	mov    edx,eax
c001714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001714f:	01 d0                	add    eax,edx
c0017151:	89 c2                	mov    edx,eax
c0017153:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017157:	01 d0                	add    eax,edx
c0017159:	88 ca                	mov    dl,cl
c001715b:	88 10                	mov    BYTE PTR [eax],dl
c001715d:	eb 25                	jmp    c0017184 <HalConsoleScroll(int, int)+0xe8>
c001715f:	90                   	nop
c0017160:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017164:	89 d0                	mov    eax,edx
c0017166:	c1 e0 02             	shl    eax,0x2
c0017169:	01 d0                	add    eax,edx
c001716b:	c1 e0 05             	shl    eax,0x5
c001716e:	89 c2                	mov    edx,eax
c0017170:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017174:	01 d0                	add    eax,edx
c0017176:	89 c2                	mov    edx,eax
c0017178:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001717c:	01 d0                	add    eax,edx
c001717e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0017181:	8d 76 00             	lea    esi,[esi+0x0]
c0017184:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0017188:	e9 37 ff ff ff       	jmp    c00170c4 <HalConsoleScroll(int, int)+0x28>
c001718d:	8d 76 00             	lea    esi,[esi+0x0]
c0017190:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017194:	e9 17 ff ff ff       	jmp    c00170b0 <HalConsoleScroll(int, int)+0x14>
c0017199:	8d 76 00             	lea    esi,[esi+0x0]
c001719c:	90                   	nop
c001719d:	83 c4 10             	add    esp,0x10
c00171a0:	c3                   	ret    
c00171a1:	8d 76 00             	lea    esi,[esi+0x0]

c00171a4 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c00171a4:	83 ec 14             	sub    esp,0x14
c00171a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00171ab:	88 04 24             	mov    BYTE PTR [esp],al
c00171ae:	8a 04 24             	mov    al,BYTE PTR [esp]
c00171b1:	25 ff 00 00 00       	and    eax,0xff
c00171b6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00171ba:	89 d1                	mov    ecx,edx
c00171bc:	83 e1 0f             	and    ecx,0xf
c00171bf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00171c3:	c1 e2 04             	shl    edx,0x4
c00171c6:	81 e2 ff 00 00 00    	and    edx,0xff
c00171cc:	09 ca                	or     edx,ecx
c00171ce:	c1 e2 08             	shl    edx,0x8
c00171d1:	09 d0                	or     eax,edx
c00171d3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00171d8:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00171e0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00171e4:	89 d0                	mov    eax,edx
c00171e6:	c1 e0 02             	shl    eax,0x2
c00171e9:	01 d0                	add    eax,edx
c00171eb:	c1 e0 04             	shl    eax,0x4
c00171ee:	89 c2                	mov    edx,eax
c00171f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00171f4:	01 d0                	add    eax,edx
c00171f6:	01 c0                	add    eax,eax
c00171f8:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00171fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017200:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0017205:	66 89 02             	mov    WORD PTR [edx],ax
c0017208:	90                   	nop
c0017209:	83 c4 14             	add    esp,0x14
c001720c:	c3                   	ret    
c001720d:	8d 76 00             	lea    esi,[esi+0x0]

c0017210 <HalConsoleCursorUpdate(int, int)>:
c0017210:	83 ec 20             	sub    esp,0x20
c0017213:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017217:	89 c2                	mov    edx,eax
c0017219:	89 d0                	mov    eax,edx
c001721b:	c1 e0 02             	shl    eax,0x2
c001721e:	01 d0                	add    eax,edx
c0017220:	c1 e0 04             	shl    eax,0x4
c0017223:	89 c2                	mov    edx,eax
c0017225:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017229:	01 d0                	add    eax,edx
c001722b:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0017230:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0017237:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001723c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017240:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017244:	ee                   	out    dx,al
c0017245:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001724a:	25 ff 00 00 00       	and    eax,0xff
c001724f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0017256:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001725a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001725e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017262:	ee                   	out    dx,al
c0017263:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001726a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001726f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017273:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017277:	ee                   	out    dx,al
c0017278:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001727d:	66 c1 e8 08          	shr    ax,0x8
c0017281:	25 ff 00 00 00       	and    eax,0xff
c0017286:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001728d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017291:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017295:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017299:	ee                   	out    dx,al
c001729a:	90                   	nop
c001729b:	83 c4 20             	add    esp,0x20
c001729e:	c3                   	ret    
c001729f:	90                   	nop

c00172a0 <FAT::getName()>:
c00172a0:	b8 88 07 02 c0       	mov    eax,0xc0020788
c00172a5:	c3                   	ret    
c00172a6:	66 90                	xchg   ax,ax

c00172a8 <FAT::tell(void*, unsigned long long*)>:
c00172a8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00172ad:	75 09                	jne    c00172b8 <FAT::tell(void*, unsigned long long*)+0x10>
c00172af:	b8 04 00 00 00       	mov    eax,0x4
c00172b4:	c3                   	ret    
c00172b5:	8d 76 00             	lea    esi,[esi+0x0]
c00172b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00172bd:	75 09                	jne    c00172c8 <FAT::tell(void*, unsigned long long*)+0x20>
c00172bf:	b8 04 00 00 00       	mov    eax,0x4
c00172c4:	c3                   	ret    
c00172c5:	8d 76 00             	lea    esi,[esi+0x0]
c00172c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172cc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00172cf:	ba 00 00 00 00       	mov    edx,0x0
c00172d4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00172d8:	89 01                	mov    DWORD PTR [ecx],eax
c00172da:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00172dd:	b8 00 00 00 00       	mov    eax,0x0
c00172e2:	c3                   	ret    
c00172e3:	90                   	nop

c00172e4 <FAT::stat(void*, unsigned long long*)>:
c00172e4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00172e9:	75 09                	jne    c00172f4 <FAT::stat(void*, unsigned long long*)+0x10>
c00172eb:	b8 04 00 00 00       	mov    eax,0x4
c00172f0:	c3                   	ret    
c00172f1:	8d 76 00             	lea    esi,[esi+0x0]
c00172f4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00172f9:	75 09                	jne    c0017304 <FAT::stat(void*, unsigned long long*)+0x20>
c00172fb:	b8 04 00 00 00       	mov    eax,0x4
c0017300:	c3                   	ret    
c0017301:	8d 76 00             	lea    esi,[esi+0x0]
c0017304:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017308:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001730b:	ba 00 00 00 00       	mov    edx,0x0
c0017310:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017314:	89 01                	mov    DWORD PTR [ecx],eax
c0017316:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017319:	b8 00 00 00 00       	mov    eax,0x0
c001731e:	c3                   	ret    
c001731f:	90                   	nop

c0017320 <FAT::~FAT()>:
c0017320:	83 ec 0c             	sub    esp,0xc
c0017323:	ba d4 07 02 c0       	mov    edx,0xc00207d4
c0017328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001732c:	89 10                	mov    DWORD PTR [eax],edx
c001732e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017332:	83 ec 0c             	sub    esp,0xc
c0017335:	50                   	push   eax
c0017336:	e8 15 36 ff ff       	call   c000a950 <Filesystem::~Filesystem()>
c001733b:	83 c4 10             	add    esp,0x10
c001733e:	90                   	nop
c001733f:	83 c4 0c             	add    esp,0xc
c0017342:	c3                   	ret    
c0017343:	90                   	nop

c0017344 <FAT::~FAT()>:
c0017344:	83 ec 0c             	sub    esp,0xc
c0017347:	83 ec 0c             	sub    esp,0xc
c001734a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001734e:	e8 cd ff ff ff       	call   c0017320 <FAT::~FAT()>
c0017353:	83 c4 10             	add    esp,0x10
c0017356:	83 ec 08             	sub    esp,0x8
c0017359:	6a 08                	push   0x8
c001735b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001735f:	e8 b0 31 ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c0017364:	83 c4 10             	add    esp,0x10
c0017367:	83 c4 0c             	add    esp,0xc
c001736a:	c3                   	ret    
c001736b:	90                   	nop

c001736c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001736c:	83 ec 1c             	sub    esp,0x1c
c001736f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0017376:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001737b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001737f:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017386:	83 f8 ff             	cmp    eax,0xffffffff
c0017389:	75 35                	jne    c00173c0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001738b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001738f:	88 c2                	mov    dl,al
c0017391:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017396:	01 d0                	add    eax,edx
c0017398:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001739c:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c00173a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173a6:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c00173ad:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c00173b2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00173b6:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c00173bd:	eb 19                	jmp    c00173d8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00173bf:	90                   	nop
c00173c0:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00173c4:	88 c2                	mov    dl,al
c00173c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173ca:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c00173d1:	01 d0                	add    eax,edx
c00173d3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00173d7:	90                   	nop
c00173d8:	83 ec 04             	sub    esp,0x4
c00173db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00173df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00173e3:	8d 44 24 15          	lea    eax,[esp+0x15]
c00173e7:	50                   	push   eax
c00173e8:	e8 67 da fe ff       	call   c0004e54 <f_getlabel>
c00173ed:	83 c4 10             	add    esp,0x10
c00173f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173f4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00173f9:	75 09                	jne    c0017404 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00173fb:	b8 00 00 00 00       	mov    eax,0x0
c0017400:	eb 0a                	jmp    c001740c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0017402:	66 90                	xchg   ax,ax
c0017404:	b8 01 00 00 00       	mov    eax,0x1
c0017409:	8d 76 00             	lea    esi,[esi+0x0]
c001740c:	83 c4 1c             	add    esp,0x1c
c001740f:	c3                   	ret    

c0017410 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0017410:	57                   	push   edi
c0017411:	83 ec 58             	sub    esp,0x58
c0017414:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001741c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017420:	b8 00 00 00 00       	mov    eax,0x0
c0017425:	b9 0f 00 00 00       	mov    ecx,0xf
c001742a:	fc                   	cld    
c001742b:	89 d7                	mov    edi,edx
c001742d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001742f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017433:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c001743a:	83 f8 ff             	cmp    eax,0xffffffff
c001743d:	75 35                	jne    c0017474 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001743f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017443:	88 c2                	mov    dl,al
c0017445:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c001744a:	01 d0                	add    eax,edx
c001744c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017450:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c0017456:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001745a:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c0017461:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017466:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001746a:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c0017471:	eb 19                	jmp    c001748c <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0017473:	90                   	nop
c0017474:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017478:	88 c2                	mov    dl,al
c001747a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001747e:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017485:	01 d0                	add    eax,edx
c0017487:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001748b:	90                   	nop
c001748c:	83 ec 08             	sub    esp,0x8
c001748f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0017493:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017497:	50                   	push   eax
c0017498:	e8 23 93 fe ff       	call   c00007c0 <strcat>
c001749d:	83 c4 10             	add    esp,0x10
c00174a0:	83 ec 0c             	sub    esp,0xc
c00174a3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00174a7:	50                   	push   eax
c00174a8:	e8 f8 da fe ff       	call   c0004fa5 <f_setlabel>
c00174ad:	83 c4 10             	add    esp,0x10
c00174b0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00174b4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00174b9:	75 09                	jne    c00174c4 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00174bb:	b8 00 00 00 00       	mov    eax,0x0
c00174c0:	eb 0a                	jmp    c00174cc <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00174c2:	66 90                	xchg   ax,ax
c00174c4:	b8 01 00 00 00       	mov    eax,0x1
c00174c9:	8d 76 00             	lea    esi,[esi+0x0]
c00174cc:	83 c4 58             	add    esp,0x58
c00174cf:	5f                   	pop    edi
c00174d0:	c3                   	ret    
c00174d1:	90                   	nop
c00174d2:	66 90                	xchg   ax,ax

c00174d4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00174d4:	83 ec 2c             	sub    esp,0x2c
c00174d7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00174df:	83 ec 08             	sub    esp,0x8
c00174e2:	68 ac 07 02 c0       	push   0xc00207ac
c00174e7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00174eb:	e8 f0 91 fe ff       	call   c00006e0 <strcmp>
c00174f0:	83 c4 10             	add    esp,0x10
c00174f3:	85 c0                	test   eax,eax
c00174f5:	0f 94 c0             	sete   al
c00174f8:	84 c0                	test   al,al
c00174fa:	74 10                	je     c001750c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00174fc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0017504:	e9 b3 00 00 00       	jmp    c00175bc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017509:	8d 76 00             	lea    esi,[esi+0x0]
c001750c:	83 ec 08             	sub    esp,0x8
c001750f:	68 9e 07 02 c0       	push   0xc002079e
c0017514:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017518:	e8 c3 91 fe ff       	call   c00006e0 <strcmp>
c001751d:	83 c4 10             	add    esp,0x10
c0017520:	85 c0                	test   eax,eax
c0017522:	0f 94 c0             	sete   al
c0017525:	84 c0                	test   al,al
c0017527:	74 0f                	je     c0017538 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0017529:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0017531:	e9 86 00 00 00       	jmp    c00175bc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017536:	66 90                	xchg   ax,ax
c0017538:	83 ec 08             	sub    esp,0x8
c001753b:	68 a4 07 02 c0       	push   0xc00207a4
c0017540:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017544:	e8 97 91 fe ff       	call   c00006e0 <strcmp>
c0017549:	83 c4 10             	add    esp,0x10
c001754c:	85 c0                	test   eax,eax
c001754e:	0f 94 c0             	sete   al
c0017551:	84 c0                	test   al,al
c0017553:	74 0b                	je     c0017560 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0017555:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001755d:	eb 5d                	jmp    c00175bc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001755f:	90                   	nop
c0017560:	83 ec 08             	sub    esp,0x8
c0017563:	68 3c e6 01 c0       	push   0xc001e63c
c0017568:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001756c:	e8 6f 91 fe ff       	call   c00006e0 <strcmp>
c0017571:	83 c4 10             	add    esp,0x10
c0017574:	85 c0                	test   eax,eax
c0017576:	0f 94 c0             	sete   al
c0017579:	84 c0                	test   al,al
c001757b:	74 0b                	je     c0017588 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001757d:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0017585:	eb 35                	jmp    c00175bc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017587:	90                   	nop
c0017588:	83 ec 08             	sub    esp,0x8
c001758b:	68 aa 07 02 c0       	push   0xc00207aa
c0017590:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017594:	e8 47 91 fe ff       	call   c00006e0 <strcmp>
c0017599:	83 c4 10             	add    esp,0x10
c001759c:	85 c0                	test   eax,eax
c001759e:	0f 94 c0             	sete   al
c00175a1:	84 c0                	test   al,al
c00175a3:	74 0b                	je     c00175b0 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c00175a5:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00175ad:	eb 0d                	jmp    c00175bc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00175af:	90                   	nop
c00175b0:	b8 08 00 00 00       	mov    eax,0x8
c00175b5:	e9 ea 00 00 00       	jmp    c00176a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00175ba:	66 90                	xchg   ax,ax
c00175bc:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00175c3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00175c8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00175cc:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c00175d3:	83 f8 ff             	cmp    eax,0xffffffff
c00175d6:	75 34                	jne    c001760c <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c00175d8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00175dc:	88 c2                	mov    dl,al
c00175de:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c00175e3:	01 d0                	add    eax,edx
c00175e5:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00175e9:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c00175ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00175f3:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c00175fa:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c00175ff:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017603:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c001760a:	eb 18                	jmp    c0017624 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001760c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0017610:	88 c2                	mov    dl,al
c0017612:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017616:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c001761d:	01 d0                	add    eax,edx
c001761f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0017623:	90                   	nop
c0017624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017628:	88 04 24             	mov    BYTE PTR [esp],al
c001762b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001762f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017633:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001763b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0017640:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017648:	83 ec 0c             	sub    esp,0xc
c001764b:	68 00 20 00 00       	push   0x2000
c0017650:	e8 20 02 ff ff       	call   c0007875 <malloc>
c0017655:	83 c4 10             	add    esp,0x10
c0017658:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001765c:	68 00 20 00 00       	push   0x2000
c0017661:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017665:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017669:	50                   	push   eax
c001766a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001766e:	50                   	push   eax
c001766f:	e8 21 dc fe ff       	call   c0005295 <f_mkfs>
c0017674:	83 c4 10             	add    esp,0x10
c0017677:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001767b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017680:	75 0a                	jne    c001768c <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c0017682:	b8 00 00 00 00       	mov    eax,0x0
c0017687:	eb 1b                	jmp    c00176a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0017689:	8d 76 00             	lea    esi,[esi+0x0]
c001768c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0017691:	75 09                	jne    c001769c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0017693:	b8 09 00 00 00       	mov    eax,0x9
c0017698:	eb 0a                	jmp    c00176a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001769a:	66 90                	xchg   ax,ax
c001769c:	b8 01 00 00 00       	mov    eax,0x1
c00176a1:	8d 76 00             	lea    esi,[esi+0x0]
c00176a4:	83 c4 2c             	add    esp,0x2c
c00176a7:	c3                   	ret    

c00176a8 <FAT::tryMount(LogicalDisk*, int)>:
c00176a8:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00176ae:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c00176b3:	83 f8 14             	cmp    eax,0x14
c00176b6:	75 18                	jne    c00176d0 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00176b8:	83 ec 0c             	sub    esp,0xc
c00176bb:	68 b0 07 02 c0       	push   0xc00207b0
c00176c0:	e8 d6 8c ff ff       	call   c001039b <KePanic(char const*)>
c00176c5:	83 c4 10             	add    esp,0x10
c00176c8:	b0 00                	mov    al,0x0
c00176ca:	e9 e9 01 00 00       	jmp    c00178b8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00176cf:	90                   	nop
c00176d0:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00176d7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00176dd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00176e3:	3d 00 02 00 00       	cmp    eax,0x200
c00176e8:	74 0a                	je     c00176f4 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00176ea:	b0 00                	mov    al,0x0
c00176ec:	e9 c7 01 00 00       	jmp    c00178b8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00176f1:	8d 76 00             	lea    esi,[esi+0x0]
c00176f4:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00176fc:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0017703:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c001770a:	83 f8 ff             	cmp    eax,0xffffffff
c001770d:	74 09                	je     c0017718 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001770f:	b0 01                	mov    al,0x1
c0017711:	e9 a2 01 00 00       	jmp    c00178b8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017716:	66 90                	xchg   ax,ax
c0017718:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0017722:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001772a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0017731:	88 c2                	mov    dl,al
c0017733:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017738:	01 d0                	add    eax,edx
c001773a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0017741:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c0017747:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001774e:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c0017755:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c001775a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0017761:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c0017768:	83 ec 0c             	sub    esp,0xc
c001776b:	68 34 02 00 00       	push   0x234
c0017770:	e8 00 01 ff ff       	call   c0007875 <malloc>
c0017775:	83 c4 10             	add    esp,0x10
c0017778:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001777f:	83 ec 04             	sub    esp,0x4
c0017782:	6a 00                	push   0x0
c0017784:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001778b:	50                   	push   eax
c001778c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0017793:	e8 23 c3 fe ff       	call   c0003abb <f_mount>
c0017798:	83 c4 10             	add    esp,0x10
c001779b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00177a2:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00177aa:	74 1c                	je     c00177c8 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00177ac:	83 ec 0c             	sub    esp,0xc
c00177af:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00177b6:	e8 da 00 ff ff       	call   c0007895 <rfree>
c00177bb:	83 c4 10             	add    esp,0x10
c00177be:	b0 00                	mov    al,0x0
c00177c0:	e9 f3 00 00 00       	jmp    c00178b8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00177c5:	8d 76 00             	lea    esi,[esi+0x0]
c00177c8:	83 ec 04             	sub    esp,0x4
c00177cb:	68 00 01 00 00       	push   0x100
c00177d0:	6a 00                	push   0x0
c00177d2:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00177d9:	50                   	push   eax
c00177da:	e8 f1 8c fe ff       	call   c00004d0 <memset>
c00177df:	83 c4 10             	add    esp,0x10
c00177e2:	83 ec 08             	sub    esp,0x8
c00177e5:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00177ec:	50                   	push   eax
c00177ed:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00177f4:	50                   	push   eax
c00177f5:	e8 c6 8f fe ff       	call   c00007c0 <strcat>
c00177fa:	83 c4 10             	add    esp,0x10
c00177fd:	83 ec 08             	sub    esp,0x8
c0017800:	68 be 07 02 c0       	push   0xc00207be
c0017805:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001780c:	50                   	push   eax
c001780d:	e8 ae 8f fe ff       	call   c00007c0 <strcat>
c0017812:	83 c4 10             	add    esp,0x10
c0017815:	83 ec 04             	sub    esp,0x4
c0017818:	6a 01                	push   0x1
c001781a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0017821:	50                   	push   eax
c0017822:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017826:	50                   	push   eax
c0017827:	e8 f1 c2 fe ff       	call   c0003b1d <f_open>
c001782c:	83 c4 10             	add    esp,0x10
c001782f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0017836:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001783d:	85 c0                	test   eax,eax
c001783f:	74 0b                	je     c001784c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0017841:	78 31                	js     c0017874 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0017843:	83 e8 04             	sub    eax,0x4
c0017846:	83 f8 01             	cmp    eax,0x1
c0017849:	77 29                	ja     c0017874 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001784b:	90                   	nop
c001784c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0017854:	83 ec 0c             	sub    esp,0xc
c0017857:	8d 44 24 14          	lea    eax,[esp+0x14]
c001785b:	50                   	push   eax
c001785c:	e8 6f ca fe ff       	call   c00042d0 <f_close>
c0017861:	83 c4 10             	add    esp,0x10
c0017864:	90                   	nop
c0017865:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c001786d:	74 41                	je     c00178b0 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001786f:	eb 33                	jmp    c00178a4 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0017871:	8d 76 00             	lea    esi,[esi+0x0]
c0017874:	83 ec 0c             	sub    esp,0xc
c0017877:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001787e:	e8 12 00 ff ff       	call   c0007895 <rfree>
c0017883:	83 c4 10             	add    esp,0x10
c0017886:	83 ec 04             	sub    esp,0x4
c0017889:	6a 00                	push   0x0
c001788b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0017892:	50                   	push   eax
c0017893:	6a 00                	push   0x0
c0017895:	e8 21 c2 fe ff       	call   c0003abb <f_mount>
c001789a:	83 c4 10             	add    esp,0x10
c001789d:	b0 00                	mov    al,0x0
c001789f:	eb 17                	jmp    c00178b8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00178a1:	8d 76 00             	lea    esi,[esi+0x0]
c00178a4:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c00178a9:	40                   	inc    eax
c00178aa:	a3 20 72 02 c0       	mov    ds:0xc0027220,eax
c00178af:	90                   	nop
c00178b0:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00178b7:	90                   	nop
c00178b8:	81 c4 4c 03 00 00    	add    esp,0x34c
c00178be:	c3                   	ret    
c00178bf:	90                   	nop

c00178c0 <FAT::allocateSwapfile(char const*, int)>:
c00178c0:	55                   	push   ebp
c00178c1:	57                   	push   edi
c00178c2:	56                   	push   esi
c00178c3:	53                   	push   ebx
c00178c4:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00178ca:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00178d5:	83 ec 0c             	sub    esp,0xc
c00178d8:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00178df:	e8 91 ff fe ff       	call   c0007875 <malloc>
c00178e4:	83 c4 10             	add    esp,0x10
c00178e7:	89 c7                	mov    edi,eax
c00178e9:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00178ee:	83 ec 04             	sub    esp,0x4
c00178f1:	50                   	push   eax
c00178f2:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00178f9:	57                   	push   edi
c00178fa:	e8 81 32 ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c00178ff:	83 c4 10             	add    esp,0x10
c0017902:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0017909:	83 ec 04             	sub    esp,0x4
c001790c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0017910:	50                   	push   eax
c0017911:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017915:	50                   	push   eax
c0017916:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001791d:	e8 ca 35 ff ff       	call   c000aeec <File::stat(unsigned long long*, bool*)>
c0017922:	83 c4 10             	add    esp,0x10
c0017925:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001792c:	c1 e0 14             	shl    eax,0x14
c001792f:	89 c7                	mov    edi,eax
c0017931:	89 c5                	mov    ebp,eax
c0017933:	c1 fd 1f             	sar    ebp,0x1f
c0017936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001793a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001793e:	89 f9                	mov    ecx,edi
c0017940:	31 c1                	xor    ecx,eax
c0017942:	89 cb                	mov    ebx,ecx
c0017944:	89 e9                	mov    ecx,ebp
c0017946:	31 d1                	xor    ecx,edx
c0017948:	89 ce                	mov    esi,ecx
c001794a:	89 f0                	mov    eax,esi
c001794c:	09 d8                	or     eax,ebx
c001794e:	0f 84 9c 00 00 00    	je     c00179f0 <FAT::allocateSwapfile(char const*, int)+0x130>
c0017954:	83 ec 0c             	sub    esp,0xc
c0017957:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001795e:	e8 55 34 ff ff       	call   c000adb8 <File::unlink()>
c0017963:	83 c4 10             	add    esp,0x10
c0017966:	83 ec 08             	sub    esp,0x8
c0017969:	6a 12                	push   0x12
c001796b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017972:	e8 c9 32 ff ff       	call   c000ac40 <File::open(FileOpenMode)>
c0017977:	83 c4 10             	add    esp,0x10
c001797a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017981:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0017987:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001798e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0017995:	c1 e0 14             	shl    eax,0x14
c0017998:	83 ec 04             	sub    esp,0x4
c001799b:	6a 01                	push   0x1
c001799d:	50                   	push   eax
c001799e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00179a5:	e8 8b d7 fe ff       	call   c0005135 <f_expand>
c00179aa:	83 c4 10             	add    esp,0x10
c00179ad:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00179b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00179b6:	83 c0 10             	add    eax,0x10
c00179b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00179bb:	83 ec 0c             	sub    esp,0xc
c00179be:	8d 54 24 24          	lea    edx,[esp+0x24]
c00179c2:	52                   	push   edx
c00179c3:	8d 54 24 30          	lea    edx,[esp+0x30]
c00179c7:	52                   	push   edx
c00179c8:	6a 00                	push   0x0
c00179ca:	68 00 04 00 00       	push   0x400
c00179cf:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00179d6:	ff d0                	call   eax
c00179d8:	83 c4 20             	add    esp,0x20
c00179db:	83 ec 0c             	sub    esp,0xc
c00179de:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00179e5:	e8 b4 32 ff ff       	call   c000ac9e <File::close()>
c00179ea:	83 c4 10             	add    esp,0x10
c00179ed:	8d 76 00             	lea    esi,[esi+0x0]
c00179f0:	83 ec 08             	sub    esp,0x8
c00179f3:	6a 01                	push   0x1
c00179f5:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00179fc:	e8 3f 32 ff ff       	call   c000ac40 <File::open(FileOpenMode)>
c0017a01:	83 c4 10             	add    esp,0x10
c0017a04:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017a0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a0d:	83 c0 0c             	add    eax,0xc
c0017a10:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a12:	83 ec 0c             	sub    esp,0xc
c0017a15:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017a19:	52                   	push   edx
c0017a1a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0017a1e:	52                   	push   edx
c0017a1f:	6a 00                	push   0x0
c0017a21:	6a 04                	push   0x4
c0017a23:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0017a2a:	ff d0                	call   eax
c0017a2c:	83 c4 20             	add    esp,0x20
c0017a2f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017a36:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0017a3c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0017a43:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0017a4a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017a4d:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0017a54:	83 ec 0c             	sub    esp,0xc
c0017a57:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017a5e:	e8 3b 32 ff ff       	call   c000ac9e <File::close()>
c0017a63:	83 c4 10             	add    esp,0x10
c0017a66:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0017a6d:	ba 00 00 00 00       	mov    edx,0x0
c0017a72:	81 c4 3c 04 00 00    	add    esp,0x43c
c0017a78:	5b                   	pop    ebx
c0017a79:	5e                   	pop    esi
c0017a7a:	5f                   	pop    edi
c0017a7b:	5d                   	pop    ebp
c0017a7c:	c3                   	ret    
c0017a7d:	90                   	nop
c0017a7e:	66 90                	xchg   ax,ax

c0017a80 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0017a80:	57                   	push   edi
c0017a81:	56                   	push   esi
c0017a82:	53                   	push   ebx
c0017a83:	81 ec 50 02 00 00    	sub    esp,0x250
c0017a89:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0017a91:	74 0d                	je     c0017aa0 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0017a93:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0017a9b:	75 0f                	jne    c0017aac <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0017a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0017aa0:	b8 04 00 00 00       	mov    eax,0x4
c0017aa5:	e9 36 01 00 00       	jmp    c0017be0 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0017aaa:	66 90                	xchg   ax,ax
c0017aac:	83 ec 08             	sub    esp,0x8
c0017aaf:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0017ab6:	50                   	push   eax
c0017ab7:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0017abe:	e8 d0 ca fe ff       	call   c0004593 <f_readdir>
c0017ac3:	83 c4 10             	add    esp,0x10
c0017ac6:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0017acd:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0017ad4:	83 ec 0c             	sub    esp,0xc
c0017ad7:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0017ade:	83 c0 16             	add    eax,0x16
c0017ae1:	50                   	push   eax
c0017ae2:	e8 59 8a fe ff       	call   c0000540 <strlen>
c0017ae7:	83 c4 10             	add    esp,0x10
c0017aea:	ba 00 00 00 00       	mov    edx,0x0
c0017aef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017af3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017af7:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0017afe:	25 ff 00 00 00       	and    eax,0xff
c0017b03:	83 e0 10             	and    eax,0x10
c0017b06:	74 08                	je     c0017b10 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0017b08:	b8 02 00 00 00       	mov    eax,0x2
c0017b0d:	eb 09                	jmp    c0017b18 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0017b0f:	90                   	nop
c0017b10:	b8 01 00 00 00       	mov    eax,0x1
c0017b15:	8d 76 00             	lea    esi,[esi+0x0]
c0017b18:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017b1c:	83 ec 08             	sub    esp,0x8
c0017b1f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0017b26:	83 c0 16             	add    eax,0x16
c0017b29:	50                   	push   eax
c0017b2a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017b2e:	83 c0 10             	add    eax,0x10
c0017b31:	50                   	push   eax
c0017b32:	e8 c9 8a fe ff       	call   c0000600 <strcpy>
c0017b37:	83 c4 10             	add    esp,0x10
c0017b3a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0017b41:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0017b48:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017b4c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0017b53:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0017b5a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0017b61:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0017b68:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0017b6f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0017b76:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0017b7d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0017b84:	89 c6                	mov    esi,eax
c0017b86:	89 d7                	mov    edi,edx
c0017b88:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017b8a:	89 c8                	mov    eax,ecx
c0017b8c:	89 fa                	mov    edx,edi
c0017b8e:	89 f3                	mov    ebx,esi
c0017b90:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0017b97:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0017b9e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0017ba5:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0017bac:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0017bb2:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0017bb9:	84 c0                	test   al,al
c0017bbb:	75 07                	jne    c0017bc4 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0017bbd:	b8 07 00 00 00       	mov    eax,0x7
c0017bc2:	eb 1c                	jmp    c0017be0 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0017bc4:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0017bcb:	85 c0                	test   eax,eax
c0017bcd:	75 09                	jne    c0017bd8 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0017bcf:	b8 00 00 00 00       	mov    eax,0x0
c0017bd4:	eb 0a                	jmp    c0017be0 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0017bd6:	66 90                	xchg   ax,ax
c0017bd8:	b8 01 00 00 00       	mov    eax,0x1
c0017bdd:	8d 76 00             	lea    esi,[esi+0x0]
c0017be0:	81 c4 50 02 00 00    	add    esp,0x250
c0017be6:	5b                   	pop    ebx
c0017be7:	5e                   	pop    esi
c0017be8:	5f                   	pop    edi
c0017be9:	c3                   	ret    
c0017bea:	66 90                	xchg   ax,ax

c0017bec <FAT::read(void*, unsigned long, void*, int*)>:
c0017bec:	83 ec 1c             	sub    esp,0x1c
c0017bef:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017bf4:	74 0a                	je     c0017c00 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0017bf6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0017bfb:	75 0b                	jne    c0017c08 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0017bfd:	8d 76 00             	lea    esi,[esi+0x0]
c0017c00:	b8 04 00 00 00       	mov    eax,0x4
c0017c05:	eb 41                	jmp    c0017c48 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0017c07:	90                   	nop
c0017c08:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017c0c:	50                   	push   eax
c0017c0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c11:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017c15:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017c19:	e8 ca c1 fe ff       	call   c0003de8 <f_read>
c0017c1e:	83 c4 10             	add    esp,0x10
c0017c21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017c25:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c29:	89 c2                	mov    edx,eax
c0017c2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c2f:	89 10                	mov    DWORD PTR [eax],edx
c0017c31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c35:	85 c0                	test   eax,eax
c0017c37:	75 07                	jne    c0017c40 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0017c39:	b8 00 00 00 00       	mov    eax,0x0
c0017c3e:	eb 08                	jmp    c0017c48 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0017c40:	b8 01 00 00 00       	mov    eax,0x1
c0017c45:	8d 76 00             	lea    esi,[esi+0x0]
c0017c48:	83 c4 1c             	add    esp,0x1c
c0017c4b:	c3                   	ret    

c0017c4c <FAT::write(void*, unsigned long, void*, int*)>:
c0017c4c:	83 ec 1c             	sub    esp,0x1c
c0017c4f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017c54:	74 0a                	je     c0017c60 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0017c56:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0017c5b:	75 0b                	jne    c0017c68 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0017c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0017c60:	b8 04 00 00 00       	mov    eax,0x4
c0017c65:	eb 41                	jmp    c0017ca8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0017c67:	90                   	nop
c0017c68:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017c6c:	50                   	push   eax
c0017c6d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017c75:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017c79:	e8 69 c3 fe ff       	call   c0003fe7 <f_write>
c0017c7e:	83 c4 10             	add    esp,0x10
c0017c81:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017c85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c89:	89 c2                	mov    edx,eax
c0017c8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c8f:	89 10                	mov    DWORD PTR [eax],edx
c0017c91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c95:	85 c0                	test   eax,eax
c0017c97:	75 07                	jne    c0017ca0 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0017c99:	b8 00 00 00 00       	mov    eax,0x0
c0017c9e:	eb 08                	jmp    c0017ca8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0017ca0:	b8 01 00 00 00       	mov    eax,0x1
c0017ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0017ca8:	83 c4 1c             	add    esp,0x1c
c0017cab:	c3                   	ret    

c0017cac <FAT::close(void*)>:
c0017cac:	83 ec 1c             	sub    esp,0x1c
c0017caf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017cb4:	75 0a                	jne    c0017cc0 <FAT::close(void*)+0x14>
c0017cb6:	b8 04 00 00 00       	mov    eax,0x4
c0017cbb:	eb 3f                	jmp    c0017cfc <FAT::close(void*)+0x50>
c0017cbd:	8d 76 00             	lea    esi,[esi+0x0]
c0017cc0:	83 ec 0c             	sub    esp,0xc
c0017cc3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017cc7:	e8 04 c6 fe ff       	call   c00042d0 <f_close>
c0017ccc:	83 c4 10             	add    esp,0x10
c0017ccf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017cd3:	83 ec 0c             	sub    esp,0xc
c0017cd6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017cda:	e8 a6 fb fe ff       	call   c0007885 <free>
c0017cdf:	83 c4 10             	add    esp,0x10
c0017ce2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ce6:	85 c0                	test   eax,eax
c0017ce8:	75 0a                	jne    c0017cf4 <FAT::close(void*)+0x48>
c0017cea:	b8 00 00 00 00       	mov    eax,0x0
c0017cef:	eb 0b                	jmp    c0017cfc <FAT::close(void*)+0x50>
c0017cf1:	8d 76 00             	lea    esi,[esi+0x0]
c0017cf4:	b8 01 00 00 00       	mov    eax,0x1
c0017cf9:	8d 76 00             	lea    esi,[esi+0x0]
c0017cfc:	83 c4 1c             	add    esp,0x1c
c0017cff:	c3                   	ret    

c0017d00 <FAT::closeDir(void*)>:
c0017d00:	83 ec 1c             	sub    esp,0x1c
c0017d03:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017d08:	75 0a                	jne    c0017d14 <FAT::closeDir(void*)+0x14>
c0017d0a:	b8 04 00 00 00       	mov    eax,0x4
c0017d0f:	eb 3f                	jmp    c0017d50 <FAT::closeDir(void*)+0x50>
c0017d11:	8d 76 00             	lea    esi,[esi+0x0]
c0017d14:	83 ec 0c             	sub    esp,0xc
c0017d17:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017d1b:	e8 51 c8 fe ff       	call   c0004571 <f_closedir>
c0017d20:	83 c4 10             	add    esp,0x10
c0017d23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d27:	83 ec 0c             	sub    esp,0xc
c0017d2a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017d2e:	e8 52 fb fe ff       	call   c0007885 <free>
c0017d33:	83 c4 10             	add    esp,0x10
c0017d36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d3a:	85 c0                	test   eax,eax
c0017d3c:	75 0a                	jne    c0017d48 <FAT::closeDir(void*)+0x48>
c0017d3e:	b8 00 00 00 00       	mov    eax,0x0
c0017d43:	eb 0b                	jmp    c0017d50 <FAT::closeDir(void*)+0x50>
c0017d45:	8d 76 00             	lea    esi,[esi+0x0]
c0017d48:	b8 01 00 00 00       	mov    eax,0x1
c0017d4d:	8d 76 00             	lea    esi,[esi+0x0]
c0017d50:	83 c4 1c             	add    esp,0x1c
c0017d53:	c3                   	ret    

c0017d54 <FAT::seek(void*, unsigned long long)>:
c0017d54:	83 ec 2c             	sub    esp,0x2c
c0017d57:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017d5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d5f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017d63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d67:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0017d6c:	75 0a                	jne    c0017d78 <FAT::seek(void*, unsigned long long)+0x24>
c0017d6e:	b8 04 00 00 00       	mov    eax,0x4
c0017d73:	eb 33                	jmp    c0017da8 <FAT::seek(void*, unsigned long long)+0x54>
c0017d75:	8d 76 00             	lea    esi,[esi+0x0]
c0017d78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d7c:	83 ec 08             	sub    esp,0x8
c0017d7f:	50                   	push   eax
c0017d80:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017d84:	e8 76 c5 fe ff       	call   c00042ff <f_lseek>
c0017d89:	83 c4 10             	add    esp,0x10
c0017d8c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017d90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d94:	85 c0                	test   eax,eax
c0017d96:	75 08                	jne    c0017da0 <FAT::seek(void*, unsigned long long)+0x4c>
c0017d98:	b8 00 00 00 00       	mov    eax,0x0
c0017d9d:	eb 09                	jmp    c0017da8 <FAT::seek(void*, unsigned long long)+0x54>
c0017d9f:	90                   	nop
c0017da0:	b8 01 00 00 00       	mov    eax,0x1
c0017da5:	8d 76 00             	lea    esi,[esi+0x0]
c0017da8:	83 c4 2c             	add    esp,0x2c
c0017dab:	c3                   	ret    

c0017dac <fatWrapperReadDisk>:
c0017dac:	53                   	push   ebx
c0017dad:	83 ec 18             	sub    esp,0x18
c0017db0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017db4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017db8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017dbc:	25 ff 00 00 00       	and    eax,0xff
c0017dc1:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c0017dc8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017dcc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017dd0:	ba 00 00 00 00       	mov    edx,0x0
c0017dd5:	83 ec 0c             	sub    esp,0xc
c0017dd8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017ddc:	53                   	push   ebx
c0017ddd:	52                   	push   edx
c0017dde:	50                   	push   eax
c0017ddf:	51                   	push   ecx
c0017de0:	e8 45 4f ff ff       	call   c000cd2a <LogicalDisk::read(unsigned long long, int, void*)>
c0017de5:	83 c4 20             	add    esp,0x20
c0017de8:	83 c4 18             	add    esp,0x18
c0017deb:	5b                   	pop    ebx
c0017dec:	c3                   	ret    
c0017ded:	8d 76 00             	lea    esi,[esi+0x0]

c0017df0 <fatWrapperWriteDisk>:
c0017df0:	53                   	push   ebx
c0017df1:	83 ec 18             	sub    esp,0x18
c0017df4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017df8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017dfc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017e00:	25 ff 00 00 00       	and    eax,0xff
c0017e05:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c0017e0c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017e10:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e14:	ba 00 00 00 00       	mov    edx,0x0
c0017e19:	83 ec 0c             	sub    esp,0xc
c0017e1c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017e20:	53                   	push   ebx
c0017e21:	52                   	push   edx
c0017e22:	50                   	push   eax
c0017e23:	51                   	push   ecx
c0017e24:	e8 6d 4f ff ff       	call   c000cd96 <LogicalDisk::write(unsigned long long, int, void*)>
c0017e29:	83 c4 20             	add    esp,0x20
c0017e2c:	83 c4 18             	add    esp,0x18
c0017e2f:	5b                   	pop    ebx
c0017e30:	c3                   	ret    
c0017e31:	8d 76 00             	lea    esi,[esi+0x0]

c0017e34 <fatWrapperIoctl>:
c0017e34:	53                   	push   ebx
c0017e35:	83 ec 28             	sub    esp,0x28
c0017e38:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017e3c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e40:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017e44:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017e48:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0017e4d:	75 35                	jne    c0017e84 <fatWrapperIoctl+0x50>
c0017e4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017e53:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017e57:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017e5b:	25 ff 00 00 00       	and    eax,0xff
c0017e60:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c0017e67:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017e6d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017e73:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017e77:	66 89 02             	mov    WORD PTR [edx],ax
c0017e7a:	b8 00 00 00 00       	mov    eax,0x0
c0017e7f:	e9 c4 00 00 00       	jmp    c0017f48 <fatWrapperIoctl+0x114>
c0017e84:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0017e89:	75 75                	jne    c0017f00 <fatWrapperIoctl+0xcc>
c0017e8b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017e8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017e93:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017e97:	25 ff 00 00 00       	and    eax,0xff
c0017e9c:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c0017ea3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017ea9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017eaf:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0017eb5:	89 c8                	mov    eax,ecx
c0017eb7:	89 da                	mov    edx,ebx
c0017eb9:	0f a4 c2 0a          	shld   edx,eax,0xa
c0017ebd:	c1 e0 0a             	shl    eax,0xa
c0017ec0:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017ec4:	81 e1 ff 00 00 00    	and    ecx,0xff
c0017eca:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c0017ed1:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0017ed7:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0017edd:	89 cb                	mov    ebx,ecx
c0017edf:	c1 fb 1f             	sar    ebx,0x1f
c0017ee2:	53                   	push   ebx
c0017ee3:	51                   	push   ecx
c0017ee4:	52                   	push   edx
c0017ee5:	50                   	push   eax
c0017ee6:	e8 65 59 00 00       	call   c001d850 <__udivdi3>
c0017eeb:	83 c4 10             	add    esp,0x10
c0017eee:	89 c2                	mov    edx,eax
c0017ef0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017ef4:	89 10                	mov    DWORD PTR [eax],edx
c0017ef6:	b8 00 00 00 00       	mov    eax,0x0
c0017efb:	eb 4b                	jmp    c0017f48 <fatWrapperIoctl+0x114>
c0017efd:	8d 76 00             	lea    esi,[esi+0x0]
c0017f00:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0017f05:	75 09                	jne    c0017f10 <fatWrapperIoctl+0xdc>
c0017f07:	b8 00 00 00 00       	mov    eax,0x0
c0017f0c:	eb 3a                	jmp    c0017f48 <fatWrapperIoctl+0x114>
c0017f0e:	66 90                	xchg   ax,ax
c0017f10:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0017f15:	75 19                	jne    c0017f30 <fatWrapperIoctl+0xfc>
c0017f17:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017f1b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017f1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017f23:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0017f29:	b8 00 00 00 00       	mov    eax,0x0
c0017f2e:	eb 18                	jmp    c0017f48 <fatWrapperIoctl+0x114>
c0017f30:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0017f35:	75 09                	jne    c0017f40 <fatWrapperIoctl+0x10c>
c0017f37:	b8 00 00 00 00       	mov    eax,0x0
c0017f3c:	eb 0a                	jmp    c0017f48 <fatWrapperIoctl+0x114>
c0017f3e:	66 90                	xchg   ax,ax
c0017f40:	b8 04 00 00 00       	mov    eax,0x4
c0017f45:	8d 76 00             	lea    esi,[esi+0x0]
c0017f48:	83 c4 28             	add    esp,0x28
c0017f4b:	5b                   	pop    ebx
c0017f4c:	c3                   	ret    
c0017f4d:	90                   	nop
c0017f4e:	66 90                	xchg   ax,ax

c0017f50 <FAT::FAT()>:
c0017f50:	83 ec 1c             	sub    esp,0x1c
c0017f53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f57:	83 ec 0c             	sub    esp,0xc
c0017f5a:	50                   	push   eax
c0017f5b:	e8 cc 29 ff ff       	call   c000a92c <Filesystem::Filesystem()>
c0017f60:	83 c4 10             	add    esp,0x10
c0017f63:	ba d4 07 02 c0       	mov    edx,0xc00207d4
c0017f68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f6c:	89 10                	mov    DWORD PTR [eax],edx
c0017f6e:	c7 05 20 72 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027220,0x0
c0017f78:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017f80:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0017f85:	7f 15                	jg     c0017f9c <FAT::FAT()+0x4c>
c0017f87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f8b:	c7 04 85 40 72 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd8dc0],0xffffffff
c0017f96:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017f9a:	eb e4                	jmp    c0017f80 <FAT::FAT()+0x30>
c0017f9c:	90                   	nop
c0017f9d:	83 c4 1c             	add    esp,0x1c
c0017fa0:	c3                   	ret    
c0017fa1:	90                   	nop
c0017fa2:	66 90                	xchg   ax,ax

c0017fa4 <FAT::fixFilepath(char*)>:
c0017fa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fa8:	8a 00                	mov    al,BYTE PTR [eax]
c0017faa:	3c 40                	cmp    al,0x40
c0017fac:	7e 2e                	jle    c0017fdc <FAT::fixFilepath(char*)+0x38>
c0017fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fb2:	8a 00                	mov    al,BYTE PTR [eax]
c0017fb4:	83 e8 41             	sub    eax,0x41
c0017fb7:	88 c2                	mov    dl,al
c0017fb9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fbd:	88 10                	mov    BYTE PTR [eax],dl
c0017fbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fc3:	8a 00                	mov    al,BYTE PTR [eax]
c0017fc5:	0f be c0             	movsx  eax,al
c0017fc8:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017fcf:	83 c0 30             	add    eax,0x30
c0017fd2:	88 c2                	mov    dl,al
c0017fd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fd8:	88 10                	mov    BYTE PTR [eax],dl
c0017fda:	66 90                	xchg   ax,ax
c0017fdc:	90                   	nop
c0017fdd:	c3                   	ret    
c0017fde:	66 90                	xchg   ax,ax

c0017fe0 <FAT::open(char const*, void**, FileOpenMode)>:
c0017fe0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017fe6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017fee:	74 0c                	je     c0017ffc <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0017ff0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017ff8:	75 0e                	jne    c0018008 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0017ffa:	66 90                	xchg   ax,ax
c0017ffc:	b8 04 00 00 00       	mov    eax,0x4
c0018001:	e9 0a 01 00 00       	jmp    c0018110 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0018006:	66 90                	xchg   ax,ax
c0018008:	83 ec 08             	sub    esp,0x8
c001800b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018012:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018016:	50                   	push   eax
c0018017:	e8 e4 85 fe ff       	call   c0000600 <strcpy>
c001801c:	83 c4 10             	add    esp,0x10
c001801f:	83 ec 08             	sub    esp,0x8
c0018022:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018026:	50                   	push   eax
c0018027:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001802e:	e8 71 ff ff ff       	call   c0017fa4 <FAT::fixFilepath(char*)>
c0018033:	83 c4 10             	add    esp,0x10
c0018036:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001803e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018045:	83 e0 01             	and    eax,0x1
c0018048:	74 0a                	je     c0018054 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001804a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0018052:	66 90                	xchg   ax,ax
c0018054:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001805b:	83 e0 04             	and    eax,0x4
c001805e:	74 10                	je     c0018070 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0018060:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0018068:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0018070:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018077:	83 e0 02             	and    eax,0x2
c001807a:	74 08                	je     c0018084 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001807c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0018084:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001808b:	83 e0 08             	and    eax,0x8
c001808e:	74 08                	je     c0018098 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0018090:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0018098:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001809f:	83 e0 10             	and    eax,0x10
c00180a2:	74 08                	je     c00180ac <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c00180a4:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00180ac:	83 ec 0c             	sub    esp,0xc
c00180af:	68 28 02 00 00       	push   0x228
c00180b4:	e8 bc f7 fe ff       	call   c0007875 <malloc>
c00180b9:	83 c4 10             	add    esp,0x10
c00180bc:	89 c2                	mov    edx,eax
c00180be:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00180c5:	89 10                	mov    DWORD PTR [eax],edx
c00180c7:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00180ce:	31 d2                	xor    edx,edx
c00180d0:	88 c2                	mov    dl,al
c00180d2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00180d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00180db:	83 ec 04             	sub    esp,0x4
c00180de:	52                   	push   edx
c00180df:	8d 54 24 10          	lea    edx,[esp+0x10]
c00180e3:	52                   	push   edx
c00180e4:	50                   	push   eax
c00180e5:	e8 33 ba fe ff       	call   c0003b1d <f_open>
c00180ea:	83 c4 10             	add    esp,0x10
c00180ed:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00180f4:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00180fc:	74 0a                	je     c0018108 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c00180fe:	b8 01 00 00 00       	mov    eax,0x1
c0018103:	eb 0b                	jmp    c0018110 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0018105:	8d 76 00             	lea    esi,[esi+0x0]
c0018108:	b8 00 00 00 00       	mov    eax,0x0
c001810d:	8d 76 00             	lea    esi,[esi+0x0]
c0018110:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018116:	c3                   	ret    
c0018117:	90                   	nop

c0018118 <FAT::openDir(char const*, void**)>:
c0018118:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001811e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018126:	74 0c                	je     c0018134 <FAT::openDir(char const*, void**)+0x1c>
c0018128:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018130:	75 0e                	jne    c0018140 <FAT::openDir(char const*, void**)+0x28>
c0018132:	66 90                	xchg   ax,ax
c0018134:	b8 04 00 00 00       	mov    eax,0x4
c0018139:	e9 82 00 00 00       	jmp    c00181c0 <FAT::openDir(char const*, void**)+0xa8>
c001813e:	66 90                	xchg   ax,ax
c0018140:	83 ec 08             	sub    esp,0x8
c0018143:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001814a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001814e:	50                   	push   eax
c001814f:	e8 ac 84 fe ff       	call   c0000600 <strcpy>
c0018154:	83 c4 10             	add    esp,0x10
c0018157:	83 ec 08             	sub    esp,0x8
c001815a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001815e:	50                   	push   eax
c001815f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018166:	e8 39 fe ff ff       	call   c0017fa4 <FAT::fixFilepath(char*)>
c001816b:	83 c4 10             	add    esp,0x10
c001816e:	83 ec 0c             	sub    esp,0xc
c0018171:	6a 30                	push   0x30
c0018173:	e8 fd f6 fe ff       	call   c0007875 <malloc>
c0018178:	83 c4 10             	add    esp,0x10
c001817b:	89 c2                	mov    edx,eax
c001817d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018184:	89 10                	mov    DWORD PTR [eax],edx
c0018186:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001818d:	8b 00                	mov    eax,DWORD PTR [eax]
c001818f:	83 ec 08             	sub    esp,0x8
c0018192:	8d 54 24 14          	lea    edx,[esp+0x14]
c0018196:	52                   	push   edx
c0018197:	50                   	push   eax
c0018198:	e8 09 c3 fe ff       	call   c00044a6 <f_opendir>
c001819d:	83 c4 10             	add    esp,0x10
c00181a0:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00181a7:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00181af:	74 07                	je     c00181b8 <FAT::openDir(char const*, void**)+0xa0>
c00181b1:	b8 01 00 00 00       	mov    eax,0x1
c00181b6:	eb 08                	jmp    c00181c0 <FAT::openDir(char const*, void**)+0xa8>
c00181b8:	b8 00 00 00 00       	mov    eax,0x0
c00181bd:	8d 76 00             	lea    esi,[esi+0x0]
c00181c0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00181c6:	c3                   	ret    
c00181c7:	90                   	nop

c00181c8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00181c8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00181ce:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00181d6:	75 0c                	jne    c00181e4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00181d8:	b8 04 00 00 00       	mov    eax,0x4
c00181dd:	e9 d6 00 00 00       	jmp    c00182b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00181e2:	66 90                	xchg   ax,ax
c00181e4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00181ec:	75 0a                	jne    c00181f8 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00181ee:	b8 04 00 00 00       	mov    eax,0x4
c00181f3:	e9 c0 00 00 00       	jmp    c00182b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00181f8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0018200:	75 0a                	jne    c001820c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0018202:	b8 04 00 00 00       	mov    eax,0x4
c0018207:	e9 ac 00 00 00       	jmp    c00182b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001820c:	83 ec 08             	sub    esp,0x8
c001820f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018216:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001821d:	50                   	push   eax
c001821e:	e8 dd 83 fe ff       	call   c0000600 <strcpy>
c0018223:	83 c4 10             	add    esp,0x10
c0018226:	83 ec 08             	sub    esp,0x8
c0018229:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018230:	50                   	push   eax
c0018231:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018238:	e8 67 fd ff ff       	call   c0017fa4 <FAT::fixFilepath(char*)>
c001823d:	83 c4 10             	add    esp,0x10
c0018240:	83 ec 08             	sub    esp,0x8
c0018243:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018247:	50                   	push   eax
c0018248:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001824f:	50                   	push   eax
c0018250:	e8 d0 c3 fe ff       	call   c0004625 <f_stat>
c0018255:	83 c4 10             	add    esp,0x10
c0018258:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001825f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018266:	85 c0                	test   eax,eax
c0018268:	74 0a                	je     c0018274 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001826a:	83 f8 04             	cmp    eax,0x4
c001826d:	74 39                	je     c00182a8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001826f:	eb 3f                	jmp    c00182b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0018271:	8d 76 00             	lea    esi,[esi+0x0]
c0018274:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018278:	25 ff 00 00 00       	and    eax,0xff
c001827d:	83 e0 10             	and    eax,0x10
c0018280:	0f 95 c2             	setne  dl
c0018283:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001828a:	88 10                	mov    BYTE PTR [eax],dl
c001828c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018290:	ba 00 00 00 00       	mov    edx,0x0
c0018295:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001829c:	89 01                	mov    DWORD PTR [ecx],eax
c001829e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00182a1:	b8 00 00 00 00       	mov    eax,0x0
c00182a6:	eb 10                	jmp    c00182b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00182a8:	b8 02 00 00 00       	mov    eax,0x2
c00182ad:	eb 09                	jmp    c00182b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00182af:	90                   	nop
c00182b0:	b8 01 00 00 00       	mov    eax,0x1
c00182b5:	8d 76 00             	lea    esi,[esi+0x0]
c00182b8:	81 c4 2c 02 00 00    	add    esp,0x22c
c00182be:	c3                   	ret    
c00182bf:	90                   	nop

c00182c0 <FAT::unlink(char const*)>:
c00182c0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00182c6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00182ce:	75 08                	jne    c00182d8 <FAT::unlink(char const*)+0x18>
c00182d0:	b8 04 00 00 00       	mov    eax,0x4
c00182d5:	eb 61                	jmp    c0018338 <FAT::unlink(char const*)+0x78>
c00182d7:	90                   	nop
c00182d8:	83 ec 08             	sub    esp,0x8
c00182db:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00182e2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00182e6:	50                   	push   eax
c00182e7:	e8 14 83 fe ff       	call   c0000600 <strcpy>
c00182ec:	83 c4 10             	add    esp,0x10
c00182ef:	83 ec 08             	sub    esp,0x8
c00182f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00182f6:	50                   	push   eax
c00182f7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00182fe:	e8 a1 fc ff ff       	call   c0017fa4 <FAT::fixFilepath(char*)>
c0018303:	83 c4 10             	add    esp,0x10
c0018306:	83 ec 0c             	sub    esp,0xc
c0018309:	8d 44 24 18          	lea    eax,[esp+0x18]
c001830d:	50                   	push   eax
c001830e:	e8 77 c5 fe ff       	call   c000488a <f_unlink>
c0018313:	83 c4 10             	add    esp,0x10
c0018316:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001831d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0018324:	85 c0                	test   eax,eax
c0018326:	75 08                	jne    c0018330 <FAT::unlink(char const*)+0x70>
c0018328:	b8 00 00 00 00       	mov    eax,0x0
c001832d:	eb 09                	jmp    c0018338 <FAT::unlink(char const*)+0x78>
c001832f:	90                   	nop
c0018330:	b8 01 00 00 00       	mov    eax,0x1
c0018335:	8d 76 00             	lea    esi,[esi+0x0]
c0018338:	81 c4 1c 01 00 00    	add    esp,0x11c
c001833e:	c3                   	ret    
c001833f:	90                   	nop

c0018340 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0018340:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018346:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001834d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018354:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018358:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001835c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018364:	75 0a                	jne    c0018370 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0018366:	b8 04 00 00 00       	mov    eax,0x4
c001836b:	e9 54 01 00 00       	jmp    c00184c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0018370:	83 ec 08             	sub    esp,0x8
c0018373:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001837a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001837e:	50                   	push   eax
c001837f:	e8 7c 82 fe ff       	call   c0000600 <strcpy>
c0018384:	83 c4 10             	add    esp,0x10
c0018387:	83 ec 08             	sub    esp,0x8
c001838a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001838e:	50                   	push   eax
c001838f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018396:	e8 09 fc ff ff       	call   c0017fa4 <FAT::fixFilepath(char*)>
c001839b:	83 c4 10             	add    esp,0x10
c001839e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00183a6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00183ae:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00183b2:	25 ff 00 00 00       	and    eax,0xff
c00183b7:	83 e0 01             	and    eax,0x1
c00183ba:	74 08                	je     c00183c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c00183bc:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00183c4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00183c8:	25 ff 00 00 00       	and    eax,0xff
c00183cd:	83 e0 02             	and    eax,0x2
c00183d0:	74 0a                	je     c00183dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c00183d2:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00183da:	66 90                	xchg   ax,ax
c00183dc:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00183e0:	25 ff 00 00 00       	and    eax,0xff
c00183e5:	83 e0 04             	and    eax,0x4
c00183e8:	74 0a                	je     c00183f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c00183ea:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00183f2:	66 90                	xchg   ax,ax
c00183f4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00183f8:	25 ff 00 00 00       	and    eax,0xff
c00183fd:	83 e0 08             	and    eax,0x8
c0018400:	74 0a                	je     c001840c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c0018402:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001840a:	66 90                	xchg   ax,ax
c001840c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018410:	25 ff 00 00 00       	and    eax,0xff
c0018415:	83 e0 01             	and    eax,0x1
c0018418:	74 0a                	je     c0018424 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001841a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0018422:	66 90                	xchg   ax,ax
c0018424:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018428:	25 ff 00 00 00       	and    eax,0xff
c001842d:	83 e0 02             	and    eax,0x2
c0018430:	74 0a                	je     c001843c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0018432:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001843a:	66 90                	xchg   ax,ax
c001843c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018440:	25 ff 00 00 00       	and    eax,0xff
c0018445:	83 e0 04             	and    eax,0x4
c0018448:	74 0a                	je     c0018454 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c001844a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0018452:	66 90                	xchg   ax,ax
c0018454:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018458:	25 ff 00 00 00       	and    eax,0xff
c001845d:	83 e0 08             	and    eax,0x8
c0018460:	74 0a                	je     c001846c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c0018462:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001846a:	66 90                	xchg   ax,ax
c001846c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018473:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001847a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018481:	31 d2                	xor    edx,edx
c0018483:	88 c2                	mov    dl,al
c0018485:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001848c:	25 ff 00 00 00       	and    eax,0xff
c0018491:	83 ec 04             	sub    esp,0x4
c0018494:	52                   	push   edx
c0018495:	50                   	push   eax
c0018496:	8d 44 24 24          	lea    eax,[esp+0x24]
c001849a:	50                   	push   eax
c001849b:	e8 5d c8 fe ff       	call   c0004cfd <f_chmod>
c00184a0:	83 c4 10             	add    esp,0x10
c00184a3:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00184aa:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00184b1:	85 c0                	test   eax,eax
c00184b3:	75 07                	jne    c00184bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c00184b5:	b8 00 00 00 00       	mov    eax,0x0
c00184ba:	eb 08                	jmp    c00184c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00184bc:	b8 01 00 00 00       	mov    eax,0x1
c00184c1:	8d 76 00             	lea    esi,[esi+0x0]
c00184c4:	81 c4 2c 01 00 00    	add    esp,0x12c
c00184ca:	c3                   	ret    
c00184cb:	90                   	nop

c00184cc <FAT::rename(char const*, char const*)>:
c00184cc:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00184d2:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00184da:	74 0c                	je     c00184e8 <FAT::rename(char const*, char const*)+0x1c>
c00184dc:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00184e4:	75 0e                	jne    c00184f4 <FAT::rename(char const*, char const*)+0x28>
c00184e6:	66 90                	xchg   ax,ax
c00184e8:	b8 04 00 00 00       	mov    eax,0x4
c00184ed:	e9 9e 00 00 00       	jmp    c0018590 <FAT::rename(char const*, char const*)+0xc4>
c00184f2:	66 90                	xchg   ax,ax
c00184f4:	83 ec 08             	sub    esp,0x8
c00184f7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00184fe:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0018505:	50                   	push   eax
c0018506:	e8 f5 80 fe ff       	call   c0000600 <strcpy>
c001850b:	83 c4 10             	add    esp,0x10
c001850e:	83 ec 08             	sub    esp,0x8
c0018511:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0018518:	50                   	push   eax
c0018519:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0018520:	e8 7f fa ff ff       	call   c0017fa4 <FAT::fixFilepath(char*)>
c0018525:	83 c4 10             	add    esp,0x10
c0018528:	83 ec 08             	sub    esp,0x8
c001852b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0018532:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018536:	50                   	push   eax
c0018537:	e8 c4 80 fe ff       	call   c0000600 <strcpy>
c001853c:	83 c4 10             	add    esp,0x10
c001853f:	83 ec 08             	sub    esp,0x8
c0018542:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018546:	50                   	push   eax
c0018547:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001854e:	e8 51 fa ff ff       	call   c0017fa4 <FAT::fixFilepath(char*)>
c0018553:	83 c4 10             	add    esp,0x10
c0018556:	83 ec 08             	sub    esp,0x8
c0018559:	8d 44 24 14          	lea    eax,[esp+0x14]
c001855d:	50                   	push   eax
c001855e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0018565:	50                   	push   eax
c0018566:	e8 dc c5 fe ff       	call   c0004b47 <f_rename>
c001856b:	83 c4 10             	add    esp,0x10
c001856e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0018575:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001857c:	85 c0                	test   eax,eax
c001857e:	75 08                	jne    c0018588 <FAT::rename(char const*, char const*)+0xbc>
c0018580:	b8 00 00 00 00       	mov    eax,0x0
c0018585:	eb 09                	jmp    c0018590 <FAT::rename(char const*, char const*)+0xc4>
c0018587:	90                   	nop
c0018588:	b8 01 00 00 00       	mov    eax,0x1
c001858d:	8d 76 00             	lea    esi,[esi+0x0]
c0018590:	81 c4 1c 02 00 00    	add    esp,0x21c
c0018596:	c3                   	ret    
c0018597:	90                   	nop

c0018598 <FAT::mkdir(char const*)>:
c0018598:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001859e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00185a6:	75 08                	jne    c00185b0 <FAT::mkdir(char const*)+0x18>
c00185a8:	b8 04 00 00 00       	mov    eax,0x4
c00185ad:	eb 61                	jmp    c0018610 <FAT::mkdir(char const*)+0x78>
c00185af:	90                   	nop
c00185b0:	83 ec 08             	sub    esp,0x8
c00185b3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00185ba:	8d 44 24 18          	lea    eax,[esp+0x18]
c00185be:	50                   	push   eax
c00185bf:	e8 3c 80 fe ff       	call   c0000600 <strcpy>
c00185c4:	83 c4 10             	add    esp,0x10
c00185c7:	83 ec 08             	sub    esp,0x8
c00185ca:	8d 44 24 14          	lea    eax,[esp+0x14]
c00185ce:	50                   	push   eax
c00185cf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00185d6:	e8 c9 f9 ff ff       	call   c0017fa4 <FAT::fixFilepath(char*)>
c00185db:	83 c4 10             	add    esp,0x10
c00185de:	83 ec 0c             	sub    esp,0xc
c00185e1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00185e5:	50                   	push   eax
c00185e6:	e8 c1 c3 fe ff       	call   c00049ac <f_mkdir>
c00185eb:	83 c4 10             	add    esp,0x10
c00185ee:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00185f5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00185fc:	85 c0                	test   eax,eax
c00185fe:	75 08                	jne    c0018608 <FAT::mkdir(char const*)+0x70>
c0018600:	b8 00 00 00 00       	mov    eax,0x0
c0018605:	eb 09                	jmp    c0018610 <FAT::mkdir(char const*)+0x78>
c0018607:	90                   	nop
c0018608:	b8 01 00 00 00       	mov    eax,0x1
c001860d:	8d 76 00             	lea    esi,[esi+0x0]
c0018610:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018616:	c3                   	ret    
c0018617:	90                   	nop

c0018618 <FAT::exists(char const*)>:
c0018618:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001861e:	83 ec 08             	sub    esp,0x8
c0018621:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018628:	8d 44 24 10          	lea    eax,[esp+0x10]
c001862c:	50                   	push   eax
c001862d:	e8 ce 7f fe ff       	call   c0000600 <strcpy>
c0018632:	83 c4 10             	add    esp,0x10
c0018635:	83 ec 08             	sub    esp,0x8
c0018638:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001863c:	50                   	push   eax
c001863d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018644:	e8 5b f9 ff ff       	call   c0017fa4 <FAT::fixFilepath(char*)>
c0018649:	83 c4 10             	add    esp,0x10
c001864c:	83 ec 08             	sub    esp,0x8
c001864f:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0018656:	50                   	push   eax
c0018657:	8d 44 24 10          	lea    eax,[esp+0x10]
c001865b:	50                   	push   eax
c001865c:	e8 c4 bf fe ff       	call   c0004625 <f_stat>
c0018661:	83 c4 10             	add    esp,0x10
c0018664:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001866b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018672:	85 c0                	test   eax,eax
c0018674:	75 06                	jne    c001867c <FAT::exists(char const*)+0x64>
c0018676:	b0 01                	mov    al,0x1
c0018678:	eb 06                	jmp    c0018680 <FAT::exists(char const*)+0x68>
c001867a:	66 90                	xchg   ax,ax
c001867c:	b0 00                	mov    al,0x0
c001867e:	66 90                	xchg   ax,ax
c0018680:	81 c4 2c 02 00 00    	add    esp,0x22c
c0018686:	c3                   	ret    
c0018687:	90                   	nop

c0018688 <isoReadDiscSectorHelper>:
c0018688:	83 ec 2c             	sub    esp,0x2c
c001868b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001868f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018693:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0018698:	83 e8 41             	sub    eax,0x41
c001869b:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c00186a2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00186a6:	ba 00 00 00 00       	mov    edx,0x0
c00186ab:	83 ec 0c             	sub    esp,0xc
c00186ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00186b2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00186b6:	52                   	push   edx
c00186b7:	50                   	push   eax
c00186b8:	51                   	push   ecx
c00186b9:	e8 6c 46 ff ff       	call   c000cd2a <LogicalDisk::read(unsigned long long, int, void*)>
c00186be:	83 c4 20             	add    esp,0x20
c00186c1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00186c5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00186ca:	74 0c                	je     c00186d8 <isoReadDiscSectorHelper+0x50>
c00186cc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00186d0:	c1 e0 0b             	shl    eax,0xb
c00186d3:	eb 0b                	jmp    c00186e0 <isoReadDiscSectorHelper+0x58>
c00186d5:	8d 76 00             	lea    esi,[esi+0x0]
c00186d8:	b8 00 00 00 00       	mov    eax,0x0
c00186dd:	8d 76 00             	lea    esi,[esi+0x0]
c00186e0:	83 c4 2c             	add    esp,0x2c
c00186e3:	c3                   	ret    

c00186e4 <iso_kprintf>:
c00186e4:	83 ec 0c             	sub    esp,0xc
c00186e7:	83 ec 08             	sub    esp,0x8
c00186ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00186ee:	68 e1 01 02 c0       	push   0xc00201e1
c00186f3:	e8 12 1f ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c00186f8:	83 c4 10             	add    esp,0x10
c00186fb:	90                   	nop
c00186fc:	83 c4 0c             	add    esp,0xc
c00186ff:	c3                   	ret    

c0018700 <iso_kprintfd>:
c0018700:	83 ec 0c             	sub    esp,0xc
c0018703:	83 ec 08             	sub    esp,0x8
c0018706:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001870a:	68 db f2 01 c0       	push   0xc001f2db
c001870f:	e8 f6 1e ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0018714:	83 c4 10             	add    esp,0x10
c0018717:	90                   	nop
c0018718:	83 c4 0c             	add    esp,0xc
c001871b:	c3                   	ret    

c001871c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001871c:	b8 08 00 00 00       	mov    eax,0x8
c0018721:	c3                   	ret    

c0018722 <ISO9660::getName()>:
c0018722:	b8 34 08 02 c0       	mov    eax,0xc0020834
c0018727:	c3                   	ret    

c0018728 <ISO9660::closeDir(void*)>:
c0018728:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001872c:	8b 00                	mov    eax,DWORD PTR [eax]
c001872e:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0018731:	90                   	nop

c0018732 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0018732:	b8 01 00 00 00       	mov    eax,0x1
c0018737:	c3                   	ret    

c0018738 <ISO9660::unlink(char const*)>:
c0018738:	b8 01 00 00 00       	mov    eax,0x1
c001873d:	c3                   	ret    

c001873e <ISO9660::write(void*, unsigned long, void*, int*)>:
c001873e:	b8 03 00 00 00       	mov    eax,0x3
c0018743:	c3                   	ret    

c0018744 <ISO9660::rename(char const*, char const*)>:
c0018744:	b8 01 00 00 00       	mov    eax,0x1
c0018749:	c3                   	ret    

c001874a <ISO9660::mkdir(char const*)>:
c001874a:	b8 01 00 00 00       	mov    eax,0x1
c001874f:	c3                   	ret    

c0018750 <ISO9660::~ISO9660()>:
c0018750:	83 ec 0c             	sub    esp,0xc
c0018753:	ba 74 09 02 c0       	mov    edx,0xc0020974
c0018758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001875c:	89 10                	mov    DWORD PTR [eax],edx
c001875e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018762:	83 ec 0c             	sub    esp,0xc
c0018765:	50                   	push   eax
c0018766:	e8 e5 21 ff ff       	call   c000a950 <Filesystem::~Filesystem()>
c001876b:	83 c4 10             	add    esp,0x10
c001876e:	90                   	nop
c001876f:	83 c4 0c             	add    esp,0xc
c0018772:	c3                   	ret    
c0018773:	90                   	nop

c0018774 <ISO9660::~ISO9660()>:
c0018774:	83 ec 0c             	sub    esp,0xc
c0018777:	83 ec 0c             	sub    esp,0xc
c001877a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001877e:	e8 cd ff ff ff       	call   c0018750 <ISO9660::~ISO9660()>
c0018783:	83 c4 10             	add    esp,0x10
c0018786:	83 ec 08             	sub    esp,0x8
c0018789:	6a 08                	push   0x8
c001878b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001878f:	e8 80 1d ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c0018794:	83 c4 10             	add    esp,0x10
c0018797:	83 c4 0c             	add    esp,0xc
c001879a:	c3                   	ret    
c001879b:	90                   	nop

c001879c <ISO9660::exists(char const*)>:
c001879c:	83 ec 18             	sub    esp,0x18
c001879f:	68 4f 08 02 c0       	push   0xc002084f
c00187a4:	e8 f2 7b ff ff       	call   c001039b <KePanic(char const*)>
c00187a9:	31 c0                	xor    eax,eax
c00187ab:	83 c4 1c             	add    esp,0x1c
c00187ae:	c3                   	ret    
c00187af:	90                   	nop

c00187b0 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00187b0:	56                   	push   esi
c00187b1:	53                   	push   ebx
c00187b2:	53                   	push   ebx
c00187b3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00187b7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00187bb:	85 db                	test   ebx,ebx
c00187bd:	0f 84 c2 00 00 00    	je     c0018885 <ISO9660::open(char const*, void**, FileOpenMode)+0xd5>
c00187c3:	85 f6                	test   esi,esi
c00187c5:	0f 84 ba 00 00 00    	je     c0018885 <ISO9660::open(char const*, void**, FileOpenMode)+0xd5>
c00187cb:	b8 03 00 00 00       	mov    eax,0x3
c00187d0:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c00187d5:	0f 85 af 00 00 00    	jne    c001888a <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c00187db:	a0 20 73 02 c0       	mov    al,ds:0xc0027320
c00187e0:	38 03                	cmp    BYTE PTR [ebx],al
c00187e2:	74 1b                	je     c00187ff <ISO9660::open(char const*, void**, FileOpenMode)+0x4f>
c00187e4:	84 c0                	test   al,al
c00187e6:	74 10                	je     c00187f8 <ISO9660::open(char const*, void**, FileOpenMode)+0x48>
c00187e8:	83 ec 0c             	sub    esp,0xc
c00187eb:	68 6d 08 02 c0       	push   0xc002086d
c00187f0:	e8 a6 7b ff ff       	call   c001039b <KePanic(char const*)>
c00187f5:	83 c4 10             	add    esp,0x10
c00187f8:	8a 03                	mov    al,BYTE PTR [ebx]
c00187fa:	a2 20 73 02 c0       	mov    ds:0xc0027320,al
c00187ff:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018802:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018809:	85 c0                	test   eax,eax
c001880b:	74 09                	je     c0018816 <ISO9660::open(char const*, void**, FileOpenMode)+0x66>
c001880d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0018814:	74 48                	je     c001885e <ISO9660::open(char const*, void**, FileOpenMode)+0xae>
c0018816:	83 ec 0c             	sub    esp,0xc
c0018819:	68 7d 08 02 c0       	push   0xc002087d
c001881e:	e8 e7 1d ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0018823:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018826:	83 c4 10             	add    esp,0x10
c0018829:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018830:	85 c0                	test   eax,eax
c0018832:	74 17                	je     c001884b <ISO9660::open(char const*, void**, FileOpenMode)+0x9b>
c0018834:	83 ec 0c             	sub    esp,0xc
c0018837:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001883e:	68 9d 08 02 c0       	push   0xc002089d
c0018843:	e8 c2 1d ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0018848:	83 c4 10             	add    esp,0x10
c001884b:	83 ec 0c             	sub    esp,0xc
c001884e:	0f be 05 20 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027320
c0018855:	50                   	push   eax
c0018856:	e8 00 e0 fe ff       	call   c000685b <init_percd>
c001885b:	83 c4 10             	add    esp,0x10
c001885e:	83 c3 03             	add    ebx,0x3
c0018861:	51                   	push   ecx
c0018862:	51                   	push   ecx
c0018863:	6a 00                	push   0x0
c0018865:	53                   	push   ebx
c0018866:	e8 b8 da fe ff       	call   c0006323 <iso_open>
c001886b:	83 c4 10             	add    esp,0x10
c001886e:	89 c2                	mov    edx,eax
c0018870:	b8 01 00 00 00       	mov    eax,0x1
c0018875:	83 fa ff             	cmp    edx,0xffffffff
c0018878:	74 10                	je     c001888a <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c001887a:	83 c2 32             	add    edx,0x32
c001887d:	31 c0                	xor    eax,eax
c001887f:	01 d2                	add    edx,edx
c0018881:	89 16                	mov    DWORD PTR [esi],edx
c0018883:	eb 05                	jmp    c001888a <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c0018885:	b8 04 00 00 00       	mov    eax,0x4
c001888a:	5a                   	pop    edx
c001888b:	5b                   	pop    ebx
c001888c:	5e                   	pop    esi
c001888d:	c3                   	ret    

c001888e <ISO9660::read(void*, unsigned long, void*, int*)>:
c001888e:	53                   	push   ebx
c001888f:	83 ec 08             	sub    esp,0x8
c0018892:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018896:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001889a:	85 c0                	test   eax,eax
c001889c:	74 2d                	je     c00188cb <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001889e:	85 db                	test   ebx,ebx
c00188a0:	74 29                	je     c00188cb <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00188a2:	b9 02 00 00 00       	mov    ecx,0x2
c00188a7:	52                   	push   edx
c00188a8:	99                   	cdq    
c00188a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00188ad:	f7 f9                	idiv   ecx
c00188af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00188b3:	83 e8 32             	sub    eax,0x32
c00188b6:	50                   	push   eax
c00188b7:	e8 0f db fe ff       	call   c00063cb <iso_read>
c00188bc:	83 c4 10             	add    esp,0x10
c00188bf:	89 03                	mov    DWORD PTR [ebx],eax
c00188c1:	09 d0                	or     eax,edx
c00188c3:	0f 94 c0             	sete   al
c00188c6:	0f b6 c0             	movzx  eax,al
c00188c9:	eb 05                	jmp    c00188d0 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c00188cb:	b8 04 00 00 00       	mov    eax,0x4
c00188d0:	83 c4 08             	add    esp,0x8
c00188d3:	5b                   	pop    ebx
c00188d4:	c3                   	ret    
c00188d5:	90                   	nop

c00188d6 <ISO9660::seek(void*, unsigned long long)>:
c00188d6:	57                   	push   edi
c00188d7:	56                   	push   esi
c00188d8:	b8 04 00 00 00       	mov    eax,0x4
c00188dd:	51                   	push   ecx
c00188de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00188e2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00188e6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00188ea:	85 d2                	test   edx,edx
c00188ec:	74 26                	je     c0018914 <ISO9660::seek(void*, unsigned long long)+0x3e>
c00188ee:	6a 00                	push   0x0
c00188f0:	b9 02 00 00 00       	mov    ecx,0x2
c00188f5:	57                   	push   edi
c00188f6:	89 d0                	mov    eax,edx
c00188f8:	56                   	push   esi
c00188f9:	99                   	cdq    
c00188fa:	f7 f9                	idiv   ecx
c00188fc:	83 e8 32             	sub    eax,0x32
c00188ff:	50                   	push   eax
c0018900:	e8 dc db fe ff       	call   c00064e1 <iso_seek>
c0018905:	83 c4 10             	add    esp,0x10
c0018908:	31 f0                	xor    eax,esi
c001890a:	31 fa                	xor    edx,edi
c001890c:	09 d0                	or     eax,edx
c001890e:	0f 95 c0             	setne  al
c0018911:	0f b6 c0             	movzx  eax,al
c0018914:	5a                   	pop    edx
c0018915:	5e                   	pop    esi
c0018916:	5f                   	pop    edi
c0018917:	c3                   	ret    

c0018918 <ISO9660::tell(void*, unsigned long long*)>:
c0018918:	53                   	push   ebx
c0018919:	83 ec 08             	sub    esp,0x8
c001891c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018920:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018924:	85 c0                	test   eax,eax
c0018926:	74 24                	je     c001894c <ISO9660::tell(void*, unsigned long long*)+0x34>
c0018928:	85 db                	test   ebx,ebx
c001892a:	74 20                	je     c001894c <ISO9660::tell(void*, unsigned long long*)+0x34>
c001892c:	83 ec 0c             	sub    esp,0xc
c001892f:	b9 02 00 00 00       	mov    ecx,0x2
c0018934:	99                   	cdq    
c0018935:	f7 f9                	idiv   ecx
c0018937:	83 e8 32             	sub    eax,0x32
c001893a:	50                   	push   eax
c001893b:	e8 25 dc fe ff       	call   c0006565 <iso_tell>
c0018940:	83 c4 10             	add    esp,0x10
c0018943:	89 03                	mov    DWORD PTR [ebx],eax
c0018945:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0018948:	31 c0                	xor    eax,eax
c001894a:	eb 05                	jmp    c0018951 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001894c:	b8 04 00 00 00       	mov    eax,0x4
c0018951:	83 c4 08             	add    esp,0x8
c0018954:	5b                   	pop    ebx
c0018955:	c3                   	ret    

c0018956 <ISO9660::stat(void*, unsigned long long*)>:
c0018956:	53                   	push   ebx
c0018957:	83 ec 14             	sub    esp,0x14
c001895a:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001895e:	68 c1 08 02 c0       	push   0xc00208c1
c0018963:	e8 a2 1c ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0018968:	83 c4 10             	add    esp,0x10
c001896b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018970:	74 2c                	je     c001899e <ISO9660::stat(void*, unsigned long long*)+0x48>
c0018972:	85 db                	test   ebx,ebx
c0018974:	74 28                	je     c001899e <ISO9660::stat(void*, unsigned long long*)+0x48>
c0018976:	83 ec 0c             	sub    esp,0xc
c0018979:	b9 02 00 00 00       	mov    ecx,0x2
c001897e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018982:	99                   	cdq    
c0018983:	f7 f9                	idiv   ecx
c0018985:	83 e8 32             	sub    eax,0x32
c0018988:	50                   	push   eax
c0018989:	e8 08 dc fe ff       	call   c0006596 <iso_total>
c001898e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0018995:	89 03                	mov    DWORD PTR [ebx],eax
c0018997:	83 c4 10             	add    esp,0x10
c001899a:	31 c0                	xor    eax,eax
c001899c:	eb 05                	jmp    c00189a3 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001899e:	b8 04 00 00 00       	mov    eax,0x4
c00189a3:	83 c4 08             	add    esp,0x8
c00189a6:	5b                   	pop    ebx
c00189a7:	c3                   	ret    

c00189a8 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00189a8:	55                   	push   ebp
c00189a9:	57                   	push   edi
c00189aa:	56                   	push   esi
c00189ab:	53                   	push   ebx
c00189ac:	83 ec 18             	sub    esp,0x18
c00189af:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00189b3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00189b7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00189bb:	68 c9 08 02 c0       	push   0xc00208c9
c00189c0:	e8 45 1c ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c00189c5:	83 c4 10             	add    esp,0x10
c00189c8:	85 ff                	test   edi,edi
c00189ca:	0f 94 c2             	sete   dl
c00189cd:	85 f6                	test   esi,esi
c00189cf:	0f 94 c0             	sete   al
c00189d2:	08 c2                	or     dl,al
c00189d4:	0f 85 d5 00 00 00    	jne    c0018aaf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x107>
c00189da:	85 db                	test   ebx,ebx
c00189dc:	0f 84 cd 00 00 00    	je     c0018aaf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x107>
c00189e2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00189e5:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00189eb:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c00189f2:	a0 20 73 02 c0       	mov    al,ds:0xc0027320
c00189f7:	38 03                	cmp    BYTE PTR [ebx],al
c00189f9:	74 1b                	je     c0018a16 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x6e>
c00189fb:	84 c0                	test   al,al
c00189fd:	74 10                	je     c0018a0f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x67>
c00189ff:	83 ec 0c             	sub    esp,0xc
c0018a02:	68 6d 08 02 c0       	push   0xc002086d
c0018a07:	e8 8f 79 ff ff       	call   c001039b <KePanic(char const*)>
c0018a0c:	83 c4 10             	add    esp,0x10
c0018a0f:	8a 03                	mov    al,BYTE PTR [ebx]
c0018a11:	a2 20 73 02 c0       	mov    ds:0xc0027320,al
c0018a16:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018a19:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018a20:	85 c0                	test   eax,eax
c0018a22:	74 09                	je     c0018a2d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x85>
c0018a24:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0018a2b:	74 51                	je     c0018a7e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xd6>
c0018a2d:	83 ec 0c             	sub    esp,0xc
c0018a30:	68 d1 08 02 c0       	push   0xc00208d1
c0018a35:	e8 d0 1b ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0018a3a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018a3d:	83 c4 10             	add    esp,0x10
c0018a40:	83 3c 85 1c 63 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd9ce4],0x0
c0018a48:	74 21                	je     c0018a6b <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0018a4a:	83 ec 0c             	sub    esp,0xc
c0018a4d:	68 f1 08 02 c0       	push   0xc00208f1
c0018a52:	e8 b3 1b ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0018a57:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018a5a:	83 c4 10             	add    esp,0x10
c0018a5d:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018a64:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0018a6b:	83 ec 0c             	sub    esp,0xc
c0018a6e:	0f be 05 20 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027320
c0018a75:	50                   	push   eax
c0018a76:	e8 e0 dd fe ff       	call   c000685b <init_percd>
c0018a7b:	83 c4 10             	add    esp,0x10
c0018a7e:	83 c3 03             	add    ebx,0x3
c0018a81:	52                   	push   edx
c0018a82:	52                   	push   edx
c0018a83:	6a 00                	push   0x0
c0018a85:	53                   	push   ebx
c0018a86:	e8 98 d8 fe ff       	call   c0006323 <iso_open>
c0018a8b:	83 c4 10             	add    esp,0x10
c0018a8e:	89 c5                	mov    ebp,eax
c0018a90:	83 f8 ff             	cmp    eax,0xffffffff
c0018a93:	75 21                	jne    c0018ab6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x10e>
c0018a95:	50                   	push   eax
c0018a96:	50                   	push   eax
c0018a97:	6a 01                	push   0x1
c0018a99:	53                   	push   ebx
c0018a9a:	e8 84 d8 fe ff       	call   c0006323 <iso_open>
c0018a9f:	83 c4 10             	add    esp,0x10
c0018aa2:	ba 02 00 00 00       	mov    edx,0x2
c0018aa7:	40                   	inc    eax
c0018aa8:	74 2b                	je     c0018ad5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12d>
c0018aaa:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0018aad:	eb 24                	jmp    c0018ad3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12b>
c0018aaf:	ba 04 00 00 00       	mov    edx,0x4
c0018ab4:	eb 1f                	jmp    c0018ad5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12d>
c0018ab6:	83 ec 0c             	sub    esp,0xc
c0018ab9:	50                   	push   eax
c0018aba:	e8 d7 da fe ff       	call   c0006596 <iso_total>
c0018abf:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0018ac6:	89 07                	mov    DWORD PTR [edi],eax
c0018ac8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018acb:	e8 dd d8 fe ff       	call   c00063ad <iso_close>
c0018ad0:	83 c4 10             	add    esp,0x10
c0018ad3:	31 d2                	xor    edx,edx
c0018ad5:	83 c4 0c             	add    esp,0xc
c0018ad8:	89 d0                	mov    eax,edx
c0018ada:	5b                   	pop    ebx
c0018adb:	5e                   	pop    esi
c0018adc:	5f                   	pop    edi
c0018add:	5d                   	pop    ebp
c0018ade:	c3                   	ret    
c0018adf:	90                   	nop

c0018ae0 <ISO9660::close(void*)>:
c0018ae0:	83 ec 0c             	sub    esp,0xc
c0018ae3:	b8 04 00 00 00       	mov    eax,0x4
c0018ae8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018aec:	85 d2                	test   edx,edx
c0018aee:	74 1b                	je     c0018b0b <ISO9660::close(void*)+0x2b>
c0018af0:	83 ec 0c             	sub    esp,0xc
c0018af3:	b9 02 00 00 00       	mov    ecx,0x2
c0018af8:	89 d0                	mov    eax,edx
c0018afa:	99                   	cdq    
c0018afb:	f7 f9                	idiv   ecx
c0018afd:	83 e8 32             	sub    eax,0x32
c0018b00:	50                   	push   eax
c0018b01:	e8 a7 d8 fe ff       	call   c00063ad <iso_close>
c0018b06:	83 c4 10             	add    esp,0x10
c0018b09:	31 c0                	xor    eax,eax
c0018b0b:	83 c4 0c             	add    esp,0xc
c0018b0e:	c3                   	ret    
c0018b0f:	90                   	nop

c0018b10 <ISO9660::openDir(char const*, void**)>:
c0018b10:	56                   	push   esi
c0018b11:	53                   	push   ebx
c0018b12:	50                   	push   eax
c0018b13:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018b17:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018b1b:	85 db                	test   ebx,ebx
c0018b1d:	0f 84 b5 00 00 00    	je     c0018bd8 <ISO9660::openDir(char const*, void**)+0xc8>
c0018b23:	85 f6                	test   esi,esi
c0018b25:	0f 84 ad 00 00 00    	je     c0018bd8 <ISO9660::openDir(char const*, void**)+0xc8>
c0018b2b:	a0 20 73 02 c0       	mov    al,ds:0xc0027320
c0018b30:	38 03                	cmp    BYTE PTR [ebx],al
c0018b32:	74 1b                	je     c0018b4f <ISO9660::openDir(char const*, void**)+0x3f>
c0018b34:	84 c0                	test   al,al
c0018b36:	74 10                	je     c0018b48 <ISO9660::openDir(char const*, void**)+0x38>
c0018b38:	83 ec 0c             	sub    esp,0xc
c0018b3b:	68 6d 08 02 c0       	push   0xc002086d
c0018b40:	e8 56 78 ff ff       	call   c001039b <KePanic(char const*)>
c0018b45:	83 c4 10             	add    esp,0x10
c0018b48:	8a 03                	mov    al,BYTE PTR [ebx]
c0018b4a:	a2 20 73 02 c0       	mov    ds:0xc0027320,al
c0018b4f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018b52:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018b59:	85 c0                	test   eax,eax
c0018b5b:	74 10                	je     c0018b6d <ISO9660::openDir(char const*, void**)+0x5d>
c0018b5d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0018b64:	74 1a                	je     c0018b80 <ISO9660::openDir(char const*, void**)+0x70>
c0018b66:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0018b6d:	83 ec 0c             	sub    esp,0xc
c0018b70:	0f be 05 20 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027320
c0018b77:	50                   	push   eax
c0018b78:	e8 de dc fe ff       	call   c000685b <init_percd>
c0018b7d:	83 c4 10             	add    esp,0x10
c0018b80:	83 c3 03             	add    ebx,0x3
c0018b83:	50                   	push   eax
c0018b84:	50                   	push   eax
c0018b85:	6a 01                	push   0x1
c0018b87:	53                   	push   ebx
c0018b88:	e8 96 d7 fe ff       	call   c0006323 <iso_open>
c0018b8d:	83 c4 10             	add    esp,0x10
c0018b90:	89 c3                	mov    ebx,eax
c0018b92:	83 f8 ff             	cmp    eax,0xffffffff
c0018b95:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0018b9a:	75 1c                	jne    c0018bb8 <ISO9660::openDir(char const*, void**)+0xa8>
c0018b9c:	53                   	push   ebx
c0018b9d:	53                   	push   ebx
c0018b9e:	68 15 09 02 c0       	push   0xc0020915
c0018ba3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0018ba9:	e8 3e fc fe ff       	call   c00087ec <VgaText::puts(char const*)>
c0018bae:	83 c4 10             	add    esp,0x10
c0018bb1:	b8 01 00 00 00       	mov    eax,0x1
c0018bb6:	eb 25                	jmp    c0018bdd <ISO9660::openDir(char const*, void**)+0xcd>
c0018bb8:	01 db                	add    ebx,ebx
c0018bba:	51                   	push   ecx
c0018bbb:	83 c3 65             	add    ebx,0x65
c0018bbe:	51                   	push   ecx
c0018bbf:	68 28 09 02 c0       	push   0xc0020928
c0018bc4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0018bca:	e8 1d fc fe ff       	call   c00087ec <VgaText::puts(char const*)>
c0018bcf:	89 1e                	mov    DWORD PTR [esi],ebx
c0018bd1:	83 c4 10             	add    esp,0x10
c0018bd4:	31 c0                	xor    eax,eax
c0018bd6:	eb 05                	jmp    c0018bdd <ISO9660::openDir(char const*, void**)+0xcd>
c0018bd8:	b8 04 00 00 00       	mov    eax,0x4
c0018bdd:	5a                   	pop    edx
c0018bde:	5b                   	pop    ebx
c0018bdf:	5e                   	pop    esi
c0018be0:	c3                   	ret    
c0018be1:	90                   	nop

c0018be2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0018be2:	55                   	push   ebp
c0018be3:	57                   	push   edi
c0018be4:	56                   	push   esi
c0018be5:	53                   	push   ebx
c0018be6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018bec:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0018bf3:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0018bfa:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018c02:	0f 84 e7 00 00 00    	je     c0018cef <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0018c08:	85 db                	test   ebx,ebx
c0018c0a:	0f 84 df 00 00 00    	je     c0018cef <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0018c10:	83 ec 0c             	sub    esp,0xc
c0018c13:	68 3b 09 02 c0       	push   0xc002093b
c0018c18:	e8 ed 19 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0018c1d:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0018c24:	b9 02 00 00 00       	mov    ecx,0x2
c0018c29:	99                   	cdq    
c0018c2a:	f7 f9                	idiv   ecx
c0018c2c:	83 e8 32             	sub    eax,0x32
c0018c2f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c32:	e8 b0 d9 fe ff       	call   c00065e7 <iso_readdir>
c0018c37:	83 c4 10             	add    esp,0x10
c0018c3a:	89 c6                	mov    esi,eax
c0018c3c:	85 c0                	test   eax,eax
c0018c3e:	75 37                	jne    c0018c77 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c0018c40:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0018c45:	56                   	push   esi
c0018c46:	56                   	push   esi
c0018c47:	68 46 09 02 c0       	push   0xc0020946
c0018c4c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0018c52:	e8 95 fb fe ff       	call   c00087ec <VgaText::puts(char const*)>
c0018c57:	83 c4 0c             	add    esp,0xc
c0018c5a:	68 10 01 00 00       	push   0x110
c0018c5f:	6a 00                	push   0x0
c0018c61:	57                   	push   edi
c0018c62:	e8 69 78 fe ff       	call   c00004d0 <memset>
c0018c67:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0018c6d:	83 c4 10             	add    esp,0x10
c0018c70:	b8 01 00 00 00       	mov    eax,0x1
c0018c75:	eb 7d                	jmp    c0018cf4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0018c77:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0018c7d:	8d 68 08             	lea    ebp,[eax+0x8]
c0018c80:	83 ec 0c             	sub    esp,0xc
c0018c83:	55                   	push   ebp
c0018c84:	e8 b7 78 fe ff       	call   c0000540 <strlen>
c0018c89:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018c91:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018c95:	83 c4 10             	add    esp,0x10
c0018c98:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0018c9c:	75 0a                	jne    c0018ca8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0018c9e:	b8 02 00 00 00       	mov    eax,0x2
c0018ca3:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0018ca6:	74 05                	je     c0018cad <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c0018ca8:	b8 01 00 00 00       	mov    eax,0x1
c0018cad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018cb1:	50                   	push   eax
c0018cb2:	50                   	push   eax
c0018cb3:	55                   	push   ebp
c0018cb4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018cb8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0018cbc:	50                   	push   eax
c0018cbd:	e8 3e 79 fe ff       	call   c0000600 <strcpy>
c0018cc2:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0018cc9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018ccb:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0018cd1:	5a                   	pop    edx
c0018cd2:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0018cd7:	59                   	pop    ecx
c0018cd8:	68 59 09 02 c0       	push   0xc0020959
c0018cdd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0018ce3:	e8 04 fb fe ff       	call   c00087ec <VgaText::puts(char const*)>
c0018ce8:	83 c4 10             	add    esp,0x10
c0018ceb:	31 c0                	xor    eax,eax
c0018ced:	eb 05                	jmp    c0018cf4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0018cef:	b8 04 00 00 00       	mov    eax,0x4
c0018cf4:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018cfa:	5b                   	pop    ebx
c0018cfb:	5e                   	pop    esi
c0018cfc:	5f                   	pop    edi
c0018cfd:	5d                   	pop    ebp
c0018cfe:	c3                   	ret    

c0018cff <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0018cff:	57                   	push   edi
c0018d00:	56                   	push   esi
c0018d01:	53                   	push   ebx
c0018d02:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018d06:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018d0a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018d0e:	39 35 24 73 02 c0    	cmp    DWORD PTR ds:0xc0027324,esi
c0018d14:	75 08                	jne    c0018d1e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0018d16:	38 1d 84 14 02 c0    	cmp    BYTE PTR ds:0xc0021484,bl
c0018d1c:	74 4a                	je     c0018d68 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0018d1e:	83 ec 0c             	sub    esp,0xc
c0018d21:	31 d2                	xor    edx,edx
c0018d23:	68 40 73 02 c0       	push   0xc0027340
c0018d28:	0f be c3             	movsx  eax,bl
c0018d2b:	6a 01                	push   0x1
c0018d2d:	52                   	push   edx
c0018d2e:	56                   	push   esi
c0018d2f:	ff 34 85 1c 63 02 c0 	push   DWORD PTR [eax*4-0x3ffd9ce4]
c0018d36:	e8 ef 3f ff ff       	call   c000cd2a <LogicalDisk::read(unsigned long long, int, void*)>
c0018d3b:	83 c4 20             	add    esp,0x20
c0018d3e:	85 c0                	test   eax,eax
c0018d40:	75 0e                	jne    c0018d50 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0018d42:	89 35 24 73 02 c0    	mov    DWORD PTR ds:0xc0027324,esi
c0018d48:	88 1d 84 14 02 c0    	mov    BYTE PTR ds:0xc0021484,bl
c0018d4e:	eb 18                	jmp    c0018d68 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0018d50:	50                   	push   eax
c0018d51:	68 00 08 00 00       	push   0x800
c0018d56:	6a 00                	push   0x0
c0018d58:	57                   	push   edi
c0018d59:	e8 72 77 fe ff       	call   c00004d0 <memset>
c0018d5e:	83 c4 10             	add    esp,0x10
c0018d61:	b8 01 00 00 00       	mov    eax,0x1
c0018d66:	eb 0e                	jmp    c0018d76 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0018d68:	be 40 73 02 c0       	mov    esi,0xc0027340
c0018d6d:	b9 00 08 00 00       	mov    ecx,0x800
c0018d72:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018d74:	31 c0                	xor    eax,eax
c0018d76:	5b                   	pop    ebx
c0018d77:	5e                   	pop    esi
c0018d78:	5f                   	pop    edi
c0018d79:	c3                   	ret    

c0018d7a <ISO9660::tryMount(LogicalDisk*, int)>:
c0018d7a:	53                   	push   ebx
c0018d7b:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0018d81:	c7 05 24 73 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0027324,0xdeadbeef
c0018d8b:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0018d92:	8d 58 41             	lea    ebx,[eax+0x41]
c0018d95:	0f be db             	movsx  ebx,bl
c0018d98:	53                   	push   ebx
c0018d99:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018d9d:	50                   	push   eax
c0018d9e:	6a 10                	push   0x10
c0018da0:	e8 5a ff ff ff       	call   c0018cff <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0018da5:	83 c4 10             	add    esp,0x10
c0018da8:	31 d2                	xor    edx,edx
c0018daa:	85 c0                	test   eax,eax
c0018dac:	75 33                	jne    c0018de1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0018dae:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0018db3:	75 2c                	jne    c0018de1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0018db5:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0018dba:	75 25                	jne    c0018de1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0018dbc:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0018dc1:	75 1e                	jne    c0018de1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0018dc3:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0018dc8:	75 17                	jne    c0018de1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0018dca:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0018dcf:	75 10                	jne    c0018de1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0018dd1:	83 ec 0c             	sub    esp,0xc
c0018dd4:	53                   	push   ebx
c0018dd5:	e8 81 da fe ff       	call   c000685b <init_percd>
c0018dda:	83 c4 10             	add    esp,0x10
c0018ddd:	40                   	inc    eax
c0018dde:	0f 95 c2             	setne  dl
c0018de1:	88 d0                	mov    al,dl
c0018de3:	81 c4 08 08 00 00    	add    esp,0x808
c0018de9:	5b                   	pop    ebx
c0018dea:	c3                   	ret    
c0018deb:	90                   	nop

c0018dec <ISO9660::ISO9660()>:
c0018dec:	83 ec 0c             	sub    esp,0xc
c0018def:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018df3:	83 ec 0c             	sub    esp,0xc
c0018df6:	50                   	push   eax
c0018df7:	e8 30 1b ff ff       	call   c000a92c <Filesystem::Filesystem()>
c0018dfc:	83 c4 10             	add    esp,0x10
c0018dff:	ba 74 09 02 c0       	mov    edx,0xc0020974
c0018e04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e08:	89 10                	mov    DWORD PTR [eax],edx
c0018e0a:	e8 5e db fe ff       	call   c000696d <fs_iso9660_init>
c0018e0f:	90                   	nop
c0018e10:	83 c4 0c             	add    esp,0xc
c0018e13:	c3                   	ret    

c0018e14 <SoundCard::beginPlayback()>:
c0018e14:	c7 44 24 04 d4 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc00209d4
c0018e1c:	e9 7a 75 ff ff       	jmp    c001039b <KePanic(char const*)>
c0018e21:	90                   	nop

c0018e22 <SoundCard::stopPlayback()>:
c0018e22:	c7 44 24 04 d4 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc00209d4
c0018e2a:	e9 6c 75 ff ff       	jmp    c001039b <KePanic(char const*)>
c0018e2f:	90                   	nop

c0018e30 <SoundCard::SoundCard(char const*)>:
c0018e30:	83 ec 1c             	sub    esp,0x1c
c0018e33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e37:	83 ec 08             	sub    esp,0x8
c0018e3a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018e3e:	50                   	push   eax
c0018e3f:	e8 9c 2d ff ff       	call   c000bbe0 <Device::Device(char const*)>
c0018e44:	83 c4 10             	add    esp,0x10
c0018e47:	ba 20 0a 02 c0       	mov    edx,0xc0020a20
c0018e4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e50:	89 10                	mov    DWORD PTR [eax],edx
c0018e52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e56:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0018e5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e61:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0018e6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e6f:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0018e79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e7d:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0018e87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e8b:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0018e95:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018e9d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0018ea2:	7f 19                	jg     c0018ebd <SoundCard::SoundCard(char const*)+0x8d>
c0018ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ea8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018eac:	83 c2 54             	add    edx,0x54
c0018eaf:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0018eb7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0018ebb:	eb e0                	jmp    c0018e9d <SoundCard::SoundCard(char const*)+0x6d>
c0018ebd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ec1:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0018ec8:	90                   	nop
c0018ec9:	83 c4 1c             	add    esp,0x1c
c0018ecc:	c3                   	ret    
c0018ecd:	90                   	nop

c0018ece <SoundCard::~SoundCard()>:
c0018ece:	83 ec 0c             	sub    esp,0xc
c0018ed1:	ba 20 0a 02 c0       	mov    edx,0xc0020a20
c0018ed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018eda:	89 10                	mov    DWORD PTR [eax],edx
c0018edc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ee0:	83 ec 0c             	sub    esp,0xc
c0018ee3:	50                   	push   eax
c0018ee4:	e8 61 2a ff ff       	call   c000b94a <Device::~Device()>
c0018ee9:	83 c4 10             	add    esp,0x10
c0018eec:	90                   	nop
c0018eed:	83 c4 0c             	add    esp,0xc
c0018ef0:	c3                   	ret    
c0018ef1:	90                   	nop

c0018ef2 <SoundCard::~SoundCard()>:
c0018ef2:	83 ec 0c             	sub    esp,0xc
c0018ef5:	83 ec 0c             	sub    esp,0xc
c0018ef8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018efc:	e8 cd ff ff ff       	call   c0018ece <SoundCard::~SoundCard()>
c0018f01:	83 c4 10             	add    esp,0x10
c0018f04:	83 ec 08             	sub    esp,0x8
c0018f07:	68 e8 01 00 00       	push   0x1e8
c0018f0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f10:	e8 ff 15 ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c0018f15:	83 c4 10             	add    esp,0x10
c0018f18:	83 c4 0c             	add    esp,0xc
c0018f1b:	c3                   	ret    

c0018f1c <SoundCard::configureRates(int, int, int)>:
c0018f1c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018f20:	31 c0                	xor    eax,eax
c0018f22:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0018f29:	75 20                	jne    c0018f4b <SoundCard::configureRates(int, int, int)+0x2f>
c0018f2b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f2f:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0018f35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018f39:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0018f3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f43:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0018f49:	b0 01                	mov    al,0x1
c0018f4b:	c3                   	ret    

c0018f4c <SoundCard::getSamples16(int, short*)>:
c0018f4c:	55                   	push   ebp
c0018f4d:	57                   	push   edi
c0018f4e:	31 ff                	xor    edi,edi
c0018f50:	56                   	push   esi
c0018f51:	53                   	push   ebx
c0018f52:	31 db                	xor    ebx,ebx
c0018f54:	83 ec 10             	sub    esp,0x10
c0018f57:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0018f5b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0018f5f:	8d 04 36             	lea    eax,[esi+esi*1]
c0018f62:	50                   	push   eax
c0018f63:	6a 00                	push   0x0
c0018f65:	55                   	push   ebp
c0018f66:	e8 65 75 fe ff       	call   c00004d0 <memset>
c0018f6b:	83 c4 10             	add    esp,0x10
c0018f6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018f72:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0018f79:	85 c0                	test   eax,eax
c0018f7b:	74 1b                	je     c0018f98 <SoundCard::getSamples16(int, short*)+0x4c>
c0018f7d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018f81:	75 15                	jne    c0018f98 <SoundCard::getSamples16(int, short*)+0x4c>
c0018f83:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018f87:	55                   	push   ebp
c0018f88:	56                   	push   esi
c0018f89:	50                   	push   eax
c0018f8a:	e8 ed 02 00 00       	call   c001927c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0018f8f:	83 c4 10             	add    esp,0x10
c0018f92:	39 c7                	cmp    edi,eax
c0018f94:	7d 02                	jge    c0018f98 <SoundCard::getSamples16(int, short*)+0x4c>
c0018f96:	89 c7                	mov    edi,eax
c0018f98:	43                   	inc    ebx
c0018f99:	83 fb 20             	cmp    ebx,0x20
c0018f9c:	75 d0                	jne    c0018f6e <SoundCard::getSamples16(int, short*)+0x22>
c0018f9e:	83 c4 0c             	add    esp,0xc
c0018fa1:	89 f8                	mov    eax,edi
c0018fa3:	5b                   	pop    ebx
c0018fa4:	5e                   	pop    esi
c0018fa5:	5f                   	pop    edi
c0018fa6:	5d                   	pop    ebp
c0018fa7:	c3                   	ret    

c0018fa8 <SoundCard::getSamples32(int, int*)>:
c0018fa8:	55                   	push   ebp
c0018fa9:	57                   	push   edi
c0018faa:	31 ff                	xor    edi,edi
c0018fac:	56                   	push   esi
c0018fad:	31 f6                	xor    esi,esi
c0018faf:	53                   	push   ebx
c0018fb0:	83 ec 10             	sub    esp,0x10
c0018fb3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fb7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018fbb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0018fbf:	c1 e0 02             	shl    eax,0x2
c0018fc2:	50                   	push   eax
c0018fc3:	6a 00                	push   0x0
c0018fc5:	55                   	push   ebp
c0018fc6:	e8 05 75 fe ff       	call   c00004d0 <memset>
c0018fcb:	83 c4 10             	add    esp,0x10
c0018fce:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0018fd5:	85 c0                	test   eax,eax
c0018fd7:	74 1b                	je     c0018ff4 <SoundCard::getSamples32(int, int*)+0x4c>
c0018fd9:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018fdd:	75 15                	jne    c0018ff4 <SoundCard::getSamples32(int, int*)+0x4c>
c0018fdf:	53                   	push   ebx
c0018fe0:	55                   	push   ebp
c0018fe1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018fe5:	50                   	push   eax
c0018fe6:	e8 55 03 00 00       	call   c0019340 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0018feb:	83 c4 10             	add    esp,0x10
c0018fee:	39 c6                	cmp    esi,eax
c0018ff0:	7d 02                	jge    c0018ff4 <SoundCard::getSamples32(int, int*)+0x4c>
c0018ff2:	89 c6                	mov    esi,eax
c0018ff4:	47                   	inc    edi
c0018ff5:	83 ff 20             	cmp    edi,0x20
c0018ff8:	75 d4                	jne    c0018fce <SoundCard::getSamples32(int, int*)+0x26>
c0018ffa:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0019000:	85 f6                	test   esi,esi
c0019002:	75 0f                	jne    c0019013 <SoundCard::getSamples32(int, int*)+0x6b>
c0019004:	84 c0                	test   al,al
c0019006:	74 1b                	je     c0019023 <SoundCard::getSamples32(int, int*)+0x7b>
c0019008:	83 ec 0c             	sub    esp,0xc
c001900b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001900d:	53                   	push   ebx
c001900e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0019011:	eb 0d                	jmp    c0019020 <SoundCard::getSamples32(int, int*)+0x78>
c0019013:	84 c0                	test   al,al
c0019015:	75 0c                	jne    c0019023 <SoundCard::getSamples32(int, int*)+0x7b>
c0019017:	83 ec 0c             	sub    esp,0xc
c001901a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001901c:	53                   	push   ebx
c001901d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0019020:	83 c4 10             	add    esp,0x10
c0019023:	83 c4 0c             	add    esp,0xc
c0019026:	89 f0                	mov    eax,esi
c0019028:	5b                   	pop    ebx
c0019029:	5e                   	pop    esi
c001902a:	5f                   	pop    edi
c001902b:	5d                   	pop    ebp
c001902c:	c3                   	ret    
c001902d:	90                   	nop

c001902e <SoundCard::addChannel(SoundPort*)>:
c001902e:	83 ec 0c             	sub    esp,0xc
c0019031:	31 c0                	xor    eax,eax
c0019033:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019037:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001903f:	74 1b                	je     c001905c <SoundCard::addChannel(SoundPort*)+0x2e>
c0019041:	40                   	inc    eax
c0019042:	83 f8 20             	cmp    eax,0x20
c0019045:	75 f0                	jne    c0019037 <SoundCard::addChannel(SoundPort*)+0x9>
c0019047:	83 ec 0c             	sub    esp,0xc
c001904a:	68 f9 09 02 c0       	push   0xc00209f9
c001904f:	e8 47 73 ff ff       	call   c001039b <KePanic(char const*)>
c0019054:	83 c4 10             	add    esp,0x10
c0019057:	83 c8 ff             	or     eax,0xffffffff
c001905a:	eb 0b                	jmp    c0019067 <SoundCard::addChannel(SoundPort*)+0x39>
c001905c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019060:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0019067:	83 c4 0c             	add    esp,0xc
c001906a:	c3                   	ret    
c001906b:	90                   	nop

c001906c <SoundCard::removeChannel(int)>:
c001906c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019074:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001907f:	c3                   	ret    

c0019080 <SoundPort::SoundPort(int, int, int, int)>:
c0019080:	83 ec 0c             	sub    esp,0xc
c0019083:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019087:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001908e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019092:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001909a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001909e:	89 10                	mov    DWORD PTR [eax],edx
c00190a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190a4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00190a8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00190ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00190b3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00190b6:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c00190bb:	75 13                	jne    c00190d0 <SoundPort::SoundPort(int, int, int, int)+0x50>
c00190bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00190c3:	05 a0 0f 00 00       	add    eax,0xfa0
c00190c8:	01 c0                	add    eax,eax
c00190ca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00190ce:	66 90                	xchg   ax,ax
c00190d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00190d8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00190db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190df:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00190e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00190ed:	c1 e0 02             	shl    eax,0x2
c00190f0:	83 ec 0c             	sub    esp,0xc
c00190f3:	50                   	push   eax
c00190f4:	e8 7c e7 fe ff       	call   c0007875 <malloc>
c00190f9:	83 c4 10             	add    esp,0x10
c00190fc:	89 c2                	mov    edx,eax
c00190fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019102:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0019105:	90                   	nop
c0019106:	83 c4 0c             	add    esp,0xc
c0019109:	c3                   	ret    
c001910a:	66 90                	xchg   ax,ax

c001910c <SoundPort::~SoundPort()>:
c001910c:	83 ec 0c             	sub    esp,0xc
c001910f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019113:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019116:	85 c0                	test   eax,eax
c0019118:	74 1e                	je     c0019138 <SoundPort::~SoundPort()+0x2c>
c001911a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001911e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019121:	83 ec 0c             	sub    esp,0xc
c0019124:	50                   	push   eax
c0019125:	e8 5b e7 fe ff       	call   c0007885 <free>
c001912a:	83 c4 10             	add    esp,0x10
c001912d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019131:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019138:	90                   	nop
c0019139:	83 c4 0c             	add    esp,0xc
c001913c:	c3                   	ret    
c001913d:	90                   	nop
c001913e:	66 90                	xchg   ax,ax

c0019140 <SoundPort::unpause()>:
c0019140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019144:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0019148:	c3                   	ret    
c0019149:	90                   	nop
c001914a:	66 90                	xchg   ax,ax

c001914c <SoundPort::pause()>:
c001914c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019150:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019154:	c3                   	ret    
c0019155:	90                   	nop
c0019156:	66 90                	xchg   ax,ax

c0019158 <SoundPort::getBufferUsed()>:
c0019158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001915c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001915f:	c3                   	ret    

c0019160 <SoundPort::getBufferSize()>:
c0019160:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019164:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019167:	c3                   	ret    

c0019168 <SoundPort::buffer16(short*, int)>:
c0019168:	55                   	push   ebp
c0019169:	57                   	push   edi
c001916a:	56                   	push   esi
c001916b:	53                   	push   ebx
c001916c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019170:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0019174:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0019177:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001917a:	74 68                	je     c00191e4 <SoundPort::buffer16(short*, int)+0x7c>
c001917c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019180:	85 c9                	test   ecx,ecx
c0019182:	7e 60                	jle    c00191e4 <SoundPort::buffer16(short*, int)+0x7c>
c0019184:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0019188:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001918b:	c1 e1 0f             	shl    ecx,0xf
c001918e:	8d 70 01             	lea    esi,[eax+0x1]
c0019191:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019194:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0019197:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001919a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001919d:	74 4d                	je     c00191ec <SoundPort::buffer16(short*, int)+0x84>
c001919f:	31 f6                	xor    esi,esi
c00191a1:	eb 21                	jmp    c00191c4 <SoundPort::buffer16(short*, int)+0x5c>
c00191a3:	90                   	nop
c00191a4:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c00191a9:	8d 79 01             	lea    edi,[ecx+0x1]
c00191ac:	c1 e3 0f             	shl    ebx,0xf
c00191af:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c00191b2:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c00191b5:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c00191b8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00191bb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00191be:	74 1c                	je     c00191dc <SoundPort::buffer16(short*, int)+0x74>
c00191c0:	89 c6                	mov    esi,eax
c00191c2:	66 90                	xchg   ax,ax
c00191c4:	8d 46 01             	lea    eax,[esi+0x1]
c00191c7:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00191cb:	75 d7                	jne    c00191a4 <SoundPort::buffer16(short*, int)+0x3c>
c00191cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00191d1:	8d 76 00             	lea    esi,[esi+0x0]
c00191d4:	5b                   	pop    ebx
c00191d5:	5e                   	pop    esi
c00191d6:	5f                   	pop    edi
c00191d7:	5d                   	pop    ebp
c00191d8:	c3                   	ret    
c00191d9:	8d 76 00             	lea    esi,[esi+0x0]
c00191dc:	5b                   	pop    ebx
c00191dd:	8d 46 02             	lea    eax,[esi+0x2]
c00191e0:	5e                   	pop    esi
c00191e1:	5f                   	pop    edi
c00191e2:	5d                   	pop    ebp
c00191e3:	c3                   	ret    
c00191e4:	5b                   	pop    ebx
c00191e5:	31 c0                	xor    eax,eax
c00191e7:	5e                   	pop    esi
c00191e8:	5f                   	pop    edi
c00191e9:	5d                   	pop    ebp
c00191ea:	c3                   	ret    
c00191eb:	90                   	nop
c00191ec:	b8 01 00 00 00       	mov    eax,0x1
c00191f1:	eb e1                	jmp    c00191d4 <SoundPort::buffer16(short*, int)+0x6c>
c00191f3:	90                   	nop

c00191f4 <SoundPort::buffer32(int*, int)>:
c00191f4:	55                   	push   ebp
c00191f5:	57                   	push   edi
c00191f6:	56                   	push   esi
c00191f7:	53                   	push   ebx
c00191f8:	51                   	push   ecx
c00191f9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00191fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019201:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019204:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019208:	89 04 24             	mov    DWORD PTR [esp],eax
c001920b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001920e:	74 5c                	je     c001926c <SoundPort::buffer32(int*, int)+0x78>
c0019210:	85 c0                	test   eax,eax
c0019212:	7e 58                	jle    c001926c <SoundPort::buffer32(int*, int)+0x78>
c0019214:	8d 71 01             	lea    esi,[ecx+0x1]
c0019217:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001921a:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001921d:	8b 37                	mov    esi,DWORD PTR [edi]
c001921f:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0019222:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019225:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019228:	74 4a                	je     c0019274 <SoundPort::buffer32(int*, int)+0x80>
c001922a:	31 f6                	xor    esi,esi
c001922c:	eb 1e                	jmp    c001924c <SoundPort::buffer32(int*, int)+0x58>
c001922e:	66 90                	xchg   ax,ax
c0019230:	8d 69 01             	lea    ebp,[ecx+0x1]
c0019233:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0019236:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0019239:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001923c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0019240:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019243:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019246:	74 18                	je     c0019260 <SoundPort::buffer32(int*, int)+0x6c>
c0019248:	89 de                	mov    esi,ebx
c001924a:	66 90                	xchg   ax,ax
c001924c:	8d 5e 01             	lea    ebx,[esi+0x1]
c001924f:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0019252:	75 dc                	jne    c0019230 <SoundPort::buffer32(int*, int)+0x3c>
c0019254:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019257:	90                   	nop
c0019258:	5a                   	pop    edx
c0019259:	5b                   	pop    ebx
c001925a:	5e                   	pop    esi
c001925b:	5f                   	pop    edi
c001925c:	5d                   	pop    ebp
c001925d:	c3                   	ret    
c001925e:	66 90                	xchg   ax,ax
c0019260:	5a                   	pop    edx
c0019261:	8d 46 02             	lea    eax,[esi+0x2]
c0019264:	5b                   	pop    ebx
c0019265:	5e                   	pop    esi
c0019266:	5f                   	pop    edi
c0019267:	5d                   	pop    ebp
c0019268:	c3                   	ret    
c0019269:	8d 76 00             	lea    esi,[esi+0x0]
c001926c:	5a                   	pop    edx
c001926d:	31 c0                	xor    eax,eax
c001926f:	5b                   	pop    ebx
c0019270:	5e                   	pop    esi
c0019271:	5f                   	pop    edi
c0019272:	5d                   	pop    ebp
c0019273:	c3                   	ret    
c0019274:	b8 01 00 00 00       	mov    eax,0x1
c0019279:	eb dd                	jmp    c0019258 <SoundPort::buffer32(int*, int)+0x64>
c001927b:	90                   	nop

c001927c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001927c:	57                   	push   edi
c001927d:	56                   	push   esi
c001927e:	53                   	push   ebx
c001927f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019283:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0019287:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001928d:	39 03                	cmp    DWORD PTR [ebx],eax
c001928f:	74 13                	je     c00192a4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0019291:	83 ec 0c             	sub    esp,0xc
c0019294:	68 4c 0a 02 c0       	push   0xc0020a4c
c0019299:	e8 fd 70 ff ff       	call   c001039b <KePanic(char const*)>
c001929e:	83 c4 10             	add    esp,0x10
c00192a1:	8d 76 00             	lea    esi,[esi+0x0]
c00192a4:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c00192aa:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c00192ad:	74 11                	je     c00192c0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c00192af:	83 ec 0c             	sub    esp,0xc
c00192b2:	68 8b 0a 02 c0       	push   0xc0020a8b
c00192b7:	e8 df 70 ff ff       	call   c001039b <KePanic(char const*)>
c00192bc:	83 c4 10             	add    esp,0x10
c00192bf:	90                   	nop
c00192c0:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c00192c6:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c00192c9:	74 11                	je     c00192dc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c00192cb:	83 ec 0c             	sub    esp,0xc
c00192ce:	68 8b 0a 02 c0       	push   0xc0020a8b
c00192d3:	e8 c3 70 ff ff       	call   c001039b <KePanic(char const*)>
c00192d8:	83 c4 10             	add    esp,0x10
c00192db:	90                   	nop
c00192dc:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00192df:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c00192e3:	7e 07                	jle    c00192ec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c00192e5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00192e9:	8d 76 00             	lea    esi,[esi+0x0]
c00192ec:	85 f6                	test   esi,esi
c00192ee:	7e 2c                	jle    c001931c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c00192f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00192f4:	8d 3c 36             	lea    edi,[esi+esi*1]
c00192f7:	31 c9                	xor    ecx,ecx
c00192f9:	01 d7                	add    edi,edx
c00192fb:	90                   	nop
c00192fc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00192ff:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0019302:	85 c0                	test   eax,eax
c0019304:	79 06                	jns    c001930c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0019306:	05 ff 7f 00 00       	add    eax,0x7fff
c001930b:	90                   	nop
c001930c:	c1 f8 0f             	sar    eax,0xf
c001930f:	83 c1 04             	add    ecx,0x4
c0019312:	66 01 02             	add    WORD PTR [edx],ax
c0019315:	83 c2 02             	add    edx,0x2
c0019318:	39 d7                	cmp    edi,edx
c001931a:	75 e0                	jne    c00192fc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001931c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001931f:	50                   	push   eax
c0019320:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019323:	29 f0                	sub    eax,esi
c0019325:	c1 e0 02             	shl    eax,0x2
c0019328:	50                   	push   eax
c0019329:	8d 04 b2             	lea    eax,[edx+esi*4]
c001932c:	50                   	push   eax
c001932d:	52                   	push   edx
c001932e:	e8 ad 70 fe ff       	call   c00003e0 <memmove>
c0019333:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c0019336:	83 c4 10             	add    esp,0x10
c0019339:	89 f0                	mov    eax,esi
c001933b:	5b                   	pop    ebx
c001933c:	5e                   	pop    esi
c001933d:	5f                   	pop    edi
c001933e:	c3                   	ret    
c001933f:	90                   	nop

c0019340 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0019340:	57                   	push   edi
c0019341:	56                   	push   esi
c0019342:	53                   	push   ebx
c0019343:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019347:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001934b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001934f:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0019355:	39 06                	cmp    DWORD PTR [esi],eax
c0019357:	74 13                	je     c001936c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0019359:	83 ec 0c             	sub    esp,0xc
c001935c:	68 6c 0a 02 c0       	push   0xc0020a6c
c0019361:	e8 35 70 ff ff       	call   c001039b <KePanic(char const*)>
c0019366:	83 c4 10             	add    esp,0x10
c0019369:	8d 76 00             	lea    esi,[esi+0x0]
c001936c:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0019372:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0019375:	74 11                	je     c0019388 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0019377:	83 ec 0c             	sub    esp,0xc
c001937a:	68 a7 0a 02 c0       	push   0xc0020aa7
c001937f:	e8 17 70 ff ff       	call   c001039b <KePanic(char const*)>
c0019384:	83 c4 10             	add    esp,0x10
c0019387:	90                   	nop
c0019388:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001938e:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0019391:	74 11                	je     c00193a4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0019393:	83 ec 0c             	sub    esp,0xc
c0019396:	68 a7 0a 02 c0       	push   0xc0020aa7
c001939b:	e8 fb 6f ff ff       	call   c001039b <KePanic(char const*)>
c00193a0:	83 c4 10             	add    esp,0x10
c00193a3:	90                   	nop
c00193a4:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00193a7:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c00193ab:	7e 07                	jle    c00193b4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c00193ad:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00193b1:	8d 76 00             	lea    esi,[esi+0x0]
c00193b4:	85 ff                	test   edi,edi
c00193b6:	7e 1c                	jle    c00193d4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c00193b8:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c00193bf:	31 c0                	xor    eax,eax
c00193c1:	8d 76 00             	lea    esi,[esi+0x0]
c00193c4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00193c7:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c00193ca:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c00193cd:	83 c0 04             	add    eax,0x4
c00193d0:	39 c1                	cmp    ecx,eax
c00193d2:	75 f0                	jne    c00193c4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c00193d4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00193d7:	50                   	push   eax
c00193d8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00193db:	29 f8                	sub    eax,edi
c00193dd:	c1 e0 02             	shl    eax,0x2
c00193e0:	50                   	push   eax
c00193e1:	8d 04 ba             	lea    eax,[edx+edi*4]
c00193e4:	50                   	push   eax
c00193e5:	52                   	push   edx
c00193e6:	e8 f5 6f fe ff       	call   c00003e0 <memmove>
c00193eb:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c00193ee:	83 c4 10             	add    esp,0x10
c00193f1:	89 f8                	mov    eax,edi
c00193f3:	5b                   	pop    ebx
c00193f4:	5e                   	pop    esi
c00193f5:	5f                   	pop    edi
c00193f6:	c3                   	ret    
c00193f7:	90                   	nop

c00193f8 <PCI::open(int, int, void*)>:
c00193f8:	83 ec 18             	sub    esp,0x18
c00193fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00193ff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019403:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019409:	8b 10                	mov    edx,DWORD PTR [eax]
c001940b:	50                   	push   eax
c001940c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001940f:	31 c0                	xor    eax,eax
c0019411:	83 c4 1c             	add    esp,0x1c
c0019414:	c3                   	ret    
c0019415:	90                   	nop

c0019416 <PCI::close(int, int, void*)>:
c0019416:	31 c0                	xor    eax,eax
c0019418:	c3                   	ret    
c0019419:	90                   	nop

c001941a <PCI::PCI()>:
c001941a:	83 ec 0c             	sub    esp,0xc
c001941d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019421:	83 ec 08             	sub    esp,0x8
c0019424:	68 c3 0a 02 c0       	push   0xc0020ac3
c0019429:	50                   	push   eax
c001942a:	e8 6d 1f ff ff       	call   c000b39c <Bus::Bus(char const*)>
c001942f:	83 c4 10             	add    esp,0x10
c0019432:	ba 6c 0b 02 c0       	mov    edx,0xc0020b6c
c0019437:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001943b:	89 10                	mov    DWORD PTR [eax],edx
c001943d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019441:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001944b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001944f:	a3 40 7b 02 c0       	mov    ds:0xc0027b40,eax
c0019454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019458:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001945e:	31 d2                	xor    edx,edx
c0019460:	88 c2                	mov    dl,al
c0019462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019466:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001946d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019471:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0019477:	31 d2                	xor    edx,edx
c0019479:	88 c2                	mov    dl,al
c001947b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001947f:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0019484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019488:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001948e:	8d 50 01             	lea    edx,[eax+0x1]
c0019491:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019495:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001949b:	31 d2                	xor    edx,edx
c001949d:	88 c2                	mov    dl,al
c001949f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194a3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00194a7:	83 c9 c0             	or     ecx,0xffffffc0
c00194aa:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00194ae:	90                   	nop
c00194af:	83 c4 0c             	add    esp,0xc
c00194b2:	c3                   	ret    
c00194b3:	90                   	nop

c00194b4 <PCI::readBAR8(unsigned int, int)>:
c00194b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00194b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00194bc:	f6 c2 01             	test   dl,0x1
c00194bf:	74 07                	je     c00194c8 <PCI::readBAR8(unsigned int, int)+0x14>
c00194c1:	83 e2 fc             	and    edx,0xfffffffc
c00194c4:	01 c2                	add    edx,eax
c00194c6:	ec                   	in     al,dx
c00194c7:	c3                   	ret    
c00194c8:	83 e2 f0             	and    edx,0xfffffff0
c00194cb:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00194ce:	c3                   	ret    
c00194cf:	90                   	nop

c00194d0 <PCI::readBAR16(unsigned int, int)>:
c00194d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00194d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00194d8:	f6 c2 01             	test   dl,0x1
c00194db:	74 08                	je     c00194e5 <PCI::readBAR16(unsigned int, int)+0x15>
c00194dd:	83 e2 fc             	and    edx,0xfffffffc
c00194e0:	01 c2                	add    edx,eax
c00194e2:	66 ed                	in     ax,dx
c00194e4:	c3                   	ret    
c00194e5:	83 e2 f0             	and    edx,0xfffffff0
c00194e8:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00194ec:	c3                   	ret    
c00194ed:	90                   	nop

c00194ee <PCI::readBAR32(unsigned int, int)>:
c00194ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00194f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00194f6:	f6 c2 01             	test   dl,0x1
c00194f9:	74 07                	je     c0019502 <PCI::readBAR32(unsigned int, int)+0x14>
c00194fb:	83 e2 fc             	and    edx,0xfffffffc
c00194fe:	01 c2                	add    edx,eax
c0019500:	ed                   	in     eax,dx
c0019501:	c3                   	ret    
c0019502:	83 e2 f0             	and    edx,0xfffffff0
c0019505:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0019508:	c3                   	ret    
c0019509:	90                   	nop

c001950a <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001950a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001950e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019512:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019516:	f6 c2 01             	test   dl,0x1
c0019519:	74 07                	je     c0019522 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001951b:	83 e2 fc             	and    edx,0xfffffffc
c001951e:	01 ca                	add    edx,ecx
c0019520:	ee                   	out    dx,al
c0019521:	c3                   	ret    
c0019522:	83 e2 f0             	and    edx,0xfffffff0
c0019525:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0019528:	c3                   	ret    
c0019529:	90                   	nop

c001952a <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001952a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001952e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019532:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019536:	f6 c2 01             	test   dl,0x1
c0019539:	74 08                	je     c0019543 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001953b:	83 e2 fc             	and    edx,0xfffffffc
c001953e:	01 ca                	add    edx,ecx
c0019540:	66 ef                	out    dx,ax
c0019542:	c3                   	ret    
c0019543:	83 e2 f0             	and    edx,0xfffffff0
c0019546:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001954a:	c3                   	ret    
c001954b:	90                   	nop

c001954c <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001954c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019550:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019554:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019558:	f6 c2 01             	test   dl,0x1
c001955b:	74 07                	je     c0019564 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001955d:	83 e2 fc             	and    edx,0xfffffffc
c0019560:	01 ca                	add    edx,ecx
c0019562:	ef                   	out    dx,eax
c0019563:	c3                   	ret    
c0019564:	83 e2 f0             	and    edx,0xfffffff0
c0019567:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001956a:	c3                   	ret    
c001956b:	90                   	nop

c001956c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001956c:	55                   	push   ebp
c001956d:	57                   	push   edi
c001956e:	56                   	push   esi
c001956f:	53                   	push   ebx
c0019570:	83 ec 0c             	sub    esp,0xc
c0019573:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0019577:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001957b:	89 f0                	mov    eax,esi
c001957d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0019581:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019585:	3c 07                	cmp    al,0x7
c0019587:	76 10                	jbe    c0019599 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0019589:	83 ec 0c             	sub    esp,0xc
c001958c:	68 cb 0a 02 c0       	push   0xc0020acb
c0019591:	e8 05 6e ff ff       	call   c001039b <KePanic(char const*)>
c0019596:	83 c4 10             	add    esp,0x10
c0019599:	80 fb 0f             	cmp    bl,0xf
c001959c:	76 10                	jbe    c00195ae <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001959e:	83 ec 0c             	sub    esp,0xc
c00195a1:	68 fb 0a 02 c0       	push   0xc0020afb
c00195a6:	e8 f0 6d ff ff       	call   c001039b <KePanic(char const*)>
c00195ab:	83 c4 10             	add    esp,0x10
c00195ae:	8d 04 36             	lea    eax,[esi+esi*1]
c00195b1:	ba f8 0c 00 00       	mov    edx,0xcf8
c00195b6:	83 c8 f0             	or     eax,0xfffffff0
c00195b9:	ee                   	out    dx,al
c00195ba:	ba fa 0c 00 00       	mov    edx,0xcfa
c00195bf:	89 e8                	mov    eax,ebp
c00195c1:	ee                   	out    dx,al
c00195c2:	83 c4 0c             	add    esp,0xc
c00195c5:	89 d8                	mov    eax,ebx
c00195c7:	66 81 e7 fc 00       	and    di,0xfc
c00195cc:	5b                   	pop    ebx
c00195cd:	c1 e0 08             	shl    eax,0x8
c00195d0:	5e                   	pop    esi
c00195d1:	09 f8                	or     eax,edi
c00195d3:	5f                   	pop    edi
c00195d4:	66 0d 00 c0          	or     ax,0xc000
c00195d8:	5d                   	pop    ebp
c00195d9:	c3                   	ret    

c00195da <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00195da:	57                   	push   edi
c00195db:	56                   	push   esi
c00195dc:	53                   	push   ebx
c00195dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00195e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00195e5:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c00195eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00195ef:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00195f3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00195f7:	83 ff 01             	cmp    edi,0x1
c00195fa:	75 3e                	jne    c001963a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c00195fc:	89 de                	mov    esi,ebx
c00195fe:	0f b6 c0             	movzx  eax,al
c0019601:	81 e6 fc 00 00 00    	and    esi,0xfc
c0019607:	c1 e0 10             	shl    eax,0x10
c001960a:	0f b6 c9             	movzx  ecx,cl
c001960d:	09 f0                	or     eax,esi
c001960f:	c1 e1 08             	shl    ecx,0x8
c0019612:	0f b6 d2             	movzx  edx,dl
c0019615:	09 c8                	or     eax,ecx
c0019617:	c1 e2 0b             	shl    edx,0xb
c001961a:	09 d0                	or     eax,edx
c001961c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019621:	0d 00 00 00 80       	or     eax,0x80000000
c0019626:	ef                   	out    dx,eax
c0019627:	ba fc 0c 00 00       	mov    edx,0xcfc
c001962c:	ed                   	in     eax,dx
c001962d:	83 e3 02             	and    ebx,0x2
c0019630:	0f b6 cb             	movzx  ecx,bl
c0019633:	c1 e1 03             	shl    ecx,0x3
c0019636:	d3 e8                	shr    eax,cl
c0019638:	eb 43                	jmp    c001967d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001963a:	83 ff 02             	cmp    edi,0x2
c001963d:	75 2c                	jne    c001966b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001963f:	83 ec 0c             	sub    esp,0xc
c0019642:	0f b6 c9             	movzx  ecx,cl
c0019645:	0f b6 d2             	movzx  edx,dl
c0019648:	0f b6 fb             	movzx  edi,bl
c001964b:	0f b6 c0             	movzx  eax,al
c001964e:	57                   	push   edi
c001964f:	51                   	push   ecx
c0019650:	52                   	push   edx
c0019651:	50                   	push   eax
c0019652:	56                   	push   esi
c0019653:	e8 14 ff ff ff       	call   c001956c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019658:	89 c2                	mov    edx,eax
c001965a:	ed                   	in     eax,dx
c001965b:	83 e3 02             	and    ebx,0x2
c001965e:	83 c4 20             	add    esp,0x20
c0019661:	0f b6 cb             	movzx  ecx,bl
c0019664:	c1 e1 03             	shl    ecx,0x3
c0019667:	d3 e8                	shr    eax,cl
c0019669:	eb 12                	jmp    c001967d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001966b:	83 ec 0c             	sub    esp,0xc
c001966e:	68 2b 0b 02 c0       	push   0xc0020b2b
c0019673:	e8 23 6d ff ff       	call   c001039b <KePanic(char const*)>
c0019678:	83 c4 10             	add    esp,0x10
c001967b:	31 c0                	xor    eax,eax
c001967d:	5b                   	pop    ebx
c001967e:	5e                   	pop    esi
c001967f:	5f                   	pop    edi
c0019680:	c3                   	ret    
c0019681:	90                   	nop

c0019682 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0019682:	83 ec 18             	sub    esp,0x18
c0019685:	6a 00                	push   0x0
c0019687:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001968c:	50                   	push   eax
c001968d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019692:	50                   	push   eax
c0019693:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019698:	50                   	push   eax
c0019699:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001969d:	e8 38 ff ff ff       	call   c00195da <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00196a2:	83 c4 2c             	add    esp,0x2c
c00196a5:	c3                   	ret    

c00196a6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00196a6:	83 ec 18             	sub    esp,0x18
c00196a9:	6a 0e                	push   0xe
c00196ab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00196b0:	50                   	push   eax
c00196b1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00196b6:	50                   	push   eax
c00196b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00196bc:	50                   	push   eax
c00196bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00196c1:	e8 14 ff ff ff       	call   c00195da <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00196c6:	83 c4 2c             	add    esp,0x2c
c00196c9:	0f b6 c0             	movzx  eax,al
c00196cc:	c3                   	ret    
c00196cd:	90                   	nop

c00196ce <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00196ce:	55                   	push   ebp
c00196cf:	57                   	push   edi
c00196d0:	56                   	push   esi
c00196d1:	53                   	push   ebx
c00196d2:	83 ec 18             	sub    esp,0x18
c00196d5:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c00196da:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c00196df:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c00196e4:	6a 0a                	push   0xa
c00196e6:	56                   	push   esi
c00196e7:	55                   	push   ebp
c00196e8:	57                   	push   edi
c00196e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00196ed:	e8 e8 fe ff ff       	call   c00195da <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00196f2:	83 c4 14             	add    esp,0x14
c00196f5:	89 c3                	mov    ebx,eax
c00196f7:	6a 0a                	push   0xa
c00196f9:	0f b6 db             	movzx  ebx,bl
c00196fc:	56                   	push   esi
c00196fd:	55                   	push   ebp
c00196fe:	57                   	push   edi
c00196ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019703:	e8 d2 fe ff ff       	call   c00195da <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019708:	83 c4 2c             	add    esp,0x2c
c001970b:	25 00 ff 00 00       	and    eax,0xff00
c0019710:	09 d8                	or     eax,ebx
c0019712:	5b                   	pop    ebx
c0019713:	5e                   	pop    esi
c0019714:	5f                   	pop    edi
c0019715:	5d                   	pop    ebp
c0019716:	c3                   	ret    
c0019717:	90                   	nop

c0019718 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0019718:	83 ec 18             	sub    esp,0x18
c001971b:	6a 08                	push   0x8
c001971d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019722:	50                   	push   eax
c0019723:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019728:	50                   	push   eax
c0019729:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001972e:	50                   	push   eax
c001972f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019733:	e8 a2 fe ff ff       	call   c00195da <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019738:	83 c4 2c             	add    esp,0x2c
c001973b:	0f b6 c4             	movzx  eax,ah
c001973e:	c3                   	ret    
c001973f:	90                   	nop

c0019740 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0019740:	83 ec 18             	sub    esp,0x18
c0019743:	6a 08                	push   0x8
c0019745:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001974a:	50                   	push   eax
c001974b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019750:	50                   	push   eax
c0019751:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019756:	50                   	push   eax
c0019757:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001975b:	e8 7a fe ff ff       	call   c00195da <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019760:	83 c4 2c             	add    esp,0x2c
c0019763:	c3                   	ret    

c0019764 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0019764:	83 ec 18             	sub    esp,0x18
c0019767:	6a 3c                	push   0x3c
c0019769:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001976e:	50                   	push   eax
c001976f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019774:	50                   	push   eax
c0019775:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001977a:	50                   	push   eax
c001977b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001977f:	e8 56 fe ff ff       	call   c00195da <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019784:	83 c4 2c             	add    esp,0x2c
c0019787:	c3                   	ret    

c0019788 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0019788:	83 ec 18             	sub    esp,0x18
c001978b:	6a 18                	push   0x18
c001978d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019792:	50                   	push   eax
c0019793:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019798:	50                   	push   eax
c0019799:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001979e:	50                   	push   eax
c001979f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00197a3:	e8 32 fe ff ff       	call   c00195da <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00197a8:	83 c4 2c             	add    esp,0x2c
c00197ab:	0f b6 c4             	movzx  eax,ah
c00197ae:	c3                   	ret    
c00197af:	90                   	nop

c00197b0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00197b0:	55                   	push   ebp
c00197b1:	57                   	push   edi
c00197b2:	56                   	push   esi
c00197b3:	53                   	push   ebx
c00197b4:	83 ec 28             	sub    esp,0x28
c00197b7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00197bb:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00197c0:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c00197c5:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c00197ca:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00197d1:	8d 43 12             	lea    eax,[ebx+0x12]
c00197d4:	83 c3 10             	add    ebx,0x10
c00197d7:	0f b6 c0             	movzx  eax,al
c00197da:	0f b6 db             	movzx  ebx,bl
c00197dd:	50                   	push   eax
c00197de:	51                   	push   ecx
c00197df:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00197e3:	57                   	push   edi
c00197e4:	55                   	push   ebp
c00197e5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00197e9:	e8 ec fd ff ff       	call   c00195da <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00197ee:	83 c4 14             	add    esp,0x14
c00197f1:	89 c6                	mov    esi,eax
c00197f3:	53                   	push   ebx
c00197f4:	c1 e6 10             	shl    esi,0x10
c00197f7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00197fb:	51                   	push   ecx
c00197fc:	57                   	push   edi
c00197fd:	55                   	push   ebp
c00197fe:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019802:	e8 d3 fd ff ff       	call   c00195da <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019807:	83 c4 3c             	add    esp,0x3c
c001980a:	0f b7 c0             	movzx  eax,ax
c001980d:	5b                   	pop    ebx
c001980e:	09 f0                	or     eax,esi
c0019810:	5e                   	pop    esi
c0019811:	5f                   	pop    edi
c0019812:	5d                   	pop    ebp
c0019813:	c3                   	ret    

c0019814 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0019814:	55                   	push   ebp
c0019815:	57                   	push   edi
c0019816:	56                   	push   esi
c0019817:	53                   	push   ebx
c0019818:	83 ec 0c             	sub    esp,0xc
c001981b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001981f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019823:	89 f5                	mov    ebp,esi
c0019825:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001982b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001982f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019833:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019837:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001983b:	83 f9 01             	cmp    ecx,0x1
c001983e:	75 5d                	jne    c001989d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0019840:	0f b6 c8             	movzx  ecx,al
c0019843:	0f b6 d2             	movzx  edx,dl
c0019846:	c1 e1 10             	shl    ecx,0x10
c0019849:	c1 e2 0b             	shl    edx,0xb
c001984c:	89 f0                	mov    eax,esi
c001984e:	25 fc 00 00 00       	and    eax,0xfc
c0019853:	09 c1                	or     ecx,eax
c0019855:	89 e8                	mov    eax,ebp
c0019857:	0f b6 c0             	movzx  eax,al
c001985a:	c1 e0 08             	shl    eax,0x8
c001985d:	09 c1                	or     ecx,eax
c001985f:	09 d1                	or     ecx,edx
c0019861:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019866:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001986c:	89 c8                	mov    eax,ecx
c001986e:	ef                   	out    dx,eax
c001986f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0019874:	ed                   	in     eax,dx
c0019875:	0f b7 db             	movzx  ebx,bx
c0019878:	83 e6 02             	and    esi,0x2
c001987b:	74 0a                	je     c0019887 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001987d:	0f b7 d0             	movzx  edx,ax
c0019880:	c1 e3 10             	shl    ebx,0x10
c0019883:	09 d3                	or     ebx,edx
c0019885:	eb 05                	jmp    c001988c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0019887:	66 31 c0             	xor    ax,ax
c001988a:	09 c3                	or     ebx,eax
c001988c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019891:	89 c8                	mov    eax,ecx
c0019893:	ef                   	out    dx,eax
c0019894:	ba fc 0c 00 00       	mov    edx,0xcfc
c0019899:	89 d8                	mov    eax,ebx
c001989b:	eb 41                	jmp    c00198de <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001989d:	83 f9 02             	cmp    ecx,0x2
c00198a0:	75 45                	jne    c00198e7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00198a2:	83 ec 0c             	sub    esp,0xc
c00198a5:	0f b6 d2             	movzx  edx,dl
c00198a8:	89 f1                	mov    ecx,esi
c00198aa:	0f b6 c0             	movzx  eax,al
c00198ad:	0f b6 f1             	movzx  esi,cl
c00198b0:	89 e9                	mov    ecx,ebp
c00198b2:	56                   	push   esi
c00198b3:	0f b6 c9             	movzx  ecx,cl
c00198b6:	51                   	push   ecx
c00198b7:	52                   	push   edx
c00198b8:	50                   	push   eax
c00198b9:	57                   	push   edi
c00198ba:	e8 ad fc ff ff       	call   c001956c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00198bf:	89 c2                	mov    edx,eax
c00198c1:	ed                   	in     eax,dx
c00198c2:	83 c4 20             	add    esp,0x20
c00198c5:	0f b7 db             	movzx  ebx,bx
c00198c8:	f6 c2 02             	test   dl,0x2
c00198cb:	74 0c                	je     c00198d9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c00198cd:	0f b7 c8             	movzx  ecx,ax
c00198d0:	89 d8                	mov    eax,ebx
c00198d2:	c1 e0 10             	shl    eax,0x10
c00198d5:	09 c8                	or     eax,ecx
c00198d7:	eb 05                	jmp    c00198de <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00198d9:	66 31 c0             	xor    ax,ax
c00198dc:	09 d8                	or     eax,ebx
c00198de:	ef                   	out    dx,eax
c00198df:	83 c4 0c             	add    esp,0xc
c00198e2:	5b                   	pop    ebx
c00198e3:	5e                   	pop    esi
c00198e4:	5f                   	pop    edi
c00198e5:	5d                   	pop    ebp
c00198e6:	c3                   	ret    
c00198e7:	c7 44 24 20 2b 0b 02 c0 	mov    DWORD PTR [esp+0x20],0xc0020b2b
c00198ef:	83 c4 0c             	add    esp,0xc
c00198f2:	5b                   	pop    ebx
c00198f3:	5e                   	pop    esi
c00198f4:	5f                   	pop    edi
c00198f5:	5d                   	pop    ebp
c00198f6:	e9 a0 6a ff ff       	jmp    c001039b <KePanic(char const*)>
c00198fb:	90                   	nop

c00198fc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c00198fc:	55                   	push   ebp
c00198fd:	57                   	push   edi
c00198fe:	56                   	push   esi
c00198ff:	53                   	push   ebx
c0019900:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019906:	80 3d 4c 7b 02 c0 00 	cmp    BYTE PTR ds:0xc0027b4c,0x0
c001990d:	0f 85 bd 00 00 00    	jne    c00199d0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xd4>
c0019913:	83 ec 0c             	sub    esp,0xc
c0019916:	68 14 01 00 00       	push   0x114
c001991b:	e8 55 df fe ff       	call   c0007875 <malloc>
c0019920:	83 c4 0c             	add    esp,0xc
c0019923:	89 c3                	mov    ebx,eax
c0019925:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c001992b:	68 31 0b 02 c0       	push   0xc0020b31
c0019930:	50                   	push   eax
c0019931:	e8 4a 12 ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c0019936:	83 c4 10             	add    esp,0x10
c0019939:	85 db                	test   ebx,ebx
c001993b:	0f 84 47 02 00 00    	je     c0019b88 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019941:	56                   	push   esi
c0019942:	56                   	push   esi
c0019943:	6a 01                	push   0x1
c0019945:	53                   	push   ebx
c0019946:	e8 f5 12 ff ff       	call   c000ac40 <File::open(FileOpenMode)>
c001994b:	83 c4 10             	add    esp,0x10
c001994e:	85 c0                	test   eax,eax
c0019950:	0f 85 32 02 00 00    	jne    c0019b88 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019956:	52                   	push   edx
c0019957:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001995b:	50                   	push   eax
c001995c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019960:	50                   	push   eax
c0019961:	53                   	push   ebx
c0019962:	e8 85 15 ff ff       	call   c000aeec <File::stat(unsigned long long*, bool*)>
c0019967:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001996b:	40                   	inc    eax
c001996c:	89 04 24             	mov    DWORD PTR [esp],eax
c001996f:	e8 01 df fe ff       	call   c0007875 <malloc>
c0019974:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019978:	a3 48 7b 02 c0       	mov    ds:0xc0027b48,eax
c001997d:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0019981:	59                   	pop    ecx
c0019982:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019984:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0019988:	51                   	push   ecx
c0019989:	50                   	push   eax
c001998a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001998e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0019992:	53                   	push   ebx
c0019993:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019996:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001999a:	83 c4 20             	add    esp,0x20
c001999d:	89 c8                	mov    eax,ecx
c001999f:	99                   	cdq    
c00199a0:	3b 54 24 24          	cmp    edx,DWORD PTR [esp+0x24]
c00199a4:	0f 85 de 01 00 00    	jne    c0019b88 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c00199aa:	3b 4c 24 20          	cmp    ecx,DWORD PTR [esp+0x20]
c00199ae:	0f 85 d4 01 00 00    	jne    c0019b88 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c00199b4:	83 ec 0c             	sub    esp,0xc
c00199b7:	53                   	push   ebx
c00199b8:	e8 e1 12 ff ff       	call   c000ac9e <File::close()>
c00199bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00199c1:	c6 05 4c 7b 02 c0 01 	mov    BYTE PTR ds:0xc0027b4c,0x1
c00199c8:	a3 44 7b 02 c0       	mov    ds:0xc0027b44,eax
c00199cd:	83 c4 10             	add    esp,0x10
c00199d0:	a1 44 7b 02 c0       	mov    eax,ds:0xc0027b44
c00199d5:	8b 15 48 7b 02 c0    	mov    edx,DWORD PTR ds:0xc0027b48
c00199db:	89 04 24             	mov    DWORD PTR [esp],eax
c00199de:	31 ff                	xor    edi,edi
c00199e0:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c00199e8:	31 f6                	xor    esi,esi
c00199ea:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00199ef:	31 db                	xor    ebx,ebx
c00199f1:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c00199f9:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00199fe:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0019a05:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0019a09:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0019a10:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0019a14:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0019a17:	0f 8e 6b 01 00 00    	jle    c0019b88 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019a1d:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0019a20:	d4 40                	aam    0x40
c0019a22:	d5 39                	aad    0x39
c0019a24:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019a28:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0019a2c:	d4 40                	aam    0x40
c0019a2e:	d5 39                	aad    0x39
c0019a30:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0019a34:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0019a38:	d4 40                	aam    0x40
c0019a3a:	d5 39                	aad    0x39
c0019a3c:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0019a40:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0019a44:	d4 40                	aam    0x40
c0019a46:	d5 39                	aad    0x39
c0019a48:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019a4c:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0019a50:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0019a54:	3c 56                	cmp    al,0x56
c0019a56:	74 45                	je     c0019a9d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a1>
c0019a58:	d4 40                	aam    0x40
c0019a5a:	d5 39                	aad    0x39
c0019a5c:	8d 48 d0             	lea    ecx,[eax-0x30]
c0019a5f:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0019a63:	0f b6 c9             	movzx  ecx,cl
c0019a66:	c1 e1 04             	shl    ecx,0x4
c0019a69:	d4 40                	aam    0x40
c0019a6b:	d5 39                	aad    0x39
c0019a6d:	8d 58 d0             	lea    ebx,[eax-0x30]
c0019a70:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0019a74:	0f b6 db             	movzx  ebx,bl
c0019a77:	09 cb                	or     ebx,ecx
c0019a79:	c1 e3 04             	shl    ebx,0x4
c0019a7c:	d4 40                	aam    0x40
c0019a7e:	d5 39                	aad    0x39
c0019a80:	8d 48 d0             	lea    ecx,[eax-0x30]
c0019a83:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0019a87:	0f b6 c9             	movzx  ecx,cl
c0019a8a:	09 cb                	or     ebx,ecx
c0019a8c:	c1 e3 04             	shl    ebx,0x4
c0019a8f:	89 d9                	mov    ecx,ebx
c0019a91:	d4 40                	aam    0x40
c0019a93:	d5 39                	aad    0x39
c0019a95:	8d 58 d0             	lea    ebx,[eax-0x30]
c0019a98:	0f b6 db             	movzx  ebx,bl
c0019a9b:	09 cb                	or     ebx,ecx
c0019a9d:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0019aa1:	80 f9 58             	cmp    cl,0x58
c0019aa4:	74 47                	je     c0019aed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f1>
c0019aa6:	88 c8                	mov    al,cl
c0019aa8:	d4 40                	aam    0x40
c0019aaa:	d5 39                	aad    0x39
c0019aac:	83 e8 30             	sub    eax,0x30
c0019aaf:	0f b6 e8             	movzx  ebp,al
c0019ab2:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0019ab6:	c1 e5 04             	shl    ebp,0x4
c0019ab9:	d4 40                	aam    0x40
c0019abb:	d5 39                	aad    0x39
c0019abd:	83 e8 30             	sub    eax,0x30
c0019ac0:	0f b6 f0             	movzx  esi,al
c0019ac3:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0019ac7:	09 ee                	or     esi,ebp
c0019ac9:	c1 e6 04             	shl    esi,0x4
c0019acc:	d4 40                	aam    0x40
c0019ace:	d5 39                	aad    0x39
c0019ad0:	83 e8 30             	sub    eax,0x30
c0019ad3:	0f b6 e8             	movzx  ebp,al
c0019ad6:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0019ada:	09 ee                	or     esi,ebp
c0019adc:	c1 e6 04             	shl    esi,0x4
c0019adf:	89 f5                	mov    ebp,esi
c0019ae1:	d4 40                	aam    0x40
c0019ae3:	d5 39                	aad    0x39
c0019ae5:	83 e8 30             	sub    eax,0x30
c0019ae8:	0f b6 f0             	movzx  esi,al
c0019aeb:	09 ee                	or     esi,ebp
c0019aed:	83 c7 10             	add    edi,0x10
c0019af0:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0019af4:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0019af7:	3c 0a                	cmp    al,0xa
c0019af9:	74 09                	je     c0019b04 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x208>
c0019afb:	45                   	inc    ebp
c0019afc:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0019aff:	75 16                	jne    c0019b17 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x21b>
c0019b01:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0019b04:	3c 0a                	cmp    al,0xa
c0019b06:	0f 94 c0             	sete   al
c0019b09:	0f b6 c0             	movzx  eax,al
c0019b0c:	01 c7                	add    edi,eax
c0019b0e:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0019b13:	75 0c                	jne    c0019b21 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x225>
c0019b15:	eb 15                	jmp    c0019b2c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x230>
c0019b17:	47                   	inc    edi
c0019b18:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0019b1b:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0019b1f:	eb d3                	jmp    c0019af4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f8>
c0019b21:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0019b26:	0f 85 e8 fe ff ff    	jne    c0019a14 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c0019b2c:	80 f9 58             	cmp    cl,0x58
c0019b2f:	74 0b                	je     c0019b3c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x240>
c0019b31:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0019b36:	0f 85 d8 fe ff ff    	jne    c0019a14 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c0019b3c:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0019b40:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0019b44:	c1 e1 04             	shl    ecx,0x4
c0019b47:	83 e8 30             	sub    eax,0x30
c0019b4a:	09 c8                	or     eax,ecx
c0019b4c:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0019b50:	0f 85 be fe ff ff    	jne    c0019a14 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c0019b56:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0019b5a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019b5e:	c1 e1 04             	shl    ecx,0x4
c0019b61:	83 e8 30             	sub    eax,0x30
c0019b64:	09 c8                	or     eax,ecx
c0019b66:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0019b6a:	0f 85 a4 fe ff ff    	jne    c0019a14 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c0019b70:	50                   	push   eax
c0019b71:	50                   	push   eax
c0019b72:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019b76:	50                   	push   eax
c0019b77:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0019b7e:	e8 7d 6a fe ff       	call   c0000600 <strcpy>
c0019b83:	83 c4 10             	add    esp,0x10
c0019b86:	eb 15                	jmp    c0019b9d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a1>
c0019b88:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0019b8f:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0019b9a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0019b9d:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0019ba4:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019baa:	5b                   	pop    ebx
c0019bab:	5e                   	pop    esi
c0019bac:	5f                   	pop    edi
c0019bad:	5d                   	pop    ebp
c0019bae:	c3                   	ret    
c0019baf:	90                   	nop

c0019bb0 <PCI::checkBus(unsigned char)>:
c0019bb0:	56                   	push   esi
c0019bb1:	53                   	push   ebx
c0019bb2:	31 f6                	xor    esi,esi
c0019bb4:	51                   	push   ecx
c0019bb5:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0019bb9:	0f b6 c3             	movzx  eax,bl
c0019bbc:	52                   	push   edx
c0019bbd:	56                   	push   esi
c0019bbe:	46                   	inc    esi
c0019bbf:	50                   	push   eax
c0019bc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019bc4:	e8 f3 02 00 00       	call   c0019ebc <PCI::checkDevice(unsigned char, unsigned char)>
c0019bc9:	83 c4 10             	add    esp,0x10
c0019bcc:	83 fe 20             	cmp    esi,0x20
c0019bcf:	75 e8                	jne    c0019bb9 <PCI::checkBus(unsigned char)+0x9>
c0019bd1:	58                   	pop    eax
c0019bd2:	5b                   	pop    ebx
c0019bd3:	5e                   	pop    esi
c0019bd4:	c3                   	ret    
c0019bd5:	90                   	nop

c0019bd6 <PCI::foundDevice(PCIDeviceInfo)>:
c0019bd6:	55                   	push   ebp
c0019bd7:	57                   	push   edi
c0019bd8:	56                   	push   esi
c0019bd9:	53                   	push   ebx
c0019bda:	83 ec 1c             	sub    esp,0x1c
c0019bdd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019be1:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0019be7:	0f 84 52 01 00 00    	je     c0019d3f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0019bed:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0019bf1:	66 81 f9 06 04       	cmp    cx,0x406
c0019bf6:	75 2c                	jne    c0019c24 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0019bf8:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0019bfd:	50                   	push   eax
c0019bfe:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0019c03:	50                   	push   eax
c0019c04:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0019c09:	50                   	push   eax
c0019c0a:	56                   	push   esi
c0019c0b:	e8 78 fb ff ff       	call   c0019788 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0019c10:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0019c14:	0f b6 c0             	movzx  eax,al
c0019c17:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0019c1b:	83 c4 2c             	add    esp,0x2c
c0019c1e:	5b                   	pop    ebx
c0019c1f:	5e                   	pop    esi
c0019c20:	5f                   	pop    edi
c0019c21:	5d                   	pop    ebp
c0019c22:	eb 8c                	jmp    c0019bb0 <PCI::checkBus(unsigned char)>
c0019c24:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0019c28:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0019c2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019c32:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0019c36:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0019c3a:	88 d3                	mov    bl,dl
c0019c3c:	85 c0                	test   eax,eax
c0019c3e:	74 33                	je     c0019c73 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0019c40:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0019c43:	85 d2                	test   edx,edx
c0019c45:	74 28                	je     c0019c6f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0019c47:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0019c4d:	31 ef                	xor    edi,ebp
c0019c4f:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0019c55:	75 18                	jne    c0019c6f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0019c57:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0019c5b:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0019c61:	75 0c                	jne    c0019c6f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0019c63:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0019c69:	0f 84 d0 00 00 00    	je     c0019d3f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0019c6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0019c71:	eb c9                	jmp    c0019c3c <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0019c73:	66 81 f9 01 06       	cmp    cx,0x601
c0019c78:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0019c7c:	75 19                	jne    c0019c97 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0019c7e:	83 ec 0c             	sub    esp,0xc
c0019c81:	68 64 01 00 00       	push   0x164
c0019c86:	e8 ea db fe ff       	call   c0007875 <malloc>
c0019c8b:	89 c5                	mov    ebp,eax
c0019c8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c90:	e8 47 0e 00 00       	call   c001aadc <SATABus::SATABus()>
c0019c95:	eb 1e                	jmp    c0019cb5 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0019c97:	66 81 f9 01 01       	cmp    cx,0x101
c0019c9c:	75 60                	jne    c0019cfe <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0019c9e:	83 ec 0c             	sub    esp,0xc
c0019ca1:	68 70 02 00 00       	push   0x270
c0019ca6:	e8 ca db fe ff       	call   c0007875 <malloc>
c0019cab:	89 c5                	mov    ebp,eax
c0019cad:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cb0:	e8 cb 02 00 00       	call   c0019f80 <IDE::IDE()>
c0019cb5:	58                   	pop    eax
c0019cb6:	5a                   	pop    edx
c0019cb7:	55                   	push   ebp
c0019cb8:	56                   	push   esi
c0019cb9:	e8 8a 1d ff ff       	call   c000ba48 <Device::addChild(Device*)>
c0019cbe:	83 ec 1c             	sub    esp,0x1c
c0019cc1:	b9 09 00 00 00       	mov    ecx,0x9
c0019cc6:	fc                   	cld    
c0019cc7:	89 e7                	mov    edi,esp
c0019cc9:	89 de                	mov    esi,ebx
c0019ccb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0019ccd:	55                   	push   ebp
c0019cce:	e8 bb 1c ff ff       	call   c000b98e <Device::preOpenPCI(PCIDeviceInfo)>
c0019cd3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019cd6:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0019cda:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0019ce2:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0019cea:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0019cf2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0019cf5:	83 c4 4c             	add    esp,0x4c
c0019cf8:	5b                   	pop    ebx
c0019cf9:	5e                   	pop    esi
c0019cfa:	5f                   	pop    edi
c0019cfb:	5d                   	pop    ebp
c0019cfc:	ff e0                	jmp    eax
c0019cfe:	83 ec 0c             	sub    esp,0xc
c0019d01:	68 58 01 00 00       	push   0x158
c0019d06:	e8 6a db fe ff       	call   c0007875 <malloc>
c0019d0b:	89 c5                	mov    ebp,eax
c0019d0d:	58                   	pop    eax
c0019d0e:	5a                   	pop    edx
c0019d0f:	68 4a 0b 02 c0       	push   0xc0020b4a
c0019d14:	55                   	push   ebp
c0019d15:	e8 cc 1f ff ff       	call   c000bce6 <DriverlessDevice::DriverlessDevice(char const*)>
c0019d1a:	59                   	pop    ecx
c0019d1b:	5f                   	pop    edi
c0019d1c:	55                   	push   ebp
c0019d1d:	56                   	push   esi
c0019d1e:	e8 25 1d ff ff       	call   c000ba48 <Device::addChild(Device*)>
c0019d23:	b9 09 00 00 00       	mov    ecx,0x9
c0019d28:	fc                   	cld    
c0019d29:	89 df                	mov    edi,ebx
c0019d2b:	89 de                	mov    esi,ebx
c0019d2d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0019d2f:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0019d33:	83 c4 2c             	add    esp,0x2c
c0019d36:	5b                   	pop    ebx
c0019d37:	5e                   	pop    esi
c0019d38:	5f                   	pop    edi
c0019d39:	5d                   	pop    ebp
c0019d3a:	e9 4f 1c ff ff       	jmp    c000b98e <Device::preOpenPCI(PCIDeviceInfo)>
c0019d3f:	83 c4 1c             	add    esp,0x1c
c0019d42:	5b                   	pop    ebx
c0019d43:	5e                   	pop    esi
c0019d44:	5f                   	pop    edi
c0019d45:	5d                   	pop    ebp
c0019d46:	c3                   	ret    
c0019d47:	90                   	nop

c0019d48 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0019d48:	55                   	push   ebp
c0019d49:	57                   	push   edi
c0019d4a:	56                   	push   esi
c0019d4b:	53                   	push   ebx
c0019d4c:	83 ec 68             	sub    esp,0x68
c0019d4f:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0019d53:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0019d5a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019d5e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019d65:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0019d6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019d6e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019d75:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0019d7a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0019d7e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0019d83:	6a 0c                	push   0xc
c0019d85:	57                   	push   edi
c0019d86:	53                   	push   ebx
c0019d87:	56                   	push   esi
c0019d88:	55                   	push   ebp
c0019d89:	e8 4c f8 ff ff       	call   c00195da <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019d8e:	83 c4 20             	add    esp,0x20
c0019d91:	57                   	push   edi
c0019d92:	53                   	push   ebx
c0019d93:	56                   	push   esi
c0019d94:	55                   	push   ebp
c0019d95:	e8 34 f9 ff ff       	call   c00196ce <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0019d9a:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0019d9f:	57                   	push   edi
c0019da0:	53                   	push   ebx
c0019da1:	56                   	push   esi
c0019da2:	55                   	push   ebp
c0019da3:	e8 bc f9 ff ff       	call   c0019764 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0019da8:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0019dac:	83 c4 14             	add    esp,0x14
c0019daf:	6a 3c                	push   0x3c
c0019db1:	57                   	push   edi
c0019db2:	53                   	push   ebx
c0019db3:	56                   	push   esi
c0019db4:	55                   	push   ebp
c0019db5:	e8 20 f8 ff ff       	call   c00195da <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019dba:	0f b6 c4             	movzx  eax,ah
c0019dbd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019dc1:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0019dc5:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0019dc9:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0019dce:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0019dd4:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0019dda:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019dde:	83 c4 20             	add    esp,0x20
c0019de1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019de6:	74 30                	je     c0019e18 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0019de8:	31 c0                	xor    eax,eax
c0019dea:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0019dee:	7e 28                	jle    c0019e18 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0019df0:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0019df8:	39 cb                	cmp    ebx,ecx
c0019dfa:	75 19                	jne    c0019e15 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0019dfc:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0019e04:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0019e08:	75 0b                	jne    c0019e15 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0019e0a:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0019e11:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0019e15:	40                   	inc    eax
c0019e16:	eb d2                	jmp    c0019dea <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0019e18:	31 d2                	xor    edx,edx
c0019e1a:	83 ec 0c             	sub    esp,0xc
c0019e1d:	57                   	push   edi
c0019e1e:	53                   	push   ebx
c0019e1f:	56                   	push   esi
c0019e20:	52                   	push   edx
c0019e21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0019e25:	55                   	push   ebp
c0019e26:	e8 85 f9 ff ff       	call   c00197b0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019e2b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019e2f:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0019e33:	42                   	inc    edx
c0019e34:	83 c4 20             	add    esp,0x20
c0019e37:	83 fa 06             	cmp    edx,0x6
c0019e3a:	75 de                	jne    c0019e1a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0019e3c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0019e41:	83 ec 0c             	sub    esp,0xc
c0019e44:	86 e0                	xchg   al,ah
c0019e46:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0019e4b:	6a 02                	push   0x2
c0019e4d:	57                   	push   edi
c0019e4e:	53                   	push   ebx
c0019e4f:	56                   	push   esi
c0019e50:	55                   	push   ebp
c0019e51:	e8 84 f7 ff ff       	call   c00195da <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019e56:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0019e5b:	83 c4 20             	add    esp,0x20
c0019e5e:	57                   	push   edi
c0019e5f:	53                   	push   ebx
c0019e60:	56                   	push   esi
c0019e61:	55                   	push   ebp
c0019e62:	e8 b1 f8 ff ff       	call   c0019718 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0019e67:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0019e6b:	57                   	push   edi
c0019e6c:	53                   	push   ebx
c0019e6d:	56                   	push   esi
c0019e6e:	55                   	push   ebp
c0019e6f:	e8 0e f8 ff ff       	call   c0019682 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019e74:	b9 09 00 00 00       	mov    ecx,0x9
c0019e79:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0019e7e:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0019e82:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0019e86:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0019e8a:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0019e8e:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0019e92:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0019e96:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0019e9a:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0019e9e:	83 ec 0c             	sub    esp,0xc
c0019ea1:	fc                   	cld    
c0019ea2:	89 e7                	mov    edi,esp
c0019ea4:	8d 74 24 58          	lea    esi,[esp+0x58]
c0019ea8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0019eaa:	55                   	push   ebp
c0019eab:	e8 26 fd ff ff       	call   c0019bd6 <PCI::foundDevice(PCIDeviceInfo)>
c0019eb0:	81 c4 8c 00 00 00    	add    esp,0x8c
c0019eb6:	5b                   	pop    ebx
c0019eb7:	5e                   	pop    esi
c0019eb8:	5f                   	pop    edi
c0019eb9:	5d                   	pop    ebp
c0019eba:	c3                   	ret    
c0019ebb:	90                   	nop

c0019ebc <PCI::checkDevice(unsigned char, unsigned char)>:
c0019ebc:	55                   	push   ebp
c0019ebd:	57                   	push   edi
c0019ebe:	56                   	push   esi
c0019ebf:	53                   	push   ebx
c0019ec0:	83 ec 0c             	sub    esp,0xc
c0019ec3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0019ec7:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0019ecc:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0019ed1:	6a 00                	push   0x0
c0019ed3:	56                   	push   esi
c0019ed4:	57                   	push   edi
c0019ed5:	55                   	push   ebp
c0019ed6:	e8 a7 f7 ff ff       	call   c0019682 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019edb:	6a 00                	push   0x0
c0019edd:	56                   	push   esi
c0019ede:	57                   	push   edi
c0019edf:	55                   	push   ebp
c0019ee0:	e8 63 fe ff ff       	call   c0019d48 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0019ee5:	83 c4 20             	add    esp,0x20
c0019ee8:	6a 00                	push   0x0
c0019eea:	56                   	push   esi
c0019eeb:	57                   	push   edi
c0019eec:	55                   	push   ebp
c0019eed:	e8 b4 f7 ff ff       	call   c00196a6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0019ef2:	83 c4 10             	add    esp,0x10
c0019ef5:	84 c0                	test   al,al
c0019ef7:	79 27                	jns    c0019f20 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0019ef9:	bb 01 00 00 00       	mov    ebx,0x1
c0019efe:	53                   	push   ebx
c0019eff:	56                   	push   esi
c0019f00:	57                   	push   edi
c0019f01:	55                   	push   ebp
c0019f02:	e8 7b f7 ff ff       	call   c0019682 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019f07:	83 c4 10             	add    esp,0x10
c0019f0a:	66 40                	inc    ax
c0019f0c:	74 0c                	je     c0019f1a <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0019f0e:	53                   	push   ebx
c0019f0f:	56                   	push   esi
c0019f10:	57                   	push   edi
c0019f11:	55                   	push   ebp
c0019f12:	e8 31 fe ff ff       	call   c0019d48 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0019f17:	83 c4 10             	add    esp,0x10
c0019f1a:	43                   	inc    ebx
c0019f1b:	83 fb 08             	cmp    ebx,0x8
c0019f1e:	75 de                	jne    c0019efe <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0019f20:	83 c4 0c             	add    esp,0xc
c0019f23:	5b                   	pop    ebx
c0019f24:	5e                   	pop    esi
c0019f25:	5f                   	pop    edi
c0019f26:	5d                   	pop    ebp
c0019f27:	c3                   	ret    

c0019f28 <PCI::detect()>:
c0019f28:	56                   	push   esi
c0019f29:	53                   	push   ebx
c0019f2a:	53                   	push   ebx
c0019f2b:	31 db                	xor    ebx,ebx
c0019f2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019f31:	6a 00                	push   0x0
c0019f33:	6a 00                	push   0x0
c0019f35:	6a 00                	push   0x0
c0019f37:	56                   	push   esi
c0019f38:	e8 69 f7 ff ff       	call   c00196a6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0019f3d:	83 c4 10             	add    esp,0x10
c0019f40:	a8 80                	test   al,0x80
c0019f42:	75 21                	jne    c0019f65 <PCI::detect()+0x3d>
c0019f44:	51                   	push   ecx
c0019f45:	51                   	push   ecx
c0019f46:	6a 00                	push   0x0
c0019f48:	56                   	push   esi
c0019f49:	e8 62 fc ff ff       	call   c0019bb0 <PCI::checkBus(unsigned char)>
c0019f4e:	83 c4 10             	add    esp,0x10
c0019f51:	eb 24                	jmp    c0019f77 <PCI::detect()+0x4f>
c0019f53:	52                   	push   edx
c0019f54:	52                   	push   edx
c0019f55:	53                   	push   ebx
c0019f56:	43                   	inc    ebx
c0019f57:	56                   	push   esi
c0019f58:	e8 53 fc ff ff       	call   c0019bb0 <PCI::checkBus(unsigned char)>
c0019f5d:	83 c4 10             	add    esp,0x10
c0019f60:	83 fb 08             	cmp    ebx,0x8
c0019f63:	74 12                	je     c0019f77 <PCI::detect()+0x4f>
c0019f65:	53                   	push   ebx
c0019f66:	6a 00                	push   0x0
c0019f68:	6a 00                	push   0x0
c0019f6a:	56                   	push   esi
c0019f6b:	e8 12 f7 ff ff       	call   c0019682 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019f70:	83 c4 10             	add    esp,0x10
c0019f73:	66 40                	inc    ax
c0019f75:	74 dc                	je     c0019f53 <PCI::detect()+0x2b>
c0019f77:	58                   	pop    eax
c0019f78:	5b                   	pop    ebx
c0019f79:	5e                   	pop    esi
c0019f7a:	c3                   	ret    
c0019f7b:	90                   	nop

c0019f7c <IDE::close(int, int, void*)>:
c0019f7c:	83 c8 ff             	or     eax,0xffffffff
c0019f7f:	c3                   	ret    

c0019f80 <IDE::IDE()>:
c0019f80:	83 ec 0c             	sub    esp,0xc
c0019f83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f87:	83 ec 08             	sub    esp,0x8
c0019f8a:	68 90 0b 02 c0       	push   0xc0020b90
c0019f8f:	50                   	push   eax
c0019f90:	e8 f7 1d ff ff       	call   c000bd8c <HardDiskController::HardDiskController(char const*)>
c0019f95:	83 c4 10             	add    esp,0x10
c0019f98:	ba 20 0c 02 c0       	mov    edx,0xc0020c20
c0019f9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fa1:	89 10                	mov    DWORD PTR [eax],edx
c0019fa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fa7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0019fae:	90                   	nop
c0019faf:	83 c4 0c             	add    esp,0xc
c0019fb2:	c3                   	ret    
c0019fb3:	90                   	nop

c0019fb4 <IDE::prepareInterrupt(unsigned char)>:
c0019fb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019fb9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019fbd:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0019fc5:	c3                   	ret    

c0019fc6 <selectDrive(unsigned char, unsigned char)>:
c0019fc6:	c3                   	ret    
c0019fc7:	90                   	nop

c0019fc8 <IDE::getBase(unsigned char)>:
c0019fc8:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0019fcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fd1:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0019fd9:	c3                   	ret    

c0019fda <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0019fda:	55                   	push   ebp
c0019fdb:	57                   	push   edi
c0019fdc:	56                   	push   esi
c0019fdd:	53                   	push   ebx
c0019fde:	83 ec 1c             	sub    esp,0x1c
c0019fe1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0019fe5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019fe9:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0019fec:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019ff0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019ff4:	80 f9 03             	cmp    cl,0x3
c0019ff7:	77 51                	ja     c001a04a <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0019ff9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019ffd:	0f b6 f2             	movzx  esi,dl
c001a000:	0f b6 db             	movzx  ebx,bl
c001a003:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001a006:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001a00a:	83 ca 80             	or     edx,0xffffff80
c001a00d:	0f b6 d2             	movzx  edx,dl
c001a010:	52                   	push   edx
c001a011:	6a 0c                	push   0xc
c001a013:	56                   	push   esi
c001a014:	57                   	push   edi
c001a015:	e8 c0 ff ff ff       	call   c0019fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a01a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001a01f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a023:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001a027:	ee                   	out    dx,al
c001a028:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001a02d:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001a031:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001a035:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a039:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001a041:	83 c4 2c             	add    esp,0x2c
c001a044:	5b                   	pop    ebx
c001a045:	5e                   	pop    esi
c001a046:	5f                   	pop    edi
c001a047:	5d                   	pop    ebp
c001a048:	eb 90                	jmp    c0019fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a04a:	80 fb 07             	cmp    bl,0x7
c001a04d:	77 12                	ja     c001a061 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001a04f:	0f b6 d2             	movzx  edx,dl
c001a052:	0f b6 db             	movzx  ebx,bl
c001a055:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001a05d:	89 da                	mov    edx,ebx
c001a05f:	eb 2f                	jmp    c001a090 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001a061:	80 fb 0d             	cmp    bl,0xd
c001a064:	77 13                	ja     c001a079 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001a066:	0f b6 d2             	movzx  edx,dl
c001a069:	0f b6 db             	movzx  ebx,bl
c001a06c:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001a073:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001a077:	eb 17                	jmp    c001a090 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001a079:	80 fb 15             	cmp    bl,0x15
c001a07c:	77 13                	ja     c001a091 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001a07e:	0f b6 d2             	movzx  edx,dl
c001a081:	0f b6 db             	movzx  ebx,bl
c001a084:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001a08c:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001a090:	ee                   	out    dx,al
c001a091:	83 c4 1c             	add    esp,0x1c
c001a094:	5b                   	pop    ebx
c001a095:	5e                   	pop    esi
c001a096:	5f                   	pop    edi
c001a097:	5d                   	pop    ebp
c001a098:	c3                   	ret    
c001a099:	90                   	nop

c001a09a <IDE::read(unsigned char, unsigned char)>:
c001a09a:	55                   	push   ebp
c001a09b:	57                   	push   edi
c001a09c:	56                   	push   esi
c001a09d:	53                   	push   ebx
c001a09e:	83 ec 1c             	sub    esp,0x1c
c001a0a1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a0a5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a0a9:	8d 43 f8             	lea    eax,[ebx-0x8]
c001a0ac:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a0b0:	3c 03                	cmp    al,0x3
c001a0b2:	77 43                	ja     c001a0f7 <IDE::read(unsigned char, unsigned char)+0x5d>
c001a0b4:	0f b6 f2             	movzx  esi,dl
c001a0b7:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001a0ba:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001a0be:	83 c8 80             	or     eax,0xffffff80
c001a0c1:	0f b6 c0             	movzx  eax,al
c001a0c4:	50                   	push   eax
c001a0c5:	6a 0c                	push   0xc
c001a0c7:	56                   	push   esi
c001a0c8:	57                   	push   edi
c001a0c9:	e8 0c ff ff ff       	call   c0019fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0ce:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001a0d3:	0f b6 c3             	movzx  eax,bl
c001a0d6:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001a0da:	ec                   	in     al,dx
c001a0db:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a0df:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001a0e4:	52                   	push   edx
c001a0e5:	6a 0c                	push   0xc
c001a0e7:	56                   	push   esi
c001a0e8:	57                   	push   edi
c001a0e9:	e8 ec fe ff ff       	call   c0019fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0ee:	83 c4 20             	add    esp,0x20
c001a0f1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a0f5:	eb 49                	jmp    c001a140 <IDE::read(unsigned char, unsigned char)+0xa6>
c001a0f7:	80 fb 07             	cmp    bl,0x7
c001a0fa:	77 12                	ja     c001a10e <IDE::read(unsigned char, unsigned char)+0x74>
c001a0fc:	0f b6 d2             	movzx  edx,dl
c001a0ff:	0f b6 c3             	movzx  eax,bl
c001a102:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001a10a:	89 c2                	mov    edx,eax
c001a10c:	eb 31                	jmp    c001a13f <IDE::read(unsigned char, unsigned char)+0xa5>
c001a10e:	80 fb 0d             	cmp    bl,0xd
c001a111:	77 13                	ja     c001a126 <IDE::read(unsigned char, unsigned char)+0x8c>
c001a113:	0f b6 d2             	movzx  edx,dl
c001a116:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001a11d:	0f b6 d3             	movzx  edx,bl
c001a120:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001a124:	eb 19                	jmp    c001a13f <IDE::read(unsigned char, unsigned char)+0xa5>
c001a126:	31 c0                	xor    eax,eax
c001a128:	80 fb 15             	cmp    bl,0x15
c001a12b:	77 13                	ja     c001a140 <IDE::read(unsigned char, unsigned char)+0xa6>
c001a12d:	0f b6 d2             	movzx  edx,dl
c001a130:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001a138:	0f b6 d3             	movzx  edx,bl
c001a13b:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001a13f:	ec                   	in     al,dx
c001a140:	83 c4 1c             	add    esp,0x1c
c001a143:	5b                   	pop    ebx
c001a144:	5e                   	pop    esi
c001a145:	5f                   	pop    edi
c001a146:	5d                   	pop    ebp
c001a147:	c3                   	ret    

c001a148 <IDE::waitInterrupt(unsigned char)>:
c001a148:	57                   	push   edi
c001a149:	56                   	push   esi
c001a14a:	31 f6                	xor    esi,esi
c001a14c:	53                   	push   ebx
c001a14d:	83 ec 10             	sub    esp,0x10
c001a150:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001a154:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a158:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a15c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001a161:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001a168:	84 db                	test   bl,bl
c001a16a:	75 33                	jne    c001a19f <IDE::waitInterrupt(unsigned char)+0x57>
c001a16c:	52                   	push   edx
c001a16d:	6a 0c                	push   0xc
c001a16f:	50                   	push   eax
c001a170:	57                   	push   edi
c001a171:	e8 24 ff ff ff       	call   c001a09a <IDE::read(unsigned char, unsigned char)>
c001a176:	83 c4 10             	add    esp,0x10
c001a179:	a8 01                	test   al,0x1
c001a17b:	75 2a                	jne    c001a1a7 <IDE::waitInterrupt(unsigned char)+0x5f>
c001a17d:	f7 c6 04 00 00 00    	test   esi,0x4
c001a183:	75 12                	jne    c001a197 <IDE::waitInterrupt(unsigned char)+0x4f>
c001a185:	83 fe 32             	cmp    esi,0x32
c001a188:	7e 0d                	jle    c001a197 <IDE::waitInterrupt(unsigned char)+0x4f>
c001a18a:	83 ec 0c             	sub    esp,0xc
c001a18d:	6a 64                	push   0x64
c001a18f:	e8 64 a7 ff ff       	call   c00148f8 <milliTenthSleep(unsigned int)>
c001a194:	83 c4 10             	add    esp,0x10
c001a197:	83 fe 3c             	cmp    esi,0x3c
c001a19a:	74 0b                	je     c001a1a7 <IDE::waitInterrupt(unsigned char)+0x5f>
c001a19c:	46                   	inc    esi
c001a19d:	eb bd                	jmp    c001a15c <IDE::waitInterrupt(unsigned char)+0x14>
c001a19f:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001a1a7:	83 c4 10             	add    esp,0x10
c001a1aa:	88 d8                	mov    al,bl
c001a1ac:	5b                   	pop    ebx
c001a1ad:	5e                   	pop    esi
c001a1ae:	5f                   	pop    edi
c001a1af:	c3                   	ret    

c001a1b0 <ideChannel0IRQHandler(regs*, void*)>:
c001a1b0:	83 ec 10             	sub    esp,0x10
c001a1b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a1b7:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001a1be:	6a 07                	push   0x7
c001a1c0:	6a 00                	push   0x0
c001a1c2:	50                   	push   eax
c001a1c3:	e8 d2 fe ff ff       	call   c001a09a <IDE::read(unsigned char, unsigned char)>
c001a1c8:	83 c4 1c             	add    esp,0x1c
c001a1cb:	c3                   	ret    

c001a1cc <ideChannel1IRQHandler(regs*, void*)>:
c001a1cc:	83 ec 10             	sub    esp,0x10
c001a1cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a1d3:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001a1da:	6a 07                	push   0x7
c001a1dc:	6a 01                	push   0x1
c001a1de:	50                   	push   eax
c001a1df:	e8 b6 fe ff ff       	call   c001a09a <IDE::read(unsigned char, unsigned char)>
c001a1e4:	83 c4 1c             	add    esp,0x1c
c001a1e7:	c3                   	ret    

c001a1e8 <IDE::enableIRQs(unsigned char, bool)>:
c001a1e8:	57                   	push   edi
c001a1e9:	56                   	push   esi
c001a1ea:	be 04 00 00 00       	mov    esi,0x4
c001a1ef:	53                   	push   ebx
c001a1f0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001a1f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a1f9:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001a1fe:	0f 94 c0             	sete   al
c001a201:	01 c0                	add    eax,eax
c001a203:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001a20a:	0f b6 c0             	movzx  eax,al
c001a20d:	50                   	push   eax
c001a20e:	6a 0c                	push   0xc
c001a210:	57                   	push   edi
c001a211:	53                   	push   ebx
c001a212:	e8 c3 fd ff ff       	call   c0019fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a217:	83 c4 10             	add    esp,0x10
c001a21a:	50                   	push   eax
c001a21b:	6a 0c                	push   0xc
c001a21d:	57                   	push   edi
c001a21e:	53                   	push   ebx
c001a21f:	e8 76 fe ff ff       	call   c001a09a <IDE::read(unsigned char, unsigned char)>
c001a224:	83 c4 10             	add    esp,0x10
c001a227:	4e                   	dec    esi
c001a228:	75 f0                	jne    c001a21a <IDE::enableIRQs(unsigned char, bool)+0x32>
c001a22a:	5b                   	pop    ebx
c001a22b:	5e                   	pop    esi
c001a22c:	5f                   	pop    edi
c001a22d:	c3                   	ret    

c001a22e <IDE::open(int, int, void*)>:
c001a22e:	55                   	push   ebp
c001a22f:	57                   	push   edi
c001a230:	56                   	push   esi
c001a231:	53                   	push   ebx
c001a232:	83 ec 1c             	sub    esp,0x1c
c001a235:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a239:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001a242:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001a24b:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001a252:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001a259:	0f 85 b0 02 00 00    	jne    c001a50f <IDE::open(int, int, void*)+0x2e1>
c001a25f:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001a265:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001a269:	83 e0 7f             	and    eax,0x7f
c001a26c:	3c 05                	cmp    al,0x5
c001a26e:	74 04                	je     c001a274 <IDE::open(int, int, void*)+0x46>
c001a270:	3c 0f                	cmp    al,0xf
c001a272:	75 32                	jne    c001a2a6 <IDE::open(int, int, void*)+0x78>
c001a274:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001a27a:	83 e0 fc             	and    eax,0xfffffffc
c001a27d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001a284:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001a28a:	83 e0 fc             	and    eax,0xfffffffc
c001a28d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001a294:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001a29a:	83 e0 fc             	and    eax,0xfffffffc
c001a29d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001a2a4:	eb 14                	jmp    c001a2ba <IDE::open(int, int, void*)+0x8c>
c001a2a6:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001a2b0:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001a2ba:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001a2c1:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001a2c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a2cc:	89 c6                	mov    esi,eax
c001a2ce:	bf f8 0c 00 00       	mov    edi,0xcf8
c001a2d3:	c1 e6 10             	shl    esi,0x10
c001a2d6:	89 e8                	mov    eax,ebp
c001a2d8:	89 fa                	mov    edx,edi
c001a2da:	c1 e0 0b             	shl    eax,0xb
c001a2dd:	09 f0                	or     eax,esi
c001a2df:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001a2e6:	c1 e6 08             	shl    esi,0x8
c001a2e9:	09 c6                	or     esi,eax
c001a2eb:	89 f0                	mov    eax,esi
c001a2ed:	0d 08 00 00 80       	or     eax,0x80000008
c001a2f2:	ef                   	out    dx,eax
c001a2f3:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001a2f8:	89 ca                	mov    edx,ecx
c001a2fa:	ed                   	in     eax,dx
c001a2fb:	c1 e8 10             	shr    eax,0x10
c001a2fe:	3d ff ff 00 00       	cmp    eax,0xffff
c001a303:	0f 84 f5 00 00 00    	je     c001a3fe <IDE::open(int, int, void*)+0x1d0>
c001a309:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001a30f:	89 fa                	mov    edx,edi
c001a311:	89 f0                	mov    eax,esi
c001a313:	ef                   	out    dx,eax
c001a314:	b0 fe                	mov    al,0xfe
c001a316:	89 ca                	mov    edx,ecx
c001a318:	ee                   	out    dx,al
c001a319:	89 f0                	mov    eax,esi
c001a31b:	89 fa                	mov    edx,edi
c001a31d:	ef                   	out    dx,eax
c001a31e:	89 ca                	mov    edx,ecx
c001a320:	ed                   	in     eax,dx
c001a321:	3c fe                	cmp    al,0xfe
c001a323:	0f 85 a9 00 00 00    	jne    c001a3d2 <IDE::open(int, int, void*)+0x1a4>
c001a329:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c001a32f:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001a336:	74 33                	je     c001a36b <IDE::open(int, int, void*)+0x13d>
c001a338:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001a33e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001a342:	40                   	inc    eax
c001a343:	83 ec 0c             	sub    esp,0xc
c001a346:	0f b6 c0             	movzx  eax,al
c001a349:	50                   	push   eax
c001a34a:	55                   	push   ebp
c001a34b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a34f:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001a355:	51                   	push   ecx
c001a356:	e8 59 45 ff ff       	call   c000e8b4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001a35b:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001a360:	83 c4 1c             	add    esp,0x1c
c001a363:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001a369:	eb 0a                	jmp    c001a375 <IDE::open(int, int, void*)+0x147>
c001a36b:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001a375:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001a37c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001a383:	c1 e1 10             	shl    ecx,0x10
c001a386:	c1 e0 08             	shl    eax,0x8
c001a389:	bf f8 0c 00 00       	mov    edi,0xcf8
c001a38e:	09 c1                	or     ecx,eax
c001a390:	89 fa                	mov    edx,edi
c001a392:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001a399:	c1 e0 0b             	shl    eax,0xb
c001a39c:	09 c1                	or     ecx,eax
c001a39e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001a3a4:	89 c8                	mov    eax,ecx
c001a3a6:	ef                   	out    dx,eax
c001a3a7:	be fc 0c 00 00       	mov    esi,0xcfc
c001a3ac:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001a3b2:	89 f2                	mov    edx,esi
c001a3b4:	ee                   	out    dx,al
c001a3b5:	89 c8                	mov    eax,ecx
c001a3b7:	89 fa                	mov    edx,edi
c001a3b9:	ef                   	out    dx,eax
c001a3ba:	89 f2                	mov    edx,esi
c001a3bc:	ed                   	in     eax,dx
c001a3bd:	0f b6 c0             	movzx  eax,al
c001a3c0:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001a3c6:	74 46                	je     c001a40e <IDE::open(int, int, void*)+0x1e0>
c001a3c8:	83 ec 0c             	sub    esp,0xc
c001a3cb:	68 a8 0b 02 c0       	push   0xc0020ba8
c001a3d0:	eb 34                	jmp    c001a406 <IDE::open(int, int, void*)+0x1d8>
c001a3d2:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001a3db:	75 17                	jne    c001a3f4 <IDE::open(int, int, void*)+0x1c6>
c001a3dd:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001a3e2:	74 07                	je     c001a3eb <IDE::open(int, int, void*)+0x1bd>
c001a3e4:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001a3e9:	75 09                	jne    c001a3f4 <IDE::open(int, int, void*)+0x1c6>
c001a3eb:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001a3f2:	eb 1a                	jmp    c001a40e <IDE::open(int, int, void*)+0x1e0>
c001a3f4:	83 ec 0c             	sub    esp,0xc
c001a3f7:	68 b0 0b 02 c0       	push   0xc0020bb0
c001a3fc:	eb 08                	jmp    c001a406 <IDE::open(int, int, void*)+0x1d8>
c001a3fe:	83 ec 0c             	sub    esp,0xc
c001a401:	68 e1 0b 02 c0       	push   0xc0020be1
c001a406:	e8 90 5f ff ff       	call   c001039b <KePanic(char const*)>
c001a40b:	83 c4 10             	add    esp,0x10
c001a40e:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001a415:	79 1a                	jns    c001a431 <IDE::open(int, int, void*)+0x203>
c001a417:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001a41d:	83 e0 fc             	and    eax,0xfffffffc
c001a420:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001a427:	83 c0 08             	add    eax,0x8
c001a42a:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001a431:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001a437:	89 c2                	mov    edx,eax
c001a439:	83 e2 0f             	and    edx,0xf
c001a43c:	66 83 fa 08          	cmp    dx,0x8
c001a440:	75 0a                	jne    c001a44c <IDE::open(int, int, void*)+0x21e>
c001a442:	83 e8 02             	sub    eax,0x2
c001a445:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001a44c:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001a452:	89 c2                	mov    edx,eax
c001a454:	83 e2 0f             	and    edx,0xf
c001a457:	66 83 fa 08          	cmp    dx,0x8
c001a45b:	75 0a                	jne    c001a467 <IDE::open(int, int, void*)+0x239>
c001a45d:	83 e8 02             	sub    eax,0x2
c001a460:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001a467:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001a46e:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001a475:	89 d0                	mov    eax,edx
c001a477:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001a47a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001a47e:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001a482:	8d 4a 01             	lea    ecx,[edx+0x1]
c001a485:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001a48a:	0f b6 c9             	movzx  ecx,cl
c001a48d:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001a494:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001a497:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001a49b:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001a49f:	8d 50 02             	lea    edx,[eax+0x2]
c001a4a2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001a4a7:	0f b6 d2             	movzx  edx,dl
c001a4aa:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001a4b0:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001a4b3:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001a4b7:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001a4bb:	8d 48 03             	lea    ecx,[eax+0x3]
c001a4be:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001a4c3:	0f b6 c9             	movzx  ecx,cl
c001a4c6:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001a4cc:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001a4cf:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001a4d3:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001a4d7:	8d 50 04             	lea    edx,[eax+0x4]
c001a4da:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001a4e0:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001a4e5:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001a4ec:	66 85 f6             	test   si,si
c001a4ef:	74 5b                	je     c001a54c <IDE::open(int, int, void*)+0x31e>
c001a4f1:	0f b6 d2             	movzx  edx,dl
c001a4f4:	83 c0 05             	add    eax,0x5
c001a4f7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001a4fa:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001a4fe:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001a502:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001a508:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001a50d:	eb 3d                	jmp    c001a54c <IDE::open(int, int, void*)+0x31e>
c001a50f:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001a515:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001a51c:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001a523:	66 05 06 02          	add    ax,0x206
c001a527:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001a52e:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001a535:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001a53c:	66 05 06 02          	add    ax,0x206
c001a540:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001a547:	e9 e5 fe ff ff       	jmp    c001a431 <IDE::open(int, int, void*)+0x203>
c001a54c:	50                   	push   eax
c001a54d:	50                   	push   eax
c001a54e:	6a 00                	push   0x0
c001a550:	53                   	push   ebx
c001a551:	e8 5e fa ff ff       	call   c0019fb4 <IDE::prepareInterrupt(unsigned char)>
c001a556:	5a                   	pop    edx
c001a557:	59                   	pop    ecx
c001a558:	6a 01                	push   0x1
c001a55a:	53                   	push   ebx
c001a55b:	e8 54 fa ff ff       	call   c0019fb4 <IDE::prepareInterrupt(unsigned char)>
c001a560:	83 c4 0c             	add    esp,0xc
c001a563:	6a 00                	push   0x0
c001a565:	6a 00                	push   0x0
c001a567:	53                   	push   ebx
c001a568:	e8 7b fc ff ff       	call   c001a1e8 <IDE::enableIRQs(unsigned char, bool)>
c001a56d:	83 c4 0c             	add    esp,0xc
c001a570:	6a 00                	push   0x0
c001a572:	6a 01                	push   0x1
c001a574:	53                   	push   ebx
c001a575:	e8 6e fc ff ff       	call   c001a1e8 <IDE::enableIRQs(unsigned char, bool)>
c001a57a:	83 c4 10             	add    esp,0x10
c001a57d:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001a584:	74 34                	je     c001a5ba <IDE::open(int, int, void*)+0x38c>
c001a586:	83 ec 0c             	sub    esp,0xc
c001a589:	53                   	push   ebx
c001a58a:	6a 01                	push   0x1
c001a58c:	68 b0 a1 01 c0       	push   0xc001a1b0
c001a591:	6a 0e                	push   0xe
c001a593:	53                   	push   ebx
c001a594:	e8 5b 14 ff ff       	call   c000b9f4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001a599:	83 c4 14             	add    esp,0x14
c001a59c:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001a5a2:	53                   	push   ebx
c001a5a3:	6a 01                	push   0x1
c001a5a5:	68 cc a1 01 c0       	push   0xc001a1cc
c001a5aa:	6a 0f                	push   0xf
c001a5ac:	53                   	push   ebx
c001a5ad:	e8 42 14 ff ff       	call   c000b9f4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001a5b2:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001a5b8:	eb 38                	jmp    c001a5f2 <IDE::open(int, int, void*)+0x3c4>
c001a5ba:	83 ec 0c             	sub    esp,0xc
c001a5bd:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001a5c7:	53                   	push   ebx
c001a5c8:	6a 00                	push   0x0
c001a5ca:	68 b0 a1 01 c0       	push   0xc001a1b0
c001a5cf:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001a5d5:	53                   	push   ebx
c001a5d6:	e8 19 14 ff ff       	call   c000b9f4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001a5db:	83 c4 14             	add    esp,0x14
c001a5de:	53                   	push   ebx
c001a5df:	6a 00                	push   0x0
c001a5e1:	68 cc a1 01 c0       	push   0xc001a1cc
c001a5e6:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001a5ec:	53                   	push   ebx
c001a5ed:	e8 02 14 ff ff       	call   c000b9f4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001a5f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a5f4:	83 c4 20             	add    esp,0x20
c001a5f7:	83 ec 0c             	sub    esp,0xc
c001a5fa:	53                   	push   ebx
c001a5fb:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001a5fe:	83 c4 0c             	add    esp,0xc
c001a601:	6a 07                	push   0x7
c001a603:	6a 00                	push   0x0
c001a605:	53                   	push   ebx
c001a606:	e8 8f fa ff ff       	call   c001a09a <IDE::read(unsigned char, unsigned char)>
c001a60b:	83 c4 0c             	add    esp,0xc
c001a60e:	6a 07                	push   0x7
c001a610:	6a 01                	push   0x1
c001a612:	53                   	push   ebx
c001a613:	e8 82 fa ff ff       	call   c001a09a <IDE::read(unsigned char, unsigned char)>
c001a618:	83 c4 0c             	add    esp,0xc
c001a61b:	6a 01                	push   0x1
c001a61d:	6a 00                	push   0x0
c001a61f:	53                   	push   ebx
c001a620:	e8 c3 fb ff ff       	call   c001a1e8 <IDE::enableIRQs(unsigned char, bool)>
c001a625:	83 c4 0c             	add    esp,0xc
c001a628:	6a 01                	push   0x1
c001a62a:	6a 01                	push   0x1
c001a62c:	53                   	push   ebx
c001a62d:	e8 b6 fb ff ff       	call   c001a1e8 <IDE::enableIRQs(unsigned char, bool)>
c001a632:	83 c4 2c             	add    esp,0x2c
c001a635:	31 c0                	xor    eax,eax
c001a637:	5b                   	pop    ebx
c001a638:	5e                   	pop    esi
c001a639:	5f                   	pop    edi
c001a63a:	5d                   	pop    ebp
c001a63b:	c3                   	ret    

c001a63c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001a63c:	55                   	push   ebp
c001a63d:	57                   	push   edi
c001a63e:	56                   	push   esi
c001a63f:	53                   	push   ebx
c001a640:	83 ec 1c             	sub    esp,0x1c
c001a643:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a647:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a64b:	8d 50 f8             	lea    edx,[eax-0x8]
c001a64e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a652:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001a656:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001a65a:	80 fa 03             	cmp    dl,0x3
c001a65d:	77 5d                	ja     c001a6bc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001a65f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a663:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a667:	0f b6 db             	movzx  ebx,bl
c001a66a:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001a66d:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001a671:	83 ca 80             	or     edx,0xffffff80
c001a674:	0f b6 d2             	movzx  edx,dl
c001a677:	52                   	push   edx
c001a678:	6a 0c                	push   0xc
c001a67a:	53                   	push   ebx
c001a67b:	56                   	push   esi
c001a67c:	e8 59 f9 ff ff       	call   c0019fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a681:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001a686:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a68a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a68e:	0f b6 c0             	movzx  eax,al
c001a691:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001a695:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001a697:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001a69c:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001a6a0:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001a6a4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a6a8:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001a6b0:	83 c4 2c             	add    esp,0x2c
c001a6b3:	5b                   	pop    ebx
c001a6b4:	5e                   	pop    esi
c001a6b5:	5f                   	pop    edi
c001a6b6:	5d                   	pop    ebp
c001a6b7:	e9 1e f9 ff ff       	jmp    c0019fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a6bc:	3c 07                	cmp    al,0x7
c001a6be:	77 10                	ja     c001a6d0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001a6c0:	0f b6 db             	movzx  ebx,bl
c001a6c3:	0f b6 d0             	movzx  edx,al
c001a6c6:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001a6ce:	eb 2d                	jmp    c001a6fd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001a6d0:	3c 0d                	cmp    al,0xd
c001a6d2:	77 13                	ja     c001a6e7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001a6d4:	0f b6 db             	movzx  ebx,bl
c001a6d7:	0f b6 c0             	movzx  eax,al
c001a6da:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001a6e1:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001a6e5:	eb 16                	jmp    c001a6fd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001a6e7:	3c 15                	cmp    al,0x15
c001a6e9:	77 14                	ja     c001a6ff <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001a6eb:	0f b6 db             	movzx  ebx,bl
c001a6ee:	0f b6 c0             	movzx  eax,al
c001a6f1:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001a6f9:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001a6fd:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001a6ff:	83 c4 1c             	add    esp,0x1c
c001a702:	5b                   	pop    ebx
c001a703:	5e                   	pop    esi
c001a704:	5f                   	pop    edi
c001a705:	5d                   	pop    ebp
c001a706:	c3                   	ret    
c001a707:	90                   	nop

c001a708 <IDE::detect()>:
c001a708:	55                   	push   ebp
c001a709:	57                   	push   edi
c001a70a:	56                   	push   esi
c001a70b:	53                   	push   ebx
c001a70c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a712:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001a719:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001a720:	0f 85 97 02 00 00    	jne    c001a9bd <IDE::detect()+0x2b5>
c001a726:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001a72d:	31 f6                	xor    esi,esi
c001a72f:	31 ed                	xor    ebp,ebp
c001a731:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a739:	89 e8                	mov    eax,ebp
c001a73b:	c1 e0 06             	shl    eax,0x6
c001a73e:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001a746:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a74a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a74e:	c1 e0 04             	shl    eax,0x4
c001a751:	83 c8 a0             	or     eax,0xffffffa0
c001a754:	0f b6 c0             	movzx  eax,al
c001a757:	50                   	push   eax
c001a758:	6a 06                	push   0x6
c001a75a:	56                   	push   esi
c001a75b:	53                   	push   ebx
c001a75c:	e8 79 f8 ff ff       	call   c0019fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a761:	83 c4 0c             	add    esp,0xc
c001a764:	6a 0c                	push   0xc
c001a766:	56                   	push   esi
c001a767:	53                   	push   ebx
c001a768:	e8 2d f9 ff ff       	call   c001a09a <IDE::read(unsigned char, unsigned char)>
c001a76d:	83 c4 0c             	add    esp,0xc
c001a770:	6a 0c                	push   0xc
c001a772:	56                   	push   esi
c001a773:	53                   	push   ebx
c001a774:	e8 21 f9 ff ff       	call   c001a09a <IDE::read(unsigned char, unsigned char)>
c001a779:	83 c4 0c             	add    esp,0xc
c001a77c:	6a 0c                	push   0xc
c001a77e:	56                   	push   esi
c001a77f:	53                   	push   ebx
c001a780:	e8 15 f9 ff ff       	call   c001a09a <IDE::read(unsigned char, unsigned char)>
c001a785:	83 c4 0c             	add    esp,0xc
c001a788:	6a 0c                	push   0xc
c001a78a:	56                   	push   esi
c001a78b:	53                   	push   ebx
c001a78c:	e8 09 f9 ff ff       	call   c001a09a <IDE::read(unsigned char, unsigned char)>
c001a791:	68 ec 00 00 00       	push   0xec
c001a796:	6a 07                	push   0x7
c001a798:	56                   	push   esi
c001a799:	53                   	push   ebx
c001a79a:	e8 3b f8 ff ff       	call   c0019fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a79f:	83 c4 1c             	add    esp,0x1c
c001a7a2:	6a 0c                	push   0xc
c001a7a4:	56                   	push   esi
c001a7a5:	53                   	push   ebx
c001a7a6:	e8 ef f8 ff ff       	call   c001a09a <IDE::read(unsigned char, unsigned char)>
c001a7ab:	83 c4 0c             	add    esp,0xc
c001a7ae:	6a 0c                	push   0xc
c001a7b0:	56                   	push   esi
c001a7b1:	53                   	push   ebx
c001a7b2:	e8 e3 f8 ff ff       	call   c001a09a <IDE::read(unsigned char, unsigned char)>
c001a7b7:	83 c4 0c             	add    esp,0xc
c001a7ba:	6a 0c                	push   0xc
c001a7bc:	56                   	push   esi
c001a7bd:	53                   	push   ebx
c001a7be:	e8 d7 f8 ff ff       	call   c001a09a <IDE::read(unsigned char, unsigned char)>
c001a7c3:	83 c4 0c             	add    esp,0xc
c001a7c6:	6a 0c                	push   0xc
c001a7c8:	56                   	push   esi
c001a7c9:	53                   	push   ebx
c001a7ca:	e8 cb f8 ff ff       	call   c001a09a <IDE::read(unsigned char, unsigned char)>
c001a7cf:	83 c4 0c             	add    esp,0xc
c001a7d2:	6a 0c                	push   0xc
c001a7d4:	56                   	push   esi
c001a7d5:	53                   	push   ebx
c001a7d6:	e8 bf f8 ff ff       	call   c001a09a <IDE::read(unsigned char, unsigned char)>
c001a7db:	83 c4 10             	add    esp,0x10
c001a7de:	84 c0                	test   al,al
c001a7e0:	0f 84 5f 01 00 00    	je     c001a945 <IDE::detect()+0x23d>
c001a7e6:	31 ff                	xor    edi,edi
c001a7e8:	50                   	push   eax
c001a7e9:	6a 0c                	push   0xc
c001a7eb:	56                   	push   esi
c001a7ec:	53                   	push   ebx
c001a7ed:	e8 a8 f8 ff ff       	call   c001a09a <IDE::read(unsigned char, unsigned char)>
c001a7f2:	83 c4 10             	add    esp,0x10
c001a7f5:	a8 01                	test   al,0x1
c001a7f7:	0f 85 69 01 00 00    	jne    c001a966 <IDE::detect()+0x25e>
c001a7fd:	84 c0                	test   al,al
c001a7ff:	78 04                	js     c001a805 <IDE::detect()+0xfd>
c001a801:	a8 08                	test   al,0x8
c001a803:	75 23                	jne    c001a828 <IDE::detect()+0x120>
c001a805:	47                   	inc    edi
c001a806:	81 ff 17 01 00 00    	cmp    edi,0x117
c001a80c:	7e da                	jle    c001a7e8 <IDE::detect()+0xe0>
c001a80e:	83 ec 0c             	sub    esp,0xc
c001a811:	6a 32                	push   0x32
c001a813:	e8 e0 a0 ff ff       	call   c00148f8 <milliTenthSleep(unsigned int)>
c001a818:	83 c4 10             	add    esp,0x10
c001a81b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001a821:	75 c5                	jne    c001a7e8 <IDE::detect()+0xe0>
c001a823:	e9 3e 01 00 00       	jmp    c001a966 <IDE::detect()+0x25e>
c001a828:	31 c9                	xor    ecx,ecx
c001a82a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001a82e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001a832:	83 ec 0c             	sub    esp,0xc
c001a835:	68 80 00 00 00       	push   0x80
c001a83a:	57                   	push   edi
c001a83b:	6a 00                	push   0x0
c001a83d:	56                   	push   esi
c001a83e:	53                   	push   ebx
c001a83f:	e8 f8 fd ff ff       	call   c001a63c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001a844:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001a849:	89 e8                	mov    eax,ebp
c001a84b:	89 d1                	mov    ecx,edx
c001a84d:	c1 e0 06             	shl    eax,0x6
c001a850:	01 d8                	add    eax,ebx
c001a852:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001a859:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001a860:	89 f2                	mov    edx,esi
c001a862:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001a868:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001a86c:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001a872:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a876:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001a87d:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001a885:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001a88c:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001a894:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001a89a:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001a8a1:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001a8a7:	8d 54 24 58          	lea    edx,[esp+0x58]
c001a8ab:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001a8af:	83 c4 20             	add    esp,0x20
c001a8b2:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001a8b5:	83 c0 02             	add    eax,0x2
c001a8b8:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001a8be:	83 c7 02             	add    edi,0x2
c001a8c1:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001a8c4:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001a8ca:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001a8ce:	75 e2                	jne    c001a8b2 <IDE::detect()+0x1aa>
c001a8d0:	89 e8                	mov    eax,ebp
c001a8d2:	c1 e0 06             	shl    eax,0x6
c001a8d5:	01 d8                	add    eax,ebx
c001a8d7:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001a8dd:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001a8e4:	66 c1 ea 09          	shr    dx,0x9
c001a8e8:	83 e2 01             	and    edx,0x1
c001a8eb:	84 c9                	test   cl,cl
c001a8ed:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001a8f3:	75 22                	jne    c001a917 <IDE::detect()+0x20f>
c001a8f5:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001a8fc:	74 46                	je     c001a944 <IDE::detect()+0x23c>
c001a8fe:	83 ec 0c             	sub    esp,0xc
c001a901:	68 7c 01 00 00       	push   0x17c
c001a906:	e8 6a cf fe ff       	call   c0007875 <malloc>
c001a90b:	89 c7                	mov    edi,eax
c001a90d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a910:	e8 11 05 00 00       	call   c001ae26 <ATA::ATA()>
c001a915:	eb 17                	jmp    c001a92e <IDE::detect()+0x226>
c001a917:	83 ec 0c             	sub    esp,0xc
c001a91a:	68 84 01 00 00       	push   0x184
c001a91f:	e8 51 cf fe ff       	call   c0007875 <malloc>
c001a924:	89 c7                	mov    edi,eax
c001a926:	89 04 24             	mov    DWORD PTR [esp],eax
c001a929:	e8 1e 0e 00 00       	call   c001b74c <ATAPI::ATAPI()>
c001a92e:	5a                   	pop    edx
c001a92f:	59                   	pop    ecx
c001a930:	57                   	push   edi
c001a931:	53                   	push   ebx
c001a932:	e8 11 11 ff ff       	call   c000ba48 <Device::addChild(Device*)>
c001a937:	8b 07                	mov    eax,DWORD PTR [edi]
c001a939:	53                   	push   ebx
c001a93a:	55                   	push   ebp
c001a93b:	6a 00                	push   0x0
c001a93d:	57                   	push   edi
c001a93e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a941:	83 c4 20             	add    esp,0x20
c001a944:	45                   	inc    ebp
c001a945:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001a94a:	74 0d                	je     c001a959 <IDE::detect()+0x251>
c001a94c:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001a954:	e9 e0 fd ff ff       	jmp    c001a739 <IDE::detect()+0x31>
c001a959:	4e                   	dec    esi
c001a95a:	74 61                	je     c001a9bd <IDE::detect()+0x2b5>
c001a95c:	be 01 00 00 00       	mov    esi,0x1
c001a961:	e9 cb fd ff ff       	jmp    c001a731 <IDE::detect()+0x29>
c001a966:	50                   	push   eax
c001a967:	6a 04                	push   0x4
c001a969:	56                   	push   esi
c001a96a:	53                   	push   ebx
c001a96b:	e8 2a f7 ff ff       	call   c001a09a <IDE::read(unsigned char, unsigned char)>
c001a970:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a974:	83 c4 0c             	add    esp,0xc
c001a977:	6a 05                	push   0x5
c001a979:	56                   	push   esi
c001a97a:	53                   	push   ebx
c001a97b:	e8 1a f7 ff ff       	call   c001a09a <IDE::read(unsigned char, unsigned char)>
c001a980:	83 c4 10             	add    esp,0x10
c001a983:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001a987:	80 fa 14             	cmp    dl,0x14
c001a98a:	75 04                	jne    c001a990 <IDE::detect()+0x288>
c001a98c:	3c eb                	cmp    al,0xeb
c001a98e:	eb 07                	jmp    c001a997 <IDE::detect()+0x28f>
c001a990:	3c 96                	cmp    al,0x96
c001a992:	75 b1                	jne    c001a945 <IDE::detect()+0x23d>
c001a994:	80 fa 69             	cmp    dl,0x69
c001a997:	75 ac                	jne    c001a945 <IDE::detect()+0x23d>
c001a999:	68 a1 00 00 00       	push   0xa1
c001a99e:	6a 07                	push   0x7
c001a9a0:	56                   	push   esi
c001a9a1:	53                   	push   ebx
c001a9a2:	e8 33 f6 ff ff       	call   c0019fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a9a7:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001a9ae:	e8 45 9f ff ff       	call   c00148f8 <milliTenthSleep(unsigned int)>
c001a9b3:	83 c4 10             	add    esp,0x10
c001a9b6:	b1 01                	mov    cl,0x1
c001a9b8:	e9 6d fe ff ff       	jmp    c001a82a <IDE::detect()+0x122>
c001a9bd:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a9c3:	5b                   	pop    ebx
c001a9c4:	5e                   	pop    esi
c001a9c5:	5f                   	pop    edi
c001a9c6:	5d                   	pop    ebp
c001a9c7:	c3                   	ret    

c001a9c8 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001a9c8:	55                   	push   ebp
c001a9c9:	57                   	push   edi
c001a9ca:	56                   	push   esi
c001a9cb:	53                   	push   ebx
c001a9cc:	83 ec 1c             	sub    esp,0x1c
c001a9cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a9d3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a9d7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a9db:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001a9df:	88 c3                	mov    bl,al
c001a9e1:	84 c0                	test   al,al
c001a9e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a9e7:	0f 84 81 00 00 00    	je     c001aa6e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001a9ed:	83 ec 0c             	sub    esp,0xc
c001a9f0:	68 0b 0c 02 c0       	push   0xc0020c0b
c001a9f5:	e8 10 fc fe ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c001a9fa:	83 c4 10             	add    esp,0x10
c001a9fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aa01:	3c 01                	cmp    al,0x1
c001aa03:	74 63                	je     c001aa68 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001aa05:	3c 02                	cmp    al,0x2
c001aa07:	75 53                	jne    c001aa5c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001aa09:	01 f6                	add    esi,esi
c001aa0b:	09 ee                	or     esi,ebp
c001aa0d:	50                   	push   eax
c001aa0e:	89 f0                	mov    eax,esi
c001aa10:	6a 01                	push   0x1
c001aa12:	0f b6 f0             	movzx  esi,al
c001aa15:	c1 e6 06             	shl    esi,0x6
c001aa18:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001aa20:	50                   	push   eax
c001aa21:	57                   	push   edi
c001aa22:	e8 73 f6 ff ff       	call   c001a09a <IDE::read(unsigned char, unsigned char)>
c001aa27:	83 c4 10             	add    esp,0x10
c001aa2a:	a8 01                	test   al,0x1
c001aa2c:	74 02                	je     c001aa30 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001aa2e:	b3 07                	mov    bl,0x7
c001aa30:	a8 02                	test   al,0x2
c001aa32:	74 02                	je     c001aa36 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001aa34:	b3 03                	mov    bl,0x3
c001aa36:	a8 04                	test   al,0x4
c001aa38:	74 02                	je     c001aa3c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001aa3a:	b3 14                	mov    bl,0x14
c001aa3c:	a8 08                	test   al,0x8
c001aa3e:	74 02                	je     c001aa42 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001aa40:	b3 03                	mov    bl,0x3
c001aa42:	a8 10                	test   al,0x10
c001aa44:	74 02                	je     c001aa48 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001aa46:	b3 15                	mov    bl,0x15
c001aa48:	a8 20                	test   al,0x20
c001aa4a:	74 02                	je     c001aa4e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001aa4c:	b3 03                	mov    bl,0x3
c001aa4e:	a8 40                	test   al,0x40
c001aa50:	74 02                	je     c001aa54 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001aa52:	b3 16                	mov    bl,0x16
c001aa54:	84 c0                	test   al,al
c001aa56:	79 16                	jns    c001aa6e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001aa58:	b3 0d                	mov    bl,0xd
c001aa5a:	eb 12                	jmp    c001aa6e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001aa5c:	3c 03                	cmp    al,0x3
c001aa5e:	74 0c                	je     c001aa6c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001aa60:	3c 04                	cmp    al,0x4
c001aa62:	75 0a                	jne    c001aa6e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001aa64:	b3 08                	mov    bl,0x8
c001aa66:	eb 06                	jmp    c001aa6e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001aa68:	b3 13                	mov    bl,0x13
c001aa6a:	eb 02                	jmp    c001aa6e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001aa6c:	b3 17                	mov    bl,0x17
c001aa6e:	83 c4 1c             	add    esp,0x1c
c001aa71:	88 d8                	mov    al,bl
c001aa73:	5b                   	pop    ebx
c001aa74:	5e                   	pop    esi
c001aa75:	5f                   	pop    edi
c001aa76:	5d                   	pop    ebp
c001aa77:	c3                   	ret    

c001aa78 <IDE::polling(unsigned char, unsigned int)>:
c001aa78:	55                   	push   ebp
c001aa79:	bd 04 00 00 00       	mov    ebp,0x4
c001aa7e:	57                   	push   edi
c001aa7f:	56                   	push   esi
c001aa80:	53                   	push   ebx
c001aa81:	83 ec 0c             	sub    esp,0xc
c001aa84:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001aa88:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001aa8c:	0f b6 f3             	movzx  esi,bl
c001aa8f:	52                   	push   edx
c001aa90:	6a 0c                	push   0xc
c001aa92:	56                   	push   esi
c001aa93:	57                   	push   edi
c001aa94:	e8 01 f6 ff ff       	call   c001a09a <IDE::read(unsigned char, unsigned char)>
c001aa99:	83 c4 10             	add    esp,0x10
c001aa9c:	4d                   	dec    ebp
c001aa9d:	75 ed                	jne    c001aa8c <IDE::polling(unsigned char, unsigned int)+0x14>
c001aa9f:	bb a0 86 01 00       	mov    ebx,0x186a0
c001aaa4:	50                   	push   eax
c001aaa5:	6a 0c                	push   0xc
c001aaa7:	56                   	push   esi
c001aaa8:	57                   	push   edi
c001aaa9:	e8 ec f5 ff ff       	call   c001a09a <IDE::read(unsigned char, unsigned char)>
c001aaae:	83 c4 10             	add    esp,0x10
c001aab1:	a8 01                	test   al,0x1
c001aab3:	75 17                	jne    c001aacc <IDE::polling(unsigned char, unsigned int)+0x54>
c001aab5:	a8 20                	test   al,0x20
c001aab7:	75 0f                	jne    c001aac8 <IDE::polling(unsigned char, unsigned int)+0x50>
c001aab9:	4b                   	dec    ebx
c001aaba:	74 10                	je     c001aacc <IDE::polling(unsigned char, unsigned int)+0x54>
c001aabc:	84 c0                	test   al,al
c001aabe:	78 e4                	js     c001aaa4 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001aac0:	a8 08                	test   al,0x8
c001aac2:	74 e0                	je     c001aaa4 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001aac4:	31 c0                	xor    eax,eax
c001aac6:	eb 06                	jmp    c001aace <IDE::polling(unsigned char, unsigned int)+0x56>
c001aac8:	b0 01                	mov    al,0x1
c001aaca:	eb 02                	jmp    c001aace <IDE::polling(unsigned char, unsigned int)+0x56>
c001aacc:	b0 02                	mov    al,0x2
c001aace:	83 c4 0c             	add    esp,0xc
c001aad1:	5b                   	pop    ebx
c001aad2:	5e                   	pop    esi
c001aad3:	5f                   	pop    edi
c001aad4:	5d                   	pop    ebp
c001aad5:	c3                   	ret    

c001aad6 <SATABus::close(int, int, void*)>:
c001aad6:	31 c0                	xor    eax,eax
c001aad8:	c3                   	ret    
c001aad9:	90                   	nop

c001aada <SATABus::detect()>:
c001aada:	c3                   	ret    
c001aadb:	90                   	nop

c001aadc <SATABus::SATABus()>:
c001aadc:	83 ec 0c             	sub    esp,0xc
c001aadf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aae3:	83 ec 08             	sub    esp,0x8
c001aae6:	68 44 0c 02 c0       	push   0xc0020c44
c001aaeb:	50                   	push   eax
c001aaec:	e8 9b 12 ff ff       	call   c000bd8c <HardDiskController::HardDiskController(char const*)>
c001aaf1:	83 c4 10             	add    esp,0x10
c001aaf4:	ba 70 0c 02 c0       	mov    edx,0xc0020c70
c001aaf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aafd:	89 10                	mov    DWORD PTR [eax],edx
c001aaff:	83 ec 0c             	sub    esp,0xc
c001ab02:	6a 50                	push   0x50
c001ab04:	e8 06 d1 fe ff       	call   c0007c0f <Phys::allocateContiguousPages(int)>
c001ab09:	83 c4 10             	add    esp,0x10
c001ab0c:	89 c2                	mov    edx,eax
c001ab0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab12:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ab18:	83 ec 0c             	sub    esp,0xc
c001ab1b:	6a 50                	push   0x50
c001ab1d:	e8 2b e8 fe ff       	call   c000934d <Virt::allocateKernelVirtualPages(int)>
c001ab22:	83 c4 10             	add    esp,0x10
c001ab25:	89 c2                	mov    edx,eax
c001ab27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab2b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ab31:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c001ab36:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ab3a:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001ab40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ab44:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ab4a:	83 ec 0c             	sub    esp,0xc
c001ab4d:	6a 03                	push   0x3
c001ab4f:	6a 50                	push   0x50
c001ab51:	51                   	push   ecx
c001ab52:	52                   	push   edx
c001ab53:	50                   	push   eax
c001ab54:	e8 b1 f1 fe ff       	call   c0009d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ab59:	83 c4 20             	add    esp,0x20
c001ab5c:	90                   	nop
c001ab5d:	83 c4 0c             	add    esp,0xc
c001ab60:	c3                   	ret    
c001ab61:	90                   	nop

c001ab62 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001ab62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ab66:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001ab69:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001ab6c:	09 c2                	or     edx,eax
c001ab6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab72:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ab78:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ab7a:	31 c0                	xor    eax,eax
c001ab7c:	c1 e9 08             	shr    ecx,0x8
c001ab7f:	83 e1 0f             	and    ecx,0xf
c001ab82:	39 c8                	cmp    eax,ecx
c001ab84:	74 0a                	je     c001ab90 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001ab86:	f6 c2 01             	test   dl,0x1
c001ab89:	74 08                	je     c001ab93 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001ab8b:	d1 ea                	shr    edx,1
c001ab8d:	40                   	inc    eax
c001ab8e:	eb f2                	jmp    c001ab82 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001ab90:	83 c8 ff             	or     eax,0xffffffff
c001ab93:	c3                   	ret    

c001ab94 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001ab94:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ab98:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001ab9b:	89 c2                	mov    edx,eax
c001ab9d:	c1 ea 08             	shr    edx,0x8
c001aba0:	83 e2 0f             	and    edx,0xf
c001aba3:	fe ca                	dec    dl
c001aba5:	75 31                	jne    c001abd8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001aba7:	83 e0 0f             	and    eax,0xf
c001abaa:	3c 03                	cmp    al,0x3
c001abac:	75 2a                	jne    c001abd8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001abae:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001abb1:	b8 02 00 00 00       	mov    eax,0x2
c001abb6:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001abbc:	74 1c                	je     c001abda <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001abbe:	b8 04 00 00 00       	mov    eax,0x4
c001abc3:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001abc9:	74 0f                	je     c001abda <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001abcb:	31 c0                	xor    eax,eax
c001abcd:	83 fa 03             	cmp    edx,0x3
c001abd0:	0f 94 c0             	sete   al
c001abd3:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001abd7:	c3                   	ret    
c001abd8:	31 c0                	xor    eax,eax
c001abda:	c3                   	ret    
c001abdb:	90                   	nop

c001abdc <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001abdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001abe0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001abe3:	0f ba e2 0f          	bt     edx,0xf
c001abe7:	72 f7                	jb     c001abe0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001abe9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001abec:	83 ca 10             	or     edx,0x10
c001abef:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001abf2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001abf5:	83 ca 01             	or     edx,0x1
c001abf8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001abfb:	c3                   	ret    

c001abfc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001abfc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac00:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ac03:	83 e2 fe             	and    edx,0xfffffffe
c001ac06:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ac09:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ac0c:	83 e2 ef             	and    edx,0xffffffef
c001ac0f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ac12:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ac15:	0f ba e2 0e          	bt     edx,0xe
c001ac19:	72 f7                	jb     c001ac12 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ac1b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ac1e:	0f ba e2 0f          	bt     edx,0xf
c001ac22:	72 ee                	jb     c001ac12 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ac24:	c3                   	ret    
c001ac25:	90                   	nop

c001ac26 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001ac26:	55                   	push   ebp
c001ac27:	57                   	push   edi
c001ac28:	56                   	push   esi
c001ac29:	53                   	push   ebx
c001ac2a:	83 ec 1c             	sub    esp,0x1c
c001ac2d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ac31:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ac35:	53                   	push   ebx
c001ac36:	56                   	push   esi
c001ac37:	e8 c0 ff ff ff       	call   c001abfc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001ac3c:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001ac40:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001ac46:	83 ec 0c             	sub    esp,0xc
c001ac49:	c1 e5 0a             	shl    ebp,0xa
c001ac4c:	01 e8                	add    eax,ebp
c001ac4e:	89 03                	mov    DWORD PTR [ebx],eax
c001ac50:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac52:	68 00 04 00 00       	push   0x400
c001ac57:	6a 00                	push   0x0
c001ac59:	50                   	push   eax
c001ac5a:	e8 71 58 fe ff       	call   c00004d0 <memset>
c001ac5f:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001ac65:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001ac69:	01 e8                	add    eax,ebp
c001ac6b:	83 c4 1c             	add    esp,0x1c
c001ac6e:	89 03                	mov    DWORD PTR [ebx],eax
c001ac70:	c1 e2 08             	shl    edx,0x8
c001ac73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ac7a:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001ac80:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001ac86:	01 f8                	add    eax,edi
c001ac88:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ac8b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001ac8e:	68 00 01 00 00       	push   0x100
c001ac93:	6a 00                	push   0x0
c001ac95:	50                   	push   eax
c001ac96:	e8 35 58 fe ff       	call   c00004d0 <memset>
c001ac9b:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001aca1:	01 fa                	add    edx,edi
c001aca3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001aca7:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001acaa:	c1 e7 0d             	shl    edi,0xd
c001acad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001acb4:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001acba:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001acc0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001acc4:	31 ff                	xor    edi,edi
c001acc6:	83 c4 10             	add    esp,0x10
c001acc9:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001accf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acd3:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001acd9:	83 c5 20             	add    ebp,0x20
c001acdc:	01 f8                	add    eax,edi
c001acde:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ace1:	52                   	push   edx
c001ace2:	68 00 01 00 00       	push   0x100
c001ace7:	6a 00                	push   0x0
c001ace9:	50                   	push   eax
c001acea:	e8 e1 57 fe ff       	call   c00004d0 <memset>
c001acef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001acf3:	83 c4 10             	add    esp,0x10
c001acf6:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001acfc:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001ad03:	01 f8                	add    eax,edi
c001ad05:	81 c7 00 01 00 00    	add    edi,0x100
c001ad0b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ad0e:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001ad14:	75 b3                	jne    c001acc9 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001ad16:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001ad1d:	50                   	push   eax
c001ad1e:	50                   	push   eax
c001ad1f:	53                   	push   ebx
c001ad20:	56                   	push   esi
c001ad21:	e8 b6 fe ff ff       	call   c001abdc <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001ad26:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001ad2d:	83 c4 2c             	add    esp,0x2c
c001ad30:	5b                   	pop    ebx
c001ad31:	5e                   	pop    esi
c001ad32:	5f                   	pop    edi
c001ad33:	5d                   	pop    ebp
c001ad34:	c3                   	ret    
c001ad35:	90                   	nop

c001ad36 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001ad36:	55                   	push   ebp
c001ad37:	57                   	push   edi
c001ad38:	56                   	push   esi
c001ad39:	53                   	push   ebx
c001ad3a:	31 db                	xor    ebx,ebx
c001ad3c:	83 ec 0c             	sub    esp,0xc
c001ad3f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ad43:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ad47:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001ad4a:	f7 c7 01 00 00 00    	test   edi,0x1
c001ad50:	74 7a                	je     c001adcc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001ad52:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ad56:	89 d8                	mov    eax,ebx
c001ad58:	c1 e0 07             	shl    eax,0x7
c001ad5b:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001ad62:	55                   	push   ebp
c001ad63:	56                   	push   esi
c001ad64:	e8 2b fe ff ff       	call   c001ab94 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001ad69:	5a                   	pop    edx
c001ad6a:	83 f8 01             	cmp    eax,0x1
c001ad6d:	59                   	pop    ecx
c001ad6e:	75 21                	jne    c001ad91 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001ad70:	50                   	push   eax
c001ad71:	53                   	push   ebx
c001ad72:	55                   	push   ebp
c001ad73:	56                   	push   esi
c001ad74:	e8 ad fe ff ff       	call   c001ac26 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ad79:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001ad80:	e8 f0 ca fe ff       	call   c0007875 <malloc>
c001ad85:	89 c5                	mov    ebp,eax
c001ad87:	89 04 24             	mov    DWORD PTR [esp],eax
c001ad8a:	e8 71 10 00 00       	call   c001be00 <SATA::SATA()>
c001ad8f:	eb 24                	jmp    c001adb5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001ad91:	83 f8 04             	cmp    eax,0x4
c001ad94:	75 36                	jne    c001adcc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001ad96:	51                   	push   ecx
c001ad97:	53                   	push   ebx
c001ad98:	55                   	push   ebp
c001ad99:	56                   	push   esi
c001ad9a:	e8 87 fe ff ff       	call   c001ac26 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ad9f:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001ada6:	e8 ca ca fe ff       	call   c0007875 <malloc>
c001adab:	89 c5                	mov    ebp,eax
c001adad:	89 04 24             	mov    DWORD PTR [esp],eax
c001adb0:	e8 a5 17 00 00       	call   c001c55a <SATAPI::SATAPI()>
c001adb5:	58                   	pop    eax
c001adb6:	5a                   	pop    edx
c001adb7:	55                   	push   ebp
c001adb8:	56                   	push   esi
c001adb9:	e8 8a 0c ff ff       	call   c000ba48 <Device::addChild(Device*)>
c001adbe:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001adc1:	56                   	push   esi
c001adc2:	6a 00                	push   0x0
c001adc4:	53                   	push   ebx
c001adc5:	55                   	push   ebp
c001adc6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001adc9:	83 c4 20             	add    esp,0x20
c001adcc:	d1 ef                	shr    edi,1
c001adce:	43                   	inc    ebx
c001adcf:	83 fb 20             	cmp    ebx,0x20
c001add2:	0f 85 72 ff ff ff    	jne    c001ad4a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001add8:	83 c4 0c             	add    esp,0xc
c001addb:	5b                   	pop    ebx
c001addc:	5e                   	pop    esi
c001addd:	5f                   	pop    edi
c001adde:	5d                   	pop    ebp
c001addf:	c3                   	ret    

c001ade0 <SATABus::open(int, int, void*)>:
c001ade0:	83 ec 14             	sub    esp,0x14
c001ade3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ade7:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001aded:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001adf3:	52                   	push   edx
c001adf4:	50                   	push   eax
c001adf5:	e8 3c ff ff ff       	call   c001ad36 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001adfa:	31 c0                	xor    eax,eax
c001adfc:	83 c4 1c             	add    esp,0x1c
c001adff:	c3                   	ret    

c001ae00 <ATA::close(int, int, void*)>:
c001ae00:	83 ec 0c             	sub    esp,0xc
c001ae03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae07:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ae0d:	85 c0                	test   eax,eax
c001ae0f:	74 0c                	je     c001ae1d <ATA::close(int, int, void*)+0x1d>
c001ae11:	83 ec 0c             	sub    esp,0xc
c001ae14:	8b 10                	mov    edx,DWORD PTR [eax]
c001ae16:	50                   	push   eax
c001ae17:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ae1a:	83 c4 10             	add    esp,0x10
c001ae1d:	31 c0                	xor    eax,eax
c001ae1f:	83 c4 0c             	add    esp,0xc
c001ae22:	c3                   	ret    
c001ae23:	90                   	nop

c001ae24 <ATA::powerSaving(PowerSavingLevel)>:
c001ae24:	c3                   	ret    
c001ae25:	90                   	nop

c001ae26 <ATA::ATA()>:
c001ae26:	83 ec 0c             	sub    esp,0xc
c001ae29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae2d:	83 ec 04             	sub    esp,0x4
c001ae30:	68 00 02 00 00       	push   0x200
c001ae35:	68 3d 0d 02 c0       	push   0xc0020d3d
c001ae3a:	50                   	push   eax
c001ae3b:	e8 d6 0f ff ff       	call   c000be16 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ae40:	83 c4 10             	add    esp,0x10
c001ae43:	ba b0 0c 02 c0       	mov    edx,0xc0020cb0
c001ae48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae4c:	89 10                	mov    DWORD PTR [eax],edx
c001ae4e:	90                   	nop
c001ae4f:	83 c4 0c             	add    esp,0xc
c001ae52:	c3                   	ret    
c001ae53:	90                   	nop

c001ae54 <ATA::flush(bool)>:
c001ae54:	53                   	push   ebx
c001ae55:	83 ec 08             	sub    esp,0x8
c001ae58:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001ae5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ae61:	19 c0                	sbb    eax,eax
c001ae63:	83 e0 fd             	and    eax,0xfffffffd
c001ae66:	05 ea 00 00 00       	add    eax,0xea
c001ae6b:	50                   	push   eax
c001ae6c:	6a 07                	push   0x7
c001ae6e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ae75:	50                   	push   eax
c001ae76:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ae7c:	e8 59 f1 ff ff       	call   c0019fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ae81:	83 c4 0c             	add    esp,0xc
c001ae84:	6a 00                	push   0x0
c001ae86:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ae8d:	50                   	push   eax
c001ae8e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ae94:	e8 df fb ff ff       	call   c001aa78 <IDE::polling(unsigned char, unsigned int)>
c001ae99:	83 c4 18             	add    esp,0x18
c001ae9c:	5b                   	pop    ebx
c001ae9d:	c3                   	ret    

c001ae9e <ATA::readyForCommand()>:
c001ae9e:	56                   	push   esi
c001ae9f:	53                   	push   ebx
c001aea0:	53                   	push   ebx
c001aea1:	31 db                	xor    ebx,ebx
c001aea3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aea7:	51                   	push   ecx
c001aea8:	6a 0c                	push   0xc
c001aeaa:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001aeb1:	50                   	push   eax
c001aeb2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001aeb8:	e8 dd f1 ff ff       	call   c001a09a <IDE::read(unsigned char, unsigned char)>
c001aebd:	83 c4 10             	add    esp,0x10
c001aec0:	a8 88                	test   al,0x88
c001aec2:	74 1f                	je     c001aee3 <ATA::readyForCommand()+0x45>
c001aec4:	43                   	inc    ebx
c001aec5:	83 fb 63             	cmp    ebx,0x63
c001aec8:	7e dd                	jle    c001aea7 <ATA::readyForCommand()+0x9>
c001aeca:	83 ec 0c             	sub    esp,0xc
c001aecd:	6a 0a                	push   0xa
c001aecf:	e8 24 9a ff ff       	call   c00148f8 <milliTenthSleep(unsigned int)>
c001aed4:	83 c4 10             	add    esp,0x10
c001aed7:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001aedd:	75 c8                	jne    c001aea7 <ATA::readyForCommand()+0x9>
c001aedf:	31 c0                	xor    eax,eax
c001aee1:	eb 02                	jmp    c001aee5 <ATA::readyForCommand()+0x47>
c001aee3:	b0 01                	mov    al,0x1
c001aee5:	5a                   	pop    edx
c001aee6:	5b                   	pop    ebx
c001aee7:	5e                   	pop    esi
c001aee8:	c3                   	ret    
c001aee9:	90                   	nop

c001aeea <ATA::access(unsigned long long, int, void*, bool)>:
c001aeea:	55                   	push   ebp
c001aeeb:	57                   	push   edi
c001aeec:	56                   	push   esi
c001aeed:	53                   	push   ebx
c001aeee:	83 ec 2c             	sub    esp,0x2c
c001aef1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001aef5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001aef9:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001aefd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001af01:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001af05:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001af09:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001af0d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001af13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af17:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001af1d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001af21:	c1 e0 06             	shl    eax,0x6
c001af24:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001af2c:	74 5d                	je     c001af8b <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001af2e:	89 fa                	mov    edx,edi
c001af30:	89 f0                	mov    eax,esi
c001af32:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001af36:	c1 ea 1c             	shr    edx,0x1c
c001af39:	89 d1                	mov    ecx,edx
c001af3b:	09 c1                	or     ecx,eax
c001af3d:	74 25                	je     c001af64 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001af3f:	31 ed                	xor    ebp,ebp
c001af41:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001af48:	89 fa                	mov    edx,edi
c001af4a:	89 f0                	mov    eax,esi
c001af4c:	0f ad d0             	shrd   eax,edx,cl
c001af4f:	d3 ea                	shr    edx,cl
c001af51:	f6 c1 20             	test   cl,0x20
c001af54:	74 02                	je     c001af58 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001af56:	89 d0                	mov    eax,edx
c001af58:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001af5c:	45                   	inc    ebp
c001af5d:	83 fd 06             	cmp    ebp,0x6
c001af60:	75 df                	jne    c001af41 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001af62:	eb 76                	jmp    c001afda <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001af64:	89 f0                	mov    eax,esi
c001af66:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001af6b:	89 fa                	mov    edx,edi
c001af6d:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001af74:	0f ac d0 10          	shrd   eax,edx,0x10
c001af78:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001af7d:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001af81:	c1 ee 18             	shr    esi,0x18
c001af84:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001af89:	eb 56                	jmp    c001afe1 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001af8b:	6a 00                	push   0x0
c001af8d:	6a 3f                	push   0x3f
c001af8f:	57                   	push   edi
c001af90:	56                   	push   esi
c001af91:	e8 ba 29 00 00       	call   c001d950 <__umoddi3>
c001af96:	83 c4 10             	add    esp,0x10
c001af99:	40                   	inc    eax
c001af9a:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001af9e:	6a 00                	push   0x0
c001afa0:	68 f0 03 00 00       	push   0x3f0
c001afa5:	57                   	push   edi
c001afa6:	56                   	push   esi
c001afa7:	e8 a4 28 00 00       	call   c001d850 <__udivdi3>
c001afac:	83 c4 10             	add    esp,0x10
c001afaf:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001afb4:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001afbb:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001afc0:	6a 00                	push   0x0
c001afc2:	6a 3f                	push   0x3f
c001afc4:	57                   	push   edi
c001afc5:	56                   	push   esi
c001afc6:	e8 85 28 00 00       	call   c001d850 <__udivdi3>
c001afcb:	83 c4 10             	add    esp,0x10
c001afce:	89 c6                	mov    esi,eax
c001afd0:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001afd5:	83 e6 0f             	and    esi,0xf
c001afd8:	eb 07                	jmp    c001afe1 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001afda:	31 f6                	xor    esi,esi
c001afdc:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001afe1:	bf 01 00 00 00       	mov    edi,0x1
c001afe6:	50                   	push   eax
c001afe7:	6a 00                	push   0x0
c001afe9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001aff0:	50                   	push   eax
c001aff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001aff5:	e8 ee f1 ff ff       	call   c001a1e8 <IDE::enableIRQs(unsigned char, bool)>
c001affa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001affd:	e8 9c fe ff ff       	call   c001ae9e <ATA::readyForCommand()>
c001b002:	83 c4 10             	add    esp,0x10
c001b005:	84 c0                	test   al,al
c001b007:	0f 84 4e 02 00 00    	je     c001b25b <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001b00d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001b013:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001b019:	c1 e0 04             	shl    eax,0x4
c001b01c:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001b023:	09 c6                	or     esi,eax
c001b025:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001b02a:	75 05                	jne    c001b031 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001b02c:	83 ce a0             	or     esi,0xffffffa0
c001b02f:	eb 03                	jmp    c001b034 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001b031:	83 ce e0             	or     esi,0xffffffe0
c001b034:	89 f0                	mov    eax,esi
c001b036:	0f b6 f0             	movzx  esi,al
c001b039:	56                   	push   esi
c001b03a:	6a 06                	push   0x6
c001b03c:	51                   	push   ecx
c001b03d:	52                   	push   edx
c001b03e:	e8 97 ef ff ff       	call   c0019fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b043:	83 c4 10             	add    esp,0x10
c001b046:	6a 00                	push   0x0
c001b048:	6a 01                	push   0x1
c001b04a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b051:	50                   	push   eax
c001b052:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b058:	e8 7d ef ff ff       	call   c0019fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b05d:	83 c4 10             	add    esp,0x10
c001b060:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001b065:	75 6e                	jne    c001b0d5 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001b067:	6a 00                	push   0x0
c001b069:	6a 08                	push   0x8
c001b06b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b072:	50                   	push   eax
c001b073:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b079:	e8 5c ef ff ff       	call   c0019fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b07e:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001b083:	50                   	push   eax
c001b084:	6a 09                	push   0x9
c001b086:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b08d:	50                   	push   eax
c001b08e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b094:	e8 41 ef ff ff       	call   c0019fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b099:	83 c4 20             	add    esp,0x20
c001b09c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001b0a1:	50                   	push   eax
c001b0a2:	6a 0a                	push   0xa
c001b0a4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b0ab:	50                   	push   eax
c001b0ac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b0b2:	e8 23 ef ff ff       	call   c0019fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b0b7:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001b0bc:	50                   	push   eax
c001b0bd:	6a 0b                	push   0xb
c001b0bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b0c6:	50                   	push   eax
c001b0c7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b0cd:	e8 08 ef ff ff       	call   c0019fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b0d2:	83 c4 20             	add    esp,0x20
c001b0d5:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001b0da:	50                   	push   eax
c001b0db:	6a 02                	push   0x2
c001b0dd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b0e4:	50                   	push   eax
c001b0e5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b0eb:	e8 ea ee ff ff       	call   c0019fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b0f0:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001b0f5:	50                   	push   eax
c001b0f6:	6a 03                	push   0x3
c001b0f8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b0ff:	50                   	push   eax
c001b100:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b106:	e8 cf ee ff ff       	call   c0019fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b10b:	83 c4 20             	add    esp,0x20
c001b10e:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001b113:	50                   	push   eax
c001b114:	6a 04                	push   0x4
c001b116:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b11d:	50                   	push   eax
c001b11e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b124:	e8 b1 ee ff ff       	call   c0019fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b129:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b12e:	50                   	push   eax
c001b12f:	6a 05                	push   0x5
c001b131:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b138:	50                   	push   eax
c001b139:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b13f:	e8 96 ee ff ff       	call   c0019fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b144:	83 c4 20             	add    esp,0x20
c001b147:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001b14c:	0f 94 c0             	sete   al
c001b14f:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001b154:	74 09                	je     c001b15f <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001b156:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001b15d:	eb 07                	jmp    c001b166 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001b15f:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001b166:	0f b6 c0             	movzx  eax,al
c001b169:	50                   	push   eax
c001b16a:	6a 07                	push   0x7
c001b16c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b173:	50                   	push   eax
c001b174:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b17a:	e8 5b ee ff ff       	call   c0019fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b17f:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001b183:	83 c4 10             	add    esp,0x10
c001b186:	85 f6                	test   esi,esi
c001b188:	0f 84 ae 00 00 00    	je     c001b23c <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001b18e:	50                   	push   eax
c001b18f:	6a 01                	push   0x1
c001b191:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b198:	50                   	push   eax
c001b199:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b19f:	e8 d4 f8 ff ff       	call   c001aa78 <IDE::polling(unsigned char, unsigned int)>
c001b1a4:	83 c4 10             	add    esp,0x10
c001b1a7:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b1ad:	84 c0                	test   al,al
c001b1af:	74 20                	je     c001b1d1 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001b1b1:	0f b6 f8             	movzx  edi,al
c001b1b4:	0f b6 d2             	movzx  edx,dl
c001b1b7:	57                   	push   edi
c001b1b8:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001b1bf:	50                   	push   eax
c001b1c0:	52                   	push   edx
c001b1c1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b1c7:	e8 fc f7 ff ff       	call   c001a9c8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001b1cc:	e9 87 00 00 00       	jmp    c001b258 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001b1d1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b1d6:	74 33                	je     c001b20b <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001b1d8:	31 ed                	xor    ebp,ebp
c001b1da:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b1de:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001b1e2:	50                   	push   eax
c001b1e3:	50                   	push   eax
c001b1e4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b1eb:	50                   	push   eax
c001b1ec:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b1f2:	e8 d1 ed ff ff       	call   c0019fc8 <IDE::getBase(unsigned char)>
c001b1f7:	89 c2                	mov    edx,eax
c001b1f9:	89 f8                	mov    eax,edi
c001b1fb:	66 ef                	out    dx,ax
c001b1fd:	45                   	inc    ebp
c001b1fe:	83 c4 10             	add    esp,0x10
c001b201:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001b207:	75 d1                	jne    c001b1da <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001b209:	eb 23                	jmp    c001b22e <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001b20b:	0f b6 d2             	movzx  edx,dl
c001b20e:	51                   	push   ecx
c001b20f:	51                   	push   ecx
c001b210:	52                   	push   edx
c001b211:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b217:	e8 ac ed ff ff       	call   c0019fc8 <IDE::getBase(unsigned char)>
c001b21c:	b9 00 01 00 00       	mov    ecx,0x100
c001b221:	89 c2                	mov    edx,eax
c001b223:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001b227:	fc                   	cld    
c001b228:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001b22b:	83 c4 10             	add    esp,0x10
c001b22e:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001b236:	4e                   	dec    esi
c001b237:	e9 4a ff ff ff       	jmp    c001b186 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001b23c:	31 ff                	xor    edi,edi
c001b23e:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001b243:	74 16                	je     c001b25b <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001b245:	50                   	push   eax
c001b246:	50                   	push   eax
c001b247:	31 c0                	xor    eax,eax
c001b249:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001b24e:	0f 94 c0             	sete   al
c001b251:	50                   	push   eax
c001b252:	53                   	push   ebx
c001b253:	e8 fc fb ff ff       	call   c001ae54 <ATA::flush(bool)>
c001b258:	83 c4 10             	add    esp,0x10
c001b25b:	83 c4 2c             	add    esp,0x2c
c001b25e:	89 f8                	mov    eax,edi
c001b260:	5b                   	pop    ebx
c001b261:	5e                   	pop    esi
c001b262:	5f                   	pop    edi
c001b263:	5d                   	pop    ebp
c001b264:	c3                   	ret    
c001b265:	90                   	nop

c001b266 <ATA::detectCHS()>:
c001b266:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b26a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001b270:	c1 e0 06             	shl    eax,0x6
c001b273:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001b279:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001b283:	c7 44 24 04 94 0c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020c94
c001b28b:	e9 0b 51 ff ff       	jmp    c001039b <KePanic(char const*)>

c001b290 <ATA::open(int, int, void*)>:
c001b290:	53                   	push   ebx
c001b291:	83 ec 08             	sub    esp,0x8
c001b294:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b298:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b29c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b2a0:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001b2a6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001b2ac:	c1 e0 06             	shl    eax,0x6
c001b2af:	01 d0                	add    eax,edx
c001b2b1:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001b2b8:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001b2be:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001b2c5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001b2cf:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001b2d5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001b2dc:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001b2e3:	75 0c                	jne    c001b2f1 <ATA::open(int, int, void*)+0x61>
c001b2e5:	83 ec 0c             	sub    esp,0xc
c001b2e8:	53                   	push   ebx
c001b2e9:	e8 78 ff ff ff       	call   c001b266 <ATA::detectCHS()>
c001b2ee:	83 c4 10             	add    esp,0x10
c001b2f1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001b2f7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001b2fd:	c1 e0 06             	shl    eax,0x6
c001b300:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001b307:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b311:	d1 e8                	shr    eax,1
c001b313:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001b319:	6a 04                	push   0x4
c001b31b:	6a 0c                	push   0xc
c001b31d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b324:	50                   	push   eax
c001b325:	52                   	push   edx
c001b326:	e8 af ec ff ff       	call   c0019fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b32b:	90                   	nop
c001b32c:	90                   	nop
c001b32d:	6a 00                	push   0x0
c001b32f:	6a 0c                	push   0xc
c001b331:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b338:	50                   	push   eax
c001b339:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b33f:	e8 96 ec ff ff       	call   c0019fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b344:	83 c4 14             	add    esp,0x14
c001b347:	53                   	push   ebx
c001b348:	e8 31 0b ff ff       	call   c000be7e <PhysicalDisk::startCache()>
c001b34d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b350:	e8 6d 1c ff ff       	call   c000cfc2 <createPartitionsForDisk(PhysicalDisk*)>
c001b355:	31 c0                	xor    eax,eax
c001b357:	83 c4 18             	add    esp,0x18
c001b35a:	5b                   	pop    ebx
c001b35b:	c3                   	ret    

c001b35c <combineCharAndColour(char, unsigned char)>:
c001b35c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b361:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001b367:	c1 e0 08             	shl    eax,0x8
c001b36a:	09 d0                	or     eax,edx
c001b36c:	c3                   	ret    

c001b36d <combineColours(unsigned char, unsigned char)>:
c001b36d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b372:	c1 e0 04             	shl    eax,0x4
c001b375:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001b379:	c3                   	ret    

c001b37a <ATA::read(unsigned long long, int, void*)>:
c001b37a:	55                   	push   ebp
c001b37b:	57                   	push   edi
c001b37c:	56                   	push   esi
c001b37d:	be 04 00 00 00       	mov    esi,0x4
c001b382:	53                   	push   ebx
c001b383:	83 ec 0c             	sub    esp,0xc
c001b386:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b38a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b38e:	8d 7b ff             	lea    edi,[ebx-0x1]
c001b391:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b395:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b399:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001b39f:	0f 87 a1 01 00 00    	ja     c001b546 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001b3a5:	be 06 00 00 00       	mov    esi,0x6
c001b3aa:	85 c9                	test   ecx,ecx
c001b3ac:	0f 84 94 01 00 00    	je     c001b546 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001b3b2:	55                   	push   ebp
c001b3b3:	55                   	push   ebp
c001b3b4:	6a 00                	push   0x0
c001b3b6:	51                   	push   ecx
c001b3b7:	53                   	push   ebx
c001b3b8:	52                   	push   edx
c001b3b9:	50                   	push   eax
c001b3ba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b3be:	e8 27 fb ff ff       	call   c001aeea <ATA::access(unsigned long long, int, void*, bool)>
c001b3c3:	83 c4 20             	add    esp,0x20
c001b3c6:	89 c6                	mov    esi,eax
c001b3c8:	85 c0                	test   eax,eax
c001b3ca:	0f 85 71 01 00 00    	jne    c001b541 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001b3d0:	03 1d 54 7b 02 c0    	add    ebx,DWORD PTR ds:0xc0027b54
c001b3d6:	89 da                	mov    edx,ebx
c001b3d8:	50                   	push   eax
c001b3d9:	bd 10 27 00 00       	mov    ebp,0x2710
c001b3de:	50                   	push   eax
c001b3df:	89 1d 54 7b 02 c0    	mov    DWORD PTR ds:0xc0027b54,ebx
c001b3e5:	6a 0f                	push   0xf
c001b3e7:	6a 00                	push   0x0
c001b3e9:	e8 7f ff ff ff       	call   c001b36d <combineColours(unsigned char, unsigned char)>
c001b3ee:	59                   	pop    ecx
c001b3ef:	b9 0a 00 00 00       	mov    ecx,0xa
c001b3f4:	5b                   	pop    ebx
c001b3f5:	0f b6 d8             	movzx  ebx,al
c001b3f8:	89 d0                	mov    eax,edx
c001b3fa:	53                   	push   ebx
c001b3fb:	99                   	cdq    
c001b3fc:	f7 fd                	idiv   ebp
c001b3fe:	99                   	cdq    
c001b3ff:	f7 f9                	idiv   ecx
c001b401:	83 c2 30             	add    edx,0x30
c001b404:	0f b6 d2             	movzx  edx,dl
c001b407:	52                   	push   edx
c001b408:	e8 4f ff ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001b40d:	5f                   	pop    edi
c001b40e:	bf e8 03 00 00       	mov    edi,0x3e8
c001b413:	5a                   	pop    edx
c001b414:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001b41a:	53                   	push   ebx
c001b41b:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b420:	99                   	cdq    
c001b421:	f7 ff                	idiv   edi
c001b423:	99                   	cdq    
c001b424:	f7 f9                	idiv   ecx
c001b426:	8d 42 30             	lea    eax,[edx+0x30]
c001b429:	0f b6 c0             	movzx  eax,al
c001b42c:	50                   	push   eax
c001b42d:	e8 2a ff ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001b432:	5f                   	pop    edi
c001b433:	bf 64 00 00 00       	mov    edi,0x64
c001b438:	5a                   	pop    edx
c001b439:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001b43f:	53                   	push   ebx
c001b440:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b445:	99                   	cdq    
c001b446:	f7 ff                	idiv   edi
c001b448:	99                   	cdq    
c001b449:	f7 f9                	idiv   ecx
c001b44b:	8d 42 30             	lea    eax,[edx+0x30]
c001b44e:	0f b6 c0             	movzx  eax,al
c001b451:	50                   	push   eax
c001b452:	e8 05 ff ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001b457:	5a                   	pop    edx
c001b458:	5a                   	pop    edx
c001b459:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001b45f:	53                   	push   ebx
c001b460:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b465:	99                   	cdq    
c001b466:	f7 f9                	idiv   ecx
c001b468:	99                   	cdq    
c001b469:	f7 f9                	idiv   ecx
c001b46b:	8d 42 30             	lea    eax,[edx+0x30]
c001b46e:	0f b6 c0             	movzx  eax,al
c001b471:	50                   	push   eax
c001b472:	e8 e5 fe ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001b477:	5a                   	pop    edx
c001b478:	5a                   	pop    edx
c001b479:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001b47f:	53                   	push   ebx
c001b480:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b485:	99                   	cdq    
c001b486:	f7 f9                	idiv   ecx
c001b488:	83 c2 30             	add    edx,0x30
c001b48b:	0f b6 d2             	movzx  edx,dl
c001b48e:	52                   	push   edx
c001b48f:	e8 c8 fe ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001b494:	5a                   	pop    edx
c001b495:	5a                   	pop    edx
c001b496:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001b49c:	53                   	push   ebx
c001b49d:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b4a2:	99                   	cdq    
c001b4a3:	f7 fd                	idiv   ebp
c001b4a5:	99                   	cdq    
c001b4a6:	f7 f9                	idiv   ecx
c001b4a8:	8d 42 30             	lea    eax,[edx+0x30]
c001b4ab:	0f b6 c0             	movzx  eax,al
c001b4ae:	50                   	push   eax
c001b4af:	e8 a8 fe ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001b4b4:	5d                   	pop    ebp
c001b4b5:	bd e8 03 00 00       	mov    ebp,0x3e8
c001b4ba:	5a                   	pop    edx
c001b4bb:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001b4c1:	53                   	push   ebx
c001b4c2:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b4c7:	99                   	cdq    
c001b4c8:	f7 fd                	idiv   ebp
c001b4ca:	99                   	cdq    
c001b4cb:	f7 f9                	idiv   ecx
c001b4cd:	8d 42 30             	lea    eax,[edx+0x30]
c001b4d0:	0f b6 c0             	movzx  eax,al
c001b4d3:	50                   	push   eax
c001b4d4:	e8 83 fe ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001b4d9:	5d                   	pop    ebp
c001b4da:	5a                   	pop    edx
c001b4db:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001b4e1:	53                   	push   ebx
c001b4e2:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b4e7:	99                   	cdq    
c001b4e8:	f7 ff                	idiv   edi
c001b4ea:	99                   	cdq    
c001b4eb:	f7 f9                	idiv   ecx
c001b4ed:	8d 42 30             	lea    eax,[edx+0x30]
c001b4f0:	0f b6 c0             	movzx  eax,al
c001b4f3:	50                   	push   eax
c001b4f4:	e8 63 fe ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001b4f9:	5f                   	pop    edi
c001b4fa:	5d                   	pop    ebp
c001b4fb:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001b501:	53                   	push   ebx
c001b502:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b507:	99                   	cdq    
c001b508:	f7 f9                	idiv   ecx
c001b50a:	99                   	cdq    
c001b50b:	f7 f9                	idiv   ecx
c001b50d:	8d 42 30             	lea    eax,[edx+0x30]
c001b510:	0f b6 c0             	movzx  eax,al
c001b513:	50                   	push   eax
c001b514:	e8 43 fe ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001b519:	5a                   	pop    edx
c001b51a:	5f                   	pop    edi
c001b51b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001b521:	53                   	push   ebx
c001b522:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b527:	99                   	cdq    
c001b528:	f7 f9                	idiv   ecx
c001b52a:	83 c2 30             	add    edx,0x30
c001b52d:	0f b6 d2             	movzx  edx,dl
c001b530:	52                   	push   edx
c001b531:	e8 26 fe ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001b536:	83 c4 10             	add    esp,0x10
c001b539:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001b53f:	eb 05                	jmp    c001b546 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001b541:	be 01 00 00 00       	mov    esi,0x1
c001b546:	83 c4 0c             	add    esp,0xc
c001b549:	89 f0                	mov    eax,esi
c001b54b:	5b                   	pop    ebx
c001b54c:	5e                   	pop    esi
c001b54d:	5f                   	pop    edi
c001b54e:	5d                   	pop    ebp
c001b54f:	c3                   	ret    

c001b550 <ATA::write(unsigned long long, int, void*)>:
c001b550:	55                   	push   ebp
c001b551:	57                   	push   edi
c001b552:	56                   	push   esi
c001b553:	be 04 00 00 00       	mov    esi,0x4
c001b558:	53                   	push   ebx
c001b559:	83 ec 0c             	sub    esp,0xc
c001b55c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b560:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b564:	8d 7b ff             	lea    edi,[ebx-0x1]
c001b567:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b56b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b56f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001b575:	0f 87 9c 01 00 00    	ja     c001b717 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001b57b:	be 06 00 00 00       	mov    esi,0x6
c001b580:	85 c9                	test   ecx,ecx
c001b582:	0f 84 8f 01 00 00    	je     c001b717 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001b588:	55                   	push   ebp
c001b589:	55                   	push   ebp
c001b58a:	6a 01                	push   0x1
c001b58c:	51                   	push   ecx
c001b58d:	53                   	push   ebx
c001b58e:	52                   	push   edx
c001b58f:	50                   	push   eax
c001b590:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b594:	e8 51 f9 ff ff       	call   c001aeea <ATA::access(unsigned long long, int, void*, bool)>
c001b599:	83 c4 20             	add    esp,0x20
c001b59c:	89 c6                	mov    esi,eax
c001b59e:	85 c0                	test   eax,eax
c001b5a0:	0f 85 6c 01 00 00    	jne    c001b712 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001b5a6:	01 1d 50 7b 02 c0    	add    DWORD PTR ds:0xc0027b50,ebx
c001b5ac:	bd 10 27 00 00       	mov    ebp,0x2710
c001b5b1:	50                   	push   eax
c001b5b2:	50                   	push   eax
c001b5b3:	6a 0f                	push   0xf
c001b5b5:	6a 00                	push   0x0
c001b5b7:	e8 b1 fd ff ff       	call   c001b36d <combineColours(unsigned char, unsigned char)>
c001b5bc:	5a                   	pop    edx
c001b5bd:	0f b6 d8             	movzx  ebx,al
c001b5c0:	59                   	pop    ecx
c001b5c1:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b5c6:	53                   	push   ebx
c001b5c7:	b9 0a 00 00 00       	mov    ecx,0xa
c001b5cc:	99                   	cdq    
c001b5cd:	f7 fd                	idiv   ebp
c001b5cf:	99                   	cdq    
c001b5d0:	f7 f9                	idiv   ecx
c001b5d2:	8d 42 30             	lea    eax,[edx+0x30]
c001b5d5:	0f b6 c0             	movzx  eax,al
c001b5d8:	50                   	push   eax
c001b5d9:	e8 7e fd ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001b5de:	5f                   	pop    edi
c001b5df:	bf e8 03 00 00       	mov    edi,0x3e8
c001b5e4:	5a                   	pop    edx
c001b5e5:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001b5eb:	53                   	push   ebx
c001b5ec:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b5f1:	99                   	cdq    
c001b5f2:	f7 ff                	idiv   edi
c001b5f4:	99                   	cdq    
c001b5f5:	f7 f9                	idiv   ecx
c001b5f7:	8d 42 30             	lea    eax,[edx+0x30]
c001b5fa:	0f b6 c0             	movzx  eax,al
c001b5fd:	50                   	push   eax
c001b5fe:	e8 59 fd ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001b603:	5f                   	pop    edi
c001b604:	bf 64 00 00 00       	mov    edi,0x64
c001b609:	5a                   	pop    edx
c001b60a:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001b610:	53                   	push   ebx
c001b611:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b616:	99                   	cdq    
c001b617:	f7 ff                	idiv   edi
c001b619:	99                   	cdq    
c001b61a:	f7 f9                	idiv   ecx
c001b61c:	8d 42 30             	lea    eax,[edx+0x30]
c001b61f:	0f b6 c0             	movzx  eax,al
c001b622:	50                   	push   eax
c001b623:	e8 34 fd ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001b628:	5a                   	pop    edx
c001b629:	5a                   	pop    edx
c001b62a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001b630:	53                   	push   ebx
c001b631:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b636:	99                   	cdq    
c001b637:	f7 f9                	idiv   ecx
c001b639:	99                   	cdq    
c001b63a:	f7 f9                	idiv   ecx
c001b63c:	8d 42 30             	lea    eax,[edx+0x30]
c001b63f:	0f b6 c0             	movzx  eax,al
c001b642:	50                   	push   eax
c001b643:	e8 14 fd ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001b648:	5a                   	pop    edx
c001b649:	5a                   	pop    edx
c001b64a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001b650:	53                   	push   ebx
c001b651:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b656:	99                   	cdq    
c001b657:	f7 f9                	idiv   ecx
c001b659:	8d 42 30             	lea    eax,[edx+0x30]
c001b65c:	0f b6 c0             	movzx  eax,al
c001b65f:	50                   	push   eax
c001b660:	e8 f7 fc ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001b665:	5a                   	pop    edx
c001b666:	5a                   	pop    edx
c001b667:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001b66d:	53                   	push   ebx
c001b66e:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b673:	99                   	cdq    
c001b674:	f7 fd                	idiv   ebp
c001b676:	99                   	cdq    
c001b677:	f7 f9                	idiv   ecx
c001b679:	8d 42 30             	lea    eax,[edx+0x30]
c001b67c:	0f b6 c0             	movzx  eax,al
c001b67f:	50                   	push   eax
c001b680:	e8 d7 fc ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001b685:	5d                   	pop    ebp
c001b686:	bd e8 03 00 00       	mov    ebp,0x3e8
c001b68b:	5a                   	pop    edx
c001b68c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001b692:	53                   	push   ebx
c001b693:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b698:	99                   	cdq    
c001b699:	f7 fd                	idiv   ebp
c001b69b:	99                   	cdq    
c001b69c:	f7 f9                	idiv   ecx
c001b69e:	8d 42 30             	lea    eax,[edx+0x30]
c001b6a1:	0f b6 c0             	movzx  eax,al
c001b6a4:	50                   	push   eax
c001b6a5:	e8 b2 fc ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001b6aa:	5d                   	pop    ebp
c001b6ab:	5a                   	pop    edx
c001b6ac:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001b6b2:	53                   	push   ebx
c001b6b3:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b6b8:	99                   	cdq    
c001b6b9:	f7 ff                	idiv   edi
c001b6bb:	99                   	cdq    
c001b6bc:	f7 f9                	idiv   ecx
c001b6be:	8d 42 30             	lea    eax,[edx+0x30]
c001b6c1:	0f b6 c0             	movzx  eax,al
c001b6c4:	50                   	push   eax
c001b6c5:	e8 92 fc ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001b6ca:	5f                   	pop    edi
c001b6cb:	5d                   	pop    ebp
c001b6cc:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001b6d2:	53                   	push   ebx
c001b6d3:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b6d8:	99                   	cdq    
c001b6d9:	f7 f9                	idiv   ecx
c001b6db:	99                   	cdq    
c001b6dc:	f7 f9                	idiv   ecx
c001b6de:	8d 42 30             	lea    eax,[edx+0x30]
c001b6e1:	0f b6 c0             	movzx  eax,al
c001b6e4:	50                   	push   eax
c001b6e5:	e8 72 fc ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001b6ea:	5a                   	pop    edx
c001b6eb:	5f                   	pop    edi
c001b6ec:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001b6f2:	53                   	push   ebx
c001b6f3:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b6f8:	99                   	cdq    
c001b6f9:	f7 f9                	idiv   ecx
c001b6fb:	83 c2 30             	add    edx,0x30
c001b6fe:	0f b6 d2             	movzx  edx,dl
c001b701:	52                   	push   edx
c001b702:	e8 55 fc ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001b707:	83 c4 10             	add    esp,0x10
c001b70a:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001b710:	eb 05                	jmp    c001b717 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001b712:	be 01 00 00 00       	mov    esi,0x1
c001b717:	83 c4 0c             	add    esp,0xc
c001b71a:	89 f0                	mov    eax,esi
c001b71c:	5b                   	pop    ebx
c001b71d:	5e                   	pop    esi
c001b71e:	5f                   	pop    edi
c001b71f:	5d                   	pop    ebp
c001b720:	c3                   	ret    
c001b721:	90                   	nop

c001b722 <ATAPI::write(unsigned long long, int, void*)>:
c001b722:	b8 03 00 00 00       	mov    eax,0x3
c001b727:	c3                   	ret    

c001b728 <ATAPI::close(int, int, void*)>:
c001b728:	83 ec 0c             	sub    esp,0xc
c001b72b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b72f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b735:	85 c0                	test   eax,eax
c001b737:	74 0c                	je     c001b745 <ATAPI::close(int, int, void*)+0x1d>
c001b739:	83 ec 0c             	sub    esp,0xc
c001b73c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b73e:	50                   	push   eax
c001b73f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b742:	83 c4 10             	add    esp,0x10
c001b745:	31 c0                	xor    eax,eax
c001b747:	83 c4 0c             	add    esp,0xc
c001b74a:	c3                   	ret    
c001b74b:	90                   	nop

c001b74c <ATAPI::ATAPI()>:
c001b74c:	83 ec 0c             	sub    esp,0xc
c001b74f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b753:	83 ec 04             	sub    esp,0x4
c001b756:	68 00 08 00 00       	push   0x800
c001b75b:	68 dd 0d 02 c0       	push   0xc0020ddd
c001b760:	50                   	push   eax
c001b761:	e8 b0 06 ff ff       	call   c000be16 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001b766:	83 c4 10             	add    esp,0x10
c001b769:	ba f8 0c 02 c0       	mov    edx,0xc0020cf8
c001b76e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b772:	89 10                	mov    DWORD PTR [eax],edx
c001b774:	90                   	nop
c001b775:	83 c4 0c             	add    esp,0xc
c001b778:	c3                   	ret    
c001b779:	90                   	nop

c001b77a <ATAPI::readyForCommand()>:
c001b77a:	56                   	push   esi
c001b77b:	53                   	push   ebx
c001b77c:	53                   	push   ebx
c001b77d:	31 db                	xor    ebx,ebx
c001b77f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b783:	51                   	push   ecx
c001b784:	6a 0c                	push   0xc
c001b786:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b78d:	50                   	push   eax
c001b78e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b794:	e8 01 e9 ff ff       	call   c001a09a <IDE::read(unsigned char, unsigned char)>
c001b799:	83 c4 10             	add    esp,0x10
c001b79c:	a8 88                	test   al,0x88
c001b79e:	74 25                	je     c001b7c5 <ATAPI::readyForCommand()+0x4b>
c001b7a0:	43                   	inc    ebx
c001b7a1:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001b7a7:	7e da                	jle    c001b783 <ATAPI::readyForCommand()+0x9>
c001b7a9:	83 ec 0c             	sub    esp,0xc
c001b7ac:	68 5e 01 00 00       	push   0x15e
c001b7b1:	e8 42 91 ff ff       	call   c00148f8 <milliTenthSleep(unsigned int)>
c001b7b6:	83 c4 10             	add    esp,0x10
c001b7b9:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001b7bf:	75 c2                	jne    c001b783 <ATAPI::readyForCommand()+0x9>
c001b7c1:	31 c0                	xor    eax,eax
c001b7c3:	eb 02                	jmp    c001b7c7 <ATAPI::readyForCommand()+0x4d>
c001b7c5:	b0 01                	mov    al,0x1
c001b7c7:	5a                   	pop    edx
c001b7c8:	5b                   	pop    ebx
c001b7c9:	5e                   	pop    esi
c001b7ca:	c3                   	ret    
c001b7cb:	90                   	nop

c001b7cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001b7cc:	55                   	push   ebp
c001b7cd:	57                   	push   edi
c001b7ce:	56                   	push   esi
c001b7cf:	53                   	push   ebx
c001b7d0:	83 ec 20             	sub    esp,0x20
c001b7d3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b7d7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001b7db:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001b7df:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b7e3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001b7e7:	6a 01                	push   0x1
c001b7e9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b7f0:	50                   	push   eax
c001b7f1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b7f7:	e8 ec e9 ff ff       	call   c001a1e8 <IDE::enableIRQs(unsigned char, bool)>
c001b7fc:	5e                   	pop    esi
c001b7fd:	58                   	pop    eax
c001b7fe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b805:	50                   	push   eax
c001b806:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b80c:	e8 a3 e7 ff ff       	call   c0019fb4 <IDE::prepareInterrupt(unsigned char)>
c001b811:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b814:	e8 61 ff ff ff       	call   c001b77a <ATAPI::readyForCommand()>
c001b819:	83 c4 10             	add    esp,0x10
c001b81c:	84 c0                	test   al,al
c001b81e:	75 0a                	jne    c001b82a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001b820:	bb 01 00 00 00       	mov    ebx,0x1
c001b825:	e9 57 02 00 00       	jmp    c001ba81 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001b82a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001b830:	c1 e0 04             	shl    eax,0x4
c001b833:	0f b6 c0             	movzx  eax,al
c001b836:	50                   	push   eax
c001b837:	6a 06                	push   0x6
c001b839:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b840:	50                   	push   eax
c001b841:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b847:	e8 8e e7 ff ff       	call   c0019fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b84c:	6a 00                	push   0x0
c001b84e:	6a 01                	push   0x1
c001b850:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b857:	50                   	push   eax
c001b858:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b85e:	e8 77 e7 ff ff       	call   c0019fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b863:	83 c4 20             	add    esp,0x20
c001b866:	0f b6 c3             	movzx  eax,bl
c001b869:	0f b6 df             	movzx  ebx,bh
c001b86c:	50                   	push   eax
c001b86d:	6a 04                	push   0x4
c001b86f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b876:	50                   	push   eax
c001b877:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b87d:	e8 58 e7 ff ff       	call   c0019fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b882:	53                   	push   ebx
c001b883:	6a 05                	push   0x5
c001b885:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b88c:	50                   	push   eax
c001b88d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b893:	e8 42 e7 ff ff       	call   c0019fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b898:	83 c4 20             	add    esp,0x20
c001b89b:	68 a0 00 00 00       	push   0xa0
c001b8a0:	6a 07                	push   0x7
c001b8a2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b8a9:	50                   	push   eax
c001b8aa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b8b0:	e8 25 e7 ff ff       	call   c0019fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b8b5:	83 c4 0c             	add    esp,0xc
c001b8b8:	6a 01                	push   0x1
c001b8ba:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b8c1:	50                   	push   eax
c001b8c2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b8c8:	e8 ab f1 ff ff       	call   c001aa78 <IDE::polling(unsigned char, unsigned int)>
c001b8cd:	83 c4 10             	add    esp,0x10
c001b8d0:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001b8d6:	84 c0                	test   al,al
c001b8d8:	74 23                	je     c001b8fd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001b8da:	0f b6 d8             	movzx  ebx,al
c001b8dd:	0f b6 d2             	movzx  edx,dl
c001b8e0:	53                   	push   ebx
c001b8e1:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001b8e8:	50                   	push   eax
c001b8e9:	52                   	push   edx
c001b8ea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b8f0:	e8 d3 f0 ff ff       	call   c001a9c8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001b8f5:	83 c4 10             	add    esp,0x10
c001b8f8:	e9 84 01 00 00       	jmp    c001ba81 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001b8fd:	0f b6 d2             	movzx  edx,dl
c001b900:	53                   	push   ebx
c001b901:	53                   	push   ebx
c001b902:	52                   	push   edx
c001b903:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b909:	e8 ba e6 ff ff       	call   c0019fc8 <IDE::getBase(unsigned char)>
c001b90e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001b912:	b9 06 00 00 00       	mov    ecx,0x6
c001b917:	89 c2                	mov    edx,eax
c001b919:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001b91c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001b920:	83 c4 10             	add    esp,0x10
c001b923:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001b929:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001b930:	85 db                	test   ebx,ebx
c001b932:	0f 84 ec 00 00 00    	je     c001ba24 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001b938:	51                   	push   ecx
c001b939:	51                   	push   ecx
c001b93a:	52                   	push   edx
c001b93b:	50                   	push   eax
c001b93c:	e8 07 e8 ff ff       	call   c001a148 <IDE::waitInterrupt(unsigned char)>
c001b941:	83 c4 10             	add    esp,0x10
c001b944:	84 c0                	test   al,al
c001b946:	0f 84 d4 fe ff ff    	je     c001b820 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001b94c:	56                   	push   esi
c001b94d:	56                   	push   esi
c001b94e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b955:	50                   	push   eax
c001b956:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b95c:	e8 53 e6 ff ff       	call   c0019fb4 <IDE::prepareInterrupt(unsigned char)>
c001b961:	83 c4 0c             	add    esp,0xc
c001b964:	6a 04                	push   0x4
c001b966:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b96d:	50                   	push   eax
c001b96e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b974:	e8 21 e7 ff ff       	call   c001a09a <IDE::read(unsigned char, unsigned char)>
c001b979:	83 c4 0c             	add    esp,0xc
c001b97c:	89 c6                	mov    esi,eax
c001b97e:	6a 05                	push   0x5
c001b980:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b987:	50                   	push   eax
c001b988:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b98e:	e8 07 e7 ff ff       	call   c001a09a <IDE::read(unsigned char, unsigned char)>
c001b993:	89 f1                	mov    ecx,esi
c001b995:	0f b6 c0             	movzx  eax,al
c001b998:	0f b6 f1             	movzx  esi,cl
c001b99b:	c1 e0 08             	shl    eax,0x8
c001b99e:	09 c6                	or     esi,eax
c001b9a0:	d1 fe                	sar    esi,1
c001b9a2:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001b9a6:	83 c4 10             	add    esp,0x10
c001b9a9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001b9ae:	74 41                	je     c001b9f1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001b9b0:	31 c9                	xor    ecx,ecx
c001b9b2:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001b9b8:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001b9bf:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001b9c3:	75 0a                	jne    c001b9cf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001b9c5:	01 c9                	add    ecx,ecx
c001b9c7:	01 cd                	add    ebp,ecx
c001b9c9:	4b                   	dec    ebx
c001b9ca:	e9 54 ff ff ff       	jmp    c001b923 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001b9cf:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001b9d4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b9d8:	51                   	push   ecx
c001b9d9:	51                   	push   ecx
c001b9da:	52                   	push   edx
c001b9db:	50                   	push   eax
c001b9dc:	e8 e7 e5 ff ff       	call   c0019fc8 <IDE::getBase(unsigned char)>
c001b9e1:	89 c2                	mov    edx,eax
c001b9e3:	89 f0                	mov    eax,esi
c001b9e5:	66 ef                	out    dx,ax
c001b9e7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b9eb:	83 c4 10             	add    esp,0x10
c001b9ee:	41                   	inc    ecx
c001b9ef:	eb c1                	jmp    c001b9b2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001b9f1:	31 f6                	xor    esi,esi
c001b9f3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001b9f9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ba00:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001ba04:	75 06                	jne    c001ba0c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001ba06:	01 f6                	add    esi,esi
c001ba08:	01 f5                	add    ebp,esi
c001ba0a:	eb bd                	jmp    c001b9c9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001ba0c:	51                   	push   ecx
c001ba0d:	51                   	push   ecx
c001ba0e:	52                   	push   edx
c001ba0f:	50                   	push   eax
c001ba10:	e8 b3 e5 ff ff       	call   c0019fc8 <IDE::getBase(unsigned char)>
c001ba15:	89 c2                	mov    edx,eax
c001ba17:	66 ed                	in     ax,dx
c001ba19:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001ba1e:	83 c4 10             	add    esp,0x10
c001ba21:	46                   	inc    esi
c001ba22:	eb cf                	jmp    c001b9f3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001ba24:	51                   	push   ecx
c001ba25:	51                   	push   ecx
c001ba26:	52                   	push   edx
c001ba27:	50                   	push   eax
c001ba28:	e8 1b e7 ff ff       	call   c001a148 <IDE::waitInterrupt(unsigned char)>
c001ba2d:	83 c4 10             	add    esp,0x10
c001ba30:	84 c0                	test   al,al
c001ba32:	0f 84 e8 fd ff ff    	je     c001b820 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ba38:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ba3d:	52                   	push   edx
c001ba3e:	52                   	push   edx
c001ba3f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ba46:	50                   	push   eax
c001ba47:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ba4d:	e8 62 e5 ff ff       	call   c0019fb4 <IDE::prepareInterrupt(unsigned char)>
c001ba52:	83 c4 10             	add    esp,0x10
c001ba55:	50                   	push   eax
c001ba56:	50                   	push   eax
c001ba57:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ba5e:	50                   	push   eax
c001ba5f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ba65:	e8 5e e5 ff ff       	call   c0019fc8 <IDE::getBase(unsigned char)>
c001ba6a:	8d 50 07             	lea    edx,[eax+0x7]
c001ba6d:	ec                   	in     al,dx
c001ba6e:	83 c4 10             	add    esp,0x10
c001ba71:	a8 88                	test   al,0x88
c001ba73:	74 0a                	je     c001ba7f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001ba75:	4b                   	dec    ebx
c001ba76:	75 dd                	jne    c001ba55 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001ba78:	bb 02 00 00 00       	mov    ebx,0x2
c001ba7d:	eb 02                	jmp    c001ba81 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ba7f:	31 db                	xor    ebx,ebx
c001ba81:	83 c4 1c             	add    esp,0x1c
c001ba84:	89 d8                	mov    eax,ebx
c001ba86:	5b                   	pop    ebx
c001ba87:	5e                   	pop    esi
c001ba88:	5f                   	pop    edi
c001ba89:	5d                   	pop    ebp
c001ba8a:	c3                   	ret    
c001ba8b:	90                   	nop

c001ba8c <ATAPI::diskRemoved()>:
c001ba8c:	53                   	push   ebx
c001ba8d:	83 ec 14             	sub    esp,0x14
c001ba90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ba94:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001ba9b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001baa1:	e8 0a 12 ff ff       	call   c000ccb0 <LogicalDisk::unmount()>
c001baa6:	58                   	pop    eax
c001baa7:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001baad:	e8 de 1b ff ff       	call   c000d690 <VCache::writeWriteBuffer()>
c001bab2:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001bab8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001babc:	83 c4 18             	add    esp,0x18
c001babf:	5b                   	pop    ebx
c001bac0:	e9 bb 1b ff ff       	jmp    c000d680 <VCache::invalidateReadBuffer()>
c001bac5:	90                   	nop

c001bac6 <ATAPI::eject()>:
c001bac6:	57                   	push   edi
c001bac7:	b9 03 00 00 00       	mov    ecx,0x3
c001bacc:	53                   	push   ebx
c001bacd:	83 ec 14             	sub    esp,0x14
c001bad0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bad4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001bad8:	fc                   	cld    
c001bad9:	31 c0                	xor    eax,eax
c001badb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001badd:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001bae2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001bae7:	50                   	push   eax
c001bae8:	50                   	push   eax
c001bae9:	6a 00                	push   0x0
c001baeb:	6a 00                	push   0x0
c001baed:	6a 00                	push   0x0
c001baef:	6a 02                	push   0x2
c001baf1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001baf5:	50                   	push   eax
c001baf6:	53                   	push   ebx
c001baf7:	e8 d0 fc ff ff       	call   c001b7cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001bafc:	83 c4 14             	add    esp,0x14
c001baff:	53                   	push   ebx
c001bb00:	e8 87 ff ff ff       	call   c001ba8c <ATAPI::diskRemoved()>
c001bb05:	83 c4 24             	add    esp,0x24
c001bb08:	31 c0                	xor    eax,eax
c001bb0a:	5b                   	pop    ebx
c001bb0b:	5f                   	pop    edi
c001bb0c:	c3                   	ret    
c001bb0d:	90                   	nop

c001bb0e <ATAPI::diskInserted()>:
c001bb0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb12:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001bb19:	c3                   	ret    

c001bb1a <ATAPI::detectMedia()>:
c001bb1a:	56                   	push   esi
c001bb1b:	53                   	push   ebx
c001bb1c:	83 ec 28             	sub    esp,0x28
c001bb1f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bb23:	6a 0c                	push   0xc
c001bb25:	6a 00                	push   0x0
c001bb27:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001bb2b:	56                   	push   esi
c001bb2c:	e8 9f 49 fe ff       	call   c00004d0 <memset>
c001bb31:	58                   	pop    eax
c001bb32:	5a                   	pop    edx
c001bb33:	6a 00                	push   0x0
c001bb35:	6a 00                	push   0x0
c001bb37:	6a 00                	push   0x0
c001bb39:	6a 00                	push   0x0
c001bb3b:	56                   	push   esi
c001bb3c:	53                   	push   ebx
c001bb3d:	e8 8a fc ff ff       	call   c001b7cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001bb42:	83 c4 1c             	add    esp,0x1c
c001bb45:	6a 0c                	push   0xc
c001bb47:	6a 00                	push   0x0
c001bb49:	56                   	push   esi
c001bb4a:	e8 81 49 fe ff       	call   c00004d0 <memset>
c001bb4f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001bb54:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001bb59:	59                   	pop    ecx
c001bb5a:	58                   	pop    eax
c001bb5b:	6a 01                	push   0x1
c001bb5d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001bb61:	50                   	push   eax
c001bb62:	6a 00                	push   0x0
c001bb64:	6a 12                	push   0x12
c001bb66:	56                   	push   esi
c001bb67:	53                   	push   ebx
c001bb68:	e8 5f fc ff ff       	call   c001b7cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001bb6d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001bb71:	83 c4 20             	add    esp,0x20
c001bb74:	83 e0 7f             	and    eax,0x7f
c001bb77:	3c 70                	cmp    al,0x70
c001bb79:	74 15                	je     c001bb90 <ATAPI::detectMedia()+0x76>
c001bb7b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001bb82:	75 0c                	jne    c001bb90 <ATAPI::detectMedia()+0x76>
c001bb84:	83 ec 0c             	sub    esp,0xc
c001bb87:	53                   	push   ebx
c001bb88:	e8 81 ff ff ff       	call   c001bb0e <ATAPI::diskInserted()>
c001bb8d:	83 c4 10             	add    esp,0x10
c001bb90:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001bb94:	83 e0 0f             	and    eax,0xf
c001bb97:	3c 02                	cmp    al,0x2
c001bb99:	75 1b                	jne    c001bbb6 <ATAPI::detectMedia()+0x9c>
c001bb9b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001bba0:	75 2d                	jne    c001bbcf <ATAPI::detectMedia()+0xb5>
c001bba2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001bba9:	74 24                	je     c001bbcf <ATAPI::detectMedia()+0xb5>
c001bbab:	83 ec 0c             	sub    esp,0xc
c001bbae:	53                   	push   ebx
c001bbaf:	e8 d8 fe ff ff       	call   c001ba8c <ATAPI::diskRemoved()>
c001bbb4:	eb 16                	jmp    c001bbcc <ATAPI::detectMedia()+0xb2>
c001bbb6:	84 c0                	test   al,al
c001bbb8:	75 15                	jne    c001bbcf <ATAPI::detectMedia()+0xb5>
c001bbba:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001bbc1:	75 0c                	jne    c001bbcf <ATAPI::detectMedia()+0xb5>
c001bbc3:	83 ec 0c             	sub    esp,0xc
c001bbc6:	53                   	push   ebx
c001bbc7:	e8 42 ff ff ff       	call   c001bb0e <ATAPI::diskInserted()>
c001bbcc:	83 c4 10             	add    esp,0x10
c001bbcf:	83 c4 24             	add    esp,0x24
c001bbd2:	5b                   	pop    ebx
c001bbd3:	5e                   	pop    esi
c001bbd4:	c3                   	ret    
c001bbd5:	90                   	nop

c001bbd6 <ATAPI::open(int, int, void*)>:
c001bbd6:	56                   	push   esi
c001bbd7:	53                   	push   ebx
c001bbd8:	50                   	push   eax
c001bbd9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bbdd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bbe1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bbe5:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001bbeb:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001bbf1:	c1 e0 06             	shl    eax,0x6
c001bbf4:	01 d0                	add    eax,edx
c001bbf6:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001bbfd:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001bc03:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001bc0a:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001bc14:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001bc1a:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001bc21:	6a 04                	push   0x4
c001bc23:	6a 0c                	push   0xc
c001bc25:	51                   	push   ecx
c001bc26:	52                   	push   edx
c001bc27:	e8 ae e3 ff ff       	call   c0019fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc2c:	90                   	nop
c001bc2d:	90                   	nop
c001bc2e:	6a 00                	push   0x0
c001bc30:	6a 0c                	push   0xc
c001bc32:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bc39:	50                   	push   eax
c001bc3a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bc40:	e8 95 e3 ff ff       	call   c0019fda <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc45:	83 c4 14             	add    esp,0x14
c001bc48:	68 78 01 00 00       	push   0x178
c001bc4d:	e8 23 bc fe ff       	call   c0007875 <malloc>
c001bc52:	83 c4 0c             	add    esp,0xc
c001bc55:	89 c6                	mov    esi,eax
c001bc57:	6a 00                	push   0x0
c001bc59:	68 ff ff ff 7f       	push   0x7fffffff
c001bc5e:	6a 00                	push   0x0
c001bc60:	6a 00                	push   0x0
c001bc62:	53                   	push   ebx
c001bc63:	68 8f 0e 02 c0       	push   0xc0020e8f
c001bc68:	50                   	push   eax
c001bc69:	e8 84 0e ff ff       	call   c000caf2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001bc6e:	83 c4 14             	add    esp,0x14
c001bc71:	56                   	push   esi
c001bc72:	e8 3b 0f ff ff       	call   c000cbb2 <LogicalDisk::assignDriveLetter()>
c001bc77:	5a                   	pop    edx
c001bc78:	0f be c0             	movsx  eax,al
c001bc7b:	59                   	pop    ecx
c001bc7c:	50                   	push   eax
c001bc7d:	68 e0 0c 02 c0       	push   0xc0020ce0
c001bc82:	e8 83 e9 fe ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c001bc87:	58                   	pop    eax
c001bc88:	5a                   	pop    edx
c001bc89:	56                   	push   esi
c001bc8a:	53                   	push   ebx
c001bc8b:	e8 b8 fd fe ff       	call   c000ba48 <Device::addChild(Device*)>
c001bc90:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001bc96:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc99:	e8 e0 01 ff ff       	call   c000be7e <PhysicalDisk::startCache()>
c001bc9e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001bca5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bca8:	e8 6d fe ff ff       	call   c001bb1a <ATAPI::detectMedia()>
c001bcad:	83 c4 14             	add    esp,0x14
c001bcb0:	31 c0                	xor    eax,eax
c001bcb2:	5b                   	pop    ebx
c001bcb3:	5e                   	pop    esi
c001bcb4:	c3                   	ret    
c001bcb5:	90                   	nop

c001bcb6 <ATAPI::read(unsigned long long, int, void*)>:
c001bcb6:	55                   	push   ebp
c001bcb7:	57                   	push   edi
c001bcb8:	56                   	push   esi
c001bcb9:	53                   	push   ebx
c001bcba:	83 ec 1c             	sub    esp,0x1c
c001bcbd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bcc1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001bcc5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001bcc9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001bcd0:	74 3c                	je     c001bd0e <ATAPI::read(unsigned long long, int, void*)+0x58>
c001bcd2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001bcd6:	b9 03 00 00 00       	mov    ecx,0x3
c001bcdb:	fc                   	cld    
c001bcdc:	31 c0                	xor    eax,eax
c001bcde:	0f ce                	bswap  esi
c001bce0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001bce2:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001bce7:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001bceb:	89 e8                	mov    eax,ebp
c001bced:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001bcf1:	50                   	push   eax
c001bcf2:	50                   	push   eax
c001bcf3:	55                   	push   ebp
c001bcf4:	c1 e5 0b             	shl    ebp,0xb
c001bcf7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001bcfb:	6a 00                	push   0x0
c001bcfd:	55                   	push   ebp
c001bcfe:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bd02:	50                   	push   eax
c001bd03:	53                   	push   ebx
c001bd04:	e8 c3 fa ff ff       	call   c001b7cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001bd09:	83 c4 20             	add    esp,0x20
c001bd0c:	eb 1a                	jmp    c001bd28 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001bd0e:	83 ec 0c             	sub    esp,0xc
c001bd11:	53                   	push   ebx
c001bd12:	e8 03 fe ff ff       	call   c001bb1a <ATAPI::detectMedia()>
c001bd17:	83 c4 10             	add    esp,0x10
c001bd1a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001bd21:	75 af                	jne    c001bcd2 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001bd23:	b8 02 00 00 00       	mov    eax,0x2
c001bd28:	83 c4 1c             	add    esp,0x1c
c001bd2b:	5b                   	pop    ebx
c001bd2c:	5e                   	pop    esi
c001bd2d:	5f                   	pop    edi
c001bd2e:	5d                   	pop    ebp
c001bd2f:	c3                   	ret    

c001bd30 <SATA::close(int, int, void*)>:
c001bd30:	83 ec 0c             	sub    esp,0xc
c001bd33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd37:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001bd3d:	85 c0                	test   eax,eax
c001bd3f:	74 0c                	je     c001bd4d <SATA::close(int, int, void*)+0x1d>
c001bd41:	83 ec 0c             	sub    esp,0xc
c001bd44:	8b 10                	mov    edx,DWORD PTR [eax]
c001bd46:	50                   	push   eax
c001bd47:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001bd4a:	83 c4 10             	add    esp,0x10
c001bd4d:	31 c0                	xor    eax,eax
c001bd4f:	83 c4 0c             	add    esp,0xc
c001bd52:	c3                   	ret    
c001bd53:	90                   	nop

c001bd54 <SATA::powerSaving(PowerSavingLevel)>:
c001bd54:	c3                   	ret    
c001bd55:	90                   	nop

c001bd56 <SATA::open(int, int, void*)>:
c001bd56:	56                   	push   esi
c001bd57:	53                   	push   ebx
c001bd58:	50                   	push   eax
c001bd59:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd61:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001bd6b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001bd71:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001bd7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bd7f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001bd89:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001bd8f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001bd96:	e8 b6 bd fe ff       	call   c0007b51 <Phys::allocatePage()>
c001bd9b:	89 c6                	mov    esi,eax
c001bd9d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001bda3:	81 c6 00 10 00 00    	add    esi,0x1000
c001bda9:	e8 a3 bd fe ff       	call   c0007b51 <Phys::allocatePage()>
c001bdae:	39 c6                	cmp    esi,eax
c001bdb0:	74 10                	je     c001bdc2 <SATA::open(int, int, void*)+0x6c>
c001bdb2:	83 ec 0c             	sub    esp,0xc
c001bdb5:	68 28 0d 02 c0       	push   0xc0020d28
c001bdba:	e8 dc 45 ff ff       	call   c001039b <KePanic(char const*)>
c001bdbf:	83 c4 10             	add    esp,0x10
c001bdc2:	83 ec 0c             	sub    esp,0xc
c001bdc5:	6a 02                	push   0x2
c001bdc7:	e8 81 d5 fe ff       	call   c000934d <Virt::allocateKernelVirtualPages(int)>
c001bdcc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001bdd2:	6a 03                	push   0x3
c001bdd4:	50                   	push   eax
c001bdd5:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001bddb:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c001bde1:	e8 2a dc fe ff       	call   c0009a10 <VAS::mapPage(unsigned long, unsigned long, int)>
c001bde6:	83 c4 14             	add    esp,0x14
c001bde9:	53                   	push   ebx
c001bdea:	e8 8f 00 ff ff       	call   c000be7e <PhysicalDisk::startCache()>
c001bdef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bdf2:	e8 cb 11 ff ff       	call   c000cfc2 <createPartitionsForDisk(PhysicalDisk*)>
c001bdf7:	83 c4 14             	add    esp,0x14
c001bdfa:	31 c0                	xor    eax,eax
c001bdfc:	5b                   	pop    ebx
c001bdfd:	5e                   	pop    esi
c001bdfe:	c3                   	ret    
c001bdff:	90                   	nop

c001be00 <SATA::SATA()>:
c001be00:	83 ec 0c             	sub    esp,0xc
c001be03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be07:	83 ec 04             	sub    esp,0x4
c001be0a:	68 00 02 00 00       	push   0x200
c001be0f:	68 3c 0d 02 c0       	push   0xc0020d3c
c001be14:	50                   	push   eax
c001be15:	e8 fc ff fe ff       	call   c000be16 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001be1a:	83 c4 10             	add    esp,0x10
c001be1d:	ba ac 0d 02 c0       	mov    edx,0xc0020dac
c001be22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be26:	89 10                	mov    DWORD PTR [eax],edx
c001be28:	90                   	nop
c001be29:	83 c4 0c             	add    esp,0xc
c001be2c:	c3                   	ret    
c001be2d:	90                   	nop

c001be2e <SATA::access(unsigned long long, int, void*, bool)>:
c001be2e:	55                   	push   ebp
c001be2f:	57                   	push   edi
c001be30:	56                   	push   esi
c001be31:	53                   	push   ebx
c001be32:	83 ec 2c             	sub    esp,0x2c
c001be35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001be39:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001be3d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001be41:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001be45:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001be49:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001be4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be52:	7e 10                	jle    c001be64 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001be54:	83 ec 0c             	sub    esp,0xc
c001be57:	68 4c 0d 02 c0       	push   0xc0020d4c
c001be5c:	e8 3a 45 ff ff       	call   c001039b <KePanic(char const*)>
c001be61:	83 c4 10             	add    esp,0x10
c001be64:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001be6a:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001be70:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001be76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001be7a:	89 d0                	mov    eax,edx
c001be7c:	c1 e0 07             	shl    eax,0x7
c001be7f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001be83:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001be8d:	51                   	push   ecx
c001be8e:	8d 42 02             	lea    eax,[edx+0x2]
c001be91:	51                   	push   ecx
c001be92:	c1 e0 07             	shl    eax,0x7
c001be95:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001be99:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001be9d:	50                   	push   eax
c001be9e:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001bea4:	e8 b9 ec ff ff       	call   c001ab62 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001bea9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bead:	83 c4 10             	add    esp,0x10
c001beb0:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001beb5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001beb9:	0f 84 4f 01 00 00    	je     c001c00e <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001bebf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bec3:	c1 e0 09             	shl    eax,0x9
c001bec6:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001becb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001becf:	74 0e                	je     c001bedf <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001bed1:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001bed7:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001bedb:	89 c1                	mov    ecx,eax
c001bedd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bedf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001bee3:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001bee9:	8d 42 02             	lea    eax,[edx+0x2]
c001beec:	c1 e0 07             	shl    eax,0x7
c001beef:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001bef3:	8b 00                	mov    eax,DWORD PTR [eax]
c001bef5:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001befb:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001bf01:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bf05:	c1 e1 05             	shl    ecx,0x5
c001bf08:	01 c8                	add    eax,ecx
c001bf0a:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001bf0e:	83 e1 01             	and    ecx,0x1
c001bf11:	89 ce                	mov    esi,ecx
c001bf13:	8a 08                	mov    cl,BYTE PTR [eax]
c001bf15:	c1 e6 06             	shl    esi,0x6
c001bf18:	83 e1 bf             	and    ecx,0xffffffbf
c001bf1b:	09 f1                	or     ecx,esi
c001bf1d:	88 08                	mov    BYTE PTR [eax],cl
c001bf1f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001bf21:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001bf27:	81 c9 05 00 01 00    	or     ecx,0x10005
c001bf2d:	89 08                	mov    DWORD PTR [eax],ecx
c001bf2f:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001bf35:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001bf3b:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001bf41:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001bf44:	50                   	push   eax
c001bf45:	68 90 00 00 00       	push   0x90
c001bf4a:	6a 00                	push   0x0
c001bf4c:	56                   	push   esi
c001bf4d:	e8 7e 45 fe ff       	call   c00004d0 <memset>
c001bf52:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001bf58:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001bf5c:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001bf62:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001bf66:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bf6a:	83 c4 10             	add    esp,0x10
c001bf6d:	48                   	dec    eax
c001bf6e:	25 ff ff 3f 00       	and    eax,0x3fffff
c001bf73:	89 c1                	mov    ecx,eax
c001bf75:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001bf7b:	25 00 00 c0 ff       	and    eax,0xffc00000
c001bf80:	09 c8                	or     eax,ecx
c001bf82:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001bf88:	66 8b 06             	mov    ax,WORD PTR [esi]
c001bf8b:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001bf92:	66 25 00 7f          	and    ax,0x7f00
c001bf96:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bf9a:	66 0d 27 80          	or     ax,0x8027
c001bf9e:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001bfa3:	66 89 06             	mov    WORD PTR [esi],ax
c001bfa6:	19 c0                	sbb    eax,eax
c001bfa8:	83 e0 f0             	and    eax,0xfffffff0
c001bfab:	83 c0 35             	add    eax,0x35
c001bfae:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001bfb1:	89 e8                	mov    eax,ebp
c001bfb3:	c1 e8 10             	shr    eax,0x10
c001bfb6:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001bfb9:	89 e8                	mov    eax,ebp
c001bfbb:	c1 e8 18             	shr    eax,0x18
c001bfbe:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001bfc1:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001bfc5:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001bfc8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bfcc:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001bfcf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bfd3:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001bfd7:	89 d6                	mov    esi,edx
c001bfd9:	31 c0                	xor    eax,eax
c001bfdb:	c1 e6 07             	shl    esi,0x7
c001bfde:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001bfe2:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001bfe8:	80 e1 88             	and    cl,0x88
c001bfeb:	74 0a                	je     c001bff7 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001bfed:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001bff2:	74 0a                	je     c001bffe <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001bff4:	40                   	inc    eax
c001bff5:	eb eb                	jmp    c001bfe2 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001bff7:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001bffc:	75 17                	jne    c001c015 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001bffe:	83 ec 0c             	sub    esp,0xc
c001c001:	68 85 0d 02 c0       	push   0xc0020d85
c001c006:	e8 ff e5 fe ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c001c00b:	83 c4 10             	add    esp,0x10
c001c00e:	b8 01 00 00 00       	mov    eax,0x1
c001c013:	eb 5d                	jmp    c001c072 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001c015:	b8 01 00 00 00       	mov    eax,0x1
c001c01a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001c01e:	c1 e2 07             	shl    edx,0x7
c001c021:	d3 e0                	shl    eax,cl
c001c023:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001c027:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001c02d:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001c033:	85 c8                	test   eax,ecx
c001c035:	74 16                	je     c001c04d <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001c037:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001c03d:	0f ba e1 1e          	bt     ecx,0x1e
c001c041:	73 ea                	jae    c001c02d <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001c043:	83 ec 0c             	sub    esp,0xc
c001c046:	68 93 0d 02 c0       	push   0xc0020d93
c001c04b:	eb b9                	jmp    c001c006 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001c04d:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001c053:	0f ba e0 1e          	bt     eax,0x1e
c001c057:	72 b5                	jb     c001c00e <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001c059:	31 c0                	xor    eax,eax
c001c05b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001c060:	75 10                	jne    c001c072 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001c062:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001c068:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001c06c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c070:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c072:	83 c4 2c             	add    esp,0x2c
c001c075:	5b                   	pop    ebx
c001c076:	5e                   	pop    esi
c001c077:	5f                   	pop    edi
c001c078:	5d                   	pop    ebp
c001c079:	c3                   	ret    

c001c07a <SATA::read(unsigned long long, int, void*)>:
c001c07a:	55                   	push   ebp
c001c07b:	57                   	push   edi
c001c07c:	56                   	push   esi
c001c07d:	be 04 00 00 00       	mov    esi,0x4
c001c082:	53                   	push   ebx
c001c083:	83 ec 0c             	sub    esp,0xc
c001c086:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c08a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c08e:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c091:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c095:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c099:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c09f:	0f 87 1a 02 00 00    	ja     c001c2bf <SATA::read(unsigned long long, int, void*)+0x245>
c001c0a5:	be 06 00 00 00       	mov    esi,0x6
c001c0aa:	85 c9                	test   ecx,ecx
c001c0ac:	0f 84 0d 02 00 00    	je     c001c2bf <SATA::read(unsigned long long, int, void*)+0x245>
c001c0b2:	56                   	push   esi
c001c0b3:	56                   	push   esi
c001c0b4:	6a 00                	push   0x0
c001c0b6:	51                   	push   ecx
c001c0b7:	53                   	push   ebx
c001c0b8:	52                   	push   edx
c001c0b9:	50                   	push   eax
c001c0ba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c0be:	e8 6b fd ff ff       	call   c001be2e <SATA::access(unsigned long long, int, void*, bool)>
c001c0c3:	83 c4 20             	add    esp,0x20
c001c0c6:	89 c6                	mov    esi,eax
c001c0c8:	85 c0                	test   eax,eax
c001c0ca:	0f 85 ea 01 00 00    	jne    c001c2ba <SATA::read(unsigned long long, int, void*)+0x240>
c001c0d0:	01 1d 54 7b 02 c0    	add    DWORD PTR ds:0xc0027b54,ebx
c001c0d6:	bb 0a 00 00 00       	mov    ebx,0xa
c001c0db:	50                   	push   eax
c001c0dc:	50                   	push   eax
c001c0dd:	6a 0f                	push   0xf
c001c0df:	6a 00                	push   0x0
c001c0e1:	e8 87 f2 ff ff       	call   c001b36d <combineColours(unsigned char, unsigned char)>
c001c0e6:	5a                   	pop    edx
c001c0e7:	0f b6 c0             	movzx  eax,al
c001c0ea:	59                   	pop    ecx
c001c0eb:	b9 10 27 00 00       	mov    ecx,0x2710
c001c0f0:	50                   	push   eax
c001c0f1:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c0f6:	99                   	cdq    
c001c0f7:	f7 f9                	idiv   ecx
c001c0f9:	99                   	cdq    
c001c0fa:	f7 fb                	idiv   ebx
c001c0fc:	8d 42 30             	lea    eax,[edx+0x30]
c001c0ff:	0f b6 c0             	movzx  eax,al
c001c102:	50                   	push   eax
c001c103:	e8 54 f2 ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001c108:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c10e:	5f                   	pop    edi
c001c10f:	5d                   	pop    ebp
c001c110:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c115:	6a 0f                	push   0xf
c001c117:	6a 00                	push   0x0
c001c119:	e8 4f f2 ff ff       	call   c001b36d <combineColours(unsigned char, unsigned char)>
c001c11e:	5a                   	pop    edx
c001c11f:	0f b6 c0             	movzx  eax,al
c001c122:	59                   	pop    ecx
c001c123:	50                   	push   eax
c001c124:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c129:	99                   	cdq    
c001c12a:	f7 fd                	idiv   ebp
c001c12c:	99                   	cdq    
c001c12d:	f7 fb                	idiv   ebx
c001c12f:	8d 42 30             	lea    eax,[edx+0x30]
c001c132:	0f b6 c0             	movzx  eax,al
c001c135:	50                   	push   eax
c001c136:	e8 21 f2 ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001c13b:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c141:	5f                   	pop    edi
c001c142:	bf 64 00 00 00       	mov    edi,0x64
c001c147:	58                   	pop    eax
c001c148:	6a 0f                	push   0xf
c001c14a:	6a 00                	push   0x0
c001c14c:	e8 1c f2 ff ff       	call   c001b36d <combineColours(unsigned char, unsigned char)>
c001c151:	5a                   	pop    edx
c001c152:	0f b6 c0             	movzx  eax,al
c001c155:	59                   	pop    ecx
c001c156:	50                   	push   eax
c001c157:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c15c:	99                   	cdq    
c001c15d:	f7 ff                	idiv   edi
c001c15f:	99                   	cdq    
c001c160:	f7 fb                	idiv   ebx
c001c162:	8d 42 30             	lea    eax,[edx+0x30]
c001c165:	0f b6 c0             	movzx  eax,al
c001c168:	50                   	push   eax
c001c169:	e8 ee f1 ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001c16e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c174:	58                   	pop    eax
c001c175:	5a                   	pop    edx
c001c176:	6a 0f                	push   0xf
c001c178:	6a 00                	push   0x0
c001c17a:	e8 ee f1 ff ff       	call   c001b36d <combineColours(unsigned char, unsigned char)>
c001c17f:	59                   	pop    ecx
c001c180:	0f b6 c0             	movzx  eax,al
c001c183:	5a                   	pop    edx
c001c184:	50                   	push   eax
c001c185:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c18a:	99                   	cdq    
c001c18b:	f7 fb                	idiv   ebx
c001c18d:	99                   	cdq    
c001c18e:	f7 fb                	idiv   ebx
c001c190:	8d 42 30             	lea    eax,[edx+0x30]
c001c193:	0f b6 c0             	movzx  eax,al
c001c196:	50                   	push   eax
c001c197:	e8 c0 f1 ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001c19c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c1a2:	59                   	pop    ecx
c001c1a3:	58                   	pop    eax
c001c1a4:	6a 0f                	push   0xf
c001c1a6:	6a 00                	push   0x0
c001c1a8:	e8 c0 f1 ff ff       	call   c001b36d <combineColours(unsigned char, unsigned char)>
c001c1ad:	5a                   	pop    edx
c001c1ae:	0f b6 c0             	movzx  eax,al
c001c1b1:	59                   	pop    ecx
c001c1b2:	50                   	push   eax
c001c1b3:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c1b8:	99                   	cdq    
c001c1b9:	f7 fb                	idiv   ebx
c001c1bb:	8d 42 30             	lea    eax,[edx+0x30]
c001c1be:	0f b6 c0             	movzx  eax,al
c001c1c1:	50                   	push   eax
c001c1c2:	e8 95 f1 ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001c1c7:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c1cd:	58                   	pop    eax
c001c1ce:	5a                   	pop    edx
c001c1cf:	6a 0f                	push   0xf
c001c1d1:	6a 00                	push   0x0
c001c1d3:	e8 95 f1 ff ff       	call   c001b36d <combineColours(unsigned char, unsigned char)>
c001c1d8:	59                   	pop    ecx
c001c1d9:	0f b6 c0             	movzx  eax,al
c001c1dc:	5a                   	pop    edx
c001c1dd:	b9 10 27 00 00       	mov    ecx,0x2710
c001c1e2:	50                   	push   eax
c001c1e3:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c1e8:	99                   	cdq    
c001c1e9:	f7 f9                	idiv   ecx
c001c1eb:	99                   	cdq    
c001c1ec:	f7 fb                	idiv   ebx
c001c1ee:	8d 42 30             	lea    eax,[edx+0x30]
c001c1f1:	0f b6 c0             	movzx  eax,al
c001c1f4:	50                   	push   eax
c001c1f5:	e8 62 f1 ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001c1fa:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c200:	59                   	pop    ecx
c001c201:	58                   	pop    eax
c001c202:	6a 0f                	push   0xf
c001c204:	6a 00                	push   0x0
c001c206:	e8 62 f1 ff ff       	call   c001b36d <combineColours(unsigned char, unsigned char)>
c001c20b:	5a                   	pop    edx
c001c20c:	0f b6 c0             	movzx  eax,al
c001c20f:	59                   	pop    ecx
c001c210:	50                   	push   eax
c001c211:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c216:	99                   	cdq    
c001c217:	f7 fd                	idiv   ebp
c001c219:	99                   	cdq    
c001c21a:	f7 fb                	idiv   ebx
c001c21c:	8d 42 30             	lea    eax,[edx+0x30]
c001c21f:	0f b6 c0             	movzx  eax,al
c001c222:	50                   	push   eax
c001c223:	e8 34 f1 ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001c228:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c22e:	5d                   	pop    ebp
c001c22f:	58                   	pop    eax
c001c230:	6a 0f                	push   0xf
c001c232:	6a 00                	push   0x0
c001c234:	e8 34 f1 ff ff       	call   c001b36d <combineColours(unsigned char, unsigned char)>
c001c239:	5a                   	pop    edx
c001c23a:	0f b6 c0             	movzx  eax,al
c001c23d:	59                   	pop    ecx
c001c23e:	50                   	push   eax
c001c23f:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c244:	99                   	cdq    
c001c245:	f7 ff                	idiv   edi
c001c247:	99                   	cdq    
c001c248:	f7 fb                	idiv   ebx
c001c24a:	8d 42 30             	lea    eax,[edx+0x30]
c001c24d:	0f b6 c0             	movzx  eax,al
c001c250:	50                   	push   eax
c001c251:	e8 06 f1 ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001c256:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c25c:	5f                   	pop    edi
c001c25d:	5d                   	pop    ebp
c001c25e:	6a 0f                	push   0xf
c001c260:	6a 00                	push   0x0
c001c262:	e8 06 f1 ff ff       	call   c001b36d <combineColours(unsigned char, unsigned char)>
c001c267:	5a                   	pop    edx
c001c268:	0f b6 c0             	movzx  eax,al
c001c26b:	59                   	pop    ecx
c001c26c:	50                   	push   eax
c001c26d:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c272:	99                   	cdq    
c001c273:	f7 fb                	idiv   ebx
c001c275:	99                   	cdq    
c001c276:	f7 fb                	idiv   ebx
c001c278:	8d 42 30             	lea    eax,[edx+0x30]
c001c27b:	0f b6 c0             	movzx  eax,al
c001c27e:	50                   	push   eax
c001c27f:	e8 d8 f0 ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001c284:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c28a:	5f                   	pop    edi
c001c28b:	5d                   	pop    ebp
c001c28c:	6a 0f                	push   0xf
c001c28e:	6a 00                	push   0x0
c001c290:	e8 d8 f0 ff ff       	call   c001b36d <combineColours(unsigned char, unsigned char)>
c001c295:	5a                   	pop    edx
c001c296:	0f b6 c0             	movzx  eax,al
c001c299:	59                   	pop    ecx
c001c29a:	50                   	push   eax
c001c29b:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c2a0:	99                   	cdq    
c001c2a1:	f7 fb                	idiv   ebx
c001c2a3:	83 c2 30             	add    edx,0x30
c001c2a6:	0f b6 d2             	movzx  edx,dl
c001c2a9:	52                   	push   edx
c001c2aa:	e8 ad f0 ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001c2af:	83 c4 10             	add    esp,0x10
c001c2b2:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c2b8:	eb 05                	jmp    c001c2bf <SATA::read(unsigned long long, int, void*)+0x245>
c001c2ba:	be 01 00 00 00       	mov    esi,0x1
c001c2bf:	83 c4 0c             	add    esp,0xc
c001c2c2:	89 f0                	mov    eax,esi
c001c2c4:	5b                   	pop    ebx
c001c2c5:	5e                   	pop    esi
c001c2c6:	5f                   	pop    edi
c001c2c7:	5d                   	pop    ebp
c001c2c8:	c3                   	ret    
c001c2c9:	90                   	nop

c001c2ca <SATA::write(unsigned long long, int, void*)>:
c001c2ca:	55                   	push   ebp
c001c2cb:	b8 04 00 00 00       	mov    eax,0x4
c001c2d0:	57                   	push   edi
c001c2d1:	56                   	push   esi
c001c2d2:	53                   	push   ebx
c001c2d3:	83 ec 1c             	sub    esp,0x1c
c001c2d6:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001c2da:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001c2de:	8d 75 ff             	lea    esi,[ebp-0x1]
c001c2e1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c2e5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001c2e9:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001c2ef:	0f 87 32 02 00 00    	ja     c001c527 <SATA::write(unsigned long long, int, void*)+0x25d>
c001c2f5:	b8 06 00 00 00       	mov    eax,0x6
c001c2fa:	85 ff                	test   edi,edi
c001c2fc:	0f 84 25 02 00 00    	je     c001c527 <SATA::write(unsigned long long, int, void*)+0x25d>
c001c302:	89 ee                	mov    esi,ebp
c001c304:	c1 e6 09             	shl    esi,0x9
c001c307:	01 fe                	add    esi,edi
c001c309:	89 c8                	mov    eax,ecx
c001c30b:	89 da                	mov    edx,ebx
c001c30d:	83 c0 01             	add    eax,0x1
c001c310:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c314:	83 d2 00             	adc    edx,0x0
c001c317:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c31b:	50                   	push   eax
c001c31c:	50                   	push   eax
c001c31d:	6a 01                	push   0x1
c001c31f:	57                   	push   edi
c001c320:	81 c7 00 02 00 00    	add    edi,0x200
c001c326:	6a 01                	push   0x1
c001c328:	53                   	push   ebx
c001c329:	51                   	push   ecx
c001c32a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c32e:	e8 fb fa ff ff       	call   c001be2e <SATA::access(unsigned long long, int, void*, bool)>
c001c333:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001c337:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c33b:	83 c4 20             	add    esp,0x20
c001c33e:	39 f7                	cmp    edi,esi
c001c340:	75 c7                	jne    c001c309 <SATA::write(unsigned long long, int, void*)+0x3f>
c001c342:	bb 0a 00 00 00       	mov    ebx,0xa
c001c347:	01 2d 50 7b 02 c0    	add    DWORD PTR ds:0xc0027b50,ebp
c001c34d:	bd 10 27 00 00       	mov    ebp,0x2710
c001c352:	50                   	push   eax
c001c353:	50                   	push   eax
c001c354:	6a 0f                	push   0xf
c001c356:	6a 00                	push   0x0
c001c358:	e8 10 f0 ff ff       	call   c001b36d <combineColours(unsigned char, unsigned char)>
c001c35d:	5a                   	pop    edx
c001c35e:	0f b6 c0             	movzx  eax,al
c001c361:	59                   	pop    ecx
c001c362:	50                   	push   eax
c001c363:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c368:	99                   	cdq    
c001c369:	f7 fd                	idiv   ebp
c001c36b:	99                   	cdq    
c001c36c:	f7 fb                	idiv   ebx
c001c36e:	8d 42 30             	lea    eax,[edx+0x30]
c001c371:	0f b6 c0             	movzx  eax,al
c001c374:	50                   	push   eax
c001c375:	e8 e2 ef ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001c37a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c380:	5e                   	pop    esi
c001c381:	5f                   	pop    edi
c001c382:	bf e8 03 00 00       	mov    edi,0x3e8
c001c387:	6a 0f                	push   0xf
c001c389:	6a 00                	push   0x0
c001c38b:	e8 dd ef ff ff       	call   c001b36d <combineColours(unsigned char, unsigned char)>
c001c390:	5a                   	pop    edx
c001c391:	0f b6 c0             	movzx  eax,al
c001c394:	59                   	pop    ecx
c001c395:	50                   	push   eax
c001c396:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c39b:	99                   	cdq    
c001c39c:	f7 ff                	idiv   edi
c001c39e:	99                   	cdq    
c001c39f:	f7 fb                	idiv   ebx
c001c3a1:	8d 42 30             	lea    eax,[edx+0x30]
c001c3a4:	0f b6 c0             	movzx  eax,al
c001c3a7:	50                   	push   eax
c001c3a8:	e8 af ef ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001c3ad:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c3b3:	5e                   	pop    esi
c001c3b4:	be 64 00 00 00       	mov    esi,0x64
c001c3b9:	58                   	pop    eax
c001c3ba:	6a 0f                	push   0xf
c001c3bc:	6a 00                	push   0x0
c001c3be:	e8 aa ef ff ff       	call   c001b36d <combineColours(unsigned char, unsigned char)>
c001c3c3:	5a                   	pop    edx
c001c3c4:	0f b6 c0             	movzx  eax,al
c001c3c7:	59                   	pop    ecx
c001c3c8:	50                   	push   eax
c001c3c9:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c3ce:	99                   	cdq    
c001c3cf:	f7 fe                	idiv   esi
c001c3d1:	99                   	cdq    
c001c3d2:	f7 fb                	idiv   ebx
c001c3d4:	8d 42 30             	lea    eax,[edx+0x30]
c001c3d7:	0f b6 c0             	movzx  eax,al
c001c3da:	50                   	push   eax
c001c3db:	e8 7c ef ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001c3e0:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c3e6:	58                   	pop    eax
c001c3e7:	5a                   	pop    edx
c001c3e8:	6a 0f                	push   0xf
c001c3ea:	6a 00                	push   0x0
c001c3ec:	e8 7c ef ff ff       	call   c001b36d <combineColours(unsigned char, unsigned char)>
c001c3f1:	59                   	pop    ecx
c001c3f2:	0f b6 c0             	movzx  eax,al
c001c3f5:	5a                   	pop    edx
c001c3f6:	50                   	push   eax
c001c3f7:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c3fc:	99                   	cdq    
c001c3fd:	f7 fb                	idiv   ebx
c001c3ff:	99                   	cdq    
c001c400:	f7 fb                	idiv   ebx
c001c402:	8d 42 30             	lea    eax,[edx+0x30]
c001c405:	0f b6 c0             	movzx  eax,al
c001c408:	50                   	push   eax
c001c409:	e8 4e ef ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001c40e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c414:	59                   	pop    ecx
c001c415:	58                   	pop    eax
c001c416:	6a 0f                	push   0xf
c001c418:	6a 00                	push   0x0
c001c41a:	e8 4e ef ff ff       	call   c001b36d <combineColours(unsigned char, unsigned char)>
c001c41f:	5a                   	pop    edx
c001c420:	0f b6 c0             	movzx  eax,al
c001c423:	59                   	pop    ecx
c001c424:	50                   	push   eax
c001c425:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c42a:	99                   	cdq    
c001c42b:	f7 fb                	idiv   ebx
c001c42d:	83 c2 30             	add    edx,0x30
c001c430:	0f b6 d2             	movzx  edx,dl
c001c433:	52                   	push   edx
c001c434:	e8 23 ef ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001c439:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c43f:	58                   	pop    eax
c001c440:	5a                   	pop    edx
c001c441:	6a 0f                	push   0xf
c001c443:	6a 00                	push   0x0
c001c445:	e8 23 ef ff ff       	call   c001b36d <combineColours(unsigned char, unsigned char)>
c001c44a:	59                   	pop    ecx
c001c44b:	0f b6 c0             	movzx  eax,al
c001c44e:	5a                   	pop    edx
c001c44f:	50                   	push   eax
c001c450:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c455:	99                   	cdq    
c001c456:	f7 fd                	idiv   ebp
c001c458:	99                   	cdq    
c001c459:	f7 fb                	idiv   ebx
c001c45b:	8d 42 30             	lea    eax,[edx+0x30]
c001c45e:	0f b6 c0             	movzx  eax,al
c001c461:	50                   	push   eax
c001c462:	e8 f5 ee ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001c467:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c46d:	59                   	pop    ecx
c001c46e:	5d                   	pop    ebp
c001c46f:	6a 0f                	push   0xf
c001c471:	6a 00                	push   0x0
c001c473:	e8 f5 ee ff ff       	call   c001b36d <combineColours(unsigned char, unsigned char)>
c001c478:	5a                   	pop    edx
c001c479:	0f b6 c0             	movzx  eax,al
c001c47c:	59                   	pop    ecx
c001c47d:	50                   	push   eax
c001c47e:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c483:	99                   	cdq    
c001c484:	f7 ff                	idiv   edi
c001c486:	99                   	cdq    
c001c487:	f7 fb                	idiv   ebx
c001c489:	8d 42 30             	lea    eax,[edx+0x30]
c001c48c:	0f b6 c0             	movzx  eax,al
c001c48f:	50                   	push   eax
c001c490:	e8 c7 ee ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001c495:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c49b:	5f                   	pop    edi
c001c49c:	5d                   	pop    ebp
c001c49d:	6a 0f                	push   0xf
c001c49f:	6a 00                	push   0x0
c001c4a1:	e8 c7 ee ff ff       	call   c001b36d <combineColours(unsigned char, unsigned char)>
c001c4a6:	5a                   	pop    edx
c001c4a7:	0f b6 c0             	movzx  eax,al
c001c4aa:	59                   	pop    ecx
c001c4ab:	50                   	push   eax
c001c4ac:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c4b1:	99                   	cdq    
c001c4b2:	f7 fe                	idiv   esi
c001c4b4:	99                   	cdq    
c001c4b5:	f7 fb                	idiv   ebx
c001c4b7:	8d 42 30             	lea    eax,[edx+0x30]
c001c4ba:	0f b6 c0             	movzx  eax,al
c001c4bd:	50                   	push   eax
c001c4be:	e8 99 ee ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001c4c3:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c4c9:	5e                   	pop    esi
c001c4ca:	5f                   	pop    edi
c001c4cb:	6a 0f                	push   0xf
c001c4cd:	6a 00                	push   0x0
c001c4cf:	e8 99 ee ff ff       	call   c001b36d <combineColours(unsigned char, unsigned char)>
c001c4d4:	5d                   	pop    ebp
c001c4d5:	0f b6 c0             	movzx  eax,al
c001c4d8:	5a                   	pop    edx
c001c4d9:	50                   	push   eax
c001c4da:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c4df:	99                   	cdq    
c001c4e0:	f7 fb                	idiv   ebx
c001c4e2:	99                   	cdq    
c001c4e3:	f7 fb                	idiv   ebx
c001c4e5:	8d 42 30             	lea    eax,[edx+0x30]
c001c4e8:	0f b6 c0             	movzx  eax,al
c001c4eb:	50                   	push   eax
c001c4ec:	e8 6b ee ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001c4f1:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c4f7:	59                   	pop    ecx
c001c4f8:	5e                   	pop    esi
c001c4f9:	6a 0f                	push   0xf
c001c4fb:	6a 00                	push   0x0
c001c4fd:	e8 6b ee ff ff       	call   c001b36d <combineColours(unsigned char, unsigned char)>
c001c502:	5f                   	pop    edi
c001c503:	0f b6 c0             	movzx  eax,al
c001c506:	5d                   	pop    ebp
c001c507:	50                   	push   eax
c001c508:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c50d:	99                   	cdq    
c001c50e:	f7 fb                	idiv   ebx
c001c510:	83 c2 30             	add    edx,0x30
c001c513:	0f b6 d2             	movzx  edx,dl
c001c516:	52                   	push   edx
c001c517:	e8 40 ee ff ff       	call   c001b35c <combineCharAndColour(char, unsigned char)>
c001c51c:	83 c4 10             	add    esp,0x10
c001c51f:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c525:	31 c0                	xor    eax,eax
c001c527:	83 c4 1c             	add    esp,0x1c
c001c52a:	5b                   	pop    ebx
c001c52b:	5e                   	pop    esi
c001c52c:	5f                   	pop    edi
c001c52d:	5d                   	pop    ebp
c001c52e:	c3                   	ret    
c001c52f:	90                   	nop

c001c530 <SATAPI::write(unsigned long long, int, void*)>:
c001c530:	b8 03 00 00 00       	mov    eax,0x3
c001c535:	c3                   	ret    

c001c536 <SATAPI::close(int, int, void*)>:
c001c536:	83 ec 0c             	sub    esp,0xc
c001c539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c53d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c543:	85 c0                	test   eax,eax
c001c545:	74 0c                	je     c001c553 <SATAPI::close(int, int, void*)+0x1d>
c001c547:	83 ec 0c             	sub    esp,0xc
c001c54a:	8b 10                	mov    edx,DWORD PTR [eax]
c001c54c:	50                   	push   eax
c001c54d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c550:	83 c4 10             	add    esp,0x10
c001c553:	31 c0                	xor    eax,eax
c001c555:	83 c4 0c             	add    esp,0xc
c001c558:	c3                   	ret    
c001c559:	90                   	nop

c001c55a <SATAPI::SATAPI()>:
c001c55a:	83 ec 0c             	sub    esp,0xc
c001c55d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c561:	83 ec 04             	sub    esp,0x4
c001c564:	68 00 08 00 00       	push   0x800
c001c569:	68 dc 0d 02 c0       	push   0xc0020ddc
c001c56e:	50                   	push   eax
c001c56f:	e8 a2 f8 fe ff       	call   c000be16 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c574:	83 c4 10             	add    esp,0x10
c001c577:	ba d0 0e 02 c0       	mov    edx,0xc0020ed0
c001c57c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c580:	89 10                	mov    DWORD PTR [eax],edx
c001c582:	90                   	nop
c001c583:	83 c4 0c             	add    esp,0xc
c001c586:	c3                   	ret    
c001c587:	90                   	nop

c001c588 <SATAPI::diskRemoved()>:
c001c588:	c3                   	ret    
c001c589:	90                   	nop

c001c58a <SATAPI::diskInserted()>:
c001c58a:	83 ec 18             	sub    esp,0x18
c001c58d:	68 e8 0d 02 c0       	push   0xc0020de8
c001c592:	e8 73 e0 fe ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c001c597:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c59b:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001c5a2:	83 c4 1c             	add    esp,0x1c
c001c5a5:	c3                   	ret    

c001c5a6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001c5a6:	55                   	push   ebp
c001c5a7:	57                   	push   edi
c001c5a8:	56                   	push   esi
c001c5a9:	53                   	push   ebx
c001c5aa:	83 ec 34             	sub    esp,0x34
c001c5ad:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001c5b1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001c5b5:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001c5b9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c5bd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001c5c1:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001c5c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c5cd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c5d1:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001c5d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c5db:	83 c0 02             	add    eax,0x2
c001c5de:	c1 e0 07             	shl    eax,0x7
c001c5e1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001c5e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c5e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c5ed:	c1 e0 07             	shl    eax,0x7
c001c5f0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001c5f4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c5f8:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001c602:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c606:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001c60c:	e8 51 e5 ff ff       	call   c001ab62 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001c611:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c615:	83 c4 10             	add    esp,0x10
c001c618:	b8 01 00 00 00       	mov    eax,0x1
c001c61d:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001c622:	0f 84 49 02 00 00    	je     c001c871 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2cb>
c001c628:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001c62e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c632:	8b 00                	mov    eax,DWORD PTR [eax]
c001c634:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001c63a:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001c640:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c644:	c1 e1 05             	shl    ecx,0x5
c001c647:	01 c8                	add    eax,ecx
c001c649:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c64b:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001c651:	81 c9 25 00 01 00    	or     ecx,0x10025
c001c657:	89 08                	mov    DWORD PTR [eax],ecx
c001c659:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001c65f:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001c665:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001c66b:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001c66e:	8d 7b 40             	lea    edi,[ebx+0x40]
c001c671:	50                   	push   eax
c001c672:	68 90 00 00 00       	push   0x90
c001c677:	6a 00                	push   0x0
c001c679:	53                   	push   ebx
c001c67a:	e8 51 3e fe ff       	call   c00004d0 <memset>
c001c67f:	b9 0c 00 00 00       	mov    ecx,0xc
c001c684:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001c688:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c68a:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001c690:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001c694:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001c69a:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001c69e:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001c6a2:	48                   	dec    eax
c001c6a3:	25 ff ff 3f 00       	and    eax,0x3fffff
c001c6a8:	89 c1                	mov    ecx,eax
c001c6aa:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001c6b0:	25 00 00 c0 ff       	and    eax,0xffc00000
c001c6b5:	09 c8                	or     eax,ecx
c001c6b7:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001c6bd:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001c6c0:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001c6c7:	66 25 00 7f          	and    ax,0x7f00
c001c6cb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c6cf:	66 0d 27 80          	or     ax,0x8027
c001c6d3:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001c6d7:	66 89 03             	mov    WORD PTR [ebx],ax
c001c6da:	89 d0                	mov    eax,edx
c001c6dc:	c1 ea 18             	shr    edx,0x18
c001c6df:	c1 e8 10             	shr    eax,0x10
c001c6e2:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001c6e5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001c6e8:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001c6ec:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001c6ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c6f3:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001c6f6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001c6fa:	83 c4 10             	add    esp,0x10
c001c6fd:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001c701:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c705:	31 c0                	xor    eax,eax
c001c707:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001c70d:	80 e1 88             	and    cl,0x88
c001c710:	74 0a                	je     c001c71c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x176>
c001c712:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001c717:	74 0a                	je     c001c723 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17d>
c001c719:	40                   	inc    eax
c001c71a:	eb eb                	jmp    c001c707 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x161>
c001c71c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001c721:	75 43                	jne    c001c766 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c001c723:	83 ec 0c             	sub    esp,0xc
c001c726:	68 00 0e 02 c0       	push   0xc0020e00
c001c72b:	e8 da de fe ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c001c730:	58                   	pop    eax
c001c731:	5a                   	pop    edx
c001c732:	68 15 0e 02 c0       	push   0xc0020e15
c001c737:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c001c73d:	e8 aa c0 fe ff       	call   c00087ec <VgaText::puts(char const*)>
c001c742:	59                   	pop    ecx
c001c743:	5b                   	pop    ebx
c001c744:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c748:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001c74e:	e8 a9 e4 ff ff       	call   c001abfc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c753:	5e                   	pop    esi
c001c754:	5f                   	pop    edi
c001c755:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c759:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001c75f:	e8 78 e4 ff ff       	call   c001abdc <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c764:	eb 48                	jmp    c001c7ae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x208>
c001c766:	be 01 00 00 00       	mov    esi,0x1
c001c76b:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001c76f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c773:	d3 e6                	shl    esi,cl
c001c775:	c1 e7 07             	shl    edi,0x7
c001c778:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001c77e:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001c783:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001c787:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001c78d:	85 c6                	test   esi,eax
c001c78f:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001c795:	0f 84 a3 00 00 00    	je     c001c83e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x298>
c001c79b:	0f ba e0 1e          	bt     eax,0x1e
c001c79f:	73 1a                	jae    c001c7bb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001c7a1:	83 ec 0c             	sub    esp,0xc
c001c7a4:	68 27 0e 02 c0       	push   0xc0020e27
c001c7a9:	e8 5c de fe ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c001c7ae:	83 c4 10             	add    esp,0x10
c001c7b1:	b8 01 00 00 00       	mov    eax,0x1
c001c7b6:	e9 b6 00 00 00       	jmp    c001c871 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2cb>
c001c7bb:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001c7c1:	83 f8 0d             	cmp    eax,0xd
c001c7c4:	77 0a                	ja     c001c7d0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x22a>
c001c7c6:	83 ec 0c             	sub    esp,0xc
c001c7c9:	68 c8 00 00 00       	push   0xc8
c001c7ce:	eb 28                	jmp    c001c7f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x252>
c001c7d0:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001c7d6:	83 f8 0d             	cmp    eax,0xd
c001c7d9:	77 0a                	ja     c001c7e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23f>
c001c7db:	83 ec 0c             	sub    esp,0xc
c001c7de:	68 58 02 00 00       	push   0x258
c001c7e3:	eb 13                	jmp    c001c7f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x252>
c001c7e5:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001c7eb:	83 f8 06             	cmp    eax,0x6
c001c7ee:	77 10                	ja     c001c800 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25a>
c001c7f0:	83 ec 0c             	sub    esp,0xc
c001c7f3:	68 dc 05 00 00       	push   0x5dc
c001c7f8:	e8 fb 80 ff ff       	call   c00148f8 <milliTenthSleep(unsigned int)>
c001c7fd:	83 c4 10             	add    esp,0x10
c001c800:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001c804:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001c807:	75 06                	jne    c001c80f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x269>
c001c809:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001c80d:	74 15                	je     c001c824 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c001c80f:	83 fb 06             	cmp    ebx,0x6
c001c812:	77 10                	ja     c001c824 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c001c814:	83 ec 0c             	sub    esp,0xc
c001c817:	68 c4 09 00 00       	push   0x9c4
c001c81c:	e8 d7 80 ff ff       	call   c00148f8 <milliTenthSleep(unsigned int)>
c001c821:	83 c4 10             	add    esp,0x10
c001c824:	43                   	inc    ebx
c001c825:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001c82b:	0f 85 56 ff ff ff    	jne    c001c787 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e1>
c001c831:	83 ec 0c             	sub    esp,0xc
c001c834:	68 3a 0e 02 c0       	push   0xc0020e3a
c001c839:	e9 6b ff ff ff       	jmp    c001c7a9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x203>
c001c83e:	0f ba e0 1e          	bt     eax,0x1e
c001c842:	73 0d                	jae    c001c851 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2ab>
c001c844:	83 ec 0c             	sub    esp,0xc
c001c847:	68 4e 0e 02 c0       	push   0xc0020e4e
c001c84c:	e9 58 ff ff ff       	jmp    c001c7a9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x203>
c001c851:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001c856:	74 17                	je     c001c86f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c9>
c001c858:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001c85d:	74 10                	je     c001c86f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c9>
c001c85f:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001c865:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001c869:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001c86d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c86f:	31 c0                	xor    eax,eax
c001c871:	83 c4 2c             	add    esp,0x2c
c001c874:	5b                   	pop    ebx
c001c875:	5e                   	pop    esi
c001c876:	5f                   	pop    edi
c001c877:	5d                   	pop    ebp
c001c878:	c3                   	ret    
c001c879:	90                   	nop

c001c87a <SATAPI::eject()>:
c001c87a:	57                   	push   edi
c001c87b:	b9 03 00 00 00       	mov    ecx,0x3
c001c880:	83 ec 18             	sub    esp,0x18
c001c883:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c887:	fc                   	cld    
c001c888:	31 c0                	xor    eax,eax
c001c88a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c88c:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001c891:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001c896:	50                   	push   eax
c001c897:	6a 00                	push   0x0
c001c899:	6a 00                	push   0x0
c001c89b:	6a 00                	push   0x0
c001c89d:	6a 00                	push   0x0
c001c89f:	6a 02                	push   0x2
c001c8a1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c8a5:	50                   	push   eax
c001c8a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c8aa:	e8 f7 fc ff ff       	call   c001c5a6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001c8af:	31 c0                	xor    eax,eax
c001c8b1:	83 c4 38             	add    esp,0x38
c001c8b4:	5f                   	pop    edi
c001c8b5:	c3                   	ret    

c001c8b6 <SATAPI::detectMedia()>:
c001c8b6:	53                   	push   ebx
c001c8b7:	83 ec 14             	sub    esp,0x14
c001c8ba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c8be:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001c8c4:	e8 c7 0d ff ff       	call   c000d690 <VCache::writeWriteBuffer()>
c001c8c9:	59                   	pop    ecx
c001c8ca:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001c8d0:	e8 ab 0d ff ff       	call   c000d680 <VCache::invalidateReadBuffer()>
c001c8d5:	c7 04 24 63 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e63
c001c8dc:	e8 29 dd fe ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c001c8e1:	83 c4 10             	add    esp,0x10
c001c8e4:	31 c0                	xor    eax,eax
c001c8e6:	8b 14 85 20 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9be0]
c001c8ed:	85 d2                	test   edx,edx
c001c8ef:	74 0f                	je     c001c900 <SATAPI::detectMedia()+0x4a>
c001c8f1:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001c8f7:	75 07                	jne    c001c900 <SATAPI::detectMedia()+0x4a>
c001c8f9:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001c900:	40                   	inc    eax
c001c901:	83 f8 1a             	cmp    eax,0x1a
c001c904:	75 e0                	jne    c001c8e6 <SATAPI::detectMedia()+0x30>
c001c906:	83 c4 08             	add    esp,0x8
c001c909:	5b                   	pop    ebx
c001c90a:	c3                   	ret    
c001c90b:	90                   	nop

c001c90c <SATAPI::open(int, int, void*)>:
c001c90c:	56                   	push   esi
c001c90d:	53                   	push   ebx
c001c90e:	51                   	push   ecx
c001c90f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c913:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c917:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001c921:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001c927:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c931:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c935:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001c93f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001c945:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001c94c:	e8 00 b2 fe ff       	call   c0007b51 <Phys::allocatePage()>
c001c951:	89 c6                	mov    esi,eax
c001c953:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001c959:	81 c6 00 10 00 00    	add    esi,0x1000
c001c95f:	e8 ed b1 fe ff       	call   c0007b51 <Phys::allocatePage()>
c001c964:	39 c6                	cmp    esi,eax
c001c966:	74 10                	je     c001c978 <SATAPI::open(int, int, void*)+0x6c>
c001c968:	83 ec 0c             	sub    esp,0xc
c001c96b:	68 78 0e 02 c0       	push   0xc0020e78
c001c970:	e8 26 3a ff ff       	call   c001039b <KePanic(char const*)>
c001c975:	83 c4 10             	add    esp,0x10
c001c978:	83 ec 0c             	sub    esp,0xc
c001c97b:	6a 02                	push   0x2
c001c97d:	e8 cb c9 fe ff       	call   c000934d <Virt::allocateKernelVirtualPages(int)>
c001c982:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001c988:	6a 03                	push   0x3
c001c98a:	50                   	push   eax
c001c98b:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001c991:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c001c997:	e8 74 d0 fe ff       	call   c0009a10 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c99c:	83 c4 14             	add    esp,0x14
c001c99f:	68 78 01 00 00       	push   0x178
c001c9a4:	e8 cc ae fe ff       	call   c0007875 <malloc>
c001c9a9:	83 c4 0c             	add    esp,0xc
c001c9ac:	89 c6                	mov    esi,eax
c001c9ae:	6a 00                	push   0x0
c001c9b0:	68 ff ff ff 7f       	push   0x7fffffff
c001c9b5:	6a 00                	push   0x0
c001c9b7:	6a 00                	push   0x0
c001c9b9:	53                   	push   ebx
c001c9ba:	68 8e 0e 02 c0       	push   0xc0020e8e
c001c9bf:	50                   	push   eax
c001c9c0:	e8 2d 01 ff ff       	call   c000caf2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c9c5:	83 c4 14             	add    esp,0x14
c001c9c8:	56                   	push   esi
c001c9c9:	e8 e4 01 ff ff       	call   c000cbb2 <LogicalDisk::assignDriveLetter()>
c001c9ce:	5a                   	pop    edx
c001c9cf:	0f be c0             	movsx  eax,al
c001c9d2:	59                   	pop    ecx
c001c9d3:	50                   	push   eax
c001c9d4:	68 e0 0c 02 c0       	push   0xc0020ce0
c001c9d9:	e8 2c dc fe ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c001c9de:	58                   	pop    eax
c001c9df:	5a                   	pop    edx
c001c9e0:	56                   	push   esi
c001c9e1:	53                   	push   ebx
c001c9e2:	e8 61 f0 fe ff       	call   c000ba48 <Device::addChild(Device*)>
c001c9e7:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001c9ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9f0:	e8 89 f4 fe ff       	call   c000be7e <PhysicalDisk::startCache()>
c001c9f5:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001c9fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9ff:	e8 b2 fe ff ff       	call   c001c8b6 <SATAPI::detectMedia()>
c001ca04:	83 c4 14             	add    esp,0x14
c001ca07:	31 c0                	xor    eax,eax
c001ca09:	5b                   	pop    ebx
c001ca0a:	5e                   	pop    esi
c001ca0b:	c3                   	ret    

c001ca0c <SATAPI::read(unsigned long long, int, void*)>:
c001ca0c:	57                   	push   edi
c001ca0d:	56                   	push   esi
c001ca0e:	53                   	push   ebx
c001ca0f:	83 ec 30             	sub    esp,0x30
c001ca12:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001ca16:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001ca1a:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001ca1e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ca22:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ca26:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ca2a:	83 fe 04             	cmp    esi,0x4
c001ca2d:	7e 10                	jle    c001ca3f <SATAPI::read(unsigned long long, int, void*)+0x33>
c001ca2f:	83 ec 0c             	sub    esp,0xc
c001ca32:	68 9c 0e 02 c0       	push   0xc0020e9c
c001ca37:	e8 5f 39 ff ff       	call   c001039b <KePanic(char const*)>
c001ca3c:	83 c4 10             	add    esp,0x10
c001ca3f:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001ca45:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001ca4b:	51                   	push   ecx
c001ca4c:	50                   	push   eax
c001ca4d:	83 c0 02             	add    eax,0x2
c001ca50:	c1 e0 07             	shl    eax,0x7
c001ca53:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001ca59:	50                   	push   eax
c001ca5a:	52                   	push   edx
c001ca5b:	e8 c6 e1 ff ff       	call   c001ac26 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ca60:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001ca64:	b9 03 00 00 00       	mov    ecx,0x3
c001ca69:	fc                   	cld    
c001ca6a:	31 c0                	xor    eax,eax
c001ca6c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ca6e:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001ca73:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001ca78:	83 c4 0c             	add    esp,0xc
c001ca7b:	6a 00                	push   0x0
c001ca7d:	6a 00                	push   0x0
c001ca7f:	6a 00                	push   0x0
c001ca81:	6a 00                	push   0x0
c001ca83:	6a 02                	push   0x2
c001ca85:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ca89:	50                   	push   eax
c001ca8a:	53                   	push   ebx
c001ca8b:	e8 16 fb ff ff       	call   c001c5a6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ca90:	83 c4 20             	add    esp,0x20
c001ca93:	85 c0                	test   eax,eax
c001ca95:	75 44                	jne    c001cadb <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001ca97:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001ca9b:	b9 03 00 00 00       	mov    ecx,0x3
c001caa0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001caa2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001caa6:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001caab:	0f c8                	bswap  eax
c001caad:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001cab1:	89 f0                	mov    eax,esi
c001cab3:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001cab7:	50                   	push   eax
c001cab8:	56                   	push   esi
c001cab9:	c1 e6 0b             	shl    esi,0xb
c001cabc:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001cac0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cac4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cac8:	56                   	push   esi
c001cac9:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cacd:	50                   	push   eax
c001cace:	53                   	push   ebx
c001cacf:	e8 d2 fa ff ff       	call   c001c5a6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001cad4:	83 c4 20             	add    esp,0x20
c001cad7:	85 c0                	test   eax,eax
c001cad9:	74 14                	je     c001caef <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001cadb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cadf:	83 ec 0c             	sub    esp,0xc
c001cae2:	53                   	push   ebx
c001cae3:	e8 ce fd ff ff       	call   c001c8b6 <SATAPI::detectMedia()>
c001cae8:	83 c4 10             	add    esp,0x10
c001caeb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001caef:	83 c4 30             	add    esp,0x30
c001caf2:	5b                   	pop    ebx
c001caf3:	5e                   	pop    esi
c001caf4:	5f                   	pop    edi
c001caf5:	c3                   	ret    

c001caf6 <IOAPIC::close(int, int, void*)>:
c001caf6:	b8 00 00 00 00       	mov    eax,0x0
c001cafb:	c3                   	ret    

c001cafc <apicGetBase()>:
c001cafc:	55                   	push   ebp
c001cafd:	89 e5                	mov    ebp,esp
c001caff:	83 ec 18             	sub    esp,0x18
c001cb02:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001cb07:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001cb0d:	83 e0 08             	and    eax,0x8
c001cb10:	84 c0                	test   al,al
c001cb12:	75 07                	jne    c001cb1b <apicGetBase()+0x1f>
c001cb14:	b8 00 00 00 00       	mov    eax,0x0
c001cb19:	eb 21                	jmp    c001cb3c <apicGetBase()+0x40>
c001cb1b:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001cb20:	83 ec 08             	sub    esp,0x8
c001cb23:	6a 1b                	push   0x1b
c001cb25:	50                   	push   eax
c001cb26:	e8 81 a3 fe ff       	call   c0006eac <Computer::rdmsr(unsigned int)>
c001cb2b:	83 c4 10             	add    esp,0x10
c001cb2e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001cb31:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001cb34:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001cb37:	25 00 00 ff ff       	and    eax,0xffff0000
c001cb3c:	c9                   	leave  
c001cb3d:	c3                   	ret    

c001cb3e <IOAPIC::IOAPIC()>:
c001cb3e:	83 ec 0c             	sub    esp,0xc
c001cb41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb45:	83 ec 08             	sub    esp,0x8
c001cb48:	68 00 0f 02 c0       	push   0xc0020f00
c001cb4d:	50                   	push   eax
c001cb4e:	e8 8d f0 fe ff       	call   c000bbe0 <Device::Device(char const*)>
c001cb53:	83 c4 10             	add    esp,0x10
c001cb56:	ba 10 0f 02 c0       	mov    edx,0xc0020f10
c001cb5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb5f:	89 10                	mov    DWORD PTR [eax],edx
c001cb61:	90                   	nop
c001cb62:	83 c4 0c             	add    esp,0xc
c001cb65:	c3                   	ret    

c001cb66 <apicOpen()>:
c001cb66:	55                   	push   ebp
c001cb67:	89 e5                	mov    ebp,esp
c001cb69:	53                   	push   ebx
c001cb6a:	83 ec 34             	sub    esp,0x34
c001cb6d:	a0 a0 7b 02 c0       	mov    al,ds:0xc0027ba0
c001cb72:	83 f0 01             	xor    eax,0x1
c001cb75:	84 c0                	test   al,al
c001cb77:	0f 84 9d 00 00 00    	je     c001cc1a <apicOpen()+0xb4>
c001cb7d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001cb81:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c001cb86:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001cb89:	0f 83 84 00 00 00    	jae    c001cc13 <apicOpen()+0xad>
c001cb8f:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001cb96:	83 ec 0c             	sub    esp,0xc
c001cb99:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001cb9c:	e8 d4 ac fe ff       	call   c0007875 <malloc>
c001cba1:	83 c4 10             	add    esp,0x10
c001cba4:	89 c3                	mov    ebx,eax
c001cba6:	83 ec 0c             	sub    esp,0xc
c001cba9:	53                   	push   ebx
c001cbaa:	e8 8f ff ff ff       	call   c001cb3e <IOAPIC::IOAPIC()>
c001cbaf:	83 c4 10             	add    esp,0x10
c001cbb2:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001cbb5:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001cbb8:	25 ff 00 00 00       	and    eax,0xff
c001cbbd:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001cbc0:	89 14 85 80 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8480],edx
c001cbc7:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c001cbcc:	40                   	inc    eax
c001cbcd:	a3 60 7b 02 c0       	mov    ds:0xc0027b60,eax
c001cbd2:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001cbd7:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001cbdd:	83 ec 08             	sub    esp,0x8
c001cbe0:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001cbe3:	50                   	push   eax
c001cbe4:	e8 5f ee fe ff       	call   c000ba48 <Device::addChild(Device*)>
c001cbe9:	83 c4 10             	add    esp,0x10
c001cbec:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001cbef:	8b 00                	mov    eax,DWORD PTR [eax]
c001cbf1:	83 c0 08             	add    eax,0x8
c001cbf4:	8b 10                	mov    edx,DWORD PTR [eax]
c001cbf6:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001cbf9:	25 ff 00 00 00       	and    eax,0xff
c001cbfe:	6a 00                	push   0x0
c001cc00:	6a 00                	push   0x0
c001cc02:	50                   	push   eax
c001cc03:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001cc06:	ff d2                	call   edx
c001cc08:	83 c4 10             	add    esp,0x10
c001cc0b:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001cc0e:	e9 6e ff ff ff       	jmp    c001cb81 <apicOpen()+0x1b>
c001cc13:	c6 05 a0 7b 02 c0 01 	mov    BYTE PTR ds:0xc0027ba0,0x1
c001cc1a:	e8 dd fe ff ff       	call   c001cafc <apicGetBase()>
c001cc1f:	05 f0 00 00 00       	add    eax,0xf0
c001cc24:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001cc27:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001cc2a:	8b 00                	mov    eax,DWORD PTR [eax]
c001cc2c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001cc2f:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001cc36:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001cc3d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001cc40:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001cc43:	89 10                	mov    DWORD PTR [eax],edx
c001cc45:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001cc4c:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c001cc51:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001cc54:	7d 70                	jge    c001ccc6 <apicOpen()+0x160>
c001cc56:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001cc59:	8b 04 85 e0 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9920]
c001cc60:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001cc63:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001cc66:	8b 04 85 e0 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9920]
c001cc6d:	c1 e8 08             	shr    eax,0x8
c001cc70:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001cc74:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001cc77:	8b 04 85 e0 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9920]
c001cc7e:	c1 e8 18             	shr    eax,0x18
c001cc81:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001cc84:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001cc88:	75 37                	jne    c001ccc1 <apicOpen()+0x15b>
c001cc8a:	e8 6d fe ff ff       	call   c001cafc <apicGetBase()>
c001cc8f:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001cc93:	75 07                	jne    c001cc9c <apicOpen()+0x136>
c001cc95:	ba 60 03 00 00       	mov    edx,0x360
c001cc9a:	eb 05                	jmp    c001cca1 <apicOpen()+0x13b>
c001cc9c:	ba 50 03 00 00       	mov    edx,0x350
c001cca1:	01 d0                	add    eax,edx
c001cca3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001cca6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001cca9:	8b 00                	mov    eax,DWORD PTR [eax]
c001ccab:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001ccae:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001ccb5:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001ccb9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ccbc:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ccbf:	89 10                	mov    DWORD PTR [eax],edx
c001ccc1:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001ccc4:	eb 86                	jmp    c001cc4c <apicOpen()+0xe6>
c001ccc6:	90                   	nop
c001ccc7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ccca:	c9                   	leave  
c001cccb:	c3                   	ret    

c001cccc <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001cccc:	55                   	push   ebp
c001cccd:	89 e5                	mov    ebp,esp
c001cccf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ccd2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ccd8:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ccdb:	72 1d                	jb     c001ccfa <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ccdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cce0:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001cce6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cce9:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ccef:	01 d0                	add    eax,edx
c001ccf1:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ccf4:	73 04                	jae    c001ccfa <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ccf6:	b0 01                	mov    al,0x1
c001ccf8:	eb 02                	jmp    c001ccfc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ccfa:	b0 00                	mov    al,0x0
c001ccfc:	5d                   	pop    ebp
c001ccfd:	c3                   	ret    

c001ccfe <IOAPIC::read(int)>:
c001ccfe:	55                   	push   ebp
c001ccff:	89 e5                	mov    ebp,esp
c001cd01:	83 ec 10             	sub    esp,0x10
c001cd04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cd07:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001cd0d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001cd10:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001cd13:	31 d2                	xor    edx,edx
c001cd15:	88 c2                	mov    dl,al
c001cd17:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001cd1a:	89 10                	mov    DWORD PTR [eax],edx
c001cd1c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001cd1f:	83 c0 10             	add    eax,0x10
c001cd22:	8b 00                	mov    eax,DWORD PTR [eax]
c001cd24:	c9                   	leave  
c001cd25:	c3                   	ret    

c001cd26 <IOAPIC::open(int, int, void*)>:
c001cd26:	55                   	push   ebp
c001cd27:	89 e5                	mov    ebp,esp
c001cd29:	57                   	push   edi
c001cd2a:	56                   	push   esi
c001cd2b:	53                   	push   ebx
c001cd2c:	83 ec 04             	sub    esp,0x4
c001cd2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cd32:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001cd35:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001cd3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cd3e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cd44:	8b 14 85 c0 67 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9840]
c001cd4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cd4e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001cd54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cd57:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cd5d:	8b 14 85 40 68 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd97c0]
c001cd64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cd67:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cd6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cd70:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001cd76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cd79:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001cd7f:	89 c6                	mov    esi,eax
c001cd81:	81 e6 ff 00 00 00    	and    esi,0xff
c001cd87:	89 d0                	mov    eax,edx
c001cd89:	ba 00 00 00 00       	mov    edx,0x0
c001cd8e:	89 c7                	mov    edi,eax
c001cd90:	83 e7 ff             	and    edi,0xffffffff
c001cd93:	89 f9                	mov    ecx,edi
c001cd95:	89 d0                	mov    eax,edx
c001cd97:	25 ff 00 00 00       	and    eax,0xff
c001cd9c:	89 c3                	mov    ebx,eax
c001cd9e:	89 c8                	mov    eax,ecx
c001cda0:	89 da                	mov    edx,ebx
c001cda2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001cda5:	8d 5e 08             	lea    ebx,[esi+0x8]
c001cda8:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001cdac:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001cdb0:	83 e0 00             	and    eax,0x0
c001cdb3:	09 d0                	or     eax,edx
c001cdb5:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001cdb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cdbc:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001cdc2:	8d 50 01             	lea    edx,[eax+0x1]
c001cdc5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001cdc8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001cdce:	31 d2                	xor    edx,edx
c001cdd0:	88 c2                	mov    dl,al
c001cdd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cdd5:	83 c2 08             	add    edx,0x8
c001cdd8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001cddc:	81 e1 ff 00 00 00    	and    ecx,0xff
c001cde2:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001cde8:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001cdec:	6a 01                	push   0x1
c001cdee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001cdf1:	e8 08 ff ff ff       	call   c001ccfe <IOAPIC::read(int)>
c001cdf6:	83 c4 08             	add    esp,0x8
c001cdf9:	c1 f8 10             	sar    eax,0x10
c001cdfc:	25 ff 00 00 00       	and    eax,0xff
c001ce01:	8d 50 01             	lea    edx,[eax+0x1]
c001ce04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ce07:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ce0d:	b8 00 00 00 00       	mov    eax,0x0
c001ce12:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ce15:	5b                   	pop    ebx
c001ce16:	5e                   	pop    esi
c001ce17:	5f                   	pop    edi
c001ce18:	5d                   	pop    ebp
c001ce19:	c3                   	ret    

c001ce1a <IOAPIC::write(int, int)>:
c001ce1a:	55                   	push   ebp
c001ce1b:	89 e5                	mov    ebp,esp
c001ce1d:	83 ec 10             	sub    esp,0x10
c001ce20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ce23:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ce29:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ce2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ce2f:	31 d2                	xor    edx,edx
c001ce31:	88 c2                	mov    dl,al
c001ce33:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ce36:	89 10                	mov    DWORD PTR [eax],edx
c001ce38:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ce3b:	8d 50 10             	lea    edx,[eax+0x10]
c001ce3e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ce41:	89 02                	mov    DWORD PTR [edx],eax
c001ce43:	90                   	nop
c001ce44:	c9                   	leave  
c001ce45:	c3                   	ret    

c001ce46 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ce46:	55                   	push   ebp
c001ce47:	89 e5                	mov    ebp,esp
c001ce49:	53                   	push   ebx
c001ce4a:	83 ec 2c             	sub    esp,0x2c
c001ce4d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ce50:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ce53:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ce56:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ce59:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ce5c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ce5f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ce62:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ce65:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ce68:	88 d8                	mov    al,bl
c001ce6a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001ce6d:	88 c8                	mov    al,cl
c001ce6f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ce72:	88 d0                	mov    al,dl
c001ce74:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ce77:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001ce7a:	25 ff 00 00 00       	and    eax,0xff
c001ce7f:	83 c0 08             	add    eax,0x8
c001ce82:	01 c0                	add    eax,eax
c001ce84:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ce87:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001ce8a:	25 ff 00 00 00       	and    eax,0xff
c001ce8f:	83 c0 08             	add    eax,0x8
c001ce92:	01 c0                	add    eax,eax
c001ce94:	40                   	inc    eax
c001ce95:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ce98:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ce9b:	50                   	push   eax
c001ce9c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ce9f:	e8 5a fe ff ff       	call   c001ccfe <IOAPIC::read(int)>
c001cea4:	83 c4 08             	add    esp,0x8
c001cea7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ceaa:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001ceb1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ceb4:	c1 e0 18             	shl    eax,0x18
c001ceb7:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001ceba:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001cebd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001cec0:	52                   	push   edx
c001cec1:	50                   	push   eax
c001cec2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001cec5:	e8 50 ff ff ff       	call   c001ce1a <IOAPIC::write(int, int)>
c001ceca:	83 c4 0c             	add    esp,0xc
c001cecd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ced0:	50                   	push   eax
c001ced1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ced4:	e8 25 fe ff ff       	call   c001ccfe <IOAPIC::read(int)>
c001ced9:	83 c4 08             	add    esp,0x8
c001cedc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001cedf:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001cee6:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001ceed:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001cef4:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001cef8:	74 09                	je     c001cf03 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001cefa:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001cf01:	eb 07                	jmp    c001cf0a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001cf03:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001cf0a:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001cf0e:	74 09                	je     c001cf19 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001cf10:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001cf17:	eb 07                	jmp    c001cf20 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001cf19:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001cf20:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001cf27:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001cf2a:	25 ff 00 00 00       	and    eax,0xff
c001cf2f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001cf32:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001cf35:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001cf38:	52                   	push   edx
c001cf39:	50                   	push   eax
c001cf3a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001cf3d:	e8 d8 fe ff ff       	call   c001ce1a <IOAPIC::write(int, int)>
c001cf42:	83 c4 0c             	add    esp,0xc
c001cf45:	90                   	nop
c001cf46:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001cf49:	c9                   	leave  
c001cf4a:	c3                   	ret    
c001cf4b:	90                   	nop

c001cf4c <APICTimer::close(int, int, void*)>:
c001cf4c:	b8 00 00 00 00       	mov    eax,0x0
c001cf51:	c3                   	ret    
c001cf52:	66 90                	xchg   ax,ax

c001cf54 <apicTimerHandler(regs*, void*)>:
c001cf54:	83 ec 0c             	sub    esp,0xc
c001cf57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf5b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cf5d:	b8 10 27 00 00       	mov    eax,0x2710
c001cf62:	ba 00 00 00 00       	mov    edx,0x0
c001cf67:	f7 f1                	div    ecx
c001cf69:	83 ec 0c             	sub    esp,0xc
c001cf6c:	50                   	push   eax
c001cf6d:	e8 36 04 ff ff       	call   c000d3a8 <timerHandler(unsigned int)>
c001cf72:	83 c4 10             	add    esp,0x10
c001cf75:	90                   	nop
c001cf76:	83 c4 0c             	add    esp,0xc
c001cf79:	c3                   	ret    
c001cf7a:	66 90                	xchg   ax,ax

c001cf7c <APICTimer::open(int, int, void*)>:
c001cf7c:	83 ec 0c             	sub    esp,0xc
c001cf7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf83:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf85:	83 c0 24             	add    eax,0x24
c001cf88:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf8a:	83 ec 08             	sub    esp,0x8
c001cf8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf95:	ff d0                	call   eax
c001cf97:	83 c4 10             	add    esp,0x10
c001cf9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf9e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cfa2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001cfa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001cfb0:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001cfb6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001cfba:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001cfc0:	83 ec 0c             	sub    esp,0xc
c001cfc3:	51                   	push   ecx
c001cfc4:	6a 01                	push   0x1
c001cfc6:	68 54 cf 01 c0       	push   0xc001cf54
c001cfcb:	52                   	push   edx
c001cfcc:	50                   	push   eax
c001cfcd:	e8 22 ea fe ff       	call   c000b9f4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cfd2:	83 c4 20             	add    esp,0x20
c001cfd5:	89 c2                	mov    edx,eax
c001cfd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfdb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001cfe1:	b8 00 00 00 00       	mov    eax,0x0
c001cfe6:	83 c4 0c             	add    esp,0xc
c001cfe9:	c3                   	ret    
c001cfea:	66 90                	xchg   ax,ax

c001cfec <APICTimer::write(int)>:
c001cfec:	83 ec 0c             	sub    esp,0xc
c001cfef:	83 ec 0c             	sub    esp,0xc
c001cff2:	68 34 0f 02 c0       	push   0xc0020f34
c001cff7:	e8 9f 33 ff ff       	call   c001039b <KePanic(char const*)>
c001cffc:	83 c4 10             	add    esp,0x10
c001cfff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d003:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d007:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d00d:	90                   	nop
c001d00e:	83 c4 0c             	add    esp,0xc
c001d011:	c3                   	ret    
c001d012:	66 90                	xchg   ax,ax

c001d014 <APICTimer::APICTimer()>:
c001d014:	83 ec 0c             	sub    esp,0xc
c001d017:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d01b:	83 ec 08             	sub    esp,0x8
c001d01e:	68 44 0f 02 c0       	push   0xc0020f44
c001d023:	50                   	push   eax
c001d024:	e8 b3 02 ff ff       	call   c000d2dc <Timer::Timer(char const*)>
c001d029:	83 c4 10             	add    esp,0x10
c001d02c:	ba 58 0f 02 c0       	mov    edx,0xc0020f58
c001d031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d035:	89 10                	mov    DWORD PTR [eax],edx
c001d037:	90                   	nop
c001d038:	83 c4 0c             	add    esp,0xc
c001d03b:	c3                   	ret    

c001d03c <PIT::write(int)>:
c001d03c:	83 ec 10             	sub    esp,0x10
c001d03f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d043:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d047:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d04d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d051:	a3 a4 7b 02 c0       	mov    ds:0xc0027ba4,eax
c001d056:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001d05b:	99                   	cdq    
c001d05c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001d060:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d064:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001d06b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001d070:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001d074:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001d079:	ee                   	out    dx,al
c001d07a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d07e:	25 ff 00 00 00       	and    eax,0xff
c001d083:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001d08a:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001d08e:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001d092:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001d097:	ee                   	out    dx,al
c001d098:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d09c:	c1 f8 08             	sar    eax,0x8
c001d09f:	25 ff 00 00 00       	and    eax,0xff
c001d0a4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001d0ab:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001d0af:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001d0b3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001d0b8:	ee                   	out    dx,al
c001d0b9:	90                   	nop
c001d0ba:	83 c4 10             	add    esp,0x10
c001d0bd:	c3                   	ret    
c001d0be:	66 90                	xchg   ax,ax

c001d0c0 <pitHandler(regs*, void*)>:
c001d0c0:	83 ec 0c             	sub    esp,0xc
c001d0c3:	8b 0d a4 7b 02 c0    	mov    ecx,DWORD PTR ds:0xc0027ba4
c001d0c9:	b8 10 27 00 00       	mov    eax,0x2710
c001d0ce:	99                   	cdq    
c001d0cf:	f7 f9                	idiv   ecx
c001d0d1:	83 ec 0c             	sub    esp,0xc
c001d0d4:	50                   	push   eax
c001d0d5:	e8 ce 02 ff ff       	call   c000d3a8 <timerHandler(unsigned int)>
c001d0da:	83 c4 10             	add    esp,0x10
c001d0dd:	90                   	nop
c001d0de:	83 c4 0c             	add    esp,0xc
c001d0e1:	c3                   	ret    
c001d0e2:	66 90                	xchg   ax,ax

c001d0e4 <PIT::open(int, int, void*)>:
c001d0e4:	83 ec 0c             	sub    esp,0xc
c001d0e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0eb:	8b 00                	mov    eax,DWORD PTR [eax]
c001d0ed:	83 c0 24             	add    eax,0x24
c001d0f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001d0f2:	83 ec 08             	sub    esp,0x8
c001d0f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0fd:	ff d0                	call   eax
c001d0ff:	83 c4 10             	add    esp,0x10
c001d102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d106:	83 ec 0c             	sub    esp,0xc
c001d109:	6a 00                	push   0x0
c001d10b:	6a 01                	push   0x1
c001d10d:	68 c0 d0 01 c0       	push   0xc001d0c0
c001d112:	6a 00                	push   0x0
c001d114:	50                   	push   eax
c001d115:	e8 da e8 fe ff       	call   c000b9f4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d11a:	83 c4 20             	add    esp,0x20
c001d11d:	89 c2                	mov    edx,eax
c001d11f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d123:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001d129:	b8 00 00 00 00       	mov    eax,0x0
c001d12e:	83 c4 0c             	add    esp,0xc
c001d131:	c3                   	ret    
c001d132:	66 90                	xchg   ax,ax

c001d134 <PIT::close(int, int, void*)>:
c001d134:	83 ec 0c             	sub    esp,0xc
c001d137:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d13b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001d145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d149:	6a 01                	push   0x1
c001d14b:	68 c0 d0 01 c0       	push   0xc001d0c0
c001d150:	6a 00                	push   0x0
c001d152:	50                   	push   eax
c001d153:	e8 d2 e8 fe ff       	call   c000ba2a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001d158:	83 c4 10             	add    esp,0x10
c001d15b:	b8 00 00 00 00       	mov    eax,0x0
c001d160:	83 c4 0c             	add    esp,0xc
c001d163:	c3                   	ret    

c001d164 <PIT::PIT()>:
c001d164:	83 ec 0c             	sub    esp,0xc
c001d167:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d16b:	83 ec 08             	sub    esp,0x8
c001d16e:	68 80 0f 02 c0       	push   0xc0020f80
c001d173:	50                   	push   eax
c001d174:	e8 63 01 ff ff       	call   c000d2dc <Timer::Timer(char const*)>
c001d179:	83 c4 10             	add    esp,0x10
c001d17c:	ba a8 0f 02 c0       	mov    edx,0xc0020fa8
c001d181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d185:	89 10                	mov    DWORD PTR [eax],edx
c001d187:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d18b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d191:	31 d2                	xor    edx,edx
c001d193:	88 c2                	mov    dl,al
c001d195:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d199:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001d1a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1a4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d1aa:	31 d2                	xor    edx,edx
c001d1ac:	88 c2                	mov    dl,al
c001d1ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1b2:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001d1b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1bb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d1c1:	8d 50 01             	lea    edx,[eax+0x1]
c001d1c4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d1c8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d1ce:	31 d2                	xor    edx,edx
c001d1d0:	88 c2                	mov    dl,al
c001d1d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1d6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d1da:	83 e1 3f             	and    ecx,0x3f
c001d1dd:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d1e1:	90                   	nop
c001d1e2:	83 c4 0c             	add    esp,0xc
c001d1e5:	c3                   	ret    
c001d1e6:	66 90                	xchg   ax,ax
c001d1e8:	66 90                	xchg   ax,ax
c001d1ea:	66 90                	xchg   ax,ax
c001d1ec:	66 90                	xchg   ax,ax
c001d1ee:	66 90                	xchg   ax,ax

c001d1f0 <avxDetect>:
c001d1f0:	b8 01 00 00 00       	mov    eax,0x1
c001d1f5:	0f a2                	cpuid  
c001d1f7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001d1fd:	74 15                	je     c001d214 <avxDetect.noAVX>
c001d1ff:	b8 01 00 00 00       	mov    eax,0x1
c001d204:	0f a2                	cpuid  
c001d206:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001d20c:	74 06                	je     c001d214 <avxDetect.noAVX>
c001d20e:	b8 01 00 00 00       	mov    eax,0x1
c001d213:	c3                   	ret    

c001d214 <avxDetect.noAVX>:
c001d214:	b8 00 00 00 00       	mov    eax,0x0
c001d219:	c3                   	ret    

c001d21a <avxSave>:
c001d21a:	53                   	push   ebx
c001d21b:	52                   	push   edx
c001d21c:	31 c0                	xor    eax,eax
c001d21e:	48                   	dec    eax
c001d21f:	89 c2                	mov    edx,eax
c001d221:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d225:	0f ae 23             	xsave  [ebx]
c001d228:	5a                   	pop    edx
c001d229:	5b                   	pop    ebx
c001d22a:	c3                   	ret    

c001d22b <avxLoad>:
c001d22b:	53                   	push   ebx
c001d22c:	52                   	push   edx
c001d22d:	31 c0                	xor    eax,eax
c001d22f:	48                   	dec    eax
c001d230:	89 c2                	mov    edx,eax
c001d232:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d236:	0f ae 2b             	xrstor [ebx]
c001d239:	5a                   	pop    edx
c001d23a:	5b                   	pop    ebx
c001d23b:	c3                   	ret    

c001d23c <avxInit>:
c001d23c:	e8 b7 02 00 00       	call   c001d4f8 <sseInit>
c001d241:	50                   	push   eax
c001d242:	51                   	push   ecx
c001d243:	0f 20 e0             	mov    eax,cr4
c001d246:	0d 00 00 04 00       	or     eax,0x40000
c001d24b:	0f 22 e0             	mov    cr4,eax
c001d24e:	31 c9                	xor    ecx,ecx
c001d250:	0f 01 d0             	xgetbv 
c001d253:	0d 07 00 00 00       	or     eax,0x7
c001d258:	0f 01 d1             	xsetbv 
c001d25b:	59                   	pop    ecx
c001d25c:	58                   	pop    eax
c001d25d:	c3                   	ret    

c001d25e <avxClose>:
c001d25e:	c3                   	ret    

c001d25f <wouldSheSayYes>:
c001d25f:	c3                   	ret    
c001d260:	49                   	dec    ecx
c001d261:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001d265:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001d269:	75 20                	jne    c001d28b <isr0+0xb>
c001d26b:	4e                   	dec    esi
c001d26c:	79 61                	jns    c001d2cf <isr7+0x3>
c001d26e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001d273:	66 90                	xchg   ax,ax
c001d275:	66 90                	xchg   ax,ax
c001d277:	66 90                	xchg   ax,ax
c001d279:	66 90                	xchg   ax,ax
c001d27b:	66 90                	xchg   ax,ax
c001d27d:	66 90                	xchg   ax,ax
c001d27f:	90                   	nop

c001d280 <isr0>:
c001d280:	fa                   	cli    
c001d281:	68 00 00 00 00       	push   0x0
c001d286:	68 00 00 00 00       	push   0x0
c001d28b:	e9 44 01 00 00       	jmp    c001d3d4 <int_common_stub>

c001d290 <isr1>:
c001d290:	fa                   	cli    
c001d291:	6a 00                	push   0x0
c001d293:	6a 01                	push   0x1
c001d295:	e9 3a 01 00 00       	jmp    c001d3d4 <int_common_stub>

c001d29a <isr2>:
c001d29a:	fa                   	cli    
c001d29b:	6a 00                	push   0x0
c001d29d:	6a 02                	push   0x2
c001d29f:	e9 30 01 00 00       	jmp    c001d3d4 <int_common_stub>

c001d2a4 <isr3>:
c001d2a4:	fa                   	cli    
c001d2a5:	6a 00                	push   0x0
c001d2a7:	6a 03                	push   0x3
c001d2a9:	e9 26 01 00 00       	jmp    c001d3d4 <int_common_stub>

c001d2ae <isr4>:
c001d2ae:	fa                   	cli    
c001d2af:	6a 00                	push   0x0
c001d2b1:	6a 04                	push   0x4
c001d2b3:	e9 1c 01 00 00       	jmp    c001d3d4 <int_common_stub>

c001d2b8 <isr5>:
c001d2b8:	fa                   	cli    
c001d2b9:	6a 00                	push   0x0
c001d2bb:	6a 05                	push   0x5
c001d2bd:	e9 12 01 00 00       	jmp    c001d3d4 <int_common_stub>

c001d2c2 <isr6>:
c001d2c2:	fa                   	cli    
c001d2c3:	6a 00                	push   0x0
c001d2c5:	6a 06                	push   0x6
c001d2c7:	e9 08 01 00 00       	jmp    c001d3d4 <int_common_stub>

c001d2cc <isr7>:
c001d2cc:	fa                   	cli    
c001d2cd:	6a 00                	push   0x0
c001d2cf:	6a 07                	push   0x7
c001d2d1:	e9 fe 00 00 00       	jmp    c001d3d4 <int_common_stub>

c001d2d6 <isr8>:
c001d2d6:	fa                   	cli    
c001d2d7:	6a 08                	push   0x8
c001d2d9:	e9 f6 00 00 00       	jmp    c001d3d4 <int_common_stub>

c001d2de <isr9>:
c001d2de:	fa                   	cli    
c001d2df:	6a 00                	push   0x0
c001d2e1:	6a 09                	push   0x9
c001d2e3:	e9 ec 00 00 00       	jmp    c001d3d4 <int_common_stub>

c001d2e8 <isr10>:
c001d2e8:	fa                   	cli    
c001d2e9:	6a 0a                	push   0xa
c001d2eb:	e9 e4 00 00 00       	jmp    c001d3d4 <int_common_stub>

c001d2f0 <isr11>:
c001d2f0:	fa                   	cli    
c001d2f1:	6a 0b                	push   0xb
c001d2f3:	e9 dc 00 00 00       	jmp    c001d3d4 <int_common_stub>

c001d2f8 <isr12>:
c001d2f8:	fa                   	cli    
c001d2f9:	6a 0c                	push   0xc
c001d2fb:	e9 d4 00 00 00       	jmp    c001d3d4 <int_common_stub>

c001d300 <isr13>:
c001d300:	fa                   	cli    
c001d301:	6a 0d                	push   0xd
c001d303:	e9 cc 00 00 00       	jmp    c001d3d4 <int_common_stub>

c001d308 <isr14>:
c001d308:	fa                   	cli    
c001d309:	6a 0e                	push   0xe
c001d30b:	e9 c4 00 00 00       	jmp    c001d3d4 <int_common_stub>

c001d310 <isr15>:
c001d310:	fa                   	cli    
c001d311:	6a 00                	push   0x0
c001d313:	6a 0f                	push   0xf
c001d315:	e9 ba 00 00 00       	jmp    c001d3d4 <int_common_stub>

c001d31a <isr16>:
c001d31a:	fa                   	cli    
c001d31b:	6a 00                	push   0x0
c001d31d:	6a 10                	push   0x10
c001d31f:	e9 b0 00 00 00       	jmp    c001d3d4 <int_common_stub>

c001d324 <isr17>:
c001d324:	fa                   	cli    
c001d325:	6a 00                	push   0x0
c001d327:	6a 11                	push   0x11
c001d329:	e9 a6 00 00 00       	jmp    c001d3d4 <int_common_stub>

c001d32e <isr18>:
c001d32e:	fa                   	cli    
c001d32f:	6a 00                	push   0x0
c001d331:	6a 12                	push   0x12
c001d333:	e9 9c 00 00 00       	jmp    c001d3d4 <int_common_stub>

c001d338 <irq3>:
c001d338:	fa                   	cli    
c001d339:	6a 00                	push   0x0
c001d33b:	6a 23                	push   0x23
c001d33d:	e9 92 00 00 00       	jmp    c001d3d4 <int_common_stub>

c001d342 <irq4>:
c001d342:	fa                   	cli    
c001d343:	6a 00                	push   0x0
c001d345:	6a 24                	push   0x24
c001d347:	e9 88 00 00 00       	jmp    c001d3d4 <int_common_stub>

c001d34c <irq5>:
c001d34c:	fa                   	cli    
c001d34d:	6a 00                	push   0x0
c001d34f:	6a 25                	push   0x25
c001d351:	e9 7e 00 00 00       	jmp    c001d3d4 <int_common_stub>

c001d356 <irq6>:
c001d356:	fa                   	cli    
c001d357:	6a 00                	push   0x0
c001d359:	6a 26                	push   0x26
c001d35b:	e9 74 00 00 00       	jmp    c001d3d4 <int_common_stub>

c001d360 <irq7>:
c001d360:	fa                   	cli    
c001d361:	6a 00                	push   0x0
c001d363:	6a 27                	push   0x27
c001d365:	e9 6a 00 00 00       	jmp    c001d3d4 <int_common_stub>

c001d36a <irq8>:
c001d36a:	fa                   	cli    
c001d36b:	6a 00                	push   0x0
c001d36d:	6a 28                	push   0x28
c001d36f:	e9 60 00 00 00       	jmp    c001d3d4 <int_common_stub>

c001d374 <irq9>:
c001d374:	fa                   	cli    
c001d375:	6a 00                	push   0x0
c001d377:	6a 29                	push   0x29
c001d379:	e9 56 00 00 00       	jmp    c001d3d4 <int_common_stub>

c001d37e <irq10>:
c001d37e:	fa                   	cli    
c001d37f:	6a 00                	push   0x0
c001d381:	6a 2a                	push   0x2a
c001d383:	e9 4c 00 00 00       	jmp    c001d3d4 <int_common_stub>

c001d388 <irq11>:
c001d388:	fa                   	cli    
c001d389:	6a 00                	push   0x0
c001d38b:	6a 2b                	push   0x2b
c001d38d:	e9 42 00 00 00       	jmp    c001d3d4 <int_common_stub>

c001d392 <irq12>:
c001d392:	fa                   	cli    
c001d393:	6a 00                	push   0x0
c001d395:	6a 2c                	push   0x2c
c001d397:	e9 38 00 00 00       	jmp    c001d3d4 <int_common_stub>

c001d39c <irq13>:
c001d39c:	fa                   	cli    
c001d39d:	6a 00                	push   0x0
c001d39f:	6a 2d                	push   0x2d
c001d3a1:	e9 2e 00 00 00       	jmp    c001d3d4 <int_common_stub>

c001d3a6 <irq14>:
c001d3a6:	fa                   	cli    
c001d3a7:	6a 00                	push   0x0
c001d3a9:	6a 2e                	push   0x2e
c001d3ab:	e9 24 00 00 00       	jmp    c001d3d4 <int_common_stub>

c001d3b0 <irq15>:
c001d3b0:	fa                   	cli    
c001d3b1:	6a 00                	push   0x0
c001d3b3:	6a 2f                	push   0x2f
c001d3b5:	e9 1a 00 00 00       	jmp    c001d3d4 <int_common_stub>

c001d3ba <irq1>:
c001d3ba:	fa                   	cli    
c001d3bb:	6a 00                	push   0x0
c001d3bd:	6a 21                	push   0x21
c001d3bf:	eb 13                	jmp    c001d3d4 <int_common_stub>

c001d3c1 <irq2>:
c001d3c1:	fa                   	cli    
c001d3c2:	6a 00                	push   0x0
c001d3c4:	6a 22                	push   0x22
c001d3c6:	eb 0c                	jmp    c001d3d4 <int_common_stub>

c001d3c8 <isr96>:
c001d3c8:	6a 00                	push   0x0
c001d3ca:	6a 60                	push   0x60
c001d3cc:	fb                   	sti    
c001d3cd:	eb 37                	jmp    c001d406 <syscall_common_stub>

c001d3cf <irq0>:
c001d3cf:	fa                   	cli    
c001d3d0:	6a 00                	push   0x0
c001d3d2:	6a 20                	push   0x20

c001d3d4 <int_common_stub>:
c001d3d4:	60                   	pusha  
c001d3d5:	1e                   	push   ds
c001d3d6:	06                   	push   es
c001d3d7:	0f a0                	push   fs
c001d3d9:	0f a8                	push   gs
c001d3db:	66 b8 10 00          	mov    ax,0x10
c001d3df:	66 8e d8             	mov    ds,ax
c001d3e2:	66 8e c0             	mov    es,ax
c001d3e5:	66 8e e0             	mov    fs,ax
c001d3e8:	66 8e e8             	mov    gs,ax
c001d3eb:	54                   	push   esp
c001d3ec:	fc                   	cld    
c001d3ed:	e8 02 eb fe ff       	call   c000bef4 <int_handler>
c001d3f2:	81 c4 04 00 00 00    	add    esp,0x4
c001d3f8:	0f a9                	pop    gs
c001d3fa:	0f a1                	pop    fs
c001d3fc:	07                   	pop    es
c001d3fd:	1f                   	pop    ds
c001d3fe:	61                   	popa   
c001d3ff:	81 c4 08 00 00 00    	add    esp,0x8
c001d405:	cf                   	iret   

c001d406 <syscall_common_stub>:
c001d406:	60                   	pusha  
c001d407:	1e                   	push   ds
c001d408:	06                   	push   es
c001d409:	0f a0                	push   fs
c001d40b:	0f a8                	push   gs
c001d40d:	66 b8 10 00          	mov    ax,0x10
c001d411:	66 8e d8             	mov    ds,ax
c001d414:	66 8e c0             	mov    es,ax
c001d417:	66 8e e0             	mov    fs,ax
c001d41a:	66 8e e8             	mov    gs,ax
c001d41d:	54                   	push   esp
c001d41e:	fc                   	cld    
c001d41f:	e8 d0 ea fe ff       	call   c000bef4 <int_handler>
c001d424:	81 c4 04 00 00 00    	add    esp,0x4
c001d42a:	0f a9                	pop    gs
c001d42c:	0f a1                	pop    fs
c001d42e:	07                   	pop    es
c001d42f:	1f                   	pop    ds
c001d430:	e8 ba 34 ff ff       	call   c00108ef <KiCheckSignalZ>
c001d435:	3d 00 00 00 00       	cmp    eax,0x0
c001d43a:	74 1d                	je     c001d459 <syscall_common_stub.skipSignals>
c001d43c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d440:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d444:	89 e3                	mov    ebx,esp
c001d446:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001d449:	51                   	push   ecx
c001d44a:	68 61 d4 01 c0       	push   0xc001d461
c001d44f:	89 dc                	mov    esp,ebx
c001d451:	61                   	popa   
c001d452:	81 c4 08 00 00 00    	add    esp,0x8
c001d458:	cf                   	iret   

c001d459 <syscall_common_stub.skipSignals>:
c001d459:	61                   	popa   
c001d45a:	81 c4 08 00 00 00    	add    esp,0x8
c001d460:	cf                   	iret   

c001d461 <irq16>:
c001d461:	fa                   	cli    
c001d462:	6a 00                	push   0x0
c001d464:	6a 30                	push   0x30
c001d466:	e9 69 ff ff ff       	jmp    c001d3d4 <int_common_stub>

c001d46b <irq17>:
c001d46b:	fa                   	cli    
c001d46c:	6a 00                	push   0x0
c001d46e:	6a 31                	push   0x31
c001d470:	e9 5f ff ff ff       	jmp    c001d3d4 <int_common_stub>

c001d475 <irq18>:
c001d475:	fa                   	cli    
c001d476:	6a 00                	push   0x0
c001d478:	6a 32                	push   0x32
c001d47a:	e9 55 ff ff ff       	jmp    c001d3d4 <int_common_stub>

c001d47f <irq19>:
c001d47f:	fa                   	cli    
c001d480:	6a 00                	push   0x0
c001d482:	6a 33                	push   0x33
c001d484:	e9 4b ff ff ff       	jmp    c001d3d4 <int_common_stub>

c001d489 <irq20>:
c001d489:	fa                   	cli    
c001d48a:	6a 00                	push   0x0
c001d48c:	6a 34                	push   0x34
c001d48e:	e9 41 ff ff ff       	jmp    c001d3d4 <int_common_stub>

c001d493 <irq21>:
c001d493:	fa                   	cli    
c001d494:	6a 00                	push   0x0
c001d496:	6a 35                	push   0x35
c001d498:	e9 37 ff ff ff       	jmp    c001d3d4 <int_common_stub>

c001d49d <irq22>:
c001d49d:	fa                   	cli    
c001d49e:	6a 00                	push   0x0
c001d4a0:	6a 36                	push   0x36
c001d4a2:	e9 2d ff ff ff       	jmp    c001d3d4 <int_common_stub>

c001d4a7 <irq23>:
c001d4a7:	fa                   	cli    
c001d4a8:	6a 00                	push   0x0
c001d4aa:	6a 37                	push   0x37
c001d4ac:	e9 23 ff ff ff       	jmp    c001d3d4 <int_common_stub>
c001d4b1:	66 90                	xchg   ax,ax
c001d4b3:	66 90                	xchg   ax,ax
c001d4b5:	66 90                	xchg   ax,ax
c001d4b7:	66 90                	xchg   ax,ax
c001d4b9:	66 90                	xchg   ax,ax
c001d4bb:	66 90                	xchg   ax,ax
c001d4bd:	66 90                	xchg   ax,ax
c001d4bf:	90                   	nop

c001d4c0 <i386GetRDRAND>:
c001d4c0:	b9 64 00 00 00       	mov    ecx,0x64

c001d4c5 <retry>:
c001d4c5:	0f c7 f0             	rdrand eax
c001d4c8:	72 05                	jb     c001d4cf <retry.done>
c001d4ca:	e2 f9                	loop   c001d4c5 <retry>

c001d4cc <retry.fail>:
c001d4cc:	31 c0                	xor    eax,eax
c001d4ce:	c3                   	ret    

c001d4cf <retry.done>:
c001d4cf:	c3                   	ret    

c001d4d0 <absolutelyNoChanceInHell>:
c001d4d0:	b8 01 00 00 00       	mov    eax,0x1
c001d4d5:	0f a2                	cpuid  
c001d4d7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001d4dd:	74 06                	je     c001d4e5 <sseDetect.noSSE>
c001d4df:	b8 01 00 00 00       	mov    eax,0x1
c001d4e4:	c3                   	ret    

c001d4e5 <sseDetect.noSSE>:
c001d4e5:	31 c0                	xor    eax,eax
c001d4e7:	c3                   	ret    

c001d4e8 <sseSave>:
c001d4e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d4ec:	0f ae 00             	fxsave [eax]
c001d4ef:	c3                   	ret    

c001d4f0 <sseLoad>:
c001d4f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d4f4:	0f ae 08             	fxrstor [eax]
c001d4f7:	c3                   	ret    

c001d4f8 <sseInit>:
c001d4f8:	e8 42 00 00 00       	call   c001d53f <x87Init>
c001d4fd:	0f 20 e0             	mov    eax,cr4
c001d500:	66 0d 00 06          	or     ax,0x600
c001d504:	0f 22 e0             	mov    cr4,eax
c001d507:	c3                   	ret    

c001d508 <sseClose>:
c001d508:	c3                   	ret    
c001d509:	66 90                	xchg   ax,ax
c001d50b:	66 90                	xchg   ax,ax
c001d50d:	66 90                	xchg   ax,ax
c001d50f:	90                   	nop

c001d510 <value_37F>:
c001d510:	7f 03                	jg     c001d515 <value_37A+0x1>

c001d512 <value_37E>:
c001d512:	7e 03                	jle    c001d517 <x87Detect+0x1>

c001d514 <value_37A>:
c001d514:	7a 03                	jp     c001d519 <x87Detect+0x3>

c001d516 <x87Detect>:
c001d516:	b8 01 00 00 00       	mov    eax,0x1
c001d51b:	0f a2                	cpuid  
c001d51d:	f7 c2 01 00 00 00    	test   edx,0x1
c001d523:	74 06                	je     c001d52b <x87Detect.nox87>
c001d525:	b8 01 00 00 00       	mov    eax,0x1
c001d52a:	c3                   	ret    

c001d52b <x87Detect.nox87>:
c001d52b:	b8 00 00 00 00       	mov    eax,0x0
c001d530:	c3                   	ret    

c001d531 <x87Save>:
c001d531:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d535:	dd 30                	fnsave [eax]
c001d537:	c3                   	ret    

c001d538 <x87Load>:
c001d538:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d53c:	dd 20                	frstor [eax]
c001d53e:	c3                   	ret    

c001d53f <x87Init>:
c001d53f:	0f 20 c0             	mov    eax,cr0
c001d542:	66 25 fb ff          	and    ax,0xfffb
c001d546:	66 0d 22 00          	or     ax,0x22
c001d54a:	0f 22 c0             	mov    cr0,eax
c001d54d:	db e3                	fninit 
c001d54f:	0f 06                	clts   
c001d551:	d9 2d 14 d5 01 c0    	fldcw  WORD PTR ds:0xc001d514
c001d557:	c3                   	ret    

c001d558 <x87Close>:
c001d558:	c3                   	ret    
c001d559:	66 90                	xchg   ax,ax
c001d55b:	90                   	nop

c001d55c <__do_global_ctors_aux>:
c001d55c:	a1 0c e5 01 c0       	mov    eax,ds:0xc001e50c
c001d561:	83 f8 ff             	cmp    eax,0xffffffff
c001d564:	74 1a                	je     c001d580 <__do_global_ctors_aux+0x24>
c001d566:	55                   	push   ebp
c001d567:	89 e5                	mov    ebp,esp
c001d569:	53                   	push   ebx
c001d56a:	52                   	push   edx
c001d56b:	bb 0c e5 01 c0       	mov    ebx,0xc001e50c
c001d570:	ff d0                	call   eax
c001d572:	83 eb 04             	sub    ebx,0x4
c001d575:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d577:	83 f8 ff             	cmp    eax,0xffffffff
c001d57a:	75 f4                	jne    c001d570 <__do_global_ctors_aux+0x14>
c001d57c:	58                   	pop    eax
c001d57d:	5b                   	pop    ebx
c001d57e:	5d                   	pop    ebp
c001d57f:	c3                   	ret    
c001d580:	c3                   	ret    
c001d581:	66 90                	xchg   ax,ax
c001d583:	90                   	nop

c001d584 <__divdi3>:
c001d584:	55                   	push   ebp
c001d585:	57                   	push   edi
c001d586:	56                   	push   esi
c001d587:	53                   	push   ebx
c001d588:	83 ec 1c             	sub    esp,0x1c
c001d58b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d58f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d593:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001d596:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001d59a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d59e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d5a2:	85 db                	test   ebx,ebx
c001d5a4:	0f 88 8e 00 00 00    	js     c001d638 <__divdi3+0xb4>
c001d5aa:	89 dd                	mov    ebp,ebx
c001d5ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001d5b4:	89 d3                	mov    ebx,edx
c001d5b6:	85 d2                	test   edx,edx
c001d5b8:	79 0d                	jns    c001d5c7 <__divdi3+0x43>
c001d5ba:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001d5be:	f7 d8                	neg    eax
c001d5c0:	83 d2 00             	adc    edx,0x0
c001d5c3:	f7 da                	neg    edx
c001d5c5:	89 d3                	mov    ebx,edx
c001d5c7:	89 c7                	mov    edi,eax
c001d5c9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d5cc:	85 db                	test   ebx,ebx
c001d5ce:	75 48                	jne    c001d618 <__divdi3+0x94>
c001d5d0:	39 ef                	cmp    edi,ebp
c001d5d2:	76 24                	jbe    c001d5f8 <__divdi3+0x74>
c001d5d4:	89 ea                	mov    edx,ebp
c001d5d6:	f7 f7                	div    edi
c001d5d8:	89 c1                	mov    ecx,eax
c001d5da:	31 f6                	xor    esi,esi
c001d5dc:	89 c8                	mov    eax,ecx
c001d5de:	89 f2                	mov    edx,esi
c001d5e0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d5e4:	85 c9                	test   ecx,ecx
c001d5e6:	74 07                	je     c001d5ef <__divdi3+0x6b>
c001d5e8:	f7 d8                	neg    eax
c001d5ea:	83 d2 00             	adc    edx,0x0
c001d5ed:	f7 da                	neg    edx
c001d5ef:	83 c4 1c             	add    esp,0x1c
c001d5f2:	5b                   	pop    ebx
c001d5f3:	5e                   	pop    esi
c001d5f4:	5f                   	pop    edi
c001d5f5:	5d                   	pop    ebp
c001d5f6:	c3                   	ret    
c001d5f7:	90                   	nop
c001d5f8:	85 ff                	test   edi,edi
c001d5fa:	75 0b                	jne    c001d607 <__divdi3+0x83>
c001d5fc:	b8 01 00 00 00       	mov    eax,0x1
c001d601:	31 d2                	xor    edx,edx
c001d603:	f7 f3                	div    ebx
c001d605:	89 c7                	mov    edi,eax
c001d607:	31 d2                	xor    edx,edx
c001d609:	89 e8                	mov    eax,ebp
c001d60b:	f7 f7                	div    edi
c001d60d:	89 c6                	mov    esi,eax
c001d60f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d612:	f7 f7                	div    edi
c001d614:	89 c1                	mov    ecx,eax
c001d616:	eb c4                	jmp    c001d5dc <__divdi3+0x58>
c001d618:	39 eb                	cmp    ebx,ebp
c001d61a:	77 3c                	ja     c001d658 <__divdi3+0xd4>
c001d61c:	0f bd f3             	bsr    esi,ebx
c001d61f:	83 f6 1f             	xor    esi,0x1f
c001d622:	75 40                	jne    c001d664 <__divdi3+0xe0>
c001d624:	39 eb                	cmp    ebx,ebp
c001d626:	72 09                	jb     c001d631 <__divdi3+0xad>
c001d628:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001d62b:	0f 87 97 00 00 00    	ja     c001d6c8 <__divdi3+0x144>
c001d631:	b9 01 00 00 00       	mov    ecx,0x1
c001d636:	eb a4                	jmp    c001d5dc <__divdi3+0x58>
c001d638:	f7 d9                	neg    ecx
c001d63a:	83 d3 00             	adc    ebx,0x0
c001d63d:	f7 db                	neg    ebx
c001d63f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001d642:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001d646:	89 dd                	mov    ebp,ebx
c001d648:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001d650:	e9 5f ff ff ff       	jmp    c001d5b4 <__divdi3+0x30>
c001d655:	8d 76 00             	lea    esi,[esi+0x0]
c001d658:	31 f6                	xor    esi,esi
c001d65a:	31 c9                	xor    ecx,ecx
c001d65c:	e9 7b ff ff ff       	jmp    c001d5dc <__divdi3+0x58>
c001d661:	8d 76 00             	lea    esi,[esi+0x0]
c001d664:	b8 20 00 00 00       	mov    eax,0x20
c001d669:	29 f0                	sub    eax,esi
c001d66b:	89 f1                	mov    ecx,esi
c001d66d:	d3 e3                	shl    ebx,cl
c001d66f:	89 fa                	mov    edx,edi
c001d671:	88 c1                	mov    cl,al
c001d673:	d3 ea                	shr    edx,cl
c001d675:	09 da                	or     edx,ebx
c001d677:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d67b:	89 f1                	mov    ecx,esi
c001d67d:	d3 e7                	shl    edi,cl
c001d67f:	89 eb                	mov    ebx,ebp
c001d681:	88 c1                	mov    cl,al
c001d683:	d3 eb                	shr    ebx,cl
c001d685:	89 f1                	mov    ecx,esi
c001d687:	d3 e5                	shl    ebp,cl
c001d689:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001d68c:	88 c1                	mov    cl,al
c001d68e:	d3 ea                	shr    edx,cl
c001d690:	09 d5                	or     ebp,edx
c001d692:	89 e8                	mov    eax,ebp
c001d694:	89 da                	mov    edx,ebx
c001d696:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001d69a:	89 d3                	mov    ebx,edx
c001d69c:	89 c5                	mov    ebp,eax
c001d69e:	f7 e7                	mul    edi
c001d6a0:	39 d3                	cmp    ebx,edx
c001d6a2:	72 18                	jb     c001d6bc <__divdi3+0x138>
c001d6a4:	74 0a                	je     c001d6b0 <__divdi3+0x12c>
c001d6a6:	89 e9                	mov    ecx,ebp
c001d6a8:	31 f6                	xor    esi,esi
c001d6aa:	e9 2d ff ff ff       	jmp    c001d5dc <__divdi3+0x58>
c001d6af:	90                   	nop
c001d6b0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001d6b3:	89 f1                	mov    ecx,esi
c001d6b5:	d3 e7                	shl    edi,cl
c001d6b7:	39 c7                	cmp    edi,eax
c001d6b9:	73 eb                	jae    c001d6a6 <__divdi3+0x122>
c001d6bb:	90                   	nop
c001d6bc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001d6bf:	31 f6                	xor    esi,esi
c001d6c1:	e9 16 ff ff ff       	jmp    c001d5dc <__divdi3+0x58>
c001d6c6:	66 90                	xchg   ax,ax
c001d6c8:	31 c9                	xor    ecx,ecx
c001d6ca:	e9 0d ff ff ff       	jmp    c001d5dc <__divdi3+0x58>
c001d6cf:	90                   	nop

c001d6d0 <__moddi3>:
c001d6d0:	55                   	push   ebp
c001d6d1:	57                   	push   edi
c001d6d2:	56                   	push   esi
c001d6d3:	53                   	push   ebx
c001d6d4:	83 ec 2c             	sub    esp,0x2c
c001d6d7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d6db:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001d6df:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d6e3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001d6e7:	85 db                	test   ebx,ebx
c001d6e9:	0f 88 85 00 00 00    	js     c001d774 <__moddi3+0xa4>
c001d6ef:	89 de                	mov    esi,ebx
c001d6f1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d6f9:	89 d7                	mov    edi,edx
c001d6fb:	85 d2                	test   edx,edx
c001d6fd:	79 09                	jns    c001d708 <__moddi3+0x38>
c001d6ff:	f7 d8                	neg    eax
c001d701:	83 d2 00             	adc    edx,0x0
c001d704:	f7 da                	neg    edx
c001d706:	89 d7                	mov    edi,edx
c001d708:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d70c:	89 cd                	mov    ebp,ecx
c001d70e:	85 ff                	test   edi,edi
c001d710:	75 52                	jne    c001d764 <__moddi3+0x94>
c001d712:	89 c3                	mov    ebx,eax
c001d714:	39 f0                	cmp    eax,esi
c001d716:	76 24                	jbe    c001d73c <__moddi3+0x6c>
c001d718:	89 c8                	mov    eax,ecx
c001d71a:	89 f2                	mov    edx,esi
c001d71c:	f7 f3                	div    ebx
c001d71e:	89 d6                	mov    esi,edx
c001d720:	89 f0                	mov    eax,esi
c001d722:	31 d2                	xor    edx,edx
c001d724:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d728:	85 c9                	test   ecx,ecx
c001d72a:	74 07                	je     c001d733 <__moddi3+0x63>
c001d72c:	f7 d8                	neg    eax
c001d72e:	83 d2 00             	adc    edx,0x0
c001d731:	f7 da                	neg    edx
c001d733:	83 c4 2c             	add    esp,0x2c
c001d736:	5b                   	pop    ebx
c001d737:	5e                   	pop    esi
c001d738:	5f                   	pop    edi
c001d739:	5d                   	pop    ebp
c001d73a:	c3                   	ret    
c001d73b:	90                   	nop
c001d73c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d740:	85 db                	test   ebx,ebx
c001d742:	75 0d                	jne    c001d751 <__moddi3+0x81>
c001d744:	b8 01 00 00 00       	mov    eax,0x1
c001d749:	31 d2                	xor    edx,edx
c001d74b:	f7 f7                	div    edi
c001d74d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d751:	89 f0                	mov    eax,esi
c001d753:	31 d2                	xor    edx,edx
c001d755:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d759:	f7 f7                	div    edi
c001d75b:	89 e8                	mov    eax,ebp
c001d75d:	f7 f7                	div    edi
c001d75f:	89 d6                	mov    esi,edx
c001d761:	eb bd                	jmp    c001d720 <__moddi3+0x50>
c001d763:	90                   	nop
c001d764:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001d768:	39 f7                	cmp    edi,esi
c001d76a:	76 20                	jbe    c001d78c <__moddi3+0xbc>
c001d76c:	89 c8                	mov    eax,ecx
c001d76e:	89 f2                	mov    edx,esi
c001d770:	eb b2                	jmp    c001d724 <__moddi3+0x54>
c001d772:	66 90                	xchg   ax,ax
c001d774:	f7 d9                	neg    ecx
c001d776:	83 d3 00             	adc    ebx,0x0
c001d779:	f7 db                	neg    ebx
c001d77b:	89 de                	mov    esi,ebx
c001d77d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001d785:	e9 6f ff ff ff       	jmp    c001d6f9 <__moddi3+0x29>
c001d78a:	66 90                	xchg   ax,ax
c001d78c:	0f bd c7             	bsr    eax,edi
c001d78f:	83 f0 1f             	xor    eax,0x1f
c001d792:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d796:	75 24                	jne    c001d7bc <__moddi3+0xec>
c001d798:	39 f7                	cmp    edi,esi
c001d79a:	72 06                	jb     c001d7a2 <__moddi3+0xd2>
c001d79c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001d7a0:	77 0c                	ja     c001d7ae <__moddi3+0xde>
c001d7a2:	89 e9                	mov    ecx,ebp
c001d7a4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001d7a8:	19 fe                	sbb    esi,edi
c001d7aa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001d7ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d7b2:	89 f2                	mov    edx,esi
c001d7b4:	e9 6b ff ff ff       	jmp    c001d724 <__moddi3+0x54>
c001d7b9:	8d 76 00             	lea    esi,[esi+0x0]
c001d7bc:	b8 20 00 00 00       	mov    eax,0x20
c001d7c1:	89 c2                	mov    edx,eax
c001d7c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d7c7:	29 da                	sub    edx,ebx
c001d7c9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d7cd:	88 d9                	mov    cl,bl
c001d7cf:	d3 e7                	shl    edi,cl
c001d7d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d7d5:	88 d1                	mov    cl,dl
c001d7d7:	d3 e8                	shr    eax,cl
c001d7d9:	09 c7                	or     edi,eax
c001d7db:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001d7df:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d7e3:	89 d8                	mov    eax,ebx
c001d7e5:	88 d9                	mov    cl,bl
c001d7e7:	d3 e7                	shl    edi,cl
c001d7e9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001d7ed:	89 f3                	mov    ebx,esi
c001d7ef:	88 d1                	mov    cl,dl
c001d7f1:	d3 eb                	shr    ebx,cl
c001d7f3:	89 c7                	mov    edi,eax
c001d7f5:	88 c1                	mov    cl,al
c001d7f7:	d3 e6                	shl    esi,cl
c001d7f9:	89 e8                	mov    eax,ebp
c001d7fb:	88 d1                	mov    cl,dl
c001d7fd:	d3 e8                	shr    eax,cl
c001d7ff:	09 f0                	or     eax,esi
c001d801:	89 f9                	mov    ecx,edi
c001d803:	d3 e5                	shl    ebp,cl
c001d805:	89 da                	mov    edx,ebx
c001d807:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001d80b:	89 d3                	mov    ebx,edx
c001d80d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001d811:	89 c6                	mov    esi,eax
c001d813:	89 d1                	mov    ecx,edx
c001d815:	39 d3                	cmp    ebx,edx
c001d817:	72 27                	jb     c001d840 <__moddi3+0x170>
c001d819:	74 21                	je     c001d83c <__moddi3+0x16c>
c001d81b:	29 f5                	sub    ebp,esi
c001d81d:	19 cb                	sbb    ebx,ecx
c001d81f:	89 de                	mov    esi,ebx
c001d821:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001d825:	d3 e6                	shl    esi,cl
c001d827:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001d82b:	89 f9                	mov    ecx,edi
c001d82d:	d3 ed                	shr    ebp,cl
c001d82f:	09 ee                	or     esi,ebp
c001d831:	89 f0                	mov    eax,esi
c001d833:	d3 eb                	shr    ebx,cl
c001d835:	89 da                	mov    edx,ebx
c001d837:	e9 e8 fe ff ff       	jmp    c001d724 <__moddi3+0x54>
c001d83c:	39 c5                	cmp    ebp,eax
c001d83e:	73 db                	jae    c001d81b <__moddi3+0x14b>
c001d840:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001d844:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001d848:	89 d1                	mov    ecx,edx
c001d84a:	89 c6                	mov    esi,eax
c001d84c:	eb cd                	jmp    c001d81b <__moddi3+0x14b>
c001d84e:	66 90                	xchg   ax,ax

c001d850 <__udivdi3>:
c001d850:	55                   	push   ebp
c001d851:	57                   	push   edi
c001d852:	56                   	push   esi
c001d853:	53                   	push   ebx
c001d854:	83 ec 1c             	sub    esp,0x1c
c001d857:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d85b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d85f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d863:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d867:	85 d2                	test   edx,edx
c001d869:	75 41                	jne    c001d8ac <__udivdi3+0x5c>
c001d86b:	39 f7                	cmp    edi,esi
c001d86d:	76 15                	jbe    c001d884 <__udivdi3+0x34>
c001d86f:	89 e8                	mov    eax,ebp
c001d871:	89 f2                	mov    edx,esi
c001d873:	f7 f7                	div    edi
c001d875:	31 db                	xor    ebx,ebx
c001d877:	89 da                	mov    edx,ebx
c001d879:	83 c4 1c             	add    esp,0x1c
c001d87c:	5b                   	pop    ebx
c001d87d:	5e                   	pop    esi
c001d87e:	5f                   	pop    edi
c001d87f:	5d                   	pop    ebp
c001d880:	c3                   	ret    
c001d881:	8d 76 00             	lea    esi,[esi+0x0]
c001d884:	89 f9                	mov    ecx,edi
c001d886:	85 ff                	test   edi,edi
c001d888:	75 0b                	jne    c001d895 <__udivdi3+0x45>
c001d88a:	b8 01 00 00 00       	mov    eax,0x1
c001d88f:	31 d2                	xor    edx,edx
c001d891:	f7 f7                	div    edi
c001d893:	89 c1                	mov    ecx,eax
c001d895:	31 d2                	xor    edx,edx
c001d897:	89 f0                	mov    eax,esi
c001d899:	f7 f1                	div    ecx
c001d89b:	89 c3                	mov    ebx,eax
c001d89d:	89 e8                	mov    eax,ebp
c001d89f:	f7 f1                	div    ecx
c001d8a1:	89 da                	mov    edx,ebx
c001d8a3:	83 c4 1c             	add    esp,0x1c
c001d8a6:	5b                   	pop    ebx
c001d8a7:	5e                   	pop    esi
c001d8a8:	5f                   	pop    edi
c001d8a9:	5d                   	pop    ebp
c001d8aa:	c3                   	ret    
c001d8ab:	90                   	nop
c001d8ac:	39 f2                	cmp    edx,esi
c001d8ae:	77 1c                	ja     c001d8cc <__udivdi3+0x7c>
c001d8b0:	0f bd da             	bsr    ebx,edx
c001d8b3:	83 f3 1f             	xor    ebx,0x1f
c001d8b6:	75 24                	jne    c001d8dc <__udivdi3+0x8c>
c001d8b8:	39 f2                	cmp    edx,esi
c001d8ba:	72 08                	jb     c001d8c4 <__udivdi3+0x74>
c001d8bc:	39 ef                	cmp    edi,ebp
c001d8be:	0f 87 84 00 00 00    	ja     c001d948 <__udivdi3+0xf8>
c001d8c4:	b8 01 00 00 00       	mov    eax,0x1
c001d8c9:	eb ac                	jmp    c001d877 <__udivdi3+0x27>
c001d8cb:	90                   	nop
c001d8cc:	31 db                	xor    ebx,ebx
c001d8ce:	31 c0                	xor    eax,eax
c001d8d0:	89 da                	mov    edx,ebx
c001d8d2:	83 c4 1c             	add    esp,0x1c
c001d8d5:	5b                   	pop    ebx
c001d8d6:	5e                   	pop    esi
c001d8d7:	5f                   	pop    edi
c001d8d8:	5d                   	pop    ebp
c001d8d9:	c3                   	ret    
c001d8da:	66 90                	xchg   ax,ax
c001d8dc:	b8 20 00 00 00       	mov    eax,0x20
c001d8e1:	29 d8                	sub    eax,ebx
c001d8e3:	88 d9                	mov    cl,bl
c001d8e5:	d3 e2                	shl    edx,cl
c001d8e7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d8eb:	89 fa                	mov    edx,edi
c001d8ed:	88 c1                	mov    cl,al
c001d8ef:	d3 ea                	shr    edx,cl
c001d8f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d8f5:	09 d1                	or     ecx,edx
c001d8f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d8fb:	88 d9                	mov    cl,bl
c001d8fd:	d3 e7                	shl    edi,cl
c001d8ff:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001d903:	89 f7                	mov    edi,esi
c001d905:	88 c1                	mov    cl,al
c001d907:	d3 ef                	shr    edi,cl
c001d909:	88 d9                	mov    cl,bl
c001d90b:	d3 e6                	shl    esi,cl
c001d90d:	89 ea                	mov    edx,ebp
c001d90f:	88 c1                	mov    cl,al
c001d911:	d3 ea                	shr    edx,cl
c001d913:	09 d6                	or     esi,edx
c001d915:	89 f0                	mov    eax,esi
c001d917:	89 fa                	mov    edx,edi
c001d919:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001d91d:	89 d7                	mov    edi,edx
c001d91f:	89 c6                	mov    esi,eax
c001d921:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001d925:	39 d7                	cmp    edi,edx
c001d927:	72 13                	jb     c001d93c <__udivdi3+0xec>
c001d929:	74 09                	je     c001d934 <__udivdi3+0xe4>
c001d92b:	89 f0                	mov    eax,esi
c001d92d:	31 db                	xor    ebx,ebx
c001d92f:	e9 43 ff ff ff       	jmp    c001d877 <__udivdi3+0x27>
c001d934:	88 d9                	mov    cl,bl
c001d936:	d3 e5                	shl    ebp,cl
c001d938:	39 c5                	cmp    ebp,eax
c001d93a:	73 ef                	jae    c001d92b <__udivdi3+0xdb>
c001d93c:	8d 46 ff             	lea    eax,[esi-0x1]
c001d93f:	31 db                	xor    ebx,ebx
c001d941:	e9 31 ff ff ff       	jmp    c001d877 <__udivdi3+0x27>
c001d946:	66 90                	xchg   ax,ax
c001d948:	31 c0                	xor    eax,eax
c001d94a:	e9 28 ff ff ff       	jmp    c001d877 <__udivdi3+0x27>
c001d94f:	90                   	nop

c001d950 <__umoddi3>:
c001d950:	55                   	push   ebp
c001d951:	57                   	push   edi
c001d952:	56                   	push   esi
c001d953:	53                   	push   ebx
c001d954:	83 ec 1c             	sub    esp,0x1c
c001d957:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d95b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d95f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d963:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d967:	89 da                	mov    edx,ebx
c001d969:	85 c0                	test   eax,eax
c001d96b:	75 37                	jne    c001d9a4 <__umoddi3+0x54>
c001d96d:	39 df                	cmp    edi,ebx
c001d96f:	76 13                	jbe    c001d984 <__umoddi3+0x34>
c001d971:	89 f0                	mov    eax,esi
c001d973:	f7 f7                	div    edi
c001d975:	89 d0                	mov    eax,edx
c001d977:	31 d2                	xor    edx,edx
c001d979:	83 c4 1c             	add    esp,0x1c
c001d97c:	5b                   	pop    ebx
c001d97d:	5e                   	pop    esi
c001d97e:	5f                   	pop    edi
c001d97f:	5d                   	pop    ebp
c001d980:	c3                   	ret    
c001d981:	8d 76 00             	lea    esi,[esi+0x0]
c001d984:	89 fd                	mov    ebp,edi
c001d986:	85 ff                	test   edi,edi
c001d988:	75 0b                	jne    c001d995 <__umoddi3+0x45>
c001d98a:	b8 01 00 00 00       	mov    eax,0x1
c001d98f:	31 d2                	xor    edx,edx
c001d991:	f7 f7                	div    edi
c001d993:	89 c5                	mov    ebp,eax
c001d995:	89 d8                	mov    eax,ebx
c001d997:	31 d2                	xor    edx,edx
c001d999:	f7 f5                	div    ebp
c001d99b:	89 f0                	mov    eax,esi
c001d99d:	f7 f5                	div    ebp
c001d99f:	89 d0                	mov    eax,edx
c001d9a1:	eb d4                	jmp    c001d977 <__umoddi3+0x27>
c001d9a3:	90                   	nop
c001d9a4:	89 f1                	mov    ecx,esi
c001d9a6:	39 d8                	cmp    eax,ebx
c001d9a8:	76 0a                	jbe    c001d9b4 <__umoddi3+0x64>
c001d9aa:	89 f0                	mov    eax,esi
c001d9ac:	83 c4 1c             	add    esp,0x1c
c001d9af:	5b                   	pop    ebx
c001d9b0:	5e                   	pop    esi
c001d9b1:	5f                   	pop    edi
c001d9b2:	5d                   	pop    ebp
c001d9b3:	c3                   	ret    
c001d9b4:	0f bd e8             	bsr    ebp,eax
c001d9b7:	83 f5 1f             	xor    ebp,0x1f
c001d9ba:	75 1c                	jne    c001d9d8 <__umoddi3+0x88>
c001d9bc:	39 d8                	cmp    eax,ebx
c001d9be:	72 04                	jb     c001d9c4 <__umoddi3+0x74>
c001d9c0:	39 f7                	cmp    edi,esi
c001d9c2:	77 08                	ja     c001d9cc <__umoddi3+0x7c>
c001d9c4:	89 da                	mov    edx,ebx
c001d9c6:	29 fe                	sub    esi,edi
c001d9c8:	19 c2                	sbb    edx,eax
c001d9ca:	89 f1                	mov    ecx,esi
c001d9cc:	89 c8                	mov    eax,ecx
c001d9ce:	83 c4 1c             	add    esp,0x1c
c001d9d1:	5b                   	pop    ebx
c001d9d2:	5e                   	pop    esi
c001d9d3:	5f                   	pop    edi
c001d9d4:	5d                   	pop    ebp
c001d9d5:	c3                   	ret    
c001d9d6:	66 90                	xchg   ax,ax
c001d9d8:	ba 20 00 00 00       	mov    edx,0x20
c001d9dd:	29 ea                	sub    edx,ebp
c001d9df:	89 e9                	mov    ecx,ebp
c001d9e1:	d3 e0                	shl    eax,cl
c001d9e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d9e7:	89 f8                	mov    eax,edi
c001d9e9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001d9ed:	88 d1                	mov    cl,dl
c001d9ef:	d3 e8                	shr    eax,cl
c001d9f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d9f5:	09 c1                	or     ecx,eax
c001d9f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d9fb:	89 e9                	mov    ecx,ebp
c001d9fd:	d3 e7                	shl    edi,cl
c001d9ff:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001da03:	89 d8                	mov    eax,ebx
c001da05:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001da09:	88 d1                	mov    cl,dl
c001da0b:	d3 e8                	shr    eax,cl
c001da0d:	89 c7                	mov    edi,eax
c001da0f:	89 e9                	mov    ecx,ebp
c001da11:	d3 e3                	shl    ebx,cl
c001da13:	89 f0                	mov    eax,esi
c001da15:	88 d1                	mov    cl,dl
c001da17:	d3 e8                	shr    eax,cl
c001da19:	09 d8                	or     eax,ebx
c001da1b:	89 e9                	mov    ecx,ebp
c001da1d:	d3 e6                	shl    esi,cl
c001da1f:	89 f3                	mov    ebx,esi
c001da21:	89 fa                	mov    edx,edi
c001da23:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001da27:	89 d1                	mov    ecx,edx
c001da29:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001da2d:	89 c6                	mov    esi,eax
c001da2f:	89 d7                	mov    edi,edx
c001da31:	39 d1                	cmp    ecx,edx
c001da33:	72 27                	jb     c001da5c <__umoddi3+0x10c>
c001da35:	74 21                	je     c001da58 <__umoddi3+0x108>
c001da37:	89 ca                	mov    edx,ecx
c001da39:	29 f3                	sub    ebx,esi
c001da3b:	19 fa                	sbb    edx,edi
c001da3d:	89 d0                	mov    eax,edx
c001da3f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001da43:	d3 e0                	shl    eax,cl
c001da45:	89 e9                	mov    ecx,ebp
c001da47:	d3 eb                	shr    ebx,cl
c001da49:	09 d8                	or     eax,ebx
c001da4b:	d3 ea                	shr    edx,cl
c001da4d:	83 c4 1c             	add    esp,0x1c
c001da50:	5b                   	pop    ebx
c001da51:	5e                   	pop    esi
c001da52:	5f                   	pop    edi
c001da53:	5d                   	pop    ebp
c001da54:	c3                   	ret    
c001da55:	8d 76 00             	lea    esi,[esi+0x0]
c001da58:	39 c3                	cmp    ebx,eax
c001da5a:	73 db                	jae    c001da37 <__umoddi3+0xe7>
c001da5c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001da60:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001da64:	89 d7                	mov    edi,edx
c001da66:	89 c6                	mov    esi,eax
c001da68:	eb cd                	jmp    c001da37 <__umoddi3+0xe7>

Disassembly of section .init:

c001da6a <_init>:
c001da6a:	55                   	push   ebp
c001da6b:	89 e5                	mov    ebp,esp
c001da6d:	e8 82 26 fe ff       	call   c00000f4 <frame_dummy>
c001da72:	e8 e5 fa ff ff       	call   c001d55c <__do_global_ctors_aux>
c001da77:	5d                   	pop    ebp
c001da78:	c3                   	ret    

Disassembly of section .fini:

c001da79 <_fini>:
c001da79:	55                   	push   ebp
c001da7a:	89 e5                	mov    ebp,esp
c001da7c:	e8 03 26 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001da81:	5d                   	pop    ebp
c001da82:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001da84 <Computer::~Computer()>:
c001da84:	83 ec 0c             	sub    esp,0xc
c001da87:	ba 94 ed 01 c0       	mov    edx,0xc001ed94
c001da8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da90:	89 10                	mov    DWORD PTR [eax],edx
c001da92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da96:	83 ec 0c             	sub    esp,0xc
c001da99:	50                   	push   eax
c001da9a:	e8 ab de fe ff       	call   c000b94a <Device::~Device()>
c001da9f:	83 c4 10             	add    esp,0x10
c001daa2:	90                   	nop
c001daa3:	83 c4 0c             	add    esp,0xc
c001daa6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001daa8 <Computer::~Computer()>:
c001daa8:	83 ec 0c             	sub    esp,0xc
c001daab:	83 ec 0c             	sub    esp,0xc
c001daae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dab2:	e8 cd ff ff ff       	call   c001da84 <Computer::~Computer()>
c001dab7:	83 c4 10             	add    esp,0x10
c001daba:	83 ec 08             	sub    esp,0x8
c001dabd:	68 70 01 00 00       	push   0x170
c001dac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dac6:	e8 49 ca fe ff       	call   c000a514 <operator delete(void*, unsigned long)>
c001dacb:	83 c4 10             	add    esp,0x10
c001dace:	83 c4 0c             	add    esp,0xc
c001dad1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001dad2 <idleCommon()>:
c001dad2:	83 ec 0c             	sub    esp,0xc
c001dad5:	fa                   	cli    
c001dad6:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001dadc:	e8 17 6b ff ff       	call   c00145f8 <schedule()>
c001dae1:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001dae6:	48                   	dec    eax
c001dae7:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001daec:	75 01                	jne    c001daef <idleCommon()+0x1d>
c001daee:	fb                   	sti    
c001daef:	83 c4 0c             	add    esp,0xc
c001daf2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001daf4 <LinkedList<UnixFile>::~LinkedList()>:
c001daf4:	90                   	nop
c001daf5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001daf6 <LinkedList<UnixFile>::LinkedList()>:
c001daf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dafa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001db00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db04:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001db0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db0f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001db16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db1a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001db20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db24:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001db2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db2f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001db36:	90                   	nop
c001db37:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001db38 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001db38:	83 ec 0c             	sub    esp,0xc
c001db3b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001db40:	75 10                	jne    c001db52 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001db42:	83 ec 0c             	sub    esp,0xc
c001db45:	68 a8 ef 01 c0       	push   0xc001efa8
c001db4a:	e8 4c 28 ff ff       	call   c001039b <KePanic(char const*)>
c001db4f:	83 c4 10             	add    esp,0x10
c001db52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db56:	8b 00                	mov    eax,DWORD PTR [eax]
c001db58:	85 c0                	test   eax,eax
c001db5a:	74 34                	je     c001db90 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001db5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001db63:	85 c0                	test   eax,eax
c001db65:	74 29                	je     c001db90 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001db67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001db6e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001db72:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001db75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db79:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001db7d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001db80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001db87:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001db8e:	eb 65                	jmp    c001dbf5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001db90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db94:	8b 00                	mov    eax,DWORD PTR [eax]
c001db96:	85 c0                	test   eax,eax
c001db98:	75 4b                	jne    c001dbe5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001db9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dba1:	85 c0                	test   eax,eax
c001dba3:	75 40                	jne    c001dbe5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001dba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dba9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dbad:	89 10                	mov    DWORD PTR [eax],edx
c001dbaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbb3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dbb7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001dbba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dbc1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001dbc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbcc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001dbcf:	85 c0                	test   eax,eax
c001dbd1:	74 22                	je     c001dbf5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001dbd3:	83 ec 0c             	sub    esp,0xc
c001dbd6:	68 ca ef 01 c0       	push   0xc001efca
c001dbdb:	e8 bb 27 ff ff       	call   c001039b <KePanic(char const*)>
c001dbe0:	83 c4 10             	add    esp,0x10
c001dbe3:	eb 10                	jmp    c001dbf5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001dbe5:	83 ec 0c             	sub    esp,0xc
c001dbe8:	68 d4 ef 01 c0       	push   0xc001efd4
c001dbed:	e8 a9 27 ff ff       	call   c001039b <KePanic(char const*)>
c001dbf2:	83 c4 10             	add    esp,0x10
c001dbf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbf9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001dbfc:	8d 50 01             	lea    edx,[eax+0x1]
c001dbff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc03:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001dc06:	90                   	nop
c001dc07:	83 c4 0c             	add    esp,0xc
c001dc0a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001dc0c <LinkedList<UnixFile>::getFirstElement()>:
c001dc0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dc10:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc12:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001dc14 <LinkedList<UnixFile>::removeFirst()>:
c001dc14:	83 ec 0c             	sub    esp,0xc
c001dc17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc1b:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc1d:	85 c0                	test   eax,eax
c001dc1f:	75 12                	jne    c001dc33 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001dc21:	83 ec 0c             	sub    esp,0xc
c001dc24:	68 e0 ef 01 c0       	push   0xc001efe0
c001dc29:	e8 6d 27 ff ff       	call   c001039b <KePanic(char const*)>
c001dc2e:	83 c4 10             	add    esp,0x10
c001dc31:	eb 7e                	jmp    c001dcb1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001dc33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc37:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dc3a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001dc3d:	85 c0                	test   eax,eax
c001dc3f:	74 10                	je     c001dc51 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001dc41:	83 ec 0c             	sub    esp,0xc
c001dc44:	68 2b f0 01 c0       	push   0xc001f02b
c001dc49:	e8 4d 27 ff ff       	call   c001039b <KePanic(char const*)>
c001dc4e:	83 c4 10             	add    esp,0x10
c001dc51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc55:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001dc5a:	85 c0                	test   eax,eax
c001dc5c:	75 33                	jne    c001dc91 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001dc5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc62:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001dc68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc6c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001dc73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc77:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001dc7a:	83 f8 01             	cmp    eax,0x1
c001dc7d:	74 21                	je     c001dca0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001dc7f:	83 ec 0c             	sub    esp,0xc
c001dc82:	68 04 f0 01 c0       	push   0xc001f004
c001dc87:	e8 0f 27 ff ff       	call   c001039b <KePanic(char const*)>
c001dc8c:	83 c4 10             	add    esp,0x10
c001dc8f:	eb 0f                	jmp    c001dca0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001dc91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc95:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc97:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001dc9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc9e:	89 10                	mov    DWORD PTR [eax],edx
c001dca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dca4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001dca7:	8d 50 ff             	lea    edx,[eax-0x1]
c001dcaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001dcb1:	83 c4 0c             	add    esp,0xc
c001dcb4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001dcb6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001dcb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dcba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001dcbd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001dcbe <DriverlessDevice::~DriverlessDevice()>:
c001dcbe:	ba 7c f6 01 c0       	mov    edx,0xc001f67c
c001dcc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dcc7:	89 10                	mov    DWORD PTR [eax],edx
c001dcc9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dccd:	50                   	push   eax
c001dcce:	e8 77 dc fe ff       	call   c000b94a <Device::~Device()>
c001dcd3:	83 c4 04             	add    esp,0x4
c001dcd6:	90                   	nop
c001dcd7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001dcd8 <DriverlessDevice::~DriverlessDevice()>:
c001dcd8:	83 ec 0c             	sub    esp,0xc
c001dcdb:	83 ec 0c             	sub    esp,0xc
c001dcde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dce2:	e8 d7 ff ff ff       	call   c001dcbe <DriverlessDevice::~DriverlessDevice()>
c001dce7:	83 c4 10             	add    esp,0x10
c001dcea:	83 ec 08             	sub    esp,0x8
c001dced:	68 58 01 00 00       	push   0x158
c001dcf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dcf6:	e8 19 c8 fe ff       	call   c000a514 <operator delete(void*, unsigned long)>
c001dcfb:	83 c4 10             	add    esp,0x10
c001dcfe:	83 c4 0c             	add    esp,0xc
c001dd01:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001dd02 <LinkedList<Device>::addElement(Device*)>:
c001dd02:	83 ec 0c             	sub    esp,0xc
c001dd05:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001dd0a:	75 10                	jne    c001dd1c <LinkedList<Device>::addElement(Device*)+0x1a>
c001dd0c:	83 ec 0c             	sub    esp,0xc
c001dd0f:	68 a8 ef 01 c0       	push   0xc001efa8
c001dd14:	e8 82 26 ff ff       	call   c001039b <KePanic(char const*)>
c001dd19:	83 c4 10             	add    esp,0x10
c001dd1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd20:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd22:	85 c0                	test   eax,eax
c001dd24:	74 3a                	je     c001dd60 <LinkedList<Device>::addElement(Device*)+0x5e>
c001dd26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dd2d:	85 c0                	test   eax,eax
c001dd2f:	74 2f                	je     c001dd60 <LinkedList<Device>::addElement(Device*)+0x5e>
c001dd31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd35:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dd38:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dd3c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001dd42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd46:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dd4a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001dd4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd51:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dd54:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001dd5e:	eb 68                	jmp    c001ddc8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001dd60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd64:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd66:	85 c0                	test   eax,eax
c001dd68:	75 4e                	jne    c001ddb8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001dd6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dd71:	85 c0                	test   eax,eax
c001dd73:	75 43                	jne    c001ddb8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001dd75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd79:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dd7d:	89 10                	mov    DWORD PTR [eax],edx
c001dd7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd83:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dd87:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001dd8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dd91:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001dd9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd9f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001dda2:	85 c0                	test   eax,eax
c001dda4:	74 22                	je     c001ddc8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001dda6:	83 ec 0c             	sub    esp,0xc
c001dda9:	68 ca ef 01 c0       	push   0xc001efca
c001ddae:	e8 e8 25 ff ff       	call   c001039b <KePanic(char const*)>
c001ddb3:	83 c4 10             	add    esp,0x10
c001ddb6:	eb 10                	jmp    c001ddc8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ddb8:	83 ec 0c             	sub    esp,0xc
c001ddbb:	68 d4 ef 01 c0       	push   0xc001efd4
c001ddc0:	e8 d6 25 ff ff       	call   c001039b <KePanic(char const*)>
c001ddc5:	83 c4 10             	add    esp,0x10
c001ddc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddcc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ddcf:	8d 50 01             	lea    edx,[eax+0x1]
c001ddd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddd6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ddd9:	90                   	nop
c001ddda:	83 c4 0c             	add    esp,0xc
c001dddd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001ddde <LinkedList<Device>::LinkedList()>:
c001ddde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dde2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001dde8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ddec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ddf3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ddf7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ddfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de02:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001de08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001de13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de17:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001de1e:	90                   	nop
c001de1f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001de20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001de20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de24:	8b 00                	mov    eax,DWORD PTR [eax]
c001de26:	85 c0                	test   eax,eax
c001de28:	75 0e                	jne    c001de38 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001de2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001de31:	85 c0                	test   eax,eax
c001de33:	75 03                	jne    c001de38 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001de35:	b0 01                	mov    al,0x1
c001de37:	c3                   	ret    
c001de38:	b0 00                	mov    al,0x0
c001de3a:	90                   	nop
c001de3b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001de3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001de3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de40:	8b 00                	mov    eax,DWORD PTR [eax]
c001de42:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001de44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001de44:	83 ec 0c             	sub    esp,0xc
c001de47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de4b:	8b 00                	mov    eax,DWORD PTR [eax]
c001de4d:	85 c0                	test   eax,eax
c001de4f:	75 17                	jne    c001de68 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001de51:	83 ec 0c             	sub    esp,0xc
c001de54:	68 e0 ef 01 c0       	push   0xc001efe0
c001de59:	e8 3d 25 ff ff       	call   c001039b <KePanic(char const*)>
c001de5e:	83 c4 10             	add    esp,0x10
c001de61:	e9 92 00 00 00       	jmp    c001def8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001de66:	66 90                	xchg   ax,ax
c001de68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001de6f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001de72:	85 c0                	test   eax,eax
c001de74:	0f 95 c0             	setne  al
c001de77:	84 c0                	test   al,al
c001de79:	74 11                	je     c001de8c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001de7b:	83 ec 0c             	sub    esp,0xc
c001de7e:	68 2b f0 01 c0       	push   0xc001f02b
c001de83:	e8 13 25 ff ff       	call   c001039b <KePanic(char const*)>
c001de88:	83 c4 10             	add    esp,0x10
c001de8b:	90                   	nop
c001de8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de90:	8b 00                	mov    eax,DWORD PTR [eax]
c001de92:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001de95:	85 c0                	test   eax,eax
c001de97:	0f 94 c0             	sete   al
c001de9a:	84 c0                	test   al,al
c001de9c:	74 36                	je     c001ded4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001de9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dea2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001dea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001deac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001deb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001deb7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001deba:	83 f8 01             	cmp    eax,0x1
c001debd:	74 25                	je     c001dee4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001debf:	83 ec 0c             	sub    esp,0xc
c001dec2:	68 04 f0 01 c0       	push   0xc001f004
c001dec7:	e8 cf 24 ff ff       	call   c001039b <KePanic(char const*)>
c001decc:	83 c4 10             	add    esp,0x10
c001decf:	eb 13                	jmp    c001dee4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001ded1:	8d 76 00             	lea    esi,[esi+0x0]
c001ded4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ded8:	8b 00                	mov    eax,DWORD PTR [eax]
c001deda:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001dedd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dee1:	89 10                	mov    DWORD PTR [eax],edx
c001dee3:	90                   	nop
c001dee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dee8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001deeb:	8d 50 ff             	lea    edx,[eax-0x1]
c001deee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001def2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001def5:	8d 76 00             	lea    esi,[esi+0x0]
c001def8:	83 c4 0c             	add    esp,0xc
c001defb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001defc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001defc:	83 ec 0c             	sub    esp,0xc
c001deff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001df04:	75 12                	jne    c001df18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001df06:	83 ec 0c             	sub    esp,0xc
c001df09:	68 a8 ef 01 c0       	push   0xc001efa8
c001df0e:	e8 88 24 ff ff       	call   c001039b <KePanic(char const*)>
c001df13:	83 c4 10             	add    esp,0x10
c001df16:	66 90                	xchg   ax,ax
c001df18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df1c:	8b 00                	mov    eax,DWORD PTR [eax]
c001df1e:	85 c0                	test   eax,eax
c001df20:	74 36                	je     c001df58 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001df22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001df29:	85 c0                	test   eax,eax
c001df2b:	74 2b                	je     c001df58 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001df2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001df34:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001df38:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001df3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df3f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001df43:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001df46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001df4d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001df54:	eb 6a                	jmp    c001dfc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001df56:	66 90                	xchg   ax,ax
c001df58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df5c:	8b 00                	mov    eax,DWORD PTR [eax]
c001df5e:	85 c0                	test   eax,eax
c001df60:	75 4e                	jne    c001dfb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001df62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001df69:	85 c0                	test   eax,eax
c001df6b:	75 43                	jne    c001dfb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001df6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df71:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001df75:	89 10                	mov    DWORD PTR [eax],edx
c001df77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df7b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001df7f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001df82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001df89:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001df90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df94:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001df97:	85 c0                	test   eax,eax
c001df99:	74 25                	je     c001dfc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001df9b:	83 ec 0c             	sub    esp,0xc
c001df9e:	68 ca ef 01 c0       	push   0xc001efca
c001dfa3:	e8 f3 23 ff ff       	call   c001039b <KePanic(char const*)>
c001dfa8:	83 c4 10             	add    esp,0x10
c001dfab:	eb 13                	jmp    c001dfc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001dfad:	8d 76 00             	lea    esi,[esi+0x0]
c001dfb0:	83 ec 0c             	sub    esp,0xc
c001dfb3:	68 d4 ef 01 c0       	push   0xc001efd4
c001dfb8:	e8 de 23 ff ff       	call   c001039b <KePanic(char const*)>
c001dfbd:	83 c4 10             	add    esp,0x10
c001dfc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfc4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001dfc7:	8d 50 01             	lea    edx,[eax+0x1]
c001dfca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfce:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001dfd1:	90                   	nop
c001dfd2:	83 c4 0c             	add    esp,0xc
c001dfd5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001dfd8 <ACPI::~ACPI()>:
c001dfd8:	83 ec 0c             	sub    esp,0xc
c001dfdb:	ba 48 fc 01 c0       	mov    edx,0xc001fc48
c001dfe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfe4:	89 10                	mov    DWORD PTR [eax],edx
c001dfe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfea:	83 ec 0c             	sub    esp,0xc
c001dfed:	50                   	push   eax
c001dfee:	e8 57 d9 fe ff       	call   c000b94a <Device::~Device()>
c001dff3:	83 c4 10             	add    esp,0x10
c001dff6:	90                   	nop
c001dff7:	83 c4 0c             	add    esp,0xc
c001dffa:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001dffc <ACPI::~ACPI()>:
c001dffc:	83 ec 0c             	sub    esp,0xc
c001dfff:	83 ec 0c             	sub    esp,0xc
c001e002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e006:	e8 cd ff ff ff       	call   c001dfd8 <ACPI::~ACPI()>
c001e00b:	83 c4 10             	add    esp,0x10
c001e00e:	83 ec 08             	sub    esp,0x8
c001e011:	68 64 12 00 00       	push   0x1264
c001e016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e01a:	e8 f5 c4 fe ff       	call   c000a514 <operator delete(void*, unsigned long)>
c001e01f:	83 c4 10             	add    esp,0x10
c001e022:	83 c4 0c             	add    esp,0xc
c001e025:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001e028 <LinkedList<Device>::~LinkedList()>:
c001e028:	90                   	nop
c001e029:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001e02c <LinkedList<Device>::isEmpty()>:
c001e02c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e030:	8b 00                	mov    eax,DWORD PTR [eax]
c001e032:	85 c0                	test   eax,eax
c001e034:	75 0e                	jne    c001e044 <LinkedList<Device>::isEmpty()+0x18>
c001e036:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e03a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e03d:	85 c0                	test   eax,eax
c001e03f:	75 03                	jne    c001e044 <LinkedList<Device>::isEmpty()+0x18>
c001e041:	b0 01                	mov    al,0x1
c001e043:	c3                   	ret    
c001e044:	b0 00                	mov    al,0x0
c001e046:	90                   	nop
c001e047:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001e048 <LinkedList<Device>::getFirstElement()>:
c001e048:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e04c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e04e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001e050 <LinkedList<Device>::removeFirst()>:
c001e050:	83 ec 0c             	sub    esp,0xc
c001e053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e057:	8b 00                	mov    eax,DWORD PTR [eax]
c001e059:	85 c0                	test   eax,eax
c001e05b:	75 17                	jne    c001e074 <LinkedList<Device>::removeFirst()+0x24>
c001e05d:	83 ec 0c             	sub    esp,0xc
c001e060:	68 e0 ef 01 c0       	push   0xc001efe0
c001e065:	e8 31 23 ff ff       	call   c001039b <KePanic(char const*)>
c001e06a:	83 c4 10             	add    esp,0x10
c001e06d:	e9 92 00 00 00       	jmp    c001e104 <LinkedList<Device>::removeFirst()+0xb4>
c001e072:	66 90                	xchg   ax,ax
c001e074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e078:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e07b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001e081:	85 c0                	test   eax,eax
c001e083:	74 13                	je     c001e098 <LinkedList<Device>::removeFirst()+0x48>
c001e085:	83 ec 0c             	sub    esp,0xc
c001e088:	68 2b f0 01 c0       	push   0xc001f02b
c001e08d:	e8 09 23 ff ff       	call   c001039b <KePanic(char const*)>
c001e092:	83 c4 10             	add    esp,0x10
c001e095:	8d 76 00             	lea    esi,[esi+0x0]
c001e098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e09c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e09e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001e0a4:	85 c0                	test   eax,eax
c001e0a6:	75 34                	jne    c001e0dc <LinkedList<Device>::removeFirst()+0x8c>
c001e0a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e0b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0b6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e0bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0c1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e0c4:	83 f8 01             	cmp    eax,0x1
c001e0c7:	74 27                	je     c001e0f0 <LinkedList<Device>::removeFirst()+0xa0>
c001e0c9:	83 ec 0c             	sub    esp,0xc
c001e0cc:	68 04 f0 01 c0       	push   0xc001f004
c001e0d1:	e8 c5 22 ff ff       	call   c001039b <KePanic(char const*)>
c001e0d6:	83 c4 10             	add    esp,0x10
c001e0d9:	eb 15                	jmp    c001e0f0 <LinkedList<Device>::removeFirst()+0xa0>
c001e0db:	90                   	nop
c001e0dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e0e2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001e0e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0ec:	89 10                	mov    DWORD PTR [eax],edx
c001e0ee:	66 90                	xchg   ax,ax
c001e0f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e0f7:	8d 50 ff             	lea    edx,[eax-0x1]
c001e0fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e101:	8d 76 00             	lea    esi,[esi+0x0]
c001e104:	83 c4 0c             	add    esp,0xc
c001e107:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001e108 <CPU::~CPU()>:
c001e108:	83 ec 0c             	sub    esp,0xc
c001e10b:	ba e4 fd 01 c0       	mov    edx,0xc001fde4
c001e110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e114:	89 10                	mov    DWORD PTR [eax],edx
c001e116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e11a:	83 ec 0c             	sub    esp,0xc
c001e11d:	50                   	push   eax
c001e11e:	e8 27 d8 fe ff       	call   c000b94a <Device::~Device()>
c001e123:	83 c4 10             	add    esp,0x10
c001e126:	90                   	nop
c001e127:	83 c4 0c             	add    esp,0xc
c001e12a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001e12c <CPU::~CPU()>:
c001e12c:	83 ec 0c             	sub    esp,0xc
c001e12f:	83 ec 0c             	sub    esp,0xc
c001e132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e136:	e8 cd ff ff ff       	call   c001e108 <CPU::~CPU()>
c001e13b:	83 c4 10             	add    esp,0x10
c001e13e:	83 ec 08             	sub    esp,0x8
c001e141:	68 94 11 00 00       	push   0x1194
c001e146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e14a:	e8 c5 c3 fe ff       	call   c000a514 <operator delete(void*, unsigned long)>
c001e14f:	83 c4 10             	add    esp,0x10
c001e152:	83 c4 0c             	add    esp,0xc
c001e155:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001e158 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001e158:	90                   	nop
c001e159:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001e15c <ThreadControlBlock::ThreadControlBlock()>:
c001e15c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e160:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e167:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e16b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001e172:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e176:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001e17d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e181:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001e188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e18c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001e193:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e197:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001e19b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e19f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001e1a3:	90                   	nop
c001e1a4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001e1a8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001e1a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e1b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1b6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e1bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1c1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e1c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e1d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1d6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e1dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1e1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e1e8:	90                   	nop
c001e1e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001e1ec <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001e1ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e1f0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e1f3:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001e1f4 <PCI::~PCI()>:
c001e1f4:	83 ec 0c             	sub    esp,0xc
c001e1f7:	ba 6c 0b 02 c0       	mov    edx,0xc0020b6c
c001e1fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e200:	89 10                	mov    DWORD PTR [eax],edx
c001e202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e206:	83 ec 0c             	sub    esp,0xc
c001e209:	50                   	push   eax
c001e20a:	e8 c5 d1 fe ff       	call   c000b3d4 <Bus::~Bus()>
c001e20f:	83 c4 10             	add    esp,0x10
c001e212:	90                   	nop
c001e213:	83 c4 0c             	add    esp,0xc
c001e216:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001e218 <PCI::~PCI()>:
c001e218:	83 ec 0c             	sub    esp,0xc
c001e21b:	83 ec 0c             	sub    esp,0xc
c001e21e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e222:	e8 cd ff ff ff       	call   c001e1f4 <PCI::~PCI()>
c001e227:	83 c4 10             	add    esp,0x10
c001e22a:	83 ec 08             	sub    esp,0x8
c001e22d:	68 5c 01 00 00       	push   0x15c
c001e232:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e236:	e8 d9 c2 fe ff       	call   c000a514 <operator delete(void*, unsigned long)>
c001e23b:	83 c4 10             	add    esp,0x10
c001e23e:	83 c4 0c             	add    esp,0xc
c001e241:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001e242 <IDE::~IDE()>:
c001e242:	83 ec 0c             	sub    esp,0xc
c001e245:	ba 20 0c 02 c0       	mov    edx,0xc0020c20
c001e24a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e24e:	89 10                	mov    DWORD PTR [eax],edx
c001e250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e254:	83 ec 0c             	sub    esp,0xc
c001e257:	50                   	push   eax
c001e258:	e8 67 db fe ff       	call   c000bdc4 <HardDiskController::~HardDiskController()>
c001e25d:	83 c4 10             	add    esp,0x10
c001e260:	90                   	nop
c001e261:	83 c4 0c             	add    esp,0xc
c001e264:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001e266 <IDE::~IDE()>:
c001e266:	83 ec 0c             	sub    esp,0xc
c001e269:	83 ec 0c             	sub    esp,0xc
c001e26c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e270:	e8 cd ff ff ff       	call   c001e242 <IDE::~IDE()>
c001e275:	83 c4 10             	add    esp,0x10
c001e278:	83 ec 08             	sub    esp,0x8
c001e27b:	68 70 02 00 00       	push   0x270
c001e280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e284:	e8 8b c2 fe ff       	call   c000a514 <operator delete(void*, unsigned long)>
c001e289:	83 c4 10             	add    esp,0x10
c001e28c:	83 c4 0c             	add    esp,0xc
c001e28f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001e290 <SATABus::~SATABus()>:
c001e290:	83 ec 0c             	sub    esp,0xc
c001e293:	ba 70 0c 02 c0       	mov    edx,0xc0020c70
c001e298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e29c:	89 10                	mov    DWORD PTR [eax],edx
c001e29e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2a2:	83 ec 0c             	sub    esp,0xc
c001e2a5:	50                   	push   eax
c001e2a6:	e8 19 db fe ff       	call   c000bdc4 <HardDiskController::~HardDiskController()>
c001e2ab:	83 c4 10             	add    esp,0x10
c001e2ae:	90                   	nop
c001e2af:	83 c4 0c             	add    esp,0xc
c001e2b2:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001e2b4 <SATABus::~SATABus()>:
c001e2b4:	83 ec 0c             	sub    esp,0xc
c001e2b7:	83 ec 0c             	sub    esp,0xc
c001e2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e2be:	e8 cd ff ff ff       	call   c001e290 <SATABus::~SATABus()>
c001e2c3:	83 c4 10             	add    esp,0x10
c001e2c6:	83 ec 08             	sub    esp,0x8
c001e2c9:	68 64 01 00 00       	push   0x164
c001e2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e2d2:	e8 3d c2 fe ff       	call   c000a514 <operator delete(void*, unsigned long)>
c001e2d7:	83 c4 10             	add    esp,0x10
c001e2da:	83 c4 0c             	add    esp,0xc
c001e2dd:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001e2de <ATA::~ATA()>:
c001e2de:	83 ec 0c             	sub    esp,0xc
c001e2e1:	ba b0 0c 02 c0       	mov    edx,0xc0020cb0
c001e2e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2ea:	89 10                	mov    DWORD PTR [eax],edx
c001e2ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2f0:	83 ec 0c             	sub    esp,0xc
c001e2f3:	50                   	push   eax
c001e2f4:	e8 ad db fe ff       	call   c000bea6 <PhysicalDisk::~PhysicalDisk()>
c001e2f9:	83 c4 10             	add    esp,0x10
c001e2fc:	90                   	nop
c001e2fd:	83 c4 0c             	add    esp,0xc
c001e300:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001e302 <ATA::~ATA()>:
c001e302:	83 ec 0c             	sub    esp,0xc
c001e305:	83 ec 0c             	sub    esp,0xc
c001e308:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e30c:	e8 cd ff ff ff       	call   c001e2de <ATA::~ATA()>
c001e311:	83 c4 10             	add    esp,0x10
c001e314:	83 ec 08             	sub    esp,0x8
c001e317:	68 7c 01 00 00       	push   0x17c
c001e31c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e320:	e8 ef c1 fe ff       	call   c000a514 <operator delete(void*, unsigned long)>
c001e325:	83 c4 10             	add    esp,0x10
c001e328:	83 c4 0c             	add    esp,0xc
c001e32b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001e32c <ATAPI::~ATAPI()>:
c001e32c:	83 ec 0c             	sub    esp,0xc
c001e32f:	ba f8 0c 02 c0       	mov    edx,0xc0020cf8
c001e334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e338:	89 10                	mov    DWORD PTR [eax],edx
c001e33a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e33e:	83 ec 0c             	sub    esp,0xc
c001e341:	50                   	push   eax
c001e342:	e8 5f db fe ff       	call   c000bea6 <PhysicalDisk::~PhysicalDisk()>
c001e347:	83 c4 10             	add    esp,0x10
c001e34a:	90                   	nop
c001e34b:	83 c4 0c             	add    esp,0xc
c001e34e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001e350 <ATAPI::~ATAPI()>:
c001e350:	83 ec 0c             	sub    esp,0xc
c001e353:	83 ec 0c             	sub    esp,0xc
c001e356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e35a:	e8 cd ff ff ff       	call   c001e32c <ATAPI::~ATAPI()>
c001e35f:	83 c4 10             	add    esp,0x10
c001e362:	83 ec 08             	sub    esp,0x8
c001e365:	68 84 01 00 00       	push   0x184
c001e36a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e36e:	e8 a1 c1 fe ff       	call   c000a514 <operator delete(void*, unsigned long)>
c001e373:	83 c4 10             	add    esp,0x10
c001e376:	83 c4 0c             	add    esp,0xc
c001e379:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001e37a <SATA::~SATA()>:
c001e37a:	83 ec 0c             	sub    esp,0xc
c001e37d:	ba ac 0d 02 c0       	mov    edx,0xc0020dac
c001e382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e386:	89 10                	mov    DWORD PTR [eax],edx
c001e388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e38c:	83 ec 0c             	sub    esp,0xc
c001e38f:	50                   	push   eax
c001e390:	e8 11 db fe ff       	call   c000bea6 <PhysicalDisk::~PhysicalDisk()>
c001e395:	83 c4 10             	add    esp,0x10
c001e398:	90                   	nop
c001e399:	83 c4 0c             	add    esp,0xc
c001e39c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001e39e <SATA::~SATA()>:
c001e39e:	83 ec 0c             	sub    esp,0xc
c001e3a1:	83 ec 0c             	sub    esp,0xc
c001e3a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e3a8:	e8 cd ff ff ff       	call   c001e37a <SATA::~SATA()>
c001e3ad:	83 c4 10             	add    esp,0x10
c001e3b0:	83 ec 08             	sub    esp,0x8
c001e3b3:	68 7c 01 00 00       	push   0x17c
c001e3b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e3bc:	e8 53 c1 fe ff       	call   c000a514 <operator delete(void*, unsigned long)>
c001e3c1:	83 c4 10             	add    esp,0x10
c001e3c4:	83 c4 0c             	add    esp,0xc
c001e3c7:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001e3c8 <SATAPI::~SATAPI()>:
c001e3c8:	83 ec 0c             	sub    esp,0xc
c001e3cb:	ba d0 0e 02 c0       	mov    edx,0xc0020ed0
c001e3d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3d4:	89 10                	mov    DWORD PTR [eax],edx
c001e3d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3da:	83 ec 0c             	sub    esp,0xc
c001e3dd:	50                   	push   eax
c001e3de:	e8 c3 da fe ff       	call   c000bea6 <PhysicalDisk::~PhysicalDisk()>
c001e3e3:	83 c4 10             	add    esp,0x10
c001e3e6:	90                   	nop
c001e3e7:	83 c4 0c             	add    esp,0xc
c001e3ea:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001e3ec <SATAPI::~SATAPI()>:
c001e3ec:	83 ec 0c             	sub    esp,0xc
c001e3ef:	83 ec 0c             	sub    esp,0xc
c001e3f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e3f6:	e8 cd ff ff ff       	call   c001e3c8 <SATAPI::~SATAPI()>
c001e3fb:	83 c4 10             	add    esp,0x10
c001e3fe:	83 ec 08             	sub    esp,0x8
c001e401:	68 84 01 00 00       	push   0x184
c001e406:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e40a:	e8 05 c1 fe ff       	call   c000a514 <operator delete(void*, unsigned long)>
c001e40f:	83 c4 10             	add    esp,0x10
c001e412:	83 c4 0c             	add    esp,0xc
c001e415:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001e416 <IOAPIC::~IOAPIC()>:
c001e416:	83 ec 0c             	sub    esp,0xc
c001e419:	ba 10 0f 02 c0       	mov    edx,0xc0020f10
c001e41e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e422:	89 10                	mov    DWORD PTR [eax],edx
c001e424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e428:	83 ec 0c             	sub    esp,0xc
c001e42b:	50                   	push   eax
c001e42c:	e8 19 d5 fe ff       	call   c000b94a <Device::~Device()>
c001e431:	83 c4 10             	add    esp,0x10
c001e434:	90                   	nop
c001e435:	83 c4 0c             	add    esp,0xc
c001e438:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001e43a <IOAPIC::~IOAPIC()>:
c001e43a:	83 ec 0c             	sub    esp,0xc
c001e43d:	83 ec 0c             	sub    esp,0xc
c001e440:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e444:	e8 cd ff ff ff       	call   c001e416 <IOAPIC::~IOAPIC()>
c001e449:	83 c4 10             	add    esp,0x10
c001e44c:	83 ec 08             	sub    esp,0x8
c001e44f:	68 68 01 00 00       	push   0x168
c001e454:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e458:	e8 b7 c0 fe ff       	call   c000a514 <operator delete(void*, unsigned long)>
c001e45d:	83 c4 10             	add    esp,0x10
c001e460:	83 c4 0c             	add    esp,0xc
c001e463:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001e464 <APICTimer::~APICTimer()>:
c001e464:	83 ec 0c             	sub    esp,0xc
c001e467:	ba 58 0f 02 c0       	mov    edx,0xc0020f58
c001e46c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e470:	89 10                	mov    DWORD PTR [eax],edx
c001e472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e476:	83 ec 0c             	sub    esp,0xc
c001e479:	50                   	push   eax
c001e47a:	e8 95 ee fe ff       	call   c000d314 <Timer::~Timer()>
c001e47f:	83 c4 10             	add    esp,0x10
c001e482:	90                   	nop
c001e483:	83 c4 0c             	add    esp,0xc
c001e486:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001e488 <APICTimer::~APICTimer()>:
c001e488:	83 ec 0c             	sub    esp,0xc
c001e48b:	83 ec 0c             	sub    esp,0xc
c001e48e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e492:	e8 cd ff ff ff       	call   c001e464 <APICTimer::~APICTimer()>
c001e497:	83 c4 10             	add    esp,0x10
c001e49a:	83 ec 08             	sub    esp,0x8
c001e49d:	68 60 01 00 00       	push   0x160
c001e4a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e4a6:	e8 69 c0 fe ff       	call   c000a514 <operator delete(void*, unsigned long)>
c001e4ab:	83 c4 10             	add    esp,0x10
c001e4ae:	83 c4 0c             	add    esp,0xc
c001e4b1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001e4b4 <PIT::~PIT()>:
c001e4b4:	83 ec 0c             	sub    esp,0xc
c001e4b7:	ba a8 0f 02 c0       	mov    edx,0xc0020fa8
c001e4bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4c0:	89 10                	mov    DWORD PTR [eax],edx
c001e4c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4c6:	83 ec 0c             	sub    esp,0xc
c001e4c9:	50                   	push   eax
c001e4ca:	e8 45 ee fe ff       	call   c000d314 <Timer::~Timer()>
c001e4cf:	83 c4 10             	add    esp,0x10
c001e4d2:	90                   	nop
c001e4d3:	83 c4 0c             	add    esp,0xc
c001e4d6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001e4d8 <PIT::~PIT()>:
c001e4d8:	83 ec 0c             	sub    esp,0xc
c001e4db:	83 ec 0c             	sub    esp,0xc
c001e4de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e4e2:	e8 cd ff ff ff       	call   c001e4b4 <PIT::~PIT()>
c001e4e7:	83 c4 10             	add    esp,0x10
c001e4ea:	83 ec 08             	sub    esp,0x8
c001e4ed:	68 5c 01 00 00       	push   0x15c
c001e4f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e4f6:	e8 19 c0 fe ff       	call   c000a514 <operator delete(void*, unsigned long)>
c001e4fb:	83 c4 10             	add    esp,0x10
c001e4fe:	83 c4 0c             	add    esp,0xc
c001e501:	c3                   	ret    

Disassembly of section userkernel:

c0022000 <KiDefaultSignalHandlerAbort(int)>:
c0022000:	57                   	push   edi
c0022001:	b9 07 00 00 00       	mov    ecx,0x7
c0022006:	56                   	push   esi
c0022007:	be d5 fe 01 c0       	mov    esi,0xc001fed5
c002200c:	83 ec 24             	sub    esp,0x24
c002200f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0022013:	fc                   	cld    
c0022014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002201a:	50                   	push   eax
c002201b:	6a 00                	push   0x0
c002201d:	6a 38                	push   0x38
c002201f:	6a 01                	push   0x1
c0022021:	e8 2c 00 00 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0022026:	83 c4 34             	add    esp,0x34
c0022029:	5e                   	pop    esi
c002202a:	5f                   	pop    edi
c002202b:	c3                   	ret    

c002202c <KiDefaultSignalHandlerTerminate(int)>:
c002202c:	57                   	push   edi
c002202d:	b9 08 00 00 00       	mov    ecx,0x8
c0022032:	56                   	push   esi
c0022033:	be f1 fe 01 c0       	mov    esi,0xc001fef1
c0022038:	83 ec 24             	sub    esp,0x24
c002203b:	89 e7                	mov    edi,esp
c002203d:	fc                   	cld    
c002203e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022040:	54                   	push   esp
c0022041:	6a 00                	push   0x0
c0022043:	6a 37                	push   0x37
c0022045:	6a 01                	push   0x1
c0022047:	e8 06 00 00 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002204c:	83 c4 34             	add    esp,0x34
c002204f:	5e                   	pop    esi
c0022050:	5f                   	pop    edi
c0022051:	c3                   	ret    

c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0022052:	53                   	push   ebx
c0022053:	83 ec 10             	sub    esp,0x10
c0022056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002205a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002205e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022066:	cd 60                	int    0x60
c0022068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002206c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022078:	83 c4 10             	add    esp,0x10
c002207b:	5b                   	pop    ebx
c002207c:	c3                   	ret    

Disassembly of section align_previous:

c0023000 <DO_NOT_DELETE()>:
c0023000:	c3                   	ret    
