
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 69 9a 00 00       	call   c0009a89 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 99 10 02 00       	call   c00210be <_init>
c0000025:	c3                   	ret    
c0000026:	bb 42 1d 02 c0       	mov    ebx,0xc0021d42
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 50 1d 02 c0    	cmp    ebx,0xc0021d50
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 5b 02 c0       	mov    eax,0xc0025b98
c0000049:	3d 98 5b 02 c0       	cmp    eax,0xc0025b98
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 5b 02 c0       	push   0xc0025b98
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 5b 02 c0       	mov    eax,0xc0025b98
c0000075:	2d 98 5b 02 c0       	sub    eax,0xc0025b98
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 5b 02 c0       	push   0xc0025b98
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 20 5d 02 c0 00 	cmp    BYTE PTR ds:0xc0025d20,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 58 1d 02 c0       	mov    ebx,0xc0021d58
c00000bb:	81 eb 54 1d 02 c0    	sub    ebx,0xc0021d54
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 54 1d 02 c0       	mov    esi,0xc0021d54
c00000ca:	a1 24 5d 02 c0       	mov    eax,ds:0xc0025d24
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 24 5d 02 c0       	mov    ds:0xc0025d24,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 24 5d 02 c0       	mov    eax,ds:0xc0025d24
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 5b 02 c0       	push   0xc0025b98
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 20 5d 02 c0 01 	mov    BYTE PTR ds:0xc0025d20,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 28 5d 02 c0       	push   0xc0025d28
c000012c:	68 98 5b 02 c0       	push   0xc0025b98
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	0f 20 c0             	mov    eax,cr0
c00002c7:	0c 08                	or     al,0x8
c00002c9:	0f 22 c0             	mov    cr0,eax
c00002cc:	85 d2                	test   edx,edx
c00002ce:	75 11                	jne    c00002e1 <commonThreadSwitch.firstTime>
c00002d0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002d3:	e8 a4 74 01 00       	call   c001777c <changeTSS>
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	5a                   	pop    edx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	9d                   	popf   
c00002e0:	c3                   	ret    

c00002e1 <commonThreadSwitch.firstTime>:
c00002e1:	fa                   	cli    
c00002e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002e5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002ea:	60                   	pusha  
c00002eb:	e8 dc c4 00 00       	call   c000c7cc <mapVASFirstTime>
c00002f0:	61                   	popa   
c00002f1:	89 c4                	mov    esp,eax
c00002f3:	56                   	push   esi
c00002f4:	52                   	push   edx
c00002f5:	e8 82 74 01 00       	call   c001777c <changeTSS>
c00002fa:	5a                   	pop    edx
c00002fb:	5e                   	pop    esi
c00002fc:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000303:	5d                   	pop    ebp
c0000304:	5f                   	pop    edi
c0000305:	5e                   	pop    esi
c0000306:	59                   	pop    ecx
c0000307:	59                   	pop    ecx
c0000308:	5b                   	pop    ebx
c0000309:	58                   	pop    eax
c000030a:	81 c4 04 00 00 00    	add    esp,0x4
c0000310:	6a 02                	push   0x2
c0000312:	9d                   	popf   
c0000313:	52                   	push   edx
c0000314:	e8 4b 79 01 00       	call   c0017c64 <taskStartupFunction>
c0000319:	5a                   	pop    edx
c000031a:	50                   	push   eax
c000031b:	ff d2                	call   edx
c000031d:	e8 8e 7f 01 00       	call   c00182b0 <taskReturned>
c0000322:	e9 fb ff ff ff       	jmp    c0000322 <commonThreadSwitch.firstTime+0x41>

c0000327 <asmQuickAcquireLock>:
c0000327:	55                   	push   ebp
c0000328:	89 e5                	mov    ebp,esp
c000032a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032d <asmQuickAcquireLock.retry>:
c000032d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000332:	72 02                	jb     c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000334:	fa                   	cli    
c0000335:	c3                   	ret    

c0000336 <asmQuickAcquireLock.spin_with_pause>:
c0000336:	f3 90                	pause  
c0000338:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000033e:	75 f6                	jne    c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000340:	e9 e8 ff ff ff       	jmp    c000032d <asmQuickAcquireLock.retry>

c0000345 <asmQuickReleaseLock>:
c0000345:	55                   	push   ebp
c0000346:	89 e5                	mov    ebp,esp
c0000348:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000034f:	5d                   	pop    ebp
c0000350:	c3                   	ret    

c0000351 <asmAcquireLock>:
c0000351:	55                   	push   ebp
c0000352:	89 e5                	mov    ebp,esp
c0000354:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000357 <asmAcquireLock.retry>:
c0000357:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000035c:	72 05                	jb     c0000363 <asmAcquireLock.spin_with_pause>
c000035e:	9c                   	pushf  
c000035f:	58                   	pop    eax
c0000360:	fa                   	cli    
c0000361:	5d                   	pop    ebp
c0000362:	c3                   	ret    

c0000363 <asmAcquireLock.spin_with_pause>:
c0000363:	f3 90                	pause  
c0000365:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000036b:	75 f6                	jne    c0000363 <asmAcquireLock.spin_with_pause>
c000036d:	e9 e5 ff ff ff       	jmp    c0000357 <asmAcquireLock.retry>

c0000372 <asmReleaseLock>:
c0000372:	55                   	push   ebp
c0000373:	89 e5                	mov    ebp,esp
c0000375:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000378:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000037b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000381:	52                   	push   edx
c0000382:	9d                   	popf   
c0000383:	5d                   	pop    ebp
c0000384:	c3                   	ret    

c0000385 <loadGDT>:
c0000385:	0f 01 15 70 61 02 c0 	lgdtd  ds:0xc0026170
c000038c:	66 b8 10 00          	mov    ax,0x10
c0000390:	66 8e d8             	mov    ds,ax
c0000393:	66 8e c0             	mov    es,ax
c0000396:	66 8e e0             	mov    fs,ax
c0000399:	66 8e e8             	mov    gs,ax
c000039c:	66 8e d0             	mov    ss,ax
c000039f:	e9 00 00 00 00       	jmp    c00003a4 <flush2>

c00003a4 <flush2>:
c00003a4:	c3                   	ret    

c00003a5 <isr0>:
c00003a5:	fa                   	cli    
c00003a6:	68 00 00 00 00       	push   0x0
c00003ab:	68 00 00 00 00       	push   0x0
c00003b0:	e9 44 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003b5 <isr1>:
c00003b5:	fa                   	cli    
c00003b6:	6a 00                	push   0x0
c00003b8:	6a 01                	push   0x1
c00003ba:	e9 3a 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003bf <isr2>:
c00003bf:	fa                   	cli    
c00003c0:	6a 00                	push   0x0
c00003c2:	6a 02                	push   0x2
c00003c4:	e9 30 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003c9 <isr3>:
c00003c9:	fa                   	cli    
c00003ca:	6a 00                	push   0x0
c00003cc:	6a 03                	push   0x3
c00003ce:	e9 26 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003d3 <isr4>:
c00003d3:	fa                   	cli    
c00003d4:	6a 00                	push   0x0
c00003d6:	6a 04                	push   0x4
c00003d8:	e9 1c 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003dd <isr5>:
c00003dd:	fa                   	cli    
c00003de:	6a 00                	push   0x0
c00003e0:	6a 05                	push   0x5
c00003e2:	e9 12 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003e7 <isr6>:
c00003e7:	fa                   	cli    
c00003e8:	6a 00                	push   0x0
c00003ea:	6a 06                	push   0x6
c00003ec:	e9 08 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003f1 <isr7>:
c00003f1:	fa                   	cli    
c00003f2:	6a 00                	push   0x0
c00003f4:	6a 07                	push   0x7
c00003f6:	e9 fe 00 00 00       	jmp    c00004f9 <int_common_stub>

c00003fb <isr8>:
c00003fb:	fa                   	cli    
c00003fc:	6a 08                	push   0x8
c00003fe:	e9 f6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000403 <isr9>:
c0000403:	fa                   	cli    
c0000404:	6a 00                	push   0x0
c0000406:	6a 09                	push   0x9
c0000408:	e9 ec 00 00 00       	jmp    c00004f9 <int_common_stub>

c000040d <isr10>:
c000040d:	fa                   	cli    
c000040e:	6a 0a                	push   0xa
c0000410:	e9 e4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000415 <isr11>:
c0000415:	fa                   	cli    
c0000416:	6a 0b                	push   0xb
c0000418:	e9 dc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000041d <isr12>:
c000041d:	fa                   	cli    
c000041e:	6a 0c                	push   0xc
c0000420:	e9 d4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000425 <isr13>:
c0000425:	fa                   	cli    
c0000426:	6a 0d                	push   0xd
c0000428:	e9 cc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000042d <isr14>:
c000042d:	fa                   	cli    
c000042e:	6a 0e                	push   0xe
c0000430:	e9 c4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000435 <isr15>:
c0000435:	fa                   	cli    
c0000436:	6a 00                	push   0x0
c0000438:	6a 0f                	push   0xf
c000043a:	e9 ba 00 00 00       	jmp    c00004f9 <int_common_stub>

c000043f <isr16>:
c000043f:	fa                   	cli    
c0000440:	6a 00                	push   0x0
c0000442:	6a 10                	push   0x10
c0000444:	e9 b0 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000449 <isr17>:
c0000449:	fa                   	cli    
c000044a:	6a 00                	push   0x0
c000044c:	6a 11                	push   0x11
c000044e:	e9 a6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000453 <isr18>:
c0000453:	fa                   	cli    
c0000454:	6a 00                	push   0x0
c0000456:	6a 12                	push   0x12
c0000458:	e9 9c 00 00 00       	jmp    c00004f9 <int_common_stub>

c000045d <irq3>:
c000045d:	fa                   	cli    
c000045e:	6a 00                	push   0x0
c0000460:	6a 23                	push   0x23
c0000462:	e9 92 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000467 <irq4>:
c0000467:	fa                   	cli    
c0000468:	6a 00                	push   0x0
c000046a:	6a 24                	push   0x24
c000046c:	e9 88 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000471 <irq5>:
c0000471:	fa                   	cli    
c0000472:	6a 00                	push   0x0
c0000474:	6a 25                	push   0x25
c0000476:	e9 7e 00 00 00       	jmp    c00004f9 <int_common_stub>

c000047b <irq6>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 26                	push   0x26
c0000480:	e9 74 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000485 <irq7>:
c0000485:	fa                   	cli    
c0000486:	6a 00                	push   0x0
c0000488:	6a 27                	push   0x27
c000048a:	e9 6a 00 00 00       	jmp    c00004f9 <int_common_stub>

c000048f <irq8>:
c000048f:	fa                   	cli    
c0000490:	6a 00                	push   0x0
c0000492:	6a 28                	push   0x28
c0000494:	e9 60 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000499 <irq9>:
c0000499:	fa                   	cli    
c000049a:	6a 00                	push   0x0
c000049c:	6a 29                	push   0x29
c000049e:	e9 56 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004a3 <irq10>:
c00004a3:	fa                   	cli    
c00004a4:	6a 00                	push   0x0
c00004a6:	6a 2a                	push   0x2a
c00004a8:	e9 4c 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004ad <irq11>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 2b                	push   0x2b
c00004b2:	e9 42 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004b7 <irq12>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 2c                	push   0x2c
c00004bc:	e9 38 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004c1 <irq13>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 2d                	push   0x2d
c00004c6:	e9 2e 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004cb <irq14>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 2e                	push   0x2e
c00004d0:	e9 24 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004d5 <irq15>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 2f                	push   0x2f
c00004da:	e9 1a 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004df <irq1>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 21                	push   0x21
c00004e4:	eb 13                	jmp    c00004f9 <int_common_stub>

c00004e6 <irq2>:
c00004e6:	fa                   	cli    
c00004e7:	6a 00                	push   0x0
c00004e9:	6a 22                	push   0x22
c00004eb:	eb 0c                	jmp    c00004f9 <int_common_stub>

c00004ed <isr96>:
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 60                	push   0x60
c00004f1:	fb                   	sti    
c00004f2:	eb 05                	jmp    c00004f9 <int_common_stub>

c00004f4 <irq0>:
c00004f4:	fa                   	cli    
c00004f5:	6a 00                	push   0x0
c00004f7:	6a 20                	push   0x20

c00004f9 <int_common_stub>:
c00004f9:	60                   	pusha  
c00004fa:	1e                   	push   ds
c00004fb:	06                   	push   es
c00004fc:	0f a0                	push   fs
c00004fe:	0f a8                	push   gs
c0000500:	66 b8 10 00          	mov    ax,0x10
c0000504:	66 8e d8             	mov    ds,ax
c0000507:	66 8e c0             	mov    es,ax
c000050a:	66 8e e0             	mov    fs,ax
c000050d:	66 8e e8             	mov    gs,ax
c0000510:	54                   	push   esp
c0000511:	fc                   	cld    
c0000512:	e8 6a e2 00 00       	call   c000e781 <int_handler>
c0000517:	81 c4 04 00 00 00    	add    esp,0x4
c000051d:	0f a9                	pop    gs
c000051f:	0f a1                	pop    fs
c0000521:	07                   	pop    es
c0000522:	1f                   	pop    ds
c0000523:	61                   	popa   
c0000524:	81 c4 08 00 00 00    	add    esp,0x8
c000052a:	cf                   	iret   

c000052b <irq16>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 30                	push   0x30
c0000530:	e9 c4 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000535 <irq17>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 31                	push   0x31
c000053a:	e9 ba ff ff ff       	jmp    c00004f9 <int_common_stub>

c000053f <irq18>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 32                	push   0x32
c0000544:	e9 b0 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000549 <irq19>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 33                	push   0x33
c000054e:	e9 a6 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000553 <irq20>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 34                	push   0x34
c0000558:	e9 9c ff ff ff       	jmp    c00004f9 <int_common_stub>

c000055d <irq21>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 35                	push   0x35
c0000562:	e9 92 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000567 <irq22>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 36                	push   0x36
c000056c:	e9 88 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000571 <irq23>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 37                	push   0x37
c0000576:	e9 7e ff ff ff       	jmp    c00004f9 <int_common_stub>

c000057b <memcpy>:
c000057b:	e9 7a 83 00 00       	jmp    c00088fa <__not_memcpy>

c0000580 <memcmp>:
c0000580:	56                   	push   esi
c0000581:	53                   	push   ebx
c0000582:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000058a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000058e:	85 f6                	test   esi,esi
c0000590:	74 1d                	je     c00005af <memcmp+0x2f>
c0000592:	8a 08                	mov    cl,BYTE PTR [eax]
c0000594:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000597:	38 cb                	cmp    bl,cl
c0000599:	75 19                	jne    c00005b4 <memcmp+0x34>
c000059b:	01 c6                	add    esi,eax
c000059d:	eb 0a                	jmp    c00005a9 <memcmp+0x29>
c000059f:	90                   	nop
c00005a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a5:	38 d9                	cmp    cl,bl
c00005a7:	75 0b                	jne    c00005b4 <memcmp+0x34>
c00005a9:	40                   	inc    eax
c00005aa:	42                   	inc    edx
c00005ab:	39 f0                	cmp    eax,esi
c00005ad:	75 f1                	jne    c00005a0 <memcmp+0x20>
c00005af:	31 c0                	xor    eax,eax
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    
c00005b4:	0f b6 c1             	movzx  eax,cl
c00005b7:	29 d8                	sub    eax,ebx
c00005b9:	5b                   	pop    ebx
c00005ba:	5e                   	pop    esi
c00005bb:	c3                   	ret    

c00005bc <memmove>:
c00005bc:	55                   	push   ebp
c00005bd:	57                   	push   edi
c00005be:	56                   	push   esi
c00005bf:	53                   	push   ebx
c00005c0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005cc:	39 dd                	cmp    ebp,ebx
c00005ce:	0f 83 80 00 00 00    	jae    c0000654 <memmove+0x98>
c00005d4:	85 d2                	test   edx,edx
c00005d6:	74 74                	je     c000064c <memmove+0x90>
c00005d8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005db:	8d 75 04             	lea    esi,[ebp+0x4]
c00005de:	39 cd                	cmp    ebp,ecx
c00005e0:	0f 93 c1             	setae  cl
c00005e3:	39 f3                	cmp    ebx,esi
c00005e5:	0f 93 c0             	setae  al
c00005e8:	89 c6                	mov    esi,eax
c00005ea:	09 ce                	or     esi,ecx
c00005ec:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ef:	89 f0                	mov    eax,esi
c00005f1:	83 f9 0c             	cmp    ecx,0xc
c00005f4:	0f 97 c1             	seta   cl
c00005f7:	84 c8                	test   al,cl
c00005f9:	74 75                	je     c0000670 <memmove+0xb4>
c00005fb:	89 e9                	mov    ecx,ebp
c00005fd:	09 d9                	or     ecx,ebx
c00005ff:	83 e1 03             	and    ecx,0x3
c0000602:	75 6c                	jne    c0000670 <memmove+0xb4>
c0000604:	89 d7                	mov    edi,edx
c0000606:	89 d9                	mov    ecx,ebx
c0000608:	83 e7 fc             	and    edi,0xfffffffc
c000060b:	89 ee                	mov    esi,ebp
c000060d:	01 df                	add    edi,ebx
c000060f:	90                   	nop
c0000610:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000612:	83 c6 04             	add    esi,0x4
c0000615:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000618:	83 c1 04             	add    ecx,0x4
c000061b:	39 f9                	cmp    ecx,edi
c000061d:	75 f1                	jne    c0000610 <memmove+0x54>
c000061f:	89 d1                	mov    ecx,edx
c0000621:	89 d7                	mov    edi,edx
c0000623:	83 e1 fc             	and    ecx,0xfffffffc
c0000626:	29 cf                	sub    edi,ecx
c0000628:	01 cb                	add    ebx,ecx
c000062a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000062e:	39 ca                	cmp    edx,ecx
c0000630:	74 1a                	je     c000064c <memmove+0x90>
c0000632:	8a 03                	mov    al,BYTE PTR [ebx]
c0000634:	83 ff 01             	cmp    edi,0x1
c0000637:	88 06                	mov    BYTE PTR [esi],al
c0000639:	74 11                	je     c000064c <memmove+0x90>
c000063b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000063e:	83 ff 02             	cmp    edi,0x2
c0000641:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000644:	74 06                	je     c000064c <memmove+0x90>
c0000646:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000649:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000064c:	5b                   	pop    ebx
c000064d:	89 e8                	mov    eax,ebp
c000064f:	5e                   	pop    esi
c0000650:	5f                   	pop    edi
c0000651:	5d                   	pop    ebp
c0000652:	c3                   	ret    
c0000653:	90                   	nop
c0000654:	76 f6                	jbe    c000064c <memmove+0x90>
c0000656:	85 d2                	test   edx,edx
c0000658:	74 f2                	je     c000064c <memmove+0x90>
c000065a:	4b                   	dec    ebx
c000065b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000065e:	66 90                	xchg   ax,ax
c0000660:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000663:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000666:	4a                   	dec    edx
c0000667:	75 f7                	jne    c0000660 <memmove+0xa4>
c0000669:	5b                   	pop    ebx
c000066a:	89 e8                	mov    eax,ebp
c000066c:	5e                   	pop    esi
c000066d:	5f                   	pop    edi
c000066e:	5d                   	pop    ebp
c000066f:	c3                   	ret    
c0000670:	01 ea                	add    edx,ebp
c0000672:	89 e9                	mov    ecx,ebp
c0000674:	8a 03                	mov    al,BYTE PTR [ebx]
c0000676:	41                   	inc    ecx
c0000677:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000067a:	43                   	inc    ebx
c000067b:	39 d1                	cmp    ecx,edx
c000067d:	75 f5                	jne    c0000674 <memmove+0xb8>
c000067f:	eb cb                	jmp    c000064c <memmove+0x90>
c0000681:	8d 76 00             	lea    esi,[esi+0x0]

c0000684 <memset>:
c0000684:	57                   	push   edi
c0000685:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000689:	85 c9                	test   ecx,ecx
c000068b:	74 0b                	je     c0000698 <memset+0x14>
c000068d:	fc                   	cld    
c000068e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000692:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000696:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000069c:	5f                   	pop    edi
c000069d:	c3                   	ret    
c000069e:	66 90                	xchg   ax,ax

c00006a0 <strlen>:
c00006a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006a4:	31 c0                	xor    eax,eax
c00006a6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a9:	74 09                	je     c00006b4 <strlen+0x14>
c00006ab:	90                   	nop
c00006ac:	40                   	inc    eax
c00006ad:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b1:	75 f9                	jne    c00006ac <strlen+0xc>
c00006b3:	c3                   	ret    
c00006b4:	c3                   	ret    
c00006b5:	8d 76 00             	lea    esi,[esi+0x0]

c00006b8 <strpbrk>:
c00006b8:	57                   	push   edi
c00006b9:	56                   	push   esi
c00006ba:	53                   	push   ebx
c00006bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006c3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006c5:	84 db                	test   bl,bl
c00006c7:	74 21                	je     c00006ea <strpbrk+0x32>
c00006c9:	8a 07                	mov    al,BYTE PTR [edi]
c00006cb:	84 c0                	test   al,al
c00006cd:	74 14                	je     c00006e3 <strpbrk+0x2b>
c00006cf:	38 d8                	cmp    al,bl
c00006d1:	74 19                	je     c00006ec <strpbrk+0x34>
c00006d3:	89 fa                	mov    edx,edi
c00006d5:	eb 05                	jmp    c00006dc <strpbrk+0x24>
c00006d7:	90                   	nop
c00006d8:	38 d9                	cmp    cl,bl
c00006da:	74 10                	je     c00006ec <strpbrk+0x34>
c00006dc:	42                   	inc    edx
c00006dd:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006df:	84 c9                	test   cl,cl
c00006e1:	75 f5                	jne    c00006d8 <strpbrk+0x20>
c00006e3:	46                   	inc    esi
c00006e4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006e6:	84 db                	test   bl,bl
c00006e8:	75 e1                	jne    c00006cb <strpbrk+0x13>
c00006ea:	31 f6                	xor    esi,esi
c00006ec:	89 f0                	mov    eax,esi
c00006ee:	5b                   	pop    ebx
c00006ef:	5e                   	pop    esi
c00006f0:	5f                   	pop    edi
c00006f1:	c3                   	ret    
c00006f2:	66 90                	xchg   ax,ax

c00006f4 <strtok>:
c00006f4:	56                   	push   esi
c00006f5:	53                   	push   ebx
c00006f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006fe:	85 db                	test   ebx,ebx
c0000700:	75 07                	jne    c0000709 <strtok+0x15>
c0000702:	eb 2c                	jmp    c0000730 <strtok+0x3c>
c0000704:	43                   	inc    ebx
c0000705:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000709:	56                   	push   esi
c000070a:	53                   	push   ebx
c000070b:	e8 a8 ff ff ff       	call   c00006b8 <strpbrk>
c0000710:	5a                   	pop    edx
c0000711:	a3 40 5d 02 c0       	mov    ds:0xc0025d40,eax
c0000716:	59                   	pop    ecx
c0000717:	39 d8                	cmp    eax,ebx
c0000719:	74 e9                	je     c0000704 <strtok+0x10>
c000071b:	85 c0                	test   eax,eax
c000071d:	74 1b                	je     c000073a <strtok+0x46>
c000071f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000722:	8d 50 01             	lea    edx,[eax+0x1]
c0000725:	89 d8                	mov    eax,ebx
c0000727:	89 15 40 5d 02 c0    	mov    DWORD PTR ds:0xc0025d40,edx
c000072d:	5b                   	pop    ebx
c000072e:	5e                   	pop    esi
c000072f:	c3                   	ret    
c0000730:	8b 1d 40 5d 02 c0    	mov    ebx,DWORD PTR ds:0xc0025d40
c0000736:	85 db                	test   ebx,ebx
c0000738:	75 cf                	jne    c0000709 <strtok+0x15>
c000073a:	31 c0                	xor    eax,eax
c000073c:	5b                   	pop    ebx
c000073d:	5e                   	pop    esi
c000073e:	c3                   	ret    
c000073f:	90                   	nop

c0000740 <strcpy>:
c0000740:	53                   	push   ebx
c0000741:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000749:	89 c3                	mov    ebx,eax
c000074b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000074d:	84 d2                	test   dl,dl
c000074f:	74 0d                	je     c000075e <strcpy+0x1e>
c0000751:	8d 76 00             	lea    esi,[esi+0x0]
c0000754:	88 13                	mov    BYTE PTR [ebx],dl
c0000756:	41                   	inc    ecx
c0000757:	43                   	inc    ebx
c0000758:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075a:	84 d2                	test   dl,dl
c000075c:	75 f6                	jne    c0000754 <strcpy+0x14>
c000075e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000761:	5b                   	pop    ebx
c0000762:	c3                   	ret    
c0000763:	90                   	nop

c0000764 <strncpy>:
c0000764:	55                   	push   ebp
c0000765:	57                   	push   edi
c0000766:	56                   	push   esi
c0000767:	53                   	push   ebx
c0000768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000076c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000770:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000774:	85 c0                	test   eax,eax
c0000776:	74 39                	je     c00007b1 <strncpy+0x4d>
c0000778:	8a 1e                	mov    bl,BYTE PTR [esi]
c000077a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000077d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000780:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000783:	84 db                	test   bl,bl
c0000785:	74 31                	je     c00007b8 <strncpy+0x54>
c0000787:	85 c9                	test   ecx,ecx
c0000789:	74 26                	je     c00007b1 <strncpy+0x4d>
c000078b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000078e:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000791:	8d 55 02             	lea    edx,[ebp+0x2]
c0000794:	8d 46 02             	lea    eax,[esi+0x2]
c0000797:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000079a:	84 db                	test   bl,bl
c000079c:	75 0f                	jne    c00007ad <strncpy+0x49>
c000079e:	eb 18                	jmp    c00007b8 <strncpy+0x54>
c00007a0:	40                   	inc    eax
c00007a1:	42                   	inc    edx
c00007a2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007a5:	49                   	dec    ecx
c00007a6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a9:	84 db                	test   bl,bl
c00007ab:	74 0b                	je     c00007b8 <strncpy+0x54>
c00007ad:	85 c9                	test   ecx,ecx
c00007af:	75 ef                	jne    c00007a0 <strncpy+0x3c>
c00007b1:	5b                   	pop    ebx
c00007b2:	89 e8                	mov    eax,ebp
c00007b4:	5e                   	pop    esi
c00007b5:	5f                   	pop    edi
c00007b6:	5d                   	pop    ebp
c00007b7:	c3                   	ret    
c00007b8:	85 c9                	test   ecx,ecx
c00007ba:	74 f5                	je     c00007b1 <strncpy+0x4d>
c00007bc:	fc                   	cld    
c00007bd:	31 c0                	xor    eax,eax
c00007bf:	89 d7                	mov    edi,edx
c00007c1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007c3:	89 e8                	mov    eax,ebp
c00007c5:	5b                   	pop    ebx
c00007c6:	5e                   	pop    esi
c00007c7:	5f                   	pop    edi
c00007c8:	5d                   	pop    ebp
c00007c9:	c3                   	ret    
c00007ca:	66 90                	xchg   ax,ax

c00007cc <strcmp>:
c00007cc:	56                   	push   esi
c00007cd:	53                   	push   ebx
c00007ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007d6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007db:	38 d1                	cmp    cl,dl
c00007dd:	75 1d                	jne    c00007fc <strcmp+0x30>
c00007df:	84 c9                	test   cl,cl
c00007e1:	74 21                	je     c0000804 <strcmp+0x38>
c00007e3:	b8 01 00 00 00       	mov    eax,0x1
c00007e8:	eb 07                	jmp    c00007f1 <strcmp+0x25>
c00007ea:	66 90                	xchg   ax,ax
c00007ec:	40                   	inc    eax
c00007ed:	84 d2                	test   dl,dl
c00007ef:	74 13                	je     c0000804 <strcmp+0x38>
c00007f1:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007f4:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f8:	38 ca                	cmp    dl,cl
c00007fa:	74 f0                	je     c00007ec <strcmp+0x20>
c00007fc:	0f b6 c2             	movzx  eax,dl
c00007ff:	5b                   	pop    ebx
c0000800:	29 c8                	sub    eax,ecx
c0000802:	5e                   	pop    esi
c0000803:	c3                   	ret    
c0000804:	31 c0                	xor    eax,eax
c0000806:	5b                   	pop    ebx
c0000807:	5e                   	pop    esi
c0000808:	c3                   	ret    
c0000809:	8d 76 00             	lea    esi,[esi+0x0]

c000080c <strchr>:
c000080c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000810:	8a 10                	mov    dl,BYTE PTR [eax]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 15                	je     c000082b <strchr+0x1f>
c0000816:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000081a:	38 ca                	cmp    dl,cl
c000081c:	75 06                	jne    c0000824 <strchr+0x18>
c000081e:	eb 0e                	jmp    c000082e <strchr+0x22>
c0000820:	38 ca                	cmp    dl,cl
c0000822:	74 09                	je     c000082d <strchr+0x21>
c0000824:	40                   	inc    eax
c0000825:	8a 10                	mov    dl,BYTE PTR [eax]
c0000827:	84 d2                	test   dl,dl
c0000829:	75 f5                	jne    c0000820 <strchr+0x14>
c000082b:	31 c0                	xor    eax,eax
c000082d:	c3                   	ret    
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncmp>:
c0000830:	57                   	push   edi
c0000831:	56                   	push   esi
c0000832:	53                   	push   ebx
c0000833:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000837:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000083b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000083f:	85 ff                	test   edi,edi
c0000841:	74 28                	je     c000086b <strncmp+0x3b>
c0000843:	8a 16                	mov    dl,BYTE PTR [esi]
c0000845:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000848:	38 d1                	cmp    cl,dl
c000084a:	75 28                	jne    c0000874 <strncmp+0x44>
c000084c:	8d 46 01             	lea    eax,[esi+0x1]
c000084f:	84 c9                	test   cl,cl
c0000851:	74 18                	je     c000086b <strncmp+0x3b>
c0000853:	01 fe                	add    esi,edi
c0000855:	eb 0f                	jmp    c0000866 <strncmp+0x36>
c0000857:	90                   	nop
c0000858:	8a 10                	mov    dl,BYTE PTR [eax]
c000085a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000085d:	38 ca                	cmp    dl,cl
c000085f:	75 13                	jne    c0000874 <strncmp+0x44>
c0000861:	40                   	inc    eax
c0000862:	84 d2                	test   dl,dl
c0000864:	74 05                	je     c000086b <strncmp+0x3b>
c0000866:	43                   	inc    ebx
c0000867:	39 c6                	cmp    esi,eax
c0000869:	75 ed                	jne    c0000858 <strncmp+0x28>
c000086b:	5b                   	pop    ebx
c000086c:	31 c0                	xor    eax,eax
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    
c0000871:	8d 76 00             	lea    esi,[esi+0x0]
c0000874:	5b                   	pop    ebx
c0000875:	0f b6 c2             	movzx  eax,dl
c0000878:	5e                   	pop    esi
c0000879:	29 c8                	sub    eax,ecx
c000087b:	5f                   	pop    edi
c000087c:	c3                   	ret    
c000087d:	8d 76 00             	lea    esi,[esi+0x0]

c0000880 <strcat>:
c0000880:	56                   	push   esi
c0000881:	53                   	push   ebx
c0000882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000886:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000088a:	89 c3                	mov    ebx,eax
c000088c:	eb 04                	jmp    c0000892 <strcat+0x12>
c000088e:	66 90                	xchg   ax,ax
c0000890:	89 d3                	mov    ebx,edx
c0000892:	8d 53 01             	lea    edx,[ebx+0x1]
c0000895:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000899:	75 f5                	jne    c0000890 <strcat+0x10>
c000089b:	31 d2                	xor    edx,edx
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008a3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008a6:	42                   	inc    edx
c00008a7:	84 c9                	test   cl,cl
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	5e                   	pop    esi
c00008ad:	c3                   	ret    
c00008ae:	66 90                	xchg   ax,ax

c00008b0 <strncat>:
c00008b0:	56                   	push   esi
c00008b1:	53                   	push   ebx
c00008b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008be:	85 f6                	test   esi,esi
c00008c0:	74 1e                	je     c00008e0 <strncat+0x30>
c00008c2:	89 c2                	mov    edx,eax
c00008c4:	42                   	inc    edx
c00008c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c9:	75 f9                	jne    c00008c4 <strncat+0x14>
c00008cb:	01 ce                	add    esi,ecx
c00008cd:	eb 06                	jmp    c00008d5 <strncat+0x25>
c00008cf:	90                   	nop
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 10                	je     c00008e4 <strncat+0x34>
c00008d4:	42                   	inc    edx
c00008d5:	41                   	inc    ecx
c00008d6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008dc:	84 db                	test   bl,bl
c00008de:	75 f0                	jne    c00008d0 <strncat+0x20>
c00008e0:	5b                   	pop    ebx
c00008e1:	5e                   	pop    esi
c00008e2:	c3                   	ret    
c00008e3:	90                   	nop
c00008e4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008e7:	5b                   	pop    ebx
c00008e8:	5e                   	pop    esi
c00008e9:	c3                   	ret    
c00008ea:	66 90                	xchg   ax,ax

c00008ec <strstr>:
c00008ec:	57                   	push   edi
c00008ed:	56                   	push   esi
c00008ee:	53                   	push   ebx
c00008ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008f7:	57                   	push   edi
c00008f8:	e8 a3 fd ff ff       	call   c00006a0 <strlen>
c00008fd:	59                   	pop    ecx
c00008fe:	85 c0                	test   eax,eax
c0000900:	74 2a                	je     c000092c <strstr+0x40>
c0000902:	89 c6                	mov    esi,eax
c0000904:	eb 12                	jmp    c0000918 <strstr+0x2c>
c0000906:	66 90                	xchg   ax,ax
c0000908:	56                   	push   esi
c0000909:	57                   	push   edi
c000090a:	53                   	push   ebx
c000090b:	e8 70 fc ff ff       	call   c0000580 <memcmp>
c0000910:	83 c4 0c             	add    esp,0xc
c0000913:	85 c0                	test   eax,eax
c0000915:	74 15                	je     c000092c <strstr+0x40>
c0000917:	43                   	inc    ebx
c0000918:	53                   	push   ebx
c0000919:	e8 82 fd ff ff       	call   c00006a0 <strlen>
c000091e:	5a                   	pop    edx
c000091f:	39 f0                	cmp    eax,esi
c0000921:	73 e5                	jae    c0000908 <strstr+0x1c>
c0000923:	5b                   	pop    ebx
c0000924:	31 c0                	xor    eax,eax
c0000926:	5e                   	pop    esi
c0000927:	5f                   	pop    edi
c0000928:	c3                   	ret    
c0000929:	8d 76 00             	lea    esi,[esi+0x0]
c000092c:	89 d8                	mov    eax,ebx
c000092e:	5b                   	pop    ebx
c000092f:	5e                   	pop    esi
c0000930:	5f                   	pop    edi
c0000931:	c3                   	ret    
c0000932:	66 90                	xchg   ax,ax

c0000934 <toupper>:
c0000934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000938:	0f b6 d0             	movzx  edx,al
c000093b:	f6 82 60 1d 02 c0 02 	test   BYTE PTR [edx-0x3ffde2a0],0x2
c0000942:	74 03                	je     c0000947 <toupper+0x13>
c0000944:	83 e8 20             	sub    eax,0x20
c0000947:	c3                   	ret    

c0000948 <tolower>:
c0000948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000094c:	0f b6 d0             	movzx  edx,al
c000094f:	f6 82 60 1d 02 c0 01 	test   BYTE PTR [edx-0x3ffde2a0],0x1
c0000956:	74 03                	je     c000095b <tolower+0x13>
c0000958:	83 c0 20             	add    eax,0x20
c000095b:	c3                   	ret    

c000095c <simple_strtoul>:
c000095c:	55                   	push   ebp
c000095d:	57                   	push   edi
c000095e:	56                   	push   esi
c000095f:	53                   	push   ebx
c0000960:	83 ec 08             	sub    esp,0x8
c0000963:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000967:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000096b:	90                   	nop
c000096c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000096f:	f6 82 60 1d 02 c0 08 	test   BYTE PTR [edx-0x3ffde2a0],0x8
c0000976:	75 05                	jne    c000097d <simple_strtoul+0x21>
c0000978:	80 fa 09             	cmp    dl,0x9
c000097b:	75 03                	jne    c0000980 <simple_strtoul+0x24>
c000097d:	41                   	inc    ecx
c000097e:	eb ec                	jmp    c000096c <simple_strtoul+0x10>
c0000980:	80 fa 2d             	cmp    dl,0x2d
c0000983:	0f 84 1b 01 00 00    	je     c0000aa4 <simple_strtoul+0x148>
c0000989:	80 fa 2b             	cmp    dl,0x2b
c000098c:	0f 84 c2 00 00 00    	je     c0000a54 <simple_strtoul+0xf8>
c0000992:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000099a:	85 f6                	test   esi,esi
c000099c:	0f 85 c3 00 00 00    	jne    c0000a65 <simple_strtoul+0x109>
c00009a2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009a4:	80 fa 30             	cmp    dl,0x30
c00009a7:	0f 84 47 01 00 00    	je     c0000af4 <simple_strtoul+0x198>
c00009ad:	be 0a 00 00 00       	mov    esi,0xa
c00009b2:	84 d2                	test   dl,dl
c00009b4:	0f 84 6f 01 00 00    	je     c0000b29 <simple_strtoul+0x1cd>
c00009ba:	31 ed                	xor    ebp,ebp
c00009bc:	31 ff                	xor    edi,edi
c00009be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009c5:	eb 2b                	jmp    c00009f2 <simple_strtoul+0x96>
c00009c7:	90                   	nop
c00009c8:	83 eb 30             	sub    ebx,0x30
c00009cb:	39 f3                	cmp    ebx,esi
c00009cd:	73 4d                	jae    c0000a1c <simple_strtoul+0xc0>
c00009cf:	31 d2                	xor    edx,edx
c00009d1:	89 d8                	mov    eax,ebx
c00009d3:	f7 d0                	not    eax
c00009d5:	f7 f6                	div    esi
c00009d7:	39 f8                	cmp    eax,edi
c00009d9:	0f 82 b1 00 00 00    	jb     c0000a90 <simple_strtoul+0x134>
c00009df:	0f af fe             	imul   edi,esi
c00009e2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e9:	01 df                	add    edi,ebx
c00009eb:	41                   	inc    ecx
c00009ec:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009ee:	84 d2                	test   dl,dl
c00009f0:	74 2a                	je     c0000a1c <simple_strtoul+0xc0>
c00009f2:	0f b6 da             	movzx  ebx,dl
c00009f5:	f6 83 60 1d 02 c0 04 	test   BYTE PTR [ebx-0x3ffde2a0],0x4
c00009fc:	75 ca                	jne    c00009c8 <simple_strtoul+0x6c>
c00009fe:	0f be d2             	movsx  edx,dl
c0000a01:	52                   	push   edx
c0000a02:	e8 2d ff ff ff       	call   c0000934 <toupper>
c0000a07:	5b                   	pop    ebx
c0000a08:	0f b6 d0             	movzx  edx,al
c0000a0b:	f6 82 60 1d 02 c0 01 	test   BYTE PTR [edx-0x3ffde2a0],0x1
c0000a12:	74 08                	je     c0000a1c <simple_strtoul+0xc0>
c0000a14:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a17:	39 f3                	cmp    ebx,esi
c0000a19:	72 b4                	jb     c00009cf <simple_strtoul+0x73>
c0000a1b:	90                   	nop
c0000a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a20:	85 c0                	test   eax,eax
c0000a22:	74 14                	je     c0000a38 <simple_strtoul+0xdc>
c0000a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a27:	09 f8                	or     eax,edi
c0000a29:	75 71                	jne    c0000a9c <simple_strtoul+0x140>
c0000a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a33:	31 ff                	xor    edi,edi
c0000a35:	89 30                	mov    DWORD PTR [eax],esi
c0000a37:	90                   	nop
c0000a38:	4d                   	dec    ebp
c0000a39:	75 05                	jne    c0000a40 <simple_strtoul+0xe4>
c0000a3b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a40:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a45:	75 02                	jne    c0000a49 <simple_strtoul+0xed>
c0000a47:	f7 df                	neg    edi
c0000a49:	83 c4 08             	add    esp,0x8
c0000a4c:	89 f8                	mov    eax,edi
c0000a4e:	5b                   	pop    ebx
c0000a4f:	5e                   	pop    esi
c0000a50:	5f                   	pop    edi
c0000a51:	5d                   	pop    ebp
c0000a52:	c3                   	ret    
c0000a53:	90                   	nop
c0000a54:	41                   	inc    ecx
c0000a55:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a5d:	85 f6                	test   esi,esi
c0000a5f:	0f 84 3d ff ff ff    	je     c00009a2 <simple_strtoul+0x46>
c0000a65:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a68:	83 f8 22             	cmp    eax,0x22
c0000a6b:	77 6a                	ja     c0000ad7 <simple_strtoul+0x17b>
c0000a6d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a6f:	83 fe 08             	cmp    esi,0x8
c0000a72:	0f 84 a2 00 00 00    	je     c0000b1a <simple_strtoul+0x1be>
c0000a78:	83 fe 10             	cmp    esi,0x10
c0000a7b:	0f 85 31 ff ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000a81:	80 fa 30             	cmp    dl,0x30
c0000a84:	74 2c                	je     c0000ab2 <simple_strtoul+0x156>
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	e9 22 ff ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000a90:	bd 01 00 00 00       	mov    ebp,0x1
c0000a95:	31 ff                	xor    edi,edi
c0000a97:	e9 4f ff ff ff       	jmp    c00009eb <simple_strtoul+0x8f>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	89 08                	mov    DWORD PTR [eax],ecx
c0000aa2:	eb 94                	jmp    c0000a38 <simple_strtoul+0xdc>
c0000aa4:	41                   	inc    ecx
c0000aa5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aad:	e9 e8 fe ff ff       	jmp    c000099a <simple_strtoul+0x3e>
c0000ab2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab9:	50                   	push   eax
c0000aba:	e8 89 fe ff ff       	call   c0000948 <tolower>
c0000abf:	5e                   	pop    esi
c0000ac0:	83 f8 78             	cmp    eax,0x78
c0000ac3:	0f 84 84 00 00 00    	je     c0000b4d <simple_strtoul+0x1f1>
c0000ac9:	41                   	inc    ecx
c0000aca:	be 10 00 00 00       	mov    esi,0x10
c0000acf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ad2:	e9 db fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000ad7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000adb:	85 ff                	test   edi,edi
c0000add:	74 5c                	je     c0000b3b <simple_strtoul+0x1df>
c0000adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ae3:	85 c9                	test   ecx,ecx
c0000ae5:	75 4e                	jne    c0000b35 <simple_strtoul+0x1d9>
c0000ae7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aed:	31 ff                	xor    edi,edi
c0000aef:	e9 4c ff ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000af4:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af8:	88 04 24             	mov    BYTE PTR [esp],al
c0000afb:	50                   	push   eax
c0000afc:	e8 47 fe ff ff       	call   c0000948 <tolower>
c0000b01:	5d                   	pop    ebp
c0000b02:	83 f8 78             	cmp    eax,0x78
c0000b05:	74 3b                	je     c0000b42 <simple_strtoul+0x1e6>
c0000b07:	41                   	inc    ecx
c0000b08:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b0b:	80 fa 30             	cmp    dl,0x30
c0000b0e:	74 13                	je     c0000b23 <simple_strtoul+0x1c7>
c0000b10:	be 08 00 00 00       	mov    esi,0x8
c0000b15:	e9 98 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000b1a:	80 fa 30             	cmp    dl,0x30
c0000b1d:	0f 85 8f fe ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000b23:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b26:	41                   	inc    ecx
c0000b27:	eb e7                	jmp    c0000b10 <simple_strtoul+0x1b4>
c0000b29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b2d:	85 d2                	test   edx,edx
c0000b2f:	74 0a                	je     c0000b3b <simple_strtoul+0x1df>
c0000b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b35:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b39:	89 30                	mov    DWORD PTR [eax],esi
c0000b3b:	31 ff                	xor    edi,edi
c0000b3d:	e9 fe fe ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000b42:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b45:	83 c1 02             	add    ecx,0x2
c0000b48:	e9 34 ff ff ff       	jmp    c0000a81 <simple_strtoul+0x125>
c0000b4d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b50:	be 10 00 00 00       	mov    esi,0x10
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 55 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>

c0000b5d <largebin_index>:
c0000b5d:	89 c2                	mov    edx,eax
c0000b5f:	c1 ea 08             	shr    edx,0x8
c0000b62:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b68:	77 10                	ja     c0000b7a <largebin_index+0x1d>
c0000b6a:	0f bd d2             	bsr    edx,edx
c0000b6d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b70:	d3 e8                	shr    eax,cl
c0000b72:	83 e0 03             	and    eax,0x3
c0000b75:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b79:	c3                   	ret    
c0000b7a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b7f:	c3                   	ret    

c0000b80 <malloc_init_state>:
c0000b80:	53                   	push   ebx
c0000b81:	8d 50 34             	lea    edx,[eax+0x34]
c0000b84:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b8a:	89 d1                	mov    ecx,edx
c0000b8c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b8f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b92:	83 c2 08             	add    edx,0x8
c0000b95:	39 da                	cmp    edx,ebx
c0000b97:	75 f3                	jne    c0000b8c <malloc_init_state+0xc>
c0000b99:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b9b:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ba5:	83 e2 03             	and    edx,0x3
c0000ba8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bb2:	83 ca 48             	or     edx,0x48
c0000bb5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bbf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bd0:	89 10                	mov    DWORD PTR [eax],edx
c0000bd2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bd5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bdf:	5b                   	pop    ebx
c0000be0:	c3                   	ret    

c0000be1 <malloc_consolidate>:
c0000be1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000be3:	85 d2                	test   edx,edx
c0000be5:	0f 84 d8 00 00 00    	je     c0000cc3 <malloc_consolidate+0xe2>
c0000beb:	55                   	push   ebp
c0000bec:	83 e2 fd             	and    edx,0xfffffffd
c0000bef:	57                   	push   edi
c0000bf0:	89 c5                	mov    ebp,eax
c0000bf2:	56                   	push   esi
c0000bf3:	8d 78 34             	lea    edi,[eax+0x34]
c0000bf6:	53                   	push   ebx
c0000bf7:	83 ec 10             	sub    esp,0x10
c0000bfa:	89 10                	mov    DWORD PTR [eax],edx
c0000bfc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c00:	c1 ea 03             	shr    edx,0x3
c0000c03:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c07:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c0b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c0e:	85 d2                	test   edx,edx
c0000c10:	0f 84 98 00 00 00    	je     c0000cae <malloc_consolidate+0xcd>
c0000c16:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c1d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c20:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c27:	89 f9                	mov    ecx,edi
c0000c29:	83 e1 fe             	and    ecx,0xfffffffe
c0000c2c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c2f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c32:	83 e3 fc             	and    ebx,0xfffffffc
c0000c35:	83 e7 01             	and    edi,0x1
c0000c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c3b:	75 14                	jne    c0000c51 <malloc_consolidate+0x70>
c0000c3d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c3f:	29 fa                	sub    edx,edi
c0000c41:	01 f9                	add    ecx,edi
c0000c43:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c46:	89 fb                	mov    ebx,edi
c0000c48:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c4b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c4e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c51:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c54:	74 40                	je     c0000c96 <malloc_consolidate+0xb5>
c0000c56:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c59:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c5c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c60:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c63:	83 e7 01             	and    edi,0x1
c0000c66:	75 0e                	jne    c0000c76 <malloc_consolidate+0x95>
c0000c68:	01 d9                	add    ecx,ebx
c0000c6a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c6d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c70:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c73:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c76:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c79:	89 ce                	mov    esi,ecx
c0000c7b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c7e:	83 ce 01             	or     esi,0x1
c0000c81:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c84:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c87:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c8a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c8e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c91:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c94:	eb 0c                	jmp    c0000ca2 <malloc_consolidate+0xc1>
c0000c96:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c99:	83 c9 01             	or     ecx,0x1
c0000c9c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c9f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ca2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ca6:	85 d2                	test   edx,edx
c0000ca8:	0f 85 6f ff ff ff    	jne    c0000c1d <malloc_consolidate+0x3c>
c0000cae:	83 c5 04             	add    ebp,0x4
c0000cb1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cb5:	0f 85 50 ff ff ff    	jne    c0000c0b <malloc_consolidate+0x2a>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	5b                   	pop    ebx
c0000cbf:	5e                   	pop    esi
c0000cc0:	5f                   	pop    edi
c0000cc1:	5d                   	pop    ebp
c0000cc2:	c3                   	ret    
c0000cc3:	e9 b8 fe ff ff       	jmp    c0000b80 <malloc_init_state>

c0000cc8 <dlfree>:
c0000cc8:	57                   	push   edi
c0000cc9:	56                   	push   esi
c0000cca:	53                   	push   ebx
c0000ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ccf:	85 db                	test   ebx,ebx
c0000cd1:	0f 84 e2 00 00 00    	je     c0000db9 <dlfree+0xf1>
c0000cd7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cda:	8b 0d 60 5d 02 c0    	mov    ecx,DWORD PTR ds:0xc0025d60
c0000ce0:	89 f0                	mov    eax,esi
c0000ce2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ce5:	83 e0 fc             	and    eax,0xfffffffc
c0000ce8:	39 c1                	cmp    ecx,eax
c0000cea:	72 24                	jb     c0000d10 <dlfree+0x48>
c0000cec:	83 c9 03             	or     ecx,0x3
c0000cef:	c1 e8 03             	shr    eax,0x3
c0000cf2:	89 0d 60 5d 02 c0    	mov    DWORD PTR ds:0xc0025d60,ecx
c0000cf8:	83 e8 02             	sub    eax,0x2
c0000cfb:	8b 0c 85 64 5d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffda29c]
c0000d02:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d04:	89 14 85 64 5d 02 c0 	mov    DWORD PTR [eax*4-0x3ffda29c],edx
c0000d0b:	e9 a9 00 00 00       	jmp    c0000db9 <dlfree+0xf1>
c0000d10:	83 e6 02             	and    esi,0x2
c0000d13:	0f 85 a0 00 00 00    	jne    c0000db9 <dlfree+0xf1>
c0000d19:	83 c9 01             	or     ecx,0x1
c0000d1c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d1f:	89 0d 60 5d 02 c0    	mov    DWORD PTR ds:0xc0025d60,ecx
c0000d25:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d28:	83 e1 fc             	and    ecx,0xfffffffc
c0000d2b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d2f:	75 13                	jne    c0000d44 <dlfree+0x7c>
c0000d31:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d34:	29 da                	sub    edx,ebx
c0000d36:	01 d8                	add    eax,ebx
c0000d38:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d3e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d41:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d44:	39 35 8c 5d 02 c0    	cmp    DWORD PTR ds:0xc0025d8c,esi
c0000d4a:	74 40                	je     c0000d8c <dlfree+0xc4>
c0000d4c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d50:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d53:	80 e3 01             	and    bl,0x1
c0000d56:	75 0e                	jne    c0000d66 <dlfree+0x9e>
c0000d58:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d5b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d5e:	01 c8                	add    eax,ecx
c0000d60:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d63:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d66:	8b 0d 9c 5d 02 c0    	mov    ecx,DWORD PTR ds:0xc0025d9c
c0000d6c:	c7 42 0c 94 5d 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025d94
c0000d73:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d76:	89 15 9c 5d 02 c0    	mov    DWORD PTR ds:0xc0025d9c,edx
c0000d7c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d8a:	eb 10                	jmp    c0000d9c <dlfree+0xd4>
c0000d8c:	01 c8                	add    eax,ecx
c0000d8e:	89 c1                	mov    ecx,eax
c0000d90:	83 c9 01             	or     ecx,0x1
c0000d93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d96:	89 15 8c 5d 02 c0    	mov    DWORD PTR ds:0xc0025d8c,edx
c0000d9c:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000da1:	76 16                	jbe    c0000db9 <dlfree+0xf1>
c0000da3:	f6 05 60 5d 02 c0 02 	test   BYTE PTR ds:0xc0025d60,0x2
c0000daa:	74 0d                	je     c0000db9 <dlfree+0xf1>
c0000dac:	5b                   	pop    ebx
c0000dad:	b8 60 5d 02 c0       	mov    eax,0xc0025d60
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	e9 28 fe ff ff       	jmp    c0000be1 <malloc_consolidate>
c0000db9:	5b                   	pop    ebx
c0000dba:	5e                   	pop    esi
c0000dbb:	5f                   	pop    edi
c0000dbc:	c3                   	ret    

c0000dbd <sYSMALLOc>:
c0000dbd:	55                   	push   ebp
c0000dbe:	57                   	push   edi
c0000dbf:	56                   	push   esi
c0000dc0:	53                   	push   ebx
c0000dc1:	89 d3                	mov    ebx,edx
c0000dc3:	83 ec 2c             	sub    esp,0x2c
c0000dc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dca:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dd0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dd3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dda:	74 1f                	je     c0000dfb <sYSMALLOc+0x3e>
c0000ddc:	89 d8                	mov    eax,ebx
c0000dde:	e8 fe fd ff ff       	call   c0000be1 <malloc_consolidate>
c0000de3:	83 ec 0c             	sub    esp,0xc
c0000de6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dea:	83 e8 07             	sub    eax,0x7
c0000ded:	50                   	push   eax
c0000dee:	e8 30 02 00 00       	call   c0001023 <dlmalloc>
c0000df3:	83 c4 10             	add    esp,0x10
c0000df6:	e9 20 02 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000dfb:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dfe:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e04:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e07:	83 e0 fc             	and    eax,0xfffffffc
c0000e0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e12:	83 c0 10             	add    eax,0x10
c0000e15:	01 c1                	add    ecx,eax
c0000e17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e1b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e22:	74 04                	je     c0000e28 <sYSMALLOc+0x6b>
c0000e24:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e28:	f7 da                	neg    edx
c0000e2a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e2e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e32:	21 d1                	and    ecx,edx
c0000e34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e38:	7f 07                	jg     c0000e41 <sYSMALLOc+0x84>
c0000e3a:	31 c0                	xor    eax,eax
c0000e3c:	e9 da 01 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000e41:	83 ec 0c             	sub    esp,0xc
c0000e44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e48:	e8 3f 8a 00 00       	call   c000988c <sbrk>
c0000e4d:	83 c4 10             	add    esp,0x10
c0000e50:	89 c6                	mov    esi,eax
c0000e52:	83 f8 ff             	cmp    eax,0xffffffff
c0000e55:	74 e3                	je     c0000e3a <sYSMALLOc+0x7d>
c0000e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e5b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e5f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e62:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e68:	39 f1                	cmp    ecx,esi
c0000e6a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e70:	75 13                	jne    c0000e85 <sYSMALLOc+0xc8>
c0000e72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e76:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e7a:	83 c8 01             	or     eax,0x1
c0000e7d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e80:	e9 3e 01 00 00       	jmp    c0000fc3 <sYSMALLOc+0x206>
c0000e85:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e8b:	88 d0                	mov    al,dl
c0000e8d:	83 e0 01             	and    eax,0x1
c0000e90:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e99:	0f 95 c0             	setne  al
c0000e9c:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000ea0:	39 f1                	cmp    ecx,esi
c0000ea2:	76 12                	jbe    c0000eb6 <sYSMALLOc+0xf9>
c0000ea4:	84 c0                	test   al,al
c0000ea6:	74 0e                	je     c0000eb6 <sYSMALLOc+0xf9>
c0000ea8:	83 e2 fe             	and    edx,0xfffffffe
c0000eab:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000eb1:	e9 83 00 00 00       	jmp    c0000f39 <sYSMALLOc+0x17c>
c0000eb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ebb:	74 7c                	je     c0000f39 <sYSMALLOc+0x17c>
c0000ebd:	84 c0                	test   al,al
c0000ebf:	74 0c                	je     c0000ecd <sYSMALLOc+0x110>
c0000ec1:	89 f0                	mov    eax,esi
c0000ec3:	29 c8                	sub    eax,ecx
c0000ec5:	01 e8                	add    eax,ebp
c0000ec7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ecd:	89 f2                	mov    edx,esi
c0000ecf:	83 e2 07             	and    edx,0x7
c0000ed2:	74 0c                	je     c0000ee0 <sYSMALLOc+0x123>
c0000ed4:	b8 08 00 00 00       	mov    eax,0x8
c0000ed9:	29 d0                	sub    eax,edx
c0000edb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ede:	eb 04                	jmp    c0000ee4 <sYSMALLOc+0x127>
c0000ee0:	89 f5                	mov    ebp,esi
c0000ee2:	31 c0                	xor    eax,eax
c0000ee4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000eec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ef0:	01 c1                	add    ecx,eax
c0000ef2:	83 ec 0c             	sub    esp,0xc
c0000ef5:	01 f1                	add    ecx,esi
c0000ef7:	01 ca                	add    edx,ecx
c0000ef9:	29 c8                	sub    eax,ecx
c0000efb:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000eff:	01 c2                	add    edx,eax
c0000f01:	52                   	push   edx
c0000f02:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f06:	e8 81 89 00 00       	call   c000988c <sbrk>
c0000f0b:	83 c4 10             	add    esp,0x10
c0000f0e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f15:	75 0f                	jne    c0000f26 <sYSMALLOc+0x169>
c0000f17:	83 ec 0c             	sub    esp,0xc
c0000f1a:	6a 00                	push   0x0
c0000f1c:	e8 6b 89 00 00       	call   c000988c <sbrk>
c0000f21:	83 c4 10             	add    esp,0x10
c0000f24:	eb 30                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f26:	39 c6                	cmp    esi,eax
c0000f28:	76 33                	jbe    c0000f5d <sYSMALLOc+0x1a0>
c0000f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f35:	01 f0                	add    eax,esi
c0000f37:	eb 1d                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f39:	83 ec 0c             	sub    esp,0xc
c0000f3c:	89 f5                	mov    ebp,esi
c0000f3e:	6a 00                	push   0x0
c0000f40:	e8 47 89 00 00       	call   c000988c <sbrk>
c0000f45:	89 c2                	mov    edx,eax
c0000f47:	29 f2                	sub    edx,esi
c0000f49:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f4d:	83 c4 10             	add    esp,0x10
c0000f50:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f56:	31 d2                	xor    edx,edx
c0000f58:	83 f8 ff             	cmp    eax,0xffffffff
c0000f5b:	74 66                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f5d:	29 e8                	sub    eax,ebp
c0000f5f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f62:	01 d0                	add    eax,edx
c0000f64:	83 c8 01             	or     eax,0x1
c0000f67:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f6a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f75:	74 4c                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f7b:	83 e8 0c             	sub    eax,0xc
c0000f7e:	83 e0 f8             	and    eax,0xfffffff8
c0000f81:	89 c2                	mov    edx,eax
c0000f83:	83 ca 01             	or     edx,0x1
c0000f86:	83 f8 0f             	cmp    eax,0xf
c0000f89:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f8c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f94:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f9c:	76 25                	jbe    c0000fc3 <sYSMALLOc+0x206>
c0000f9e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fa4:	83 ec 0c             	sub    esp,0xc
c0000fa7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fb1:	83 c7 08             	add    edi,0x8
c0000fb4:	57                   	push   edi
c0000fb5:	e8 0e fd ff ff       	call   c0000cc8 <dlfree>
c0000fba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fcf:	73 06                	jae    c0000fd7 <sYSMALLOc+0x21a>
c0000fd1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fd7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fdd:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fe3:	73 06                	jae    c0000feb <sYSMALLOc+0x22e>
c0000fe5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000feb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff1:	83 e2 fc             	and    edx,0xfffffffc
c0000ff4:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff8:	0f 82 3c fe ff ff    	jb     c0000e3a <sYSMALLOc+0x7d>
c0000ffe:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001002:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001005:	29 fa                	sub    edx,edi
c0001007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000100a:	83 ca 01             	or     edx,0x1
c000100d:	89 fb                	mov    ebx,edi
c000100f:	83 c0 08             	add    eax,0x8
c0001012:	83 cb 01             	or     ebx,0x1
c0001015:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001018:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000101b:	83 c4 2c             	add    esp,0x2c
c000101e:	5b                   	pop    ebx
c000101f:	5e                   	pop    esi
c0001020:	5f                   	pop    edi
c0001021:	5d                   	pop    ebp
c0001022:	c3                   	ret    

c0001023 <dlmalloc>:
c0001023:	55                   	push   ebp
c0001024:	57                   	push   edi
c0001025:	56                   	push   esi
c0001026:	53                   	push   ebx
c0001027:	83 ec 1c             	sub    esp,0x1c
c000102a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000102e:	83 f8 df             	cmp    eax,0xffffffdf
c0001031:	0f 87 70 03 00 00    	ja     c00013a7 <dlmalloc+0x384>
c0001037:	83 c0 0b             	add    eax,0xb
c000103a:	be 10 00 00 00       	mov    esi,0x10
c000103f:	83 f8 0f             	cmp    eax,0xf
c0001042:	76 05                	jbe    c0001049 <dlmalloc+0x26>
c0001044:	83 e0 f8             	and    eax,0xfffffff8
c0001047:	89 c6                	mov    esi,eax
c0001049:	8b 3d 60 5d 02 c0    	mov    edi,DWORD PTR ds:0xc0025d60
c000104f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001055:	75 17                	jne    c000106e <dlmalloc+0x4b>
c0001057:	85 ff                	test   edi,edi
c0001059:	0f 85 05 03 00 00    	jne    c0001364 <dlmalloc+0x341>
c000105f:	b8 60 5d 02 c0       	mov    eax,0xc0025d60
c0001064:	e8 78 fb ff ff       	call   c0000be1 <malloc_consolidate>
c0001069:	e9 f6 02 00 00       	jmp    c0001364 <dlmalloc+0x341>
c000106e:	39 f7                	cmp    edi,esi
c0001070:	72 1f                	jb     c0001091 <dlmalloc+0x6e>
c0001072:	89 f2                	mov    edx,esi
c0001074:	c1 ea 03             	shr    edx,0x3
c0001077:	83 ea 02             	sub    edx,0x2
c000107a:	8b 04 95 64 5d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffda29c]
c0001081:	85 c0                	test   eax,eax
c0001083:	74 0c                	je     c0001091 <dlmalloc+0x6e>
c0001085:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001088:	89 0c 95 64 5d 02 c0 	mov    DWORD PTR [edx*4-0x3ffda29c],ecx
c000108f:	eb 30                	jmp    c00010c1 <dlmalloc+0x9e>
c0001091:	89 f0                	mov    eax,esi
c0001093:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001099:	77 2e                	ja     c00010c9 <dlmalloc+0xa6>
c000109b:	c1 e8 03             	shr    eax,0x3
c000109e:	8d 14 c5 94 5d 02 c0 	lea    edx,[eax*8-0x3ffda26c]
c00010a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010ac:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010af:	39 c3                	cmp    ebx,eax
c00010b1:	74 2e                	je     c00010e1 <dlmalloc+0xbe>
c00010b3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010b6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010bb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010be:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010c1:	83 c0 08             	add    eax,0x8
c00010c4:	e9 e0 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c00010c9:	e8 8f fa ff ff       	call   c0000b5d <largebin_index>
c00010ce:	83 e7 02             	and    edi,0x2
c00010d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010d5:	74 0a                	je     c00010e1 <dlmalloc+0xbe>
c00010d7:	b8 60 5d 02 c0       	mov    eax,0xc0025d60
c00010dc:	e8 00 fb ff ff       	call   c0000be1 <malloc_consolidate>
c00010e1:	8d 46 10             	lea    eax,[esi+0x10]
c00010e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e8:	8b 1d a0 5d 02 c0    	mov    ebx,DWORD PTR ds:0xc0025da0
c00010ee:	81 fb 94 5d 02 c0    	cmp    ebx,0xc0025d94
c00010f4:	0f 84 13 01 00 00    	je     c000120d <dlmalloc+0x1ea>
c00010fa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010fd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001100:	83 e7 fc             	and    edi,0xfffffffc
c0001103:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001109:	77 4c                	ja     c0001157 <dlmalloc+0x134>
c000110b:	3d 94 5d 02 c0       	cmp    eax,0xc0025d94
c0001110:	75 45                	jne    c0001157 <dlmalloc+0x134>
c0001112:	39 1d 90 5d 02 c0    	cmp    DWORD PTR ds:0xc0025d90,ebx
c0001118:	75 3d                	jne    c0001157 <dlmalloc+0x134>
c000111a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000111e:	73 37                	jae    c0001157 <dlmalloc+0x134>
c0001120:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001123:	89 fa                	mov    edx,edi
c0001125:	a3 9c 5d 02 c0       	mov    ds:0xc0025d9c,eax
c000112a:	a3 a0 5d 02 c0       	mov    ds:0xc0025da0,eax
c000112f:	a3 90 5d 02 c0       	mov    ds:0xc0025d90,eax
c0001134:	29 f2                	sub    edx,esi
c0001136:	c7 40 08 94 5d 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025d94
c000113d:	c7 40 0c 94 5d 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025d94
c0001144:	83 ce 01             	or     esi,0x1
c0001147:	89 d1                	mov    ecx,edx
c0001149:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000114c:	83 c9 01             	or     ecx,0x1
c000114f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001152:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001155:	eb 15                	jmp    c000116c <dlmalloc+0x149>
c0001157:	a3 a0 5d 02 c0       	mov    ds:0xc0025da0,eax
c000115c:	39 fe                	cmp    esi,edi
c000115e:	c7 40 08 94 5d 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025d94
c0001165:	75 0d                	jne    c0001174 <dlmalloc+0x151>
c0001167:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000116c:	8d 43 08             	lea    eax,[ebx+0x8]
c000116f:	e9 35 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001174:	89 f8                	mov    eax,edi
c0001176:	81 ff ff 00 00 00    	cmp    edi,0xff
c000117c:	77 19                	ja     c0001197 <dlmalloc+0x174>
c000117e:	c1 e8 03             	shr    eax,0x3
c0001181:	8d 14 00             	lea    edx,[eax+eax*1]
c0001184:	83 c2 0d             	add    edx,0xd
c0001187:	8d 2c 95 58 5d 02 c0 	lea    ebp,[edx*4-0x3ffda2a8]
c000118e:	8b 14 95 60 5d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda2a0]
c0001195:	eb 46                	jmp    c00011dd <dlmalloc+0x1ba>
c0001197:	e8 c1 f9 ff ff       	call   c0000b5d <largebin_index>
c000119c:	8d 14 00             	lea    edx,[eax+eax*1]
c000119f:	83 c2 0d             	add    edx,0xd
c00011a2:	8d 0c 95 60 5d 02 c0 	lea    ecx,[edx*4-0x3ffda2a0]
c00011a9:	8b 14 95 60 5d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda2a0]
c00011b0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011b3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011b7:	89 d5                	mov    ebp,edx
c00011b9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011bd:	74 1e                	je     c00011dd <dlmalloc+0x1ba>
c00011bf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011c2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011c5:	77 12                	ja     c00011d9 <dlmalloc+0x1b6>
c00011c7:	83 cf 01             	or     edi,0x1
c00011ca:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011cd:	76 05                	jbe    c00011d4 <dlmalloc+0x1b1>
c00011cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011d2:	eb f6                	jmp    c00011ca <dlmalloc+0x1a7>
c00011d4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011d7:	eb 04                	jmp    c00011dd <dlmalloc+0x1ba>
c00011d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011dd:	89 c7                	mov    edi,eax
c00011df:	88 c1                	mov    cl,al
c00011e1:	c1 ff 05             	sar    edi,0x5
c00011e4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e8:	bf 01 00 00 00       	mov    edi,0x1
c00011ed:	d3 e7                	shl    edi,cl
c00011ef:	89 f8                	mov    eax,edi
c00011f1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011f5:	09 04 bd 94 60 02 c0 	or     DWORD PTR [edi*4-0x3ffd9f6c],eax
c00011fc:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011ff:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001202:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001205:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001208:	e9 db fe ff ff       	jmp    c00010e8 <dlmalloc+0xc5>
c000120d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001213:	76 78                	jbe    c000128d <dlmalloc+0x26a>
c0001215:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001219:	8d 04 c5 94 5d 02 c0 	lea    eax,[eax*8-0x3ffda26c]
c0001220:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001223:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001226:	39 ca                	cmp    edx,ecx
c0001228:	74 63                	je     c000128d <dlmalloc+0x26a>
c000122a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000122d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001230:	83 e3 fc             	and    ebx,0xfffffffc
c0001233:	39 de                	cmp    esi,ebx
c0001235:	77 52                	ja     c0001289 <dlmalloc+0x266>
c0001237:	89 df                	mov    edi,ebx
c0001239:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000123c:	29 f7                	sub    edi,esi
c000123e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001241:	01 d3                	add    ebx,edx
c0001243:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001246:	83 ff 0f             	cmp    edi,0xf
c0001249:	8d 42 08             	lea    eax,[edx+0x8]
c000124c:	77 09                	ja     c0001257 <dlmalloc+0x234>
c000124e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001252:	e9 52 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001257:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000125a:	83 ce 01             	or     esi,0x1
c000125d:	89 0d 9c 5d 02 c0    	mov    DWORD PTR ds:0xc0025d9c,ecx
c0001263:	89 0d a0 5d 02 c0    	mov    DWORD PTR ds:0xc0025da0,ecx
c0001269:	c7 41 08 94 5d 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025d94
c0001270:	c7 41 0c 94 5d 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025d94
c0001277:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000127a:	89 fa                	mov    edx,edi
c000127c:	83 ca 01             	or     edx,0x1
c000127f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001282:	89 3b                	mov    DWORD PTR [ebx],edi
c0001284:	e9 20 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001289:	89 c2                	mov    edx,eax
c000128b:	eb 99                	jmp    c0001226 <dlmalloc+0x203>
c000128d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001291:	b8 01 00 00 00       	mov    eax,0x1
c0001296:	41                   	inc    ecx
c0001297:	89 cb                	mov    ebx,ecx
c0001299:	8d 14 cd 8c 5d 02 c0 	lea    edx,[ecx*8-0x3ffda274]
c00012a0:	c1 eb 05             	shr    ebx,0x5
c00012a3:	d3 e0                	shl    eax,cl
c00012a5:	8b 3c 9d 94 60 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9f6c]
c00012ac:	39 f8                	cmp    eax,edi
c00012ae:	77 04                	ja     c00012b4 <dlmalloc+0x291>
c00012b0:	85 c0                	test   eax,eax
c00012b2:	75 26                	jne    c00012da <dlmalloc+0x2b7>
c00012b4:	43                   	inc    ebx
c00012b5:	83 fb 02             	cmp    ebx,0x2
c00012b8:	0f 87 a6 00 00 00    	ja     c0001364 <dlmalloc+0x341>
c00012be:	8b 3c 9d 94 60 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9f6c]
c00012c5:	85 ff                	test   edi,edi
c00012c7:	74 eb                	je     c00012b4 <dlmalloc+0x291>
c00012c9:	89 d8                	mov    eax,ebx
c00012cb:	c1 e0 06             	shl    eax,0x6
c00012ce:	8d 14 85 8c 5d 02 c0 	lea    edx,[eax*4-0x3ffda274]
c00012d5:	b8 01 00 00 00       	mov    eax,0x1
c00012da:	85 f8                	test   eax,edi
c00012dc:	75 07                	jne    c00012e5 <dlmalloc+0x2c2>
c00012de:	83 c2 08             	add    edx,0x8
c00012e1:	01 c0                	add    eax,eax
c00012e3:	eb f5                	jmp    c00012da <dlmalloc+0x2b7>
c00012e5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e8:	39 ca                	cmp    edx,ecx
c00012ea:	75 14                	jne    c0001300 <dlmalloc+0x2dd>
c00012ec:	89 c1                	mov    ecx,eax
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	f7 d1                	not    ecx
c00012f3:	01 c0                	add    eax,eax
c00012f5:	21 cf                	and    edi,ecx
c00012f7:	89 3c 9d 94 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f6c],edi
c00012fe:	eb ac                	jmp    c00012ac <dlmalloc+0x289>
c0001300:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001303:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001306:	83 e0 fc             	and    eax,0xfffffffc
c0001309:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000130c:	89 c3                	mov    ebx,eax
c000130e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001311:	29 f3                	sub    ebx,esi
c0001313:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001316:	83 fb 0f             	cmp    ebx,0xf
c0001319:	8d 41 08             	lea    eax,[ecx+0x8]
c000131c:	77 09                	ja     c0001327 <dlmalloc+0x304>
c000131e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001322:	e9 82 00 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001327:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000132a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001330:	89 3d 9c 5d 02 c0    	mov    DWORD PTR ds:0xc0025d9c,edi
c0001336:	89 3d a0 5d 02 c0    	mov    DWORD PTR ds:0xc0025da0,edi
c000133c:	c7 47 08 94 5d 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025d94
c0001343:	c7 47 0c 94 5d 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025d94
c000134a:	77 06                	ja     c0001352 <dlmalloc+0x32f>
c000134c:	89 3d 90 5d 02 c0    	mov    DWORD PTR ds:0xc0025d90,edi
c0001352:	83 ce 01             	or     esi,0x1
c0001355:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001358:	89 d9                	mov    ecx,ebx
c000135a:	83 c9 01             	or     ecx,0x1
c000135d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001360:	89 1a                	mov    DWORD PTR [edx],ebx
c0001362:	eb 45                	jmp    c00013a9 <dlmalloc+0x386>
c0001364:	a1 8c 5d 02 c0       	mov    eax,ds:0xc0025d8c
c0001369:	8d 4e 10             	lea    ecx,[esi+0x10]
c000136c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000136f:	83 e2 fc             	and    edx,0xfffffffc
c0001372:	39 d1                	cmp    ecx,edx
c0001374:	77 1e                	ja     c0001394 <dlmalloc+0x371>
c0001376:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001379:	89 f3                	mov    ebx,esi
c000137b:	89 0d 8c 5d 02 c0    	mov    DWORD PTR ds:0xc0025d8c,ecx
c0001381:	83 cb 01             	or     ebx,0x1
c0001384:	29 f2                	sub    edx,esi
c0001386:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001389:	83 ca 01             	or     edx,0x1
c000138c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000138f:	e9 2d fd ff ff       	jmp    c00010c1 <dlmalloc+0x9e>
c0001394:	83 c4 1c             	add    esp,0x1c
c0001397:	89 f0                	mov    eax,esi
c0001399:	5b                   	pop    ebx
c000139a:	ba 60 5d 02 c0       	mov    edx,0xc0025d60
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 16 fa ff ff       	jmp    c0000dbd <sYSMALLOc>
c00013a7:	31 c0                	xor    eax,eax
c00013a9:	83 c4 1c             	add    esp,0x1c
c00013ac:	5b                   	pop    ebx
c00013ad:	5e                   	pop    esi
c00013ae:	5f                   	pop    edi
c00013af:	5d                   	pop    ebp
c00013b0:	c3                   	ret    

c00013b1 <iALLOc>:
c00013b1:	55                   	push   ebp
c00013b2:	89 c5                	mov    ebp,eax
c00013b4:	57                   	push   edi
c00013b5:	56                   	push   esi
c00013b6:	53                   	push   ebx
c00013b7:	83 ec 2c             	sub    esp,0x2c
c00013ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013be:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013c6:	83 3d 60 5d 02 c0 00 	cmp    DWORD PTR ds:0xc0025d60,0x0
c00013cd:	75 12                	jne    c00013e1 <iALLOc+0x30>
c00013cf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013d3:	b8 60 5d 02 c0       	mov    eax,0xc0025d60
c00013d8:	e8 04 f8 ff ff       	call   c0000be1 <malloc_consolidate>
c00013dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013e6:	74 12                	je     c00013fa <iALLOc+0x49>
c00013e8:	85 ed                	test   ebp,ebp
c00013ea:	0f 84 64 01 00 00    	je     c0001554 <iALLOc+0x1a3>
c00013f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f8:	eb 33                	jmp    c000142d <iALLOc+0x7c>
c00013fa:	85 ed                	test   ebp,ebp
c00013fc:	75 14                	jne    c0001412 <iALLOc+0x61>
c00013fe:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001406:	83 c4 2c             	add    esp,0x2c
c0001409:	5b                   	pop    ebx
c000140a:	5e                   	pop    esi
c000140b:	5f                   	pop    edi
c000140c:	5d                   	pop    ebp
c000140d:	e9 11 fc ff ff       	jmp    c0001023 <dlmalloc>
c0001412:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001419:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001421:	83 f8 0f             	cmp    eax,0xf
c0001424:	76 07                	jbe    c000142d <iALLOc+0x7c>
c0001426:	83 e0 f8             	and    eax,0xfffffff8
c0001429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000142d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001432:	75 09                	jne    c000143d <iALLOc+0x8c>
c0001434:	89 d0                	mov    eax,edx
c0001436:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001439:	31 f6                	xor    esi,esi
c000143b:	eb 3b                	jmp    c0001478 <iALLOc+0xc7>
c000143d:	8b 02                	mov    eax,DWORD PTR [edx]
c000143f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001447:	83 c0 0b             	add    eax,0xb
c000144a:	83 f8 0f             	cmp    eax,0xf
c000144d:	76 07                	jbe    c0001456 <iALLOc+0xa5>
c000144f:	83 e0 f8             	and    eax,0xfffffff8
c0001452:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001456:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000145a:	0f af f5             	imul   esi,ebp
c000145d:	eb 25                	jmp    c0001484 <iALLOc+0xd3>
c000145f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001461:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001464:	bb 10 00 00 00       	mov    ebx,0x10
c0001469:	83 f9 0f             	cmp    ecx,0xf
c000146c:	76 05                	jbe    c0001473 <iALLOc+0xc2>
c000146e:	83 e1 f8             	and    ecx,0xfffffff8
c0001471:	89 cb                	mov    ebx,ecx
c0001473:	01 de                	add    esi,ebx
c0001475:	83 c0 04             	add    eax,0x4
c0001478:	39 c7                	cmp    edi,eax
c000147a:	75 e3                	jne    c000145f <iALLOc+0xae>
c000147c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001484:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001488:	8b 1d b4 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260b4
c000148e:	83 ec 0c             	sub    esp,0xc
c0001491:	c7 05 b4 60 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00260b4,0x0
c000149b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000149f:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014a3:	50                   	push   eax
c00014a4:	e8 7a fb ff ff       	call   c0001023 <dlmalloc>
c00014a9:	83 c4 10             	add    esp,0x10
c00014ac:	89 1d b4 60 02 c0    	mov    DWORD PTR ds:0xc00260b4,ebx
c00014b2:	85 c0                	test   eax,eax
c00014b4:	0f 84 92 00 00 00    	je     c000154c <iALLOc+0x19b>
c00014ba:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014bd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014c0:	83 e3 fc             	and    ebx,0xfffffffc
c00014c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014c7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014cc:	74 1e                	je     c00014ec <iALLOc+0x13b>
c00014ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014d2:	89 d9                	mov    ecx,ebx
c00014d4:	52                   	push   edx
c00014d5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d9:	83 e9 04             	sub    ecx,0x4
c00014dc:	51                   	push   ecx
c00014dd:	6a 00                	push   0x0
c00014df:	50                   	push   eax
c00014e0:	e8 9f f1 ff ff       	call   c0000684 <memset>
c00014e5:	83 c4 10             	add    esp,0x10
c00014e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014f1:	75 14                	jne    c0001507 <iALLOc+0x156>
c00014f3:	8d 04 37             	lea    eax,[edi+esi*1]
c00014f6:	29 f3                	sub    ebx,esi
c00014f8:	8d 48 08             	lea    ecx,[eax+0x8]
c00014fb:	83 cb 01             	or     ebx,0x1
c00014fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001502:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001505:	89 f3                	mov    ebx,esi
c0001507:	31 c0                	xor    eax,eax
c0001509:	4d                   	dec    ebp
c000150a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000150d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001511:	39 c5                	cmp    ebp,eax
c0001513:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001516:	74 2c                	je     c0001544 <iALLOc+0x193>
c0001518:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000151c:	85 c9                	test   ecx,ecx
c000151e:	75 15                	jne    c0001535 <iALLOc+0x184>
c0001520:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001523:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001526:	b9 10 00 00 00       	mov    ecx,0x10
c000152b:	83 fe 0f             	cmp    esi,0xf
c000152e:	76 05                	jbe    c0001535 <iALLOc+0x184>
c0001530:	83 e6 f8             	and    esi,0xfffffff8
c0001533:	89 f1                	mov    ecx,esi
c0001535:	89 ce                	mov    esi,ecx
c0001537:	29 cb                	sub    ebx,ecx
c0001539:	83 ce 01             	or     esi,0x1
c000153c:	40                   	inc    eax
c000153d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001540:	01 cf                	add    edi,ecx
c0001542:	eb c6                	jmp    c000150a <iALLOc+0x159>
c0001544:	83 cb 01             	or     ebx,0x1
c0001547:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000154a:	eb 08                	jmp    c0001554 <iALLOc+0x1a3>
c000154c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001558:	83 c4 2c             	add    esp,0x2c
c000155b:	5b                   	pop    ebx
c000155c:	5e                   	pop    esi
c000155d:	5f                   	pop    edi
c000155e:	5d                   	pop    ebp
c000155f:	c3                   	ret    

c0001560 <dlrealloc>:
c0001560:	55                   	push   ebp
c0001561:	57                   	push   edi
c0001562:	56                   	push   esi
c0001563:	53                   	push   ebx
c0001564:	83 ec 1c             	sub    esp,0x1c
c0001567:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000156b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000156f:	85 db                	test   ebx,ebx
c0001571:	75 10                	jne    c0001583 <dlrealloc+0x23>
c0001573:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001577:	83 c4 1c             	add    esp,0x1c
c000157a:	5b                   	pop    ebx
c000157b:	5e                   	pop    esi
c000157c:	5f                   	pop    edi
c000157d:	5d                   	pop    ebp
c000157e:	e9 a0 fa ff ff       	jmp    c0001023 <dlmalloc>
c0001583:	83 f8 df             	cmp    eax,0xffffffdf
c0001586:	76 07                	jbe    c000158f <dlrealloc+0x2f>
c0001588:	31 db                	xor    ebx,ebx
c000158a:	e9 6a 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c000158f:	83 c0 0b             	add    eax,0xb
c0001592:	bd 10 00 00 00       	mov    ebp,0x10
c0001597:	83 f8 0f             	cmp    eax,0xf
c000159a:	76 05                	jbe    c00015a1 <dlrealloc+0x41>
c000159c:	83 e0 f8             	and    eax,0xfffffff8
c000159f:	89 c5                	mov    ebp,eax
c00015a1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015a4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015a7:	89 c6                	mov    esi,eax
c00015a9:	83 e6 fc             	and    esi,0xfffffffc
c00015ac:	a8 02                	test   al,0x2
c00015ae:	75 d8                	jne    c0001588 <dlrealloc+0x28>
c00015b0:	39 f5                	cmp    ebp,esi
c00015b2:	0f 86 04 01 00 00    	jbe    c00016bc <dlrealloc+0x15c>
c00015b8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015bb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015be:	39 15 8c 5d 02 c0    	cmp    DWORD PTR ds:0xc0025d8c,edx
c00015c4:	75 33                	jne    c00015f9 <dlrealloc+0x99>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015cf:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015d2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015d6:	77 49                	ja     c0001621 <dlrealloc+0xc1>
c00015d8:	01 ef                	add    edi,ebp
c00015da:	83 e0 01             	and    eax,0x1
c00015dd:	09 e8                	or     eax,ebp
c00015df:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015e2:	89 3d 8c 5d 02 c0    	mov    DWORD PTR ds:0xc0025d8c,edi
c00015e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ec:	29 e8                	sub    eax,ebp
c00015ee:	83 c8 01             	or     eax,0x1
c00015f1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015f4:	e9 00 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c00015f9:	89 c8                	mov    eax,ecx
c00015fb:	83 e0 fe             	and    eax,0xfffffffe
c00015fe:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001603:	75 1c                	jne    c0001621 <dlrealloc+0xc1>
c0001605:	83 e1 fc             	and    ecx,0xfffffffc
c0001608:	01 f1                	add    ecx,esi
c000160a:	39 cd                	cmp    ebp,ecx
c000160c:	77 13                	ja     c0001621 <dlrealloc+0xc1>
c000160e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001611:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001614:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001617:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000161a:	89 ce                	mov    esi,ecx
c000161c:	e9 9b 00 00 00       	jmp    c00016bc <dlrealloc+0x15c>
c0001621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001625:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001628:	83 ec 0c             	sub    esp,0xc
c000162b:	50                   	push   eax
c000162c:	e8 f2 f9 ff ff       	call   c0001023 <dlmalloc>
c0001631:	83 c4 10             	add    esp,0x10
c0001634:	85 c0                	test   eax,eax
c0001636:	0f 84 4c ff ff ff    	je     c0001588 <dlrealloc+0x28>
c000163c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000163f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001643:	39 ca                	cmp    edx,ecx
c0001645:	75 0a                	jne    c0001651 <dlrealloc+0xf1>
c0001647:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000164a:	83 e0 fc             	and    eax,0xfffffffc
c000164d:	01 c6                	add    esi,eax
c000164f:	eb 6b                	jmp    c00016bc <dlrealloc+0x15c>
c0001651:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001654:	83 f9 27             	cmp    ecx,0x27
c0001657:	76 08                	jbe    c0001661 <dlrealloc+0x101>
c0001659:	89 de                	mov    esi,ebx
c000165b:	89 c7                	mov    edi,eax
c000165d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000165f:	eb 43                	jmp    c00016a4 <dlrealloc+0x144>
c0001661:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001663:	83 f9 13             	cmp    ecx,0x13
c0001666:	89 10                	mov    DWORD PTR [eax],edx
c0001668:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000166b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000166e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001671:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001674:	76 2e                	jbe    c00016a4 <dlrealloc+0x144>
c0001676:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001679:	83 f9 1b             	cmp    ecx,0x1b
c000167c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000167f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001685:	76 1d                	jbe    c00016a4 <dlrealloc+0x144>
c0001687:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000168a:	83 f9 23             	cmp    ecx,0x23
c000168d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001690:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001693:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001696:	76 0c                	jbe    c00016a4 <dlrealloc+0x144>
c0001698:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000169b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000169e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016a1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a8:	83 ec 0c             	sub    esp,0xc
c00016ab:	53                   	push   ebx
c00016ac:	e8 17 f6 ff ff       	call   c0000cc8 <dlfree>
c00016b1:	83 c4 10             	add    esp,0x10
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	89 c3                	mov    ebx,eax
c00016ba:	eb 3d                	jmp    c00016f9 <dlrealloc+0x199>
c00016bc:	89 f2                	mov    edx,esi
c00016be:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016c1:	29 ea                	sub    edx,ebp
c00016c3:	83 e1 01             	and    ecx,0x1
c00016c6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c9:	83 fa 0f             	cmp    edx,0xf
c00016cc:	77 0b                	ja     c00016d9 <dlrealloc+0x179>
c00016ce:	09 ce                	or     esi,ecx
c00016d0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016d7:	eb 20                	jmp    c00016f9 <dlrealloc+0x199>
c00016d9:	01 ef                	add    edi,ebp
c00016db:	83 ec 0c             	sub    esp,0xc
c00016de:	09 cd                	or     ebp,ecx
c00016e0:	83 ca 01             	or     edx,0x1
c00016e3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016e6:	83 c7 08             	add    edi,0x8
c00016e9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ec:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016f0:	57                   	push   edi
c00016f1:	e8 d2 f5 ff ff       	call   c0000cc8 <dlfree>
c00016f6:	83 c4 10             	add    esp,0x10
c00016f9:	83 c4 1c             	add    esp,0x1c
c00016fc:	89 d8                	mov    eax,ebx
c00016fe:	5b                   	pop    ebx
c00016ff:	5e                   	pop    esi
c0001700:	5f                   	pop    edi
c0001701:	5d                   	pop    ebp
c0001702:	c3                   	ret    

c0001703 <dlmemalign>:
c0001703:	55                   	push   ebp
c0001704:	57                   	push   edi
c0001705:	56                   	push   esi
c0001706:	53                   	push   ebx
c0001707:	83 ec 0c             	sub    esp,0xc
c000170a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000170e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001712:	83 fa 08             	cmp    edx,0x8
c0001715:	77 10                	ja     c0001727 <dlmemalign+0x24>
c0001717:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000171b:	83 c4 0c             	add    esp,0xc
c000171e:	5b                   	pop    ebx
c000171f:	5e                   	pop    esi
c0001720:	5f                   	pop    edi
c0001721:	5d                   	pop    ebp
c0001722:	e9 fc f8 ff ff       	jmp    c0001023 <dlmalloc>
c0001727:	bf 10 00 00 00       	mov    edi,0x10
c000172c:	83 fa 0f             	cmp    edx,0xf
c000172f:	76 13                	jbe    c0001744 <dlmemalign+0x41>
c0001731:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001734:	85 d1                	test   ecx,edx
c0001736:	75 04                	jne    c000173c <dlmemalign+0x39>
c0001738:	89 d7                	mov    edi,edx
c000173a:	eb 08                	jmp    c0001744 <dlmemalign+0x41>
c000173c:	39 d7                	cmp    edi,edx
c000173e:	73 04                	jae    c0001744 <dlmemalign+0x41>
c0001740:	01 ff                	add    edi,edi
c0001742:	eb f8                	jmp    c000173c <dlmemalign+0x39>
c0001744:	83 f8 df             	cmp    eax,0xffffffdf
c0001747:	76 07                	jbe    c0001750 <dlmemalign+0x4d>
c0001749:	31 c0                	xor    eax,eax
c000174b:	e9 ce 00 00 00       	jmp    c000181e <dlmemalign+0x11b>
c0001750:	83 c0 0b             	add    eax,0xb
c0001753:	bd 10 00 00 00       	mov    ebp,0x10
c0001758:	83 f8 0f             	cmp    eax,0xf
c000175b:	76 05                	jbe    c0001762 <dlmemalign+0x5f>
c000175d:	83 e0 f8             	and    eax,0xfffffff8
c0001760:	89 c5                	mov    ebp,eax
c0001762:	83 ec 0c             	sub    esp,0xc
c0001765:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001769:	50                   	push   eax
c000176a:	e8 b4 f8 ff ff       	call   c0001023 <dlmalloc>
c000176f:	83 c4 10             	add    esp,0x10
c0001772:	89 c1                	mov    ecx,eax
c0001774:	85 c0                	test   eax,eax
c0001776:	74 d1                	je     c0001749 <dlmemalign+0x46>
c0001778:	31 d2                	xor    edx,edx
c000177a:	8d 70 f8             	lea    esi,[eax-0x8]
c000177d:	f7 f7                	div    edi
c000177f:	85 d2                	test   edx,edx
c0001781:	74 62                	je     c00017e5 <dlmemalign+0xe2>
c0001783:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001787:	89 f8                	mov    eax,edi
c0001789:	f7 d8                	neg    eax
c000178b:	21 c3                	and    ebx,eax
c000178d:	83 eb 08             	sub    ebx,0x8
c0001790:	89 d8                	mov    eax,ebx
c0001792:	29 f0                	sub    eax,esi
c0001794:	83 f8 0f             	cmp    eax,0xf
c0001797:	77 02                	ja     c000179b <dlmemalign+0x98>
c0001799:	01 fb                	add    ebx,edi
c000179b:	89 d8                	mov    eax,ebx
c000179d:	29 f0                	sub    eax,esi
c000179f:	89 c6                	mov    esi,eax
c00017a1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a4:	89 c2                	mov    edx,eax
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	29 f2                	sub    edx,esi
c00017ab:	a8 02                	test   al,0x2
c00017ad:	74 10                	je     c00017bf <dlmemalign+0xbc>
c00017af:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017b2:	83 ca 02             	or     edx,0x2
c00017b5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ba:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017bd:	eb 5f                	jmp    c000181e <dlmemalign+0x11b>
c00017bf:	83 ec 0c             	sub    esp,0xc
c00017c2:	89 d0                	mov    eax,edx
c00017c4:	83 c8 01             	or     eax,0x1
c00017c7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017ca:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017cf:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 f0                	or     eax,esi
c00017d7:	89 de                	mov    esi,ebx
c00017d9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017dc:	51                   	push   ecx
c00017dd:	e8 e6 f4 ff ff       	call   c0000cc8 <dlfree>
c00017e2:	83 c4 10             	add    esp,0x10
c00017e5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e8:	a8 02                	test   al,0x2
c00017ea:	75 2f                	jne    c000181b <dlmemalign+0x118>
c00017ec:	83 e0 fc             	and    eax,0xfffffffc
c00017ef:	8d 55 10             	lea    edx,[ebp+0x10]
c00017f2:	39 c2                	cmp    edx,eax
c00017f4:	73 25                	jae    c000181b <dlmemalign+0x118>
c00017f6:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f9:	83 ec 0c             	sub    esp,0xc
c00017fc:	29 e8                	sub    eax,ebp
c00017fe:	83 c2 08             	add    edx,0x8
c0001801:	83 c8 01             	or     eax,0x1
c0001804:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001807:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000180a:	83 e0 01             	and    eax,0x1
c000180d:	09 c5                	or     ebp,eax
c000180f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001812:	52                   	push   edx
c0001813:	e8 b0 f4 ff ff       	call   c0000cc8 <dlfree>
c0001818:	83 c4 10             	add    esp,0x10
c000181b:	8d 46 08             	lea    eax,[esi+0x8]
c000181e:	83 c4 0c             	add    esp,0xc
c0001821:	5b                   	pop    ebx
c0001822:	5e                   	pop    esi
c0001823:	5f                   	pop    edi
c0001824:	5d                   	pop    ebp
c0001825:	c3                   	ret    

c0001826 <dlcalloc>:
c0001826:	53                   	push   ebx
c0001827:	83 ec 14             	sub    esp,0x14
c000182a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000182e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001833:	50                   	push   eax
c0001834:	e8 ea f7 ff ff       	call   c0001023 <dlmalloc>
c0001839:	83 c4 10             	add    esp,0x10
c000183c:	89 c3                	mov    ebx,eax
c000183e:	85 c0                	test   eax,eax
c0001840:	74 77                	je     c00018b9 <dlcalloc+0x93>
c0001842:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001845:	89 d0                	mov    eax,edx
c0001847:	83 e0 fc             	and    eax,0xfffffffc
c000184a:	80 e2 02             	and    dl,0x2
c000184d:	75 5a                	jne    c00018a9 <dlcalloc+0x83>
c000184f:	83 e8 04             	sub    eax,0x4
c0001852:	83 f8 27             	cmp    eax,0x27
c0001855:	76 03                	jbe    c000185a <dlcalloc+0x34>
c0001857:	51                   	push   ecx
c0001858:	eb 53                	jmp    c00018ad <dlcalloc+0x87>
c000185a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001860:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001867:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000186e:	83 f8 13             	cmp    eax,0x13
c0001871:	76 46                	jbe    c00018b9 <dlcalloc+0x93>
c0001873:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000187a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001881:	83 f8 1b             	cmp    eax,0x1b
c0001884:	76 33                	jbe    c00018b9 <dlcalloc+0x93>
c0001886:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000188d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001894:	83 f8 23             	cmp    eax,0x23
c0001897:	76 20                	jbe    c00018b9 <dlcalloc+0x93>
c0001899:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018a0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018a7:	eb 10                	jmp    c00018b9 <dlcalloc+0x93>
c00018a9:	83 e8 08             	sub    eax,0x8
c00018ac:	52                   	push   edx
c00018ad:	50                   	push   eax
c00018ae:	6a 00                	push   0x0
c00018b0:	53                   	push   ebx
c00018b1:	e8 ce ed ff ff       	call   c0000684 <memset>
c00018b6:	83 c4 10             	add    esp,0x10
c00018b9:	89 d8                	mov    eax,ebx
c00018bb:	83 c4 08             	add    esp,0x8
c00018be:	5b                   	pop    ebx
c00018bf:	c3                   	ret    

c00018c0 <dlcfree>:
c00018c0:	e9 03 f4 ff ff       	jmp    c0000cc8 <dlfree>

c00018c5 <dlindependent_calloc>:
c00018c5:	83 ec 28             	sub    esp,0x28
c00018c8:	b9 03 00 00 00       	mov    ecx,0x3
c00018cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	e8 cb fa ff ff       	call   c00013b1 <iALLOc>
c00018e6:	83 c4 2c             	add    esp,0x2c
c00018e9:	c3                   	ret    

c00018ea <dlindependent_comalloc>:
c00018ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018f2:	31 c9                	xor    ecx,ecx
c00018f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018fc:	e9 b0 fa ff ff       	jmp    c00013b1 <iALLOc>

c0001901 <dlvalloc>:
c0001901:	83 ec 0c             	sub    esp,0xc
c0001904:	83 3d 60 5d 02 c0 00 	cmp    DWORD PTR ds:0xc0025d60,0x0
c000190b:	75 0a                	jne    c0001917 <dlvalloc+0x16>
c000190d:	b8 60 5d 02 c0       	mov    eax,0xc0025d60
c0001912:	e8 ca f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001917:	50                   	push   eax
c0001918:	50                   	push   eax
c0001919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000191d:	ff 35 bc 60 02 c0    	push   DWORD PTR ds:0xc00260bc
c0001923:	e8 db fd ff ff       	call   c0001703 <dlmemalign>
c0001928:	83 c4 1c             	add    esp,0x1c
c000192b:	c3                   	ret    

c000192c <dlpvalloc>:
c000192c:	83 ec 0c             	sub    esp,0xc
c000192f:	83 3d 60 5d 02 c0 00 	cmp    DWORD PTR ds:0xc0025d60,0x0
c0001936:	75 0a                	jne    c0001942 <dlpvalloc+0x16>
c0001938:	b8 60 5d 02 c0       	mov    eax,0xc0025d60
c000193d:	e8 9f f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001942:	a1 bc 60 02 c0       	mov    eax,ds:0xc00260bc
c0001947:	89 c1                	mov    ecx,eax
c0001949:	52                   	push   edx
c000194a:	f7 d9                	neg    ecx
c000194c:	52                   	push   edx
c000194d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001951:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001955:	21 ca                	and    edx,ecx
c0001957:	52                   	push   edx
c0001958:	50                   	push   eax
c0001959:	e8 a5 fd ff ff       	call   c0001703 <dlmemalign>
c000195e:	83 c4 1c             	add    esp,0x1c
c0001961:	c3                   	ret    

c0001962 <dlmalloc_trim>:
c0001962:	b8 60 5d 02 c0       	mov    eax,0xc0025d60
c0001967:	e8 75 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c000196c:	31 c0                	xor    eax,eax
c000196e:	c3                   	ret    

c000196f <dlmalloc_usable_size>:
c000196f:	53                   	push   ebx
c0001970:	31 c0                	xor    eax,eax
c0001972:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001976:	85 c9                	test   ecx,ecx
c0001978:	74 24                	je     c000199e <dlmalloc_usable_size+0x2f>
c000197a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000197d:	f6 c2 02             	test   dl,0x2
c0001980:	74 08                	je     c000198a <dlmalloc_usable_size+0x1b>
c0001982:	83 e2 fc             	and    edx,0xfffffffc
c0001985:	8d 42 f8             	lea    eax,[edx-0x8]
c0001988:	eb 14                	jmp    c000199e <dlmalloc_usable_size+0x2f>
c000198a:	89 d3                	mov    ebx,edx
c000198c:	31 c0                	xor    eax,eax
c000198e:	83 e3 fe             	and    ebx,0xfffffffe
c0001991:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001996:	74 06                	je     c000199e <dlmalloc_usable_size+0x2f>
c0001998:	83 e2 fc             	and    edx,0xfffffffc
c000199b:	8d 42 fc             	lea    eax,[edx-0x4]
c000199e:	5b                   	pop    ebx
c000199f:	c3                   	ret    

c00019a0 <dlmallinfo>:
c00019a0:	55                   	push   ebp
c00019a1:	57                   	push   edi
c00019a2:	56                   	push   esi
c00019a3:	53                   	push   ebx
c00019a4:	83 ec 08             	sub    esp,0x8
c00019a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019ab:	83 3d 8c 5d 02 c0 00 	cmp    DWORD PTR ds:0xc0025d8c,0x0
c00019b2:	75 0a                	jne    c00019be <dlmallinfo+0x1e>
c00019b4:	b8 60 5d 02 c0       	mov    eax,0xc0025d60
c00019b9:	e8 23 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c00019be:	a1 8c 5d 02 c0       	mov    eax,ds:0xc0025d8c
c00019c3:	31 ed                	xor    ebp,ebp
c00019c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c8:	31 c9                	xor    ecx,ecx
c00019ca:	83 e0 fc             	and    eax,0xfffffffc
c00019cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d1:	31 c0                	xor    eax,eax
c00019d3:	8b 14 85 64 5d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda29c]
c00019da:	85 d2                	test   edx,edx
c00019dc:	74 0e                	je     c00019ec <dlmallinfo+0x4c>
c00019de:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019e1:	45                   	inc    ebp
c00019e2:	83 e6 fc             	and    esi,0xfffffffc
c00019e5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e8:	01 f1                	add    ecx,esi
c00019ea:	eb ee                	jmp    c00019da <dlmallinfo+0x3a>
c00019ec:	40                   	inc    eax
c00019ed:	83 f8 0a             	cmp    eax,0xa
c00019f0:	75 e1                	jne    c00019d3 <dlmallinfo+0x33>
c00019f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019fd:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a00:	b8 94 5d 02 c0       	mov    eax,0xc0025d94
c0001a05:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a08:	39 f0                	cmp    eax,esi
c0001a0a:	74 10                	je     c0001a1c <dlmallinfo+0x7c>
c0001a0c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a0f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a12:	83 e7 fc             	and    edi,0xfffffffc
c0001a15:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a18:	01 fa                	add    edx,edi
c0001a1a:	eb ec                	jmp    c0001a08 <dlmallinfo+0x68>
c0001a1c:	83 c0 08             	add    eax,0x8
c0001a1f:	3d 8c 60 02 c0       	cmp    eax,0xc002608c
c0001a24:	75 df                	jne    c0001a05 <dlmallinfo+0x65>
c0001a26:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a29:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a2c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a2f:	a1 c8 60 02 c0       	mov    eax,ds:0xc00260c8
c0001a34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a37:	89 03                	mov    DWORD PTR [ebx],eax
c0001a39:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a3c:	8b 35 b0 60 02 c0    	mov    esi,DWORD PTR ds:0xc00260b0
c0001a42:	29 d0                	sub    eax,edx
c0001a44:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a4a:	8b 35 c4 60 02 c0    	mov    esi,DWORD PTR ds:0xc00260c4
c0001a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a54:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a57:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a5a:	8b 35 d4 60 02 c0    	mov    esi,DWORD PTR ds:0xc00260d4
c0001a60:	89 d8                	mov    eax,ebx
c0001a62:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a65:	83 c4 08             	add    esp,0x8
c0001a68:	5b                   	pop    ebx
c0001a69:	5e                   	pop    esi
c0001a6a:	5f                   	pop    edi
c0001a6b:	5d                   	pop    ebp
c0001a6c:	c2 04 00             	ret    0x4

c0001a6f <dlmalloc_stats>:
c0001a6f:	83 ec 30             	sub    esp,0x30
c0001a72:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a76:	50                   	push   eax
c0001a77:	e8 24 ff ff ff       	call   c00019a0 <dlmallinfo>
c0001a7c:	83 c4 30             	add    esp,0x30
c0001a7f:	c3                   	ret    

c0001a80 <dlmallopt>:
c0001a80:	56                   	push   esi
c0001a81:	b8 60 5d 02 c0       	mov    eax,0xc0025d60
c0001a86:	53                   	push   ebx
c0001a87:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a8f:	e8 4d f1 ff ff       	call   c0000be1 <malloc_consolidate>
c0001a94:	8d 46 04             	lea    eax,[esi+0x4]
c0001a97:	83 f8 05             	cmp    eax,0x5
c0001a9a:	77 67                	ja     c0001b03 <dlmallopt+0x83>
c0001a9c:	ff 24 85 64 1e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde19c]
c0001aa3:	83 fb 50             	cmp    ebx,0x50
c0001aa6:	77 5b                	ja     c0001b03 <dlmallopt+0x83>
c0001aa8:	ba 08 00 00 00       	mov    edx,0x8
c0001aad:	85 db                	test   ebx,ebx
c0001aaf:	74 12                	je     c0001ac3 <dlmallopt+0x43>
c0001ab1:	83 c3 0b             	add    ebx,0xb
c0001ab4:	ba 10 00 00 00       	mov    edx,0x10
c0001ab9:	83 fb 0f             	cmp    ebx,0xf
c0001abc:	76 05                	jbe    c0001ac3 <dlmallopt+0x43>
c0001abe:	89 da                	mov    edx,ebx
c0001ac0:	83 e2 f8             	and    edx,0xfffffff8
c0001ac3:	a1 60 5d 02 c0       	mov    eax,ds:0xc0025d60
c0001ac8:	83 e0 03             	and    eax,0x3
c0001acb:	09 d0                	or     eax,edx
c0001acd:	a3 60 5d 02 c0       	mov    ds:0xc0025d60,eax
c0001ad2:	eb 31                	jmp    c0001b05 <dlmallopt+0x85>
c0001ad4:	89 1d a4 60 02 c0    	mov    DWORD PTR ds:0xc00260a4,ebx
c0001ada:	eb 06                	jmp    c0001ae2 <dlmallopt+0x62>
c0001adc:	89 1d a8 60 02 c0    	mov    DWORD PTR ds:0xc00260a8,ebx
c0001ae2:	be 01 00 00 00       	mov    esi,0x1
c0001ae7:	eb 1c                	jmp    c0001b05 <dlmallopt+0x85>
c0001ae9:	89 1d ac 60 02 c0    	mov    DWORD PTR ds:0xc00260ac,ebx
c0001aef:	eb f1                	jmp    c0001ae2 <dlmallopt+0x62>
c0001af1:	31 f6                	xor    esi,esi
c0001af3:	85 db                	test   ebx,ebx
c0001af5:	75 0e                	jne    c0001b05 <dlmallopt+0x85>
c0001af7:	c7 05 b4 60 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00260b4,0x0
c0001b01:	eb df                	jmp    c0001ae2 <dlmallopt+0x62>
c0001b03:	31 f6                	xor    esi,esi
c0001b05:	89 f0                	mov    eax,esi
c0001b07:	5b                   	pop    ebx
c0001b08:	5e                   	pop    esi
c0001b09:	c3                   	ret    

c0001b0a <disk_status>:
c0001b0a:	31 c0                	xor    eax,eax
c0001b0c:	c3                   	ret    

c0001b0d <disk_initialize>:
c0001b0d:	31 c0                	xor    eax,eax
c0001b0f:	c3                   	ret    

c0001b10 <disk_read>:
c0001b10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b15:	0f b6 04 85 c0 77 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8840]
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	e9 8e 94 01 00       	jmp    c001afb4 <fatWrapperReadDisk>

c0001b26 <disk_write>:
c0001b26:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b2b:	0f b6 04 85 c0 77 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8840]
c0001b33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b37:	e9 c0 94 01 00       	jmp    c001affc <fatWrapperWriteDisk>

c0001b3c <disk_ioctl>:
c0001b3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b45:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b4a:	0f b6 04 85 c0 77 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8840]
c0001b52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b56:	e9 e9 94 01 00       	jmp    c001b044 <fatWrapperIoctl>

c0001b5b <ld_word>:
c0001b5b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b5f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b62:	c1 e2 08             	shl    edx,0x8
c0001b65:	09 d0                	or     eax,edx
c0001b67:	c3                   	ret    

c0001b68 <ld_dword>:
c0001b68:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b6c:	89 d1                	mov    ecx,edx
c0001b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b72:	c1 e1 08             	shl    ecx,0x8
c0001b75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b78:	09 ca                	or     edx,ecx
c0001b7a:	c1 e2 08             	shl    edx,0x8
c0001b7d:	09 d0                	or     eax,edx
c0001b7f:	c3                   	ret    

c0001b80 <ld_qword>:
c0001b80:	57                   	push   edi
c0001b81:	56                   	push   esi
c0001b82:	53                   	push   ebx
c0001b83:	31 db                	xor    ebx,ebx
c0001b85:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b88:	89 df                	mov    edi,ebx
c0001b8a:	89 ce                	mov    esi,ecx
c0001b8c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b90:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b94:	c1 e6 08             	shl    esi,0x8
c0001b97:	09 f2                	or     edx,esi
c0001b99:	89 d6                	mov    esi,edx
c0001b9b:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b9f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba3:	c1 e6 08             	shl    esi,0x8
c0001ba6:	09 f2                	or     edx,esi
c0001ba8:	89 d6                	mov    esi,edx
c0001baa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bae:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bb5:	c1 e6 08             	shl    esi,0x8
c0001bb8:	89 fb                	mov    ebx,edi
c0001bba:	09 f2                	or     edx,esi
c0001bbc:	89 d1                	mov    ecx,edx
c0001bbe:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bc2:	c1 e1 08             	shl    ecx,0x8
c0001bc5:	89 da                	mov    edx,ebx
c0001bc7:	09 c8                	or     eax,ecx
c0001bc9:	5b                   	pop    ebx
c0001bca:	5e                   	pop    esi
c0001bcb:	5f                   	pop    edi
c0001bcc:	c3                   	ret    

c0001bcd <st_word>:
c0001bcd:	66 89 10             	mov    WORD PTR [eax],dx
c0001bd0:	c3                   	ret    

c0001bd1 <st_dword>:
c0001bd1:	89 10                	mov    DWORD PTR [eax],edx
c0001bd3:	c3                   	ret    

c0001bd4 <st_qword>:
c0001bd4:	89 10                	mov    DWORD PTR [eax],edx
c0001bd6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd9:	c3                   	ret    

c0001bda <mem_cpy>:
c0001bda:	85 c9                	test   ecx,ecx
c0001bdc:	74 10                	je     c0001bee <mem_cpy+0x14>
c0001bde:	57                   	push   edi
c0001bdf:	01 c1                	add    ecx,eax
c0001be1:	56                   	push   esi
c0001be2:	89 c7                	mov    edi,eax
c0001be4:	89 d6                	mov    esi,edx
c0001be6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001be7:	39 f9                	cmp    ecx,edi
c0001be9:	75 fb                	jne    c0001be6 <mem_cpy+0xc>
c0001beb:	5e                   	pop    esi
c0001bec:	5f                   	pop    edi
c0001bed:	c3                   	ret    
c0001bee:	c3                   	ret    

c0001bef <mem_set>:
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	40                   	inc    eax
c0001bf2:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bf5:	39 c8                	cmp    eax,ecx
c0001bf7:	75 f8                	jne    c0001bf1 <mem_set+0x2>
c0001bf9:	c3                   	ret    

c0001bfa <mem_cmp>:
c0001bfa:	57                   	push   edi
c0001bfb:	56                   	push   esi
c0001bfc:	89 c6                	mov    esi,eax
c0001bfe:	53                   	push   ebx
c0001bff:	46                   	inc    esi
c0001c00:	42                   	inc    edx
c0001c01:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c05:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c09:	29 fb                	sub    ebx,edi
c0001c0b:	89 cf                	mov    edi,ecx
c0001c0d:	29 f7                	sub    edi,esi
c0001c0f:	01 c7                	add    edi,eax
c0001c11:	74 04                	je     c0001c17 <mem_cmp+0x1d>
c0001c13:	85 db                	test   ebx,ebx
c0001c15:	74 e8                	je     c0001bff <mem_cmp+0x5>
c0001c17:	89 d8                	mov    eax,ebx
c0001c19:	5b                   	pop    ebx
c0001c1a:	5e                   	pop    esi
c0001c1b:	5f                   	pop    edi
c0001c1c:	c3                   	ret    

c0001c1d <chk_chr>:
c0001c1d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c20:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c23:	74 07                	je     c0001c2c <chk_chr+0xf>
c0001c25:	39 d1                	cmp    ecx,edx
c0001c27:	74 03                	je     c0001c2c <chk_chr+0xf>
c0001c29:	40                   	inc    eax
c0001c2a:	eb f1                	jmp    c0001c1d <chk_chr>
c0001c2c:	89 c8                	mov    eax,ecx
c0001c2e:	c3                   	ret    

c0001c2f <dbc_1st>:
c0001c2f:	31 c0                	xor    eax,eax
c0001c31:	c3                   	ret    

c0001c32 <dbc_2nd>:
c0001c32:	31 c0                	xor    eax,eax
c0001c34:	c3                   	ret    

c0001c35 <tchar2uni>:
c0001c35:	57                   	push   edi
c0001c36:	89 c7                	mov    edi,eax
c0001c38:	56                   	push   esi
c0001c39:	53                   	push   ebx
c0001c3a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c3c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c3e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c41:	84 c9                	test   cl,cl
c0001c43:	78 0a                	js     c0001c4f <tchar2uni+0x1a>
c0001c45:	0f b6 d1             	movzx  edx,cl
c0001c48:	89 f3                	mov    ebx,esi
c0001c4a:	e9 9f 00 00 00       	jmp    c0001cee <tchar2uni+0xb9>
c0001c4f:	88 ca                	mov    dl,cl
c0001c51:	83 e2 e0             	and    edx,0xffffffe0
c0001c54:	80 fa c0             	cmp    dl,0xc0
c0001c57:	75 0c                	jne    c0001c65 <tchar2uni+0x30>
c0001c59:	89 ca                	mov    edx,ecx
c0001c5b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c60:	83 e2 1f             	and    edx,0x1f
c0001c63:	eb 2e                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c65:	88 ca                	mov    dl,cl
c0001c67:	83 e2 f0             	and    edx,0xfffffff0
c0001c6a:	80 fa e0             	cmp    dl,0xe0
c0001c6d:	75 0c                	jne    c0001c7b <tchar2uni+0x46>
c0001c6f:	89 ca                	mov    edx,ecx
c0001c71:	b9 02 00 00 00       	mov    ecx,0x2
c0001c76:	83 e2 0f             	and    edx,0xf
c0001c79:	eb 18                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c7b:	88 ca                	mov    dl,cl
c0001c7d:	83 e2 f8             	and    edx,0xfffffff8
c0001c80:	88 d0                	mov    al,dl
c0001c82:	83 ca ff             	or     edx,0xffffffff
c0001c85:	3c f0                	cmp    al,0xf0
c0001c87:	75 6c                	jne    c0001cf5 <tchar2uni+0xc0>
c0001c89:	89 ca                	mov    edx,ecx
c0001c8b:	b9 03 00 00 00       	mov    ecx,0x3
c0001c90:	83 e2 07             	and    edx,0x7
c0001c93:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c97:	46                   	inc    esi
c0001c98:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c9b:	88 c8                	mov    al,cl
c0001c9d:	83 e0 c0             	and    eax,0xffffffc0
c0001ca0:	3c 80                	cmp    al,0x80
c0001ca2:	75 4e                	jne    c0001cf2 <tchar2uni+0xbd>
c0001ca4:	c1 e2 06             	shl    edx,0x6
c0001ca7:	83 e1 3f             	and    ecx,0x3f
c0001caa:	09 ca                	or     edx,ecx
c0001cac:	39 de                	cmp    esi,ebx
c0001cae:	75 e7                	jne    c0001c97 <tchar2uni+0x62>
c0001cb0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cb3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb9:	77 37                	ja     c0001cf2 <tchar2uni+0xbd>
c0001cbb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cc1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cc7:	76 29                	jbe    c0001cf2 <tchar2uni+0xbd>
c0001cc9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ccf:	76 1d                	jbe    c0001cee <tchar2uni+0xb9>
c0001cd1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001cd7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cdd:	c1 e1 06             	shl    ecx,0x6
c0001ce0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001ce6:	09 ca                	or     edx,ecx
c0001ce8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cee:	89 1f                	mov    DWORD PTR [edi],ebx
c0001cf0:	eb 03                	jmp    c0001cf5 <tchar2uni+0xc0>
c0001cf2:	83 ca ff             	or     edx,0xffffffff
c0001cf5:	5b                   	pop    ebx
c0001cf6:	89 d0                	mov    eax,edx
c0001cf8:	5e                   	pop    esi
c0001cf9:	5f                   	pop    edi
c0001cfa:	c3                   	ret    

c0001cfb <put_utf>:
c0001cfb:	53                   	push   ebx
c0001cfc:	83 f8 7f             	cmp    eax,0x7f
c0001cff:	89 c3                	mov    ebx,eax
c0001d01:	b0 00                	mov    al,0x0
c0001d03:	77 11                	ja     c0001d16 <put_utf+0x1b>
c0001d05:	85 c9                	test   ecx,ecx
c0001d07:	0f 84 e5 00 00 00    	je     c0001df2 <put_utf+0xf7>
c0001d0d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d0f:	b0 01                	mov    al,0x1
c0001d11:	e9 dc 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d16:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d1c:	77 23                	ja     c0001d41 <put_utf+0x46>
c0001d1e:	83 f9 01             	cmp    ecx,0x1
c0001d21:	0f 86 cb 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d27:	89 d8                	mov    eax,ebx
c0001d29:	83 e3 3f             	and    ebx,0x3f
c0001d2c:	c1 e8 06             	shr    eax,0x6
c0001d2f:	83 cb 80             	or     ebx,0xffffff80
c0001d32:	83 c8 c0             	or     eax,0xffffffc0
c0001d35:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d38:	88 02                	mov    BYTE PTR [edx],al
c0001d3a:	b0 02                	mov    al,0x2
c0001d3c:	e9 b1 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d41:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d47:	77 40                	ja     c0001d89 <put_utf+0x8e>
c0001d49:	83 f9 02             	cmp    ecx,0x2
c0001d4c:	0f 86 a0 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d52:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d58:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d5e:	0f 86 8e 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d64:	89 d8                	mov    eax,ebx
c0001d66:	c1 e8 0c             	shr    eax,0xc
c0001d69:	83 c8 e0             	or     eax,0xffffffe0
c0001d6c:	88 02                	mov    BYTE PTR [edx],al
c0001d6e:	89 d8                	mov    eax,ebx
c0001d70:	83 e3 3f             	and    ebx,0x3f
c0001d73:	c1 e8 06             	shr    eax,0x6
c0001d76:	83 cb 80             	or     ebx,0xffffff80
c0001d79:	83 e0 3f             	and    eax,0x3f
c0001d7c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d7f:	83 c8 80             	or     eax,0xffffff80
c0001d82:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d85:	b0 03                	mov    al,0x3
c0001d87:	eb 69                	jmp    c0001df2 <put_utf+0xf7>
c0001d89:	83 f9 03             	cmp    ecx,0x3
c0001d8c:	76 64                	jbe    c0001df2 <put_utf+0xf7>
c0001d8e:	89 d9                	mov    ecx,ebx
c0001d90:	0f b7 c3             	movzx  eax,bx
c0001d93:	66 31 c9             	xor    cx,cx
c0001d96:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d9c:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001da2:	c1 e9 06             	shr    ecx,0x6
c0001da5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dab:	77 43                	ja     c0001df0 <put_utf+0xf5>
c0001dad:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001db3:	77 3b                	ja     c0001df0 <put_utf+0xf5>
c0001db5:	09 cb                	or     ebx,ecx
c0001db7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dbd:	89 d8                	mov    eax,ebx
c0001dbf:	c1 e8 12             	shr    eax,0x12
c0001dc2:	83 c8 f0             	or     eax,0xfffffff0
c0001dc5:	88 02                	mov    BYTE PTR [edx],al
c0001dc7:	89 d8                	mov    eax,ebx
c0001dc9:	c1 e8 0c             	shr    eax,0xc
c0001dcc:	83 e0 3f             	and    eax,0x3f
c0001dcf:	83 c8 80             	or     eax,0xffffff80
c0001dd2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dd5:	89 d8                	mov    eax,ebx
c0001dd7:	83 e3 3f             	and    ebx,0x3f
c0001dda:	c1 e8 06             	shr    eax,0x6
c0001ddd:	83 cb 80             	or     ebx,0xffffff80
c0001de0:	83 e0 3f             	and    eax,0x3f
c0001de3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001de6:	83 c8 80             	or     eax,0xffffff80
c0001de9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dec:	b0 04                	mov    al,0x4
c0001dee:	eb 02                	jmp    c0001df2 <put_utf+0xf7>
c0001df0:	31 c0                	xor    eax,eax
c0001df2:	5b                   	pop    ebx
c0001df3:	c3                   	ret    

c0001df4 <clst2sect>:
c0001df4:	89 c1                	mov    ecx,eax
c0001df6:	83 ea 02             	sub    edx,0x2
c0001df9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001dfc:	83 e8 02             	sub    eax,0x2
c0001dff:	39 d0                	cmp    eax,edx
c0001e01:	76 0d                	jbe    c0001e10 <clst2sect+0x1c>
c0001e03:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e07:	f7 e2                	mul    edx
c0001e09:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e0c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e0f:	c3                   	ret    
c0001e10:	31 c0                	xor    eax,eax
c0001e12:	31 d2                	xor    edx,edx
c0001e14:	c3                   	ret    

c0001e15 <clmt_clust>:
c0001e15:	57                   	push   edi
c0001e16:	89 cf                	mov    edi,ecx
c0001e18:	56                   	push   esi
c0001e19:	89 d6                	mov    esi,edx
c0001e1b:	53                   	push   ebx
c0001e1c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e20:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e23:	89 f2                	mov    edx,esi
c0001e25:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e27:	c1 ef 09             	shr    edi,0x9
c0001e2a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e2e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e31:	89 f9                	mov    ecx,edi
c0001e33:	31 ff                	xor    edi,edi
c0001e35:	57                   	push   edi
c0001e36:	56                   	push   esi
c0001e37:	51                   	push   ecx
c0001e38:	52                   	push   edx
c0001e39:	e8 66 f0 01 00       	call   c0020ea4 <__udivdi3>
c0001e3e:	83 c4 10             	add    esp,0x10
c0001e41:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e43:	85 d2                	test   edx,edx
c0001e45:	74 10                	je     c0001e57 <clmt_clust+0x42>
c0001e47:	39 d0                	cmp    eax,edx
c0001e49:	72 07                	jb     c0001e52 <clmt_clust+0x3d>
c0001e4b:	29 d0                	sub    eax,edx
c0001e4d:	83 c3 08             	add    ebx,0x8
c0001e50:	eb ef                	jmp    c0001e41 <clmt_clust+0x2c>
c0001e52:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e55:	89 c2                	mov    edx,eax
c0001e57:	5b                   	pop    ebx
c0001e58:	89 d0                	mov    eax,edx
c0001e5a:	5e                   	pop    esi
c0001e5b:	5f                   	pop    edi
c0001e5c:	c3                   	ret    

c0001e5d <pick_lfn>:
c0001e5d:	55                   	push   ebp
c0001e5e:	57                   	push   edi
c0001e5f:	56                   	push   esi
c0001e60:	89 d6                	mov    esi,edx
c0001e62:	53                   	push   ebx
c0001e63:	89 c3                	mov    ebx,eax
c0001e65:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e68:	e8 ee fc ff ff       	call   c0001b5b <ld_word>
c0001e6d:	66 85 c0             	test   ax,ax
c0001e70:	74 04                	je     c0001e76 <pick_lfn+0x19>
c0001e72:	31 c0                	xor    eax,eax
c0001e74:	eb 5c                	jmp    c0001ed2 <pick_lfn+0x75>
c0001e76:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e79:	bd 01 00 00 00       	mov    ebp,0x1
c0001e7e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e81:	31 ff                	xor    edi,edi
c0001e83:	49                   	dec    ecx
c0001e84:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e87:	0f b6 87 80 1f 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffde080]
c0001e8e:	01 f0                	add    eax,esi
c0001e90:	e8 c6 fc ff ff       	call   c0001b5b <ld_word>
c0001e95:	66 85 ed             	test   bp,bp
c0001e98:	74 11                	je     c0001eab <pick_lfn+0x4e>
c0001e9a:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ea0:	77 d0                	ja     c0001e72 <pick_lfn+0x15>
c0001ea2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ea6:	89 c5                	mov    ebp,eax
c0001ea8:	41                   	inc    ecx
c0001ea9:	eb 04                	jmp    c0001eaf <pick_lfn+0x52>
c0001eab:	66 40                	inc    ax
c0001ead:	75 c3                	jne    c0001e72 <pick_lfn+0x15>
c0001eaf:	47                   	inc    edi
c0001eb0:	83 ff 0d             	cmp    edi,0xd
c0001eb3:	75 d2                	jne    c0001e87 <pick_lfn+0x2a>
c0001eb5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb8:	74 13                	je     c0001ecd <pick_lfn+0x70>
c0001eba:	66 85 ed             	test   bp,bp
c0001ebd:	74 0e                	je     c0001ecd <pick_lfn+0x70>
c0001ebf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ec5:	77 ab                	ja     c0001e72 <pick_lfn+0x15>
c0001ec7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ecd:	b8 01 00 00 00       	mov    eax,0x1
c0001ed2:	5b                   	pop    ebx
c0001ed3:	5e                   	pop    esi
c0001ed4:	5f                   	pop    edi
c0001ed5:	5d                   	pop    ebp
c0001ed6:	c3                   	ret    

c0001ed7 <put_lfn>:
c0001ed7:	55                   	push   ebp
c0001ed8:	31 ed                	xor    ebp,ebp
c0001eda:	57                   	push   edi
c0001edb:	89 d7                	mov    edi,edx
c0001edd:	56                   	push   esi
c0001ede:	31 f6                	xor    esi,esi
c0001ee0:	53                   	push   ebx
c0001ee1:	83 ec 08             	sub    esp,0x8
c0001ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ee7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001eeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eef:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ef5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001efb:	31 d2                	xor    edx,edx
c0001efd:	e8 cb fc ff ff       	call   c0001bcd <st_word>
c0001f02:	0f b6 d9             	movzx  ebx,cl
c0001f05:	4b                   	dec    ebx
c0001f06:	6b db 0d             	imul   ebx,ebx,0xd
c0001f09:	66 83 fe ff          	cmp    si,0xffff
c0001f0d:	74 08                	je     c0001f17 <put_lfn+0x40>
c0001f0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f12:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f16:	43                   	inc    ebx
c0001f17:	0f b6 85 80 1f 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffde080]
c0001f1e:	0f b7 d6             	movzx  edx,si
c0001f21:	01 f8                	add    eax,edi
c0001f23:	e8 a5 fc ff ff       	call   c0001bcd <st_word>
c0001f28:	66 85 f6             	test   si,si
c0001f2b:	75 03                	jne    c0001f30 <put_lfn+0x59>
c0001f2d:	83 ce ff             	or     esi,0xffffffff
c0001f30:	45                   	inc    ebp
c0001f31:	83 fd 0d             	cmp    ebp,0xd
c0001f34:	75 d3                	jne    c0001f09 <put_lfn+0x32>
c0001f36:	66 46                	inc    si
c0001f38:	74 0a                	je     c0001f44 <put_lfn+0x6d>
c0001f3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f3d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f42:	75 09                	jne    c0001f4d <put_lfn+0x76>
c0001f44:	88 c8                	mov    al,cl
c0001f46:	83 c8 40             	or     eax,0x40
c0001f49:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f4d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f51:	88 07                	mov    BYTE PTR [edi],al
c0001f53:	83 c4 08             	add    esp,0x8
c0001f56:	5b                   	pop    ebx
c0001f57:	5e                   	pop    esi
c0001f58:	5f                   	pop    edi
c0001f59:	5d                   	pop    ebp
c0001f5a:	c3                   	ret    

c0001f5b <gen_numname>:
c0001f5b:	57                   	push   edi
c0001f5c:	89 cf                	mov    edi,ecx
c0001f5e:	56                   	push   esi
c0001f5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f64:	53                   	push   ebx
c0001f65:	89 c6                	mov    esi,eax
c0001f67:	83 ec 10             	sub    esp,0x10
c0001f6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f6e:	e8 67 fc ff ff       	call   c0001bda <mem_cpy>
c0001f73:	83 fb 05             	cmp    ebx,0x5
c0001f76:	76 2d                	jbe    c0001fa5 <gen_numname+0x4a>
c0001f78:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 25                	je     c0001fa5 <gen_numname+0x4a>
c0001f80:	83 c7 02             	add    edi,0x2
c0001f83:	ba 10 00 00 00       	mov    edx,0x10
c0001f88:	01 db                	add    ebx,ebx
c0001f8a:	89 c1                	mov    ecx,eax
c0001f8c:	66 d1 e8             	shr    ax,1
c0001f8f:	83 e1 01             	and    ecx,0x1
c0001f92:	01 cb                	add    ebx,ecx
c0001f94:	0f ba e3 10          	bt     ebx,0x10
c0001f98:	73 06                	jae    c0001fa0 <gen_numname+0x45>
c0001f9a:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fa0:	4a                   	dec    edx
c0001fa1:	75 e5                	jne    c0001f88 <gen_numname+0x2d>
c0001fa3:	eb d3                	jmp    c0001f78 <gen_numname+0x1d>
c0001fa5:	b8 07 00 00 00       	mov    eax,0x7
c0001faa:	88 d9                	mov    cl,bl
c0001fac:	83 e1 0f             	and    ecx,0xf
c0001faf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fb2:	80 fa 39             	cmp    dl,0x39
c0001fb5:	76 03                	jbe    c0001fba <gen_numname+0x5f>
c0001fb7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fba:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fbd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fc1:	89 da                	mov    edx,ebx
c0001fc3:	c1 ea 04             	shr    edx,0x4
c0001fc6:	83 fb 0f             	cmp    ebx,0xf
c0001fc9:	76 06                	jbe    c0001fd1 <gen_numname+0x76>
c0001fcb:	89 c8                	mov    eax,ecx
c0001fcd:	89 d3                	mov    ebx,edx
c0001fcf:	eb d9                	jmp    c0001faa <gen_numname+0x4f>
c0001fd1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fd6:	31 d2                	xor    edx,edx
c0001fd8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fdb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fde:	39 ca                	cmp    edx,ecx
c0001fe0:	73 18                	jae    c0001ffa <gen_numname+0x9f>
c0001fe2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fe5:	3c 20                	cmp    al,0x20
c0001fe7:	74 11                	je     c0001ffa <gen_numname+0x9f>
c0001fe9:	e8 41 fc ff ff       	call   c0001c2f <dbc_1st>
c0001fee:	85 c0                	test   eax,eax
c0001ff0:	74 05                	je     c0001ff7 <gen_numname+0x9c>
c0001ff2:	39 d3                	cmp    ebx,edx
c0001ff4:	74 04                	je     c0001ffa <gen_numname+0x9f>
c0001ff6:	42                   	inc    edx
c0001ff7:	42                   	inc    edx
c0001ff8:	eb e1                	jmp    c0001fdb <gen_numname+0x80>
c0001ffa:	b0 20                	mov    al,0x20
c0001ffc:	83 f9 07             	cmp    ecx,0x7
c0001fff:	77 05                	ja     c0002006 <gen_numname+0xab>
c0002001:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002005:	41                   	inc    ecx
c0002006:	42                   	inc    edx
c0002007:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000200b:	83 fa 07             	cmp    edx,0x7
c000200e:	76 ea                	jbe    c0001ffa <gen_numname+0x9f>
c0002010:	83 c4 10             	add    esp,0x10
c0002013:	5b                   	pop    ebx
c0002014:	5e                   	pop    esi
c0002015:	5f                   	pop    edi
c0002016:	c3                   	ret    

c0002017 <sum_sfn>:
c0002017:	31 c9                	xor    ecx,ecx
c0002019:	31 d2                	xor    edx,edx
c000201b:	d0 ca                	ror    dl,1
c000201d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002020:	41                   	inc    ecx
c0002021:	83 f9 0b             	cmp    ecx,0xb
c0002024:	75 f5                	jne    c000201b <sum_sfn+0x4>
c0002026:	88 d0                	mov    al,dl
c0002028:	c3                   	ret    

c0002029 <xdir_sum>:
c0002029:	56                   	push   esi
c000202a:	31 c9                	xor    ecx,ecx
c000202c:	53                   	push   ebx
c000202d:	31 d2                	xor    edx,edx
c000202f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002033:	43                   	inc    ebx
c0002034:	c1 e3 05             	shl    ebx,0x5
c0002037:	83 fa 02             	cmp    edx,0x2
c000203a:	74 0b                	je     c0002047 <xdir_sum+0x1e>
c000203c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002040:	66 d1 c9             	ror    cx,1
c0002043:	01 f1                	add    ecx,esi
c0002045:	eb 05                	jmp    c000204c <xdir_sum+0x23>
c0002047:	ba 03 00 00 00       	mov    edx,0x3
c000204c:	42                   	inc    edx
c000204d:	39 d3                	cmp    ebx,edx
c000204f:	77 e6                	ja     c0002037 <xdir_sum+0xe>
c0002051:	89 c8                	mov    eax,ecx
c0002053:	5b                   	pop    ebx
c0002054:	5e                   	pop    esi
c0002055:	c3                   	ret    

c0002056 <xsum32>:
c0002056:	d1 ca                	ror    edx,1
c0002058:	0f b6 c0             	movzx  eax,al
c000205b:	01 d0                	add    eax,edx
c000205d:	c3                   	ret    

c000205e <get_xfileinfo>:
c000205e:	55                   	push   ebp
c000205f:	31 c9                	xor    ecx,ecx
c0002061:	57                   	push   edi
c0002062:	bd 40 00 00 00       	mov    ebp,0x40
c0002067:	56                   	push   esi
c0002068:	31 ff                	xor    edi,edi
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 0c             	sub    esp,0xc
c0002070:	89 d3                	mov    ebx,edx
c0002072:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002079:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000207d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002080:	76 6d                	jbe    c00020ef <get_xfileinfo+0x91>
c0002082:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002088:	76 0b                	jbe    c0002095 <get_xfileinfo+0x37>
c000208a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000208e:	bf 01 00 00 00       	mov    edi,0x1
c0002093:	eb 63                	jmp    c00020f8 <get_xfileinfo+0x9a>
c0002095:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c000209b:	75 03                	jne    c00020a0 <get_xfileinfo+0x42>
c000209d:	83 c5 02             	add    ebp,0x2
c00020a0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020a3:	83 c5 02             	add    ebp,0x2
c00020a6:	e8 b0 fa ff ff       	call   c0001b5b <ld_word>
c00020ab:	ff 04 24             	inc    DWORD PTR [esp]
c00020ae:	66 85 c9             	test   cx,cx
c00020b1:	75 0d                	jne    c00020c0 <get_xfileinfo+0x62>
c00020b3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020be:	76 2b                	jbe    c00020eb <get_xfileinfo+0x8d>
c00020c0:	c1 e1 10             	shl    ecx,0x10
c00020c3:	ba ff 00 00 00       	mov    edx,0xff
c00020c8:	0f b7 c0             	movzx  eax,ax
c00020cb:	29 fa                	sub    edx,edi
c00020cd:	09 c8                	or     eax,ecx
c00020cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020d3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020db:	e8 1b fc ff ff       	call   c0001cfb <put_utf>
c00020e0:	84 c0                	test   al,al
c00020e2:	74 a6                	je     c000208a <get_xfileinfo+0x2c>
c00020e4:	0f b6 c0             	movzx  eax,al
c00020e7:	01 c7                	add    edi,eax
c00020e9:	31 c0                	xor    eax,eax
c00020eb:	89 c1                	mov    ecx,eax
c00020ed:	eb 8a                	jmp    c0002079 <get_xfileinfo+0x1b>
c00020ef:	85 ff                	test   edi,edi
c00020f1:	74 97                	je     c000208a <get_xfileinfo+0x2c>
c00020f3:	66 85 c9             	test   cx,cx
c00020f6:	75 92                	jne    c000208a <get_xfileinfo+0x2c>
c00020f8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020fd:	31 c0                	xor    eax,eax
c00020ff:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002103:	31 d2                	xor    edx,edx
c0002105:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002108:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000210b:	80 e1 10             	and    cl,0x10
c000210e:	75 08                	jne    c0002118 <get_xfileinfo+0xba>
c0002110:	8d 46 38             	lea    eax,[esi+0x38]
c0002113:	e8 68 fa ff ff       	call   c0001b80 <ld_qword>
c0002118:	89 03                	mov    DWORD PTR [ebx],eax
c000211a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000211d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002120:	e8 36 fa ff ff       	call   c0001b5b <ld_word>
c0002125:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002129:	8d 46 0e             	lea    eax,[esi+0xe]
c000212c:	e8 2a fa ff ff       	call   c0001b5b <ld_word>
c0002131:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002135:	83 c4 0c             	add    esp,0xc
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	5d                   	pop    ebp
c000213c:	c3                   	ret    

c000213d <get_ldnumber>:
c000213d:	8b 10                	mov    edx,DWORD PTR [eax]
c000213f:	85 d2                	test   edx,edx
c0002141:	74 14                	je     c0002157 <get_ldnumber+0x1a>
c0002143:	56                   	push   esi
c0002144:	53                   	push   ebx
c0002145:	89 d3                	mov    ebx,edx
c0002147:	43                   	inc    ebx
c0002148:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214b:	80 f9 1f             	cmp    cl,0x1f
c000214e:	76 0d                	jbe    c000215d <get_ldnumber+0x20>
c0002150:	80 f9 3a             	cmp    cl,0x3a
c0002153:	75 f2                	jne    c0002147 <get_ldnumber+0xa>
c0002155:	eb 0a                	jmp    c0002161 <get_ldnumber+0x24>
c0002157:	83 c9 ff             	or     ecx,0xffffffff
c000215a:	89 c8                	mov    eax,ecx
c000215c:	c3                   	ret    
c000215d:	31 c9                	xor    ecx,ecx
c000215f:	eb 24                	jmp    c0002185 <get_ldnumber+0x48>
c0002161:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002164:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002167:	80 f9 09             	cmp    cl,0x9
c000216a:	77 16                	ja     c0002182 <get_ldnumber+0x45>
c000216c:	83 c2 02             	add    edx,0x2
c000216f:	83 c9 ff             	or     ecx,0xffffffff
c0002172:	39 d3                	cmp    ebx,edx
c0002174:	75 0f                	jne    c0002185 <get_ldnumber+0x48>
c0002176:	89 f2                	mov    edx,esi
c0002178:	89 18                	mov    DWORD PTR [eax],ebx
c000217a:	0f be ca             	movsx  ecx,dl
c000217d:	83 e9 30             	sub    ecx,0x30
c0002180:	eb 03                	jmp    c0002185 <get_ldnumber+0x48>
c0002182:	83 c9 ff             	or     ecx,0xffffffff
c0002185:	89 c8                	mov    eax,ecx
c0002187:	5b                   	pop    ebx
c0002188:	5e                   	pop    esi
c0002189:	c3                   	ret    

c000218a <crc32>:
c000218a:	56                   	push   esi
c000218b:	89 d6                	mov    esi,edx
c000218d:	53                   	push   ebx
c000218e:	b2 01                	mov    dl,0x1
c0002190:	bb 08 00 00 00       	mov    ebx,0x8
c0002195:	89 f1                	mov    ecx,esi
c0002197:	84 d1                	test   cl,dl
c0002199:	0f 95 c1             	setne  cl
c000219c:	0f b6 c9             	movzx  ecx,cl
c000219f:	31 c1                	xor    ecx,eax
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	d1 e8                	shr    eax,1
c00021a5:	80 e1 01             	and    cl,0x1
c00021a8:	74 05                	je     c00021af <crc32+0x25>
c00021aa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021af:	d1 e2                	shl    edx,1
c00021b1:	4b                   	dec    ebx
c00021b2:	75 e1                	jne    c0002195 <crc32+0xb>
c00021b4:	5b                   	pop    ebx
c00021b5:	5e                   	pop    esi
c00021b6:	c3                   	ret    

c00021b7 <test_gpt_header>:
c00021b7:	55                   	push   ebp
c00021b8:	b9 10 00 00 00       	mov    ecx,0x10
c00021bd:	57                   	push   edi
c00021be:	ba 80 1e 02 c0       	mov    edx,0xc0021e80
c00021c3:	56                   	push   esi
c00021c4:	31 ff                	xor    edi,edi
c00021c6:	53                   	push   ebx
c00021c7:	89 c3                	mov    ebx,eax
c00021c9:	e8 2c fa ff ff       	call   c0001bfa <mem_cmp>
c00021ce:	85 c0                	test   eax,eax
c00021d0:	75 55                	jne    c0002227 <test_gpt_header+0x70>
c00021d2:	89 c7                	mov    edi,eax
c00021d4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d9:	83 ce ff             	or     esi,0xffffffff
c00021dc:	31 d2                	xor    edx,edx
c00021de:	83 fd 03             	cmp    ebp,0x3
c00021e1:	76 05                	jbe    c00021e8 <test_gpt_header+0x31>
c00021e3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e8:	89 f0                	mov    eax,esi
c00021ea:	45                   	inc    ebp
c00021eb:	e8 9a ff ff ff       	call   c000218a <crc32>
c00021f0:	83 fd 4c             	cmp    ebp,0x4c
c00021f3:	89 c6                	mov    esi,eax
c00021f5:	75 e5                	jne    c00021dc <test_gpt_header+0x25>
c00021f7:	8d 43 10             	lea    eax,[ebx+0x10]
c00021fa:	f7 d6                	not    esi
c00021fc:	e8 67 f9 ff ff       	call   c0001b68 <ld_dword>
c0002201:	39 c6                	cmp    esi,eax
c0002203:	75 22                	jne    c0002227 <test_gpt_header+0x70>
c0002205:	8d 43 54             	lea    eax,[ebx+0x54]
c0002208:	e8 5b f9 ff ff       	call   c0001b68 <ld_dword>
c000220d:	83 c0 80             	add    eax,0xffffff80
c0002210:	75 15                	jne    c0002227 <test_gpt_header+0x70>
c0002212:	8d 43 50             	lea    eax,[ebx+0x50]
c0002215:	e8 4e f9 ff ff       	call   c0001b68 <ld_dword>
c000221a:	3d 80 00 00 00       	cmp    eax,0x80
c000221f:	0f 96 c0             	setbe  al
c0002222:	0f b6 c0             	movzx  eax,al
c0002225:	89 c7                	mov    edi,eax
c0002227:	5b                   	pop    ebx
c0002228:	89 f8                	mov    eax,edi
c000222a:	5e                   	pop    esi
c000222b:	5f                   	pop    edi
c000222c:	5d                   	pop    ebp
c000222d:	c3                   	ret    

c000222e <make_rand>:
c000222e:	56                   	push   esi
c000222f:	85 c0                	test   eax,eax
c0002231:	53                   	push   ebx
c0002232:	75 05                	jne    c0002239 <make_rand+0xb>
c0002234:	b8 01 00 00 00       	mov    eax,0x1
c0002239:	01 d1                	add    ecx,edx
c000223b:	bb 08 00 00 00       	mov    ebx,0x8
c0002240:	89 c6                	mov    esi,eax
c0002242:	d1 e8                	shr    eax,1
c0002244:	83 e6 01             	and    esi,0x1
c0002247:	85 f6                	test   esi,esi
c0002249:	74 05                	je     c0002250 <make_rand+0x22>
c000224b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002250:	4b                   	dec    ebx
c0002251:	75 ed                	jne    c0002240 <make_rand+0x12>
c0002253:	42                   	inc    edx
c0002254:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002257:	39 ca                	cmp    edx,ecx
c0002259:	75 e0                	jne    c000223b <make_rand+0xd>
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	c3                   	ret    

c000225e <validate>:
c000225e:	56                   	push   esi
c000225f:	53                   	push   ebx
c0002260:	89 d6                	mov    esi,edx
c0002262:	51                   	push   ecx
c0002263:	85 c0                	test   eax,eax
c0002265:	75 09                	jne    c0002270 <validate+0x12>
c0002267:	b8 09 00 00 00       	mov    eax,0x9
c000226c:	31 c9                	xor    ecx,ecx
c000226e:	eb 2f                	jmp    c000229f <validate+0x41>
c0002270:	89 c3                	mov    ebx,eax
c0002272:	8b 00                	mov    eax,DWORD PTR [eax]
c0002274:	85 c0                	test   eax,eax
c0002276:	74 ef                	je     c0002267 <validate+0x9>
c0002278:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000227b:	74 ea                	je     c0002267 <validate+0x9>
c000227d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002281:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002285:	75 e0                	jne    c0002267 <validate+0x9>
c0002287:	83 ec 0c             	sub    esp,0xc
c000228a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000228e:	50                   	push   eax
c000228f:	e8 76 f8 ff ff       	call   c0001b0a <disk_status>
c0002294:	83 c4 10             	add    esp,0x10
c0002297:	a8 01                	test   al,0x1
c0002299:	75 cc                	jne    c0002267 <validate+0x9>
c000229b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000229d:	31 c0                	xor    eax,eax
c000229f:	89 0e                	mov    DWORD PTR [esi],ecx
c00022a1:	5a                   	pop    edx
c00022a2:	5b                   	pop    ebx
c00022a3:	5e                   	pop    esi
c00022a4:	c3                   	ret    

c00022a5 <sync_window>:
c00022a5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a9:	0f 84 85 00 00 00    	je     c0002334 <sync_window+0x8f>
c00022af:	55                   	push   ebp
c00022b0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022b3:	57                   	push   edi
c00022b4:	56                   	push   esi
c00022b5:	53                   	push   ebx
c00022b6:	89 c3                	mov    ebx,eax
c00022b8:	83 ec 28             	sub    esp,0x28
c00022bb:	6a 01                	push   0x1
c00022bd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022c0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022c3:	55                   	push   ebp
c00022c4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c8:	50                   	push   eax
c00022c9:	e8 58 f8 ff ff       	call   c0001b26 <disk_write>
c00022ce:	83 c4 20             	add    esp,0x20
c00022d1:	ba 01 00 00 00       	mov    edx,0x1
c00022d6:	85 c0                	test   eax,eax
c00022d8:	75 50                	jne    c000232a <sync_window+0x85>
c00022da:	31 ff                	xor    edi,edi
c00022dc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022e3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022e7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022ea:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022ed:	89 c6                	mov    esi,eax
c00022ef:	89 d7                	mov    edi,edx
c00022f1:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022f4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f8:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022fb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022ff:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002303:	73 23                	jae    c0002328 <sync_window+0x83>
c0002305:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002309:	75 1d                	jne    c0002328 <sync_window+0x83>
c000230b:	83 ec 0c             	sub    esp,0xc
c000230e:	6a 01                	push   0x1
c0002310:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002314:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002318:	52                   	push   edx
c0002319:	50                   	push   eax
c000231a:	55                   	push   ebp
c000231b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000231f:	50                   	push   eax
c0002320:	e8 01 f8 ff ff       	call   c0001b26 <disk_write>
c0002325:	83 c4 20             	add    esp,0x20
c0002328:	31 d2                	xor    edx,edx
c000232a:	83 c4 1c             	add    esp,0x1c
c000232d:	89 d0                	mov    eax,edx
c000232f:	5b                   	pop    ebx
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    
c0002334:	31 d2                	xor    edx,edx
c0002336:	89 d0                	mov    eax,edx
c0002338:	c3                   	ret    

c0002339 <move_window>:
c0002339:	56                   	push   esi
c000233a:	53                   	push   ebx
c000233b:	89 c3                	mov    ebx,eax
c000233d:	83 ec 14             	sub    esp,0x14
c0002340:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002343:	75 07                	jne    c000234c <move_window+0x13>
c0002345:	31 f6                	xor    esi,esi
c0002347:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000234a:	74 59                	je     c00023a5 <move_window+0x6c>
c000234c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002350:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002354:	89 d8                	mov    eax,ebx
c0002356:	e8 4a ff ff ff       	call   c00022a5 <sync_window>
c000235b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000235f:	89 c6                	mov    esi,eax
c0002361:	85 c0                	test   eax,eax
c0002363:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002367:	75 3c                	jne    c00023a5 <move_window+0x6c>
c0002369:	83 ec 0c             	sub    esp,0xc
c000236c:	8d 43 54             	lea    eax,[ebx+0x54]
c000236f:	6a 01                	push   0x1
c0002371:	51                   	push   ecx
c0002372:	52                   	push   edx
c0002373:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002377:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000237b:	50                   	push   eax
c000237c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002380:	50                   	push   eax
c0002381:	e8 8a f7 ff ff       	call   c0001b10 <disk_read>
c0002386:	83 c4 20             	add    esp,0x20
c0002389:	85 c0                	test   eax,eax
c000238b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000238f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002393:	74 0a                	je     c000239f <move_window+0x66>
c0002395:	83 ca ff             	or     edx,0xffffffff
c0002398:	be 01 00 00 00       	mov    esi,0x1
c000239d:	89 d1                	mov    ecx,edx
c000239f:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023a2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023a5:	89 f0                	mov    eax,esi
c00023a7:	83 c4 14             	add    esp,0x14
c00023aa:	5b                   	pop    ebx
c00023ab:	5e                   	pop    esi
c00023ac:	c3                   	ret    

c00023ad <check_fs>:
c00023ad:	53                   	push   ebx
c00023ae:	89 c3                	mov    ebx,eax
c00023b0:	83 ec 08             	sub    esp,0x8
c00023b3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023b7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023be:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023c5:	e8 6f ff ff ff       	call   c0002339 <move_window>
c00023ca:	ba 04 00 00 00       	mov    edx,0x4
c00023cf:	85 c0                	test   eax,eax
c00023d1:	0f 85 89 00 00 00    	jne    c0002460 <check_fs+0xb3>
c00023d7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023dd:	e8 79 f7 ff ff       	call   c0001b5b <ld_word>
c00023e2:	ba 03 00 00 00       	mov    edx,0x3
c00023e7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023eb:	75 73                	jne    c0002460 <check_fs+0xb3>
c00023ed:	ba a0 1f 02 c0       	mov    edx,0xc0021fa0
c00023f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00023f5:	b9 0b 00 00 00       	mov    ecx,0xb
c00023fa:	e8 fb f7 ff ff       	call   c0001bfa <mem_cmp>
c00023ff:	ba 01 00 00 00       	mov    edx,0x1
c0002404:	85 c0                	test   eax,eax
c0002406:	74 58                	je     c0002460 <check_fs+0xb3>
c0002408:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000240b:	8d 50 18             	lea    edx,[eax+0x18]
c000240e:	80 fa 01             	cmp    dl,0x1
c0002411:	76 09                	jbe    c000241c <check_fs+0x6f>
c0002413:	ba 02 00 00 00       	mov    edx,0x2
c0002418:	3c eb                	cmp    al,0xeb
c000241a:	75 44                	jne    c0002460 <check_fs+0xb3>
c000241c:	ba 04 49 02 c0       	mov    edx,0xc0024904
c0002421:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002427:	b9 03 00 00 00       	mov    ecx,0x3
c000242c:	e8 c9 f7 ff ff       	call   c0001bfa <mem_cmp>
c0002431:	31 d2                	xor    edx,edx
c0002433:	85 c0                	test   eax,eax
c0002435:	74 29                	je     c0002460 <check_fs+0xb3>
c0002437:	ba ac 1f 02 c0       	mov    edx,0xc0021fac
c000243c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002442:	b9 05 00 00 00       	mov    ecx,0x5
c0002447:	e8 ae f7 ff ff       	call   c0001bfa <mem_cmp>
c000244c:	31 d2                	xor    edx,edx
c000244e:	85 c0                	test   eax,eax
c0002450:	74 0e                	je     c0002460 <check_fs+0xb3>
c0002452:	31 d2                	xor    edx,edx
c0002454:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000245b:	0f 95 c2             	setne  dl
c000245e:	01 d2                	add    edx,edx
c0002460:	89 d0                	mov    eax,edx
c0002462:	83 c4 08             	add    esp,0x8
c0002465:	5b                   	pop    ebx
c0002466:	c3                   	ret    

c0002467 <find_volume>:
c0002467:	55                   	push   ebp
c0002468:	31 c9                	xor    ecx,ecx
c000246a:	57                   	push   edi
c000246b:	56                   	push   esi
c000246c:	89 d6                	mov    esi,edx
c000246e:	53                   	push   ebx
c000246f:	31 d2                	xor    edx,edx
c0002471:	83 ec 3c             	sub    esp,0x3c
c0002474:	89 c3                	mov    ebx,eax
c0002476:	e8 32 ff ff ff       	call   c00023ad <check_fs>
c000247b:	83 f8 02             	cmp    eax,0x2
c000247e:	74 0e                	je     c000248e <find_volume+0x27>
c0002480:	0f 87 5d 01 00 00    	ja     c00025e3 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 84 55 01 00 00    	je     c00025e3 <find_volume+0x17c>
c000248e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002495:	0f 85 dd 00 00 00    	jne    c0002578 <find_volume+0x111>
c000249b:	31 c9                	xor    ecx,ecx
c000249d:	ba 01 00 00 00       	mov    edx,0x1
c00024a2:	89 d8                	mov    eax,ebx
c00024a4:	e8 90 fe ff ff       	call   c0002339 <move_window>
c00024a9:	85 c0                	test   eax,eax
c00024ab:	74 0a                	je     c00024b7 <find_volume+0x50>
c00024ad:	b8 04 00 00 00       	mov    eax,0x4
c00024b2:	e9 2c 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024b7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ba:	89 e8                	mov    eax,ebp
c00024bc:	e8 f6 fc ff ff       	call   c00021b7 <test_gpt_header>
c00024c1:	85 c0                	test   eax,eax
c00024c3:	75 0a                	jne    c00024cf <find_volume+0x68>
c00024c5:	b8 03 00 00 00       	mov    eax,0x3
c00024ca:	e9 14 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024cf:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024d5:	e8 8e f6 ff ff       	call   c0001b68 <ld_dword>
c00024da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024de:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024e4:	e8 97 f6 ff ff       	call   c0001b80 <ld_qword>
c00024e9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002501:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002505:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002509:	74 ba                	je     c00024c5 <find_volume+0x5e>
c000250b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000250f:	31 c9                	xor    ecx,ecx
c0002511:	c1 e7 07             	shl    edi,0x7
c0002514:	89 d8                	mov    eax,ebx
c0002516:	89 fa                	mov    edx,edi
c0002518:	c1 ea 09             	shr    edx,0x9
c000251b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000251f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002523:	e8 11 fe ff ff       	call   c0002339 <move_window>
c0002528:	85 c0                	test   eax,eax
c000252a:	75 81                	jne    c00024ad <find_volume+0x46>
c000252c:	81 e7 80 01 00 00    	and    edi,0x180
c0002532:	b9 10 00 00 00       	mov    ecx,0x10
c0002537:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000253b:	ba 90 1f 02 c0       	mov    edx,0xc0021f90
c0002540:	e8 b5 f6 ff ff       	call   c0001bfa <mem_cmp>
c0002545:	85 c0                	test   eax,eax
c0002547:	75 29                	jne    c0002572 <find_volume+0x10b>
c0002549:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000254d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002551:	e8 2a f6 ff ff       	call   c0001b80 <ld_qword>
c0002556:	89 d1                	mov    ecx,edx
c0002558:	89 c2                	mov    edx,eax
c000255a:	89 d8                	mov    eax,ebx
c000255c:	e8 4c fe ff ff       	call   c00023ad <check_fs>
c0002561:	85 f6                	test   esi,esi
c0002563:	75 07                	jne    c000256c <find_volume+0x105>
c0002565:	83 f8 01             	cmp    eax,0x1
c0002568:	77 08                	ja     c0002572 <find_volume+0x10b>
c000256a:	eb 77                	jmp    c00025e3 <find_volume+0x17c>
c000256c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002570:	74 71                	je     c00025e3 <find_volume+0x17c>
c0002572:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002576:	eb 89                	jmp    c0002501 <find_volume+0x9a>
c0002578:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000257c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002582:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000258c:	89 cd                	mov    ebp,ecx
c000258e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002592:	89 f8                	mov    eax,edi
c0002594:	83 c7 10             	add    edi,0x10
c0002597:	e8 cc f5 ff ff       	call   c0001b68 <ld_dword>
c000259c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025a0:	89 01                	mov    DWORD PTR [ecx],eax
c00025a2:	83 c1 04             	add    ecx,0x4
c00025a5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a9:	75 e3                	jne    c000258e <find_volume+0x127>
c00025ab:	31 ff                	xor    edi,edi
c00025ad:	85 f6                	test   esi,esi
c00025af:	74 03                	je     c00025b4 <find_volume+0x14d>
c00025b1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025b4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b8:	85 d2                	test   edx,edx
c00025ba:	74 14                	je     c00025d0 <find_volume+0x169>
c00025bc:	31 c9                	xor    ecx,ecx
c00025be:	89 d8                	mov    eax,ebx
c00025c0:	e8 e8 fd ff ff       	call   c00023ad <check_fs>
c00025c5:	83 f8 01             	cmp    eax,0x1
c00025c8:	76 19                	jbe    c00025e3 <find_volume+0x17c>
c00025ca:	85 f6                	test   esi,esi
c00025cc:	74 0f                	je     c00025dd <find_volume+0x176>
c00025ce:	eb 13                	jmp    c00025e3 <find_volume+0x17c>
c00025d0:	85 f6                	test   esi,esi
c00025d2:	0f 85 ed fe ff ff    	jne    c00024c5 <find_volume+0x5e>
c00025d8:	b8 03 00 00 00       	mov    eax,0x3
c00025dd:	47                   	inc    edi
c00025de:	83 ff 03             	cmp    edi,0x3
c00025e1:	76 d1                	jbe    c00025b4 <find_volume+0x14d>
c00025e3:	83 c4 3c             	add    esp,0x3c
c00025e6:	5b                   	pop    ebx
c00025e7:	5e                   	pop    esi
c00025e8:	5f                   	pop    edi
c00025e9:	5d                   	pop    ebp
c00025ea:	c3                   	ret    

c00025eb <mount_volume>:
c00025eb:	55                   	push   ebp
c00025ec:	57                   	push   edi
c00025ed:	89 cf                	mov    edi,ecx
c00025ef:	56                   	push   esi
c00025f0:	53                   	push   ebx
c00025f1:	bb 0b 00 00 00       	mov    ebx,0xb
c00025f6:	83 ec 3c             	sub    esp,0x3c
c00025f9:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002603:	e8 35 fb ff ff       	call   c000213d <get_ldnumber>
c0002608:	85 c0                	test   eax,eax
c000260a:	0f 88 3a 05 00 00    	js     c0002b4a <mount_volume+0x55f>
c0002610:	8b 2c 85 00 61 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd9f00]
c0002617:	89 c6                	mov    esi,eax
c0002619:	bb 0c 00 00 00       	mov    ebx,0xc
c000261e:	85 ed                	test   ebp,ebp
c0002620:	0f 84 24 05 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000262a:	83 e7 fe             	and    edi,0xfffffffe
c000262d:	89 2a                	mov    DWORD PTR [edx],ebp
c000262f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002633:	74 32                	je     c0002667 <mount_volume+0x7c>
c0002635:	83 ec 0c             	sub    esp,0xc
c0002638:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000263c:	50                   	push   eax
c000263d:	e8 c8 f4 ff ff       	call   c0001b0a <disk_status>
c0002642:	83 c4 10             	add    esp,0x10
c0002645:	a8 01                	test   al,0x1
c0002647:	75 1e                	jne    c0002667 <mount_volume+0x7c>
c0002649:	31 db                	xor    ebx,ebx
c000264b:	89 f9                	mov    ecx,edi
c000264d:	84 c9                	test   cl,cl
c000264f:	0f 84 f5 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002655:	a8 04                	test   al,0x4
c0002657:	0f 84 ed 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c000265d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002662:	e9 e3 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c0002667:	83 ec 0c             	sub    esp,0xc
c000266a:	89 f0                	mov    eax,esi
c000266c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002670:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002673:	0f b6 f0             	movzx  esi,al
c0002676:	bb 03 00 00 00       	mov    ebx,0x3
c000267b:	56                   	push   esi
c000267c:	e8 8c f4 ff ff       	call   c0001b0d <disk_initialize>
c0002681:	83 c4 10             	add    esp,0x10
c0002684:	a8 01                	test   al,0x1
c0002686:	0f 85 be 04 00 00    	jne    c0002b4a <mount_volume+0x55f>
c000268c:	89 f9                	mov    ecx,edi
c000268e:	84 c9                	test   cl,cl
c0002690:	74 04                	je     c0002696 <mount_volume+0xab>
c0002692:	a8 04                	test   al,0x4
c0002694:	75 c7                	jne    c000265d <mount_volume+0x72>
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 e8                	mov    eax,ebp
c000269a:	e8 c8 fd ff ff       	call   c0002467 <find_volume>
c000269f:	83 f8 04             	cmp    eax,0x4
c00026a2:	75 0a                	jne    c00026ae <mount_volume+0xc3>
c00026a4:	bb 01 00 00 00       	mov    ebx,0x1
c00026a9:	e9 9c 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026ae:	83 f8 01             	cmp    eax,0x1
c00026b1:	76 0a                	jbe    c00026bd <mount_volume+0xd2>
c00026b3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b8:	e9 8d 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026bd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026c0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026cb:	75 17                	jne    c00026e4 <mount_volume+0xf9>
c00026cd:	b8 0b 00 00 00       	mov    eax,0xb
c00026d2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026d7:	75 da                	jne    c00026b3 <mount_volume+0xc8>
c00026d9:	40                   	inc    eax
c00026da:	83 f8 40             	cmp    eax,0x40
c00026dd:	75 f3                	jne    c00026d2 <mount_volume+0xe7>
c00026df:	e9 5a 02 00 00       	jmp    c000293e <mount_volume+0x353>
c00026e4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026e7:	e8 6f f4 ff ff       	call   c0001b5b <ld_word>
c00026ec:	66 3d 00 02          	cmp    ax,0x200
c00026f0:	75 c1                	jne    c00026b3 <mount_volume+0xc8>
c00026f2:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026f5:	e8 61 f4 ff ff       	call   c0001b5b <ld_word>
c00026fa:	0f b7 c0             	movzx  eax,ax
c00026fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002701:	85 c0                	test   eax,eax
c0002703:	75 0c                	jne    c0002711 <mount_volume+0x126>
c0002705:	8d 45 78             	lea    eax,[ebp+0x78]
c0002708:	e8 5b f4 ff ff       	call   c0001b68 <ld_dword>
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002715:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002718:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000271b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000271f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002722:	48                   	dec    eax
c0002723:	3c 01                	cmp    al,0x1
c0002725:	77 8c                	ja     c00026b3 <mount_volume+0xc8>
c0002727:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000272b:	89 c3                	mov    ebx,eax
c000272d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002731:	66 85 c0             	test   ax,ax
c0002734:	0f 84 79 ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c000273a:	8d 40 ff             	lea    eax,[eax-0x1]
c000273d:	85 d8                	test   eax,ebx
c000273f:	0f 85 6e ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002745:	8d 45 65             	lea    eax,[ebp+0x65]
c0002748:	e8 0e f4 ff ff       	call   c0001b5b <ld_word>
c000274d:	89 c7                	mov    edi,eax
c000274f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002753:	a8 0f                	test   al,0xf
c0002755:	0f 85 58 ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c000275b:	8d 45 67             	lea    eax,[ebp+0x67]
c000275e:	e8 f8 f3 ff ff       	call   c0001b5b <ld_word>
c0002763:	0f b7 f0             	movzx  esi,ax
c0002766:	85 f6                	test   esi,esi
c0002768:	75 0a                	jne    c0002774 <mount_volume+0x189>
c000276a:	8d 45 74             	lea    eax,[ebp+0x74]
c000276d:	e8 f6 f3 ff ff       	call   c0001b68 <ld_dword>
c0002772:	89 c6                	mov    esi,eax
c0002774:	8d 45 62             	lea    eax,[ebp+0x62]
c0002777:	e8 df f3 ff ff       	call   c0001b5b <ld_word>
c000277c:	66 85 c0             	test   ax,ax
c000277f:	0f 84 2e ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002785:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000278a:	0f b7 c8             	movzx  ecx,ax
c000278d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002796:	89 fa                	mov    edx,edi
c0002798:	66 c1 ea 04          	shr    dx,0x4
c000279c:	0f b7 d2             	movzx  edx,dx
c000279f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027a3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027aa:	39 c6                	cmp    esi,eax
c00027ac:	0f 82 01 ff ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027b2:	29 c6                	sub    esi,eax
c00027b4:	31 d2                	xor    edx,edx
c00027b6:	89 f0                	mov    eax,esi
c00027b8:	f7 f3                	div    ebx
c00027ba:	39 de                	cmp    esi,ebx
c00027bc:	0f 82 f1 fe ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027c2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027c7:	0f 87 e6 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00027cd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027d2:	0f 86 63 03 00 00    	jbe    c0002b3b <mount_volume+0x550>
c00027d8:	bb 03 00 00 00       	mov    ebx,0x3
c00027dd:	8d 70 02             	lea    esi,[eax+0x2]
c00027e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027eb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027ee:	31 d2                	xor    edx,edx
c00027f0:	89 c8                	mov    eax,ecx
c00027f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002801:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002805:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002808:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000280b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000280f:	31 d2                	xor    edx,edx
c0002811:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002815:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002819:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000281f:	83 fb 03             	cmp    ebx,0x3
c0002822:	75 2b                	jne    c000284f <mount_volume+0x264>
c0002824:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002827:	e8 2f f3 ff ff       	call   c0001b5b <ld_word>
c000282c:	66 09 c7             	or     di,ax
c000282f:	0f 85 7e fe ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002835:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000283b:	c1 e6 02             	shl    esi,0x2
c000283e:	e8 25 f3 ff ff       	call   c0001b68 <ld_dword>
c0002843:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000284a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000284d:	eb 30                	jmp    c000287f <mount_volume+0x294>
c000284f:	66 85 ff             	test   di,di
c0002852:	0f 84 5b fe ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002858:	31 d2                	xor    edx,edx
c000285a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000285e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002862:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002866:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002869:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000286c:	83 fb 02             	cmp    ebx,0x2
c000286f:	75 04                	jne    c0002875 <mount_volume+0x28a>
c0002871:	01 f6                	add    esi,esi
c0002873:	eb 0a                	jmp    c000287f <mount_volume+0x294>
c0002875:	8d 04 76             	lea    eax,[esi+esi*2]
c0002878:	83 e6 01             	and    esi,0x1
c000287b:	d1 e8                	shr    eax,1
c000287d:	01 c6                	add    esi,eax
c000287f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002885:	c1 ee 09             	shr    esi,0x9
c0002888:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000288c:	0f 87 21 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c0002892:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002899:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028a0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028a4:	83 fb 03             	cmp    ebx,0x3
c00028a7:	75 7a                	jne    c0002923 <mount_volume+0x338>
c00028a9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028af:	e8 a7 f2 ff ff       	call   c0001b5b <ld_word>
c00028b4:	66 48                	dec    ax
c00028b6:	75 6b                	jne    c0002923 <mount_volume+0x338>
c00028b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028c0:	83 c2 01             	add    edx,0x1
c00028c3:	89 e8                	mov    eax,ebp
c00028c5:	83 d1 00             	adc    ecx,0x0
c00028c8:	e8 6c fa ff ff       	call   c0002339 <move_window>
c00028cd:	85 c0                	test   eax,eax
c00028cf:	75 52                	jne    c0002923 <mount_volume+0x338>
c00028d1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028d5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028db:	e8 7b f2 ff ff       	call   c0001b5b <ld_word>
c00028e0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028e4:	75 3d                	jne    c0002923 <mount_volume+0x338>
c00028e6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e9:	e8 7a f2 ff ff       	call   c0001b68 <ld_dword>
c00028ee:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028f3:	75 2e                	jne    c0002923 <mount_volume+0x338>
c00028f5:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028fb:	e8 68 f2 ff ff       	call   c0001b68 <ld_dword>
c0002900:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002905:	75 1c                	jne    c0002923 <mount_volume+0x338>
c0002907:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000290d:	e8 56 f2 ff ff       	call   c0001b68 <ld_dword>
c0002912:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002915:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000291b:	e8 48 f2 ff ff       	call   c0001b68 <ld_dword>
c0002920:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002923:	66 a1 e0 60 02 c0    	mov    ax,ds:0xc00260e0
c0002929:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000292c:	40                   	inc    eax
c000292d:	31 db                	xor    ebx,ebx
c000292f:	66 a3 e0 60 02 c0    	mov    ds:0xc00260e0,ax
c0002935:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002939:	e9 0c 02 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c000293e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002944:	e8 12 f2 ff ff       	call   c0001b5b <ld_word>
c0002949:	66 3d 00 01          	cmp    ax,0x100
c000294d:	0f 85 60 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002953:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000295a:	0f 85 53 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002960:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002966:	e8 15 f2 ff ff       	call   c0001b80 <ld_qword>
c000296b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000296f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002973:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002979:	e8 ea f1 ff ff       	call   c0001b68 <ld_dword>
c000297e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002981:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002987:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000298a:	fe c8                	dec    al
c000298c:	0f 85 21 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002992:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002999:	bb 01 00 00 00       	mov    ebx,0x1
c000299e:	d3 e3                	shl    ebx,cl
c00029a0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029a4:	66 85 db             	test   bx,bx
c00029a7:	0f 84 06 fd ff ff    	je     c00026b3 <mount_volume+0xc8>
c00029ad:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029b3:	e8 b0 f1 ff ff       	call   c0001b68 <ld_dword>
c00029b8:	89 c6                	mov    esi,eax
c00029ba:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029bf:	0f 87 ee fc ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00029c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c9:	8d 40 02             	lea    eax,[eax+0x2]
c00029cc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029cf:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029d6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029df:	e8 84 f1 ff ff       	call   c0001b68 <ld_dword>
c00029e4:	31 d2                	xor    edx,edx
c00029e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029ea:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029f6:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f9:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029fc:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a02:	e8 61 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a07:	31 d2                	xor    edx,edx
c0002a09:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a11:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a15:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a18:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a1b:	0f b7 c3             	movzx  eax,bx
c0002a1e:	31 d2                	xor    edx,edx
c0002a20:	0f af f0             	imul   esi,eax
c0002a23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a27:	89 f0                	mov    eax,esi
c0002a29:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a2d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a31:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a35:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a39:	39 c1                	cmp    ecx,eax
c0002a3b:	89 df                	mov    edi,ebx
c0002a3d:	19 d7                	sbb    edi,edx
c0002a3f:	0f 82 6e fc ff ff    	jb     c00026b3 <mount_volume+0xc8>
c0002a45:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a4b:	31 db                	xor    ebx,ebx
c0002a4d:	e8 16 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a52:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a59:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a64:	85 db                	test   ebx,ebx
c0002a66:	75 39                	jne    c0002aa1 <mount_volume+0x4b6>
c0002a68:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a6c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a70:	0f 86 3d fc ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002a76:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a79:	31 ff                	xor    edi,edi
c0002a7b:	89 e8                	mov    eax,ebp
c0002a7d:	e8 72 f3 ff ff       	call   c0001df4 <clst2sect>
c0002a82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a86:	01 c6                	add    esi,eax
c0002a88:	89 e8                	mov    eax,ebp
c0002a8a:	11 d7                	adc    edi,edx
c0002a8c:	89 f2                	mov    edx,esi
c0002a8e:	89 f9                	mov    ecx,edi
c0002a90:	e8 a4 f8 ff ff       	call   c0002339 <move_window>
c0002a95:	85 c0                	test   eax,eax
c0002a97:	0f 85 07 fc ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002a9d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002aa1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002aa6:	74 0b                	je     c0002ab3 <mount_volume+0x4c8>
c0002aa8:	83 c3 20             	add    ebx,0x20
c0002aab:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ab1:	eb b1                	jmp    c0002a64 <mount_volume+0x479>
c0002ab3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ab6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aba:	e8 a9 f0 ff ff       	call   c0001b68 <ld_dword>
c0002abf:	89 c3                	mov    ebx,eax
c0002ac1:	83 f8 01             	cmp    eax,0x1
c0002ac4:	0f 86 e9 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002aca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002acd:	0f 86 e0 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002ad3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ad6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ada:	0f af c2             	imul   eax,edx
c0002add:	31 d2                	xor    edx,edx
c0002adf:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ae2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002ae5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002aeb:	31 c9                	xor    ecx,ecx
c0002aed:	89 da                	mov    edx,ebx
c0002aef:	89 e8                	mov    eax,ebp
c0002af1:	c1 ea 07             	shr    edx,0x7
c0002af4:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002af7:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002afa:	e8 3a f8 ff ff       	call   c0002339 <move_window>
c0002aff:	85 c0                	test   eax,eax
c0002b01:	0f 85 9d fb ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002b07:	89 d8                	mov    eax,ebx
c0002b09:	83 e0 7f             	and    eax,0x7f
c0002b0c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b0f:	e8 54 f0 ff ff       	call   c0001b68 <ld_dword>
c0002b14:	83 f8 ff             	cmp    eax,0xffffffff
c0002b17:	74 0a                	je     c0002b23 <mount_volume+0x538>
c0002b19:	43                   	inc    ebx
c0002b1a:	39 d8                	cmp    eax,ebx
c0002b1c:	74 cd                	je     c0002aeb <mount_volume+0x500>
c0002b1e:	e9 90 fb ff ff       	jmp    c00026b3 <mount_volume+0xc8>
c0002b23:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b2a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b31:	bb 04 00 00 00       	mov    ebx,0x4
c0002b36:	e9 e8 fd ff ff       	jmp    c0002923 <mount_volume+0x338>
c0002b3b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b40:	19 db                	sbb    ebx,ebx
c0002b42:	83 c3 02             	add    ebx,0x2
c0002b45:	e9 93 fc ff ff       	jmp    c00027dd <mount_volume+0x1f2>
c0002b4a:	83 c4 3c             	add    esp,0x3c
c0002b4d:	89 d8                	mov    eax,ebx
c0002b4f:	5b                   	pop    ebx
c0002b50:	5e                   	pop    esi
c0002b51:	5f                   	pop    edi
c0002b52:	5d                   	pop    ebp
c0002b53:	c3                   	ret    

c0002b54 <find_bitmap>:
c0002b54:	55                   	push   ebp
c0002b55:	57                   	push   edi
c0002b56:	89 c7                	mov    edi,eax
c0002b58:	56                   	push   esi
c0002b59:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b5c:	53                   	push   ebx
c0002b5d:	83 ec 1c             	sub    esp,0x1c
c0002b60:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b63:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b67:	83 e8 02             	sub    eax,0x2
c0002b6a:	39 f0                	cmp    eax,esi
c0002b6c:	77 02                	ja     c0002b70 <find_bitmap+0x1c>
c0002b6e:	31 f6                	xor    esi,esi
c0002b70:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b74:	89 f3                	mov    ebx,esi
c0002b76:	31 ed                	xor    ebp,ebp
c0002b78:	31 c9                	xor    ecx,ecx
c0002b7a:	89 da                	mov    edx,ebx
c0002b7c:	89 f8                	mov    eax,edi
c0002b7e:	c1 ea 0c             	shr    edx,0xc
c0002b81:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b84:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b87:	e8 ad f7 ff ff       	call   c0002339 <move_window>
c0002b8c:	85 c0                	test   eax,eax
c0002b8e:	75 68                	jne    c0002bf8 <find_bitmap+0xa4>
c0002b90:	89 da                	mov    edx,ebx
c0002b92:	89 d9                	mov    ecx,ebx
c0002b94:	c1 ea 03             	shr    edx,0x3
c0002b97:	83 e1 07             	and    ecx,0x7
c0002b9a:	b8 01 00 00 00       	mov    eax,0x1
c0002b9f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ba5:	d3 e0                	shl    eax,cl
c0002ba7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002baa:	83 e9 02             	sub    ecx,0x2
c0002bad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bb1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bb5:	43                   	inc    ebx
c0002bb6:	21 c1                	and    ecx,eax
c0002bb8:	d1 e0                	shl    eax,1
c0002bba:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bbe:	77 09                	ja     c0002bc9 <find_bitmap+0x75>
c0002bc0:	31 db                	xor    ebx,ebx
c0002bc2:	ba 00 02 00 00       	mov    edx,0x200
c0002bc7:	31 c0                	xor    eax,eax
c0002bc9:	84 c9                	test   cl,cl
c0002bcb:	75 10                	jne    c0002bdd <find_bitmap+0x89>
c0002bcd:	45                   	inc    ebp
c0002bce:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bd2:	75 0f                	jne    c0002be3 <find_bitmap+0x8f>
c0002bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd8:	83 c0 02             	add    eax,0x2
c0002bdb:	eb 22                	jmp    c0002bff <find_bitmap+0xab>
c0002bdd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002be1:	31 ed                	xor    ebp,ebp
c0002be3:	39 de                	cmp    esi,ebx
c0002be5:	74 16                	je     c0002bfd <find_bitmap+0xa9>
c0002be7:	84 c0                	test   al,al
c0002be9:	75 c6                	jne    c0002bb1 <find_bitmap+0x5d>
c0002beb:	42                   	inc    edx
c0002bec:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bf2:	77 84                	ja     c0002b78 <find_bitmap+0x24>
c0002bf4:	b0 01                	mov    al,0x1
c0002bf6:	eb b9                	jmp    c0002bb1 <find_bitmap+0x5d>
c0002bf8:	83 c8 ff             	or     eax,0xffffffff
c0002bfb:	eb 02                	jmp    c0002bff <find_bitmap+0xab>
c0002bfd:	31 c0                	xor    eax,eax
c0002bff:	83 c4 1c             	add    esp,0x1c
c0002c02:	5b                   	pop    ebx
c0002c03:	5e                   	pop    esi
c0002c04:	5f                   	pop    edi
c0002c05:	5d                   	pop    ebp
c0002c06:	c3                   	ret    

c0002c07 <change_bitmap>:
c0002c07:	55                   	push   ebp
c0002c08:	89 cd                	mov    ebp,ecx
c0002c0a:	57                   	push   edi
c0002c0b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c0e:	56                   	push   esi
c0002c0f:	89 c7                	mov    edi,eax
c0002c11:	53                   	push   ebx
c0002c12:	89 c8                	mov    eax,ecx
c0002c14:	83 ec 1c             	sub    esp,0x1c
c0002c17:	31 d2                	xor    edx,edx
c0002c19:	89 ce                	mov    esi,ecx
c0002c1b:	c1 e8 0c             	shr    eax,0xc
c0002c1e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c23:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c26:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c29:	c1 ee 03             	shr    esi,0x3
c0002c2c:	83 e1 07             	and    ecx,0x7
c0002c2f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c35:	d3 e3                	shl    ebx,cl
c0002c37:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c3b:	89 c1                	mov    ecx,eax
c0002c3d:	89 d3                	mov    ebx,edx
c0002c3f:	83 c1 01             	add    ecx,0x1
c0002c42:	83 d3 00             	adc    ebx,0x0
c0002c45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c49:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c4d:	89 d1                	mov    ecx,edx
c0002c4f:	89 c2                	mov    edx,eax
c0002c51:	89 f8                	mov    eax,edi
c0002c53:	e8 e1 f6 ff ff       	call   c0002339 <move_window>
c0002c58:	89 c1                	mov    ecx,eax
c0002c5a:	85 c0                	test   eax,eax
c0002c5c:	75 48                	jne    c0002ca6 <change_bitmap+0x9f>
c0002c5e:	31 d2                	xor    edx,edx
c0002c60:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c64:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c68:	0f 95 c2             	setne  dl
c0002c6b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c6f:	74 3c                	je     c0002cad <change_bitmap+0xa6>
c0002c71:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c75:	4d                   	dec    ebp
c0002c76:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c7e:	74 32                	je     c0002cb2 <change_bitmap+0xab>
c0002c80:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c84:	75 d8                	jne    c0002c5e <change_bitmap+0x57>
c0002c86:	8d 46 01             	lea    eax,[esi+0x1]
c0002c89:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c8e:	89 c3                	mov    ebx,eax
c0002c90:	31 f6                	xor    esi,esi
c0002c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c9a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ca0:	74 99                	je     c0002c3b <change_bitmap+0x34>
c0002ca2:	89 de                	mov    esi,ebx
c0002ca4:	eb b8                	jmp    c0002c5e <change_bitmap+0x57>
c0002ca6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cab:	eb 05                	jmp    c0002cb2 <change_bitmap+0xab>
c0002cad:	b9 02 00 00 00       	mov    ecx,0x2
c0002cb2:	83 c4 1c             	add    esp,0x1c
c0002cb5:	89 c8                	mov    eax,ecx
c0002cb7:	5b                   	pop    ebx
c0002cb8:	5e                   	pop    esi
c0002cb9:	5f                   	pop    edi
c0002cba:	5d                   	pop    ebp
c0002cbb:	c3                   	ret    

c0002cbc <put_fat>:
c0002cbc:	83 fa 01             	cmp    edx,0x1
c0002cbf:	0f 86 7b 01 00 00    	jbe    c0002e40 <put_fat+0x184>
c0002cc5:	55                   	push   ebp
c0002cc6:	57                   	push   edi
c0002cc7:	89 cf                	mov    edi,ecx
c0002cc9:	56                   	push   esi
c0002cca:	b9 02 00 00 00       	mov    ecx,0x2
c0002ccf:	53                   	push   ebx
c0002cd0:	89 c6                	mov    esi,eax
c0002cd2:	83 ec 1c             	sub    esp,0x1c
c0002cd5:	89 d3                	mov    ebx,edx
c0002cd7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cda:	0f 86 68 01 00 00    	jbe    c0002e48 <put_fat+0x18c>
c0002ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0002ce2:	3c 02                	cmp    al,0x2
c0002ce4:	0f 84 c7 00 00 00    	je     c0002db1 <put_fat+0xf5>
c0002cea:	77 09                	ja     c0002cf5 <put_fat+0x39>
c0002cec:	fe c8                	dec    al
c0002cee:	74 17                	je     c0002d07 <put_fat+0x4b>
c0002cf0:	e9 53 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002cf5:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfa:	3c 04                	cmp    al,0x4
c0002cfc:	0f 86 e1 00 00 00    	jbe    c0002de3 <put_fat+0x127>
c0002d02:	e9 41 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002d07:	89 d5                	mov    ebp,edx
c0002d09:	31 c9                	xor    ecx,ecx
c0002d0b:	d1 ed                	shr    ebp,1
c0002d0d:	89 f0                	mov    eax,esi
c0002d0f:	01 d5                	add    ebp,edx
c0002d11:	89 ea                	mov    edx,ebp
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d19:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d1c:	e8 18 f6 ff ff       	call   c0002339 <move_window>
c0002d21:	89 c1                	mov    ecx,eax
c0002d23:	85 c0                	test   eax,eax
c0002d25:	0f 85 1d 01 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d2b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d32:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d35:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d3f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d43:	89 f8                	mov    eax,edi
c0002d45:	83 e3 01             	and    ebx,0x1
c0002d48:	74 0d                	je     c0002d57 <put_fat+0x9b>
c0002d4a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d4d:	89 fa                	mov    edx,edi
c0002d4f:	83 e0 0f             	and    eax,0xf
c0002d52:	c1 e2 04             	shl    edx,0x4
c0002d55:	09 d0                	or     eax,edx
c0002d57:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d5e:	31 c9                	xor    ecx,ecx
c0002d60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d64:	c1 ea 09             	shr    edx,0x9
c0002d67:	89 f0                	mov    eax,esi
c0002d69:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d6c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d6f:	e8 c5 f5 ff ff       	call   c0002339 <move_window>
c0002d74:	89 c1                	mov    ecx,eax
c0002d76:	85 c0                	test   eax,eax
c0002d78:	0f 85 ca 00 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d7e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d82:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d88:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d8c:	85 db                	test   ebx,ebx
c0002d8e:	74 07                	je     c0002d97 <put_fat+0xdb>
c0002d90:	c1 ef 04             	shr    edi,0x4
c0002d93:	89 fa                	mov    edx,edi
c0002d95:	eb 0e                	jmp    c0002da5 <put_fat+0xe9>
c0002d97:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d9a:	c1 ef 08             	shr    edi,0x8
c0002d9d:	83 e2 f0             	and    edx,0xfffffff0
c0002da0:	83 e7 0f             	and    edi,0xf
c0002da3:	09 fa                	or     edx,edi
c0002da5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dac:	e9 97 00 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002db1:	31 c9                	xor    ecx,ecx
c0002db3:	c1 ea 08             	shr    edx,0x8
c0002db6:	89 f0                	mov    eax,esi
c0002db8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dbb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dbe:	e8 76 f5 ff ff       	call   c0002339 <move_window>
c0002dc3:	89 c1                	mov    ecx,eax
c0002dc5:	85 c0                	test   eax,eax
c0002dc7:	75 7f                	jne    c0002e48 <put_fat+0x18c>
c0002dc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dcd:	01 db                	add    ebx,ebx
c0002dcf:	0f b7 d7             	movzx  edx,di
c0002dd2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ddc:	e8 ec ed ff ff       	call   c0001bcd <st_word>
c0002de1:	eb 53                	jmp    c0002e36 <put_fat+0x17a>
c0002de3:	31 c9                	xor    ecx,ecx
c0002de5:	c1 ea 07             	shr    edx,0x7
c0002de8:	89 f0                	mov    eax,esi
c0002dea:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ded:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002df0:	e8 44 f5 ff ff       	call   c0002339 <move_window>
c0002df5:	89 c1                	mov    ecx,eax
c0002df7:	85 c0                	test   eax,eax
c0002df9:	75 4d                	jne    c0002e48 <put_fat+0x18c>
c0002dfb:	c1 e3 02             	shl    ebx,0x2
c0002dfe:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e04:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e07:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e0b:	74 1c                	je     c0002e29 <put_fat+0x16d>
c0002e0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e11:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e17:	89 d8                	mov    eax,ebx
c0002e19:	e8 4a ed ff ff       	call   c0001b68 <ld_dword>
c0002e1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e22:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e27:	09 c7                	or     edi,eax
c0002e29:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e2d:	89 fa                	mov    edx,edi
c0002e2f:	89 d8                	mov    eax,ebx
c0002e31:	e8 9b ed ff ff       	call   c0001bd1 <st_dword>
c0002e36:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e3e:	eb 08                	jmp    c0002e48 <put_fat+0x18c>
c0002e40:	b9 02 00 00 00       	mov    ecx,0x2
c0002e45:	89 c8                	mov    eax,ecx
c0002e47:	c3                   	ret    
c0002e48:	83 c4 1c             	add    esp,0x1c
c0002e4b:	89 c8                	mov    eax,ecx
c0002e4d:	5b                   	pop    ebx
c0002e4e:	5e                   	pop    esi
c0002e4f:	5f                   	pop    edi
c0002e50:	5d                   	pop    ebp
c0002e51:	c3                   	ret    

c0002e52 <fill_last_frag>:
c0002e52:	57                   	push   edi
c0002e53:	89 cf                	mov    edi,ecx
c0002e55:	56                   	push   esi
c0002e56:	89 d6                	mov    esi,edx
c0002e58:	53                   	push   ebx
c0002e59:	89 c3                	mov    ebx,eax
c0002e5b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e5e:	85 c0                	test   eax,eax
c0002e60:	74 21                	je     c0002e83 <fill_last_frag+0x31>
c0002e62:	89 f9                	mov    ecx,edi
c0002e64:	83 f8 01             	cmp    eax,0x1
c0002e67:	76 05                	jbe    c0002e6e <fill_last_frag+0x1c>
c0002e69:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e6c:	29 c1                	sub    ecx,eax
c0002e6e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e71:	29 c2                	sub    edx,eax
c0002e73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e75:	e8 42 fe ff ff       	call   c0002cbc <put_fat>
c0002e7a:	85 c0                	test   eax,eax
c0002e7c:	75 05                	jne    c0002e83 <fill_last_frag+0x31>
c0002e7e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e81:	eb d8                	jmp    c0002e5b <fill_last_frag+0x9>
c0002e83:	5b                   	pop    ebx
c0002e84:	5e                   	pop    esi
c0002e85:	5f                   	pop    edi
c0002e86:	c3                   	ret    

c0002e87 <fill_first_frag>:
c0002e87:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e8b:	75 2d                	jne    c0002eba <fill_first_frag+0x33>
c0002e8d:	57                   	push   edi
c0002e8e:	56                   	push   esi
c0002e8f:	53                   	push   ebx
c0002e90:	89 c3                	mov    ebx,eax
c0002e92:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e95:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e98:	01 d7                	add    edi,edx
c0002e9a:	39 fa                	cmp    edx,edi
c0002e9c:	74 14                	je     c0002eb2 <fill_first_frag+0x2b>
c0002e9e:	8d 72 01             	lea    esi,[edx+0x1]
c0002ea1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ea3:	89 f1                	mov    ecx,esi
c0002ea5:	e8 12 fe ff ff       	call   c0002cbc <put_fat>
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	85 c0                	test   eax,eax
c0002eae:	74 ea                	je     c0002e9a <fill_first_frag+0x13>
c0002eb0:	eb 0b                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eb2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eb6:	31 c0                	xor    eax,eax
c0002eb8:	eb 03                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eba:	31 c0                	xor    eax,eax
c0002ebc:	c3                   	ret    
c0002ebd:	5b                   	pop    ebx
c0002ebe:	5e                   	pop    esi
c0002ebf:	5f                   	pop    edi
c0002ec0:	c3                   	ret    

c0002ec1 <get_fat>:
c0002ec1:	83 fa 01             	cmp    edx,0x1
c0002ec4:	0f 86 db 01 00 00    	jbe    c00030a5 <get_fat+0x1e4>
c0002eca:	55                   	push   ebp
c0002ecb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ed0:	57                   	push   edi
c0002ed1:	56                   	push   esi
c0002ed2:	53                   	push   ebx
c0002ed3:	83 ec 1c             	sub    esp,0x1c
c0002ed6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002edb:	0f 86 cc 01 00 00    	jbe    c00030ad <get_fat+0x1ec>
c0002ee1:	89 c3                	mov    ebx,eax
c0002ee3:	89 d6                	mov    esi,edx
c0002ee5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ee7:	3c 02                	cmp    al,0x2
c0002ee9:	0f 84 99 00 00 00    	je     c0002f88 <get_fat+0xc7>
c0002eef:	77 09                	ja     c0002efa <get_fat+0x39>
c0002ef1:	fe c8                	dec    al
c0002ef3:	74 1a                	je     c0002f0f <get_fat+0x4e>
c0002ef5:	e9 b3 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002efa:	3c 03                	cmp    al,0x3
c0002efc:	0f 84 b5 00 00 00    	je     c0002fb7 <get_fat+0xf6>
c0002f02:	3c 04                	cmp    al,0x4
c0002f04:	0f 84 e3 00 00 00    	je     c0002fed <get_fat+0x12c>
c0002f0a:	e9 9e 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f0f:	89 d3                	mov    ebx,edx
c0002f11:	31 c9                	xor    ecx,ecx
c0002f13:	d1 eb                	shr    ebx,1
c0002f15:	89 f8                	mov    eax,edi
c0002f17:	01 d3                	add    ebx,edx
c0002f19:	89 da                	mov    edx,ebx
c0002f1b:	c1 ea 09             	shr    edx,0x9
c0002f1e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f21:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f24:	e8 10 f4 ff ff       	call   c0002339 <move_window>
c0002f29:	85 c0                	test   eax,eax
c0002f2b:	74 08                	je     c0002f35 <get_fat+0x74>
c0002f2d:	83 c9 ff             	or     ecx,0xffffffff
c0002f30:	e9 78 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f35:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f38:	31 c9                	xor    ecx,ecx
c0002f3a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f40:	89 ea                	mov    edx,ebp
c0002f42:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f46:	c1 ea 09             	shr    edx,0x9
c0002f49:	89 f8                	mov    eax,edi
c0002f4b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f4e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f51:	e8 e3 f3 ff ff       	call   c0002339 <move_window>
c0002f56:	85 c0                	test   eax,eax
c0002f58:	75 d3                	jne    c0002f2d <get_fat+0x6c>
c0002f5a:	0f b6 c3             	movzx  eax,bl
c0002f5d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f63:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f68:	c1 e3 08             	shl    ebx,0x8
c0002f6b:	09 c3                	or     ebx,eax
c0002f6d:	89 d9                	mov    ecx,ebx
c0002f6f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f75:	83 e6 01             	and    esi,0x1
c0002f78:	0f 84 2f 01 00 00    	je     c00030ad <get_fat+0x1ec>
c0002f7e:	89 d9                	mov    ecx,ebx
c0002f80:	c1 e9 04             	shr    ecx,0x4
c0002f83:	e9 25 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f88:	31 c9                	xor    ecx,ecx
c0002f8a:	c1 ea 08             	shr    edx,0x8
c0002f8d:	89 f8                	mov    eax,edi
c0002f8f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f92:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f95:	e8 9f f3 ff ff       	call   c0002339 <move_window>
c0002f9a:	85 c0                	test   eax,eax
c0002f9c:	75 8f                	jne    c0002f2d <get_fat+0x6c>
c0002f9e:	01 f6                	add    esi,esi
c0002fa0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fa6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002faa:	e8 ac eb ff ff       	call   c0001b5b <ld_word>
c0002faf:	0f b7 c8             	movzx  ecx,ax
c0002fb2:	e9 f6 00 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002fb7:	31 c9                	xor    ecx,ecx
c0002fb9:	c1 ea 07             	shr    edx,0x7
c0002fbc:	89 f8                	mov    eax,edi
c0002fbe:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fc1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fc4:	e8 70 f3 ff ff       	call   c0002339 <move_window>
c0002fc9:	85 c0                	test   eax,eax
c0002fcb:	0f 85 5c ff ff ff    	jne    c0002f2d <get_fat+0x6c>
c0002fd1:	c1 e6 02             	shl    esi,0x2
c0002fd4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fda:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fde:	e8 85 eb ff ff       	call   c0001b68 <ld_dword>
c0002fe3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe8:	e9 b4 00 00 00       	jmp    c00030a1 <get_fat+0x1e0>
c0002fed:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ff0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff3:	89 d1                	mov    ecx,edx
c0002ff5:	09 c1                	or     ecx,eax
c0002ff7:	74 06                	je     c0002fff <get_fat+0x13e>
c0002ff9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ffd:	75 0f                	jne    c000300e <get_fat+0x14d>
c0002fff:	b9 01 00 00 00       	mov    ecx,0x1
c0003004:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003008:	0f 85 9f 00 00 00    	jne    c00030ad <get_fat+0x1ec>
c000300e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003012:	89 f5                	mov    ebp,esi
c0003014:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003019:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000301c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000301f:	80 f9 02             	cmp    cl,0x2
c0003022:	75 35                	jne    c0003059 <get_fat+0x198>
c0003024:	83 c0 ff             	add    eax,0xffffffff
c0003027:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000302c:	83 d2 ff             	adc    edx,0xffffffff
c000302f:	31 db                	xor    ebx,ebx
c0003031:	0f ac d0 09          	shrd   eax,edx,0x9
c0003035:	53                   	push   ebx
c0003036:	c1 ea 09             	shr    edx,0x9
c0003039:	51                   	push   ecx
c000303a:	52                   	push   edx
c000303b:	50                   	push   eax
c000303c:	e8 63 de 01 00       	call   c0020ea4 <__udivdi3>
c0003041:	83 c4 10             	add    esp,0x10
c0003044:	b9 01 00 00 00       	mov    ecx,0x1
c0003049:	39 c5                	cmp    ebp,eax
c000304b:	77 60                	ja     c00030ad <get_fat+0x1ec>
c000304d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003052:	74 59                	je     c00030ad <get_fat+0x1ec>
c0003054:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003057:	eb 54                	jmp    c00030ad <get_fat+0x1ec>
c0003059:	80 f9 03             	cmp    cl,0x3
c000305c:	75 05                	jne    c0003063 <get_fat+0x1a2>
c000305e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003061:	77 f1                	ja     c0003054 <get_fat+0x193>
c0003063:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003068:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000306c:	75 3f                	jne    c00030ad <get_fat+0x1ec>
c000306e:	31 c9                	xor    ecx,ecx
c0003070:	89 f2                	mov    edx,esi
c0003072:	89 f8                	mov    eax,edi
c0003074:	c1 ea 07             	shr    edx,0x7
c0003077:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000307a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307d:	e8 b7 f2 ff ff       	call   c0002339 <move_window>
c0003082:	85 c0                	test   eax,eax
c0003084:	0f 85 a3 fe ff ff    	jne    c0002f2d <get_fat+0x6c>
c000308a:	c1 e6 02             	shl    esi,0x2
c000308d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003093:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003097:	e8 cc ea ff ff       	call   c0001b68 <ld_dword>
c000309c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030a1:	89 c1                	mov    ecx,eax
c00030a3:	eb 08                	jmp    c00030ad <get_fat+0x1ec>
c00030a5:	b9 01 00 00 00       	mov    ecx,0x1
c00030aa:	89 c8                	mov    eax,ecx
c00030ac:	c3                   	ret    
c00030ad:	83 c4 1c             	add    esp,0x1c
c00030b0:	89 c8                	mov    eax,ecx
c00030b2:	5b                   	pop    ebx
c00030b3:	5e                   	pop    esi
c00030b4:	5f                   	pop    edi
c00030b5:	5d                   	pop    ebp
c00030b6:	c3                   	ret    

c00030b7 <dir_sdi>:
c00030b7:	55                   	push   ebp
c00030b8:	57                   	push   edi
c00030b9:	56                   	push   esi
c00030ba:	53                   	push   ebx
c00030bb:	89 c3                	mov    ebx,eax
c00030bd:	83 ec 1c             	sub    esp,0x1c
c00030c0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030c2:	31 c0                	xor    eax,eax
c00030c4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030c7:	0f 94 c0             	sete   al
c00030ca:	48                   	dec    eax
c00030cb:	25 00 00 20 f0       	and    eax,0xf0200000
c00030d0:	05 00 00 00 10       	add    eax,0x10000000
c00030d5:	39 d0                	cmp    eax,edx
c00030d7:	77 0a                	ja     c00030e3 <dir_sdi+0x2c>
c00030d9:	b8 02 00 00 00       	mov    eax,0x2
c00030de:	e9 c4 00 00 00       	jmp    c00031a7 <dir_sdi+0xf0>
c00030e3:	89 d6                	mov    esi,edx
c00030e5:	f6 c2 1f             	test   dl,0x1f
c00030e8:	75 ef                	jne    c00030d9 <dir_sdi+0x22>
c00030ea:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030ed:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030f0:	85 c9                	test   ecx,ecx
c00030f2:	75 2d                	jne    c0003121 <dir_sdi+0x6a>
c00030f4:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030f7:	77 1b                	ja     c0003114 <dir_sdi+0x5d>
c00030f9:	89 f2                	mov    edx,esi
c00030fb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030ff:	c1 ea 05             	shr    edx,0x5
c0003102:	39 c2                	cmp    edx,eax
c0003104:	73 d3                	jae    c00030d9 <dir_sdi+0x22>
c0003106:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003109:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000310c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000310f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003112:	eb 4b                	jmp    c000315f <dir_sdi+0xa8>
c0003114:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003117:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000311b:	85 c0                	test   eax,eax
c000311d:	74 da                	je     c00030f9 <dir_sdi+0x42>
c000311f:	89 c1                	mov    ecx,eax
c0003121:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003125:	c1 e5 09             	shl    ebp,0x9
c0003128:	89 ca                	mov    edx,ecx
c000312a:	39 ee                	cmp    esi,ebp
c000312c:	72 1c                	jb     c000314a <dir_sdi+0x93>
c000312e:	89 d8                	mov    eax,ebx
c0003130:	e8 8c fd ff ff       	call   c0002ec1 <get_fat>
c0003135:	89 c1                	mov    ecx,eax
c0003137:	83 f8 ff             	cmp    eax,0xffffffff
c000313a:	74 66                	je     c00031a2 <dir_sdi+0xeb>
c000313c:	83 f8 01             	cmp    eax,0x1
c000313f:	76 98                	jbe    c00030d9 <dir_sdi+0x22>
c0003141:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003144:	76 93                	jbe    c00030d9 <dir_sdi+0x22>
c0003146:	29 ee                	sub    esi,ebp
c0003148:	eb de                	jmp    c0003128 <dir_sdi+0x71>
c000314a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000314e:	89 f8                	mov    eax,edi
c0003150:	e8 9f ec ff ff       	call   c0001df4 <clst2sect>
c0003155:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003159:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000315c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000315f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003162:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003165:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003168:	89 d1                	mov    ecx,edx
c000316a:	09 c1                	or     ecx,eax
c000316c:	0f 84 67 ff ff ff    	je     c00030d9 <dir_sdi+0x22>
c0003172:	89 f1                	mov    ecx,esi
c0003174:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000317c:	c1 e9 09             	shr    ecx,0x9
c000317f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003183:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003187:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000318b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000318e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003194:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003197:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000319e:	31 c0                	xor    eax,eax
c00031a0:	eb 05                	jmp    c00031a7 <dir_sdi+0xf0>
c00031a2:	b8 01 00 00 00       	mov    eax,0x1
c00031a7:	83 c4 1c             	add    esp,0x1c
c00031aa:	5b                   	pop    ebx
c00031ab:	5e                   	pop    esi
c00031ac:	5f                   	pop    edi
c00031ad:	5d                   	pop    ebp
c00031ae:	c3                   	ret    

c00031af <create_chain>:
c00031af:	55                   	push   ebp
c00031b0:	89 c5                	mov    ebp,eax
c00031b2:	57                   	push   edi
c00031b3:	56                   	push   esi
c00031b4:	53                   	push   ebx
c00031b5:	83 ec 1c             	sub    esp,0x1c
c00031b8:	85 d2                	test   edx,edx
c00031ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031be:	8b 30                	mov    esi,DWORD PTR [eax]
c00031c0:	75 0e                	jne    c00031d0 <create_chain+0x21>
c00031c2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031c5:	85 ff                	test   edi,edi
c00031c7:	74 39                	je     c0003202 <create_chain+0x53>
c00031c9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031cc:	77 39                	ja     c0003207 <create_chain+0x58>
c00031ce:	eb 32                	jmp    c0003202 <create_chain+0x53>
c00031d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d4:	e8 e8 fc ff ff       	call   c0002ec1 <get_fat>
c00031d9:	89 c3                	mov    ebx,eax
c00031db:	83 f8 01             	cmp    eax,0x1
c00031de:	77 0a                	ja     c00031ea <create_chain+0x3b>
c00031e0:	bb 01 00 00 00       	mov    ebx,0x1
c00031e5:	e9 ba 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c00031ea:	83 f8 ff             	cmp    eax,0xffffffff
c00031ed:	0f 84 62 01 00 00    	je     c0003355 <create_chain+0x1a6>
c00031f3:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031f6:	0f 87 a8 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c00031fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003200:	eb 05                	jmp    c0003207 <create_chain+0x58>
c0003202:	bf 01 00 00 00       	mov    edi,0x1
c0003207:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000320b:	75 07                	jne    c0003214 <create_chain+0x65>
c000320d:	31 db                	xor    ebx,ebx
c000320f:	e9 90 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c0003214:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003217:	75 74                	jne    c000328d <create_chain+0xde>
c0003219:	b9 01 00 00 00       	mov    ecx,0x1
c000321e:	89 fa                	mov    edx,edi
c0003220:	89 f0                	mov    eax,esi
c0003222:	e8 2d f9 ff ff       	call   c0002b54 <find_bitmap>
c0003227:	89 c3                	mov    ebx,eax
c0003229:	8d 40 ff             	lea    eax,[eax-0x1]
c000322c:	83 f8 fd             	cmp    eax,0xfffffffd
c000322f:	0f 87 6f 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c0003235:	83 ec 0c             	sub    esp,0xc
c0003238:	b9 01 00 00 00       	mov    ecx,0x1
c000323d:	6a 01                	push   0x1
c000323f:	89 da                	mov    edx,ebx
c0003241:	89 f0                	mov    eax,esi
c0003243:	e8 bf f9 ff ff       	call   c0002c07 <change_bitmap>
c0003248:	83 c4 10             	add    esp,0x10
c000324b:	83 f8 02             	cmp    eax,0x2
c000324e:	74 90                	je     c00031e0 <create_chain+0x31>
c0003250:	83 f8 01             	cmp    eax,0x1
c0003253:	0f 84 fc 00 00 00    	je     c0003355 <create_chain+0x1a6>
c0003259:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000325e:	75 09                	jne    c0003269 <create_chain+0xba>
c0003260:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003264:	e9 0c 01 00 00       	jmp    c0003375 <create_chain+0x1c6>
c0003269:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000326d:	0f 85 e7 00 00 00    	jne    c000335a <create_chain+0x1ab>
c0003273:	8d 57 01             	lea    edx,[edi+0x1]
c0003276:	39 da                	cmp    edx,ebx
c0003278:	0f 84 f7 00 00 00    	je     c0003375 <create_chain+0x1c6>
c000327e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003281:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003285:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003288:	e9 cd 00 00 00       	jmp    c000335a <create_chain+0x1ab>
c000328d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003291:	75 41                	jne    c00032d4 <create_chain+0x125>
c0003293:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003296:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003299:	77 05                	ja     c00032a0 <create_chain+0xf1>
c000329b:	bb 02 00 00 00       	mov    ebx,0x2
c00032a0:	89 da                	mov    edx,ebx
c00032a2:	89 e8                	mov    eax,ebp
c00032a4:	e8 18 fc ff ff       	call   c0002ec1 <get_fat>
c00032a9:	83 f8 01             	cmp    eax,0x1
c00032ac:	0f 84 2e ff ff ff    	je     c00031e0 <create_chain+0x31>
c00032b2:	83 f8 ff             	cmp    eax,0xffffffff
c00032b5:	0f 84 9a 00 00 00    	je     c0003355 <create_chain+0x1a6>
c00032bb:	85 c0                	test   eax,eax
c00032bd:	74 11                	je     c00032d0 <create_chain+0x121>
c00032bf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032c2:	83 f8 01             	cmp    eax,0x1
c00032c5:	76 0d                	jbe    c00032d4 <create_chain+0x125>
c00032c7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032ca:	76 08                	jbe    c00032d4 <create_chain+0x125>
c00032cc:	89 c7                	mov    edi,eax
c00032ce:	eb 04                	jmp    c00032d4 <create_chain+0x125>
c00032d0:	85 db                	test   ebx,ebx
c00032d2:	75 38                	jne    c000330c <create_chain+0x15d>
c00032d4:	89 fb                	mov    ebx,edi
c00032d6:	43                   	inc    ebx
c00032d7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032da:	77 0e                	ja     c00032ea <create_chain+0x13b>
c00032dc:	83 ff 01             	cmp    edi,0x1
c00032df:	0f 86 28 ff ff ff    	jbe    c000320d <create_chain+0x5e>
c00032e5:	bb 02 00 00 00       	mov    ebx,0x2
c00032ea:	89 da                	mov    edx,ebx
c00032ec:	89 e8                	mov    eax,ebp
c00032ee:	e8 ce fb ff ff       	call   c0002ec1 <get_fat>
c00032f3:	85 c0                	test   eax,eax
c00032f5:	74 15                	je     c000330c <create_chain+0x15d>
c00032f7:	83 f8 01             	cmp    eax,0x1
c00032fa:	0f 84 e0 fe ff ff    	je     c00031e0 <create_chain+0x31>
c0003300:	40                   	inc    eax
c0003301:	74 52                	je     c0003355 <create_chain+0x1a6>
c0003303:	39 fb                	cmp    ebx,edi
c0003305:	75 cf                	jne    c00032d6 <create_chain+0x127>
c0003307:	e9 01 ff ff ff       	jmp    c000320d <create_chain+0x5e>
c000330c:	83 c9 ff             	or     ecx,0xffffffff
c000330f:	89 da                	mov    edx,ebx
c0003311:	89 f0                	mov    eax,esi
c0003313:	e8 a4 f9 ff ff       	call   c0002cbc <put_fat>
c0003318:	85 c0                	test   eax,eax
c000331a:	75 32                	jne    c000334e <create_chain+0x19f>
c000331c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003321:	74 11                	je     c0003334 <create_chain+0x185>
c0003323:	89 d9                	mov    ecx,ebx
c0003325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003329:	89 f0                	mov    eax,esi
c000332b:	e8 8c f9 ff ff       	call   c0002cbc <put_fat>
c0003330:	85 c0                	test   eax,eax
c0003332:	75 1a                	jne    c000334e <create_chain+0x19f>
c0003334:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003337:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000333a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000333d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003340:	39 d0                	cmp    eax,edx
c0003342:	77 04                	ja     c0003348 <create_chain+0x199>
c0003344:	48                   	dec    eax
c0003345:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003348:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000334c:	eb 56                	jmp    c00033a4 <create_chain+0x1f5>
c000334e:	48                   	dec    eax
c000334f:	0f 85 8b fe ff ff    	jne    c00031e0 <create_chain+0x31>
c0003355:	83 cb ff             	or     ebx,0xffffffff
c0003358:	eb 4a                	jmp    c00033a4 <create_chain+0x1f5>
c000335a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003361:	41                   	inc    ecx
c0003362:	39 d9                	cmp    ecx,ebx
c0003364:	75 19                	jne    c000337f <create_chain+0x1d0>
c0003366:	b9 02 00 00 00       	mov    ecx,0x2
c000336b:	85 d2                	test   edx,edx
c000336d:	74 03                	je     c0003372 <create_chain+0x1c3>
c000336f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003372:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003375:	85 c0                	test   eax,eax
c0003377:	0f 85 63 fe ff ff    	jne    c00031e0 <create_chain+0x31>
c000337d:	eb b5                	jmp    c0003334 <create_chain+0x185>
c000337f:	85 d2                	test   edx,edx
c0003381:	75 07                	jne    c000338a <create_chain+0x1db>
c0003383:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000338a:	89 d9                	mov    ecx,ebx
c000338c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003390:	89 e8                	mov    eax,ebp
c0003392:	e8 bb fa ff ff       	call   c0002e52 <fill_last_frag>
c0003397:	85 c0                	test   eax,eax
c0003399:	75 b3                	jne    c000334e <create_chain+0x19f>
c000339b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033a2:	eb 90                	jmp    c0003334 <create_chain+0x185>
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	89 d8                	mov    eax,ebx
c00033a9:	5b                   	pop    ebx
c00033aa:	5e                   	pop    esi
c00033ab:	5f                   	pop    edi
c00033ac:	5d                   	pop    ebp
c00033ad:	c3                   	ret    

c00033ae <remove_chain>:
c00033ae:	55                   	push   ebp
c00033af:	57                   	push   edi
c00033b0:	56                   	push   esi
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	83 fa 01             	cmp    edx,0x1
c00033b8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033bc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033be:	77 0a                	ja     c00033ca <remove_chain+0x1c>
c00033c0:	b8 02 00 00 00       	mov    eax,0x2
c00033c5:	e9 24 01 00 00       	jmp    c00034ee <remove_chain+0x140>
c00033ca:	89 d6                	mov    esi,edx
c00033cc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033cf:	76 ef                	jbe    c00033c0 <remove_chain+0x12>
c00033d1:	89 c7                	mov    edi,eax
c00033d3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d8:	75 06                	jne    c00033e0 <remove_chain+0x32>
c00033da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033de:	eb 54                	jmp    c0003434 <remove_chain+0x86>
c00033e0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033e3:	75 06                	jne    c00033eb <remove_chain+0x3d>
c00033e5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e9:	74 ef                	je     c00033da <remove_chain+0x2c>
c00033eb:	83 c9 ff             	or     ecx,0xffffffff
c00033ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f2:	89 d8                	mov    eax,ebx
c00033f4:	e8 c3 f8 ff ff       	call   c0002cbc <put_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 dd                	je     c00033da <remove_chain+0x2c>
c00033fd:	e9 ec 00 00 00       	jmp    c00034ee <remove_chain+0x140>
c0003402:	83 f8 01             	cmp    eax,0x1
c0003405:	74 b9                	je     c00033c0 <remove_chain+0x12>
c0003407:	83 f8 ff             	cmp    eax,0xffffffff
c000340a:	74 6d                	je     c0003479 <remove_chain+0xcb>
c000340c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000340f:	75 6f                	jne    c0003480 <remove_chain+0xd2>
c0003411:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003414:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003417:	8d 51 fe             	lea    edx,[ecx-0x2]
c000341a:	39 d0                	cmp    eax,edx
c000341c:	73 08                	jae    c0003426 <remove_chain+0x78>
c000341e:	40                   	inc    eax
c000341f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003423:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003426:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003429:	39 e9                	cmp    ecx,ebp
c000342b:	75 64                	jne    c0003491 <remove_chain+0xe3>
c000342d:	89 ee                	mov    esi,ebp
c000342f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003432:	76 0f                	jbe    c0003443 <remove_chain+0x95>
c0003434:	89 f2                	mov    edx,esi
c0003436:	89 f8                	mov    eax,edi
c0003438:	e8 84 fa ff ff       	call   c0002ec1 <get_fat>
c000343d:	89 c5                	mov    ebp,eax
c000343f:	85 c0                	test   eax,eax
c0003441:	75 bf                	jne    c0003402 <remove_chain+0x54>
c0003443:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003446:	0f 85 a0 00 00 00    	jne    c00034ec <remove_chain+0x13e>
c000344c:	eb 6c                	jmp    c00034ba <remove_chain+0x10c>
c000344e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003451:	84 c0                	test   al,al
c0003453:	75 7d                	jne    c00034d2 <remove_chain+0x124>
c0003455:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003458:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000345c:	0f 84 86 00 00 00    	je     c00034e8 <remove_chain+0x13a>
c0003462:	89 da                	mov    edx,ebx
c0003464:	89 f8                	mov    eax,edi
c0003466:	e8 56 fa ff ff       	call   c0002ec1 <get_fat>
c000346b:	83 f8 01             	cmp    eax,0x1
c000346e:	0f 86 4c ff ff ff    	jbe    c00033c0 <remove_chain+0x12>
c0003474:	83 f8 ff             	cmp    eax,0xffffffff
c0003477:	75 4e                	jne    c00034c7 <remove_chain+0x119>
c0003479:	b8 01 00 00 00       	mov    eax,0x1
c000347e:	eb 6e                	jmp    c00034ee <remove_chain+0x140>
c0003480:	31 c9                	xor    ecx,ecx
c0003482:	89 f2                	mov    edx,esi
c0003484:	89 d8                	mov    eax,ebx
c0003486:	e8 31 f8 ff ff       	call   c0002cbc <put_fat>
c000348b:	85 c0                	test   eax,eax
c000348d:	74 82                	je     c0003411 <remove_chain+0x63>
c000348f:	eb 5d                	jmp    c00034ee <remove_chain+0x140>
c0003491:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003494:	75 1b                	jne    c00034b1 <remove_chain+0x103>
c0003496:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000349a:	89 d8                	mov    eax,ebx
c000349c:	83 ec 0c             	sub    esp,0xc
c000349f:	6a 00                	push   0x0
c00034a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034a5:	e8 5d f7 ff ff       	call   c0002c07 <change_bitmap>
c00034aa:	83 c4 10             	add    esp,0x10
c00034ad:	85 c0                	test   eax,eax
c00034af:	75 3d                	jne    c00034ee <remove_chain+0x140>
c00034b1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034b5:	e9 73 ff ff ff       	jmp    c000342d <remove_chain+0x7f>
c00034ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034bf:	75 8d                	jne    c000344e <remove_chain+0xa0>
c00034c1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034c5:	eb 25                	jmp    c00034ec <remove_chain+0x13e>
c00034c7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034ca:	89 c3                	mov    ebx,eax
c00034cc:	39 c2                	cmp    edx,eax
c00034ce:	74 88                	je     c0003458 <remove_chain+0xaa>
c00034d0:	eb 1a                	jmp    c00034ec <remove_chain+0x13e>
c00034d2:	3c 03                	cmp    al,0x3
c00034d4:	75 16                	jne    c00034ec <remove_chain+0x13e>
c00034d6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034dd:	77 0d                	ja     c00034ec <remove_chain+0x13e>
c00034df:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034e2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034e6:	72 04                	jb     c00034ec <remove_chain+0x13e>
c00034e8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034ec:	31 c0                	xor    eax,eax
c00034ee:	83 c4 1c             	add    esp,0x1c
c00034f1:	5b                   	pop    ebx
c00034f2:	5e                   	pop    esi
c00034f3:	5f                   	pop    edi
c00034f4:	5d                   	pop    ebp
c00034f5:	c3                   	ret    

c00034f6 <dir_clear>:
c00034f6:	55                   	push   ebp
c00034f7:	57                   	push   edi
c00034f8:	56                   	push   esi
c00034f9:	89 c6                	mov    esi,eax
c00034fb:	53                   	push   ebx
c00034fc:	83 ec 1c             	sub    esp,0x1c
c00034ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003503:	e8 9d ed ff ff       	call   c00022a5 <sync_window>
c0003508:	85 c0                	test   eax,eax
c000350a:	0f 85 de 00 00 00    	jne    c00035ee <dir_clear+0xf8>
c0003510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003514:	89 f0                	mov    eax,esi
c0003516:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003519:	e8 d6 e8 ff ff       	call   c0001df4 <clst2sect>
c000351e:	b9 00 02 00 00       	mov    ecx,0x200
c0003523:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000352b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000352e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003531:	89 e8                	mov    eax,ebp
c0003533:	31 d2                	xor    edx,edx
c0003535:	e8 b5 e6 ff ff       	call   c0001bef <mem_set>
c000353a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000353e:	c1 e3 09             	shl    ebx,0x9
c0003541:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003547:	76 1f                	jbe    c0003568 <dir_clear+0x72>
c0003549:	bb 00 80 00 00       	mov    ebx,0x8000
c000354e:	eb 18                	jmp    c0003568 <dir_clear+0x72>
c0003550:	83 ec 0c             	sub    esp,0xc
c0003553:	53                   	push   ebx
c0003554:	e8 6b 50 00 00       	call   c00085c4 <ff_memalloc>
c0003559:	83 c4 10             	add    esp,0x10
c000355c:	89 c7                	mov    edi,eax
c000355e:	85 c0                	test   eax,eax
c0003560:	0f 85 8f 00 00 00    	jne    c00035f5 <dir_clear+0xff>
c0003566:	d1 eb                	shr    ebx,1
c0003568:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000356e:	77 e0                	ja     c0003550 <dir_clear+0x5a>
c0003570:	31 db                	xor    ebx,ebx
c0003572:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003576:	39 d8                	cmp    eax,ebx
c0003578:	76 66                	jbe    c00035e0 <dir_clear+0xea>
c000357a:	83 ec 0c             	sub    esp,0xc
c000357d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003581:	6a 01                	push   0x1
c0003583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000358b:	55                   	push   ebp
c000358c:	50                   	push   eax
c000358d:	e8 94 e5 ff ff       	call   c0001b26 <disk_write>
c0003592:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003597:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000359c:	83 c4 20             	add    esp,0x20
c000359f:	85 c0                	test   eax,eax
c00035a1:	75 3d                	jne    c00035e0 <dir_clear+0xea>
c00035a3:	43                   	inc    ebx
c00035a4:	eb cc                	jmp    c0003572 <dir_clear+0x7c>
c00035a6:	83 ec 0c             	sub    esp,0xc
c00035a9:	31 d2                	xor    edx,edx
c00035ab:	55                   	push   ebp
c00035ac:	89 d8                	mov    eax,ebx
c00035ae:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035b2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035b6:	52                   	push   edx
c00035b7:	50                   	push   eax
c00035b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035bc:	57                   	push   edi
c00035bd:	50                   	push   eax
c00035be:	e8 63 e5 ff ff       	call   c0001b26 <disk_write>
c00035c3:	83 c4 20             	add    esp,0x20
c00035c6:	85 c0                	test   eax,eax
c00035c8:	75 0a                	jne    c00035d4 <dir_clear+0xde>
c00035ca:	01 eb                	add    ebx,ebp
c00035cc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035d0:	39 d8                	cmp    eax,ebx
c00035d2:	77 d2                	ja     c00035a6 <dir_clear+0xb0>
c00035d4:	83 ec 0c             	sub    esp,0xc
c00035d7:	57                   	push   edi
c00035d8:	e8 ff 4f 00 00       	call   c00085dc <ff_memfree>
c00035dd:	83 c4 10             	add    esp,0x10
c00035e0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e4:	39 d8                	cmp    eax,ebx
c00035e6:	0f 95 c0             	setne  al
c00035e9:	0f b6 c0             	movzx  eax,al
c00035ec:	eb 19                	jmp    c0003607 <dir_clear+0x111>
c00035ee:	b8 01 00 00 00       	mov    eax,0x1
c00035f3:	eb 12                	jmp    c0003607 <dir_clear+0x111>
c00035f5:	89 d9                	mov    ecx,ebx
c00035f7:	31 d2                	xor    edx,edx
c00035f9:	c1 eb 09             	shr    ebx,0x9
c00035fc:	e8 ee e5 ff ff       	call   c0001bef <mem_set>
c0003601:	89 dd                	mov    ebp,ebx
c0003603:	31 db                	xor    ebx,ebx
c0003605:	eb c5                	jmp    c00035cc <dir_clear+0xd6>
c0003607:	83 c4 1c             	add    esp,0x1c
c000360a:	5b                   	pop    ebx
c000360b:	5e                   	pop    esi
c000360c:	5f                   	pop    edi
c000360d:	5d                   	pop    ebp
c000360e:	c3                   	ret    

c000360f <dir_next>:
c000360f:	55                   	push   ebp
c0003610:	57                   	push   edi
c0003611:	56                   	push   esi
c0003612:	53                   	push   ebx
c0003613:	89 c3                	mov    ebx,eax
c0003615:	83 ec 1c             	sub    esp,0x1c
c0003618:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003621:	8d 78 20             	lea    edi,[eax+0x20]
c0003624:	31 c0                	xor    eax,eax
c0003626:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000362a:	0f 94 c0             	sete   al
c000362d:	48                   	dec    eax
c000362e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003633:	05 00 00 00 10       	add    eax,0x10000000
c0003638:	39 f8                	cmp    eax,edi
c000363a:	77 0e                	ja     c000364a <dir_next+0x3b>
c000363c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003643:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000364a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000364d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003650:	b8 04 00 00 00       	mov    eax,0x4
c0003655:	89 ce                	mov    esi,ecx
c0003657:	09 d6                	or     esi,edx
c0003659:	0f 84 da 00 00 00    	je     c0003739 <dir_next+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	25 ff 01 00 00       	and    eax,0x1ff
c0003666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000366a:	0f 85 b9 00 00 00    	jne    c0003729 <dir_next+0x11a>
c0003670:	83 c2 01             	add    edx,0x1
c0003673:	83 d1 00             	adc    ecx,0x0
c0003676:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003679:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000367c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000367f:	85 d2                	test   edx,edx
c0003681:	75 29                	jne    c00036ac <dir_next+0x9d>
c0003683:	89 fa                	mov    edx,edi
c0003685:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003689:	c1 ea 05             	shr    edx,0x5
c000368c:	39 c2                	cmp    edx,eax
c000368e:	0f 82 95 00 00 00    	jb     c0003729 <dir_next+0x11a>
c0003694:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000369b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036a2:	b8 04 00 00 00       	mov    eax,0x4
c00036a7:	e9 8d 00 00 00       	jmp    c0003739 <dir_next+0x12a>
c00036ac:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036b0:	89 f9                	mov    ecx,edi
c00036b2:	48                   	dec    eax
c00036b3:	c1 e9 09             	shr    ecx,0x9
c00036b6:	85 c8                	test   eax,ecx
c00036b8:	75 6f                	jne    c0003729 <dir_next+0x11a>
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	e8 00 f8 ff ff       	call   c0002ec1 <get_fat>
c00036c1:	89 c6                	mov    esi,eax
c00036c3:	83 f8 01             	cmp    eax,0x1
c00036c6:	77 07                	ja     c00036cf <dir_next+0xc0>
c00036c8:	b8 02 00 00 00       	mov    eax,0x2
c00036cd:	eb 6a                	jmp    c0003739 <dir_next+0x12a>
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	75 07                	jne    c00036db <dir_next+0xcc>
c00036d4:	b8 01 00 00 00       	mov    eax,0x1
c00036d9:	eb 5e                	jmp    c0003739 <dir_next+0x12a>
c00036db:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036de:	77 37                	ja     c0003717 <dir_next+0x108>
c00036e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036e5:	74 ad                	je     c0003694 <dir_next+0x85>
c00036e7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	e8 be fa ff ff       	call   c00031af <create_chain>
c00036f1:	89 c6                	mov    esi,eax
c00036f3:	b8 07 00 00 00       	mov    eax,0x7
c00036f8:	85 f6                	test   esi,esi
c00036fa:	74 3d                	je     c0003739 <dir_next+0x12a>
c00036fc:	83 fe 01             	cmp    esi,0x1
c00036ff:	74 c7                	je     c00036c8 <dir_next+0xb9>
c0003701:	83 fe ff             	cmp    esi,0xffffffff
c0003704:	74 ce                	je     c00036d4 <dir_next+0xc5>
c0003706:	89 f2                	mov    edx,esi
c0003708:	89 e8                	mov    eax,ebp
c000370a:	e8 e7 fd ff ff       	call   c00034f6 <dir_clear>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 c1                	jne    c00036d4 <dir_next+0xc5>
c0003713:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003717:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000371a:	89 f2                	mov    edx,esi
c000371c:	89 e8                	mov    eax,ebp
c000371e:	e8 d1 e6 ff ff       	call   c0001df4 <clst2sect>
c0003723:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003726:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000372d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003730:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003734:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003737:	31 c0                	xor    eax,eax
c0003739:	83 c4 1c             	add    esp,0x1c
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <load_xdir>:
c0003741:	55                   	push   ebp
c0003742:	57                   	push   edi
c0003743:	56                   	push   esi
c0003744:	89 c6                	mov    esi,eax
c0003746:	53                   	push   ebx
c0003747:	83 ec 1c             	sub    esp,0x1c
c000374a:	8b 00                	mov    eax,DWORD PTR [eax]
c000374c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000374f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003752:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003755:	e8 df eb ff ff       	call   c0002339 <move_window>
c000375a:	89 c3                	mov    ebx,eax
c000375c:	85 c0                	test   eax,eax
c000375e:	0f 85 0c 01 00 00    	jne    c0003870 <load_xdir+0x12f>
c0003764:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003767:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000376a:	0f 85 fb 00 00 00    	jne    c000386b <load_xdir+0x12a>
c0003770:	89 f8                	mov    eax,edi
c0003772:	b9 20 00 00 00       	mov    ecx,0x20
c0003777:	e8 5e e4 ff ff       	call   c0001bda <mem_cpy>
c000377c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003780:	40                   	inc    eax
c0003781:	c1 e0 05             	shl    eax,0x5
c0003784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003788:	83 e8 60             	sub    eax,0x60
c000378b:	3d 00 02 00 00       	cmp    eax,0x200
c0003790:	0f 87 d5 00 00 00    	ja     c000386b <load_xdir+0x12a>
c0003796:	31 d2                	xor    edx,edx
c0003798:	89 f0                	mov    eax,esi
c000379a:	e8 70 fe ff ff       	call   c000360f <dir_next>
c000379f:	89 c3                	mov    ebx,eax
c00037a1:	83 f8 04             	cmp    eax,0x4
c00037a4:	0f 84 c1 00 00 00    	je     c000386b <load_xdir+0x12a>
c00037aa:	85 c0                	test   eax,eax
c00037ac:	0f 85 be 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037b2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037b5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ba:	e8 7a eb ff ff       	call   c0002339 <move_window>
c00037bf:	89 c3                	mov    ebx,eax
c00037c1:	85 c0                	test   eax,eax
c00037c3:	0f 85 a7 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037c9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037cc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037cf:	0f 85 96 00 00 00    	jne    c000386b <load_xdir+0x12a>
c00037d5:	8d 47 20             	lea    eax,[edi+0x20]
c00037d8:	b9 20 00 00 00       	mov    ecx,0x20
c00037dd:	e8 f8 e3 ff ff       	call   c0001bda <mem_cpy>
c00037e2:	31 d2                	xor    edx,edx
c00037e4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037ed:	83 c0 2c             	add    eax,0x2c
c00037f0:	f7 f1                	div    ecx
c00037f2:	c1 e0 05             	shl    eax,0x5
c00037f5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f9:	77 70                	ja     c000386b <load_xdir+0x12a>
c00037fb:	bd 40 00 00 00       	mov    ebp,0x40
c0003800:	31 d2                	xor    edx,edx
c0003802:	89 f0                	mov    eax,esi
c0003804:	e8 06 fe ff ff       	call   c000360f <dir_next>
c0003809:	89 c3                	mov    ebx,eax
c000380b:	83 f8 04             	cmp    eax,0x4
c000380e:	74 5b                	je     c000386b <load_xdir+0x12a>
c0003810:	85 c0                	test   eax,eax
c0003812:	75 5c                	jne    c0003870 <load_xdir+0x12f>
c0003814:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003817:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000381a:	8b 06                	mov    eax,DWORD PTR [esi]
c000381c:	e8 18 eb ff ff       	call   c0002339 <move_window>
c0003821:	89 c3                	mov    ebx,eax
c0003823:	85 c0                	test   eax,eax
c0003825:	75 49                	jne    c0003870 <load_xdir+0x12f>
c0003827:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000382a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000382d:	75 3c                	jne    c000386b <load_xdir+0x12a>
c000382f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003835:	77 0d                	ja     c0003844 <load_xdir+0x103>
c0003837:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000383a:	b9 20 00 00 00       	mov    ecx,0x20
c000383f:	e8 96 e3 ff ff       	call   c0001bda <mem_cpy>
c0003844:	83 c5 20             	add    ebp,0x20
c0003847:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000384b:	77 b3                	ja     c0003800 <load_xdir+0xbf>
c000384d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003853:	77 1b                	ja     c0003870 <load_xdir+0x12f>
c0003855:	89 f8                	mov    eax,edi
c0003857:	e8 cd e7 ff ff       	call   c0002029 <xdir_sum>
c000385c:	89 c1                	mov    ecx,eax
c000385e:	8d 47 02             	lea    eax,[edi+0x2]
c0003861:	e8 f5 e2 ff ff       	call   c0001b5b <ld_word>
c0003866:	66 39 c1             	cmp    cx,ax
c0003869:	74 05                	je     c0003870 <load_xdir+0x12f>
c000386b:	bb 02 00 00 00       	mov    ebx,0x2
c0003870:	83 c4 1c             	add    esp,0x1c
c0003873:	89 d8                	mov    eax,ebx
c0003875:	5b                   	pop    ebx
c0003876:	5e                   	pop    esi
c0003877:	5f                   	pop    edi
c0003878:	5d                   	pop    ebp
c0003879:	c3                   	ret    

c000387a <load_obj_xdir>:
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	83 ec 08             	sub    esp,0x8
c0003880:	8b 02                	mov    eax,DWORD PTR [edx]
c0003882:	89 03                	mov    DWORD PTR [ebx],eax
c0003884:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003887:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000388a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003890:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003893:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000389a:	30 c0                	xor    al,al
c000389c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038a6:	89 d8                	mov    eax,ebx
c00038a8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038ab:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038ae:	e8 04 f8 ff ff       	call   c00030b7 <dir_sdi>
c00038b3:	85 c0                	test   eax,eax
c00038b5:	75 0b                	jne    c00038c2 <load_obj_xdir+0x48>
c00038b7:	89 d8                	mov    eax,ebx
c00038b9:	83 c4 08             	add    esp,0x8
c00038bc:	5b                   	pop    ebx
c00038bd:	e9 7f fe ff ff       	jmp    c0003741 <load_xdir>
c00038c2:	83 c4 08             	add    esp,0x8
c00038c5:	5b                   	pop    ebx
c00038c6:	c3                   	ret    

c00038c7 <dir_read>:
c00038c7:	55                   	push   ebp
c00038c8:	bd 04 00 00 00       	mov    ebp,0x4
c00038cd:	57                   	push   edi
c00038ce:	56                   	push   esi
c00038cf:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d4:	53                   	push   ebx
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 ec 1c             	sub    esp,0x1c
c00038da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038de:	8b 38                	mov    edi,DWORD PTR [eax]
c00038e0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038e5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038eb:	89 c8                	mov    eax,ecx
c00038ed:	09 d0                	or     eax,edx
c00038ef:	0f 84 25 01 00 00    	je     c0003a1a <dir_read+0x153>
c00038f5:	89 f8                	mov    eax,edi
c00038f7:	e8 3d ea ff ff       	call   c0002339 <move_window>
c00038fc:	89 c5                	mov    ebp,eax
c00038fe:	85 c0                	test   eax,eax
c0003900:	0f 85 23 01 00 00    	jne    c0003a29 <dir_read+0x162>
c0003906:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003909:	8a 0a                	mov    cl,BYTE PTR [edx]
c000390b:	84 c9                	test   cl,cl
c000390d:	0f 84 11 01 00 00    	je     c0003a24 <dir_read+0x15d>
c0003913:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003916:	75 48                	jne    c0003960 <dir_read+0x99>
c0003918:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000391d:	74 10                	je     c000392f <dir_read+0x68>
c000391f:	80 f9 83             	cmp    cl,0x83
c0003922:	0f 85 dd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003928:	31 ed                	xor    ebp,ebp
c000392a:	e9 08 01 00 00       	jmp    c0003a37 <dir_read+0x170>
c000392f:	80 f9 85             	cmp    cl,0x85
c0003932:	0f 85 cd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003938:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000393b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000393e:	89 d8                	mov    eax,ebx
c0003940:	e8 fc fd ff ff       	call   c0003741 <load_xdir>
c0003945:	89 c5                	mov    ebp,eax
c0003947:	85 c0                	test   eax,eax
c0003949:	0f 85 da 00 00 00    	jne    c0003a29 <dir_read+0x162>
c000394f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003952:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003955:	83 e0 3f             	and    eax,0x3f
c0003958:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000395b:	e9 d7 00 00 00       	jmp    c0003a37 <dir_read+0x170>
c0003960:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003963:	83 e0 3f             	and    eax,0x3f
c0003966:	80 f9 2e             	cmp    cl,0x2e
c0003969:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000396d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003970:	0f 84 8a 00 00 00    	je     c0003a00 <dir_read+0x139>
c0003976:	80 f9 e5             	cmp    cl,0xe5
c0003979:	0f 84 81 00 00 00    	je     c0003a00 <dir_read+0x139>
c000397f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003983:	83 e0 1f             	and    eax,0x1f
c0003986:	83 f8 08             	cmp    eax,0x8
c0003989:	0f 94 c0             	sete   al
c000398c:	0f b6 c0             	movzx  eax,al
c000398f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003993:	75 6b                	jne    c0003a00 <dir_read+0x139>
c0003995:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000399a:	75 44                	jne    c00039e0 <dir_read+0x119>
c000399c:	f6 c1 40             	test   cl,0x40
c000399f:	74 12                	je     c00039b3 <dir_read+0xec>
c00039a1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039a4:	83 e1 bf             	and    ecx,0xffffffbf
c00039a7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039ae:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039b1:	eb 06                	jmp    c00039b9 <dir_read+0xf2>
c00039b3:	89 f0                	mov    eax,esi
c00039b5:	38 c8                	cmp    al,cl
c00039b7:	75 47                	jne    c0003a00 <dir_read+0x139>
c00039b9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039bd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039c2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039c5:	75 3e                	jne    c0003a05 <dir_read+0x13e>
c00039c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039cb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039ce:	e8 8a e4 ff ff       	call   c0001e5d <pick_lfn>
c00039d3:	85 c0                	test   eax,eax
c00039d5:	74 2e                	je     c0003a05 <dir_read+0x13e>
c00039d7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039db:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039de:	eb 25                	jmp    c0003a05 <dir_read+0x13e>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	84 c0                	test   al,al
c00039e4:	75 11                	jne    c00039f7 <dir_read+0x130>
c00039e6:	89 d0                	mov    eax,edx
c00039e8:	e8 2a e6 ff ff       	call   c0002017 <sum_sfn>
c00039ed:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039f1:	0f 84 31 ff ff ff    	je     c0003928 <dir_read+0x61>
c00039f7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039fe:	eb 37                	jmp    c0003a37 <dir_read+0x170>
c0003a00:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	e8 01 fc ff ff       	call   c000360f <dir_next>
c0003a0e:	89 c5                	mov    ebp,eax
c0003a10:	85 c0                	test   eax,eax
c0003a12:	0f 84 cd fe ff ff    	je     c00038e5 <dir_read+0x1e>
c0003a18:	eb 0f                	jmp    c0003a29 <dir_read+0x162>
c0003a1a:	85 ed                	test   ebp,ebp
c0003a1c:	0f 84 06 ff ff ff    	je     c0003928 <dir_read+0x61>
c0003a22:	eb 05                	jmp    c0003a29 <dir_read+0x162>
c0003a24:	bd 04 00 00 00       	mov    ebp,0x4
c0003a29:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a30:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a37:	83 c4 1c             	add    esp,0x1c
c0003a3a:	89 e8                	mov    eax,ebp
c0003a3c:	5b                   	pop    ebx
c0003a3d:	5e                   	pop    esi
c0003a3e:	5f                   	pop    edi
c0003a3f:	5d                   	pop    ebp
c0003a40:	c3                   	ret    

c0003a41 <dir_alloc>:
c0003a41:	55                   	push   ebp
c0003a42:	89 d5                	mov    ebp,edx
c0003a44:	57                   	push   edi
c0003a45:	31 d2                	xor    edx,edx
c0003a47:	56                   	push   esi
c0003a48:	53                   	push   ebx
c0003a49:	89 c3                	mov    ebx,eax
c0003a4b:	83 ec 0c             	sub    esp,0xc
c0003a4e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a50:	e8 62 f6 ff ff       	call   c00030b7 <dir_sdi>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 4e                	jne    c0003aa7 <dir_alloc+0x66>
c0003a59:	31 f6                	xor    esi,esi
c0003a5b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a5e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a61:	89 f8                	mov    eax,edi
c0003a63:	e8 d1 e8 ff ff       	call   c0002339 <move_window>
c0003a68:	85 c0                	test   eax,eax
c0003a6a:	75 3b                	jne    c0003aa7 <dir_alloc+0x66>
c0003a6c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a6f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a72:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a74:	75 07                	jne    c0003a7d <dir_alloc+0x3c>
c0003a76:	f7 d2                	not    edx
c0003a78:	c0 ea 07             	shr    dl,0x7
c0003a7b:	eb 0d                	jmp    c0003a8a <dir_alloc+0x49>
c0003a7d:	84 d2                	test   dl,dl
c0003a7f:	0f 94 c1             	sete   cl
c0003a82:	80 fa e5             	cmp    dl,0xe5
c0003a85:	0f 94 c2             	sete   dl
c0003a88:	09 ca                	or     edx,ecx
c0003a8a:	84 d2                	test   dl,dl
c0003a8c:	74 07                	je     c0003a95 <dir_alloc+0x54>
c0003a8e:	46                   	inc    esi
c0003a8f:	39 ee                	cmp    esi,ebp
c0003a91:	75 04                	jne    c0003a97 <dir_alloc+0x56>
c0003a93:	eb 1c                	jmp    c0003ab1 <dir_alloc+0x70>
c0003a95:	31 f6                	xor    esi,esi
c0003a97:	ba 01 00 00 00       	mov    edx,0x1
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 6c fb ff ff       	call   c000360f <dir_next>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 b4                	je     c0003a5b <dir_alloc+0x1a>
c0003aa7:	83 f8 04             	cmp    eax,0x4
c0003aaa:	75 05                	jne    c0003ab1 <dir_alloc+0x70>
c0003aac:	b8 07 00 00 00       	mov    eax,0x7
c0003ab1:	83 c4 0c             	add    esp,0xc
c0003ab4:	5b                   	pop    ebx
c0003ab5:	5e                   	pop    esi
c0003ab6:	5f                   	pop    edi
c0003ab7:	5d                   	pop    ebp
c0003ab8:	c3                   	ret    

c0003ab9 <store_xdir>:
c0003ab9:	55                   	push   ebp
c0003aba:	57                   	push   edi
c0003abb:	89 c7                	mov    edi,eax
c0003abd:	56                   	push   esi
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 0c             	sub    esp,0xc
c0003ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ac4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ac7:	89 e8                	mov    eax,ebp
c0003ac9:	e8 5b e5 ff ff       	call   c0002029 <xdir_sum>
c0003ace:	0f b7 d0             	movzx  edx,ax
c0003ad1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ad4:	e8 f4 e0 ff ff       	call   c0001bcd <st_word>
c0003ad9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003add:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ae0:	89 f8                	mov    eax,edi
c0003ae2:	e8 d0 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003ae7:	89 c6                	mov    esi,eax
c0003ae9:	85 f6                	test   esi,esi
c0003aeb:	75 3d                	jne    c0003b2a <store_xdir+0x71>
c0003aed:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003af0:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003af3:	8b 07                	mov    eax,DWORD PTR [edi]
c0003af5:	e8 3f e8 ff ff       	call   c0002339 <move_window>
c0003afa:	89 c6                	mov    esi,eax
c0003afc:	85 c0                	test   eax,eax
c0003afe:	75 2a                	jne    c0003b2a <store_xdir+0x71>
c0003b00:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b03:	b9 20 00 00 00       	mov    ecx,0x20
c0003b08:	89 ea                	mov    edx,ebp
c0003b0a:	e8 cb e0 ff ff       	call   c0001bda <mem_cpy>
c0003b0f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b11:	85 db                	test   ebx,ebx
c0003b13:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b17:	74 11                	je     c0003b2a <store_xdir+0x71>
c0003b19:	31 d2                	xor    edx,edx
c0003b1b:	89 f8                	mov    eax,edi
c0003b1d:	83 c5 20             	add    ebp,0x20
c0003b20:	e8 ea fa ff ff       	call   c000360f <dir_next>
c0003b25:	4b                   	dec    ebx
c0003b26:	89 c6                	mov    esi,eax
c0003b28:	eb bf                	jmp    c0003ae9 <store_xdir+0x30>
c0003b2a:	89 f0                	mov    eax,esi
c0003b2c:	83 fe 02             	cmp    esi,0x2
c0003b2f:	76 05                	jbe    c0003b36 <store_xdir+0x7d>
c0003b31:	b8 02 00 00 00       	mov    eax,0x2
c0003b36:	83 c4 0c             	add    esp,0xc
c0003b39:	5b                   	pop    ebx
c0003b3a:	5e                   	pop    esi
c0003b3b:	5f                   	pop    edi
c0003b3c:	5d                   	pop    ebp
c0003b3d:	c3                   	ret    

c0003b3e <dir_remove>:
c0003b3e:	57                   	push   edi
c0003b3f:	56                   	push   esi
c0003b40:	53                   	push   ebx
c0003b41:	89 c3                	mov    ebx,eax
c0003b43:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b46:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b48:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b4b:	83 fa ff             	cmp    edx,0xffffffff
c0003b4e:	74 09                	je     c0003b59 <dir_remove+0x1b>
c0003b50:	e8 62 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003b55:	85 c0                	test   eax,eax
c0003b57:	75 41                	jne    c0003b9a <dir_remove+0x5c>
c0003b59:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b5c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b5f:	89 f0                	mov    eax,esi
c0003b61:	e8 d3 e7 ff ff       	call   c0002339 <move_window>
c0003b66:	85 c0                	test   eax,eax
c0003b68:	75 26                	jne    c0003b90 <dir_remove+0x52>
c0003b6a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b6d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b70:	75 05                	jne    c0003b77 <dir_remove+0x39>
c0003b72:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b75:	eb 03                	jmp    c0003b7a <dir_remove+0x3c>
c0003b77:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b7a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b7e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b81:	73 17                	jae    c0003b9a <dir_remove+0x5c>
c0003b83:	31 d2                	xor    edx,edx
c0003b85:	89 d8                	mov    eax,ebx
c0003b87:	e8 83 fa ff ff       	call   c000360f <dir_next>
c0003b8c:	85 c0                	test   eax,eax
c0003b8e:	74 c9                	je     c0003b59 <dir_remove+0x1b>
c0003b90:	83 f8 04             	cmp    eax,0x4
c0003b93:	75 05                	jne    c0003b9a <dir_remove+0x5c>
c0003b95:	b8 02 00 00 00       	mov    eax,0x2
c0003b9a:	5b                   	pop    ebx
c0003b9b:	5e                   	pop    esi
c0003b9c:	5f                   	pop    edi
c0003b9d:	c3                   	ret    

c0003b9e <create_name>:
c0003b9e:	55                   	push   ebp
c0003b9f:	89 d5                	mov    ebp,edx
c0003ba1:	57                   	push   edi
c0003ba2:	89 c7                	mov    edi,eax
c0003ba4:	56                   	push   esi
c0003ba5:	31 f6                	xor    esi,esi
c0003ba7:	53                   	push   ebx
c0003ba8:	83 ec 3c             	sub    esp,0x3c
c0003bab:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bb1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bbe:	e8 72 e0 ff ff       	call   c0001c35 <tchar2uni>
c0003bc3:	89 c3                	mov    ebx,eax
c0003bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc8:	75 0a                	jne    c0003bd4 <create_name+0x36>
c0003bca:	b8 06 00 00 00       	mov    eax,0x6
c0003bcf:	e9 9e 02 00 00       	jmp    c0003e72 <create_name+0x2d4>
c0003bd4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd9:	76 0c                	jbe    c0003be7 <create_name+0x49>
c0003bdb:	c1 e8 10             	shr    eax,0x10
c0003bde:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003be2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003be6:	46                   	inc    esi
c0003be7:	66 83 fb 1f          	cmp    bx,0x1f
c0003beb:	76 4f                	jbe    c0003c3c <create_name+0x9e>
c0003bed:	66 83 fb 5c          	cmp    bx,0x5c
c0003bf1:	74 35                	je     c0003c28 <create_name+0x8a>
c0003bf3:	66 83 fb 2f          	cmp    bx,0x2f
c0003bf7:	74 2f                	je     c0003c28 <create_name+0x8a>
c0003bf9:	66 83 fb 7f          	cmp    bx,0x7f
c0003bfd:	77 11                	ja     c0003c10 <create_name+0x72>
c0003bff:	0f b7 d3             	movzx  edx,bx
c0003c02:	b8 b2 1f 02 c0       	mov    eax,0xc0021fb2
c0003c07:	e8 11 e0 ff ff       	call   c0001c1d <chk_chr>
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	75 ba                	jne    c0003bca <create_name+0x2c>
c0003c10:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c16:	77 b2                	ja     c0003bca <create_name+0x2c>
c0003c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c1c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c20:	46                   	inc    esi
c0003c21:	eb 97                	jmp    c0003bba <create_name+0x1c>
c0003c23:	40                   	inc    eax
c0003c24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c2c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c2e:	80 fa 2f             	cmp    dl,0x2f
c0003c31:	74 f0                	je     c0003c23 <create_name+0x85>
c0003c33:	80 fa 5c             	cmp    dl,0x5c
c0003c36:	74 eb                	je     c0003c23 <create_name+0x85>
c0003c38:	31 db                	xor    ebx,ebx
c0003c3a:	eb 02                	jmp    c0003c3e <create_name+0xa0>
c0003c3c:	b3 04                	mov    bl,0x4
c0003c3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c42:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c45:	85 f6                	test   esi,esi
c0003c47:	74 18                	je     c0003c61 <create_name+0xc3>
c0003c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c4d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c52:	66 83 f8 20          	cmp    ax,0x20
c0003c56:	74 06                	je     c0003c5e <create_name+0xc0>
c0003c58:	66 83 f8 2e          	cmp    ax,0x2e
c0003c5c:	75 03                	jne    c0003c61 <create_name+0xc3>
c0003c5e:	4e                   	dec    esi
c0003c5f:	eb e4                	jmp    c0003c45 <create_name+0xa7>
c0003c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c65:	31 ed                	xor    ebp,ebp
c0003c67:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c6d:	85 f6                	test   esi,esi
c0003c6f:	0f 84 55 ff ff ff    	je     c0003bca <create_name+0x2c>
c0003c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c79:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c7c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c80:	66 83 f8 20          	cmp    ax,0x20
c0003c84:	75 04                	jne    c0003c8a <create_name+0xec>
c0003c86:	89 d5                	mov    ebp,edx
c0003c88:	eb eb                	jmp    c0003c75 <create_name+0xd7>
c0003c8a:	85 ed                	test   ebp,ebp
c0003c8c:	75 06                	jne    c0003c94 <create_name+0xf6>
c0003c8e:	66 83 f8 2e          	cmp    ax,0x2e
c0003c92:	75 08                	jne    c0003c9c <create_name+0xfe>
c0003c94:	83 cb 03             	or     ebx,0x3
c0003c97:	eb 03                	jmp    c0003c9c <create_name+0xfe>
c0003c99:	4e                   	dec    esi
c0003c9a:	74 0c                	je     c0003ca8 <create_name+0x10a>
c0003c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ca0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ca6:	75 f1                	jne    c0003c99 <create_name+0xfb>
c0003ca8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cad:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cb0:	ba 20 00 00 00       	mov    edx,0x20
c0003cb5:	e8 35 df ff ff       	call   c0001bef <mem_set>
c0003cba:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cc2:	31 c9                	xor    ecx,ecx
c0003cc4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003ccc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cd4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd8:	66 85 ed             	test   bp,bp
c0003cdb:	0f 84 30 01 00 00    	je     c0003e11 <create_name+0x273>
c0003ce1:	66 83 fd 20          	cmp    bp,0x20
c0003ce5:	74 10                	je     c0003cf7 <create_name+0x159>
c0003ce7:	66 83 fd 2e          	cmp    bp,0x2e
c0003ceb:	75 13                	jne    c0003d00 <create_name+0x162>
c0003ced:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003cf1:	0f 84 6b 01 00 00    	je     c0003e62 <create_name+0x2c4>
c0003cf7:	83 cb 03             	or     ebx,0x3
c0003cfa:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cfe:	eb c9                	jmp    c0003cc9 <create_name+0x12b>
c0003d00:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d04:	73 0b                	jae    c0003d11 <create_name+0x173>
c0003d06:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d0a:	75 47                	jne    c0003d53 <create_name+0x1b5>
c0003d0c:	e9 51 01 00 00       	jmp    c0003e62 <create_name+0x2c4>
c0003d11:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d16:	75 10                	jne    c0003d28 <create_name+0x18a>
c0003d18:	83 cb 03             	or     ebx,0x3
c0003d1b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d23:	e9 e9 00 00 00       	jmp    c0003e11 <create_name+0x273>
c0003d28:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2c:	74 0d                	je     c0003d3b <create_name+0x19d>
c0003d2e:	83 cb 03             	or     ebx,0x3
c0003d31:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d35:	0f 87 d6 00 00 00    	ja     c0003e11 <create_name+0x273>
c0003d3b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d40:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d44:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d4c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d51:	eb a7                	jmp    c0003cfa <create_name+0x15c>
c0003d53:	66 83 fd 7f          	cmp    bp,0x7f
c0003d57:	76 68                	jbe    c0003dc1 <create_name+0x223>
c0003d59:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d5d:	88 da                	mov    dl,bl
c0003d5f:	83 ca 02             	or     edx,0x2
c0003d62:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d66:	50                   	push   eax
c0003d67:	50                   	push   eax
c0003d68:	68 b5 01 00 00       	push   0x1b5
c0003d6d:	55                   	push   ebp
c0003d6e:	e8 81 48 00 00       	call   c00085f4 <ff_uni2oem>
c0003d73:	83 c4 10             	add    esp,0x10
c0003d76:	89 c5                	mov    ebp,eax
c0003d78:	a8 80                	test   al,0x80
c0003d7a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d7e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d82:	74 0c                	je     c0003d90 <create_name+0x1f2>
c0003d84:	83 e5 7f             	and    ebp,0x7f
c0003d87:	0f b6 ad 00 1f 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffde100]
c0003d8e:	eb 2a                	jmp    c0003dba <create_name+0x21c>
c0003d90:	66 3d ff 00          	cmp    ax,0xff
c0003d94:	76 24                	jbe    c0003dba <create_name+0x21c>
c0003d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d9a:	48                   	dec    eax
c0003d9b:	39 c8                	cmp    eax,ecx
c0003d9d:	77 0c                	ja     c0003dab <create_name+0x20d>
c0003d9f:	83 cb 03             	or     ebx,0x3
c0003da2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003da6:	e9 4f ff ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003dab:	89 e8                	mov    eax,ebp
c0003dad:	88 d3                	mov    bl,dl
c0003daf:	66 c1 e8 08          	shr    ax,0x8
c0003db3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003db7:	41                   	inc    ecx
c0003db8:	eb 4b                	jmp    c0003e05 <create_name+0x267>
c0003dba:	88 d3                	mov    bl,dl
c0003dbc:	66 85 ed             	test   bp,bp
c0003dbf:	74 19                	je     c0003dda <create_name+0x23c>
c0003dc1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dc5:	0f b7 d5             	movzx  edx,bp
c0003dc8:	b8 bb 1f 02 c0       	mov    eax,0xc0021fbb
c0003dcd:	e8 4b de ff ff       	call   c0001c1d <chk_chr>
c0003dd2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 0a                	je     c0003de4 <create_name+0x246>
c0003dda:	83 cb 03             	or     ebx,0x3
c0003ddd:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003de2:	eb 21                	jmp    c0003e05 <create_name+0x267>
c0003de4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003de7:	66 83 f8 19          	cmp    ax,0x19
c0003deb:	77 07                	ja     c0003df4 <create_name+0x256>
c0003ded:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003df2:	eb 11                	jmp    c0003e05 <create_name+0x267>
c0003df4:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 08                	ja     c0003e05 <create_name+0x267>
c0003dfd:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e02:	83 ed 20             	sub    ebp,0x20
c0003e05:	89 e8                	mov    eax,ebp
c0003e07:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e0b:	41                   	inc    ecx
c0003e0c:	e9 e9 fe ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003e11:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e15:	75 04                	jne    c0003e1b <create_name+0x27d>
c0003e17:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e1b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e20:	75 05                	jne    c0003e27 <create_name+0x289>
c0003e22:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e27:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2b:	83 e0 0c             	and    eax,0xc
c0003e2e:	3c 0c                	cmp    al,0xc
c0003e30:	74 0b                	je     c0003e3d <create_name+0x29f>
c0003e32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e36:	83 e0 03             	and    eax,0x3
c0003e39:	3c 03                	cmp    al,0x3
c0003e3b:	75 05                	jne    c0003e42 <create_name+0x2a4>
c0003e3d:	83 cb 02             	or     ebx,0x2
c0003e40:	eb 19                	jmp    c0003e5b <create_name+0x2bd>
c0003e42:	f6 c3 02             	test   bl,0x2
c0003e45:	75 14                	jne    c0003e5b <create_name+0x2bd>
c0003e47:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e4c:	74 03                	je     c0003e51 <create_name+0x2b3>
c0003e4e:	83 cb 10             	or     ebx,0x10
c0003e51:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e56:	74 03                	je     c0003e5b <create_name+0x2bd>
c0003e58:	83 cb 08             	or     ebx,0x8
c0003e5b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e5e:	31 c0                	xor    eax,eax
c0003e60:	eb 10                	jmp    c0003e72 <create_name+0x2d4>
c0003e62:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e67:	0f 85 ce fe ff ff    	jne    c0003d3b <create_name+0x19d>
c0003e6d:	e9 a6 fe ff ff       	jmp    c0003d18 <create_name+0x17a>
c0003e72:	83 c4 3c             	add    esp,0x3c
c0003e75:	5b                   	pop    ebx
c0003e76:	5e                   	pop    esi
c0003e77:	5f                   	pop    edi
c0003e78:	5d                   	pop    ebp
c0003e79:	c3                   	ret    

c0003e7a <xname_sum>:
c0003e7a:	56                   	push   esi
c0003e7b:	53                   	push   ebx
c0003e7c:	89 c6                	mov    esi,eax
c0003e7e:	51                   	push   ecx
c0003e7f:	31 db                	xor    ebx,ebx
c0003e81:	83 c6 02             	add    esi,0x2
c0003e84:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e88:	66 85 c0             	test   ax,ax
c0003e8b:	74 1f                	je     c0003eac <xname_sum+0x32>
c0003e8d:	83 ec 0c             	sub    esp,0xc
c0003e90:	66 d1 cb             	ror    bx,1
c0003e93:	50                   	push   eax
c0003e94:	e8 67 48 00 00       	call   c0008700 <ff_wtoupper>
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	0f b6 d0             	movzx  edx,al
c0003e9f:	66 c1 e8 08          	shr    ax,0x8
c0003ea3:	01 d3                	add    ebx,edx
c0003ea5:	66 d1 cb             	ror    bx,1
c0003ea8:	01 c3                	add    ebx,eax
c0003eaa:	eb d5                	jmp    c0003e81 <xname_sum+0x7>
c0003eac:	89 d8                	mov    eax,ebx
c0003eae:	5a                   	pop    edx
c0003eaf:	5b                   	pop    ebx
c0003eb0:	5e                   	pop    esi
c0003eb1:	c3                   	ret    

c0003eb2 <create_xdir>:
c0003eb2:	55                   	push   ebp
c0003eb3:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb8:	57                   	push   edi
c0003eb9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ebe:	56                   	push   esi
c0003ebf:	31 ff                	xor    edi,edi
c0003ec1:	53                   	push   ebx
c0003ec2:	be 40 00 00 00       	mov    esi,0x40
c0003ec7:	89 c3                	mov    ebx,eax
c0003ec9:	83 ec 1c             	sub    esp,0x1c
c0003ecc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ed0:	31 d2                	xor    edx,edx
c0003ed2:	e8 18 dd ff ff       	call   c0001bef <mem_set>
c0003ed7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eda:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ede:	31 c9                	xor    ecx,ecx
c0003ee0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ee3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ee7:	83 c6 02             	add    esi,0x2
c0003eea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003eee:	66 85 ed             	test   bp,bp
c0003ef1:	74 12                	je     c0003f05 <create_xdir+0x53>
c0003ef3:	0f b6 c1             	movzx  eax,cl
c0003ef6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003efa:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003efe:	66 83 fd 01          	cmp    bp,0x1
c0003f02:	80 d9 ff             	sbb    cl,0xff
c0003f05:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f08:	0f b7 d5             	movzx  edx,bp
c0003f0b:	83 c6 02             	add    esi,0x2
c0003f0e:	e8 ba dc ff ff       	call   c0001bcd <st_word>
c0003f13:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f19:	75 d3                	jne    c0003eee <create_xdir+0x3c>
c0003f1b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f26:	0f b6 c1             	movzx  eax,cl
c0003f29:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f2e:	74 07                	je     c0003f37 <create_xdir+0x85>
c0003f30:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f35:	eb a9                	jmp    c0003ee0 <create_xdir+0x2e>
c0003f37:	8d 47 02             	lea    eax,[edi+0x2]
c0003f3a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f3d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f40:	89 d0                	mov    eax,edx
c0003f42:	e8 33 ff ff ff       	call   c0003e7a <xname_sum>
c0003f47:	83 c4 1c             	add    esp,0x1c
c0003f4a:	0f b7 d0             	movzx  edx,ax
c0003f4d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f50:	5b                   	pop    ebx
c0003f51:	5e                   	pop    esi
c0003f52:	5f                   	pop    edi
c0003f53:	5d                   	pop    ebp
c0003f54:	e9 74 dc ff ff       	jmp    c0001bcd <st_word>

c0003f59 <cmp_lfn>:
c0003f59:	55                   	push   ebp
c0003f5a:	57                   	push   edi
c0003f5b:	89 d7                	mov    edi,edx
c0003f5d:	56                   	push   esi
c0003f5e:	53                   	push   ebx
c0003f5f:	83 ec 1c             	sub    esp,0x1c
c0003f62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f66:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f69:	e8 ed db ff ff       	call   c0001b5b <ld_word>
c0003f6e:	66 85 c0             	test   ax,ax
c0003f71:	74 07                	je     c0003f7a <cmp_lfn+0x21>
c0003f73:	31 c0                	xor    eax,eax
c0003f75:	e9 9a 00 00 00       	jmp    c0004014 <cmp_lfn+0xbb>
c0003f7a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f7c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f81:	83 e3 3f             	and    ebx,0x3f
c0003f84:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f8c:	4b                   	dec    ebx
c0003f8d:	6b db 0d             	imul   ebx,ebx,0xd
c0003f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f94:	0f b6 80 80 1f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde080]
c0003f9b:	01 f8                	add    eax,edi
c0003f9d:	e8 b9 db ff ff       	call   c0001b5b <ld_word>
c0003fa2:	66 85 ed             	test   bp,bp
c0003fa5:	89 c6                	mov    esi,eax
c0003fa7:	74 3c                	je     c0003fe5 <cmp_lfn+0x8c>
c0003fa9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003faf:	77 c2                	ja     c0003f73 <cmp_lfn+0x1a>
c0003fb1:	83 ec 0c             	sub    esp,0xc
c0003fb4:	0f b7 c0             	movzx  eax,ax
c0003fb7:	50                   	push   eax
c0003fb8:	e8 43 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fbd:	89 c5                	mov    ebp,eax
c0003fbf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fca:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fd1:	e8 2a 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fd6:	83 c4 10             	add    esp,0x10
c0003fd9:	39 c5                	cmp    ebp,eax
c0003fdb:	75 96                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fdd:	89 f5                	mov    ebp,esi
c0003fdf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fe3:	eb 04                	jmp    c0003fe9 <cmp_lfn+0x90>
c0003fe5:	66 46                	inc    si
c0003fe7:	75 8a                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fe9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fed:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ff2:	75 9c                	jne    c0003f90 <cmp_lfn+0x37>
c0003ff4:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ff7:	74 16                	je     c000400f <cmp_lfn+0xb6>
c0003ff9:	66 85 ed             	test   bp,bp
c0003ffc:	74 11                	je     c000400f <cmp_lfn+0xb6>
c0003ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004002:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004007:	0f 94 c0             	sete   al
c000400a:	0f b6 c0             	movzx  eax,al
c000400d:	eb 05                	jmp    c0004014 <cmp_lfn+0xbb>
c000400f:	b8 01 00 00 00       	mov    eax,0x1
c0004014:	83 c4 1c             	add    esp,0x1c
c0004017:	5b                   	pop    ebx
c0004018:	5e                   	pop    esi
c0004019:	5f                   	pop    edi
c000401a:	5d                   	pop    ebp
c000401b:	c3                   	ret    

c000401c <dir_find>:
c000401c:	55                   	push   ebp
c000401d:	31 d2                	xor    edx,edx
c000401f:	57                   	push   edi
c0004020:	56                   	push   esi
c0004021:	53                   	push   ebx
c0004022:	89 c3                	mov    ebx,eax
c0004024:	83 ec 1c             	sub    esp,0x1c
c0004027:	8b 30                	mov    esi,DWORD PTR [eax]
c0004029:	e8 89 f0 ff ff       	call   c00030b7 <dir_sdi>
c000402e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004031:	85 c0                	test   eax,eax
c0004033:	0f 85 9e 01 00 00    	jne    c00041d7 <dir_find+0x1bb>
c0004039:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000403c:	0f 85 8d 00 00 00    	jne    c00040cf <dir_find+0xb3>
c0004042:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004045:	e8 30 fe ff ff       	call   c0003e7a <xname_sum>
c000404a:	89 c7                	mov    edi,eax
c000404c:	31 d2                	xor    edx,edx
c000404e:	89 d8                	mov    eax,ebx
c0004050:	e8 72 f8 ff ff       	call   c00038c7 <dir_read>
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 5e 01 00 00    	jne    c00041bb <dir_find+0x19f>
c000405d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004060:	8d 41 24             	lea    eax,[ecx+0x24]
c0004063:	e8 f3 da ff ff       	call   c0001b5b <ld_word>
c0004068:	66 39 f8             	cmp    ax,di
c000406b:	75 df                	jne    c000404c <dir_find+0x30>
c000406d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004070:	31 ed                	xor    ebp,ebp
c0004072:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004076:	ba 40 00 00 00       	mov    edx,0x40
c000407b:	89 e9                	mov    ecx,ebp
c000407d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004081:	0f 84 42 01 00 00    	je     c00041c9 <dir_find+0x1ad>
c0004087:	f6 c2 1f             	test   dl,0x1f
c000408a:	75 03                	jne    c000408f <dir_find+0x73>
c000408c:	83 c2 02             	add    edx,0x2
c000408f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004093:	89 d0                	mov    eax,edx
c0004095:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004098:	e8 be da ff ff       	call   c0001b5b <ld_word>
c000409d:	83 ec 0c             	sub    esp,0xc
c00040a0:	0f b7 c0             	movzx  eax,ax
c00040a3:	50                   	push   eax
c00040a4:	e8 57 46 00 00       	call   c0008700 <ff_wtoupper>
c00040a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040ad:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040b0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b7:	e8 44 46 00 00       	call   c0008700 <ff_wtoupper>
c00040bc:	83 c4 10             	add    esp,0x10
c00040bf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040c3:	75 87                	jne    c000404c <dir_find+0x30>
c00040c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c9:	45                   	inc    ebp
c00040ca:	83 c2 02             	add    edx,0x2
c00040cd:	eb ac                	jmp    c000407b <dir_find+0x5f>
c00040cf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040d6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040e6:	89 f0                	mov    eax,esi
c00040e8:	e8 4c e2 ff ff       	call   c0002339 <move_window>
c00040ed:	85 c0                	test   eax,eax
c00040ef:	0f 85 c6 00 00 00    	jne    c00041bb <dir_find+0x19f>
c00040f5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f8:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040fb:	84 c9                	test   cl,cl
c00040fd:	0f 84 bd 00 00 00    	je     c00041c0 <dir_find+0x1a4>
c0004103:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004106:	88 d0                	mov    al,dl
c0004108:	83 e0 3f             	and    eax,0x3f
c000410b:	80 f9 e5             	cmp    cl,0xe5
c000410e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004111:	0f 84 87 00 00 00    	je     c000419e <dir_find+0x182>
c0004117:	80 e2 08             	and    dl,0x8
c000411a:	74 06                	je     c0004122 <dir_find+0x106>
c000411c:	3c 0f                	cmp    al,0xf
c000411e:	75 7e                	jne    c000419e <dir_find+0x182>
c0004120:	eb 04                	jmp    c0004126 <dir_find+0x10a>
c0004122:	3c 0f                	cmp    al,0xf
c0004124:	75 4c                	jne    c0004172 <dir_find+0x156>
c0004126:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000412a:	75 7e                	jne    c00041aa <dir_find+0x18e>
c000412c:	f6 c1 40             	test   cl,0x40
c000412f:	74 12                	je     c0004143 <dir_find+0x127>
c0004131:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004134:	83 e1 bf             	and    ecx,0xffffffbf
c0004137:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000413b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000413e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004141:	eb 06                	jmp    c0004149 <dir_find+0x12d>
c0004143:	89 f8                	mov    eax,edi
c0004145:	38 c8                	cmp    al,cl
c0004147:	75 5c                	jne    c00041a5 <dir_find+0x189>
c0004149:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000414d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004152:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004155:	75 53                	jne    c00041aa <dir_find+0x18e>
c0004157:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000415b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000415e:	89 ea                	mov    edx,ebp
c0004160:	e8 f4 fd ff ff       	call   c0003f59 <cmp_lfn>
c0004165:	85 c0                	test   eax,eax
c0004167:	74 41                	je     c00041aa <dir_find+0x18e>
c0004169:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000416d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004170:	eb 38                	jmp    c00041aa <dir_find+0x18e>
c0004172:	89 f8                	mov    eax,edi
c0004174:	84 c0                	test   al,al
c0004176:	75 0d                	jne    c0004185 <dir_find+0x169>
c0004178:	89 e8                	mov    eax,ebp
c000417a:	e8 98 de ff ff       	call   c0002017 <sum_sfn>
c000417f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004183:	74 52                	je     c00041d7 <dir_find+0x1bb>
c0004185:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004189:	75 13                	jne    c000419e <dir_find+0x182>
c000418b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000418e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004193:	89 e8                	mov    eax,ebp
c0004195:	e8 60 da ff ff       	call   c0001bfa <mem_cmp>
c000419a:	85 c0                	test   eax,eax
c000419c:	74 39                	je     c00041d7 <dir_find+0x1bb>
c000419e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041aa:	31 d2                	xor    edx,edx
c00041ac:	89 d8                	mov    eax,ebx
c00041ae:	e8 5c f4 ff ff       	call   c000360f <dir_next>
c00041b3:	85 c0                	test   eax,eax
c00041b5:	0f 84 25 ff ff ff    	je     c00040e0 <dir_find+0xc4>
c00041bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041be:	eb 17                	jmp    c00041d7 <dir_find+0x1bb>
c00041c0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041c7:	eb 0e                	jmp    c00041d7 <dir_find+0x1bb>
c00041c9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041cc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041d1:	0f 85 75 fe ff ff    	jne    c000404c <dir_find+0x30>
c00041d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041da:	83 c4 1c             	add    esp,0x1c
c00041dd:	5b                   	pop    ebx
c00041de:	5e                   	pop    esi
c00041df:	5f                   	pop    edi
c00041e0:	5d                   	pop    ebp
c00041e1:	c3                   	ret    

c00041e2 <dir_register>:
c00041e2:	55                   	push   ebp
c00041e3:	57                   	push   edi
c00041e4:	56                   	push   esi
c00041e5:	be 06 00 00 00       	mov    esi,0x6
c00041ea:	53                   	push   ebx
c00041eb:	83 ec 6c             	sub    esp,0x6c
c00041ee:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041f2:	0f 85 62 02 00 00    	jne    c000445a <dir_register+0x278>
c00041f8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041fa:	31 ff                	xor    edi,edi
c00041fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ff:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004204:	74 03                	je     c0004209 <dir_register+0x27>
c0004206:	47                   	inc    edi
c0004207:	eb f6                	jmp    c00041ff <dir_register+0x1d>
c0004209:	89 c3                	mov    ebx,eax
c000420b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000420f:	0f 85 e1 00 00 00    	jne    c00042f6 <dir_register+0x114>
c0004215:	83 c7 0e             	add    edi,0xe
c0004218:	b9 0f 00 00 00       	mov    ecx,0xf
c000421d:	89 f8                	mov    eax,edi
c000421f:	31 d2                	xor    edx,edx
c0004221:	f7 f1                	div    ecx
c0004223:	8d 50 02             	lea    edx,[eax+0x2]
c0004226:	89 c7                	mov    edi,eax
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 12 f8 ff ff       	call   c0003a41 <dir_alloc>
c000422f:	89 c6                	mov    esi,eax
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 21 02 00 00    	jne    c000445a <dir_register+0x278>
c0004239:	81 c7 01 00 00 08    	add    edi,0x8000001
c000423f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004242:	c1 e7 05             	shl    edi,0x5
c0004245:	29 f8                	sub    eax,edi
c0004247:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000424d:	a8 04                	test   al,0x4
c000424f:	0f 84 91 00 00 00    	je     c00042e6 <dir_register+0x104>
c0004255:	83 e0 fb             	and    eax,0xfffffffb
c0004258:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 25 ec ff ff       	call   c0002e87 <fill_first_frag>
c0004262:	85 c0                	test   eax,eax
c0004264:	0f 85 ee 01 00 00    	jne    c0004458 <dir_register+0x276>
c000426a:	83 c9 ff             	or     ecx,0xffffffff
c000426d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004270:	89 d8                	mov    eax,ebx
c0004272:	e8 db eb ff ff       	call   c0002e52 <fill_last_frag>
c0004277:	85 c0                	test   eax,eax
c0004279:	0f 85 d9 01 00 00    	jne    c0004458 <dir_register+0x276>
c000427f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004283:	74 61                	je     c00042e6 <dir_register+0x104>
c0004285:	89 da                	mov    edx,ebx
c0004287:	8d 44 24 14          	lea    eax,[esp+0x14]
c000428b:	e8 ea f5 ff ff       	call   c000387a <load_obj_xdir>
c0004290:	85 c0                	test   eax,eax
c0004292:	0f 85 c0 01 00 00    	jne    c0004458 <dir_register+0x276>
c0004298:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000429c:	31 c9                	xor    ecx,ecx
c000429e:	c1 e2 09             	shl    edx,0x9
c00042a1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042a4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042a7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042aa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b0:	83 c0 38             	add    eax,0x38
c00042b3:	e8 1c d9 ff ff       	call   c0001bd4 <st_qword>
c00042b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042be:	83 c0 28             	add    eax,0x28
c00042c1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042c4:	e8 0b d9 ff ff       	call   c0001bd4 <st_qword>
c00042c9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042cf:	83 c8 01             	or     eax,0x1
c00042d2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d9:	e8 db f7 ff ff       	call   c0003ab9 <store_xdir>
c00042de:	85 c0                	test   eax,eax
c00042e0:	0f 85 72 01 00 00    	jne    c0004458 <dir_register+0x276>
c00042e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042ec:	e8 c1 fb ff ff       	call   c0003eb2 <create_xdir>
c00042f1:	e9 64 01 00 00       	jmp    c000445a <dir_register+0x278>
c00042f6:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f9:	b9 0c 00 00 00       	mov    ecx,0xc
c00042fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004302:	89 c2                	mov    edx,eax
c0004304:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004308:	e8 cd d8 ff ff       	call   c0001bda <mem_cpy>
c000430d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004312:	74 58                	je     c000436c <dir_register+0x18a>
c0004314:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004318:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004320:	83 ec 0c             	sub    esp,0xc
c0004323:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000432a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000432e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004332:	e8 24 dc ff ff       	call   c0001f5b <gen_numname>
c0004337:	89 d8                	mov    eax,ebx
c0004339:	e8 de fc ff ff       	call   c000401c <dir_find>
c000433e:	83 c4 10             	add    esp,0x10
c0004341:	89 c6                	mov    esi,eax
c0004343:	85 c0                	test   eax,eax
c0004345:	75 15                	jne    c000435c <dir_register+0x17a>
c0004347:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000434b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004350:	75 ce                	jne    c0004320 <dir_register+0x13e>
c0004352:	be 07 00 00 00       	mov    esi,0x7
c0004357:	e9 fe 00 00 00       	jmp    c000445a <dir_register+0x278>
c000435c:	83 f8 04             	cmp    eax,0x4
c000435f:	0f 85 f5 00 00 00    	jne    c000445a <dir_register+0x278>
c0004365:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004369:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000436c:	b9 01 00 00 00       	mov    ecx,0x1
c0004371:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004376:	74 0f                	je     c0004387 <dir_register+0x1a5>
c0004378:	b9 0d 00 00 00       	mov    ecx,0xd
c000437d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004380:	31 d2                	xor    edx,edx
c0004382:	f7 f1                	div    ecx
c0004384:	8d 48 01             	lea    ecx,[eax+0x1]
c0004387:	89 ca                	mov    edx,ecx
c0004389:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000438d:	89 d8                	mov    eax,ebx
c000438f:	e8 ad f6 ff ff       	call   c0003a41 <dir_alloc>
c0004394:	89 c6                	mov    esi,eax
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 bc 00 00 00    	jne    c000445a <dir_register+0x278>
c000439e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043a2:	49                   	dec    ecx
c00043a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043a7:	74 6a                	je     c0004413 <dir_register+0x231>
c00043a9:	89 c8                	mov    eax,ecx
c00043ab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043ae:	c1 e0 05             	shl    eax,0x5
c00043b1:	29 c2                	sub    edx,eax
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 fd ec ff ff       	call   c00030b7 <dir_sdi>
c00043ba:	89 c6                	mov    esi,eax
c00043bc:	85 c0                	test   eax,eax
c00043be:	0f 85 96 00 00 00    	jne    c000445a <dir_register+0x278>
c00043c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c8:	e8 4a dc ff ff       	call   c0002017 <sum_sfn>
c00043cd:	0f b6 f8             	movzx  edi,al
c00043d0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043d3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043d6:	89 e8                	mov    eax,ebp
c00043d8:	e8 5c df ff ff       	call   c0002339 <move_window>
c00043dd:	89 c6                	mov    esi,eax
c00043df:	85 c0                	test   eax,eax
c00043e1:	75 77                	jne    c000445a <dir_register+0x278>
c00043e3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043eb:	83 ec 0c             	sub    esp,0xc
c00043ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043f1:	57                   	push   edi
c00043f2:	e8 e0 da ff ff       	call   c0001ed7 <put_lfn>
c00043f7:	31 d2                	xor    edx,edx
c00043f9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043fd:	89 d8                	mov    eax,ebx
c00043ff:	e8 0b f2 ff ff       	call   c000360f <dir_next>
c0004404:	83 c4 10             	add    esp,0x10
c0004407:	89 c6                	mov    esi,eax
c0004409:	85 c0                	test   eax,eax
c000440b:	75 4d                	jne    c000445a <dir_register+0x278>
c000440d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004411:	75 bd                	jne    c00043d0 <dir_register+0x1ee>
c0004413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004416:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004419:	89 e8                	mov    eax,ebp
c000441b:	e8 19 df ff ff       	call   c0002339 <move_window>
c0004420:	89 c6                	mov    esi,eax
c0004422:	85 c0                	test   eax,eax
c0004424:	75 34                	jne    c000445a <dir_register+0x278>
c0004426:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004429:	b9 20 00 00 00       	mov    ecx,0x20
c000442e:	31 d2                	xor    edx,edx
c0004430:	e8 ba d7 ff ff       	call   c0001bef <mem_set>
c0004435:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004438:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000443c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004441:	e8 94 d7 ff ff       	call   c0001bda <mem_cpy>
c0004446:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004449:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000444c:	83 e0 18             	and    eax,0x18
c000444f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004452:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004456:	eb 02                	jmp    c000445a <dir_register+0x278>
c0004458:	89 c6                	mov    esi,eax
c000445a:	83 c4 6c             	add    esp,0x6c
c000445d:	89 f0                	mov    eax,esi
c000445f:	5b                   	pop    ebx
c0004460:	5e                   	pop    esi
c0004461:	5f                   	pop    edi
c0004462:	5d                   	pop    ebp
c0004463:	c3                   	ret    

c0004464 <sync_fs>:
c0004464:	56                   	push   esi
c0004465:	53                   	push   ebx
c0004466:	53                   	push   ebx
c0004467:	89 c3                	mov    ebx,eax
c0004469:	e8 37 de ff ff       	call   c00022a5 <sync_window>
c000446e:	85 c0                	test   eax,eax
c0004470:	0f 85 b1 00 00 00    	jne    c0004527 <sync_fs+0xc3>
c0004476:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004479:	0f 85 8e 00 00 00    	jne    c000450d <sync_fs+0xa9>
c000447f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004483:	0f 85 84 00 00 00    	jne    c000450d <sync_fs+0xa9>
c0004489:	b9 00 02 00 00       	mov    ecx,0x200
c000448e:	8d 73 54             	lea    esi,[ebx+0x54]
c0004491:	31 d2                	xor    edx,edx
c0004493:	89 f0                	mov    eax,esi
c0004495:	e8 55 d7 ff ff       	call   c0001bef <mem_set>
c000449a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044a0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044a5:	e8 23 d7 ff ff       	call   c0001bcd <st_word>
c00044aa:	ba 52 52 61 41       	mov    edx,0x41615252
c00044af:	89 f0                	mov    eax,esi
c00044b1:	e8 1b d7 ff ff       	call   c0001bd1 <st_dword>
c00044b6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044bc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044c1:	e8 0b d7 ff ff       	call   c0001bd1 <st_dword>
c00044c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044cf:	e8 fd d6 ff ff       	call   c0001bd1 <st_dword>
c00044d4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044d7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044dd:	e8 ef d6 ff ff       	call   c0001bd1 <st_dword>
c00044e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e8:	83 c0 01             	add    eax,0x1
c00044eb:	83 d2 00             	adc    edx,0x0
c00044ee:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044f7:	6a 01                	push   0x1
c00044f9:	52                   	push   edx
c00044fa:	50                   	push   eax
c00044fb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044ff:	56                   	push   esi
c0004500:	50                   	push   eax
c0004501:	e8 20 d6 ff ff       	call   c0001b26 <disk_write>
c0004506:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000450a:	83 c4 20             	add    esp,0x20
c000450d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004511:	51                   	push   ecx
c0004512:	6a 00                	push   0x0
c0004514:	6a 00                	push   0x0
c0004516:	50                   	push   eax
c0004517:	e8 20 d6 ff ff       	call   c0001b3c <disk_ioctl>
c000451c:	83 c4 10             	add    esp,0x10
c000451f:	85 c0                	test   eax,eax
c0004521:	0f 95 c0             	setne  al
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	5a                   	pop    edx
c0004528:	5b                   	pop    ebx
c0004529:	5e                   	pop    esi
c000452a:	c3                   	ret    

c000452b <create_partition>:
c000452b:	55                   	push   ebp
c000452c:	0f b6 c0             	movzx  eax,al
c000452f:	57                   	push   edi
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	83 ec 60             	sub    esp,0x60
c0004535:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004539:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000453d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004541:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004545:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004549:	50                   	push   eax
c000454a:	6a 01                	push   0x1
c000454c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004550:	e8 e7 d5 ff ff       	call   c0001b3c <disk_ioctl>
c0004555:	83 c4 10             	add    esp,0x10
c0004558:	85 c0                	test   eax,eax
c000455a:	74 0a                	je     c0004566 <create_partition+0x3b>
c000455c:	b8 01 00 00 00       	mov    eax,0x1
c0004561:	e9 67 05 00 00       	jmp    c0004acd <create_partition+0x5a2>
c0004566:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000456a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000456e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004572:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004576:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000457b:	0f 86 ed 03 00 00    	jbe    c000496e <create_partition+0x443>
c0004581:	83 c0 df             	add    eax,0xffffffdf
c0004584:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000458c:	83 d2 ff             	adc    edx,0xffffffff
c000458f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004593:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000459b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000459f:	83 c0 bd             	add    eax,0xffffffbd
c00045a2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a9:	83 d2 ff             	adc    edx,0xffffffff
c00045ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045b4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045bc:	be 22 00 00 00       	mov    esi,0x22
c00045c1:	31 ff                	xor    edi,edi
c00045c3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045cb:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045d3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045db:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045df:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e5:	75 0e                	jne    c00045f5 <create_partition+0xca>
c00045e7:	b9 00 02 00 00       	mov    ecx,0x200
c00045ec:	31 d2                	xor    edx,edx
c00045ee:	89 d8                	mov    eax,ebx
c00045f0:	e8 fa d5 ff ff       	call   c0001bef <mem_set>
c00045f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004601:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004604:	0f 84 23 01 00 00    	je     c000472d <create_partition+0x202>
c000460a:	89 f0                	mov    eax,esi
c000460c:	89 fa                	mov    edx,edi
c000460e:	05 ff 07 00 00       	add    eax,0x7ff
c0004613:	83 d2 00             	adc    edx,0x0
c0004616:	89 c1                	mov    ecx,eax
c0004618:	89 d7                	mov    edi,edx
c000461a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004620:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004624:	89 ce                	mov    esi,ecx
c0004626:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000462a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000462e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004632:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004635:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004639:	89 04 24             	mov    DWORD PTR [esp],eax
c000463c:	b8 64 00 00 00       	mov    eax,0x64
c0004641:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004644:	b8 00 00 00 00       	mov    eax,0x0
c0004649:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000464d:	72 41                	jb     c0004690 <create_partition+0x165>
c000464f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004657:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000465b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004660:	01 c1                	add    ecx,eax
c0004662:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004666:	f7 24 24             	mul    DWORD PTR [esp]
c0004669:	6a 00                	push   0x0
c000466b:	01 ca                	add    edx,ecx
c000466d:	6a 64                	push   0x64
c000466f:	52                   	push   edx
c0004670:	50                   	push   eax
c0004671:	e8 2e c8 01 00       	call   c0020ea4 <__udivdi3>
c0004676:	83 c4 10             	add    esp,0x10
c0004679:	05 ff 07 00 00       	add    eax,0x7ff
c000467e:	83 d2 00             	adc    edx,0x0
c0004681:	89 c1                	mov    ecx,eax
c0004683:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004687:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000468d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004690:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004693:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004697:	01 f0                	add    eax,esi
c0004699:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000469d:	11 fa                	adc    edx,edi
c000469f:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046a3:	19 d1                	sbb    ecx,edx
c00046a5:	73 2e                	jae    c00046d5 <create_partition+0x1aa>
c00046a7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046ab:	89 f8                	mov    eax,edi
c00046ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046b4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c0:	73 6b                	jae    c000472d <create_partition+0x202>
c00046c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046ca:	29 f0                	sub    eax,esi
c00046cc:	19 fa                	sbb    edx,edi
c00046ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00046d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046dc:	74 4f                	je     c000472d <create_partition+0x202>
c00046de:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046e1:	b9 10 00 00 00       	mov    ecx,0x10
c00046e6:	ba 90 1f 02 c0       	mov    edx,0xc0021f90
c00046eb:	e8 ea d4 ff ff       	call   c0001bda <mem_cpy>
c00046f0:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046f4:	b9 10 00 00 00       	mov    ecx,0x10
c00046f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046fd:	e8 2c db ff ff       	call   c000222e <make_rand>
c0004702:	89 f2                	mov    edx,esi
c0004704:	89 f9                	mov    ecx,edi
c0004706:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000470a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000470e:	e8 c1 d4 ff ff       	call   c0001bd4 <st_qword>
c0004713:	03 34 24             	add    esi,DWORD PTR [esp]
c0004716:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000471a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000471e:	89 f2                	mov    edx,esi
c0004720:	89 f9                	mov    ecx,edi
c0004722:	83 c2 ff             	add    edx,0xffffffff
c0004725:	83 d1 ff             	adc    ecx,0xffffffff
c0004728:	e8 a7 d4 ff ff       	call   c0001bd4 <st_qword>
c000472d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004731:	83 e8 80             	sub    eax,0xffffff80
c0004734:	89 c5                	mov    ebp,eax
c0004736:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000473a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004740:	75 6b                	jne    c00047ad <create_partition+0x282>
c0004742:	45                   	inc    ebp
c0004743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004747:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000474c:	e8 39 da ff ff       	call   c000218a <crc32>
c0004751:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004757:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000475b:	75 e5                	jne    c0004742 <create_partition+0x217>
c000475d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004761:	31 d2                	xor    edx,edx
c0004763:	83 ec 0c             	sub    esp,0xc
c0004766:	c1 ed 09             	shr    ebp,0x9
c0004769:	6a 01                	push   0x1
c000476b:	8d 45 02             	lea    eax,[ebp+0x2]
c000476e:	52                   	push   edx
c000476f:	50                   	push   eax
c0004770:	53                   	push   ebx
c0004771:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004775:	e8 ac d3 ff ff       	call   c0001b26 <disk_write>
c000477a:	83 c4 20             	add    esp,0x20
c000477d:	85 c0                	test   eax,eax
c000477f:	0f 85 d7 fd ff ff    	jne    c000455c <create_partition+0x31>
c0004785:	83 ec 0c             	sub    esp,0xc
c0004788:	31 d2                	xor    edx,edx
c000478a:	6a 01                	push   0x1
c000478c:	89 e8                	mov    eax,ebp
c000478e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004792:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004796:	52                   	push   edx
c0004797:	50                   	push   eax
c0004798:	53                   	push   ebx
c0004799:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479d:	e8 84 d3 ff ff       	call   c0001b26 <disk_write>
c00047a2:	83 c4 20             	add    esp,0x20
c00047a5:	85 c0                	test   eax,eax
c00047a7:	0f 85 af fd ff ff    	jne    c000455c <create_partition+0x31>
c00047ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047b5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ba:	74 0d                	je     c00047c9 <create_partition+0x29e>
c00047bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047c4:	e9 12 fe ff ff       	jmp    c00045db <create_partition+0xb0>
c00047c9:	31 d2                	xor    edx,edx
c00047cb:	b9 00 02 00 00       	mov    ecx,0x200
c00047d0:	89 d8                	mov    eax,ebx
c00047d2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047d5:	e8 15 d4 ff ff       	call   c0001bef <mem_set>
c00047da:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047dd:	b9 10 00 00 00       	mov    ecx,0x10
c00047e2:	ba 80 1e 02 c0       	mov    edx,0xc0021e80
c00047e7:	89 d8                	mov    eax,ebx
c00047e9:	e8 ec d3 ff ff       	call   c0001bda <mem_cpy>
c00047ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047f2:	8d 43 58             	lea    eax,[ebx+0x58]
c00047f5:	f7 d2                	not    edx
c00047f7:	e8 d5 d3 ff ff       	call   c0001bd1 <st_dword>
c00047fc:	8d 43 18             	lea    eax,[ebx+0x18]
c00047ff:	31 c9                	xor    ecx,ecx
c0004801:	89 04 24             	mov    DWORD PTR [esp],eax
c0004804:	ba 01 00 00 00       	mov    edx,0x1
c0004809:	e8 c6 d3 ff ff       	call   c0001bd4 <st_qword>
c000480e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004812:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004816:	83 c2 ff             	add    edx,0xffffffff
c0004819:	89 e8                	mov    eax,ebp
c000481b:	83 d1 ff             	adc    ecx,0xffffffff
c000481e:	e8 b1 d3 ff ff       	call   c0001bd4 <st_qword>
c0004823:	31 c9                	xor    ecx,ecx
c0004825:	8d 43 28             	lea    eax,[ebx+0x28]
c0004828:	ba 22 00 00 00       	mov    edx,0x22
c000482d:	e8 a2 d3 ff ff       	call   c0001bd4 <st_qword>
c0004832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004836:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000483a:	83 c2 de             	add    edx,0xffffffde
c000483d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004840:	83 d1 ff             	adc    ecx,0xffffffff
c0004843:	31 f6                	xor    esi,esi
c0004845:	e8 8a d3 ff ff       	call   c0001bd4 <st_qword>
c000484a:	8d 43 54             	lea    eax,[ebx+0x54]
c000484d:	ba 80 00 00 00       	mov    edx,0x80
c0004852:	e8 7a d3 ff ff       	call   c0001bd1 <st_dword>
c0004857:	8d 43 50             	lea    eax,[ebx+0x50]
c000485a:	ba 80 00 00 00       	mov    edx,0x80
c000485f:	e8 6d d3 ff ff       	call   c0001bd1 <st_dword>
c0004864:	ba 02 00 00 00       	mov    edx,0x2
c0004869:	89 f8                	mov    eax,edi
c000486b:	e8 61 d3 ff ff       	call   c0001bd1 <st_dword>
c0004870:	8d 53 38             	lea    edx,[ebx+0x38]
c0004873:	b9 10 00 00 00       	mov    ecx,0x10
c0004878:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000487c:	e8 ad d9 ff ff       	call   c000222e <make_rand>
c0004881:	83 c8 ff             	or     eax,0xffffffff
c0004884:	46                   	inc    esi
c0004885:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000488a:	e8 fb d8 ff ff       	call   c000218a <crc32>
c000488f:	83 fe 5c             	cmp    esi,0x5c
c0004892:	75 f0                	jne    c0004884 <create_partition+0x359>
c0004894:	f7 d0                	not    eax
c0004896:	8d 73 10             	lea    esi,[ebx+0x10]
c0004899:	89 c2                	mov    edx,eax
c000489b:	89 f0                	mov    eax,esi
c000489d:	e8 2f d3 ff ff       	call   c0001bd1 <st_dword>
c00048a2:	83 ec 0c             	sub    esp,0xc
c00048a5:	6a 01                	push   0x1
c00048a7:	6a 00                	push   0x0
c00048a9:	6a 01                	push   0x1
c00048ab:	53                   	push   ebx
c00048ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048b0:	e8 71 d2 ff ff       	call   c0001b26 <disk_write>
c00048b5:	83 c4 20             	add    esp,0x20
c00048b8:	85 c0                	test   eax,eax
c00048ba:	0f 85 9c fc ff ff    	jne    c000455c <create_partition+0x31>
c00048c0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c8:	83 c2 ff             	add    edx,0xffffffff
c00048cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048ce:	83 d1 ff             	adc    ecx,0xffffffff
c00048d1:	e8 fe d2 ff ff       	call   c0001bd4 <st_qword>
c00048d6:	ba 01 00 00 00       	mov    edx,0x1
c00048db:	31 c9                	xor    ecx,ecx
c00048dd:	89 e8                	mov    eax,ebp
c00048df:	e8 f0 d2 ff ff       	call   c0001bd4 <st_qword>
c00048e4:	89 f8                	mov    eax,edi
c00048e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048ee:	31 ff                	xor    edi,edi
c00048f0:	e8 df d2 ff ff       	call   c0001bd4 <st_qword>
c00048f5:	89 f0                	mov    eax,esi
c00048f7:	31 d2                	xor    edx,edx
c00048f9:	e8 d3 d2 ff ff       	call   c0001bd1 <st_dword>
c00048fe:	83 c8 ff             	or     eax,0xffffffff
c0004901:	47                   	inc    edi
c0004902:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004907:	e8 7e d8 ff ff       	call   c000218a <crc32>
c000490c:	83 ff 5c             	cmp    edi,0x5c
c000490f:	75 f0                	jne    c0004901 <create_partition+0x3d6>
c0004911:	f7 d0                	not    eax
c0004913:	89 c2                	mov    edx,eax
c0004915:	89 f0                	mov    eax,esi
c0004917:	e8 b5 d2 ff ff       	call   c0001bd1 <st_dword>
c000491c:	83 ec 0c             	sub    esp,0xc
c000491f:	6a 01                	push   0x1
c0004921:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004925:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004929:	83 c0 ff             	add    eax,0xffffffff
c000492c:	83 d2 ff             	adc    edx,0xffffffff
c000492f:	52                   	push   edx
c0004930:	50                   	push   eax
c0004931:	53                   	push   ebx
c0004932:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004936:	e8 eb d1 ff ff       	call   c0001b26 <disk_write>
c000493b:	83 c4 20             	add    esp,0x20
c000493e:	85 c0                	test   eax,eax
c0004940:	0f 85 16 fc ff ff    	jne    c000455c <create_partition+0x31>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	b9 00 02 00 00       	mov    ecx,0x200
c000494f:	e8 9b d2 ff ff       	call   c0001bef <mem_set>
c0004954:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000495a:	b9 10 00 00 00       	mov    ecx,0x10
c000495f:	ba 90 1e 02 c0       	mov    edx,0xc0021e90
c0004964:	e8 71 d2 ff ff       	call   c0001bda <mem_cpy>
c0004969:	e9 21 01 00 00       	jmp    c0004a8f <create_partition+0x564>
c000496e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004972:	b9 05 00 00 00       	mov    ecx,0x5
c0004977:	89 04 24             	mov    DWORD PTR [esp],eax
c000497a:	bf 08 00 00 00       	mov    edi,0x8
c000497f:	89 f8                	mov    eax,edi
c0004981:	31 d2                	xor    edx,edx
c0004983:	0f b6 f0             	movzx  esi,al
c0004986:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004989:	f7 f6                	div    esi
c000498b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004990:	76 0a                	jbe    c000499c <create_partition+0x471>
c0004992:	d1 e7                	shl    edi,1
c0004994:	49                   	dec    ecx
c0004995:	75 e8                	jne    c000497f <create_partition+0x454>
c0004997:	bf ff ff ff ff       	mov    edi,0xffffffff
c000499c:	b9 00 02 00 00       	mov    ecx,0x200
c00049a1:	31 d2                	xor    edx,edx
c00049a3:	89 d8                	mov    eax,ebx
c00049a5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049ab:	e8 3f d2 ff ff       	call   c0001bef <mem_set>
c00049b0:	b9 64 00 00 00       	mov    ecx,0x64
c00049b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b8:	31 d2                	xor    edx,edx
c00049ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049c2:	f7 f1                	div    ecx
c00049c4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049cd:	89 f8                	mov    eax,edi
c00049cf:	0f b6 c0             	movzx  eax,al
c00049d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049d6:	e9 80 00 00 00       	jmp    c0004a5b <create_partition+0x530>
c00049db:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049de:	29 cf                	sub    edi,ecx
c00049e0:	89 ca                	mov    edx,ecx
c00049e2:	89 f0                	mov    eax,esi
c00049e4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e9:	e8 e3 d1 ff ff       	call   c0001bd1 <st_dword>
c00049ee:	8d 46 04             	lea    eax,[esi+0x4]
c00049f1:	89 fa                	mov    edx,edi
c00049f3:	83 c6 10             	add    esi,0x10
c00049f6:	e8 d6 d1 ff ff       	call   c0001bd1 <st_dword>
c00049fb:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049ff:	31 d2                	xor    edx,edx
c0004a01:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a04:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a08:	89 c8                	mov    eax,ecx
c0004a0a:	01 f9                	add    ecx,edi
c0004a0c:	f7 f5                	div    ebp
c0004a0e:	89 d5                	mov    ebp,edx
c0004a10:	31 d2                	xor    edx,edx
c0004a12:	45                   	inc    ebp
c0004a13:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a17:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a1a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a1d:	89 c2                	mov    edx,eax
c0004a1f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a22:	c1 ea 02             	shr    edx,0x2
c0004a25:	83 e2 c0             	and    edx,0xffffffc0
c0004a28:	09 ea                	or     edx,ebp
c0004a2a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a2f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a32:	31 d2                	xor    edx,edx
c0004a34:	f7 f5                	div    ebp
c0004a36:	89 d7                	mov    edi,edx
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	47                   	inc    edi
c0004a3b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a3f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a42:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a45:	89 c5                	mov    ebp,eax
c0004a47:	c1 ed 02             	shr    ebp,0x2
c0004a4a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a4d:	09 ef                	or     edi,ebp
c0004a4f:	89 fa                	mov    edx,edi
c0004a51:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a54:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a59:	74 34                	je     c0004a8f <create_partition+0x564>
c0004a5b:	85 c9                	test   ecx,ecx
c0004a5d:	74 30                	je     c0004a8f <create_partition+0x564>
c0004a5f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a62:	76 2b                	jbe    c0004a8f <create_partition+0x564>
c0004a64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a68:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a6c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a6f:	83 ff 64             	cmp    edi,0x64
c0004a72:	76 4b                	jbe    c0004abf <create_partition+0x594>
c0004a74:	89 f8                	mov    eax,edi
c0004a76:	01 c8                	add    eax,ecx
c0004a78:	0f 82 5d ff ff ff    	jb     c00049db <create_partition+0x4b0>
c0004a7e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a81:	0f 87 54 ff ff ff    	ja     c00049db <create_partition+0x4b0>
c0004a87:	85 ff                	test   edi,edi
c0004a89:	0f 85 51 ff ff ff    	jne    c00049e0 <create_partition+0x4b5>
c0004a8f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a95:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a9a:	e8 2e d1 ff ff       	call   c0001bcd <st_word>
c0004a9f:	83 ec 0c             	sub    esp,0xc
c0004aa2:	6a 01                	push   0x1
c0004aa4:	6a 00                	push   0x0
c0004aa6:	6a 00                	push   0x0
c0004aa8:	53                   	push   ebx
c0004aa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aad:	e8 74 d0 ff ff       	call   c0001b26 <disk_write>
c0004ab2:	83 c4 20             	add    esp,0x20
c0004ab5:	85 c0                	test   eax,eax
c0004ab7:	0f 95 c0             	setne  al
c0004aba:	0f b6 c0             	movzx  eax,al
c0004abd:	eb 0e                	jmp    c0004acd <create_partition+0x5a2>
c0004abf:	74 07                	je     c0004ac8 <create_partition+0x59d>
c0004ac1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ac6:	eb ac                	jmp    c0004a74 <create_partition+0x549>
c0004ac8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004acb:	eb a7                	jmp    c0004a74 <create_partition+0x549>
c0004acd:	83 c4 5c             	add    esp,0x5c
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	5d                   	pop    ebp
c0004ad4:	c3                   	ret    

c0004ad5 <get_fileinfo>:
c0004ad5:	55                   	push   ebp
c0004ad6:	57                   	push   edi
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 1c             	sub    esp,0x1c
c0004adc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ade:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ae2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ae6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004aec:	0f 84 dc 01 00 00    	je     c0004cce <get_fileinfo+0x1f9>
c0004af2:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004af5:	75 0f                	jne    c0004b06 <get_fileinfo+0x31>
c0004af7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004afa:	83 c4 1c             	add    esp,0x1c
c0004afd:	5b                   	pop    ebx
c0004afe:	5e                   	pop    esi
c0004aff:	5f                   	pop    edi
c0004b00:	5d                   	pop    ebp
c0004b01:	e9 58 d5 ff ff       	jmp    c000205e <get_xfileinfo>
c0004b06:	89 d3                	mov    ebx,edx
c0004b08:	89 c6                	mov    esi,eax
c0004b0a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b0e:	74 6a                	je     c0004b7a <get_fileinfo+0xa5>
c0004b10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b18:	31 ed                	xor    ebp,ebp
c0004b1a:	31 ff                	xor    edi,edi
c0004b1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b27:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b2b:	66 85 d2             	test   dx,dx
c0004b2e:	74 3e                	je     c0004b6e <get_fileinfo+0x99>
c0004b30:	66 85 ed             	test   bp,bp
c0004b33:	75 0c                	jne    c0004b41 <get_fileinfo+0x6c>
c0004b35:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b3b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b3f:	76 22                	jbe    c0004b63 <get_fileinfo+0x8e>
c0004b41:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b46:	89 e8                	mov    eax,ebp
c0004b48:	29 f9                	sub    ecx,edi
c0004b4a:	c1 e0 10             	shl    eax,0x10
c0004b4d:	09 d0                	or     eax,edx
c0004b4f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b53:	e8 a3 d1 ff ff       	call   c0001cfb <put_utf>
c0004b58:	84 c0                	test   al,al
c0004b5a:	74 10                	je     c0004b6c <get_fileinfo+0x97>
c0004b5c:	0f b6 c0             	movzx  eax,al
c0004b5f:	31 d2                	xor    edx,edx
c0004b61:	01 c7                	add    edi,eax
c0004b63:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b68:	89 d5                	mov    ebp,edx
c0004b6a:	eb b0                	jmp    c0004b1c <get_fileinfo+0x47>
c0004b6c:	31 ff                	xor    edi,edi
c0004b6e:	66 85 ed             	test   bp,bp
c0004b71:	74 02                	je     c0004b75 <get_fileinfo+0xa0>
c0004b73:	31 ff                	xor    edi,edi
c0004b75:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b7a:	31 ff                	xor    edi,edi
c0004b7c:	31 c9                	xor    ecx,ecx
c0004b7e:	83 f9 0a             	cmp    ecx,0xa
c0004b81:	0f 87 ad 00 00 00    	ja     c0004c34 <get_fileinfo+0x15f>
c0004b87:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b8d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b91:	66 83 fa 20          	cmp    dx,0x20
c0004b95:	0f 84 92 00 00 00    	je     c0004c2d <get_fileinfo+0x158>
c0004b9b:	66 83 fa 05          	cmp    dx,0x5
c0004b9f:	75 05                	jne    c0004ba6 <get_fileinfo+0xd1>
c0004ba1:	ba e5 00 00 00       	mov    edx,0xe5
c0004ba6:	83 ff 0b             	cmp    edi,0xb
c0004ba9:	77 0b                	ja     c0004bb6 <get_fileinfo+0xe1>
c0004bab:	83 fd 09             	cmp    ebp,0x9
c0004bae:	75 06                	jne    c0004bb6 <get_fileinfo+0xe1>
c0004bb0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bb5:	47                   	inc    edi
c0004bb6:	0f b7 c2             	movzx  eax,dx
c0004bb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbd:	e8 6d d0 ff ff       	call   c0001c2f <dbc_1st>
c0004bc2:	85 c0                	test   eax,eax
c0004bc4:	74 2f                	je     c0004bf5 <get_fileinfo+0x120>
c0004bc6:	83 fd 08             	cmp    ebp,0x8
c0004bc9:	74 2a                	je     c0004bf5 <get_fileinfo+0x120>
c0004bcb:	83 fd 0b             	cmp    ebp,0xb
c0004bce:	74 25                	je     c0004bf5 <get_fileinfo+0x120>
c0004bd0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bd7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bdb:	e8 52 d0 ff ff       	call   c0001c32 <dbc_2nd>
c0004be0:	85 c0                	test   eax,eax
c0004be2:	74 11                	je     c0004bf5 <get_fileinfo+0x120>
c0004be4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bed:	c1 e2 08             	shl    edx,0x8
c0004bf0:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004bf3:	09 c2                	or     edx,eax
c0004bf5:	0f b7 d2             	movzx  edx,dx
c0004bf8:	50                   	push   eax
c0004bf9:	50                   	push   eax
c0004bfa:	68 b5 01 00 00       	push   0x1b5
c0004bff:	52                   	push   edx
c0004c00:	e8 87 3a 00 00       	call   c000868c <ff_oem2uni>
c0004c05:	83 c4 10             	add    esp,0x10
c0004c08:	66 85 c0             	test   ax,ax
c0004c0b:	75 04                	jne    c0004c11 <get_fileinfo+0x13c>
c0004c0d:	31 ff                	xor    edi,edi
c0004c0f:	eb 23                	jmp    c0004c34 <get_fileinfo+0x15f>
c0004c11:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c16:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c1a:	29 f9                	sub    ecx,edi
c0004c1c:	0f b7 c0             	movzx  eax,ax
c0004c1f:	e8 d7 d0 ff ff       	call   c0001cfb <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 e5                	je     c0004c0d <get_fileinfo+0x138>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	01 c7                	add    edi,eax
c0004c2d:	89 e9                	mov    ecx,ebp
c0004c2f:	e9 4a ff ff ff       	jmp    c0004b7e <get_fileinfo+0xa9>
c0004c34:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c39:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c3d:	75 54                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c3f:	85 ff                	test   edi,edi
c0004c41:	75 0b                	jne    c0004c4e <get_fileinfo+0x179>
c0004c43:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c47:	ba 01 00 00 00       	mov    edx,0x1
c0004c4c:	eb 33                	jmp    c0004c81 <get_fileinfo+0x1ac>
c0004c4e:	b1 08                	mov    cl,0x8
c0004c50:	31 d2                	xor    edx,edx
c0004c52:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c58:	84 c0                	test   al,al
c0004c5a:	74 25                	je     c0004c81 <get_fileinfo+0x1ac>
c0004c5c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c60:	74 16                	je     c0004c78 <get_fileinfo+0x1a3>
c0004c62:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c65:	66 83 ff 19          	cmp    di,0x19
c0004c69:	77 0f                	ja     c0004c7a <get_fileinfo+0x1a5>
c0004c6b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c6e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c71:	74 07                	je     c0004c7a <get_fileinfo+0x1a5>
c0004c73:	83 c0 20             	add    eax,0x20
c0004c76:	eb 02                	jmp    c0004c7a <get_fileinfo+0x1a5>
c0004c78:	b1 10                	mov    cl,0x10
c0004c7a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c7e:	42                   	inc    edx
c0004c7f:	eb d1                	jmp    c0004c52 <get_fileinfo+0x17d>
c0004c81:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c89:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c8d:	75 04                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c8f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c93:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c96:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c99:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	83 c0 1c             	add    eax,0x1c
c0004ca2:	e8 c1 ce ff ff       	call   c0001b68 <ld_dword>
c0004ca7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cae:	89 03                	mov    DWORD PTR [ebx],eax
c0004cb0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cb3:	83 c0 16             	add    eax,0x16
c0004cb6:	e8 a0 ce ff ff       	call   c0001b5b <ld_word>
c0004cbb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cbf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc2:	83 c0 18             	add    eax,0x18
c0004cc5:	e8 91 ce ff ff       	call   c0001b5b <ld_word>
c0004cca:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cce:	83 c4 1c             	add    esp,0x1c
c0004cd1:	5b                   	pop    ebx
c0004cd2:	5e                   	pop    esi
c0004cd3:	5f                   	pop    edi
c0004cd4:	5d                   	pop    ebp
c0004cd5:	c3                   	ret    

c0004cd6 <ld_clust.isra.0>:
c0004cd6:	56                   	push   esi
c0004cd7:	89 c6                	mov    esi,eax
c0004cd9:	53                   	push   ebx
c0004cda:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cdd:	89 d3                	mov    ebx,edx
c0004cdf:	e8 77 ce ff ff       	call   c0001b5b <ld_word>
c0004ce4:	0f b7 c8             	movzx  ecx,ax
c0004ce7:	89 f0                	mov    eax,esi
c0004ce9:	3c 03                	cmp    al,0x3
c0004ceb:	75 0d                	jne    c0004cfa <ld_clust.isra.0+0x24>
c0004ced:	8d 43 14             	lea    eax,[ebx+0x14]
c0004cf0:	e8 66 ce ff ff       	call   c0001b5b <ld_word>
c0004cf5:	c1 e0 10             	shl    eax,0x10
c0004cf8:	09 c1                	or     ecx,eax
c0004cfa:	89 c8                	mov    eax,ecx
c0004cfc:	5b                   	pop    ebx
c0004cfd:	5e                   	pop    esi
c0004cfe:	c3                   	ret    

c0004cff <st_clust.isra.1>:
c0004cff:	56                   	push   esi
c0004d00:	89 c6                	mov    esi,eax
c0004d02:	53                   	push   ebx
c0004d03:	89 d3                	mov    ebx,edx
c0004d05:	0f b7 d1             	movzx  edx,cx
c0004d08:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d0b:	e8 bd ce ff ff       	call   c0001bcd <st_word>
c0004d10:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d13:	75 0f                	jne    c0004d24 <st_clust.isra.1+0x25>
c0004d15:	c1 e9 10             	shr    ecx,0x10
c0004d18:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d1b:	89 ca                	mov    edx,ecx
c0004d1d:	5b                   	pop    ebx
c0004d1e:	5e                   	pop    esi
c0004d1f:	e9 a9 ce ff ff       	jmp    c0001bcd <st_word>
c0004d24:	5b                   	pop    ebx
c0004d25:	5e                   	pop    esi
c0004d26:	c3                   	ret    

c0004d27 <init_alloc_info.isra.2>:
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	89 d3                	mov    ebx,edx
c0004d2d:	51                   	push   ecx
c0004d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d30:	83 c0 34             	add    eax,0x34
c0004d33:	e8 30 ce ff ff       	call   c0001b68 <ld_dword>
c0004d38:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d3d:	83 c0 38             	add    eax,0x38
c0004d40:	e8 3b ce ff ff       	call   c0001b80 <ld_qword>
c0004d45:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d48:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d50:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d57:	83 e0 02             	and    eax,0x2
c0004d5a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d5d:	5b                   	pop    ebx
c0004d5e:	5b                   	pop    ebx
c0004d5f:	5e                   	pop    esi
c0004d60:	c3                   	ret    

c0004d61 <follow_path>:
c0004d61:	56                   	push   esi
c0004d62:	53                   	push   ebx
c0004d63:	89 c3                	mov    ebx,eax
c0004d65:	83 ec 14             	sub    esp,0x14
c0004d68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d6c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d72:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d74:	80 fa 5c             	cmp    dl,0x5c
c0004d77:	75 07                	jne    c0004d80 <follow_path+0x1f>
c0004d79:	40                   	inc    eax
c0004d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7e:	eb ee                	jmp    c0004d6e <follow_path+0xd>
c0004d80:	80 fa 2f             	cmp    dl,0x2f
c0004d83:	74 f4                	je     c0004d79 <follow_path+0x18>
c0004d85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d8c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d93:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d96:	77 52                	ja     c0004dea <follow_path+0x89>
c0004d98:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d9c:	31 d2                	xor    edx,edx
c0004d9e:	89 d8                	mov    eax,ebx
c0004da0:	e8 12 e3 ff ff       	call   c00030b7 <dir_sdi>
c0004da5:	eb 7c                	jmp    c0004e23 <follow_path+0xc2>
c0004da7:	89 d8                	mov    eax,ebx
c0004da9:	e8 6e f2 ff ff       	call   c000401c <dir_find>
c0004dae:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004db1:	85 c0                	test   eax,eax
c0004db3:	75 46                	jne    c0004dfb <follow_path+0x9a>
c0004db5:	80 e2 04             	and    dl,0x4
c0004db8:	75 69                	jne    c0004e23 <follow_path+0xc2>
c0004dba:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dbe:	74 5e                	je     c0004e1e <follow_path+0xbd>
c0004dc0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dc2:	3c 04                	cmp    al,0x4
c0004dc4:	75 41                	jne    c0004e07 <follow_path+0xa6>
c0004dc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dcd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dd0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dd3:	30 c0                	xor    al,al
c0004dd5:	09 d0                	or     eax,edx
c0004dd7:	89 da                	mov    edx,ebx
c0004dd9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ddc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ddf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004de2:	8d 46 10             	lea    eax,[esi+0x10]
c0004de5:	e8 3d ff ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004dea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dee:	89 d8                	mov    eax,ebx
c0004df0:	e8 a9 ed ff ff       	call   c0003b9e <create_name>
c0004df5:	85 c0                	test   eax,eax
c0004df7:	74 ae                	je     c0004da7 <follow_path+0x46>
c0004df9:	eb 28                	jmp    c0004e23 <follow_path+0xc2>
c0004dfb:	83 f8 04             	cmp    eax,0x4
c0004dfe:	75 23                	jne    c0004e23 <follow_path+0xc2>
c0004e00:	80 e2 04             	and    dl,0x4
c0004e03:	74 19                	je     c0004e1e <follow_path+0xbd>
c0004e05:	eb 1c                	jmp    c0004e23 <follow_path+0xc2>
c0004e07:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e0a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e10:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e14:	e8 bd fe ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0004e19:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e1c:	eb cc                	jmp    c0004dea <follow_path+0x89>
c0004e1e:	b8 05 00 00 00       	mov    eax,0x5
c0004e23:	83 c4 14             	add    esp,0x14
c0004e26:	5b                   	pop    ebx
c0004e27:	5e                   	pop    esi
c0004e28:	c3                   	ret    

c0004e29 <f_mount>:
c0004e29:	53                   	push   ebx
c0004e2a:	83 ec 18             	sub    esp,0x18
c0004e2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e3d:	e8 fb d2 ff ff       	call   c000213d <get_ldnumber>
c0004e42:	89 c2                	mov    edx,eax
c0004e44:	b8 0b 00 00 00       	mov    eax,0xb
c0004e49:	85 d2                	test   edx,edx
c0004e4b:	78 39                	js     c0004e86 <f_mount+0x5d>
c0004e4d:	8b 04 95 00 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9f00]
c0004e54:	85 c0                	test   eax,eax
c0004e56:	74 03                	je     c0004e5b <f_mount+0x32>
c0004e58:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e5f:	85 c0                	test   eax,eax
c0004e61:	74 03                	je     c0004e66 <f_mount+0x3d>
c0004e63:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6a:	89 04 95 00 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9f00],eax
c0004e71:	31 c0                	xor    eax,eax
c0004e73:	84 db                	test   bl,bl
c0004e75:	74 0f                	je     c0004e86 <f_mount+0x5d>
c0004e77:	31 c9                	xor    ecx,ecx
c0004e79:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e7d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e81:	e8 65 d7 ff ff       	call   c00025eb <mount_volume>
c0004e86:	83 c4 18             	add    esp,0x18
c0004e89:	5b                   	pop    ebx
c0004e8a:	c3                   	ret    

c0004e8b <f_open>:
c0004e8b:	55                   	push   ebp
c0004e8c:	bd 09 00 00 00       	mov    ebp,0x9
c0004e91:	57                   	push   edi
c0004e92:	56                   	push   esi
c0004e93:	53                   	push   ebx
c0004e94:	83 ec 7c             	sub    esp,0x7c
c0004e97:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e9e:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ea5:	85 db                	test   ebx,ebx
c0004ea7:	0f 84 10 04 00 00    	je     c00052bd <f_open+0x432>
c0004ead:	89 fe                	mov    esi,edi
c0004eaf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eb3:	83 e6 3f             	and    esi,0x3f
c0004eb6:	89 f0                	mov    eax,esi
c0004eb8:	0f b6 c8             	movzx  ecx,al
c0004ebb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ec2:	e8 24 d7 ff ff       	call   c00025eb <mount_volume>
c0004ec7:	89 c5                	mov    ebp,eax
c0004ec9:	85 c0                	test   eax,eax
c0004ecb:	0f 85 e6 03 00 00    	jne    c00052b7 <f_open+0x42c>
c0004ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ede:	83 ec 0c             	sub    esp,0xc
c0004ee1:	68 60 04 00 00       	push   0x460
c0004ee6:	e8 d9 36 00 00       	call   c00085c4 <ff_memalloc>
c0004eeb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eef:	83 c4 10             	add    esp,0x10
c0004ef2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ef7:	0f 84 c0 03 00 00    	je     c00052bd <f_open+0x432>
c0004efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f01:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f05:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f0b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f0e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f11:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f18:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f1c:	e8 40 fe ff ff       	call   c0004d61 <follow_path>
c0004f21:	89 c5                	mov    ebp,eax
c0004f23:	85 c0                	test   eax,eax
c0004f25:	75 0c                	jne    c0004f33 <f_open+0xa8>
c0004f27:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f2c:	79 05                	jns    c0004f33 <f_open+0xa8>
c0004f2e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f33:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f39:	0f 84 84 01 00 00    	je     c00050c3 <f_open+0x238>
c0004f3f:	85 ed                	test   ebp,ebp
c0004f41:	74 20                	je     c0004f63 <f_open+0xd8>
c0004f43:	83 fd 04             	cmp    ebp,0x4
c0004f46:	0f 85 58 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f50:	83 ce 08             	or     esi,0x8
c0004f53:	e8 8a f2 ff ff       	call   c00041e2 <dir_register>
c0004f58:	89 c5                	mov    ebp,eax
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 2f                	je     c0004f8d <f_open+0x102>
c0004f5e:	e9 41 03 00 00       	jmp    c00052a4 <f_open+0x419>
c0004f63:	bd 07 00 00 00       	mov    ebp,0x7
c0004f68:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f6d:	0f 85 31 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f73:	bd 08 00 00 00       	mov    ebp,0x8
c0004f78:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f7e:	0f 85 20 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f84:	83 e7 08             	and    edi,0x8
c0004f87:	0f 84 65 01 00 00    	je     c00050f2 <f_open+0x267>
c0004f8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f91:	8a 02                	mov    al,BYTE PTR [edx]
c0004f93:	3c 04                	cmp    al,0x4
c0004f95:	0f 85 97 00 00 00    	jne    c0005032 <f_open+0x1a7>
c0004f9b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f9e:	89 13                	mov    DWORD PTR [ebx],edx
c0004fa0:	89 da                	mov    edx,ebx
c0004fa2:	e8 80 fd ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004fa7:	31 d2                	xor    edx,edx
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fb2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fb5:	83 c0 02             	add    eax,0x2
c0004fb8:	e8 32 cc ff ff       	call   c0001bef <mem_set>
c0004fbd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fc2:	31 d2                	xor    edx,edx
c0004fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fcb:	83 c0 26             	add    eax,0x26
c0004fce:	e8 1c cc ff ff       	call   c0001bef <mem_set>
c0004fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fda:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fde:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fe3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fe6:	83 c0 08             	add    eax,0x8
c0004fe9:	e8 e3 cb ff ff       	call   c0001bd1 <st_dword>
c0004fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ff2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff5:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ffd:	e8 b7 ea ff ff       	call   c0003ab9 <store_xdir>
c0005002:	89 c5                	mov    ebp,eax
c0005004:	85 c0                	test   eax,eax
c0005006:	0f 85 98 02 00 00    	jne    c00052a4 <f_open+0x419>
c000500c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500f:	85 d2                	test   edx,edx
c0005011:	0f 84 db 00 00 00    	je     c00050f2 <f_open+0x267>
c0005017:	31 c9                	xor    ecx,ecx
c0005019:	89 d8                	mov    eax,ebx
c000501b:	e8 8e e3 ff ff       	call   c00033ae <remove_chain>
c0005020:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005024:	89 c5                	mov    ebp,eax
c0005026:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005029:	48                   	dec    eax
c000502a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000502d:	e9 b8 00 00 00       	jmp    c00050ea <f_open+0x25f>
c0005032:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005036:	89 ea                	mov    edx,ebp
c0005038:	e8 99 fc ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000503d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005042:	89 c7                	mov    edi,eax
c0005044:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005047:	e8 85 cb ff ff       	call   c0001bd1 <st_dword>
c000504c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005050:	31 c9                	xor    ecx,ecx
c0005052:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000505a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000505e:	e8 9c fc ff ff       	call   c0004cff <st_clust.isra.1>
c0005063:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005067:	31 d2                	xor    edx,edx
c0005069:	83 c0 1c             	add    eax,0x1c
c000506c:	e8 60 cb ff ff       	call   c0001bd1 <st_dword>
c0005071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005075:	85 ff                	test   edi,edi
c0005077:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000507b:	74 75                	je     c00050f2 <f_open+0x267>
c000507d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005081:	31 c9                	xor    ecx,ecx
c0005083:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005086:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000508d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005091:	89 fa                	mov    edx,edi
c0005093:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005097:	e8 12 e3 ff ff       	call   c00033ae <remove_chain>
c000509c:	89 c5                	mov    ebp,eax
c000509e:	85 c0                	test   eax,eax
c00050a0:	0f 85 fe 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	4f                   	dec    edi
c00050b3:	e8 81 d2 ff ff       	call   c0002339 <move_window>
c00050b8:	89 c5                	mov    ebp,eax
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050c1:	eb 27                	jmp    c00050ea <f_open+0x25f>
c00050c3:	85 ed                	test   ebp,ebp
c00050c5:	0f 85 d9 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050cb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050cf:	bd 04 00 00 00       	mov    ebp,0x4
c00050d4:	a8 10                	test   al,0x10
c00050d6:	0f 85 c8 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050dc:	83 e7 02             	and    edi,0x2
c00050df:	74 11                	je     c00050f2 <f_open+0x267>
c00050e1:	bd 07 00 00 00       	mov    ebp,0x7
c00050e6:	a8 01                	test   al,0x1
c00050e8:	eb 02                	jmp    c00050ec <f_open+0x261>
c00050ea:	85 ed                	test   ebp,ebp
c00050ec:	0f 85 b2 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050f2:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f8:	74 03                	je     c00050fd <f_open+0x272>
c00050fa:	83 ce 40             	or     esi,0x40
c00050fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005101:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005104:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005107:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000510a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000510d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005111:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005114:	8a 02                	mov    al,BYTE PTR [edx]
c0005116:	3c 04                	cmp    al,0x4
c0005118:	75 2a                	jne    c0005144 <f_open+0x2b9>
c000511a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000511e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005123:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000512a:	30 c0                	xor    al,al
c000512c:	09 c8                	or     eax,ecx
c000512e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005131:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005135:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005138:	8d 42 10             	lea    eax,[edx+0x10]
c000513b:	89 da                	mov    edx,ebx
c000513d:	e8 e5 fb ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005142:	eb 1c                	jmp    c0005160 <f_open+0x2d5>
c0005144:	89 fa                	mov    edx,edi
c0005146:	e8 8b fb ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000514b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000514e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005151:	e8 12 ca ff ff       	call   c0001b68 <ld_dword>
c0005156:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000515d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005164:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000516b:	89 03                	mov    DWORD PTR [ebx],eax
c000516d:	31 d2                	xor    edx,edx
c000516f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005173:	b9 00 02 00 00       	mov    ecx,0x200
c0005178:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000517c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005180:	89 f0                	mov    eax,esi
c0005182:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005189:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000518c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005193:	8d 43 50             	lea    eax,[ebx+0x50]
c0005196:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000519d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a8:	e8 42 ca ff ff       	call   c0001bef <mem_set>
c00051ad:	83 e6 20             	and    esi,0x20
c00051b0:	75 07                	jne    c00051b9 <f_open+0x32e>
c00051b2:	31 ed                	xor    ebp,ebp
c00051b4:	e9 eb 00 00 00       	jmp    c00052a4 <f_open+0x419>
c00051b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051cb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051cf:	74 e1                	je     c00051b2 <f_open+0x327>
c00051d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051dc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051e3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051e6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051ea:	31 ff                	xor    edi,edi
c00051ec:	c1 e5 09             	shl    ebp,0x9
c00051ef:	89 ee                	mov    esi,ebp
c00051f1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051f5:	89 f8                	mov    eax,edi
c00051f7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051fb:	73 22                	jae    c000521f <f_open+0x394>
c00051fd:	89 d8                	mov    eax,ebx
c00051ff:	e8 bd dc ff ff       	call   c0002ec1 <get_fat>
c0005204:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005208:	89 c2                	mov    edx,eax
c000520a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000520e:	83 f8 01             	cmp    eax,0x1
c0005211:	76 10                	jbe    c0005223 <f_open+0x398>
c0005213:	83 f8 ff             	cmp    eax,0xffffffff
c0005216:	75 d9                	jne    c00051f1 <f_open+0x366>
c0005218:	bd 01 00 00 00       	mov    ebp,0x1
c000521d:	eb 09                	jmp    c0005228 <f_open+0x39d>
c000521f:	31 ed                	xor    ebp,ebp
c0005221:	eb 05                	jmp    c0005228 <f_open+0x39d>
c0005223:	bd 02 00 00 00       	mov    ebp,0x2
c0005228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000522b:	85 ed                	test   ebp,ebp
c000522d:	75 75                	jne    c00052a4 <f_open+0x419>
c000522f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005233:	25 ff 01 00 00       	and    eax,0x1ff
c0005238:	0f 84 74 ff ff ff    	je     c00051b2 <f_open+0x327>
c000523e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005242:	bd 02 00 00 00       	mov    ebp,0x2
c0005247:	89 c8                	mov    eax,ecx
c0005249:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000524d:	e8 a2 cb ff ff       	call   c0001df4 <clst2sect>
c0005252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005256:	89 d7                	mov    edi,edx
c0005258:	09 c7                	or     edi,eax
c000525a:	74 48                	je     c00052a4 <f_open+0x419>
c000525c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005260:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005264:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000526c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005270:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005274:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005278:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000527b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000527f:	83 ec 0c             	sub    esp,0xc
c0005282:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005285:	6a 01                	push   0x1
c0005287:	52                   	push   edx
c0005288:	50                   	push   eax
c0005289:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000528d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005291:	50                   	push   eax
c0005292:	e8 79 c8 ff ff       	call   c0001b10 <disk_read>
c0005297:	83 c4 20             	add    esp,0x20
c000529a:	85 c0                	test   eax,eax
c000529c:	0f 95 c0             	setne  al
c000529f:	0f b6 c0             	movzx  eax,al
c00052a2:	89 c5                	mov    ebp,eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052ab:	e8 2c 33 00 00       	call   c00085dc <ff_memfree>
c00052b0:	83 c4 10             	add    esp,0x10
c00052b3:	85 ed                	test   ebp,ebp
c00052b5:	74 06                	je     c00052bd <f_open+0x432>
c00052b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052bd:	83 c4 7c             	add    esp,0x7c
c00052c0:	89 e8                	mov    eax,ebp
c00052c2:	5b                   	pop    ebx
c00052c3:	5e                   	pop    esi
c00052c4:	5f                   	pop    edi
c00052c5:	5d                   	pop    ebp
c00052c6:	c3                   	ret    

c00052c7 <f_read>:
c00052c7:	55                   	push   ebp
c00052c8:	57                   	push   edi
c00052c9:	56                   	push   esi
c00052ca:	53                   	push   ebx
c00052cb:	83 ec 2c             	sub    esp,0x2c
c00052ce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052dc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e0:	89 d8                	mov    eax,ebx
c00052e2:	e8 77 cf ff ff       	call   c000225e <validate>
c00052e7:	89 c5                	mov    ebp,eax
c00052e9:	85 c0                	test   eax,eax
c00052eb:	0f 85 4c 02 00 00    	jne    c000553d <f_read+0x276>
c00052f1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052f5:	85 ed                	test   ebp,ebp
c00052f7:	0f 85 40 02 00 00    	jne    c000553d <f_read+0x276>
c00052fd:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005301:	0f 84 31 02 00 00    	je     c0005538 <f_read+0x271>
c0005307:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005310:	bf 00 00 00 00       	mov    edi,0x0
c0005315:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005318:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000531c:	89 d1                	mov    ecx,edx
c000531e:	19 f9                	sbb    ecx,edi
c0005320:	0f 83 cf 00 00 00    	jae    c00053f5 <f_read+0x12e>
c0005326:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000532a:	e9 c6 00 00 00       	jmp    c00053f5 <f_read+0x12e>
c000532f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005332:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005335:	89 d0                	mov    eax,edx
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	0f 85 c9 01 00 00    	jne    c000550b <f_read+0x244>
c0005342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005346:	89 d6                	mov    esi,edx
c0005348:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000534c:	89 cf                	mov    edi,ecx
c000534e:	48                   	dec    eax
c000534f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005353:	21 f0                	and    eax,esi
c0005355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005359:	0f 84 a6 00 00 00    	je     c0005405 <f_read+0x13e>
c000535f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005363:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005366:	89 c8                	mov    eax,ecx
c0005368:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000536b:	e8 84 ca ff ff       	call   c0001df4 <clst2sect>
c0005370:	89 d7                	mov    edi,edx
c0005372:	09 c7                	or     edi,eax
c0005374:	0f 84 b4 00 00 00    	je     c000542e <f_read+0x167>
c000537a:	31 ff                	xor    edi,edi
c000537c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005380:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005383:	01 c6                	add    esi,eax
c0005385:	11 d7                	adc    edi,edx
c0005387:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000538f:	0f 86 fd 00 00 00    	jbe    c0005492 <f_read+0x1cb>
c0005395:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005399:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000539d:	c1 e8 09             	shr    eax,0x9
c00053a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053a3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053a7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053aa:	39 c2                	cmp    edx,eax
c00053ac:	76 07                	jbe    c00053b5 <f_read+0xee>
c00053ae:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b5:	83 ec 0c             	sub    esp,0xc
c00053b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053bc:	57                   	push   edi
c00053bd:	56                   	push   esi
c00053be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 44 c7 ff ff       	call   c0001b10 <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	75 6e                	jne    c0005441 <f_read+0x17a>
c00053d3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053d7:	78 7e                	js     c0005457 <f_read+0x190>
c00053d9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053dc:	c1 e6 09             	shl    esi,0x9
c00053df:	31 ff                	xor    edi,edi
c00053e1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053ed:	01 30                	add    DWORD PTR [eax],esi
c00053ef:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053f2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053f5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053fa:	0f 85 2f ff ff ff    	jne    c000532f <f_read+0x68>
c0005400:	e9 38 01 00 00       	jmp    c000553d <f_read+0x276>
c0005405:	89 c8                	mov    eax,ecx
c0005407:	09 d0                	or     eax,edx
c0005409:	75 05                	jne    c0005410 <f_read+0x149>
c000540b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000540e:	eb 19                	jmp    c0005429 <f_read+0x162>
c0005410:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005414:	74 09                	je     c000541f <f_read+0x158>
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f8 c9 ff ff       	call   c0001e15 <clmt_clust>
c000541d:	eb 0a                	jmp    c0005429 <f_read+0x162>
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 d8                	mov    eax,ebx
c0005424:	e8 98 da ff ff       	call   c0002ec1 <get_fat>
c0005429:	83 f8 01             	cmp    eax,0x1
c000542c:	77 0e                	ja     c000543c <f_read+0x175>
c000542e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005432:	bd 02 00 00 00       	mov    ebp,0x2
c0005437:	e9 01 01 00 00       	jmp    c000553d <f_read+0x276>
c000543c:	83 f8 ff             	cmp    eax,0xffffffff
c000543f:	75 0e                	jne    c000544f <f_read+0x188>
c0005441:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005445:	bd 01 00 00 00       	mov    ebp,0x1
c000544a:	e9 ee 00 00 00       	jmp    c000553d <f_read+0x276>
c000544f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005452:	e9 08 ff ff ff       	jmp    c000535f <f_read+0x98>
c0005457:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000545a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000545d:	29 f0                	sub    eax,esi
c000545f:	19 fa                	sbb    edx,edi
c0005461:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005464:	89 d7                	mov    edi,edx
c0005466:	ba 00 00 00 00       	mov    edx,0x0
c000546b:	89 f9                	mov    ecx,edi
c000546d:	19 d1                	sbb    ecx,edx
c000546f:	0f 83 64 ff ff ff    	jae    c00053d9 <f_read+0x112>
c0005475:	89 c7                	mov    edi,eax
c0005477:	8d 53 50             	lea    edx,[ebx+0x50]
c000547a:	c1 e7 09             	shl    edi,0x9
c000547d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005481:	b9 00 02 00 00       	mov    ecx,0x200
c0005486:	01 f8                	add    eax,edi
c0005488:	e8 4d c7 ff ff       	call   c0001bda <mem_cpy>
c000548d:	e9 47 ff ff ff       	jmp    c00053d9 <f_read+0x112>
c0005492:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005495:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005498:	89 04 24             	mov    DWORD PTR [esp],eax
c000549b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000549f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054a3:	75 05                	jne    c00054aa <f_read+0x1e3>
c00054a5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a8:	74 5b                	je     c0005505 <f_read+0x23e>
c00054aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00054ad:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054b5:	79 2a                	jns    c00054e1 <f_read+0x21a>
c00054b7:	83 ec 0c             	sub    esp,0xc
c00054ba:	6a 01                	push   0x1
c00054bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 54 c6 ff ff       	call   c0001b26 <disk_write>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	0f 85 64 ff ff ff    	jne    c0005441 <f_read+0x17a>
c00054dd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054e1:	83 ec 0c             	sub    esp,0xc
c00054e4:	6a 01                	push   0x1
c00054e6:	57                   	push   edi
c00054e7:	56                   	push   esi
c00054e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054f4:	50                   	push   eax
c00054f5:	e8 16 c6 ff ff       	call   c0001b10 <disk_read>
c00054fa:	83 c4 20             	add    esp,0x20
c00054fd:	85 c0                	test   eax,eax
c00054ff:	0f 85 3c ff ff ff    	jne    c0005441 <f_read+0x17a>
c0005505:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005508:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000550b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000550e:	ba 00 02 00 00       	mov    edx,0x200
c0005513:	25 ff 01 00 00       	and    eax,0x1ff
c0005518:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000551c:	29 c2                	sub    edx,eax
c000551e:	39 d6                	cmp    esi,edx
c0005520:	76 02                	jbe    c0005524 <f_read+0x25d>
c0005522:	89 d6                	mov    esi,edx
c0005524:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005528:	89 f1                	mov    ecx,esi
c000552a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000552e:	e8 a7 c6 ff ff       	call   c0001bda <mem_cpy>
c0005533:	e9 a7 fe ff ff       	jmp    c00053df <f_read+0x118>
c0005538:	bd 07 00 00 00       	mov    ebp,0x7
c000553d:	83 c4 2c             	add    esp,0x2c
c0005540:	89 e8                	mov    eax,ebp
c0005542:	5b                   	pop    ebx
c0005543:	5e                   	pop    esi
c0005544:	5f                   	pop    edi
c0005545:	5d                   	pop    ebp
c0005546:	c3                   	ret    

c0005547 <f_write>:
c0005547:	55                   	push   ebp
c0005548:	57                   	push   edi
c0005549:	56                   	push   esi
c000554a:	53                   	push   ebx
c000554b:	83 ec 2c             	sub    esp,0x2c
c000554e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005552:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005556:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000555c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005560:	89 d8                	mov    eax,ebx
c0005562:	e8 f7 cc ff ff       	call   c000225e <validate>
c0005567:	89 c5                	mov    ebp,eax
c0005569:	85 c0                	test   eax,eax
c000556b:	0f 85 86 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c0005571:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005575:	85 ed                	test   ebp,ebp
c0005577:	0f 85 7a 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c000557d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005581:	0f 84 6b 02 00 00    	je     c00057f2 <f_write+0x2ab>
c0005587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000558b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000558e:	0f 84 43 01 00 00    	je     c00056d7 <f_write+0x190>
c0005594:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005597:	89 c1                	mov    ecx,eax
c0005599:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000559d:	0f 83 34 01 00 00    	jae    c00056d7 <f_write+0x190>
c00055a3:	f7 d0                	not    eax
c00055a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a9:	e9 29 01 00 00       	jmp    c00056d7 <f_write+0x190>
c00055ae:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055b1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055b4:	89 d0                	mov    eax,edx
c00055b6:	25 ff 01 00 00       	and    eax,0x1ff
c00055bb:	0f 85 00 02 00 00    	jne    c00057c1 <f_write+0x27a>
c00055c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c5:	89 d6                	mov    esi,edx
c00055c7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055cb:	89 cf                	mov    edi,ecx
c00055cd:	48                   	dec    eax
c00055ce:	0f ac fe 09          	shrd   esi,edi,0x9
c00055d2:	21 f0                	and    eax,esi
c00055d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d8:	0f 84 06 01 00 00    	je     c00056e4 <f_write+0x19d>
c00055de:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055e2:	0f 88 6e 01 00 00    	js     c0005756 <f_write+0x20f>
c00055e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ef:	89 c8                	mov    eax,ecx
c00055f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055f5:	e8 fa c7 ff ff       	call   c0001df4 <clst2sect>
c00055fa:	89 d1                	mov    ecx,edx
c00055fc:	09 c1                	or     ecx,eax
c00055fe:	0f 84 1c 01 00 00    	je     c0005720 <f_write+0x1d9>
c0005604:	31 ff                	xor    edi,edi
c0005606:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000560a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000560e:	01 c6                	add    esi,eax
c0005610:	11 d7                	adc    edi,edx
c0005612:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000561a:	0f 86 63 01 00 00    	jbe    c0005783 <f_write+0x23c>
c0005620:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005624:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005628:	c1 e8 09             	shr    eax,0x9
c000562b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000562f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005633:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005637:	39 c2                	cmp    edx,eax
c0005639:	76 08                	jbe    c0005643 <f_write+0xfc>
c000563b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000563f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000564a:	57                   	push   edi
c000564b:	56                   	push   esi
c000564c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005650:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005654:	50                   	push   eax
c0005655:	e8 cc c4 ff ff       	call   c0001b26 <disk_write>
c000565a:	83 c4 20             	add    esp,0x20
c000565d:	85 c0                	test   eax,eax
c000565f:	0f 85 ce 00 00 00    	jne    c0005733 <f_write+0x1ec>
c0005665:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005668:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000566b:	29 f0                	sub    eax,esi
c000566d:	19 fa                	sbb    edx,edi
c000566f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005673:	89 d7                	mov    edi,edx
c0005675:	ba 00 00 00 00       	mov    edx,0x0
c000567a:	89 f9                	mov    ecx,edi
c000567c:	19 d1                	sbb    ecx,edx
c000567e:	73 1c                	jae    c000569c <f_write+0x155>
c0005680:	89 c7                	mov    edi,eax
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	c1 e7 09             	shl    edi,0x9
c000568a:	8d 43 50             	lea    eax,[ebx+0x50]
c000568d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005691:	89 fa                	mov    edx,edi
c0005693:	e8 42 c5 ff ff       	call   c0001bda <mem_cpy>
c0005698:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000569c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056a0:	c1 e6 09             	shl    esi,0x9
c00056a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a7:	31 ff                	xor    edi,edi
c00056a9:	01 30                	add    DWORD PTR [eax],esi
c00056ab:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056af:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056b6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056bc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056bf:	89 c1                	mov    ecx,eax
c00056c1:	39 f2                	cmp    edx,esi
c00056c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056c6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c9:	19 f9                	sbb    ecx,edi
c00056cb:	73 04                	jae    c00056d1 <f_write+0x18a>
c00056cd:	89 f2                	mov    edx,esi
c00056cf:	89 f8                	mov    eax,edi
c00056d1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056d4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056d7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056dc:	0f 85 cc fe ff ff    	jne    c00055ae <f_write+0x67>
c00056e2:	eb 2e                	jmp    c0005712 <f_write+0x1cb>
c00056e4:	89 c8                	mov    eax,ecx
c00056e6:	09 d0                	or     eax,edx
c00056e8:	75 0b                	jne    c00056f5 <f_write+0x1ae>
c00056ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ed:	31 d2                	xor    edx,edx
c00056ef:	85 c0                	test   eax,eax
c00056f1:	75 28                	jne    c000571b <f_write+0x1d4>
c00056f3:	eb 12                	jmp    c0005707 <f_write+0x1c0>
c00056f5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f9:	74 09                	je     c0005704 <f_write+0x1bd>
c00056fb:	89 d8                	mov    eax,ebx
c00056fd:	e8 13 c7 ff ff       	call   c0001e15 <clmt_clust>
c0005702:	eb 0a                	jmp    c000570e <f_write+0x1c7>
c0005704:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005707:	89 d8                	mov    eax,ebx
c0005709:	e8 a1 da ff ff       	call   c00031af <create_chain>
c000570e:	85 c0                	test   eax,eax
c0005710:	75 09                	jne    c000571b <f_write+0x1d4>
c0005712:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005716:	e9 dc 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000571b:	83 f8 01             	cmp    eax,0x1
c000571e:	75 0e                	jne    c000572e <f_write+0x1e7>
c0005720:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005724:	bd 02 00 00 00       	mov    ebp,0x2
c0005729:	e9 c9 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000572e:	83 f8 ff             	cmp    eax,0xffffffff
c0005731:	75 0e                	jne    c0005741 <f_write+0x1fa>
c0005733:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005737:	bd 01 00 00 00       	mov    ebp,0x1
c000573c:	e9 b6 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c0005741:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005744:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005748:	0f 85 90 fe ff ff    	jne    c00055de <f_write+0x97>
c000574e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005751:	e9 88 fe ff ff       	jmp    c00055de <f_write+0x97>
c0005756:	83 ec 0c             	sub    esp,0xc
c0005759:	8d 43 50             	lea    eax,[ebx+0x50]
c000575c:	6a 01                	push   0x1
c000575e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005761:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005764:	50                   	push   eax
c0005765:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005769:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000576d:	50                   	push   eax
c000576e:	e8 b3 c3 ff ff       	call   c0001b26 <disk_write>
c0005773:	83 c4 20             	add    esp,0x20
c0005776:	85 c0                	test   eax,eax
c0005778:	75 b9                	jne    c0005733 <f_write+0x1ec>
c000577a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000577e:	e9 65 fe ff ff       	jmp    c00055e8 <f_write+0xa1>
c0005783:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005786:	75 05                	jne    c000578d <f_write+0x246>
c0005788:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000578b:	74 2e                	je     c00057bb <f_write+0x274>
c000578d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005790:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005793:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005796:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005799:	73 20                	jae    c00057bb <f_write+0x274>
c000579b:	83 ec 0c             	sub    esp,0xc
c000579e:	8d 43 50             	lea    eax,[ebx+0x50]
c00057a1:	6a 01                	push   0x1
c00057a3:	57                   	push   edi
c00057a4:	56                   	push   esi
c00057a5:	50                   	push   eax
c00057a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057aa:	50                   	push   eax
c00057ab:	e8 60 c3 ff ff       	call   c0001b10 <disk_read>
c00057b0:	83 c4 20             	add    esp,0x20
c00057b3:	85 c0                	test   eax,eax
c00057b5:	0f 85 78 ff ff ff    	jne    c0005733 <f_write+0x1ec>
c00057bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057c4:	ba 00 02 00 00       	mov    edx,0x200
c00057c9:	25 ff 01 00 00       	and    eax,0x1ff
c00057ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057d2:	29 c2                	sub    edx,eax
c00057d4:	39 d6                	cmp    esi,edx
c00057d6:	76 02                	jbe    c00057da <f_write+0x293>
c00057d8:	89 d6                	mov    esi,edx
c00057da:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057de:	89 f1                	mov    ecx,esi
c00057e0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057e4:	e8 f1 c3 ff ff       	call   c0001bda <mem_cpy>
c00057e9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057ed:	e9 b1 fe ff ff       	jmp    c00056a3 <f_write+0x15c>
c00057f2:	bd 07 00 00 00       	mov    ebp,0x7
c00057f7:	83 c4 2c             	add    esp,0x2c
c00057fa:	89 e8                	mov    eax,ebp
c00057fc:	5b                   	pop    ebx
c00057fd:	5e                   	pop    esi
c00057fe:	5f                   	pop    edi
c00057ff:	5d                   	pop    ebp
c0005800:	c3                   	ret    

c0005801 <f_sync>:
c0005801:	56                   	push   esi
c0005802:	53                   	push   ebx
c0005803:	83 ec 64             	sub    esp,0x64
c0005806:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000580a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000580e:	89 d8                	mov    eax,ebx
c0005810:	e8 49 ca ff ff       	call   c000225e <validate>
c0005815:	85 c0                	test   eax,eax
c0005817:	0f 85 ba 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000581d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005820:	f6 c2 40             	test   dl,0x40
c0005823:	0f 84 ae 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c0005829:	84 d2                	test   dl,dl
c000582b:	79 33                	jns    c0005860 <f_sync+0x5f>
c000582d:	83 ec 0c             	sub    esp,0xc
c0005830:	8d 43 50             	lea    eax,[ebx+0x50]
c0005833:	6a 01                	push   0x1
c0005835:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005838:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000583b:	50                   	push   eax
c000583c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005840:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005844:	50                   	push   eax
c0005845:	e8 dc c2 ff ff       	call   c0001b26 <disk_write>
c000584a:	83 c4 20             	add    esp,0x20
c000584d:	89 c2                	mov    edx,eax
c000584f:	b8 01 00 00 00       	mov    eax,0x1
c0005854:	85 d2                	test   edx,edx
c0005856:	0f 85 7b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000585c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005864:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005867:	0f 85 11 01 00 00    	jne    c000597e <f_sync+0x17d>
c000586d:	89 d8                	mov    eax,ebx
c000586f:	e8 13 d6 ff ff       	call   c0002e87 <fill_first_frag>
c0005874:	85 c0                	test   eax,eax
c0005876:	0f 85 5b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000587c:	83 c9 ff             	or     ecx,0xffffffff
c000587f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005882:	89 d8                	mov    eax,ebx
c0005884:	e8 c9 d5 ff ff       	call   c0002e52 <fill_last_frag>
c0005889:	85 c0                	test   eax,eax
c000588b:	0f 85 46 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c0005891:	83 ec 0c             	sub    esp,0xc
c0005894:	68 60 04 00 00       	push   0x460
c0005899:	e8 26 2d 00 00       	call   c00085c4 <ff_memalloc>
c000589e:	83 c4 10             	add    esp,0x10
c00058a1:	89 c6                	mov    esi,eax
c00058a3:	b8 11 00 00 00       	mov    eax,0x11
c00058a8:	85 f6                	test   esi,esi
c00058aa:	0f 84 27 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c00058b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ba:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058bd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058c0:	89 da                	mov    edx,ebx
c00058c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058c6:	e8 af df ff ff       	call   c000387a <load_obj_xdir>
c00058cb:	85 c0                	test   eax,eax
c00058cd:	0f 85 95 00 00 00    	jne    c0005968 <f_sync+0x167>
c00058d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058d7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058da:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058de:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058e1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058e4:	83 ca 01             	or     edx,0x1
c00058e7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058f0:	83 c0 34             	add    eax,0x34
c00058f3:	e8 d9 c2 ff ff       	call   c0001bd1 <st_dword>
c00058f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005902:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005905:	83 c0 38             	add    eax,0x38
c0005908:	e8 c7 c2 ff ff       	call   c0001bd4 <st_qword>
c000590d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005914:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005917:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000591a:	83 c0 28             	add    eax,0x28
c000591d:	e8 b2 c2 ff ff       	call   c0001bd4 <st_qword>
c0005922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005926:	ba 00 00 21 50       	mov    edx,0x50210000
c000592b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592e:	83 c0 0c             	add    eax,0xc
c0005931:	e8 9b c2 ff ff       	call   c0001bd1 <st_dword>
c0005936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000593a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000593d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005941:	31 d2                	xor    edx,edx
c0005943:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005946:	83 c0 10             	add    eax,0x10
c0005949:	e8 83 c2 ff ff       	call   c0001bd1 <st_dword>
c000594e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005952:	e8 62 e1 ff ff       	call   c0003ab9 <store_xdir>
c0005957:	85 c0                	test   eax,eax
c0005959:	75 0d                	jne    c0005968 <f_sync+0x167>
c000595b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000595f:	e8 00 eb ff ff       	call   c0004464 <sync_fs>
c0005964:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000596c:	83 ec 0c             	sub    esp,0xc
c000596f:	56                   	push   esi
c0005970:	e8 67 2c 00 00       	call   c00085dc <ff_memfree>
c0005975:	83 c4 10             	add    esp,0x10
c0005978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000597c:	eb 59                	jmp    c00059d7 <f_sync+0x1d6>
c000597e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005981:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005984:	e8 b0 c9 ff ff       	call   c0002339 <move_window>
c0005989:	85 c0                	test   eax,eax
c000598b:	75 4a                	jne    c00059d7 <f_sync+0x1d6>
c000598d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005990:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005994:	89 f2                	mov    edx,esi
c0005996:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005999:	8b 03                	mov    eax,DWORD PTR [ebx]
c000599b:	e8 5f f3 ff ff       	call   c0004cff <st_clust.isra.1>
c00059a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059a3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059a6:	e8 26 c2 ff ff       	call   c0001bd1 <st_dword>
c00059ab:	8d 46 16             	lea    eax,[esi+0x16]
c00059ae:	ba 00 00 21 50       	mov    edx,0x50210000
c00059b3:	e8 19 c2 ff ff       	call   c0001bd1 <st_dword>
c00059b8:	8d 46 12             	lea    eax,[esi+0x12]
c00059bb:	31 d2                	xor    edx,edx
c00059bd:	e8 0b c2 ff ff       	call   c0001bcd <st_word>
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ce:	e8 91 ea ff ff       	call   c0004464 <sync_fs>
c00059d3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059d7:	83 c4 64             	add    esp,0x64
c00059da:	5b                   	pop    ebx
c00059db:	5e                   	pop    esi
c00059dc:	c3                   	ret    

c00059dd <f_close>:
c00059dd:	53                   	push   ebx
c00059de:	83 ec 24             	sub    esp,0x24
c00059e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059e5:	53                   	push   ebx
c00059e6:	e8 16 fe ff ff       	call   c0005801 <f_sync>
c00059eb:	83 c4 10             	add    esp,0x10
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 15                	jne    c0005a07 <f_close+0x2a>
c00059f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 61 c8 ff ff       	call   c000225e <validate>
c00059fd:	85 c0                	test   eax,eax
c00059ff:	75 06                	jne    c0005a07 <f_close+0x2a>
c0005a01:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a07:	83 c4 18             	add    esp,0x18
c0005a0a:	5b                   	pop    ebx
c0005a0b:	c3                   	ret    

c0005a0c <f_lseek>:
c0005a0c:	55                   	push   ebp
c0005a0d:	57                   	push   edi
c0005a0e:	56                   	push   esi
c0005a0f:	53                   	push   ebx
c0005a10:	83 ec 3c             	sub    esp,0x3c
c0005a13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a17:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a1b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a22:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a26:	89 d8                	mov    eax,ebx
c0005a28:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a2c:	e8 2d c8 ff ff       	call   c000225e <validate>
c0005a31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a35:	85 c0                	test   eax,eax
c0005a37:	0f 85 7a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a3d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 6a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a51:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a54:	74 0c                	je     c0005a62 <f_lseek+0x56>
c0005a56:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a59:	85 c0                	test   eax,eax
c0005a5b:	75 1f                	jne    c0005a7c <f_lseek+0x70>
c0005a5d:	e9 b5 01 00 00       	jmp    c0005c17 <f_lseek+0x20b>
c0005a62:	83 c9 ff             	or     ecx,0xffffffff
c0005a65:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a68:	89 d8                	mov    eax,ebx
c0005a6a:	e8 e3 d3 ff ff       	call   c0002e52 <fill_last_frag>
c0005a6f:	85 c0                	test   eax,eax
c0005a71:	74 e3                	je     c0005a56 <f_lseek+0x4a>
c0005a73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a77:	e9 3b 04 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005a7c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a81:	0f 85 ac 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a87:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a8b:	0f 85 a2 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a91:	8d 78 04             	lea    edi,[eax+0x4]
c0005a94:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a99:	be 02 00 00 00       	mov    esi,0x2
c0005a9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005aa2:	85 ed                	test   ebp,ebp
c0005aa4:	74 73                	je     c0005b19 <f_lseek+0x10d>
c0005aa6:	89 e9                	mov    ecx,ebp
c0005aa8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aaf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ab2:	89 ca                	mov    edx,ecx
c0005ab4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab8:	89 d8                	mov    eax,ebx
c0005aba:	e8 02 d4 ff ff       	call   c0002ec1 <get_fat>
c0005abf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac3:	83 f8 01             	cmp    eax,0x1
c0005ac6:	77 11                	ja     c0005ad9 <f_lseek+0xcd>
c0005ac8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005acc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ad4:	e9 de 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005ad9:	83 f8 ff             	cmp    eax,0xffffffff
c0005adc:	75 11                	jne    c0005aef <f_lseek+0xe3>
c0005ade:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ae2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005aea:	e9 c8 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005aef:	8d 51 01             	lea    edx,[ecx+0x1]
c0005af2:	89 c1                	mov    ecx,eax
c0005af4:	39 c2                	cmp    edx,eax
c0005af6:	74 b7                	je     c0005aaf <f_lseek+0xa3>
c0005af8:	83 c6 02             	add    esi,0x2
c0005afb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005aff:	72 0b                	jb     c0005b0c <f_lseek+0x100>
c0005b01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b04:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b07:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b09:	83 c7 08             	add    edi,0x8
c0005b0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b10:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b13:	76 04                	jbe    c0005b19 <f_lseek+0x10d>
c0005b15:	89 c5                	mov    ebp,eax
c0005b17:	eb 8d                	jmp    c0005aa6 <f_lseek+0x9a>
c0005b19:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b1c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b20:	89 30                	mov    DWORD PTR [eax],esi
c0005b22:	0f 87 87 03 00 00    	ja     c0005eaf <f_lseek+0x4a3>
c0005b28:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b2e:	e9 84 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005b33:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b36:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b45:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b4c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b50:	73 0f                	jae    c0005b61 <f_lseek+0x155>
c0005b52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b6c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b73:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b77:	0f 84 3a 03 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005b7d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b85:	83 c6 ff             	add    esi,0xffffffff
c0005b88:	89 d8                	mov    eax,ebx
c0005b8a:	83 d7 ff             	adc    edi,0xffffffff
c0005b8d:	89 f2                	mov    edx,esi
c0005b8f:	89 f9                	mov    ecx,edi
c0005b91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b95:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b98:	e8 78 c2 ff ff       	call   c0001e15 <clmt_clust>
c0005b9d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ba1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ba4:	89 c2                	mov    edx,eax
c0005ba6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005baa:	89 c8                	mov    eax,ecx
c0005bac:	e8 43 c2 ff ff       	call   c0001df4 <clst2sect>
c0005bb1:	89 d7                	mov    edi,edx
c0005bb3:	09 c7                	or     edi,eax
c0005bb5:	0f 84 0d ff ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005bbb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bbf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bc5:	0f 84 ec 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bcb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bd6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bda:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bde:	4d                   	dec    ebp
c0005bdf:	31 ff                	xor    edi,edi
c0005be1:	21 ee                	and    esi,ebp
c0005be3:	01 c6                	add    esi,eax
c0005be5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be8:	11 d7                	adc    edi,edx
c0005bea:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bed:	39 fa                	cmp    edx,edi
c0005bef:	75 08                	jne    c0005bf9 <f_lseek+0x1ed>
c0005bf1:	39 f0                	cmp    eax,esi
c0005bf3:	0f 84 be 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bf9:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bfc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c00:	0f 89 80 02 00 00    	jns    c0005e86 <f_lseek+0x47a>
c0005c06:	83 ec 0c             	sub    esp,0xc
c0005c09:	6a 01                	push   0x1
c0005c0b:	52                   	push   edx
c0005c0c:	50                   	push   eax
c0005c0d:	55                   	push   ebp
c0005c0e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c12:	e9 5a 02 00 00       	jmp    c0005e71 <f_lseek+0x465>
c0005c17:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c1b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c1e:	74 16                	je     c0005c36 <f_lseek+0x22a>
c0005c20:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c25:	76 0f                	jbe    c0005c36 <f_lseek+0x22a>
c0005c27:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c36:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c39:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c3c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c3f:	89 c7                	mov    edi,eax
c0005c41:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c45:	73 0d                	jae    c0005c54 <f_lseek+0x248>
c0005c47:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c4b:	75 07                	jne    c0005c54 <f_lseek+0x248>
c0005c4d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c54:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c57:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c5a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c5e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c65:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c6c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c6f:	75 09                	jne    c0005c7a <f_lseek+0x26e>
c0005c71:	31 f6                	xor    esi,esi
c0005c73:	31 ff                	xor    edi,edi
c0005c75:	e9 af 01 00 00       	jmp    c0005e29 <f_lseek+0x41d>
c0005c7a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c7e:	89 d7                	mov    edi,edx
c0005c80:	c1 e1 09             	shl    ecx,0x9
c0005c83:	09 c7                	or     edi,eax
c0005c85:	89 cd                	mov    ebp,ecx
c0005c87:	74 6d                	je     c0005cf6 <f_lseek+0x2ea>
c0005c89:	83 c0 ff             	add    eax,0xffffffff
c0005c8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c90:	83 d2 ff             	adc    edx,0xffffffff
c0005c93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c9a:	83 c0 ff             	add    eax,0xffffffff
c0005c9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca1:	83 d2 ff             	adc    edx,0xffffffff
c0005ca4:	31 ff                	xor    edi,edi
c0005ca6:	57                   	push   edi
c0005ca7:	51                   	push   ecx
c0005ca8:	52                   	push   edx
c0005ca9:	50                   	push   eax
c0005caa:	e8 f5 b1 01 00       	call   c0020ea4 <__udivdi3>
c0005caf:	83 c4 10             	add    esp,0x10
c0005cb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cb6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cba:	57                   	push   edi
c0005cbb:	55                   	push   ebp
c0005cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc4:	e8 db b1 01 00       	call   c0020ea4 <__udivdi3>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cd0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005cd4:	19 d1                	sbb    ecx,edx
c0005cd6:	72 1e                	jb     c0005cf6 <f_lseek+0x2ea>
c0005cd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cdc:	89 e9                	mov    ecx,ebp
c0005cde:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005ce1:	f7 d9                	neg    ecx
c0005ce3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005ce6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cea:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ced:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005cf0:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cf4:	eb 28                	jmp    c0005d1e <f_lseek+0x312>
c0005cf6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf9:	85 c0                	test   eax,eax
c0005cfb:	75 1e                	jne    c0005d1b <f_lseek+0x30f>
c0005cfd:	31 d2                	xor    edx,edx
c0005cff:	89 d8                	mov    eax,ebx
c0005d01:	e8 a9 d4 ff ff       	call   c00031af <create_chain>
c0005d06:	83 f8 01             	cmp    eax,0x1
c0005d09:	0f 84 b9 fd ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005d0f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d12:	0f 84 c6 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005d18:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d1b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d1e:	85 c0                	test   eax,eax
c0005d20:	0f 84 4b ff ff ff    	je     c0005c71 <f_lseek+0x265>
c0005d26:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d2a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d32:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d39:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d3c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d3f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d43:	0f 83 9d 00 00 00    	jae    c0005de6 <f_lseek+0x3da>
c0005d49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d51:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d54:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d58:	01 f2                	add    edx,esi
c0005d5a:	11 f9                	adc    ecx,edi
c0005d5c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d64:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d67:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d6a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d6d:	f6 c1 02             	test   cl,0x2
c0005d70:	74 35                	je     c0005da7 <f_lseek+0x39b>
c0005d72:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d76:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d79:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d7c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d80:	73 16                	jae    c0005d98 <f_lseek+0x38c>
c0005d82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d86:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d8a:	88 ca                	mov    dl,cl
c0005d8c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d8f:	83 ca 40             	or     edx,0x40
c0005d92:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d95:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d98:	89 c2                	mov    edx,eax
c0005d9a:	89 d8                	mov    eax,ebx
c0005d9c:	e8 0e d4 ff ff       	call   c00031af <create_chain>
c0005da1:	85 c0                	test   eax,eax
c0005da3:	75 0b                	jne    c0005db0 <f_lseek+0x3a4>
c0005da5:	eb 30                	jmp    c0005dd7 <f_lseek+0x3cb>
c0005da7:	89 c2                	mov    edx,eax
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 11 d1 ff ff       	call   c0002ec1 <get_fat>
c0005db0:	83 f8 ff             	cmp    eax,0xffffffff
c0005db3:	0f 84 25 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005db9:	83 f8 01             	cmp    eax,0x1
c0005dbc:	0f 86 06 fd ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dc2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dc6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc9:	0f 86 f9 fc ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dcf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dd2:	e9 5b ff ff ff       	jmp    c0005d32 <f_lseek+0x326>
c0005dd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dde:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005de6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ded:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005df0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005df3:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005df6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005dfc:	0f 84 6f fe ff ff    	je     c0005c71 <f_lseek+0x265>
c0005e02:	89 c2                	mov    edx,eax
c0005e04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e08:	e8 e7 bf ff ff       	call   c0001df4 <clst2sect>
c0005e0d:	89 d7                	mov    edi,edx
c0005e0f:	09 c7                	or     edi,eax
c0005e11:	0f 84 b1 fc ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005e17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e1b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e1e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e22:	c1 ef 09             	shr    edi,0x9
c0005e25:	01 c6                	add    esi,eax
c0005e27:	11 d7                	adc    edi,edx
c0005e29:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e2c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e2f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e32:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e35:	19 d1                	sbb    ecx,edx
c0005e37:	73 0a                	jae    c0005e43 <f_lseek+0x437>
c0005e39:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e3c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e3f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e43:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e48:	74 6d                	je     c0005eb7 <f_lseek+0x4ab>
c0005e4a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e4d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e50:	39 fa                	cmp    edx,edi
c0005e52:	75 04                	jne    c0005e58 <f_lseek+0x44c>
c0005e54:	39 f0                	cmp    eax,esi
c0005e56:	74 5f                	je     c0005eb7 <f_lseek+0x4ab>
c0005e58:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e5b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e5f:	79 25                	jns    c0005e86 <f_lseek+0x47a>
c0005e61:	83 ec 0c             	sub    esp,0xc
c0005e64:	6a 01                	push   0x1
c0005e66:	52                   	push   edx
c0005e67:	50                   	push   eax
c0005e68:	55                   	push   ebp
c0005e69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e6d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e71:	50                   	push   eax
c0005e72:	e8 af bc ff ff       	call   c0001b26 <disk_write>
c0005e77:	83 c4 20             	add    esp,0x20
c0005e7a:	85 c0                	test   eax,eax
c0005e7c:	0f 85 5c fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005e82:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e86:	83 ec 0c             	sub    esp,0xc
c0005e89:	6a 01                	push   0x1
c0005e8b:	57                   	push   edi
c0005e8c:	56                   	push   esi
c0005e8d:	55                   	push   ebp
c0005e8e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e92:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e96:	50                   	push   eax
c0005e97:	e8 74 bc ff ff       	call   c0001b10 <disk_read>
c0005e9c:	83 c4 20             	add    esp,0x20
c0005e9f:	85 c0                	test   eax,eax
c0005ea1:	0f 85 37 fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005ea7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eaa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ead:	eb 08                	jmp    c0005eb7 <f_lseek+0x4ab>
c0005eaf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ebb:	83 c4 3c             	add    esp,0x3c
c0005ebe:	5b                   	pop    ebx
c0005ebf:	5e                   	pop    esi
c0005ec0:	5f                   	pop    edi
c0005ec1:	5d                   	pop    ebp
c0005ec2:	c3                   	ret    

c0005ec3 <f_opendir>:
c0005ec3:	56                   	push   esi
c0005ec4:	b8 09 00 00 00       	mov    eax,0x9
c0005ec9:	53                   	push   ebx
c0005eca:	83 ec 24             	sub    esp,0x24
c0005ecd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ed1:	85 db                	test   ebx,ebx
c0005ed3:	0f 84 e6 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005ed9:	31 c9                	xor    ecx,ecx
c0005edb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005edf:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ee3:	e8 03 c7 ff ff       	call   c00025eb <mount_volume>
c0005ee8:	85 c0                	test   eax,eax
c0005eea:	0f 85 c9 00 00 00    	jne    c0005fb9 <f_opendir+0xf6>
c0005ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ef4:	83 ec 0c             	sub    esp,0xc
c0005ef7:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef9:	68 60 04 00 00       	push   0x460
c0005efe:	e8 c1 26 00 00       	call   c00085c4 <ff_memalloc>
c0005f03:	83 c4 10             	add    esp,0x10
c0005f06:	89 c6                	mov    esi,eax
c0005f08:	b8 11 00 00 00       	mov    eax,0x11
c0005f0d:	85 f6                	test   esi,esi
c0005f0f:	0f 84 aa 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f29:	89 d8                	mov    eax,ebx
c0005f2b:	e8 31 ee ff ff       	call   c0004d61 <follow_path>
c0005f30:	85 c0                	test   eax,eax
c0005f32:	75 61                	jne    c0005f95 <f_opendir+0xd2>
c0005f34:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f38:	78 46                	js     c0005f80 <f_opendir+0xbd>
c0005f3a:	b8 05 00 00 00       	mov    eax,0x5
c0005f3f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f43:	74 50                	je     c0005f95 <f_opendir+0xd2>
c0005f45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f49:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f4b:	3c 04                	cmp    al,0x4
c0005f4d:	75 26                	jne    c0005f75 <f_opendir+0xb2>
c0005f4f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f52:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f58:	30 d2                	xor    dl,dl
c0005f5a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f5e:	09 c2                	or     edx,eax
c0005f60:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f63:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f66:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f69:	89 da                	mov    edx,ebx
c0005f6b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f6e:	e8 b4 ed ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005f73:	eb 0b                	jmp    c0005f80 <f_opendir+0xbd>
c0005f75:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f78:	e8 59 ed ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0005f7d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f84:	31 d2                	xor    edx,edx
c0005f86:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f8a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f8e:	89 d8                	mov    eax,ebx
c0005f90:	e8 22 d1 ff ff       	call   c00030b7 <dir_sdi>
c0005f95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f99:	83 ec 0c             	sub    esp,0xc
c0005f9c:	56                   	push   esi
c0005f9d:	e8 3a 26 00 00       	call   c00085dc <ff_memfree>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa9:	83 f8 04             	cmp    eax,0x4
c0005fac:	74 06                	je     c0005fb4 <f_opendir+0xf1>
c0005fae:	85 c0                	test   eax,eax
c0005fb0:	74 0d                	je     c0005fbf <f_opendir+0xfc>
c0005fb2:	eb 05                	jmp    c0005fb9 <f_opendir+0xf6>
c0005fb4:	b8 05 00 00 00       	mov    eax,0x5
c0005fb9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fbf:	83 c4 24             	add    esp,0x24
c0005fc2:	5b                   	pop    ebx
c0005fc3:	5e                   	pop    esi
c0005fc4:	c3                   	ret    

c0005fc5 <f_closedir>:
c0005fc5:	53                   	push   ebx
c0005fc6:	83 ec 18             	sub    esp,0x18
c0005fc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fcd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fd1:	89 d8                	mov    eax,ebx
c0005fd3:	e8 86 c2 ff ff       	call   c000225e <validate>
c0005fd8:	85 c0                	test   eax,eax
c0005fda:	75 06                	jne    c0005fe2 <f_closedir+0x1d>
c0005fdc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fe2:	83 c4 18             	add    esp,0x18
c0005fe5:	5b                   	pop    ebx
c0005fe6:	c3                   	ret    

c0005fe7 <f_readdir>:
c0005fe7:	57                   	push   edi
c0005fe8:	56                   	push   esi
c0005fe9:	53                   	push   ebx
c0005fea:	83 ec 20             	sub    esp,0x20
c0005fed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ff1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ff5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff9:	89 d8                	mov    eax,ebx
c0005ffb:	e8 5e c2 ff ff       	call   c000225e <validate>
c0006000:	85 c0                	test   eax,eax
c0006002:	75 77                	jne    c000607b <f_readdir+0x94>
c0006004:	85 ff                	test   edi,edi
c0006006:	75 0b                	jne    c0006013 <f_readdir+0x2c>
c0006008:	31 d2                	xor    edx,edx
c000600a:	89 d8                	mov    eax,ebx
c000600c:	e8 a6 d0 ff ff       	call   c00030b7 <dir_sdi>
c0006011:	eb 68                	jmp    c000607b <f_readdir+0x94>
c0006013:	83 ec 0c             	sub    esp,0xc
c0006016:	68 60 04 00 00       	push   0x460
c000601b:	e8 a4 25 00 00       	call   c00085c4 <ff_memalloc>
c0006020:	83 c4 10             	add    esp,0x10
c0006023:	89 c6                	mov    esi,eax
c0006025:	b8 11 00 00 00       	mov    eax,0x11
c000602a:	85 f6                	test   esi,esi
c000602c:	74 4d                	je     c000607b <f_readdir+0x94>
c000602e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006032:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006038:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000603b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000603e:	31 d2                	xor    edx,edx
c0006040:	89 d8                	mov    eax,ebx
c0006042:	e8 80 d8 ff ff       	call   c00038c7 <dir_read>
c0006047:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000604c:	75 19                	jne    c0006067 <f_readdir+0x80>
c000604e:	89 fa                	mov    edx,edi
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 7e ea ff ff       	call   c0004ad5 <get_fileinfo>
c0006057:	31 d2                	xor    edx,edx
c0006059:	89 d8                	mov    eax,ebx
c000605b:	e8 af d5 ff ff       	call   c000360f <dir_next>
c0006060:	83 f8 04             	cmp    eax,0x4
c0006063:	75 02                	jne    c0006067 <f_readdir+0x80>
c0006065:	31 c0                	xor    eax,eax
c0006067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000606b:	83 ec 0c             	sub    esp,0xc
c000606e:	56                   	push   esi
c000606f:	e8 68 25 00 00       	call   c00085dc <ff_memfree>
c0006074:	83 c4 10             	add    esp,0x10
c0006077:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000607b:	83 c4 20             	add    esp,0x20
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	c3                   	ret    

c0006082 <f_stat>:
c0006082:	57                   	push   edi
c0006083:	31 c9                	xor    ecx,ecx
c0006085:	56                   	push   esi
c0006086:	53                   	push   ebx
c0006087:	83 ec 50             	sub    esp,0x50
c000608a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000608e:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006092:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006096:	e8 50 c5 ff ff       	call   c00025eb <mount_volume>
c000609b:	89 c3                	mov    ebx,eax
c000609d:	85 c0                	test   eax,eax
c000609f:	75 67                	jne    c0006108 <f_stat+0x86>
c00060a1:	83 ec 0c             	sub    esp,0xc
c00060a4:	bb 11 00 00 00       	mov    ebx,0x11
c00060a9:	68 60 04 00 00       	push   0x460
c00060ae:	e8 11 25 00 00       	call   c00085c4 <ff_memalloc>
c00060b3:	83 c4 10             	add    esp,0x10
c00060b6:	89 c6                	mov    esi,eax
c00060b8:	85 c0                	test   eax,eax
c00060ba:	74 4c                	je     c0006108 <f_stat+0x86>
c00060bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060c0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060c6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060cc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060d0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060d4:	e8 88 ec ff ff       	call   c0004d61 <follow_path>
c00060d9:	89 c3                	mov    ebx,eax
c00060db:	85 c0                	test   eax,eax
c00060dd:	75 1d                	jne    c00060fc <f_stat+0x7a>
c00060df:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060e4:	78 11                	js     c00060f7 <f_stat+0x75>
c00060e6:	85 ff                	test   edi,edi
c00060e8:	74 12                	je     c00060fc <f_stat+0x7a>
c00060ea:	89 fa                	mov    edx,edi
c00060ec:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060f0:	e8 e0 e9 ff ff       	call   c0004ad5 <get_fileinfo>
c00060f5:	eb 05                	jmp    c00060fc <f_stat+0x7a>
c00060f7:	bb 06 00 00 00       	mov    ebx,0x6
c00060fc:	83 ec 0c             	sub    esp,0xc
c00060ff:	56                   	push   esi
c0006100:	e8 d7 24 00 00       	call   c00085dc <ff_memfree>
c0006105:	83 c4 10             	add    esp,0x10
c0006108:	83 c4 50             	add    esp,0x50
c000610b:	89 d8                	mov    eax,ebx
c000610d:	5b                   	pop    ebx
c000610e:	5e                   	pop    esi
c000610f:	5f                   	pop    edi
c0006110:	c3                   	ret    

c0006111 <f_getfree>:
c0006111:	55                   	push   ebp
c0006112:	31 c9                	xor    ecx,ecx
c0006114:	57                   	push   edi
c0006115:	56                   	push   esi
c0006116:	53                   	push   ebx
c0006117:	83 ec 5c             	sub    esp,0x5c
c000611a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000611e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006122:	e8 c4 c4 ff ff       	call   c00025eb <mount_volume>
c0006127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000612b:	85 c0                	test   eax,eax
c000612d:	0f 85 9d 01 00 00    	jne    c00062d0 <f_getfree+0x1bf>
c0006133:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006137:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000613b:	89 02                	mov    DWORD PTR [edx],eax
c000613d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006143:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006146:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000614a:	39 f2                	cmp    edx,esi
c000614c:	77 0b                	ja     c0006159 <f_getfree+0x48>
c000614e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006152:	89 10                	mov    DWORD PTR [eax],edx
c0006154:	e9 77 01 00 00       	jmp    c00062d0 <f_getfree+0x1bf>
c0006159:	8a 10                	mov    dl,BYTE PTR [eax]
c000615b:	80 fa 01             	cmp    dl,0x1
c000615e:	75 3a                	jne    c000619a <f_getfree+0x89>
c0006160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006164:	be 02 00 00 00       	mov    esi,0x2
c0006169:	31 db                	xor    ebx,ebx
c000616b:	89 f2                	mov    edx,esi
c000616d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006171:	e8 4b cd ff ff       	call   c0002ec1 <get_fat>
c0006176:	83 f8 ff             	cmp    eax,0xffffffff
c0006179:	0f 84 28 01 00 00    	je     c00062a7 <f_getfree+0x196>
c000617f:	83 f8 01             	cmp    eax,0x1
c0006182:	0f 84 29 01 00 00    	je     c00062b1 <f_getfree+0x1a0>
c0006188:	83 d3 00             	adc    ebx,0x0
c000618b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000618f:	46                   	inc    esi
c0006190:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006193:	77 d6                	ja     c000616b <f_getfree+0x5a>
c0006195:	e9 25 01 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000619a:	80 fa 04             	cmp    dl,0x4
c000619d:	0f 85 88 00 00 00    	jne    c000622b <f_getfree+0x11a>
c00061a3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061a6:	31 ed                	xor    ebp,ebp
c00061a8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061b3:	31 db                	xor    ebx,ebx
c00061b5:	85 ed                	test   ebp,ebp
c00061b7:	75 3f                	jne    c00061f8 <f_getfree+0xe7>
c00061b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061c1:	83 c0 01             	add    eax,0x1
c00061c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c8:	83 d2 00             	adc    edx,0x0
c00061cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061db:	e8 59 c1 ff ff       	call   c0002339 <move_window>
c00061e0:	85 c0                	test   eax,eax
c00061e2:	0f 85 d3 00 00 00    	jne    c00062bb <f_getfree+0x1aa>
c00061e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061fc:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061ff:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006203:	89 cf                	mov    edi,ecx
c0006205:	85 f6                	test   esi,esi
c0006207:	74 12                	je     c000621b <f_getfree+0x10a>
c0006209:	88 c1                	mov    cl,al
c000620b:	83 e1 01             	and    ecx,0x1
c000620e:	80 f9 01             	cmp    cl,0x1
c0006211:	83 d3 00             	adc    ebx,0x0
c0006214:	d0 e8                	shr    al,1
c0006216:	4e                   	dec    esi
c0006217:	39 fe                	cmp    esi,edi
c0006219:	75 ea                	jne    c0006205 <f_getfree+0xf4>
c000621b:	45                   	inc    ebp
c000621c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006222:	85 f6                	test   esi,esi
c0006224:	75 8f                	jne    c00061b5 <f_getfree+0xa4>
c0006226:	e9 94 00 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000622b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000622e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006231:	31 f6                	xor    esi,esi
c0006233:	31 db                	xor    ebx,ebx
c0006235:	85 f6                	test   esi,esi
c0006237:	75 1b                	jne    c0006254 <f_getfree+0x143>
c0006239:	89 d7                	mov    edi,edx
c000623b:	89 cd                	mov    ebp,ecx
c000623d:	83 c7 01             	add    edi,0x1
c0006240:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006244:	83 d5 00             	adc    ebp,0x0
c0006247:	e8 ed c0 ff ff       	call   c0002339 <move_window>
c000624c:	85 c0                	test   eax,eax
c000624e:	75 6b                	jne    c00062bb <f_getfree+0x1aa>
c0006250:	89 fa                	mov    edx,edi
c0006252:	89 e9                	mov    ecx,ebp
c0006254:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006258:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000625c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006260:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006263:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006267:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000626b:	75 11                	jne    c000627e <f_getfree+0x16d>
c000626d:	e8 e9 b8 ff ff       	call   c0001b5b <ld_word>
c0006272:	66 83 f8 01          	cmp    ax,0x1
c0006276:	83 d3 00             	adc    ebx,0x0
c0006279:	83 c6 02             	add    esi,0x2
c000627c:	eb 13                	jmp    c0006291 <f_getfree+0x180>
c000627e:	e8 e5 b8 ff ff       	call   c0001b68 <ld_dword>
c0006283:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006288:	83 f8 01             	cmp    eax,0x1
c000628b:	83 d3 00             	adc    ebx,0x0
c000628e:	83 c6 04             	add    esi,0x4
c0006291:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000629b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000629f:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062a3:	75 90                	jne    c0006235 <f_getfree+0x124>
c00062a5:	eb 18                	jmp    c00062bf <f_getfree+0x1ae>
c00062a7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062af:	eb 0e                	jmp    c00062bf <f_getfree+0x1ae>
c00062b1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b9:	eb 04                	jmp    c00062bf <f_getfree+0x1ae>
c00062bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062bf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062c3:	89 18                	mov    DWORD PTR [eax],ebx
c00062c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062cc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062d4:	83 c4 5c             	add    esp,0x5c
c00062d7:	5b                   	pop    ebx
c00062d8:	5e                   	pop    esi
c00062d9:	5f                   	pop    edi
c00062da:	5d                   	pop    ebp
c00062db:	c3                   	ret    

c00062dc <f_truncate>:
c00062dc:	56                   	push   esi
c00062dd:	53                   	push   ebx
c00062de:	83 ec 14             	sub    esp,0x14
c00062e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e9:	89 d8                	mov    eax,ebx
c00062eb:	e8 6e bf ff ff       	call   c000225e <validate>
c00062f0:	89 c6                	mov    esi,eax
c00062f2:	85 c0                	test   eax,eax
c00062f4:	0f 85 d2 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c00062fa:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062fe:	85 f6                	test   esi,esi
c0006300:	0f 85 c6 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c0006306:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000630a:	0f 84 b7 00 00 00    	je     c00063c7 <f_truncate+0xeb>
c0006310:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006313:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006316:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006319:	89 d1                	mov    ecx,edx
c000631b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000631e:	0f 83 a8 00 00 00    	jae    c00063cc <f_truncate+0xf0>
c0006324:	09 c2                	or     edx,eax
c0006326:	75 15                	jne    c000633d <f_truncate+0x61>
c0006328:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000632b:	31 c9                	xor    ecx,ecx
c000632d:	89 d8                	mov    eax,ebx
c000632f:	e8 7a d0 ff ff       	call   c00033ae <remove_chain>
c0006334:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000633b:	eb 35                	jmp    c0006372 <f_truncate+0x96>
c000633d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006340:	89 d8                	mov    eax,ebx
c0006342:	e8 7a cb ff ff       	call   c0002ec1 <get_fat>
c0006347:	89 c2                	mov    edx,eax
c0006349:	b8 01 00 00 00       	mov    eax,0x1
c000634e:	83 fa ff             	cmp    edx,0xffffffff
c0006351:	74 1f                	je     c0006372 <f_truncate+0x96>
c0006353:	b8 02 00 00 00       	mov    eax,0x2
c0006358:	83 fa 01             	cmp    edx,0x1
c000635b:	74 15                	je     c0006372 <f_truncate+0x96>
c000635d:	31 c0                	xor    eax,eax
c000635f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006363:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006366:	76 0a                	jbe    c0006372 <f_truncate+0x96>
c0006368:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000636b:	89 d8                	mov    eax,ebx
c000636d:	e8 3c d0 ff ff       	call   c00033ae <remove_chain>
c0006372:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006375:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006378:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000637b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000637e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006381:	83 ca 40             	or     edx,0x40
c0006384:	85 c0                	test   eax,eax
c0006386:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006389:	75 35                	jne    c00063c0 <f_truncate+0xe4>
c000638b:	84 d2                	test   dl,dl
c000638d:	79 3d                	jns    c00063cc <f_truncate+0xf0>
c000638f:	83 ec 0c             	sub    esp,0xc
c0006392:	8d 43 50             	lea    eax,[ebx+0x50]
c0006395:	6a 01                	push   0x1
c0006397:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000639a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000639d:	50                   	push   eax
c000639e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063a2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063a6:	50                   	push   eax
c00063a7:	e8 7a b7 ff ff       	call   c0001b26 <disk_write>
c00063ac:	83 c4 20             	add    esp,0x20
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 08                	jne    c00063bb <f_truncate+0xdf>
c00063b3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063b7:	31 f6                	xor    esi,esi
c00063b9:	eb 11                	jmp    c00063cc <f_truncate+0xf0>
c00063bb:	b8 01 00 00 00       	mov    eax,0x1
c00063c0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063c3:	89 c6                	mov    esi,eax
c00063c5:	eb 05                	jmp    c00063cc <f_truncate+0xf0>
c00063c7:	be 07 00 00 00       	mov    esi,0x7
c00063cc:	89 f0                	mov    eax,esi
c00063ce:	83 c4 14             	add    esp,0x14
c00063d1:	5b                   	pop    ebx
c00063d2:	5e                   	pop    esi
c00063d3:	c3                   	ret    

c00063d4 <f_unlink>:
c00063d4:	56                   	push   esi
c00063d5:	b9 02 00 00 00       	mov    ecx,0x2
c00063da:	53                   	push   ebx
c00063db:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063e5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063ec:	e8 fa c1 ff ff       	call   c00025eb <mount_volume>
c00063f1:	85 c0                	test   eax,eax
c00063f3:	0f 85 55 01 00 00    	jne    c000654e <f_unlink+0x17a>
c00063f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063fd:	83 ec 0c             	sub    esp,0xc
c0006400:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006404:	68 60 04 00 00       	push   0x460
c0006409:	e8 b6 21 00 00       	call   c00085c4 <ff_memalloc>
c000640e:	83 c4 10             	add    esp,0x10
c0006411:	89 c3                	mov    ebx,eax
c0006413:	b8 11 00 00 00       	mov    eax,0x11
c0006418:	85 db                	test   ebx,ebx
c000641a:	0f 84 2e 01 00 00    	je     c000654e <f_unlink+0x17a>
c0006420:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006424:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000642a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000642d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006430:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006437:	8d 44 24 48          	lea    eax,[esp+0x48]
c000643b:	e8 21 e9 ff ff       	call   c0004d61 <follow_path>
c0006440:	85 c0                	test   eax,eax
c0006442:	0f 85 f2 00 00 00    	jne    c000653a <f_unlink+0x166>
c0006448:	b8 06 00 00 00       	mov    eax,0x6
c000644d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006455:	0f 88 df 00 00 00    	js     c000653a <f_unlink+0x166>
c000645b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006460:	74 0a                	je     c000646c <f_unlink+0x98>
c0006462:	b8 07 00 00 00       	mov    eax,0x7
c0006467:	e9 ce 00 00 00       	jmp    c000653a <f_unlink+0x166>
c000646c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006470:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006474:	8a 02                	mov    al,BYTE PTR [edx]
c0006476:	3c 04                	cmp    al,0x4
c0006478:	75 12                	jne    c000648c <f_unlink+0xb8>
c000647a:	8d 42 10             	lea    eax,[edx+0x10]
c000647d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006481:	e8 a1 e8 ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0006486:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000648a:	eb 0e                	jmp    c000649a <f_unlink+0xc6>
c000648c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006493:	e8 3e e8 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0006498:	89 c6                	mov    esi,eax
c000649a:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000649f:	75 12                	jne    c00064b3 <f_unlink+0xdf>
c00064a1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064a5:	e8 94 d6 ff ff       	call   c0003b3e <dir_remove>
c00064aa:	85 c0                	test   eax,eax
c00064ac:	74 6c                	je     c000651a <f_unlink+0x146>
c00064ae:	e9 87 00 00 00       	jmp    c000653a <f_unlink+0x166>
c00064b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064b7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064be:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064c5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c8:	75 21                	jne    c00064eb <f_unlink+0x117>
c00064ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064d2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064e0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064e4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064eb:	31 d2                	xor    edx,edx
c00064ed:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064f4:	e8 be cb ff ff       	call   c00030b7 <dir_sdi>
c00064f9:	85 c0                	test   eax,eax
c00064fb:	75 3d                	jne    c000653a <f_unlink+0x166>
c00064fd:	31 d2                	xor    edx,edx
c00064ff:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006506:	e8 bc d3 ff ff       	call   c00038c7 <dir_read>
c000650b:	85 c0                	test   eax,eax
c000650d:	0f 84 4f ff ff ff    	je     c0006462 <f_unlink+0x8e>
c0006513:	83 f8 04             	cmp    eax,0x4
c0006516:	75 22                	jne    c000653a <f_unlink+0x166>
c0006518:	eb 87                	jmp    c00064a1 <f_unlink+0xcd>
c000651a:	85 f6                	test   esi,esi
c000651c:	75 0b                	jne    c0006529 <f_unlink+0x155>
c000651e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006522:	e8 3d df ff ff       	call   c0004464 <sync_fs>
c0006527:	eb 11                	jmp    c000653a <f_unlink+0x166>
c0006529:	31 c9                	xor    ecx,ecx
c000652b:	89 f2                	mov    edx,esi
c000652d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006531:	e8 78 ce ff ff       	call   c00033ae <remove_chain>
c0006536:	85 c0                	test   eax,eax
c0006538:	74 e4                	je     c000651e <f_unlink+0x14a>
c000653a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000653e:	83 ec 0c             	sub    esp,0xc
c0006541:	53                   	push   ebx
c0006542:	e8 95 20 00 00       	call   c00085dc <ff_memfree>
c0006547:	83 c4 10             	add    esp,0x10
c000654a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000654e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006554:	5b                   	pop    ebx
c0006555:	5e                   	pop    esi
c0006556:	c3                   	ret    

c0006557 <f_mkdir>:
c0006557:	57                   	push   edi
c0006558:	b9 02 00 00 00       	mov    ecx,0x2
c000655d:	56                   	push   esi
c000655e:	53                   	push   ebx
c000655f:	83 c4 80             	add    esp,0xffffff80
c0006562:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006566:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000656d:	e8 79 c0 ff ff       	call   c00025eb <mount_volume>
c0006572:	89 c3                	mov    ebx,eax
c0006574:	85 c0                	test   eax,eax
c0006576:	0f 85 fe 01 00 00    	jne    c000677a <f_mkdir+0x223>
c000657c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006580:	bb 11 00 00 00       	mov    ebx,0x11
c0006585:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006589:	83 ec 0c             	sub    esp,0xc
c000658c:	68 60 04 00 00       	push   0x460
c0006591:	e8 2e 20 00 00       	call   c00085c4 <ff_memalloc>
c0006596:	83 c4 10             	add    esp,0x10
c0006599:	89 c7                	mov    edi,eax
c000659b:	85 c0                	test   eax,eax
c000659d:	0f 84 d7 01 00 00    	je     c000677a <f_mkdir+0x223>
c00065a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065ad:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065b3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065be:	e8 9e e7 ff ff       	call   c0004d61 <follow_path>
c00065c3:	89 c3                	mov    ebx,eax
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 3e                	je     c0006607 <f_mkdir+0xb0>
c00065c9:	83 f8 04             	cmp    eax,0x4
c00065cc:	75 3e                	jne    c000660c <f_mkdir+0xb5>
c00065ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d2:	31 d2                	xor    edx,edx
c00065d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065dc:	e8 ce cb ff ff       	call   c00031af <create_chain>
c00065e1:	89 c6                	mov    esi,eax
c00065e3:	85 c0                	test   eax,eax
c00065e5:	74 0c                	je     c00065f3 <f_mkdir+0x9c>
c00065e7:	bb 02 00 00 00       	mov    ebx,0x2
c00065ec:	83 f8 01             	cmp    eax,0x1
c00065ef:	74 07                	je     c00065f8 <f_mkdir+0xa1>
c00065f1:	eb 2a                	jmp    c000661d <f_mkdir+0xc6>
c00065f3:	bb 07 00 00 00       	mov    ebx,0x7
c00065f8:	31 c9                	xor    ecx,ecx
c00065fa:	89 f2                	mov    edx,esi
c00065fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006600:	e8 a9 cd ff ff       	call   c00033ae <remove_chain>
c0006605:	eb 05                	jmp    c000660c <f_mkdir+0xb5>
c0006607:	bb 08 00 00 00       	mov    ebx,0x8
c000660c:	83 ec 0c             	sub    esp,0xc
c000660f:	57                   	push   edi
c0006610:	e8 c7 1f 00 00       	call   c00085dc <ff_memfree>
c0006615:	83 c4 10             	add    esp,0x10
c0006618:	e9 5d 01 00 00       	jmp    c000677a <f_mkdir+0x223>
c000661d:	bb 01 00 00 00       	mov    ebx,0x1
c0006622:	83 f8 ff             	cmp    eax,0xffffffff
c0006625:	74 d1                	je     c00065f8 <f_mkdir+0xa1>
c0006627:	89 f2                	mov    edx,esi
c0006629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000662d:	e8 c4 ce ff ff       	call   c00034f6 <dir_clear>
c0006632:	89 c3                	mov    ebx,eax
c0006634:	85 c0                	test   eax,eax
c0006636:	75 c0                	jne    c00065f8 <f_mkdir+0xa1>
c0006638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000663f:	74 69                	je     c00066aa <f_mkdir+0x153>
c0006641:	b9 0b 00 00 00       	mov    ecx,0xb
c0006646:	83 c0 54             	add    eax,0x54
c0006649:	ba 20 00 00 00       	mov    edx,0x20
c000664e:	e8 9c b5 ff ff       	call   c0001bef <mem_set>
c0006653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006657:	ba 00 00 21 50       	mov    edx,0x50210000
c000665c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006660:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006664:	83 c0 6a             	add    eax,0x6a
c0006667:	e8 65 b5 ff ff       	call   c0001bd1 <st_dword>
c000666c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006670:	89 f1                	mov    ecx,esi
c0006672:	8d 50 54             	lea    edx,[eax+0x54]
c0006675:	e8 85 e6 ff ff       	call   c0004cff <st_clust.isra.1>
c000667a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667e:	b9 20 00 00 00       	mov    ecx,0x20
c0006683:	8d 50 54             	lea    edx,[eax+0x54]
c0006686:	83 c0 74             	add    eax,0x74
c0006689:	e8 4c b5 ff ff       	call   c0001bda <mem_cpy>
c000668e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006692:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006696:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000669a:	8d 50 74             	lea    edx,[eax+0x74]
c000669d:	e8 5d e6 ff ff       	call   c0004cff <st_clust.isra.1>
c00066a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066ae:	e8 2f db ff ff       	call   c00041e2 <dir_register>
c00066b3:	89 c3                	mov    ebx,eax
c00066b5:	85 c0                	test   eax,eax
c00066b7:	0f 85 3b ff ff ff    	jne    c00065f8 <f_mkdir+0xa1>
c00066bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066c1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c4:	75 74                	jne    c000673a <f_mkdir+0x1e3>
c00066c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066ce:	83 c0 0c             	add    eax,0xc
c00066d1:	e8 fb b4 ff ff       	call   c0001bd1 <st_dword>
c00066d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066da:	89 f2                	mov    edx,esi
c00066dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066df:	83 c0 34             	add    eax,0x34
c00066e2:	e8 ea b4 ff ff       	call   c0001bd1 <st_dword>
c00066e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066eb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066f2:	c1 e2 09             	shl    edx,0x9
c00066f5:	83 c0 38             	add    eax,0x38
c00066f8:	e8 d4 b4 ff ff       	call   c0001bd1 <st_dword>
c00066fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006701:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006705:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006708:	c1 e2 09             	shl    edx,0x9
c000670b:	83 c0 28             	add    eax,0x28
c000670e:	e8 be b4 ff ff       	call   c0001bd1 <st_dword>
c0006713:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006717:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000671e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006721:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006725:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006729:	e8 8b d3 ff ff       	call   c0003ab9 <store_xdir>
c000672e:	89 c3                	mov    ebx,eax
c0006730:	85 c0                	test   eax,eax
c0006732:	0f 85 d4 fe ff ff    	jne    c000660c <f_mkdir+0xb5>
c0006738:	eb 30                	jmp    c000676a <f_mkdir+0x213>
c000673a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000673e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006743:	83 c0 16             	add    eax,0x16
c0006746:	e8 86 b4 ff ff       	call   c0001bd1 <st_dword>
c000674b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674f:	89 f1                	mov    ecx,esi
c0006751:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006755:	e8 a5 e5 ff ff       	call   c0004cff <st_clust.isra.1>
c000675a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000675e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000676a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000676e:	e8 f1 dc ff ff       	call   c0004464 <sync_fs>
c0006773:	89 c3                	mov    ebx,eax
c0006775:	e9 92 fe ff ff       	jmp    c000660c <f_mkdir+0xb5>
c000677a:	83 ec 80             	sub    esp,0xffffff80
c000677d:	89 d8                	mov    eax,ebx
c000677f:	5b                   	pop    ebx
c0006780:	5e                   	pop    esi
c0006781:	5f                   	pop    edi
c0006782:	c3                   	ret    

c0006783 <f_rename>:
c0006783:	55                   	push   ebp
c0006784:	57                   	push   edi
c0006785:	56                   	push   esi
c0006786:	53                   	push   ebx
c0006787:	81 ec fc 00 00 00    	sub    esp,0xfc
c000678d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006794:	e8 a4 b9 ff ff       	call   c000213d <get_ldnumber>
c0006799:	b9 02 00 00 00       	mov    ecx,0x2
c000679e:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067a2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a9:	e8 3d be ff ff       	call   c00025eb <mount_volume>
c00067ae:	85 c0                	test   eax,eax
c00067b0:	0f 85 b5 02 00 00    	jne    c0006a6b <f_rename+0x2e8>
c00067b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ba:	83 ec 0c             	sub    esp,0xc
c00067bd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067c1:	68 60 04 00 00       	push   0x460
c00067c6:	e8 f9 1d 00 00       	call   c00085c4 <ff_memalloc>
c00067cb:	83 c4 10             	add    esp,0x10
c00067ce:	89 c3                	mov    ebx,eax
c00067d0:	b8 11 00 00 00       	mov    eax,0x11
c00067d5:	85 db                	test   ebx,ebx
c00067d7:	0f 84 8e 02 00 00    	je     c0006a6b <f_rename+0x2e8>
c00067dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067e7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067ea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067ed:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067f4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f8:	e8 64 e5 ff ff       	call   c0004d61 <follow_path>
c00067fd:	85 c0                	test   eax,eax
c00067ff:	0f 85 52 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006805:	b8 06 00 00 00       	mov    eax,0x6
c000680a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006812:	0f 85 3f 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006818:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000681c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000681f:	0f 85 05 01 00 00    	jne    c000692a <f_rename+0x1a7>
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	b9 40 00 00 00       	mov    ecx,0x40
c000682d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006831:	e8 a4 b3 ff ff       	call   c0001bda <mem_cpy>
c0006836:	b9 4c 00 00 00       	mov    ecx,0x4c
c000683b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000683f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006846:	e8 8f b3 ff ff       	call   c0001bda <mem_cpy>
c000684b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006852:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006859:	e8 03 e5 ff ff       	call   c0004d61 <follow_path>
c000685e:	85 c0                	test   eax,eax
c0006860:	75 29                	jne    c000688b <f_rename+0x108>
c0006862:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006866:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000686d:	74 0a                	je     c0006879 <f_rename+0xf6>
c000686f:	b8 08 00 00 00       	mov    eax,0x8
c0006874:	e9 de 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c0006879:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006880:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006887:	75 e6                	jne    c000686f <f_rename+0xec>
c0006889:	eb 09                	jmp    c0006894 <f_rename+0x111>
c000688b:	83 f8 04             	cmp    eax,0x4
c000688e:	0f 85 c3 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006894:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000689b:	e8 42 d9 ff ff       	call   c00041e2 <dir_register>
c00068a0:	85 c0                	test   eax,eax
c00068a2:	0f 85 af 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00068a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ac:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068af:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068b2:	89 c5                	mov    ebp,eax
c00068b4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068bb:	8d 46 24             	lea    eax,[esi+0x24]
c00068be:	e8 98 b2 ff ff       	call   c0001b5b <ld_word>
c00068c3:	b9 40 00 00 00       	mov    ecx,0x40
c00068c8:	89 c7                	mov    edi,eax
c00068ca:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068ce:	89 f0                	mov    eax,esi
c00068d0:	e8 05 b3 ff ff       	call   c0001bda <mem_cpy>
c00068d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d9:	89 e9                	mov    ecx,ebp
c00068db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068de:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068e1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068ec:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ef:	0f b7 d7             	movzx  edx,di
c00068f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068f5:	83 c0 24             	add    eax,0x24
c00068f8:	e8 d0 b2 ff ff       	call   c0001bcd <st_word>
c00068fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006901:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006904:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006907:	a8 10                	test   al,0x10
c0006909:	75 06                	jne    c0006911 <f_rename+0x18e>
c000690b:	83 c8 20             	or     eax,0x20
c000690e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006911:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006918:	e8 9c d1 ff ff       	call   c0003ab9 <store_xdir>
c000691d:	85 c0                	test   eax,eax
c000691f:	0f 84 1c 01 00 00    	je     c0006a41 <f_rename+0x2be>
c0006925:	e9 2d 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c000692a:	b9 20 00 00 00       	mov    ecx,0x20
c000692f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006936:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693a:	e8 9b b2 ff ff       	call   c0001bda <mem_cpy>
c000693f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006944:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006948:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694f:	e8 86 b2 ff ff       	call   c0001bda <mem_cpy>
c0006954:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000695b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006962:	e8 fa e3 ff ff       	call   c0004d61 <follow_path>
c0006967:	85 c0                	test   eax,eax
c0006969:	75 27                	jne    c0006992 <f_rename+0x20f>
c000696b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006976:	0f 85 f3 fe ff ff    	jne    c000686f <f_rename+0xec>
c000697c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006983:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698a:	0f 85 df fe ff ff    	jne    c000686f <f_rename+0xec>
c0006990:	eb 09                	jmp    c000699b <f_rename+0x218>
c0006992:	83 f8 04             	cmp    eax,0x4
c0006995:	0f 85 bc 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c000699b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a2:	e8 3b d8 ff ff       	call   c00041e2 <dir_register>
c00069a7:	85 c0                	test   eax,eax
c00069a9:	0f 85 a8 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00069af:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069b6:	b9 13 00 00 00       	mov    ecx,0x13
c00069bb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069be:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069c2:	e8 13 b2 ff ff       	call   c0001bda <mem_cpy>
c00069c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069cb:	a8 10                	test   al,0x10
c00069cd:	75 03                	jne    c00069d2 <f_rename+0x24f>
c00069cf:	83 c8 20             	or     eax,0x20
c00069d2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069dd:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069e1:	74 5e                	je     c0006a41 <f_rename+0x2be>
c00069e3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069ea:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069ee:	74 51                	je     c0006a41 <f_rename+0x2be>
c00069f0:	89 f2                	mov    edx,esi
c00069f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069f6:	8a 07                	mov    al,BYTE PTR [edi]
c00069f8:	e8 d9 e2 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c00069fd:	89 c2                	mov    edx,eax
c00069ff:	89 f8                	mov    eax,edi
c0006a01:	e8 ee b3 ff ff       	call   c0001df4 <clst2sect>
c0006a06:	89 c6                	mov    esi,eax
c0006a08:	89 d1                	mov    ecx,edx
c0006a0a:	b8 02 00 00 00       	mov    eax,0x2
c0006a0f:	09 f2                	or     edx,esi
c0006a11:	74 44                	je     c0006a57 <f_rename+0x2d4>
c0006a13:	89 f2                	mov    edx,esi
c0006a15:	89 f8                	mov    eax,edi
c0006a17:	e8 1d b9 ff ff       	call   c0002339 <move_window>
c0006a1c:	85 c0                	test   eax,eax
c0006a1e:	75 37                	jne    c0006a57 <f_rename+0x2d4>
c0006a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a24:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a28:	75 17                	jne    c0006a41 <f_rename+0x2be>
c0006a2a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a2d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a34:	e8 c6 e2 ff ff       	call   c0004cff <st_clust.isra.1>
c0006a39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a41:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a45:	e8 f4 d0 ff ff       	call   c0003b3e <dir_remove>
c0006a4a:	85 c0                	test   eax,eax
c0006a4c:	75 09                	jne    c0006a57 <f_rename+0x2d4>
c0006a4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a52:	e8 0d da ff ff       	call   c0004464 <sync_fs>
c0006a57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a5b:	83 ec 0c             	sub    esp,0xc
c0006a5e:	53                   	push   ebx
c0006a5f:	e8 78 1b 00 00       	call   c00085dc <ff_memfree>
c0006a64:	83 c4 10             	add    esp,0x10
c0006a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a6b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a71:	5b                   	pop    ebx
c0006a72:	5e                   	pop    esi
c0006a73:	5f                   	pop    edi
c0006a74:	5d                   	pop    ebp
c0006a75:	c3                   	ret    

c0006a76 <f_chmod>:
c0006a76:	57                   	push   edi
c0006a77:	b9 02 00 00 00       	mov    ecx,0x2
c0006a7c:	56                   	push   esi
c0006a7d:	53                   	push   ebx
c0006a7e:	83 ec 60             	sub    esp,0x60
c0006a81:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a85:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a89:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a8d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a91:	e8 55 bb ff ff       	call   c00025eb <mount_volume>
c0006a96:	85 c0                	test   eax,eax
c0006a98:	0f 85 af 00 00 00    	jne    c0006b4d <f_chmod+0xd7>
c0006a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa2:	83 ec 0c             	sub    esp,0xc
c0006aa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa9:	68 60 04 00 00       	push   0x460
c0006aae:	e8 11 1b 00 00       	call   c00085c4 <ff_memalloc>
c0006ab3:	83 c4 10             	add    esp,0x10
c0006ab6:	89 c6                	mov    esi,eax
c0006ab8:	b8 11 00 00 00       	mov    eax,0x11
c0006abd:	85 f6                	test   esi,esi
c0006abf:	0f 84 88 00 00 00    	je     c0006b4d <f_chmod+0xd7>
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006acf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ad2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ad5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006add:	e8 7f e2 ff ff       	call   c0004d61 <follow_path>
c0006ae2:	85 c0                	test   eax,eax
c0006ae4:	75 53                	jne    c0006b39 <f_chmod+0xc3>
c0006ae6:	b8 06 00 00 00       	mov    eax,0x6
c0006aeb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006af0:	75 47                	jne    c0006b39 <f_chmod+0xc3>
c0006af2:	89 f9                	mov    ecx,edi
c0006af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af8:	83 e1 27             	and    ecx,0x27
c0006afb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006afe:	75 1d                	jne    c0006b1d <f_chmod+0xa7>
c0006b00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b03:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b06:	21 cb                	and    ebx,ecx
c0006b08:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b0b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b12:	e8 a2 cf ff ff       	call   c0003ab9 <store_xdir>
c0006b17:	85 c0                	test   eax,eax
c0006b19:	75 1e                	jne    c0006b39 <f_chmod+0xc3>
c0006b1b:	eb 13                	jmp    c0006b30 <f_chmod+0xba>
c0006b1d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b21:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b24:	21 cb                	and    ebx,ecx
c0006b26:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b29:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b2c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b34:	e8 2b d9 ff ff       	call   c0004464 <sync_fs>
c0006b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b3d:	83 ec 0c             	sub    esp,0xc
c0006b40:	56                   	push   esi
c0006b41:	e8 96 1a 00 00       	call   c00085dc <ff_memfree>
c0006b46:	83 c4 10             	add    esp,0x10
c0006b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b4d:	83 c4 60             	add    esp,0x60
c0006b50:	5b                   	pop    ebx
c0006b51:	5e                   	pop    esi
c0006b52:	5f                   	pop    edi
c0006b53:	c3                   	ret    

c0006b54 <f_utime>:
c0006b54:	56                   	push   esi
c0006b55:	b9 02 00 00 00       	mov    ecx,0x2
c0006b5a:	53                   	push   ebx
c0006b5b:	83 ec 64             	sub    esp,0x64
c0006b5e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b62:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b66:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b6a:	e8 7c ba ff ff       	call   c00025eb <mount_volume>
c0006b6f:	85 c0                	test   eax,eax
c0006b71:	0f 85 b5 00 00 00    	jne    c0006c2c <f_utime+0xd8>
c0006b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b7b:	83 ec 0c             	sub    esp,0xc
c0006b7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b82:	68 60 04 00 00       	push   0x460
c0006b87:	e8 38 1a 00 00       	call   c00085c4 <ff_memalloc>
c0006b8c:	83 c4 10             	add    esp,0x10
c0006b8f:	89 c3                	mov    ebx,eax
c0006b91:	b8 11 00 00 00       	mov    eax,0x11
c0006b96:	85 db                	test   ebx,ebx
c0006b98:	0f 84 8e 00 00 00    	je     c0006c2c <f_utime+0xd8>
c0006b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bab:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bae:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bb6:	e8 a6 e1 ff ff       	call   c0004d61 <follow_path>
c0006bbb:	85 c0                	test   eax,eax
c0006bbd:	75 59                	jne    c0006c18 <f_utime+0xc4>
c0006bbf:	b8 06 00 00 00       	mov    eax,0x6
c0006bc4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc9:	75 4d                	jne    c0006c18 <f_utime+0xc4>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bd3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bd7:	c1 e2 10             	shl    edx,0x10
c0006bda:	09 ca                	or     edx,ecx
c0006bdc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bdf:	75 1a                	jne    c0006bfb <f_utime+0xa7>
c0006be1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006be4:	83 c0 0c             	add    eax,0xc
c0006be7:	e8 e5 af ff ff       	call   c0001bd1 <st_dword>
c0006bec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bf0:	e8 c4 ce ff ff       	call   c0003ab9 <store_xdir>
c0006bf5:	85 c0                	test   eax,eax
c0006bf7:	75 1f                	jne    c0006c18 <f_utime+0xc4>
c0006bf9:	eb 14                	jmp    c0006c0f <f_utime+0xbb>
c0006bfb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bff:	83 c0 16             	add    eax,0x16
c0006c02:	e8 ca af ff ff       	call   c0001bd1 <st_dword>
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c13:	e8 4c d8 ff ff       	call   c0004464 <sync_fs>
c0006c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c1c:	83 ec 0c             	sub    esp,0xc
c0006c1f:	53                   	push   ebx
c0006c20:	e8 b7 19 00 00       	call   c00085dc <ff_memfree>
c0006c25:	83 c4 10             	add    esp,0x10
c0006c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c2c:	83 c4 64             	add    esp,0x64
c0006c2f:	5b                   	pop    ebx
c0006c30:	5e                   	pop    esi
c0006c31:	c3                   	ret    

c0006c32 <f_getlabel>:
c0006c32:	55                   	push   ebp
c0006c33:	31 c9                	xor    ecx,ecx
c0006c35:	57                   	push   edi
c0006c36:	56                   	push   esi
c0006c37:	53                   	push   ebx
c0006c38:	83 ec 6c             	sub    esp,0x6c
c0006c3b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c46:	e8 a0 b9 ff ff       	call   c00025eb <mount_volume>
c0006c4b:	89 c6                	mov    esi,eax
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	0f 85 c1 01 00 00    	jne    c0006e16 <f_getlabel+0x1e4>
c0006c55:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c5d:	0f 84 5f 01 00 00    	je     c0006dc2 <f_getlabel+0x190>
c0006c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c67:	31 d2                	xor    edx,edx
c0006c69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c6d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c75:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c79:	e8 39 c4 ff ff       	call   c00030b7 <dir_sdi>
c0006c7e:	85 c0                	test   eax,eax
c0006c80:	0f 85 2d 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c86:	ba 01 00 00 00       	mov    edx,0x1
c0006c8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c8f:	e8 33 cc ff ff       	call   c00038c7 <dir_read>
c0006c94:	85 c0                	test   eax,eax
c0006c96:	0f 85 17 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ca3:	74 09                	je     c0006cae <f_getlabel+0x7c>
c0006ca5:	31 db                	xor    ebx,ebx
c0006ca7:	31 c9                	xor    ecx,ecx
c0006ca9:	e9 c8 00 00 00       	jmp    c0006d76 <f_getlabel+0x144>
c0006cae:	31 ed                	xor    ebp,ebp
c0006cb0:	31 db                	xor    ebx,ebx
c0006cb2:	31 ff                	xor    edi,edi
c0006cb4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cbc:	39 fa                	cmp    edx,edi
c0006cbe:	76 4b                	jbe    c0006d0b <f_getlabel+0xd9>
c0006cc0:	47                   	inc    edi
c0006cc1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cc4:	01 d0                	add    eax,edx
c0006cc6:	e8 90 ae ff ff       	call   c0001b5b <ld_word>
c0006ccb:	66 85 ed             	test   bp,bp
c0006cce:	75 0d                	jne    c0006cdd <f_getlabel+0xab>
c0006cd0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cd6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cdb:	76 28                	jbe    c0006d05 <f_getlabel+0xd3>
c0006cdd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ce4:	89 e9                	mov    ecx,ebp
c0006ce6:	01 da                	add    edx,ebx
c0006ce8:	c1 e1 10             	shl    ecx,0x10
c0006ceb:	0f b7 c0             	movzx  eax,ax
c0006cee:	09 c8                	or     eax,ecx
c0006cf0:	b9 04 00 00 00       	mov    ecx,0x4
c0006cf5:	e8 01 b0 ff ff       	call   c0001cfb <put_utf>
c0006cfa:	84 c0                	test   al,al
c0006cfc:	74 0b                	je     c0006d09 <f_getlabel+0xd7>
c0006cfe:	0f b6 c0             	movzx  eax,al
c0006d01:	01 c3                	add    ebx,eax
c0006d03:	31 c0                	xor    eax,eax
c0006d05:	89 c5                	mov    ebp,eax
c0006d07:	eb ab                	jmp    c0006cb4 <f_getlabel+0x82>
c0006d09:	31 db                	xor    ebx,ebx
c0006d0b:	66 85 ed             	test   bp,bp
c0006d0e:	74 02                	je     c0006d12 <f_getlabel+0xe0>
c0006d10:	31 db                	xor    ebx,ebx
c0006d12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d19:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d1d:	e9 a0 00 00 00       	jmp    c0006dc2 <f_getlabel+0x190>
c0006d22:	83 ff 0b             	cmp    edi,0xb
c0006d25:	74 11                	je     c0006d38 <f_getlabel+0x106>
c0006d27:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d30:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d33:	c1 e0 08             	shl    eax,0x8
c0006d36:	09 c2                	or     edx,eax
c0006d38:	0f b7 d2             	movzx  edx,dx
c0006d3b:	50                   	push   eax
c0006d3c:	50                   	push   eax
c0006d3d:	68 b5 01 00 00       	push   0x1b5
c0006d42:	52                   	push   edx
c0006d43:	e8 44 19 00 00       	call   c000868c <ff_oem2uni>
c0006d48:	83 c4 10             	add    esp,0x10
c0006d4b:	66 85 c0             	test   ax,ax
c0006d4e:	74 46                	je     c0006d96 <f_getlabel+0x164>
c0006d50:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d57:	0f b7 c0             	movzx  eax,ax
c0006d5a:	01 da                	add    edx,ebx
c0006d5c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d61:	e8 95 af ff ff       	call   c0001cfb <put_utf>
c0006d66:	84 c0                	test   al,al
c0006d68:	74 2c                	je     c0006d96 <f_getlabel+0x164>
c0006d6a:	0f b6 c0             	movzx  eax,al
c0006d6d:	01 c3                	add    ebx,eax
c0006d6f:	83 ff 0b             	cmp    edi,0xb
c0006d72:	74 24                	je     c0006d98 <f_getlabel+0x166>
c0006d74:	89 f9                	mov    ecx,edi
c0006d76:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d7a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d7d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d82:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d8b:	e8 9f ae ff ff       	call   c0001c2f <dbc_1st>
c0006d90:	85 c0                	test   eax,eax
c0006d92:	74 a4                	je     c0006d38 <f_getlabel+0x106>
c0006d94:	eb 8c                	jmp    c0006d22 <f_getlabel+0xf0>
c0006d96:	31 db                	xor    ebx,ebx
c0006d98:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d9f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006da2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da9:	74 17                	je     c0006dc2 <f_getlabel+0x190>
c0006dab:	4b                   	dec    ebx
c0006dac:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006daf:	74 ee                	je     c0006d9f <f_getlabel+0x16d>
c0006db1:	eb 0f                	jmp    c0006dc2 <f_getlabel+0x190>
c0006db3:	83 f8 04             	cmp    eax,0x4
c0006db6:	75 5c                	jne    c0006e14 <f_getlabel+0x1e2>
c0006db8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dbf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dc2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dca:	74 4a                	je     c0006e16 <f_getlabel+0x1e4>
c0006dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dd0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dd3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dd6:	e8 5e b5 ff ff       	call   c0002339 <move_window>
c0006ddb:	89 c6                	mov    esi,eax
c0006ddd:	85 c0                	test   eax,eax
c0006ddf:	75 35                	jne    c0006e16 <f_getlabel+0x1e4>
c0006de1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006de5:	b8 43 00 00 00       	mov    eax,0x43
c0006dea:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dec:	80 f9 03             	cmp    cl,0x3
c0006def:	74 0f                	je     c0006e00 <f_getlabel+0x1ce>
c0006df1:	31 c0                	xor    eax,eax
c0006df3:	80 f9 04             	cmp    cl,0x4
c0006df6:	0f 94 c0             	sete   al
c0006df9:	48                   	dec    eax
c0006dfa:	83 e0 c3             	and    eax,0xffffffc3
c0006dfd:	83 c0 64             	add    eax,0x64
c0006e00:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e04:	e8 5f ad ff ff       	call   c0001b68 <ld_dword>
c0006e09:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e10:	89 07                	mov    DWORD PTR [edi],eax
c0006e12:	eb 02                	jmp    c0006e16 <f_getlabel+0x1e4>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	83 c4 6c             	add    esp,0x6c
c0006e19:	89 f0                	mov    eax,esi
c0006e1b:	5b                   	pop    ebx
c0006e1c:	5e                   	pop    esi
c0006e1d:	5f                   	pop    edi
c0006e1e:	5d                   	pop    ebp
c0006e1f:	c3                   	ret    

c0006e20 <f_setlabel>:
c0006e20:	56                   	push   esi
c0006e21:	b9 02 00 00 00       	mov    ecx,0x2
c0006e26:	53                   	push   ebx
c0006e27:	83 ec 74             	sub    esp,0x74
c0006e2a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e35:	e8 b1 b7 ff ff       	call   c00025eb <mount_volume>
c0006e3a:	89 c6                	mov    esi,eax
c0006e3c:	85 c0                	test   eax,eax
c0006e3e:	0f 85 41 02 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e4b:	0f 85 8e 00 00 00    	jne    c0006edf <f_setlabel+0xbf>
c0006e51:	b9 16 00 00 00       	mov    ecx,0x16
c0006e56:	31 d2                	xor    edx,edx
c0006e58:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e5c:	31 db                	xor    ebx,ebx
c0006e5e:	e8 8c ad ff ff       	call   c0001bef <mem_set>
c0006e63:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e6a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e6d:	0f 86 0a 01 00 00    	jbe    c0006f7d <f_setlabel+0x15d>
c0006e73:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e7a:	e8 b6 ad ff ff       	call   c0001c35 <tchar2uni>
c0006e7f:	89 c6                	mov    esi,eax
c0006e81:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e86:	76 2a                	jbe    c0006eb2 <f_setlabel+0x92>
c0006e88:	83 f8 ff             	cmp    eax,0xffffffff
c0006e8b:	74 05                	je     c0006e92 <f_setlabel+0x72>
c0006e8d:	83 fb 09             	cmp    ebx,0x9
c0006e90:	76 0a                	jbe    c0006e9c <f_setlabel+0x7c>
c0006e92:	be 06 00 00 00       	mov    esi,0x6
c0006e97:	e9 e9 01 00 00       	jmp    c0007085 <f_setlabel+0x265>
c0006e9c:	89 c2                	mov    edx,eax
c0006e9e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ea2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ea5:	c1 ea 10             	shr    edx,0x10
c0006ea8:	01 c8                	add    eax,ecx
c0006eaa:	43                   	inc    ebx
c0006eab:	e8 1d ad ff ff       	call   c0001bcd <st_word>
c0006eb0:	eb 04                	jmp    c0006eb6 <f_setlabel+0x96>
c0006eb2:	85 c0                	test   eax,eax
c0006eb4:	74 dc                	je     c0006e92 <f_setlabel+0x72>
c0006eb6:	89 f2                	mov    edx,esi
c0006eb8:	b8 d7 1e 02 c0       	mov    eax,0xc0021ed7
c0006ebd:	e8 5b ad ff ff       	call   c0001c1d <chk_chr>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	75 cc                	jne    c0006e92 <f_setlabel+0x72>
c0006ec6:	83 fb 0a             	cmp    ebx,0xa
c0006ec9:	77 c7                	ja     c0006e92 <f_setlabel+0x72>
c0006ecb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ece:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ed2:	0f b7 d6             	movzx  edx,si
c0006ed5:	01 c8                	add    eax,ecx
c0006ed7:	43                   	inc    ebx
c0006ed8:	e8 f0 ac ff ff       	call   c0001bcd <st_word>
c0006edd:	eb 84                	jmp    c0006e63 <f_setlabel+0x43>
c0006edf:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee4:	ba 20 00 00 00       	mov    edx,0x20
c0006ee9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006eed:	31 db                	xor    ebx,ebx
c0006eef:	e8 fb ac ff ff       	call   c0001bef <mem_set>
c0006ef4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006efb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006efe:	76 60                	jbe    c0006f60 <f_setlabel+0x140>
c0006f00:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f07:	e8 29 ad ff ff       	call   c0001c35 <tchar2uni>
c0006f0c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f11:	0f 87 7b ff ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0006f17:	83 ec 0c             	sub    esp,0xc
c0006f1a:	50                   	push   eax
c0006f1b:	e8 e0 17 00 00       	call   c0008700 <ff_wtoupper>
c0006f20:	5a                   	pop    edx
c0006f21:	59                   	pop    ecx
c0006f22:	68 b5 01 00 00       	push   0x1b5
c0006f27:	50                   	push   eax
c0006f28:	e8 c7 16 00 00       	call   c00085f4 <ff_uni2oem>
c0006f2d:	83 c4 10             	add    esp,0x10
c0006f30:	89 c6                	mov    esi,eax
c0006f32:	66 85 c0             	test   ax,ax
c0006f35:	0f 84 57 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f3b:	0f b7 d0             	movzx  edx,ax
c0006f3e:	b8 d0 1e 02 c0       	mov    eax,0xc0021ed0
c0006f43:	e8 d5 ac ff ff       	call   c0001c1d <chk_chr>
c0006f48:	85 c0                	test   eax,eax
c0006f4a:	0f 85 42 ff ff ff    	jne    c0006e92 <f_setlabel+0x72>
c0006f50:	66 81 fe ff 00       	cmp    si,0xff
c0006f55:	0f 87 14 01 00 00    	ja     c000706f <f_setlabel+0x24f>
c0006f5b:	e9 fa 00 00 00       	jmp    c000705a <f_setlabel+0x23a>
c0006f60:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f65:	0f 84 27 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f6b:	85 db                	test   ebx,ebx
c0006f6d:	74 0e                	je     c0006f7d <f_setlabel+0x15d>
c0006f6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f72:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f77:	75 04                	jne    c0006f7d <f_setlabel+0x15d>
c0006f79:	89 c3                	mov    ebx,eax
c0006f7b:	eb ee                	jmp    c0006f6b <f_setlabel+0x14b>
c0006f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f81:	31 d2                	xor    edx,edx
c0006f83:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f87:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f93:	e8 1f c1 ff ff       	call   c00030b7 <dir_sdi>
c0006f98:	89 c6                	mov    esi,eax
c0006f9a:	85 c0                	test   eax,eax
c0006f9c:	0f 85 e3 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006fa2:	ba 01 00 00 00       	mov    edx,0x1
c0006fa7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fab:	e8 17 c9 ff ff       	call   c00038c7 <dir_read>
c0006fb0:	85 c0                	test   eax,eax
c0006fb2:	75 21                	jne    c0006fd5 <f_setlabel+0x1b5>
c0006fb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fbc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fbf:	74 5d                	je     c000701e <f_setlabel+0x1fe>
c0006fc1:	85 db                	test   ebx,ebx
c0006fc3:	74 0b                	je     c0006fd0 <f_setlabel+0x1b0>
c0006fc5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fca:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fce:	eb 70                	jmp    c0007040 <f_setlabel+0x220>
c0006fd0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fd3:	eb 70                	jmp    c0007045 <f_setlabel+0x225>
c0006fd5:	83 f8 04             	cmp    eax,0x4
c0006fd8:	75 7c                	jne    c0007056 <f_setlabel+0x236>
c0006fda:	85 db                	test   ebx,ebx
c0006fdc:	0f 84 a3 00 00 00    	je     c0007085 <f_setlabel+0x265>
c0006fe2:	ba 01 00 00 00       	mov    edx,0x1
c0006fe7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006feb:	e8 51 ca ff ff       	call   c0003a41 <dir_alloc>
c0006ff0:	89 c6                	mov    esi,eax
c0006ff2:	85 c0                	test   eax,eax
c0006ff4:	0f 85 8b 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006ffa:	31 d2                	xor    edx,edx
c0006ffc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007000:	b9 20 00 00 00       	mov    ecx,0x20
c0007005:	e8 e5 ab ff ff       	call   c0001bef <mem_set>
c000700a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000700e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007011:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007015:	75 18                	jne    c000702f <f_setlabel+0x20f>
c0007017:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000701a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000701e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007021:	b9 16 00 00 00       	mov    ecx,0x16
c0007026:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702a:	83 c0 02             	add    eax,0x2
c000702d:	eb 9b                	jmp    c0006fca <f_setlabel+0x1aa>
c000702f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007033:	b9 0b 00 00 00       	mov    ecx,0xb
c0007038:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000703c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007040:	e8 95 ab ff ff       	call   c0001bda <mem_cpy>
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000704d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007051:	e8 0e d4 ff ff       	call   c0004464 <sync_fs>
c0007056:	89 c6                	mov    esi,eax
c0007058:	eb 2b                	jmp    c0007085 <f_setlabel+0x265>
c000705a:	83 fb 0a             	cmp    ebx,0xa
c000705d:	0f 87 2f fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007063:	89 f0                	mov    eax,esi
c0007065:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007069:	43                   	inc    ebx
c000706a:	e9 85 fe ff ff       	jmp    c0006ef4 <f_setlabel+0xd4>
c000706f:	83 fb 09             	cmp    ebx,0x9
c0007072:	0f 87 1a fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007078:	89 f0                	mov    eax,esi
c000707a:	66 c1 e8 08          	shr    ax,0x8
c000707e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007082:	43                   	inc    ebx
c0007083:	eb de                	jmp    c0007063 <f_setlabel+0x243>
c0007085:	89 f0                	mov    eax,esi
c0007087:	83 c4 74             	add    esp,0x74
c000708a:	5b                   	pop    ebx
c000708b:	5e                   	pop    esi
c000708c:	c3                   	ret    

c000708d <f_expand>:
c000708d:	55                   	push   ebp
c000708e:	57                   	push   edi
c000708f:	56                   	push   esi
c0007090:	53                   	push   ebx
c0007091:	83 ec 3c             	sub    esp,0x3c
c0007094:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007098:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000709c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ac:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070b4:	89 d8                	mov    eax,ebx
c00070b6:	e8 a3 b1 ff ff       	call   c000225e <validate>
c00070bb:	89 c5                	mov    ebp,eax
c00070bd:	85 c0                	test   eax,eax
c00070bf:	0f 85 f4 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c9:	85 ed                	test   ebp,ebp
c00070cb:	0f 85 e8 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d9:	75 0a                	jne    c00070e5 <f_expand+0x58>
c00070db:	bd 07 00 00 00       	mov    ebp,0x7
c00070e0:	e9 d4 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00070e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070eb:	75 ee                	jne    c00070db <f_expand+0x4e>
c00070ed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070f1:	74 e8                	je     c00070db <f_expand+0x4e>
c00070f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070f7:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f9:	80 f9 04             	cmp    cl,0x4
c00070fc:	74 07                	je     c0007105 <f_expand+0x78>
c00070fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007103:	77 d6                	ja     c00070db <f_expand+0x4e>
c0007105:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007109:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000710d:	c1 e0 09             	shl    eax,0x9
c0007110:	8d 50 ff             	lea    edx,[eax-0x1]
c0007113:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007117:	0f 95 c2             	setne  dl
c000711a:	0f b6 d2             	movzx  edx,dl
c000711d:	89 d7                	mov    edi,edx
c000711f:	31 d2                	xor    edx,edx
c0007121:	52                   	push   edx
c0007122:	50                   	push   eax
c0007123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000712b:	e8 74 9d 01 00       	call   c0020ea4 <__udivdi3>
c0007130:	83 c4 10             	add    esp,0x10
c0007133:	01 f8                	add    eax,edi
c0007135:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007139:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000713c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007140:	83 ff 01             	cmp    edi,0x1
c0007143:	76 05                	jbe    c000714a <f_expand+0xbd>
c0007145:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007148:	77 05                	ja     c000714f <f_expand+0xc2>
c000714a:	bf 02 00 00 00       	mov    edi,0x2
c000714f:	80 f9 04             	cmp    cl,0x4
c0007152:	75 19                	jne    c000716d <f_expand+0xe0>
c0007154:	89 f0                	mov    eax,esi
c0007156:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000715a:	89 fa                	mov    edx,edi
c000715c:	e8 f3 b9 ff ff       	call   c0002b54 <find_bitmap>
c0007161:	89 c6                	mov    esi,eax
c0007163:	85 c0                	test   eax,eax
c0007165:	0f 84 70 ff ff ff    	je     c00070db <f_expand+0x4e>
c000716b:	eb 7f                	jmp    c00071ec <f_expand+0x15f>
c000716d:	89 fe                	mov    esi,edi
c000716f:	89 f9                	mov    ecx,edi
c0007171:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007179:	89 ca                	mov    edx,ecx
c000717b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000717f:	89 d8                	mov    eax,ebx
c0007181:	e8 3b bd ff ff       	call   c0002ec1 <get_fat>
c0007186:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000718a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000718e:	41                   	inc    ecx
c000718f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007193:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007196:	77 05                	ja     c000719d <f_expand+0x110>
c0007198:	b9 02 00 00 00       	mov    ecx,0x2
c000719d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071a2:	74 3e                	je     c00071e2 <f_expand+0x155>
c00071a4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a9:	75 0a                	jne    c00071b5 <f_expand+0x128>
c00071ab:	bd 01 00 00 00       	mov    ebp,0x1
c00071b0:	e9 04 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071b5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ba:	75 13                	jne    c00071cf <f_expand+0x142>
c00071bc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071c4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c8:	75 0f                	jne    c00071d9 <f_expand+0x14c>
c00071ca:	e9 ce 00 00 00       	jmp    c000729d <f_expand+0x210>
c00071cf:	89 ce                	mov    esi,ecx
c00071d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d9:	39 f9                	cmp    ecx,edi
c00071db:	75 9c                	jne    c0007179 <f_expand+0xec>
c00071dd:	e9 f9 fe ff ff       	jmp    c00070db <f_expand+0x4e>
c00071e2:	bd 02 00 00 00       	mov    ebp,0x2
c00071e7:	e9 cd 00 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071ec:	83 f8 ff             	cmp    eax,0xffffffff
c00071ef:	74 ba                	je     c00071ab <f_expand+0x11e>
c00071f1:	8d 7e ff             	lea    edi,[esi-0x1]
c00071f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007201:	74 51                	je     c0007254 <f_expand+0x1c7>
c0007203:	83 ec 0c             	sub    esp,0xc
c0007206:	89 f2                	mov    edx,esi
c0007208:	6a 01                	push   0x1
c000720a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000720e:	e8 f4 b9 ff ff       	call   c0002c07 <change_bitmap>
c0007213:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007217:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000721b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	85 c0                	test   eax,eax
c0007224:	74 2e                	je     c0007254 <f_expand+0x1c7>
c0007226:	eb 71                	jmp    c0007299 <f_expand+0x20c>
c0007228:	83 c9 ff             	or     ecx,0xffffffff
c000722b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007230:	74 03                	je     c0007235 <f_expand+0x1a8>
c0007232:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007235:	89 fa                	mov    edx,edi
c0007237:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000723b:	e8 7c ba ff ff       	call   c0002cbc <put_fat>
c0007240:	85 c0                	test   eax,eax
c0007242:	75 55                	jne    c0007299 <f_expand+0x20c>
c0007244:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007248:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000724c:	47                   	inc    edi
c000724d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007252:	75 d4                	jne    c0007228 <f_expand+0x19b>
c0007254:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007258:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000725c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007261:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007264:	74 53                	je     c00072b9 <f_expand+0x22c>
c0007266:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007269:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000726d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007271:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007275:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007279:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000727c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000727f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007282:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007285:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007288:	39 ca                	cmp    edx,ecx
c000728a:	77 2d                	ja     c00072b9 <f_expand+0x22c>
c000728c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007290:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007294:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007297:	eb 20                	jmp    c00072b9 <f_expand+0x22c>
c0007299:	89 c5                	mov    ebp,eax
c000729b:	eb 1c                	jmp    c00072b9 <f_expand+0x22c>
c000729d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072a2:	74 0c                	je     c00072b0 <f_expand+0x223>
c00072a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a8:	89 f7                	mov    edi,esi
c00072aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072ae:	eb 9d                	jmp    c000724d <f_expand+0x1c0>
c00072b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072b7:	eb 9b                	jmp    c0007254 <f_expand+0x1c7>
c00072b9:	83 c4 3c             	add    esp,0x3c
c00072bc:	89 e8                	mov    eax,ebp
c00072be:	5b                   	pop    ebx
c00072bf:	5e                   	pop    esi
c00072c0:	5f                   	pop    edi
c00072c1:	5d                   	pop    ebp
c00072c2:	c3                   	ret    

c00072c3 <f_forward>:
c00072c3:	55                   	push   ebp
c00072c4:	57                   	push   edi
c00072c5:	56                   	push   esi
c00072c6:	53                   	push   ebx
c00072c7:	83 ec 2c             	sub    esp,0x2c
c00072ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072ce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072dc:	89 d8                	mov    eax,ebx
c00072de:	e8 7b af ff ff       	call   c000225e <validate>
c00072e3:	89 c5                	mov    ebp,eax
c00072e5:	85 c0                	test   eax,eax
c00072e7:	0f 85 aa 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072ed:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072f1:	85 ed                	test   ebp,ebp
c00072f3:	0f 85 9e 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072f9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072fd:	0f 84 8f 01 00 00    	je     c0007492 <f_forward+0x1cf>
c0007303:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007306:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007309:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000730c:	bf 00 00 00 00       	mov    edi,0x0
c0007311:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007314:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007318:	89 d1                	mov    ecx,edx
c000731a:	19 f9                	sbb    ecx,edi
c000731c:	0f 83 cf 00 00 00    	jae    c00073f1 <f_forward+0x12e>
c0007322:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007326:	e9 c6 00 00 00       	jmp    c00073f1 <f_forward+0x12e>
c000732b:	50                   	push   eax
c000732c:	50                   	push   eax
c000732d:	6a 00                	push   0x0
c000732f:	6a 00                	push   0x0
c0007331:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007335:	83 c4 10             	add    esp,0x10
c0007338:	85 c0                	test   eax,eax
c000733a:	0f 84 57 01 00 00    	je     c0007497 <f_forward+0x1d4>
c0007340:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007343:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007347:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000734a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000734e:	89 d7                	mov    edi,edx
c0007350:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007353:	89 c6                	mov    esi,eax
c0007355:	0f ac fe 09          	shrd   esi,edi,0x9
c0007359:	21 ce                	and    esi,ecx
c000735b:	89 c1                	mov    ecx,eax
c000735d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007363:	0f 84 98 00 00 00    	je     c0007401 <f_forward+0x13e>
c0007369:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000736d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007370:	89 c8                	mov    eax,ecx
c0007372:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007376:	e8 79 aa ff ff       	call   c0001df4 <clst2sect>
c000737b:	89 d7                	mov    edi,edx
c000737d:	09 c7                	or     edi,eax
c000737f:	0f 84 9e 00 00 00    	je     c0007423 <f_forward+0x160>
c0007385:	31 ff                	xor    edi,edi
c0007387:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000738a:	01 c6                	add    esi,eax
c000738c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007390:	11 d7                	adc    edi,edx
c0007392:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007395:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007398:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739c:	39 fa                	cmp    edx,edi
c000739e:	0f 85 a2 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073a4:	39 f0                	cmp    eax,esi
c00073a6:	0f 85 9a 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073af:	ba 00 02 00 00       	mov    edx,0x200
c00073b4:	25 ff 01 00 00       	and    eax,0x1ff
c00073b9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073bd:	29 c2                	sub    edx,eax
c00073bf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073c2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073c5:	39 d1                	cmp    ecx,edx
c00073c7:	76 02                	jbe    c00073cb <f_forward+0x108>
c00073c9:	89 d1                	mov    ecx,edx
c00073cb:	8d 73 50             	lea    esi,[ebx+0x50]
c00073ce:	52                   	push   edx
c00073cf:	01 c6                	add    esi,eax
c00073d1:	52                   	push   edx
c00073d2:	51                   	push   ecx
c00073d3:	56                   	push   esi
c00073d4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d8:	83 c4 10             	add    esp,0x10
c00073db:	85 c0                	test   eax,eax
c00073dd:	74 44                	je     c0007423 <f_forward+0x160>
c00073df:	31 ff                	xor    edi,edi
c00073e1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073e4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073e7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073eb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ef:	01 07                	add    DWORD PTR [edi],eax
c00073f1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073f6:	0f 85 2f ff ff ff    	jne    c000732b <f_forward+0x68>
c00073fc:	e9 96 00 00 00       	jmp    c0007497 <f_forward+0x1d4>
c0007401:	85 f6                	test   esi,esi
c0007403:	0f 85 60 ff ff ff    	jne    c0007369 <f_forward+0xa6>
c0007409:	89 d7                	mov    edi,edx
c000740b:	09 c7                	or     edi,eax
c000740d:	75 05                	jne    c0007414 <f_forward+0x151>
c000740f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007412:	eb 0a                	jmp    c000741e <f_forward+0x15b>
c0007414:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007417:	89 d8                	mov    eax,ebx
c0007419:	e8 a3 ba ff ff       	call   c0002ec1 <get_fat>
c000741e:	83 f8 01             	cmp    eax,0x1
c0007421:	77 0b                	ja     c000742e <f_forward+0x16b>
c0007423:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007427:	bd 02 00 00 00       	mov    ebp,0x2
c000742c:	eb 69                	jmp    c0007497 <f_forward+0x1d4>
c000742e:	83 f8 ff             	cmp    eax,0xffffffff
c0007431:	75 0b                	jne    c000743e <f_forward+0x17b>
c0007433:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007437:	bd 01 00 00 00       	mov    ebp,0x1
c000743c:	eb 59                	jmp    c0007497 <f_forward+0x1d4>
c000743e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007441:	e9 23 ff ff ff       	jmp    c0007369 <f_forward+0xa6>
c0007446:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000744a:	79 20                	jns    c000746c <f_forward+0x1a9>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	6a 01                	push   0x1
c0007451:	52                   	push   edx
c0007452:	50                   	push   eax
c0007453:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007457:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000745b:	50                   	push   eax
c000745c:	e8 c5 a6 ff ff       	call   c0001b26 <disk_write>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	85 c0                	test   eax,eax
c0007466:	75 cb                	jne    c0007433 <f_forward+0x170>
c0007468:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000746c:	83 ec 0c             	sub    esp,0xc
c000746f:	6a 01                	push   0x1
c0007471:	57                   	push   edi
c0007472:	56                   	push   esi
c0007473:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007477:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000747b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000747f:	50                   	push   eax
c0007480:	e8 8b a6 ff ff       	call   c0001b10 <disk_read>
c0007485:	83 c4 20             	add    esp,0x20
c0007488:	85 c0                	test   eax,eax
c000748a:	0f 84 1c ff ff ff    	je     c00073ac <f_forward+0xe9>
c0007490:	eb a1                	jmp    c0007433 <f_forward+0x170>
c0007492:	bd 07 00 00 00       	mov    ebp,0x7
c0007497:	83 c4 2c             	add    esp,0x2c
c000749a:	89 e8                	mov    eax,ebp
c000749c:	5b                   	pop    ebx
c000749d:	5e                   	pop    esi
c000749e:	5f                   	pop    edi
c000749f:	5d                   	pop    ebp
c00074a0:	c3                   	ret    

c00074a1 <f_mkfs>:
c00074a1:	55                   	push   ebp
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074aa:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074b0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074b7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074be:	e8 7a ac ff ff       	call   c000213d <get_ldnumber>
c00074c3:	85 c0                	test   eax,eax
c00074c5:	0f 88 ec 10 00 00    	js     c00085b7 <f_mkfs+0x1116>
c00074cb:	8b 14 85 00 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f00]
c00074d2:	85 d2                	test   edx,edx
c00074d4:	74 03                	je     c00074d9 <f_mkfs+0x38>
c00074d6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d9:	85 f6                	test   esi,esi
c00074db:	75 05                	jne    c00074e2 <f_mkfs+0x41>
c00074dd:	be c0 1e 02 c0       	mov    esi,0xc0021ec0
c00074e2:	83 ec 0c             	sub    esp,0xc
c00074e5:	0f b6 c0             	movzx  eax,al
c00074e8:	bb 03 00 00 00       	mov    ebx,0x3
c00074ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074f5:	e8 13 a6 ff ff       	call   c0001b0d <disk_initialize>
c00074fa:	83 c4 10             	add    esp,0x10
c00074fd:	a8 01                	test   al,0x1
c00074ff:	0f 85 b2 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007505:	bb 0a 00 00 00       	mov    ebx,0xa
c000750a:	a8 04                	test   al,0x4
c000750c:	0f 85 a5 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007512:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007515:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007519:	85 c0                	test   eax,eax
c000751b:	75 20                	jne    c000753d <f_mkfs+0x9c>
c000751d:	51                   	push   ecx
c000751e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007522:	50                   	push   eax
c0007523:	6a 03                	push   0x3
c0007525:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007529:	e8 0e a6 ff ff       	call   c0001b3c <disk_ioctl>
c000752e:	83 c4 10             	add    esp,0x10
c0007531:	85 c0                	test   eax,eax
c0007533:	74 08                	je     c000753d <f_mkfs+0x9c>
c0007535:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000753d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007541:	8d 42 ff             	lea    eax,[edx-0x1]
c0007544:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007549:	77 04                	ja     c000754f <f_mkfs+0xae>
c000754b:	85 c2                	test   edx,eax
c000754d:	74 08                	je     c0007557 <f_mkfs+0xb6>
c000754f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007557:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000755a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000755e:	48                   	dec    eax
c000755f:	3c 01                	cmp    al,0x1
c0007561:	76 05                	jbe    c0007568 <f_mkfs+0xc7>
c0007563:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000756b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000756f:	48                   	dec    eax
c0007570:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007575:	77 07                	ja     c000757e <f_mkfs+0xdd>
c0007577:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000757c:	74 08                	je     c0007586 <f_mkfs+0xe5>
c000757e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007586:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007589:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000758f:	77 07                	ja     c0007598 <f_mkfs+0xf7>
c0007591:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007594:	85 d8                	test   eax,ebx
c0007596:	74 02                	je     c000759a <f_mkfs+0xf9>
c0007598:	31 db                	xor    ebx,ebx
c000759a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075a5:	77 0a                	ja     c00075b1 <f_mkfs+0x110>
c00075a7:	bb 11 00 00 00       	mov    ebx,0x11
c00075ac:	e9 06 10 00 00       	jmp    c00085b7 <f_mkfs+0x1116>
c00075b1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ba:	85 ed                	test   ebp,ebp
c00075bc:	75 1e                	jne    c00075dc <f_mkfs+0x13b>
c00075be:	83 ec 0c             	sub    esp,0xc
c00075c1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075cd:	50                   	push   eax
c00075ce:	e8 f1 0f 00 00       	call   c00085c4 <ff_memalloc>
c00075d3:	83 c4 10             	add    esp,0x10
c00075d6:	89 c5                	mov    ebp,eax
c00075d8:	85 c0                	test   eax,eax
c00075da:	74 cb                	je     c00075a7 <f_mkfs+0x106>
c00075dc:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075e4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075ec:	52                   	push   edx
c00075ed:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075f1:	50                   	push   eax
c00075f2:	6a 01                	push   0x1
c00075f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f8:	e8 3f a5 ff ff       	call   c0001b3c <disk_ioctl>
c00075fd:	83 c4 10             	add    esp,0x10
c0007600:	85 c0                	test   eax,eax
c0007602:	0f 85 4a 0f 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007608:	89 f1                	mov    ecx,esi
c000760a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007612:	83 e1 0f             	and    ecx,0xf
c0007615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000761d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007621:	83 e6 08             	and    esi,0x8
c0007624:	75 56                	jne    c000767c <f_mkfs+0x1db>
c0007626:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000762a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000762e:	83 ff 00             	cmp    edi,0x0
c0007631:	76 20                	jbe    c0007653 <f_mkfs+0x1b2>
c0007633:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007638:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007640:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007646:	83 d7 ff             	adc    edi,0xffffffff
c0007649:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000764d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007651:	eb 21                	jmp    c0007674 <f_mkfs+0x1d3>
c0007653:	ba 3f 00 00 00       	mov    edx,0x3f
c0007658:	39 f2                	cmp    edx,esi
c000765a:	19 f8                	sbb    eax,edi
c000765c:	73 1e                	jae    c000767c <f_mkfs+0x1db>
c000765e:	83 c6 c1             	add    esi,0xffffffc1
c0007661:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007669:	83 d7 ff             	adc    edi,0xffffffff
c000766c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007670:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007674:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000767c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007680:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007684:	89 04 24             	mov    DWORD PTR [esp],eax
c0007687:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000768b:	31 c0                	xor    eax,eax
c000768d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007692:	89 c7                	mov    edi,eax
c0007694:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007697:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000769b:	0f 83 c5 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c00076a1:	89 df                	mov    edi,ebx
c00076a3:	c1 ef 09             	shr    edi,0x9
c00076a6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076aa:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076b1:	c1 ef 09             	shr    edi,0x9
c00076b4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076bd:	74 29                	je     c00076e8 <f_mkfs+0x247>
c00076bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076c5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076ca:	0f 97 c2             	seta   dl
c00076cd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076d0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076d4:	0f 92 c0             	setb   al
c00076d7:	08 c2                	or     dl,al
c00076d9:	75 5b                	jne    c0007736 <f_mkfs+0x295>
c00076db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076df:	83 e0 07             	and    eax,0x7
c00076e2:	3c 04                	cmp    al,0x4
c00076e4:	74 50                	je     c0007736 <f_mkfs+0x295>
c00076e6:	eb 1b                	jmp    c0007703 <f_mkfs+0x262>
c00076e8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076ed:	0f 87 73 0a 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00076f3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f9:	76 08                	jbe    c0007703 <f_mkfs+0x262>
c00076fb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007703:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007707:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000770b:	83 e0 01             	and    eax,0x1
c000770e:	80 e1 02             	and    cl,0x2
c0007711:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007715:	74 0d                	je     c0007724 <f_mkfs+0x283>
c0007717:	84 c0                	test   al,al
c0007719:	0f 84 53 09 00 00    	je     c0008072 <f_mkfs+0xbd1>
c000771f:	e9 12 08 00 00       	jmp    c0007f36 <f_mkfs+0xa95>
c0007724:	bb 13 00 00 00       	mov    ebx,0x13
c0007729:	84 c0                	test   al,al
c000772b:	0f 85 05 08 00 00    	jne    c0007f36 <f_mkfs+0xa95>
c0007731:	e9 39 0e 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0007736:	31 c0                	xor    eax,eax
c0007738:	ba ff 0f 00 00       	mov    edx,0xfff
c000773d:	89 c7                	mov    edi,eax
c000773f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007742:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007746:	0f 83 1a 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c000774c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007752:	77 39                	ja     c000778d <f_mkfs+0x2ec>
c0007754:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007759:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007761:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007764:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007768:	73 08                	jae    c0007772 <f_mkfs+0x2d1>
c000776a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007772:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007777:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000777a:	b8 00 00 00 00       	mov    eax,0x0
c000777f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007783:	73 08                	jae    c000778d <f_mkfs+0x2ec>
c0007785:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000778d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007795:	83 c0 20             	add    eax,0x20
c0007798:	83 d2 00             	adc    edx,0x0
c000779b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000779f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a7:	31 d2                	xor    edx,edx
c00077a9:	31 ff                	xor    edi,edi
c00077ab:	52                   	push   edx
c00077ac:	89 fb                	mov    ebx,edi
c00077ae:	50                   	push   eax
c00077af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b7:	e8 e8 96 01 00       	call   c0020ea4 <__udivdi3>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	c1 e0 02             	shl    eax,0x2
c00077c2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077c6:	05 07 02 00 00       	add    eax,0x207
c00077cb:	89 f1                	mov    ecx,esi
c00077cd:	c1 e8 09             	shr    eax,0x9
c00077d0:	83 c1 ff             	add    ecx,0xffffffff
c00077d3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077d7:	83 d3 ff             	adc    ebx,0xffffffff
c00077da:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077de:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077e2:	31 d2                	xor    edx,edx
c00077e4:	01 c8                	add    eax,ecx
c00077e6:	11 da                	adc    edx,ebx
c00077e8:	89 c1                	mov    ecx,eax
c00077ea:	f7 de                	neg    esi
c00077ec:	89 d0                	mov    eax,edx
c00077ee:	83 d7 00             	adc    edi,0x0
c00077f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077f5:	f7 df                	neg    edi
c00077f7:	21 f1                	and    ecx,esi
c00077f9:	21 f8                	and    eax,edi
c00077fb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007803:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007807:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000780b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000780f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007812:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007816:	0f ac d0 01          	shrd   eax,edx,0x1
c000781a:	89 df                	mov    edi,ebx
c000781c:	d1 ea                	shr    edx,1
c000781e:	39 c1                	cmp    ecx,eax
c0007820:	19 d7                	sbb    edi,edx
c0007822:	0f 83 3e 09 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c0007828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000782c:	31 d2                	xor    edx,edx
c000782e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007836:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000783a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000783d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007841:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007845:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007849:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000784d:	83 f8 0f             	cmp    eax,0xf
c0007850:	0f 86 10 09 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c0007856:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000785e:	0f 87 02 09 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c0007864:	31 d2                	xor    edx,edx
c0007866:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000786a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007872:	83 c0 07             	add    eax,0x7
c0007875:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000787d:	c1 e8 03             	shr    eax,0x3
c0007880:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007887:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000788b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000788f:	c1 e0 09             	shl    eax,0x9
c0007892:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007896:	48                   	dec    eax
c0007897:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000789b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000789f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078a3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078a7:	31 d2                	xor    edx,edx
c00078a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078ad:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078bd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078c1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078c5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078cd:	31 ff                	xor    edi,edi
c00078cf:	31 f6                	xor    esi,esi
c00078d1:	31 db                	xor    ebx,ebx
c00078d3:	85 ff                	test   edi,edi
c00078d5:	74 05                	je     c00078dc <f_mkfs+0x43b>
c00078d7:	4f                   	dec    edi
c00078d8:	74 44                	je     c000791e <f_mkfs+0x47d>
c00078da:	eb 4f                	jmp    c000792b <f_mkfs+0x48a>
c00078dc:	83 ec 0c             	sub    esp,0xc
c00078df:	0f b7 c3             	movzx  eax,bx
c00078e2:	50                   	push   eax
c00078e3:	e8 18 0e 00 00       	call   c0008700 <ff_wtoupper>
c00078e8:	83 c4 10             	add    esp,0x10
c00078eb:	89 c1                	mov    ecx,eax
c00078ed:	8d 53 01             	lea    edx,[ebx+0x1]
c00078f0:	66 39 c3             	cmp    bx,ax
c00078f3:	75 3e                	jne    c0007933 <f_mkfs+0x492>
c00078f5:	be 01 00 00 00       	mov    esi,0x1
c00078fa:	89 df                	mov    edi,ebx
c00078fc:	66 01 f7             	add    di,si
c00078ff:	75 07                	jne    c0007908 <f_mkfs+0x467>
c0007901:	83 fe 7f             	cmp    esi,0x7f
c0007904:	77 31                	ja     c0007937 <f_mkfs+0x496>
c0007906:	eb 16                	jmp    c000791e <f_mkfs+0x47d>
c0007908:	83 ec 0c             	sub    esp,0xc
c000790b:	0f b7 ff             	movzx  edi,di
c000790e:	57                   	push   edi
c000790f:	e8 ec 0d 00 00       	call   c0008700 <ff_wtoupper>
c0007914:	83 c4 10             	add    esp,0x10
c0007917:	39 c7                	cmp    edi,eax
c0007919:	75 e6                	jne    c0007901 <f_mkfs+0x460>
c000791b:	46                   	inc    esi
c000791c:	eb dc                	jmp    c00078fa <f_mkfs+0x459>
c000791e:	31 c0                	xor    eax,eax
c0007920:	89 d9                	mov    ecx,ebx
c0007922:	4e                   	dec    esi
c0007923:	0f 95 c0             	setne  al
c0007926:	43                   	inc    ebx
c0007927:	89 c7                	mov    edi,eax
c0007929:	eb 14                	jmp    c000793f <f_mkfs+0x49e>
c000792b:	89 f1                	mov    ecx,esi
c000792d:	01 f3                	add    ebx,esi
c000792f:	31 ff                	xor    edi,edi
c0007931:	eb 0c                	jmp    c000793f <f_mkfs+0x49e>
c0007933:	89 d3                	mov    ebx,edx
c0007935:	eb 08                	jmp    c000793f <f_mkfs+0x49e>
c0007937:	bf 02 00 00 00       	mov    edi,0x2
c000793c:	83 c9 ff             	or     ecx,0xffffffff
c000793f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007943:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007946:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000794a:	0f b6 c1             	movzx  eax,cl
c000794d:	e8 04 a7 ff ff       	call   c0002056 <xsum32>
c0007952:	66 c1 e9 08          	shr    cx,0x8
c0007956:	89 c2                	mov    edx,eax
c0007958:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000795b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000795f:	0f b7 c1             	movzx  eax,cx
c0007962:	e8 ef a6 ff ff       	call   c0002056 <xsum32>
c0007967:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000796c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007970:	66 85 db             	test   bx,bx
c0007973:	74 1f                	je     c0007994 <f_mkfs+0x4f3>
c0007975:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007978:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000797f:	83 c0 02             	add    eax,0x2
c0007982:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007988:	39 c2                	cmp    edx,eax
c000798a:	74 08                	je     c0007994 <f_mkfs+0x4f3>
c000798c:	89 04 24             	mov    DWORD PTR [esp],eax
c000798f:	e9 3f ff ff ff       	jmp    c00078d3 <f_mkfs+0x432>
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	83 ec 0c             	sub    esp,0xc
c000799a:	05 01 02 00 00       	add    eax,0x201
c000799f:	c1 e8 09             	shr    eax,0x9
c00079a2:	50                   	push   eax
c00079a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079af:	55                   	push   ebp
c00079b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b4:	e8 6d a1 ff ff       	call   c0001b26 <disk_write>
c00079b9:	83 c4 20             	add    esp,0x20
c00079bc:	85 c0                	test   eax,eax
c00079be:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079c1:	0f 85 8b 0b 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00079c7:	89 d0                	mov    eax,edx
c00079c9:	31 d2                	xor    edx,edx
c00079cb:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079cf:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079d3:	66 85 db             	test   bx,bx
c00079d6:	74 04                	je     c00079dc <f_mkfs+0x53b>
c00079d8:	31 c0                	xor    eax,eax
c00079da:	eb b0                	jmp    c000798c <f_mkfs+0x4eb>
c00079dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079e0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079e4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079ee:	31 d2                	xor    edx,edx
c00079f0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079fb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079ff:	c1 eb 09             	shr    ebx,0x9
c0007a02:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a0d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a15:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a19:	8d 70 01             	lea    esi,[eax+0x1]
c0007a1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a24:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a2b:	31 d2                	xor    edx,edx
c0007a2d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a32:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a35:	89 c1                	mov    ecx,eax
c0007a37:	89 e8                	mov    eax,ebp
c0007a39:	e8 b1 a1 ff ff       	call   c0001bef <mem_set>
c0007a3e:	31 c0                	xor    eax,eax
c0007a40:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a43:	76 10                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a45:	83 fe 07             	cmp    esi,0x7
c0007a48:	76 0b                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a4a:	40                   	inc    eax
c0007a4b:	83 ee 08             	sub    esi,0x8
c0007a4e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a53:	eb eb                	jmp    c0007a40 <f_mkfs+0x59f>
c0007a55:	b2 01                	mov    dl,0x1
c0007a57:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a5b:	85 f6                	test   esi,esi
c0007a5d:	74 0c                	je     c0007a6b <f_mkfs+0x5ca>
c0007a5f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a62:	76 07                	jbe    c0007a6b <f_mkfs+0x5ca>
c0007a64:	08 11                	or     BYTE PTR [ecx],dl
c0007a66:	4e                   	dec    esi
c0007a67:	d1 e2                	shl    edx,1
c0007a69:	eb f0                	jmp    c0007a5b <f_mkfs+0x5ba>
c0007a6b:	89 df                	mov    edi,ebx
c0007a6d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a71:	76 04                	jbe    c0007a77 <f_mkfs+0x5d6>
c0007a73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a77:	83 ec 0c             	sub    esp,0xc
c0007a7a:	57                   	push   edi
c0007a7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a83:	55                   	push   ebp
c0007a84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a88:	e8 99 a0 ff ff       	call   c0001b26 <disk_write>
c0007a8d:	83 c4 20             	add    esp,0x20
c0007a90:	85 c0                	test   eax,eax
c0007a92:	0f 85 ba 0a 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a9e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007aa2:	29 fb                	sub    ebx,edi
c0007aa4:	0f 85 7a ff ff ff    	jne    c0007a24 <f_mkfs+0x583>
c0007aaa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aae:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ab6:	31 f6                	xor    esi,esi
c0007ab8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007abc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007abf:	31 d2                	xor    edx,edx
c0007ac1:	89 e8                	mov    eax,ebp
c0007ac3:	e8 27 a1 ff ff       	call   c0001bef <mem_set>
c0007ac8:	31 c9                	xor    ecx,ecx
c0007aca:	85 db                	test   ebx,ebx
c0007acc:	75 40                	jne    c0007b0e <f_mkfs+0x66d>
c0007ace:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ad3:	89 e8                	mov    eax,ebp
c0007ad5:	bb 02 00 00 00       	mov    ebx,0x2
c0007ada:	e8 f2 a0 ff ff       	call   c0001bd1 <st_dword>
c0007adf:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ae2:	83 ca ff             	or     edx,0xffffffff
c0007ae5:	e8 e7 a0 ff ff       	call   c0001bd1 <st_dword>
c0007aea:	b9 08 00 00 00       	mov    ecx,0x8
c0007aef:	eb 1d                	jmp    c0007b0e <f_mkfs+0x66d>
c0007af1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007af4:	76 3b                	jbe    c0007b31 <f_mkfs+0x690>
c0007af6:	43                   	inc    ebx
c0007af7:	83 fe 01             	cmp    esi,0x1
c0007afa:	89 da                	mov    edx,ebx
c0007afc:	77 03                	ja     c0007b01 <f_mkfs+0x660>
c0007afe:	83 ca ff             	or     edx,0xffffffff
c0007b01:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b05:	4e                   	dec    esi
c0007b06:	e8 c6 a0 ff ff       	call   c0001bd1 <st_dword>
c0007b0b:	83 c1 04             	add    ecx,0x4
c0007b0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b12:	85 f6                	test   esi,esi
c0007b14:	75 db                	jne    c0007af1 <f_mkfs+0x650>
c0007b16:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b1b:	77 14                	ja     c0007b31 <f_mkfs+0x690>
c0007b1d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b21:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b28:	85 f6                	test   esi,esi
c0007b2a:	74 05                	je     c0007b31 <f_mkfs+0x690>
c0007b2c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b2f:	77 dd                	ja     c0007b0e <f_mkfs+0x66d>
c0007b31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b35:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b39:	39 cf                	cmp    edi,ecx
c0007b3b:	76 02                	jbe    c0007b3f <f_mkfs+0x69e>
c0007b3d:	89 cf                	mov    edi,ecx
c0007b3f:	83 ec 0c             	sub    esp,0xc
c0007b42:	57                   	push   edi
c0007b43:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b47:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b4b:	55                   	push   ebp
c0007b4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b50:	e8 d1 9f ff ff       	call   c0001b26 <disk_write>
c0007b55:	83 c4 20             	add    esp,0x20
c0007b58:	85 c0                	test   eax,eax
c0007b5a:	0f 85 f2 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b66:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b6a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b6e:	0f 85 48 ff ff ff    	jne    c0007abc <f_mkfs+0x61b>
c0007b74:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b77:	31 d2                	xor    edx,edx
c0007b79:	89 e8                	mov    eax,ebp
c0007b7b:	31 ff                	xor    edi,edi
c0007b7d:	e8 6d a0 ff ff       	call   c0001bef <mem_set>
c0007b82:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b85:	ba 02 00 00 00       	mov    edx,0x2
c0007b8a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b8e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b92:	e8 3a a0 ff ff       	call   c0001bd1 <st_dword>
c0007b97:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b9a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b9e:	e8 2e a0 ff ff       	call   c0001bd1 <st_dword>
c0007ba3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ba6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007baa:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bae:	e8 1e a0 ff ff       	call   c0001bd1 <st_dword>
c0007bb3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bb6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bbe:	83 c2 02             	add    edx,0x2
c0007bc1:	e8 0b a0 ff ff       	call   c0001bd1 <st_dword>
c0007bc6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bd1:	e8 fb 9f ff ff       	call   c0001bd1 <st_dword>
c0007bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bda:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bdf:	89 c6                	mov    esi,eax
c0007be1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bec:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007bf0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007bf3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bf7:	39 cb                	cmp    ebx,ecx
c0007bf9:	76 02                	jbe    c0007bfd <f_mkfs+0x75c>
c0007bfb:	89 cb                	mov    ebx,ecx
c0007bfd:	83 ec 0c             	sub    esp,0xc
c0007c00:	53                   	push   ebx
c0007c01:	57                   	push   edi
c0007c02:	56                   	push   esi
c0007c03:	55                   	push   ebp
c0007c04:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c08:	e8 19 9f ff ff       	call   c0001b26 <disk_write>
c0007c0d:	83 c4 20             	add    esp,0x20
c0007c10:	85 c0                	test   eax,eax
c0007c12:	0f 85 3a 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007c18:	31 d2                	xor    edx,edx
c0007c1a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c1f:	89 e8                	mov    eax,ebp
c0007c21:	e8 c9 9f ff ff       	call   c0001bef <mem_set>
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	01 de                	add    esi,ebx
c0007c2a:	11 d7                	adc    edi,edx
c0007c2c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c2f:	75 bf                	jne    c0007bf0 <f_mkfs+0x74f>
c0007c31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c39:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c41:	b9 00 02 00 00       	mov    ecx,0x200
c0007c46:	31 d2                	xor    edx,edx
c0007c48:	89 e8                	mov    eax,ebp
c0007c4a:	e8 a0 9f ff ff       	call   c0001bef <mem_set>
c0007c4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c54:	ba a0 1f 02 c0       	mov    edx,0xc0021fa0
c0007c59:	89 e8                	mov    eax,ebp
c0007c5b:	e8 7a 9f ff ff       	call   c0001bda <mem_cpy>
c0007c60:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c67:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c6b:	e8 64 9f ff ff       	call   c0001bd4 <st_qword>
c0007c70:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c74:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c77:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c7b:	e8 54 9f ff ff       	call   c0001bd4 <st_qword>
c0007c80:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c83:	ba 20 00 00 00       	mov    edx,0x20
c0007c88:	e8 44 9f ff ff       	call   c0001bd1 <st_dword>
c0007c8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c95:	e8 37 9f ff ff       	call   c0001bd1 <st_dword>
c0007c9a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ca2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007ca6:	e8 26 9f ff ff       	call   c0001bd1 <st_dword>
c0007cab:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cb2:	e8 1a 9f ff ff       	call   c0001bd1 <st_dword>
c0007cb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cbb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cbe:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cc1:	e8 0b 9f ff ff       	call   c0001bd1 <st_dword>
c0007cc6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cce:	e8 fe 9e ff ff       	call   c0001bd1 <st_dword>
c0007cd3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cd6:	ba 00 01 00 00       	mov    edx,0x100
c0007cdb:	e8 ed 9e ff ff       	call   c0001bcd <st_word>
c0007ce0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007ce4:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce9:	48                   	dec    eax
c0007cea:	74 05                	je     c0007cf1 <f_mkfs+0x850>
c0007cec:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cef:	eb f8                	jmp    c0007ce9 <f_mkfs+0x848>
c0007cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cf5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cfd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d01:	74 05                	je     c0007d08 <f_mkfs+0x867>
c0007d03:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d06:	eb f5                	jmp    c0007cfd <f_mkfs+0x85c>
c0007d08:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d0b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d10:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d16:	31 db                	xor    ebx,ebx
c0007d18:	e8 b0 9e ff ff       	call   c0001bcd <st_word>
c0007d1d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d23:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d28:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d2b:	e8 9d 9e ff ff       	call   c0001bcd <st_word>
c0007d30:	31 c9                	xor    ecx,ecx
c0007d32:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d35:	83 f8 01             	cmp    eax,0x1
c0007d38:	76 13                	jbe    c0007d4d <f_mkfs+0x8ac>
c0007d3a:	83 f9 70             	cmp    ecx,0x70
c0007d3d:	74 0e                	je     c0007d4d <f_mkfs+0x8ac>
c0007d3f:	89 da                	mov    edx,ebx
c0007d41:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d46:	e8 0b a3 ff ff       	call   c0002056 <xsum32>
c0007d4b:	89 c3                	mov    ebx,eax
c0007d4d:	41                   	inc    ecx
c0007d4e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d54:	75 dc                	jne    c0007d32 <f_mkfs+0x891>
c0007d56:	89 f0                	mov    eax,esi
c0007d58:	89 fa                	mov    edx,edi
c0007d5a:	83 c0 01             	add    eax,0x1
c0007d5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d61:	83 d2 00             	adc    edx,0x0
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d6b:	6a 01                	push   0x1
c0007d6d:	57                   	push   edi
c0007d6e:	56                   	push   esi
c0007d6f:	55                   	push   ebp
c0007d70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d74:	e8 ad 9d ff ff       	call   c0001b26 <disk_write>
c0007d79:	83 c4 20             	add    esp,0x20
c0007d7c:	85 c0                	test   eax,eax
c0007d7e:	0f 85 ce 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007d84:	31 d2                	xor    edx,edx
c0007d86:	b9 00 02 00 00       	mov    ecx,0x200
c0007d8b:	89 e8                	mov    eax,ebp
c0007d8d:	e8 5d 9e ff ff       	call   c0001bef <mem_set>
c0007d92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d9a:	e8 2e 9e ff ff       	call   c0001bcd <st_word>
c0007d9f:	89 f0                	mov    eax,esi
c0007da1:	89 fa                	mov    edx,edi
c0007da3:	83 c0 09             	add    eax,0x9
c0007da6:	83 d2 00             	adc    edx,0x0
c0007da9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007db0:	31 c9                	xor    ecx,ecx
c0007db2:	41                   	inc    ecx
c0007db3:	89 da                	mov    edx,ebx
c0007db5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dba:	e8 97 a2 ff ff       	call   c0002056 <xsum32>
c0007dbf:	89 c3                	mov    ebx,eax
c0007dc1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dc7:	75 e9                	jne    c0007db2 <f_mkfs+0x911>
c0007dc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dcd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dd1:	83 c0 01             	add    eax,0x1
c0007dd4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd8:	83 d2 00             	adc    edx,0x0
c0007ddb:	83 ec 0c             	sub    esp,0xc
c0007dde:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007de2:	6a 01                	push   0x1
c0007de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dec:	55                   	push   ebp
c0007ded:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df1:	e8 30 9d ff ff       	call   c0001b26 <disk_write>
c0007df6:	83 c4 20             	add    esp,0x20
c0007df9:	85 c0                	test   eax,eax
c0007dfb:	0f 85 51 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e05:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e09:	75 09                	jne    c0007e14 <f_mkfs+0x973>
c0007e0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e0e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e12:	74 12                	je     c0007e26 <f_mkfs+0x985>
c0007e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e18:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e24:	eb 8a                	jmp    c0007db0 <f_mkfs+0x90f>
c0007e26:	31 d2                	xor    edx,edx
c0007e28:	b9 00 02 00 00       	mov    ecx,0x200
c0007e2d:	89 e8                	mov    eax,ebp
c0007e2f:	e8 bb 9d ff ff       	call   c0001bef <mem_set>
c0007e34:	83 c6 0b             	add    esi,0xb
c0007e37:	83 d7 00             	adc    edi,0x0
c0007e3a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e3e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e42:	31 c9                	xor    ecx,ecx
c0007e44:	41                   	inc    ecx
c0007e45:	89 da                	mov    edx,ebx
c0007e47:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e4c:	e8 05 a2 ff ff       	call   c0002056 <xsum32>
c0007e51:	89 c3                	mov    ebx,eax
c0007e53:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e59:	75 e9                	jne    c0007e44 <f_mkfs+0x9a3>
c0007e5b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e5e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e62:	83 c6 01             	add    esi,0x1
c0007e65:	83 d7 00             	adc    edi,0x0
c0007e68:	83 ec 0c             	sub    esp,0xc
c0007e6b:	6a 01                	push   0x1
c0007e6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e75:	55                   	push   ebp
c0007e76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e7a:	e8 a7 9c ff ff       	call   c0001b26 <disk_write>
c0007e7f:	83 c4 20             	add    esp,0x20
c0007e82:	85 c0                	test   eax,eax
c0007e84:	0f 85 c8 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e8a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e8e:	75 06                	jne    c0007e96 <f_mkfs+0x9f5>
c0007e90:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e94:	74 09                	je     c0007e9f <f_mkfs+0x9fe>
c0007e96:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e99:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e9d:	eb a3                	jmp    c0007e42 <f_mkfs+0x9a1>
c0007e9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007ea3:	89 da                	mov    edx,ebx
c0007ea5:	01 e8                	add    eax,ebp
c0007ea7:	e8 25 9d ff ff       	call   c0001bd1 <st_dword>
c0007eac:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007eb1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb9:	75 e4                	jne    c0007e9f <f_mkfs+0x9fe>
c0007ebb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ebe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ec2:	83 c6 02             	add    esi,0x2
c0007ec5:	83 d7 00             	adc    edi,0x0
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	6a 01                	push   0x1
c0007ecd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed5:	55                   	push   ebp
c0007ed6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eda:	e8 47 9c ff ff       	call   c0001b26 <disk_write>
c0007edf:	83 c4 20             	add    esp,0x20
c0007ee2:	85 c0                	test   eax,eax
c0007ee4:	0f 85 68 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007eea:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eef:	74 0d                	je     c0007efe <f_mkfs+0xa5d>
c0007ef1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef9:	e9 43 fd ff ff       	jmp    c0007c41 <f_mkfs+0x7a0>
c0007efe:	b1 07                	mov    cl,0x7
c0007f00:	e9 e3 05 00 00       	jmp    c00084e8 <f_mkfs+0x1047>
c0007f05:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f0a:	0f 85 4f 02 00 00    	jne    c000815f <f_mkfs+0xcbe>
c0007f10:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f15:	0f 86 22 02 00 00    	jbe    c000813d <f_mkfs+0xc9c>
c0007f1b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f20:	0f 85 81 06 00 00    	jne    c00085a7 <f_mkfs+0x1106>
c0007f26:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f2d:	83 f8 40             	cmp    eax,0x40
c0007f30:	0f 87 51 06 00 00    	ja     c0008587 <f_mkfs+0x10e6>
c0007f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f3a:	85 ff                	test   edi,edi
c0007f3c:	75 1c                	jne    c0007f5a <f_mkfs+0xab9>
c0007f3e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f41:	ba a0 1e 02 c0       	mov    edx,0xc0021ea0
c0007f46:	c1 e9 0c             	shr    ecx,0xc
c0007f49:	bf 01 00 00 00       	mov    edi,0x1
c0007f4e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f51:	66 85 c0             	test   ax,ax
c0007f54:	0f 85 95 01 00 00    	jne    c00080ef <f_mkfs+0xc4e>
c0007f5a:	31 d2                	xor    edx,edx
c0007f5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f5f:	f7 f7                	div    edi
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	0f 86 95 01 00 00    	jbe    c0008101 <f_mkfs+0xc60>
c0007f6c:	83 c0 02             	add    eax,0x2
c0007f6f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f74:	01 c0                	add    eax,eax
c0007f76:	05 ff 01 00 00       	add    eax,0x1ff
c0007f7b:	be 01 00 00 00       	mov    esi,0x1
c0007f80:	c1 e8 09             	shr    eax,0x9
c0007f83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f8b:	c1 e0 05             	shl    eax,0x5
c0007f8e:	c1 e8 09             	shr    eax,0x9
c0007f91:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f95:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f9a:	31 d2                	xor    edx,edx
c0007f9c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fa0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fa4:	89 f0                	mov    eax,esi
c0007fa6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007faa:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fba:	31 d2                	xor    edx,edx
c0007fbc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fc1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fc5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc9:	31 db                	xor    ebx,ebx
c0007fcb:	01 c8                	add    eax,ecx
c0007fcd:	11 da                	adc    edx,ebx
c0007fcf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fd3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fd7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fdb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fdf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fe3:	f7 da                	neg    edx
c0007fe5:	21 d1                	and    ecx,edx
c0007fe7:	29 d9                	sub    ecx,ebx
c0007fe9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fee:	0f 85 20 01 00 00    	jne    c0008114 <f_mkfs+0xc73>
c0007ff4:	31 db                	xor    ebx,ebx
c0007ff6:	01 ce                	add    esi,ecx
c0007ff8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ffc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008000:	31 d2                	xor    edx,edx
c0008002:	89 f8                	mov    eax,edi
c0008004:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008008:	c1 e0 04             	shl    eax,0x4
c000800b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000800f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008013:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008017:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000801b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000801e:	19 d3                	sbb    ebx,edx
c0008020:	0f 82 40 01 00 00    	jb     c0008166 <f_mkfs+0xcc5>
c0008026:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008029:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000802d:	89 c8                	mov    eax,ecx
c000802f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008034:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008038:	29 f0                	sub    eax,esi
c000803a:	29 d0                	sub    eax,edx
c000803c:	31 d2                	xor    edx,edx
c000803e:	f7 f7                	div    edi
c0008040:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008045:	89 c3                	mov    ebx,eax
c0008047:	0f 85 b8 fe ff ff    	jne    c0007f05 <f_mkfs+0xa64>
c000804d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008052:	0f 87 1d 01 00 00    	ja     c0008175 <f_mkfs+0xcd4>
c0008058:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000805d:	0f 85 03 01 00 00    	jne    c0008166 <f_mkfs+0xcc5>
c0008063:	83 ff 01             	cmp    edi,0x1
c0008066:	0f 86 fa 00 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c000806c:	d1 ef                	shr    edi,1
c000806e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008072:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008076:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008079:	85 db                	test   ebx,ebx
c000807b:	75 2d                	jne    c00080aa <f_mkfs+0xc09>
c000807d:	89 cb                	mov    ebx,ecx
c000807f:	ba b0 1e 02 c0       	mov    edx,0xc0021eb0
c0008084:	c1 eb 11             	shr    ebx,0x11
c0008087:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000808f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0008092:	66 85 c0             	test   ax,ax
c0008095:	74 11                	je     c00080a8 <f_mkfs+0xc07>
c0008097:	83 c2 02             	add    edx,0x2
c000809a:	39 d8                	cmp    eax,ebx
c000809c:	77 0a                	ja     c00080a8 <f_mkfs+0xc07>
c000809e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080a2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080a6:	eb e7                	jmp    c000808f <f_mkfs+0xbee>
c00080a8:	31 db                	xor    ebx,ebx
c00080aa:	31 d2                	xor    edx,edx
c00080ac:	89 c8                	mov    eax,ecx
c00080ae:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080b2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080be:	c1 ea 09             	shr    edx,0x9
c00080c1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080c6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080ca:	0f 87 96 00 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00080d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080d4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080dc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080e0:	be 20 00 00 00       	mov    esi,0x20
c00080e5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080ea:	e9 a6 fe ff ff       	jmp    c0007f95 <f_mkfs+0xaf4>
c00080ef:	83 c2 02             	add    edx,0x2
c00080f2:	39 c8                	cmp    eax,ecx
c00080f4:	0f 87 60 fe ff ff    	ja     c0007f5a <f_mkfs+0xab9>
c00080fa:	01 ff                	add    edi,edi
c00080fc:	e9 4d fe ff ff       	jmp    c0007f4e <f_mkfs+0xaad>
c0008101:	8d 04 40             	lea    eax,[eax+eax*2]
c0008104:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008109:	40                   	inc    eax
c000810a:	d1 e8                	shr    eax,1
c000810c:	83 c0 03             	add    eax,0x3
c000810f:	e9 62 fe ff ff       	jmp    c0007f76 <f_mkfs+0xad5>
c0008114:	31 d2                	xor    edx,edx
c0008116:	89 c8                	mov    eax,ecx
c0008118:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000811c:	85 d2                	test   edx,edx
c000811e:	74 0c                	je     c000812c <f_mkfs+0xc8b>
c0008120:	49                   	dec    ecx
c0008121:	46                   	inc    esi
c0008122:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008127:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000812c:	89 c8                	mov    eax,ecx
c000812e:	31 d2                	xor    edx,edx
c0008130:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008134:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008138:	e9 c3 fe ff ff       	jmp    c0008000 <f_mkfs+0xb5f>
c000813d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008142:	77 31                	ja     c0008175 <f_mkfs+0xcd4>
c0008144:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008149:	75 1b                	jne    c0008166 <f_mkfs+0xcc5>
c000814b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000814e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008152:	3d 80 00 00 00       	cmp    eax,0x80
c0008157:	0f 86 d9 fd ff ff    	jbe    c0007f36 <f_mkfs+0xa95>
c000815d:	eb 07                	jmp    c0008166 <f_mkfs+0xcc5>
c000815f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008164:	76 0a                	jbe    c0008170 <f_mkfs+0xccf>
c0008166:	bb 0e 00 00 00       	mov    ebx,0xe
c000816b:	e9 ff 03 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0008170:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008175:	31 d2                	xor    edx,edx
c0008177:	b9 00 02 00 00       	mov    ecx,0x200
c000817c:	89 e8                	mov    eax,ebp
c000817e:	e8 6c 9a ff ff       	call   c0001bef <mem_set>
c0008183:	b9 0b 00 00 00       	mov    ecx,0xb
c0008188:	ba c2 1f 02 c0       	mov    edx,0xc0021fc2
c000818d:	89 e8                	mov    eax,ebp
c000818f:	e8 46 9a ff ff       	call   c0001bda <mem_cpy>
c0008194:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008197:	ba 00 02 00 00       	mov    edx,0x200
c000819c:	e8 2c 9a ff ff       	call   c0001bcd <st_word>
c00081a1:	89 f8                	mov    eax,edi
c00081a3:	0f b7 d6             	movzx  edx,si
c00081a6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081ac:	e8 1c 9a ff ff       	call   c0001bcd <st_word>
c00081b1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ba:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081bd:	75 08                	jne    c00081c7 <f_mkfs+0xd26>
c00081bf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081c7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081ce:	e8 fa 99 ff ff       	call   c0001bcd <st_word>
c00081d3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081dc:	39 d0                	cmp    eax,edx
c00081de:	b8 00 00 00 00       	mov    eax,0x0
c00081e3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081e7:	72 0a                	jb     c00081f3 <f_mkfs+0xd52>
c00081e9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081ec:	e8 dc 99 ff ff       	call   c0001bcd <st_word>
c00081f1:	eb 08                	jmp    c00081fb <f_mkfs+0xd5a>
c00081f3:	8d 45 20             	lea    eax,[ebp+0x20]
c00081f6:	e8 d6 99 ff ff       	call   c0001bd1 <st_dword>
c00081fb:	8d 45 18             	lea    eax,[ebp+0x18]
c00081fe:	ba 3f 00 00 00       	mov    edx,0x3f
c0008203:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008207:	e8 c1 99 ff ff       	call   c0001bcd <st_word>
c000820c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000820f:	ba ff 00 00 00       	mov    edx,0xff
c0008214:	e8 b4 99 ff ff       	call   c0001bcd <st_word>
c0008219:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000821c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008220:	e8 ac 99 ff ff       	call   c0001bd1 <st_dword>
c0008225:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000822a:	75 57                	jne    c0008283 <f_mkfs+0xde2>
c000822c:	8d 45 43             	lea    eax,[ebp+0x43]
c000822f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008234:	e8 98 99 ff ff       	call   c0001bd1 <st_dword>
c0008239:	8d 45 24             	lea    eax,[ebp+0x24]
c000823c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008240:	e8 8c 99 ff ff       	call   c0001bd1 <st_dword>
c0008245:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008248:	ba 02 00 00 00       	mov    edx,0x2
c000824d:	e8 7f 99 ff ff       	call   c0001bd1 <st_dword>
c0008252:	8d 45 30             	lea    eax,[ebp+0x30]
c0008255:	ba 01 00 00 00       	mov    edx,0x1
c000825a:	e8 6e 99 ff ff       	call   c0001bcd <st_word>
c000825f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008262:	ba 06 00 00 00       	mov    edx,0x6
c0008267:	e8 61 99 ff ff       	call   c0001bcd <st_word>
c000826c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008270:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008274:	8d 45 47             	lea    eax,[ebp+0x47]
c0008277:	b9 13 00 00 00       	mov    ecx,0x13
c000827c:	ba ce 1f 02 c0       	mov    edx,0xc0021fce
c0008281:	eb 2f                	jmp    c00082b2 <f_mkfs+0xe11>
c0008283:	8d 45 27             	lea    eax,[ebp+0x27]
c0008286:	ba 00 00 21 50       	mov    edx,0x50210000
c000828b:	e8 41 99 ff ff       	call   c0001bd1 <st_dword>
c0008290:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008295:	8d 45 16             	lea    eax,[ebp+0x16]
c0008298:	e8 30 99 ff ff       	call   c0001bcd <st_word>
c000829d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082a1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082a5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a8:	b9 13 00 00 00       	mov    ecx,0x13
c00082ad:	ba e2 1f 02 c0       	mov    edx,0xc0021fe2
c00082b2:	e8 23 99 ff ff       	call   c0001bda <mem_cpy>
c00082b7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082bd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082c2:	89 f0                	mov    eax,esi
c00082c4:	e8 04 99 ff ff       	call   c0001bcd <st_word>
c00082c9:	83 ec 0c             	sub    esp,0xc
c00082cc:	6a 01                	push   0x1
c00082ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d6:	55                   	push   ebp
c00082d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082db:	e8 46 98 ff ff       	call   c0001b26 <disk_write>
c00082e0:	83 c4 20             	add    esp,0x20
c00082e3:	85 c0                	test   eax,eax
c00082e5:	0f 85 67 02 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00082eb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f0:	0f 85 b7 00 00 00    	jne    c00083ad <f_mkfs+0xf0c>
c00082f6:	83 ec 0c             	sub    esp,0xc
c00082f9:	6a 01                	push   0x1
c00082fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008303:	83 c0 06             	add    eax,0x6
c0008306:	83 d2 00             	adc    edx,0x0
c0008309:	52                   	push   edx
c000830a:	50                   	push   eax
c000830b:	55                   	push   ebp
c000830c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008310:	e8 11 98 ff ff       	call   c0001b26 <disk_write>
c0008315:	83 c4 20             	add    esp,0x20
c0008318:	b9 00 02 00 00       	mov    ecx,0x200
c000831d:	31 d2                	xor    edx,edx
c000831f:	89 e8                	mov    eax,ebp
c0008321:	e8 c9 98 ff ff       	call   c0001bef <mem_set>
c0008326:	ba 52 52 61 41       	mov    edx,0x41615252
c000832b:	89 e8                	mov    eax,ebp
c000832d:	e8 9f 98 ff ff       	call   c0001bd1 <st_dword>
c0008332:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008338:	ba 72 72 41 61       	mov    edx,0x61417272
c000833d:	e8 8f 98 ff ff       	call   c0001bd1 <st_dword>
c0008342:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008345:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000834b:	e8 81 98 ff ff       	call   c0001bd1 <st_dword>
c0008350:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008356:	ba 02 00 00 00       	mov    edx,0x2
c000835b:	e8 71 98 ff ff       	call   c0001bd1 <st_dword>
c0008360:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008365:	89 f0                	mov    eax,esi
c0008367:	e8 61 98 ff ff       	call   c0001bcd <st_word>
c000836c:	83 ec 0c             	sub    esp,0xc
c000836f:	6a 01                	push   0x1
c0008371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008375:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008379:	83 c0 07             	add    eax,0x7
c000837c:	83 d2 00             	adc    edx,0x0
c000837f:	52                   	push   edx
c0008380:	50                   	push   eax
c0008381:	55                   	push   ebp
c0008382:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008386:	e8 9b 97 ff ff       	call   c0001b26 <disk_write>
c000838b:	83 c4 14             	add    esp,0x14
c000838e:	6a 01                	push   0x1
c0008390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008394:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008398:	83 c0 01             	add    eax,0x1
c000839b:	83 d2 00             	adc    edx,0x0
c000839e:	52                   	push   edx
c000839f:	50                   	push   eax
c00083a0:	55                   	push   ebp
c00083a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a5:	e8 7c 97 ff ff       	call   c0001b26 <disk_write>
c00083aa:	83 c4 20             	add    esp,0x20
c00083ad:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083b4:	31 d2                	xor    edx,edx
c00083b6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083bc:	31 db                	xor    ebx,ebx
c00083be:	89 e8                	mov    eax,ebp
c00083c0:	e8 2a 98 ff ff       	call   c0001bef <mem_set>
c00083c5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083d1:	0f 94 c3             	sete   bl
c00083d4:	4b                   	dec    ebx
c00083d5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083db:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083e1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e6:	75 21                	jne    c0008409 <f_mkfs+0xf68>
c00083e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083ed:	89 e8                	mov    eax,ebp
c00083ef:	e8 dd 97 ff ff       	call   c0001bd1 <st_dword>
c00083f4:	8d 45 04             	lea    eax,[ebp+0x4]
c00083f7:	83 ca ff             	or     edx,0xffffffff
c00083fa:	e8 d2 97 ff ff       	call   c0001bd1 <st_dword>
c00083ff:	8d 45 08             	lea    eax,[ebp+0x8]
c0008402:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008407:	eb 04                	jmp    c000840d <f_mkfs+0xf6c>
c0008409:	89 da                	mov    edx,ebx
c000840b:	89 e8                	mov    eax,ebp
c000840d:	e8 bf 97 ff ff       	call   c0001bd1 <st_dword>
c0008412:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000841a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000841e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008422:	39 ce                	cmp    esi,ecx
c0008424:	76 02                	jbe    c0008428 <f_mkfs+0xf87>
c0008426:	89 ce                	mov    esi,ecx
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	56                   	push   esi
c000842c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008430:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008434:	55                   	push   ebp
c0008435:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008439:	e8 e8 96 ff ff       	call   c0001b26 <disk_write>
c000843e:	83 c4 20             	add    esp,0x20
c0008441:	85 c0                	test   eax,eax
c0008443:	0f 85 09 01 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0008449:	31 d2                	xor    edx,edx
c000844b:	b9 00 02 00 00       	mov    ecx,0x200
c0008450:	89 e8                	mov    eax,ebp
c0008452:	e8 98 97 ff ff       	call   c0001bef <mem_set>
c0008457:	31 d2                	xor    edx,edx
c0008459:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000845d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008461:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008465:	75 b3                	jne    c000841a <f_mkfs+0xf79>
c0008467:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000846a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008471:	40                   	inc    eax
c0008472:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008476:	0f 87 65 ff ff ff    	ja     c00083e1 <f_mkfs+0xf40>
c000847c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008481:	74 04                	je     c0008487 <f_mkfs+0xfe6>
c0008483:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008487:	89 fb                	mov    ebx,edi
c0008489:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000848d:	76 04                	jbe    c0008493 <f_mkfs+0xff2>
c000848f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	53                   	push   ebx
c0008497:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849f:	55                   	push   ebp
c00084a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084a4:	e8 7d 96 ff ff       	call   c0001b26 <disk_write>
c00084a9:	83 c4 20             	add    esp,0x20
c00084ac:	85 c0                	test   eax,eax
c00084ae:	0f 85 9e 00 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00084b4:	31 d2                	xor    edx,edx
c00084b6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ba:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084be:	29 df                	sub    edi,ebx
c00084c0:	75 c5                	jne    c0008487 <f_mkfs+0xfe6>
c00084c2:	b1 0c                	mov    cl,0xc
c00084c4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c9:	74 1d                	je     c00084e8 <f_mkfs+0x1047>
c00084cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00084d0:	b1 06                	mov    cl,0x6
c00084d2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084d6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084da:	72 0c                	jb     c00084e8 <f_mkfs+0x1047>
c00084dc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084e1:	0f 94 c1             	sete   cl
c00084e4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084ed:	75 4c                	jne    c000853b <f_mkfs+0x109a>
c00084ef:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084f3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084f7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084fe:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008505:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008510:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000851b:	0f b6 c9             	movzx  ecx,cl
c000851e:	83 ec 0c             	sub    esp,0xc
c0008521:	55                   	push   ebp
c0008522:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008529:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000852d:	e8 f9 bf ff ff       	call   c000452b <create_partition>
c0008532:	83 c4 10             	add    esp,0x10
c0008535:	89 c3                	mov    ebx,eax
c0008537:	85 c0                	test   eax,eax
c0008539:	75 34                	jne    c000856f <f_mkfs+0x10ce>
c000853b:	31 db                	xor    ebx,ebx
c000853d:	50                   	push   eax
c000853e:	6a 00                	push   0x0
c0008540:	6a 00                	push   0x0
c0008542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008546:	e8 f1 95 ff ff       	call   c0001b3c <disk_ioctl>
c000854b:	83 c4 10             	add    esp,0x10
c000854e:	85 c0                	test   eax,eax
c0008550:	74 1d                	je     c000856f <f_mkfs+0x10ce>
c0008552:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000855a:	75 0c                	jne    c0008568 <f_mkfs+0x10c7>
c000855c:	83 ec 0c             	sub    esp,0xc
c000855f:	55                   	push   ebp
c0008560:	e8 77 00 00 00       	call   c00085dc <ff_memfree>
c0008565:	83 c4 10             	add    esp,0x10
c0008568:	bb 01 00 00 00       	mov    ebx,0x1
c000856d:	eb 48                	jmp    c00085b7 <f_mkfs+0x1116>
c000856f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008577:	75 3e                	jne    c00085b7 <f_mkfs+0x1116>
c0008579:	83 ec 0c             	sub    esp,0xc
c000857c:	55                   	push   ebp
c000857d:	e8 5a 00 00 00       	call   c00085dc <ff_memfree>
c0008582:	83 c4 10             	add    esp,0x10
c0008585:	eb 30                	jmp    c00085b7 <f_mkfs+0x1116>
c0008587:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000858c:	0f 85 eb fa ff ff    	jne    c000807d <f_mkfs+0xbdc>
c0008592:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008596:	81 ff 80 00 00 00    	cmp    edi,0x80
c000859c:	0f 86 b8 f9 ff ff    	jbe    c0007f5a <f_mkfs+0xab9>
c00085a2:	e9 bf fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085a7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085ac:	0f 85 c0 fa ff ff    	jne    c0008072 <f_mkfs+0xbd1>
c00085b2:	e9 af fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085b7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085bd:	89 d8                	mov    eax,ebx
c00085bf:	5b                   	pop    ebx
c00085c0:	5e                   	pop    esi
c00085c1:	5f                   	pop    edi
c00085c2:	5d                   	pop    ebp
c00085c3:	c3                   	ret    

c00085c4 <ff_memalloc>:
c00085c4:	83 ec 0c             	sub    esp,0xc
c00085c7:	83 ec 0c             	sub    esp,0xc
c00085ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085ce:	e8 f0 13 00 00       	call   c00099c3 <malloc>
c00085d3:	83 c4 10             	add    esp,0x10
c00085d6:	83 c4 0c             	add    esp,0xc
c00085d9:	c3                   	ret    
c00085da:	66 90                	xchg   ax,ax

c00085dc <ff_memfree>:
c00085dc:	83 ec 0c             	sub    esp,0xc
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085e6:	e8 e8 13 00 00       	call   c00099d3 <free>
c00085eb:	83 c4 10             	add    esp,0x10
c00085ee:	90                   	nop
c00085ef:	83 c4 0c             	add    esp,0xc
c00085f2:	c3                   	ret    
c00085f3:	90                   	nop

c00085f4 <ff_uni2oem>:
c00085f4:	83 ec 14             	sub    esp,0x14
c00085f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085fb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008606:	c7 44 24 0c 00 23 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022300
c000860e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008613:	77 0b                	ja     c0008620 <ff_uni2oem+0x2c>
c0008615:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008619:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000861e:	eb 60                	jmp    c0008680 <ff_uni2oem+0x8c>
c0008620:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008628:	77 56                	ja     c0008680 <ff_uni2oem+0x8c>
c000862a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008630:	75 4e                	jne    c0008680 <ff_uni2oem+0x8c>
c0008632:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008639:	eb 0d                	jmp    c0008648 <ff_uni2oem+0x54>
c000863b:	90                   	nop
c000863c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008641:	40                   	inc    eax
c0008642:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008647:	90                   	nop
c0008648:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000864e:	77 1c                	ja     c000866c <ff_uni2oem+0x78>
c0008650:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008655:	01 c0                	add    eax,eax
c0008657:	89 c2                	mov    edx,eax
c0008659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000865d:	01 d0                	add    eax,edx
c000865f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008662:	0f b7 c0             	movzx  eax,ax
c0008665:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008669:	75 d1                	jne    c000863c <ff_uni2oem+0x48>
c000866b:	90                   	nop
c000866c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008671:	83 e8 80             	sub    eax,0xffffff80
c0008674:	25 ff 00 00 00       	and    eax,0xff
c0008679:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000867e:	66 90                	xchg   ax,ax
c0008680:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008685:	83 c4 14             	add    esp,0x14
c0008688:	c3                   	ret    
c0008689:	8d 76 00             	lea    esi,[esi+0x0]

c000868c <ff_oem2uni>:
c000868c:	83 ec 18             	sub    esp,0x18
c000868f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008697:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000869c:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086a0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086a7:	c7 44 24 10 00 23 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022300
c00086af:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086b5:	77 0d                	ja     c00086c4 <ff_oem2uni+0x38>
c00086b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086bb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086c0:	eb 32                	jmp    c00086f4 <ff_oem2uni+0x68>
c00086c2:	66 90                	xchg   ax,ax
c00086c4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086ca:	75 28                	jne    c00086f4 <ff_oem2uni+0x68>
c00086cc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086d3:	77 1f                	ja     c00086f4 <ff_oem2uni+0x68>
c00086d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086da:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086df:	01 c0                	add    eax,eax
c00086e1:	89 c2                	mov    edx,eax
c00086e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086e7:	01 d0                	add    eax,edx
c00086e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086ec:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086f1:	8d 76 00             	lea    esi,[esi+0x0]
c00086f4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f9:	83 c4 18             	add    esp,0x18
c00086fc:	c3                   	ret    
c00086fd:	8d 76 00             	lea    esi,[esi+0x0]

c0008700 <ff_wtoupper>:
c0008700:	83 ec 10             	sub    esp,0x10
c0008703:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000870b:	0f 87 4f 01 00 00    	ja     c0008860 <ff_wtoupper+0x160>
c0008711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008715:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000871a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008721:	77 09                	ja     c000872c <ff_wtoupper+0x2c>
c0008723:	b8 00 21 02 c0       	mov    eax,0xc0022100
c0008728:	eb 0a                	jmp    c0008734 <ff_wtoupper+0x34>
c000872a:	66 90                	xchg   ax,ax
c000872c:	b8 40 20 02 c0       	mov    eax,0xc0022040
c0008731:	8d 76 00             	lea    esi,[esi+0x0]
c0008734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000873c:	8d 50 02             	lea    edx,[eax+0x2]
c000873f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008743:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008746:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000874b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008751:	0f 84 fd 00 00 00    	je     c0008854 <ff_wtoupper+0x154>
c0008757:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000875c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008761:	0f 82 ed 00 00 00    	jb     c0008854 <ff_wtoupper+0x154>
c0008767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000876b:	8d 50 02             	lea    edx,[eax+0x2]
c000876e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008772:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008775:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000877a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000877f:	66 c1 e8 08          	shr    ax,0x8
c0008783:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008788:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000878f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008794:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008799:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000879e:	01 ca                	add    edx,ecx
c00087a0:	39 d0                	cmp    eax,edx
c00087a2:	0f 8d 8c 00 00 00    	jge    c0008834 <ff_wtoupper+0x134>
c00087a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087ad:	83 f8 08             	cmp    eax,0x8
c00087b0:	0f 87 9a 00 00 00    	ja     c0008850 <ff_wtoupper+0x150>
c00087b6:	8b 04 85 00 20 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde000]
c00087bd:	ff e0                	jmp    eax
c00087bf:	90                   	nop
c00087c0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087c5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087ca:	29 c2                	sub    edx,eax
c00087cc:	89 d0                	mov    eax,edx
c00087ce:	01 c0                	add    eax,eax
c00087d0:	89 c2                	mov    edx,eax
c00087d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087d6:	01 d0                	add    eax,edx
c00087d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087db:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087e0:	eb 4e                	jmp    c0008830 <ff_wtoupper+0x130>
c00087e2:	66 90                	xchg   ax,ax
c00087e4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087ed:	83 e0 01             	and    eax,0x1
c00087f0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087f5:	eb 39                	jmp    c0008830 <ff_wtoupper+0x130>
c00087f7:	90                   	nop
c00087f8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087fe:	eb 30                	jmp    c0008830 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008806:	eb 28                	jmp    c0008830 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000880e:	eb 20                	jmp    c0008830 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008816:	eb 18                	jmp    c0008830 <ff_wtoupper+0x130>
c0008818:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000881e:	eb 10                	jmp    c0008830 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008826:	eb 08                	jmp    c0008830 <ff_wtoupper+0x130>
c0008828:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000882f:	90                   	nop
c0008830:	eb 1e                	jmp    c0008850 <ff_wtoupper+0x150>
c0008832:	66 90                	xchg   ax,ax
c0008834:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000883a:	0f 85 f8 fe ff ff    	jne    c0008738 <ff_wtoupper+0x38>
c0008840:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008845:	01 c0                	add    eax,eax
c0008847:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000884b:	e9 e8 fe ff ff       	jmp    c0008738 <ff_wtoupper+0x38>
c0008850:	90                   	nop
c0008851:	8d 76 00             	lea    esi,[esi+0x0]
c0008854:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008859:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000885d:	8d 76 00             	lea    esi,[esi+0x0]
c0008860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008864:	83 c4 10             	add    esp,0x10
c0008867:	c3                   	ret    

c0008868 <CPU::current()>:
c0008868:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000886d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008873:	c3                   	ret    

c0008874 <operator new(unsigned long)>:
c0008874:	e9 4a 11 00 00       	jmp    c00099c3 <malloc>

c0008879 <operator delete(void*)>:
c0008879:	e9 65 11 00 00       	jmp    c00099e3 <rfree>

c000887e <disableIRQs()>:
c000887e:	fa                   	cli    
c000887f:	ff 05 28 76 02 c0    	inc    DWORD PTR ds:0xc0027628
c0008885:	c3                   	ret    

c0008886 <enableIRQs()>:
c0008886:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c000888b:	48                   	dec    eax
c000888c:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c0008891:	75 01                	jne    c0008894 <enableIRQs()+0xe>
c0008893:	fb                   	sti    
c0008894:	c3                   	ret    

c0008895 <lockScheduler()>:
c0008895:	fa                   	cli    
c0008896:	ff 05 28 76 02 c0    	inc    DWORD PTR ds:0xc0027628
c000889c:	c3                   	ret    

c000889d <unlockScheduler()>:
c000889d:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c00088a2:	48                   	dec    eax
c00088a3:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c00088a8:	75 01                	jne    c00088ab <unlockScheduler()+0xe>
c00088aa:	fb                   	sti    
c00088ab:	c3                   	ret    

c00088ac <lockStuff()>:
c00088ac:	fa                   	cli    
c00088ad:	ff 05 28 76 02 c0    	inc    DWORD PTR ds:0xc0027628
c00088b3:	ff 05 24 76 02 c0    	inc    DWORD PTR ds:0xc0027624
c00088b9:	c3                   	ret    

c00088ba <unlockStuff()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	a1 24 76 02 c0       	mov    eax,ds:0xc0027624
c00088c2:	48                   	dec    eax
c00088c3:	a3 24 76 02 c0       	mov    ds:0xc0027624,eax
c00088c8:	75 18                	jne    c00088e2 <unlockStuff()+0x28>
c00088ca:	83 3d 20 76 02 c0 00 	cmp    DWORD PTR ds:0xc0027620,0x0
c00088d1:	74 0f                	je     c00088e2 <unlockStuff()+0x28>
c00088d3:	c7 05 20 76 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027620,0x0
c00088dd:	e8 ee f5 00 00       	call   c0017ed0 <schedule()>
c00088e2:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c00088e7:	48                   	dec    eax
c00088e8:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c00088ed:	75 01                	jne    c00088f0 <unlockStuff()+0x36>
c00088ef:	fb                   	sti    
c00088f0:	83 c4 0c             	add    esp,0xc
c00088f3:	c3                   	ret    

c00088f4 <Virt::getAKernelVAS()>:
c00088f4:	a1 90 62 02 c0       	mov    eax,ds:0xc0026290
c00088f9:	c3                   	ret    

c00088fa <__not_memcpy>:
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008900:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008904:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008908:	89 c7                	mov    edi,eax
c000890a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	c3                   	ret    
c000890f:	90                   	nop

c0008910 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	68 00 24 02 c0       	push   0xc0022400
c000891b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891f:	e8 a8 7e ff ff       	call   c00007cc <strcmp>
c0008924:	83 c4 10             	add    esp,0x10
c0008927:	85 c0                	test   eax,eax
c0008929:	0f 94 c0             	sete   al
c000892c:	84 c0                	test   al,al
c000892e:	74 0c                	je     c000893c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008930:	b8 68 61 02 c0       	mov    eax,0xc0026168
c0008935:	e9 ea 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000893a:	66 90                	xchg   ax,ax
c000893c:	83 ec 08             	sub    esp,0x8
c000893f:	68 09 24 02 c0       	push   0xc0022409
c0008944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008948:	e8 7f 7e ff ff       	call   c00007cc <strcmp>
c000894d:	83 c4 10             	add    esp,0x10
c0008950:	85 c0                	test   eax,eax
c0008952:	0f 94 c0             	sete   al
c0008955:	84 c0                	test   al,al
c0008957:	74 0b                	je     c0008964 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008959:	b8 a4 0e 02 c0       	mov    eax,0xc0020ea4
c000895e:	e9 c1 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008963:	90                   	nop
c0008964:	83 ec 08             	sub    esp,0x8
c0008967:	68 13 24 02 c0       	push   0xc0022413
c000896c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008970:	e8 57 7e ff ff       	call   c00007cc <strcmp>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	85 c0                	test   eax,eax
c000897a:	0f 94 c0             	sete   al
c000897d:	84 c0                	test   al,al
c000897f:	74 0b                	je     c000898c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008981:	b8 d8 0b 02 c0       	mov    eax,0xc0020bd8
c0008986:	e9 99 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000898b:	90                   	nop
c000898c:	83 ec 08             	sub    esp,0x8
c000898f:	68 1c 24 02 c0       	push   0xc002241c
c0008994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008998:	e8 2f 7e ff ff       	call   c00007cc <strcmp>
c000899d:	83 c4 10             	add    esp,0x10
c00089a0:	85 c0                	test   eax,eax
c00089a2:	0f 94 c0             	sete   al
c00089a5:	84 c0                	test   al,al
c00089a7:	74 07                	je     c00089b0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a9:	b8 a4 0f 02 c0       	mov    eax,0xc0020fa4
c00089ae:	eb 74                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089b0:	83 ec 08             	sub    esp,0x8
c00089b3:	68 26 24 02 c0       	push   0xc0022426
c00089b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089bc:	e8 0b 7e ff ff       	call   c00007cc <strcmp>
c00089c1:	83 c4 10             	add    esp,0x10
c00089c4:	85 c0                	test   eax,eax
c00089c6:	0f 94 c0             	sete   al
c00089c9:	84 c0                	test   al,al
c00089cb:	74 07                	je     c00089d4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089cd:	b8 24 0d 02 c0       	mov    eax,0xc0020d24
c00089d2:	eb 50                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089d4:	83 ec 08             	sub    esp,0x8
c00089d7:	68 2f 24 02 c0       	push   0xc002242f
c00089dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e0:	e8 e7 7d ff ff       	call   c00007cc <strcmp>
c00089e5:	83 c4 10             	add    esp,0x10
c00089e8:	85 c0                	test   eax,eax
c00089ea:	0f 94 c0             	sete   al
c00089ed:	84 c0                	test   al,al
c00089ef:	74 07                	je     c00089f8 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089f1:	b8 6c 61 02 c0       	mov    eax,0xc002616c
c00089f6:	eb 2c                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f8:	83 ec 08             	sub    esp,0x8
c00089fb:	68 3c 24 02 c0       	push   0xc002243c
c0008a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a04:	e8 c3 7d ff ff       	call   c00007cc <strcmp>
c0008a09:	83 c4 10             	add    esp,0x10
c0008a0c:	85 c0                	test   eax,eax
c0008a0e:	0f 94 c0             	sete   al
c0008a11:	84 c0                	test   al,al
c0008a13:	74 07                	je     c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a15:	b8 6d 61 02 c0       	mov    eax,0xc002616d
c0008a1a:	eb 08                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a1c:	b8 00 00 00 00       	mov    eax,0x0
c0008a21:	8d 76 00             	lea    esi,[esi+0x0]
c0008a24:	83 c4 0c             	add    esp,0xc
c0008a27:	c3                   	ret    

c0008a28 <Computer::close(int, int, void*)>:
c0008a28:	57                   	push   edi
c0008a29:	56                   	push   esi
c0008a2a:	53                   	push   ebx
c0008a2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a33:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a37:	83 ec 0c             	sub    esp,0xc
c0008a3a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a40:	e8 eb 55 00 00       	call   c000e030 <Device::closeAll()>
c0008a45:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a50:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a54:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a5c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a64:	5b                   	pop    ebx
c0008a65:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a68:	5e                   	pop    esi
c0008a69:	5f                   	pop    edi
c0008a6a:	ff e0                	jmp    eax

c0008a6c <Krnl::firstTask()>:
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 14             	sub    esp,0x14
c0008a70:	68 49 24 02 c0       	push   0xc0022449
c0008a75:	e8 a3 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008a7a:	fb                   	sti    
c0008a7b:	c7 04 24 60 24 02 c0 	mov    DWORD PTR [esp],0xc0022460
c0008a82:	e8 96 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008a87:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a8e:	e8 30 0f 00 00       	call   c00099c3 <malloc>
c0008a93:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a9a:	89 c3                	mov    ebx,eax
c0008a9c:	ff 35 50 76 02 c0    	push   DWORD PTR ds:0xc0027650
c0008aa2:	68 79 24 02 c0       	push   0xc0022479
c0008aa7:	6a 01                	push   0x1
c0008aa9:	50                   	push   eax
c0008aaa:	e8 fd ef 00 00       	call   c0017aac <Process::Process(bool, char const*, Process*, char**)>
c0008aaf:	83 c4 20             	add    esp,0x20
c0008ab2:	68 ff 00 00 00       	push   0xff
c0008ab7:	6a 00                	push   0x0
c0008ab9:	68 bd 93 00 c0       	push   0xc00093bd
c0008abe:	53                   	push   ebx
c0008abf:	e8 f0 f1 00 00       	call   c0017cb4 <Process::createThread(void (*)(void*), void*, int)>
c0008ac4:	6a 7a                	push   0x7a
c0008ac6:	6a 00                	push   0x0
c0008ac8:	68 f8 86 01 c0       	push   0xc00186f8
c0008acd:	ff 35 50 76 02 c0    	push   DWORD PTR ds:0xc0027650
c0008ad3:	e8 dc f1 00 00       	call   c0017cb4 <Process::createThread(void (*)(void*), void*, int)>
c0008ad8:	83 c4 14             	add    esp,0x14
c0008adb:	a3 08 76 02 c0       	mov    ds:0xc0027608,eax
c0008ae0:	68 20 26 02 c0       	push   0xc0022620
c0008ae5:	c6 05 6d 61 02 c0 01 	mov    BYTE PTR ds:0xc002616d,0x1
c0008aec:	e8 2c 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008af1:	e8 dd ff 00 00       	call   c0018ad3 <Vm::initialise8086()>
c0008af6:	e8 fb 42 00 00       	call   c000cdf6 <Fs::initVFS()>
c0008afb:	c7 04 24 86 24 02 c0 	mov    DWORD PTR [esp],0xc0022486
c0008b02:	e8 16 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b07:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0008b0c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b12:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b14:	6a 00                	push   0x0
c0008b16:	6a 00                	push   0x0
c0008b18:	6a 00                	push   0x0
c0008b1a:	50                   	push   eax
c0008b1b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b1e:	83 c4 14             	add    esp,0x14
c0008b21:	68 20 26 02 c0       	push   0xc0022620
c0008b26:	e8 f2 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b2b:	e8 ea d7 00 00       	call   c001631a <Sys::loadSyscalls()>
c0008b30:	e8 c1 b6 00 00       	call   c00141f6 <Krnl::loadSystemEnv()>
c0008b35:	83 c4 0c             	add    esp,0xc
c0008b38:	6a 3a                	push   0x3a
c0008b3a:	68 a0 24 02 c0       	push   0xc00224a0
c0008b3f:	68 a9 24 02 c0       	push   0xc00224a9
c0008b44:	e8 94 c5 00 00       	call   c00150dd <Reg::readIntWithDefault(char*, char*, int)>
c0008b49:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b4c:	e8 97 4d 00 00       	call   c000d8e8 <User::loadClockSettings(int)>
c0008b51:	c7 04 24 44 26 02 c0 	mov    DWORD PTR [esp],0xc0022644
c0008b58:	e8 c0 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b5d:	58                   	pop    eax
c0008b5e:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0008b63:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b69:	e8 82 54 00 00       	call   c000dff0 <Device::loadDriversForAll()>
c0008b6e:	c7 04 24 b1 24 02 c0 	mov    DWORD PTR [esp],0xc00224b1
c0008b75:	e8 a3 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b7a:	e8 df b1 00 00       	call   c0013d5e <Krnl::startCPUs()>
c0008b7f:	c7 04 24 cb 24 02 c0 	mov    DWORD PTR [esp],0xc00224cb
c0008b86:	e8 92 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b8b:	5a                   	pop    edx
c0008b8c:	8b 1d 68 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026168
c0008b92:	59                   	pop    ecx
c0008b93:	6a 01                	push   0x1
c0008b95:	68 dc 24 02 c0       	push   0xc00224dc
c0008b9a:	e8 4b e9 00 00       	call   c00174ea <Thr::loadDLL(char const*, bool)>
c0008b9f:	5a                   	pop    edx
c0008ba0:	59                   	pop    ecx
c0008ba1:	53                   	push   ebx
c0008ba2:	50                   	push   eax
c0008ba3:	e8 73 eb 00 00       	call   c001771b <Thr::executeDLL(unsigned long, void*)>
c0008ba8:	83 c4 10             	add    esp,0x10
c0008bab:	83 ec 0c             	sub    esp,0xc
c0008bae:	6a 02                	push   0x2
c0008bb0:	e8 13 f5 00 00       	call   c00180c8 <blockTask(TaskState)>
c0008bb5:	83 c4 10             	add    esp,0x10
c0008bb8:	eb f1                	jmp    c0008bab <Krnl::firstTask()+0x13f>

c0008bba <Computer::Computer()>:
c0008bba:	83 ec 0c             	sub    esp,0xc
c0008bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bc1:	83 ec 08             	sub    esp,0x8
c0008bc4:	68 f8 24 02 c0       	push   0xc00224f8
c0008bc9:	50                   	push   eax
c0008bca:	e8 db 54 00 00       	call   c000e0aa <Device::Device(char const*)>
c0008bcf:	83 c4 10             	add    esp,0x10
c0008bd2:	ba f4 26 02 c0       	mov    edx,0xc00226f4
c0008bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bdb:	89 10                	mov    DWORD PTR [eax],edx
c0008bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be1:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bef:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bfd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c03:	83 ca 04             	or     edx,0x4
c0008c06:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c16:	0f b6 d0             	movzx  edx,al
c0008c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c1d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c28:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c2e:	0f b6 d0             	movzx  edx,al
c0008c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c35:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c44:	8d 50 01             	lea    edx,[eax+0x1]
c0008c47:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c4b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c51:	0f b6 d0             	movzx  edx,al
c0008c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c58:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c5c:	83 e1 3f             	and    ecx,0x3f
c0008c5f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c6d:	0f b6 d0             	movzx  edx,al
c0008c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c74:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c85:	0f b6 d0             	movzx  edx,al
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c95:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c9b:	8d 50 01             	lea    edx,[eax+0x1]
c0008c9e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008ca8:	0f b6 d0             	movzx  edx,al
c0008cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb3:	83 e1 3f             	and    ecx,0x3f
c0008cb6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cc4:	0f b6 d0             	movzx  edx,al
c0008cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ccb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cdc:	0f b6 d0             	movzx  edx,al
c0008cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce3:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf2:	8d 50 01             	lea    edx,[eax+0x1]
c0008cf5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cf9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cff:	0f b6 d0             	movzx  edx,al
c0008d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d06:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d0a:	83 e1 3f             	and    ecx,0x3f
c0008d0d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d11:	90                   	nop
c0008d12:	83 c4 0c             	add    esp,0xc
c0008d15:	c3                   	ret    

c0008d16 <Computer::setBootMessage(char const*)>:
c0008d16:	c3                   	ret    
c0008d17:	90                   	nop

c0008d18 <Computer::detectFeatures()>:
c0008d18:	55                   	push   ebp
c0008d19:	57                   	push   edi
c0008d1a:	56                   	push   esi
c0008d1b:	53                   	push   ebx
c0008d1c:	83 ec 1c             	sub    esp,0x1c
c0008d1f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d23:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d2d:	e8 e7 74 ff ff       	call   c0000219 <detectCPUID>
c0008d32:	85 c0                	test   eax,eax
c0008d34:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d3a:	0f 95 c2             	setne  dl
c0008d3d:	83 e0 fd             	and    eax,0xfffffffd
c0008d40:	d1 e2                	shl    edx,1
c0008d42:	09 d0                	or     eax,edx
c0008d44:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d4a:	a8 02                	test   al,0x2
c0008d4c:	75 46                	jne    c0008d94 <Computer::detectFeatures()+0x7c>
c0008d4e:	f6 05 81 61 02 c0 04 	test   BYTE PTR ds:0xc0026181,0x4
c0008d55:	74 07                	je     c0008d5e <Computer::detectFeatures()+0x46>
c0008d57:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d5e:	e8 03 7e 01 00       	call   c0020b66 <x87Detect>
c0008d63:	83 e0 01             	and    eax,0x1
c0008d66:	c1 e0 04             	shl    eax,0x4
c0008d69:	88 c2                	mov    dl,al
c0008d6b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d71:	83 e0 ef             	and    eax,0xffffffef
c0008d74:	09 d0                	or     eax,edx
c0008d76:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d7c:	a8 10                	test   al,0x10
c0008d7e:	0f 85 2a 01 00 00    	jne    c0008eae <Computer::detectFeatures()+0x196>
c0008d84:	84 c0                	test   al,al
c0008d86:	0f 88 45 01 00 00    	js     c0008ed1 <Computer::detectFeatures()+0x1b9>
c0008d8c:	83 c4 1c             	add    esp,0x1c
c0008d8f:	5b                   	pop    ebx
c0008d90:	5e                   	pop    esi
c0008d91:	5f                   	pop    edi
c0008d92:	5d                   	pop    ebp
c0008d93:	c3                   	ret    
c0008d94:	83 ec 0c             	sub    esp,0xc
c0008d97:	6a 20                	push   0x20
c0008d99:	e8 64 9e 00 00       	call   c0012c02 <CPU::cpuidCheckEDX(unsigned int)>
c0008d9e:	83 e0 01             	and    eax,0x1
c0008da1:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008da8:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dae:	83 e0 f7             	and    eax,0xfffffff7
c0008db1:	09 d0                	or     eax,edx
c0008db3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008db9:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dc0:	e8 3d 9e 00 00       	call   c0012c02 <CPU::cpuidCheckEDX(unsigned int)>
c0008dc5:	83 e0 01             	and    eax,0x1
c0008dc8:	88 c2                	mov    dl,al
c0008dca:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dd0:	83 e0 fe             	and    eax,0xfffffffe
c0008dd3:	09 d0                	or     eax,edx
c0008dd5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008ddb:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de2:	e8 1b 9e 00 00       	call   c0012c02 <CPU::cpuidCheckEDX(unsigned int)>
c0008de7:	c1 e0 07             	shl    eax,0x7
c0008dea:	88 c2                	mov    dl,al
c0008dec:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df2:	83 e0 7f             	and    eax,0x7f
c0008df5:	09 d0                	or     eax,edx
c0008df7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dfd:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e04:	e8 f9 9d 00 00       	call   c0012c02 <CPU::cpuidCheckEDX(unsigned int)>
c0008e09:	83 c4 10             	add    esp,0x10
c0008e0c:	83 e0 01             	and    eax,0x1
c0008e0f:	c1 e0 05             	shl    eax,0x5
c0008e12:	88 c2                	mov    dl,al
c0008e14:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e1a:	83 e0 df             	and    eax,0xffffffdf
c0008e1d:	09 d0                	or     eax,edx
c0008e1f:	f7 05 80 61 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026180,0x401
c0008e29:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e2f:	0f 84 c2 00 00 00    	je     c0008ef7 <Computer::detectFeatures()+0x1df>
c0008e35:	83 e0 fe             	and    eax,0xfffffffe
c0008e38:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e3e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e44:	88 c2                	mov    dl,al
c0008e46:	83 e2 09             	and    edx,0x9
c0008e49:	fe ca                	dec    dl
c0008e4b:	75 09                	jne    c0008e56 <Computer::detectFeatures()+0x13e>
c0008e4d:	83 e0 fe             	and    eax,0xfffffffe
c0008e50:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e56:	83 ec 0c             	sub    esp,0xc
c0008e59:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e5d:	50                   	push   eax
c0008e5e:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e62:	55                   	push   ebp
c0008e63:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e67:	57                   	push   edi
c0008e68:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e6c:	56                   	push   esi
c0008e6d:	68 00 00 00 80       	push   0x80000000
c0008e72:	e8 07 9d 00 00       	call   c0012b7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e77:	83 c4 20             	add    esp,0x20
c0008e7a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e81:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e85:	0f 86 c3 fe ff ff    	jbe    c0008d4e <Computer::detectFeatures()+0x36>
c0008e8b:	83 ec 0c             	sub    esp,0xc
c0008e8e:	50                   	push   eax
c0008e8f:	55                   	push   ebp
c0008e90:	57                   	push   edi
c0008e91:	56                   	push   esi
c0008e92:	68 01 00 00 80       	push   0x80000001
c0008e97:	e8 e2 9c 00 00       	call   c0012b7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e9c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008ea6:	83 c4 20             	add    esp,0x20
c0008ea9:	e9 a0 fe ff ff       	jmp    c0008d4e <Computer::detectFeatures()+0x36>
c0008eae:	e8 6d 7c 01 00       	call   c0020b20 <absolutelyNoChanceInHell>
c0008eb3:	88 c2                	mov    dl,al
c0008eb5:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ebb:	c1 e2 07             	shl    edx,0x7
c0008ebe:	83 e0 7f             	and    eax,0x7f
c0008ec1:	09 d0                	or     eax,edx
c0008ec3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ec9:	84 c0                	test   al,al
c0008ecb:	0f 89 bb fe ff ff    	jns    c0008d8c <Computer::detectFeatures()+0x74>
c0008ed1:	e8 2a 7c 01 00       	call   c0020b00 <avxDetect>
c0008ed6:	83 e0 01             	and    eax,0x1
c0008ed9:	c1 e0 05             	shl    eax,0x5
c0008edc:	88 c2                	mov    dl,al
c0008ede:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008ee4:	83 e0 df             	and    eax,0xffffffdf
c0008ee7:	09 d0                	or     eax,edx
c0008ee9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008eef:	83 c4 1c             	add    esp,0x1c
c0008ef2:	5b                   	pop    ebx
c0008ef3:	5e                   	pop    esi
c0008ef4:	5f                   	pop    edi
c0008ef5:	5d                   	pop    ebp
c0008ef6:	c3                   	ret    
c0008ef7:	83 ec 0c             	sub    esp,0xc
c0008efa:	68 00 02 00 00       	push   0x200
c0008eff:	e8 fe 9c 00 00       	call   c0012c02 <CPU::cpuidCheckEDX(unsigned int)>
c0008f04:	83 c4 10             	add    esp,0x10
c0008f07:	83 e0 01             	and    eax,0x1
c0008f0a:	88 c2                	mov    dl,al
c0008f0c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f12:	83 e0 fe             	and    eax,0xfffffffe
c0008f15:	09 d0                	or     eax,edx
c0008f17:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f1d:	e9 1c ff ff ff       	jmp    c0008e3e <Computer::detectFeatures()+0x126>

c0008f22 <Computer::displayFeatures()>:
c0008f22:	c3                   	ret    
c0008f23:	90                   	nop

c0008f24 <Computer::rdmsr(unsigned int)>:
c0008f24:	83 ec 0c             	sub    esp,0xc
c0008f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f2b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f32:	74 0a                	je     c0008f3e <Computer::rdmsr(unsigned int)+0x1a>
c0008f34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f38:	0f 32                	rdmsr  
c0008f3a:	83 c4 0c             	add    esp,0xc
c0008f3d:	c3                   	ret    
c0008f3e:	83 ec 0c             	sub    esp,0xc
c0008f41:	68 01 25 02 c0       	push   0xc0022501
c0008f46:	e8 b4 b3 00 00       	call   c00142ff <Krnl::panic(char const*)>
c0008f4b:	83 c4 10             	add    esp,0x10
c0008f4e:	eb e4                	jmp    c0008f34 <Computer::rdmsr(unsigned int)+0x10>

c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0008f50:	57                   	push   edi
c0008f51:	56                   	push   esi
c0008f52:	52                   	push   edx
c0008f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f57:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008f5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008f5f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f66:	74 0e                	je     c0008f76 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0008f68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f6c:	89 f0                	mov    eax,esi
c0008f6e:	89 fa                	mov    edx,edi
c0008f70:	0f 30                	wrmsr  
c0008f72:	58                   	pop    eax
c0008f73:	5e                   	pop    esi
c0008f74:	5f                   	pop    edi
c0008f75:	c3                   	ret    
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	68 07 25 02 c0       	push   0xc0022507
c0008f7e:	e8 7c b3 00 00       	call   c00142ff <Krnl::panic(char const*)>
c0008f83:	83 c4 10             	add    esp,0x10
c0008f86:	eb e0                	jmp    c0008f68 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0008f88 <Computer::nmiEnabled()>:
c0008f88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f8c:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0008f92:	c3                   	ret    
c0008f93:	90                   	nop

c0008f94 <Computer::readCMOS(unsigned char)>:
c0008f94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f98:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008f9f:	19 c0                	sbb    eax,eax
c0008fa1:	83 e0 80             	and    eax,0xffffff80
c0008fa4:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008fa8:	e6 70                	out    0x70,al
c0008faa:	e4 71                	in     al,0x71
c0008fac:	c3                   	ret    
c0008fad:	90                   	nop

c0008fae <Computer::enableNMI(bool)>:
c0008fae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008fb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fb6:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0008fbc:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0008fc4:	eb ce                	jmp    c0008f94 <Computer::readCMOS(unsigned char)>

c0008fc6 <Computer::open(int, int, void*)>:
c0008fc6:	56                   	push   esi
c0008fc7:	53                   	push   ebx
c0008fc8:	83 ec 10             	sub    esp,0x10
c0008fcb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008fcf:	68 64 26 02 c0       	push   0xc0022664
c0008fd4:	e8 44 0a 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008fd9:	58                   	pop    eax
c0008fda:	f6 05 80 61 02 c0 04 	test   BYTE PTR ds:0xc0026180,0x4
c0008fe1:	5a                   	pop    edx
c0008fe2:	0f 94 05 40 55 02 c0 	sete   BYTE PTR ds:0xc0025540
c0008fe9:	68 58 01 00 00       	push   0x158
c0008fee:	68 0d 25 02 c0       	push   0xc002250d
c0008ff3:	e8 67 3a 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0008ff8:	59                   	pop    ecx
c0008ff9:	5e                   	pop    esi
c0008ffa:	68 14 01 00 00       	push   0x114
c0008fff:	68 23 25 02 c0       	push   0xc0022523
c0009004:	e8 56 3a 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0009009:	58                   	pop    eax
c000900a:	5a                   	pop    edx
c000900b:	6a 14                	push   0x14
c000900d:	68 37 25 02 c0       	push   0xc0022537
c0009012:	e8 48 3a 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0009017:	59                   	pop    ecx
c0009018:	5e                   	pop    esi
c0009019:	68 1f 07 00 00       	push   0x71f
c000901e:	68 4a 25 02 c0       	push   0xc002254a
c0009023:	e8 37 3a 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0009028:	58                   	pop    eax
c0009029:	5a                   	pop    edx
c000902a:	6a 5f                	push   0x5f
c000902c:	68 61 25 02 c0       	push   0xc0022561
c0009031:	e8 29 3a 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0009036:	c7 04 24 77 25 02 c0 	mov    DWORD PTR [esp],0xc0022577
c000903d:	e8 1d 3a 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0009042:	c7 04 24 89 25 02 c0 	mov    DWORD PTR [esp],0xc0022589
c0009049:	e8 cf 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000904e:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0009055:	e8 69 09 00 00       	call   c00099c3 <malloc>
c000905a:	89 c6                	mov    esi,eax
c000905c:	89 04 24             	mov    DWORD PTR [esp],eax
c000905f:	e8 10 8d 00 00       	call   c0011d74 <ACPI::ACPI()>
c0009064:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000906a:	c7 04 24 a3 25 02 c0 	mov    DWORD PTR [esp],0xc00225a3
c0009071:	e8 a7 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009076:	59                   	pop    ecx
c0009077:	5e                   	pop    esi
c0009078:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000907e:	53                   	push   ebx
c000907f:	e8 22 4e 00 00       	call   c000dea6 <Device::addChild(Device*)>
c0009084:	c7 04 24 88 26 02 c0 	mov    DWORD PTR [esp],0xc0022688
c000908b:	e8 8d 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009090:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009093:	e8 80 fc ff ff       	call   c0008d18 <Computer::detectFeatures()>
c0009098:	c7 04 24 a8 26 02 c0 	mov    DWORD PTR [esp],0xc00226a8
c000909f:	e8 79 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090a4:	c7 04 24 bd 25 02 c0 	mov    DWORD PTR [esp],0xc00225bd
c00090ab:	e8 6d 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090b0:	58                   	pop    eax
c00090b1:	5a                   	pop    edx
c00090b2:	6a 01                	push   0x1
c00090b4:	53                   	push   ebx
c00090b5:	e8 f4 fe ff ff       	call   c0008fae <Computer::enableNMI(bool)>
c00090ba:	c7 04 24 b1 24 02 c0 	mov    DWORD PTR [esp],0xc00224b1
c00090c1:	e8 57 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090c6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c00090cd:	e8 f1 08 00 00       	call   c00099c3 <malloc>
c00090d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00090d5:	89 c6                	mov    esi,eax
c00090d7:	e8 de 9b 00 00       	call   c0012cba <CPU::CPU()>
c00090dc:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00090e2:	59                   	pop    ecx
c00090e3:	58                   	pop    eax
c00090e4:	56                   	push   esi
c00090e5:	53                   	push   ebx
c00090e6:	e8 bb 4d 00 00       	call   c000dea6 <Device::addChild(Device*)>
c00090eb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00090f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00090f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00090f7:	6a 00                	push   0x0
c00090f9:	6a 00                	push   0x0
c00090fb:	50                   	push   eax
c00090fc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00090ff:	83 c4 14             	add    esp,0x14
c0009102:	68 c8 26 02 c0       	push   0xc00226c8
c0009107:	e8 11 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000910c:	e8 31 53 00 00       	call   c000e442 <setupFPU()>
c0009111:	83 c4 10             	add    esp,0x10
c0009114:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000911a:	85 c0                	test   eax,eax
c000911c:	74 1f                	je     c000913d <Computer::open(int, int, void*)+0x177>
c000911e:	83 ec 08             	sub    esp,0x8
c0009121:	50                   	push   eax
c0009122:	53                   	push   ebx
c0009123:	e8 7e 4d 00 00       	call   c000dea6 <Device::addChild(Device*)>
c0009128:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000912e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009130:	6a 00                	push   0x0
c0009132:	6a 00                	push   0x0
c0009134:	6a 00                	push   0x0
c0009136:	50                   	push   eax
c0009137:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000913a:	83 c4 20             	add    esp,0x20
c000913d:	83 ec 0c             	sub    esp,0xc
c0009140:	68 ce 25 02 c0       	push   0xc00225ce
c0009145:	e8 d3 08 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000914a:	c7 04 24 6c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a6c
c0009151:	e8 72 ec 00 00       	call   c0017dc8 <setupMultitasking(void (*)())>
c0009156:	83 c4 14             	add    esp,0x14
c0009159:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000915e:	5b                   	pop    ebx
c000915f:	5e                   	pop    esi
c0009160:	c3                   	ret    
c0009161:	90                   	nop

c0009162 <Computer::disableNMI()>:
c0009162:	6a 00                	push   0x0
c0009164:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009168:	e8 41 fe ff ff       	call   c0008fae <Computer::enableNMI(bool)>
c000916d:	58                   	pop    eax
c000916e:	5a                   	pop    edx
c000916f:	c3                   	ret    

c0009170 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0009170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009174:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000917b:	19 c0                	sbb    eax,eax
c000917d:	83 e0 80             	and    eax,0xffffff80
c0009180:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009184:	e6 70                	out    0x70,al
c0009186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000918a:	e6 71                	out    0x71,al
c000918c:	c3                   	ret    
c000918d:	90                   	nop

c000918e <Computer::handleNMI()>:
c000918e:	56                   	push   esi
c000918f:	53                   	push   ebx
c0009190:	83 ec 10             	sub    esp,0x10
c0009193:	e4 92                	in     al,0x92
c0009195:	89 c6                	mov    esi,eax
c0009197:	e4 61                	in     al,0x61
c0009199:	68 e9 25 02 c0       	push   0xc00225e9
c000919e:	88 c3                	mov    bl,al
c00091a0:	e8 ba 38 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c00091a5:	83 c4 10             	add    esp,0x10
c00091a8:	83 e6 10             	and    esi,0x10
c00091ab:	75 0d                	jne    c00091ba <Computer::handleNMI()+0x2c>
c00091ad:	f6 c3 40             	test   bl,0x40
c00091b0:	75 1d                	jne    c00091cf <Computer::handleNMI()+0x41>
c00091b2:	84 db                	test   bl,bl
c00091b4:	78 2d                	js     c00091e3 <Computer::handleNMI()+0x55>
c00091b6:	58                   	pop    eax
c00091b7:	5b                   	pop    ebx
c00091b8:	5e                   	pop    esi
c00091b9:	c3                   	ret    
c00091ba:	83 ec 0c             	sub    esp,0xc
c00091bd:	68 fa 25 02 c0       	push   0xc00225fa
c00091c2:	e8 38 b1 00 00       	call   c00142ff <Krnl::panic(char const*)>
c00091c7:	83 c4 10             	add    esp,0x10
c00091ca:	f6 c3 40             	test   bl,0x40
c00091cd:	74 e3                	je     c00091b2 <Computer::handleNMI()+0x24>
c00091cf:	83 ec 0c             	sub    esp,0xc
c00091d2:	68 07 26 02 c0       	push   0xc0022607
c00091d7:	e8 23 b1 00 00       	call   c00142ff <Krnl::panic(char const*)>
c00091dc:	83 c4 10             	add    esp,0x10
c00091df:	84 db                	test   bl,bl
c00091e1:	79 d3                	jns    c00091b6 <Computer::handleNMI()+0x28>
c00091e3:	c7 44 24 10 11 26 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022611
c00091eb:	5a                   	pop    edx
c00091ec:	5b                   	pop    ebx
c00091ed:	5e                   	pop    esi
c00091ee:	e9 0c b1 00 00       	jmp    c00142ff <Krnl::panic(char const*)>
c00091f3:	90                   	nop

c00091f4 <Computer::setDiskActivityLight(int, bool)>:
c00091f4:	56                   	push   esi
c00091f5:	53                   	push   ebx
c00091f6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00091fa:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091ff:	77 1b                	ja     c000921c <Computer::setDiskActivityLight(int, bool)+0x28>
c0009201:	e4 92                	in     al,0x92
c0009203:	bb 40 00 00 00       	mov    ebx,0x40
c0009208:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000920c:	89 da                	mov    edx,ebx
c000920e:	d3 e2                	shl    edx,cl
c0009210:	89 f1                	mov    ecx,esi
c0009212:	f7 d2                	not    edx
c0009214:	d3 e3                	shl    ebx,cl
c0009216:	21 d0                	and    eax,edx
c0009218:	09 d8                	or     eax,ebx
c000921a:	e6 92                	out    0x92,al
c000921c:	5b                   	pop    ebx
c000921d:	5e                   	pop    esi
c000921e:	c3                   	ret    
c000921f:	90                   	nop

c0009220 <GDTEntry::setBase(unsigned int)>:
c0009220:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009224:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009228:	89 c1                	mov    ecx,eax
c000922a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000922e:	c1 e9 10             	shr    ecx,0x10
c0009231:	c1 e8 18             	shr    eax,0x18
c0009234:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0009237:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000923a:	c3                   	ret    
c000923b:	90                   	nop

c000923c <GDTEntry::setLimit(unsigned int)>:
c000923c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009244:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0009247:	66 89 01             	mov    WORD PTR [ecx],ax
c000924a:	83 e2 f0             	and    edx,0xfffffff0
c000924d:	c1 e8 10             	shr    eax,0x10
c0009250:	83 e0 0f             	and    eax,0xf
c0009253:	09 d0                	or     eax,edx
c0009255:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0009258:	c3                   	ret    
c0009259:	90                   	nop

c000925a <GDT::GDT()>:
c000925a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000925e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009268:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000926e:	90                   	nop
c000926f:	c3                   	ret    

c0009270 <GDT::addEntry(GDTEntry)>:
c0009270:	53                   	push   ebx
c0009271:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009275:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009279:	8b 02                	mov    eax,DWORD PTR [edx]
c000927b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000927f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009283:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0009287:	8d 48 01             	lea    ecx,[eax+0x1]
c000928a:	c1 e0 03             	shl    eax,0x3
c000928d:	89 0a                	mov    DWORD PTR [edx],ecx
c000928f:	5b                   	pop    ebx
c0009290:	c3                   	ret    
c0009291:	90                   	nop

c0009292 <GDT::getNumberOfEntries()>:
c0009292:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009296:	8b 00                	mov    eax,DWORD PTR [eax]
c0009298:	c3                   	ret    
c0009299:	90                   	nop

c000929a <GDT::flush()>:
c000929a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000929e:	8b 10                	mov    edx,DWORD PTR [eax]
c00092a0:	83 c0 04             	add    eax,0x4
c00092a3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00092aa:	a3 72 61 02 c0       	mov    ds:0xc0026172,eax
c00092af:	66 89 15 70 61 02 c0 	mov    WORD PTR ds:0xc0026170,dx
c00092b6:	e9 ca 70 ff ff       	jmp    c0000385 <loadGDT>
c00092bb:	90                   	nop

c00092bc <GDT::setup()>:
c00092bc:	55                   	push   ebp
c00092bd:	57                   	push   edi
c00092be:	56                   	push   esi
c00092bf:	53                   	push   ebx
c00092c0:	83 ec 3c             	sub    esp,0x3c
c00092c3:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c00092c7:	6a 00                	push   0x0
c00092c9:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00092cd:	53                   	push   ebx
c00092ce:	e8 4d ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c00092d3:	6a 00                	push   0x0
c00092d5:	53                   	push   ebx
c00092d6:	e8 61 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c00092db:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c00092e3:	6a 00                	push   0x0
c00092e5:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00092e9:	53                   	push   ebx
c00092ea:	e8 31 ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c00092ef:	68 ff ff ff 00       	push   0xffffff
c00092f4:	53                   	push   ebx
c00092f5:	e8 42 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c00092fa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00092fe:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009303:	0d 00 9a c0 00       	or     eax,0xc09a00
c0009308:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000930c:	83 c4 20             	add    esp,0x20
c000930f:	6a 00                	push   0x0
c0009311:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0009315:	53                   	push   ebx
c0009316:	e8 05 ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c000931b:	68 ff ff ff 00       	push   0xffffff
c0009320:	53                   	push   ebx
c0009321:	e8 16 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c0009326:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000932a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000932e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009332:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009336:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000933a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000933f:	0d 00 92 c0 00       	or     eax,0xc09200
c0009344:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009348:	89 d8                	mov    eax,ebx
c000934a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000934e:	80 cc 60             	or     ah,0x60
c0009351:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009355:	83 c4 0c             	add    esp,0xc
c0009358:	89 f8                	mov    eax,edi
c000935a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000935e:	80 cc 60             	or     ah,0x60
c0009361:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009365:	89 c7                	mov    edi,eax
c0009367:	55                   	push   ebp
c0009368:	e8 03 ff ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000936d:	83 c4 0c             	add    esp,0xc
c0009370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009374:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009378:	55                   	push   ebp
c0009379:	e8 f2 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000937e:	83 c4 0c             	add    esp,0xc
c0009381:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009385:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009389:	55                   	push   ebp
c000938a:	e8 e1 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000938f:	83 c4 0c             	add    esp,0xc
c0009392:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009396:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000939a:	53                   	push   ebx
c000939b:	51                   	push   ecx
c000939c:	55                   	push   ebp
c000939d:	e8 ce fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c00093a2:	83 c4 0c             	add    esp,0xc
c00093a5:	57                   	push   edi
c00093a6:	56                   	push   esi
c00093a7:	55                   	push   ebp
c00093a8:	e8 c3 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c00093ad:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093b0:	e8 e5 fe ff ff       	call   c000929a <GDT::flush()>
c00093b5:	83 c4 4c             	add    esp,0x4c
c00093b8:	5b                   	pop    ebx
c00093b9:	5e                   	pop    esi
c00093ba:	5f                   	pop    edi
c00093bb:	5d                   	pop    ebp
c00093bc:	c3                   	ret    

c00093bd <idleFunction(void*)>:
c00093bd:	53                   	push   ebx
c00093be:	83 ec 08             	sub    esp,0x8
c00093c1:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c00093c6:	48                   	dec    eax
c00093c7:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c00093cc:	75 01                	jne    c00093cf <idleFunction(void*)+0x12>
c00093ce:	fb                   	sti    
c00093cf:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00093d4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00093da:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c00093e1:	74 3c                	je     c000941f <idleFunction(void*)+0x62>
c00093e3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00093ea:	74 33                	je     c000941f <idleFunction(void*)+0x62>
c00093ec:	31 db                	xor    ebx,ebx
c00093ee:	52                   	push   edx
c00093ef:	52                   	push   edx
c00093f0:	68 e1 00 00 00       	push   0xe1
c00093f5:	50                   	push   eax
c00093f6:	e8 29 fb ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c00093fb:	53                   	push   ebx
c00093fc:	83 e0 02             	and    eax,0x2
c00093ff:	50                   	push   eax
c0009400:	68 e1 00 00 00       	push   0xe1
c0009405:	ff 35 68 61 02 c0    	push   DWORD PTR ds:0xc0026168
c000940b:	e8 40 fb ff ff       	call   c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>
c0009410:	83 c4 20             	add    esp,0x20
c0009413:	e8 9c 6d ff ff       	call   c00001b4 <doTPAUSE>
c0009418:	e8 09 7d 01 00       	call   c0021126 <idleCommon()>
c000941d:	eb f4                	jmp    c0009413 <idleFunction(void*)+0x56>
c000941f:	fb                   	sti    
c0009420:	f4                   	hlt    
c0009421:	e8 00 7d 01 00       	call   c0021126 <idleCommon()>
c0009426:	eb f7                	jmp    c000941f <idleFunction(void*)+0x62>

c0009428 <IDTEntry::IDTEntry(bool)>:
c0009428:	83 ec 04             	sub    esp,0x4
c000942b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000942f:	88 04 24             	mov    BYTE PTR [esp],al
c0009432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009436:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000943c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009440:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009448:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000944b:	83 e2 f0             	and    edx,0xfffffff0
c000944e:	83 ca 0e             	or     edx,0xe
c0009451:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009454:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009458:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000945b:	83 e2 ef             	and    edx,0xffffffef
c000945e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009461:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009465:	74 05                	je     c000946c <IDTEntry::IDTEntry(bool)+0x44>
c0009467:	b2 03                	mov    dl,0x3
c0009469:	eb 05                	jmp    c0009470 <IDTEntry::IDTEntry(bool)+0x48>
c000946b:	90                   	nop
c000946c:	b2 00                	mov    dl,0x0
c000946e:	66 90                	xchg   ax,ax
c0009470:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009474:	83 e2 03             	and    edx,0x3
c0009477:	88 d1                	mov    cl,dl
c0009479:	c1 e1 05             	shl    ecx,0x5
c000947c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000947f:	83 e2 9f             	and    edx,0xffffff9f
c0009482:	09 ca                	or     edx,ecx
c0009484:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009487:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000948b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000948e:	83 ca 80             	or     edx,0xffffff80
c0009491:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009494:	90                   	nop
c0009495:	83 c4 04             	add    esp,0x4
c0009498:	c3                   	ret    
c0009499:	90                   	nop

c000949a <IDTEntry::setOffset(unsigned int)>:
c000949a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000949e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094a2:	66 89 02             	mov    WORD PTR [edx],ax
c00094a5:	c1 e8 10             	shr    eax,0x10
c00094a8:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00094ac:	c3                   	ret    
c00094ad:	90                   	nop
c00094ae:	66 90                	xchg   ax,ax

c00094b0 <IDT::IDT()>:
c00094b0:	90                   	nop
c00094b1:	c3                   	ret    

c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00094b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094b6:	83 c0 30             	add    eax,0x30
c00094b9:	c3                   	ret    

c00094ba <IDT::addEntry(IDTEntry, int)>:
c00094ba:	53                   	push   ebx
c00094bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00094c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00094c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094cb:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00094ce:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00094d2:	5b                   	pop    ebx
c00094d3:	c3                   	ret    

c00094d4 <IDT::addEntry(int, void (*)(), bool)>:
c00094d4:	53                   	push   ebx
c00094d5:	83 ec 10             	sub    esp,0x10
c00094d8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00094dd:	50                   	push   eax
c00094de:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00094e2:	53                   	push   ebx
c00094e3:	e8 40 ff ff ff       	call   c0009428 <IDTEntry::IDTEntry(bool)>
c00094e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00094ec:	53                   	push   ebx
c00094ed:	e8 a8 ff ff ff       	call   c000949a <IDTEntry::setOffset(unsigned int)>
c00094f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00094f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009502:	e8 b3 ff ff ff       	call   c00094ba <IDT::addEntry(IDTEntry, int)>
c0009507:	83 c4 30             	add    esp,0x30
c000950a:	5b                   	pop    ebx
c000950b:	c3                   	ret    

c000950c <IDT::flush()>:
c000950c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009510:	66 c7 05 78 61 02 c0 ff 07 	mov    WORD PTR ds:0xc0026178,0x7ff
c0009519:	a3 7a 61 02 c0       	mov    ds:0xc002617a,eax
c000951e:	0f 01 1d 78 61 02 c0 	lidtd  ds:0xc0026178
c0009525:	c3                   	ret    

c0009526 <IDT::setup()>:
c0009526:	57                   	push   edi
c0009527:	56                   	push   esi
c0009528:	53                   	push   ebx
c0009529:	83 ec 10             	sub    esp,0x10
c000952c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009530:	6a 00                	push   0x0
c0009532:	68 a5 03 00 c0       	push   0xc00003a5
c0009537:	6a 00                	push   0x0
c0009539:	53                   	push   ebx
c000953a:	e8 95 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000953f:	6a 00                	push   0x0
c0009541:	68 b5 03 00 c0       	push   0xc00003b5
c0009546:	6a 01                	push   0x1
c0009548:	53                   	push   ebx
c0009549:	e8 86 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000954e:	83 c4 20             	add    esp,0x20
c0009551:	6a 00                	push   0x0
c0009553:	68 bf 03 00 c0       	push   0xc00003bf
c0009558:	6a 02                	push   0x2
c000955a:	53                   	push   ebx
c000955b:	e8 74 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009560:	6a 00                	push   0x0
c0009562:	68 c9 03 00 c0       	push   0xc00003c9
c0009567:	6a 03                	push   0x3
c0009569:	53                   	push   ebx
c000956a:	e8 65 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000956f:	83 c4 20             	add    esp,0x20
c0009572:	6a 00                	push   0x0
c0009574:	68 d3 03 00 c0       	push   0xc00003d3
c0009579:	6a 04                	push   0x4
c000957b:	53                   	push   ebx
c000957c:	e8 53 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009581:	6a 00                	push   0x0
c0009583:	68 dd 03 00 c0       	push   0xc00003dd
c0009588:	6a 05                	push   0x5
c000958a:	53                   	push   ebx
c000958b:	e8 44 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009590:	83 c4 20             	add    esp,0x20
c0009593:	6a 00                	push   0x0
c0009595:	68 e7 03 00 c0       	push   0xc00003e7
c000959a:	6a 06                	push   0x6
c000959c:	53                   	push   ebx
c000959d:	e8 32 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095a2:	6a 00                	push   0x0
c00095a4:	68 f1 03 00 c0       	push   0xc00003f1
c00095a9:	6a 07                	push   0x7
c00095ab:	53                   	push   ebx
c00095ac:	e8 23 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095b1:	83 c4 20             	add    esp,0x20
c00095b4:	6a 00                	push   0x0
c00095b6:	68 fb 03 00 c0       	push   0xc00003fb
c00095bb:	6a 08                	push   0x8
c00095bd:	53                   	push   ebx
c00095be:	e8 11 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095c3:	6a 00                	push   0x0
c00095c5:	68 03 04 00 c0       	push   0xc0000403
c00095ca:	6a 09                	push   0x9
c00095cc:	53                   	push   ebx
c00095cd:	e8 02 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095d2:	83 c4 20             	add    esp,0x20
c00095d5:	6a 00                	push   0x0
c00095d7:	68 0d 04 00 c0       	push   0xc000040d
c00095dc:	6a 0a                	push   0xa
c00095de:	53                   	push   ebx
c00095df:	e8 f0 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095e4:	6a 00                	push   0x0
c00095e6:	68 15 04 00 c0       	push   0xc0000415
c00095eb:	6a 0b                	push   0xb
c00095ed:	53                   	push   ebx
c00095ee:	e8 e1 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095f3:	83 c4 20             	add    esp,0x20
c00095f6:	6a 00                	push   0x0
c00095f8:	68 1d 04 00 c0       	push   0xc000041d
c00095fd:	6a 0c                	push   0xc
c00095ff:	53                   	push   ebx
c0009600:	e8 cf fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009605:	6a 00                	push   0x0
c0009607:	68 25 04 00 c0       	push   0xc0000425
c000960c:	6a 0d                	push   0xd
c000960e:	53                   	push   ebx
c000960f:	e8 c0 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009614:	83 c4 20             	add    esp,0x20
c0009617:	6a 00                	push   0x0
c0009619:	68 2d 04 00 c0       	push   0xc000042d
c000961e:	6a 0e                	push   0xe
c0009620:	53                   	push   ebx
c0009621:	e8 ae fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009626:	6a 00                	push   0x0
c0009628:	68 35 04 00 c0       	push   0xc0000435
c000962d:	6a 0f                	push   0xf
c000962f:	53                   	push   ebx
c0009630:	e8 9f fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009635:	83 c4 20             	add    esp,0x20
c0009638:	6a 00                	push   0x0
c000963a:	68 3f 04 00 c0       	push   0xc000043f
c000963f:	6a 10                	push   0x10
c0009641:	53                   	push   ebx
c0009642:	e8 8d fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009647:	6a 00                	push   0x0
c0009649:	68 49 04 00 c0       	push   0xc0000449
c000964e:	6a 11                	push   0x11
c0009650:	53                   	push   ebx
c0009651:	e8 7e fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009656:	83 c4 20             	add    esp,0x20
c0009659:	6a 00                	push   0x0
c000965b:	68 53 04 00 c0       	push   0xc0000453
c0009660:	6a 12                	push   0x12
c0009662:	53                   	push   ebx
c0009663:	e8 6c fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009668:	6a 01                	push   0x1
c000966a:	68 ed 04 00 c0       	push   0xc00004ed
c000966f:	6a 60                	push   0x60
c0009671:	53                   	push   ebx
c0009672:	e8 5d fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009677:	83 c4 20             	add    esp,0x20
c000967a:	6a 00                	push   0x0
c000967c:	68 f4 04 00 c0       	push   0xc00004f4
c0009681:	6a 20                	push   0x20
c0009683:	53                   	push   ebx
c0009684:	e8 4b fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009689:	6a 00                	push   0x0
c000968b:	68 df 04 00 c0       	push   0xc00004df
c0009690:	6a 21                	push   0x21
c0009692:	53                   	push   ebx
c0009693:	e8 3c fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009698:	83 c4 20             	add    esp,0x20
c000969b:	6a 00                	push   0x0
c000969d:	68 e6 04 00 c0       	push   0xc00004e6
c00096a2:	6a 22                	push   0x22
c00096a4:	53                   	push   ebx
c00096a5:	e8 2a fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096aa:	6a 00                	push   0x0
c00096ac:	68 5d 04 00 c0       	push   0xc000045d
c00096b1:	6a 23                	push   0x23
c00096b3:	53                   	push   ebx
c00096b4:	e8 1b fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096b9:	83 c4 20             	add    esp,0x20
c00096bc:	6a 00                	push   0x0
c00096be:	68 67 04 00 c0       	push   0xc0000467
c00096c3:	6a 24                	push   0x24
c00096c5:	53                   	push   ebx
c00096c6:	e8 09 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096cb:	6a 00                	push   0x0
c00096cd:	68 71 04 00 c0       	push   0xc0000471
c00096d2:	6a 25                	push   0x25
c00096d4:	53                   	push   ebx
c00096d5:	e8 fa fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096da:	83 c4 20             	add    esp,0x20
c00096dd:	6a 00                	push   0x0
c00096df:	68 7b 04 00 c0       	push   0xc000047b
c00096e4:	6a 26                	push   0x26
c00096e6:	53                   	push   ebx
c00096e7:	e8 e8 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096ec:	6a 00                	push   0x0
c00096ee:	68 85 04 00 c0       	push   0xc0000485
c00096f3:	6a 27                	push   0x27
c00096f5:	53                   	push   ebx
c00096f6:	e8 d9 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096fb:	83 c4 20             	add    esp,0x20
c00096fe:	6a 00                	push   0x0
c0009700:	68 8f 04 00 c0       	push   0xc000048f
c0009705:	6a 28                	push   0x28
c0009707:	53                   	push   ebx
c0009708:	e8 c7 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000970d:	6a 00                	push   0x0
c000970f:	68 99 04 00 c0       	push   0xc0000499
c0009714:	6a 29                	push   0x29
c0009716:	53                   	push   ebx
c0009717:	e8 b8 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000971c:	83 c4 20             	add    esp,0x20
c000971f:	6a 00                	push   0x0
c0009721:	68 a3 04 00 c0       	push   0xc00004a3
c0009726:	6a 2a                	push   0x2a
c0009728:	53                   	push   ebx
c0009729:	e8 a6 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000972e:	6a 00                	push   0x0
c0009730:	68 ad 04 00 c0       	push   0xc00004ad
c0009735:	6a 2b                	push   0x2b
c0009737:	53                   	push   ebx
c0009738:	e8 97 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000973d:	83 c4 20             	add    esp,0x20
c0009740:	6a 00                	push   0x0
c0009742:	68 b7 04 00 c0       	push   0xc00004b7
c0009747:	6a 2c                	push   0x2c
c0009749:	53                   	push   ebx
c000974a:	e8 85 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000974f:	6a 00                	push   0x0
c0009751:	68 c1 04 00 c0       	push   0xc00004c1
c0009756:	6a 2d                	push   0x2d
c0009758:	53                   	push   ebx
c0009759:	e8 76 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000975e:	83 c4 20             	add    esp,0x20
c0009761:	6a 00                	push   0x0
c0009763:	68 cb 04 00 c0       	push   0xc00004cb
c0009768:	6a 2e                	push   0x2e
c000976a:	53                   	push   ebx
c000976b:	e8 64 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009770:	6a 00                	push   0x0
c0009772:	68 d5 04 00 c0       	push   0xc00004d5
c0009777:	6a 2f                	push   0x2f
c0009779:	53                   	push   ebx
c000977a:	e8 55 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000977f:	83 c4 20             	add    esp,0x20
c0009782:	6a 00                	push   0x0
c0009784:	68 2b 05 00 c0       	push   0xc000052b
c0009789:	6a 30                	push   0x30
c000978b:	53                   	push   ebx
c000978c:	e8 43 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009791:	6a 00                	push   0x0
c0009793:	68 35 05 00 c0       	push   0xc0000535
c0009798:	6a 31                	push   0x31
c000979a:	53                   	push   ebx
c000979b:	e8 34 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097a0:	83 c4 20             	add    esp,0x20
c00097a3:	6a 00                	push   0x0
c00097a5:	68 3f 05 00 c0       	push   0xc000053f
c00097aa:	6a 32                	push   0x32
c00097ac:	53                   	push   ebx
c00097ad:	e8 22 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097b2:	6a 00                	push   0x0
c00097b4:	68 49 05 00 c0       	push   0xc0000549
c00097b9:	6a 33                	push   0x33
c00097bb:	53                   	push   ebx
c00097bc:	e8 13 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097c1:	83 c4 20             	add    esp,0x20
c00097c4:	6a 00                	push   0x0
c00097c6:	68 53 05 00 c0       	push   0xc0000553
c00097cb:	6a 34                	push   0x34
c00097cd:	53                   	push   ebx
c00097ce:	e8 01 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097d3:	6a 00                	push   0x0
c00097d5:	68 5d 05 00 c0       	push   0xc000055d
c00097da:	6a 35                	push   0x35
c00097dc:	53                   	push   ebx
c00097dd:	e8 f2 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097e2:	83 c4 20             	add    esp,0x20
c00097e5:	6a 00                	push   0x0
c00097e7:	68 67 05 00 c0       	push   0xc0000567
c00097ec:	6a 36                	push   0x36
c00097ee:	53                   	push   ebx
c00097ef:	e8 e0 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097f4:	6a 00                	push   0x0
c00097f6:	68 71 05 00 c0       	push   0xc0000571
c00097fb:	6a 37                	push   0x37
c00097fd:	53                   	push   ebx
c00097fe:	e8 d1 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009803:	83 c4 1c             	add    esp,0x1c
c0009806:	6a 03                	push   0x3
c0009808:	6a 02                	push   0x2
c000980a:	ff 35 90 62 02 c0    	push   DWORD PTR ds:0xc0026290
c0009810:	e8 cd 26 00 00       	call   c000bee2 <VAS::allocatePages(int, int)>
c0009815:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000981c:	89 c6                	mov    esi,eax
c000981e:	e8 a0 01 00 00       	call   c00099c3 <malloc>
c0009823:	81 c6 00 20 00 00    	add    esi,0x2000
c0009829:	89 04 24             	mov    DWORD PTR [esp],eax
c000982c:	89 c7                	mov    edi,eax
c000982e:	e8 49 18 00 00       	call   c000b07c <TSS::TSS()>
c0009833:	83 c4 0c             	add    esp,0xc
c0009836:	68 fb 03 00 c0       	push   0xc00003fb
c000983b:	56                   	push   esi
c000983c:	57                   	push   edi
c000983d:	e8 7e 18 00 00       	call   c000b0c0 <TSS::setup(unsigned long, unsigned long)>
c0009842:	89 c6                	mov    esi,eax
c0009844:	58                   	pop    eax
c0009845:	5a                   	pop    edx
c0009846:	6a 00                	push   0x0
c0009848:	8d 44 24 14          	lea    eax,[esp+0x14]
c000984c:	50                   	push   eax
c000984d:	e8 d6 fb ff ff       	call   c0009428 <IDTEntry::IDTEntry(bool)>
c0009852:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009856:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000985b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009862:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009868:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000986c:	80 ce 05             	or     dh,0x5
c000986f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009872:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009876:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000987a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000987d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009880:	e8 87 fc ff ff       	call   c000950c <IDT::flush()>
c0009885:	83 c4 20             	add    esp,0x20
c0009888:	5b                   	pop    ebx
c0009889:	5e                   	pop    esi
c000988a:	5f                   	pop    edi
c000988b:	c3                   	ret    

c000988c <sbrk>:
c000988c:	55                   	push   ebp
c000988d:	57                   	push   edi
c000988e:	56                   	push   esi
c000988f:	53                   	push   ebx
c0009890:	83 ec 24             	sub    esp,0x24
c0009893:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009897:	53                   	push   ebx
c0009898:	68 18 27 02 c0       	push   0xc0022718
c000989d:	e8 bd 31 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c00098a2:	83 c4 10             	add    esp,0x10
c00098a5:	85 db                	test   ebx,ebx
c00098a7:	74 5f                	je     c0009908 <sbrk+0x7c>
c00098a9:	78 64                	js     c000990f <sbrk+0x83>
c00098ab:	a1 d8 53 02 c0       	mov    eax,ds:0xc00253d8
c00098b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00098b4:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c00098ba:	89 dd                	mov    ebp,ebx
c00098bc:	78 69                	js     c0009927 <sbrk+0x9b>
c00098be:	c1 fd 0c             	sar    ebp,0xc
c00098c1:	bb 00 00 00 00       	mov    ebx,0x0
c00098c6:	8b 35 90 62 02 c0    	mov    esi,DWORD PTR ds:0xc0026290
c00098cc:	8b 3d d8 53 02 c0    	mov    edi,DWORD PTR ds:0xc00253d8
c00098d2:	e8 50 05 00 00       	call   c0009e27 <Phys::allocatePage()>
c00098d7:	68 01 04 00 00       	push   0x401
c00098dc:	57                   	push   edi
c00098dd:	50                   	push   eax
c00098de:	56                   	push   esi
c00098df:	e8 fc 24 00 00       	call   c000bde0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00098e4:	81 05 d8 53 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00253d8,0x1000
c00098ee:	43                   	inc    ebx
c00098ef:	83 c4 10             	add    esp,0x10
c00098f2:	39 dd                	cmp    ebp,ebx
c00098f4:	75 d0                	jne    c00098c6 <sbrk+0x3a>
c00098f6:	0f 20 d8             	mov    eax,cr3
c00098f9:	0f 22 d8             	mov    cr3,eax
c00098fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009900:	83 c4 1c             	add    esp,0x1c
c0009903:	5b                   	pop    ebx
c0009904:	5e                   	pop    esi
c0009905:	5f                   	pop    edi
c0009906:	5d                   	pop    ebp
c0009907:	c3                   	ret    
c0009908:	a1 d8 53 02 c0       	mov    eax,ds:0xc00253d8
c000990d:	eb f1                	jmp    c0009900 <sbrk+0x74>
c000990f:	83 ec 08             	sub    esp,0x8
c0009912:	53                   	push   ebx
c0009913:	68 44 27 02 c0       	push   0xc0022744
c0009918:	e8 42 31 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000991d:	83 c4 10             	add    esp,0x10
c0009920:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009925:	eb d9                	jmp    c0009900 <sbrk+0x74>
c0009927:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c000992d:	eb 8f                	jmp    c00098be <sbrk+0x32>

c000992f <mmap>:
c000992f:	83 ec 18             	sub    esp,0x18
c0009932:	68 36 27 02 c0       	push   0xc0022736
c0009937:	e8 c3 a9 00 00       	call   c00142ff <Krnl::panic(char const*)>
c000993c:	b8 00 00 00 00       	mov    eax,0x0
c0009941:	83 c4 1c             	add    esp,0x1c
c0009944:	c3                   	ret    

c0009945 <munmap>:
c0009945:	83 ec 18             	sub    esp,0x18
c0009948:	68 3b 27 02 c0       	push   0xc002273b
c000994d:	e8 ad a9 00 00       	call   c00142ff <Krnl::panic(char const*)>
c0009952:	b8 00 00 00 00       	mov    eax,0x0
c0009957:	83 c4 1c             	add    esp,0x1c
c000995a:	c3                   	ret    

c000995b <liballoc_lock()>:
c000995b:	fa                   	cli    
c000995c:	ff 05 28 76 02 c0    	inc    DWORD PTR ds:0xc0027628
c0009962:	b8 00 00 00 00       	mov    eax,0x0
c0009967:	c3                   	ret    

c0009968 <liballoc_unlock()>:
c0009968:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c000996d:	48                   	dec    eax
c000996e:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c0009973:	75 01                	jne    c0009976 <liballoc_unlock()+0xe>
c0009975:	fb                   	sti    
c0009976:	b8 00 00 00 00       	mov    eax,0x0
c000997b:	c3                   	ret    

c000997c <liballoc_alloc(int)>:
c000997c:	83 ec 10             	sub    esp,0x10
c000997f:	6a 01                	push   0x1
c0009981:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009985:	ff 35 90 62 02 c0    	push   DWORD PTR ds:0xc0026290
c000998b:	e8 52 25 00 00       	call   c000bee2 <VAS::allocatePages(int, int)>
c0009990:	83 c4 1c             	add    esp,0x1c
c0009993:	c3                   	ret    

c0009994 <liballoc_free(void*, int)>:
c0009994:	83 ec 14             	sub    esp,0x14
c0009997:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000999b:	ff 35 90 62 02 c0    	push   DWORD PTR ds:0xc0026290
c00099a1:	e8 e6 21 00 00       	call   c000bb8c <VAS::freeAllocatedPages(unsigned long)>
c00099a6:	b8 00 00 00 00       	mov    eax,0x0
c00099ab:	83 c4 1c             	add    esp,0x1c
c00099ae:	c3                   	ret    

c00099af <realloc>:
c00099af:	83 ec 14             	sub    esp,0x14
c00099b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ba:	e8 a1 7b ff ff       	call   c0001560 <dlrealloc>
c00099bf:	83 c4 1c             	add    esp,0x1c
c00099c2:	c3                   	ret    

c00099c3 <malloc>:
c00099c3:	83 ec 18             	sub    esp,0x18
c00099c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ca:	e8 54 76 ff ff       	call   c0001023 <dlmalloc>
c00099cf:	83 c4 1c             	add    esp,0x1c
c00099d2:	c3                   	ret    

c00099d3 <free>:
c00099d3:	83 ec 18             	sub    esp,0x18
c00099d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099da:	e8 e9 72 ff ff       	call   c0000cc8 <dlfree>
c00099df:	83 c4 1c             	add    esp,0x1c
c00099e2:	c3                   	ret    

c00099e3 <rfree>:
c00099e3:	83 ec 18             	sub    esp,0x18
c00099e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ea:	e8 d9 72 ff ff       	call   c0000cc8 <dlfree>
c00099ef:	83 c4 1c             	add    esp,0x1c
c00099f2:	c3                   	ret    

c00099f3 <calloc>:
c00099f3:	56                   	push   esi
c00099f4:	53                   	push   ebx
c00099f5:	83 ec 10             	sub    esp,0x10
c00099f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00099fc:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009a01:	53                   	push   ebx
c0009a02:	e8 bc ff ff ff       	call   c00099c3 <malloc>
c0009a07:	89 c6                	mov    esi,eax
c0009a09:	83 c4 0c             	add    esp,0xc
c0009a0c:	53                   	push   ebx
c0009a0d:	6a 00                	push   0x0
c0009a0f:	50                   	push   eax
c0009a10:	e8 6f 6c ff ff       	call   c0000684 <memset>
c0009a15:	89 f0                	mov    eax,esi
c0009a17:	83 c4 14             	add    esp,0x14
c0009a1a:	5b                   	pop    ebx
c0009a1b:	5e                   	pop    esi
c0009a1c:	c3                   	ret    

c0009a1d <Krnl::setBootMessage(char const*)>:
c0009a1d:	57                   	push   edi
c0009a1e:	56                   	push   esi
c0009a1f:	53                   	push   ebx
c0009a20:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009a26:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009a2d:	68 9e 00 00 00       	push   0x9e
c0009a32:	6a 00                	push   0x0
c0009a34:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009a38:	56                   	push   esi
c0009a39:	e8 46 6c ff ff       	call   c0000684 <memset>
c0009a3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009a41:	e8 5a 6c ff ff       	call   c00006a0 <strlen>
c0009a46:	ba 50 00 00 00       	mov    edx,0x50
c0009a4b:	83 c4 10             	add    esp,0x10
c0009a4e:	29 c2                	sub    edx,eax
c0009a50:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009a54:	d1 ea                	shr    edx,1
c0009a56:	84 c0                	test   al,al
c0009a58:	74 19                	je     c0009a73 <Krnl::setBootMessage(char const*)+0x56>
c0009a5a:	01 d2                	add    edx,edx
c0009a5c:	43                   	inc    ebx
c0009a5d:	01 f2                	add    edx,esi
c0009a5f:	80 cc 0f             	or     ah,0xf
c0009a62:	83 c2 02             	add    edx,0x2
c0009a65:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009a69:	43                   	inc    ebx
c0009a6a:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009a6f:	84 c0                	test   al,al
c0009a71:	75 ec                	jne    c0009a5f <Krnl::setBootMessage(char const*)+0x42>
c0009a73:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009a78:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009a7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009a7f:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009a85:	5b                   	pop    ebx
c0009a86:	5e                   	pop    esi
c0009a87:	5f                   	pop    edi
c0009a88:	c3                   	ret    

c0009a89 <kernel_main>:
c0009a89:	57                   	push   edi
c0009a8a:	bf f9 03 00 00       	mov    edi,0x3f9
c0009a8f:	56                   	push   esi
c0009a90:	89 fa                	mov    edx,edi
c0009a92:	53                   	push   ebx
c0009a93:	31 f6                	xor    esi,esi
c0009a95:	83 ec 2c             	sub    esp,0x2c
c0009a98:	89 f0                	mov    eax,esi
c0009a9a:	ee                   	out    dx,al
c0009a9b:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009aa0:	b0 80                	mov    al,0x80
c0009aa2:	89 da                	mov    edx,ebx
c0009aa4:	ee                   	out    dx,al
c0009aa5:	b1 03                	mov    cl,0x3
c0009aa7:	ba f8 03 00 00       	mov    edx,0x3f8
c0009aac:	88 c8                	mov    al,cl
c0009aae:	ee                   	out    dx,al
c0009aaf:	89 f0                	mov    eax,esi
c0009ab1:	89 fa                	mov    edx,edi
c0009ab3:	ee                   	out    dx,al
c0009ab4:	88 c8                	mov    al,cl
c0009ab6:	89 da                	mov    edx,ebx
c0009ab8:	ee                   	out    dx,al
c0009ab9:	b0 c7                	mov    al,0xc7
c0009abb:	ba fa 03 00 00       	mov    edx,0x3fa
c0009ac0:	ee                   	out    dx,al
c0009ac1:	b0 0b                	mov    al,0xb
c0009ac3:	ba fc 03 00 00       	mov    edx,0x3fc
c0009ac8:	ee                   	out    dx,al
c0009ac9:	68 74 27 02 c0       	push   0xc0022774
c0009ace:	e8 8c 2f 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0009ad3:	83 c4 10             	add    esp,0x10
c0009ad6:	f6 05 81 61 02 c0 08 	test   BYTE PTR ds:0xc0026181,0x8
c0009add:	0f 85 fd 00 00 00    	jne    c0009be0 <kernel_main+0x157>
c0009ae3:	e8 94 0a 00 00       	call   c000a57c <installVgaTextImplementation()>
c0009ae8:	0f b6 05 e0 53 02 c0 	movzx  eax,BYTE PTR ds:0xc00253e0
c0009aef:	84 c0                	test   al,al
c0009af1:	74 6c                	je     c0009b5f <kernel_main+0xd6>
c0009af3:	31 db                	xor    ebx,ebx
c0009af5:	bf 0a 00 00 00       	mov    edi,0xa
c0009afa:	be 05 00 00 00       	mov    esi,0x5
c0009aff:	31 c9                	xor    ecx,ecx
c0009b01:	eb 2a                	jmp    c0009b2d <kernel_main+0xa4>
c0009b03:	3c 0d                	cmp    al,0xd
c0009b05:	74 1a                	je     c0009b21 <kernel_main+0x98>
c0009b07:	3c 0a                	cmp    al,0xa
c0009b09:	74 40                	je     c0009b4b <kernel_main+0xc2>
c0009b0b:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009b0e:	80 cc 0e             	or     ah,0xe
c0009b11:	c1 e2 04             	shl    edx,0x4
c0009b14:	01 ca                	add    edx,ecx
c0009b16:	41                   	inc    ecx
c0009b17:	01 fa                	add    edx,edi
c0009b19:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009b21:	43                   	inc    ebx
c0009b22:	0f b6 83 e0 53 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffdac20]
c0009b29:	84 c0                	test   al,al
c0009b2b:	74 32                	je     c0009b5f <kernel_main+0xd6>
c0009b2d:	80 b9 16 54 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffdabea],0xdb
c0009b34:	75 cd                	jne    c0009b03 <kernel_main+0x7a>
c0009b36:	0f b6 91 15 54 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffdabeb]
c0009b3d:	83 e2 fe             	and    edx,0xfffffffe
c0009b40:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009b46:	75 bb                	jne    c0009b03 <kernel_main+0x7a>
c0009b48:	47                   	inc    edi
c0009b49:	eb b8                	jmp    c0009b03 <kernel_main+0x7a>
c0009b4b:	43                   	inc    ebx
c0009b4c:	46                   	inc    esi
c0009b4d:	31 c9                	xor    ecx,ecx
c0009b4f:	0f b6 83 e0 53 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffdac20]
c0009b56:	bf 0a 00 00 00       	mov    edi,0xa
c0009b5b:	84 c0                	test   al,al
c0009b5d:	75 ce                	jne    c0009b2d <kernel_main+0xa4>
c0009b5f:	83 ec 0c             	sub    esp,0xc
c0009b62:	68 ac 27 02 c0       	push   0xc00227ac
c0009b67:	e8 b1 fe ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009b6c:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009b71:	a3 80 61 02 c0       	mov    ds:0xc0026180,eax
c0009b76:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009b7b:	05 ff 0f 00 00       	add    eax,0xfff
c0009b80:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009b85:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b88:	e8 19 04 00 00       	call   c0009fa6 <Phys::physicalMemorySetup(unsigned int)>
c0009b8d:	e8 66 1d 00 00       	call   c000b8f8 <Virt::virtualMemorySetup()>
c0009b92:	58                   	pop    eax
c0009b93:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0009b97:	53                   	push   ebx
c0009b98:	e8 17 1e 00 00       	call   c000b9b4 <VAS::VAS()>
c0009b9d:	89 1d 90 62 02 c0    	mov    DWORD PTR ds:0xc0026290,ebx
c0009ba3:	e8 78 64 ff ff       	call   c0000020 <callGlobalConstructors>
c0009ba8:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c0009baf:	e8 0f fe ff ff       	call   c00099c3 <malloc>
c0009bb4:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bb7:	89 c6                	mov    esi,eax
c0009bb9:	e8 fc ef ff ff       	call   c0008bba <Computer::Computer()>
c0009bbe:	6a 00                	push   0x0
c0009bc0:	89 35 68 61 02 c0    	mov    DWORD PTR ds:0xc0026168,esi
c0009bc6:	6a 00                	push   0x0
c0009bc8:	6a 00                	push   0x0
c0009bca:	56                   	push   esi
c0009bcb:	e8 f6 f3 ff ff       	call   c0008fc6 <Computer::open(int, int, void*)>
c0009bd0:	83 c4 14             	add    esp,0x14
c0009bd3:	53                   	push   ebx
c0009bd4:	e8 8b 20 00 00       	call   c000bc64 <VAS::~VAS()>
c0009bd9:	83 c4 30             	add    esp,0x30
c0009bdc:	5b                   	pop    ebx
c0009bdd:	5e                   	pop    esi
c0009bde:	5f                   	pop    edi
c0009bdf:	c3                   	ret    
c0009be0:	83 ec 0c             	sub    esp,0xc
c0009be3:	68 8c 27 02 c0       	push   0xc002278c
c0009be8:	e8 30 fe ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009bed:	83 c4 10             	add    esp,0x10
c0009bf0:	e4 60                	in     al,0x60
c0009bf2:	84 c0                	test   al,al
c0009bf4:	74 fa                	je     c0009bf0 <kernel_main+0x167>
c0009bf6:	e4 60                	in     al,0x60
c0009bf8:	84 c0                	test   al,al
c0009bfa:	75 fa                	jne    c0009bf6 <kernel_main+0x16d>
c0009bfc:	e9 e2 fe ff ff       	jmp    c0009ae3 <kernel_main+0x5a>

c0009c01 <Phys::allocateDMA(unsigned long)>:
c0009c01:	55                   	push   ebp
c0009c02:	31 ed                	xor    ebp,ebp
c0009c04:	57                   	push   edi
c0009c05:	56                   	push   esi
c0009c06:	53                   	push   ebx
c0009c07:	31 db                	xor    ebx,ebx
c0009c09:	83 ec 28             	sub    esp,0x28
c0009c0c:	68 cb 27 02 c0       	push   0xc00227cb
c0009c11:	e8 49 2e 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0009c16:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009c1a:	83 c4 10             	add    esp,0x10
c0009c1d:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0009c23:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009c2b:	c1 ef 0c             	shr    edi,0xc
c0009c2e:	31 c0                	xor    eax,eax
c0009c30:	eb 19                	jmp    c0009c4b <Phys::allocateDMA(unsigned long)+0x4a>
c0009c32:	85 c0                	test   eax,eax
c0009c34:	75 06                	jne    c0009c3c <Phys::allocateDMA(unsigned long)+0x3b>
c0009c36:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009c3a:	89 dd                	mov    ebp,ebx
c0009c3c:	8d 70 01             	lea    esi,[eax+0x1]
c0009c3f:	39 f7                	cmp    edi,esi
c0009c41:	74 3f                	je     c0009c82 <Phys::allocateDMA(unsigned long)+0x81>
c0009c43:	89 f0                	mov    eax,esi
c0009c45:	43                   	inc    ebx
c0009c46:	83 fb 0f             	cmp    ebx,0xf
c0009c49:	7f 11                	jg     c0009c5c <Phys::allocateDMA(unsigned long)+0x5b>
c0009c4b:	80 bb 9c 61 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9e64],0x0
c0009c52:	74 de                	je     c0009c32 <Phys::allocateDMA(unsigned long)+0x31>
c0009c54:	31 c0                	xor    eax,eax
c0009c56:	43                   	inc    ebx
c0009c57:	83 fb 0f             	cmp    ebx,0xf
c0009c5a:	7e ef                	jle    c0009c4b <Phys::allocateDMA(unsigned long)+0x4a>
c0009c5c:	83 ec 0c             	sub    esp,0xc
c0009c5f:	68 ff 27 02 c0       	push   0xc00227ff
c0009c64:	e8 f6 2d 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0009c69:	c7 04 24 bc 28 02 c0 	mov    DWORD PTR [esp],0xc00228bc
c0009c70:	e8 8a a6 00 00       	call   c00142ff <Krnl::panic(char const*)>
c0009c75:	83 c4 10             	add    esp,0x10
c0009c78:	31 c0                	xor    eax,eax
c0009c7a:	83 c4 1c             	add    esp,0x1c
c0009c7d:	5b                   	pop    ebx
c0009c7e:	5e                   	pop    esi
c0009c7f:	5f                   	pop    edi
c0009c80:	5d                   	pop    ebp
c0009c81:	c3                   	ret    
c0009c82:	89 e9                	mov    ecx,ebp
c0009c84:	c1 f9 04             	sar    ecx,0x4
c0009c87:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009c8b:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0009c8f:	89 ca                	mov    edx,ecx
c0009c91:	4a                   	dec    edx
c0009c92:	79 03                	jns    c0009c97 <Phys::allocateDMA(unsigned long)+0x96>
c0009c94:	8d 51 0e             	lea    edx,[ecx+0xe]
c0009c97:	c1 fa 04             	sar    edx,0x4
c0009c9a:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0009c9e:	74 08                	je     c0009ca8 <Phys::allocateDMA(unsigned long)+0xa7>
c0009ca0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009ca4:	31 c0                	xor    eax,eax
c0009ca6:	eb ae                	jmp    c0009c56 <Phys::allocateDMA(unsigned long)+0x55>
c0009ca8:	85 f6                	test   esi,esi
c0009caa:	74 15                	je     c0009cc1 <Phys::allocateDMA(unsigned long)+0xc0>
c0009cac:	8d 95 9c 61 02 c0    	lea    edx,[ebp-0x3ffd9e64]
c0009cb2:	8d 84 05 9d 61 02 c0 	lea    eax,[ebp+eax*1-0x3ffd9e63]
c0009cb9:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0009cbc:	42                   	inc    edx
c0009cbd:	39 d0                	cmp    eax,edx
c0009cbf:	75 f8                	jne    c0009cb9 <Phys::allocateDMA(unsigned long)+0xb8>
c0009cc1:	83 ec 0c             	sub    esp,0xc
c0009cc4:	01 3d 94 61 02 c0    	add    DWORD PTR ds:0xc0026194,edi
c0009cca:	68 e4 27 02 c0       	push   0xc00227e4
c0009ccf:	e8 8b 2d 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0009cd4:	83 c4 10             	add    esp,0x10
c0009cd7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009cdb:	85 c0                	test   eax,eax
c0009cdd:	74 23                	je     c0009d02 <Phys::allocateDMA(unsigned long)+0x101>
c0009cdf:	83 ec 0c             	sub    esp,0xc
c0009ce2:	68 fb 27 02 c0       	push   0xc00227fb
c0009ce7:	e8 73 2d 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0009cec:	c7 04 24 bc 28 02 c0 	mov    DWORD PTR [esp],0xc00228bc
c0009cf3:	e8 07 a6 00 00       	call   c00142ff <Krnl::panic(char const*)>
c0009cf8:	83 c4 10             	add    esp,0x10
c0009cfb:	89 f0                	mov    eax,esi
c0009cfd:	e9 43 ff ff ff       	jmp    c0009c45 <Phys::allocateDMA(unsigned long)+0x44>
c0009d02:	c1 e5 0c             	shl    ebp,0xc
c0009d05:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0009d0b:	e9 6a ff ff ff       	jmp    c0009c7a <Phys::allocateDMA(unsigned long)+0x79>

c0009d10 <Phys::freeDMA(unsigned long, unsigned long)>:
c0009d10:	83 ec 18             	sub    esp,0x18
c0009d13:	68 03 28 02 c0       	push   0xc0022803
c0009d18:	e8 42 2d 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0009d1d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009d21:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0009d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009d2b:	c1 ea 0c             	shr    edx,0xc
c0009d2e:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0009d33:	29 15 94 61 02 c0    	sub    DWORD PTR ds:0xc0026194,edx
c0009d39:	c1 e8 0c             	shr    eax,0xc
c0009d3c:	83 c4 10             	add    esp,0x10
c0009d3f:	85 d2                	test   edx,edx
c0009d41:	74 0f                	je     c0009d52 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c0009d43:	05 9c 61 02 c0       	add    eax,0xc002619c
c0009d48:	01 c2                	add    edx,eax
c0009d4a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0009d4d:	40                   	inc    eax
c0009d4e:	39 d0                	cmp    eax,edx
c0009d50:	75 f8                	jne    c0009d4a <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0009d52:	83 c4 0c             	add    esp,0xc
c0009d55:	c3                   	ret    

c0009d56 <Phys::setPageState(unsigned long, bool)>:
c0009d56:	56                   	push   esi
c0009d57:	ba 01 00 00 00       	mov    edx,0x1
c0009d5c:	53                   	push   ebx
c0009d5d:	8b 35 24 55 02 c0    	mov    esi,DWORD PTR ds:0xc0025524
c0009d63:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009d67:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009d6b:	89 c8                	mov    eax,ecx
c0009d6d:	83 e1 07             	and    ecx,0x7
c0009d70:	c1 e8 03             	shr    eax,0x3
c0009d73:	d3 e3                	shl    ebx,cl
c0009d75:	01 c6                	add    esi,eax
c0009d77:	d3 e2                	shl    edx,cl
c0009d79:	f7 d2                	not    edx
c0009d7b:	20 16                	and    BYTE PTR [esi],dl
c0009d7d:	03 05 24 55 02 c0    	add    eax,DWORD PTR ds:0xc0025524
c0009d83:	08 18                	or     BYTE PTR [eax],bl
c0009d85:	5b                   	pop    ebx
c0009d86:	5e                   	pop    esi
c0009d87:	c3                   	ret    

c0009d88 <Phys::getPageState(unsigned long)>:
c0009d88:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009d8c:	8b 15 24 55 02 c0    	mov    edx,DWORD PTR ds:0xc0025524
c0009d92:	89 c8                	mov    eax,ecx
c0009d94:	83 e1 07             	and    ecx,0x7
c0009d97:	c1 e8 03             	shr    eax,0x3
c0009d9a:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0009d9e:	d3 f8                	sar    eax,cl
c0009da0:	83 e0 01             	and    eax,0x1
c0009da3:	c3                   	ret    

c0009da4 <Phys::freePage(unsigned long)>:
c0009da4:	53                   	push   ebx
c0009da5:	83 ec 10             	sub    esp,0x10
c0009da8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009dac:	53                   	push   ebx
c0009dad:	68 19 28 02 c0       	push   0xc0022819
c0009db2:	e8 a8 2c 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0009db7:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c0009dbd:	83 c4 10             	add    esp,0x10
c0009dc0:	3d ff ff 00 00       	cmp    eax,0xffff
c0009dc5:	76 3d                	jbe    c0009e04 <Phys::freePage(unsigned long)+0x60>
c0009dc7:	83 ec 0c             	sub    esp,0xc
c0009dca:	c1 eb 0c             	shr    ebx,0xc
c0009dcd:	53                   	push   ebx
c0009dce:	e8 b5 ff ff ff       	call   c0009d88 <Phys::getPageState(unsigned long)>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	84 c0                	test   al,al
c0009dd8:	74 19                	je     c0009df3 <Phys::freePage(unsigned long)+0x4f>
c0009dda:	83 ec 08             	sub    esp,0x8
c0009ddd:	ff 0d 94 61 02 c0    	dec    DWORD PTR ds:0xc0026194
c0009de3:	6a 00                	push   0x0
c0009de5:	53                   	push   ebx
c0009de6:	e8 6b ff ff ff       	call   c0009d56 <Phys::setPageState(unsigned long, bool)>
c0009deb:	83 c4 10             	add    esp,0x10
c0009dee:	83 c4 08             	add    esp,0x8
c0009df1:	5b                   	pop    ebx
c0009df2:	c3                   	ret    
c0009df3:	c7 44 24 10 43 28 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022843
c0009dfb:	83 c4 08             	add    esp,0x8
c0009dfe:	5b                   	pop    ebx
c0009dff:	e9 fb a4 00 00       	jmp    c00142ff <Krnl::panic(char const*)>
c0009e04:	83 ec 08             	sub    esp,0x8
c0009e07:	53                   	push   ebx
c0009e08:	68 2c 28 02 c0       	push   0xc002282c
c0009e0d:	e8 4d 2c 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0009e12:	58                   	pop    eax
c0009e13:	5a                   	pop    edx
c0009e14:	68 00 10 00 00       	push   0x1000
c0009e19:	53                   	push   ebx
c0009e1a:	e8 f1 fe ff ff       	call   c0009d10 <Phys::freeDMA(unsigned long, unsigned long)>
c0009e1f:	83 c4 10             	add    esp,0x10
c0009e22:	83 c4 08             	add    esp,0x8
c0009e25:	5b                   	pop    ebx
c0009e26:	c3                   	ret    

c0009e27 <Phys::allocatePage()>:
c0009e27:	56                   	push   esi
c0009e28:	53                   	push   ebx
c0009e29:	83 ec 14             	sub    esp,0x14
c0009e2c:	8b 35 88 61 02 c0    	mov    esi,DWORD PTR ds:0xc0026188
c0009e32:	89 f3                	mov    ebx,esi
c0009e34:	eb 0a                	jmp    c0009e40 <Phys::allocatePage()+0x19>
c0009e36:	89 1d 88 61 02 c0    	mov    DWORD PTR ds:0xc0026188,ebx
c0009e3c:	39 de                	cmp    esi,ebx
c0009e3e:	74 24                	je     c0009e64 <Phys::allocatePage()+0x3d>
c0009e40:	53                   	push   ebx
c0009e41:	e8 42 ff ff ff       	call   c0009d88 <Phys::getPageState(unsigned long)>
c0009e46:	5a                   	pop    edx
c0009e47:	84 c0                	test   al,al
c0009e49:	74 69                	je     c0009eb4 <Phys::allocatePage()+0x8d>
c0009e4b:	43                   	inc    ebx
c0009e4c:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009e52:	75 e2                	jne    c0009e36 <Phys::allocatePage()+0xf>
c0009e54:	31 db                	xor    ebx,ebx
c0009e56:	c7 05 88 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026188,0x0
c0009e60:	39 de                	cmp    esi,ebx
c0009e62:	75 dc                	jne    c0009e40 <Phys::allocatePage()+0x19>
c0009e64:	83 ec 0c             	sub    esp,0xc
c0009e67:	80 35 ac 61 02 c0 01 	xor    BYTE PTR ds:0xc00261ac,0x1
c0009e6e:	68 e4 28 02 c0       	push   0xc00228e4
c0009e73:	e8 e7 2b 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0009e78:	58                   	pop    eax
c0009e79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009e7e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009e81:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0009e87:	e8 62 28 00 00       	call   c000c6ee <VAS::scanForEviction()>
c0009e8c:	83 c4 10             	add    esp,0x10
c0009e8f:	85 c0                	test   eax,eax
c0009e91:	75 62                	jne    c0009ef5 <Phys::allocatePage()+0xce>
c0009e93:	83 ec 0c             	sub    esp,0xc
c0009e96:	68 08 29 02 c0       	push   0xc0022908
c0009e9b:	e8 5f a4 00 00       	call   c00142ff <Krnl::panic(char const*)>
c0009ea0:	83 c4 10             	add    esp,0x10
c0009ea3:	8b 1d 88 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026188
c0009ea9:	53                   	push   ebx
c0009eaa:	e8 d9 fe ff ff       	call   c0009d88 <Phys::getPageState(unsigned long)>
c0009eaf:	5a                   	pop    edx
c0009eb0:	84 c0                	test   al,al
c0009eb2:	75 97                	jne    c0009e4b <Phys::allocatePage()+0x24>
c0009eb4:	6a 01                	push   0x1
c0009eb6:	53                   	push   ebx
c0009eb7:	e8 9a fe ff ff       	call   c0009d56 <Phys::setPageState(unsigned long, bool)>
c0009ebc:	5a                   	pop    edx
c0009ebd:	a1 94 61 02 c0       	mov    eax,ds:0xc0026194
c0009ec2:	59                   	pop    ecx
c0009ec3:	40                   	inc    eax
c0009ec4:	8b 15 88 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026188
c0009eca:	a3 94 61 02 c0       	mov    ds:0xc0026194,eax
c0009ecf:	c1 e2 0c             	shl    edx,0xc
c0009ed2:	52                   	push   edx
c0009ed3:	ff 35 98 61 02 c0    	push   DWORD PTR ds:0xc0026198
c0009ed9:	50                   	push   eax
c0009eda:	68 59 28 02 c0       	push   0xc0022859
c0009edf:	e8 7b 2b 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0009ee4:	a1 88 61 02 c0       	mov    eax,ds:0xc0026188
c0009ee9:	83 c4 10             	add    esp,0x10
c0009eec:	c1 e0 0c             	shl    eax,0xc
c0009eef:	83 c4 14             	add    esp,0x14
c0009ef2:	5b                   	pop    ebx
c0009ef3:	5e                   	pop    esi
c0009ef4:	c3                   	ret    
c0009ef5:	83 ec 08             	sub    esp,0x8
c0009ef8:	89 c2                	mov    edx,eax
c0009efa:	6a 01                	push   0x1
c0009efc:	c1 ea 0c             	shr    edx,0xc
c0009eff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f03:	52                   	push   edx
c0009f04:	e8 4d fe ff ff       	call   c0009d56 <Phys::setPageState(unsigned long, bool)>
c0009f09:	83 c4 10             	add    esp,0x10
c0009f0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f10:	eb dd                	jmp    c0009eef <Phys::allocatePage()+0xc8>

c0009f12 <Phys::allocateContiguousPages(int)>:
c0009f12:	57                   	push   edi
c0009f13:	56                   	push   esi
c0009f14:	53                   	push   ebx
c0009f15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009f19:	fa                   	cli    
c0009f1a:	ff 05 28 76 02 c0    	inc    DWORD PTR ds:0xc0027628
c0009f20:	31 db                	xor    ebx,ebx
c0009f22:	85 db                	test   ebx,ebx
c0009f24:	75 11                	jne    c0009f37 <Phys::allocateContiguousPages(int)+0x25>
c0009f26:	e8 fc fe ff ff       	call   c0009e27 <Phys::allocatePage()>
c0009f2b:	83 fe 01             	cmp    esi,0x1
c0009f2e:	89 c7                	mov    edi,eax
c0009f30:	74 21                	je     c0009f53 <Phys::allocateContiguousPages(int)+0x41>
c0009f32:	bb 01 00 00 00       	mov    ebx,0x1
c0009f37:	e8 eb fe ff ff       	call   c0009e27 <Phys::allocatePage()>
c0009f3c:	89 da                	mov    edx,ebx
c0009f3e:	c1 e2 0c             	shl    edx,0xc
c0009f41:	01 fa                	add    edx,edi
c0009f43:	39 c2                	cmp    edx,eax
c0009f45:	74 20                	je     c0009f67 <Phys::allocateContiguousPages(int)+0x55>
c0009f47:	bb 01 00 00 00       	mov    ebx,0x1
c0009f4c:	89 c7                	mov    edi,eax
c0009f4e:	83 fe 01             	cmp    esi,0x1
c0009f51:	75 e4                	jne    c0009f37 <Phys::allocateContiguousPages(int)+0x25>
c0009f53:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c0009f58:	48                   	dec    eax
c0009f59:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c0009f5e:	75 01                	jne    c0009f61 <Phys::allocateContiguousPages(int)+0x4f>
c0009f60:	fb                   	sti    
c0009f61:	89 f8                	mov    eax,edi
c0009f63:	5b                   	pop    ebx
c0009f64:	5e                   	pop    esi
c0009f65:	5f                   	pop    edi
c0009f66:	c3                   	ret    
c0009f67:	43                   	inc    ebx
c0009f68:	39 f3                	cmp    ebx,esi
c0009f6a:	75 b6                	jne    c0009f22 <Phys::allocateContiguousPages(int)+0x10>
c0009f6c:	eb e5                	jmp    c0009f53 <Phys::allocateContiguousPages(int)+0x41>

c0009f6e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0009f6e:	56                   	push   esi
c0009f6f:	53                   	push   ebx
c0009f70:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009f74:	39 1d 8c 61 02 c0    	cmp    DWORD PTR ds:0xc002618c,ebx
c0009f7a:	73 06                	jae    c0009f82 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0009f7c:	89 1d 8c 61 02 c0    	mov    DWORD PTR ds:0xc002618c,ebx
c0009f82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f86:	c1 eb 0c             	shr    ebx,0xc
c0009f89:	c1 e8 0c             	shr    eax,0xc
c0009f8c:	39 d8                	cmp    eax,ebx
c0009f8e:	73 13                	jae    c0009fa3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0009f90:	6a 00                	push   0x0
c0009f92:	8d 70 01             	lea    esi,[eax+0x1]
c0009f95:	50                   	push   eax
c0009f96:	e8 bb fd ff ff       	call   c0009d56 <Phys::setPageState(unsigned long, bool)>
c0009f9b:	5a                   	pop    edx
c0009f9c:	89 f0                	mov    eax,esi
c0009f9e:	59                   	pop    ecx
c0009f9f:	39 f3                	cmp    ebx,esi
c0009fa1:	75 ed                	jne    c0009f90 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0009fa3:	5b                   	pop    ebx
c0009fa4:	5e                   	pop    esi
c0009fa5:	c3                   	ret    

c0009fa6 <Phys::physicalMemorySetup(unsigned int)>:
c0009fa6:	55                   	push   ebp
c0009fa7:	57                   	push   edi
c0009fa8:	56                   	push   esi
c0009fa9:	53                   	push   ebx
c0009faa:	31 db                	xor    ebx,ebx
c0009fac:	83 ec 40             	sub    esp,0x40
c0009faf:	6a 10                	push   0x10
c0009fb1:	6a 00                	push   0x0
c0009fb3:	68 9c 61 02 c0       	push   0xc002619c
c0009fb8:	e8 c7 66 ff ff       	call   c0000684 <memset>
c0009fbd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0009fc1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009fc6:	05 00 10 00 00       	add    eax,0x1000
c0009fcb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009fcf:	5a                   	pop    edx
c0009fd0:	59                   	pop    ecx
c0009fd1:	50                   	push   eax
c0009fd2:	68 77 28 02 c0       	push   0xc0022877
c0009fd7:	e8 83 2a 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0009fdc:	83 c4 10             	add    esp,0x10
c0009fdf:	83 ec 08             	sub    esp,0x8
c0009fe2:	6a 01                	push   0x1
c0009fe4:	53                   	push   ebx
c0009fe5:	43                   	inc    ebx
c0009fe6:	e8 6b fd ff ff       	call   c0009d56 <Phys::setPageState(unsigned long, bool)>
c0009feb:	83 c4 10             	add    esp,0x10
c0009fee:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009ff4:	75 e9                	jne    c0009fdf <Phys::physicalMemorySetup(unsigned int)+0x39>
c0009ff6:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0009ffd:	66 85 c0             	test   ax,ax
c000a000:	0f 84 8e 01 00 00    	je     c000a194 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a006:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a00a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a012:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a016:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a01b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a01f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a027:	eb 15                	jmp    c000a03e <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a029:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a02d:	83 c3 18             	add    ebx,0x18
c000a030:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a034:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a038:	0f 84 66 01 00 00    	je     c000a1a4 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a03e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a041:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a044:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a047:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a04b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a04f:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a051:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a054:	01 f0                	add    eax,esi
c000a056:	55                   	push   ebp
c000a057:	11 fa                	adc    edx,edi
c000a059:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a05d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a061:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a065:	56                   	push   esi
c000a066:	68 38 29 02 c0       	push   0xc0022938
c000a06b:	e8 ef 29 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000a070:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a074:	83 c4 10             	add    esp,0x10
c000a077:	09 f8                	or     eax,edi
c000a079:	0f 85 25 01 00 00    	jne    c000a1a4 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a07f:	4d                   	dec    ebp
c000a080:	75 a7                	jne    c000a029 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a082:	ba 00 00 08 00       	mov    edx,0x80000
c000a087:	89 c1                	mov    ecx,eax
c000a089:	39 f2                	cmp    edx,esi
c000a08b:	19 f9                	sbb    ecx,edi
c000a08d:	0f 82 a7 00 00 00    	jb     c000a13a <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a093:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a097:	89 c1                	mov    ecx,eax
c000a099:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a09d:	0f 83 97 00 00 00    	jae    c000a13a <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a0a3:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a0a8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a0ac:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a0b0:	39 fa                	cmp    edx,edi
c000a0b2:	19 e8                	sbb    eax,ebp
c000a0b4:	0f 82 a5 01 00 00    	jb     c000a25f <Phys::physicalMemorySetup(unsigned int)+0x2b9>
c000a0ba:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a0be:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a0c2:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a0c8:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a0cd:	83 d5 ff             	adc    ebp,0xffffffff
c000a0d0:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a0d4:	31 c0                	xor    eax,eax
c000a0d6:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a0da:	39 fa                	cmp    edx,edi
c000a0dc:	89 c1                	mov    ecx,eax
c000a0de:	19 e9                	sbb    ecx,ebp
c000a0e0:	0f 83 43 ff ff ff    	jae    c000a029 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a0e6:	be 00 00 08 00       	mov    esi,0x80000
c000a0eb:	57                   	push   edi
c000a0ec:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a0f0:	57                   	push   edi
c000a0f1:	56                   	push   esi
c000a0f2:	68 5c 29 02 c0       	push   0xc002295c
c000a0f7:	e8 63 29 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000a0fc:	5d                   	pop    ebp
c000a0fd:	58                   	pop    eax
c000a0fe:	57                   	push   edi
c000a0ff:	56                   	push   esi
c000a100:	e8 69 fe ff ff       	call   c0009f6e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a105:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a109:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a10d:	83 c4 0c             	add    esp,0xc
c000a110:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a114:	03 05 98 61 02 c0    	add    eax,DWORD PTR ds:0xc0026198
c000a11a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a121:	a3 98 61 02 c0       	mov    ds:0xc0026198,eax
c000a126:	52                   	push   edx
c000a127:	50                   	push   eax
c000a128:	68 9d 28 02 c0       	push   0xc002289d
c000a12d:	e8 2d 29 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000a132:	83 c4 10             	add    esp,0x10
c000a135:	e9 ef fe ff ff       	jmp    c000a029 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a13a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a13e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a142:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a146:	39 ea                	cmp    edx,ebp
c000a148:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a14c:	0f 82 d7 fe ff ff    	jb     c000a029 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a152:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a157:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a15b:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a15f:	0f 83 c4 fe ff ff    	jae    c000a029 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a165:	39 ee                	cmp    esi,ebp
c000a167:	89 f8                	mov    eax,edi
c000a169:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a16d:	0f 83 78 ff ff ff    	jae    c000a0eb <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a173:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a177:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a17b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a17f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a183:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a187:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18f:	e9 57 ff ff ff       	jmp    c000a0eb <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a194:	83 ec 0c             	sub    esp,0xc
c000a197:	68 8f 28 02 c0       	push   0xc002288f
c000a19c:	e8 5e a1 00 00       	call   c00142ff <Krnl::panic(char const*)>
c000a1a1:	83 c4 10             	add    esp,0x10
c000a1a4:	83 ec 08             	sub    esp,0x8
c000a1a7:	6a 00                	push   0x0
c000a1a9:	6a 05                	push   0x5
c000a1ab:	e8 a6 fb ff ff       	call   c0009d56 <Phys::setPageState(unsigned long, bool)>
c000a1b0:	58                   	pop    eax
c000a1b1:	5a                   	pop    edx
c000a1b2:	6a 00                	push   0x0
c000a1b4:	6a 06                	push   0x6
c000a1b6:	e8 9b fb ff ff       	call   c0009d56 <Phys::setPageState(unsigned long, bool)>
c000a1bb:	59                   	pop    ecx
c000a1bc:	5b                   	pop    ebx
c000a1bd:	bb 60 00 00 00       	mov    ebx,0x60
c000a1c2:	6a 00                	push   0x0
c000a1c4:	6a 07                	push   0x7
c000a1c6:	e8 8b fb ff ff       	call   c0009d56 <Phys::setPageState(unsigned long, bool)>
c000a1cb:	83 05 98 61 02 c0 03 	add    DWORD PTR ds:0xc0026198,0x3
c000a1d2:	83 c4 10             	add    esp,0x10
c000a1d5:	83 ec 08             	sub    esp,0x8
c000a1d8:	6a 00                	push   0x0
c000a1da:	53                   	push   ebx
c000a1db:	43                   	inc    ebx
c000a1dc:	e8 75 fb ff ff       	call   c0009d56 <Phys::setPageState(unsigned long, bool)>
c000a1e1:	83 c4 10             	add    esp,0x10
c000a1e4:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a1ea:	75 e9                	jne    c000a1d5 <Phys::physicalMemorySetup(unsigned int)+0x22f>
c000a1ec:	a1 98 61 02 c0       	mov    eax,ds:0xc0026198
c000a1f1:	bb 40 01 00 00       	mov    ebx,0x140
c000a1f6:	83 c0 20             	add    eax,0x20
c000a1f9:	a3 98 61 02 c0       	mov    ds:0xc0026198,eax
c000a1fe:	eb 22                	jmp    c000a222 <Phys::physicalMemorySetup(unsigned int)+0x27c>
c000a200:	83 ec 08             	sub    esp,0x8
c000a203:	6a 00                	push   0x0
c000a205:	53                   	push   ebx
c000a206:	43                   	inc    ebx
c000a207:	e8 4a fb ff ff       	call   c0009d56 <Phys::setPageState(unsigned long, bool)>
c000a20c:	a1 98 61 02 c0       	mov    eax,ds:0xc0026198
c000a211:	83 c4 10             	add    esp,0x10
c000a214:	40                   	inc    eax
c000a215:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a21b:	a3 98 61 02 c0       	mov    ds:0xc0026198,eax
c000a220:	74 07                	je     c000a229 <Phys::physicalMemorySetup(unsigned int)+0x283>
c000a222:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a227:	7e d7                	jle    c000a200 <Phys::physicalMemorySetup(unsigned int)+0x25a>
c000a229:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a22e:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a233:	7f 22                	jg     c000a257 <Phys::physicalMemorySetup(unsigned int)+0x2b1>
c000a235:	83 ec 08             	sub    esp,0x8
c000a238:	6a 00                	push   0x0
c000a23a:	53                   	push   ebx
c000a23b:	43                   	inc    ebx
c000a23c:	e8 15 fb ff ff       	call   c0009d56 <Phys::setPageState(unsigned long, bool)>
c000a241:	a1 98 61 02 c0       	mov    eax,ds:0xc0026198
c000a246:	83 c4 10             	add    esp,0x10
c000a249:	40                   	inc    eax
c000a24a:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a250:	a3 98 61 02 c0       	mov    ds:0xc0026198,eax
c000a255:	75 d7                	jne    c000a22e <Phys::physicalMemorySetup(unsigned int)+0x288>
c000a257:	83 c4 3c             	add    esp,0x3c
c000a25a:	5b                   	pop    ebx
c000a25b:	5e                   	pop    esi
c000a25c:	5f                   	pop    edi
c000a25d:	5d                   	pop    ebp
c000a25e:	c3                   	ret    
c000a25f:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a267:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a26f:	e9 46 fe ff ff       	jmp    c000a0ba <Phys::physicalMemorySetup(unsigned int)+0x114>

c000a274 <Pipe::isAtty()>:
c000a274:	31 c0                	xor    eax,eax
c000a276:	c3                   	ret    
c000a277:	90                   	nop

c000a278 <Pipe::~Pipe()>:
c000a278:	83 ec 0c             	sub    esp,0xc
c000a27b:	ba c8 29 02 c0       	mov    edx,0xc00229c8
c000a280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a284:	89 10                	mov    DWORD PTR [eax],edx
c000a286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a28a:	83 ec 0c             	sub    esp,0xc
c000a28d:	50                   	push   eax
c000a28e:	e8 45 12 00 00       	call   c000b4d8 <UnixFile::~UnixFile()>
c000a293:	83 c4 10             	add    esp,0x10
c000a296:	90                   	nop
c000a297:	83 c4 0c             	add    esp,0xc
c000a29a:	c3                   	ret    
c000a29b:	90                   	nop

c000a29c <Pipe::~Pipe()>:
c000a29c:	83 ec 0c             	sub    esp,0xc
c000a29f:	83 ec 0c             	sub    esp,0xc
c000a2a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a6:	e8 cd ff ff ff       	call   c000a278 <Pipe::~Pipe()>
c000a2ab:	83 c4 10             	add    esp,0x10
c000a2ae:	83 ec 08             	sub    esp,0x8
c000a2b1:	6a 20                	push   0x20
c000a2b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b7:	e8 c2 26 00 00       	call   c000c97e <operator delete(void*, unsigned long)>
c000a2bc:	83 c4 10             	add    esp,0x10
c000a2bf:	83 c4 0c             	add    esp,0xc
c000a2c2:	c3                   	ret    
c000a2c3:	90                   	nop

c000a2c4 <Pipe::read(unsigned long long, void*, int*)>:
c000a2c4:	55                   	push   ebp
c000a2c5:	57                   	push   edi
c000a2c6:	56                   	push   esi
c000a2c7:	53                   	push   ebx
c000a2c8:	83 ec 1c             	sub    esp,0x1c
c000a2cb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a2cf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a2d3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a2d7:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a2da:	89 c8                	mov    eax,ecx
c000a2dc:	99                   	cdq    
c000a2dd:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a2e1:	74 24                	je     c000a307 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a2e3:	39 f9                	cmp    ecx,edi
c000a2e5:	89 d1                	mov    ecx,edx
c000a2e7:	19 f1                	sbb    ecx,esi
c000a2e9:	73 1c                	jae    c000a307 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a2eb:	fa                   	cli    
c000a2ec:	ff 05 28 76 02 c0    	inc    DWORD PTR ds:0xc0027628
c000a2f2:	e8 d9 db 00 00       	call   c0017ed0 <schedule()>
c000a2f7:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c000a2fc:	48                   	dec    eax
c000a2fd:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c000a302:	75 d3                	jne    c000a2d7 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a304:	fb                   	sti    
c000a305:	eb d0                	jmp    c000a2d7 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a307:	39 f8                	cmp    eax,edi
c000a309:	89 d1                	mov    ecx,edx
c000a30b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a30e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a312:	19 f1                	sbb    ecx,esi
c000a314:	73 07                	jae    c000a31d <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a316:	89 04 24             	mov    DWORD PTR [esp],eax
c000a319:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a31d:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a320:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a323:	29 f7                	sub    edi,esi
c000a325:	89 f8                	mov    eax,edi
c000a327:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a32b:	99                   	cdq    
c000a32c:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a32f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a333:	19 d0                	sbb    eax,edx
c000a335:	73 07                	jae    c000a33e <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a33a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a33e:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a341:	89 ea                	mov    edx,ebp
c000a343:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a347:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a34c:	74 0d                	je     c000a35b <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a34e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a351:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a355:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a359:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a35b:	85 d2                	test   edx,edx
c000a35d:	74 11                	je     c000a370 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a35f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a363:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a366:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a36a:	89 d1                	mov    ecx,edx
c000a36c:	89 c7                	mov    edi,eax
c000a36e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a370:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a373:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a376:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a379:	99                   	cdq    
c000a37a:	89 f7                	mov    edi,esi
c000a37c:	03 04 24             	add    eax,DWORD PTR [esp]
c000a37f:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a383:	c1 ff 1f             	sar    edi,0x1f
c000a386:	57                   	push   edi
c000a387:	56                   	push   esi
c000a388:	52                   	push   edx
c000a389:	50                   	push   eax
c000a38a:	e8 15 6c 01 00       	call   c0020fa4 <__umoddi3>
c000a38f:	83 c4 10             	add    esp,0x10
c000a392:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a395:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a39a:	75 10                	jne    c000a3ac <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a39c:	83 ec 0c             	sub    esp,0xc
c000a39f:	68 85 29 02 c0       	push   0xc0022985
c000a3a4:	e8 56 9f 00 00       	call   c00142ff <Krnl::panic(char const*)>
c000a3a9:	83 c4 10             	add    esp,0x10
c000a3ac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a3b0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a3b3:	89 10                	mov    DWORD PTR [eax],edx
c000a3b5:	83 c4 1c             	add    esp,0x1c
c000a3b8:	31 c0                	xor    eax,eax
c000a3ba:	5b                   	pop    ebx
c000a3bb:	5e                   	pop    esi
c000a3bc:	5f                   	pop    edi
c000a3bd:	5d                   	pop    ebp
c000a3be:	c3                   	ret    
c000a3bf:	90                   	nop

c000a3c0 <Pipe::write(unsigned long long, void*, int*)>:
c000a3c0:	55                   	push   ebp
c000a3c1:	57                   	push   edi
c000a3c2:	56                   	push   esi
c000a3c3:	53                   	push   ebx
c000a3c4:	83 ec 1c             	sub    esp,0x1c
c000a3c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a3cb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a3cf:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a3d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a3d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3d9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a3dd:	89 d8                	mov    eax,ebx
c000a3df:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a3e2:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a3e6:	89 d6                	mov    esi,edx
c000a3e8:	89 d7                	mov    edi,edx
c000a3ea:	c1 ff 1f             	sar    edi,0x1f
c000a3ed:	03 34 24             	add    esi,DWORD PTR [esp]
c000a3f0:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a3f4:	c1 f8 1f             	sar    eax,0x1f
c000a3f7:	39 f3                	cmp    ebx,esi
c000a3f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a3fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a401:	19 f8                	sbb    eax,edi
c000a403:	b8 01 00 00 00       	mov    eax,0x1
c000a408:	72 6e                	jb     c000a478 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a40a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a40d:	01 d0                	add    eax,edx
c000a40f:	99                   	cdq    
c000a410:	f7 fb                	idiv   ebx
c000a412:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a416:	29 d3                	sub    ebx,edx
c000a418:	89 d7                	mov    edi,edx
c000a41a:	89 de                	mov    esi,ebx
c000a41c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a41f:	c1 fb 1f             	sar    ebx,0x1f
c000a422:	39 f2                	cmp    edx,esi
c000a424:	19 d8                	sbb    eax,ebx
c000a426:	b8 00 00 00 00       	mov    eax,0x0
c000a42b:	72 04                	jb     c000a431 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a42d:	89 d0                	mov    eax,edx
c000a42f:	29 f0                	sub    eax,esi
c000a431:	89 d3                	mov    ebx,edx
c000a433:	29 c3                	sub    ebx,eax
c000a435:	74 0b                	je     c000a442 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a437:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a43a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a43e:	89 d9                	mov    ecx,ebx
c000a440:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a442:	85 c0                	test   eax,eax
c000a444:	74 0d                	je     c000a453 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a446:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a44a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a44d:	89 de                	mov    esi,ebx
c000a44f:	89 c1                	mov    ecx,eax
c000a451:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a453:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a456:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a45b:	75 10                	jne    c000a46d <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a45d:	83 ec 0c             	sub    esp,0xc
c000a460:	68 a1 29 02 c0       	push   0xc00229a1
c000a465:	e8 95 9e 00 00       	call   c00142ff <Krnl::panic(char const*)>
c000a46a:	83 c4 10             	add    esp,0x10
c000a46d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a471:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a474:	89 08                	mov    DWORD PTR [eax],ecx
c000a476:	31 c0                	xor    eax,eax
c000a478:	83 c4 1c             	add    esp,0x1c
c000a47b:	5b                   	pop    ebx
c000a47c:	5e                   	pop    esi
c000a47d:	5f                   	pop    edi
c000a47e:	5d                   	pop    ebp
c000a47f:	c3                   	ret    

c000a480 <Pipe::Pipe(int)>:
c000a480:	83 ec 0c             	sub    esp,0xc
c000a483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a487:	83 ec 08             	sub    esp,0x8
c000a48a:	6a 00                	push   0x0
c000a48c:	50                   	push   eax
c000a48d:	e8 64 0e 00 00       	call   c000b2f6 <UnixFile::UnixFile(int)>
c000a492:	83 c4 10             	add    esp,0x10
c000a495:	ba c8 29 02 c0       	mov    edx,0xc00229c8
c000a49a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a49e:	89 10                	mov    DWORD PTR [eax],edx
c000a4a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a4a8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a4ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4af:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a4b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4ba:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a4c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a4c5:	83 ec 0c             	sub    esp,0xc
c000a4c8:	50                   	push   eax
c000a4c9:	e8 f5 f4 ff ff       	call   c00099c3 <malloc>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	89 c2                	mov    edx,eax
c000a4d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a4da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4de:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000a4e2:	90                   	nop
c000a4e3:	83 c4 0c             	add    esp,0xc
c000a4e6:	c3                   	ret    
c000a4e7:	90                   	nop

c000a4e8 <VgaText::isAtty()>:
c000a4e8:	b0 01                	mov    al,0x1
c000a4ea:	c3                   	ret    
c000a4eb:	90                   	nop

c000a4ec <VgaText::~VgaText()>:
c000a4ec:	83 ec 0c             	sub    esp,0xc
c000a4ef:	ba 50 2a 02 c0       	mov    edx,0xc0022a50
c000a4f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4f8:	89 10                	mov    DWORD PTR [eax],edx
c000a4fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4fe:	83 ec 0c             	sub    esp,0xc
c000a501:	50                   	push   eax
c000a502:	e8 d1 0f 00 00       	call   c000b4d8 <UnixFile::~UnixFile()>
c000a507:	83 c4 10             	add    esp,0x10
c000a50a:	90                   	nop
c000a50b:	83 c4 0c             	add    esp,0xc
c000a50e:	c3                   	ret    
c000a50f:	90                   	nop

c000a510 <VgaText::~VgaText()>:
c000a510:	83 ec 0c             	sub    esp,0xc
c000a513:	83 ec 0c             	sub    esp,0xc
c000a516:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a51a:	e8 cd ff ff ff       	call   c000a4ec <VgaText::~VgaText()>
c000a51f:	83 c4 10             	add    esp,0x10
c000a522:	83 ec 08             	sub    esp,0x8
c000a525:	68 c4 02 00 00       	push   0x2c4
c000a52a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a52e:	e8 4b 24 00 00       	call   c000c97e <operator delete(void*, unsigned long)>
c000a533:	83 c4 10             	add    esp,0x10
c000a536:	83 c4 0c             	add    esp,0xc
c000a539:	c3                   	ret    

c000a53a <VgaText::read(unsigned long long, void*, int*)>:
c000a53a:	83 ec 10             	sub    esp,0x10
c000a53d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a541:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a545:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a549:	e8 a0 57 00 00       	call   c000fcee <readKeyboard(VgaText*, char*, unsigned long)>
c000a54e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a552:	89 02                	mov    DWORD PTR [edx],eax
c000a554:	31 c0                	xor    eax,eax
c000a556:	83 c4 1c             	add    esp,0x1c
c000a559:	c3                   	ret    

c000a55a <setTerminalScrollLock(bool)>:
c000a55a:	c3                   	ret    

c000a55b <addToTerminalCycle(VgaText*)>:
c000a55b:	8b 15 e0 61 02 c0    	mov    edx,DWORD PTR ds:0xc00261e0
c000a561:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a565:	85 d2                	test   edx,edx
c000a567:	75 09                	jne    c000a572 <addToTerminalCycle(VgaText*)+0x17>
c000a569:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000a56c:	a3 e0 61 02 c0       	mov    ds:0xc00261e0,eax
c000a571:	c3                   	ret    
c000a572:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000a575:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000a578:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000a57b:	c3                   	ret    

c000a57c <installVgaTextImplementation()>:
c000a57c:	83 ec 10             	sub    esp,0x10
c000a57f:	6a 20                	push   0x20
c000a581:	6a 00                	push   0x0
c000a583:	68 c0 61 02 c0       	push   0xc00261c0
c000a588:	e8 f7 60 ff ff       	call   c0000684 <memset>
c000a58d:	83 c4 1c             	add    esp,0x1c
c000a590:	c3                   	ret    

c000a591 <scrollTerminalScrollLock(int)>:
c000a591:	c3                   	ret    

c000a592 <VgaText::updateTitle()>:
c000a592:	53                   	push   ebx
c000a593:	31 c0                	xor    eax,eax
c000a595:	83 ec 58             	sub    esp,0x58
c000a598:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000a59c:	89 e1                	mov    ecx,esp
c000a59e:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000a5a2:	40                   	inc    eax
c000a5a3:	83 f8 50             	cmp    eax,0x50
c000a5a6:	75 f6                	jne    c000a59e <VgaText::updateTitle()+0xc>
c000a5a8:	31 c0                	xor    eax,eax
c000a5aa:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000a5b1:	84 db                	test   bl,bl
c000a5b3:	74 06                	je     c000a5bb <VgaText::updateTitle()+0x29>
c000a5b5:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000a5b8:	40                   	inc    eax
c000a5b9:	eb ef                	jmp    c000a5aa <VgaText::updateTitle()+0x18>
c000a5bb:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000a5be:	85 c0                	test   eax,eax
c000a5c0:	74 09                	je     c000a5cb <VgaText::updateTitle()+0x39>
c000a5c2:	53                   	push   ebx
c000a5c3:	53                   	push   ebx
c000a5c4:	51                   	push   ecx
c000a5c5:	52                   	push   edx
c000a5c6:	ff d0                	call   eax
c000a5c8:	83 c4 10             	add    esp,0x10
c000a5cb:	83 c4 58             	add    esp,0x58
c000a5ce:	5b                   	pop    ebx
c000a5cf:	c3                   	ret    

c000a5d0 <VgaText::load()>:
c000a5d0:	53                   	push   ebx
c000a5d1:	31 c0                	xor    eax,eax
c000a5d3:	83 ec 58             	sub    esp,0x58
c000a5d6:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000a5da:	89 e2                	mov    edx,esp
c000a5dc:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000a5e0:	40                   	inc    eax
c000a5e1:	83 f8 50             	cmp    eax,0x50
c000a5e4:	75 f6                	jne    c000a5dc <VgaText::load()+0xc>
c000a5e6:	31 c0                	xor    eax,eax
c000a5e8:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000a5ef:	84 c9                	test   cl,cl
c000a5f1:	74 06                	je     c000a5f9 <VgaText::load()+0x29>
c000a5f3:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a5f6:	40                   	inc    eax
c000a5f7:	eb ef                	jmp    c000a5e8 <VgaText::load()+0x18>
c000a5f9:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000a5fc:	85 c0                	test   eax,eax
c000a5fe:	74 09                	je     c000a609 <VgaText::load()+0x39>
c000a600:	51                   	push   ecx
c000a601:	51                   	push   ecx
c000a602:	52                   	push   edx
c000a603:	53                   	push   ebx
c000a604:	ff d0                	call   eax
c000a606:	83 c4 10             	add    esp,0x10
c000a609:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000a60c:	85 c0                	test   eax,eax
c000a60e:	74 09                	je     c000a619 <VgaText::load()+0x49>
c000a610:	83 ec 0c             	sub    esp,0xc
c000a613:	53                   	push   ebx
c000a614:	ff d0                	call   eax
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	83 c4 58             	add    esp,0x58
c000a61c:	5b                   	pop    ebx
c000a61d:	c3                   	ret    

c000a61e <VgaText::updateCursor()>:
c000a61e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a622:	39 05 e4 61 02 c0    	cmp    DWORD PTR ds:0xc00261e4,eax
c000a628:	75 09                	jne    c000a633 <VgaText::updateCursor()+0x15>
c000a62a:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000a62d:	85 c0                	test   eax,eax
c000a62f:	74 02                	je     c000a633 <VgaText::updateCursor()+0x15>
c000a631:	ff e0                	jmp    eax
c000a633:	c3                   	ret    

c000a634 <VgaText::doANSI_SGR(int)>:
c000a634:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a638:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a63c:	85 d2                	test   edx,edx
c000a63e:	75 0b                	jne    c000a64b <VgaText::doANSI_SGR(int)+0x17>
c000a640:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000a643:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a646:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a649:	eb 59                	jmp    c000a6a4 <VgaText::doANSI_SGR(int)+0x70>
c000a64b:	83 fa 07             	cmp    edx,0x7
c000a64e:	75 0b                	jne    c000a65b <VgaText::doANSI_SGR(int)+0x27>
c000a650:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000a653:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000a656:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000a659:	eb 49                	jmp    c000a6a4 <VgaText::doANSI_SGR(int)+0x70>
c000a65b:	83 fa 1b             	cmp    edx,0x1b
c000a65e:	74 e0                	je     c000a640 <VgaText::doANSI_SGR(int)+0xc>
c000a660:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000a663:	83 f9 07             	cmp    ecx,0x7
c000a666:	77 09                	ja     c000a671 <VgaText::doANSI_SGR(int)+0x3d>
c000a668:	8b 14 8d 60 55 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdaaa0]
c000a66f:	eb 20                	jmp    c000a691 <VgaText::doANSI_SGR(int)+0x5d>
c000a671:	8d 4a d8             	lea    ecx,[edx-0x28]
c000a674:	83 f9 07             	cmp    ecx,0x7
c000a677:	77 09                	ja     c000a682 <VgaText::doANSI_SGR(int)+0x4e>
c000a679:	8b 14 8d 60 55 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdaaa0]
c000a680:	eb 22                	jmp    c000a6a4 <VgaText::doANSI_SGR(int)+0x70>
c000a682:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000a685:	83 f9 07             	cmp    ecx,0x7
c000a688:	77 0b                	ja     c000a695 <VgaText::doANSI_SGR(int)+0x61>
c000a68a:	8b 14 95 18 54 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdabe8]
c000a691:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a694:	c3                   	ret    
c000a695:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000a698:	83 f9 07             	cmp    ecx,0x7
c000a69b:	77 0a                	ja     c000a6a7 <VgaText::doANSI_SGR(int)+0x73>
c000a69d:	8b 14 95 f0 53 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdac10]
c000a6a4:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a6a7:	c3                   	ret    

c000a6a8 <VgaText::setDefaultBgColour(VgaColour)>:
c000a6a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a6ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6b0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a6b3:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a6b6:	c3                   	ret    
c000a6b7:	90                   	nop

c000a6b8 <VgaText::setDefaultFgColour(VgaColour)>:
c000a6b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a6bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6c0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000a6c3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a6c6:	c3                   	ret    
c000a6c7:	90                   	nop

c000a6c8 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000a6c8:	53                   	push   ebx
c000a6c9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a6cd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a6d1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a6d5:	51                   	push   ecx
c000a6d6:	e8 cd ff ff ff       	call   c000a6a8 <VgaText::setDefaultBgColour(VgaColour)>
c000a6db:	58                   	pop    eax
c000a6dc:	5a                   	pop    edx
c000a6dd:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000a6e1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a6e5:	5b                   	pop    ebx
c000a6e6:	eb d0                	jmp    c000a6b8 <VgaText::setDefaultFgColour(VgaColour)>

c000a6e8 <VgaText::setTitleTextColour(VgaColour)>:
c000a6e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a6ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6f0:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000a6f3:	e9 9a fe ff ff       	jmp    c000a592 <VgaText::updateTitle()>

c000a6f8 <VgaText::setTitleColour(VgaColour)>:
c000a6f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a6fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a700:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a703:	e9 8a fe ff ff       	jmp    c000a592 <VgaText::updateTitle()>

c000a708 <VgaText::setTitle(char*)>:
c000a708:	53                   	push   ebx
c000a709:	83 ec 10             	sub    esp,0x10
c000a70c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a714:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000a71a:	50                   	push   eax
c000a71b:	e8 20 60 ff ff       	call   c0000740 <strcpy>
c000a720:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a724:	83 c4 18             	add    esp,0x18
c000a727:	5b                   	pop    ebx
c000a728:	e9 65 fe ff ff       	jmp    c000a592 <VgaText::updateTitle()>
c000a72d:	90                   	nop

c000a72e <VgaText::combineColours(unsigned char, unsigned char)>:
c000a72e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000a732:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000a737:	83 e0 0f             	and    eax,0xf
c000a73a:	c1 e2 04             	shl    edx,0x4
c000a73d:	09 d0                	or     eax,edx
c000a73f:	c3                   	ret    

c000a740 <VgaText::scrollScreen()>:
c000a740:	55                   	push   ebp
c000a741:	b9 01 00 00 00       	mov    ecx,0x1
c000a746:	57                   	push   edi
c000a747:	56                   	push   esi
c000a748:	53                   	push   ebx
c000a749:	83 ec 0c             	sub    esp,0xc
c000a74c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a750:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000a756:	31 ff                	xor    edi,edi
c000a758:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a75b:	83 f9 17             	cmp    ecx,0x17
c000a75e:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000a761:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000a768:	75 27                	jne    c000a791 <VgaText::scrollScreen()+0x51>
c000a76a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000a76d:	01 f5                	add    ebp,esi
c000a76f:	f7 c7 01 00 00 00    	test   edi,0x1
c000a775:	74 16                	je     c000a78d <VgaText::scrollScreen()+0x4d>
c000a777:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000a77b:	50                   	push   eax
c000a77c:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000a780:	50                   	push   eax
c000a781:	e8 a8 ff ff ff       	call   c000a72e <VgaText::combineColours(unsigned char, unsigned char)>
c000a786:	5a                   	pop    edx
c000a787:	5a                   	pop    edx
c000a788:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000a78b:	eb 04                	jmp    c000a791 <VgaText::scrollScreen()+0x51>
c000a78d:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000a791:	47                   	inc    edi
c000a792:	46                   	inc    esi
c000a793:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000a799:	75 bd                	jne    c000a758 <VgaText::scrollScreen()+0x18>
c000a79b:	41                   	inc    ecx
c000a79c:	83 f9 18             	cmp    ecx,0x18
c000a79f:	75 af                	jne    c000a750 <VgaText::scrollScreen()+0x10>
c000a7a1:	39 1d e4 61 02 c0    	cmp    DWORD PTR ds:0xc00261e4,ebx
c000a7a7:	75 1b                	jne    c000a7c4 <VgaText::scrollScreen()+0x84>
c000a7a9:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a7ad:	74 05                	je     c000a7b4 <VgaText::scrollScreen()+0x74>
c000a7af:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000a7b2:	eb 10                	jmp    c000a7c4 <VgaText::scrollScreen()+0x84>
c000a7b4:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000a7b7:	85 c0                	test   eax,eax
c000a7b9:	74 09                	je     c000a7c4 <VgaText::scrollScreen()+0x84>
c000a7bb:	83 ec 0c             	sub    esp,0xc
c000a7be:	53                   	push   ebx
c000a7bf:	ff d0                	call   eax
c000a7c1:	83 c4 10             	add    esp,0x10
c000a7c4:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a7c8:	83 c4 0c             	add    esp,0xc
c000a7cb:	5b                   	pop    ebx
c000a7cc:	5e                   	pop    esi
c000a7cd:	5f                   	pop    edi
c000a7ce:	5d                   	pop    ebp
c000a7cf:	e9 4a fe ff ff       	jmp    c000a61e <VgaText::updateCursor()>

c000a7d4 <VgaText::combineCharAndColour(char, unsigned char)>:
c000a7d4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000a7d9:	c1 e0 08             	shl    eax,0x8
c000a7dc:	89 c2                	mov    edx,eax
c000a7de:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000a7e3:	09 d0                	or     eax,edx
c000a7e5:	c3                   	ret    

c000a7e6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000a7e6:	56                   	push   esi
c000a7e7:	53                   	push   ebx
c000a7e8:	51                   	push   ecx
c000a7e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a7ed:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000a7f2:	50                   	push   eax
c000a7f3:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000a7f8:	50                   	push   eax
c000a7f9:	e8 30 ff ff ff       	call   c000a72e <VgaText::combineColours(unsigned char, unsigned char)>
c000a7fe:	5b                   	pop    ebx
c000a7ff:	0f b6 c0             	movzx  eax,al
c000a802:	5e                   	pop    esi
c000a803:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000a808:	50                   	push   eax
c000a809:	53                   	push   ebx
c000a80a:	e8 c5 ff ff ff       	call   c000a7d4 <VgaText::combineCharAndColour(char, unsigned char)>
c000a80f:	5a                   	pop    edx
c000a810:	5e                   	pop    esi
c000a811:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000a814:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000a81a:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000a81e:	0f b7 d2             	movzx  edx,dx
c000a821:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000a825:	39 0d e4 61 02 c0    	cmp    DWORD PTR ds:0xc00261e4,ecx
c000a82b:	75 10                	jne    c000a83d <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000a82d:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000a830:	85 c0                	test   eax,eax
c000a832:	74 09                	je     c000a83d <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000a834:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000a838:	5a                   	pop    edx
c000a839:	5b                   	pop    ebx
c000a83a:	5e                   	pop    esi
c000a83b:	ff e0                	jmp    eax
c000a83d:	58                   	pop    eax
c000a83e:	5b                   	pop    ebx
c000a83f:	5e                   	pop    esi
c000a840:	c3                   	ret    
c000a841:	90                   	nop

c000a842 <VgaText::getCursorX()>:
c000a842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a846:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000a849:	c3                   	ret    

c000a84a <VgaText::getCursorY()>:
c000a84a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a84e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000a851:	c3                   	ret    

c000a852 <VgaText::setCursor(int, int)>:
c000a852:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a856:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a85a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000a85d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a861:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a864:	e9 b5 fd ff ff       	jmp    c000a61e <VgaText::updateCursor()>

c000a869 <setActiveTerminal(VgaText*)>:
c000a869:	53                   	push   ebx
c000a86a:	83 ec 08             	sub    esp,0x8
c000a86d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a871:	85 db                	test   ebx,ebx
c000a873:	75 11                	jne    c000a886 <setActiveTerminal(VgaText*)+0x1d>
c000a875:	c7 44 24 10 dc 29 02 c0 	mov    DWORD PTR [esp+0x10],0xc00229dc
c000a87d:	83 c4 08             	add    esp,0x8
c000a880:	5b                   	pop    ebx
c000a881:	e9 79 9a 00 00       	jmp    c00142ff <Krnl::panic(char const*)>
c000a886:	a1 e4 61 02 c0       	mov    eax,ds:0xc00261e4
c000a88b:	85 c0                	test   eax,eax
c000a88d:	74 0c                	je     c000a89b <setActiveTerminal(VgaText*)+0x32>
c000a88f:	83 ec 0c             	sub    esp,0xc
c000a892:	50                   	push   eax
c000a893:	e8 86 fd ff ff       	call   c000a61e <VgaText::updateCursor()>
c000a898:	83 c4 10             	add    esp,0x10
c000a89b:	89 1d e4 61 02 c0    	mov    DWORD PTR ds:0xc00261e4,ebx
c000a8a1:	51                   	push   ecx
c000a8a2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a8a5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a8a8:	53                   	push   ebx
c000a8a9:	e8 a4 ff ff ff       	call   c000a852 <VgaText::setCursor(int, int)>
c000a8ae:	83 c4 10             	add    esp,0x10
c000a8b1:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a8b5:	75 07                	jne    c000a8be <setActiveTerminal(VgaText*)+0x55>
c000a8b7:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000a8be:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a8c2:	83 c4 08             	add    esp,0x8
c000a8c5:	5b                   	pop    ebx
c000a8c6:	e9 05 fd ff ff       	jmp    c000a5d0 <VgaText::load()>

c000a8cb <doTerminalCycle()>:
c000a8cb:	83 ec 18             	sub    esp,0x18
c000a8ce:	a1 e0 61 02 c0       	mov    eax,ds:0xc00261e0
c000a8d3:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000a8d6:	50                   	push   eax
c000a8d7:	a3 e0 61 02 c0       	mov    ds:0xc00261e0,eax
c000a8dc:	e8 88 ff ff ff       	call   c000a869 <setActiveTerminal(VgaText*)>
c000a8e1:	83 c4 1c             	add    esp,0x1c
c000a8e4:	c3                   	ret    
c000a8e5:	90                   	nop

c000a8e6 <VgaText::setCursorX(int)>:
c000a8e6:	83 ec 10             	sub    esp,0x10
c000a8e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a8ed:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000a8f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f4:	50                   	push   eax
c000a8f5:	e8 58 ff ff ff       	call   c000a852 <VgaText::setCursor(int, int)>
c000a8fa:	83 c4 1c             	add    esp,0x1c
c000a8fd:	c3                   	ret    

c000a8fe <VgaText::setCursorY(int)>:
c000a8fe:	83 ec 10             	sub    esp,0x10
c000a901:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a905:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a909:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000a90c:	50                   	push   eax
c000a90d:	e8 40 ff ff ff       	call   c000a852 <VgaText::setCursor(int, int)>
c000a912:	83 c4 1c             	add    esp,0x1c
c000a915:	c3                   	ret    

c000a916 <VgaText::incrementCursor(bool)>:
c000a916:	56                   	push   esi
c000a917:	53                   	push   ebx
c000a918:	51                   	push   ecx
c000a919:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a91d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a921:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a924:	40                   	inc    eax
c000a925:	83 f8 50             	cmp    eax,0x50
c000a928:	74 05                	je     c000a92f <VgaText::incrementCursor(bool)+0x19>
c000a92a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000a92d:	eb 24                	jmp    c000a953 <VgaText::incrementCursor(bool)+0x3d>
c000a92f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a932:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a939:	8d 50 01             	lea    edx,[eax+0x1]
c000a93c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a93f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a942:	75 0f                	jne    c000a953 <VgaText::incrementCursor(bool)+0x3d>
c000a944:	83 ec 0c             	sub    esp,0xc
c000a947:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a94a:	53                   	push   ebx
c000a94b:	e8 f0 fd ff ff       	call   c000a740 <VgaText::scrollScreen()>
c000a950:	83 c4 10             	add    esp,0x10
c000a953:	89 f0                	mov    eax,esi
c000a955:	84 c0                	test   al,al
c000a957:	74 0c                	je     c000a965 <VgaText::incrementCursor(bool)+0x4f>
c000a959:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a95d:	5a                   	pop    edx
c000a95e:	5b                   	pop    ebx
c000a95f:	5e                   	pop    esi
c000a960:	e9 b9 fc ff ff       	jmp    c000a61e <VgaText::updateCursor()>
c000a965:	58                   	pop    eax
c000a966:	5b                   	pop    ebx
c000a967:	5e                   	pop    esi
c000a968:	c3                   	ret    
c000a969:	90                   	nop

c000a96a <VgaText::decrementCursor(bool)>:
c000a96a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a96e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a972:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000a975:	85 c0                	test   eax,eax
c000a977:	74 04                	je     c000a97d <VgaText::decrementCursor(bool)+0x13>
c000a979:	48                   	dec    eax
c000a97a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000a97d:	84 c9                	test   cl,cl
c000a97f:	74 09                	je     c000a98a <VgaText::decrementCursor(bool)+0x20>
c000a981:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a985:	e9 94 fc ff ff       	jmp    c000a61e <VgaText::updateCursor()>
c000a98a:	c3                   	ret    
c000a98b:	90                   	nop

c000a98c <VgaText::putchar(char, VgaColour, VgaColour)>:
c000a98c:	53                   	push   ebx
c000a98d:	83 ec 08             	sub    esp,0x8
c000a990:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a994:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a998:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a99c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a9a0:	3c 07                	cmp    al,0x7
c000a9a2:	75 2a                	jne    c000a9ce <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000a9a4:	a1 98 62 02 c0       	mov    eax,ds:0xc0026298
c000a9a9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a9b1:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000a9b9:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000a9c1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a9c5:	83 c4 08             	add    esp,0x8
c000a9c8:	5b                   	pop    ebx
c000a9c9:	e9 ac 2e 00 00       	jmp    c000d87a <Buzzer::beep(int, int, bool)>
c000a9ce:	3c 0d                	cmp    al,0xd
c000a9d0:	75 09                	jne    c000a9db <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000a9d2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a9d9:	eb 2c                	jmp    c000aa07 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000a9db:	3c 0a                	cmp    al,0xa
c000a9dd:	75 31                	jne    c000aa10 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000a9df:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a9e2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a9e9:	8d 50 01             	lea    edx,[eax+0x1]
c000a9ec:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a9ef:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a9f2:	75 0f                	jne    c000aa03 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000a9f4:	83 ec 0c             	sub    esp,0xc
c000a9f7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a9fa:	53                   	push   ebx
c000a9fb:	e8 40 fd ff ff       	call   c000a740 <VgaText::scrollScreen()>
c000aa00:	83 c4 10             	add    esp,0x10
c000aa03:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aa07:	83 c4 08             	add    esp,0x8
c000aa0a:	5b                   	pop    ebx
c000aa0b:	e9 0e fc ff ff       	jmp    c000a61e <VgaText::updateCursor()>
c000aa10:	3c 08                	cmp    al,0x8
c000aa12:	75 25                	jne    c000aa39 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000aa14:	50                   	push   eax
c000aa15:	50                   	push   eax
c000aa16:	6a 01                	push   0x1
c000aa18:	53                   	push   ebx
c000aa19:	e8 4c ff ff ff       	call   c000a96a <VgaText::decrementCursor(bool)>
c000aa1e:	5a                   	pop    edx
c000aa1f:	59                   	pop    ecx
c000aa20:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aa23:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aa26:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000aa29:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000aa2c:	6a 20                	push   0x20
c000aa2e:	53                   	push   ebx
c000aa2f:	e8 b2 fd ff ff       	call   c000a7e6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000aa34:	83 c4 28             	add    esp,0x28
c000aa37:	5b                   	pop    ebx
c000aa38:	c3                   	ret    
c000aa39:	83 ec 08             	sub    esp,0x8
c000aa3c:	0f be c0             	movsx  eax,al
c000aa3f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aa42:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aa45:	51                   	push   ecx
c000aa46:	52                   	push   edx
c000aa47:	50                   	push   eax
c000aa48:	53                   	push   ebx
c000aa49:	e8 98 fd ff ff       	call   c000a7e6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000aa4e:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000aa52:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000aa5a:	83 c4 28             	add    esp,0x28
c000aa5d:	5b                   	pop    ebx
c000aa5e:	e9 b3 fe ff ff       	jmp    c000a916 <VgaText::incrementCursor(bool)>
c000aa63:	90                   	nop

c000aa64 <VgaText::doUpdate()>:
c000aa64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa68:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000aa6b:	85 c0                	test   eax,eax
c000aa6d:	74 02                	je     c000aa71 <VgaText::doUpdate()+0xd>
c000aa6f:	ff e0                	jmp    eax
c000aa71:	c3                   	ret    

c000aa72 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000aa72:	55                   	push   ebp
c000aa73:	31 ed                	xor    ebp,ebp
c000aa75:	57                   	push   edi
c000aa76:	56                   	push   esi
c000aa77:	53                   	push   ebx
c000aa78:	83 ec 1c             	sub    esp,0x1c
c000aa7b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000aa7f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000aa84:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000aa8b:	50                   	push   eax
c000aa8c:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000aa91:	50                   	push   eax
c000aa92:	e8 97 fc ff ff       	call   c000a72e <VgaText::combineColours(unsigned char, unsigned char)>
c000aa97:	59                   	pop    ecx
c000aa98:	0f b6 c0             	movzx  eax,al
c000aa9b:	5e                   	pop    esi
c000aa9c:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aaa1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000aaa5:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aaa8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aaac:	0f b7 f6             	movzx  esi,si
c000aaaf:	01 f6                	add    esi,esi
c000aab1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aab4:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000aab7:	84 c0                	test   al,al
c000aab9:	0f 84 fd 00 00 00    	je     c000abbc <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000aabf:	3c 0d                	cmp    al,0xd
c000aac1:	75 0c                	jne    c000aacf <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000aac3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000aaca:	e9 e7 00 00 00       	jmp    c000abb6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000aacf:	3c 0a                	cmp    al,0xa
c000aad1:	75 47                	jne    c000ab1a <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000aad3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000aad6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000aadd:	8d 48 01             	lea    ecx,[eax+0x1]
c000aae0:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000aae3:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000aae6:	75 0f                	jne    c000aaf7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000aae8:	83 ec 0c             	sub    esp,0xc
c000aaeb:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000aaee:	53                   	push   ebx
c000aaef:	e8 4c fc ff ff       	call   c000a740 <VgaText::scrollScreen()>
c000aaf4:	83 c4 10             	add    esp,0x10
c000aaf7:	83 ec 0c             	sub    esp,0xc
c000aafa:	31 ed                	xor    ebp,ebp
c000aafc:	53                   	push   ebx
c000aafd:	e8 1c fb ff ff       	call   c000a61e <VgaText::updateCursor()>
c000ab02:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ab07:	83 c4 10             	add    esp,0x10
c000ab0a:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000ab0d:	0f b7 f6             	movzx  esi,si
c000ab10:	01 f6                	add    esi,esi
c000ab12:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ab15:	e9 9c 00 00 00       	jmp    c000abb6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000ab1a:	3c 08                	cmp    al,0x8
c000ab1c:	75 35                	jne    c000ab53 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000ab1e:	56                   	push   esi
c000ab1f:	56                   	push   esi
c000ab20:	6a 01                	push   0x1
c000ab22:	53                   	push   ebx
c000ab23:	e8 42 fe ff ff       	call   c000a96a <VgaText::decrementCursor(bool)>
c000ab28:	58                   	pop    eax
c000ab29:	5a                   	pop    edx
c000ab2a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ab2d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ab30:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ab33:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ab36:	6a 20                	push   0x20
c000ab38:	53                   	push   ebx
c000ab39:	e8 a8 fc ff ff       	call   c000a7e6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ab3e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ab43:	83 c4 20             	add    esp,0x20
c000ab46:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000ab49:	0f b7 f6             	movzx  esi,si
c000ab4c:	01 f6                	add    esi,esi
c000ab4e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ab51:	eb 63                	jmp    c000abb6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000ab53:	51                   	push   ecx
c000ab54:	51                   	push   ecx
c000ab55:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab59:	50                   	push   eax
c000ab5a:	e8 75 fc ff ff       	call   c000a7d4 <VgaText::combineCharAndColour(char, unsigned char)>
c000ab5f:	83 c4 10             	add    esp,0x10
c000ab62:	66 89 06             	mov    WORD PTR [esi],ax
c000ab65:	39 1d e4 61 02 c0    	cmp    DWORD PTR ds:0xc00261e4,ebx
c000ab6b:	75 21                	jne    c000ab8e <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ab6d:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000ab70:	85 c0                	test   eax,eax
c000ab72:	74 1a                	je     c000ab8e <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ab74:	52                   	push   edx
c000ab75:	52                   	push   edx
c000ab76:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ab79:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ab7c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab80:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab84:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000ab87:	51                   	push   ecx
c000ab88:	53                   	push   ebx
c000ab89:	ff d0                	call   eax
c000ab8b:	83 c4 20             	add    esp,0x20
c000ab8e:	83 c6 02             	add    esi,0x2
c000ab91:	50                   	push   eax
c000ab92:	50                   	push   eax
c000ab93:	6a 00                	push   0x0
c000ab95:	53                   	push   ebx
c000ab96:	e8 7b fd ff ff       	call   c000a916 <VgaText::incrementCursor(bool)>
c000ab9b:	83 c4 10             	add    esp,0x10
c000ab9e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000aba2:	75 0d                	jne    c000abb1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000aba4:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aba9:	0f b7 f6             	movzx  esi,si
c000abac:	01 f6                	add    esi,esi
c000abae:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000abb1:	bd 01 00 00 00       	mov    ebp,0x1
c000abb6:	47                   	inc    edi
c000abb7:	e9 f8 fe ff ff       	jmp    c000aab4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000abbc:	83 ec 0c             	sub    esp,0xc
c000abbf:	53                   	push   ebx
c000abc0:	e8 59 fa ff ff       	call   c000a61e <VgaText::updateCursor()>
c000abc5:	83 c4 10             	add    esp,0x10
c000abc8:	89 e8                	mov    eax,ebp
c000abca:	84 c0                	test   al,al
c000abcc:	74 0c                	je     c000abda <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000abce:	83 ec 0c             	sub    esp,0xc
c000abd1:	53                   	push   ebx
c000abd2:	e8 8d fe ff ff       	call   c000aa64 <VgaText::doUpdate()>
c000abd7:	83 c4 10             	add    esp,0x10
c000abda:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000abe1:	83 c4 1c             	add    esp,0x1c
c000abe4:	5b                   	pop    ebx
c000abe5:	5e                   	pop    esi
c000abe6:	5f                   	pop    edi
c000abe7:	5d                   	pop    ebp
c000abe8:	c3                   	ret    
c000abe9:	90                   	nop

c000abea <VgaText::clearScreen()>:
c000abea:	57                   	push   edi
c000abeb:	56                   	push   esi
c000abec:	31 f6                	xor    esi,esi
c000abee:	53                   	push   ebx
c000abef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000abf3:	52                   	push   edx
c000abf4:	6a 00                	push   0x0
c000abf6:	6a 00                	push   0x0
c000abf8:	53                   	push   ebx
c000abf9:	e8 54 fc ff ff       	call   c000a852 <VgaText::setCursor(int, int)>
c000abfe:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000ac05:	83 c4 10             	add    esp,0x10
c000ac08:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000ac0b:	7e 20                	jle    c000ac2d <VgaText::clearScreen()+0x43>
c000ac0d:	31 ff                	xor    edi,edi
c000ac0f:	50                   	push   eax
c000ac10:	50                   	push   eax
c000ac11:	56                   	push   esi
c000ac12:	57                   	push   edi
c000ac13:	47                   	inc    edi
c000ac14:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ac17:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ac1a:	6a 20                	push   0x20
c000ac1c:	53                   	push   ebx
c000ac1d:	e8 c4 fb ff ff       	call   c000a7e6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ac22:	83 c4 20             	add    esp,0x20
c000ac25:	83 ff 50             	cmp    edi,0x50
c000ac28:	75 e5                	jne    c000ac0f <VgaText::clearScreen()+0x25>
c000ac2a:	46                   	inc    esi
c000ac2b:	eb db                	jmp    c000ac08 <VgaText::clearScreen()+0x1e>
c000ac2d:	83 ec 0c             	sub    esp,0xc
c000ac30:	53                   	push   ebx
c000ac31:	e8 2e fe ff ff       	call   c000aa64 <VgaText::doUpdate()>
c000ac36:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000ac3d:	83 c4 10             	add    esp,0x10
c000ac40:	5b                   	pop    ebx
c000ac41:	5e                   	pop    esi
c000ac42:	5f                   	pop    edi
c000ac43:	c3                   	ret    

c000ac44 <VgaText::putchar(char)>:
c000ac44:	56                   	push   esi
c000ac45:	53                   	push   ebx
c000ac46:	83 ec 14             	sub    esp,0x14
c000ac49:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac4d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ac51:	3c 5b                	cmp    al,0x5b
c000ac53:	75 18                	jne    c000ac6d <VgaText::putchar(char)+0x29>
c000ac55:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000ac59:	74 1f                	je     c000ac7a <VgaText::putchar(char)+0x36>
c000ac5b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000ac61:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000ac68:	e9 bd 00 00 00       	jmp    c000ad2a <VgaText::putchar(char)+0xe6>
c000ac6d:	3c 1b                	cmp    al,0x1b
c000ac6f:	75 09                	jne    c000ac7a <VgaText::putchar(char)+0x36>
c000ac71:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000ac75:	e9 b0 00 00 00       	jmp    c000ad2a <VgaText::putchar(char)+0xe6>
c000ac7a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000ac7d:	84 c9                	test   cl,cl
c000ac7f:	0f 84 92 00 00 00    	je     c000ad17 <VgaText::putchar(char)+0xd3>
c000ac85:	8d 50 c0             	lea    edx,[eax-0x40]
c000ac88:	80 fa 3e             	cmp    dl,0x3e
c000ac8b:	77 76                	ja     c000ad03 <VgaText::putchar(char)+0xbf>
c000ac8d:	3c 6d                	cmp    al,0x6d
c000ac8f:	75 47                	jne    c000acd8 <VgaText::putchar(char)+0x94>
c000ac91:	31 f6                	xor    esi,esi
c000ac93:	31 d2                	xor    edx,edx
c000ac95:	31 c0                	xor    eax,eax
c000ac97:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000ac9a:	7e 2d                	jle    c000acc9 <VgaText::putchar(char)+0x85>
c000ac9c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000aca1:	80 fa 3b             	cmp    dl,0x3b
c000aca4:	75 17                	jne    c000acbd <VgaText::putchar(char)+0x79>
c000aca6:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000acaa:	50                   	push   eax
c000acab:	53                   	push   ebx
c000acac:	e8 83 f9 ff ff       	call   c000a634 <VgaText::doANSI_SGR(int)>
c000acb1:	59                   	pop    ecx
c000acb2:	31 d2                	xor    edx,edx
c000acb4:	58                   	pop    eax
c000acb5:	31 c0                	xor    eax,eax
c000acb7:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000acbb:	eb 09                	jmp    c000acc6 <VgaText::putchar(char)+0x82>
c000acbd:	6b c0 0a             	imul   eax,eax,0xa
c000acc0:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000acc4:	88 ca                	mov    dl,cl
c000acc6:	46                   	inc    esi
c000acc7:	eb ce                	jmp    c000ac97 <VgaText::putchar(char)+0x53>
c000acc9:	84 d2                	test   dl,dl
c000accb:	74 2e                	je     c000acfb <VgaText::putchar(char)+0xb7>
c000accd:	50                   	push   eax
c000acce:	53                   	push   ebx
c000accf:	e8 60 f9 ff ff       	call   c000a634 <VgaText::doANSI_SGR(int)>
c000acd4:	58                   	pop    eax
c000acd5:	5a                   	pop    edx
c000acd6:	eb 23                	jmp    c000acfb <VgaText::putchar(char)+0xb7>
c000acd8:	3c 4a                	cmp    al,0x4a
c000acda:	75 1f                	jne    c000acfb <VgaText::putchar(char)+0xb7>
c000acdc:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000ace0:	75 19                	jne    c000acfb <VgaText::putchar(char)+0xb7>
c000ace2:	83 ec 0c             	sub    esp,0xc
c000ace5:	53                   	push   ebx
c000ace6:	e8 ff fe ff ff       	call   c000abea <VgaText::clearScreen()>
c000aceb:	83 c4 0c             	add    esp,0xc
c000acee:	6a 00                	push   0x0
c000acf0:	6a 00                	push   0x0
c000acf2:	53                   	push   ebx
c000acf3:	e8 5a fb ff ff       	call   c000a852 <VgaText::setCursor(int, int)>
c000acf8:	83 c4 10             	add    esp,0x10
c000acfb:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000ad01:	eb 27                	jmp    c000ad2a <VgaText::putchar(char)+0xe6>
c000ad03:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000ad06:	83 fa 0e             	cmp    edx,0xe
c000ad09:	7f 1f                	jg     c000ad2a <VgaText::putchar(char)+0xe6>
c000ad0b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ad0e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000ad11:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000ad15:	eb 13                	jmp    c000ad2a <VgaText::putchar(char)+0xe6>
c000ad17:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ad1a:	0f be c0             	movsx  eax,al
c000ad1d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ad20:	50                   	push   eax
c000ad21:	53                   	push   ebx
c000ad22:	e8 65 fc ff ff       	call   c000a98c <VgaText::putchar(char, VgaColour, VgaColour)>
c000ad27:	83 c4 10             	add    esp,0x10
c000ad2a:	83 c4 14             	add    esp,0x14
c000ad2d:	5b                   	pop    ebx
c000ad2e:	5e                   	pop    esi
c000ad2f:	c3                   	ret    

c000ad30 <VgaText::putx(unsigned int)>:
c000ad30:	57                   	push   edi
c000ad31:	b9 11 00 00 00       	mov    ecx,0x11
c000ad36:	56                   	push   esi
c000ad37:	be ea 29 02 c0       	mov    esi,0xc00229ea
c000ad3c:	53                   	push   ebx
c000ad3d:	83 ec 20             	sub    esp,0x20
c000ad40:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ad44:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000ad48:	fc                   	cld    
c000ad49:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ad4b:	be 08 00 00 00       	mov    esi,0x8
c000ad50:	50                   	push   eax
c000ad51:	50                   	push   eax
c000ad52:	89 d8                	mov    eax,ebx
c000ad54:	c1 e3 04             	shl    ebx,0x4
c000ad57:	c1 e8 1c             	shr    eax,0x1c
c000ad5a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000ad5f:	50                   	push   eax
c000ad60:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ad64:	e8 db fe ff ff       	call   c000ac44 <VgaText::putchar(char)>
c000ad69:	83 c4 10             	add    esp,0x10
c000ad6c:	4e                   	dec    esi
c000ad6d:	75 e1                	jne    c000ad50 <VgaText::putx(unsigned int)+0x20>
c000ad6f:	83 c4 20             	add    esp,0x20
c000ad72:	5b                   	pop    ebx
c000ad73:	5e                   	pop    esi
c000ad74:	5f                   	pop    edi
c000ad75:	c3                   	ret    

c000ad76 <VgaText::puts(char const*)>:
c000ad76:	53                   	push   ebx
c000ad77:	83 ec 08             	sub    esp,0x8
c000ad7a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ad7e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ad81:	84 c0                	test   al,al
c000ad83:	74 12                	je     c000ad97 <VgaText::puts(char const*)+0x21>
c000ad85:	43                   	inc    ebx
c000ad86:	51                   	push   ecx
c000ad87:	51                   	push   ecx
c000ad88:	50                   	push   eax
c000ad89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad8d:	e8 b2 fe ff ff       	call   c000ac44 <VgaText::putchar(char)>
c000ad92:	83 c4 10             	add    esp,0x10
c000ad95:	eb e7                	jmp    c000ad7e <VgaText::puts(char const*)+0x8>
c000ad97:	83 c4 08             	add    esp,0x8
c000ad9a:	5b                   	pop    ebx
c000ad9b:	c3                   	ret    

c000ad9c <VgaText::VgaText(char const*)>:
c000ad9c:	57                   	push   edi
c000ad9d:	56                   	push   esi
c000ad9e:	53                   	push   ebx
c000ad9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ada3:	83 ec 08             	sub    esp,0x8
c000ada6:	6a 00                	push   0x0
c000ada8:	50                   	push   eax
c000ada9:	e8 48 05 00 00       	call   c000b2f6 <UnixFile::UnixFile(int)>
c000adae:	83 c4 10             	add    esp,0x10
c000adb1:	ba 50 2a 02 c0       	mov    edx,0xc0022a50
c000adb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adba:	89 10                	mov    DWORD PTR [eax],edx
c000adbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc0:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000adc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adcb:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000add2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000add6:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000adda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adde:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000ade2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ade6:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000aded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adf1:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000adf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adfc:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000ae03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae07:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000ae0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae12:	8d 50 60             	lea    edx,[eax+0x60]
c000ae15:	bb c0 61 02 c0       	mov    ebx,0xc00261c0
c000ae1a:	b8 08 00 00 00       	mov    eax,0x8
c000ae1f:	fc                   	cld    
c000ae20:	89 d7                	mov    edi,edx
c000ae22:	89 de                	mov    esi,ebx
c000ae24:	89 c1                	mov    ecx,eax
c000ae26:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ae28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae2c:	05 82 00 00 00       	add    eax,0x82
c000ae31:	83 ec 08             	sub    esp,0x8
c000ae34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae38:	50                   	push   eax
c000ae39:	e8 02 59 ff ff       	call   c0000740 <strcpy>
c000ae3e:	83 c4 10             	add    esp,0x10
c000ae41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae45:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000ae4c:	83 ec 0c             	sub    esp,0xc
c000ae4f:	6a 01                	push   0x1
c000ae51:	e8 e3 08 00 00       	call   c000b739 <Virt::allocateKernelVirtualPages(int)>
c000ae56:	83 c4 10             	add    esp,0x10
c000ae59:	89 c2                	mov    edx,eax
c000ae5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae5f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ae62:	8b 1d 90 62 02 c0    	mov    ebx,DWORD PTR ds:0xc0026290
c000ae68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae6c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae6f:	89 c6                	mov    esi,eax
c000ae71:	e8 b1 ef ff ff       	call   c0009e27 <Phys::allocatePage()>
c000ae76:	68 05 0c 00 00       	push   0xc05
c000ae7b:	56                   	push   esi
c000ae7c:	50                   	push   eax
c000ae7d:	53                   	push   ebx
c000ae7e:	e8 5d 0f 00 00       	call   c000bde0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ae83:	83 c4 10             	add    esp,0x10
c000ae86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae8a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae8d:	83 ec 04             	sub    esp,0x4
c000ae90:	68 00 0f 00 00       	push   0xf00
c000ae95:	6a 00                	push   0x0
c000ae97:	50                   	push   eax
c000ae98:	e8 e7 57 ff ff       	call   c0000684 <memset>
c000ae9d:	83 c4 10             	add    esp,0x10
c000aea0:	83 ec 04             	sub    esp,0x4
c000aea3:	6a 00                	push   0x0
c000aea5:	6a 07                	push   0x7
c000aea7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeab:	e8 18 f8 ff ff       	call   c000a6c8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000aeb0:	83 c4 10             	add    esp,0x10
c000aeb3:	83 ec 04             	sub    esp,0x4
c000aeb6:	6a 00                	push   0x0
c000aeb8:	6a 00                	push   0x0
c000aeba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aebe:	e8 8f f9 ff ff       	call   c000a852 <VgaText::setCursor(int, int)>
c000aec3:	83 c4 10             	add    esp,0x10
c000aec6:	83 ec 0c             	sub    esp,0xc
c000aec9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aecd:	e8 18 fd ff ff       	call   c000abea <VgaText::clearScreen()>
c000aed2:	83 c4 10             	add    esp,0x10
c000aed5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed9:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000aedd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee1:	05 02 01 00 00       	add    eax,0x102
c000aee6:	83 ec 04             	sub    esp,0x4
c000aee9:	68 96 00 00 00       	push   0x96
c000aeee:	6a 00                	push   0x0
c000aef0:	50                   	push   eax
c000aef1:	e8 8e 57 ff ff       	call   c0000684 <memset>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aefd:	05 98 01 00 00       	add    eax,0x198
c000af02:	83 ec 04             	sub    esp,0x4
c000af05:	68 2c 01 00 00       	push   0x12c
c000af0a:	6a 00                	push   0x0
c000af0c:	50                   	push   eax
c000af0d:	e8 72 57 ff ff       	call   c0000684 <memset>
c000af12:	83 c4 10             	add    esp,0x10
c000af15:	90                   	nop
c000af16:	5b                   	pop    ebx
c000af17:	5e                   	pop    esi
c000af18:	5f                   	pop    edi
c000af19:	c3                   	ret    

c000af1a <VgaText::receiveKey(unsigned char)>:
c000af1a:	55                   	push   ebp
c000af1b:	57                   	push   edi
c000af1c:	56                   	push   esi
c000af1d:	53                   	push   ebx
c000af1e:	83 ec 1c             	sub    esp,0x1c
c000af21:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000af25:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000af29:	84 db                	test   bl,bl
c000af2b:	0f 84 c9 00 00 00    	je     c000affa <VgaText::receiveKey(unsigned char)+0xe0>
c000af31:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000af37:	80 fb 08             	cmp    bl,0x8
c000af3a:	75 2c                	jne    c000af68 <VgaText::receiveKey(unsigned char)+0x4e>
c000af3c:	83 ec 0c             	sub    esp,0xc
c000af3f:	57                   	push   edi
c000af40:	e8 5b 57 ff ff       	call   c00006a0 <strlen>
c000af45:	83 c4 10             	add    esp,0x10
c000af48:	85 c0                	test   eax,eax
c000af4a:	74 41                	je     c000af8d <VgaText::receiveKey(unsigned char)+0x73>
c000af4c:	50                   	push   eax
c000af4d:	50                   	push   eax
c000af4e:	6a 08                	push   0x8
c000af50:	56                   	push   esi
c000af51:	e8 ee fc ff ff       	call   c000ac44 <VgaText::putchar(char)>
c000af56:	89 3c 24             	mov    DWORD PTR [esp],edi
c000af59:	e8 42 57 ff ff       	call   c00006a0 <strlen>
c000af5e:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000af66:	eb 22                	jmp    c000af8a <VgaText::receiveKey(unsigned char)+0x70>
c000af68:	0f be c3             	movsx  eax,bl
c000af6b:	52                   	push   edx
c000af6c:	52                   	push   edx
c000af6d:	50                   	push   eax
c000af6e:	56                   	push   esi
c000af6f:	e8 d0 fc ff ff       	call   c000ac44 <VgaText::putchar(char)>
c000af74:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000af78:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000af7d:	59                   	pop    ecx
c000af7e:	5d                   	pop    ebp
c000af7f:	8d 44 24 16          	lea    eax,[esp+0x16]
c000af83:	50                   	push   eax
c000af84:	57                   	push   edi
c000af85:	e8 f6 58 ff ff       	call   c0000880 <strcat>
c000af8a:	83 c4 10             	add    esp,0x10
c000af8d:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000af94:	75 05                	jne    c000af9b <VgaText::receiveKey(unsigned char)+0x81>
c000af96:	80 fb 0a             	cmp    bl,0xa
c000af99:	75 53                	jne    c000afee <VgaText::receiveKey(unsigned char)+0xd4>
c000af9b:	83 ec 0c             	sub    esp,0xc
c000af9e:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c000afa4:	53                   	push   ebx
c000afa5:	e8 f6 56 ff ff       	call   c00006a0 <strlen>
c000afaa:	89 3c 24             	mov    DWORD PTR [esp],edi
c000afad:	89 c5                	mov    ebp,eax
c000afaf:	e8 ec 56 ff ff       	call   c00006a0 <strlen>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000afbb:	3d 2c 01 00 00       	cmp    eax,0x12c
c000afc0:	76 10                	jbe    c000afd2 <VgaText::receiveKey(unsigned char)+0xb8>
c000afc2:	83 ec 0c             	sub    esp,0xc
c000afc5:	68 fb 29 02 c0       	push   0xc00229fb
c000afca:	e8 30 93 00 00       	call   c00142ff <Krnl::panic(char const*)>
c000afcf:	83 c4 10             	add    esp,0x10
c000afd2:	50                   	push   eax
c000afd3:	50                   	push   eax
c000afd4:	57                   	push   edi
c000afd5:	53                   	push   ebx
c000afd6:	e8 a5 58 ff ff       	call   c0000880 <strcat>
c000afdb:	83 c4 0c             	add    esp,0xc
c000afde:	68 96 00 00 00       	push   0x96
c000afe3:	6a 00                	push   0x0
c000afe5:	57                   	push   edi
c000afe6:	e8 99 56 ff ff       	call   c0000684 <memset>
c000afeb:	83 c4 10             	add    esp,0x10
c000afee:	83 ec 0c             	sub    esp,0xc
c000aff1:	56                   	push   esi
c000aff2:	e8 6d fa ff ff       	call   c000aa64 <VgaText::doUpdate()>
c000aff7:	83 c4 10             	add    esp,0x10
c000affa:	83 c4 1c             	add    esp,0x1c
c000affd:	5b                   	pop    ebx
c000affe:	5e                   	pop    esi
c000afff:	5f                   	pop    edi
c000b000:	5d                   	pop    ebp
c000b001:	c3                   	ret    

c000b002 <VgaText::write(unsigned long long, void*, int*)>:
c000b002:	55                   	push   ebp
c000b003:	57                   	push   edi
c000b004:	56                   	push   esi
c000b005:	53                   	push   ebx
c000b006:	83 ec 0c             	sub    esp,0xc
c000b009:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b00d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b011:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b015:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b01c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b01f:	39 eb                	cmp    ebx,ebp
c000b021:	74 13                	je     c000b036 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b023:	43                   	inc    ebx
c000b024:	50                   	push   eax
c000b025:	50                   	push   eax
c000b026:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b02a:	50                   	push   eax
c000b02b:	56                   	push   esi
c000b02c:	e8 13 fc ff ff       	call   c000ac44 <VgaText::putchar(char)>
c000b031:	83 c4 10             	add    esp,0x10
c000b034:	eb e9                	jmp    c000b01f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b036:	83 ec 0c             	sub    esp,0xc
c000b039:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b040:	56                   	push   esi
c000b041:	e8 1e fa ff ff       	call   c000aa64 <VgaText::doUpdate()>
c000b046:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b04a:	89 38                	mov    DWORD PTR [eax],edi
c000b04c:	83 c4 1c             	add    esp,0x1c
c000b04f:	31 c0                	xor    eax,eax
c000b051:	5b                   	pop    ebx
c000b052:	5e                   	pop    esi
c000b053:	5f                   	pop    edi
c000b054:	5d                   	pop    ebp
c000b055:	c3                   	ret    

c000b056 <newTerminal(char*)>:
c000b056:	83 ec 28             	sub    esp,0x28
c000b059:	68 c4 02 00 00       	push   0x2c4
c000b05e:	e8 60 e9 ff ff       	call   c00099c3 <malloc>
c000b063:	5a                   	pop    edx
c000b064:	59                   	pop    ecx
c000b065:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b069:	50                   	push   eax
c000b06a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b06e:	e8 29 fd ff ff       	call   c000ad9c <VgaText::VgaText(char const*)>
c000b073:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b077:	83 c4 2c             	add    esp,0x2c
c000b07a:	c3                   	ret    
c000b07b:	90                   	nop

c000b07c <TSS::TSS()>:
c000b07c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b080:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b087:	90                   	nop
c000b088:	c3                   	ret    
c000b089:	90                   	nop
c000b08a:	66 90                	xchg   ax,ax

c000b08c <TSS::setESP(unsigned long)>:
c000b08c:	55                   	push   ebp
c000b08d:	89 e5                	mov    ebp,esp
c000b08f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b092:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b095:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b098:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b09b:	90                   	nop
c000b09c:	5d                   	pop    ebp
c000b09d:	c3                   	ret    
c000b09e:	66 90                	xchg   ax,ax

c000b0a0 <TSS::flush()>:
c000b0a0:	55                   	push   ebp
c000b0a1:	89 e5                	mov    ebp,esp
c000b0a3:	83 ec 10             	sub    esp,0x10
c000b0a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0a9:	8b 00                	mov    eax,DWORD PTR [eax]
c000b0ab:	83 c8 03             	or     eax,0x3
c000b0ae:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b0b2:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b0b6:	66 89 d0             	mov    ax,dx
c000b0b9:	0f 00 d8             	ltr    ax
c000b0bc:	90                   	nop
c000b0bd:	c9                   	leave  
c000b0be:	c3                   	ret    
c000b0bf:	90                   	nop

c000b0c0 <TSS::setup(unsigned long, unsigned long)>:
c000b0c0:	55                   	push   ebp
c000b0c1:	89 e5                	mov    ebp,esp
c000b0c3:	83 ec 18             	sub    esp,0x18
c000b0c6:	83 ec 0c             	sub    esp,0xc
c000b0c9:	6a 68                	push   0x68
c000b0cb:	e8 f3 e8 ff ff       	call   c00099c3 <malloc>
c000b0d0:	83 c4 10             	add    esp,0x10
c000b0d3:	89 c2                	mov    edx,eax
c000b0d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0d8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b0db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0e1:	83 ec 04             	sub    esp,0x4
c000b0e4:	6a 68                	push   0x68
c000b0e6:	6a 00                	push   0x0
c000b0e8:	50                   	push   eax
c000b0e9:	e8 96 55 ff ff       	call   c0000684 <memset>
c000b0ee:	83 c4 10             	add    esp,0x10
c000b0f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0f7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b0fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b100:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b103:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b109:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b10c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b10f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b112:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b115:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b118:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b11b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b121:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b124:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b127:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b12d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b130:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b133:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b139:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b13c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b13f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b148:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b14b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b151:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b154:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b157:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b15d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b163:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b166:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b169:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b16c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b16f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b172:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b175:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b178:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b17b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b182:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b185:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b188:	0f 20 da             	mov    edx,cr3
c000b18b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b18e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b191:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b194:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b197:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b19a:	83 ec 08             	sub    esp,0x8
c000b19d:	50                   	push   eax
c000b19e:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b1a1:	50                   	push   eax
c000b1a2:	e8 79 e0 ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c000b1a7:	83 c4 10             	add    esp,0x10
c000b1aa:	83 ec 08             	sub    esp,0x8
c000b1ad:	6a 68                	push   0x68
c000b1af:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b1b2:	50                   	push   eax
c000b1b3:	e8 84 e0 ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c000b1b8:	83 c4 10             	add    esp,0x10
c000b1bb:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b1bf:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b1c2:	83 e0 0f             	and    eax,0xf
c000b1c5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b1c8:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b1cb:	83 c8 40             	or     eax,0x40
c000b1ce:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b1d1:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000b1d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b1dc:	05 78 01 00 00       	add    eax,0x178
c000b1e1:	83 ec 04             	sub    esp,0x4
c000b1e4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b1e7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b1ea:	50                   	push   eax
c000b1eb:	e8 80 e0 ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000b1f0:	83 c4 10             	add    esp,0x10
c000b1f3:	89 c2                	mov    edx,eax
c000b1f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b1f8:	89 10                	mov    DWORD PTR [eax],edx
c000b1fa:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000b1ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b205:	05 78 01 00 00       	add    eax,0x178
c000b20a:	83 ec 0c             	sub    esp,0xc
c000b20d:	50                   	push   eax
c000b20e:	e8 87 e0 ff ff       	call   c000929a <GDT::flush()>
c000b213:	83 c4 10             	add    esp,0x10
c000b216:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b219:	8b 00                	mov    eax,DWORD PTR [eax]
c000b21b:	c9                   	leave  
c000b21c:	c3                   	ret    
c000b21d:	90                   	nop

c000b21e <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b21e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b222:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b226:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b229:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b22e:	75 08                	jne    c000b238 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b230:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b236:	eb 38                	jmp    c000b270 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b238:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b23d:	75 17                	jne    c000b256 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b23f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b244:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b247:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b24d:	8b 10                	mov    edx,DWORD PTR [eax]
c000b24f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b253:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b256:	89 c1                	mov    ecx,eax
c000b258:	83 e1 fd             	and    ecx,0xfffffffd
c000b25b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b261:	74 cd                	je     c000b230 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b263:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b268:	83 e0 ef             	and    eax,0xffffffef
c000b26b:	83 f8 08             	cmp    eax,0x8
c000b26e:	76 c0                	jbe    c000b230 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b270:	31 c0                	xor    eax,eax
c000b272:	c3                   	ret    
c000b273:	90                   	nop

c000b274 <ReservedFilename::isAtty()>:
c000b274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b278:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b27b:	31 c0                	xor    eax,eax
c000b27d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b283:	74 09                	je     c000b28e <ReservedFilename::isAtty()+0x1a>
c000b285:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b28b:	0f 94 c0             	sete   al
c000b28e:	c3                   	ret    
c000b28f:	90                   	nop

c000b290 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b290:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b294:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b298:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b29b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b29f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b2a4:	75 08                	jne    c000b2ae <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b2a6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b2ac:	eb 3d                	jmp    c000b2eb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b2ae:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b2b3:	75 17                	jne    c000b2cc <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b2b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b2ba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b2bd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b2c3:	8b 10                	mov    edx,DWORD PTR [eax]
c000b2c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b2c9:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b2cc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b2d1:	75 04                	jne    c000b2d7 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b2d3:	89 0a                	mov    DWORD PTR [edx],ecx
c000b2d5:	eb 14                	jmp    c000b2eb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b2d7:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b2dc:	74 c8                	je     c000b2a6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b2de:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b2e3:	83 e0 ef             	and    eax,0xffffffef
c000b2e6:	83 f8 08             	cmp    eax,0x8
c000b2e9:	76 bb                	jbe    c000b2a6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b2eb:	31 c0                	xor    eax,eax
c000b2ed:	c3                   	ret    

c000b2ee <UnixFile::getFileDescriptor()>:
c000b2ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b2f5:	c3                   	ret    

c000b2f6 <UnixFile::UnixFile(int)>:
c000b2f6:	53                   	push   ebx
c000b2f7:	83 ec 28             	sub    esp,0x28
c000b2fa:	ba 18 2b 02 c0       	mov    edx,0xc0022b18
c000b2ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b303:	89 10                	mov    DWORD PTR [eax],edx
c000b305:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b30d:	0f 8f 8c 01 00 00    	jg     c000b49f <UnixFile::UnixFile(int)+0x1a9>
c000b313:	a1 a0 55 02 c0       	mov    eax,ds:0xc00255a0
c000b318:	8d 50 01             	lea    edx,[eax+0x1]
c000b31b:	89 15 a0 55 02 c0    	mov    DWORD PTR ds:0xc00255a0,edx
c000b321:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b325:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b328:	83 ec 08             	sub    esp,0x8
c000b32b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b32f:	68 78 62 02 c0       	push   0xc0026278
c000b334:	e8 53 5e 01 00       	call   c002118c <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b339:	83 c4 10             	add    esp,0x10
c000b33c:	a0 74 62 02 c0       	mov    al,ds:0xc0026274
c000b341:	83 f0 01             	xor    eax,0x1
c000b344:	84 c0                	test   al,al
c000b346:	0f 84 54 01 00 00    	je     c000b4a0 <UnixFile::UnixFile(int)+0x1aa>
c000b34c:	c6 05 74 62 02 c0 01 	mov    BYTE PTR ds:0xc0026274,0x1
c000b353:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b35b:	83 ec 0c             	sub    esp,0xc
c000b35e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b362:	e8 5c e6 ff ff       	call   c00099c3 <malloc>
c000b367:	83 c4 10             	add    esp,0x10
c000b36a:	89 c3                	mov    ebx,eax
c000b36c:	83 ec 08             	sub    esp,0x8
c000b36f:	68 03 ff ff 0f       	push   0xfffff03
c000b374:	53                   	push   ebx
c000b375:	e8 2c 01 00 00       	call   c000b4a6 <ReservedFilename::ReservedFilename(int)>
c000b37a:	83 c4 10             	add    esp,0x10
c000b37d:	89 1d 6c 62 02 c0    	mov    DWORD PTR ds:0xc002626c,ebx
c000b383:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b38b:	83 ec 0c             	sub    esp,0xc
c000b38e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b392:	e8 2c e6 ff ff       	call   c00099c3 <malloc>
c000b397:	83 c4 10             	add    esp,0x10
c000b39a:	89 c3                	mov    ebx,eax
c000b39c:	83 ec 08             	sub    esp,0x8
c000b39f:	68 01 ff ff 0f       	push   0xfffff01
c000b3a4:	53                   	push   ebx
c000b3a5:	e8 fc 00 00 00       	call   c000b4a6 <ReservedFilename::ReservedFilename(int)>
c000b3aa:	83 c4 10             	add    esp,0x10
c000b3ad:	89 1d 70 62 02 c0    	mov    DWORD PTR ds:0xc0026270,ebx
c000b3b3:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b3bb:	83 ec 0c             	sub    esp,0xc
c000b3be:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b3c2:	e8 fc e5 ff ff       	call   c00099c3 <malloc>
c000b3c7:	83 c4 10             	add    esp,0x10
c000b3ca:	89 c3                	mov    ebx,eax
c000b3cc:	83 ec 08             	sub    esp,0x8
c000b3cf:	68 00 ff ff 0f       	push   0xfffff00
c000b3d4:	53                   	push   ebx
c000b3d5:	e8 cc 00 00 00       	call   c000b4a6 <ReservedFilename::ReservedFilename(int)>
c000b3da:	83 c4 10             	add    esp,0x10
c000b3dd:	89 1d 64 62 02 c0    	mov    DWORD PTR ds:0xc0026264,ebx
c000b3e3:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b3eb:	83 ec 0c             	sub    esp,0xc
c000b3ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b3f2:	e8 cc e5 ff ff       	call   c00099c3 <malloc>
c000b3f7:	83 c4 10             	add    esp,0x10
c000b3fa:	89 c3                	mov    ebx,eax
c000b3fc:	83 ec 08             	sub    esp,0x8
c000b3ff:	68 02 ff ff 0f       	push   0xfffff02
c000b404:	53                   	push   ebx
c000b405:	e8 9c 00 00 00       	call   c000b4a6 <ReservedFilename::ReservedFilename(int)>
c000b40a:	83 c4 10             	add    esp,0x10
c000b40d:	89 1d 68 62 02 c0    	mov    DWORD PTR ds:0xc0026268,ebx
c000b413:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b41b:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b420:	7f 7e                	jg     c000b4a0 <UnixFile::UnixFile(int)+0x1aa>
c000b422:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b42a:	83 ec 0c             	sub    esp,0xc
c000b42d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b431:	e8 8d e5 ff ff       	call   c00099c3 <malloc>
c000b436:	83 c4 10             	add    esp,0x10
c000b439:	89 c3                	mov    ebx,eax
c000b43b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b43f:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b444:	83 ec 08             	sub    esp,0x8
c000b447:	50                   	push   eax
c000b448:	53                   	push   ebx
c000b449:	e8 58 00 00 00       	call   c000b4a6 <ReservedFilename::ReservedFilename(int)>
c000b44e:	83 c4 10             	add    esp,0x10
c000b451:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b455:	89 1c 85 40 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9dc0],ebx
c000b45c:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b464:	83 ec 0c             	sub    esp,0xc
c000b467:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b46b:	e8 53 e5 ff ff       	call   c00099c3 <malloc>
c000b470:	83 c4 10             	add    esp,0x10
c000b473:	89 c3                	mov    ebx,eax
c000b475:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b479:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b47e:	83 ec 08             	sub    esp,0x8
c000b481:	50                   	push   eax
c000b482:	53                   	push   ebx
c000b483:	e8 1e 00 00 00       	call   c000b4a6 <ReservedFilename::ReservedFilename(int)>
c000b488:	83 c4 10             	add    esp,0x10
c000b48b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b48f:	89 1c 85 00 62 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9e00],ebx
c000b496:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b49a:	e9 7c ff ff ff       	jmp    c000b41b <UnixFile::UnixFile(int)+0x125>
c000b49f:	90                   	nop
c000b4a0:	83 c4 28             	add    esp,0x28
c000b4a3:	5b                   	pop    ebx
c000b4a4:	c3                   	ret    
c000b4a5:	90                   	nop

c000b4a6 <ReservedFilename::ReservedFilename(int)>:
c000b4a6:	83 ec 0c             	sub    esp,0xc
c000b4a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4ad:	83 ec 08             	sub    esp,0x8
c000b4b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4b4:	50                   	push   eax
c000b4b5:	e8 3c fe ff ff       	call   c000b2f6 <UnixFile::UnixFile(int)>
c000b4ba:	83 c4 10             	add    esp,0x10
c000b4bd:	ba 34 2b 02 c0       	mov    edx,0xc0022b34
c000b4c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c6:	89 10                	mov    DWORD PTR [eax],edx
c000b4c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b4d0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b4d3:	90                   	nop
c000b4d4:	83 c4 0c             	add    esp,0xc
c000b4d7:	c3                   	ret    

c000b4d8 <UnixFile::~UnixFile()>:
c000b4d8:	83 ec 1c             	sub    esp,0x1c
c000b4db:	ba 18 2b 02 c0       	mov    edx,0xc0022b18
c000b4e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b4e4:	89 10                	mov    DWORD PTR [eax],edx
c000b4e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b4ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b4ed:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000b4f2:	7f 73                	jg     c000b567 <UnixFile::~UnixFile()+0x8f>
c000b4f4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b4fc:	83 ec 0c             	sub    esp,0xc
c000b4ff:	68 78 62 02 c0       	push   0xc0026278
c000b504:	e8 57 5d 01 00       	call   c0021260 <LinkedList<UnixFile>::getFirstElement()>
c000b509:	83 c4 10             	add    esp,0x10
c000b50c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b510:	83 ec 0c             	sub    esp,0xc
c000b513:	68 78 62 02 c0       	push   0xc0026278
c000b518:	e8 4b 5d 01 00       	call   c0021268 <LinkedList<UnixFile>::removeFirst()>
c000b51d:	83 c4 10             	add    esp,0x10
c000b520:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b524:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000b528:	74 40                	je     c000b56a <UnixFile::~UnixFile()+0x92>
c000b52a:	83 ec 08             	sub    esp,0x8
c000b52d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b531:	68 78 62 02 c0       	push   0xc0026278
c000b536:	e8 51 5c 01 00       	call   c002118c <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b53b:	83 c4 10             	add    esp,0x10
c000b53e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b542:	8d 50 01             	lea    edx,[eax+0x1]
c000b545:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b549:	3d 88 13 00 00       	cmp    eax,0x1388
c000b54e:	0f 94 c0             	sete   al
c000b551:	84 c0                	test   al,al
c000b553:	74 a7                	je     c000b4fc <UnixFile::~UnixFile()+0x24>
c000b555:	83 ec 0c             	sub    esp,0xc
c000b558:	68 f0 2a 02 c0       	push   0xc0022af0
c000b55d:	e8 9d 8d 00 00       	call   c00142ff <Krnl::panic(char const*)>
c000b562:	83 c4 10             	add    esp,0x10
c000b565:	eb 95                	jmp    c000b4fc <UnixFile::~UnixFile()+0x24>
c000b567:	90                   	nop
c000b568:	eb 01                	jmp    c000b56b <UnixFile::~UnixFile()+0x93>
c000b56a:	90                   	nop
c000b56b:	90                   	nop
c000b56c:	83 c4 1c             	add    esp,0x1c
c000b56f:	c3                   	ret    

c000b570 <UnixFile::~UnixFile()>:
c000b570:	83 ec 0c             	sub    esp,0xc
c000b573:	83 ec 0c             	sub    esp,0xc
c000b576:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b57a:	e8 59 ff ff ff       	call   c000b4d8 <UnixFile::~UnixFile()>
c000b57f:	83 c4 10             	add    esp,0x10
c000b582:	83 ec 08             	sub    esp,0x8
c000b585:	6a 0c                	push   0xc
c000b587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b58b:	e8 ee 13 00 00       	call   c000c97e <operator delete(void*, unsigned long)>
c000b590:	83 c4 10             	add    esp,0x10
c000b593:	83 c4 0c             	add    esp,0xc
c000b596:	c3                   	ret    
c000b597:	90                   	nop

c000b598 <ReservedFilename::~ReservedFilename()>:
c000b598:	83 ec 0c             	sub    esp,0xc
c000b59b:	ba 34 2b 02 c0       	mov    edx,0xc0022b34
c000b5a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5a4:	89 10                	mov    DWORD PTR [eax],edx
c000b5a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5aa:	83 ec 0c             	sub    esp,0xc
c000b5ad:	50                   	push   eax
c000b5ae:	e8 25 ff ff ff       	call   c000b4d8 <UnixFile::~UnixFile()>
c000b5b3:	83 c4 10             	add    esp,0x10
c000b5b6:	90                   	nop
c000b5b7:	83 c4 0c             	add    esp,0xc
c000b5ba:	c3                   	ret    
c000b5bb:	90                   	nop

c000b5bc <ReservedFilename::~ReservedFilename()>:
c000b5bc:	83 ec 0c             	sub    esp,0xc
c000b5bf:	83 ec 0c             	sub    esp,0xc
c000b5c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c6:	e8 cd ff ff ff       	call   c000b598 <ReservedFilename::~ReservedFilename()>
c000b5cb:	83 c4 10             	add    esp,0x10
c000b5ce:	83 ec 08             	sub    esp,0x8
c000b5d1:	6a 0c                	push   0xc
c000b5d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5d7:	e8 a2 13 00 00       	call   c000c97e <operator delete(void*, unsigned long)>
c000b5dc:	83 c4 10             	add    esp,0x10
c000b5df:	83 c4 0c             	add    esp,0xc
c000b5e2:	c3                   	ret    

c000b5e3 <getFromFileDescriptor(int)>:
c000b5e3:	53                   	push   ebx
c000b5e4:	83 ec 08             	sub    esp,0x8
c000b5e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b5eb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000b5f1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000b5f7:	7f 2c                	jg     c000b625 <getFromFileDescriptor(int)+0x42>
c000b5f9:	83 ec 0c             	sub    esp,0xc
c000b5fc:	68 78 62 02 c0       	push   0xc0026278
c000b601:	e8 5a 5c 01 00       	call   c0021260 <LinkedList<UnixFile>::getFirstElement()>
c000b606:	83 c4 10             	add    esp,0x10
c000b609:	85 c0                	test   eax,eax
c000b60b:	75 04                	jne    c000b611 <getFromFileDescriptor(int)+0x2e>
c000b60d:	31 c0                	xor    eax,eax
c000b60f:	eb 6e                	jmp    c000b67f <getFromFileDescriptor(int)+0x9c>
c000b611:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000b614:	74 69                	je     c000b67f <getFromFileDescriptor(int)+0x9c>
c000b616:	52                   	push   edx
c000b617:	52                   	push   edx
c000b618:	50                   	push   eax
c000b619:	68 78 62 02 c0       	push   0xc0026278
c000b61e:	e8 e7 5c 01 00       	call   c002130a <LinkedList<UnixFile>::getNext(UnixFile*)>
c000b623:	eb e1                	jmp    c000b606 <getFromFileDescriptor(int)+0x23>
c000b625:	a1 6c 62 02 c0       	mov    eax,ds:0xc002626c
c000b62a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000b630:	74 4d                	je     c000b67f <getFromFileDescriptor(int)+0x9c>
c000b632:	a1 70 62 02 c0       	mov    eax,ds:0xc0026270
c000b637:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000b63d:	74 40                	je     c000b67f <getFromFileDescriptor(int)+0x9c>
c000b63f:	a1 68 62 02 c0       	mov    eax,ds:0xc0026268
c000b644:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000b64a:	74 33                	je     c000b67f <getFromFileDescriptor(int)+0x9c>
c000b64c:	a1 64 62 02 c0       	mov    eax,ds:0xc0026264
c000b651:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000b657:	74 26                	je     c000b67f <getFromFileDescriptor(int)+0x9c>
c000b659:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000b65f:	83 f8 08             	cmp    eax,0x8
c000b662:	77 09                	ja     c000b66d <getFromFileDescriptor(int)+0x8a>
c000b664:	8b 04 85 40 62 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9dc0]
c000b66b:	eb 12                	jmp    c000b67f <getFromFileDescriptor(int)+0x9c>
c000b66d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000b673:	83 fb 08             	cmp    ebx,0x8
c000b676:	77 95                	ja     c000b60d <getFromFileDescriptor(int)+0x2a>
c000b678:	8b 04 9d 00 62 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9e00]
c000b67f:	83 c4 08             	add    esp,0x8
c000b682:	5b                   	pop    ebx
c000b683:	c3                   	ret    

c000b684 <__static_initialization_and_destruction_0(int, int)>:
c000b684:	83 ec 0c             	sub    esp,0xc
c000b687:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b68c:	75 34                	jne    c000b6c2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b68e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000b696:	75 2a                	jne    c000b6c2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b698:	83 ec 0c             	sub    esp,0xc
c000b69b:	68 78 62 02 c0       	push   0xc0026278
c000b6a0:	e8 a5 5a 01 00       	call   c002114a <LinkedList<UnixFile>::LinkedList()>
c000b6a5:	83 c4 10             	add    esp,0x10
c000b6a8:	83 ec 04             	sub    esp,0x4
c000b6ab:	68 d4 53 02 c0       	push   0xc00253d4
c000b6b0:	68 78 62 02 c0       	push   0xc0026278
c000b6b5:	68 48 11 02 c0       	push   0xc0021148
c000b6ba:	e8 39 12 00 00       	call   c000c8f8 <__cxa_atexit>
c000b6bf:	83 c4 10             	add    esp,0x10
c000b6c2:	90                   	nop
c000b6c3:	83 c4 0c             	add    esp,0xc
c000b6c6:	c3                   	ret    

c000b6c7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000b6c7:	83 ec 0c             	sub    esp,0xc
c000b6ca:	83 ec 08             	sub    esp,0x8
c000b6cd:	68 ff ff 00 00       	push   0xffff
c000b6d2:	6a 01                	push   0x1
c000b6d4:	e8 ab ff ff ff       	call   c000b684 <__static_initialization_and_destruction_0(int, int)>
c000b6d9:	83 c4 10             	add    esp,0x10
c000b6dc:	83 c4 0c             	add    esp,0xc
c000b6df:	c3                   	ret    

c000b6e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000b6e0:	53                   	push   ebx
c000b6e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b6e9:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000b6ef:	89 c8                	mov    eax,ecx
c000b6f1:	d1 e8                	shr    eax,1
c000b6f3:	03 05 a8 55 02 c0    	add    eax,DWORD PTR ds:0xc00255a8
c000b6f9:	83 e1 01             	and    ecx,0x1
c000b6fc:	8a 10                	mov    dl,BYTE PTR [eax]
c000b6fe:	75 09                	jne    c000b709 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000b700:	83 e2 f0             	and    edx,0xfffffff0
c000b703:	09 da                	or     edx,ebx
c000b705:	88 10                	mov    BYTE PTR [eax],dl
c000b707:	5b                   	pop    ebx
c000b708:	c3                   	ret    
c000b709:	c1 e3 04             	shl    ebx,0x4
c000b70c:	83 e2 0f             	and    edx,0xf
c000b70f:	09 da                	or     edx,ebx
c000b711:	88 10                	mov    BYTE PTR [eax],dl
c000b713:	5b                   	pop    ebx
c000b714:	c3                   	ret    

c000b715 <Virt::getPageState(unsigned long)>:
c000b715:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b719:	8b 0d a8 55 02 c0    	mov    ecx,DWORD PTR ds:0xc00255a8
c000b71f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000b725:	89 d0                	mov    eax,edx
c000b727:	d1 e8                	shr    eax,1
c000b729:	83 e2 01             	and    edx,0x1
c000b72c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000b72f:	75 04                	jne    c000b735 <Virt::getPageState(unsigned long)+0x20>
c000b731:	83 e0 0f             	and    eax,0xf
c000b734:	c3                   	ret    
c000b735:	c0 e8 04             	shr    al,0x4
c000b738:	c3                   	ret    

c000b739 <Virt::allocateKernelVirtualPages(int)>:
c000b739:	55                   	push   ebp
c000b73a:	31 ed                	xor    ebp,ebp
c000b73c:	57                   	push   edi
c000b73d:	56                   	push   esi
c000b73e:	53                   	push   ebx
c000b73f:	31 db                	xor    ebx,ebx
c000b741:	83 ec 1c             	sub    esp,0x1c
c000b744:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b748:	8b 3d a4 55 02 c0    	mov    edi,DWORD PTR ds:0xc00255a4
c000b74e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000b753:	57                   	push   edi
c000b754:	e8 bc ff ff ff       	call   c000b715 <Virt::getPageState(unsigned long)>
c000b759:	5a                   	pop    edx
c000b75a:	84 c0                	test   al,al
c000b75c:	75 3a                	jne    c000b798 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000b75e:	85 db                	test   ebx,ebx
c000b760:	75 02                	jne    c000b764 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000b762:	89 fd                	mov    ebp,edi
c000b764:	43                   	inc    ebx
c000b765:	39 f3                	cmp    ebx,esi
c000b767:	74 5a                	je     c000b7c3 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000b769:	47                   	inc    edi
c000b76a:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b770:	76 31                	jbe    c000b7a3 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000b772:	c7 05 a4 55 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00255a4,0xc8000
c000b77c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000b781:	75 28                	jne    c000b7ab <Virt::allocateKernelVirtualPages(int)+0x72>
c000b783:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000b788:	bf 00 80 0c 00       	mov    edi,0xc8000
c000b78d:	57                   	push   edi
c000b78e:	e8 82 ff ff ff       	call   c000b715 <Virt::getPageState(unsigned long)>
c000b793:	5a                   	pop    edx
c000b794:	84 c0                	test   al,al
c000b796:	74 c6                	je     c000b75e <Virt::allocateKernelVirtualPages(int)+0x25>
c000b798:	31 db                	xor    ebx,ebx
c000b79a:	47                   	inc    edi
c000b79b:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b7a1:	77 cf                	ja     c000b772 <Virt::allocateKernelVirtualPages(int)+0x39>
c000b7a3:	89 3d a4 55 02 c0    	mov    DWORD PTR ds:0xc00255a4,edi
c000b7a9:	eb a8                	jmp    c000b753 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b7ab:	83 ec 0c             	sub    esp,0xc
c000b7ae:	68 48 2b 02 c0       	push   0xc0022b48
c000b7b3:	e8 47 8b 00 00       	call   c00142ff <Krnl::panic(char const*)>
c000b7b8:	8b 3d a4 55 02 c0    	mov    edi,DWORD PTR ds:0xc00255a4
c000b7be:	83 c4 10             	add    esp,0x10
c000b7c1:	eb 90                	jmp    c000b753 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b7c3:	89 2d a4 55 02 c0    	mov    DWORD PTR ds:0xc00255a4,ebp
c000b7c9:	4b                   	dec    ebx
c000b7ca:	74 5f                	je     c000b82b <Virt::allocateKernelVirtualPages(int)+0xf2>
c000b7cc:	85 f6                	test   esi,esi
c000b7ce:	74 3d                	je     c000b80d <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b7d0:	89 e8                	mov    eax,ebp
c000b7d2:	31 db                	xor    ebx,ebx
c000b7d4:	8d 7e ff             	lea    edi,[esi-0x1]
c000b7d7:	eb 14                	jmp    c000b7ed <Virt::allocateKernelVirtualPages(int)+0xb4>
c000b7d9:	6a 01                	push   0x1
c000b7db:	43                   	inc    ebx
c000b7dc:	50                   	push   eax
c000b7dd:	e8 fe fe ff ff       	call   c000b6e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b7e2:	58                   	pop    eax
c000b7e3:	39 f3                	cmp    ebx,esi
c000b7e5:	5a                   	pop    edx
c000b7e6:	74 25                	je     c000b80d <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b7e8:	a1 a4 55 02 c0       	mov    eax,ds:0xc00255a4
c000b7ed:	8d 50 01             	lea    edx,[eax+0x1]
c000b7f0:	85 db                	test   ebx,ebx
c000b7f2:	89 15 a4 55 02 c0    	mov    DWORD PTR ds:0xc00255a4,edx
c000b7f8:	74 20                	je     c000b81a <Virt::allocateKernelVirtualPages(int)+0xe1>
c000b7fa:	39 df                	cmp    edi,ebx
c000b7fc:	75 db                	jne    c000b7d9 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000b7fe:	6a 03                	push   0x3
c000b800:	43                   	inc    ebx
c000b801:	50                   	push   eax
c000b802:	e8 d9 fe ff ff       	call   c000b6e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b807:	59                   	pop    ecx
c000b808:	39 f3                	cmp    ebx,esi
c000b80a:	58                   	pop    eax
c000b80b:	75 db                	jne    c000b7e8 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b80d:	83 c4 1c             	add    esp,0x1c
c000b810:	89 e8                	mov    eax,ebp
c000b812:	5b                   	pop    ebx
c000b813:	c1 e0 0c             	shl    eax,0xc
c000b816:	5e                   	pop    esi
c000b817:	5f                   	pop    edi
c000b818:	5d                   	pop    ebp
c000b819:	c3                   	ret    
c000b81a:	6a 02                	push   0x2
c000b81c:	bb 01 00 00 00       	mov    ebx,0x1
c000b821:	50                   	push   eax
c000b822:	e8 b9 fe ff ff       	call   c000b6e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b827:	58                   	pop    eax
c000b828:	5a                   	pop    edx
c000b829:	eb bd                	jmp    c000b7e8 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b82b:	6a 04                	push   0x4
c000b82d:	8d 45 01             	lea    eax,[ebp+0x1]
c000b830:	55                   	push   ebp
c000b831:	a3 a4 55 02 c0       	mov    ds:0xc00255a4,eax
c000b836:	e8 a5 fe ff ff       	call   c000b6e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b83b:	59                   	pop    ecx
c000b83c:	89 e8                	mov    eax,ebp
c000b83e:	5b                   	pop    ebx
c000b83f:	c1 e0 0c             	shl    eax,0xc
c000b842:	83 c4 1c             	add    esp,0x1c
c000b845:	5b                   	pop    ebx
c000b846:	5e                   	pop    esi
c000b847:	5f                   	pop    edi
c000b848:	5d                   	pop    ebp
c000b849:	c3                   	ret    

c000b84a <Virt::freeSwapfilePage(unsigned long)>:
c000b84a:	53                   	push   ebx
c000b84b:	8b 15 8c 62 02 c0    	mov    edx,DWORD PTR ds:0xc002628c
c000b851:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b855:	b8 01 00 00 00       	mov    eax,0x1
c000b85a:	89 cb                	mov    ebx,ecx
c000b85c:	d3 e0                	shl    eax,cl
c000b85e:	c1 eb 05             	shr    ebx,0x5
c000b861:	f7 d0                	not    eax
c000b863:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000b866:	5b                   	pop    ebx
c000b867:	c3                   	ret    

c000b868 <Virt::swapIDToSector(unsigned long)>:
c000b868:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b86c:	0f af 05 ac 55 02 c0 	imul   eax,DWORD PTR ds:0xc00255ac
c000b873:	03 05 b4 55 02 c0    	add    eax,DWORD PTR ds:0xc00255b4
c000b879:	c3                   	ret    

c000b87a <Virt::allocateSwapfilePage()>:
c000b87a:	55                   	push   ebp
c000b87b:	31 d2                	xor    edx,edx
c000b87d:	57                   	push   edi
c000b87e:	56                   	push   esi
c000b87f:	53                   	push   ebx
c000b880:	83 ec 0c             	sub    esp,0xc
c000b883:	8b 0d ac 55 02 c0    	mov    ecx,DWORD PTR ds:0xc00255ac
c000b889:	a1 b0 55 02 c0       	mov    eax,ds:0xc00255b0
c000b88e:	f7 f1                	div    ecx
c000b890:	39 0d b0 55 02 c0    	cmp    DWORD PTR ds:0xc00255b0,ecx
c000b896:	72 2d                	jb     c000b8c5 <Virt::allocateSwapfilePage()+0x4b>
c000b898:	8b 35 8c 62 02 c0    	mov    esi,DWORD PTR ds:0xc002628c
c000b89e:	8b 16                	mov    edx,DWORD PTR [esi]
c000b8a0:	f6 c2 01             	test   dl,0x1
c000b8a3:	74 3c                	je     c000b8e1 <Virt::allocateSwapfilePage()+0x67>
c000b8a5:	31 c9                	xor    ecx,ecx
c000b8a7:	bf 01 00 00 00       	mov    edi,0x1
c000b8ac:	eb 12                	jmp    c000b8c0 <Virt::allocateSwapfilePage()+0x46>
c000b8ae:	89 fd                	mov    ebp,edi
c000b8b0:	89 ca                	mov    edx,ecx
c000b8b2:	d3 e5                	shl    ebp,cl
c000b8b4:	c1 ea 05             	shr    edx,0x5
c000b8b7:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000b8ba:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b8bc:	85 ea                	test   edx,ebp
c000b8be:	74 2a                	je     c000b8ea <Virt::allocateSwapfilePage()+0x70>
c000b8c0:	41                   	inc    ecx
c000b8c1:	39 c8                	cmp    eax,ecx
c000b8c3:	77 e9                	ja     c000b8ae <Virt::allocateSwapfilePage()+0x34>
c000b8c5:	83 ec 0c             	sub    esp,0xc
c000b8c8:	68 00 2d 02 c0       	push   0xc0022d00
c000b8cd:	e8 2d 8a 00 00       	call   c00142ff <Krnl::panic(char const*)>
c000b8d2:	83 c4 10             	add    esp,0x10
c000b8d5:	31 c9                	xor    ecx,ecx
c000b8d7:	83 c4 0c             	add    esp,0xc
c000b8da:	89 c8                	mov    eax,ecx
c000b8dc:	5b                   	pop    ebx
c000b8dd:	5e                   	pop    esi
c000b8de:	5f                   	pop    edi
c000b8df:	5d                   	pop    ebp
c000b8e0:	c3                   	ret    
c000b8e1:	89 f3                	mov    ebx,esi
c000b8e3:	bd 01 00 00 00       	mov    ebp,0x1
c000b8e8:	31 c9                	xor    ecx,ecx
c000b8ea:	09 ea                	or     edx,ebp
c000b8ec:	89 c8                	mov    eax,ecx
c000b8ee:	89 13                	mov    DWORD PTR [ebx],edx
c000b8f0:	83 c4 0c             	add    esp,0xc
c000b8f3:	5b                   	pop    ebx
c000b8f4:	5e                   	pop    esi
c000b8f5:	5f                   	pop    edi
c000b8f6:	5d                   	pop    ebp
c000b8f7:	c3                   	ret    

c000b8f8 <Virt::virtualMemorySetup()>:
c000b8f8:	53                   	push   ebx
c000b8f9:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b8fe:	6a 0f                	push   0xf
c000b900:	53                   	push   ebx
c000b901:	43                   	inc    ebx
c000b902:	e8 d9 fd ff ff       	call   c000b6e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b907:	58                   	pop    eax
c000b908:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b90e:	5a                   	pop    edx
c000b90f:	75 ed                	jne    c000b8fe <Virt::virtualMemorySetup()+0x6>
c000b911:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b916:	6a 00                	push   0x0
c000b918:	53                   	push   ebx
c000b919:	43                   	inc    ebx
c000b91a:	e8 c1 fd ff ff       	call   c000b6e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b91f:	59                   	pop    ecx
c000b920:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b926:	58                   	pop    eax
c000b927:	75 ed                	jne    c000b916 <Virt::virtualMemorySetup()+0x1e>
c000b929:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000b92e:	6a 0f                	push   0xf
c000b930:	53                   	push   ebx
c000b931:	43                   	inc    ebx
c000b932:	e8 a9 fd ff ff       	call   c000b6e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b937:	58                   	pop    eax
c000b938:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000b93e:	5a                   	pop    edx
c000b93f:	75 ed                	jne    c000b92e <Virt::virtualMemorySetup()+0x36>
c000b941:	5b                   	pop    ebx
c000b942:	c3                   	ret    

c000b943 <Virt::setupPageSwapping(int)>:
c000b943:	53                   	push   ebx
c000b944:	83 ec 0c             	sub    esp,0xc
c000b947:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b94b:	a1 28 67 02 c0       	mov    eax,ds:0xc0026728
c000b950:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b956:	8b 10                	mov    edx,DWORD PTR [eax]
c000b958:	53                   	push   ebx
c000b959:	c1 e3 0b             	shl    ebx,0xb
c000b95c:	68 17 2d 02 c0       	push   0xc0022d17
c000b961:	50                   	push   eax
c000b962:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000b965:	89 1d b0 55 02 c0    	mov    DWORD PTR ds:0xc00255b0,ebx
c000b96b:	c6 05 b8 55 02 c0 43 	mov    BYTE PTR ds:0xc00255b8,0x43
c000b972:	c1 eb 08             	shr    ebx,0x8
c000b975:	a3 b4 55 02 c0       	mov    ds:0xc00255b4,eax
c000b97a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b97d:	c7 05 ac 55 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00255ac,0x8
c000b987:	e8 37 e0 ff ff       	call   c00099c3 <malloc>
c000b98c:	83 c4 0c             	add    esp,0xc
c000b98f:	89 c1                	mov    ecx,eax
c000b991:	a3 8c 62 02 c0       	mov    ds:0xc002628c,eax
c000b996:	31 d2                	xor    edx,edx
c000b998:	a1 b0 55 02 c0       	mov    eax,ds:0xc00255b0
c000b99d:	f7 35 ac 55 02 c0    	div    DWORD PTR ds:0xc00255ac
c000b9a3:	c1 e8 05             	shr    eax,0x5
c000b9a6:	50                   	push   eax
c000b9a7:	6a 00                	push   0x0
c000b9a9:	51                   	push   ecx
c000b9aa:	e8 d5 4c ff ff       	call   c0000684 <memset>
c000b9af:	83 c4 18             	add    esp,0x18
c000b9b2:	5b                   	pop    ebx
c000b9b3:	c3                   	ret    

c000b9b4 <VAS::VAS()>:
c000b9b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9b8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b9bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9c3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000b9ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9ce:	a3 90 62 02 c0       	mov    ds:0xc0026290,eax
c000b9d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9d7:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000b9db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9df:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000b9e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9e6:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000b9ed:	90                   	nop
c000b9ee:	c3                   	ret    
c000b9ef:	90                   	nop

c000b9f0 <VAS::VAS(VAS*)>:
c000b9f0:	83 ec 0c             	sub    esp,0xc
c000b9f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b9fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba02:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000ba09:	83 ec 0c             	sub    esp,0xc
c000ba0c:	68 68 2b 02 c0       	push   0xc0022b68
c000ba11:	e8 e9 88 00 00       	call   c00142ff <Krnl::panic(char const*)>
c000ba16:	83 c4 10             	add    esp,0x10
c000ba19:	90                   	nop
c000ba1a:	83 c4 0c             	add    esp,0xc
c000ba1d:	c3                   	ret    

c000ba1e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000ba1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ba22:	89 c2                	mov    edx,eax
c000ba24:	c1 e8 0a             	shr    eax,0xa
c000ba27:	c1 ea 16             	shr    edx,0x16
c000ba2a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000ba2f:	19 c9                	sbb    ecx,ecx
c000ba31:	c1 e2 0c             	shl    edx,0xc
c000ba34:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000ba3a:	25 fc 0f 00 00       	and    eax,0xffc
c000ba3f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000ba46:	01 d0                	add    eax,edx
c000ba48:	c3                   	ret    
c000ba49:	90                   	nop

c000ba4a <VAS::getPageTableEntry(unsigned long)>:
c000ba4a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ba4e:	89 ca                	mov    edx,ecx
c000ba50:	c1 e9 0a             	shr    ecx,0xa
c000ba53:	c1 ea 16             	shr    edx,0x16
c000ba56:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000ba5c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000ba62:	c1 e0 0c             	shl    eax,0xc
c000ba65:	8d 04 08             	lea    eax,[eax+ecx*1]
c000ba68:	c3                   	ret    

c000ba69 <Virt::freeKernelVirtualPages(unsigned long)>:
c000ba69:	57                   	push   edi
c000ba6a:	56                   	push   esi
c000ba6b:	be 01 00 00 00       	mov    esi,0x1
c000ba70:	53                   	push   ebx
c000ba71:	83 ec 10             	sub    esp,0x10
c000ba74:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ba78:	c1 eb 0c             	shr    ebx,0xc
c000ba7b:	eb 3f                	jmp    c000babc <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000ba7d:	83 ec 08             	sub    esp,0x8
c000ba80:	57                   	push   edi
c000ba81:	ff 35 90 62 02 c0    	push   DWORD PTR ds:0xc0026290
c000ba87:	e8 be ff ff ff       	call   c000ba4a <VAS::getPageTableEntry(unsigned long)>
c000ba8c:	83 c4 10             	add    esp,0x10
c000ba8f:	8b 00                	mov    eax,DWORD PTR [eax]
c000ba91:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000ba95:	f6 c4 04             	test   ah,0x4
c000ba98:	75 5f                	jne    c000baf9 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000ba9a:	80 fa 04             	cmp    dl,0x4
c000ba9d:	74 78                	je     c000bb17 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000ba9f:	80 fa 02             	cmp    dl,0x2
c000baa2:	0f 84 88 00 00 00    	je     c000bb30 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000baa8:	80 fa 03             	cmp    dl,0x3
c000baab:	0f 84 ad 00 00 00    	je     c000bb5e <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000bab1:	fe ca                	dec    dl
c000bab3:	0f 84 92 00 00 00    	je     c000bb4b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bab9:	43                   	inc    ebx
c000baba:	31 f6                	xor    esi,esi
c000babc:	53                   	push   ebx
c000babd:	89 df                	mov    edi,ebx
c000babf:	e8 51 fc ff ff       	call   c000b715 <Virt::getPageState(unsigned long)>
c000bac4:	c1 e7 0c             	shl    edi,0xc
c000bac7:	59                   	pop    ecx
c000bac8:	84 c0                	test   al,al
c000baca:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000bace:	75 ad                	jne    c000ba7d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000bad0:	83 ec 0c             	sub    esp,0xc
c000bad3:	68 2e 2d 02 c0       	push   0xc0022d2e
c000bad8:	e8 22 88 00 00       	call   c00142ff <Krnl::panic(char const*)>
c000badd:	58                   	pop    eax
c000bade:	5a                   	pop    edx
c000badf:	57                   	push   edi
c000bae0:	ff 35 90 62 02 c0    	push   DWORD PTR ds:0xc0026290
c000bae6:	e8 5f ff ff ff       	call   c000ba4a <VAS::getPageTableEntry(unsigned long)>
c000baeb:	83 c4 10             	add    esp,0x10
c000baee:	8b 00                	mov    eax,DWORD PTR [eax]
c000baf0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000baf4:	f6 c4 04             	test   ah,0x4
c000baf7:	74 c0                	je     c000bab9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000baf9:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000bafd:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bb02:	83 ec 0c             	sub    esp,0xc
c000bb05:	50                   	push   eax
c000bb06:	e8 99 e2 ff ff       	call   c0009da4 <Phys::freePage(unsigned long)>
c000bb0b:	83 c4 10             	add    esp,0x10
c000bb0e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bb12:	80 fa 04             	cmp    dl,0x4
c000bb15:	75 88                	jne    c000ba9f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000bb17:	89 f0                	mov    eax,esi
c000bb19:	84 c0                	test   al,al
c000bb1b:	75 47                	jne    c000bb64 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000bb1d:	c7 44 24 20 8c 2b 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022b8c
c000bb25:	83 c4 10             	add    esp,0x10
c000bb28:	5b                   	pop    ebx
c000bb29:	5e                   	pop    esi
c000bb2a:	5f                   	pop    edi
c000bb2b:	e9 cf 87 00 00       	jmp    c00142ff <Krnl::panic(char const*)>
c000bb30:	89 f0                	mov    eax,esi
c000bb32:	84 c0                	test   al,al
c000bb34:	75 15                	jne    c000bb4b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bb36:	83 ec 0c             	sub    esp,0xc
c000bb39:	68 4a 2d 02 c0       	push   0xc0022d4a
c000bb3e:	e8 bc 87 00 00       	call   c00142ff <Krnl::panic(char const*)>
c000bb43:	83 c4 10             	add    esp,0x10
c000bb46:	e9 6e ff ff ff       	jmp    c000bab9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bb4b:	83 ec 08             	sub    esp,0x8
c000bb4e:	6a 00                	push   0x0
c000bb50:	53                   	push   ebx
c000bb51:	e8 8a fb ff ff       	call   c000b6e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bb56:	83 c4 10             	add    esp,0x10
c000bb59:	e9 5b ff ff ff       	jmp    c000bab9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bb5e:	89 f0                	mov    eax,esi
c000bb60:	84 c0                	test   al,al
c000bb62:	75 15                	jne    c000bb79 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000bb64:	83 ec 08             	sub    esp,0x8
c000bb67:	6a 00                	push   0x0
c000bb69:	53                   	push   ebx
c000bb6a:	e8 71 fb ff ff       	call   c000b6e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bb6f:	83 c4 10             	add    esp,0x10
c000bb72:	83 c4 10             	add    esp,0x10
c000bb75:	5b                   	pop    ebx
c000bb76:	5e                   	pop    esi
c000bb77:	5f                   	pop    edi
c000bb78:	c3                   	ret    
c000bb79:	c7 44 24 20 66 2d 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022d66
c000bb81:	83 c4 10             	add    esp,0x10
c000bb84:	5b                   	pop    ebx
c000bb85:	5e                   	pop    esi
c000bb86:	5f                   	pop    edi
c000bb87:	e9 73 87 00 00       	jmp    c00142ff <Krnl::panic(char const*)>

c000bb8c <VAS::freeAllocatedPages(unsigned long)>:
c000bb8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bb90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bb94:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000bb98:	74 09                	je     c000bba3 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000bb9a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bb9e:	e9 c6 fe ff ff       	jmp    c000ba69 <Virt::freeKernelVirtualPages(unsigned long)>
c000bba3:	c7 44 24 04 b0 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022bb0
c000bbab:	e9 af 0e 00 00       	jmp    c000ca5f <Dbg::kprintf(char const*, ...)>

c000bbb0 <VAS::virtualToPhysical(unsigned long)>:
c000bbb0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000bbb4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000bbb8:	e8 8d fe ff ff       	call   c000ba4a <VAS::getPageTableEntry(unsigned long)>
c000bbbd:	5a                   	pop    edx
c000bbbe:	8b 00                	mov    eax,DWORD PTR [eax]
c000bbc0:	59                   	pop    ecx
c000bbc1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bbc6:	c3                   	ret    
c000bbc7:	90                   	nop

c000bbc8 <VAS::reflagRange(unsigned long, int, int, int)>:
c000bbc8:	55                   	push   ebp
c000bbc9:	57                   	push   edi
c000bbca:	56                   	push   esi
c000bbcb:	53                   	push   ebx
c000bbcc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bbd0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000bbd4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bbd8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bbdc:	85 db                	test   ebx,ebx
c000bbde:	7e 22                	jle    c000bc02 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000bbe0:	c1 e3 0c             	shl    ebx,0xc
c000bbe3:	01 f3                	add    ebx,esi
c000bbe5:	56                   	push   esi
c000bbe6:	81 c6 00 10 00 00    	add    esi,0x1000
c000bbec:	55                   	push   ebp
c000bbed:	e8 58 fe ff ff       	call   c000ba4a <VAS::getPageTableEntry(unsigned long)>
c000bbf2:	5a                   	pop    edx
c000bbf3:	59                   	pop    ecx
c000bbf4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bbf6:	21 f9                	and    ecx,edi
c000bbf8:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000bbfc:	39 f3                	cmp    ebx,esi
c000bbfe:	89 08                	mov    DWORD PTR [eax],ecx
c000bc00:	75 e3                	jne    c000bbe5 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000bc02:	5b                   	pop    ebx
c000bc03:	5e                   	pop    esi
c000bc04:	5f                   	pop    edi
c000bc05:	5d                   	pop    ebp
c000bc06:	c3                   	ret    
c000bc07:	90                   	nop

c000bc08 <VAS::setToWriteCombining(unsigned long, int)>:
c000bc08:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000bc0d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bc13:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000bc1a:	75 01                	jne    c000bc1d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000bc1c:	c3                   	ret    
c000bc1d:	68 80 00 00 00       	push   0x80
c000bc22:	6a ff                	push   0xffffffff
c000bc24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc30:	e8 93 ff ff ff       	call   c000bbc8 <VAS::reflagRange(unsigned long, int, int, int)>
c000bc35:	83 c4 14             	add    esp,0x14
c000bc38:	c3                   	ret    
c000bc39:	90                   	nop

c000bc3a <VAS::mapOtherVASIn(bool, VAS*)>:
c000bc3a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bc3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bc43:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000bc46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc4a:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000bc4d:	19 c0                	sbb    eax,eax
c000bc4f:	83 ca 03             	or     edx,0x3
c000bc52:	83 e0 fc             	and    eax,0xfffffffc
c000bc55:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000bc5c:	0f 20 d8             	mov    eax,cr3
c000bc5f:	0f 22 d8             	mov    cr3,eax
c000bc62:	c3                   	ret    
c000bc63:	90                   	nop

c000bc64 <VAS::~VAS()>:
c000bc64:	83 ec 2c             	sub    esp,0x2c
c000bc67:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bc6f:	fa                   	cli    
c000bc70:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c000bc75:	40                   	inc    eax
c000bc76:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c000bc7b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bc80:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc82:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bc85:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bc8b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bc8f:	6a 01                	push   0x1
c000bc91:	50                   	push   eax
c000bc92:	e8 a3 ff ff ff       	call   c000bc3a <VAS::mapOtherVASIn(bool, VAS*)>
c000bc97:	83 c4 0c             	add    esp,0xc
c000bc9a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bca2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000bcaa:	0f 8f d4 00 00 00    	jg     c000bd84 <VAS::~VAS()+0x120>
c000bcb0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bcb4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bcb7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bcbb:	c1 e2 02             	shl    edx,0x2
c000bcbe:	01 d0                	add    eax,edx
c000bcc0:	8b 00                	mov    eax,DWORD PTR [eax]
c000bcc2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcca:	83 e0 01             	and    eax,0x1
c000bccd:	0f 84 a8 00 00 00    	je     c000bd7b <VAS::~VAS()+0x117>
c000bcd3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bcdb:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000bce3:	7f 72                	jg     c000bd57 <VAS::~VAS()+0xf3>
c000bce5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bce9:	c1 e0 0a             	shl    eax,0xa
c000bcec:	89 c2                	mov    edx,eax
c000bcee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bcf2:	01 d0                	add    eax,edx
c000bcf4:	c1 e0 0c             	shl    eax,0xc
c000bcf7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bcfb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bd00:	8b 00                	mov    eax,DWORD PTR [eax]
c000bd02:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bd05:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bd0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd0f:	6a 01                	push   0x1
c000bd11:	50                   	push   eax
c000bd12:	e8 07 fd ff ff       	call   c000ba1e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000bd17:	83 c4 0c             	add    esp,0xc
c000bd1a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd22:	8b 00                	mov    eax,DWORD PTR [eax]
c000bd24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bd28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd2c:	25 01 04 00 00       	and    eax,0x401
c000bd31:	3d 01 04 00 00       	cmp    eax,0x401
c000bd36:	75 19                	jne    c000bd51 <VAS::~VAS()+0xed>
c000bd38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd3c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bd41:	83 ec 0c             	sub    esp,0xc
c000bd44:	50                   	push   eax
c000bd45:	e8 5a e0 ff ff       	call   c0009da4 <Phys::freePage(unsigned long)>
c000bd4a:	83 c4 10             	add    esp,0x10
c000bd4d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bd51:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bd55:	eb 84                	jmp    c000bcdb <VAS::~VAS()+0x77>
c000bd57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd5b:	25 00 04 00 00       	and    eax,0x400
c000bd60:	74 19                	je     c000bd7b <VAS::~VAS()+0x117>
c000bd62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd66:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bd6b:	83 ec 0c             	sub    esp,0xc
c000bd6e:	50                   	push   eax
c000bd6f:	e8 30 e0 ff ff       	call   c0009da4 <Phys::freePage(unsigned long)>
c000bd74:	83 c4 10             	add    esp,0x10
c000bd77:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bd7b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000bd7f:	e9 1e ff ff ff       	jmp    c000bca2 <VAS::~VAS()+0x3e>
c000bd84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bd88:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bd8b:	83 ec 0c             	sub    esp,0xc
c000bd8e:	50                   	push   eax
c000bd8f:	e8 d5 fc ff ff       	call   c000ba69 <Virt::freeKernelVirtualPages(unsigned long)>
c000bd94:	83 c4 10             	add    esp,0x10
c000bd97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bd9b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bd9e:	83 ec 0c             	sub    esp,0xc
c000bda1:	50                   	push   eax
c000bda2:	e8 fd df ff ff       	call   c0009da4 <Phys::freePage(unsigned long)>
c000bda7:	83 c4 10             	add    esp,0x10
c000bdaa:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bdae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bdb2:	c1 e0 02             	shl    eax,0x2
c000bdb5:	83 ec 08             	sub    esp,0x8
c000bdb8:	50                   	push   eax
c000bdb9:	68 d4 2b 02 c0       	push   0xc0022bd4
c000bdbe:	e8 9c 0c 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000bdc3:	83 c4 10             	add    esp,0x10
c000bdc6:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c000bdcb:	48                   	dec    eax
c000bdcc:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c000bdd1:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c000bdd6:	85 c0                	test   eax,eax
c000bdd8:	75 01                	jne    c000bddb <VAS::~VAS()+0x177>
c000bdda:	fb                   	sti    
c000bddb:	90                   	nop
c000bddc:	83 c4 2c             	add    esp,0x2c
c000bddf:	c3                   	ret    

c000bde0 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000bde0:	55                   	push   ebp
c000bde1:	57                   	push   edi
c000bde2:	56                   	push   esi
c000bde3:	53                   	push   ebx
c000bde4:	83 ec 1c             	sub    esp,0x1c
c000bde7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bdeb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bdef:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000bdf5:	77 08                	ja     c000bdff <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000bdf7:	0f 20 d8             	mov    eax,cr3
c000bdfa:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000bdfd:	75 47                	jne    c000be46 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000bdff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000be03:	09 d8                	or     eax,ebx
c000be05:	a9 ff 0f 00 00       	test   eax,0xfff
c000be0a:	75 57                	jne    c000be63 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000be0c:	89 de                	mov    esi,ebx
c000be0e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000be11:	c1 ee 16             	shr    esi,0x16
c000be14:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000be1b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000be1f:	74 54                	je     c000be75 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000be21:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000be25:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000be2b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000be2f:	c1 e6 0c             	shl    esi,0xc
c000be32:	c1 eb 0a             	shr    ebx,0xa
c000be35:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000be3b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000be3e:	83 c4 1c             	add    esp,0x1c
c000be41:	5b                   	pop    ebx
c000be42:	5e                   	pop    esi
c000be43:	5f                   	pop    edi
c000be44:	5d                   	pop    ebp
c000be45:	c3                   	ret    
c000be46:	83 ec 0c             	sub    esp,0xc
c000be49:	68 f4 2b 02 c0       	push   0xc0022bf4
c000be4e:	e8 0c 0c 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000be53:	83 c4 10             	add    esp,0x10
c000be56:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000be5a:	09 d8                	or     eax,ebx
c000be5c:	a9 ff 0f 00 00       	test   eax,0xfff
c000be61:	74 a9                	je     c000be0c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000be63:	83 ec 0c             	sub    esp,0xc
c000be66:	68 5c 2c 02 c0       	push   0xc0022c5c
c000be6b:	e8 8f 84 00 00       	call   c00142ff <Krnl::panic(char const*)>
c000be70:	83 c4 10             	add    esp,0x10
c000be73:	eb 97                	jmp    c000be0c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000be75:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be79:	e8 a9 df ff ff       	call   c0009e27 <Phys::allocatePage()>
c000be7e:	83 ec 0c             	sub    esp,0xc
c000be81:	89 c5                	mov    ebp,eax
c000be83:	8b 0d 90 62 02 c0    	mov    ecx,DWORD PTR ds:0xc0026290
c000be89:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000be8d:	6a 01                	push   0x1
c000be8f:	e8 a5 f8 ff ff       	call   c000b739 <Virt::allocateKernelVirtualPages(int)>
c000be94:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000be9b:	6a 01                	push   0x1
c000be9d:	50                   	push   eax
c000be9e:	55                   	push   ebp
c000be9f:	81 cd 07 04 00 00    	or     ebp,0x407
c000bea5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000bea9:	51                   	push   ecx
c000beaa:	e8 27 02 00 00       	call   c000c0d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000beaf:	83 c4 1c             	add    esp,0x1c
c000beb2:	68 00 10 00 00       	push   0x1000
c000beb7:	6a 00                	push   0x0
c000beb9:	50                   	push   eax
c000beba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bebe:	e8 c1 47 ff ff       	call   c0000684 <memset>
c000bec3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000bec7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000beca:	e8 9a fb ff ff       	call   c000ba69 <Virt::freeKernelVirtualPages(unsigned long)>
c000becf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bed3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bed6:	83 c4 10             	add    esp,0x10
c000bed9:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000bedc:	e9 40 ff ff ff       	jmp    c000be21 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000bee1:	90                   	nop

c000bee2 <VAS::allocatePages(int, int)>:
c000bee2:	55                   	push   ebp
c000bee3:	57                   	push   edi
c000bee4:	56                   	push   esi
c000bee5:	53                   	push   ebx
c000bee6:	83 ec 1c             	sub    esp,0x1c
c000bee9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000beed:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000bef2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bef8:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000befe:	83 e0 01             	and    eax,0x1
c000bf01:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000bf05:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000bf09:	0f 85 cc 00 00 00    	jne    c000bfdb <VAS::allocatePages(int, int)+0xf9>
c000bf0f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bf12:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bf16:	85 c0                	test   eax,eax
c000bf18:	0f 84 a1 00 00 00    	je     c000bfbf <VAS::allocatePages(int, int)+0xdd>
c000bf1e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000bf22:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf26:	c1 e6 0c             	shl    esi,0xc
c000bf29:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000bf2d:	85 c0                	test   eax,eax
c000bf2f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000bf32:	7e 33                	jle    c000bf67 <VAS::allocatePages(int, int)+0x85>
c000bf34:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bf38:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bf3c:	81 cd 00 04 00 00    	or     ebp,0x400
c000bf42:	e8 e0 de ff ff       	call   c0009e27 <Phys::allocatePage()>
c000bf47:	55                   	push   ebp
c000bf48:	53                   	push   ebx
c000bf49:	50                   	push   eax
c000bf4a:	57                   	push   edi
c000bf4b:	e8 90 fe ff ff       	call   c000bde0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bf50:	83 c4 10             	add    esp,0x10
c000bf53:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bf58:	74 03                	je     c000bf5d <VAS::allocatePages(int, int)+0x7b>
c000bf5a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf5d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf63:	39 de                	cmp    esi,ebx
c000bf65:	75 db                	jne    c000bf42 <VAS::allocatePages(int, int)+0x60>
c000bf67:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bf6c:	75 12                	jne    c000bf80 <VAS::allocatePages(int, int)+0x9e>
c000bf6e:	0f 20 d8             	mov    eax,cr3
c000bf71:	0f 22 d8             	mov    cr3,eax
c000bf74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf78:	83 c4 1c             	add    esp,0x1c
c000bf7b:	5b                   	pop    ebx
c000bf7c:	5e                   	pop    esi
c000bf7d:	5f                   	pop    edi
c000bf7e:	5d                   	pop    ebp
c000bf7f:	c3                   	ret    
c000bf80:	c1 ee 0a             	shr    esi,0xa
c000bf83:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bf87:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000bf8d:	c1 eb 0a             	shr    ebx,0xa
c000bf90:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000bf96:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bf9c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bfa2:	39 c3                	cmp    ebx,eax
c000bfa4:	77 ce                	ja     c000bf74 <VAS::allocatePages(int, int)+0x92>
c000bfa6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bfa9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bfaf:	39 d8                	cmp    eax,ebx
c000bfb1:	73 f3                	jae    c000bfa6 <VAS::allocatePages(int, int)+0xc4>
c000bfb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bfb7:	83 c4 1c             	add    esp,0x1c
c000bfba:	5b                   	pop    ebx
c000bfbb:	5e                   	pop    esi
c000bfbc:	5f                   	pop    edi
c000bfbd:	5d                   	pop    ebp
c000bfbe:	c3                   	ret    
c000bfbf:	83 ec 0c             	sub    esp,0xc
c000bfc2:	68 80 2c 02 c0       	push   0xc0022c80
c000bfc7:	e8 33 83 00 00       	call   c00142ff <Krnl::panic(char const*)>
c000bfcc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfcf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bfd3:	83 c4 10             	add    esp,0x10
c000bfd6:	e9 43 ff ff ff       	jmp    c000bf1e <VAS::allocatePages(int, int)+0x3c>
c000bfdb:	83 ec 0c             	sub    esp,0xc
c000bfde:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000bfe2:	e8 52 f7 ff ff       	call   c000b739 <Virt::allocateKernelVirtualPages(int)>
c000bfe7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bfeb:	83 c4 10             	add    esp,0x10
c000bfee:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000bff3:	0f 87 9b 00 00 00    	ja     c000c094 <VAS::allocatePages(int, int)+0x1b2>
c000bff9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000bffd:	85 d2                	test   edx,edx
c000bfff:	7e 3c                	jle    c000c03d <VAS::allocatePages(int, int)+0x15b>
c000c001:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c005:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c009:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c00d:	c1 e5 0c             	shl    ebp,0xc
c000c010:	81 ce 00 04 00 00    	or     esi,0x400
c000c016:	01 dd                	add    ebp,ebx
c000c018:	e8 0a de ff ff       	call   c0009e27 <Phys::allocatePage()>
c000c01d:	56                   	push   esi
c000c01e:	53                   	push   ebx
c000c01f:	50                   	push   eax
c000c020:	57                   	push   edi
c000c021:	e8 ba fd ff ff       	call   c000bde0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c026:	83 c4 10             	add    esp,0x10
c000c029:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c02e:	74 03                	je     c000c033 <VAS::allocatePages(int, int)+0x151>
c000c030:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c033:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c039:	39 dd                	cmp    ebp,ebx
c000c03b:	75 db                	jne    c000c018 <VAS::allocatePages(int, int)+0x136>
c000c03d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c042:	0f 84 26 ff ff ff    	je     c000bf6e <VAS::allocatePages(int, int)+0x8c>
c000c048:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c04c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c050:	89 d3                	mov    ebx,edx
c000c052:	c1 e0 0c             	shl    eax,0xc
c000c055:	c1 eb 0a             	shr    ebx,0xa
c000c058:	01 d0                	add    eax,edx
c000c05a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c060:	c1 e8 0a             	shr    eax,0xa
c000c063:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c069:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c06e:	2d 00 00 40 00       	sub    eax,0x400000
c000c073:	39 c3                	cmp    ebx,eax
c000c075:	0f 87 f9 fe ff ff    	ja     c000bf74 <VAS::allocatePages(int, int)+0x92>
c000c07b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c07e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c084:	39 d8                	cmp    eax,ebx
c000c086:	73 f3                	jae    c000c07b <VAS::allocatePages(int, int)+0x199>
c000c088:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c08c:	83 c4 1c             	add    esp,0x1c
c000c08f:	5b                   	pop    ebx
c000c090:	5e                   	pop    esi
c000c091:	5f                   	pop    edi
c000c092:	5d                   	pop    ebp
c000c093:	c3                   	ret    
c000c094:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c099:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c09f:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c0a6:	0f 84 4d ff ff ff    	je     c000bff9 <VAS::allocatePages(int, int)+0x117>
c000c0ac:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c0b4:	e9 40 ff ff ff       	jmp    c000bff9 <VAS::allocatePages(int, int)+0x117>
c000c0b9:	90                   	nop

c000c0ba <VAS::setCPUSpecific(unsigned long)>:
c000c0ba:	83 ec 0c             	sub    esp,0xc
c000c0bd:	6a 05                	push   0x5
c000c0bf:	68 00 00 40 c2       	push   0xc2400000
c000c0c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0cc:	e8 0f fd ff ff       	call   c000bde0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c0d1:	83 c4 1c             	add    esp,0x1c
c000c0d4:	c3                   	ret    
c000c0d5:	90                   	nop

c000c0d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c0d6:	55                   	push   ebp
c000c0d7:	57                   	push   edi
c000c0d8:	56                   	push   esi
c000c0d9:	53                   	push   ebx
c000c0da:	83 ec 1c             	sub    esp,0x1c
c000c0dd:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c0e2:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c0e6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c0ec:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c0f0:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c0f6:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c0fa:	83 e0 01             	and    eax,0x1
c000c0fd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c101:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c105:	85 c0                	test   eax,eax
c000c107:	7e 39                	jle    c000c142 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c109:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c10d:	89 f3                	mov    ebx,esi
c000c10f:	c1 e0 0c             	shl    eax,0xc
c000c112:	01 f0                	add    eax,esi
c000c114:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c118:	55                   	push   ebp
c000c119:	53                   	push   ebx
c000c11a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c11e:	29 f0                	sub    eax,esi
c000c120:	01 d8                	add    eax,ebx
c000c122:	50                   	push   eax
c000c123:	57                   	push   edi
c000c124:	e8 b7 fc ff ff       	call   c000bde0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c129:	83 c4 10             	add    esp,0x10
c000c12c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c131:	74 03                	je     c000c136 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c133:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c136:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c13c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c140:	75 d6                	jne    c000c118 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c142:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c147:	75 10                	jne    c000c159 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c149:	0f 20 d8             	mov    eax,cr3
c000c14c:	0f 22 d8             	mov    cr3,eax
c000c14f:	83 c4 1c             	add    esp,0x1c
c000c152:	89 f0                	mov    eax,esi
c000c154:	5b                   	pop    ebx
c000c155:	5e                   	pop    esi
c000c156:	5f                   	pop    edi
c000c157:	5d                   	pop    ebp
c000c158:	c3                   	ret    
c000c159:	89 f3                	mov    ebx,esi
c000c15b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c15f:	c1 eb 0a             	shr    ebx,0xa
c000c162:	c1 e0 0c             	shl    eax,0xc
c000c165:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c16b:	01 f0                	add    eax,esi
c000c16d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c173:	c1 e8 0a             	shr    eax,0xa
c000c176:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c17b:	2d 00 00 40 00       	sub    eax,0x400000
c000c180:	39 c3                	cmp    ebx,eax
c000c182:	77 cb                	ja     c000c14f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c184:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c187:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c18d:	39 d8                	cmp    eax,ebx
c000c18f:	73 f3                	jae    c000c184 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c191:	83 c4 1c             	add    esp,0x1c
c000c194:	89 f0                	mov    eax,esi
c000c196:	5b                   	pop    ebx
c000c197:	5e                   	pop    esi
c000c198:	5f                   	pop    edi
c000c199:	5d                   	pop    ebp
c000c19a:	c3                   	ret    
c000c19b:	90                   	nop

c000c19c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c19c:	55                   	push   ebp
c000c19d:	57                   	push   edi
c000c19e:	56                   	push   esi
c000c19f:	53                   	push   ebx
c000c1a0:	83 ec 1c             	sub    esp,0x1c
c000c1a3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1a7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c1ab:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c1af:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c1b3:	a9 ff 0f 00 00       	test   eax,0xfff
c000c1b8:	75 4a                	jne    c000c204 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c1ba:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c1be:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c1c1:	c1 eb 16             	shr    ebx,0x16
c000c1c4:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c1cb:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c1cf:	74 4d                	je     c000c21e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c1d1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1d5:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c1d9:	c1 e8 0a             	shr    eax,0xa
c000c1dc:	80 fa 01             	cmp    dl,0x1
c000c1df:	19 d2                	sbb    edx,edx
c000c1e1:	c1 e3 0c             	shl    ebx,0xc
c000c1e4:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c1e8:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c1ee:	25 fc 0f 00 00       	and    eax,0xffc
c000c1f3:	01 d8                	add    eax,ebx
c000c1f5:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c1fc:	83 c4 1c             	add    esp,0x1c
c000c1ff:	5b                   	pop    ebx
c000c200:	5e                   	pop    esi
c000c201:	5f                   	pop    edi
c000c202:	5d                   	pop    ebp
c000c203:	c3                   	ret    
c000c204:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c208:	83 ec 0c             	sub    esp,0xc
c000c20b:	68 ac 2c 02 c0       	push   0xc0022cac
c000c210:	e8 ea 80 00 00       	call   c00142ff <Krnl::panic(char const*)>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c21c:	eb 9c                	jmp    c000c1ba <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c21e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c222:	e8 00 dc ff ff       	call   c0009e27 <Phys::allocatePage()>
c000c227:	83 ec 0c             	sub    esp,0xc
c000c22a:	89 c5                	mov    ebp,eax
c000c22c:	8b 0d 90 62 02 c0    	mov    ecx,DWORD PTR ds:0xc0026290
c000c232:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c236:	6a 01                	push   0x1
c000c238:	e8 fc f4 ff ff       	call   c000b739 <Virt::allocateKernelVirtualPages(int)>
c000c23d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c244:	6a 01                	push   0x1
c000c246:	50                   	push   eax
c000c247:	55                   	push   ebp
c000c248:	81 cd 07 04 00 00    	or     ebp,0x407
c000c24e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c252:	51                   	push   ecx
c000c253:	e8 7e fe ff ff       	call   c000c0d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c258:	83 c4 1c             	add    esp,0x1c
c000c25b:	68 00 10 00 00       	push   0x1000
c000c260:	6a 00                	push   0x0
c000c262:	50                   	push   eax
c000c263:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c267:	e8 18 44 ff ff       	call   c0000684 <memset>
c000c26c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c270:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c273:	e8 f1 f7 ff ff       	call   c000ba69 <Virt::freeKernelVirtualPages(unsigned long)>
c000c278:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c27b:	83 c4 10             	add    esp,0x10
c000c27e:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c281:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c285:	e9 47 ff ff ff       	jmp    c000c1d1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c28a <VAS::VAS(bool)>:
c000c28a:	53                   	push   ebx
c000c28b:	83 ec 28             	sub    esp,0x28
c000c28e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c292:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c296:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c29a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c2a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2a5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c2ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2b0:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c2b4:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c2b7:	e8 6b db ff ff       	call   c0009e27 <Phys::allocatePage()>
c000c2bc:	89 c2                	mov    edx,eax
c000c2be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2c2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c2c5:	8b 1d 90 62 02 c0    	mov    ebx,DWORD PTR ds:0xc0026290
c000c2cb:	83 ec 0c             	sub    esp,0xc
c000c2ce:	6a 01                	push   0x1
c000c2d0:	e8 64 f4 ff ff       	call   c000b739 <Virt::allocateKernelVirtualPages(int)>
c000c2d5:	83 c4 10             	add    esp,0x10
c000c2d8:	89 c2                	mov    edx,eax
c000c2da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2de:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c2e1:	83 ec 0c             	sub    esp,0xc
c000c2e4:	6a 03                	push   0x3
c000c2e6:	6a 01                	push   0x1
c000c2e8:	52                   	push   edx
c000c2e9:	50                   	push   eax
c000c2ea:	53                   	push   ebx
c000c2eb:	e8 e6 fd ff ff       	call   c000c0d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c2f0:	83 c4 20             	add    esp,0x20
c000c2f3:	89 c2                	mov    edx,eax
c000c2f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2f9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c2fc:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c304:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c30c:	7f 1c                	jg     c000c32a <VAS::VAS(bool)+0xa0>
c000c30e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c312:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c315:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c319:	c1 e2 02             	shl    edx,0x2
c000c31c:	01 d0                	add    eax,edx
c000c31e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c324:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c328:	eb da                	jmp    c000c304 <VAS::VAS(bool)+0x7a>
c000c32a:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c332:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c33a:	7f 7a                	jg     c000c3b6 <VAS::VAS(bool)+0x12c>
c000c33c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c340:	2d 00 02 00 00       	sub    eax,0x200
c000c345:	c1 e0 0c             	shl    eax,0xc
c000c348:	83 c8 03             	or     eax,0x3
c000c34b:	89 c2                	mov    edx,eax
c000c34d:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c352:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c358:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c35e:	83 e0 10             	and    eax,0x10
c000c361:	84 c0                	test   al,al
c000c363:	74 07                	je     c000c36c <VAS::VAS(bool)+0xe2>
c000c365:	b8 00 01 00 00       	mov    eax,0x100
c000c36a:	eb 05                	jmp    c000c371 <VAS::VAS(bool)+0xe7>
c000c36c:	b8 00 00 00 00       	mov    eax,0x0
c000c371:	09 d0                	or     eax,edx
c000c373:	89 c1                	mov    ecx,eax
c000c375:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c379:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c37c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c380:	c1 e2 02             	shl    edx,0x2
c000c383:	01 d0                	add    eax,edx
c000c385:	89 ca                	mov    edx,ecx
c000c387:	89 10                	mov    DWORD PTR [eax],edx
c000c389:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c38d:	2d 40 03 00 00       	sub    eax,0x340
c000c392:	83 f8 7f             	cmp    eax,0x7f
c000c395:	77 16                	ja     c000c3ad <VAS::VAS(bool)+0x123>
c000c397:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c39b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c39e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c3a2:	c1 e2 02             	shl    edx,0x2
c000c3a5:	01 d0                	add    eax,edx
c000c3a7:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c3ad:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c3b1:	e9 7c ff ff ff       	jmp    c000c332 <VAS::VAS(bool)+0xa8>
c000c3b6:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c3bb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c3c1:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c3c7:	83 e0 10             	and    eax,0x10
c000c3ca:	84 c0                	test   al,al
c000c3cc:	74 07                	je     c000c3d5 <VAS::VAS(bool)+0x14b>
c000c3ce:	b8 03 41 00 00       	mov    eax,0x4103
c000c3d3:	eb 05                	jmp    c000c3da <VAS::VAS(bool)+0x150>
c000c3d5:	b8 03 40 00 00       	mov    eax,0x4003
c000c3da:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c3de:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c3e1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c3e7:	89 02                	mov    DWORD PTR [edx],eax
c000c3e9:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c3ee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c3f4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c3fa:	83 ec 08             	sub    esp,0x8
c000c3fd:	50                   	push   eax
c000c3fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c402:	e8 b3 fc ff ff       	call   c000c0ba <VAS::setCPUSpecific(unsigned long)>
c000c407:	83 c4 10             	add    esp,0x10
c000c40a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c40e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c411:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c416:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c41c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c422:	83 e0 10             	and    eax,0x10
c000c425:	84 c0                	test   al,al
c000c427:	74 07                	je     c000c430 <VAS::VAS(bool)+0x1a6>
c000c429:	b8 00 01 00 00       	mov    eax,0x100
c000c42e:	eb 05                	jmp    c000c435 <VAS::VAS(bool)+0x1ab>
c000c430:	b8 00 00 00 00       	mov    eax,0x0
c000c435:	09 c2                	or     edx,eax
c000c437:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c43b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c43e:	05 fc 0f 00 00       	add    eax,0xffc
c000c443:	83 ca 03             	or     edx,0x3
c000c446:	89 10                	mov    DWORD PTR [eax],edx
c000c448:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c44d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c453:	83 ec 0c             	sub    esp,0xc
c000c456:	50                   	push   eax
c000c457:	e8 4a 1d 00 00       	call   c000e1a6 <Device::getName()>
c000c45c:	83 c4 10             	add    esp,0x10
c000c45f:	83 ec 08             	sub    esp,0x8
c000c462:	68 80 2d 02 c0       	push   0xc0022d80
c000c467:	50                   	push   eax
c000c468:	e8 5f 43 ff ff       	call   c00007cc <strcmp>
c000c46d:	83 c4 10             	add    esp,0x10
c000c470:	85 c0                	test   eax,eax
c000c472:	0f 94 c0             	sete   al
c000c475:	84 c0                	test   al,al
c000c477:	0f 84 87 00 00 00    	je     c000c504 <VAS::VAS(bool)+0x27a>
c000c47d:	fa                   	cli    
c000c47e:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c000c483:	40                   	inc    eax
c000c484:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c000c489:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c48e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c494:	05 7c 09 00 00       	add    eax,0x97c
c000c499:	83 ec 0c             	sub    esp,0xc
c000c49c:	50                   	push   eax
c000c49d:	e8 10 d0 ff ff       	call   c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c4a2:	83 c4 10             	add    esp,0x10
c000c4a5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c4aa:	89 c3                	mov    ebx,eax
c000c4ac:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000c4b1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c4b7:	05 7c 09 00 00       	add    eax,0x97c
c000c4bc:	83 ec 0c             	sub    esp,0xc
c000c4bf:	50                   	push   eax
c000c4c0:	e8 ed cf ff ff       	call   c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c4c5:	83 c4 10             	add    esp,0x10
c000c4c8:	83 ec 08             	sub    esp,0x8
c000c4cb:	50                   	push   eax
c000c4cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4d0:	e8 75 f5 ff ff       	call   c000ba4a <VAS::getPageTableEntry(unsigned long)>
c000c4d5:	83 c4 10             	add    esp,0x10
c000c4d8:	8b 00                	mov    eax,DWORD PTR [eax]
c000c4da:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c4df:	6a 11                	push   0x11
c000c4e1:	53                   	push   ebx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4e7:	e8 f4 f8 ff ff       	call   c000bde0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c4ec:	83 c4 10             	add    esp,0x10
c000c4ef:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c000c4f4:	48                   	dec    eax
c000c4f5:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c000c4fa:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c000c4ff:	85 c0                	test   eax,eax
c000c501:	75 01                	jne    c000c504 <VAS::VAS(bool)+0x27a>
c000c503:	fb                   	sti    
c000c504:	90                   	nop
c000c505:	83 c4 28             	add    esp,0x28
c000c508:	5b                   	pop    ebx
c000c509:	c3                   	ret    

c000c50a <VAS::evict(unsigned long)>:
c000c50a:	55                   	push   ebp
c000c50b:	57                   	push   edi
c000c50c:	56                   	push   esi
c000c50d:	53                   	push   ebx
c000c50e:	83 ec 1c             	sub    esp,0x1c
c000c511:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c515:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c519:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c51d:	e8 58 f3 ff ff       	call   c000b87a <Virt::allocateSwapfilePage()>
c000c522:	89 c7                	mov    edi,eax
c000c524:	a1 ac 55 02 c0       	mov    eax,ds:0xc00255ac
c000c529:	85 c0                	test   eax,eax
c000c52b:	7e 3d                	jle    c000c56a <VAS::evict(unsigned long)+0x60>
c000c52d:	89 ee                	mov    esi,ebp
c000c52f:	31 db                	xor    ebx,ebx
c000c531:	83 ec 0c             	sub    esp,0xc
c000c534:	57                   	push   edi
c000c535:	e8 2e f3 ff ff       	call   c000b868 <Virt::swapIDToSector(unsigned long)>
c000c53a:	89 34 24             	mov    DWORD PTR [esp],esi
c000c53d:	01 d8                	add    eax,ebx
c000c53f:	6a 01                	push   0x1
c000c541:	31 d2                	xor    edx,edx
c000c543:	43                   	inc    ebx
c000c544:	52                   	push   edx
c000c545:	81 c6 00 02 00 00    	add    esi,0x200
c000c54b:	50                   	push   eax
c000c54c:	0f be 05 b8 55 02 c0 	movsx  eax,BYTE PTR ds:0xc00255b8
c000c553:	ff 34 85 1c 66 02 c0 	push   DWORD PTR [eax*4-0x3ffd99e4]
c000c55a:	e8 89 3c 00 00       	call   c00101e8 <LogicalDisk::write(unsigned long long, int, void*)>
c000c55f:	83 c4 20             	add    esp,0x20
c000c562:	39 1d ac 55 02 c0    	cmp    DWORD PTR ds:0xc00255ac,ebx
c000c568:	7f c7                	jg     c000c531 <VAS::evict(unsigned long)+0x27>
c000c56a:	83 ec 08             	sub    esp,0x8
c000c56d:	c1 e7 0b             	shl    edi,0xb
c000c570:	55                   	push   ebp
c000c571:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c575:	e8 d0 f4 ff ff       	call   c000ba4a <VAS::getPageTableEntry(unsigned long)>
c000c57a:	8b 10                	mov    edx,DWORD PTR [eax]
c000c57c:	89 d3                	mov    ebx,edx
c000c57e:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000c584:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c58a:	09 d7                	or     edi,edx
c000c58c:	89 38                	mov    DWORD PTR [eax],edi
c000c58e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c591:	ff 05 88 62 02 c0    	inc    DWORD PTR ds:0xc0026288
c000c597:	e8 08 d8 ff ff       	call   c0009da4 <Phys::freePage(unsigned long)>
c000c59c:	0f 20 d8             	mov    eax,cr3
c000c59f:	0f 22 d8             	mov    cr3,eax
c000c5a2:	ff 35 88 62 02 c0    	push   DWORD PTR ds:0xc0026288
c000c5a8:	55                   	push   ebp
c000c5a9:	53                   	push   ebx
c000c5aa:	68 d0 2c 02 c0       	push   0xc0022cd0
c000c5af:	e8 ab 04 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000c5b4:	a1 84 62 02 c0       	mov    eax,ds:0xc0026284
c000c5b9:	c7 44 24 50 8e 2d 02 c0 	mov    DWORD PTR [esp+0x50],0xc0022d8e
c000c5c1:	8d 50 01             	lea    edx,[eax+0x1]
c000c5c4:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000c5c8:	89 15 84 62 02 c0    	mov    DWORD PTR ds:0xc0026284,edx
c000c5ce:	83 c4 3c             	add    esp,0x3c
c000c5d1:	5b                   	pop    ebx
c000c5d2:	5e                   	pop    esi
c000c5d3:	5f                   	pop    edi
c000c5d4:	5d                   	pop    ebp
c000c5d5:	e9 85 04 00 00       	jmp    c000ca5f <Dbg::kprintf(char const*, ...)>

c000c5da <VAS::tryLoadBackOffDisk(unsigned long)>:
c000c5da:	55                   	push   ebp
c000c5db:	57                   	push   edi
c000c5dc:	56                   	push   esi
c000c5dd:	53                   	push   ebx
c000c5de:	83 ec 14             	sub    esp,0x14
c000c5e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e5:	68 9f 2d 02 c0       	push   0xc0022d9f
c000c5ea:	e8 70 04 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000c5ef:	83 c4 10             	add    esp,0x10
c000c5f2:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000c5f6:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000c5fc:	74 20                	je     c000c61e <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c5fe:	83 ec 08             	sub    esp,0x8
c000c601:	55                   	push   ebp
c000c602:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c606:	e8 3f f4 ff ff       	call   c000ba4a <VAS::getPageTableEntry(unsigned long)>
c000c60b:	83 c4 10             	add    esp,0x10
c000c60e:	89 c3                	mov    ebx,eax
c000c610:	85 c0                	test   eax,eax
c000c612:	74 0a                	je     c000c61e <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c614:	8b 38                	mov    edi,DWORD PTR [eax]
c000c616:	f7 c7 01 00 00 00    	test   edi,0x1
c000c61c:	74 0a                	je     c000c628 <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000c61e:	31 c0                	xor    eax,eax
c000c620:	83 c4 0c             	add    esp,0xc
c000c623:	5b                   	pop    ebx
c000c624:	5e                   	pop    esi
c000c625:	5f                   	pop    edi
c000c626:	5d                   	pop    ebp
c000c627:	c3                   	ret    
c000c628:	e8 fa d7 ff ff       	call   c0009e27 <Phys::allocatePage()>
c000c62d:	c1 ef 0b             	shr    edi,0xb
c000c630:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c632:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000c638:	09 c2                	or     edx,eax
c000c63a:	81 ca 01 08 00 00    	or     edx,0x801
c000c640:	89 13                	mov    DWORD PTR [ebx],edx
c000c642:	8b 0d ac 55 02 c0    	mov    ecx,DWORD PTR ds:0xc00255ac
c000c648:	85 c9                	test   ecx,ecx
c000c64a:	7e 3d                	jle    c000c689 <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000c64c:	89 ee                	mov    esi,ebp
c000c64e:	31 db                	xor    ebx,ebx
c000c650:	83 ec 0c             	sub    esp,0xc
c000c653:	57                   	push   edi
c000c654:	e8 0f f2 ff ff       	call   c000b868 <Virt::swapIDToSector(unsigned long)>
c000c659:	89 34 24             	mov    DWORD PTR [esp],esi
c000c65c:	01 d8                	add    eax,ebx
c000c65e:	6a 01                	push   0x1
c000c660:	31 d2                	xor    edx,edx
c000c662:	43                   	inc    ebx
c000c663:	52                   	push   edx
c000c664:	81 c6 00 02 00 00    	add    esi,0x200
c000c66a:	50                   	push   eax
c000c66b:	0f be 05 b8 55 02 c0 	movsx  eax,BYTE PTR ds:0xc00255b8
c000c672:	ff 34 85 1c 66 02 c0 	push   DWORD PTR [eax*4-0x3ffd99e4]
c000c679:	e8 fe 3a 00 00       	call   c001017c <LogicalDisk::read(unsigned long long, int, void*)>
c000c67e:	83 c4 20             	add    esp,0x20
c000c681:	39 1d ac 55 02 c0    	cmp    DWORD PTR ds:0xc00255ac,ebx
c000c687:	7f c7                	jg     c000c650 <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000c689:	a1 88 62 02 c0       	mov    eax,ds:0xc0026288
c000c68e:	48                   	dec    eax
c000c68f:	52                   	push   edx
c000c690:	a3 88 62 02 c0       	mov    ds:0xc0026288,eax
c000c695:	50                   	push   eax
c000c696:	55                   	push   ebp
c000c697:	68 b2 2d 02 c0       	push   0xc0022db2
c000c69c:	e8 be 03 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000c6a1:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c6a4:	e8 a1 f1 ff ff       	call   c000b84a <Virt::freeSwapfilePage(unsigned long)>
c000c6a9:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c000c6ae:	83 c4 10             	add    esp,0x10
c000c6b1:	48                   	dec    eax
c000c6b2:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c000c6b7:	85 c0                	test   eax,eax
c000c6b9:	74 1d                	je     c000c6d8 <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000c6bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c6bf:	25 ff 0f 00 00       	and    eax,0xfff
c000c6c4:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000c6c9:	77 10                	ja     c000c6db <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000c6cb:	0f 20 d8             	mov    eax,cr3
c000c6ce:	0f 22 d8             	mov    cr3,eax
c000c6d1:	b0 01                	mov    al,0x1
c000c6d3:	e9 48 ff ff ff       	jmp    c000c620 <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000c6d8:	fb                   	sti    
c000c6d9:	eb e0                	jmp    c000c6bb <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000c6db:	83 ec 0c             	sub    esp,0xc
c000c6de:	68 c7 2d 02 c0       	push   0xc0022dc7
c000c6e3:	e8 77 03 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000c6e8:	83 c4 10             	add    esp,0x10
c000c6eb:	eb de                	jmp    c000c6cb <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000c6ed:	90                   	nop

c000c6ee <VAS::scanForEviction()>:
c000c6ee:	57                   	push   edi
c000c6ef:	31 ff                	xor    edi,edi
c000c6f1:	56                   	push   esi
c000c6f2:	53                   	push   ebx
c000c6f3:	83 ec 10             	sub    esp,0x10
c000c6f6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c6fa:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c6fd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c703:	75 0e                	jne    c000c713 <VAS::scanForEviction()+0x25>
c000c705:	89 da                	mov    edx,ebx
c000c707:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c70a:	c1 ea 16             	shr    edx,0x16
c000c70d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c711:	74 4e                	je     c000c761 <VAS::scanForEviction()+0x73>
c000c713:	53                   	push   ebx
c000c714:	56                   	push   esi
c000c715:	e8 30 f3 ff ff       	call   c000ba4a <VAS::getPageTableEntry(unsigned long)>
c000c71a:	5a                   	pop    edx
c000c71b:	8b 10                	mov    edx,DWORD PTR [eax]
c000c71d:	59                   	pop    ecx
c000c71e:	89 d1                	mov    ecx,edx
c000c720:	81 e1 01 08 00 00    	and    ecx,0x801
c000c726:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000c72c:	74 3e                	je     c000c76c <VAS::scanForEviction()+0x7e>
c000c72e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c734:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000c73a:	76 2b                	jbe    c000c767 <VAS::scanForEviction()+0x79>
c000c73c:	47                   	inc    edi
c000c73d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000c744:	83 ff 03             	cmp    edi,0x3
c000c747:	74 32                	je     c000c77b <VAS::scanForEviction()+0x8d>
c000c749:	31 db                	xor    ebx,ebx
c000c74b:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c751:	75 c0                	jne    c000c713 <VAS::scanForEviction()+0x25>
c000c753:	89 da                	mov    edx,ebx
c000c755:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c758:	c1 ea 16             	shr    edx,0x16
c000c75b:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c75f:	75 b2                	jne    c000c713 <VAS::scanForEviction()+0x25>
c000c761:	81 c3 00 00 40 00    	add    ebx,0x400000
c000c767:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000c76a:	eb 91                	jmp    c000c6fd <VAS::scanForEviction()+0xf>
c000c76c:	f6 c2 20             	test   dl,0x20
c000c76f:	74 13                	je     c000c784 <VAS::scanForEviction()+0x96>
c000c771:	83 e2 df             	and    edx,0xffffffdf
c000c774:	89 10                	mov    DWORD PTR [eax],edx
c000c776:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c779:	eb b3                	jmp    c000c72e <VAS::scanForEviction()+0x40>
c000c77b:	83 c4 10             	add    esp,0x10
c000c77e:	31 c0                	xor    eax,eax
c000c780:	5b                   	pop    ebx
c000c781:	5e                   	pop    esi
c000c782:	5f                   	pop    edi
c000c783:	c3                   	ret    
c000c784:	83 ec 08             	sub    esp,0x8
c000c787:	89 d0                	mov    eax,edx
c000c789:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c78e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c792:	53                   	push   ebx
c000c793:	68 d7 2d 02 c0       	push   0xc0022dd7
c000c798:	e8 c2 02 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000c79d:	58                   	pop    eax
c000c79e:	5a                   	pop    edx
c000c79f:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c7a2:	56                   	push   esi
c000c7a3:	e8 62 fd ff ff       	call   c000c50a <VAS::evict(unsigned long)>
c000c7a8:	59                   	pop    ecx
c000c7a9:	5b                   	pop    ebx
c000c7aa:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c7ad:	68 eb 2d 02 c0       	push   0xc0022deb
c000c7b2:	e8 a8 02 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000c7b7:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000c7be:	83 c4 10             	add    esp,0x10
c000c7c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c7c5:	83 c4 10             	add    esp,0x10
c000c7c8:	5b                   	pop    ebx
c000c7c9:	5e                   	pop    esi
c000c7ca:	5f                   	pop    edi
c000c7cb:	c3                   	ret    

c000c7cc <mapVASFirstTime>:
c000c7cc:	55                   	push   ebp
c000c7cd:	57                   	push   edi
c000c7ce:	56                   	push   esi
c000c7cf:	53                   	push   ebx
c000c7d0:	83 ec 0c             	sub    esp,0xc
c000c7d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000c7d8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000c7db:	4a                   	dec    edx
c000c7dc:	0f 84 fe 00 00 00    	je     c000c8e0 <mapVASFirstTime+0x114>
c000c7e2:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000c7e5:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000c7e8:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000c7ed:	c1 e5 15             	shl    ebp,0x15
c000c7f0:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000c7f5:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000c7fb:	29 eb                	sub    ebx,ebp
c000c7fd:	29 ef                	sub    edi,ebp
c000c7ff:	83 ec 08             	sub    esp,0x8
c000c802:	53                   	push   ebx
c000c803:	68 17 2e 02 c0       	push   0xc0022e17
c000c808:	e8 52 02 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000c80d:	e8 15 d6 ff ff       	call   c0009e27 <Phys::allocatePage()>
c000c812:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000c819:	6a 01                	push   0x1
c000c81b:	53                   	push   ebx
c000c81c:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c822:	50                   	push   eax
c000c823:	56                   	push   esi
c000c824:	e8 ad f8 ff ff       	call   c000c0d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c829:	83 c4 20             	add    esp,0x20
c000c82c:	39 fb                	cmp    ebx,edi
c000c82e:	75 cf                	jne    c000c7ff <mapVASFirstTime+0x33>
c000c830:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000c835:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000c83a:	29 eb                	sub    ebx,ebp
c000c83c:	29 ef                	sub    edi,ebp
c000c83e:	83 ec 08             	sub    esp,0x8
c000c841:	53                   	push   ebx
c000c842:	68 33 2e 02 c0       	push   0xc0022e33
c000c847:	e8 13 02 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000c84c:	58                   	pop    eax
c000c84d:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c851:	5a                   	pop    edx
c000c852:	19 c0                	sbb    eax,eax
c000c854:	83 e0 04             	and    eax,0x4
c000c857:	05 03 04 00 00       	add    eax,0x403
c000c85c:	50                   	push   eax
c000c85d:	68 47 2e 02 c0       	push   0xc0022e47
c000c862:	e8 f8 01 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000c867:	e8 bb d5 ff ff       	call   c0009e27 <Phys::allocatePage()>
c000c86c:	59                   	pop    ecx
c000c86d:	89 c5                	mov    ebp,eax
c000c86f:	58                   	pop    eax
c000c870:	55                   	push   ebp
c000c871:	68 55 2e 02 c0       	push   0xc0022e55
c000c876:	e8 e4 01 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000c87b:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c87f:	19 d2                	sbb    edx,edx
c000c881:	83 e2 04             	and    edx,0x4
c000c884:	81 c2 03 04 00 00    	add    edx,0x403
c000c88a:	89 14 24             	mov    DWORD PTR [esp],edx
c000c88d:	6a 01                	push   0x1
c000c88f:	53                   	push   ebx
c000c890:	55                   	push   ebp
c000c891:	56                   	push   esi
c000c892:	e8 3f f8 ff ff       	call   c000c0d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c897:	83 c4 18             	add    esp,0x18
c000c89a:	53                   	push   ebx
c000c89b:	56                   	push   esi
c000c89c:	e8 a9 f1 ff ff       	call   c000ba4a <VAS::getPageTableEntry(unsigned long)>
c000c8a1:	5a                   	pop    edx
c000c8a2:	59                   	pop    ecx
c000c8a3:	ff 30                	push   DWORD PTR [eax]
c000c8a5:	68 71 2e 02 c0       	push   0xc0022e71
c000c8aa:	e8 b0 01 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000c8af:	0f 20 d8             	mov    eax,cr3
c000c8b2:	83 c4 0c             	add    esp,0xc
c000c8b5:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c8bb:	56                   	push   esi
c000c8bc:	50                   	push   eax
c000c8bd:	68 7c 2e 02 c0       	push   0xc0022e7c
c000c8c2:	e8 98 01 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000c8c7:	83 c4 10             	add    esp,0x10
c000c8ca:	39 df                	cmp    edi,ebx
c000c8cc:	0f 85 6c ff ff ff    	jne    c000c83e <mapVASFirstTime+0x72>
c000c8d2:	0f 20 d8             	mov    eax,cr3
c000c8d5:	0f 22 d8             	mov    cr3,eax
c000c8d8:	83 c4 0c             	add    esp,0xc
c000c8db:	5b                   	pop    ebx
c000c8dc:	5e                   	pop    esi
c000c8dd:	5f                   	pop    edi
c000c8de:	5d                   	pop    ebp
c000c8df:	c3                   	ret    
c000c8e0:	83 ec 0c             	sub    esp,0xc
c000c8e3:	68 fe 2d 02 c0       	push   0xc0022dfe
c000c8e8:	e8 72 01 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000c8ed:	83 c4 10             	add    esp,0x10
c000c8f0:	83 c4 0c             	add    esp,0xc
c000c8f3:	5b                   	pop    ebx
c000c8f4:	5e                   	pop    esi
c000c8f5:	5f                   	pop    edi
c000c8f6:	5d                   	pop    ebp
c000c8f7:	c3                   	ret    

c000c8f8 <__cxa_atexit>:
c000c8f8:	31 c0                	xor    eax,eax
c000c8fa:	c3                   	ret    

c000c8fb <__cxa_finalize>:
c000c8fb:	c3                   	ret    

c000c8fc <__stack_chk_fail>:
c000c8fc:	55                   	push   ebp
c000c8fd:	89 e5                	mov    ebp,esp
c000c8ff:	83 ec 14             	sub    esp,0x14
c000c902:	68 94 2e 02 c0       	push   0xc0022e94
c000c907:	e8 53 01 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000c90c:	58                   	pop    eax
c000c90d:	5a                   	pop    edx
c000c90e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c911:	68 e4 2e 02 c0       	push   0xc0022ee4
c000c916:	e8 44 01 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000c91b:	59                   	pop    ecx
c000c91c:	58                   	pop    eax
c000c91d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c920:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c923:	68 e4 2e 02 c0       	push   0xc0022ee4
c000c928:	e8 32 01 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000c92d:	5a                   	pop    edx
c000c92e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c931:	59                   	pop    ecx
c000c932:	8b 00                	mov    eax,DWORD PTR [eax]
c000c934:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c937:	68 e4 2e 02 c0       	push   0xc0022ee4
c000c93c:	e8 1e 01 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000c941:	5a                   	pop    edx
c000c942:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c945:	59                   	pop    ecx
c000c946:	8b 00                	mov    eax,DWORD PTR [eax]
c000c948:	8b 00                	mov    eax,DWORD PTR [eax]
c000c94a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c94d:	68 e4 2e 02 c0       	push   0xc0022ee4
c000c952:	e8 08 01 00 00       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000c957:	c7 04 24 ec 2e 02 c0 	mov    DWORD PTR [esp],0xc0022eec
c000c95e:	e8 9c 79 00 00       	call   c00142ff <Krnl::panic(char const*)>
c000c963:	83 c4 10             	add    esp,0x10
c000c966:	c9                   	leave  
c000c967:	c3                   	ret    

c000c968 <__cxa_pure_virtual>:
c000c968:	83 ec 18             	sub    esp,0x18
c000c96b:	68 04 2f 02 c0       	push   0xc0022f04
c000c970:	e8 8a 79 00 00       	call   c00142ff <Krnl::panic(char const*)>
c000c975:	83 c4 1c             	add    esp,0x1c
c000c978:	c3                   	ret    

c000c979 <operator new[](unsigned long)>:
c000c979:	e9 45 d0 ff ff       	jmp    c00099c3 <malloc>

c000c97e <operator delete(void*, unsigned long)>:
c000c97e:	e9 60 d0 ff ff       	jmp    c00099e3 <rfree>

c000c983 <operator delete[](void*)>:
c000c983:	e9 5b d0 ff ff       	jmp    c00099e3 <rfree>

c000c988 <operator delete[](void*, unsigned long)>:
c000c988:	e9 56 d0 ff ff       	jmp    c00099e3 <rfree>

c000c98d <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000c98d:	55                   	push   ebp
c000c98e:	b9 11 00 00 00       	mov    ecx,0x11
c000c993:	57                   	push   edi
c000c994:	56                   	push   esi
c000c995:	be ea 29 02 c0       	mov    esi,0xc00229ea
c000c99a:	53                   	push   ebx
c000c99b:	83 ec 20             	sub    esp,0x20
c000c99e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c9a2:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000c9a6:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000c9aa:	fc                   	cld    
c000c9ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c9ad:	89 ee                	mov    esi,ebp
c000c9af:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c9b3:	eb 02                	jmp    c000c9b7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000c9b5:	89 c6                	mov    esi,eax
c000c9b7:	31 d2                	xor    edx,edx
c000c9b9:	41                   	inc    ecx
c000c9ba:	89 f0                	mov    eax,esi
c000c9bc:	f7 f3                	div    ebx
c000c9be:	39 de                	cmp    esi,ebx
c000c9c0:	73 f3                	jae    c000c9b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000c9c2:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000c9c5:	eb 02                	jmp    c000c9c9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000c9c7:	89 c5                	mov    ebp,eax
c000c9c9:	31 d2                	xor    edx,edx
c000c9cb:	49                   	dec    ecx
c000c9cc:	89 e8                	mov    eax,ebp
c000c9ce:	f7 f3                	div    ebx
c000c9d0:	39 dd                	cmp    ebp,ebx
c000c9d2:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000c9d6:	88 11                	mov    BYTE PTR [ecx],dl
c000c9d8:	73 ed                	jae    c000c9c7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000c9da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c9de:	83 c4 20             	add    esp,0x20
c000c9e1:	5b                   	pop    ebx
c000c9e2:	5e                   	pop    esi
c000c9e3:	5f                   	pop    edi
c000c9e4:	5d                   	pop    ebp
c000c9e5:	c3                   	ret    

c000c9e6 <Dbg::logc(char)>:
c000c9e6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c9ea:	f6 05 80 61 02 c0 10 	test   BYTE PTR ds:0xc0026180,0x10
c000c9f1:	75 12                	jne    c000ca05 <Dbg::logc(char)+0x1f>
c000c9f3:	ba fd 03 00 00       	mov    edx,0x3fd
c000c9f8:	ec                   	in     al,dx
c000c9f9:	a8 20                	test   al,0x20
c000c9fb:	74 fb                	je     c000c9f8 <Dbg::logc(char)+0x12>
c000c9fd:	ba f8 03 00 00       	mov    edx,0x3f8
c000ca02:	88 c8                	mov    al,cl
c000ca04:	ee                   	out    dx,al
c000ca05:	c3                   	ret    

c000ca06 <Dbg::logs(char*)>:
c000ca06:	53                   	push   ebx
c000ca07:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ca0b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ca0e:	84 c0                	test   al,al
c000ca10:	74 0f                	je     c000ca21 <Dbg::logs(char*)+0x1b>
c000ca12:	50                   	push   eax
c000ca13:	43                   	inc    ebx
c000ca14:	e8 cd ff ff ff       	call   c000c9e6 <Dbg::logc(char)>
c000ca19:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ca1c:	5a                   	pop    edx
c000ca1d:	84 c0                	test   al,al
c000ca1f:	75 f1                	jne    c000ca12 <Dbg::logs(char*)+0xc>
c000ca21:	5b                   	pop    ebx
c000ca22:	c3                   	ret    

c000ca23 <Dbg::logWriteInt(unsigned int)>:
c000ca23:	83 ec 10             	sub    esp,0x10
c000ca26:	6a 0a                	push   0xa
c000ca28:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ca2c:	50                   	push   eax
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	e8 57 ff ff ff       	call   c000c98d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ca36:	50                   	push   eax
c000ca37:	e8 ca ff ff ff       	call   c000ca06 <Dbg::logs(char*)>
c000ca3c:	83 c4 20             	add    esp,0x20
c000ca3f:	c3                   	ret    

c000ca40 <Dbg::logWriteIntBase(unsigned int, int)>:
c000ca40:	83 ec 10             	sub    esp,0x10
c000ca43:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca47:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ca4b:	50                   	push   eax
c000ca4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca50:	e8 38 ff ff ff       	call   c000c98d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ca55:	50                   	push   eax
c000ca56:	e8 ab ff ff ff       	call   c000ca06 <Dbg::logs(char*)>
c000ca5b:	83 c4 20             	add    esp,0x20
c000ca5e:	c3                   	ret    

c000ca5f <Dbg::kprintf(char const*, ...)>:
c000ca5f:	55                   	push   ebp
c000ca60:	57                   	push   edi
c000ca61:	56                   	push   esi
c000ca62:	53                   	push   ebx
c000ca63:	83 ec 0c             	sub    esp,0xc
c000ca66:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ca6a:	f6 05 80 61 02 c0 10 	test   BYTE PTR ds:0xc0026180,0x10
c000ca71:	74 08                	je     c000ca7b <Dbg::kprintf(char const*, ...)+0x1c>
c000ca73:	83 c4 0c             	add    esp,0xc
c000ca76:	5b                   	pop    ebx
c000ca77:	5e                   	pop    esi
c000ca78:	5f                   	pop    edi
c000ca79:	5d                   	pop    ebp
c000ca7a:	c3                   	ret    
c000ca7b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ca7f:	31 db                	xor    ebx,ebx
c000ca81:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ca85:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000ca88:	84 c0                	test   al,al
c000ca8a:	74 e7                	je     c000ca73 <Dbg::kprintf(char const*, ...)+0x14>
c000ca8c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000ca8f:	3c 25                	cmp    al,0x25
c000ca91:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000ca94:	75 44                	jne    c000cada <Dbg::kprintf(char const*, ...)+0x7b>
c000ca96:	83 c3 02             	add    ebx,0x2
c000ca99:	8a 07                	mov    al,BYTE PTR [edi]
c000ca9b:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000ca9e:	83 e8 25             	sub    eax,0x25
c000caa1:	3c 53                	cmp    al,0x53
c000caa3:	0f 87 c9 00 00 00    	ja     c000cb72 <Dbg::kprintf(char const*, ...)+0x113>
c000caa9:	0f b6 c0             	movzx  eax,al
c000caac:	ff 24 85 18 2f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd0e8]
c000cab3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cab7:	89 c8                	mov    eax,ecx
c000cab9:	83 c1 04             	add    ecx,0x4
c000cabc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cac0:	ff 30                	push   DWORD PTR [eax]
c000cac2:	e8 5c ff ff ff       	call   c000ca23 <Dbg::logWriteInt(unsigned int)>
c000cac7:	5f                   	pop    edi
c000cac8:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000cacc:	84 c0                	test   al,al
c000cace:	74 a3                	je     c000ca73 <Dbg::kprintf(char const*, ...)+0x14>
c000cad0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cad3:	3c 25                	cmp    al,0x25
c000cad5:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cad8:	74 bc                	je     c000ca96 <Dbg::kprintf(char const*, ...)+0x37>
c000cada:	50                   	push   eax
c000cadb:	89 eb                	mov    ebx,ebp
c000cadd:	e8 04 ff ff ff       	call   c000c9e6 <Dbg::logc(char)>
c000cae2:	89 fd                	mov    ebp,edi
c000cae4:	58                   	pop    eax
c000cae5:	eb e1                	jmp    c000cac8 <Dbg::kprintf(char const*, ...)+0x69>
c000cae7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000caeb:	89 c8                	mov    eax,ecx
c000caed:	83 c1 04             	add    ecx,0x4
c000caf0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000caf4:	ff 30                	push   DWORD PTR [eax]
c000caf6:	e8 0b ff ff ff       	call   c000ca06 <Dbg::logs(char*)>
c000cafb:	58                   	pop    eax
c000cafc:	eb ca                	jmp    c000cac8 <Dbg::kprintf(char const*, ...)+0x69>
c000cafe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb02:	89 d0                	mov    eax,edx
c000cb04:	83 c2 04             	add    edx,0x4
c000cb07:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb0b:	ff 30                	push   DWORD PTR [eax]
c000cb0d:	e8 11 ff ff ff       	call   c000ca23 <Dbg::logWriteInt(unsigned int)>
c000cb12:	58                   	pop    eax
c000cb13:	eb b3                	jmp    c000cac8 <Dbg::kprintf(char const*, ...)+0x69>
c000cb15:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb19:	89 d0                	mov    eax,edx
c000cb1b:	83 c2 04             	add    edx,0x4
c000cb1e:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000cb21:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb25:	50                   	push   eax
c000cb26:	e8 bb fe ff ff       	call   c000c9e6 <Dbg::logc(char)>
c000cb2b:	58                   	pop    eax
c000cb2c:	eb 9a                	jmp    c000cac8 <Dbg::kprintf(char const*, ...)+0x69>
c000cb2e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cb32:	89 c8                	mov    eax,ecx
c000cb34:	83 c1 04             	add    ecx,0x4
c000cb37:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cb3b:	6a 10                	push   0x10
c000cb3d:	ff 30                	push   DWORD PTR [eax]
c000cb3f:	e8 fc fe ff ff       	call   c000ca40 <Dbg::logWriteIntBase(unsigned int, int)>
c000cb44:	59                   	pop    ecx
c000cb45:	5f                   	pop    edi
c000cb46:	eb 80                	jmp    c000cac8 <Dbg::kprintf(char const*, ...)+0x69>
c000cb48:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb4c:	89 d0                	mov    eax,edx
c000cb4e:	83 c2 08             	add    edx,0x8
c000cb51:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb55:	6a 10                	push   0x10
c000cb57:	ff 30                	push   DWORD PTR [eax]
c000cb59:	e8 e2 fe ff ff       	call   c000ca40 <Dbg::logWriteIntBase(unsigned int, int)>
c000cb5e:	58                   	pop    eax
c000cb5f:	5a                   	pop    edx
c000cb60:	e9 63 ff ff ff       	jmp    c000cac8 <Dbg::kprintf(char const*, ...)+0x69>
c000cb65:	6a 25                	push   0x25
c000cb67:	e8 7a fe ff ff       	call   c000c9e6 <Dbg::logc(char)>
c000cb6c:	58                   	pop    eax
c000cb6d:	e9 56 ff ff ff       	jmp    c000cac8 <Dbg::kprintf(char const*, ...)+0x69>
c000cb72:	6a 25                	push   0x25
c000cb74:	e8 6d fe ff ff       	call   c000c9e6 <Dbg::logc(char)>
c000cb79:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000cb7c:	50                   	push   eax
c000cb7d:	e8 64 fe ff ff       	call   c000c9e6 <Dbg::logc(char)>
c000cb82:	5a                   	pop    edx
c000cb83:	59                   	pop    ecx
c000cb84:	e9 3f ff ff ff       	jmp    c000cac8 <Dbg::kprintf(char const*, ...)+0x69>
c000cb89:	90                   	nop

c000cb8a <File::read(unsigned long long, void*, int*)>:
c000cb8a:	53                   	push   ebx
c000cb8b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cb8f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cb93:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cb9a:	3c 19                	cmp    al,0x19
c000cb9c:	77 35                	ja     c000cbd3 <File::read(unsigned long long, void*, int*)+0x49>
c000cb9e:	8b 04 85 20 67 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd98e0]
c000cba5:	85 c0                	test   eax,eax
c000cba7:	74 2a                	je     c000cbd3 <File::read(unsigned long long, void*, int*)+0x49>
c000cba9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cbaf:	85 c0                	test   eax,eax
c000cbb1:	74 20                	je     c000cbd3 <File::read(unsigned long long, void*, int*)+0x49>
c000cbb3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cbb7:	74 21                	je     c000cbda <File::read(unsigned long long, void*, int*)+0x50>
c000cbb9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cbbb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cbbf:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cbc5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cbc9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cbcd:	5b                   	pop    ebx
c000cbce:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000cbd1:	ff e0                	jmp    eax
c000cbd3:	b8 0b 00 00 00       	mov    eax,0xb
c000cbd8:	eb 05                	jmp    c000cbdf <File::read(unsigned long long, void*, int*)+0x55>
c000cbda:	b8 05 00 00 00       	mov    eax,0x5
c000cbdf:	5b                   	pop    ebx
c000cbe0:	c3                   	ret    
c000cbe1:	90                   	nop

c000cbe2 <File::write(unsigned long long, void*, int*)>:
c000cbe2:	53                   	push   ebx
c000cbe3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cbe7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cbeb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cbf2:	3c 19                	cmp    al,0x19
c000cbf4:	77 35                	ja     c000cc2b <File::write(unsigned long long, void*, int*)+0x49>
c000cbf6:	8b 04 85 20 67 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd98e0]
c000cbfd:	85 c0                	test   eax,eax
c000cbff:	74 2a                	je     c000cc2b <File::write(unsigned long long, void*, int*)+0x49>
c000cc01:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cc07:	85 c0                	test   eax,eax
c000cc09:	74 20                	je     c000cc2b <File::write(unsigned long long, void*, int*)+0x49>
c000cc0b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cc0f:	74 21                	je     c000cc32 <File::write(unsigned long long, void*, int*)+0x50>
c000cc11:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cc13:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cc17:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cc1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc21:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc25:	5b                   	pop    ebx
c000cc26:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000cc29:	ff e0                	jmp    eax
c000cc2b:	b8 0b 00 00 00       	mov    eax,0xb
c000cc30:	eb 05                	jmp    c000cc37 <File::write(unsigned long long, void*, int*)+0x55>
c000cc32:	b8 05 00 00 00       	mov    eax,0x5
c000cc37:	5b                   	pop    ebx
c000cc38:	c3                   	ret    
c000cc39:	90                   	nop

c000cc3a <Directory::read(unsigned long long, void*, int*)>:
c000cc3a:	53                   	push   ebx
c000cc3b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc3f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cc43:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cc4a:	3c 19                	cmp    al,0x19
c000cc4c:	77 35                	ja     c000cc83 <Directory::read(unsigned long long, void*, int*)+0x49>
c000cc4e:	8b 04 85 20 67 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd98e0]
c000cc55:	85 c0                	test   eax,eax
c000cc57:	74 2a                	je     c000cc83 <Directory::read(unsigned long long, void*, int*)+0x49>
c000cc59:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cc5f:	85 c0                	test   eax,eax
c000cc61:	74 20                	je     c000cc83 <Directory::read(unsigned long long, void*, int*)+0x49>
c000cc63:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cc67:	74 21                	je     c000cc8a <Directory::read(unsigned long long, void*, int*)+0x50>
c000cc69:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cc6b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cc6f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cc75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc7d:	5b                   	pop    ebx
c000cc7e:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000cc81:	ff e0                	jmp    eax
c000cc83:	b8 0b 00 00 00       	mov    eax,0xb
c000cc88:	eb 05                	jmp    c000cc8f <Directory::read(unsigned long long, void*, int*)+0x55>
c000cc8a:	b8 05 00 00 00       	mov    eax,0x5
c000cc8f:	5b                   	pop    ebx
c000cc90:	c3                   	ret    
c000cc91:	90                   	nop

c000cc92 <Directory::write(unsigned long long, void*, int*)>:
c000cc92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc96:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000cc9d:	b8 0b 00 00 00       	mov    eax,0xb
c000cca2:	80 fa 19             	cmp    dl,0x19
c000cca5:	77 18                	ja     c000ccbf <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cca7:	8b 14 95 20 67 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd98e0]
c000ccae:	85 d2                	test   edx,edx
c000ccb0:	74 0d                	je     c000ccbf <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ccb2:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000ccb9:	19 c0                	sbb    eax,eax
c000ccbb:	83 e0 0a             	and    eax,0xa
c000ccbe:	40                   	inc    eax
c000ccbf:	c3                   	ret    

c000ccc0 <File::isAtty()>:
c000ccc0:	31 c0                	xor    eax,eax
c000ccc2:	c3                   	ret    
c000ccc3:	90                   	nop

c000ccc4 <Directory::isAtty()>:
c000ccc4:	31 c0                	xor    eax,eax
c000ccc6:	c3                   	ret    
c000ccc7:	90                   	nop

c000ccc8 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ccc8:	b8 0a 00 00 00       	mov    eax,0xa
c000cccd:	c3                   	ret    

c000ccce <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ccce:	b8 0a 00 00 00       	mov    eax,0xa
c000ccd3:	c3                   	ret    

c000ccd4 <Filesystem::allocateSwapfile(char const*, int)>:
c000ccd4:	31 c0                	xor    eax,eax
c000ccd6:	31 d2                	xor    edx,edx
c000ccd8:	c3                   	ret    
c000ccd9:	90                   	nop

c000ccda <File::~File()>:
c000ccda:	83 ec 0c             	sub    esp,0xc
c000ccdd:	ba d8 30 02 c0       	mov    edx,0xc00230d8
c000cce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cce6:	89 10                	mov    DWORD PTR [eax],edx
c000cce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccec:	83 ec 0c             	sub    esp,0xc
c000ccef:	50                   	push   eax
c000ccf0:	e8 e3 e7 ff ff       	call   c000b4d8 <UnixFile::~UnixFile()>
c000ccf5:	83 c4 10             	add    esp,0x10
c000ccf8:	90                   	nop
c000ccf9:	83 c4 0c             	add    esp,0xc
c000ccfc:	c3                   	ret    
c000ccfd:	90                   	nop

c000ccfe <File::~File()>:
c000ccfe:	83 ec 0c             	sub    esp,0xc
c000cd01:	83 ec 0c             	sub    esp,0xc
c000cd04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd08:	e8 cd ff ff ff       	call   c000ccda <File::~File()>
c000cd0d:	83 c4 10             	add    esp,0x10
c000cd10:	83 ec 08             	sub    esp,0x8
c000cd13:	68 14 01 00 00       	push   0x114
c000cd18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd1c:	e8 5d fc ff ff       	call   c000c97e <operator delete(void*, unsigned long)>
c000cd21:	83 c4 10             	add    esp,0x10
c000cd24:	83 c4 0c             	add    esp,0xc
c000cd27:	c3                   	ret    

c000cd28 <Directory::~Directory()>:
c000cd28:	83 ec 0c             	sub    esp,0xc
c000cd2b:	ba f4 30 02 c0       	mov    edx,0xc00230f4
c000cd30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd34:	89 10                	mov    DWORD PTR [eax],edx
c000cd36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd3a:	83 ec 0c             	sub    esp,0xc
c000cd3d:	50                   	push   eax
c000cd3e:	e8 95 e7 ff ff       	call   c000b4d8 <UnixFile::~UnixFile()>
c000cd43:	83 c4 10             	add    esp,0x10
c000cd46:	90                   	nop
c000cd47:	83 c4 0c             	add    esp,0xc
c000cd4a:	c3                   	ret    
c000cd4b:	90                   	nop

c000cd4c <Directory::~Directory()>:
c000cd4c:	83 ec 0c             	sub    esp,0xc
c000cd4f:	83 ec 0c             	sub    esp,0xc
c000cd52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd56:	e8 cd ff ff ff       	call   c000cd28 <Directory::~Directory()>
c000cd5b:	83 c4 10             	add    esp,0x10
c000cd5e:	83 ec 08             	sub    esp,0x8
c000cd61:	68 14 01 00 00       	push   0x114
c000cd66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd6a:	e8 0f fc ff ff       	call   c000c97e <operator delete(void*, unsigned long)>
c000cd6f:	83 c4 10             	add    esp,0x10
c000cd72:	83 c4 0c             	add    esp,0xc
c000cd75:	c3                   	ret    

c000cd76 <Filesystem::Filesystem()>:
c000cd76:	ba 70 30 02 c0       	mov    edx,0xc0023070
c000cd7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd7f:	89 10                	mov    DWORD PTR [eax],edx
c000cd81:	8b 15 94 62 02 c0    	mov    edx,DWORD PTR ds:0xc0026294
c000cd87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd8b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000cd8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd92:	a3 94 62 02 c0       	mov    ds:0xc0026294,eax
c000cd97:	90                   	nop
c000cd98:	c3                   	ret    
c000cd99:	90                   	nop

c000cd9a <Filesystem::~Filesystem()>:
c000cd9a:	ba 70 30 02 c0       	mov    edx,0xc0023070
c000cd9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cda3:	89 10                	mov    DWORD PTR [eax],edx
c000cda5:	90                   	nop
c000cda6:	c3                   	ret    
c000cda7:	90                   	nop

c000cda8 <Filesystem::~Filesystem()>:
c000cda8:	83 ec 0c             	sub    esp,0xc
c000cdab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cdaf:	e8 e6 ff ff ff       	call   c000cd9a <Filesystem::~Filesystem()>
c000cdb4:	83 c4 04             	add    esp,0x4
c000cdb7:	83 ec 08             	sub    esp,0x8
c000cdba:	6a 08                	push   0x8
c000cdbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdc0:	e8 b9 fb ff ff       	call   c000c97e <operator delete(void*, unsigned long)>
c000cdc5:	83 c4 10             	add    esp,0x10
c000cdc8:	83 c4 0c             	add    esp,0xc
c000cdcb:	c3                   	ret    

c000cdcc <Fs::getcwd(Process*, char*, int)>:
c000cdcc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cdd0:	31 c0                	xor    eax,eax
c000cdd2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000cdd5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000cdd9:	7d 15                	jge    c000cdf0 <Fs::getcwd(Process*, char*, int)+0x24>
c000cddb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cddf:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000cde6:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cde9:	84 c9                	test   cl,cl
c000cdeb:	74 06                	je     c000cdf3 <Fs::getcwd(Process*, char*, int)+0x27>
c000cded:	40                   	inc    eax
c000cdee:	eb e2                	jmp    c000cdd2 <Fs::getcwd(Process*, char*, int)+0x6>
c000cdf0:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cdf3:	31 c0                	xor    eax,eax
c000cdf5:	c3                   	ret    

c000cdf6 <Fs::initVFS()>:
c000cdf6:	83 ec 18             	sub    esp,0x18
c000cdf9:	6a 08                	push   0x8
c000cdfb:	e8 c3 cb ff ff       	call   c00099c3 <malloc>
c000ce00:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce03:	e8 4c e3 00 00       	call   c001b154 <FAT::FAT()>
c000ce08:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ce0f:	e8 af cb ff ff       	call   c00099c3 <malloc>
c000ce14:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce17:	e8 96 f5 00 00       	call   c001c3b2 <ISO9660::ISO9660()>
c000ce1c:	83 c4 1c             	add    esp,0x1c
c000ce1f:	c3                   	ret    

c000ce20 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000ce20:	55                   	push   ebp
c000ce21:	57                   	push   edi
c000ce22:	56                   	push   esi
c000ce23:	53                   	push   ebx
c000ce24:	81 ec 10 04 00 00    	sub    esp,0x410
c000ce2a:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000ce31:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000ce38:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000ce3f:	68 00 04 00 00       	push   0x400
c000ce44:	6a 00                	push   0x0
c000ce46:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000ce4a:	56                   	push   esi
c000ce4b:	e8 34 38 ff ff       	call   c0000684 <memset>
c000ce50:	83 c4 10             	add    esp,0x10
c000ce53:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000ce57:	75 0b                	jne    c000ce64 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000ce59:	50                   	push   eax
c000ce5a:	50                   	push   eax
c000ce5b:	57                   	push   edi
c000ce5c:	56                   	push   esi
c000ce5d:	e8 de 38 ff ff       	call   c0000740 <strcpy>
c000ce62:	eb 41                	jmp    c000cea5 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000ce64:	8a 07                	mov    al,BYTE PTR [edi]
c000ce66:	3c 5c                	cmp    al,0x5c
c000ce68:	74 04                	je     c000ce6e <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000ce6a:	3c 2f                	cmp    al,0x2f
c000ce6c:	75 18                	jne    c000ce86 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000ce6e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ce71:	3c 60                	cmp    al,0x60
c000ce73:	7e 03                	jle    c000ce78 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000ce75:	83 e8 20             	sub    eax,0x20
c000ce78:	88 04 24             	mov    BYTE PTR [esp],al
c000ce7b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ce82:	50                   	push   eax
c000ce83:	50                   	push   eax
c000ce84:	eb 18                	jmp    c000ce9e <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000ce86:	50                   	push   eax
c000ce87:	50                   	push   eax
c000ce88:	55                   	push   ebp
c000ce89:	56                   	push   esi
c000ce8a:	e8 b1 38 ff ff       	call   c0000740 <strcpy>
c000ce8f:	5a                   	pop    edx
c000ce90:	59                   	pop    ecx
c000ce91:	68 1a 46 02 c0       	push   0xc002461a
c000ce96:	56                   	push   esi
c000ce97:	e8 e4 39 ff ff       	call   c0000880 <strcat>
c000ce9c:	5d                   	pop    ebp
c000ce9d:	58                   	pop    eax
c000ce9e:	57                   	push   edi
c000ce9f:	56                   	push   esi
c000cea0:	e8 db 39 ff ff       	call   c0000880 <strcat>
c000cea5:	83 c4 10             	add    esp,0x10
c000cea8:	8a 04 24             	mov    al,BYTE PTR [esp]
c000ceab:	3c 60                	cmp    al,0x60
c000cead:	7e 03                	jle    c000ceb2 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000ceaf:	83 e8 20             	sub    eax,0x20
c000ceb2:	88 04 24             	mov    BYTE PTR [esp],al
c000ceb5:	88 03                	mov    BYTE PTR [ebx],al
c000ceb7:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000cebe:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000cec4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000cec8:	bf 03 00 00 00       	mov    edi,0x3
c000cecd:	b8 03 00 00 00       	mov    eax,0x3
c000ced2:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000ced5:	84 d2                	test   dl,dl
c000ced7:	0f 84 91 00 00 00    	je     c000cf6e <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000cedd:	8d 4f 01             	lea    ecx,[edi+0x1]
c000cee0:	80 fa 5c             	cmp    dl,0x5c
c000cee3:	74 05                	je     c000ceea <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000cee5:	80 fa 2f             	cmp    dl,0x2f
c000cee8:	75 12                	jne    c000cefc <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000ceea:	89 c5                	mov    ebp,eax
c000ceec:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000cef1:	74 09                	je     c000cefc <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000cef3:	40                   	inc    eax
c000cef4:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000cef8:	89 cf                	mov    edi,ecx
c000cefa:	eb d6                	jmp    c000ced2 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000cefc:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000cf01:	75 5b                	jne    c000cf5e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cf03:	80 fa 2e             	cmp    dl,0x2e
c000cf06:	75 56                	jne    c000cf5e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cf08:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000cf0c:	74 19                	je     c000cf27 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000cf0e:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cf13:	74 53                	je     c000cf68 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cf15:	89 f9                	mov    ecx,edi
c000cf17:	41                   	inc    ecx
c000cf18:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cf1b:	80 fa 2f             	cmp    dl,0x2f
c000cf1e:	74 f7                	je     c000cf17 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cf20:	80 fa 5c             	cmp    dl,0x5c
c000cf23:	74 f2                	je     c000cf17 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cf25:	eb d1                	jmp    c000cef8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf27:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cf2c:	74 3a                	je     c000cf68 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cf2e:	83 f8 03             	cmp    eax,0x3
c000cf31:	74 c5                	je     c000cef8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf33:	41                   	inc    ecx
c000cf34:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cf37:	80 fa 2f             	cmp    dl,0x2f
c000cf3a:	74 f7                	je     c000cf33 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cf3c:	80 fa 5c             	cmp    dl,0x5c
c000cf3f:	74 f2                	je     c000cf33 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cf41:	48                   	dec    eax
c000cf42:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cf46:	75 06                	jne    c000cf4e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cf48:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cf4c:	eb f3                	jmp    c000cf41 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000cf4e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cf52:	74 07                	je     c000cf5b <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000cf54:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cf58:	48                   	dec    eax
c000cf59:	eb f3                	jmp    c000cf4e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cf5b:	40                   	inc    eax
c000cf5c:	eb 9a                	jmp    c000cef8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf5e:	80 fa 2f             	cmp    dl,0x2f
c000cf61:	74 95                	je     c000cef8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf63:	80 fa 5c             	cmp    dl,0x5c
c000cf66:	74 90                	je     c000cef8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf68:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000cf6b:	40                   	inc    eax
c000cf6c:	eb 8a                	jmp    c000cef8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf6e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cf72:	83 ec 0c             	sub    esp,0xc
c000cf75:	53                   	push   ebx
c000cf76:	e8 25 37 ff ff       	call   c00006a0 <strlen>
c000cf7b:	83 c4 10             	add    esp,0x10
c000cf7e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000cf83:	75 26                	jne    c000cfab <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000cf85:	83 ec 0c             	sub    esp,0xc
c000cf88:	53                   	push   ebx
c000cf89:	e8 12 37 ff ff       	call   c00006a0 <strlen>
c000cf8e:	83 c4 10             	add    esp,0x10
c000cf91:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000cf96:	74 26                	je     c000cfbe <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000cf98:	83 ec 0c             	sub    esp,0xc
c000cf9b:	53                   	push   ebx
c000cf9c:	e8 ff 36 ff ff       	call   c00006a0 <strlen>
c000cfa1:	83 c4 10             	add    esp,0x10
c000cfa4:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000cfa9:	eb c7                	jmp    c000cf72 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000cfab:	83 ec 0c             	sub    esp,0xc
c000cfae:	53                   	push   ebx
c000cfaf:	e8 ec 36 ff ff       	call   c00006a0 <strlen>
c000cfb4:	83 c4 10             	add    esp,0x10
c000cfb7:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000cfbc:	74 c7                	je     c000cf85 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000cfbe:	81 c4 0c 04 00 00    	add    esp,0x40c
c000cfc4:	5b                   	pop    ebx
c000cfc5:	5e                   	pop    esi
c000cfc6:	5f                   	pop    edi
c000cfc7:	5d                   	pop    ebp
c000cfc8:	c3                   	ret    
c000cfc9:	90                   	nop

c000cfca <File::File(char const*, Process*)>:
c000cfca:	83 ec 0c             	sub    esp,0xc
c000cfcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfd1:	83 ec 08             	sub    esp,0x8
c000cfd4:	6a 00                	push   0x0
c000cfd6:	50                   	push   eax
c000cfd7:	e8 1a e3 ff ff       	call   c000b2f6 <UnixFile::UnixFile(int)>
c000cfdc:	83 c4 10             	add    esp,0x10
c000cfdf:	ba d8 30 02 c0       	mov    edx,0xc00230d8
c000cfe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfe8:	89 10                	mov    DWORD PTR [eax],edx
c000cfea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cfee:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000cff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cff8:	83 c0 0d             	add    eax,0xd
c000cffb:	83 ec 04             	sub    esp,0x4
c000cffe:	52                   	push   edx
c000cfff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d003:	50                   	push   eax
c000d004:	e8 17 fe ff ff       	call   c000ce20 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d009:	83 c4 10             	add    esp,0x10
c000d00c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d010:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d013:	8d 50 bf             	lea    edx,[eax-0x41]
c000d016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d01a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d024:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d028:	90                   	nop
c000d029:	83 c4 0c             	add    esp,0xc
c000d02c:	c3                   	ret    
c000d02d:	90                   	nop

c000d02e <File::open(FileOpenMode)>:
c000d02e:	53                   	push   ebx
c000d02f:	b8 0b 00 00 00       	mov    eax,0xb
c000d034:	83 ec 08             	sub    esp,0x8
c000d037:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d03b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d042:	80 fa 19             	cmp    dl,0x19
c000d045:	77 40                	ja     c000d087 <File::open(FileOpenMode)+0x59>
c000d047:	8b 14 95 20 67 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd98e0]
c000d04e:	85 d2                	test   edx,edx
c000d050:	74 35                	je     c000d087 <File::open(FileOpenMode)+0x59>
c000d052:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d058:	85 d2                	test   edx,edx
c000d05a:	74 2b                	je     c000d087 <File::open(FileOpenMode)+0x59>
c000d05c:	b8 06 00 00 00       	mov    eax,0x6
c000d061:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d065:	75 20                	jne    c000d087 <File::open(FileOpenMode)+0x59>
c000d067:	8b 02                	mov    eax,DWORD PTR [edx]
c000d069:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d06f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d073:	51                   	push   ecx
c000d074:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d077:	51                   	push   ecx
c000d078:	52                   	push   edx
c000d079:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d07c:	83 c4 10             	add    esp,0x10
c000d07f:	85 c0                	test   eax,eax
c000d081:	75 04                	jne    c000d087 <File::open(FileOpenMode)+0x59>
c000d083:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d087:	83 c4 08             	add    esp,0x8
c000d08a:	5b                   	pop    ebx
c000d08b:	c3                   	ret    

c000d08c <File::close()>:
c000d08c:	53                   	push   ebx
c000d08d:	b8 0b 00 00 00       	mov    eax,0xb
c000d092:	83 ec 08             	sub    esp,0x8
c000d095:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d099:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d0a0:	80 fa 19             	cmp    dl,0x19
c000d0a3:	77 41                	ja     c000d0e6 <File::close()+0x5a>
c000d0a5:	8b 1c 95 20 67 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd98e0]
c000d0ac:	85 db                	test   ebx,ebx
c000d0ae:	74 36                	je     c000d0e6 <File::close()+0x5a>
c000d0b0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d0b7:	74 2d                	je     c000d0e6 <File::close()+0x5a>
c000d0b9:	b8 05 00 00 00       	mov    eax,0x5
c000d0be:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d0c2:	74 22                	je     c000d0e6 <File::close()+0x5a>
c000d0c4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d0c8:	8b 04 95 20 67 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd98e0]
c000d0cf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d0d5:	53                   	push   ebx
c000d0d6:	53                   	push   ebx
c000d0d7:	8b 10                	mov    edx,DWORD PTR [eax]
c000d0d9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d0df:	50                   	push   eax
c000d0e0:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d0e3:	83 c4 10             	add    esp,0x10
c000d0e6:	83 c4 08             	add    esp,0x8
c000d0e9:	5b                   	pop    ebx
c000d0ea:	c3                   	ret    
c000d0eb:	90                   	nop

c000d0ec <File::seek(unsigned long long)>:
c000d0ec:	56                   	push   esi
c000d0ed:	53                   	push   ebx
c000d0ee:	b8 0b 00 00 00       	mov    eax,0xb
c000d0f3:	51                   	push   ecx
c000d0f4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d0f8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d0fc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d103:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d107:	80 fa 19             	cmp    dl,0x19
c000d10a:	77 31                	ja     c000d13d <File::seek(unsigned long long)+0x51>
c000d10c:	8b 14 95 20 67 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd98e0]
c000d113:	85 d2                	test   edx,edx
c000d115:	74 26                	je     c000d13d <File::seek(unsigned long long)+0x51>
c000d117:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d11d:	85 d2                	test   edx,edx
c000d11f:	74 1c                	je     c000d13d <File::seek(unsigned long long)+0x51>
c000d121:	b8 05 00 00 00       	mov    eax,0x5
c000d126:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d12a:	74 11                	je     c000d13d <File::seek(unsigned long long)+0x51>
c000d12c:	8b 02                	mov    eax,DWORD PTR [edx]
c000d12e:	53                   	push   ebx
c000d12f:	51                   	push   ecx
c000d130:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d136:	52                   	push   edx
c000d137:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d13a:	83 c4 10             	add    esp,0x10
c000d13d:	5a                   	pop    edx
c000d13e:	5b                   	pop    ebx
c000d13f:	5e                   	pop    esi
c000d140:	c3                   	ret    
c000d141:	90                   	nop

c000d142 <File::tell(unsigned long long*)>:
c000d142:	83 ec 0c             	sub    esp,0xc
c000d145:	b8 0b 00 00 00       	mov    eax,0xb
c000d14a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d14e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d155:	80 fa 19             	cmp    dl,0x19
c000d158:	77 34                	ja     c000d18e <File::tell(unsigned long long*)+0x4c>
c000d15a:	8b 14 95 20 67 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd98e0]
c000d161:	85 d2                	test   edx,edx
c000d163:	74 29                	je     c000d18e <File::tell(unsigned long long*)+0x4c>
c000d165:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d16b:	85 d2                	test   edx,edx
c000d16d:	74 1f                	je     c000d18e <File::tell(unsigned long long*)+0x4c>
c000d16f:	b8 05 00 00 00       	mov    eax,0x5
c000d174:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d178:	74 14                	je     c000d18e <File::tell(unsigned long long*)+0x4c>
c000d17a:	50                   	push   eax
c000d17b:	8b 02                	mov    eax,DWORD PTR [edx]
c000d17d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d181:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d187:	52                   	push   edx
c000d188:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d18b:	83 c4 10             	add    esp,0x10
c000d18e:	83 c4 0c             	add    esp,0xc
c000d191:	c3                   	ret    

c000d192 <File::rewind()>:
c000d192:	83 ec 10             	sub    esp,0x10
c000d195:	6a 00                	push   0x0
c000d197:	6a 00                	push   0x0
c000d199:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d19d:	e8 4a ff ff ff       	call   c000d0ec <File::seek(unsigned long long)>
c000d1a2:	83 c4 1c             	add    esp,0x1c
c000d1a5:	c3                   	ret    

c000d1a6 <File::unlink()>:
c000d1a6:	83 ec 0c             	sub    esp,0xc
c000d1a9:	b8 0b 00 00 00       	mov    eax,0xb
c000d1ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d1b2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d1b9:	80 f9 19             	cmp    cl,0x19
c000d1bc:	77 2f                	ja     c000d1ed <File::unlink()+0x47>
c000d1be:	8b 0c 8d 20 67 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd98e0]
c000d1c5:	85 c9                	test   ecx,ecx
c000d1c7:	74 24                	je     c000d1ed <File::unlink()+0x47>
c000d1c9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d1cf:	85 c9                	test   ecx,ecx
c000d1d1:	74 1a                	je     c000d1ed <File::unlink()+0x47>
c000d1d3:	b8 06 00 00 00       	mov    eax,0x6
c000d1d8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d1dc:	75 0f                	jne    c000d1ed <File::unlink()+0x47>
c000d1de:	83 c2 0d             	add    edx,0xd
c000d1e1:	50                   	push   eax
c000d1e2:	50                   	push   eax
c000d1e3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d1e5:	52                   	push   edx
c000d1e6:	51                   	push   ecx
c000d1e7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d1ea:	83 c4 10             	add    esp,0x10
c000d1ed:	83 c4 0c             	add    esp,0xc
c000d1f0:	c3                   	ret    
c000d1f1:	90                   	nop

c000d1f2 <File::rename(char const*)>:
c000d1f2:	83 ec 0c             	sub    esp,0xc
c000d1f5:	b8 0b 00 00 00       	mov    eax,0xb
c000d1fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d1fe:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d205:	80 f9 19             	cmp    cl,0x19
c000d208:	77 32                	ja     c000d23c <File::rename(char const*)+0x4a>
c000d20a:	8b 0c 8d 20 67 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd98e0]
c000d211:	85 c9                	test   ecx,ecx
c000d213:	74 27                	je     c000d23c <File::rename(char const*)+0x4a>
c000d215:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d21b:	85 c9                	test   ecx,ecx
c000d21d:	74 1d                	je     c000d23c <File::rename(char const*)+0x4a>
c000d21f:	b8 06 00 00 00       	mov    eax,0x6
c000d224:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d228:	75 12                	jne    c000d23c <File::rename(char const*)+0x4a>
c000d22a:	83 c2 0d             	add    edx,0xd
c000d22d:	50                   	push   eax
c000d22e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d230:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d234:	52                   	push   edx
c000d235:	51                   	push   ecx
c000d236:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d239:	83 c4 10             	add    esp,0x10
c000d23c:	83 c4 0c             	add    esp,0xc
c000d23f:	c3                   	ret    

c000d240 <File::chfatattr(unsigned char, unsigned char)>:
c000d240:	57                   	push   edi
c000d241:	b8 0b 00 00 00       	mov    eax,0xb
c000d246:	56                   	push   esi
c000d247:	53                   	push   ebx
c000d248:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d24c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d250:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d257:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d25b:	80 f9 19             	cmp    cl,0x19
c000d25e:	77 37                	ja     c000d297 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d260:	8b 0c 8d 20 67 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd98e0]
c000d267:	85 c9                	test   ecx,ecx
c000d269:	74 2c                	je     c000d297 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d26b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d271:	85 c9                	test   ecx,ecx
c000d273:	74 22                	je     c000d297 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d275:	b8 06 00 00 00       	mov    eax,0x6
c000d27a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d27e:	75 17                	jne    c000d297 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d280:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d282:	89 f0                	mov    eax,esi
c000d284:	83 c2 0d             	add    edx,0xd
c000d287:	0f b6 f0             	movzx  esi,al
c000d28a:	0f b6 db             	movzx  ebx,bl
c000d28d:	56                   	push   esi
c000d28e:	53                   	push   ebx
c000d28f:	52                   	push   edx
c000d290:	51                   	push   ecx
c000d291:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d294:	83 c4 10             	add    esp,0x10
c000d297:	5b                   	pop    ebx
c000d298:	5e                   	pop    esi
c000d299:	5f                   	pop    edi
c000d29a:	c3                   	ret    
c000d29b:	90                   	nop

c000d29c <File::exists()>:
c000d29c:	83 ec 0c             	sub    esp,0xc
c000d29f:	31 c0                	xor    eax,eax
c000d2a1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d2a5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d2ac:	80 f9 19             	cmp    cl,0x19
c000d2af:	77 24                	ja     c000d2d5 <File::exists()+0x39>
c000d2b1:	8b 0c 8d 20 67 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd98e0]
c000d2b8:	85 c9                	test   ecx,ecx
c000d2ba:	74 19                	je     c000d2d5 <File::exists()+0x39>
c000d2bc:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d2c2:	85 c9                	test   ecx,ecx
c000d2c4:	74 0f                	je     c000d2d5 <File::exists()+0x39>
c000d2c6:	83 c2 0d             	add    edx,0xd
c000d2c9:	50                   	push   eax
c000d2ca:	50                   	push   eax
c000d2cb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d2cd:	52                   	push   edx
c000d2ce:	51                   	push   ecx
c000d2cf:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d2d2:	83 c4 10             	add    esp,0x10
c000d2d5:	83 c4 0c             	add    esp,0xc
c000d2d8:	c3                   	ret    
c000d2d9:	90                   	nop

c000d2da <File::stat(unsigned long long*, bool*)>:
c000d2da:	56                   	push   esi
c000d2db:	53                   	push   ebx
c000d2dc:	50                   	push   eax
c000d2dd:	b8 0b 00 00 00       	mov    eax,0xb
c000d2e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d2e6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d2ea:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d2f1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d2f5:	80 f9 19             	cmp    cl,0x19
c000d2f8:	77 3d                	ja     c000d337 <File::stat(unsigned long long*, bool*)+0x5d>
c000d2fa:	8b 0c 8d 20 67 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd98e0]
c000d301:	85 c9                	test   ecx,ecx
c000d303:	74 32                	je     c000d337 <File::stat(unsigned long long*, bool*)+0x5d>
c000d305:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d30b:	85 c9                	test   ecx,ecx
c000d30d:	74 28                	je     c000d337 <File::stat(unsigned long long*, bool*)+0x5d>
c000d30f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d311:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d315:	74 13                	je     c000d32a <File::stat(unsigned long long*, bool*)+0x50>
c000d317:	83 ec 04             	sub    esp,0x4
c000d31a:	56                   	push   esi
c000d31b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d321:	51                   	push   ecx
c000d322:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d325:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d328:	eb 0a                	jmp    c000d334 <File::stat(unsigned long long*, bool*)+0x5a>
c000d32a:	53                   	push   ebx
c000d32b:	83 c2 0d             	add    edx,0xd
c000d32e:	56                   	push   esi
c000d32f:	52                   	push   edx
c000d330:	51                   	push   ecx
c000d331:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d334:	83 c4 10             	add    esp,0x10
c000d337:	5a                   	pop    edx
c000d338:	5b                   	pop    ebx
c000d339:	5e                   	pop    esi
c000d33a:	c3                   	ret    

c000d33b <Fs::setcwd(Process*, char*)>:
c000d33b:	55                   	push   ebp
c000d33c:	57                   	push   edi
c000d33d:	56                   	push   esi
c000d33e:	53                   	push   ebx
c000d33f:	81 ec 20 02 00 00    	sub    esp,0x220
c000d345:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d34c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d352:	57                   	push   edi
c000d353:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d35a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d35e:	56                   	push   esi
c000d35f:	e8 bc fa ff ff       	call   c000ce20 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d364:	89 34 24             	mov    DWORD PTR [esp],esi
c000d367:	e8 34 33 ff ff       	call   c00006a0 <strlen>
c000d36c:	83 c4 10             	add    esp,0x10
c000d36f:	83 f8 02             	cmp    eax,0x2
c000d372:	77 17                	ja     c000d38b <Fs::setcwd(Process*, char*)+0x50>
c000d374:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000d379:	83 e8 41             	sub    eax,0x41
c000d37c:	83 f8 19             	cmp    eax,0x19
c000d37f:	76 24                	jbe    c000d3a5 <Fs::setcwd(Process*, char*)+0x6a>
c000d381:	b8 03 00 00 00       	mov    eax,0x3
c000d386:	e9 e0 00 00 00       	jmp    c000d46b <Fs::setcwd(Process*, char*)+0x130>
c000d38b:	83 ec 0c             	sub    esp,0xc
c000d38e:	56                   	push   esi
c000d38f:	e8 0c 33 ff ff       	call   c00006a0 <strlen>
c000d394:	83 c4 10             	add    esp,0x10
c000d397:	83 f8 03             	cmp    eax,0x3
c000d39a:	75 34                	jne    c000d3d0 <Fs::setcwd(Process*, char*)+0x95>
c000d39c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d3a1:	75 2d                	jne    c000d3d0 <Fs::setcwd(Process*, char*)+0x95>
c000d3a3:	eb cf                	jmp    c000d374 <Fs::setcwd(Process*, char*)+0x39>
c000d3a5:	8b 14 85 20 67 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd98e0]
c000d3ac:	b8 05 00 00 00       	mov    eax,0x5
c000d3b1:	85 d2                	test   edx,edx
c000d3b3:	0f 84 b2 00 00 00    	je     c000d46b <Fs::setcwd(Process*, char*)+0x130>
c000d3b9:	b8 06 00 00 00       	mov    eax,0x6
c000d3be:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d3c5:	0f 85 92 00 00 00    	jne    c000d45d <Fs::setcwd(Process*, char*)+0x122>
c000d3cb:	e9 9b 00 00 00       	jmp    c000d46b <Fs::setcwd(Process*, char*)+0x130>
c000d3d0:	83 ec 0c             	sub    esp,0xc
c000d3d3:	68 14 01 00 00       	push   0x114
c000d3d8:	e8 e6 c5 ff ff       	call   c00099c3 <malloc>
c000d3dd:	83 c4 0c             	add    esp,0xc
c000d3e0:	89 c3                	mov    ebx,eax
c000d3e2:	55                   	push   ebp
c000d3e3:	56                   	push   esi
c000d3e4:	50                   	push   eax
c000d3e5:	e8 e0 fb ff ff       	call   c000cfca <File::File(char const*, Process*)>
c000d3ea:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000d3ef:	83 c4 0c             	add    esp,0xc
c000d3f2:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000d3f6:	50                   	push   eax
c000d3f7:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d3fb:	50                   	push   eax
c000d3fc:	53                   	push   ebx
c000d3fd:	e8 d8 fe ff ff       	call   c000d2da <File::stat(unsigned long long*, bool*)>
c000d402:	83 c4 10             	add    esp,0x10
c000d405:	83 f8 02             	cmp    eax,0x2
c000d408:	74 04                	je     c000d40e <Fs::setcwd(Process*, char*)+0xd3>
c000d40a:	85 c0                	test   eax,eax
c000d40c:	74 1c                	je     c000d42a <Fs::setcwd(Process*, char*)+0xef>
c000d40e:	b8 01 00 00 00       	mov    eax,0x1
c000d413:	85 db                	test   ebx,ebx
c000d415:	74 54                	je     c000d46b <Fs::setcwd(Process*, char*)+0x130>
c000d417:	83 ec 0c             	sub    esp,0xc
c000d41a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d41c:	53                   	push   ebx
c000d41d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d420:	83 c4 10             	add    esp,0x10
c000d423:	b8 01 00 00 00       	mov    eax,0x1
c000d428:	eb 41                	jmp    c000d46b <Fs::setcwd(Process*, char*)+0x130>
c000d42a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d42f:	75 1c                	jne    c000d44d <Fs::setcwd(Process*, char*)+0x112>
c000d431:	b8 02 00 00 00       	mov    eax,0x2
c000d436:	85 db                	test   ebx,ebx
c000d438:	74 31                	je     c000d46b <Fs::setcwd(Process*, char*)+0x130>
c000d43a:	83 ec 0c             	sub    esp,0xc
c000d43d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d43f:	53                   	push   ebx
c000d440:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d443:	83 c4 10             	add    esp,0x10
c000d446:	b8 02 00 00 00       	mov    eax,0x2
c000d44b:	eb 1e                	jmp    c000d46b <Fs::setcwd(Process*, char*)+0x130>
c000d44d:	85 db                	test   ebx,ebx
c000d44f:	74 0c                	je     c000d45d <Fs::setcwd(Process*, char*)+0x122>
c000d451:	83 ec 0c             	sub    esp,0xc
c000d454:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d456:	53                   	push   ebx
c000d457:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d45a:	83 c4 10             	add    esp,0x10
c000d45d:	50                   	push   eax
c000d45e:	50                   	push   eax
c000d45f:	56                   	push   esi
c000d460:	57                   	push   edi
c000d461:	e8 da 32 ff ff       	call   c0000740 <strcpy>
c000d466:	83 c4 10             	add    esp,0x10
c000d469:	31 c0                	xor    eax,eax
c000d46b:	81 c4 1c 02 00 00    	add    esp,0x21c
c000d471:	5b                   	pop    ebx
c000d472:	5e                   	pop    esi
c000d473:	5f                   	pop    edi
c000d474:	5d                   	pop    ebp
c000d475:	c3                   	ret    

c000d476 <Directory::Directory(char const*, Process*)>:
c000d476:	83 ec 0c             	sub    esp,0xc
c000d479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d47d:	83 ec 08             	sub    esp,0x8
c000d480:	6a 00                	push   0x0
c000d482:	50                   	push   eax
c000d483:	e8 6e de ff ff       	call   c000b2f6 <UnixFile::UnixFile(int)>
c000d488:	83 c4 10             	add    esp,0x10
c000d48b:	ba f4 30 02 c0       	mov    edx,0xc00230f4
c000d490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d494:	89 10                	mov    DWORD PTR [eax],edx
c000d496:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d49a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d4a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4a4:	83 c0 0d             	add    eax,0xd
c000d4a7:	83 ec 04             	sub    esp,0x4
c000d4aa:	52                   	push   edx
c000d4ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4af:	50                   	push   eax
c000d4b0:	e8 6b f9 ff ff       	call   c000ce20 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d4b5:	83 c4 10             	add    esp,0x10
c000d4b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4bc:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d4bf:	8d 50 bf             	lea    edx,[eax-0x41]
c000d4c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4c6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d4cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4d0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d4d4:	90                   	nop
c000d4d5:	83 c4 0c             	add    esp,0xc
c000d4d8:	c3                   	ret    
c000d4d9:	90                   	nop

c000d4da <Directory::open()>:
c000d4da:	53                   	push   ebx
c000d4db:	b8 0b 00 00 00       	mov    eax,0xb
c000d4e0:	83 ec 08             	sub    esp,0x8
c000d4e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d4e7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d4ee:	80 fa 19             	cmp    dl,0x19
c000d4f1:	77 3d                	ja     c000d530 <Directory::open()+0x56>
c000d4f3:	8b 14 95 20 67 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd98e0]
c000d4fa:	85 d2                	test   edx,edx
c000d4fc:	74 32                	je     c000d530 <Directory::open()+0x56>
c000d4fe:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d504:	85 d2                	test   edx,edx
c000d506:	74 28                	je     c000d530 <Directory::open()+0x56>
c000d508:	b8 06 00 00 00       	mov    eax,0x6
c000d50d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d511:	75 1d                	jne    c000d530 <Directory::open()+0x56>
c000d513:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d519:	50                   	push   eax
c000d51a:	8b 02                	mov    eax,DWORD PTR [edx]
c000d51c:	51                   	push   ecx
c000d51d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d520:	51                   	push   ecx
c000d521:	52                   	push   edx
c000d522:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000d525:	83 c4 10             	add    esp,0x10
c000d528:	85 c0                	test   eax,eax
c000d52a:	75 04                	jne    c000d530 <Directory::open()+0x56>
c000d52c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d530:	83 c4 08             	add    esp,0x8
c000d533:	5b                   	pop    ebx
c000d534:	c3                   	ret    
c000d535:	90                   	nop

c000d536 <Directory::close()>:
c000d536:	53                   	push   ebx
c000d537:	b8 0b 00 00 00       	mov    eax,0xb
c000d53c:	83 ec 08             	sub    esp,0x8
c000d53f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d543:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d54a:	80 fa 19             	cmp    dl,0x19
c000d54d:	77 41                	ja     c000d590 <Directory::close()+0x5a>
c000d54f:	8b 1c 95 20 67 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd98e0]
c000d556:	85 db                	test   ebx,ebx
c000d558:	74 36                	je     c000d590 <Directory::close()+0x5a>
c000d55a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d561:	74 2d                	je     c000d590 <Directory::close()+0x5a>
c000d563:	b8 05 00 00 00       	mov    eax,0x5
c000d568:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d56c:	74 22                	je     c000d590 <Directory::close()+0x5a>
c000d56e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d572:	8b 04 95 20 67 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd98e0]
c000d579:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d57f:	53                   	push   ebx
c000d580:	53                   	push   ebx
c000d581:	8b 10                	mov    edx,DWORD PTR [eax]
c000d583:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d589:	50                   	push   eax
c000d58a:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000d58d:	83 c4 10             	add    esp,0x10
c000d590:	83 c4 08             	add    esp,0x8
c000d593:	5b                   	pop    ebx
c000d594:	c3                   	ret    
c000d595:	90                   	nop

c000d596 <Directory::unlink()>:
c000d596:	83 ec 0c             	sub    esp,0xc
c000d599:	b8 0b 00 00 00       	mov    eax,0xb
c000d59e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5a2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d5a9:	80 f9 19             	cmp    cl,0x19
c000d5ac:	77 2f                	ja     c000d5dd <Directory::unlink()+0x47>
c000d5ae:	8b 0c 8d 20 67 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd98e0]
c000d5b5:	85 c9                	test   ecx,ecx
c000d5b7:	74 24                	je     c000d5dd <Directory::unlink()+0x47>
c000d5b9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d5bf:	85 c9                	test   ecx,ecx
c000d5c1:	74 1a                	je     c000d5dd <Directory::unlink()+0x47>
c000d5c3:	b8 06 00 00 00       	mov    eax,0x6
c000d5c8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d5cc:	75 0f                	jne    c000d5dd <Directory::unlink()+0x47>
c000d5ce:	83 c2 0d             	add    edx,0xd
c000d5d1:	50                   	push   eax
c000d5d2:	50                   	push   eax
c000d5d3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d5d5:	52                   	push   edx
c000d5d6:	51                   	push   ecx
c000d5d7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d5da:	83 c4 10             	add    esp,0x10
c000d5dd:	83 c4 0c             	add    esp,0xc
c000d5e0:	c3                   	ret    
c000d5e1:	90                   	nop

c000d5e2 <Directory::rename(char const*)>:
c000d5e2:	83 ec 0c             	sub    esp,0xc
c000d5e5:	b8 0b 00 00 00       	mov    eax,0xb
c000d5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5ee:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d5f5:	80 f9 19             	cmp    cl,0x19
c000d5f8:	77 32                	ja     c000d62c <Directory::rename(char const*)+0x4a>
c000d5fa:	8b 0c 8d 20 67 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd98e0]
c000d601:	85 c9                	test   ecx,ecx
c000d603:	74 27                	je     c000d62c <Directory::rename(char const*)+0x4a>
c000d605:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d60b:	85 c9                	test   ecx,ecx
c000d60d:	74 1d                	je     c000d62c <Directory::rename(char const*)+0x4a>
c000d60f:	b8 06 00 00 00       	mov    eax,0x6
c000d614:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d618:	75 12                	jne    c000d62c <Directory::rename(char const*)+0x4a>
c000d61a:	83 c2 0d             	add    edx,0xd
c000d61d:	50                   	push   eax
c000d61e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d620:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d624:	52                   	push   edx
c000d625:	51                   	push   ecx
c000d626:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	83 c4 0c             	add    esp,0xc
c000d62f:	c3                   	ret    

c000d630 <Directory::exists()>:
c000d630:	83 ec 0c             	sub    esp,0xc
c000d633:	31 c0                	xor    eax,eax
c000d635:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d639:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d640:	80 f9 19             	cmp    cl,0x19
c000d643:	77 24                	ja     c000d669 <Directory::exists()+0x39>
c000d645:	8b 0c 8d 20 67 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd98e0]
c000d64c:	85 c9                	test   ecx,ecx
c000d64e:	74 19                	je     c000d669 <Directory::exists()+0x39>
c000d650:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d656:	85 c9                	test   ecx,ecx
c000d658:	74 0f                	je     c000d669 <Directory::exists()+0x39>
c000d65a:	83 c2 0d             	add    edx,0xd
c000d65d:	50                   	push   eax
c000d65e:	50                   	push   eax
c000d65f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d661:	52                   	push   edx
c000d662:	51                   	push   ecx
c000d663:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d666:	83 c4 10             	add    esp,0x10
c000d669:	83 c4 0c             	add    esp,0xc
c000d66c:	c3                   	ret    
c000d66d:	90                   	nop

c000d66e <Directory::read(dirent*)>:
c000d66e:	83 ec 1c             	sub    esp,0x1c
c000d671:	b8 0b 00 00 00       	mov    eax,0xb
c000d676:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d67a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d681:	80 fa 19             	cmp    dl,0x19
c000d684:	77 30                	ja     c000d6b6 <Directory::read(dirent*)+0x48>
c000d686:	8b 14 95 20 67 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd98e0]
c000d68d:	85 d2                	test   edx,edx
c000d68f:	74 25                	je     c000d6b6 <Directory::read(dirent*)+0x48>
c000d691:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d698:	74 1c                	je     c000d6b6 <Directory::read(dirent*)+0x48>
c000d69a:	83 ec 0c             	sub    esp,0xc
c000d69d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d69f:	8d 54 24 18          	lea    edx,[esp+0x18]
c000d6a3:	52                   	push   edx
c000d6a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6a8:	6a 00                	push   0x0
c000d6aa:	68 10 01 00 00       	push   0x110
c000d6af:	51                   	push   ecx
c000d6b0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d6b3:	83 c4 20             	add    esp,0x20
c000d6b6:	83 c4 1c             	add    esp,0x1c
c000d6b9:	c3                   	ret    

c000d6ba <Directory::create()>:
c000d6ba:	83 ec 0c             	sub    esp,0xc
c000d6bd:	b8 0b 00 00 00       	mov    eax,0xb
c000d6c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d6c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d6cd:	80 f9 19             	cmp    cl,0x19
c000d6d0:	77 2f                	ja     c000d701 <Directory::create()+0x47>
c000d6d2:	8b 0c 8d 20 67 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd98e0]
c000d6d9:	85 c9                	test   ecx,ecx
c000d6db:	74 24                	je     c000d701 <Directory::create()+0x47>
c000d6dd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d6e3:	85 c9                	test   ecx,ecx
c000d6e5:	74 1a                	je     c000d701 <Directory::create()+0x47>
c000d6e7:	b8 06 00 00 00       	mov    eax,0x6
c000d6ec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d6f0:	75 0f                	jne    c000d701 <Directory::create()+0x47>
c000d6f2:	83 c2 0d             	add    edx,0xd
c000d6f5:	50                   	push   eax
c000d6f6:	50                   	push   eax
c000d6f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d6f9:	52                   	push   edx
c000d6fa:	51                   	push   ecx
c000d6fb:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000d6fe:	83 c4 10             	add    esp,0x10
c000d701:	83 c4 0c             	add    esp,0xc
c000d704:	c3                   	ret    
c000d705:	90                   	nop

c000d706 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000d706:	b8 0a 00 00 00       	mov    eax,0xa
c000d70b:	c3                   	ret    

c000d70c <Bus::Bus(char const*)>:
c000d70c:	83 ec 0c             	sub    esp,0xc
c000d70f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d713:	83 ec 08             	sub    esp,0x8
c000d716:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d71a:	50                   	push   eax
c000d71b:	e8 8a 09 00 00       	call   c000e0aa <Device::Device(char const*)>
c000d720:	83 c4 10             	add    esp,0x10
c000d723:	ba 10 31 02 c0       	mov    edx,0xc0023110
c000d728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d72c:	89 10                	mov    DWORD PTR [eax],edx
c000d72e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d732:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d73c:	90                   	nop
c000d73d:	83 c4 0c             	add    esp,0xc
c000d740:	c3                   	ret    
c000d741:	90                   	nop
c000d742:	66 90                	xchg   ax,ax

c000d744 <Bus::~Bus()>:
c000d744:	83 ec 0c             	sub    esp,0xc
c000d747:	ba 10 31 02 c0       	mov    edx,0xc0023110
c000d74c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d750:	89 10                	mov    DWORD PTR [eax],edx
c000d752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d756:	83 ec 0c             	sub    esp,0xc
c000d759:	50                   	push   eax
c000d75a:	e8 15 06 00 00       	call   c000dd74 <Device::~Device()>
c000d75f:	83 c4 10             	add    esp,0x10
c000d762:	90                   	nop
c000d763:	83 c4 0c             	add    esp,0xc
c000d766:	c3                   	ret    
c000d767:	90                   	nop

c000d768 <Bus::~Bus()>:
c000d768:	83 ec 0c             	sub    esp,0xc
c000d76b:	83 ec 0c             	sub    esp,0xc
c000d76e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d772:	e8 cd ff ff ff       	call   c000d744 <Bus::~Bus()>
c000d777:	83 c4 10             	add    esp,0x10
c000d77a:	83 ec 08             	sub    esp,0x8
c000d77d:	68 58 01 00 00       	push   0x158
c000d782:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d786:	e8 f3 f1 ff ff       	call   c000c97e <operator delete(void*, unsigned long)>
c000d78b:	83 c4 10             	add    esp,0x10
c000d78e:	83 c4 0c             	add    esp,0xc
c000d791:	c3                   	ret    
c000d792:	66 90                	xchg   ax,ax

c000d794 <Buzzer::Buzzer(char const*)>:
c000d794:	83 ec 0c             	sub    esp,0xc
c000d797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d79b:	83 ec 08             	sub    esp,0x8
c000d79e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7a2:	50                   	push   eax
c000d7a3:	e8 02 09 00 00       	call   c000e0aa <Device::Device(char const*)>
c000d7a8:	83 c4 10             	add    esp,0x10
c000d7ab:	ba 3c 31 02 c0       	mov    edx,0xc002313c
c000d7b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7b4:	89 10                	mov    DWORD PTR [eax],edx
c000d7b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ba:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000d7c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7c8:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000d7d2:	90                   	nop
c000d7d3:	83 c4 0c             	add    esp,0xc
c000d7d6:	c3                   	ret    
c000d7d7:	90                   	nop

c000d7d8 <Buzzer::~Buzzer()>:
c000d7d8:	83 ec 0c             	sub    esp,0xc
c000d7db:	ba 3c 31 02 c0       	mov    edx,0xc002313c
c000d7e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7e4:	89 10                	mov    DWORD PTR [eax],edx
c000d7e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ea:	83 ec 0c             	sub    esp,0xc
c000d7ed:	50                   	push   eax
c000d7ee:	e8 81 05 00 00       	call   c000dd74 <Device::~Device()>
c000d7f3:	83 c4 10             	add    esp,0x10
c000d7f6:	90                   	nop
c000d7f7:	83 c4 0c             	add    esp,0xc
c000d7fa:	c3                   	ret    
c000d7fb:	90                   	nop

c000d7fc <Buzzer::~Buzzer()>:
c000d7fc:	83 ec 0c             	sub    esp,0xc
c000d7ff:	83 ec 0c             	sub    esp,0xc
c000d802:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d806:	e8 cd ff ff ff       	call   c000d7d8 <Buzzer::~Buzzer()>
c000d80b:	83 c4 10             	add    esp,0x10
c000d80e:	83 ec 08             	sub    esp,0x8
c000d811:	68 5c 01 00 00       	push   0x15c
c000d816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d81a:	e8 5f f1 ff ff       	call   c000c97e <operator delete(void*, unsigned long)>
c000d81f:	83 c4 10             	add    esp,0x10
c000d822:	83 c4 0c             	add    esp,0xc
c000d825:	c3                   	ret    

c000d826 <Buzzer::stop()>:
c000d826:	83 ec 14             	sub    esp,0x14
c000d829:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d82d:	8b 10                	mov    edx,DWORD PTR [eax]
c000d82f:	6a 00                	push   0x0
c000d831:	50                   	push   eax
c000d832:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d835:	83 c4 1c             	add    esp,0x1c
c000d838:	c3                   	ret    

c000d839 <beepThread(void*)>:
c000d839:	53                   	push   ebx
c000d83a:	83 ec 08             	sub    esp,0x8
c000d83d:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c000d842:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d846:	48                   	dec    eax
c000d847:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c000d84c:	75 02                	jne    c000d850 <beepThread(void*)+0x17>
c000d84e:	fb                   	sti    
c000d84f:	90                   	nop
c000d850:	83 ec 0c             	sub    esp,0xc
c000d853:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000d85a:	50                   	push   eax
c000d85b:	e8 68 a9 00 00       	call   c00181c8 <milliTenthSleep(unsigned int)>
c000d860:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d863:	e8 be ff ff ff       	call   c000d826 <Buzzer::stop()>
c000d868:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000d870:	83 c4 18             	add    esp,0x18
c000d873:	5b                   	pop    ebx
c000d874:	e9 4f a8 00 00       	jmp    c00180c8 <blockTask(TaskState)>
c000d879:	90                   	nop

c000d87a <Buzzer::beep(int, int, bool)>:
c000d87a:	57                   	push   edi
c000d87b:	56                   	push   esi
c000d87c:	53                   	push   ebx
c000d87d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d881:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000d885:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d889:	50                   	push   eax
c000d88a:	50                   	push   eax
c000d88b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d891:	53                   	push   ebx
c000d892:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d895:	83 c4 10             	add    esp,0x10
c000d898:	89 f8                	mov    eax,edi
c000d89a:	84 c0                	test   al,al
c000d89c:	74 1e                	je     c000d8bc <Buzzer::beep(int, int, bool)+0x42>
c000d89e:	83 ec 0c             	sub    esp,0xc
c000d8a1:	6b f6 0a             	imul   esi,esi,0xa
c000d8a4:	56                   	push   esi
c000d8a5:	e8 1e a9 00 00       	call   c00181c8 <milliTenthSleep(unsigned int)>
c000d8aa:	83 c4 10             	add    esp,0x10
c000d8ad:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d8b1:	5b                   	pop    ebx
c000d8b2:	5e                   	pop    esi
c000d8b3:	5f                   	pop    edi
c000d8b4:	e9 6d ff ff ff       	jmp    c000d826 <Buzzer::stop()>
c000d8b9:	8d 76 00             	lea    esi,[esi+0x0]
c000d8bc:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000d8c2:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000d8c7:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000d8cf:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d8d3:	c7 44 24 14 39 d8 00 c0 	mov    DWORD PTR [esp+0x14],0xc000d839
c000d8db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d8df:	5b                   	pop    ebx
c000d8e0:	5e                   	pop    esi
c000d8e1:	5f                   	pop    edi
c000d8e2:	e9 cd a3 00 00       	jmp    c0017cb4 <Process::createThread(void (*)(void*), void*, int)>
c000d8e7:	90                   	nop

c000d8e8 <User::loadClockSettings(int)>:
c000d8e8:	53                   	push   ebx
c000d8e9:	83 ec 14             	sub    esp,0x14
c000d8ec:	68 14 01 00 00       	push   0x114
c000d8f1:	e8 cd c0 ff ff       	call   c00099c3 <malloc>
c000d8f6:	83 c4 0c             	add    esp,0xc
c000d8f9:	89 c3                	mov    ebx,eax
c000d8fb:	ff 35 50 76 02 c0    	push   DWORD PTR ds:0xc0027650
c000d901:	68 64 31 02 c0       	push   0xc0023164
c000d906:	50                   	push   eax
c000d907:	e8 be f6 ff ff       	call   c000cfca <File::File(char const*, Process*)>
c000d90c:	58                   	pop    eax
c000d90d:	5a                   	pop    edx
c000d90e:	6a 01                	push   0x1
c000d910:	53                   	push   ebx
c000d911:	e8 18 f7 ff ff       	call   c000d02e <File::open(FileOpenMode)>
c000d916:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d919:	e8 6e f7 ff ff       	call   c000d08c <File::close()>
c000d91e:	83 c4 10             	add    esp,0x10
c000d921:	85 db                	test   ebx,ebx
c000d923:	74 0f                	je     c000d934 <User::loadClockSettings(int)+0x4c>
c000d925:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d927:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d92b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d92e:	83 c4 08             	add    esp,0x8
c000d931:	5b                   	pop    ebx
c000d932:	ff e0                	jmp    eax
c000d934:	83 c4 08             	add    esp,0x8
c000d937:	5b                   	pop    ebx
c000d938:	c3                   	ret    
c000d939:	90                   	nop

c000d93a <Clock::Clock(char const*)>:
c000d93a:	83 ec 0c             	sub    esp,0xc
c000d93d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d941:	83 ec 08             	sub    esp,0x8
c000d944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d948:	50                   	push   eax
c000d949:	e8 5c 07 00 00       	call   c000e0aa <Device::Device(char const*)>
c000d94e:	83 c4 10             	add    esp,0x10
c000d951:	ba 8c 31 02 c0       	mov    edx,0xc002318c
c000d956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d95a:	89 10                	mov    DWORD PTR [eax],edx
c000d95c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d960:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000d96a:	90                   	nop
c000d96b:	83 c4 0c             	add    esp,0xc
c000d96e:	c3                   	ret    
c000d96f:	90                   	nop

c000d970 <Clock::~Clock()>:
c000d970:	83 ec 0c             	sub    esp,0xc
c000d973:	ba 8c 31 02 c0       	mov    edx,0xc002318c
c000d978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d97c:	89 10                	mov    DWORD PTR [eax],edx
c000d97e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d982:	83 ec 0c             	sub    esp,0xc
c000d985:	50                   	push   eax
c000d986:	e8 e9 03 00 00       	call   c000dd74 <Device::~Device()>
c000d98b:	83 c4 10             	add    esp,0x10
c000d98e:	90                   	nop
c000d98f:	83 c4 0c             	add    esp,0xc
c000d992:	c3                   	ret    
c000d993:	90                   	nop

c000d994 <Clock::~Clock()>:
c000d994:	83 ec 0c             	sub    esp,0xc
c000d997:	83 ec 0c             	sub    esp,0xc
c000d99a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d99e:	e8 cd ff ff ff       	call   c000d970 <Clock::~Clock()>
c000d9a3:	83 c4 10             	add    esp,0x10
c000d9a6:	83 ec 08             	sub    esp,0x8
c000d9a9:	68 58 01 00 00       	push   0x158
c000d9ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b2:	e8 c7 ef ff ff       	call   c000c97e <operator delete(void*, unsigned long)>
c000d9b7:	83 c4 10             	add    esp,0x10
c000d9ba:	83 c4 0c             	add    esp,0xc
c000d9bd:	c3                   	ret    

c000d9be <Clock::timeInSecondsLocal()>:
c000d9be:	53                   	push   ebx
c000d9bf:	83 ec 14             	sub    esp,0x14
c000d9c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d9c6:	8b 10                	mov    edx,DWORD PTR [eax]
c000d9c8:	50                   	push   eax
c000d9c9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d9cc:	0f b6 0d 9c 62 02 c0 	movzx  ecx,BYTE PTR ds:0xc002629c
c000d9d3:	03 0d a0 62 02 c0    	add    ecx,DWORD PTR ds:0xc00262a0
c000d9d9:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000d9df:	89 cb                	mov    ebx,ecx
c000d9e1:	c1 fb 1f             	sar    ebx,0x1f
c000d9e4:	01 c8                	add    eax,ecx
c000d9e6:	11 da                	adc    edx,ebx
c000d9e8:	83 c4 10             	add    esp,0x10
c000d9eb:	31 c9                	xor    ecx,ecx
c000d9ed:	80 3d 9d 62 02 c0 00 	cmp    BYTE PTR ds:0xc002629d,0x0
c000d9f4:	74 05                	je     c000d9fb <Clock::timeInSecondsLocal()+0x3d>
c000d9f6:	b9 08 07 00 00       	mov    ecx,0x708
c000d9fb:	31 db                	xor    ebx,ebx
c000d9fd:	01 c8                	add    eax,ecx
c000d9ff:	11 da                	adc    edx,ebx
c000da01:	83 c4 08             	add    esp,0x8
c000da04:	5b                   	pop    ebx
c000da05:	c3                   	ret    

c000da06 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000da06:	57                   	push   edi
c000da07:	56                   	push   esi
c000da08:	53                   	push   ebx
c000da09:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000da0d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000da11:	8b 01                	mov    eax,DWORD PTR [ecx]
c000da13:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000da17:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000da1a:	0f b6 05 9c 62 02 c0 	movzx  eax,BYTE PTR ds:0xc002629c
c000da21:	03 05 a0 62 02 c0    	add    eax,DWORD PTR ds:0xc00262a0
c000da27:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000da2d:	99                   	cdq    
c000da2e:	29 c6                	sub    esi,eax
c000da30:	19 d7                	sbb    edi,edx
c000da32:	89 f0                	mov    eax,esi
c000da34:	89 fa                	mov    edx,edi
c000da36:	31 f6                	xor    esi,esi
c000da38:	80 3d 9d 62 02 c0 00 	cmp    BYTE PTR ds:0xc002629d,0x0
c000da3f:	74 05                	je     c000da46 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000da41:	be 08 07 00 00       	mov    esi,0x708
c000da46:	31 ff                	xor    edi,edi
c000da48:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000da4c:	29 f0                	sub    eax,esi
c000da4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da52:	19 fa                	sbb    edx,edi
c000da54:	89 d8                	mov    eax,ebx
c000da56:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000da5a:	5b                   	pop    ebx
c000da5b:	5e                   	pop    esi
c000da5c:	5f                   	pop    edi
c000da5d:	ff e0                	jmp    eax

c000da5f <datetimeToSeconds(datetime_t)>:
c000da5f:	55                   	push   ebp
c000da60:	57                   	push   edi
c000da61:	56                   	push   esi
c000da62:	53                   	push   ebx
c000da63:	83 ec 14             	sub    esp,0x14
c000da66:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000da6a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000da6e:	89 d3                	mov    ebx,edx
c000da70:	0f b6 c6             	movzx  eax,dh
c000da73:	c1 eb 10             	shr    ebx,0x10
c000da76:	48                   	dec    eax
c000da77:	66 81 eb 6c 07       	sub    bx,0x76c
c000da7c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000da80:	0f b6 f5             	movzx  esi,ch
c000da83:	89 cf                	mov    edi,ecx
c000da85:	6b f6 3c             	imul   esi,esi,0x3c
c000da88:	c1 ef 10             	shr    edi,0x10
c000da8b:	0f b6 c9             	movzx  ecx,cl
c000da8e:	89 f8                	mov    eax,edi
c000da90:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000da96:	0f b6 f8             	movzx  edi,al
c000da99:	0f b6 d2             	movzx  edx,dl
c000da9c:	01 fe                	add    esi,edi
c000da9e:	01 f1                	add    ecx,esi
c000daa0:	0f b7 f3             	movzx  esi,bx
c000daa3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000daa7:	c1 f9 1f             	sar    ecx,0x1f
c000daaa:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000daaf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dab3:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000dab8:	8b 0c 8d c0 31 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdce40]
c000dabf:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000dac3:	76 29                	jbe    c000daee <datetimeToSeconds(datetime_t)+0x8f>
c000dac5:	f6 c3 03             	test   bl,0x3
c000dac8:	75 24                	jne    c000daee <datetimeToSeconds(datetime_t)+0x8f>
c000daca:	31 d2                	xor    edx,edx
c000dacc:	bf 64 00 00 00       	mov    edi,0x64
c000dad1:	89 d8                	mov    eax,ebx
c000dad3:	66 f7 f7             	div    di
c000dad6:	66 85 d2             	test   dx,dx
c000dad9:	75 12                	jne    c000daed <datetimeToSeconds(datetime_t)+0x8e>
c000dadb:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000dae1:	bf 90 01 00 00       	mov    edi,0x190
c000dae6:	99                   	cdq    
c000dae7:	f7 ff                	idiv   edi
c000dae9:	85 d2                	test   edx,edx
c000daeb:	75 01                	jne    c000daee <datetimeToSeconds(datetime_t)+0x8f>
c000daed:	41                   	inc    ecx
c000daee:	66 83 fb 46          	cmp    bx,0x46
c000daf2:	76 45                	jbe    c000db39 <datetimeToSeconds(datetime_t)+0xda>
c000daf4:	bb 46 00 00 00       	mov    ebx,0x46
c000daf9:	bf 64 00 00 00       	mov    edi,0x64
c000dafe:	bd 90 01 00 00       	mov    ebp,0x190
c000db03:	b8 6d 01 00 00       	mov    eax,0x16d
c000db08:	f6 c3 03             	test   bl,0x3
c000db0b:	75 23                	jne    c000db30 <datetimeToSeconds(datetime_t)+0xd1>
c000db0d:	89 d8                	mov    eax,ebx
c000db0f:	99                   	cdq    
c000db10:	f7 ff                	idiv   edi
c000db12:	b8 6e 01 00 00       	mov    eax,0x16e
c000db17:	85 d2                	test   edx,edx
c000db19:	75 15                	jne    c000db30 <datetimeToSeconds(datetime_t)+0xd1>
c000db1b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000db21:	99                   	cdq    
c000db22:	f7 fd                	idiv   ebp
c000db24:	83 fa 01             	cmp    edx,0x1
c000db27:	19 c0                	sbb    eax,eax
c000db29:	f7 d0                	not    eax
c000db2b:	05 6e 01 00 00       	add    eax,0x16e
c000db30:	01 c1                	add    ecx,eax
c000db32:	43                   	inc    ebx
c000db33:	39 f3                	cmp    ebx,esi
c000db35:	7c cc                	jl     c000db03 <datetimeToSeconds(datetime_t)+0xa4>
c000db37:	eb 35                	jmp    c000db6e <datetimeToSeconds(datetime_t)+0x10f>
c000db39:	74 33                	je     c000db6e <datetimeToSeconds(datetime_t)+0x10f>
c000db3b:	b8 45 00 00 00       	mov    eax,0x45
c000db40:	89 c2                	mov    edx,eax
c000db42:	83 e2 03             	and    edx,0x3
c000db45:	39 f0                	cmp    eax,esi
c000db47:	7e 0f                	jle    c000db58 <datetimeToSeconds(datetime_t)+0xf9>
c000db49:	83 fa 01             	cmp    edx,0x1
c000db4c:	19 d2                	sbb    edx,edx
c000db4e:	48                   	dec    eax
c000db4f:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000db56:	eb e8                	jmp    c000db40 <datetimeToSeconds(datetime_t)+0xe1>
c000db58:	b8 6d 01 00 00       	mov    eax,0x16d
c000db5d:	85 d2                	test   edx,edx
c000db5f:	75 0b                	jne    c000db6c <datetimeToSeconds(datetime_t)+0x10d>
c000db61:	66 83 fb 01          	cmp    bx,0x1
c000db65:	19 c0                	sbb    eax,eax
c000db67:	05 6e 01 00 00       	add    eax,0x16e
c000db6c:	29 c1                	sub    ecx,eax
c000db6e:	b8 80 51 01 00       	mov    eax,0x15180
c000db73:	f7 e9                	imul   ecx
c000db75:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000db79:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000db7d:	83 c4 14             	add    esp,0x14
c000db80:	5b                   	pop    ebx
c000db81:	5e                   	pop    esi
c000db82:	5f                   	pop    edi
c000db83:	5d                   	pop    ebp
c000db84:	c3                   	ret    
c000db85:	90                   	nop

c000db86 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000db86:	57                   	push   edi
c000db87:	56                   	push   esi
c000db88:	53                   	push   ebx
c000db89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db8d:	8b 06                	mov    eax,DWORD PTR [esi]
c000db8f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000db92:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db9a:	e8 c0 fe ff ff       	call   c000da5f <datetimeToSeconds(datetime_t)>
c000db9f:	59                   	pop    ecx
c000dba0:	0f b6 0d 9c 62 02 c0 	movzx  ecx,BYTE PTR ds:0xc002629c
c000dba7:	5b                   	pop    ebx
c000dba8:	03 0d a0 62 02 c0    	add    ecx,DWORD PTR ds:0xc00262a0
c000dbae:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dbb4:	89 cb                	mov    ebx,ecx
c000dbb6:	c1 fb 1f             	sar    ebx,0x1f
c000dbb9:	29 c8                	sub    eax,ecx
c000dbbb:	19 da                	sbb    edx,ebx
c000dbbd:	31 c9                	xor    ecx,ecx
c000dbbf:	80 3d 9d 62 02 c0 00 	cmp    BYTE PTR ds:0xc002629d,0x0
c000dbc6:	74 05                	je     c000dbcd <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000dbc8:	b9 08 07 00 00       	mov    ecx,0x708
c000dbcd:	31 db                	xor    ebx,ebx
c000dbcf:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000dbd3:	29 c8                	sub    eax,ecx
c000dbd5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dbd9:	19 da                	sbb    edx,ebx
c000dbdb:	89 f8                	mov    eax,edi
c000dbdd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dbe1:	5b                   	pop    ebx
c000dbe2:	5e                   	pop    esi
c000dbe3:	5f                   	pop    edi
c000dbe4:	ff e0                	jmp    eax

c000dbe6 <secondsToDatetime(unsigned long long)>:
c000dbe6:	55                   	push   ebp
c000dbe7:	57                   	push   edi
c000dbe8:	56                   	push   esi
c000dbe9:	53                   	push   ebx
c000dbea:	83 ec 1c             	sub    esp,0x1c
c000dbed:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dbf1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000dbf5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dbf9:	6a 00                	push   0x0
c000dbfb:	68 80 51 01 00       	push   0x15180
c000dc00:	55                   	push   ebp
c000dc01:	57                   	push   edi
c000dc02:	e8 9d 32 01 00       	call   c0020ea4 <__udivdi3>
c000dc07:	83 c4 10             	add    esp,0x10
c000dc0a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000dc10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc14:	6a 00                	push   0x0
c000dc16:	68 80 51 01 00       	push   0x15180
c000dc1b:	55                   	push   ebp
c000dc1c:	57                   	push   edi
c000dc1d:	bf 10 0e 00 00       	mov    edi,0xe10
c000dc22:	e8 7d 33 01 00       	call   c0020fa4 <__umoddi3>
c000dc27:	83 c4 10             	add    esp,0x10
c000dc2a:	99                   	cdq    
c000dc2b:	f7 ff                	idiv   edi
c000dc2d:	bf 3c 00 00 00       	mov    edi,0x3c
c000dc32:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000dc35:	89 d0                	mov    eax,edx
c000dc37:	99                   	cdq    
c000dc38:	f7 ff                	idiv   edi
c000dc3a:	85 db                	test   ebx,ebx
c000dc3c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000dc3f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000dc42:	79 11                	jns    c000dc55 <secondsToDatetime(unsigned long long)+0x6f>
c000dc44:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dc48:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000dc4e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dc53:	eb 07                	jmp    c000dc5c <secondsToDatetime(unsigned long long)+0x76>
c000dc55:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dc5a:	89 d8                	mov    eax,ebx
c000dc5c:	bf b4 05 00 00       	mov    edi,0x5b4
c000dc61:	99                   	cdq    
c000dc62:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000dc67:	f7 f9                	idiv   ecx
c000dc69:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000dc6e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc72:	31 d2                	xor    edx,edx
c000dc74:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000dc7c:	01 c3                	add    ebx,eax
c000dc7e:	89 d8                	mov    eax,ebx
c000dc80:	f7 f1                	div    ecx
c000dc82:	31 d2                	xor    edx,edx
c000dc84:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000dc87:	89 d8                	mov    eax,ebx
c000dc89:	f7 f7                	div    edi
c000dc8b:	31 d2                	xor    edx,edx
c000dc8d:	29 c1                	sub    ecx,eax
c000dc8f:	89 d8                	mov    eax,ebx
c000dc91:	f7 f5                	div    ebp
c000dc93:	bd 6d 01 00 00       	mov    ebp,0x16d
c000dc98:	29 c1                	sub    ecx,eax
c000dc9a:	31 d2                	xor    edx,edx
c000dc9c:	89 c8                	mov    eax,ecx
c000dc9e:	f7 f5                	div    ebp
c000dca0:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000dca5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dca9:	31 d2                	xor    edx,edx
c000dcab:	89 c8                	mov    eax,ecx
c000dcad:	f7 f5                	div    ebp
c000dcaf:	31 d2                	xor    edx,edx
c000dcb1:	01 c3                	add    ebx,eax
c000dcb3:	89 c8                	mov    eax,ecx
c000dcb5:	f7 f7                	div    edi
c000dcb7:	bf 99 00 00 00       	mov    edi,0x99
c000dcbc:	29 c3                	sub    ebx,eax
c000dcbe:	31 d2                	xor    edx,edx
c000dcc0:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000dcc8:	29 c3                	sub    ebx,eax
c000dcca:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000dccd:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000dcd0:	bb 05 00 00 00       	mov    ebx,0x5
c000dcd5:	83 c1 02             	add    ecx,0x2
c000dcd8:	89 c8                	mov    eax,ecx
c000dcda:	f7 f7                	div    edi
c000dcdc:	31 d2                	xor    edx,edx
c000dcde:	89 c7                	mov    edi,eax
c000dce0:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000dce6:	83 c0 02             	add    eax,0x2
c000dce9:	f7 f3                	div    ebx
c000dceb:	89 eb                	mov    ebx,ebp
c000dced:	29 c3                	sub    ebx,eax
c000dcef:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000dcf5:	88 1e                	mov    BYTE PTR [esi],bl
c000dcf7:	19 c0                	sbb    eax,eax
c000dcf9:	31 d2                	xor    edx,edx
c000dcfb:	83 e0 0c             	and    eax,0xc
c000dcfe:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000dd02:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000dd0a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dd0e:	83 f9 01             	cmp    ecx,0x1
c000dd11:	0f 96 c2             	setbe  dl
c000dd14:	41                   	inc    ecx
c000dd15:	01 d0                	add    eax,edx
c000dd17:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000dd1a:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000dd1e:	83 c4 1c             	add    esp,0x1c
c000dd21:	89 f0                	mov    eax,esi
c000dd23:	5b                   	pop    ebx
c000dd24:	5e                   	pop    esi
c000dd25:	5f                   	pop    edi
c000dd26:	5d                   	pop    ebp
c000dd27:	c2 04 00             	ret    0x4

c000dd2a <Clock::timeInDatetimeLocal()>:
c000dd2a:	53                   	push   ebx
c000dd2b:	83 ec 14             	sub    esp,0x14
c000dd2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dd32:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000dd36:	e8 83 fc ff ff       	call   c000d9be <Clock::timeInSecondsLocal()>
c000dd3b:	83 c4 0c             	add    esp,0xc
c000dd3e:	52                   	push   edx
c000dd3f:	50                   	push   eax
c000dd40:	53                   	push   ebx
c000dd41:	e8 a0 fe ff ff       	call   c000dbe6 <secondsToDatetime(unsigned long long)>
c000dd46:	89 d8                	mov    eax,ebx
c000dd48:	83 c4 14             	add    esp,0x14
c000dd4b:	5b                   	pop    ebx
c000dd4c:	c2 04 00             	ret    0x4
c000dd4f:	90                   	nop

c000dd50 <Device::hibernate()>:
c000dd50:	c3                   	ret    
c000dd51:	90                   	nop

c000dd52 <Device::wake()>:
c000dd52:	c3                   	ret    
c000dd53:	90                   	nop

c000dd54 <Device::detect()>:
c000dd54:	c3                   	ret    
c000dd55:	90                   	nop

c000dd56 <Device::disableLegacy()>:
c000dd56:	c3                   	ret    
c000dd57:	90                   	nop

c000dd58 <Device::powerSaving(PowerSavingLevel)>:
c000dd58:	c3                   	ret    
c000dd59:	90                   	nop

c000dd5a <DriverlessDevice::close(int, int, void*)>:
c000dd5a:	31 c0                	xor    eax,eax
c000dd5c:	c3                   	ret    
c000dd5d:	90                   	nop

c000dd5e <DriverlessDevice::detect()>:
c000dd5e:	c3                   	ret    
c000dd5f:	90                   	nop

c000dd60 <DriverlessDevice::open(int, int, void*)>:
c000dd60:	83 ec 18             	sub    esp,0x18
c000dd63:	68 f0 31 02 c0       	push   0xc00231f0
c000dd68:	e8 92 65 00 00       	call   c00142ff <Krnl::panic(char const*)>
c000dd6d:	83 c8 ff             	or     eax,0xffffffff
c000dd70:	83 c4 1c             	add    esp,0x1c
c000dd73:	c3                   	ret    

c000dd74 <Device::~Device()>:
c000dd74:	ba 50 32 02 c0       	mov    edx,0xc0023250
c000dd79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd7d:	89 10                	mov    DWORD PTR [eax],edx
c000dd7f:	90                   	nop
c000dd80:	c3                   	ret    
c000dd81:	90                   	nop

c000dd82 <Device::~Device()>:
c000dd82:	83 ec 0c             	sub    esp,0xc
c000dd85:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dd89:	e8 e6 ff ff ff       	call   c000dd74 <Device::~Device()>
c000dd8e:	83 c4 04             	add    esp,0x4
c000dd91:	83 ec 08             	sub    esp,0x8
c000dd94:	68 58 01 00 00       	push   0x158
c000dd99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd9d:	e8 dc eb ff ff       	call   c000c97e <operator delete(void*, unsigned long)>
c000dda2:	83 c4 10             	add    esp,0x10
c000dda5:	83 c4 0c             	add    esp,0xc
c000dda8:	c3                   	ret    
c000dda9:	90                   	nop

c000ddaa <Device::findAndLoadDriver()>:
c000ddaa:	c7 44 24 04 0e 32 02 c0 	mov    DWORD PTR [esp+0x4],0xc002320e
c000ddb2:	e9 a8 ec ff ff       	jmp    c000ca5f <Dbg::kprintf(char const*, ...)>
c000ddb7:	90                   	nop

c000ddb8 <Device::preOpenPCI(PCIDeviceInfo)>:
c000ddb8:	57                   	push   edi
c000ddb9:	b9 09 00 00 00       	mov    ecx,0x9
c000ddbe:	56                   	push   esi
c000ddbf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ddc3:	8d 74 24 10          	lea    esi,[esp+0x10]
c000ddc7:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000ddd1:	81 c7 18 01 00 00    	add    edi,0x118
c000ddd7:	fc                   	cld    
c000ddd8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ddda:	5e                   	pop    esi
c000dddb:	5f                   	pop    edi
c000dddc:	c3                   	ret    
c000dddd:	90                   	nop

c000ddde <Device::preOpenACPI(void*, char*, char*)>:
c000ddde:	57                   	push   edi
c000dddf:	b9 1e 00 00 00       	mov    ecx,0x1e
c000dde4:	56                   	push   esi
c000dde5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dde9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dded:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000ddf7:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000ddfd:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000de03:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000de07:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de09:	b9 0e 00 00 00       	mov    ecx,0xe
c000de0e:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000de14:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000de18:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de1a:	5e                   	pop    esi
c000de1b:	5f                   	pop    edi
c000de1c:	c3                   	ret    
c000de1d:	90                   	nop

c000de1e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000de1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de22:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000de27:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000de2e:	75 0b                	jne    c000de3b <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000de30:	8b 00                	mov    eax,DWORD PTR [eax]
c000de32:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de36:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000de39:	eb 1e                	jmp    c000de59 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000de3b:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000de40:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000de46:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000de4c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000de4e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000de56:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000de59:	ff e0                	jmp    eax
c000de5b:	90                   	nop

c000de5c <Device::getParent()>:
c000de5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de60:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000de66:	c3                   	ret    
c000de67:	90                   	nop

c000de68 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000de68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de6c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000de71:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000de78:	75 0b                	jne    c000de85 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000de7a:	8b 00                	mov    eax,DWORD PTR [eax]
c000de7c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de80:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000de83:	eb 1e                	jmp    c000dea3 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000de85:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000de8a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000de90:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000de96:	8b 08                	mov    ecx,DWORD PTR [eax]
c000de98:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de9c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dea0:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000dea3:	ff e0                	jmp    eax
c000dea5:	90                   	nop

c000dea6 <Device::addChild(Device*)>:
c000dea6:	53                   	push   ebx
c000dea7:	83 ec 08             	sub    esp,0x8
c000deaa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000deae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000deb2:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000deb8:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000debe:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dec0:	85 d2                	test   edx,edx
c000dec2:	74 04                	je     c000dec8 <Device::addChild(Device*)+0x22>
c000dec4:	89 d3                	mov    ebx,edx
c000dec6:	eb f6                	jmp    c000debe <Device::addChild(Device*)+0x18>
c000dec8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000decb:	83 ec 0c             	sub    esp,0xc
c000dece:	6a 08                	push   0x8
c000ded0:	e8 ee ba ff ff       	call   c00099c3 <malloc>
c000ded5:	89 03                	mov    DWORD PTR [ebx],eax
c000ded7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000dedd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dee4:	83 c4 18             	add    esp,0x18
c000dee7:	5b                   	pop    ebx
c000dee8:	c3                   	ret    
c000dee9:	90                   	nop

c000deea <Device::removeAllChildren()>:
c000deea:	56                   	push   esi
c000deeb:	53                   	push   ebx
c000deec:	52                   	push   edx
c000deed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000def1:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000def7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000defa:	74 17                	je     c000df13 <Device::removeAllChildren()+0x29>
c000defc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000deff:	85 c0                	test   eax,eax
c000df01:	74 0c                	je     c000df0f <Device::removeAllChildren()+0x25>
c000df03:	83 ec 0c             	sub    esp,0xc
c000df06:	8b 10                	mov    edx,DWORD PTR [eax]
c000df08:	50                   	push   eax
c000df09:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000df0c:	83 c4 10             	add    esp,0x10
c000df0f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df11:	eb e4                	jmp    c000def7 <Device::removeAllChildren()+0xd>
c000df13:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000df19:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000df1f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000df25:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000df2c:	58                   	pop    eax
c000df2d:	5b                   	pop    ebx
c000df2e:	5e                   	pop    esi
c000df2f:	c3                   	ret    

c000df30 <Device::hibernateAll()>:
c000df30:	53                   	push   ebx
c000df31:	83 ec 14             	sub    esp,0x14
c000df34:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df38:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df3a:	53                   	push   ebx
c000df3b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000df3e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000df44:	83 c4 10             	add    esp,0x10
c000df47:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df4a:	74 0f                	je     c000df5b <Device::hibernateAll()+0x2b>
c000df4c:	83 ec 0c             	sub    esp,0xc
c000df4f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000df52:	e8 d9 ff ff ff       	call   c000df30 <Device::hibernateAll()>
c000df57:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df59:	eb e9                	jmp    c000df44 <Device::hibernateAll()+0x14>
c000df5b:	83 c4 08             	add    esp,0x8
c000df5e:	5b                   	pop    ebx
c000df5f:	c3                   	ret    

c000df60 <Device::wakeAll()>:
c000df60:	53                   	push   ebx
c000df61:	83 ec 14             	sub    esp,0x14
c000df64:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df68:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df6a:	53                   	push   ebx
c000df6b:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000df6e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000df74:	83 c4 10             	add    esp,0x10
c000df77:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df7a:	74 0f                	je     c000df8b <Device::wakeAll()+0x2b>
c000df7c:	83 ec 0c             	sub    esp,0xc
c000df7f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000df82:	e8 d9 ff ff ff       	call   c000df60 <Device::wakeAll()>
c000df87:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df89:	eb e9                	jmp    c000df74 <Device::wakeAll()+0x14>
c000df8b:	83 c4 08             	add    esp,0x8
c000df8e:	5b                   	pop    ebx
c000df8f:	c3                   	ret    

c000df90 <Device::detectAll()>:
c000df90:	53                   	push   ebx
c000df91:	83 ec 14             	sub    esp,0x14
c000df94:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df98:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df9a:	53                   	push   ebx
c000df9b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000df9e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dfa4:	83 c4 10             	add    esp,0x10
c000dfa7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dfaa:	74 0f                	je     c000dfbb <Device::detectAll()+0x2b>
c000dfac:	83 ec 0c             	sub    esp,0xc
c000dfaf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dfb2:	e8 d9 ff ff ff       	call   c000df90 <Device::detectAll()>
c000dfb7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dfb9:	eb e9                	jmp    c000dfa4 <Device::detectAll()+0x14>
c000dfbb:	83 c4 08             	add    esp,0x8
c000dfbe:	5b                   	pop    ebx
c000dfbf:	c3                   	ret    

c000dfc0 <Device::disableLegacyAll()>:
c000dfc0:	53                   	push   ebx
c000dfc1:	83 ec 14             	sub    esp,0x14
c000dfc4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dfc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dfca:	53                   	push   ebx
c000dfcb:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000dfce:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dfd4:	83 c4 10             	add    esp,0x10
c000dfd7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dfda:	74 0f                	je     c000dfeb <Device::disableLegacyAll()+0x2b>
c000dfdc:	83 ec 0c             	sub    esp,0xc
c000dfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dfe2:	e8 d9 ff ff ff       	call   c000dfc0 <Device::disableLegacyAll()>
c000dfe7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dfe9:	eb e9                	jmp    c000dfd4 <Device::disableLegacyAll()+0x14>
c000dfeb:	83 c4 08             	add    esp,0x8
c000dfee:	5b                   	pop    ebx
c000dfef:	c3                   	ret    

c000dff0 <Device::loadDriversForAll()>:
c000dff0:	53                   	push   ebx
c000dff1:	83 ec 08             	sub    esp,0x8
c000dff4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dff8:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000dfff:	75 0c                	jne    c000e00d <Device::loadDriversForAll()+0x1d>
c000e001:	83 ec 0c             	sub    esp,0xc
c000e004:	53                   	push   ebx
c000e005:	e8 a0 fd ff ff       	call   c000ddaa <Device::findAndLoadDriver()>
c000e00a:	83 c4 10             	add    esp,0x10
c000e00d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e013:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e016:	74 12                	je     c000e02a <Device::loadDriversForAll()+0x3a>
c000e018:	83 ec 0c             	sub    esp,0xc
c000e01b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e01e:	e8 cd ff ff ff       	call   c000dff0 <Device::loadDriversForAll()>
c000e023:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e025:	83 c4 10             	add    esp,0x10
c000e028:	eb e9                	jmp    c000e013 <Device::loadDriversForAll()+0x23>
c000e02a:	83 c4 08             	add    esp,0x8
c000e02d:	5b                   	pop    ebx
c000e02e:	c3                   	ret    
c000e02f:	90                   	nop

c000e030 <Device::closeAll()>:
c000e030:	53                   	push   ebx
c000e031:	83 ec 08             	sub    esp,0x8
c000e034:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e038:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e03a:	6a 00                	push   0x0
c000e03c:	6a 00                	push   0x0
c000e03e:	6a 00                	push   0x0
c000e040:	53                   	push   ebx
c000e041:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e044:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e04a:	83 c4 10             	add    esp,0x10
c000e04d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e050:	74 0f                	je     c000e061 <Device::closeAll()+0x31>
c000e052:	83 ec 0c             	sub    esp,0xc
c000e055:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e058:	e8 d3 ff ff ff       	call   c000e030 <Device::closeAll()>
c000e05d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e05f:	eb e9                	jmp    c000e04a <Device::closeAll()+0x1a>
c000e061:	83 c4 08             	add    esp,0x8
c000e064:	5b                   	pop    ebx
c000e065:	c3                   	ret    

c000e066 <Device::powerSavingAll(PowerSavingLevel)>:
c000e066:	56                   	push   esi
c000e067:	53                   	push   ebx
c000e068:	83 ec 0c             	sub    esp,0xc
c000e06b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e06f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e073:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e075:	56                   	push   esi
c000e076:	53                   	push   ebx
c000e077:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e07a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e080:	83 c4 10             	add    esp,0x10
c000e083:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e086:	74 0f                	je     c000e097 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e088:	52                   	push   edx
c000e089:	52                   	push   edx
c000e08a:	56                   	push   esi
c000e08b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e08e:	e8 d3 ff ff ff       	call   c000e066 <Device::powerSavingAll(PowerSavingLevel)>
c000e093:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e095:	eb e9                	jmp    c000e080 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e097:	58                   	pop    eax
c000e098:	5b                   	pop    ebx
c000e099:	5e                   	pop    esi
c000e09a:	c3                   	ret    
c000e09b:	90                   	nop

c000e09c <Device::setName(char const*)>:
c000e09c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e0a4:	e9 97 26 ff ff       	jmp    c0000740 <strcpy>
c000e0a9:	90                   	nop

c000e0aa <Device::Device(char const*)>:
c000e0aa:	83 ec 1c             	sub    esp,0x1c
c000e0ad:	ba 50 32 02 c0       	mov    edx,0xc0023250
c000e0b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0b6:	89 10                	mov    DWORD PTR [eax],edx
c000e0b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0bc:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e0c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0ca:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e0d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0d8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e0e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0e6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e0f0:	83 ec 08             	sub    esp,0x8
c000e0f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0fb:	e8 9c ff ff ff       	call   c000e09c <Device::setName(char const*)>
c000e100:	83 c4 10             	add    esp,0x10
c000e103:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e10b:	83 ec 0c             	sub    esp,0xc
c000e10e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e112:	e8 ac b8 ff ff       	call   c00099c3 <malloc>
c000e117:	83 c4 10             	add    esp,0x10
c000e11a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e120:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e127:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e12b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e131:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e135:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e13b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e141:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e145:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e14b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e152:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e156:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e15d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e161:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e168:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e16c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e176:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e17a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e184:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e188:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e192:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e196:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e1a0:	90                   	nop
c000e1a1:	83 c4 1c             	add    esp,0x1c
c000e1a4:	c3                   	ret    
c000e1a5:	90                   	nop

c000e1a6 <Device::getName()>:
c000e1a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1aa:	05 d0 00 00 00       	add    eax,0xd0
c000e1af:	c3                   	ret    

c000e1b0 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e1b0:	83 ec 0c             	sub    esp,0xc
c000e1b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1b7:	83 ec 08             	sub    esp,0x8
c000e1ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1be:	50                   	push   eax
c000e1bf:	e8 e6 fe ff ff       	call   c000e0aa <Device::Device(char const*)>
c000e1c4:	83 c4 10             	add    esp,0x10
c000e1c7:	ba 7c 32 02 c0       	mov    edx,0xc002327c
c000e1cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1d0:	89 10                	mov    DWORD PTR [eax],edx
c000e1d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1d6:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e1e0:	90                   	nop
c000e1e1:	83 c4 0c             	add    esp,0xc
c000e1e4:	c3                   	ret    
c000e1e5:	90                   	nop

c000e1e6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e1e6:	57                   	push   edi
c000e1e7:	56                   	push   esi
c000e1e8:	53                   	push   ebx
c000e1e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e1ed:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e1f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e1f5:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e1fb:	75 0c                	jne    c000e209 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e1fd:	52                   	push   edx
c000e1fe:	52                   	push   edx
c000e1ff:	53                   	push   ebx
c000e200:	56                   	push   esi
c000e201:	e8 50 31 01 00       	call   c0021356 <LinkedList<Device>::addElement(Device*)>
c000e206:	83 c4 10             	add    esp,0x10
c000e209:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e20f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e212:	74 12                	je     c000e226 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e214:	50                   	push   eax
c000e215:	57                   	push   edi
c000e216:	56                   	push   esi
c000e217:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e21a:	e8 c7 ff ff ff       	call   c000e1e6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e21f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e221:	83 c4 10             	add    esp,0x10
c000e224:	eb e9                	jmp    c000e20f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e226:	5b                   	pop    ebx
c000e227:	5e                   	pop    esi
c000e228:	5f                   	pop    edi
c000e229:	c3                   	ret    

c000e22a <getDevicesOfType(DeviceType)>:
c000e22a:	53                   	push   ebx
c000e22b:	83 ec 14             	sub    esp,0x14
c000e22e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e232:	53                   	push   ebx
c000e233:	e8 fa 31 01 00       	call   c0021432 <LinkedList<Device>::LinkedList()>
c000e238:	83 c4 0c             	add    esp,0xc
c000e23b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e23f:	53                   	push   ebx
c000e240:	ff 35 68 61 02 c0    	push   DWORD PTR ds:0xc0026168
c000e246:	e8 9b ff ff ff       	call   c000e1e6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e24b:	89 d8                	mov    eax,ebx
c000e24d:	83 c4 18             	add    esp,0x18
c000e250:	5b                   	pop    ebx
c000e251:	c2 04 00             	ret    0x4

c000e254 <HardDiskController::HardDiskController(char const*)>:
c000e254:	83 ec 0c             	sub    esp,0xc
c000e257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e25b:	83 ec 08             	sub    esp,0x8
c000e25e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e262:	50                   	push   eax
c000e263:	e8 42 fe ff ff       	call   c000e0aa <Device::Device(char const*)>
c000e268:	83 c4 10             	add    esp,0x10
c000e26b:	ba a8 32 02 c0       	mov    edx,0xc00232a8
c000e270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e274:	89 10                	mov    DWORD PTR [eax],edx
c000e276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e27a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e284:	90                   	nop
c000e285:	83 c4 0c             	add    esp,0xc
c000e288:	c3                   	ret    
c000e289:	90                   	nop
c000e28a:	66 90                	xchg   ax,ax

c000e28c <HardDiskController::~HardDiskController()>:
c000e28c:	83 ec 0c             	sub    esp,0xc
c000e28f:	ba a8 32 02 c0       	mov    edx,0xc00232a8
c000e294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e298:	89 10                	mov    DWORD PTR [eax],edx
c000e29a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e29e:	83 ec 0c             	sub    esp,0xc
c000e2a1:	50                   	push   eax
c000e2a2:	e8 cd fa ff ff       	call   c000dd74 <Device::~Device()>
c000e2a7:	83 c4 10             	add    esp,0x10
c000e2aa:	90                   	nop
c000e2ab:	83 c4 0c             	add    esp,0xc
c000e2ae:	c3                   	ret    
c000e2af:	90                   	nop

c000e2b0 <HardDiskController::~HardDiskController()>:
c000e2b0:	83 ec 0c             	sub    esp,0xc
c000e2b3:	83 ec 0c             	sub    esp,0xc
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 cd ff ff ff       	call   c000e28c <HardDiskController::~HardDiskController()>
c000e2bf:	83 c4 10             	add    esp,0x10
c000e2c2:	83 ec 08             	sub    esp,0x8
c000e2c5:	68 58 01 00 00       	push   0x158
c000e2ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ce:	e8 ab e6 ff ff       	call   c000c97e <operator delete(void*, unsigned long)>
c000e2d3:	83 c4 10             	add    esp,0x10
c000e2d6:	83 c4 0c             	add    esp,0xc
c000e2d9:	c3                   	ret    

c000e2da <PhysicalDisk::eject()>:
c000e2da:	83 c8 ff             	or     eax,0xffffffff
c000e2dd:	c3                   	ret    

c000e2de <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e2de:	83 ec 0c             	sub    esp,0xc
c000e2e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2e5:	83 ec 08             	sub    esp,0x8
c000e2e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ec:	50                   	push   eax
c000e2ed:	e8 b8 fd ff ff       	call   c000e0aa <Device::Device(char const*)>
c000e2f2:	83 c4 10             	add    esp,0x10
c000e2f5:	ba d4 32 02 c0       	mov    edx,0xc00232d4
c000e2fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2fe:	89 10                	mov    DWORD PTR [eax],edx
c000e300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e304:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e30b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e30f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e328:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e32c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e336:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e340:	90                   	nop
c000e341:	83 c4 0c             	add    esp,0xc
c000e344:	c3                   	ret    
c000e345:	90                   	nop

c000e346 <PhysicalDisk::startCache()>:
c000e346:	56                   	push   esi
c000e347:	53                   	push   ebx
c000e348:	83 ec 10             	sub    esp,0x10
c000e34b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e34f:	6a 44                	push   0x44
c000e351:	e8 6d b6 ff ff       	call   c00099c3 <malloc>
c000e356:	89 c6                	mov    esi,eax
c000e358:	58                   	pop    eax
c000e359:	5a                   	pop    edx
c000e35a:	53                   	push   ebx
c000e35b:	56                   	push   esi
c000e35c:	e8 2f 26 00 00       	call   c0010990 <VCache::VCache(PhysicalDisk*)>
c000e361:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e367:	83 c4 14             	add    esp,0x14
c000e36a:	5b                   	pop    ebx
c000e36b:	5e                   	pop    esi
c000e36c:	c3                   	ret    
c000e36d:	90                   	nop

c000e36e <PhysicalDisk::~PhysicalDisk()>:
c000e36e:	83 ec 0c             	sub    esp,0xc
c000e371:	ba d4 32 02 c0       	mov    edx,0xc00232d4
c000e376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e37a:	89 10                	mov    DWORD PTR [eax],edx
c000e37c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e380:	83 ec 0c             	sub    esp,0xc
c000e383:	50                   	push   eax
c000e384:	e8 eb f9 ff ff       	call   c000dd74 <Device::~Device()>
c000e389:	83 c4 10             	add    esp,0x10
c000e38c:	90                   	nop
c000e38d:	83 c4 0c             	add    esp,0xc
c000e390:	c3                   	ret    
c000e391:	90                   	nop

c000e392 <PhysicalDisk::~PhysicalDisk()>:
c000e392:	83 ec 0c             	sub    esp,0xc
c000e395:	83 ec 0c             	sub    esp,0xc
c000e398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e39c:	e8 cd ff ff ff       	call   c000e36e <PhysicalDisk::~PhysicalDisk()>
c000e3a1:	83 c4 10             	add    esp,0x10
c000e3a4:	83 ec 08             	sub    esp,0x8
c000e3a7:	68 6c 01 00 00       	push   0x16c
c000e3ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3b0:	e8 c9 e5 ff ff       	call   c000c97e <operator delete(void*, unsigned long)>
c000e3b5:	83 c4 10             	add    esp,0x10
c000e3b8:	83 c4 0c             	add    esp,0xc
c000e3bb:	c3                   	ret    

c000e3bc <FPU::FPU(char const*)>:
c000e3bc:	83 ec 0c             	sub    esp,0xc
c000e3bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c3:	83 ec 08             	sub    esp,0x8
c000e3c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3ca:	50                   	push   eax
c000e3cb:	e8 da fc ff ff       	call   c000e0aa <Device::Device(char const*)>
c000e3d0:	83 c4 10             	add    esp,0x10
c000e3d3:	ba 18 33 02 c0       	mov    edx,0xc0023318
c000e3d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3dc:	89 10                	mov    DWORD PTR [eax],edx
c000e3de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3e2:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e3ec:	90                   	nop
c000e3ed:	83 c4 0c             	add    esp,0xc
c000e3f0:	c3                   	ret    
c000e3f1:	90                   	nop
c000e3f2:	66 90                	xchg   ax,ax

c000e3f4 <FPU::~FPU()>:
c000e3f4:	83 ec 0c             	sub    esp,0xc
c000e3f7:	ba 18 33 02 c0       	mov    edx,0xc0023318
c000e3fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e400:	89 10                	mov    DWORD PTR [eax],edx
c000e402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e406:	83 ec 0c             	sub    esp,0xc
c000e409:	50                   	push   eax
c000e40a:	e8 65 f9 ff ff       	call   c000dd74 <Device::~Device()>
c000e40f:	83 c4 10             	add    esp,0x10
c000e412:	90                   	nop
c000e413:	83 c4 0c             	add    esp,0xc
c000e416:	c3                   	ret    
c000e417:	90                   	nop

c000e418 <FPU::~FPU()>:
c000e418:	83 ec 0c             	sub    esp,0xc
c000e41b:	83 ec 0c             	sub    esp,0xc
c000e41e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e422:	e8 cd ff ff ff       	call   c000e3f4 <FPU::~FPU()>
c000e427:	83 c4 10             	add    esp,0x10
c000e42a:	83 ec 08             	sub    esp,0x8
c000e42d:	68 58 01 00 00       	push   0x158
c000e432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e436:	e8 43 e5 ff ff       	call   c000c97e <operator delete(void*, unsigned long)>
c000e43b:	83 c4 10             	add    esp,0x10
c000e43e:	83 c4 0c             	add    esp,0xc
c000e441:	c3                   	ret    

c000e442 <setupFPU()>:
c000e442:	53                   	push   ebx
c000e443:	83 ec 08             	sub    esp,0x8
c000e446:	8b 15 68 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026168
c000e44c:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c000e453:	74 1b                	je     c000e470 <setupFPU()+0x2e>
c000e455:	83 ec 0c             	sub    esp,0xc
c000e458:	68 58 01 00 00       	push   0x158
c000e45d:	e8 61 b5 ff ff       	call   c00099c3 <malloc>
c000e462:	89 c3                	mov    ebx,eax
c000e464:	89 04 24             	mov    DWORD PTR [esp],eax
c000e467:	e8 cc 15 01 00       	call   c001fa38 <AVX::AVX()>
c000e46c:	eb 62                	jmp    c000e4d0 <setupFPU()+0x8e>
c000e46e:	66 90                	xchg   ax,ax
c000e470:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000e476:	84 c0                	test   al,al
c000e478:	79 1a                	jns    c000e494 <setupFPU()+0x52>
c000e47a:	83 ec 0c             	sub    esp,0xc
c000e47d:	68 58 01 00 00       	push   0x158
c000e482:	e8 3c b5 ff ff       	call   c00099c3 <malloc>
c000e487:	89 c3                	mov    ebx,eax
c000e489:	89 04 24             	mov    DWORD PTR [esp],eax
c000e48c:	e8 d7 16 01 00       	call   c001fb68 <SSE::SSE()>
c000e491:	eb 3d                	jmp    c000e4d0 <setupFPU()+0x8e>
c000e493:	90                   	nop
c000e494:	a8 20                	test   al,0x20
c000e496:	74 1c                	je     c000e4b4 <setupFPU()+0x72>
c000e498:	83 ec 0c             	sub    esp,0xc
c000e49b:	68 58 01 00 00       	push   0x158
c000e4a0:	e8 1e b5 ff ff       	call   c00099c3 <malloc>
c000e4a5:	89 c3                	mov    ebx,eax
c000e4a7:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4aa:	e8 1d 16 01 00       	call   c001facc <MMX::MMX()>
c000e4af:	eb 1f                	jmp    c000e4d0 <setupFPU()+0x8e>
c000e4b1:	8d 76 00             	lea    esi,[esi+0x0]
c000e4b4:	a8 10                	test   al,0x10
c000e4b6:	74 20                	je     c000e4d8 <setupFPU()+0x96>
c000e4b8:	83 ec 0c             	sub    esp,0xc
c000e4bb:	68 58 01 00 00       	push   0x158
c000e4c0:	e8 fe b4 ff ff       	call   c00099c3 <malloc>
c000e4c5:	89 c3                	mov    ebx,eax
c000e4c7:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4ca:	e8 2d 17 01 00       	call   c001fbfc <x87::x87()>
c000e4cf:	90                   	nop
c000e4d0:	83 c4 10             	add    esp,0x10
c000e4d3:	eb 27                	jmp    c000e4fc <setupFPU()+0xba>
c000e4d5:	8d 76 00             	lea    esi,[esi+0x0]
c000e4d8:	83 e0 ef             	and    eax,0xffffffef
c000e4db:	83 ec 0c             	sub    esp,0xc
c000e4de:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000e4e4:	68 04 33 02 c0       	push   0xc0023304
c000e4e9:	e8 71 e5 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000e4ee:	0f 20 c0             	mov    eax,cr0
c000e4f1:	83 c8 04             	or     eax,0x4
c000e4f4:	0f 22 c0             	mov    cr0,eax
c000e4f7:	31 db                	xor    ebx,ebx
c000e4f9:	83 c4 10             	add    esp,0x10
c000e4fc:	89 d8                	mov    eax,ebx
c000e4fe:	83 c4 08             	add    esp,0x8
c000e501:	5b                   	pop    ebx
c000e502:	c3                   	ret    
c000e503:	90                   	nop

c000e504 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e504:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e508:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e50c:	c1 e0 04             	shl    eax,0x4
c000e50f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000e513:	8d 50 10             	lea    edx,[eax+0x10]
c000e516:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000e51c:	74 08                	je     c000e526 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000e51e:	83 c0 04             	add    eax,0x4
c000e521:	39 d0                	cmp    eax,edx
c000e523:	75 f1                	jne    c000e516 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000e525:	c3                   	ret    
c000e526:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e530:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e53a:	eb e2                	jmp    c000e51e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000e53c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e53c:	57                   	push   edi
c000e53d:	31 c0                	xor    eax,eax
c000e53f:	56                   	push   esi
c000e540:	53                   	push   ebx
c000e541:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e545:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e549:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e54d:	89 da                	mov    edx,ebx
c000e54f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e553:	c1 e2 04             	shl    edx,0x4
c000e556:	01 ca                	add    edx,ecx
c000e558:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000e560:	74 16                	je     c000e578 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000e562:	40                   	inc    eax
c000e563:	83 f8 04             	cmp    eax,0x4
c000e566:	75 f0                	jne    c000e558 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000e568:	c7 44 24 10 48 33 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023348
c000e570:	5b                   	pop    ebx
c000e571:	5e                   	pop    esi
c000e572:	5f                   	pop    edi
c000e573:	e9 87 5d 00 00       	jmp    c00142ff <Krnl::panic(char const*)>
c000e578:	8d 04 98             	lea    eax,[eax+ebx*4]
c000e57b:	8d 04 81             	lea    eax,[ecx+eax*4]
c000e57e:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000e584:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000e58a:	5b                   	pop    ebx
c000e58b:	5e                   	pop    esi
c000e58c:	5f                   	pop    edi
c000e58d:	c3                   	ret    

c000e58e <doubleFault(regs*, void*)>:
c000e58e:	55                   	push   ebp
c000e58f:	89 e5                	mov    ebp,esp
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	83 ec 0c             	sub    esp,0xc
c000e597:	68 55 33 02 c0       	push   0xc0023355
c000e59c:	e8 5e 5d 00 00       	call   c00142ff <Krnl::panic(char const*)>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	90                   	nop
c000e5a5:	c9                   	leave  
c000e5a6:	c3                   	ret    
c000e5a7:	90                   	nop

c000e5a8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e5a8:	56                   	push   esi
c000e5a9:	53                   	push   ebx
c000e5aa:	50                   	push   eax
c000e5ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e5af:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e5b3:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e5b8:	75 35                	jne    c000e5ef <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000e5ba:	8d 43 20             	lea    eax,[ebx+0x20]
c000e5bd:	31 d2                	xor    edx,edx
c000e5bf:	89 c1                	mov    ecx,eax
c000e5c1:	c1 e1 04             	shl    ecx,0x4
c000e5c4:	01 f1                	add    ecx,esi
c000e5c6:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000e5ce:	74 3e                	je     c000e60e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000e5d0:	42                   	inc    edx
c000e5d1:	83 fa 04             	cmp    edx,0x4
c000e5d4:	75 f0                	jne    c000e5c6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000e5d6:	83 ec 0c             	sub    esp,0xc
c000e5d9:	68 6f 33 02 c0       	push   0xc002336f
c000e5de:	e8 1c 5d 00 00       	call   c00142ff <Krnl::panic(char const*)>
c000e5e3:	83 c4 10             	add    esp,0x10
c000e5e6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e5eb:	5a                   	pop    edx
c000e5ec:	5b                   	pop    ebx
c000e5ed:	5e                   	pop    esi
c000e5ee:	c3                   	ret    
c000e5ef:	83 ec 0c             	sub    esp,0xc
c000e5f2:	56                   	push   esi
c000e5f3:	e8 ae fb ff ff       	call   c000e1a6 <Device::getName()>
c000e5f8:	83 c4 10             	add    esp,0x10
c000e5fb:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e5fe:	75 ba                	jne    c000e5ba <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e600:	83 fb 0f             	cmp    ebx,0xf
c000e603:	7f 29                	jg     c000e62e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000e605:	0f b6 9b 60 58 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffda7a0]
c000e60c:	eb ac                	jmp    c000e5ba <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e60e:	8d 04 82             	lea    eax,[edx+eax*4]
c000e611:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e615:	8d 04 86             	lea    eax,[esi+eax*4]
c000e618:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000e61e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e622:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000e628:	89 d8                	mov    eax,ebx
c000e62a:	5a                   	pop    edx
c000e62b:	5b                   	pop    ebx
c000e62c:	5e                   	pop    esi
c000e62d:	c3                   	ret    
c000e62e:	83 ec 0c             	sub    esp,0xc
c000e631:	68 62 33 02 c0       	push   0xc0023362
c000e636:	e8 c4 5c 00 00       	call   c00142ff <Krnl::panic(char const*)>
c000e63b:	83 c4 10             	add    esp,0x10
c000e63e:	e9 77 ff ff ff       	jmp    c000e5ba <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e643:	90                   	nop

c000e644 <InterruptController::clearAllHandlers(int, bool)>:
c000e644:	56                   	push   esi
c000e645:	53                   	push   ebx
c000e646:	52                   	push   edx
c000e647:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e64b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e64f:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e654:	75 61                	jne    c000e6b7 <InterruptController::clearAllHandlers(int, bool)+0x73>
c000e656:	8d 46 20             	lea    eax,[esi+0x20]
c000e659:	c1 e6 04             	shl    esi,0x4
c000e65c:	c1 e0 04             	shl    eax,0x4
c000e65f:	01 de                	add    esi,ebx
c000e661:	01 d8                	add    eax,ebx
c000e663:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000e66d:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000e677:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000e681:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e68b:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000e695:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000e69f:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000e6a9:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000e6b3:	58                   	pop    eax
c000e6b4:	5b                   	pop    ebx
c000e6b5:	5e                   	pop    esi
c000e6b6:	c3                   	ret    
c000e6b7:	83 ec 0c             	sub    esp,0xc
c000e6ba:	53                   	push   ebx
c000e6bb:	e8 e6 fa ff ff       	call   c000e1a6 <Device::getName()>
c000e6c0:	83 c4 10             	add    esp,0x10
c000e6c3:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e6c6:	75 8e                	jne    c000e656 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e6c8:	83 fe 0f             	cmp    esi,0xf
c000e6cb:	7f 09                	jg     c000e6d6 <InterruptController::clearAllHandlers(int, bool)+0x92>
c000e6cd:	0f b6 b6 60 58 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffda7a0]
c000e6d4:	eb 80                	jmp    c000e656 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e6d6:	83 ec 0c             	sub    esp,0xc
c000e6d9:	68 7c 33 02 c0       	push   0xc002337c
c000e6de:	e8 1c 5c 00 00       	call   c00142ff <Krnl::panic(char const*)>
c000e6e3:	83 c4 10             	add    esp,0x10
c000e6e6:	e9 6b ff ff ff       	jmp    c000e656 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e6eb:	90                   	nop

c000e6ec <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e6ec:	56                   	push   esi
c000e6ed:	53                   	push   ebx
c000e6ee:	52                   	push   edx
c000e6ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e6f3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e6f7:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e6fc:	75 3a                	jne    c000e738 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000e6fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e702:	8d 50 20             	lea    edx,[eax+0x20]
c000e705:	c1 e2 04             	shl    edx,0x4
c000e708:	8d 04 16             	lea    eax,[esi+edx*1]
c000e70b:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000e70f:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000e715:	74 0b                	je     c000e722 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000e717:	83 c0 04             	add    eax,0x4
c000e71a:	39 d0                	cmp    eax,edx
c000e71c:	75 f1                	jne    c000e70f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000e71e:	58                   	pop    eax
c000e71f:	5b                   	pop    ebx
c000e720:	5e                   	pop    esi
c000e721:	c3                   	ret    
c000e722:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e72c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e736:	eb df                	jmp    c000e717 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000e738:	83 ec 0c             	sub    esp,0xc
c000e73b:	56                   	push   esi
c000e73c:	e8 65 fa ff ff       	call   c000e1a6 <Device::getName()>
c000e741:	83 c4 10             	add    esp,0x10
c000e744:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e747:	75 b5                	jne    c000e6fe <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e749:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000e74e:	7f 11                	jg     c000e761 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000e750:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e754:	0f b6 80 60 58 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda7a0]
c000e75b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e75f:	eb 9d                	jmp    c000e6fe <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e761:	83 ec 0c             	sub    esp,0xc
c000e764:	68 89 33 02 c0       	push   0xc0023389
c000e769:	e8 91 5b 00 00       	call   c00142ff <Krnl::panic(char const*)>
c000e76e:	83 c4 10             	add    esp,0x10
c000e771:	eb 8b                	jmp    c000e6fe <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000e773 <nmiHandler(regs*, void*)>:
c000e773:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000e778:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e77c:	e9 0d aa ff ff       	jmp    c000918e <Computer::handleNMI()>

c000e781 <int_handler>:
c000e781:	55                   	push   ebp
c000e782:	57                   	push   edi
c000e783:	56                   	push   esi
c000e784:	53                   	push   ebx
c000e785:	83 ec 0c             	sub    esp,0xc
c000e788:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000e78c:	80 3d 44 6c 02 c0 00 	cmp    BYTE PTR ds:0xc0026c44,0x0
c000e793:	74 0b                	je     c000e7a0 <int_handler+0x1f>
c000e795:	fa                   	cli    
c000e796:	f4                   	hlt    
c000e797:	80 3d 44 6c 02 c0 00 	cmp    BYTE PTR ds:0xc0026c44,0x0
c000e79e:	75 f5                	jne    c000e795 <int_handler+0x14>
c000e7a0:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000e7a5:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000e7a8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e7ae:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000e7b4:	8d 43 e0             	lea    eax,[ebx-0x20]
c000e7b7:	83 f8 17             	cmp    eax,0x17
c000e7ba:	77 13                	ja     c000e7cf <int_handler+0x4e>
c000e7bc:	83 ec 08             	sub    esp,0x8
c000e7bf:	8b 17                	mov    edx,DWORD PTR [edi]
c000e7c1:	8d 43 e0             	lea    eax,[ebx-0x20]
c000e7c4:	0f b6 c0             	movzx  eax,al
c000e7c7:	50                   	push   eax
c000e7c8:	57                   	push   edi
c000e7c9:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000e7cc:	83 c4 10             	add    esp,0x10
c000e7cf:	83 c3 15             	add    ebx,0x15
c000e7d2:	c1 e3 04             	shl    ebx,0x4
c000e7d5:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000e7d9:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000e7e0:	31 db                	xor    ebx,ebx
c000e7e2:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000e7e6:	85 c0                	test   eax,eax
c000e7e8:	74 13                	je     c000e7fd <int_handler+0x7c>
c000e7ea:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000e7ed:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000e7f1:	74 1c                	je     c000e80f <int_handler+0x8e>
c000e7f3:	83 ec 08             	sub    esp,0x8
c000e7f6:	52                   	push   edx
c000e7f7:	56                   	push   esi
c000e7f8:	ff d0                	call   eax
c000e7fa:	83 c4 10             	add    esp,0x10
c000e7fd:	43                   	inc    ebx
c000e7fe:	83 fb 04             	cmp    ebx,0x4
c000e801:	75 df                	jne    c000e7e2 <int_handler+0x61>
c000e803:	83 c4 0c             	add    esp,0xc
c000e806:	31 c0                	xor    eax,eax
c000e808:	5b                   	pop    ebx
c000e809:	31 d2                	xor    edx,edx
c000e80b:	5e                   	pop    esi
c000e80c:	5f                   	pop    edi
c000e80d:	5d                   	pop    ebp
c000e80e:	c3                   	ret    
c000e80f:	83 ec 08             	sub    esp,0x8
c000e812:	52                   	push   edx
c000e813:	56                   	push   esi
c000e814:	ff d0                	call   eax
c000e816:	83 c4 10             	add    esp,0x10
c000e819:	83 c4 0c             	add    esp,0xc
c000e81c:	5b                   	pop    ebx
c000e81d:	5e                   	pop    esi
c000e81e:	5f                   	pop    edi
c000e81f:	5d                   	pop    ebp
c000e820:	c3                   	ret    
c000e821:	90                   	nop

c000e822 <InterruptController::InterruptController(char const*)>:
c000e822:	83 ec 1c             	sub    esp,0x1c
c000e825:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e829:	83 ec 08             	sub    esp,0x8
c000e82c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e830:	50                   	push   eax
c000e831:	e8 74 f8 ff ff       	call   c000e0aa <Device::Device(char const*)>
c000e836:	83 c4 10             	add    esp,0x10
c000e839:	ba 40 36 02 c0       	mov    edx,0xc0023640
c000e83e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e842:	89 10                	mov    DWORD PTR [eax],edx
c000e844:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e848:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000e852:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e85a:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000e862:	7f 5e                	jg     c000e8c2 <InterruptController::InterruptController(char const*)+0xa0>
c000e864:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e86c:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000e871:	7f 49                	jg     c000e8bc <InterruptController::InterruptController(char const*)+0x9a>
c000e873:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e877:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e87b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e882:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e886:	01 ca                	add    edx,ecx
c000e888:	83 c2 54             	add    edx,0x54
c000e88b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000e893:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e897:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e89b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e8a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e8a6:	01 ca                	add    edx,ecx
c000e8a8:	81 c2 54 04 00 00    	add    edx,0x454
c000e8ae:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000e8b6:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000e8ba:	eb b0                	jmp    c000e86c <InterruptController::InterruptController(char const*)+0x4a>
c000e8bc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e8c0:	eb 98                	jmp    c000e85a <InterruptController::InterruptController(char const*)+0x38>
c000e8c2:	90                   	nop
c000e8c3:	83 c4 1c             	add    esp,0x1c
c000e8c6:	c3                   	ret    
c000e8c7:	90                   	nop

c000e8c8 <InterruptController::~InterruptController()>:
c000e8c8:	83 ec 0c             	sub    esp,0xc
c000e8cb:	ba 40 36 02 c0       	mov    edx,0xc0023640
c000e8d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d4:	89 10                	mov    DWORD PTR [eax],edx
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	83 ec 0c             	sub    esp,0xc
c000e8dd:	50                   	push   eax
c000e8de:	e8 91 f4 ff ff       	call   c000dd74 <Device::~Device()>
c000e8e3:	83 c4 10             	add    esp,0x10
c000e8e6:	90                   	nop
c000e8e7:	83 c4 0c             	add    esp,0xc
c000e8ea:	c3                   	ret    
c000e8eb:	90                   	nop

c000e8ec <InterruptController::~InterruptController()>:
c000e8ec:	83 ec 0c             	sub    esp,0xc
c000e8ef:	83 ec 0c             	sub    esp,0xc
c000e8f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8f6:	e8 cd ff ff ff       	call   c000e8c8 <InterruptController::~InterruptController()>
c000e8fb:	83 c4 10             	add    esp,0x10
c000e8fe:	83 ec 08             	sub    esp,0x8
c000e901:	68 58 21 00 00       	push   0x2158
c000e906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e90a:	e8 6f e0 ff ff       	call   c000c97e <operator delete(void*, unsigned long)>
c000e90f:	83 c4 10             	add    esp,0x10
c000e912:	83 c4 0c             	add    esp,0xc
c000e915:	c3                   	ret    

c000e916 <displayDebugInfo(regs*)>:
c000e916:	55                   	push   ebp
c000e917:	57                   	push   edi
c000e918:	56                   	push   esi
c000e919:	53                   	push   ebx
c000e91a:	83 ec 24             	sub    esp,0x24
c000e91d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e921:	0f 20 c2             	mov    edx,cr0
c000e924:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e928:	0f 20 d7             	mov    edi,cr2
c000e92b:	0f 20 de             	mov    esi,cr3
c000e92e:	0f 20 e5             	mov    ebp,cr4
c000e931:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000e934:	68 96 33 02 c0       	push   0xc0023396
c000e939:	e8 21 e1 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000e93e:	59                   	pop    ecx
c000e93f:	58                   	pop    eax
c000e940:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e943:	68 a1 33 02 c0       	push   0xc00233a1
c000e948:	e8 12 e1 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000e94d:	58                   	pop    eax
c000e94e:	5a                   	pop    edx
c000e94f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e952:	68 ac 33 02 c0       	push   0xc00233ac
c000e957:	e8 03 e1 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000e95c:	59                   	pop    ecx
c000e95d:	58                   	pop    eax
c000e95e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e961:	68 b7 33 02 c0       	push   0xc00233b7
c000e966:	e8 f4 e0 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000e96b:	58                   	pop    eax
c000e96c:	5a                   	pop    edx
c000e96d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e970:	68 c2 33 02 c0       	push   0xc00233c2
c000e975:	e8 e5 e0 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000e97a:	59                   	pop    ecx
c000e97b:	58                   	pop    eax
c000e97c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000e97f:	68 cd 33 02 c0       	push   0xc00233cd
c000e984:	e8 d6 e0 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000e989:	58                   	pop    eax
c000e98a:	5a                   	pop    edx
c000e98b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e98e:	68 d8 33 02 c0       	push   0xc00233d8
c000e993:	e8 c7 e0 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000e998:	59                   	pop    ecx
c000e999:	58                   	pop    eax
c000e99a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e99d:	68 e3 33 02 c0       	push   0xc00233e3
c000e9a2:	e8 b8 e0 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000e9a7:	58                   	pop    eax
c000e9a8:	5a                   	pop    edx
c000e9a9:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000e9ac:	68 ee 33 02 c0       	push   0xc00233ee
c000e9b1:	e8 a9 e0 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000e9b6:	59                   	pop    ecx
c000e9b7:	58                   	pop    eax
c000e9b8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000e9bb:	68 fd 33 02 c0       	push   0xc00233fd
c000e9c0:	e8 9a e0 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000e9c5:	58                   	pop    eax
c000e9c6:	5a                   	pop    edx
c000e9c7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000e9ca:	68 08 34 02 c0       	push   0xc0023408
c000e9cf:	e8 8b e0 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000e9d4:	59                   	pop    ecx
c000e9d5:	58                   	pop    eax
c000e9d6:	57                   	push   edi
c000e9d7:	68 13 34 02 c0       	push   0xc0023413
c000e9dc:	e8 7e e0 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000e9e1:	58                   	pop    eax
c000e9e2:	5a                   	pop    edx
c000e9e3:	56                   	push   esi
c000e9e4:	68 1e 34 02 c0       	push   0xc002341e
c000e9e9:	e8 71 e0 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000e9ee:	59                   	pop    ecx
c000e9ef:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000e9f4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000e9fa:	e8 6a be ff ff       	call   c000a869 <setActiveTerminal(VgaText*)>
c000e9ff:	58                   	pop    eax
c000ea00:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000ea03:	5a                   	pop    edx
c000ea04:	c1 e0 05             	shl    eax,0x5
c000ea07:	05 c0 55 02 c0       	add    eax,0xc00255c0
c000ea0c:	50                   	push   eax
c000ea0d:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000ea12:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea18:	e8 59 c3 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c000ea1d:	59                   	pop    ecx
c000ea1e:	58                   	pop    eax
c000ea1f:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000ea24:	68 29 34 02 c0       	push   0xc0023429
c000ea29:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea2f:	e8 42 c3 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c000ea34:	58                   	pop    eax
c000ea35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ea3a:	5a                   	pop    edx
c000ea3b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ea3e:	83 c0 0c             	add    eax,0xc
c000ea41:	50                   	push   eax
c000ea42:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000ea47:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea4d:	e8 24 c3 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c000ea52:	59                   	pop    ecx
c000ea53:	58                   	pop    eax
c000ea54:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000ea59:	68 32 34 02 c0       	push   0xc0023432
c000ea5e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea64:	e8 0d c3 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c000ea69:	58                   	pop    eax
c000ea6a:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000ea6f:	5a                   	pop    edx
c000ea70:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ea73:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea79:	e8 b2 c2 ff ff       	call   c000ad30 <VgaText::putx(unsigned int)>
c000ea7e:	59                   	pop    ecx
c000ea7f:	58                   	pop    eax
c000ea80:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000ea85:	68 3a 34 02 c0       	push   0xc002343a
c000ea8a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea90:	e8 e1 c2 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c000ea95:	58                   	pop    eax
c000ea96:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000ea9b:	5a                   	pop    edx
c000ea9c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ea9f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eaa5:	e8 86 c2 ff ff       	call   c000ad30 <VgaText::putx(unsigned int)>
c000eaaa:	59                   	pop    ecx
c000eaab:	58                   	pop    eax
c000eaac:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000eab1:	68 42 34 02 c0       	push   0xc0023442
c000eab6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eabc:	e8 b5 c2 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c000eac1:	58                   	pop    eax
c000eac2:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000eac7:	5a                   	pop    edx
c000eac8:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000eacb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ead1:	e8 5a c2 ff ff       	call   c000ad30 <VgaText::putx(unsigned int)>
c000ead6:	59                   	pop    ecx
c000ead7:	58                   	pop    eax
c000ead8:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000eadd:	68 4a 34 02 c0       	push   0xc002344a
c000eae2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eae8:	e8 89 c2 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c000eaed:	58                   	pop    eax
c000eaee:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000eaf3:	5a                   	pop    edx
c000eaf4:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000eaf7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eafd:	e8 2e c2 ff ff       	call   c000ad30 <VgaText::putx(unsigned int)>
c000eb02:	59                   	pop    ecx
c000eb03:	58                   	pop    eax
c000eb04:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000eb09:	68 52 34 02 c0       	push   0xc0023452
c000eb0e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb14:	e8 5d c2 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c000eb19:	58                   	pop    eax
c000eb1a:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000eb1f:	5a                   	pop    edx
c000eb20:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000eb23:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb29:	e8 02 c2 ff ff       	call   c000ad30 <VgaText::putx(unsigned int)>
c000eb2e:	59                   	pop    ecx
c000eb2f:	58                   	pop    eax
c000eb30:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000eb35:	68 5a 34 02 c0       	push   0xc002345a
c000eb3a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb40:	e8 31 c2 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c000eb45:	58                   	pop    eax
c000eb46:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000eb4b:	5a                   	pop    edx
c000eb4c:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000eb4f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb55:	e8 d6 c1 ff ff       	call   c000ad30 <VgaText::putx(unsigned int)>
c000eb5a:	59                   	pop    ecx
c000eb5b:	58                   	pop    eax
c000eb5c:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000eb61:	68 62 34 02 c0       	push   0xc0023462
c000eb66:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb6c:	e8 05 c2 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c000eb71:	58                   	pop    eax
c000eb72:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000eb77:	5a                   	pop    edx
c000eb78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000eb7c:	52                   	push   edx
c000eb7d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb83:	e8 a8 c1 ff ff       	call   c000ad30 <VgaText::putx(unsigned int)>
c000eb88:	59                   	pop    ecx
c000eb89:	58                   	pop    eax
c000eb8a:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000eb8f:	68 6b 34 02 c0       	push   0xc002346b
c000eb94:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb9a:	e8 d7 c1 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c000eb9f:	58                   	pop    eax
c000eba0:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000eba5:	5a                   	pop    edx
c000eba6:	57                   	push   edi
c000eba7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebad:	e8 7e c1 ff ff       	call   c000ad30 <VgaText::putx(unsigned int)>
c000ebb2:	59                   	pop    ecx
c000ebb3:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000ebb8:	5f                   	pop    edi
c000ebb9:	68 73 34 02 c0       	push   0xc0023473
c000ebbe:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebc4:	e8 ad c1 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c000ebc9:	58                   	pop    eax
c000ebca:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000ebcf:	5a                   	pop    edx
c000ebd0:	56                   	push   esi
c000ebd1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebd7:	e8 54 c1 ff ff       	call   c000ad30 <VgaText::putx(unsigned int)>
c000ebdc:	59                   	pop    ecx
c000ebdd:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000ebe2:	5e                   	pop    esi
c000ebe3:	68 7b 34 02 c0       	push   0xc002347b
c000ebe8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebee:	e8 83 c1 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c000ebf3:	5f                   	pop    edi
c000ebf4:	58                   	pop    eax
c000ebf5:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000ebfa:	55                   	push   ebp
c000ebfb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec01:	e8 2a c1 ff ff       	call   c000ad30 <VgaText::putx(unsigned int)>
c000ec06:	58                   	pop    eax
c000ec07:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000ec0c:	5a                   	pop    edx
c000ec0d:	68 83 34 02 c0       	push   0xc0023483
c000ec12:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec18:	e8 59 c1 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c000ec1d:	0f 21 c0             	mov    eax,db0
c000ec20:	59                   	pop    ecx
c000ec21:	5e                   	pop    esi
c000ec22:	50                   	push   eax
c000ec23:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000ec28:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec2e:	e8 fd c0 ff ff       	call   c000ad30 <VgaText::putx(unsigned int)>
c000ec33:	5f                   	pop    edi
c000ec34:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000ec39:	5d                   	pop    ebp
c000ec3a:	68 8c 34 02 c0       	push   0xc002348c
c000ec3f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec45:	e8 2c c1 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c000ec4a:	0f 21 c8             	mov    eax,db1
c000ec4d:	5a                   	pop    edx
c000ec4e:	59                   	pop    ecx
c000ec4f:	50                   	push   eax
c000ec50:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000ec55:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec5b:	e8 d0 c0 ff ff       	call   c000ad30 <VgaText::putx(unsigned int)>
c000ec60:	5e                   	pop    esi
c000ec61:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000ec66:	5f                   	pop    edi
c000ec67:	68 94 34 02 c0       	push   0xc0023494
c000ec6c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec72:	e8 ff c0 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c000ec77:	0f 21 d0             	mov    eax,db2
c000ec7a:	5d                   	pop    ebp
c000ec7b:	5a                   	pop    edx
c000ec7c:	50                   	push   eax
c000ec7d:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000ec82:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec88:	e8 a3 c0 ff ff       	call   c000ad30 <VgaText::putx(unsigned int)>
c000ec8d:	59                   	pop    ecx
c000ec8e:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000ec93:	5e                   	pop    esi
c000ec94:	68 9c 34 02 c0       	push   0xc002349c
c000ec99:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec9f:	e8 d2 c0 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c000eca4:	0f 21 d8             	mov    eax,db3
c000eca7:	5f                   	pop    edi
c000eca8:	5d                   	pop    ebp
c000eca9:	50                   	push   eax
c000ecaa:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000ecaf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecb5:	e8 76 c0 ff ff       	call   c000ad30 <VgaText::putx(unsigned int)>
c000ecba:	58                   	pop    eax
c000ecbb:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000ecc0:	5a                   	pop    edx
c000ecc1:	68 a4 34 02 c0       	push   0xc00234a4
c000ecc6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eccc:	e8 a5 c0 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c000ecd1:	0f 21 f0             	mov    eax,db6
c000ecd4:	59                   	pop    ecx
c000ecd5:	5e                   	pop    esi
c000ecd6:	50                   	push   eax
c000ecd7:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000ecdc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ece2:	e8 49 c0 ff ff       	call   c000ad30 <VgaText::putx(unsigned int)>
c000ece7:	5f                   	pop    edi
c000ece8:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000eced:	5d                   	pop    ebp
c000ecee:	68 ac 34 02 c0       	push   0xc00234ac
c000ecf3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecf9:	e8 78 c0 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c000ecfe:	0f 21 f8             	mov    eax,db7
c000ed01:	5a                   	pop    edx
c000ed02:	59                   	pop    ecx
c000ed03:	50                   	push   eax
c000ed04:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000ed09:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed0f:	e8 1c c0 ff ff       	call   c000ad30 <VgaText::putx(unsigned int)>
c000ed14:	5e                   	pop    esi
c000ed15:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ed18:	e8 7c 87 00 00       	call   c0017499 <Thr::getDriverNameFromAddress(unsigned long)>
c000ed1d:	83 c4 10             	add    esp,0x10
c000ed20:	85 c0                	test   eax,eax
c000ed22:	74 7d                	je     c000eda1 <displayDebugInfo(regs*)+0x48b>
c000ed24:	89 c6                	mov    esi,eax
c000ed26:	50                   	push   eax
c000ed27:	50                   	push   eax
c000ed28:	56                   	push   esi
c000ed29:	68 b4 34 02 c0       	push   0xc00234b4
c000ed2e:	e8 2c dd ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000ed33:	5a                   	pop    edx
c000ed34:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000ed39:	59                   	pop    ecx
c000ed3a:	68 c2 34 02 c0       	push   0xc00234c2
c000ed3f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed45:	e8 2c c0 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c000ed4a:	5f                   	pop    edi
c000ed4b:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000ed50:	5d                   	pop    ebp
c000ed51:	56                   	push   esi
c000ed52:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed58:	e8 19 c0 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c000ed5d:	58                   	pop    eax
c000ed5e:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000ed63:	5a                   	pop    edx
c000ed64:	68 ce 34 02 c0       	push   0xc00234ce
c000ed69:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed6f:	e8 02 c0 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c000ed74:	59                   	pop    ecx
c000ed75:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000ed7a:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000ed80:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ed83:	e8 48 87 00 00       	call   c00174d0 <Thr::getDriverOffsetFromAddress(unsigned long)>
c000ed88:	5b                   	pop    ebx
c000ed89:	5d                   	pop    ebp
c000ed8a:	50                   	push   eax
c000ed8b:	57                   	push   edi
c000ed8c:	e8 9f bf ff ff       	call   c000ad30 <VgaText::putx(unsigned int)>
c000ed91:	58                   	pop    eax
c000ed92:	5a                   	pop    edx
c000ed93:	56                   	push   esi
c000ed94:	68 da 34 02 c0       	push   0xc00234da
c000ed99:	e8 c1 dc ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000ed9e:	83 c4 10             	add    esp,0x10
c000eda1:	fa                   	cli    
c000eda2:	f4                   	hlt    
c000eda3:	eb fe                	jmp    c000eda3 <displayDebugInfo(regs*)+0x48d>

c000eda5 <x87EmulHandler(regs*, void*)>:
c000eda5:	83 ec 0c             	sub    esp,0xc
c000eda8:	0f 20 c2             	mov    edx,cr0
c000edab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000edb0:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000edb4:	75 4b                	jne    c000ee01 <x87EmulHandler(regs*, void*)+0x5c>
c000edb6:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000edbb:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000edc1:	85 c0                	test   eax,eax
c000edc3:	74 05                	je     c000edca <x87EmulHandler(regs*, void*)+0x25>
c000edc5:	83 e2 08             	and    edx,0x8
c000edc8:	75 17                	jne    c000ede1 <x87EmulHandler(regs*, void*)+0x3c>
c000edca:	83 ec 0c             	sub    esp,0xc
c000edcd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000edd1:	e8 70 ab 00 00       	call   c0019946 <Vm::x87Handler(regs*)>
c000edd6:	83 c4 10             	add    esp,0x10
c000edd9:	84 c0                	test   al,al
c000eddb:	74 24                	je     c000ee01 <x87EmulHandler(regs*, void*)+0x5c>
c000eddd:	83 c4 0c             	add    esp,0xc
c000ede0:	c3                   	ret    
c000ede1:	83 ec 0c             	sub    esp,0xc
c000ede4:	68 00 35 02 c0       	push   0xc0023500
c000ede9:	e8 71 dc ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000edee:	0f 06                	clts   
c000edf0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000edf5:	83 c4 10             	add    esp,0x10
c000edf8:	a3 a8 62 02 c0       	mov    ds:0xc00262a8,eax
c000edfd:	83 c4 0c             	add    esp,0xc
c000ee00:	c3                   	ret    
c000ee01:	83 ec 0c             	sub    esp,0xc
c000ee04:	68 ea 34 02 c0       	push   0xc00234ea
c000ee09:	e8 51 dc ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000ee0e:	5a                   	pop    edx
c000ee0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ee13:	e8 fe fa ff ff       	call   c000e916 <displayDebugInfo(regs*)>

c000ee18 <gpFault(regs*, void*)>:
c000ee18:	53                   	push   ebx
c000ee19:	83 ec 14             	sub    esp,0x14
c000ee1c:	c7 05 a4 62 02 c0 02 8e 01 c0 	mov    DWORD PTR ds:0xc00262a4,0xc0018e02
c000ee26:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee2a:	53                   	push   ebx
c000ee2b:	e8 d2 9f 00 00       	call   c0018e02 <Vm::faultHandler(regs*)>
c000ee30:	83 c4 10             	add    esp,0x10
c000ee33:	84 c0                	test   al,al
c000ee35:	74 05                	je     c000ee3c <gpFault(regs*, void*)+0x24>
c000ee37:	83 c4 08             	add    esp,0x8
c000ee3a:	5b                   	pop    ebx
c000ee3b:	c3                   	ret    
c000ee3c:	83 ec 0c             	sub    esp,0xc
c000ee3f:	68 0d 35 02 c0       	push   0xc002350d
c000ee44:	e8 16 dc ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000ee49:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee4c:	e8 c5 fa ff ff       	call   c000e916 <displayDebugInfo(regs*)>

c000ee51 <pgFault(regs*, void*)>:
c000ee51:	53                   	push   ebx
c000ee52:	83 ec 10             	sub    esp,0x10
c000ee55:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ee59:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ee5c:	68 28 35 02 c0       	push   0xc0023528
c000ee61:	e8 f9 db ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000ee66:	0f 20 d0             	mov    eax,cr2
c000ee69:	5a                   	pop    edx
c000ee6a:	59                   	pop    ecx
c000ee6b:	50                   	push   eax
c000ee6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee71:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ee74:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000ee7a:	e8 5b d7 ff ff       	call   c000c5da <VAS::tryLoadBackOffDisk(unsigned long)>
c000ee7f:	83 c4 10             	add    esp,0x10
c000ee82:	84 c0                	test   al,al
c000ee84:	74 05                	je     c000ee8b <pgFault(regs*, void*)+0x3a>
c000ee86:	83 c4 08             	add    esp,0x8
c000ee89:	5b                   	pop    ebx
c000ee8a:	c3                   	ret    
c000ee8b:	83 ec 0c             	sub    esp,0xc
c000ee8e:	68 3d 35 02 c0       	push   0xc002353d
c000ee93:	e8 c7 db ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000ee98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee9b:	e8 76 fa ff ff       	call   c000e916 <displayDebugInfo(regs*)>

c000eea0 <otherISRHandler(regs*, void*)>:
c000eea0:	53                   	push   ebx
c000eea1:	83 ec 0c             	sub    esp,0xc
c000eea4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000eea8:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000eeab:	50                   	push   eax
c000eeac:	50                   	push   eax
c000eead:	68 4a 35 02 c0       	push   0xc002354a
c000eeb2:	e8 a8 db ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000eeb7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eeba:	e8 57 fa ff ff       	call   c000e916 <displayDebugInfo(regs*)>

c000eebf <opcodeFault(regs*, void*)>:
c000eebf:	55                   	push   ebp
c000eec0:	89 e5                	mov    ebp,esp
c000eec2:	56                   	push   esi
c000eec3:	53                   	push   ebx
c000eec4:	83 ec 30             	sub    esp,0x30
c000eec7:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000eecc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000eed2:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000eed8:	84 c0                	test   al,al
c000eeda:	74 24                	je     c000ef00 <opcodeFault(regs*, void*)+0x41>
c000eedc:	83 ec 0c             	sub    esp,0xc
c000eedf:	68 68 35 02 c0       	push   0xc0023568
c000eee4:	e8 76 db ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000eee9:	83 c4 10             	add    esp,0x10
c000eeec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eeef:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000eef2:	8d 50 19             	lea    edx,[eax+0x19]
c000eef5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eef8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000eefb:	e9 7b 03 00 00       	jmp    c000f27b <opcodeFault(regs*, void*)+0x3bc>
c000ef00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef03:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef06:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000ef09:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000ef0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef10:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef13:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000ef16:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef19:	8a 00                	mov    al,BYTE PTR [eax]
c000ef1b:	3c f0                	cmp    al,0xf0
c000ef1d:	75 17                	jne    c000ef36 <opcodeFault(regs*, void*)+0x77>
c000ef1f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef25:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef28:	8d 50 01             	lea    edx,[eax+0x1]
c000ef2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef2e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef31:	e9 d6 00 00 00       	jmp    c000f00c <opcodeFault(regs*, void*)+0x14d>
c000ef36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef39:	8a 00                	mov    al,BYTE PTR [eax]
c000ef3b:	3c f2                	cmp    al,0xf2
c000ef3d:	74 09                	je     c000ef48 <opcodeFault(regs*, void*)+0x89>
c000ef3f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef42:	8a 00                	mov    al,BYTE PTR [eax]
c000ef44:	3c f3                	cmp    al,0xf3
c000ef46:	75 1b                	jne    c000ef63 <opcodeFault(regs*, void*)+0xa4>
c000ef48:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000ef4c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef52:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef55:	8d 50 01             	lea    edx,[eax+0x1]
c000ef58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef5b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef5e:	e9 a9 00 00 00       	jmp    c000f00c <opcodeFault(regs*, void*)+0x14d>
c000ef63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef66:	8a 00                	mov    al,BYTE PTR [eax]
c000ef68:	3c 66                	cmp    al,0x66
c000ef6a:	75 1b                	jne    c000ef87 <opcodeFault(regs*, void*)+0xc8>
c000ef6c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000ef70:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef76:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef79:	8d 50 01             	lea    edx,[eax+0x1]
c000ef7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef7f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef82:	e9 85 00 00 00       	jmp    c000f00c <opcodeFault(regs*, void*)+0x14d>
c000ef87:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef8a:	8a 00                	mov    al,BYTE PTR [eax]
c000ef8c:	3c 67                	cmp    al,0x67
c000ef8e:	75 18                	jne    c000efa8 <opcodeFault(regs*, void*)+0xe9>
c000ef90:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000ef94:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef9a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef9d:	8d 50 01             	lea    edx,[eax+0x1]
c000efa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efa3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000efa6:	eb 64                	jmp    c000f00c <opcodeFault(regs*, void*)+0x14d>
c000efa8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efab:	8a 00                	mov    al,BYTE PTR [eax]
c000efad:	3c 2e                	cmp    al,0x2e
c000efaf:	74 09                	je     c000efba <opcodeFault(regs*, void*)+0xfb>
c000efb1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efb4:	8a 00                	mov    al,BYTE PTR [eax]
c000efb6:	3c 3e                	cmp    al,0x3e
c000efb8:	75 18                	jne    c000efd2 <opcodeFault(regs*, void*)+0x113>
c000efba:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000efbe:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000efc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efc4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000efc7:	8d 50 01             	lea    edx,[eax+0x1]
c000efca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efcd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000efd0:	eb 3a                	jmp    c000f00c <opcodeFault(regs*, void*)+0x14d>
c000efd2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efd5:	8a 00                	mov    al,BYTE PTR [eax]
c000efd7:	3c 36                	cmp    al,0x36
c000efd9:	74 1b                	je     c000eff6 <opcodeFault(regs*, void*)+0x137>
c000efdb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efde:	8a 00                	mov    al,BYTE PTR [eax]
c000efe0:	3c 26                	cmp    al,0x26
c000efe2:	74 12                	je     c000eff6 <opcodeFault(regs*, void*)+0x137>
c000efe4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efe7:	8a 00                	mov    al,BYTE PTR [eax]
c000efe9:	3c 64                	cmp    al,0x64
c000efeb:	74 09                	je     c000eff6 <opcodeFault(regs*, void*)+0x137>
c000efed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000eff0:	8a 00                	mov    al,BYTE PTR [eax]
c000eff2:	3c 65                	cmp    al,0x65
c000eff4:	75 16                	jne    c000f00c <opcodeFault(regs*, void*)+0x14d>
c000eff6:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000effa:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000effd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f000:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f003:	8d 50 01             	lea    edx,[eax+0x1]
c000f006:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f009:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f00c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f00f:	8a 00                	mov    al,BYTE PTR [eax]
c000f011:	3c 0f                	cmp    al,0xf
c000f013:	0f 85 8d 01 00 00    	jne    c000f1a6 <opcodeFault(regs*, void*)+0x2e7>
c000f019:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f01c:	40                   	inc    eax
c000f01d:	8a 00                	mov    al,BYTE PTR [eax]
c000f01f:	3c c7                	cmp    al,0xc7
c000f021:	0f 85 7f 01 00 00    	jne    c000f1a6 <opcodeFault(regs*, void*)+0x2e7>
c000f027:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f02a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f02d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f030:	8d 50 01             	lea    edx,[eax+0x1]
c000f033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f036:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f039:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f03c:	50                   	push   eax
c000f03d:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f040:	50                   	push   eax
c000f041:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f044:	50                   	push   eax
c000f045:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f048:	e8 cb 49 00 00       	call   c0013a18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f04d:	83 c4 10             	add    esp,0x10
c000f050:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f053:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f056:	83 f0 01             	xor    eax,0x1
c000f059:	84 c0                	test   al,al
c000f05b:	0f 84 45 01 00 00    	je     c000f1a6 <opcodeFault(regs*, void*)+0x2e7>
c000f061:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f064:	3c 01                	cmp    al,0x1
c000f066:	0f 85 3a 01 00 00    	jne    c000f1a6 <opcodeFault(regs*, void*)+0x2e7>
c000f06c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f06f:	83 f0 01             	xor    eax,0x1
c000f072:	84 c0                	test   al,al
c000f074:	0f 84 2c 01 00 00    	je     c000f1a6 <opcodeFault(regs*, void*)+0x2e7>
c000f07a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f07d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f080:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f083:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f08a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f08d:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f090:	89 c2                	mov    edx,eax
c000f092:	b8 00 00 00 00       	mov    eax,0x0
c000f097:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f09a:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f09d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0a0:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f0a3:	ba 00 00 00 00       	mov    edx,0x0
c000f0a8:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f0ab:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f0ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0b1:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f0b4:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f0b7:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f0be:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f0c1:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f0c4:	89 c2                	mov    edx,eax
c000f0c6:	b8 00 00 00 00       	mov    eax,0x0
c000f0cb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f0ce:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f0d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0d4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f0d7:	ba 00 00 00 00       	mov    edx,0x0
c000f0dc:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f0df:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f0e2:	fa                   	cli    
c000f0e3:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c000f0e8:	40                   	inc    eax
c000f0e9:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c000f0ee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f0f1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f0f4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0f6:	89 c1                	mov    ecx,eax
c000f0f8:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f0fb:	89 cb                	mov    ebx,ecx
c000f0fd:	89 d0                	mov    eax,edx
c000f0ff:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f102:	89 c6                	mov    esi,eax
c000f104:	89 f0                	mov    eax,esi
c000f106:	09 d8                	or     eax,ebx
c000f108:	85 c0                	test   eax,eax
c000f10a:	75 21                	jne    c000f12d <opcodeFault(regs*, void*)+0x26e>
c000f10c:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f10f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f112:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f115:	89 01                	mov    DWORD PTR [ecx],eax
c000f117:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f11a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f11d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f120:	83 c8 40             	or     eax,0x40
c000f123:	89 c2                	mov    edx,eax
c000f125:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f128:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f12b:	eb 3e                	jmp    c000f16b <opcodeFault(regs*, void*)+0x2ac>
c000f12d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f130:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f133:	8b 00                	mov    eax,DWORD PTR [eax]
c000f135:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f138:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f13b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f13e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f141:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f144:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f147:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f14a:	89 d0                	mov    eax,edx
c000f14c:	31 d2                	xor    edx,edx
c000f14e:	89 c3                	mov    ebx,eax
c000f150:	89 d6                	mov    esi,edx
c000f152:	89 da                	mov    edx,ebx
c000f154:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f157:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f15a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f15d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f160:	83 e0 bf             	and    eax,0xffffffbf
c000f163:	89 c2                	mov    edx,eax
c000f165:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f168:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f16b:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c000f170:	48                   	dec    eax
c000f171:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c000f176:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c000f17b:	85 c0                	test   eax,eax
c000f17d:	75 01                	jne    c000f180 <opcodeFault(regs*, void*)+0x2c1>
c000f17f:	fb                   	sti    
c000f180:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f183:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f186:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f189:	01 c2                	add    edx,eax
c000f18b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f18e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f191:	83 ec 0c             	sub    esp,0xc
c000f194:	68 8b 35 02 c0       	push   0xc002358b
c000f199:	e8 c1 d8 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000f19e:	83 c4 10             	add    esp,0x10
c000f1a1:	e9 d5 00 00 00       	jmp    c000f27b <opcodeFault(regs*, void*)+0x3bc>
c000f1a6:	83 ec 0c             	sub    esp,0xc
c000f1a9:	68 9e 35 02 c0       	push   0xc002359e
c000f1ae:	e8 ac d8 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000f1b3:	83 c4 10             	add    esp,0x10
c000f1b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1b9:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f1bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1bf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f1c2:	c1 e0 04             	shl    eax,0x4
c000f1c5:	01 d0                	add    eax,edx
c000f1c7:	83 c0 03             	add    eax,0x3
c000f1ca:	8a 00                	mov    al,BYTE PTR [eax]
c000f1cc:	0f b6 d8             	movzx  ebx,al
c000f1cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1d2:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f1d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1d8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f1db:	c1 e0 04             	shl    eax,0x4
c000f1de:	01 d0                	add    eax,edx
c000f1e0:	83 c0 02             	add    eax,0x2
c000f1e3:	8a 00                	mov    al,BYTE PTR [eax]
c000f1e5:	0f b6 c8             	movzx  ecx,al
c000f1e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1eb:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f1ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1f1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f1f4:	c1 e0 04             	shl    eax,0x4
c000f1f7:	01 d0                	add    eax,edx
c000f1f9:	40                   	inc    eax
c000f1fa:	8a 00                	mov    al,BYTE PTR [eax]
c000f1fc:	0f b6 d0             	movzx  edx,al
c000f1ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f202:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f205:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f208:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f20b:	c1 e0 04             	shl    eax,0x4
c000f20e:	01 f0                	add    eax,esi
c000f210:	8a 00                	mov    al,BYTE PTR [eax]
c000f212:	0f b6 c0             	movzx  eax,al
c000f215:	83 ec 0c             	sub    esp,0xc
c000f218:	53                   	push   ebx
c000f219:	51                   	push   ecx
c000f21a:	52                   	push   edx
c000f21b:	50                   	push   eax
c000f21c:	68 b0 35 02 c0       	push   0xc00235b0
c000f221:	e8 39 d8 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000f226:	83 c4 20             	add    esp,0x20
c000f229:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f22c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f22f:	83 c0 03             	add    eax,0x3
c000f232:	8a 00                	mov    al,BYTE PTR [eax]
c000f234:	0f b6 d8             	movzx  ebx,al
c000f237:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f23a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f23d:	83 c0 02             	add    eax,0x2
c000f240:	8a 00                	mov    al,BYTE PTR [eax]
c000f242:	0f b6 c8             	movzx  ecx,al
c000f245:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f248:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f24b:	40                   	inc    eax
c000f24c:	8a 00                	mov    al,BYTE PTR [eax]
c000f24e:	0f b6 d0             	movzx  edx,al
c000f251:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f254:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f257:	8a 00                	mov    al,BYTE PTR [eax]
c000f259:	0f b6 c0             	movzx  eax,al
c000f25c:	83 ec 0c             	sub    esp,0xc
c000f25f:	53                   	push   ebx
c000f260:	51                   	push   ecx
c000f261:	52                   	push   edx
c000f262:	50                   	push   eax
c000f263:	68 d8 35 02 c0       	push   0xc00235d8
c000f268:	e8 f2 d7 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c000f26d:	83 c4 20             	add    esp,0x20
c000f270:	83 ec 0c             	sub    esp,0xc
c000f273:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f276:	e8 9b f6 ff ff       	call   c000e916 <displayDebugInfo(regs*)>
c000f27b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000f27e:	5b                   	pop    ebx
c000f27f:	5e                   	pop    esi
c000f280:	5d                   	pop    ebp
c000f281:	c3                   	ret    

c000f282 <displayProgramFault(char const*)>:
c000f282:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f287:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f28a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000f290:	85 c0                	test   eax,eax
c000f292:	74 15                	je     c000f2a9 <displayProgramFault(char const*)+0x27>
c000f294:	83 ec 0c             	sub    esp,0xc
c000f297:	6a 04                	push   0x4
c000f299:	6a 0f                	push   0xf
c000f29b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f29f:	50                   	push   eax
c000f2a0:	e8 cd b7 ff ff       	call   c000aa72 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f2a5:	83 c4 1c             	add    esp,0x1c
c000f2a8:	c3                   	ret    
c000f2a9:	c3                   	ret    

c000f2aa <setupInterruptController()>:
c000f2aa:	55                   	push   ebp
c000f2ab:	89 e5                	mov    ebp,esp
c000f2ad:	53                   	push   ebx
c000f2ae:	83 ec 24             	sub    esp,0x24
c000f2b1:	b8 00 00 00 00       	mov    eax,0x0
c000f2b6:	85 c0                	test   eax,eax
c000f2b8:	0f 95 c0             	setne  al
c000f2bb:	84 c0                	test   al,al
c000f2bd:	74 5b                	je     c000f31a <setupInterruptController()+0x70>
c000f2bf:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000f2c6:	83 ec 0c             	sub    esp,0xc
c000f2c9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f2cc:	e8 f2 a6 ff ff       	call   c00099c3 <malloc>
c000f2d1:	83 c4 10             	add    esp,0x10
c000f2d4:	89 c3                	mov    ebx,eax
c000f2d6:	83 ec 0c             	sub    esp,0xc
c000f2d9:	53                   	push   ebx
c000f2da:	e8 5b 0b 01 00       	call   c001fe3a <APIC::APIC()>
c000f2df:	83 c4 10             	add    esp,0x10
c000f2e2:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f2e5:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000f2e8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f2eb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2ed:	83 c0 08             	add    eax,0x8
c000f2f0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2f2:	6a 00                	push   0x0
c000f2f4:	6a 00                	push   0x0
c000f2f6:	6a 00                	push   0x0
c000f2f8:	52                   	push   edx
c000f2f9:	ff d0                	call   eax
c000f2fb:	83 c4 10             	add    esp,0x10
c000f2fe:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000f303:	83 ec 08             	sub    esp,0x8
c000f306:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f309:	50                   	push   eax
c000f30a:	e8 97 eb ff ff       	call   c000dea6 <Device::addChild(Device*)>
c000f30f:	83 c4 10             	add    esp,0x10
c000f312:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f315:	e9 79 03 00 00       	jmp    c000f693 <setupInterruptController()+0x3e9>
c000f31a:	a0 80 6a 02 c0       	mov    al,ds:0xc0026a80
c000f31f:	84 c0                	test   al,al
c000f321:	75 14                	jne    c000f337 <setupInterruptController()+0x8d>
c000f323:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000f328:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000f32e:	83 e2 fe             	and    edx,0xfffffffe
c000f331:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000f337:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000f33c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000f342:	83 e0 01             	and    eax,0x1
c000f345:	84 c0                	test   al,al
c000f347:	0f 95 c0             	setne  al
c000f34a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000f34d:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000f354:	83 ec 0c             	sub    esp,0xc
c000f357:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000f35a:	e8 64 a6 ff ff       	call   c00099c3 <malloc>
c000f35f:	83 c4 10             	add    esp,0x10
c000f362:	89 c3                	mov    ebx,eax
c000f364:	83 ec 0c             	sub    esp,0xc
c000f367:	53                   	push   ebx
c000f368:	e8 25 10 01 00       	call   c0020392 <PIC::PIC()>
c000f36d:	83 c4 10             	add    esp,0x10
c000f370:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f373:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f376:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f379:	8b 00                	mov    eax,DWORD PTR [eax]
c000f37b:	83 c0 08             	add    eax,0x8
c000f37e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f380:	6a 00                	push   0x0
c000f382:	6a 00                	push   0x0
c000f384:	6a 00                	push   0x0
c000f386:	52                   	push   edx
c000f387:	ff d0                	call   eax
c000f389:	83 c4 10             	add    esp,0x10
c000f38c:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000f390:	74 73                	je     c000f405 <setupInterruptController()+0x15b>
c000f392:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f395:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f398:	8b 00                	mov    eax,DWORD PTR [eax]
c000f39a:	83 c0 0c             	add    eax,0xc
c000f39d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f39f:	6a 00                	push   0x0
c000f3a1:	6a 00                	push   0x0
c000f3a3:	6a 00                	push   0x0
c000f3a5:	52                   	push   edx
c000f3a6:	ff d0                	call   eax
c000f3a8:	83 c4 10             	add    esp,0x10
c000f3ab:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f3af:	74 15                	je     c000f3c6 <setupInterruptController()+0x11c>
c000f3b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3b4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3b6:	83 c0 04             	add    eax,0x4
c000f3b9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3bb:	83 ec 0c             	sub    esp,0xc
c000f3be:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f3c1:	ff d0                	call   eax
c000f3c3:	83 c4 10             	add    esp,0x10
c000f3c6:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000f3cd:	83 ec 0c             	sub    esp,0xc
c000f3d0:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f3d3:	e8 eb a5 ff ff       	call   c00099c3 <malloc>
c000f3d8:	83 c4 10             	add    esp,0x10
c000f3db:	89 c3                	mov    ebx,eax
c000f3dd:	83 ec 0c             	sub    esp,0xc
c000f3e0:	53                   	push   ebx
c000f3e1:	e8 54 0a 01 00       	call   c001fe3a <APIC::APIC()>
c000f3e6:	83 c4 10             	add    esp,0x10
c000f3e9:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f3ec:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f3ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3f2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3f4:	83 c0 08             	add    eax,0x8
c000f3f7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3f9:	6a 00                	push   0x0
c000f3fb:	6a 00                	push   0x0
c000f3fd:	6a 00                	push   0x0
c000f3ff:	52                   	push   edx
c000f400:	ff d0                	call   eax
c000f402:	83 c4 10             	add    esp,0x10
c000f405:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c000f40a:	83 ec 08             	sub    esp,0x8
c000f40d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f410:	50                   	push   eax
c000f411:	e8 90 ea ff ff       	call   c000dea6 <Device::addChild(Device*)>
c000f416:	83 c4 10             	add    esp,0x10
c000f419:	c7 05 a8 62 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00262a8,0x0
c000f423:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f426:	8b 00                	mov    eax,DWORD PTR [eax]
c000f428:	83 c0 24             	add    eax,0x24
c000f42b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f42d:	6a 00                	push   0x0
c000f42f:	68 a0 ee 00 c0       	push   0xc000eea0
c000f434:	6a 00                	push   0x0
c000f436:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f439:	ff d0                	call   eax
c000f43b:	83 c4 10             	add    esp,0x10
c000f43e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f441:	8b 00                	mov    eax,DWORD PTR [eax]
c000f443:	83 c0 24             	add    eax,0x24
c000f446:	8b 00                	mov    eax,DWORD PTR [eax]
c000f448:	6a 00                	push   0x0
c000f44a:	68 a0 ee 00 c0       	push   0xc000eea0
c000f44f:	6a 01                	push   0x1
c000f451:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f454:	ff d0                	call   eax
c000f456:	83 c4 10             	add    esp,0x10
c000f459:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f45c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f45e:	83 c0 24             	add    eax,0x24
c000f461:	8b 00                	mov    eax,DWORD PTR [eax]
c000f463:	6a 00                	push   0x0
c000f465:	68 73 e7 00 c0       	push   0xc000e773
c000f46a:	6a 02                	push   0x2
c000f46c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f46f:	ff d0                	call   eax
c000f471:	83 c4 10             	add    esp,0x10
c000f474:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f477:	8b 00                	mov    eax,DWORD PTR [eax]
c000f479:	83 c0 24             	add    eax,0x24
c000f47c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f47e:	6a 00                	push   0x0
c000f480:	68 a0 ee 00 c0       	push   0xc000eea0
c000f485:	6a 03                	push   0x3
c000f487:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f48a:	ff d0                	call   eax
c000f48c:	83 c4 10             	add    esp,0x10
c000f48f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f492:	8b 00                	mov    eax,DWORD PTR [eax]
c000f494:	83 c0 24             	add    eax,0x24
c000f497:	8b 00                	mov    eax,DWORD PTR [eax]
c000f499:	6a 00                	push   0x0
c000f49b:	68 a0 ee 00 c0       	push   0xc000eea0
c000f4a0:	6a 04                	push   0x4
c000f4a2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4a5:	ff d0                	call   eax
c000f4a7:	83 c4 10             	add    esp,0x10
c000f4aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4af:	83 c0 24             	add    eax,0x24
c000f4b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 a0 ee 00 c0       	push   0xc000eea0
c000f4bb:	6a 05                	push   0x5
c000f4bd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4c0:	ff d0                	call   eax
c000f4c2:	83 c4 10             	add    esp,0x10
c000f4c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4ca:	83 c0 24             	add    eax,0x24
c000f4cd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4cf:	6a 00                	push   0x0
c000f4d1:	68 bf ee 00 c0       	push   0xc000eebf
c000f4d6:	6a 06                	push   0x6
c000f4d8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4db:	ff d0                	call   eax
c000f4dd:	83 c4 10             	add    esp,0x10
c000f4e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4e3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4e5:	83 c0 24             	add    eax,0x24
c000f4e8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4ea:	6a 00                	push   0x0
c000f4ec:	68 a5 ed 00 c0       	push   0xc000eda5
c000f4f1:	6a 07                	push   0x7
c000f4f3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4f6:	ff d0                	call   eax
c000f4f8:	83 c4 10             	add    esp,0x10
c000f4fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4fe:	8b 00                	mov    eax,DWORD PTR [eax]
c000f500:	83 c0 24             	add    eax,0x24
c000f503:	8b 00                	mov    eax,DWORD PTR [eax]
c000f505:	6a 00                	push   0x0
c000f507:	68 8e e5 00 c0       	push   0xc000e58e
c000f50c:	6a 08                	push   0x8
c000f50e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f511:	ff d0                	call   eax
c000f513:	83 c4 10             	add    esp,0x10
c000f516:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f519:	8b 00                	mov    eax,DWORD PTR [eax]
c000f51b:	83 c0 24             	add    eax,0x24
c000f51e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f520:	6a 00                	push   0x0
c000f522:	68 a0 ee 00 c0       	push   0xc000eea0
c000f527:	6a 09                	push   0x9
c000f529:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f52c:	ff d0                	call   eax
c000f52e:	83 c4 10             	add    esp,0x10
c000f531:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f534:	8b 00                	mov    eax,DWORD PTR [eax]
c000f536:	83 c0 24             	add    eax,0x24
c000f539:	8b 00                	mov    eax,DWORD PTR [eax]
c000f53b:	6a 00                	push   0x0
c000f53d:	68 a0 ee 00 c0       	push   0xc000eea0
c000f542:	6a 0a                	push   0xa
c000f544:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f547:	ff d0                	call   eax
c000f549:	83 c4 10             	add    esp,0x10
c000f54c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f54f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f551:	83 c0 24             	add    eax,0x24
c000f554:	8b 00                	mov    eax,DWORD PTR [eax]
c000f556:	6a 00                	push   0x0
c000f558:	68 a0 ee 00 c0       	push   0xc000eea0
c000f55d:	6a 0b                	push   0xb
c000f55f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f562:	ff d0                	call   eax
c000f564:	83 c4 10             	add    esp,0x10
c000f567:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f56a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f56c:	83 c0 24             	add    eax,0x24
c000f56f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f571:	6a 00                	push   0x0
c000f573:	68 a0 ee 00 c0       	push   0xc000eea0
c000f578:	6a 0c                	push   0xc
c000f57a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f57d:	ff d0                	call   eax
c000f57f:	83 c4 10             	add    esp,0x10
c000f582:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f585:	8b 00                	mov    eax,DWORD PTR [eax]
c000f587:	83 c0 24             	add    eax,0x24
c000f58a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f58c:	6a 00                	push   0x0
c000f58e:	68 18 ee 00 c0       	push   0xc000ee18
c000f593:	6a 0d                	push   0xd
c000f595:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f598:	ff d0                	call   eax
c000f59a:	83 c4 10             	add    esp,0x10
c000f59d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5a0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5a2:	83 c0 24             	add    eax,0x24
c000f5a5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5a7:	6a 00                	push   0x0
c000f5a9:	68 51 ee 00 c0       	push   0xc000ee51
c000f5ae:	6a 0e                	push   0xe
c000f5b0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5b3:	ff d0                	call   eax
c000f5b5:	83 c4 10             	add    esp,0x10
c000f5b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5bd:	83 c0 24             	add    eax,0x24
c000f5c0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5c2:	6a 00                	push   0x0
c000f5c4:	68 a0 ee 00 c0       	push   0xc000eea0
c000f5c9:	6a 0f                	push   0xf
c000f5cb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5ce:	ff d0                	call   eax
c000f5d0:	83 c4 10             	add    esp,0x10
c000f5d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5d6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5d8:	83 c0 24             	add    eax,0x24
c000f5db:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 a0 ee 00 c0       	push   0xc000eea0
c000f5e4:	6a 10                	push   0x10
c000f5e6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5e9:	ff d0                	call   eax
c000f5eb:	83 c4 10             	add    esp,0x10
c000f5ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5f1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5f3:	83 c0 24             	add    eax,0x24
c000f5f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5f8:	6a 00                	push   0x0
c000f5fa:	68 a0 ee 00 c0       	push   0xc000eea0
c000f5ff:	6a 11                	push   0x11
c000f601:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f604:	ff d0                	call   eax
c000f606:	83 c4 10             	add    esp,0x10
c000f609:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f60c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f60e:	83 c0 24             	add    eax,0x24
c000f611:	8b 00                	mov    eax,DWORD PTR [eax]
c000f613:	6a 00                	push   0x0
c000f615:	68 a0 ee 00 c0       	push   0xc000eea0
c000f61a:	6a 12                	push   0x12
c000f61c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f61f:	ff d0                	call   eax
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f627:	8b 00                	mov    eax,DWORD PTR [eax]
c000f629:	83 c0 24             	add    eax,0x24
c000f62c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f62e:	6a 00                	push   0x0
c000f630:	68 a0 ee 00 c0       	push   0xc000eea0
c000f635:	6a 13                	push   0x13
c000f637:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f63a:	ff d0                	call   eax
c000f63c:	83 c4 10             	add    esp,0x10
c000f63f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f642:	8b 00                	mov    eax,DWORD PTR [eax]
c000f644:	83 c0 24             	add    eax,0x24
c000f647:	8b 00                	mov    eax,DWORD PTR [eax]
c000f649:	6a 00                	push   0x0
c000f64b:	68 a0 ee 00 c0       	push   0xc000eea0
c000f650:	6a 14                	push   0x14
c000f652:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f655:	ff d0                	call   eax
c000f657:	83 c4 10             	add    esp,0x10
c000f65a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f65d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f65f:	83 c0 24             	add    eax,0x24
c000f662:	8b 00                	mov    eax,DWORD PTR [eax]
c000f664:	6a 00                	push   0x0
c000f666:	68 a0 ee 00 c0       	push   0xc000eea0
c000f66b:	6a 1e                	push   0x1e
c000f66d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f670:	ff d0                	call   eax
c000f672:	83 c4 10             	add    esp,0x10
c000f675:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f678:	8b 00                	mov    eax,DWORD PTR [eax]
c000f67a:	83 c0 24             	add    eax,0x24
c000f67d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f67f:	6a 00                	push   0x0
c000f681:	68 0f 65 01 c0       	push   0xc001650f
c000f686:	6a 60                	push   0x60
c000f688:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f68b:	ff d0                	call   eax
c000f68d:	83 c4 10             	add    esp,0x10
c000f690:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f693:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f696:	c9                   	leave  
c000f697:	c3                   	ret    

c000f698 <InterruptController::convertLegacyIRQNumber(int)>:
c000f698:	55                   	push   ebp
c000f699:	89 e5                	mov    ebp,esp
c000f69b:	83 ec 08             	sub    esp,0x8
c000f69e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6a1:	83 ec 0c             	sub    esp,0xc
c000f6a4:	50                   	push   eax
c000f6a5:	e8 fc ea ff ff       	call   c000e1a6 <Device::getName()>
c000f6aa:	83 c4 10             	add    esp,0x10
c000f6ad:	8a 00                	mov    al,BYTE PTR [eax]
c000f6af:	3c 41                	cmp    al,0x41
c000f6b1:	0f 94 c0             	sete   al
c000f6b4:	84 c0                	test   al,al
c000f6b6:	74 28                	je     c000f6e0 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f6b8:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000f6bc:	7f 12                	jg     c000f6d0 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000f6be:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f6c1:	05 60 58 02 c0       	add    eax,0xc0025860
c000f6c6:	8a 00                	mov    al,BYTE PTR [eax]
c000f6c8:	0f b6 c0             	movzx  eax,al
c000f6cb:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000f6ce:	eb 10                	jmp    c000f6e0 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f6d0:	83 ec 0c             	sub    esp,0xc
c000f6d3:	68 00 36 02 c0       	push   0xc0023600
c000f6d8:	e8 22 4c 00 00       	call   c00142ff <Krnl::panic(char const*)>
c000f6dd:	83 c4 10             	add    esp,0x10
c000f6e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f6e3:	c9                   	leave  
c000f6e4:	c3                   	ret    
c000f6e5:	90                   	nop

c000f6e6 <startGUI(void*)>:
c000f6e6:	55                   	push   ebp
c000f6e7:	89 e5                	mov    ebp,esp
c000f6e9:	53                   	push   ebx
c000f6ea:	83 ec 04             	sub    esp,0x4
c000f6ed:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c000f6f2:	48                   	dec    eax
c000f6f3:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c000f6f8:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c000f6fd:	85 c0                	test   eax,eax
c000f6ff:	75 01                	jne    c000f702 <startGUI(void*)+0x1c>
c000f701:	fb                   	sti    
c000f702:	8b 1d 68 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026168
c000f708:	83 ec 08             	sub    esp,0x8
c000f70b:	6a 01                	push   0x1
c000f70d:	68 80 36 02 c0       	push   0xc0023680
c000f712:	e8 d3 7d 00 00       	call   c00174ea <Thr::loadDLL(char const*, bool)>
c000f717:	83 c4 10             	add    esp,0x10
c000f71a:	83 ec 08             	sub    esp,0x8
c000f71d:	53                   	push   ebx
c000f71e:	50                   	push   eax
c000f71f:	e8 f7 7f 00 00       	call   c001771b <Thr::executeDLL(unsigned long, void*)>
c000f724:	83 c4 10             	add    esp,0x10
c000f727:	8b 1d 68 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026168
c000f72d:	83 ec 08             	sub    esp,0x8
c000f730:	6a 01                	push   0x1
c000f732:	68 9a 36 02 c0       	push   0xc002369a
c000f737:	e8 ae 7d 00 00       	call   c00174ea <Thr::loadDLL(char const*, bool)>
c000f73c:	83 c4 10             	add    esp,0x10
c000f73f:	83 ec 08             	sub    esp,0x8
c000f742:	53                   	push   ebx
c000f743:	50                   	push   eax
c000f744:	e8 d2 7f 00 00       	call   c001771b <Thr::executeDLL(unsigned long, void*)>
c000f749:	83 c4 10             	add    esp,0x10
c000f74c:	90                   	nop
c000f74d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f750:	c9                   	leave  
c000f751:	c3                   	ret    

c000f752 <startGUIVESA(void*)>:
c000f752:	55                   	push   ebp
c000f753:	89 e5                	mov    ebp,esp
c000f755:	53                   	push   ebx
c000f756:	83 ec 04             	sub    esp,0x4
c000f759:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c000f75e:	48                   	dec    eax
c000f75f:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c000f764:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c000f769:	85 c0                	test   eax,eax
c000f76b:	75 01                	jne    c000f76e <startGUIVESA(void*)+0x1c>
c000f76d:	fb                   	sti    
c000f76e:	8b 1d 68 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026168
c000f774:	83 ec 08             	sub    esp,0x8
c000f777:	6a 01                	push   0x1
c000f779:	68 b4 36 02 c0       	push   0xc00236b4
c000f77e:	e8 67 7d 00 00       	call   c00174ea <Thr::loadDLL(char const*, bool)>
c000f783:	83 c4 10             	add    esp,0x10
c000f786:	83 ec 08             	sub    esp,0x8
c000f789:	53                   	push   ebx
c000f78a:	50                   	push   eax
c000f78b:	e8 8b 7f 00 00       	call   c001771b <Thr::executeDLL(unsigned long, void*)>
c000f790:	83 c4 10             	add    esp,0x10
c000f793:	8b 1d 68 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026168
c000f799:	83 ec 08             	sub    esp,0x8
c000f79c:	6a 01                	push   0x1
c000f79e:	68 9a 36 02 c0       	push   0xc002369a
c000f7a3:	e8 42 7d 00 00       	call   c00174ea <Thr::loadDLL(char const*, bool)>
c000f7a8:	83 c4 10             	add    esp,0x10
c000f7ab:	83 ec 08             	sub    esp,0x8
c000f7ae:	53                   	push   ebx
c000f7af:	50                   	push   eax
c000f7b0:	e8 66 7f 00 00       	call   c001771b <Thr::executeDLL(unsigned long, void*)>
c000f7b5:	83 c4 10             	add    esp,0x10
c000f7b8:	90                   	nop
c000f7b9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f7bc:	c9                   	leave  
c000f7bd:	c3                   	ret    

c000f7be <sendKeyToTerminal(unsigned char)>:
c000f7be:	55                   	push   ebp
c000f7bf:	89 e5                	mov    ebp,esp
c000f7c1:	83 ec 28             	sub    esp,0x28
c000f7c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7c7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000f7ca:	a1 e4 61 02 c0       	mov    eax,ds:0xc00261e4
c000f7cf:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000f7d3:	83 ec 08             	sub    esp,0x8
c000f7d6:	52                   	push   edx
c000f7d7:	50                   	push   eax
c000f7d8:	e8 3d b7 ff ff       	call   c000af1a <VgaText::receiveKey(unsigned char)>
c000f7dd:	83 c4 10             	add    esp,0x10
c000f7e0:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000f7e4:	0f 85 8f 00 00 00    	jne    c000f879 <sendKeyToTerminal(unsigned char)+0xbb>
c000f7ea:	fa                   	cli    
c000f7eb:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c000f7f0:	40                   	inc    eax
c000f7f1:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c000f7f6:	a1 24 76 02 c0       	mov    eax,ds:0xc0027624
c000f7fb:	40                   	inc    eax
c000f7fc:	a3 24 76 02 c0       	mov    ds:0xc0027624,eax
c000f801:	a1 c0 62 02 c0       	mov    eax,ds:0xc00262c0
c000f806:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f809:	c7 05 c0 62 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00262c0,0x0
c000f813:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f817:	74 1f                	je     c000f838 <sendKeyToTerminal(unsigned char)+0x7a>
c000f819:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f81c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000f81f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f822:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f825:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f828:	83 ec 0c             	sub    esp,0xc
c000f82b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f82e:	e8 59 8b 00 00       	call   c001838c <unblockTask(ThreadControlBlock*)>
c000f833:	83 c4 10             	add    esp,0x10
c000f836:	eb db                	jmp    c000f813 <sendKeyToTerminal(unsigned char)+0x55>
c000f838:	a1 24 76 02 c0       	mov    eax,ds:0xc0027624
c000f83d:	48                   	dec    eax
c000f83e:	a3 24 76 02 c0       	mov    ds:0xc0027624,eax
c000f843:	a1 24 76 02 c0       	mov    eax,ds:0xc0027624
c000f848:	85 c0                	test   eax,eax
c000f84a:	75 18                	jne    c000f864 <sendKeyToTerminal(unsigned char)+0xa6>
c000f84c:	a1 20 76 02 c0       	mov    eax,ds:0xc0027620
c000f851:	85 c0                	test   eax,eax
c000f853:	74 0f                	je     c000f864 <sendKeyToTerminal(unsigned char)+0xa6>
c000f855:	c7 05 20 76 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027620,0x0
c000f85f:	e8 6c 86 00 00       	call   c0017ed0 <schedule()>
c000f864:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c000f869:	48                   	dec    eax
c000f86a:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c000f86f:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c000f874:	85 c0                	test   eax,eax
c000f876:	75 01                	jne    c000f879 <sendKeyToTerminal(unsigned char)+0xbb>
c000f878:	fb                   	sti    
c000f879:	90                   	nop
c000f87a:	c9                   	leave  
c000f87b:	c3                   	ret    

c000f87c <sendKeyboardToken(KeyboardToken)>:
c000f87c:	55                   	push   ebp
c000f87d:	89 e5                	mov    ebp,esp
c000f87f:	83 ec 18             	sub    esp,0x18
c000f882:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000f885:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f888:	0f b7 c0             	movzx  eax,ax
c000f88b:	83 f2 01             	xor    edx,0x1
c000f88e:	88 90 e0 62 02 c0    	mov    BYTE PTR [eax-0x3ffd9d20],dl
c000f894:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c000f899:	85 c0                	test   eax,eax
c000f89b:	74 24                	je     c000f8c1 <sendKeyboardToken(KeyboardToken)+0x45>
c000f89d:	8b 0d c8 62 02 c0    	mov    ecx,DWORD PTR ds:0xc00262c8
c000f8a3:	83 ec 04             	sub    esp,0x4
c000f8a6:	68 e0 62 02 c0       	push   0xc00262e0
c000f8ab:	83 ec 08             	sub    esp,0x8
c000f8ae:	89 e2                	mov    edx,esp
c000f8b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8b3:	89 02                	mov    DWORD PTR [edx],eax
c000f8b5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f8b8:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000f8bc:	ff d1                	call   ecx
c000f8be:	83 c4 10             	add    esp,0x10
c000f8c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8c4:	66 3d 03 02          	cmp    ax,0x203
c000f8c8:	75 07                	jne    c000f8d1 <sendKeyboardToken(KeyboardToken)+0x55>
c000f8ca:	a0 e0 63 02 c0       	mov    al,ds:0xc00263e0
c000f8cf:	84 c0                	test   al,al
c000f8d1:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000f8d5:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000f8d8:	a0 e8 66 02 c0       	mov    al,ds:0xc00266e8
c000f8dd:	38 c2                	cmp    dl,al
c000f8df:	74 1c                	je     c000f8fd <sendKeyboardToken(KeyboardToken)+0x81>
c000f8e1:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000f8e4:	a2 e8 66 02 c0       	mov    ds:0xc00266e8,al
c000f8e9:	a0 e8 66 02 c0       	mov    al,ds:0xc00266e8
c000f8ee:	0f b6 c0             	movzx  eax,al
c000f8f1:	83 ec 0c             	sub    esp,0xc
c000f8f4:	50                   	push   eax
c000f8f5:	e8 60 ac ff ff       	call   c000a55a <setTerminalScrollLock(bool)>
c000f8fa:	83 c4 10             	add    esp,0x10
c000f8fd:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000f900:	84 c0                	test   al,al
c000f902:	0f 84 ae 00 00 00    	je     c000f9b6 <sendKeyboardToken(KeyboardToken)+0x13a>
c000f908:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f90b:	66 3d 10 03          	cmp    ax,0x310
c000f90f:	75 06                	jne    c000f917 <sendKeyboardToken(KeyboardToken)+0x9b>
c000f911:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000f917:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f91a:	66 3d 11 03          	cmp    ax,0x311
c000f91e:	75 06                	jne    c000f926 <sendKeyboardToken(KeyboardToken)+0xaa>
c000f920:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000f926:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f929:	66 3d 12 03          	cmp    ax,0x312
c000f92d:	75 06                	jne    c000f935 <sendKeyboardToken(KeyboardToken)+0xb9>
c000f92f:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000f935:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f938:	66 3d 13 03          	cmp    ax,0x313
c000f93c:	75 06                	jne    c000f944 <sendKeyboardToken(KeyboardToken)+0xc8>
c000f93e:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000f944:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f947:	66 3d 14 03          	cmp    ax,0x314
c000f94b:	75 06                	jne    c000f953 <sendKeyboardToken(KeyboardToken)+0xd7>
c000f94d:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000f953:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f956:	66 3d 15 03          	cmp    ax,0x315
c000f95a:	75 06                	jne    c000f962 <sendKeyboardToken(KeyboardToken)+0xe6>
c000f95c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000f962:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f965:	66 3d 16 03          	cmp    ax,0x316
c000f969:	75 06                	jne    c000f971 <sendKeyboardToken(KeyboardToken)+0xf5>
c000f96b:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000f971:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f974:	66 3d 17 03          	cmp    ax,0x317
c000f978:	75 06                	jne    c000f980 <sendKeyboardToken(KeyboardToken)+0x104>
c000f97a:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000f980:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f983:	66 3d 18 03          	cmp    ax,0x318
c000f987:	75 06                	jne    c000f98f <sendKeyboardToken(KeyboardToken)+0x113>
c000f989:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000f98f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f992:	66 3d 19 03          	cmp    ax,0x319
c000f996:	75 06                	jne    c000f99e <sendKeyboardToken(KeyboardToken)+0x122>
c000f998:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000f99e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9a1:	66 3d 1a 03          	cmp    ax,0x31a
c000f9a5:	0f 85 c9 00 00 00    	jne    c000fa74 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000f9ab:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000f9b1:	e9 be 00 00 00       	jmp    c000fa74 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000f9b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9b9:	66 3d 10 03          	cmp    ax,0x310
c000f9bd:	75 0a                	jne    c000f9c9 <sendKeyboardToken(KeyboardToken)+0x14d>
c000f9bf:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000f9c5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f9c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9cc:	66 3d 11 03          	cmp    ax,0x311
c000f9d0:	75 0a                	jne    c000f9dc <sendKeyboardToken(KeyboardToken)+0x160>
c000f9d2:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000f9d8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f9dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9df:	66 3d 12 03          	cmp    ax,0x312
c000f9e3:	75 0a                	jne    c000f9ef <sendKeyboardToken(KeyboardToken)+0x173>
c000f9e5:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000f9eb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f9ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9f2:	66 3d 13 03          	cmp    ax,0x313
c000f9f6:	75 0a                	jne    c000fa02 <sendKeyboardToken(KeyboardToken)+0x186>
c000f9f8:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000f9fe:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa05:	66 3d 14 03          	cmp    ax,0x314
c000fa09:	75 0a                	jne    c000fa15 <sendKeyboardToken(KeyboardToken)+0x199>
c000fa0b:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000fa11:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa18:	66 3d 15 03          	cmp    ax,0x315
c000fa1c:	75 0a                	jne    c000fa28 <sendKeyboardToken(KeyboardToken)+0x1ac>
c000fa1e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fa24:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa2b:	66 3d 16 03          	cmp    ax,0x316
c000fa2f:	75 0a                	jne    c000fa3b <sendKeyboardToken(KeyboardToken)+0x1bf>
c000fa31:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000fa37:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa3e:	66 3d 17 03          	cmp    ax,0x317
c000fa42:	75 0a                	jne    c000fa4e <sendKeyboardToken(KeyboardToken)+0x1d2>
c000fa44:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000fa4a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa51:	66 3d 18 03          	cmp    ax,0x318
c000fa55:	75 0a                	jne    c000fa61 <sendKeyboardToken(KeyboardToken)+0x1e5>
c000fa57:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000fa5d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa64:	66 3d 19 03          	cmp    ax,0x319
c000fa68:	75 0a                	jne    c000fa74 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000fa6a:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000fa70:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa77:	66 3d 00 02          	cmp    ax,0x200
c000fa7b:	75 2c                	jne    c000faa9 <sendKeyboardToken(KeyboardToken)+0x22d>
c000fa7d:	a0 e0 66 02 c0       	mov    al,ds:0xc00266e0
c000fa82:	83 f0 01             	xor    eax,0x1
c000fa85:	84 c0                	test   al,al
c000fa87:	74 20                	je     c000faa9 <sendKeyboardToken(KeyboardToken)+0x22d>
c000fa89:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000fa8e:	6a 01                	push   0x1
c000fa90:	6a 00                	push   0x0
c000fa92:	68 e6 f6 00 c0       	push   0xc000f6e6
c000fa97:	50                   	push   eax
c000fa98:	e8 17 82 00 00       	call   c0017cb4 <Process::createThread(void (*)(void*), void*, int)>
c000fa9d:	83 c4 10             	add    esp,0x10
c000faa0:	c6 05 e0 66 02 c0 01 	mov    BYTE PTR ds:0xc00266e0,0x1
c000faa7:	eb 33                	jmp    c000fadc <sendKeyboardToken(KeyboardToken)+0x260>
c000faa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faac:	66 3d 01 02          	cmp    ax,0x201
c000fab0:	75 2a                	jne    c000fadc <sendKeyboardToken(KeyboardToken)+0x260>
c000fab2:	a0 e0 66 02 c0       	mov    al,ds:0xc00266e0
c000fab7:	83 f0 01             	xor    eax,0x1
c000faba:	84 c0                	test   al,al
c000fabc:	74 1e                	je     c000fadc <sendKeyboardToken(KeyboardToken)+0x260>
c000fabe:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c000fac3:	6a 01                	push   0x1
c000fac5:	6a 00                	push   0x0
c000fac7:	68 52 f7 00 c0       	push   0xc000f752
c000facc:	50                   	push   eax
c000facd:	e8 e2 81 00 00       	call   c0017cb4 <Process::createThread(void (*)(void*), void*, int)>
c000fad2:	83 c4 10             	add    esp,0x10
c000fad5:	c6 05 e0 66 02 c0 01 	mov    BYTE PTR ds:0xc00266e0,0x1
c000fadc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fadf:	66 3d 1d 03          	cmp    ax,0x31d
c000fae3:	75 06                	jne    c000faeb <sendKeyboardToken(KeyboardToken)+0x26f>
c000fae5:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000faeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000faee:	66 3d 1c 03          	cmp    ax,0x31c
c000faf2:	75 06                	jne    c000fafa <sendKeyboardToken(KeyboardToken)+0x27e>
c000faf4:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000fafa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fafd:	66 3d 1b 03          	cmp    ax,0x31b
c000fb01:	75 06                	jne    c000fb09 <sendKeyboardToken(KeyboardToken)+0x28d>
c000fb03:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000fb09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb0c:	66 3d 1e 03          	cmp    ax,0x31e
c000fb10:	75 06                	jne    c000fb18 <sendKeyboardToken(KeyboardToken)+0x29c>
c000fb12:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000fb18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb1b:	66 3d 1f 03          	cmp    ax,0x31f
c000fb1f:	75 06                	jne    c000fb27 <sendKeyboardToken(KeyboardToken)+0x2ab>
c000fb21:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000fb27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb2a:	66 3d 1a 03          	cmp    ax,0x31a
c000fb2e:	75 06                	jne    c000fb36 <sendKeyboardToken(KeyboardToken)+0x2ba>
c000fb30:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000fb36:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000fb3a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fb3d:	83 f0 01             	xor    eax,0x1
c000fb40:	84 c0                	test   al,al
c000fb42:	74 77                	je     c000fbbb <sendKeyboardToken(KeyboardToken)+0x33f>
c000fb44:	a0 e1 63 02 c0       	mov    al,ds:0xc00263e1
c000fb49:	84 c0                	test   al,al
c000fb4b:	74 41                	je     c000fb8e <sendKeyboardToken(KeyboardToken)+0x312>
c000fb4d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fb51:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000fb55:	74 2b                	je     c000fb82 <sendKeyboardToken(KeyboardToken)+0x306>
c000fb57:	8b 15 e4 66 02 c0    	mov    edx,DWORD PTR ds:0xc00266e4
c000fb5d:	89 d0                	mov    eax,edx
c000fb5f:	c1 e0 02             	shl    eax,0x2
c000fb62:	01 d0                	add    eax,edx
c000fb64:	01 c0                	add    eax,eax
c000fb66:	a3 e4 66 02 c0       	mov    ds:0xc00266e4,eax
c000fb6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb6e:	0f b7 c0             	movzx  eax,ax
c000fb71:	8d 50 d0             	lea    edx,[eax-0x30]
c000fb74:	a1 e4 66 02 c0       	mov    eax,ds:0xc00266e4
c000fb79:	01 d0                	add    eax,edx
c000fb7b:	a3 e4 66 02 c0       	mov    ds:0xc00266e4,eax
c000fb80:	eb 6d                	jmp    c000fbef <sendKeyboardToken(KeyboardToken)+0x373>
c000fb82:	c7 05 e4 66 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00266e4,0x0
c000fb8c:	eb 61                	jmp    c000fbef <sendKeyboardToken(KeyboardToken)+0x373>
c000fb8e:	a1 e4 66 02 c0       	mov    eax,ds:0xc00266e4
c000fb93:	85 c0                	test   eax,eax
c000fb95:	74 18                	je     c000fbaf <sendKeyboardToken(KeyboardToken)+0x333>
c000fb97:	a1 e4 66 02 c0       	mov    eax,ds:0xc00266e4
c000fb9c:	0f b6 c0             	movzx  eax,al
c000fb9f:	83 ec 0c             	sub    esp,0xc
c000fba2:	50                   	push   eax
c000fba3:	e8 16 fc ff ff       	call   c000f7be <sendKeyToTerminal(unsigned char)>
c000fba8:	83 c4 10             	add    esp,0x10
c000fbab:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fbaf:	c7 05 e4 66 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00266e4,0x0
c000fbb9:	eb 34                	jmp    c000fbef <sendKeyboardToken(KeyboardToken)+0x373>
c000fbbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbbe:	66 3d 01 01          	cmp    ax,0x101
c000fbc2:	75 2b                	jne    c000fbef <sendKeyboardToken(KeyboardToken)+0x373>
c000fbc4:	a1 e4 66 02 c0       	mov    eax,ds:0xc00266e4
c000fbc9:	85 c0                	test   eax,eax
c000fbcb:	74 18                	je     c000fbe5 <sendKeyboardToken(KeyboardToken)+0x369>
c000fbcd:	a1 e4 66 02 c0       	mov    eax,ds:0xc00266e4
c000fbd2:	0f b6 c0             	movzx  eax,al
c000fbd5:	83 ec 0c             	sub    esp,0xc
c000fbd8:	50                   	push   eax
c000fbd9:	e8 e0 fb ff ff       	call   c000f7be <sendKeyToTerminal(unsigned char)>
c000fbde:	83 c4 10             	add    esp,0x10
c000fbe1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fbe5:	c7 05 e4 66 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00266e4,0x0
c000fbef:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fbf2:	83 f0 01             	xor    eax,0x1
c000fbf5:	84 c0                	test   al,al
c000fbf7:	74 4c                	je     c000fc45 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fbf9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fbfc:	83 f0 01             	xor    eax,0x1
c000fbff:	84 c0                	test   al,al
c000fc01:	74 42                	je     c000fc45 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc03:	a0 e0 63 02 c0       	mov    al,ds:0xc00263e0
c000fc08:	83 f0 01             	xor    eax,0x1
c000fc0b:	84 c0                	test   al,al
c000fc0d:	74 36                	je     c000fc45 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc12:	66 83 f8 1f          	cmp    ax,0x1f
c000fc16:	76 09                	jbe    c000fc21 <sendKeyboardToken(KeyboardToken)+0x3a5>
c000fc18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc1b:	66 83 f8 7e          	cmp    ax,0x7e
c000fc1f:	76 12                	jbe    c000fc33 <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fc21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc24:	66 83 f8 0a          	cmp    ax,0xa
c000fc28:	74 09                	je     c000fc33 <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fc2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc2d:	66 83 f8 08          	cmp    ax,0x8
c000fc31:	75 12                	jne    c000fc45 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc36:	0f b6 c0             	movzx  eax,al
c000fc39:	83 ec 0c             	sub    esp,0xc
c000fc3c:	50                   	push   eax
c000fc3d:	e8 7c fb ff ff       	call   c000f7be <sendKeyToTerminal(unsigned char)>
c000fc42:	83 c4 10             	add    esp,0x10
c000fc45:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fc48:	83 f0 01             	xor    eax,0x1
c000fc4b:	84 c0                	test   al,al
c000fc4d:	74 4f                	je     c000fc9e <sendKeyboardToken(KeyboardToken)+0x422>
c000fc4f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fc52:	83 f0 01             	xor    eax,0x1
c000fc55:	84 c0                	test   al,al
c000fc57:	74 45                	je     c000fc9e <sendKeyboardToken(KeyboardToken)+0x422>
c000fc59:	a0 e0 63 02 c0       	mov    al,ds:0xc00263e0
c000fc5e:	84 c0                	test   al,al
c000fc60:	74 3c                	je     c000fc9e <sendKeyboardToken(KeyboardToken)+0x422>
c000fc62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc65:	66 83 f8 3f          	cmp    ax,0x3f
c000fc69:	76 33                	jbe    c000fc9e <sendKeyboardToken(KeyboardToken)+0x422>
c000fc6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc6e:	66 83 f8 7f          	cmp    ax,0x7f
c000fc72:	77 2a                	ja     c000fc9e <sendKeyboardToken(KeyboardToken)+0x422>
c000fc74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc77:	88 c2                	mov    dl,al
c000fc79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc7c:	66 83 f8 5f          	cmp    ax,0x5f
c000fc80:	76 04                	jbe    c000fc86 <sendKeyboardToken(KeyboardToken)+0x40a>
c000fc82:	b0 20                	mov    al,0x20
c000fc84:	eb 02                	jmp    c000fc88 <sendKeyboardToken(KeyboardToken)+0x40c>
c000fc86:	b0 00                	mov    al,0x0
c000fc88:	29 c2                	sub    edx,eax
c000fc8a:	88 d0                	mov    al,dl
c000fc8c:	83 e8 40             	sub    eax,0x40
c000fc8f:	0f b6 c0             	movzx  eax,al
c000fc92:	83 ec 0c             	sub    esp,0xc
c000fc95:	50                   	push   eax
c000fc96:	e8 23 fb ff ff       	call   c000f7be <sendKeyToTerminal(unsigned char)>
c000fc9b:	83 c4 10             	add    esp,0x10
c000fc9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fca1:	66 3d 00 03          	cmp    ax,0x300
c000fca5:	75 0f                	jne    c000fcb6 <sendKeyboardToken(KeyboardToken)+0x43a>
c000fca7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fcaa:	83 f0 01             	xor    eax,0x1
c000fcad:	84 c0                	test   al,al
c000fcaf:	74 05                	je     c000fcb6 <sendKeyboardToken(KeyboardToken)+0x43a>
c000fcb1:	e8 15 ac ff ff       	call   c000a8cb <doTerminalCycle()>
c000fcb6:	90                   	nop
c000fcb7:	c9                   	leave  
c000fcb8:	c3                   	ret    

c000fcb9 <clearInternalKeybuffer(VgaText*)>:
c000fcb9:	55                   	push   ebp
c000fcba:	89 e5                	mov    ebp,esp
c000fcbc:	83 ec 08             	sub    esp,0x8
c000fcbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcc2:	05 98 01 00 00       	add    eax,0x198
c000fcc7:	83 ec 0c             	sub    esp,0xc
c000fcca:	50                   	push   eax
c000fccb:	e8 d0 09 ff ff       	call   c00006a0 <strlen>
c000fcd0:	83 c4 10             	add    esp,0x10
c000fcd3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fcd6:	81 c2 98 01 00 00    	add    edx,0x198
c000fcdc:	83 ec 04             	sub    esp,0x4
c000fcdf:	50                   	push   eax
c000fce0:	6a 00                	push   0x0
c000fce2:	52                   	push   edx
c000fce3:	e8 9c 09 ff ff       	call   c0000684 <memset>
c000fce8:	83 c4 10             	add    esp,0x10
c000fceb:	90                   	nop
c000fcec:	c9                   	leave  
c000fced:	c3                   	ret    

c000fcee <readKeyboard(VgaText*, char*, unsigned long)>:
c000fcee:	55                   	push   ebp
c000fcef:	89 e5                	mov    ebp,esp
c000fcf1:	83 ec 18             	sub    esp,0x18
c000fcf4:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c000fcf9:	85 c0                	test   eax,eax
c000fcfb:	74 2a                	je     c000fd27 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000fcfd:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000fd03:	8b 0d c8 62 02 c0    	mov    ecx,DWORD PTR ds:0xc00262c8
c000fd09:	83 ec 04             	sub    esp,0x4
c000fd0c:	68 e0 62 02 c0       	push   0xc00262e0
c000fd11:	83 ec 08             	sub    esp,0x8
c000fd14:	89 e2                	mov    edx,esp
c000fd16:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000fd19:	89 02                	mov    DWORD PTR [edx],eax
c000fd1b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fd1e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000fd22:	ff d1                	call   ecx
c000fd24:	83 c4 10             	add    esp,0x10
c000fd27:	fb                   	sti    
c000fd28:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000fd2f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000fd33:	0f 84 a1 00 00 00    	je     c000fdda <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000fd39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd3c:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c000fd42:	84 c0                	test   al,al
c000fd44:	75 28                	jne    c000fd6e <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000fd46:	fa                   	cli    
c000fd47:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c000fd4c:	40                   	inc    eax
c000fd4d:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c000fd52:	e8 79 81 00 00       	call   c0017ed0 <schedule()>
c000fd57:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c000fd5c:	48                   	dec    eax
c000fd5d:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c000fd62:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c000fd67:	85 c0                	test   eax,eax
c000fd69:	75 ce                	jne    c000fd39 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000fd6b:	fb                   	sti    
c000fd6c:	eb cb                	jmp    c000fd39 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000fd6e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fd71:	8d 50 01             	lea    edx,[eax+0x1]
c000fd74:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000fd77:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fd7a:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c000fd80:	88 10                	mov    BYTE PTR [eax],dl
c000fd82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd85:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c000fd8b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000fd8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd91:	05 98 01 00 00       	add    eax,0x198
c000fd96:	83 ec 0c             	sub    esp,0xc
c000fd99:	50                   	push   eax
c000fd9a:	e8 01 09 ff ff       	call   c00006a0 <strlen>
c000fd9f:	83 c4 10             	add    esp,0x10
c000fda2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fda5:	81 c2 98 01 00 00    	add    edx,0x198
c000fdab:	8d 4a 01             	lea    ecx,[edx+0x1]
c000fdae:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fdb1:	81 c2 98 01 00 00    	add    edx,0x198
c000fdb7:	83 ec 04             	sub    esp,0x4
c000fdba:	50                   	push   eax
c000fdbb:	51                   	push   ecx
c000fdbc:	52                   	push   edx
c000fdbd:	e8 fa 07 ff ff       	call   c00005bc <memmove>
c000fdc2:	83 c4 10             	add    esp,0x10
c000fdc5:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000fdc8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000fdcb:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000fdcf:	0f 85 5a ff ff ff    	jne    c000fd2f <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000fdd5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fdd8:	eb 03                	jmp    c000fddd <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000fdda:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fddd:	c9                   	leave  
c000fdde:	c3                   	ret    
c000fddf:	90                   	nop

c000fde0 <Keyboard::Keyboard(char const*)>:
c000fde0:	83 ec 0c             	sub    esp,0xc
c000fde3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fde7:	83 ec 08             	sub    esp,0x8
c000fdea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdee:	50                   	push   eax
c000fdef:	e8 b6 e2 ff ff       	call   c000e0aa <Device::Device(char const*)>
c000fdf4:	83 c4 10             	add    esp,0x10
c000fdf7:	ba d8 36 02 c0       	mov    edx,0xc00236d8
c000fdfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe00:	89 10                	mov    DWORD PTR [eax],edx
c000fe02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe06:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000fe10:	c6 05 c4 62 02 c0 01 	mov    BYTE PTR ds:0xc00262c4,0x1
c000fe17:	90                   	nop
c000fe18:	83 c4 0c             	add    esp,0xc
c000fe1b:	c3                   	ret    

c000fe1c <Keyboard::~Keyboard()>:
c000fe1c:	83 ec 0c             	sub    esp,0xc
c000fe1f:	ba d8 36 02 c0       	mov    edx,0xc00236d8
c000fe24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe28:	89 10                	mov    DWORD PTR [eax],edx
c000fe2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe2e:	83 ec 0c             	sub    esp,0xc
c000fe31:	50                   	push   eax
c000fe32:	e8 3d df ff ff       	call   c000dd74 <Device::~Device()>
c000fe37:	83 c4 10             	add    esp,0x10
c000fe3a:	90                   	nop
c000fe3b:	83 c4 0c             	add    esp,0xc
c000fe3e:	c3                   	ret    
c000fe3f:	90                   	nop

c000fe40 <Keyboard::~Keyboard()>:
c000fe40:	83 ec 0c             	sub    esp,0xc
c000fe43:	83 ec 0c             	sub    esp,0xc
c000fe46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe4a:	e8 cd ff ff ff       	call   c000fe1c <Keyboard::~Keyboard()>
c000fe4f:	83 c4 10             	add    esp,0x10
c000fe52:	83 ec 08             	sub    esp,0x8
c000fe55:	68 5c 01 00 00       	push   0x15c
c000fe5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe5e:	e8 1b cb ff ff       	call   c000c97e <operator delete(void*, unsigned long)>
c000fe63:	83 c4 10             	add    esp,0x10
c000fe66:	83 c4 0c             	add    esp,0xc
c000fe69:	c3                   	ret    

c000fe6a <LogicalDisk::close(int, int, void*)>:
c000fe6a:	83 c8 ff             	or     eax,0xffffffff
c000fe6d:	c3                   	ret    

c000fe6e <LogicalDisk::~LogicalDisk()>:
c000fe6e:	83 ec 0c             	sub    esp,0xc
c000fe71:	ba 50 37 02 c0       	mov    edx,0xc0023750
c000fe76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe7a:	89 10                	mov    DWORD PTR [eax],edx
c000fe7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe80:	83 ec 0c             	sub    esp,0xc
c000fe83:	50                   	push   eax
c000fe84:	e8 eb de ff ff       	call   c000dd74 <Device::~Device()>
c000fe89:	83 c4 10             	add    esp,0x10
c000fe8c:	90                   	nop
c000fe8d:	83 c4 0c             	add    esp,0xc
c000fe90:	c3                   	ret    
c000fe91:	90                   	nop

c000fe92 <LogicalDisk::~LogicalDisk()>:
c000fe92:	83 ec 0c             	sub    esp,0xc
c000fe95:	83 ec 0c             	sub    esp,0xc
c000fe98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe9c:	e8 cd ff ff ff       	call   c000fe6e <LogicalDisk::~LogicalDisk()>
c000fea1:	83 c4 10             	add    esp,0x10
c000fea4:	83 ec 08             	sub    esp,0x8
c000fea7:	68 74 01 00 00       	push   0x174
c000feac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000feb0:	e8 c9 ca ff ff       	call   c000c97e <operator delete(void*, unsigned long)>
c000feb5:	83 c4 10             	add    esp,0x10
c000feb8:	83 c4 0c             	add    esp,0xc
c000febb:	c3                   	ret    

c000febc <LogicalDisk::open(int, int, void*)>:
c000febc:	83 ec 18             	sub    esp,0x18
c000febf:	68 04 37 02 c0       	push   0xc0023704
c000fec4:	e8 36 44 00 00       	call   c00142ff <Krnl::panic(char const*)>
c000fec9:	83 c8 ff             	or     eax,0xffffffff
c000fecc:	83 c4 1c             	add    esp,0x1c
c000fecf:	c3                   	ret    

c000fed0 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000fed0:	53                   	push   ebx
c000fed1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fed5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fed9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fedd:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000fee3:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000fee9:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000feef:	77 10                	ja     c000ff01 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000fef1:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000fef7:	89 d3                	mov    ebx,edx
c000fef9:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000feff:	72 05                	jb     c000ff06 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000ff01:	83 c8 ff             	or     eax,0xffffffff
c000ff04:	89 c2                	mov    edx,eax
c000ff06:	5b                   	pop    ebx
c000ff07:	c3                   	ret    

c000ff08 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000ff08:	56                   	push   esi
c000ff09:	83 c8 ff             	or     eax,0xffffffff
c000ff0c:	53                   	push   ebx
c000ff0d:	89 c2                	mov    edx,eax
c000ff0f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ff13:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000ff17:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ff1b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ff21:	77 27                	ja     c000ff4a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ff23:	89 d8                	mov    eax,ebx
c000ff25:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000ff2b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000ff31:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ff36:	89 c2                	mov    edx,eax
c000ff38:	73 10                	jae    c000ff4a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ff3a:	89 c8                	mov    eax,ecx
c000ff3c:	89 da                	mov    edx,ebx
c000ff3e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000ff44:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000ff4a:	5b                   	pop    ebx
c000ff4b:	5e                   	pop    esi
c000ff4c:	c3                   	ret    
c000ff4d:	90                   	nop

c000ff4e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ff4e:	83 ec 1c             	sub    esp,0x1c
c000ff51:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ff55:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ff59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ff61:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ff65:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff68:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ff6c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ff70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff74:	83 ec 08             	sub    esp,0x8
c000ff77:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ff7b:	50                   	push   eax
c000ff7c:	e8 29 e1 ff ff       	call   c000e0aa <Device::Device(char const*)>
c000ff81:	83 c4 10             	add    esp,0x10
c000ff84:	ba 50 37 02 c0       	mov    edx,0xc0023750
c000ff89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff8d:	89 10                	mov    DWORD PTR [eax],edx
c000ff8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff93:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ff9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff9e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ffa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffa9:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000ffb3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ffb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ffbb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ffbf:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000ffc5:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000ffcb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ffcf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ffd2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ffd6:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000ffdc:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000ffe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffe6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ffea:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000fff0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fff4:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000fffe:	90                   	nop
c000ffff:	83 c4 1c             	add    esp,0x1c
c0010002:	c3                   	ret    
c0010003:	90                   	nop

c0010004 <LogicalDisk::assignDriveLetter()>:
c0010004:	55                   	push   ebp
c0010005:	57                   	push   edi
c0010006:	56                   	push   esi
c0010007:	53                   	push   ebx
c0010008:	83 ec 14             	sub    esp,0x14
c001000b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001000f:	8b 3d 00 67 02 c0    	mov    edi,DWORD PTR ds:0xc0026700
c0010015:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001001b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001001f:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0010025:	8b 3d 04 67 02 c0    	mov    edi,DWORD PTR ds:0xc0026704
c001002b:	3c 01                	cmp    al,0x1
c001002d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0010031:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010035:	19 c0                	sbb    eax,eax
c0010037:	83 e0 02             	and    eax,0x2
c001003a:	83 c0 41             	add    eax,0x41
c001003d:	0f be e8             	movsx  ebp,al
c0010040:	3c 43                	cmp    al,0x43
c0010042:	75 10                	jne    c0010054 <LogicalDisk::assignDriveLetter()+0x50>
c0010044:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001004b:	75 5d                	jne    c00100aa <LogicalDisk::assignDriveLetter()+0xa6>
c001004d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0010052:	75 56                	jne    c00100aa <LogicalDisk::assignDriveLetter()+0xa6>
c0010054:	8d 75 bf             	lea    esi,[ebp-0x41]
c0010057:	ba 01 00 00 00       	mov    edx,0x1
c001005c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010060:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0010064:	d3 e2                	shl    edx,cl
c0010066:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001006a:	89 d7                	mov    edi,edx
c001006c:	89 d6                	mov    esi,edx
c001006e:	c1 ff 1f             	sar    edi,0x1f
c0010071:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0010075:	21 f9                	and    ecx,edi
c0010077:	09 d1                	or     ecx,edx
c0010079:	75 2f                	jne    c00100aa <LogicalDisk::assignDriveLetter()+0xa6>
c001007b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001007f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010083:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0010089:	09 f2                	or     edx,esi
c001008b:	89 15 00 67 02 c0    	mov    DWORD PTR ds:0xc0026700,edx
c0010091:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010095:	09 fa                	or     edx,edi
c0010097:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001009b:	89 15 04 67 02 c0    	mov    DWORD PTR ds:0xc0026704,edx
c00100a1:	89 1c bd 20 67 02 c0 	mov    DWORD PTR [edi*4-0x3ffd98e0],ebx
c00100a8:	eb 08                	jmp    c00100b2 <LogicalDisk::assignDriveLetter()+0xae>
c00100aa:	45                   	inc    ebp
c00100ab:	40                   	inc    eax
c00100ac:	3c 5b                	cmp    al,0x5b
c00100ae:	75 90                	jne    c0010040 <LogicalDisk::assignDriveLetter()+0x3c>
c00100b0:	31 c0                	xor    eax,eax
c00100b2:	83 c4 14             	add    esp,0x14
c00100b5:	5b                   	pop    ebx
c00100b6:	5e                   	pop    esi
c00100b7:	5f                   	pop    edi
c00100b8:	5d                   	pop    ebp
c00100b9:	c3                   	ret    

c00100ba <LogicalDisk::mount()>:
c00100ba:	56                   	push   esi
c00100bb:	53                   	push   ebx
c00100bc:	53                   	push   ebx
c00100bd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00100c1:	8b 1d 94 62 02 c0    	mov    ebx,DWORD PTR ds:0xc0026294
c00100c7:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00100d1:	85 db                	test   ebx,ebx
c00100d3:	74 27                	je     c00100fc <LogicalDisk::mount()+0x42>
c00100d5:	51                   	push   ecx
c00100d6:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00100dd:	8b 13                	mov    edx,DWORD PTR [ebx]
c00100df:	83 e8 41             	sub    eax,0x41
c00100e2:	50                   	push   eax
c00100e3:	56                   	push   esi
c00100e4:	53                   	push   ebx
c00100e5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00100e8:	83 c4 10             	add    esp,0x10
c00100eb:	84 c0                	test   al,al
c00100ed:	74 08                	je     c00100f7 <LogicalDisk::mount()+0x3d>
c00100ef:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00100f5:	eb 07                	jmp    c00100fe <LogicalDisk::mount()+0x44>
c00100f7:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00100fa:	eb d5                	jmp    c00100d1 <LogicalDisk::mount()+0x17>
c00100fc:	31 c0                	xor    eax,eax
c00100fe:	5a                   	pop    edx
c00100ff:	5b                   	pop    ebx
c0010100:	5e                   	pop    esi
c0010101:	c3                   	ret    

c0010102 <LogicalDisk::unmount()>:
c0010102:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010106:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0010110:	c3                   	ret    
c0010111:	90                   	nop

c0010112 <LogicalDisk::eject()>:
c0010112:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010116:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001011c:	8b 10                	mov    edx,DWORD PTR [eax]
c001011e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010122:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0010125:	90                   	nop

c0010126 <LogicalDisk::unassignDriveLetter()>:
c0010126:	57                   	push   edi
c0010127:	56                   	push   esi
c0010128:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001012c:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0010133:	84 c9                	test   cl,cl
c0010135:	75 0f                	jne    c0010146 <LogicalDisk::unassignDriveLetter()+0x20>
c0010137:	c7 44 24 0c 28 37 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023728
c001013f:	5e                   	pop    esi
c0010140:	5f                   	pop    edi
c0010141:	e9 b9 41 00 00       	jmp    c00142ff <Krnl::panic(char const*)>
c0010146:	83 e9 41             	sub    ecx,0x41
c0010149:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0010150:	b8 01 00 00 00       	mov    eax,0x1
c0010155:	c7 04 8d 20 67 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd98e0],0x0
c0010160:	d3 e0                	shl    eax,cl
c0010162:	89 c7                	mov    edi,eax
c0010164:	f7 d0                	not    eax
c0010166:	c1 ff 1f             	sar    edi,0x1f
c0010169:	21 05 00 67 02 c0    	and    DWORD PTR ds:0xc0026700,eax
c001016f:	89 fe                	mov    esi,edi
c0010171:	f7 d6                	not    esi
c0010173:	21 35 04 67 02 c0    	and    DWORD PTR ds:0xc0026704,esi
c0010179:	5e                   	pop    esi
c001017a:	5f                   	pop    edi
c001017b:	c3                   	ret    

c001017c <LogicalDisk::read(unsigned long long, int, void*)>:
c001017c:	57                   	push   edi
c001017d:	56                   	push   esi
c001017e:	53                   	push   ebx
c001017f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010183:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010187:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001018b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001018f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010195:	77 41                	ja     c00101d8 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0010197:	99                   	cdq    
c0010198:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001019e:	01 c8                	add    eax,ecx
c00101a0:	11 da                	adc    edx,ebx
c00101a2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00101a8:	19 d7                	sbb    edi,edx
c00101aa:	72 33                	jb     c00101df <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00101ac:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00101b2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00101b8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00101bc:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00101c0:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00101c6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00101cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00101d0:	5b                   	pop    ebx
c00101d1:	5e                   	pop    esi
c00101d2:	5f                   	pop    edi
c00101d3:	e9 e2 0a 00 00       	jmp    c0010cba <VCache::read(unsigned long long, int, void*)>
c00101d8:	b8 05 00 00 00       	mov    eax,0x5
c00101dd:	eb 05                	jmp    c00101e4 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00101df:	b8 07 00 00 00       	mov    eax,0x7
c00101e4:	5b                   	pop    ebx
c00101e5:	5e                   	pop    esi
c00101e6:	5f                   	pop    edi
c00101e7:	c3                   	ret    

c00101e8 <LogicalDisk::write(unsigned long long, int, void*)>:
c00101e8:	57                   	push   edi
c00101e9:	56                   	push   esi
c00101ea:	53                   	push   ebx
c00101eb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101f3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00101f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101fb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010201:	77 41                	ja     c0010244 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0010203:	99                   	cdq    
c0010204:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001020a:	01 c8                	add    eax,ecx
c001020c:	11 da                	adc    edx,ebx
c001020e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010214:	19 d7                	sbb    edi,edx
c0010216:	72 33                	jb     c001024b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0010218:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001021e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010224:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010228:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001022c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010232:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010238:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001023c:	5b                   	pop    ebx
c001023d:	5e                   	pop    esi
c001023e:	5f                   	pop    edi
c001023f:	e9 7c 09 00 00       	jmp    c0010bc0 <VCache::write(unsigned long long, int, void*)>
c0010244:	b8 05 00 00 00       	mov    eax,0x5
c0010249:	eb 05                	jmp    c0010250 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001024b:	b8 07 00 00 00       	mov    eax,0x7
c0010250:	5b                   	pop    ebx
c0010251:	5e                   	pop    esi
c0010252:	5f                   	pop    edi
c0010253:	c3                   	ret    

c0010254 <Mouse::Mouse(char const*)>:
c0010254:	83 ec 0c             	sub    esp,0xc
c0010257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001025b:	83 ec 08             	sub    esp,0x8
c001025e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010262:	50                   	push   eax
c0010263:	e8 42 de ff ff       	call   c000e0aa <Device::Device(char const*)>
c0010268:	83 c4 10             	add    esp,0x10
c001026b:	ba 7c 37 02 c0       	mov    edx,0xc002377c
c0010270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010274:	89 10                	mov    DWORD PTR [eax],edx
c0010276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001027a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0010284:	90                   	nop
c0010285:	83 c4 0c             	add    esp,0xc
c0010288:	c3                   	ret    
c0010289:	90                   	nop
c001028a:	66 90                	xchg   ax,ax

c001028c <Mouse::~Mouse()>:
c001028c:	83 ec 0c             	sub    esp,0xc
c001028f:	ba 7c 37 02 c0       	mov    edx,0xc002377c
c0010294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010298:	89 10                	mov    DWORD PTR [eax],edx
c001029a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001029e:	83 ec 0c             	sub    esp,0xc
c00102a1:	50                   	push   eax
c00102a2:	e8 cd da ff ff       	call   c000dd74 <Device::~Device()>
c00102a7:	83 c4 10             	add    esp,0x10
c00102aa:	90                   	nop
c00102ab:	83 c4 0c             	add    esp,0xc
c00102ae:	c3                   	ret    
c00102af:	90                   	nop

c00102b0 <Mouse::~Mouse()>:
c00102b0:	83 ec 0c             	sub    esp,0xc
c00102b3:	83 ec 0c             	sub    esp,0xc
c00102b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102ba:	e8 cd ff ff ff       	call   c001028c <Mouse::~Mouse()>
c00102bf:	83 c4 10             	add    esp,0x10
c00102c2:	83 ec 08             	sub    esp,0x8
c00102c5:	68 58 01 00 00       	push   0x158
c00102ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102ce:	e8 ab c6 ff ff       	call   c000c97e <operator delete(void*, unsigned long)>
c00102d3:	83 c4 10             	add    esp,0x10
c00102d6:	83 c4 0c             	add    esp,0xc
c00102d9:	c3                   	ret    

c00102da <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00102da:	55                   	push   ebp
c00102db:	57                   	push   edi
c00102dc:	56                   	push   esi
c00102dd:	53                   	push   ebx
c00102de:	81 ec 28 01 00 00    	sub    esp,0x128
c00102e4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00102eb:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00102f2:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00102f9:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0010300:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010304:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010308:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001030f:	e8 92 de ff ff       	call   c000e1a6 <Device::getName()>
c0010314:	5a                   	pop    edx
c0010315:	59                   	pop    ecx
c0010316:	50                   	push   eax
c0010317:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001031b:	55                   	push   ebp
c001031c:	e8 1f 04 ff ff       	call   c0000740 <strcpy>
c0010321:	5b                   	pop    ebx
c0010322:	58                   	pop    eax
c0010323:	68 a0 37 02 c0       	push   0xc00237a0
c0010328:	55                   	push   ebp
c0010329:	e8 52 05 ff ff       	call   c0000880 <strcat>
c001032e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0010335:	e8 89 96 ff ff       	call   c00099c3 <malloc>
c001033a:	83 c4 0c             	add    esp,0xc
c001033d:	89 c3                	mov    ebx,eax
c001033f:	57                   	push   edi
c0010340:	56                   	push   esi
c0010341:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010345:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010349:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0010350:	55                   	push   ebp
c0010351:	50                   	push   eax
c0010352:	e8 f7 fb ff ff       	call   c000ff4e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0010357:	83 c4 14             	add    esp,0x14
c001035a:	53                   	push   ebx
c001035b:	e8 a4 fc ff ff       	call   c0010004 <LogicalDisk::assignDriveLetter()>
c0010360:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010363:	e8 52 fd ff ff       	call   c00100ba <LogicalDisk::mount()>
c0010368:	58                   	pop    eax
c0010369:	5a                   	pop    edx
c001036a:	53                   	push   ebx
c001036b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010372:	e8 2f db ff ff       	call   c000dea6 <Device::addChild(Device*)>
c0010377:	81 c4 2c 01 00 00    	add    esp,0x12c
c001037d:	5b                   	pop    ebx
c001037e:	5e                   	pop    esi
c001037f:	5f                   	pop    edi
c0010380:	5d                   	pop    ebp
c0010381:	c3                   	ret    

c0010382 <createPartitionsForDisk(PhysicalDisk*)>:
c0010382:	55                   	push   ebp
c0010383:	57                   	push   edi
c0010384:	56                   	push   esi
c0010385:	53                   	push   ebx
c0010386:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001038c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0010393:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0010399:	3d 00 02 00 00       	cmp    eax,0x200
c001039e:	74 27                	je     c00103c7 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00103a0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00103a6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00103ac:	83 ec 10             	sub    esp,0x10
c00103af:	0f a4 f7 0a          	shld   edi,esi,0xa
c00103b3:	99                   	cdq    
c00103b4:	c1 e6 0a             	shl    esi,0xa
c00103b7:	52                   	push   edx
c00103b8:	89 fd                	mov    ebp,edi
c00103ba:	50                   	push   eax
c00103bb:	55                   	push   ebp
c00103bc:	56                   	push   esi
c00103bd:	e8 e2 0a 01 00       	call   c0020ea4 <__udivdi3>
c00103c2:	e9 b1 00 00 00       	jmp    c0010478 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00103c7:	83 ec 0c             	sub    esp,0xc
c00103ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c00103cc:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00103d0:	56                   	push   esi
c00103d1:	6a 01                	push   0x1
c00103d3:	6a 00                	push   0x0
c00103d5:	6a 00                	push   0x0
c00103d7:	53                   	push   ebx
c00103d8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00103db:	83 c4 20             	add    esp,0x20
c00103de:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00103e6:	75 0a                	jne    c00103f2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00103e8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00103f0:	74 2c                	je     c001041e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00103f2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00103f8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00103fe:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010404:	83 ec 10             	sub    esp,0x10
c0010407:	0f a4 c2 0a          	shld   edx,eax,0xa
c001040b:	89 f7                	mov    edi,esi
c001040d:	c1 e0 0a             	shl    eax,0xa
c0010410:	c1 ff 1f             	sar    edi,0x1f
c0010413:	57                   	push   edi
c0010414:	56                   	push   esi
c0010415:	52                   	push   edx
c0010416:	50                   	push   eax
c0010417:	e8 88 0a 01 00       	call   c0020ea4 <__udivdi3>
c001041c:	eb 5a                	jmp    c0010478 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001041e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0010425:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c001042c:	83 e1 7f             	and    ecx,0x7f
c001042f:	83 e0 7f             	and    eax,0x7f
c0010432:	01 c1                	add    ecx,eax
c0010434:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001043b:	83 e0 7f             	and    eax,0x7f
c001043e:	01 c1                	add    ecx,eax
c0010440:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0010447:	83 e0 7f             	and    eax,0x7f
c001044a:	00 c1                	add    cl,al
c001044c:	74 41                	je     c001048f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001044e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010454:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001045a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010460:	83 ec 10             	sub    esp,0x10
c0010463:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010467:	89 f7                	mov    edi,esi
c0010469:	c1 e0 0a             	shl    eax,0xa
c001046c:	c1 ff 1f             	sar    edi,0x1f
c001046f:	57                   	push   edi
c0010470:	56                   	push   esi
c0010471:	52                   	push   edx
c0010472:	50                   	push   eax
c0010473:	e8 2c 0a 01 00       	call   c0020ea4 <__udivdi3>
c0010478:	83 c4 14             	add    esp,0x14
c001047b:	52                   	push   edx
c001047c:	50                   	push   eax
c001047d:	6a 00                	push   0x0
c001047f:	6a 00                	push   0x0
c0010481:	53                   	push   ebx
c0010482:	e8 53 fe ff ff       	call   c00102da <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010487:	83 c4 20             	add    esp,0x20
c001048a:	e9 79 01 00 00       	jmp    c0010608 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001048f:	89 f0                	mov    eax,esi
c0010491:	31 f6                	xor    esi,esi
c0010493:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001049a:	75 02                	jne    c001049e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001049c:	89 f1                	mov    ecx,esi
c001049e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00104a5:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00104ac:	c1 e2 08             	shl    edx,0x8
c00104af:	c1 e7 10             	shl    edi,0x10
c00104b2:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00104ba:	09 fa                	or     edx,edi
c00104bc:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00104c4:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00104cb:	83 c0 10             	add    eax,0x10
c00104ce:	09 fa                	or     edx,edi
c00104d0:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00104d7:	c1 e7 18             	shl    edi,0x18
c00104da:	09 fa                	or     edx,edi
c00104dc:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00104e3:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00104e7:	c1 e7 10             	shl    edi,0x10
c00104ea:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00104f1:	c1 e2 08             	shl    edx,0x8
c00104f4:	09 fa                	or     edx,edi
c00104f6:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00104fd:	09 fa                	or     edx,edi
c00104ff:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0010506:	c1 e7 18             	shl    edi,0x18
c0010509:	09 fa                	or     edx,edi
c001050b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001050f:	46                   	inc    esi
c0010510:	83 fe 04             	cmp    esi,0x4
c0010513:	0f 85 7a ff ff ff    	jne    c0010493 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0010519:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001051d:	83 f0 01             	xor    eax,0x1
c0010520:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010524:	75 57                	jne    c001057d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010526:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001052a:	83 f0 01             	xor    eax,0x1
c001052d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0010531:	75 4a                	jne    c001057d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010533:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010537:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001053f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010547:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001054d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010553:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010559:	0f a4 c2 0a          	shld   edx,eax,0xa
c001055d:	89 f7                	mov    edi,esi
c001055f:	c1 e0 0a             	shl    eax,0xa
c0010562:	c1 ff 1f             	sar    edi,0x1f
c0010565:	57                   	push   edi
c0010566:	56                   	push   esi
c0010567:	52                   	push   edx
c0010568:	50                   	push   eax
c0010569:	e8 36 09 01 00       	call   c0020ea4 <__udivdi3>
c001056e:	83 c4 10             	add    esp,0x10
c0010571:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010575:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010579:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001057d:	84 c9                	test   cl,cl
c001057f:	74 53                	je     c00105d4 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0010581:	0f b6 c9             	movzx  ecx,cl
c0010584:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010588:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001058c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010590:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010594:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010598:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001059c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00105a0:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00105a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00105a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00105ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00105b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00105b4:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00105b8:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00105bc:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00105c0:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00105c4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00105c8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00105cc:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00105d0:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00105d4:	31 ed                	xor    ebp,ebp
c00105d6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00105da:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00105de:	89 f8                	mov    eax,edi
c00105e0:	09 f0                	or     eax,esi
c00105e2:	74 1e                	je     c0010602 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00105e4:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00105e8:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00105ec:	89 d1                	mov    ecx,edx
c00105ee:	09 c1                	or     ecx,eax
c00105f0:	74 10                	je     c0010602 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00105f2:	83 ec 0c             	sub    esp,0xc
c00105f5:	57                   	push   edi
c00105f6:	56                   	push   esi
c00105f7:	52                   	push   edx
c00105f8:	50                   	push   eax
c00105f9:	53                   	push   ebx
c00105fa:	e8 db fc ff ff       	call   c00102da <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00105ff:	83 c4 20             	add    esp,0x20
c0010602:	45                   	inc    ebp
c0010603:	83 fd 04             	cmp    ebp,0x4
c0010606:	75 ce                	jne    c00105d6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0010608:	81 c4 5c 02 00 00    	add    esp,0x25c
c001060e:	5b                   	pop    ebx
c001060f:	5e                   	pop    esi
c0010610:	5f                   	pop    edi
c0010611:	5d                   	pop    ebp
c0010612:	c3                   	ret    
c0010613:	90                   	nop

c0010614 <Serial::Serial(char const*)>:
c0010614:	83 ec 0c             	sub    esp,0xc
c0010617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001061b:	83 ec 08             	sub    esp,0x8
c001061e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010622:	50                   	push   eax
c0010623:	e8 82 da ff ff       	call   c000e0aa <Device::Device(char const*)>
c0010628:	83 c4 10             	add    esp,0x10
c001062b:	ba b4 37 02 c0       	mov    edx,0xc00237b4
c0010630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010634:	89 10                	mov    DWORD PTR [eax],edx
c0010636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001063a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0010644:	90                   	nop
c0010645:	83 c4 0c             	add    esp,0xc
c0010648:	c3                   	ret    
c0010649:	90                   	nop
c001064a:	66 90                	xchg   ax,ax

c001064c <Serial::~Serial()>:
c001064c:	83 ec 0c             	sub    esp,0xc
c001064f:	ba b4 37 02 c0       	mov    edx,0xc00237b4
c0010654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010658:	89 10                	mov    DWORD PTR [eax],edx
c001065a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001065e:	83 ec 0c             	sub    esp,0xc
c0010661:	50                   	push   eax
c0010662:	e8 0d d7 ff ff       	call   c000dd74 <Device::~Device()>
c0010667:	83 c4 10             	add    esp,0x10
c001066a:	90                   	nop
c001066b:	83 c4 0c             	add    esp,0xc
c001066e:	c3                   	ret    
c001066f:	90                   	nop

c0010670 <Serial::~Serial()>:
c0010670:	83 ec 0c             	sub    esp,0xc
c0010673:	83 ec 0c             	sub    esp,0xc
c0010676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001067a:	e8 cd ff ff ff       	call   c001064c <Serial::~Serial()>
c001067f:	83 c4 10             	add    esp,0x10
c0010682:	83 ec 08             	sub    esp,0x8
c0010685:	68 58 01 00 00       	push   0x158
c001068a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001068e:	e8 eb c2 ff ff       	call   c000c97e <operator delete(void*, unsigned long)>
c0010693:	83 c4 10             	add    esp,0x10
c0010696:	83 c4 0c             	add    esp,0xc
c0010699:	c3                   	ret    
c001069a:	66 90                	xchg   ax,ax

c001069c <Timer::Timer(char const*)>:
c001069c:	83 ec 0c             	sub    esp,0xc
c001069f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106a3:	83 ec 08             	sub    esp,0x8
c00106a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106aa:	50                   	push   eax
c00106ab:	e8 fa d9 ff ff       	call   c000e0aa <Device::Device(char const*)>
c00106b0:	83 c4 10             	add    esp,0x10
c00106b3:	ba f8 37 02 c0       	mov    edx,0xc00237f8
c00106b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106bc:	89 10                	mov    DWORD PTR [eax],edx
c00106be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106c2:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00106cc:	90                   	nop
c00106cd:	83 c4 0c             	add    esp,0xc
c00106d0:	c3                   	ret    
c00106d1:	90                   	nop
c00106d2:	66 90                	xchg   ax,ax

c00106d4 <Timer::~Timer()>:
c00106d4:	83 ec 0c             	sub    esp,0xc
c00106d7:	ba f8 37 02 c0       	mov    edx,0xc00237f8
c00106dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106e0:	89 10                	mov    DWORD PTR [eax],edx
c00106e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106e6:	83 ec 0c             	sub    esp,0xc
c00106e9:	50                   	push   eax
c00106ea:	e8 85 d6 ff ff       	call   c000dd74 <Device::~Device()>
c00106ef:	83 c4 10             	add    esp,0x10
c00106f2:	90                   	nop
c00106f3:	83 c4 0c             	add    esp,0xc
c00106f6:	c3                   	ret    
c00106f7:	90                   	nop

c00106f8 <Timer::~Timer()>:
c00106f8:	83 ec 0c             	sub    esp,0xc
c00106fb:	83 ec 0c             	sub    esp,0xc
c00106fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010702:	e8 cd ff ff ff       	call   c00106d4 <Timer::~Timer()>
c0010707:	83 c4 10             	add    esp,0x10
c001070a:	83 ec 08             	sub    esp,0x8
c001070d:	68 5c 01 00 00       	push   0x15c
c0010712:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010716:	e8 63 c2 ff ff       	call   c000c97e <operator delete(void*, unsigned long)>
c001071b:	83 c4 10             	add    esp,0x10
c001071e:	83 c4 0c             	add    esp,0xc
c0010721:	c3                   	ret    

c0010722 <Timer::read()>:
c0010722:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010726:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001072c:	c3                   	ret    

c001072d <timerHandler(unsigned int)>:
c001072d:	56                   	push   esi
c001072e:	53                   	push   ebx
c001072f:	51                   	push   ecx
c0010730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010734:	01 05 8c 67 02 c0    	add    DWORD PTR ds:0xc002678c,eax
c001073a:	80 3d 6d 61 02 c0 00 	cmp    BYTE PTR ds:0xc002616d,0x0
c0010741:	0f 84 49 01 00 00    	je     c0010890 <timerHandler(unsigned int)+0x163>
c0010747:	fa                   	cli    
c0010748:	ff 05 28 76 02 c0    	inc    DWORD PTR ds:0xc0027628
c001074e:	83 ec 0c             	sub    esp,0xc
c0010751:	ff 05 24 76 02 c0    	inc    DWORD PTR ds:0xc0027624
c0010757:	68 38 76 02 c0       	push   0xc0027638
c001075c:	e8 13 0d 01 00       	call   c0021474 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010761:	83 c4 10             	add    esp,0x10
c0010764:	84 c0                	test   al,al
c0010766:	0f 85 a0 00 00 00    	jne    c001080c <timerHandler(unsigned int)+0xdf>
c001076c:	83 ec 0c             	sub    esp,0xc
c001076f:	68 38 76 02 c0       	push   0xc0027638
c0010774:	e8 17 0d 01 00       	call   c0021490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010779:	83 c4 10             	add    esp,0x10
c001077c:	89 c6                	mov    esi,eax
c001077e:	66 90                	xchg   ax,ax
c0010780:	83 ec 0c             	sub    esp,0xc
c0010783:	68 38 76 02 c0       	push   0xc0027638
c0010788:	e8 03 0d 01 00       	call   c0021490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001078d:	c7 04 24 38 76 02 c0 	mov    DWORD PTR [esp],0xc0027638
c0010794:	89 c3                	mov    ebx,eax
c0010796:	e8 fd 0c 01 00       	call   c0021498 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001079b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001079e:	83 c4 10             	add    esp,0x10
c00107a1:	3b 05 8c 67 02 c0    	cmp    eax,DWORD PTR ds:0xc002678c
c00107a7:	77 23                	ja     c00107cc <timerHandler(unsigned int)+0x9f>
c00107a9:	83 ec 0c             	sub    esp,0xc
c00107ac:	53                   	push   ebx
c00107ad:	e8 da 7b 00 00       	call   c001838c <unblockTask(ThreadControlBlock*)>
c00107b2:	83 c4 10             	add    esp,0x10
c00107b5:	39 de                	cmp    esi,ebx
c00107b7:	75 27                	jne    c00107e0 <timerHandler(unsigned int)+0xb3>
c00107b9:	83 ec 0c             	sub    esp,0xc
c00107bc:	68 38 76 02 c0       	push   0xc0027638
c00107c1:	e8 ca 0c 01 00       	call   c0021490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00107c6:	89 c6                	mov    esi,eax
c00107c8:	eb 12                	jmp    c00107dc <timerHandler(unsigned int)+0xaf>
c00107ca:	66 90                	xchg   ax,ax
c00107cc:	52                   	push   edx
c00107cd:	52                   	push   edx
c00107ce:	53                   	push   ebx
c00107cf:	68 38 76 02 c0       	push   0xc0027638
c00107d4:	e8 77 0d 01 00       	call   c0021550 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00107d9:	8d 76 00             	lea    esi,[esi+0x0]
c00107dc:	83 c4 10             	add    esp,0x10
c00107df:	90                   	nop
c00107e0:	83 ec 0c             	sub    esp,0xc
c00107e3:	68 38 76 02 c0       	push   0xc0027638
c00107e8:	e8 87 0c 01 00       	call   c0021474 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00107ed:	83 c4 10             	add    esp,0x10
c00107f0:	84 c0                	test   al,al
c00107f2:	75 18                	jne    c001080c <timerHandler(unsigned int)+0xdf>
c00107f4:	83 ec 0c             	sub    esp,0xc
c00107f7:	68 38 76 02 c0       	push   0xc0027638
c00107fc:	e8 8f 0c 01 00       	call   c0021490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010801:	83 c4 10             	add    esp,0x10
c0010804:	39 f0                	cmp    eax,esi
c0010806:	0f 85 74 ff ff ff    	jne    c0010780 <timerHandler(unsigned int)+0x53>
c001080c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010811:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c0010815:	74 41                	je     c0010858 <timerHandler(unsigned int)+0x12b>
c0010817:	80 3d 6c 61 02 c0 00 	cmp    BYTE PTR ds:0xc002616c,0x0
c001081e:	74 38                	je     c0010858 <timerHandler(unsigned int)+0x12b>
c0010820:	fa                   	cli    
c0010821:	ff 05 28 76 02 c0    	inc    DWORD PTR ds:0xc0027628
c0010827:	a1 8c 67 02 c0       	mov    eax,ds:0xc002678c
c001082c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010832:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c0010835:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001083b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c001083e:	72 08                	jb     c0010848 <timerHandler(unsigned int)+0x11b>
c0010840:	e8 8b 76 00 00       	call   c0017ed0 <schedule()>
c0010845:	8d 76 00             	lea    esi,[esi+0x0]
c0010848:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c001084d:	48                   	dec    eax
c001084e:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c0010853:	75 03                	jne    c0010858 <timerHandler(unsigned int)+0x12b>
c0010855:	fb                   	sti    
c0010856:	66 90                	xchg   ax,ax
c0010858:	a1 24 76 02 c0       	mov    eax,ds:0xc0027624
c001085d:	48                   	dec    eax
c001085e:	a3 24 76 02 c0       	mov    ds:0xc0027624,eax
c0010863:	75 1b                	jne    c0010880 <timerHandler(unsigned int)+0x153>
c0010865:	83 3d 20 76 02 c0 00 	cmp    DWORD PTR ds:0xc0027620,0x0
c001086c:	74 12                	je     c0010880 <timerHandler(unsigned int)+0x153>
c001086e:	c7 05 20 76 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027620,0x0
c0010878:	e8 53 76 00 00       	call   c0017ed0 <schedule()>
c001087d:	8d 76 00             	lea    esi,[esi+0x0]
c0010880:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c0010885:	48                   	dec    eax
c0010886:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c001088b:	75 03                	jne    c0010890 <timerHandler(unsigned int)+0x163>
c001088d:	fb                   	sti    
c001088e:	66 90                	xchg   ax,ax
c0010890:	58                   	pop    eax
c0010891:	5b                   	pop    ebx
c0010892:	5e                   	pop    esi
c0010893:	c3                   	ret    

c0010894 <setupTimer(int)>:
c0010894:	57                   	push   edi
c0010895:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001089a:	56                   	push   esi
c001089b:	53                   	push   ebx
c001089c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00108a0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00108a6:	83 ec 0c             	sub    esp,0xc
c00108a9:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00108af:	e8 f2 d8 ff ff       	call   c000e1a6 <Device::getName()>
c00108b4:	83 c4 10             	add    esp,0x10
c00108b7:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00108ba:	0f 85 94 00 00 00    	jne    c0010954 <setupTimer(int)+0xc0>
c00108c0:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00108c5:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00108cc:	0f 84 82 00 00 00    	je     c0010954 <setupTimer(int)+0xc0>
c00108d2:	83 ec 0c             	sub    esp,0xc
c00108d5:	68 5c 01 00 00       	push   0x15c
c00108da:	e8 e4 90 ff ff       	call   c00099c3 <malloc>
c00108df:	89 04 24             	mov    DWORD PTR [esp],eax
c00108e2:	89 c3                	mov    ebx,eax
c00108e4:	e8 93 01 01 00       	call   c0020a7c <PIT::PIT()>
c00108e9:	59                   	pop    ecx
c00108ea:	5f                   	pop    edi
c00108eb:	53                   	push   ebx
c00108ec:	ff 35 68 61 02 c0    	push   DWORD PTR ds:0xc0026168
c00108f2:	e8 af d5 ff ff       	call   c000dea6 <Device::addChild(Device*)>
c00108f7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00108f9:	6a 00                	push   0x0
c00108fb:	6a 00                	push   0x0
c00108fd:	56                   	push   esi
c00108fe:	53                   	push   ebx
c00108ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010902:	83 c4 14             	add    esp,0x14
c0010905:	68 60 01 00 00       	push   0x160
c001090a:	e8 b4 90 ff ff       	call   c00099c3 <malloc>
c001090f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010912:	89 c7                	mov    edi,eax
c0010914:	e8 17 00 01 00       	call   c0020930 <APICTimer::APICTimer()>
c0010919:	6a 00                	push   0x0
c001091b:	6a 00                	push   0x0
c001091d:	56                   	push   esi
c001091e:	57                   	push   edi
c001091f:	e8 0c ff 00 00       	call   c0020830 <APICTimer::open(int, int, void*)>
c0010924:	83 c4 20             	add    esp,0x20
c0010927:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010929:	6a 00                	push   0x0
c001092b:	6a 00                	push   0x0
c001092d:	6a 00                	push   0x0
c001092f:	53                   	push   ebx
c0010930:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010933:	58                   	pop    eax
c0010934:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0010939:	5a                   	pop    edx
c001093a:	57                   	push   edi
c001093b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010941:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010947:	e8 5a d5 ff ff       	call   c000dea6 <Device::addChild(Device*)>
c001094c:	83 c4 10             	add    esp,0x10
c001094f:	eb 37                	jmp    c0010988 <setupTimer(int)+0xf4>
c0010951:	8d 76 00             	lea    esi,[esi+0x0]
c0010954:	83 ec 0c             	sub    esp,0xc
c0010957:	68 5c 01 00 00       	push   0x15c
c001095c:	e8 62 90 ff ff       	call   c00099c3 <malloc>
c0010961:	89 04 24             	mov    DWORD PTR [esp],eax
c0010964:	89 c3                	mov    ebx,eax
c0010966:	e8 11 01 01 00       	call   c0020a7c <PIT::PIT()>
c001096b:	58                   	pop    eax
c001096c:	5a                   	pop    edx
c001096d:	53                   	push   ebx
c001096e:	ff 35 68 61 02 c0    	push   DWORD PTR ds:0xc0026168
c0010974:	e8 2d d5 ff ff       	call   c000dea6 <Device::addChild(Device*)>
c0010979:	8b 03                	mov    eax,DWORD PTR [ebx]
c001097b:	6a 00                	push   0x0
c001097d:	6a 00                	push   0x0
c001097f:	56                   	push   esi
c0010980:	53                   	push   ebx
c0010981:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010984:	83 c4 20             	add    esp,0x20
c0010987:	90                   	nop
c0010988:	89 d8                	mov    eax,ebx
c001098a:	5b                   	pop    ebx
c001098b:	5e                   	pop    esi
c001098c:	5f                   	pop    edi
c001098d:	c3                   	ret    
c001098e:	66 90                	xchg   ax,ax

c0010990 <VCache::VCache(PhysicalDisk*)>:
c0010990:	53                   	push   ebx
c0010991:	83 ec 18             	sub    esp,0x18
c0010994:	ba 28 38 02 c0       	mov    edx,0xc0023828
c0010999:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001099d:	89 10                	mov    DWORD PTR [eax],edx
c001099f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109a3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00109aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109ae:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00109b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109b9:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00109c0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00109c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109cb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00109d2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00109d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109dd:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00109e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109e8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00109ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109f0:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00109f7:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c00109fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a02:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010a06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a0a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0010a0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a12:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010a16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a1a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010a21:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0010a29:	83 ec 0c             	sub    esp,0xc
c0010a2c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010a30:	e8 8e 8f ff ff       	call   c00099c3 <malloc>
c0010a35:	83 c4 10             	add    esp,0x10
c0010a38:	89 c3                	mov    ebx,eax
c0010a3a:	83 ec 0c             	sub    esp,0xc
c0010a3d:	53                   	push   ebx
c0010a3e:	e8 5d 72 00 00       	call   c0017ca0 <Mutex::Mutex()>
c0010a43:	83 c4 10             	add    esp,0x10
c0010a46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a4a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010a4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a51:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010a55:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010a58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a5c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0010a63:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010a67:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0010a6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a71:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010a74:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010a78:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0010a7e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010a84:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010a88:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0010a8b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0010a8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a92:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010a96:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010a9a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010aa0:	05 00 01 00 00       	add    eax,0x100
c0010aa5:	c1 e0 04             	shl    eax,0x4
c0010aa8:	83 ec 0c             	sub    esp,0xc
c0010aab:	50                   	push   eax
c0010aac:	e8 12 8f ff ff       	call   c00099c3 <malloc>
c0010ab1:	83 c4 10             	add    esp,0x10
c0010ab4:	89 c2                	mov    edx,eax
c0010ab6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010aba:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010abd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ac1:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010ac8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010acc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010ad0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010ad4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010ada:	c1 e0 06             	shl    eax,0x6
c0010add:	83 ec 0c             	sub    esp,0xc
c0010ae0:	50                   	push   eax
c0010ae1:	e8 dd 8e ff ff       	call   c00099c3 <malloc>
c0010ae6:	83 c4 10             	add    esp,0x10
c0010ae9:	89 c2                	mov    edx,eax
c0010aeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010aef:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010af2:	90                   	nop
c0010af3:	83 c4 18             	add    esp,0x18
c0010af6:	5b                   	pop    ebx
c0010af7:	c3                   	ret    

c0010af8 <VCache::invalidateReadBuffer()>:
c0010af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010afc:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0010b02:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010b06:	c3                   	ret    
c0010b07:	90                   	nop

c0010b08 <VCache::writeWriteBuffer()>:
c0010b08:	53                   	push   ebx
c0010b09:	83 ec 14             	sub    esp,0x14
c0010b0c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010b10:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010b13:	8b 10                	mov    edx,DWORD PTR [eax]
c0010b15:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010b18:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010b1b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010b1e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010b21:	50                   	push   eax
c0010b22:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010b25:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0010b2c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0010b33:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0010b37:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0010b3e:	83 c4 28             	add    esp,0x28
c0010b41:	5b                   	pop    ebx
c0010b42:	c3                   	ret    
c0010b43:	90                   	nop

c0010b44 <VCache::~VCache()>:
c0010b44:	83 ec 0c             	sub    esp,0xc
c0010b47:	ba 28 38 02 c0       	mov    edx,0xc0023828
c0010b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b50:	89 10                	mov    DWORD PTR [eax],edx
c0010b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b56:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0010b59:	84 c0                	test   al,al
c0010b5b:	74 0f                	je     c0010b6c <VCache::~VCache()+0x28>
c0010b5d:	83 ec 0c             	sub    esp,0xc
c0010b60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b64:	e8 9f ff ff ff       	call   c0010b08 <VCache::writeWriteBuffer()>
c0010b69:	83 c4 10             	add    esp,0x10
c0010b6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b70:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010b73:	83 ec 0c             	sub    esp,0xc
c0010b76:	50                   	push   eax
c0010b77:	e8 57 8e ff ff       	call   c00099d3 <free>
c0010b7c:	83 c4 10             	add    esp,0x10
c0010b7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b83:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0010b86:	83 ec 0c             	sub    esp,0xc
c0010b89:	50                   	push   eax
c0010b8a:	e8 44 8e ff ff       	call   c00099d3 <free>
c0010b8f:	83 c4 10             	add    esp,0x10
c0010b92:	90                   	nop
c0010b93:	83 c4 0c             	add    esp,0xc
c0010b96:	c3                   	ret    
c0010b97:	90                   	nop

c0010b98 <VCache::~VCache()>:
c0010b98:	83 ec 0c             	sub    esp,0xc
c0010b9b:	83 ec 0c             	sub    esp,0xc
c0010b9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ba2:	e8 9d ff ff ff       	call   c0010b44 <VCache::~VCache()>
c0010ba7:	83 c4 10             	add    esp,0x10
c0010baa:	83 ec 08             	sub    esp,0x8
c0010bad:	6a 44                	push   0x44
c0010baf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bb3:	e8 c6 bd ff ff       	call   c000c97e <operator delete(void*, unsigned long)>
c0010bb8:	83 c4 10             	add    esp,0x10
c0010bbb:	83 c4 0c             	add    esp,0xc
c0010bbe:	c3                   	ret    
c0010bbf:	90                   	nop

c0010bc0 <VCache::write(unsigned long long, int, void*)>:
c0010bc0:	55                   	push   ebp
c0010bc1:	31 c0                	xor    eax,eax
c0010bc3:	57                   	push   edi
c0010bc4:	56                   	push   esi
c0010bc5:	53                   	push   ebx
c0010bc6:	83 ec 0c             	sub    esp,0xc
c0010bc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010bcd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010bd1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010bd5:	8d 76 00             	lea    esi,[esi+0x0]
c0010bd8:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0010bdc:	7d 1a                	jge    c0010bf8 <VCache::write(unsigned long long, int, void*)+0x38>
c0010bde:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010be1:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010be7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010beb:	0f af c8             	imul   ecx,eax
c0010bee:	01 ca                	add    edx,ecx
c0010bf0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010bf2:	40                   	inc    eax
c0010bf3:	eb e3                	jmp    c0010bd8 <VCache::write(unsigned long long, int, void*)+0x18>
c0010bf5:	8d 76 00             	lea    esi,[esi+0x0]
c0010bf8:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010bfc:	74 0a                	je     c0010c08 <VCache::write(unsigned long long, int, void*)+0x48>
c0010bfe:	53                   	push   ebx
c0010bff:	e8 f4 fe ff ff       	call   c0010af8 <VCache::invalidateReadBuffer()>
c0010c04:	58                   	pop    eax
c0010c05:	8d 76 00             	lea    esi,[esi+0x0]
c0010c08:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010c0c:	74 5e                	je     c0010c6c <VCache::write(unsigned long long, int, void*)+0xac>
c0010c0e:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0010c11:	89 e8                	mov    eax,ebp
c0010c13:	99                   	cdq    
c0010c14:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0010c17:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0010c1a:	89 c1                	mov    ecx,eax
c0010c1c:	89 d0                	mov    eax,edx
c0010c1e:	31 f1                	xor    ecx,esi
c0010c20:	31 f8                	xor    eax,edi
c0010c22:	09 c1                	or     ecx,eax
c0010c24:	75 3a                	jne    c0010c60 <VCache::write(unsigned long long, int, void*)+0xa0>
c0010c26:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0010c2b:	75 33                	jne    c0010c60 <VCache::write(unsigned long long, int, void*)+0xa0>
c0010c2d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010c30:	89 ef                	mov    edi,ebp
c0010c32:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010c38:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010c3c:	0f af f9             	imul   edi,ecx
c0010c3f:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0010c42:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c44:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c47:	40                   	inc    eax
c0010c48:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010c4b:	83 f8 40             	cmp    eax,0x40
c0010c4e:	75 60                	jne    c0010cb0 <VCache::write(unsigned long long, int, void*)+0xf0>
c0010c50:	83 ec 0c             	sub    esp,0xc
c0010c53:	53                   	push   ebx
c0010c54:	e8 af fe ff ff       	call   c0010b08 <VCache::writeWriteBuffer()>
c0010c59:	83 c4 10             	add    esp,0x10
c0010c5c:	eb 52                	jmp    c0010cb0 <VCache::write(unsigned long long, int, void*)+0xf0>
c0010c5e:	66 90                	xchg   ax,ax
c0010c60:	83 ec 0c             	sub    esp,0xc
c0010c63:	53                   	push   ebx
c0010c64:	e8 9f fe ff ff       	call   c0010b08 <VCache::writeWriteBuffer()>
c0010c69:	83 c4 10             	add    esp,0x10
c0010c6c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010c6f:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c0010c74:	7f 22                	jg     c0010c98 <VCache::write(unsigned long long, int, void*)+0xd8>
c0010c76:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0010c79:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0010c7c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010c80:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0010c84:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0010c87:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010c8a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010c90:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010c94:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c96:	eb 18                	jmp    c0010cb0 <VCache::write(unsigned long long, int, void*)+0xf0>
c0010c98:	83 ec 0c             	sub    esp,0xc
c0010c9b:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010ca1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010ca5:	57                   	push   edi
c0010ca6:	56                   	push   esi
c0010ca7:	50                   	push   eax
c0010ca8:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010cab:	83 c4 20             	add    esp,0x20
c0010cae:	66 90                	xchg   ax,ax
c0010cb0:	83 c4 0c             	add    esp,0xc
c0010cb3:	31 c0                	xor    eax,eax
c0010cb5:	5b                   	pop    ebx
c0010cb6:	5e                   	pop    esi
c0010cb7:	5f                   	pop    edi
c0010cb8:	5d                   	pop    ebp
c0010cb9:	c3                   	ret    

c0010cba <VCache::read(unsigned long long, int, void*)>:
c0010cba:	55                   	push   ebp
c0010cbb:	31 c0                	xor    eax,eax
c0010cbd:	57                   	push   edi
c0010cbe:	56                   	push   esi
c0010cbf:	53                   	push   ebx
c0010cc0:	83 ec 1c             	sub    esp,0x1c
c0010cc3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010cc7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010ccb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0010ccf:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010cd3:	90                   	nop
c0010cd4:	39 e8                	cmp    eax,ebp
c0010cd6:	7d 18                	jge    c0010cf0 <VCache::read(unsigned long long, int, void*)+0x36>
c0010cd8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010cdb:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010ce1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0010ce5:	0f af c8             	imul   ecx,eax
c0010ce8:	01 ca                	add    edx,ecx
c0010cea:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010cec:	40                   	inc    eax
c0010ced:	eb e5                	jmp    c0010cd4 <VCache::read(unsigned long long, int, void*)+0x1a>
c0010cef:	90                   	nop
c0010cf0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010cf4:	74 0e                	je     c0010d04 <VCache::read(unsigned long long, int, void*)+0x4a>
c0010cf6:	83 ec 0c             	sub    esp,0xc
c0010cf9:	53                   	push   ebx
c0010cfa:	e8 09 fe ff ff       	call   c0010b08 <VCache::writeWriteBuffer()>
c0010cff:	83 c4 10             	add    esp,0x10
c0010d02:	66 90                	xchg   ax,ax
c0010d04:	83 fd 01             	cmp    ebp,0x1
c0010d07:	0f 85 87 00 00 00    	jne    c0010d94 <VCache::read(unsigned long long, int, void*)+0xda>
c0010d0d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010d10:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d14:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0010d1b:	75 77                	jne    c0010d94 <VCache::read(unsigned long long, int, void*)+0xda>
c0010d1d:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0010d20:	89 e9                	mov    ecx,ebp
c0010d22:	f7 d9                	neg    ecx
c0010d24:	89 c8                	mov    eax,ecx
c0010d26:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010d2a:	c1 f8 1f             	sar    eax,0x1f
c0010d2d:	21 f1                	and    ecx,esi
c0010d2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d33:	89 c8                	mov    eax,ecx
c0010d35:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010d39:	21 f9                	and    ecx,edi
c0010d3b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010d3f:	89 ca                	mov    edx,ecx
c0010d41:	74 0d                	je     c0010d50 <VCache::read(unsigned long long, int, void*)+0x96>
c0010d43:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0010d46:	75 08                	jne    c0010d50 <VCache::read(unsigned long long, int, void*)+0x96>
c0010d48:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0010d4b:	74 27                	je     c0010d74 <VCache::read(unsigned long long, int, void*)+0xba>
c0010d4d:	8d 76 00             	lea    esi,[esi+0x0]
c0010d50:	83 ec 0c             	sub    esp,0xc
c0010d53:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0010d57:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010d5b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0010d5e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0010d61:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0010d63:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010d66:	55                   	push   ebp
c0010d67:	52                   	push   edx
c0010d68:	50                   	push   eax
c0010d69:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010d6d:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0010d70:	83 c4 20             	add    esp,0x20
c0010d73:	90                   	nop
c0010d74:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010d77:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0010d7b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010d81:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0010d84:	48                   	dec    eax
c0010d85:	21 c6                	and    esi,eax
c0010d87:	0f af f1             	imul   esi,ecx
c0010d8a:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0010d8d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d8f:	eb 23                	jmp    c0010db4 <VCache::read(unsigned long long, int, void*)+0xfa>
c0010d91:	8d 76 00             	lea    esi,[esi+0x0]
c0010d94:	83 ec 0c             	sub    esp,0xc
c0010d97:	53                   	push   ebx
c0010d98:	e8 5b fd ff ff       	call   c0010af8 <VCache::invalidateReadBuffer()>
c0010d9d:	5a                   	pop    edx
c0010d9e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010da1:	8b 10                	mov    edx,DWORD PTR [eax]
c0010da3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010da7:	55                   	push   ebp
c0010da8:	57                   	push   edi
c0010da9:	56                   	push   esi
c0010daa:	50                   	push   eax
c0010dab:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0010dae:	83 c4 20             	add    esp,0x20
c0010db1:	8d 76 00             	lea    esi,[esi+0x0]
c0010db4:	83 c4 1c             	add    esp,0x1c
c0010db7:	31 c0                	xor    eax,eax
c0010db9:	5b                   	pop    ebx
c0010dba:	5e                   	pop    esi
c0010dbb:	5f                   	pop    edi
c0010dbc:	5d                   	pop    ebp
c0010dbd:	c3                   	ret    

c0010dbe <Video::putrect(int, int, int, int, unsigned int)>:
c0010dbe:	55                   	push   ebp
c0010dbf:	57                   	push   edi
c0010dc0:	56                   	push   esi
c0010dc1:	53                   	push   ebx
c0010dc2:	83 ec 1c             	sub    esp,0x1c
c0010dc5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010dc9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010dcd:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0010dd1:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010dd5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010dd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ddd:	01 df                	add    edi,ebx
c0010ddf:	39 fb                	cmp    ebx,edi
c0010de1:	7d 1f                	jge    c0010e02 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0010de3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0010de7:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0010deb:	7d 12                	jge    c0010dff <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0010ded:	8b 16                	mov    edx,DWORD PTR [esi]
c0010def:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010df3:	53                   	push   ebx
c0010df4:	55                   	push   ebp
c0010df5:	45                   	inc    ebp
c0010df6:	56                   	push   esi
c0010df7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0010dfa:	83 c4 10             	add    esp,0x10
c0010dfd:	eb e8                	jmp    c0010de7 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0010dff:	43                   	inc    ebx
c0010e00:	eb dd                	jmp    c0010ddf <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0010e02:	83 c4 1c             	add    esp,0x1c
c0010e05:	5b                   	pop    ebx
c0010e06:	5e                   	pop    esi
c0010e07:	5f                   	pop    edi
c0010e08:	5d                   	pop    ebp
c0010e09:	c3                   	ret    

c0010e0a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0010e0a:	55                   	push   ebp
c0010e0b:	57                   	push   edi
c0010e0c:	31 ff                	xor    edi,edi
c0010e0e:	56                   	push   esi
c0010e0f:	53                   	push   ebx
c0010e10:	83 ec 1c             	sub    esp,0x1c
c0010e13:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0010e17:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e1b:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0010e22:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0010e27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e2b:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010e2f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0010e33:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0010e36:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0010e3a:	01 f9                	add    ecx,edi
c0010e3c:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0010e40:	7d 2f                	jge    c0010e71 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0010e42:	31 f6                	xor    esi,esi
c0010e44:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0010e48:	01 f2                	add    edx,esi
c0010e4a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0010e4e:	7d 1a                	jge    c0010e6a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0010e50:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010e53:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0010e56:	46                   	inc    esi
c0010e57:	51                   	push   ecx
c0010e58:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010e5c:	52                   	push   edx
c0010e5d:	55                   	push   ebp
c0010e5e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010e61:	83 c4 10             	add    esp,0x10
c0010e64:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010e68:	eb da                	jmp    c0010e44 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0010e6a:	47                   	inc    edi
c0010e6b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0010e6f:	eb c5                	jmp    c0010e36 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0010e71:	83 c4 1c             	add    esp,0x1c
c0010e74:	5b                   	pop    ebx
c0010e75:	5e                   	pop    esi
c0010e76:	5f                   	pop    edi
c0010e77:	5d                   	pop    ebp
c0010e78:	c3                   	ret    
c0010e79:	90                   	nop

c0010e7a <Video::blit(unsigned int*, int, int, int, int)>:
c0010e7a:	55                   	push   ebp
c0010e7b:	57                   	push   edi
c0010e7c:	56                   	push   esi
c0010e7d:	53                   	push   ebx
c0010e7e:	83 ec 1c             	sub    esp,0x1c
c0010e81:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010e85:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e89:	85 c0                	test   eax,eax
c0010e8b:	79 02                	jns    c0010e8f <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0010e8d:	31 c0                	xor    eax,eax
c0010e8f:	c1 e0 02             	shl    eax,0x2
c0010e92:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0010e96:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e9a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0010e9e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0010ea2:	39 d8                	cmp    eax,ebx
c0010ea4:	7e 49                	jle    c0010eef <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0010ea6:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0010eac:	7c 41                	jl     c0010eef <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0010eae:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0010eb2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0010eb6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0010eba:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0010ebe:	39 f9                	cmp    ecx,edi
c0010ec0:	7e 22                	jle    c0010ee4 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0010ec2:	83 c5 04             	add    ebp,0x4
c0010ec5:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0010ecb:	7c 14                	jl     c0010ee1 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0010ecd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0010ecf:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0010ed2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010ed6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010eda:	56                   	push   esi
c0010edb:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0010ede:	83 c4 10             	add    esp,0x10
c0010ee1:	47                   	inc    edi
c0010ee2:	eb d2                	jmp    c0010eb6 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0010ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ee8:	43                   	inc    ebx
c0010ee9:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0010eed:	eb ab                	jmp    c0010e9a <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0010eef:	83 c4 1c             	add    esp,0x1c
c0010ef2:	5b                   	pop    ebx
c0010ef3:	5e                   	pop    esi
c0010ef4:	5f                   	pop    edi
c0010ef5:	5d                   	pop    ebp
c0010ef6:	c3                   	ret    
c0010ef7:	90                   	nop

c0010ef8 <Video::clearScreen(unsigned int)>:
c0010ef8:	57                   	push   edi
c0010ef9:	56                   	push   esi
c0010efa:	53                   	push   ebx
c0010efb:	31 db                	xor    ebx,ebx
c0010efd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f01:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0010f07:	7e 1f                	jle    c0010f28 <Video::clearScreen(unsigned int)+0x30>
c0010f09:	31 ff                	xor    edi,edi
c0010f0b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0010f11:	7e 12                	jle    c0010f25 <Video::clearScreen(unsigned int)+0x2d>
c0010f13:	8b 06                	mov    eax,DWORD PTR [esi]
c0010f15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010f19:	53                   	push   ebx
c0010f1a:	57                   	push   edi
c0010f1b:	47                   	inc    edi
c0010f1c:	56                   	push   esi
c0010f1d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010f20:	83 c4 10             	add    esp,0x10
c0010f23:	eb e6                	jmp    c0010f0b <Video::clearScreen(unsigned int)+0x13>
c0010f25:	43                   	inc    ebx
c0010f26:	eb d9                	jmp    c0010f01 <Video::clearScreen(unsigned int)+0x9>
c0010f28:	5b                   	pop    ebx
c0010f29:	5e                   	pop    esi
c0010f2a:	5f                   	pop    edi
c0010f2b:	c3                   	ret    

c0010f2c <Video::putpixel(int, int, unsigned int)>:
c0010f2c:	c7 44 24 04 30 38 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023830
c0010f34:	e9 c6 33 00 00       	jmp    c00142ff <Krnl::panic(char const*)>
c0010f39:	90                   	nop

c0010f3a <Video::Video(char const*)>:
c0010f3a:	83 ec 0c             	sub    esp,0xc
c0010f3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f41:	83 ec 08             	sub    esp,0x8
c0010f44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f48:	50                   	push   eax
c0010f49:	e8 5c d1 ff ff       	call   c000e0aa <Device::Device(char const*)>
c0010f4e:	83 c4 10             	add    esp,0x10
c0010f51:	ba a0 38 02 c0       	mov    edx,0xc00238a0
c0010f56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f5a:	89 10                	mov    DWORD PTR [eax],edx
c0010f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f60:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0010f6a:	90                   	nop
c0010f6b:	83 c4 0c             	add    esp,0xc
c0010f6e:	c3                   	ret    
c0010f6f:	90                   	nop

c0010f70 <Video::~Video()>:
c0010f70:	83 ec 0c             	sub    esp,0xc
c0010f73:	ba a0 38 02 c0       	mov    edx,0xc00238a0
c0010f78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f7c:	89 10                	mov    DWORD PTR [eax],edx
c0010f7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f82:	83 ec 0c             	sub    esp,0xc
c0010f85:	50                   	push   eax
c0010f86:	e8 e9 cd ff ff       	call   c000dd74 <Device::~Device()>
c0010f8b:	83 c4 10             	add    esp,0x10
c0010f8e:	90                   	nop
c0010f8f:	83 c4 0c             	add    esp,0xc
c0010f92:	c3                   	ret    
c0010f93:	90                   	nop

c0010f94 <Video::~Video()>:
c0010f94:	83 ec 0c             	sub    esp,0xc
c0010f97:	83 ec 0c             	sub    esp,0xc
c0010f9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f9e:	e8 cd ff ff ff       	call   c0010f70 <Video::~Video()>
c0010fa3:	83 c4 10             	add    esp,0x10
c0010fa6:	83 ec 08             	sub    esp,0x8
c0010fa9:	68 64 01 00 00       	push   0x164
c0010fae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fb2:	e8 c7 b9 ff ff       	call   c000c97e <operator delete(void*, unsigned long)>
c0010fb7:	83 c4 10             	add    esp,0x10
c0010fba:	83 c4 0c             	add    esp,0xc
c0010fbd:	c3                   	ret    

c0010fbe <Video::isMonochrome()>:
c0010fbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fc2:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0010fc8:	c3                   	ret    
c0010fc9:	90                   	nop

c0010fca <Video::getWidth()>:
c0010fca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fce:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010fd4:	c3                   	ret    
c0010fd5:	90                   	nop

c0010fd6 <Video::getHeight()>:
c0010fd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fda:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010fe0:	c3                   	ret    
c0010fe1:	90                   	nop

c0010fe2 <Video::drawCursor(int, int, unsigned char*, int)>:
c0010fe2:	55                   	push   ebp
c0010fe3:	57                   	push   edi
c0010fe4:	56                   	push   esi
c0010fe5:	53                   	push   ebx
c0010fe6:	83 ec 2c             	sub    esp,0x2c
c0010fe9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0010fed:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010ff1:	83 f8 01             	cmp    eax,0x1
c0010ff4:	19 c9                	sbb    ecx,ecx
c0010ff6:	31 db                	xor    ebx,ebx
c0010ff8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0010ffc:	89 cd                	mov    ebp,ecx
c0010ffe:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0011006:	f7 d5                	not    ebp
c0011008:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001100e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011012:	01 d8                	add    eax,ebx
c0011014:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011018:	56                   	push   esi
c0011019:	e8 b8 ff ff ff       	call   c0010fd6 <Video::getHeight()>
c001101e:	59                   	pop    ecx
c001101f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0011023:	7e 70                	jle    c0011095 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0011025:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011029:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001102d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0011030:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011034:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011038:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001103f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011043:	89 f8                	mov    eax,edi
c0011045:	83 c0 20             	add    eax,0x20
c0011048:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001104c:	56                   	push   esi
c001104d:	e8 78 ff ff ff       	call   c0010fca <Video::getWidth()>
c0011052:	5a                   	pop    edx
c0011053:	39 c7                	cmp    edi,eax
c0011055:	7d 34                	jge    c001108b <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0011057:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001105c:	74 05                	je     c0011063 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001105e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011060:	55                   	push   ebp
c0011061:	eb 0d                	jmp    c0011070 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0011063:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0011068:	74 12                	je     c001107c <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001106a:	8b 06                	mov    eax,DWORD PTR [esi]
c001106c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011070:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011074:	57                   	push   edi
c0011075:	56                   	push   esi
c0011076:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011079:	83 c4 10             	add    esp,0x10
c001107c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0011080:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0011084:	47                   	inc    edi
c0011085:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011089:	75 c1                	jne    c001104c <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001108b:	43                   	inc    ebx
c001108c:	83 fb 20             	cmp    ebx,0x20
c001108f:	0f 85 79 ff ff ff    	jne    c001100e <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0011095:	83 c4 2c             	add    esp,0x2c
c0011098:	5b                   	pop    ebx
c0011099:	5e                   	pop    esi
c001109a:	5f                   	pop    edi
c001109b:	5d                   	pop    ebp
c001109c:	c3                   	ret    
c001109d:	90                   	nop

c001109e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001109e:	55                   	push   ebp
c001109f:	57                   	push   edi
c00110a0:	56                   	push   esi
c00110a1:	53                   	push   ebx
c00110a2:	83 ec 28             	sub    esp,0x28
c00110a5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00110a9:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00110ad:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c00110b1:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00110b5:	c1 e6 08             	shl    esi,0x8
c00110b8:	01 c6                	add    esi,eax
c00110ba:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00110be:	c1 e0 08             	shl    eax,0x8
c00110c1:	01 d0                	add    eax,edx
c00110c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00110c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00110cb:	0f af c6             	imul   eax,esi
c00110ce:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00110d5:	50                   	push   eax
c00110d6:	e8 e8 88 ff ff       	call   c00099c3 <malloc>
c00110db:	83 c4 10             	add    esp,0x10
c00110de:	89 c7                	mov    edi,eax
c00110e0:	85 c0                	test   eax,eax
c00110e2:	75 10                	jne    c00110f4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c00110e4:	83 ec 0c             	sub    esp,0xc
c00110e7:	68 51 38 02 c0       	push   0xc0023851
c00110ec:	e8 0e 32 00 00       	call   c00142ff <Krnl::panic(char const*)>
c00110f1:	83 c4 10             	add    esp,0x10
c00110f4:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00110f7:	ba 12 00 00 00       	mov    edx,0x12
c00110fc:	84 c0                	test   al,al
c00110fe:	74 11                	je     c0011111 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0011100:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0011104:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0011108:	c1 fa 03             	sar    edx,0x3
c001110b:	0f af d1             	imul   edx,ecx
c001110e:	83 c2 12             	add    edx,0x12
c0011111:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0011115:	74 04                	je     c001111b <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0011117:	85 f6                	test   esi,esi
c0011119:	75 12                	jne    c001112d <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c001111b:	83 ec 0c             	sub    esp,0xc
c001111e:	68 61 38 02 c0       	push   0xc0023861
c0011123:	e8 37 b9 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0011128:	e9 b8 00 00 00       	jmp    c00111e5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c001112d:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0011131:	80 f9 02             	cmp    cl,0x2
c0011134:	0f 85 96 00 00 00    	jne    c00111d0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c001113a:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001113f:	75 0e                	jne    c001114f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011141:	84 c0                	test   al,al
c0011143:	75 0a                	jne    c001114f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011145:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0011148:	83 e8 18             	sub    eax,0x18
c001114b:	a8 f7                	test   al,0xf7
c001114d:	74 0a                	je     c0011159 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c001114f:	83 ec 0c             	sub    esp,0xc
c0011152:	68 76 38 02 c0       	push   0xc0023876
c0011157:	eb 7f                	jmp    c00111d8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0011159:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011161:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011169:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c001116d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011175:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0011179:	75 0c                	jne    c0011187 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001117b:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0011180:	c1 e0 18             	shl    eax,0x18
c0011183:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011187:	45                   	inc    ebp
c0011188:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c001118d:	c1 e1 10             	shl    ecx,0x10
c0011190:	89 c8                	mov    eax,ecx
c0011192:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0011197:	c1 e1 08             	shl    ecx,0x8
c001119a:	09 c1                	or     ecx,eax
c001119c:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c00111a0:	09 c1                	or     ecx,eax
c00111a2:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c00111a6:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c00111aa:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00111ae:	c1 f8 03             	sar    eax,0x3
c00111b1:	01 c2                	add    edx,eax
c00111b3:	89 e8                	mov    eax,ebp
c00111b5:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00111b9:	39 c6                	cmp    esi,eax
c00111bb:	7f b0                	jg     c001116d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c00111bd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00111c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00111c5:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00111c8:	7e 22                	jle    c00111ec <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c00111ca:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c00111ce:	eb 99                	jmp    c0011169 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00111d0:	50                   	push   eax
c00111d1:	50                   	push   eax
c00111d2:	51                   	push   ecx
c00111d3:	68 84 38 02 c0       	push   0xc0023884
c00111d8:	e8 82 b8 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c00111dd:	89 3c 24             	mov    DWORD PTR [esp],edi
c00111e0:	e8 ee 87 ff ff       	call   c00099d3 <free>
c00111e5:	83 c4 10             	add    esp,0x10
c00111e8:	31 ff                	xor    edi,edi
c00111ea:	eb 0f                	jmp    c00111fb <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c00111ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00111f0:	89 30                	mov    DWORD PTR [eax],esi
c00111f2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00111f6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00111f9:	89 30                	mov    DWORD PTR [eax],esi
c00111fb:	83 c4 1c             	add    esp,0x1c
c00111fe:	89 f8                	mov    eax,edi
c0011200:	5b                   	pop    ebx
c0011201:	5e                   	pop    esi
c0011202:	5f                   	pop    edi
c0011203:	5d                   	pop    ebp
c0011204:	c3                   	ret    
c0011205:	90                   	nop

c0011206 <Video::putTGA(int, int, unsigned char*, int)>:
c0011206:	55                   	push   ebp
c0011207:	57                   	push   edi
c0011208:	56                   	push   esi
c0011209:	53                   	push   ebx
c001120a:	83 ec 28             	sub    esp,0x28
c001120d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0011211:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011215:	50                   	push   eax
c0011216:	8d 44 24 18          	lea    eax,[esp+0x18]
c001121a:	50                   	push   eax
c001121b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001121f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011223:	56                   	push   esi
c0011224:	e8 75 fe ff ff       	call   c001109e <Video::tgaParse(unsigned char*, int, int*, int*)>
c0011229:	83 c4 20             	add    esp,0x20
c001122c:	85 c0                	test   eax,eax
c001122e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011232:	74 35                	je     c0011269 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011234:	89 c7                	mov    edi,eax
c0011236:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001123a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001123e:	39 d8                	cmp    eax,ebx
c0011240:	7e 27                	jle    c0011269 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011242:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011246:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001124a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001124e:	39 e8                	cmp    eax,ebp
c0011250:	7e 14                	jle    c0011266 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0011252:	8b 06                	mov    eax,DWORD PTR [esi]
c0011254:	83 c7 04             	add    edi,0x4
c0011257:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001125a:	53                   	push   ebx
c001125b:	55                   	push   ebp
c001125c:	45                   	inc    ebp
c001125d:	56                   	push   esi
c001125e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011261:	83 c4 10             	add    esp,0x10
c0011264:	eb e0                	jmp    c0011246 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0011266:	43                   	inc    ebx
c0011267:	eb cd                	jmp    c0011236 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0011269:	83 c4 1c             	add    esp,0x1c
c001126c:	5b                   	pop    ebx
c001126d:	5e                   	pop    esi
c001126e:	5f                   	pop    edi
c001126f:	5d                   	pop    ebp
c0011270:	c3                   	ret    
c0011271:	66 90                	xchg   ax,ax
c0011273:	90                   	nop

c0011274 <ACPI::close(int, int, void*)>:
c0011274:	83 ec 1c             	sub    esp,0x1c
c0011277:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001127f:	74 0b                	je     c001128c <ACPI::close(int, int, void*)+0x18>
c0011281:	b8 00 00 00 00       	mov    eax,0x0
c0011286:	e9 99 00 00 00       	jmp    c0011324 <ACPI::close(int, int, void*)+0xb0>
c001128b:	90                   	nop
c001128c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0011291:	75 29                	jne    c00112bc <ACPI::close(int, int, void*)+0x48>
c0011293:	a1 a8 67 02 c0       	mov    eax,ds:0xc00267a8
c0011298:	85 c0                	test   eax,eax
c001129a:	74 08                	je     c00112a4 <ACPI::close(int, int, void*)+0x30>
c001129c:	a1 a8 67 02 c0       	mov    eax,ds:0xc00267a8
c00112a1:	ff d0                	call   eax
c00112a3:	90                   	nop
c00112a4:	83 ec 0c             	sub    esp,0xc
c00112a7:	68 e0 38 02 c0       	push   0xc00238e0
c00112ac:	e8 4e 30 00 00       	call   c00142ff <Krnl::panic(char const*)>
c00112b1:	83 c4 10             	add    esp,0x10
c00112b4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00112b9:	eb 69                	jmp    c0011324 <ACPI::close(int, int, void*)+0xb0>
c00112bb:	90                   	nop
c00112bc:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00112c1:	75 59                	jne    c001131c <ACPI::close(int, int, void*)+0xa8>
c00112c3:	a1 a4 67 02 c0       	mov    eax,ds:0xc00267a4
c00112c8:	85 c0                	test   eax,eax
c00112ca:	74 08                	je     c00112d4 <ACPI::close(int, int, void*)+0x60>
c00112cc:	a1 a4 67 02 c0       	mov    eax,ds:0xc00267a4
c00112d1:	ff d0                	call   eax
c00112d3:	90                   	nop
c00112d4:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00112d9:	8d 76 00             	lea    esi,[esi+0x0]
c00112dc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00112e1:	83 e0 02             	and    eax,0x2
c00112e4:	74 1e                	je     c0011304 <ACPI::close(int, int, void*)+0x90>
c00112e6:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00112ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112f1:	89 c2                	mov    edx,eax
c00112f3:	ec                   	in     al,dx
c00112f4:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00112f8:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00112fc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011300:	eb da                	jmp    c00112dc <ACPI::close(int, int, void*)+0x68>
c0011302:	66 90                	xchg   ax,ax
c0011304:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001130b:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0011310:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0011314:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011318:	ee                   	out    dx,al
c0011319:	8d 76 00             	lea    esi,[esi+0x0]
c001131c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011321:	8d 76 00             	lea    esi,[esi+0x0]
c0011324:	83 c4 1c             	add    esp,0x1c
c0011327:	c3                   	ret    

c0011328 <findRSDP()>:
c0011328:	83 ec 1c             	sub    esp,0x1c
c001132b:	83 ec 0c             	sub    esp,0xc
c001132e:	68 bb 39 02 c0       	push   0xc00239bb
c0011333:	e8 e5 86 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011338:	83 c4 10             	add    esp,0x10
c001133b:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0011340:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011346:	83 e0 04             	and    eax,0x4
c0011349:	84 c0                	test   al,al
c001134b:	75 0b                	jne    c0011358 <findRSDP()+0x30>
c001134d:	b8 00 00 00 00       	mov    eax,0x0
c0011352:	e9 a1 00 00 00       	jmp    c00113f8 <findRSDP()+0xd0>
c0011357:	90                   	nop
c0011358:	a1 98 61 02 c0       	mov    eax,ds:0xc0026198
c001135d:	3d ff 07 00 00       	cmp    eax,0x7ff
c0011362:	7f 1c                	jg     c0011380 <findRSDP()+0x58>
c0011364:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0011369:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001136f:	83 e2 fb             	and    edx,0xfffffffb
c0011372:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011378:	b8 00 00 00 00       	mov    eax,0x0
c001137d:	eb 79                	jmp    c00113f8 <findRSDP()+0xd0>
c001137f:	90                   	nop
c0011380:	83 ec 0c             	sub    esp,0xc
c0011383:	68 cb 39 02 c0       	push   0xc00239cb
c0011388:	e8 90 86 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001138d:	83 c4 10             	add    esp,0x10
c0011390:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0011398:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00113a0:	77 3e                	ja     c00113e0 <findRSDP()+0xb8>
c00113a2:	83 ec 04             	sub    esp,0x4
c00113a5:	6a 08                	push   0x8
c00113a7:	68 e4 39 02 c0       	push   0xc00239e4
c00113ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113b0:	e8 cb f1 fe ff       	call   c0000580 <memcmp>
c00113b5:	83 c4 10             	add    esp,0x10
c00113b8:	85 c0                	test   eax,eax
c00113ba:	0f 94 c0             	sete   al
c00113bd:	84 c0                	test   al,al
c00113bf:	74 17                	je     c00113d8 <findRSDP()+0xb0>
c00113c1:	83 ec 0c             	sub    esp,0xc
c00113c4:	68 ed 39 02 c0       	push   0xc00239ed
c00113c9:	e8 4f 86 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00113ce:	83 c4 10             	add    esp,0x10
c00113d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00113d5:	eb 21                	jmp    c00113f8 <findRSDP()+0xd0>
c00113d7:	90                   	nop
c00113d8:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00113dd:	eb b9                	jmp    c0011398 <findRSDP()+0x70>
c00113df:	90                   	nop
c00113e0:	83 ec 0c             	sub    esp,0xc
c00113e3:	68 fb 39 02 c0       	push   0xc00239fb
c00113e8:	e8 30 86 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00113ed:	83 c4 10             	add    esp,0x10
c00113f0:	b8 00 00 00 00       	mov    eax,0x0
c00113f5:	8d 76 00             	lea    esi,[esi+0x0]
c00113f8:	83 c4 1c             	add    esp,0x1c
c00113fb:	c3                   	ret    

c00113fc <loadACPITables(unsigned char*)>:
c00113fc:	57                   	push   edi
c00113fd:	56                   	push   esi
c00113fe:	53                   	push   ebx
c00113ff:	83 ec 60             	sub    esp,0x60
c0011402:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0011407:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001140d:	83 e0 04             	and    eax,0x4
c0011410:	84 c0                	test   al,al
c0011412:	0f 84 3c 02 00 00    	je     c0011654 <loadACPITables(unsigned char*)+0x258>
c0011418:	a0 c0 69 02 c0       	mov    al,ds:0xc00269c0
c001141d:	84 c0                	test   al,al
c001141f:	74 77                	je     c0011498 <loadACPITables(unsigned char*)+0x9c>
c0011421:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011425:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0011429:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001142d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011430:	83 e8 24             	sub    eax,0x24
c0011433:	c1 e8 03             	shr    eax,0x3
c0011436:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001143a:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0011442:	66 90                	xchg   ax,ax
c0011444:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011448:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001144c:	0f 8d b6 00 00 00    	jge    c0011508 <loadACPITables(unsigned char*)+0x10c>
c0011452:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011456:	83 c0 24             	add    eax,0x24
c0011459:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001145d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011461:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011465:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011469:	c1 e0 03             	shl    eax,0x3
c001146c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0011470:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011474:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011477:	8b 00                	mov    eax,DWORD PTR [eax]
c0011479:	89 c1                	mov    ecx,eax
c001147b:	a1 ac 67 02 c0       	mov    eax,ds:0xc00267ac
c0011480:	8d 50 01             	lea    edx,[eax+0x1]
c0011483:	89 15 ac 67 02 c0    	mov    DWORD PTR ds:0xc00267ac,edx
c0011489:	89 ca                	mov    edx,ecx
c001148b:	89 14 c5 c4 67 02 c0 	mov    DWORD PTR [eax*8-0x3ffd983c],edx
c0011492:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0011496:	eb ac                	jmp    c0011444 <loadACPITables(unsigned char*)+0x48>
c0011498:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001149c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00114a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00114a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114a7:	83 e8 24             	sub    eax,0x24
c00114aa:	c1 e8 02             	shr    eax,0x2
c00114ad:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00114b1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00114b9:	8d 76 00             	lea    esi,[esi+0x0]
c00114bc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00114c0:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00114c4:	7d 42                	jge    c0011508 <loadACPITables(unsigned char*)+0x10c>
c00114c6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00114ca:	83 c0 24             	add    eax,0x24
c00114cd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00114d1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00114d5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00114d9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00114dd:	c1 e0 02             	shl    eax,0x2
c00114e0:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00114e4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00114e8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00114ea:	a1 ac 67 02 c0       	mov    eax,ds:0xc00267ac
c00114ef:	8d 50 01             	lea    edx,[eax+0x1]
c00114f2:	89 15 ac 67 02 c0    	mov    DWORD PTR ds:0xc00267ac,edx
c00114f8:	89 ca                	mov    edx,ecx
c00114fa:	89 14 c5 c4 67 02 c0 	mov    DWORD PTR [eax*8-0x3ffd983c],edx
c0011501:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0011505:	eb b5                	jmp    c00114bc <loadACPITables(unsigned char*)+0xc0>
c0011507:	90                   	nop
c0011508:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0011510:	a1 ac 67 02 c0       	mov    eax,ds:0xc00267ac
c0011515:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0011519:	0f 8d 39 01 00 00    	jge    c0011658 <loadACPITables(unsigned char*)+0x25c>
c001151f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011523:	8b 04 c5 c4 67 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd983c]
c001152a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001152e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011532:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011536:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001153a:	25 ff 0f 00 00       	and    eax,0xfff
c001153f:	89 c6                	mov    esi,eax
c0011541:	8b 1d 90 62 02 c0    	mov    ebx,DWORD PTR ds:0xc0026290
c0011547:	83 ec 0c             	sub    esp,0xc
c001154a:	6a 01                	push   0x1
c001154c:	e8 e8 a1 ff ff       	call   c000b739 <Virt::allocateKernelVirtualPages(int)>
c0011551:	83 c4 10             	add    esp,0x10
c0011554:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011558:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001155e:	83 ec 0c             	sub    esp,0xc
c0011561:	6a 01                	push   0x1
c0011563:	6a 01                	push   0x1
c0011565:	50                   	push   eax
c0011566:	52                   	push   edx
c0011567:	53                   	push   ebx
c0011568:	e8 69 ab ff ff       	call   c000c0d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001156d:	83 c4 20             	add    esp,0x20
c0011570:	09 f0                	or     eax,esi
c0011572:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011576:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001157a:	c1 e0 03             	shl    eax,0x3
c001157d:	05 c0 67 02 c0       	add    eax,0xc00267c0
c0011582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011586:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001158a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001158e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0011596:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001159a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001159e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00115a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00115a6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00115aa:	89 c6                	mov    esi,eax
c00115ac:	89 d7                	mov    edi,edx
c00115ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00115b0:	89 c8                	mov    eax,ecx
c00115b2:	89 fa                	mov    edx,edi
c00115b4:	89 f3                	mov    ebx,esi
c00115b6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00115ba:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00115be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00115c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00115cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00115d1:	05 00 10 00 00       	add    eax,0x1000
c00115d6:	c1 e8 0c             	shr    eax,0xc
c00115d9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00115dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115e1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00115e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115e9:	25 ff 0f 00 00       	and    eax,0xfff
c00115ee:	89 c6                	mov    esi,eax
c00115f0:	8b 1d 90 62 02 c0    	mov    ebx,DWORD PTR ds:0xc0026290
c00115f6:	83 ec 0c             	sub    esp,0xc
c00115f9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00115fd:	e8 37 a1 ff ff       	call   c000b739 <Virt::allocateKernelVirtualPages(int)>
c0011602:	83 c4 10             	add    esp,0x10
c0011605:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011609:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001160f:	83 ec 0c             	sub    esp,0xc
c0011612:	6a 01                	push   0x1
c0011614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011618:	50                   	push   eax
c0011619:	52                   	push   edx
c001161a:	53                   	push   ebx
c001161b:	e8 b6 aa ff ff       	call   c000c0d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011620:	83 c4 20             	add    esp,0x20
c0011623:	09 f0                	or     eax,esi
c0011625:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011629:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001162d:	83 ec 0c             	sub    esp,0xc
c0011630:	50                   	push   eax
c0011631:	e8 33 a4 ff ff       	call   c000ba69 <Virt::freeKernelVirtualPages(unsigned long)>
c0011636:	83 c4 10             	add    esp,0x10
c0011639:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001163d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011641:	89 14 c5 c4 67 02 c0 	mov    DWORD PTR [eax*8-0x3ffd983c],edx
c0011648:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c001164c:	e9 bf fe ff ff       	jmp    c0011510 <loadACPITables(unsigned char*)+0x114>
c0011651:	8d 76 00             	lea    esi,[esi+0x0]
c0011654:	90                   	nop
c0011655:	8d 76 00             	lea    esi,[esi+0x0]
c0011658:	83 c4 60             	add    esp,0x60
c001165b:	5b                   	pop    ebx
c001165c:	5e                   	pop    esi
c001165d:	5f                   	pop    edi
c001165e:	c3                   	ret    
c001165f:	90                   	nop

c0011660 <findRSDT(unsigned char*)>:
c0011660:	57                   	push   edi
c0011661:	56                   	push   esi
c0011662:	53                   	push   ebx
c0011663:	83 ec 50             	sub    esp,0x50
c0011666:	83 ec 0c             	sub    esp,0xc
c0011669:	68 0f 3a 02 c0       	push   0xc0023a0f
c001166e:	e8 aa 83 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011673:	83 c4 10             	add    esp,0x10
c0011676:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001167b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011681:	83 e0 04             	and    eax,0x4
c0011684:	84 c0                	test   al,al
c0011686:	75 0c                	jne    c0011694 <findRSDT(unsigned char*)+0x34>
c0011688:	b8 00 00 00 00       	mov    eax,0x0
c001168d:	e9 86 01 00 00       	jmp    c0011818 <findRSDT(unsigned char*)+0x1b8>
c0011692:	66 90                	xchg   ax,ax
c0011694:	83 ec 0c             	sub    esp,0xc
c0011697:	68 21 3a 02 c0       	push   0xc0023a21
c001169c:	e8 7c 83 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00116a1:	83 c4 10             	add    esp,0x10
c00116a4:	89 e0                	mov    eax,esp
c00116a6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00116aa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00116ae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00116b2:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c00116ba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00116be:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00116c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00116c6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00116ca:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00116ce:	89 c6                	mov    esi,eax
c00116d0:	89 d7                	mov    edi,edx
c00116d2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00116d4:	89 c8                	mov    eax,ecx
c00116d6:	89 fa                	mov    edx,edi
c00116d8:	89 f3                	mov    ebx,esi
c00116da:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00116de:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00116e2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00116e6:	83 ec 0c             	sub    esp,0xc
c00116e9:	68 33 3a 02 c0       	push   0xc0023a33
c00116ee:	e8 2a 83 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00116f3:	83 c4 10             	add    esp,0x10
c00116f6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00116fa:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c00116fe:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0011706:	83 ec 0c             	sub    esp,0xc
c0011709:	68 45 3a 02 c0       	push   0xc0023a45
c001170e:	e8 0a 83 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011713:	83 c4 10             	add    esp,0x10
c0011716:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001171a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001171e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011726:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001172a:	83 ec 04             	sub    esp,0x4
c001172d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011731:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011735:	68 04 39 02 c0       	push   0xc0023904
c001173a:	e8 20 b3 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001173f:	83 c4 10             	add    esp,0x10
c0011742:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011746:	25 ff 0f 00 00       	and    eax,0xfff
c001174b:	89 c6                	mov    esi,eax
c001174d:	8b 1d 90 62 02 c0    	mov    ebx,DWORD PTR ds:0xc0026290
c0011753:	83 ec 0c             	sub    esp,0xc
c0011756:	6a 02                	push   0x2
c0011758:	e8 dc 9f ff ff       	call   c000b739 <Virt::allocateKernelVirtualPages(int)>
c001175d:	83 c4 10             	add    esp,0x10
c0011760:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011764:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001176a:	83 ec 0c             	sub    esp,0xc
c001176d:	6a 01                	push   0x1
c001176f:	6a 02                	push   0x2
c0011771:	50                   	push   eax
c0011772:	52                   	push   edx
c0011773:	53                   	push   ebx
c0011774:	e8 5d a9 ff ff       	call   c000c0d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011779:	83 c4 20             	add    esp,0x20
c001177c:	09 f0                	or     eax,esi
c001177e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011782:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011786:	25 ff 0f 00 00       	and    eax,0xfff
c001178b:	89 c6                	mov    esi,eax
c001178d:	8b 1d 90 62 02 c0    	mov    ebx,DWORD PTR ds:0xc0026290
c0011793:	83 ec 0c             	sub    esp,0xc
c0011796:	6a 02                	push   0x2
c0011798:	e8 9c 9f ff ff       	call   c000b739 <Virt::allocateKernelVirtualPages(int)>
c001179d:	83 c4 10             	add    esp,0x10
c00117a0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00117a4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00117aa:	83 ec 0c             	sub    esp,0xc
c00117ad:	6a 01                	push   0x1
c00117af:	6a 02                	push   0x2
c00117b1:	50                   	push   eax
c00117b2:	52                   	push   edx
c00117b3:	53                   	push   ebx
c00117b4:	e8 1d a9 ff ff       	call   c000c0d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00117b9:	83 c4 20             	add    esp,0x20
c00117bc:	09 f0                	or     eax,esi
c00117be:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00117c2:	83 ec 04             	sub    esp,0x4
c00117c5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00117c9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00117cd:	68 24 39 02 c0       	push   0xc0023924
c00117d2:	e8 88 b2 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c00117d7:	83 c4 10             	add    esp,0x10
c00117da:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00117df:	75 13                	jne    c00117f4 <findRSDT(unsigned char*)+0x194>
c00117e1:	c6 05 c0 69 02 c0 00 	mov    BYTE PTR ds:0xc00269c0,0x0
c00117e8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00117ec:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00117f0:	eb 22                	jmp    c0011814 <findRSDT(unsigned char*)+0x1b4>
c00117f2:	66 90                	xchg   ax,ax
c00117f4:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c00117f9:	75 11                	jne    c001180c <findRSDT(unsigned char*)+0x1ac>
c00117fb:	c6 05 c0 69 02 c0 01 	mov    BYTE PTR ds:0xc00269c0,0x1
c0011802:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011806:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001180a:	eb 08                	jmp    c0011814 <findRSDT(unsigned char*)+0x1b4>
c001180c:	b8 00 00 00 00       	mov    eax,0x0
c0011811:	eb 05                	jmp    c0011818 <findRSDT(unsigned char*)+0x1b8>
c0011813:	90                   	nop
c0011814:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011818:	83 c4 50             	add    esp,0x50
c001181b:	5b                   	pop    ebx
c001181c:	5e                   	pop    esi
c001181d:	5f                   	pop    edi
c001181e:	c3                   	ret    
c001181f:	90                   	nop

c0011820 <findDataTable(unsigned char*, char*)>:
c0011820:	83 ec 1c             	sub    esp,0x1c
c0011823:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0011828:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001182e:	83 e0 04             	and    eax,0x4
c0011831:	84 c0                	test   al,al
c0011833:	75 07                	jne    c001183c <findDataTable(unsigned char*, char*)+0x1c>
c0011835:	b8 00 00 00 00       	mov    eax,0x0
c001183a:	eb 58                	jmp    c0011894 <findDataTable(unsigned char*, char*)+0x74>
c001183c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011844:	a1 ac 67 02 c0       	mov    eax,ds:0xc00267ac
c0011849:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001184d:	7d 3d                	jge    c001188c <findDataTable(unsigned char*, char*)+0x6c>
c001184f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011853:	c1 e0 03             	shl    eax,0x3
c0011856:	05 c0 67 02 c0       	add    eax,0xc00267c0
c001185b:	83 ec 04             	sub    esp,0x4
c001185e:	6a 04                	push   0x4
c0011860:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011864:	50                   	push   eax
c0011865:	e8 16 ed fe ff       	call   c0000580 <memcmp>
c001186a:	83 c4 10             	add    esp,0x10
c001186d:	85 c0                	test   eax,eax
c001186f:	0f 94 c0             	sete   al
c0011872:	84 c0                	test   al,al
c0011874:	74 0e                	je     c0011884 <findDataTable(unsigned char*, char*)+0x64>
c0011876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001187a:	8b 04 c5 c4 67 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd983c]
c0011881:	eb 11                	jmp    c0011894 <findDataTable(unsigned char*, char*)+0x74>
c0011883:	90                   	nop
c0011884:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011888:	eb ba                	jmp    c0011844 <findDataTable(unsigned char*, char*)+0x24>
c001188a:	66 90                	xchg   ax,ax
c001188c:	b8 00 00 00 00       	mov    eax,0x0
c0011891:	8d 76 00             	lea    esi,[esi+0x0]
c0011894:	83 c4 1c             	add    esp,0x1c
c0011897:	c3                   	ret    

c0011898 <scanMADT()>:
c0011898:	53                   	push   ebx
c0011899:	83 ec 38             	sub    esp,0x38
c001189c:	83 ec 0c             	sub    esp,0xc
c001189f:	68 57 3a 02 c0       	push   0xc0023a57
c00118a4:	e8 74 81 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00118a9:	83 c4 10             	add    esp,0x10
c00118ac:	a1 80 61 02 c0       	mov    eax,ds:0xc0026180
c00118b1:	25 00 04 00 00       	and    eax,0x400
c00118b6:	74 14                	je     c00118cc <scanMADT()+0x34>
c00118b8:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00118bd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00118c3:	83 e2 fb             	and    edx,0xfffffffb
c00118c6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00118cc:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00118d1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00118d7:	83 e0 04             	and    eax,0x4
c00118da:	84 c0                	test   al,al
c00118dc:	0f 84 82 04 00 00    	je     c0011d64 <scanMADT()+0x4cc>
c00118e2:	83 ec 0c             	sub    esp,0xc
c00118e5:	68 64 3a 02 c0       	push   0xc0023a64
c00118ea:	e8 2e 81 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00118ef:	83 c4 10             	add    esp,0x10
c00118f2:	e8 31 fa ff ff       	call   c0011328 <findRSDP()>
c00118f7:	a3 cc 69 02 c0       	mov    ds:0xc00269cc,eax
c00118fc:	a1 cc 69 02 c0       	mov    eax,ds:0xc00269cc
c0011901:	85 c0                	test   eax,eax
c0011903:	75 1b                	jne    c0011920 <scanMADT()+0x88>
c0011905:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001190a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011910:	83 e2 fb             	and    edx,0xfffffffb
c0011913:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011919:	e9 4e 04 00 00       	jmp    c0011d6c <scanMADT()+0x4d4>
c001191e:	66 90                	xchg   ax,ax
c0011920:	83 ec 0c             	sub    esp,0xc
c0011923:	68 76 3a 02 c0       	push   0xc0023a76
c0011928:	e8 f0 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001192d:	83 c4 10             	add    esp,0x10
c0011930:	a1 cc 69 02 c0       	mov    eax,ds:0xc00269cc
c0011935:	83 ec 0c             	sub    esp,0xc
c0011938:	50                   	push   eax
c0011939:	e8 22 fd ff ff       	call   c0011660 <findRSDT(unsigned char*)>
c001193e:	83 c4 10             	add    esp,0x10
c0011941:	a3 c8 69 02 c0       	mov    ds:0xc00269c8,eax
c0011946:	a1 c8 69 02 c0       	mov    eax,ds:0xc00269c8
c001194b:	85 c0                	test   eax,eax
c001194d:	75 19                	jne    c0011968 <scanMADT()+0xd0>
c001194f:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0011954:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001195a:	83 e2 fb             	and    edx,0xfffffffb
c001195d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011963:	e9 04 04 00 00       	jmp    c0011d6c <scanMADT()+0x4d4>
c0011968:	83 ec 0c             	sub    esp,0xc
c001196b:	68 86 3a 02 c0       	push   0xc0023a86
c0011970:	e8 a8 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011975:	83 c4 10             	add    esp,0x10
c0011978:	a1 c8 69 02 c0       	mov    eax,ds:0xc00269c8
c001197d:	83 ec 0c             	sub    esp,0xc
c0011980:	50                   	push   eax
c0011981:	e8 76 fa ff ff       	call   c00113fc <loadACPITables(unsigned char*)>
c0011986:	83 c4 10             	add    esp,0x10
c0011989:	a1 c8 69 02 c0       	mov    eax,ds:0xc00269c8
c001198e:	83 ec 08             	sub    esp,0x8
c0011991:	68 9e 3a 02 c0       	push   0xc0023a9e
c0011996:	50                   	push   eax
c0011997:	e8 84 fe ff ff       	call   c0011820 <findDataTable(unsigned char*, char*)>
c001199c:	83 c4 10             	add    esp,0x10
c001199f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00119a3:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00119a8:	75 1a                	jne    c00119c4 <scanMADT()+0x12c>
c00119aa:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00119af:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00119b5:	83 e2 fe             	and    edx,0xfffffffe
c00119b8:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00119be:	e9 a9 03 00 00       	jmp    c0011d6c <scanMADT()+0x4d4>
c00119c3:	90                   	nop
c00119c4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00119cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00119d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119d3:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00119d7:	0f 87 8f 03 00 00    	ja     c0011d6c <scanMADT()+0x4d4>
c00119dd:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00119e5:	0f 87 81 03 00 00    	ja     c0011d6c <scanMADT()+0x4d4>
c00119eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00119ef:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00119f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00119f7:	8d 50 01             	lea    edx,[eax+0x1]
c00119fa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00119fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011a02:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011a06:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0011a0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a0e:	8d 50 01             	lea    edx,[eax+0x1]
c0011a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011a15:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011a19:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011a1d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0011a21:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0011a26:	0f 86 3c 03 00 00    	jbe    c0011d68 <scanMADT()+0x4d0>
c0011a2c:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0011a31:	75 59                	jne    c0011a8c <scanMADT()+0x1f4>
c0011a33:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a37:	8d 50 01             	lea    edx,[eax+0x1]
c0011a3a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011a3e:	8a 15 c0 6b 02 c0    	mov    dl,BYTE PTR ds:0xc0026bc0
c0011a44:	0f b6 d2             	movzx  edx,dl
c0011a47:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011a4b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011a4f:	88 82 00 6c 02 c0    	mov    BYTE PTR [edx-0x3ffd9400],al
c0011a55:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a59:	8d 50 01             	lea    edx,[eax+0x1]
c0011a5c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011a60:	8a 15 c0 6b 02 c0    	mov    dl,BYTE PTR ds:0xc0026bc0
c0011a66:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011a69:	88 0d c0 6b 02 c0    	mov    BYTE PTR ds:0xc0026bc0,cl
c0011a6f:	0f b6 d2             	movzx  edx,dl
c0011a72:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011a76:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011a7a:	88 82 e0 6b 02 c0    	mov    BYTE PTR [edx-0x3ffd9420],al
c0011a80:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011a85:	e9 c6 02 00 00       	jmp    c0011d50 <scanMADT()+0x4b8>
c0011a8a:	66 90                	xchg   ax,ax
c0011a8c:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0011a91:	0f 85 15 01 00 00    	jne    c0011bac <scanMADT()+0x314>
c0011a97:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011a9b:	8d 50 01             	lea    edx,[eax+0x1]
c0011a9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011aa2:	8a 15 80 6a 02 c0    	mov    dl,BYTE PTR ds:0xc0026a80
c0011aa8:	0f b6 d2             	movzx  edx,dl
c0011aab:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011aaf:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011ab3:	88 82 a0 6a 02 c0    	mov    BYTE PTR [edx-0x3ffd9560],al
c0011ab9:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011abd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011ac1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ac5:	01 d0                	add    eax,edx
c0011ac7:	83 c0 2c             	add    eax,0x2c
c0011aca:	8a 00                	mov    al,BYTE PTR [eax]
c0011acc:	0f b6 d0             	movzx  edx,al
c0011acf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ad3:	8d 48 01             	lea    ecx,[eax+0x1]
c0011ad6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ada:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011ade:	0f b6 c0             	movzx  eax,al
c0011ae1:	c1 e0 08             	shl    eax,0x8
c0011ae4:	89 d1                	mov    ecx,edx
c0011ae6:	09 c1                	or     ecx,eax
c0011ae8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011aec:	8d 50 02             	lea    edx,[eax+0x2]
c0011aef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011af3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011af7:	0f b6 c0             	movzx  eax,al
c0011afa:	c1 e0 10             	shl    eax,0x10
c0011afd:	09 c1                	or     ecx,eax
c0011aff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b03:	8d 50 03             	lea    edx,[eax+0x3]
c0011b06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b0a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011b0e:	0f b6 c0             	movzx  eax,al
c0011b11:	c1 e0 18             	shl    eax,0x18
c0011b14:	09 c1                	or     ecx,eax
c0011b16:	89 ca                	mov    edx,ecx
c0011b18:	a0 80 6a 02 c0       	mov    al,ds:0xc0026a80
c0011b1d:	0f b6 c0             	movzx  eax,al
c0011b20:	89 14 85 c0 6a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9540],edx
c0011b27:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011b2c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011b30:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b34:	01 d0                	add    eax,edx
c0011b36:	83 c0 2c             	add    eax,0x2c
c0011b39:	8a 00                	mov    al,BYTE PTR [eax]
c0011b3b:	0f b6 d0             	movzx  edx,al
c0011b3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b42:	8d 48 01             	lea    ecx,[eax+0x1]
c0011b45:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b49:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011b4d:	0f b6 c0             	movzx  eax,al
c0011b50:	c1 e0 08             	shl    eax,0x8
c0011b53:	89 d1                	mov    ecx,edx
c0011b55:	09 c1                	or     ecx,eax
c0011b57:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b5b:	8d 50 02             	lea    edx,[eax+0x2]
c0011b5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b62:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011b66:	0f b6 c0             	movzx  eax,al
c0011b69:	c1 e0 10             	shl    eax,0x10
c0011b6c:	09 c1                	or     ecx,eax
c0011b6e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b72:	8d 50 03             	lea    edx,[eax+0x3]
c0011b75:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011b79:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011b7d:	0f b6 c0             	movzx  eax,al
c0011b80:	c1 e0 18             	shl    eax,0x18
c0011b83:	09 c1                	or     ecx,eax
c0011b85:	89 ca                	mov    edx,ecx
c0011b87:	a0 80 6a 02 c0       	mov    al,ds:0xc0026a80
c0011b8c:	0f b6 c0             	movzx  eax,al
c0011b8f:	89 14 85 40 6b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd94c0],edx
c0011b96:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011b9b:	a0 80 6a 02 c0       	mov    al,ds:0xc0026a80
c0011ba0:	40                   	inc    eax
c0011ba1:	a2 80 6a 02 c0       	mov    ds:0xc0026a80,al
c0011ba6:	e9 a5 01 00 00       	jmp    c0011d50 <scanMADT()+0x4b8>
c0011bab:	90                   	nop
c0011bac:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0011bb1:	0f 85 e9 00 00 00    	jne    c0011ca0 <scanMADT()+0x408>
c0011bb7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bbb:	8d 50 01             	lea    edx,[eax+0x1]
c0011bbe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011bc2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011bc6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011bca:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0011bce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bd2:	8d 50 01             	lea    edx,[eax+0x1]
c0011bd5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011bd9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011bdd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011be1:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0011be5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011be9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bed:	01 d0                	add    eax,edx
c0011bef:	83 c0 2c             	add    eax,0x2c
c0011bf2:	8a 00                	mov    al,BYTE PTR [eax]
c0011bf4:	0f b6 d0             	movzx  edx,al
c0011bf7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bfb:	8d 48 01             	lea    ecx,[eax+0x1]
c0011bfe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c02:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011c06:	0f b6 c0             	movzx  eax,al
c0011c09:	c1 e0 08             	shl    eax,0x8
c0011c0c:	89 d1                	mov    ecx,edx
c0011c0e:	09 c1                	or     ecx,eax
c0011c10:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c14:	8d 50 02             	lea    edx,[eax+0x2]
c0011c17:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c1b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011c1f:	0f b6 c0             	movzx  eax,al
c0011c22:	c1 e0 10             	shl    eax,0x10
c0011c25:	09 c1                	or     ecx,eax
c0011c27:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c2b:	8d 50 03             	lea    edx,[eax+0x3]
c0011c2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c32:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011c36:	0f b6 c0             	movzx  eax,al
c0011c39:	c1 e0 18             	shl    eax,0x18
c0011c3c:	09 c8                	or     eax,ecx
c0011c3e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c42:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011c47:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c4b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c4f:	01 d0                	add    eax,edx
c0011c51:	83 c0 2c             	add    eax,0x2c
c0011c54:	8a 00                	mov    al,BYTE PTR [eax]
c0011c56:	0f b6 c0             	movzx  eax,al
c0011c59:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011c5d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011c60:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c64:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0011c68:	0f b6 d2             	movzx  edx,dl
c0011c6b:	c1 e2 08             	shl    edx,0x8
c0011c6e:	09 d0                	or     eax,edx
c0011c70:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0011c75:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011c7a:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0011c7f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011c83:	88 90 60 58 02 c0    	mov    BYTE PTR [eax-0x3ffda7a0],dl
c0011c89:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0011c8e:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0011c93:	66 89 84 12 60 6a 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd95a0],ax
c0011c9b:	e9 b0 00 00 00       	jmp    c0011d50 <scanMADT()+0x4b8>
c0011ca0:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0011ca5:	0f 85 99 00 00 00    	jne    c0011d44 <scanMADT()+0x4ac>
c0011cab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011caf:	8d 50 01             	lea    edx,[eax+0x1]
c0011cb2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011cb6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011cba:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011cbe:	0f b6 c0             	movzx  eax,al
c0011cc1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011cc5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011cc9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ccd:	01 d0                	add    eax,edx
c0011ccf:	83 c0 2c             	add    eax,0x2c
c0011cd2:	8a 00                	mov    al,BYTE PTR [eax]
c0011cd4:	0f b6 d0             	movzx  edx,al
c0011cd7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cdb:	8d 48 01             	lea    ecx,[eax+0x1]
c0011cde:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ce2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011ce6:	0f b6 c0             	movzx  eax,al
c0011ce9:	c1 e0 08             	shl    eax,0x8
c0011cec:	09 d0                	or     eax,edx
c0011cee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011cf2:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011cf7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cfb:	8d 50 01             	lea    edx,[eax+0x1]
c0011cfe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011d02:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d06:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011d0a:	0f b6 c0             	movzx  eax,al
c0011d0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d15:	c1 e0 08             	shl    eax,0x8
c0011d18:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011d1c:	89 c1                	mov    ecx,eax
c0011d1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d22:	c1 e0 18             	shl    eax,0x18
c0011d25:	89 c3                	mov    ebx,eax
c0011d27:	a1 d0 69 02 c0       	mov    eax,ds:0xc00269d0
c0011d2c:	8d 50 01             	lea    edx,[eax+0x1]
c0011d2f:	89 15 d0 69 02 c0    	mov    DWORD PTR ds:0xc00269d0,edx
c0011d35:	09 d9                	or     ecx,ebx
c0011d37:	89 ca                	mov    edx,ecx
c0011d39:	89 14 85 e0 69 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9620],edx
c0011d40:	eb 0e                	jmp    c0011d50 <scanMADT()+0x4b8>
c0011d42:	66 90                	xchg   ax,ax
c0011d44:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0011d49:	75 05                	jne    c0011d50 <scanMADT()+0x4b8>
c0011d4b:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0011d50:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0011d55:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011d59:	01 d0                	add    eax,edx
c0011d5b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011d5f:	e9 68 fc ff ff       	jmp    c00119cc <scanMADT()+0x134>
c0011d64:	90                   	nop
c0011d65:	eb 05                	jmp    c0011d6c <scanMADT()+0x4d4>
c0011d67:	90                   	nop
c0011d68:	90                   	nop
c0011d69:	8d 76 00             	lea    esi,[esi+0x0]
c0011d6c:	83 c4 38             	add    esp,0x38
c0011d6f:	5b                   	pop    ebx
c0011d70:	c3                   	ret    
c0011d71:	90                   	nop
c0011d72:	66 90                	xchg   ax,ax

c0011d74 <ACPI::ACPI()>:
c0011d74:	83 ec 0c             	sub    esp,0xc
c0011d77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d7b:	83 ec 08             	sub    esp,0x8
c0011d7e:	68 a3 3a 02 c0       	push   0xc0023aa3
c0011d83:	50                   	push   eax
c0011d84:	e8 21 c3 ff ff       	call   c000e0aa <Device::Device(char const*)>
c0011d89:	83 c4 10             	add    esp,0x10
c0011d8c:	ba 2c 3c 02 c0       	mov    edx,0xc0023c2c
c0011d91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d95:	89 10                	mov    DWORD PTR [eax],edx
c0011d97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d9b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0011da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011da6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0011db0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011db4:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0011dbe:	83 ec 0c             	sub    esp,0xc
c0011dc1:	68 a8 3a 02 c0       	push   0xc0023aa8
c0011dc6:	e8 52 7c ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011dcb:	83 c4 10             	add    esp,0x10
c0011dce:	e8 c5 fa ff ff       	call   c0011898 <scanMADT()>
c0011dd3:	90                   	nop
c0011dd4:	83 c4 0c             	add    esp,0xc
c0011dd7:	c3                   	ret    

c0011dd8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0011dd8:	83 ec 2c             	sub    esp,0x2c
c0011ddb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011ddf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011de3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011de7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0011deb:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0011df0:	88 d0                	mov    al,dl
c0011df2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0011df6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011dfb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011e03:	90                   	nop
c0011e04:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e08:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011e0e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0011e12:	0f 8d 9c 00 00 00    	jge    c0011eb4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c0011e18:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e1c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011e20:	83 c2 2a             	add    edx,0x2a
c0011e23:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0011e27:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0011e2c:	75 7a                	jne    c0011ea8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0011e2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e32:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011e36:	83 c2 2a             	add    edx,0x2a
c0011e39:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0011e3d:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0011e41:	75 65                	jne    c0011ea8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0011e43:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011e48:	74 3a                	je     c0011e84 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c0011e4a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e4e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011e52:	83 c2 2a             	add    edx,0x2a
c0011e55:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0011e59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e5d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011e60:	39 c2                	cmp    edx,eax
c0011e62:	74 10                	je     c0011e74 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c0011e64:	83 ec 0c             	sub    esp,0xc
c0011e67:	68 44 39 02 c0       	push   0xc0023944
c0011e6c:	e8 8e 24 00 00       	call   c00142ff <Krnl::panic(char const*)>
c0011e71:	83 c4 10             	add    esp,0x10
c0011e74:	83 ec 0c             	sub    esp,0xc
c0011e77:	68 b6 3a 02 c0       	push   0xc0023ab6
c0011e7c:	e8 7e 24 00 00       	call   c00142ff <Krnl::panic(char const*)>
c0011e81:	83 c4 10             	add    esp,0x10
c0011e84:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0011e88:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e8c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011e90:	83 c2 2a             	add    edx,0x2a
c0011e93:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0011e97:	8b 02                	mov    eax,DWORD PTR [edx]
c0011e99:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011e9c:	89 01                	mov    DWORD PTR [ecx],eax
c0011e9e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0011ea1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0011ea6:	66 90                	xchg   ax,ax
c0011ea8:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011eac:	e9 53 ff ff ff       	jmp    c0011e04 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0011eb1:	8d 76 00             	lea    esi,[esi+0x0]
c0011eb4:	90                   	nop
c0011eb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011eb9:	83 c4 2c             	add    esp,0x2c
c0011ebc:	c2 04 00             	ret    0x4
c0011ebf:	90                   	nop

c0011ec0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0011ec0:	83 ec 1c             	sub    esp,0x1c
c0011ec3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ec7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0011ecb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011ecf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011ed4:	88 c8                	mov    al,cl
c0011ed6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0011eda:	88 d0                	mov    al,dl
c0011edc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0011ee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ee4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011eea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011eee:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0011ef1:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0011ef5:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0011ef9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011efd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011f03:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0011f07:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0011f0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f0e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0011f13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f17:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011f1d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0011f21:	8d 48 01             	lea    ecx,[eax+0x1]
c0011f24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f28:	83 c2 2a             	add    edx,0x2a
c0011f2b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0011f2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f33:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011f39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f3d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0011f40:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011f44:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0011f48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f4c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011f52:	8d 50 01             	lea    edx,[eax+0x1]
c0011f55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f59:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0011f5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f63:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011f69:	3d 00 02 00 00       	cmp    eax,0x200
c0011f6e:	75 10                	jne    c0011f80 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0011f70:	83 ec 0c             	sub    esp,0xc
c0011f73:	68 c5 3a 02 c0       	push   0xc0023ac5
c0011f78:	e8 82 23 00 00       	call   c00142ff <Krnl::panic(char const*)>
c0011f7d:	83 c4 10             	add    esp,0x10
c0011f80:	90                   	nop
c0011f81:	83 c4 1c             	add    esp,0x1c
c0011f84:	c3                   	ret    
c0011f85:	90                   	nop
c0011f86:	66 90                	xchg   ax,ax

c0011f88 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0011f88:	b8 00 00 00 00       	mov    eax,0x0
c0011f8d:	c3                   	ret    
c0011f8e:	66 90                	xchg   ax,ax

c0011f90 <ACPI::detectPCI()>:
c0011f90:	53                   	push   ebx
c0011f91:	83 ec 28             	sub    esp,0x28
c0011f94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011f99:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0011f9e:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0011fa3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011fa9:	83 e0 04             	and    eax,0x4
c0011fac:	84 c0                	test   al,al
c0011fae:	74 2c                	je     c0011fdc <ACPI::detectPCI()+0x4c>
c0011fb0:	a1 c8 69 02 c0       	mov    eax,ds:0xc00269c8
c0011fb5:	83 ec 08             	sub    esp,0x8
c0011fb8:	68 e2 3a 02 c0       	push   0xc0023ae2
c0011fbd:	50                   	push   eax
c0011fbe:	e8 5d f8 ff ff       	call   c0011820 <findDataTable(unsigned char*, char*)>
c0011fc3:	83 c4 10             	add    esp,0x10
c0011fc6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011fca:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011fcf:	74 0b                	je     c0011fdc <ACPI::detectPCI()+0x4c>
c0011fd1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0011fd6:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0011fdb:	90                   	nop
c0011fdc:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0011fe4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011fe8:	8a 00                	mov    al,BYTE PTR [eax]
c0011fea:	3c 01                	cmp    al,0x1
c0011fec:	75 0e                	jne    c0011ffc <ACPI::detectPCI()+0x6c>
c0011fee:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0011ff3:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0011ff8:	eb 2a                	jmp    c0012024 <ACPI::detectPCI()+0x94>
c0011ffa:	66 90                	xchg   ax,ax
c0011ffc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012000:	8a 00                	mov    al,BYTE PTR [eax]
c0012002:	3c 02                	cmp    al,0x2
c0012004:	75 1e                	jne    c0012024 <ACPI::detectPCI()+0x94>
c0012006:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001200b:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0012010:	74 12                	je     c0012024 <ACPI::detectPCI()+0x94>
c0012012:	83 ec 0c             	sub    esp,0xc
c0012015:	68 74 39 02 c0       	push   0xc0023974
c001201a:	e8 e0 22 00 00       	call   c00142ff <Krnl::panic(char const*)>
c001201f:	83 c4 10             	add    esp,0x10
c0012022:	66 90                	xchg   ax,ax
c0012024:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012028:	83 f0 01             	xor    eax,0x1
c001202b:	84 c0                	test   al,al
c001202d:	74 41                	je     c0012070 <ACPI::detectPCI()+0xe0>
c001202f:	e8 1c e1 fe ff       	call   c0000150 <manualPCIProbe>
c0012034:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012038:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001203d:	75 0d                	jne    c001204c <ACPI::detectPCI()+0xbc>
c001203f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0012044:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0012049:	eb 25                	jmp    c0012070 <ACPI::detectPCI()+0xe0>
c001204b:	90                   	nop
c001204c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0012051:	75 1d                	jne    c0012070 <ACPI::detectPCI()+0xe0>
c0012053:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0012058:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c001205d:	74 11                	je     c0012070 <ACPI::detectPCI()+0xe0>
c001205f:	83 ec 0c             	sub    esp,0xc
c0012062:	68 74 39 02 c0       	push   0xc0023974
c0012067:	e8 93 22 00 00       	call   c00142ff <Krnl::panic(char const*)>
c001206c:	83 c4 10             	add    esp,0x10
c001206f:	90                   	nop
c0012070:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012075:	0f 84 85 00 00 00    	je     c0012100 <ACPI::detectPCI()+0x170>
c001207b:	83 ec 0c             	sub    esp,0xc
c001207e:	68 e7 3a 02 c0       	push   0xc0023ae7
c0012083:	e8 95 79 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012088:	83 c4 10             	add    esp,0x10
c001208b:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0012093:	83 ec 0c             	sub    esp,0xc
c0012096:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001209a:	e8 24 79 ff ff       	call   c00099c3 <malloc>
c001209f:	83 c4 10             	add    esp,0x10
c00120a2:	89 c3                	mov    ebx,eax
c00120a4:	83 ec 0c             	sub    esp,0xc
c00120a7:	53                   	push   ebx
c00120a8:	e8 e1 a9 00 00       	call   c001ca8e <PCI::PCI()>
c00120ad:	83 c4 10             	add    esp,0x10
c00120b0:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00120b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120b8:	83 ec 08             	sub    esp,0x8
c00120bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120bf:	50                   	push   eax
c00120c0:	e8 e1 bd ff ff       	call   c000dea6 <Device::addChild(Device*)>
c00120c5:	83 c4 10             	add    esp,0x10
c00120c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00120ce:	83 c0 08             	add    eax,0x8
c00120d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00120d3:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00120d8:	74 0a                	je     c00120e4 <ACPI::detectPCI()+0x154>
c00120da:	ba 01 00 00 00       	mov    edx,0x1
c00120df:	eb 0b                	jmp    c00120ec <ACPI::detectPCI()+0x15c>
c00120e1:	8d 76 00             	lea    esi,[esi+0x0]
c00120e4:	ba 02 00 00 00       	mov    edx,0x2
c00120e9:	8d 76 00             	lea    esi,[esi+0x0]
c00120ec:	6a 00                	push   0x0
c00120ee:	6a 00                	push   0x0
c00120f0:	52                   	push   edx
c00120f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00120f5:	ff d0                	call   eax
c00120f7:	83 c4 10             	add    esp,0x10
c00120fa:	e9 a1 00 00 00       	jmp    c00121a0 <ACPI::detectPCI()+0x210>
c00120ff:	90                   	nop
c0012100:	83 ec 0c             	sub    esp,0xc
c0012103:	68 ff 3a 02 c0       	push   0xc0023aff
c0012108:	e8 52 a9 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001210d:	83 c4 10             	add    esp,0x10
c0012110:	83 ec 0c             	sub    esp,0xc
c0012113:	68 0a 3b 02 c0       	push   0xc0023b0a
c0012118:	e8 00 79 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001211d:	83 c4 10             	add    esp,0x10
c0012120:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0012127:	83 ec 0c             	sub    esp,0xc
c001212a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001212e:	e8 90 78 ff ff       	call   c00099c3 <malloc>
c0012133:	83 c4 10             	add    esp,0x10
c0012136:	89 c3                	mov    ebx,eax
c0012138:	83 ec 0c             	sub    esp,0xc
c001213b:	53                   	push   ebx
c001213c:	e8 b7 b4 00 00       	call   c001d5f8 <IDE::IDE()>
c0012141:	83 c4 10             	add    esp,0x10
c0012144:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0012148:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001214c:	83 ec 08             	sub    esp,0x8
c001214f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012153:	50                   	push   eax
c0012154:	e8 4d bd ff ff       	call   c000dea6 <Device::addChild(Device*)>
c0012159:	83 c4 10             	add    esp,0x10
c001215c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012160:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c001216a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001216e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0012177:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001217b:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0012184:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012188:	8b 00                	mov    eax,DWORD PTR [eax]
c001218a:	83 c0 08             	add    eax,0x8
c001218d:	8b 00                	mov    eax,DWORD PTR [eax]
c001218f:	6a 00                	push   0x0
c0012191:	6a 00                	push   0x0
c0012193:	6a 00                	push   0x0
c0012195:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012199:	ff d0                	call   eax
c001219b:	83 c4 10             	add    esp,0x10
c001219e:	66 90                	xchg   ax,ax
c00121a0:	90                   	nop
c00121a1:	83 c4 28             	add    esp,0x28
c00121a4:	5b                   	pop    ebx
c00121a5:	c3                   	ret    
c00121a6:	66 90                	xchg   ax,ax

c00121a8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00121a8:	83 ec 1c             	sub    esp,0x1c
c00121ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00121af:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00121b2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00121b6:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00121bb:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00121c0:	83 ec 08             	sub    esp,0x8
c00121c3:	52                   	push   edx
c00121c4:	50                   	push   eax
c00121c5:	e8 ca 6d ff ff       	call   c0008f94 <Computer::readCMOS(unsigned char)>
c00121ca:	83 c4 10             	add    esp,0x10
c00121cd:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00121d1:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00121d6:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00121db:	83 ec 04             	sub    esp,0x4
c00121de:	6a 01                	push   0x1
c00121e0:	52                   	push   edx
c00121e1:	50                   	push   eax
c00121e2:	e8 89 6f ff ff       	call   c0009170 <Computer::writeCMOS(unsigned char, unsigned char)>
c00121e7:	83 c4 10             	add    esp,0x10
c00121ea:	90                   	nop
c00121eb:	83 c4 1c             	add    esp,0x1c
c00121ee:	c3                   	ret    
c00121ef:	90                   	nop

c00121f0 <ACPI::sleep()>:
c00121f0:	83 ec 0c             	sub    esp,0xc
c00121f3:	a1 a0 67 02 c0       	mov    eax,ds:0xc00267a0
c00121f8:	85 c0                	test   eax,eax
c00121fa:	74 08                	je     c0012204 <ACPI::sleep()+0x14>
c00121fc:	a1 a0 67 02 c0       	mov    eax,ds:0xc00267a0
c0012201:	ff d0                	call   eax
c0012203:	90                   	nop
c0012204:	90                   	nop
c0012205:	83 c4 0c             	add    esp,0xc
c0012208:	c3                   	ret    
c0012209:	90                   	nop
c001220a:	66 90                	xchg   ax,ax

c001220c <ACPI::open(int, int, void*)>:
c001220c:	57                   	push   edi
c001220d:	56                   	push   esi
c001220e:	53                   	push   ebx
c001220f:	81 ec 70 01 00 00    	sub    esp,0x170
c0012215:	83 ec 0c             	sub    esp,0xc
c0012218:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001221f:	e8 6c fd ff ff       	call   c0011f90 <ACPI::detectPCI()>
c0012224:	83 c4 10             	add    esp,0x10
c0012227:	83 ec 0c             	sub    esp,0xc
c001222a:	68 9c 39 02 c0       	push   0xc002399c
c001222f:	e8 e9 77 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012234:	83 c4 10             	add    esp,0x10
c0012237:	83 ec 0c             	sub    esp,0xc
c001223a:	68 1f 3b 02 c0       	push   0xc0023b1f
c001223f:	e8 2f 48 00 00       	call   c0016a73 <Thr::loadKernelSymbolTable(char const*)>
c0012244:	83 c4 10             	add    esp,0x10
c0012247:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c001224f:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c001225a:	83 ec 0c             	sub    esp,0xc
c001225d:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012264:	e8 5a 77 ff ff       	call   c00099c3 <malloc>
c0012269:	83 c4 10             	add    esp,0x10
c001226c:	89 c3                	mov    ebx,eax
c001226e:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c0012273:	83 ec 04             	sub    esp,0x4
c0012276:	50                   	push   eax
c0012277:	68 3d 3b 02 c0       	push   0xc0023b3d
c001227c:	53                   	push   ebx
c001227d:	e8 48 ad ff ff       	call   c000cfca <File::File(char const*, Process*)>
c0012282:	83 c4 10             	add    esp,0x10
c0012285:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c001228c:	83 ec 08             	sub    esp,0x8
c001228f:	6a 01                	push   0x1
c0012291:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012298:	e8 91 ad ff ff       	call   c000d02e <File::open(FileOpenMode)>
c001229d:	83 c4 10             	add    esp,0x10
c00122a0:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c00122a7:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c00122af:	75 17                	jne    c00122c8 <ACPI::open(int, int, void*)+0xbc>
c00122b1:	83 ec 0c             	sub    esp,0xc
c00122b4:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c00122bb:	e8 cc ad ff ff       	call   c000d08c <File::close()>
c00122c0:	83 c4 10             	add    esp,0x10
c00122c3:	eb 0b                	jmp    c00122d0 <ACPI::open(int, int, void*)+0xc4>
c00122c5:	8d 76 00             	lea    esi,[esi+0x0]
c00122c8:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c00122d0:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c00122d8:	74 1e                	je     c00122f8 <ACPI::open(int, int, void*)+0xec>
c00122da:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c00122e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00122e3:	83 c0 08             	add    eax,0x8
c00122e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00122e8:	83 ec 0c             	sub    esp,0xc
c00122eb:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c00122f2:	ff d0                	call   eax
c00122f4:	83 c4 10             	add    esp,0x10
c00122f7:	90                   	nop
c00122f8:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c00122ff:	83 f0 01             	xor    eax,0x1
c0012302:	84 c0                	test   al,al
c0012304:	74 42                	je     c0012348 <ACPI::open(int, int, void*)+0x13c>
c0012306:	83 ec 0c             	sub    esp,0xc
c0012309:	68 5b 3b 02 c0       	push   0xc0023b5b
c001230e:	e8 0a 77 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012313:	83 c4 10             	add    esp,0x10
c0012316:	83 ec 04             	sub    esp,0x4
c0012319:	6a 0c                	push   0xc
c001231b:	68 76 3b 02 c0       	push   0xc0023b76
c0012320:	68 87 3b 02 c0       	push   0xc0023b87
c0012325:	e8 b3 2d 00 00       	call   c00150dd <Reg::readIntWithDefault(char*, char*, int)>
c001232a:	83 c4 10             	add    esp,0x10
c001232d:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0012334:	83 ec 0c             	sub    esp,0xc
c0012337:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c001233e:	e8 00 96 ff ff       	call   c000b943 <Virt::setupPageSwapping(int)>
c0012343:	83 c4 10             	add    esp,0x10
c0012346:	66 90                	xchg   ax,ax
c0012348:	83 ec 0c             	sub    esp,0xc
c001234b:	68 86 24 02 c0       	push   0xc0022486
c0012350:	e8 c8 76 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012355:	83 c4 10             	add    esp,0x10
c0012358:	8b 1d 68 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026168
c001235e:	83 ec 08             	sub    esp,0x8
c0012361:	6a 01                	push   0x1
c0012363:	68 8e 3b 02 c0       	push   0xc0023b8e
c0012368:	e8 7d 51 00 00       	call   c00174ea <Thr::loadDLL(char const*, bool)>
c001236d:	83 c4 10             	add    esp,0x10
c0012370:	83 ec 08             	sub    esp,0x8
c0012373:	53                   	push   ebx
c0012374:	50                   	push   eax
c0012375:	e8 a1 53 00 00       	call   c001771b <Thr::executeDLL(unsigned long, void*)>
c001237a:	83 c4 10             	add    esp,0x10
c001237d:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0012384:	83 ec 08             	sub    esp,0x8
c0012387:	6a 12                	push   0x12
c0012389:	50                   	push   eax
c001238a:	e8 9b be ff ff       	call   c000e22a <getDevicesOfType(DeviceType)>
c001238f:	83 c4 0c             	add    esp,0xc
c0012392:	66 90                	xchg   ax,ax
c0012394:	83 ec 0c             	sub    esp,0xc
c0012397:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001239e:	50                   	push   eax
c001239f:	e8 dc f2 00 00       	call   c0021680 <LinkedList<Device>::isEmpty()>
c00123a4:	83 c4 10             	add    esp,0x10
c00123a7:	83 f0 01             	xor    eax,0x1
c00123aa:	84 c0                	test   al,al
c00123ac:	0f 84 46 01 00 00    	je     c00124f8 <ACPI::open(int, int, void*)+0x2ec>
c00123b2:	83 ec 0c             	sub    esp,0xc
c00123b5:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00123bc:	50                   	push   eax
c00123bd:	e8 da f2 00 00       	call   c002169c <LinkedList<Device>::getFirstElement()>
c00123c2:	83 c4 10             	add    esp,0x10
c00123c5:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c00123cc:	83 ec 0c             	sub    esp,0xc
c00123cf:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00123d6:	50                   	push   eax
c00123d7:	e8 c8 f2 00 00       	call   c00216a4 <LinkedList<Device>::removeFirst()>
c00123dc:	83 c4 10             	add    esp,0x10
c00123df:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c00123e6:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c00123ed:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c00123f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00123f8:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c00123fe:	ba 09 00 00 00       	mov    edx,0x9
c0012403:	fc                   	cld    
c0012404:	89 c7                	mov    edi,eax
c0012406:	89 de                	mov    esi,ebx
c0012408:	89 d1                	mov    ecx,edx
c001240a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001240c:	83 ec 08             	sub    esp,0x8
c001240f:	8d 44 24 38          	lea    eax,[esp+0x38]
c0012413:	50                   	push   eax
c0012414:	83 ec 24             	sub    esp,0x24
c0012417:	89 e0                	mov    eax,esp
c0012419:	89 c3                	mov    ebx,eax
c001241b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001241f:	ba 09 00 00 00       	mov    edx,0x9
c0012424:	89 df                	mov    edi,ebx
c0012426:	89 c6                	mov    esi,eax
c0012428:	89 d1                	mov    ecx,edx
c001242a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001242c:	e8 3b ab 00 00       	call   c001cf6c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0012431:	83 c4 30             	add    esp,0x30
c0012434:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c001243b:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0012443:	0f 84 4b ff ff ff    	je     c0012394 <ACPI::open(int, int, void*)+0x188>
c0012449:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0012454:	83 ec 0c             	sub    esp,0xc
c0012457:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001245e:	e8 60 75 ff ff       	call   c00099c3 <malloc>
c0012463:	83 c4 10             	add    esp,0x10
c0012466:	89 c3                	mov    ebx,eax
c0012468:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c001246d:	83 ec 04             	sub    esp,0x4
c0012470:	50                   	push   eax
c0012471:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012478:	53                   	push   ebx
c0012479:	e8 4c ab ff ff       	call   c000cfca <File::File(char const*, Process*)>
c001247e:	83 c4 10             	add    esp,0x10
c0012481:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0012488:	83 ec 0c             	sub    esp,0xc
c001248b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012492:	e8 05 ae ff ff       	call   c000d29c <File::exists()>
c0012497:	83 c4 10             	add    esp,0x10
c001249a:	84 c0                	test   al,al
c001249c:	74 2a                	je     c00124c8 <ACPI::open(int, int, void*)+0x2bc>
c001249e:	83 ec 08             	sub    esp,0x8
c00124a1:	6a 01                	push   0x1
c00124a3:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c00124aa:	e8 3b 50 00 00       	call   c00174ea <Thr::loadDLL(char const*, bool)>
c00124af:	83 c4 10             	add    esp,0x10
c00124b2:	83 ec 08             	sub    esp,0x8
c00124b5:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c00124bc:	50                   	push   eax
c00124bd:	e8 59 52 00 00       	call   c001771b <Thr::executeDLL(unsigned long, void*)>
c00124c2:	83 c4 10             	add    esp,0x10
c00124c5:	8d 76 00             	lea    esi,[esi+0x0]
c00124c8:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c00124d0:	0f 84 be fe ff ff    	je     c0012394 <ACPI::open(int, int, void*)+0x188>
c00124d6:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c00124dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00124df:	83 c0 08             	add    eax,0x8
c00124e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00124e4:	83 ec 0c             	sub    esp,0xc
c00124e7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00124ee:	ff d0                	call   eax
c00124f0:	83 c4 10             	add    esp,0x10
c00124f3:	e9 9c fe ff ff       	jmp    c0012394 <ACPI::open(int, int, void*)+0x188>
c00124f8:	83 ec 0c             	sub    esp,0xc
c00124fb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012502:	50                   	push   eax
c0012503:	e8 74 f1 00 00       	call   c002167c <LinkedList<Device>::~LinkedList()>
c0012508:	83 c4 10             	add    esp,0x10
c001250b:	8b 1d 68 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026168
c0012511:	83 ec 08             	sub    esp,0x8
c0012514:	6a 01                	push   0x1
c0012516:	68 a9 3b 02 c0       	push   0xc0023ba9
c001251b:	e8 ca 4f 00 00       	call   c00174ea <Thr::loadDLL(char const*, bool)>
c0012520:	83 c4 10             	add    esp,0x10
c0012523:	83 ec 08             	sub    esp,0x8
c0012526:	53                   	push   ebx
c0012527:	50                   	push   eax
c0012528:	e8 ee 51 00 00       	call   c001771b <Thr::executeDLL(unsigned long, void*)>
c001252d:	83 c4 10             	add    esp,0x10
c0012530:	8b 1d 68 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026168
c0012536:	83 ec 08             	sub    esp,0x8
c0012539:	6a 01                	push   0x1
c001253b:	68 c6 3b 02 c0       	push   0xc0023bc6
c0012540:	e8 a5 4f 00 00       	call   c00174ea <Thr::loadDLL(char const*, bool)>
c0012545:	83 c4 10             	add    esp,0x10
c0012548:	83 ec 08             	sub    esp,0x8
c001254b:	53                   	push   ebx
c001254c:	50                   	push   eax
c001254d:	e8 c9 51 00 00       	call   c001771b <Thr::executeDLL(unsigned long, void*)>
c0012552:	83 c4 10             	add    esp,0x10
c0012555:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001255a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012560:	83 e0 04             	and    eax,0x4
c0012563:	84 c0                	test   al,al
c0012565:	0f 84 15 01 00 00    	je     c0012680 <ACPI::open(int, int, void*)+0x474>
c001256b:	83 ec 0c             	sub    esp,0xc
c001256e:	68 e3 3b 02 c0       	push   0xc0023be3
c0012573:	e8 a5 74 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012578:	83 c4 10             	add    esp,0x10
c001257b:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0012586:	83 ec 0c             	sub    esp,0xc
c0012589:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0012590:	e8 2e 74 ff ff       	call   c00099c3 <malloc>
c0012595:	83 c4 10             	add    esp,0x10
c0012598:	89 c3                	mov    ebx,eax
c001259a:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c001259f:	83 ec 04             	sub    esp,0x4
c00125a2:	50                   	push   eax
c00125a3:	68 00 3c 02 c0       	push   0xc0023c00
c00125a8:	53                   	push   ebx
c00125a9:	e8 1c aa ff ff       	call   c000cfca <File::File(char const*, Process*)>
c00125ae:	83 c4 10             	add    esp,0x10
c00125b1:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00125b8:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00125c0:	74 1a                	je     c00125dc <ACPI::open(int, int, void*)+0x3d0>
c00125c2:	83 ec 0c             	sub    esp,0xc
c00125c5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00125cc:	e8 cb ac ff ff       	call   c000d29c <File::exists()>
c00125d1:	83 c4 10             	add    esp,0x10
c00125d4:	84 c0                	test   al,al
c00125d6:	74 04                	je     c00125dc <ACPI::open(int, int, void*)+0x3d0>
c00125d8:	b0 01                	mov    al,0x1
c00125da:	eb 04                	jmp    c00125e0 <ACPI::open(int, int, void*)+0x3d4>
c00125dc:	b0 00                	mov    al,0x0
c00125de:	66 90                	xchg   ax,ax
c00125e0:	84 c0                	test   al,al
c00125e2:	74 28                	je     c001260c <ACPI::open(int, int, void*)+0x400>
c00125e4:	83 ec 08             	sub    esp,0x8
c00125e7:	6a 01                	push   0x1
c00125e9:	68 00 3c 02 c0       	push   0xc0023c00
c00125ee:	e8 f7 4e 00 00       	call   c00174ea <Thr::loadDLL(char const*, bool)>
c00125f3:	83 c4 10             	add    esp,0x10
c00125f6:	83 ec 08             	sub    esp,0x8
c00125f9:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0012600:	50                   	push   eax
c0012601:	e8 15 51 00 00       	call   c001771b <Thr::executeDLL(unsigned long, void*)>
c0012606:	83 c4 10             	add    esp,0x10
c0012609:	8d 76 00             	lea    esi,[esi+0x0]
c001260c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012614:	74 2a                	je     c0012640 <ACPI::open(int, int, void*)+0x434>
c0012616:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001261e:	74 20                	je     c0012640 <ACPI::open(int, int, void*)+0x434>
c0012620:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0012627:	8b 00                	mov    eax,DWORD PTR [eax]
c0012629:	83 c0 08             	add    eax,0x8
c001262c:	8b 00                	mov    eax,DWORD PTR [eax]
c001262e:	83 ec 0c             	sub    esp,0xc
c0012631:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012638:	ff d0                	call   eax
c001263a:	83 c4 10             	add    esp,0x10
c001263d:	8d 76 00             	lea    esi,[esi+0x0]
c0012640:	a1 c8 69 02 c0       	mov    eax,ds:0xc00269c8
c0012645:	83 ec 08             	sub    esp,0x8
c0012648:	68 1d 3c 02 c0       	push   0xc0023c1d
c001264d:	50                   	push   eax
c001264e:	e8 cd f1 ff ff       	call   c0011820 <findDataTable(unsigned char*, char*)>
c0012653:	83 c4 10             	add    esp,0x10
c0012656:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c001265d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0012665:	74 19                	je     c0012680 <ACPI::open(int, int, void*)+0x474>
c0012667:	83 ec 08             	sub    esp,0x8
c001266a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012671:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012678:	e8 2b fb ff ff       	call   c00121a8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001267d:	83 c4 10             	add    esp,0x10
c0012680:	b8 00 00 00 00       	mov    eax,0x0
c0012685:	81 c4 70 01 00 00    	add    esp,0x170
c001268b:	5b                   	pop    ebx
c001268c:	5e                   	pop    esi
c001268d:	5f                   	pop    edi
c001268e:	c3                   	ret    
c001268f:	90                   	nop

c0012690 <CPU::close(int, int, void*)>:
c0012690:	31 c0                	xor    eax,eax
c0012692:	c3                   	ret    
c0012693:	90                   	nop

c0012694 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0012694:	55                   	push   ebp
c0012695:	57                   	push   edi
c0012696:	56                   	push   esi
c0012697:	53                   	push   ebx
c0012698:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001269c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00126a0:	89 ce                	mov    esi,ecx
c00126a2:	89 d5                	mov    ebp,edx
c00126a4:	80 f9 04             	cmp    cl,0x4
c00126a7:	75 28                	jne    c00126d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00126a9:	8d 42 f9             	lea    eax,[edx-0x7]
c00126ac:	3c 03                	cmp    al,0x3
c00126ae:	0f 86 63 01 00 00    	jbe    c0012817 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00126b4:	80 fa 03             	cmp    dl,0x3
c00126b7:	0f 84 5a 01 00 00    	je     c0012817 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00126bd:	8d 7a f2             	lea    edi,[edx-0xe]
c00126c0:	b8 30 5a 02 c0       	mov    eax,0xc0025a30
c00126c5:	89 fb                	mov    ebx,edi
c00126c7:	80 fb 01             	cmp    bl,0x1
c00126ca:	77 4e                	ja     c001271a <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00126cc:	e9 52 01 00 00       	jmp    c0012823 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00126d1:	80 f9 05             	cmp    cl,0x5
c00126d4:	75 4d                	jne    c0012723 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00126d6:	b8 40 5a 02 c0       	mov    eax,0xc0025a40
c00126db:	80 fa 03             	cmp    dl,0x3
c00126de:	0f 86 3f 01 00 00    	jbe    c0012823 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00126e4:	8d 7a fa             	lea    edi,[edx-0x6]
c00126e7:	b8 50 5a 02 c0       	mov    eax,0xc0025a50
c00126ec:	89 fb                	mov    ebx,edi
c00126ee:	80 fb 01             	cmp    bl,0x1
c00126f1:	0f 86 2c 01 00 00    	jbe    c0012823 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00126f7:	b8 60 5a 02 c0       	mov    eax,0xc0025a60
c00126fc:	80 fa 08             	cmp    dl,0x8
c00126ff:	0f 84 1e 01 00 00    	je     c0012823 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012705:	89 d7                	mov    edi,edx
c0012707:	b8 70 5a 02 c0       	mov    eax,0xc0025a70
c001270c:	83 e7 fb             	and    edi,0xfffffffb
c001270f:	89 fb                	mov    ebx,edi
c0012711:	80 fb 09             	cmp    bl,0x9
c0012714:	0f 84 09 01 00 00    	je     c0012823 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001271a:	31 c0                	xor    eax,eax
c001271c:	89 eb                	mov    ebx,ebp
c001271e:	0f b6 fb             	movzx  edi,bl
c0012721:	eb 30                	jmp    c0012753 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0012723:	31 c0                	xor    eax,eax
c0012725:	80 f9 06             	cmp    cl,0x6
c0012728:	75 f2                	jne    c001271c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001272a:	80 fa 0a             	cmp    dl,0xa
c001272d:	77 ed                	ja     c001271c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001272f:	bf de 05 00 00       	mov    edi,0x5de
c0012734:	0f a3 d7             	bt     edi,edx
c0012737:	73 e3                	jae    c001271c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012739:	b8 80 5a 02 c0       	mov    eax,0xc0025a80
c001273e:	e9 e0 00 00 00       	jmp    c0012823 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012743:	39 c7                	cmp    edi,eax
c0012745:	0f 84 d3 00 00 00    	je     c001281e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001274b:	40                   	inc    eax
c001274c:	3d d0 00 00 00       	cmp    eax,0xd0
c0012751:	74 09                	je     c001275c <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0012753:	89 f3                	mov    ebx,esi
c0012755:	80 fb 0f             	cmp    bl,0xf
c0012758:	75 f1                	jne    c001274b <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001275a:	eb e7                	jmp    c0012743 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001275c:	80 f9 10             	cmp    cl,0x10
c001275f:	75 14                	jne    c0012775 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0012761:	8d 42 fc             	lea    eax,[edx-0x4]
c0012764:	83 e0 fb             	and    eax,0xfffffffb
c0012767:	3c 02                	cmp    al,0x2
c0012769:	76 34                	jbe    c001279f <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001276b:	b8 a5 3d 02 c0       	mov    eax,0xc0023da5
c0012770:	80 fa 02             	cmp    dl,0x2
c0012773:	eb 24                	jmp    c0012799 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0012775:	80 f9 11             	cmp    cl,0x11
c0012778:	75 13                	jne    c001278d <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001277a:	b8 a5 3d 02 c0       	mov    eax,0xc0023da5
c001277f:	80 fa 03             	cmp    dl,0x3
c0012782:	0f 85 9b 00 00 00    	jne    c0012823 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012788:	e9 91 00 00 00       	jmp    c001281e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001278d:	80 f9 12             	cmp    cl,0x12
c0012790:	75 14                	jne    c00127a6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0012792:	b8 a5 3d 02 c0       	mov    eax,0xc0023da5
c0012797:	fe ca                	dec    dl
c0012799:	0f 85 84 00 00 00    	jne    c0012823 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001279f:	b8 a0 5a 02 c0       	mov    eax,0xc0025aa0
c00127a4:	eb 7d                	jmp    c0012823 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127a6:	80 f9 14             	cmp    cl,0x14
c00127a9:	75 12                	jne    c00127bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00127ab:	4a                   	dec    edx
c00127ac:	b8 a5 3d 02 c0       	mov    eax,0xc0023da5
c00127b1:	80 fa 01             	cmp    dl,0x1
c00127b4:	77 6d                	ja     c0012823 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127b6:	b8 b0 5a 02 c0       	mov    eax,0xc0025ab0
c00127bb:	eb 66                	jmp    c0012823 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127bd:	80 f9 15             	cmp    cl,0x15
c00127c0:	75 31                	jne    c00127f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00127c2:	b8 c0 5a 02 c0       	mov    eax,0xc0025ac0
c00127c7:	80 fa 01             	cmp    dl,0x1
c00127ca:	74 57                	je     c0012823 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127cc:	b8 a5 3d 02 c0       	mov    eax,0xc0023da5
c00127d1:	80 fa 13             	cmp    dl,0x13
c00127d4:	76 0c                	jbe    c00127e2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00127d6:	80 fa 30             	cmp    dl,0x30
c00127d9:	75 48                	jne    c0012823 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127db:	b8 e0 5a 02 c0       	mov    eax,0xc0025ae0
c00127e0:	eb 41                	jmp    c0012823 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127e2:	b9 04 00 09 00       	mov    ecx,0x90004
c00127e7:	0f a3 d1             	bt     ecx,edx
c00127ea:	73 37                	jae    c0012823 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127ec:	b8 d0 5a 02 c0       	mov    eax,0xc0025ad0
c00127f1:	eb 30                	jmp    c0012823 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127f3:	b8 a5 3d 02 c0       	mov    eax,0xc0023da5
c00127f8:	80 f9 16             	cmp    cl,0x16
c00127fb:	75 26                	jne    c0012823 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127fd:	b8 f0 5a 02 c0       	mov    eax,0xc0025af0
c0012802:	84 d2                	test   dl,dl
c0012804:	74 1d                	je     c0012823 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012806:	b8 a5 3d 02 c0       	mov    eax,0xc0023da5
c001280b:	80 fa 30             	cmp    dl,0x30
c001280e:	75 13                	jne    c0012823 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012810:	b8 00 5b 02 c0       	mov    eax,0xc0025b00
c0012815:	eb 0c                	jmp    c0012823 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012817:	b8 20 5a 02 c0       	mov    eax,0xc0025a20
c001281c:	eb 05                	jmp    c0012823 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001281e:	b8 90 5a 02 c0       	mov    eax,0xc0025a90
c0012823:	5b                   	pop    ebx
c0012824:	5e                   	pop    esi
c0012825:	5f                   	pop    edi
c0012826:	5d                   	pop    ebp
c0012827:	c3                   	ret    

c0012828 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0012828:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001282c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012830:	80 f9 04             	cmp    cl,0x4
c0012833:	75 6b                	jne    c00128a0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0012835:	b8 80 58 02 c0       	mov    eax,0xc0025880
c001283a:	80 fa 01             	cmp    dl,0x1
c001283d:	0f 86 92 02 00 00    	jbe    c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012843:	b8 90 58 02 c0       	mov    eax,0xc0025890
c0012848:	80 fa 02             	cmp    dl,0x2
c001284b:	0f 84 84 02 00 00    	je     c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012851:	b8 a0 58 02 c0       	mov    eax,0xc00258a0
c0012856:	80 fa 03             	cmp    dl,0x3
c0012859:	0f 84 76 02 00 00    	je     c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001285f:	b8 b0 58 02 c0       	mov    eax,0xc00258b0
c0012864:	80 fa 04             	cmp    dl,0x4
c0012867:	0f 84 68 02 00 00    	je     c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001286d:	b8 c0 58 02 c0       	mov    eax,0xc00258c0
c0012872:	80 fa 05             	cmp    dl,0x5
c0012875:	0f 84 5a 02 00 00    	je     c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001287b:	b8 a0 58 02 c0       	mov    eax,0xc00258a0
c0012880:	80 fa 07             	cmp    dl,0x7
c0012883:	0f 84 4c 02 00 00    	je     c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012889:	83 ea 08             	sub    edx,0x8
c001288c:	b8 a5 3d 02 c0       	mov    eax,0xc0023da5
c0012891:	80 fa 01             	cmp    dl,0x1
c0012894:	0f 87 3b 02 00 00    	ja     c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001289a:	b8 d0 58 02 c0       	mov    eax,0xc00258d0
c001289f:	c3                   	ret    
c00128a0:	80 f9 05             	cmp    cl,0x5
c00128a3:	75 45                	jne    c00128ea <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00128a5:	8d 4a ff             	lea    ecx,[edx-0x1]
c00128a8:	b8 e0 58 02 c0       	mov    eax,0xc00258e0
c00128ad:	80 f9 02             	cmp    cl,0x2
c00128b0:	0f 86 1f 02 00 00    	jbe    c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128b6:	80 fa 04             	cmp    dl,0x4
c00128b9:	0f 84 f3 01 00 00    	je     c0012ab2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00128bf:	80 fa 07             	cmp    dl,0x7
c00128c2:	0f 84 0d 02 00 00    	je     c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128c8:	b8 f0 58 02 c0       	mov    eax,0xc00258f0
c00128cd:	80 fa 08             	cmp    dl,0x8
c00128d0:	0f 84 ff 01 00 00    	je     c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128d6:	b8 a5 3d 02 c0       	mov    eax,0xc0023da5
c00128db:	80 fa 09             	cmp    dl,0x9
c00128de:	0f 85 f1 01 00 00    	jne    c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00128e4:	b8 00 59 02 c0       	mov    eax,0xc0025900
c00128e9:	c3                   	ret    
c00128ea:	80 f9 06             	cmp    cl,0x6
c00128ed:	0f 85 85 01 00 00    	jne    c0012a78 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00128f3:	b8 10 59 02 c0       	mov    eax,0xc0025910
c00128f8:	80 fa 01             	cmp    dl,0x1
c00128fb:	0f 84 d4 01 00 00    	je     c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012901:	8d 42 fb             	lea    eax,[edx-0x5]
c0012904:	3c 01                	cmp    al,0x1
c0012906:	0f 86 ac 01 00 00    	jbe    c0012ab8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001290c:	80 fa 03             	cmp    dl,0x3
c001290f:	0f 84 a3 01 00 00    	je     c0012ab8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012915:	8d 4a f9             	lea    ecx,[edx-0x7]
c0012918:	b8 30 59 02 c0       	mov    eax,0xc0025930
c001291d:	80 f9 01             	cmp    cl,0x1
c0012920:	0f 86 af 01 00 00    	jbe    c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012926:	80 fa 09             	cmp    dl,0x9
c0012929:	0f 84 8f 01 00 00    	je     c0012abe <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c001292f:	8d 4a f6             	lea    ecx,[edx-0xa]
c0012932:	80 f9 01             	cmp    cl,0x1
c0012935:	0f 86 9a 01 00 00    	jbe    c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001293b:	b8 40 59 02 c0       	mov    eax,0xc0025940
c0012940:	80 fa 0d             	cmp    dl,0xd
c0012943:	0f 84 8c 01 00 00    	je     c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012949:	b8 50 59 02 c0       	mov    eax,0xc0025950
c001294e:	80 fa 0e             	cmp    dl,0xe
c0012951:	0f 84 7e 01 00 00    	je     c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012957:	b8 60 59 02 c0       	mov    eax,0xc0025960
c001295c:	80 fa 0f             	cmp    dl,0xf
c001295f:	0f 84 70 01 00 00    	je     c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012965:	b8 40 59 02 c0       	mov    eax,0xc0025940
c001296a:	80 fa 15             	cmp    dl,0x15
c001296d:	0f 84 62 01 00 00    	je     c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012973:	8d 4a ea             	lea    ecx,[edx-0x16]
c0012976:	b8 60 59 02 c0       	mov    eax,0xc0025960
c001297b:	80 f9 01             	cmp    cl,0x1
c001297e:	0f 86 51 01 00 00    	jbe    c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012984:	80 fa 1a             	cmp    dl,0x1a
c0012987:	0f 84 37 01 00 00    	je     c0012ac4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c001298d:	80 fa 1c             	cmp    dl,0x1c
c0012990:	0f 84 34 01 00 00    	je     c0012aca <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0012996:	80 fa 1d             	cmp    dl,0x1d
c0012999:	0f 84 36 01 00 00    	je     c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001299f:	b8 90 59 02 c0       	mov    eax,0xc0025990
c00129a4:	80 fa 25             	cmp    dl,0x25
c00129a7:	0f 84 28 01 00 00    	je     c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129ad:	8d 4a da             	lea    ecx,[edx-0x26]
c00129b0:	b8 80 59 02 c0       	mov    eax,0xc0025980
c00129b5:	80 f9 01             	cmp    cl,0x1
c00129b8:	0f 86 17 01 00 00    	jbe    c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129be:	b8 a0 59 02 c0       	mov    eax,0xc00259a0
c00129c3:	80 fa 2a             	cmp    dl,0x2a
c00129c6:	0f 84 09 01 00 00    	je     c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129cc:	b8 90 59 02 c0       	mov    eax,0xc0025990
c00129d1:	80 fa 2c             	cmp    dl,0x2c
c00129d4:	0f 84 fb 00 00 00    	je     c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129da:	b8 a0 59 02 c0       	mov    eax,0xc00259a0
c00129df:	80 fa 2d             	cmp    dl,0x2d
c00129e2:	0f 84 ed 00 00 00    	je     c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129e8:	b8 70 59 02 c0       	mov    eax,0xc0025970
c00129ed:	80 fa 2e             	cmp    dl,0x2e
c00129f0:	0f 84 df 00 00 00    	je     c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129f6:	b8 90 59 02 c0       	mov    eax,0xc0025990
c00129fb:	80 fa 2f             	cmp    dl,0x2f
c00129fe:	0f 84 d1 00 00 00    	je     c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a04:	8d 4a cb             	lea    ecx,[edx-0x35]
c0012a07:	b8 80 59 02 c0       	mov    eax,0xc0025980
c0012a0c:	80 f9 01             	cmp    cl,0x1
c0012a0f:	0f 86 c0 00 00 00    	jbe    c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a15:	b8 b0 59 02 c0       	mov    eax,0xc00259b0
c0012a1a:	80 fa 37             	cmp    dl,0x37
c0012a1d:	0f 84 b2 00 00 00    	je     c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a23:	b8 c0 59 02 c0       	mov    eax,0xc00259c0
c0012a28:	80 fa 3a             	cmp    dl,0x3a
c0012a2b:	0f 84 a4 00 00 00    	je     c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a31:	b8 d0 59 02 c0       	mov    eax,0xc00259d0
c0012a36:	80 fa 3c             	cmp    dl,0x3c
c0012a39:	0f 84 96 00 00 00    	je     c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a3f:	b8 e0 59 02 c0       	mov    eax,0xc00259e0
c0012a44:	80 fa 3d             	cmp    dl,0x3d
c0012a47:	0f 84 88 00 00 00    	je     c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a4d:	b8 c0 59 02 c0       	mov    eax,0xc00259c0
c0012a52:	80 fa 3e             	cmp    dl,0x3e
c0012a55:	74 7e                	je     c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a57:	8d 42 bb             	lea    eax,[edx-0x45]
c0012a5a:	3c 01                	cmp    al,0x1
c0012a5c:	76 72                	jbe    c0012ad0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012a5e:	80 fa 3f             	cmp    dl,0x3f
c0012a61:	74 6d                	je     c0012ad0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012a63:	80 fa 4a             	cmp    dl,0x4a
c0012a66:	74 0a                	je     c0012a72 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0012a68:	b8 a5 3d 02 c0       	mov    eax,0xc0023da5
c0012a6d:	80 fa 4d             	cmp    dl,0x4d
c0012a70:	75 63                	jne    c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a72:	b8 b0 59 02 c0       	mov    eax,0xc00259b0
c0012a77:	c3                   	ret    
c0012a78:	b8 a5 3d 02 c0       	mov    eax,0xc0023da5
c0012a7d:	80 f9 0b             	cmp    cl,0xb
c0012a80:	75 0a                	jne    c0012a8c <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0012a82:	fe ca                	dec    dl
c0012a84:	75 4f                	jne    c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a86:	b8 f0 59 02 c0       	mov    eax,0xc00259f0
c0012a8b:	c3                   	ret    
c0012a8c:	80 f9 0f             	cmp    cl,0xf
c0012a8f:	75 44                	jne    c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a91:	b8 00 5a 02 c0       	mov    eax,0xc0025a00
c0012a96:	80 fa 02             	cmp    dl,0x2
c0012a99:	76 3a                	jbe    c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a9b:	8d 42 fd             	lea    eax,[edx-0x3]
c0012a9e:	3c 01                	cmp    al,0x1
c0012aa0:	76 0a                	jbe    c0012aac <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0012aa2:	b8 a5 3d 02 c0       	mov    eax,0xc0023da5
c0012aa7:	80 fa 06             	cmp    dl,0x6
c0012aaa:	75 29                	jne    c0012ad5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012aac:	b8 10 5a 02 c0       	mov    eax,0xc0025a10
c0012ab1:	c3                   	ret    
c0012ab2:	b8 f0 58 02 c0       	mov    eax,0xc00258f0
c0012ab7:	c3                   	ret    
c0012ab8:	b8 20 59 02 c0       	mov    eax,0xc0025920
c0012abd:	c3                   	ret    
c0012abe:	b8 40 59 02 c0       	mov    eax,0xc0025940
c0012ac3:	c3                   	ret    
c0012ac4:	b8 70 59 02 c0       	mov    eax,0xc0025970
c0012ac9:	c3                   	ret    
c0012aca:	b8 80 59 02 c0       	mov    eax,0xc0025980
c0012acf:	c3                   	ret    
c0012ad0:	b8 d0 59 02 c0       	mov    eax,0xc00259d0
c0012ad5:	c3                   	ret    

c0012ad6 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0012ad6:	60                   	pusha  
c0012ad7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012adb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012adf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012ae3:	9c                   	pushf  
c0012ae4:	fa                   	cli    
c0012ae5:	0f 09                	wbinvd 
c0012ae7:	0f 30                	wrmsr  
c0012ae9:	9d                   	popf   
c0012aea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012aee:	89 02                	mov    DWORD PTR [edx],eax
c0012af0:	61                   	popa   
c0012af1:	c3                   	ret    

c0012af2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0012af2:	60                   	pusha  
c0012af3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012af7:	9c                   	pushf  
c0012af8:	fa                   	cli    
c0012af9:	0f 09                	wbinvd 
c0012afb:	31 c0                	xor    eax,eax
c0012afd:	31 d2                	xor    edx,edx
c0012aff:	0f 32                	rdmsr  
c0012b01:	9d                   	popf   
c0012b02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b06:	89 02                	mov    DWORD PTR [edx],eax
c0012b08:	61                   	popa   
c0012b09:	c3                   	ret    

c0012b0a <CPU::AMD_K6_writeback(int, int, int)>:
c0012b0a:	56                   	push   esi
c0012b0b:	53                   	push   ebx
c0012b0c:	83 ec 10             	sub    esp,0x10
c0012b0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b13:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0012b18:	75 5d                	jne    c0012b77 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012b1a:	83 f8 08             	cmp    eax,0x8
c0012b1d:	75 09                	jne    c0012b28 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0012b1f:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0012b24:	7e 13                	jle    c0012b39 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012b26:	eb 30                	jmp    c0012b58 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0012b28:	83 f8 06             	cmp    eax,0x6
c0012b2b:	7c 4a                	jl     c0012b77 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012b2d:	83 f8 07             	cmp    eax,0x7
c0012b30:	7e 07                	jle    c0012b39 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012b32:	83 f8 09             	cmp    eax,0x9
c0012b35:	74 21                	je     c0012b58 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0012b37:	eb 3e                	jmp    c0012b77 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012b39:	89 e6                	mov    esi,esp
c0012b3b:	8b 1d 8c 61 02 c0    	mov    ebx,DWORD PTR ds:0xc002618c
c0012b41:	56                   	push   esi
c0012b42:	c1 eb 15             	shr    ebx,0x15
c0012b45:	68 82 00 00 c0       	push   0xc0000082
c0012b4a:	83 e3 7e             	and    ebx,0x7e
c0012b4d:	e8 a0 ff ff ff       	call   c0012af2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012b52:	56                   	push   esi
c0012b53:	6a 00                	push   0x0
c0012b55:	53                   	push   ebx
c0012b56:	eb 12                	jmp    c0012b6a <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0012b58:	89 e3                	mov    ebx,esp
c0012b5a:	53                   	push   ebx
c0012b5b:	68 82 00 00 c0       	push   0xc0000082
c0012b60:	e8 8d ff ff ff       	call   c0012af2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012b65:	53                   	push   ebx
c0012b66:	6a 00                	push   0x0
c0012b68:	6a 00                	push   0x0
c0012b6a:	68 82 00 00 c0       	push   0xc0000082
c0012b6f:	e8 62 ff ff ff       	call   c0012ad6 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0012b74:	83 c4 18             	add    esp,0x18
c0012b77:	83 c4 10             	add    esp,0x10
c0012b7a:	5b                   	pop    ebx
c0012b7b:	5e                   	pop    esi
c0012b7c:	c3                   	ret    
c0012b7d:	90                   	nop

c0012b7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0012b7e:	55                   	push   ebp
c0012b7f:	57                   	push   edi
c0012b80:	56                   	push   esi
c0012b81:	53                   	push   ebx
c0012b82:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012b86:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012b8a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0012b8e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0012b92:	39 05 20 5b 02 c0    	cmp    DWORD PTR ds:0xc0025b20,eax
c0012b98:	75 23                	jne    c0012bbd <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0012b9a:	a1 2c 6c 02 c0       	mov    eax,ds:0xc0026c2c
c0012b9f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012ba3:	89 06                	mov    DWORD PTR [esi],eax
c0012ba5:	a1 28 6c 02 c0       	mov    eax,ds:0xc0026c28
c0012baa:	89 07                	mov    DWORD PTR [edi],eax
c0012bac:	a1 24 6c 02 c0       	mov    eax,ds:0xc0026c24
c0012bb1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012bb4:	a1 20 6c 02 c0       	mov    eax,ds:0xc0026c20
c0012bb9:	89 02                	mov    DWORD PTR [edx],eax
c0012bbb:	eb 3f                	jmp    c0012bfc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0012bbd:	31 c9                	xor    ecx,ecx
c0012bbf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012bc3:	0f a2                	cpuid  
c0012bc5:	89 06                	mov    DWORD PTR [esi],eax
c0012bc7:	89 1f                	mov    DWORD PTR [edi],ebx
c0012bc9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012bcd:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0012bd0:	89 10                	mov    DWORD PTR [eax],edx
c0012bd2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012bd6:	a3 20 5b 02 c0       	mov    ds:0xc0025b20,eax
c0012bdb:	8b 06                	mov    eax,DWORD PTR [esi]
c0012bdd:	a3 2c 6c 02 c0       	mov    ds:0xc0026c2c,eax
c0012be2:	8b 07                	mov    eax,DWORD PTR [edi]
c0012be4:	a3 28 6c 02 c0       	mov    ds:0xc0026c28,eax
c0012be9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012bec:	a3 24 6c 02 c0       	mov    ds:0xc0026c24,eax
c0012bf1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012bf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0012bf7:	a3 20 6c 02 c0       	mov    ds:0xc0026c20,eax
c0012bfc:	5b                   	pop    ebx
c0012bfd:	5e                   	pop    esi
c0012bfe:	5f                   	pop    edi
c0012bff:	5d                   	pop    ebp
c0012c00:	c3                   	ret    
c0012c01:	90                   	nop

c0012c02 <CPU::cpuidCheckEDX(unsigned int)>:
c0012c02:	83 ec 10             	sub    esp,0x10
c0012c05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c09:	50                   	push   eax
c0012c0a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c0e:	50                   	push   eax
c0012c0f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c13:	50                   	push   eax
c0012c14:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c18:	50                   	push   eax
c0012c19:	6a 01                	push   0x1
c0012c1b:	e8 5e ff ff ff       	call   c0012b7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012c20:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c24:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0012c28:	0f 95 c0             	setne  al
c0012c2b:	83 c4 24             	add    esp,0x24
c0012c2e:	c3                   	ret    
c0012c2f:	90                   	nop

c0012c30 <CPU::cpuidCheckECX(unsigned int)>:
c0012c30:	83 ec 10             	sub    esp,0x10
c0012c33:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c37:	50                   	push   eax
c0012c38:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c3c:	50                   	push   eax
c0012c3d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c41:	50                   	push   eax
c0012c42:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c46:	50                   	push   eax
c0012c47:	6a 01                	push   0x1
c0012c49:	e8 30 ff ff ff       	call   c0012b7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012c4e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c52:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0012c56:	0f 95 c0             	setne  al
c0012c59:	83 c4 24             	add    esp,0x24
c0012c5c:	c3                   	ret    
c0012c5d:	90                   	nop

c0012c5e <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0012c5e:	83 ec 10             	sub    esp,0x10
c0012c61:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c65:	50                   	push   eax
c0012c66:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c6a:	50                   	push   eax
c0012c6b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c6f:	50                   	push   eax
c0012c70:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c74:	50                   	push   eax
c0012c75:	6a 07                	push   0x7
c0012c77:	e8 02 ff ff ff       	call   c0012b7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012c7c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c80:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0012c84:	0f 95 c0             	setne  al
c0012c87:	83 c4 24             	add    esp,0x24
c0012c8a:	c3                   	ret    
c0012c8b:	90                   	nop

c0012c8c <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0012c8c:	83 ec 10             	sub    esp,0x10
c0012c8f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c93:	50                   	push   eax
c0012c94:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c98:	50                   	push   eax
c0012c99:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012c9d:	50                   	push   eax
c0012c9e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012ca2:	50                   	push   eax
c0012ca3:	6a 07                	push   0x7
c0012ca5:	e8 d4 fe ff ff       	call   c0012b7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012caa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012cae:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0012cb2:	0f 95 c0             	setne  al
c0012cb5:	83 c4 24             	add    esp,0x24
c0012cb8:	c3                   	ret    
c0012cb9:	90                   	nop

c0012cba <CPU::CPU()>:
c0012cba:	83 ec 0c             	sub    esp,0xc
c0012cbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cc1:	83 ec 08             	sub    esp,0x8
c0012cc4:	68 a5 3d 02 c0       	push   0xc0023da5
c0012cc9:	50                   	push   eax
c0012cca:	e8 db b3 ff ff       	call   c000e0aa <Device::Device(char const*)>
c0012ccf:	83 c4 10             	add    esp,0x10
c0012cd2:	ba 08 40 02 c0       	mov    edx,0xc0024008
c0012cd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cdb:	89 10                	mov    DWORD PTR [eax],edx
c0012cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ce1:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0012ceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cef:	05 78 01 00 00       	add    eax,0x178
c0012cf4:	83 ec 0c             	sub    esp,0xc
c0012cf7:	50                   	push   eax
c0012cf8:	e8 5d 65 ff ff       	call   c000925a <GDT::GDT()>
c0012cfd:	83 c4 10             	add    esp,0x10
c0012d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d04:	05 7c 09 00 00       	add    eax,0x97c
c0012d09:	83 ec 0c             	sub    esp,0xc
c0012d0c:	50                   	push   eax
c0012d0d:	e8 9e 67 ff ff       	call   c00094b0 <IDT::IDT()>
c0012d12:	83 c4 10             	add    esp,0x10
c0012d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d19:	05 7c 11 00 00       	add    eax,0x117c
c0012d1e:	83 ec 0c             	sub    esp,0xc
c0012d21:	50                   	push   eax
c0012d22:	e8 55 83 ff ff       	call   c000b07c <TSS::TSS()>
c0012d27:	83 c4 10             	add    esp,0x10
c0012d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d2e:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0012d35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d39:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0012d43:	90                   	nop
c0012d44:	83 c4 0c             	add    esp,0xc
c0012d47:	c3                   	ret    

c0012d48 <CPU::displayFeatures()>:
c0012d48:	c3                   	ret    
c0012d49:	90                   	nop

c0012d4a <CPU::detectFeatures()>:
c0012d4a:	55                   	push   ebp
c0012d4b:	57                   	push   edi
c0012d4c:	56                   	push   esi
c0012d4d:	53                   	push   ebx
c0012d4e:	83 ec 50             	sub    esp,0x50
c0012d51:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0012d55:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0012d5f:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0012d66:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0012d6c:	6a 0d                	push   0xd
c0012d6e:	6a 00                	push   0x0
c0012d70:	55                   	push   ebp
c0012d71:	e8 0e d9 fe ff       	call   c0000684 <memset>
c0012d76:	83 c4 10             	add    esp,0x10
c0012d79:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0012d7e:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0012d85:	0f 84 22 09 00 00    	je     c00136ad <CPU::detectFeatures()+0x963>
c0012d8b:	83 ec 0c             	sub    esp,0xc
c0012d8e:	89 ef                	mov    edi,ebp
c0012d90:	6a 10                	push   0x10
c0012d92:	e8 6b fe ff ff       	call   c0012c02 <CPU::cpuidCheckEDX(unsigned int)>
c0012d97:	83 e0 01             	and    eax,0x1
c0012d9a:	8d 14 00             	lea    edx,[eax+eax*1]
c0012d9d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012da3:	83 e0 fd             	and    eax,0xfffffffd
c0012da6:	09 d0                	or     eax,edx
c0012da8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012dae:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0012db5:	e8 48 fe ff ff       	call   c0012c02 <CPU::cpuidCheckEDX(unsigned int)>
c0012dba:	83 e0 01             	and    eax,0x1
c0012dbd:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0012dc4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012dca:	83 e0 fb             	and    eax,0xfffffffb
c0012dcd:	09 d0                	or     eax,edx
c0012dcf:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012dd5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012ddc:	e8 21 fe ff ff       	call   c0012c02 <CPU::cpuidCheckEDX(unsigned int)>
c0012de1:	83 e0 01             	and    eax,0x1
c0012de4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0012deb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012df1:	83 e0 f7             	and    eax,0xfffffff7
c0012df4:	09 d0                	or     eax,edx
c0012df6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012dfc:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0012e03:	e8 fa fd ff ff       	call   c0012c02 <CPU::cpuidCheckEDX(unsigned int)>
c0012e08:	83 e0 01             	and    eax,0x1
c0012e0b:	c1 e0 04             	shl    eax,0x4
c0012e0e:	88 c2                	mov    dl,al
c0012e10:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012e16:	83 e0 ef             	and    eax,0xffffffef
c0012e19:	09 d0                	or     eax,edx
c0012e1b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012e21:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0012e28:	e8 d5 fd ff ff       	call   c0012c02 <CPU::cpuidCheckEDX(unsigned int)>
c0012e2d:	83 e0 01             	and    eax,0x1
c0012e30:	c1 e0 05             	shl    eax,0x5
c0012e33:	88 c2                	mov    dl,al
c0012e35:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012e3b:	83 e0 df             	and    eax,0xffffffdf
c0012e3e:	09 d0                	or     eax,edx
c0012e40:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012e46:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0012e4d:	e8 b0 fd ff ff       	call   c0012c02 <CPU::cpuidCheckEDX(unsigned int)>
c0012e52:	83 e0 01             	and    eax,0x1
c0012e55:	8d 14 00             	lea    edx,[eax+eax*1]
c0012e58:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0012e5e:	83 e0 fd             	and    eax,0xfffffffd
c0012e61:	09 d0                	or     eax,edx
c0012e63:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0012e69:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0012e70:	e8 8d fd ff ff       	call   c0012c02 <CPU::cpuidCheckEDX(unsigned int)>
c0012e75:	83 e0 01             	and    eax,0x1
c0012e78:	c1 e0 06             	shl    eax,0x6
c0012e7b:	88 c2                	mov    dl,al
c0012e7d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0012e83:	83 e0 bf             	and    eax,0xffffffbf
c0012e86:	09 d0                	or     eax,edx
c0012e88:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0012e8e:	58                   	pop    eax
c0012e8f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012e93:	50                   	push   eax
c0012e94:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012e98:	50                   	push   eax
c0012e99:	8d 74 24 28          	lea    esi,[esp+0x28]
c0012e9d:	56                   	push   esi
c0012e9e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012ea2:	50                   	push   eax
c0012ea3:	6a 00                	push   0x0
c0012ea5:	e8 d4 fc ff ff       	call   c0012b7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012eaa:	b8 04 00 00 00       	mov    eax,0x4
c0012eaf:	89 c1                	mov    ecx,eax
c0012eb1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012eb3:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0012eb9:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012ebd:	89 c1                	mov    ecx,eax
c0012ebf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012ec1:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0012ec7:	8d 74 24 38          	lea    esi,[esp+0x38]
c0012ecb:	89 c1                	mov    ecx,eax
c0012ecd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012ecf:	83 c4 18             	add    esp,0x18
c0012ed2:	68 50 3c 02 c0       	push   0xc0023c50
c0012ed7:	55                   	push   ebp
c0012ed8:	e8 ef d8 fe ff       	call   c00007cc <strcmp>
c0012edd:	83 c4 10             	add    esp,0x10
c0012ee0:	85 c0                	test   eax,eax
c0012ee2:	75 0f                	jne    c0012ef3 <CPU::detectFeatures()+0x1a9>
c0012ee4:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0012eee:	e9 22 02 00 00       	jmp    c0013115 <CPU::detectFeatures()+0x3cb>
c0012ef3:	50                   	push   eax
c0012ef4:	50                   	push   eax
c0012ef5:	68 5d 3c 02 c0       	push   0xc0023c5d
c0012efa:	55                   	push   ebp
c0012efb:	e8 cc d8 fe ff       	call   c00007cc <strcmp>
c0012f00:	83 c4 10             	add    esp,0x10
c0012f03:	85 c0                	test   eax,eax
c0012f05:	74 dd                	je     c0012ee4 <CPU::detectFeatures()+0x19a>
c0012f07:	50                   	push   eax
c0012f08:	50                   	push   eax
c0012f09:	68 6a 3c 02 c0       	push   0xc0023c6a
c0012f0e:	55                   	push   ebp
c0012f0f:	e8 b8 d8 fe ff       	call   c00007cc <strcmp>
c0012f14:	83 c4 10             	add    esp,0x10
c0012f17:	85 c0                	test   eax,eax
c0012f19:	74 2a                	je     c0012f45 <CPU::detectFeatures()+0x1fb>
c0012f1b:	50                   	push   eax
c0012f1c:	50                   	push   eax
c0012f1d:	68 77 3c 02 c0       	push   0xc0023c77
c0012f22:	55                   	push   ebp
c0012f23:	e8 a4 d8 fe ff       	call   c00007cc <strcmp>
c0012f28:	83 c4 10             	add    esp,0x10
c0012f2b:	85 c0                	test   eax,eax
c0012f2d:	74 16                	je     c0012f45 <CPU::detectFeatures()+0x1fb>
c0012f2f:	50                   	push   eax
c0012f30:	50                   	push   eax
c0012f31:	68 84 3c 02 c0       	push   0xc0023c84
c0012f36:	55                   	push   ebp
c0012f37:	e8 90 d8 fe ff       	call   c00007cc <strcmp>
c0012f3c:	83 c4 10             	add    esp,0x10
c0012f3f:	85 c0                	test   eax,eax
c0012f41:	74 48                	je     c0012f8b <CPU::detectFeatures()+0x241>
c0012f43:	eb 0f                	jmp    c0012f54 <CPU::detectFeatures()+0x20a>
c0012f45:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0012f4f:	e9 c1 01 00 00       	jmp    c0013115 <CPU::detectFeatures()+0x3cb>
c0012f54:	50                   	push   eax
c0012f55:	50                   	push   eax
c0012f56:	68 91 3c 02 c0       	push   0xc0023c91
c0012f5b:	55                   	push   ebp
c0012f5c:	e8 6b d8 fe ff       	call   c00007cc <strcmp>
c0012f61:	83 c4 10             	add    esp,0x10
c0012f64:	85 c0                	test   eax,eax
c0012f66:	74 23                	je     c0012f8b <CPU::detectFeatures()+0x241>
c0012f68:	57                   	push   edi
c0012f69:	57                   	push   edi
c0012f6a:	68 9e 3c 02 c0       	push   0xc0023c9e
c0012f6f:	55                   	push   ebp
c0012f70:	e8 57 d8 fe ff       	call   c00007cc <strcmp>
c0012f75:	83 c4 10             	add    esp,0x10
c0012f78:	85 c0                	test   eax,eax
c0012f7a:	75 1e                	jne    c0012f9a <CPU::detectFeatures()+0x250>
c0012f7c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0012f86:	e9 8a 01 00 00       	jmp    c0013115 <CPU::detectFeatures()+0x3cb>
c0012f8b:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0012f95:	e9 7b 01 00 00       	jmp    c0013115 <CPU::detectFeatures()+0x3cb>
c0012f9a:	56                   	push   esi
c0012f9b:	56                   	push   esi
c0012f9c:	68 ab 3c 02 c0       	push   0xc0023cab
c0012fa1:	55                   	push   ebp
c0012fa2:	e8 25 d8 fe ff       	call   c00007cc <strcmp>
c0012fa7:	83 c4 10             	add    esp,0x10
c0012faa:	85 c0                	test   eax,eax
c0012fac:	75 0f                	jne    c0012fbd <CPU::detectFeatures()+0x273>
c0012fae:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0012fb8:	e9 58 01 00 00       	jmp    c0013115 <CPU::detectFeatures()+0x3cb>
c0012fbd:	51                   	push   ecx
c0012fbe:	51                   	push   ecx
c0012fbf:	68 6a 3c 02 c0       	push   0xc0023c6a
c0012fc4:	55                   	push   ebp
c0012fc5:	e8 02 d8 fe ff       	call   c00007cc <strcmp>
c0012fca:	83 c4 10             	add    esp,0x10
c0012fcd:	85 c0                	test   eax,eax
c0012fcf:	75 0f                	jne    c0012fe0 <CPU::detectFeatures()+0x296>
c0012fd1:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0012fdb:	e9 35 01 00 00       	jmp    c0013115 <CPU::detectFeatures()+0x3cb>
c0012fe0:	52                   	push   edx
c0012fe1:	52                   	push   edx
c0012fe2:	68 b8 3c 02 c0       	push   0xc0023cb8
c0012fe7:	55                   	push   ebp
c0012fe8:	e8 df d7 fe ff       	call   c00007cc <strcmp>
c0012fed:	83 c4 10             	add    esp,0x10
c0012ff0:	85 c0                	test   eax,eax
c0012ff2:	75 0f                	jne    c0013003 <CPU::detectFeatures()+0x2b9>
c0012ff4:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0012ffe:	e9 12 01 00 00       	jmp    c0013115 <CPU::detectFeatures()+0x3cb>
c0013003:	50                   	push   eax
c0013004:	50                   	push   eax
c0013005:	68 c5 3c 02 c0       	push   0xc0023cc5
c001300a:	55                   	push   ebp
c001300b:	e8 bc d7 fe ff       	call   c00007cc <strcmp>
c0013010:	83 c4 10             	add    esp,0x10
c0013013:	85 c0                	test   eax,eax
c0013015:	75 0f                	jne    c0013026 <CPU::detectFeatures()+0x2dc>
c0013017:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0013021:	e9 ef 00 00 00       	jmp    c0013115 <CPU::detectFeatures()+0x3cb>
c0013026:	50                   	push   eax
c0013027:	50                   	push   eax
c0013028:	68 d2 3c 02 c0       	push   0xc0023cd2
c001302d:	55                   	push   ebp
c001302e:	e8 99 d7 fe ff       	call   c00007cc <strcmp>
c0013033:	83 c4 10             	add    esp,0x10
c0013036:	85 c0                	test   eax,eax
c0013038:	75 0f                	jne    c0013049 <CPU::detectFeatures()+0x2ff>
c001303a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0013044:	e9 cc 00 00 00       	jmp    c0013115 <CPU::detectFeatures()+0x3cb>
c0013049:	50                   	push   eax
c001304a:	50                   	push   eax
c001304b:	68 df 3c 02 c0       	push   0xc0023cdf
c0013050:	55                   	push   ebp
c0013051:	e8 76 d7 fe ff       	call   c00007cc <strcmp>
c0013056:	83 c4 10             	add    esp,0x10
c0013059:	85 c0                	test   eax,eax
c001305b:	75 0f                	jne    c001306c <CPU::detectFeatures()+0x322>
c001305d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0013067:	e9 a9 00 00 00       	jmp    c0013115 <CPU::detectFeatures()+0x3cb>
c001306c:	50                   	push   eax
c001306d:	50                   	push   eax
c001306e:	68 ec 3c 02 c0       	push   0xc0023cec
c0013073:	55                   	push   ebp
c0013074:	e8 53 d7 fe ff       	call   c00007cc <strcmp>
c0013079:	83 c4 10             	add    esp,0x10
c001307c:	85 c0                	test   eax,eax
c001307e:	75 0f                	jne    c001308f <CPU::detectFeatures()+0x345>
c0013080:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001308a:	e9 86 00 00 00       	jmp    c0013115 <CPU::detectFeatures()+0x3cb>
c001308f:	50                   	push   eax
c0013090:	50                   	push   eax
c0013091:	68 f9 3c 02 c0       	push   0xc0023cf9
c0013096:	55                   	push   ebp
c0013097:	e8 30 d7 fe ff       	call   c00007cc <strcmp>
c001309c:	83 c4 10             	add    esp,0x10
c001309f:	85 c0                	test   eax,eax
c00130a1:	75 0c                	jne    c00130af <CPU::detectFeatures()+0x365>
c00130a3:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00130ad:	eb 66                	jmp    c0013115 <CPU::detectFeatures()+0x3cb>
c00130af:	50                   	push   eax
c00130b0:	50                   	push   eax
c00130b1:	68 06 3d 02 c0       	push   0xc0023d06
c00130b6:	55                   	push   ebp
c00130b7:	e8 10 d7 fe ff       	call   c00007cc <strcmp>
c00130bc:	83 c4 10             	add    esp,0x10
c00130bf:	85 c0                	test   eax,eax
c00130c1:	75 0c                	jne    c00130cf <CPU::detectFeatures()+0x385>
c00130c3:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00130cd:	eb 46                	jmp    c0013115 <CPU::detectFeatures()+0x3cb>
c00130cf:	57                   	push   edi
c00130d0:	57                   	push   edi
c00130d1:	68 13 3d 02 c0       	push   0xc0023d13
c00130d6:	55                   	push   ebp
c00130d7:	e8 f0 d6 fe ff       	call   c00007cc <strcmp>
c00130dc:	83 c4 10             	add    esp,0x10
c00130df:	85 c0                	test   eax,eax
c00130e1:	74 e0                	je     c00130c3 <CPU::detectFeatures()+0x379>
c00130e3:	56                   	push   esi
c00130e4:	56                   	push   esi
c00130e5:	68 20 3d 02 c0       	push   0xc0023d20
c00130ea:	55                   	push   ebp
c00130eb:	e8 dc d6 fe ff       	call   c00007cc <strcmp>
c00130f0:	83 c4 10             	add    esp,0x10
c00130f3:	85 c0                	test   eax,eax
c00130f5:	74 cc                	je     c00130c3 <CPU::detectFeatures()+0x379>
c00130f7:	51                   	push   ecx
c00130f8:	51                   	push   ecx
c00130f9:	68 2d 3d 02 c0       	push   0xc0023d2d
c00130fe:	55                   	push   ebp
c00130ff:	e8 c8 d6 fe ff       	call   c00007cc <strcmp>
c0013104:	83 c4 10             	add    esp,0x10
c0013107:	85 c0                	test   eax,eax
c0013109:	74 b8                	je     c00130c3 <CPU::detectFeatures()+0x379>
c001310b:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0013115:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001311a:	0f 86 be 00 00 00    	jbe    c00131de <CPU::detectFeatures()+0x494>
c0013120:	83 ec 0c             	sub    esp,0xc
c0013123:	68 80 00 00 00       	push   0x80
c0013128:	e8 31 fb ff ff       	call   c0012c5e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001312d:	83 e0 01             	and    eax,0x1
c0013130:	c1 e0 06             	shl    eax,0x6
c0013133:	88 c2                	mov    dl,al
c0013135:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001313b:	83 e0 bf             	and    eax,0xffffffbf
c001313e:	09 d0                	or     eax,edx
c0013140:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013146:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001314d:	e8 0c fb ff ff       	call   c0012c5e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013152:	83 e0 01             	and    eax,0x1
c0013155:	c1 e0 04             	shl    eax,0x4
c0013158:	88 c2                	mov    dl,al
c001315a:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013160:	83 e0 ef             	and    eax,0xffffffef
c0013163:	09 d0                	or     eax,edx
c0013165:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001316b:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0013172:	e8 e7 fa ff ff       	call   c0012c5e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013177:	c1 e0 07             	shl    eax,0x7
c001317a:	88 c2                	mov    dl,al
c001317c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013182:	83 e0 7f             	and    eax,0x7f
c0013185:	09 d0                	or     eax,edx
c0013187:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001318d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013194:	e8 f3 fa ff ff       	call   c0012c8c <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013199:	83 e0 01             	and    eax,0x1
c001319c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00131a3:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00131a9:	83 e0 f7             	and    eax,0xfffffff7
c00131ac:	09 d0                	or     eax,edx
c00131ae:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00131b4:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00131bb:	e8 cc fa ff ff       	call   c0012c8c <CPU::cpuidCheckExtendedECX(unsigned int)>
c00131c0:	83 c4 10             	add    esp,0x10
c00131c3:	83 e0 01             	and    eax,0x1
c00131c6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00131cd:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00131d3:	83 e0 fb             	and    eax,0xfffffffb
c00131d6:	09 d0                	or     eax,edx
c00131d8:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00131de:	83 ec 0c             	sub    esp,0xc
c00131e1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00131e5:	50                   	push   eax
c00131e6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00131ea:	50                   	push   eax
c00131eb:	8d 74 24 28          	lea    esi,[esp+0x28]
c00131ef:	56                   	push   esi
c00131f0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00131f4:	50                   	push   eax
c00131f5:	6a 01                	push   0x1
c00131f7:	e8 82 f9 ff ff       	call   c0012b7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00131fc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013200:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013206:	88 ca                	mov    dl,cl
c0013208:	83 e0 f0             	and    eax,0xfffffff0
c001320b:	83 e2 0f             	and    edx,0xf
c001320e:	09 d0                	or     eax,edx
c0013210:	88 ca                	mov    dl,cl
c0013212:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0013218:	c0 ea 04             	shr    dl,0x4
c001321b:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001321f:	0f b6 c2             	movzx  eax,dl
c0013222:	83 c4 20             	add    esp,0x20
c0013225:	c1 e0 06             	shl    eax,0x6
c0013228:	89 c7                	mov    edi,eax
c001322a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013230:	66 25 3f c0          	and    ax,0xc03f
c0013234:	09 f8                	or     eax,edi
c0013236:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001323d:	89 c8                	mov    eax,ecx
c001323f:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0013246:	c1 e8 08             	shr    eax,0x8
c0013249:	83 e5 3f             	and    ebp,0x3f
c001324c:	83 e0 0f             	and    eax,0xf
c001324f:	89 c7                	mov    edi,eax
c0013251:	c1 e7 06             	shl    edi,0x6
c0013254:	09 ef                	or     edi,ebp
c0013256:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c001325d:	89 fa                	mov    edx,edi
c001325f:	83 e5 c0             	and    ebp,0xffffffc0
c0013262:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0013268:	88 c2                	mov    dl,al
c001326a:	c0 ea 02             	shr    dl,0x2
c001326d:	89 d7                	mov    edi,edx
c001326f:	09 ef                	or     edi,ebp
c0013271:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0013277:	89 fa                	mov    edx,edi
c0013279:	83 e5 cf             	and    ebp,0xffffffcf
c001327c:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0013282:	89 cf                	mov    edi,ecx
c0013284:	c1 ef 0c             	shr    edi,0xc
c0013287:	83 e7 03             	and    edi,0x3
c001328a:	c1 e7 04             	shl    edi,0x4
c001328d:	09 ef                	or     edi,ebp
c001328f:	3c 06                	cmp    al,0x6
c0013291:	89 fa                	mov    edx,edi
c0013293:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0013299:	74 04                	je     c001329f <CPU::detectFeatures()+0x555>
c001329b:	3c 0f                	cmp    al,0xf
c001329d:	75 5c                	jne    c00132fb <CPU::detectFeatures()+0x5b1>
c001329f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00132a3:	89 cf                	mov    edi,ecx
c00132a5:	c1 ef 10             	shr    edi,0x10
c00132a8:	c1 e7 04             	shl    edi,0x4
c00132ab:	09 fa                	or     edx,edi
c00132ad:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c00132b3:	0f b6 d2             	movzx  edx,dl
c00132b6:	66 81 e7 3f c0       	and    di,0xc03f
c00132bb:	c1 e2 06             	shl    edx,0x6
c00132be:	09 fa                	or     edx,edi
c00132c0:	3c 0f                	cmp    al,0xf
c00132c2:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00132c9:	75 30                	jne    c00132fb <CPU::detectFeatures()+0x5b1>
c00132cb:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00132d1:	c1 e9 14             	shr    ecx,0x14
c00132d4:	83 e0 3f             	and    eax,0x3f
c00132d7:	83 c1 0f             	add    ecx,0xf
c00132da:	88 ca                	mov    dl,cl
c00132dc:	c0 e9 02             	shr    cl,0x2
c00132df:	c1 e2 06             	shl    edx,0x6
c00132e2:	09 d0                	or     eax,edx
c00132e4:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00132ea:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00132f0:	83 e0 c0             	and    eax,0xffffffc0
c00132f3:	09 c1                	or     ecx,eax
c00132f5:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00132fb:	83 ec 0c             	sub    esp,0xc
c00132fe:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013305:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013309:	50                   	push   eax
c001330a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001330e:	55                   	push   ebp
c001330f:	56                   	push   esi
c0013310:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0013314:	57                   	push   edi
c0013315:	68 00 00 00 80       	push   0x80000000
c001331a:	e8 5f f8 ff ff       	call   c0012b7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001331f:	83 c4 20             	add    esp,0x20
c0013322:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001332a:	76 22                	jbe    c001334e <CPU::detectFeatures()+0x604>
c001332c:	83 ec 0c             	sub    esp,0xc
c001332f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013333:	50                   	push   eax
c0013334:	55                   	push   ebp
c0013335:	56                   	push   esi
c0013336:	57                   	push   edi
c0013337:	68 01 00 00 80       	push   0x80000001
c001333c:	e8 3d f8 ff ff       	call   c0012b7e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013341:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001334b:	83 c4 20             	add    esp,0x20
c001334e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0013354:	83 f8 01             	cmp    eax,0x1
c0013357:	75 6f                	jne    c00133c8 <CPU::detectFeatures()+0x67e>
c0013359:	51                   	push   ecx
c001335a:	51                   	push   ecx
c001335b:	68 39 3d 02 c0       	push   0xc0023d39
c0013360:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013364:	56                   	push   esi
c0013365:	e8 d6 d3 fe ff       	call   c0000740 <strcpy>
c001336a:	5f                   	pop    edi
c001336b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013371:	5d                   	pop    ebp
c0013372:	66 c1 e8 06          	shr    ax,0x6
c0013376:	0f b6 c0             	movzx  eax,al
c0013379:	50                   	push   eax
c001337a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013380:	c1 e8 0e             	shr    eax,0xe
c0013383:	0f b6 c0             	movzx  eax,al
c0013386:	50                   	push   eax
c0013387:	e8 9c f4 ff ff       	call   c0012828 <CPU::lookupIntelName(unsigned char, unsigned char)>
c001338c:	5a                   	pop    edx
c001338d:	59                   	pop    ecx
c001338e:	50                   	push   eax
c001338f:	56                   	push   esi
c0013390:	e8 eb d4 fe ff       	call   c0000880 <strcat>
c0013395:	5f                   	pop    edi
c0013396:	5d                   	pop    ebp
c0013397:	56                   	push   esi
c0013398:	53                   	push   ebx
c0013399:	e8 fe ac ff ff       	call   c000e09c <Device::setName(char const*)>
c001339e:	58                   	pop    eax
c001339f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00133a5:	5a                   	pop    edx
c00133a6:	68 40 3d 02 c0       	push   0xc0023d40
c00133ab:	50                   	push   eax
c00133ac:	e8 1b d4 fe ff       	call   c00007cc <strcmp>
c00133b1:	83 c4 10             	add    esp,0x10
c00133b4:	85 c0                	test   eax,eax
c00133b6:	0f 85 71 03 00 00    	jne    c001372d <CPU::detectFeatures()+0x9e3>
c00133bc:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00133c3:	e9 65 03 00 00       	jmp    c001372d <CPU::detectFeatures()+0x9e3>
c00133c8:	83 f8 02             	cmp    eax,0x2
c00133cb:	0f 85 b5 00 00 00    	jne    c0013486 <CPU::detectFeatures()+0x73c>
c00133d1:	57                   	push   edi
c00133d2:	57                   	push   edi
c00133d3:	68 52 3d 02 c0       	push   0xc0023d52
c00133d8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00133dc:	56                   	push   esi
c00133dd:	e8 5e d3 fe ff       	call   c0000740 <strcpy>
c00133e2:	5d                   	pop    ebp
c00133e3:	58                   	pop    eax
c00133e4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00133ea:	66 c1 e8 06          	shr    ax,0x6
c00133ee:	0f b6 c0             	movzx  eax,al
c00133f1:	50                   	push   eax
c00133f2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00133f8:	c1 e8 0e             	shr    eax,0xe
c00133fb:	0f b6 c0             	movzx  eax,al
c00133fe:	50                   	push   eax
c00133ff:	e8 90 f2 ff ff       	call   c0012694 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0013404:	5a                   	pop    edx
c0013405:	59                   	pop    ecx
c0013406:	50                   	push   eax
c0013407:	56                   	push   esi
c0013408:	e8 73 d4 fe ff       	call   c0000880 <strcat>
c001340d:	5f                   	pop    edi
c001340e:	5d                   	pop    ebp
c001340f:	56                   	push   esi
c0013410:	53                   	push   ebx
c0013411:	e8 86 ac ff ff       	call   c000e09c <Device::setName(char const*)>
c0013416:	58                   	pop    eax
c0013417:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001341d:	5a                   	pop    edx
c001341e:	68 57 3d 02 c0       	push   0xc0023d57
c0013423:	50                   	push   eax
c0013424:	e8 a3 d3 fe ff       	call   c00007cc <strcmp>
c0013429:	83 c4 10             	add    esp,0x10
c001342c:	85 c0                	test   eax,eax
c001342e:	75 20                	jne    c0013450 <CPU::detectFeatures()+0x706>
c0013430:	8b 15 68 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026168
c0013436:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001343c:	a8 01                	test   al,0x1
c001343e:	74 10                	je     c0013450 <CPU::detectFeatures()+0x706>
c0013440:	83 e0 fe             	and    eax,0xfffffffe
c0013443:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0013449:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0013450:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013456:	c1 e8 0e             	shr    eax,0xe
c0013459:	3c 05                	cmp    al,0x5
c001345b:	0f 85 cc 02 00 00    	jne    c001372d <CPU::detectFeatures()+0x9e3>
c0013461:	56                   	push   esi
c0013462:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013468:	83 e0 0f             	and    eax,0xf
c001346b:	50                   	push   eax
c001346c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013472:	66 c1 e8 06          	shr    ax,0x6
c0013476:	0f b6 c0             	movzx  eax,al
c0013479:	50                   	push   eax
c001347a:	6a 05                	push   0x5
c001347c:	e8 89 f6 ff ff       	call   c0012b0a <CPU::AMD_K6_writeback(int, int, int)>
c0013481:	e9 1f 02 00 00       	jmp    c00136a5 <CPU::detectFeatures()+0x95b>
c0013486:	8d 50 fd             	lea    edx,[eax-0x3]
c0013489:	83 fa 01             	cmp    edx,0x1
c001348c:	76 09                	jbe    c0013497 <CPU::detectFeatures()+0x74d>
c001348e:	83 f8 06             	cmp    eax,0x6
c0013491:	0f 85 91 01 00 00    	jne    c0013628 <CPU::detectFeatures()+0x8de>
c0013497:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001349d:	c1 ea 0e             	shr    edx,0xe
c00134a0:	80 fa 05             	cmp    dl,0x5
c00134a3:	75 7b                	jne    c0013520 <CPU::detectFeatures()+0x7d6>
c00134a5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00134ab:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00134b0:	66 81 fa 00 01       	cmp    dx,0x100
c00134b5:	75 0c                	jne    c00134c3 <CPU::detectFeatures()+0x779>
c00134b7:	51                   	push   ecx
c00134b8:	51                   	push   ecx
c00134b9:	68 5e 3d 02 c0       	push   0xc0023d5e
c00134be:	e9 dc 01 00 00       	jmp    c001369f <CPU::detectFeatures()+0x955>
c00134c3:	66 81 fa 00 02       	cmp    dx,0x200
c00134c8:	75 0c                	jne    c00134d6 <CPU::detectFeatures()+0x78c>
c00134ca:	52                   	push   edx
c00134cb:	52                   	push   edx
c00134cc:	68 71 3d 02 c0       	push   0xc0023d71
c00134d1:	e9 c9 01 00 00       	jmp    c001369f <CPU::detectFeatures()+0x955>
c00134d6:	66 81 fa 40 02       	cmp    dx,0x240
c00134db:	75 0c                	jne    c00134e9 <CPU::detectFeatures()+0x79f>
c00134dd:	50                   	push   eax
c00134de:	50                   	push   eax
c00134df:	68 83 3d 02 c0       	push   0xc0023d83
c00134e4:	e9 b6 01 00 00       	jmp    c001369f <CPU::detectFeatures()+0x955>
c00134e9:	83 f8 06             	cmp    eax,0x6
c00134ec:	75 0c                	jne    c00134fa <CPU::detectFeatures()+0x7b0>
c00134ee:	50                   	push   eax
c00134ef:	50                   	push   eax
c00134f0:	68 95 3d 02 c0       	push   0xc0023d95
c00134f5:	e9 a5 01 00 00       	jmp    c001369f <CPU::detectFeatures()+0x955>
c00134fa:	83 f8 04             	cmp    eax,0x4
c00134fd:	75 0c                	jne    c001350b <CPU::detectFeatures()+0x7c1>
c00134ff:	50                   	push   eax
c0013500:	50                   	push   eax
c0013501:	68 a1 3d 02 c0       	push   0xc0023da1
c0013506:	e9 94 01 00 00       	jmp    c001369f <CPU::detectFeatures()+0x955>
c001350b:	83 f8 03             	cmp    eax,0x3
c001350e:	0f 85 19 02 00 00    	jne    c001372d <CPU::detectFeatures()+0x9e3>
c0013514:	50                   	push   eax
c0013515:	50                   	push   eax
c0013516:	68 a9 3d 02 c0       	push   0xc0023da9
c001351b:	e9 7f 01 00 00       	jmp    c001369f <CPU::detectFeatures()+0x955>
c0013520:	80 fa 06             	cmp    dl,0x6
c0013523:	0f 85 db 00 00 00    	jne    c0013604 <CPU::detectFeatures()+0x8ba>
c0013529:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001352f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013534:	66 81 fa 80 01       	cmp    dx,0x180
c0013539:	75 0c                	jne    c0013547 <CPU::detectFeatures()+0x7fd>
c001353b:	50                   	push   eax
c001353c:	50                   	push   eax
c001353d:	68 b4 3d 02 c0       	push   0xc0023db4
c0013542:	e9 58 01 00 00       	jmp    c001369f <CPU::detectFeatures()+0x955>
c0013547:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001354d:	66 f7 c1 80 ff       	test   cx,0xff80
c0013552:	75 0c                	jne    c0013560 <CPU::detectFeatures()+0x816>
c0013554:	50                   	push   eax
c0013555:	50                   	push   eax
c0013556:	68 c4 3d 02 c0       	push   0xc0023dc4
c001355b:	e9 3f 01 00 00       	jmp    c001369f <CPU::detectFeatures()+0x955>
c0013560:	66 81 fa 40 02       	cmp    dx,0x240
c0013565:	75 0c                	jne    c0013573 <CPU::detectFeatures()+0x829>
c0013567:	55                   	push   ebp
c0013568:	55                   	push   ebp
c0013569:	68 cb 3d 02 c0       	push   0xc0023dcb
c001356e:	e9 2c 01 00 00       	jmp    c001369f <CPU::detectFeatures()+0x955>
c0013573:	66 81 fa 80 02       	cmp    dx,0x280
c0013578:	75 0c                	jne    c0013586 <CPU::detectFeatures()+0x83c>
c001357a:	57                   	push   edi
c001357b:	57                   	push   edi
c001357c:	68 d4 3d 02 c0       	push   0xc0023dd4
c0013581:	e9 19 01 00 00       	jmp    c001369f <CPU::detectFeatures()+0x955>
c0013586:	66 81 fa 40 03       	cmp    dx,0x340
c001358b:	74 ed                	je     c001357a <CPU::detectFeatures()+0x830>
c001358d:	66 81 fa c0 03       	cmp    dx,0x3c0
c0013592:	75 0c                	jne    c00135a0 <CPU::detectFeatures()+0x856>
c0013594:	56                   	push   esi
c0013595:	56                   	push   esi
c0013596:	68 db 3d 02 c0       	push   0xc0023ddb
c001359b:	e9 ff 00 00 00       	jmp    c001369f <CPU::detectFeatures()+0x955>
c00135a0:	83 f8 06             	cmp    eax,0x6
c00135a3:	0f 84 45 ff ff ff    	je     c00134ee <CPU::detectFeatures()+0x7a4>
c00135a9:	83 f8 04             	cmp    eax,0x4
c00135ac:	0f 84 4d ff ff ff    	je     c00134ff <CPU::detectFeatures()+0x7b5>
c00135b2:	83 f8 03             	cmp    eax,0x3
c00135b5:	0f 85 72 01 00 00    	jne    c001372d <CPU::detectFeatures()+0x9e3>
c00135bb:	51                   	push   ecx
c00135bc:	51                   	push   ecx
c00135bd:	68 e4 3d 02 c0       	push   0xc0023de4
c00135c2:	53                   	push   ebx
c00135c3:	e8 d4 aa ff ff       	call   c000e09c <Device::setName(char const*)>
c00135c8:	b1 c1                	mov    cl,0xc1
c00135ca:	88 c8                	mov    al,cl
c00135cc:	e6 22                	out    0x22,al
c00135ce:	e4 23                	in     al,0x23
c00135d0:	88 c2                	mov    dl,al
c00135d2:	88 c8                	mov    al,cl
c00135d4:	e6 22                	out    0x22,al
c00135d6:	88 d0                	mov    al,dl
c00135d8:	83 c8 10             	or     eax,0x10
c00135db:	e6 23                	out    0x23,al
c00135dd:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00135e4:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00135e7:	89 d0                	mov    eax,edx
c00135e9:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00135ef:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00135f3:	40                   	inc    eax
c00135f4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00135fa:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00135ff:	e9 a1 00 00 00       	jmp    c00136a5 <CPU::detectFeatures()+0x95b>
c0013604:	83 f8 06             	cmp    eax,0x6
c0013607:	0f 84 e1 fe ff ff    	je     c00134ee <CPU::detectFeatures()+0x7a4>
c001360d:	83 f8 04             	cmp    eax,0x4
c0013610:	0f 84 e9 fe ff ff    	je     c00134ff <CPU::detectFeatures()+0x7b5>
c0013616:	83 f8 03             	cmp    eax,0x3
c0013619:	0f 85 0e 01 00 00    	jne    c001372d <CPU::detectFeatures()+0x9e3>
c001361f:	52                   	push   edx
c0013620:	52                   	push   edx
c0013621:	68 ef 3d 02 c0       	push   0xc0023def
c0013626:	eb 77                	jmp    c001369f <CPU::detectFeatures()+0x955>
c0013628:	83 f8 07             	cmp    eax,0x7
c001362b:	75 09                	jne    c0013636 <CPU::detectFeatures()+0x8ec>
c001362d:	50                   	push   eax
c001362e:	50                   	push   eax
c001362f:	68 f9 3d 02 c0       	push   0xc0023df9
c0013634:	eb 69                	jmp    c001369f <CPU::detectFeatures()+0x955>
c0013636:	83 f8 0a             	cmp    eax,0xa
c0013639:	75 09                	jne    c0013644 <CPU::detectFeatures()+0x8fa>
c001363b:	50                   	push   eax
c001363c:	50                   	push   eax
c001363d:	68 04 3e 02 c0       	push   0xc0023e04
c0013642:	eb 5b                	jmp    c001369f <CPU::detectFeatures()+0x955>
c0013644:	83 f8 0b             	cmp    eax,0xb
c0013647:	75 09                	jne    c0013652 <CPU::detectFeatures()+0x908>
c0013649:	50                   	push   eax
c001364a:	50                   	push   eax
c001364b:	68 0c 3e 02 c0       	push   0xc0023e0c
c0013650:	eb 4d                	jmp    c001369f <CPU::detectFeatures()+0x955>
c0013652:	83 f8 08             	cmp    eax,0x8
c0013655:	75 09                	jne    c0013660 <CPU::detectFeatures()+0x916>
c0013657:	50                   	push   eax
c0013658:	50                   	push   eax
c0013659:	68 15 3e 02 c0       	push   0xc0023e15
c001365e:	eb 3f                	jmp    c001369f <CPU::detectFeatures()+0x955>
c0013660:	83 f8 09             	cmp    eax,0x9
c0013663:	75 09                	jne    c001366e <CPU::detectFeatures()+0x924>
c0013665:	50                   	push   eax
c0013666:	50                   	push   eax
c0013667:	68 1d 3e 02 c0       	push   0xc0023e1d
c001366c:	eb 31                	jmp    c001369f <CPU::detectFeatures()+0x955>
c001366e:	83 f8 05             	cmp    eax,0x5
c0013671:	75 09                	jne    c001367c <CPU::detectFeatures()+0x932>
c0013673:	50                   	push   eax
c0013674:	50                   	push   eax
c0013675:	68 25 3e 02 c0       	push   0xc0023e25
c001367a:	eb 23                	jmp    c001369f <CPU::detectFeatures()+0x955>
c001367c:	83 f8 0c             	cmp    eax,0xc
c001367f:	75 09                	jne    c001368a <CPU::detectFeatures()+0x940>
c0013681:	55                   	push   ebp
c0013682:	55                   	push   ebp
c0013683:	68 33 3e 02 c0       	push   0xc0023e33
c0013688:	eb 15                	jmp    c001369f <CPU::detectFeatures()+0x955>
c001368a:	83 f8 0d             	cmp    eax,0xd
c001368d:	75 09                	jne    c0013698 <CPU::detectFeatures()+0x94e>
c001368f:	57                   	push   edi
c0013690:	57                   	push   edi
c0013691:	68 3e 3e 02 c0       	push   0xc0023e3e
c0013696:	eb 07                	jmp    c001369f <CPU::detectFeatures()+0x955>
c0013698:	56                   	push   esi
c0013699:	56                   	push   esi
c001369a:	68 52 3e 02 c0       	push   0xc0023e52
c001369f:	53                   	push   ebx
c00136a0:	e8 f7 a9 ff ff       	call   c000e09c <Device::setName(char const*)>
c00136a5:	83 c4 10             	add    esp,0x10
c00136a8:	e9 80 00 00 00       	jmp    c001372d <CPU::detectFeatures()+0x9e3>
c00136ad:	51                   	push   ecx
c00136ae:	51                   	push   ecx
c00136af:	68 9e 3c 02 c0       	push   0xc0023c9e
c00136b4:	55                   	push   ebp
c00136b5:	e8 86 d0 fe ff       	call   c0000740 <strcpy>
c00136ba:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00136c4:	e8 1a cb fe ff       	call   c00001e3 <is486>
c00136c9:	83 c4 10             	add    esp,0x10
c00136cc:	85 c0                	test   eax,eax
c00136ce:	74 2b                	je     c00136fb <CPU::detectFeatures()+0x9b1>
c00136d0:	52                   	push   edx
c00136d1:	52                   	push   edx
c00136d2:	68 5e 3e 02 c0       	push   0xc0023e5e
c00136d7:	53                   	push   ebx
c00136d8:	e8 bf a9 ff ff       	call   c000e09c <Device::setName(char const*)>
c00136dd:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00136e4:	0f 20 c0             	mov    eax,cr0
c00136e7:	83 e0 14             	and    eax,0x14
c00136ea:	83 c4 10             	add    esp,0x10
c00136ed:	83 f8 04             	cmp    eax,0x4
c00136f0:	75 1f                	jne    c0013711 <CPU::detectFeatures()+0x9c7>
c00136f2:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00136f9:	eb 32                	jmp    c001372d <CPU::detectFeatures()+0x9e3>
c00136fb:	50                   	push   eax
c00136fc:	50                   	push   eax
c00136fd:	68 69 3e 02 c0       	push   0xc0023e69
c0013702:	53                   	push   ebx
c0013703:	e8 94 a9 ff ff       	call   c000e09c <Device::setName(char const*)>
c0013708:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001370f:	eb d3                	jmp    c00136e4 <CPU::detectFeatures()+0x99a>
c0013711:	e8 a8 ca fe ff       	call   c00001be <hasLegacyFPU>
c0013716:	83 e0 01             	and    eax,0x1
c0013719:	8d 14 00             	lea    edx,[eax+eax*1]
c001371c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013722:	83 e0 fd             	and    eax,0xfffffffd
c0013725:	09 d0                	or     eax,edx
c0013727:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001372d:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0013734:	83 c4 4c             	add    esp,0x4c
c0013737:	5b                   	pop    ebx
c0013738:	5e                   	pop    esi
c0013739:	5f                   	pop    edi
c001373a:	5d                   	pop    ebp
c001373b:	c3                   	ret    

c001373c <CPU::setupSMEP()>:
c001373c:	0f 20 e0             	mov    eax,cr4
c001373f:	0d 00 00 10 00       	or     eax,0x100000
c0013744:	0f 22 e0             	mov    cr4,eax
c0013747:	c3                   	ret    

c0013748 <CPU::setupUMIP()>:
c0013748:	0f 20 e0             	mov    eax,cr4
c001374b:	80 cc 08             	or     ah,0x8
c001374e:	0f 22 e0             	mov    cr4,eax
c0013751:	c3                   	ret    

c0013752 <CPU::setupTSC()>:
c0013752:	0f 20 e0             	mov    eax,cr4
c0013755:	83 c8 04             	or     eax,0x4
c0013758:	0f 22 e0             	mov    cr4,eax
c001375b:	c3                   	ret    

c001375c <CPU::setupLargePages()>:
c001375c:	0f 20 e0             	mov    eax,cr4
c001375f:	83 c8 10             	or     eax,0x10
c0013762:	0f 22 e0             	mov    cr4,eax
c0013765:	c3                   	ret    

c0013766 <CPU::setupPAT()>:
c0013766:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001376b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013772:	74 2c                	je     c00137a0 <CPU::setupPAT()+0x3a>
c0013774:	53                   	push   ebx
c0013775:	83 ec 10             	sub    esp,0x10
c0013778:	68 77 02 00 00       	push   0x277
c001377d:	50                   	push   eax
c001377e:	e8 a1 57 ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c0013783:	83 e2 f8             	and    edx,0xfffffff8
c0013786:	83 ca 01             	or     edx,0x1
c0013789:	52                   	push   edx
c001378a:	50                   	push   eax
c001378b:	68 77 02 00 00       	push   0x277
c0013790:	ff 35 68 61 02 c0    	push   DWORD PTR ds:0xc0026168
c0013796:	e8 b5 57 ff ff       	call   c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>
c001379b:	83 c4 28             	add    esp,0x28
c001379e:	5b                   	pop    ebx
c001379f:	c3                   	ret    
c00137a0:	c3                   	ret    
c00137a1:	90                   	nop

c00137a2 <CPU::setupMTRR()>:
c00137a2:	c3                   	ret    
c00137a3:	90                   	nop

c00137a4 <CPU::setupGlobalPages()>:
c00137a4:	0f 20 e0             	mov    eax,cr4
c00137a7:	0c 80                	or     al,0x80
c00137a9:	0f 22 e0             	mov    cr4,eax
c00137ac:	c3                   	ret    
c00137ad:	90                   	nop

c00137ae <CPU::allowUsermodeDataAccess()>:
c00137ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137b2:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00137b9:	74 03                	je     c00137be <CPU::allowUsermodeDataAccess()+0x10>
c00137bb:	0f 01 cb             	stac   
c00137be:	c3                   	ret    
c00137bf:	90                   	nop

c00137c0 <CPU::prohibitUsermodeDataAccess()>:
c00137c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137c4:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00137cb:	74 03                	je     c00137d0 <CPU::prohibitUsermodeDataAccess()+0x10>
c00137cd:	0f 01 ca             	clac   
c00137d0:	c3                   	ret    
c00137d1:	90                   	nop

c00137d2 <CPU::setupSMAP()>:
c00137d2:	0f 20 e0             	mov    eax,cr4
c00137d5:	0d 00 00 20 00       	or     eax,0x200000
c00137da:	0f 22 e0             	mov    cr4,eax
c00137dd:	eb e1                	jmp    c00137c0 <CPU::prohibitUsermodeDataAccess()>
c00137df:	90                   	nop

c00137e0 <CPU::setupFeatures()>:
c00137e0:	53                   	push   ebx
c00137e1:	83 ec 08             	sub    esp,0x8
c00137e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00137e8:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00137ef:	74 18                	je     c0013809 <CPU::setupFeatures()+0x29>
c00137f1:	83 ec 0c             	sub    esp,0xc
c00137f4:	68 74 3e 02 c0       	push   0xc0023e74
c00137f9:	e8 61 92 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c00137fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013801:	e8 42 ff ff ff       	call   c0013748 <CPU::setupUMIP()>
c0013806:	83 c4 10             	add    esp,0x10
c0013809:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0013810:	74 18                	je     c001382a <CPU::setupFeatures()+0x4a>
c0013812:	83 ec 0c             	sub    esp,0xc
c0013815:	68 7e 3e 02 c0       	push   0xc0023e7e
c001381a:	e8 40 92 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001381f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013822:	e8 2b ff ff ff       	call   c0013752 <CPU::setupTSC()>
c0013827:	83 c4 10             	add    esp,0x10
c001382a:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0013831:	74 18                	je     c001384b <CPU::setupFeatures()+0x6b>
c0013833:	83 ec 0c             	sub    esp,0xc
c0013836:	68 87 3e 02 c0       	push   0xc0023e87
c001383b:	e8 1f 92 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0013840:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013843:	e8 14 ff ff ff       	call   c001375c <CPU::setupLargePages()>
c0013848:	83 c4 10             	add    esp,0x10
c001384b:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0013852:	74 18                	je     c001386c <CPU::setupFeatures()+0x8c>
c0013854:	83 ec 0c             	sub    esp,0xc
c0013857:	68 90 3e 02 c0       	push   0xc0023e90
c001385c:	e8 fe 91 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0013861:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013864:	e8 3b ff ff ff       	call   c00137a4 <CPU::setupGlobalPages()>
c0013869:	83 c4 10             	add    esp,0x10
c001386c:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0013873:	74 18                	je     c001388d <CPU::setupFeatures()+0xad>
c0013875:	83 ec 0c             	sub    esp,0xc
c0013878:	68 a2 3e 02 c0       	push   0xc0023ea2
c001387d:	e8 dd 91 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0013882:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013885:	e8 dc fe ff ff       	call   c0013766 <CPU::setupPAT()>
c001388a:	83 c4 10             	add    esp,0x10
c001388d:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0013894:	74 11                	je     c00138a7 <CPU::setupFeatures()+0xc7>
c0013896:	c7 44 24 10 ab 3e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023eab
c001389e:	83 c4 08             	add    esp,0x8
c00138a1:	5b                   	pop    ebx
c00138a2:	e9 b8 91 ff ff       	jmp    c000ca5f <Dbg::kprintf(char const*, ...)>
c00138a7:	83 c4 08             	add    esp,0x8
c00138aa:	5b                   	pop    ebx
c00138ab:	c3                   	ret    

c00138ac <CPU::open(int, int, void*)>:
c00138ac:	57                   	push   edi
c00138ad:	56                   	push   esi
c00138ae:	53                   	push   ebx
c00138af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138b3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00138b7:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00138bd:	83 ec 0c             	sub    esp,0xc
c00138c0:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00138c6:	68 b5 3e 02 c0       	push   0xc0023eb5
c00138cb:	e8 4d 61 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00138d0:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00138d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00138d9:	e8 de 59 ff ff       	call   c00092bc <GDT::setup()>
c00138de:	c7 04 24 c7 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ec7
c00138e5:	e8 33 61 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00138ea:	83 c4 0c             	add    esp,0xc
c00138ed:	6a 00                	push   0x0
c00138ef:	68 ef be ad de       	push   0xdeadbeef
c00138f4:	57                   	push   edi
c00138f5:	e8 c6 77 ff ff       	call   c000b0c0 <TSS::setup(unsigned long, unsigned long)>
c00138fa:	c7 04 24 d9 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ed9
c0013901:	e8 17 61 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013906:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013909:	e8 92 77 ff ff       	call   c000b0a0 <TSS::flush()>
c001390e:	c7 04 24 ed 3e 02 c0 	mov    DWORD PTR [esp],0xc0023eed
c0013915:	e8 03 61 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001391a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0013920:	89 04 24             	mov    DWORD PTR [esp],eax
c0013923:	e8 fe 5b ff ff       	call   c0009526 <IDT::setup()>
c0013928:	c7 04 24 ff 3e 02 c0 	mov    DWORD PTR [esp],0xc0023eff
c001392f:	e8 e9 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013934:	b8 00 04 00 00       	mov    eax,0x400
c0013939:	0f 23 f8             	mov    db7,eax
c001393c:	c7 04 24 1d 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f1d
c0013943:	e8 d5 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013948:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0013952:	e8 d0 64 ff ff       	call   c0009e27 <Phys::allocatePage()>
c0013957:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001395d:	89 30                	mov    DWORD PTR [eax],esi
c001395f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0013965:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0013968:	c7 04 24 3f 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f3f
c001396f:	e8 a9 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013974:	58                   	pop    eax
c0013975:	5a                   	pop    edx
c0013976:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001397c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013980:	e8 35 87 ff ff       	call   c000c0ba <VAS::setCPUSpecific(unsigned long)>
c0013985:	c7 04 24 67 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f67
c001398c:	e8 8c 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013991:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013994:	e8 b1 f3 ff ff       	call   c0012d4a <CPU::detectFeatures()>
c0013999:	c7 04 24 8a 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f8a
c00139a0:	e8 78 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139a5:	e8 00 b9 ff ff       	call   c000f2aa <setupInterruptController()>
c00139aa:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00139b0:	c7 04 24 ae 3f 02 c0 	mov    DWORD PTR [esp],0xc0023fae
c00139b7:	e8 61 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139bc:	a1 80 61 02 c0       	mov    eax,ds:0xc0026180
c00139c1:	83 e0 10             	and    eax,0x10
c00139c4:	83 f8 01             	cmp    eax,0x1
c00139c7:	19 c0                	sbb    eax,eax
c00139c9:	83 e0 46             	and    eax,0x46
c00139cc:	83 c0 1e             	add    eax,0x1e
c00139cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00139d2:	e8 bd ce ff ff       	call   c0010894 <setupTimer(int)>
c00139d7:	83 c4 10             	add    esp,0x10
c00139da:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00139e0:	f6 05 80 61 02 c0 20 	test   BYTE PTR ds:0xc0026180,0x20
c00139e7:	74 18                	je     c0013a01 <CPU::open(int, int, void*)+0x155>
c00139e9:	83 ec 0c             	sub    esp,0xc
c00139ec:	68 c9 3f 02 c0       	push   0xc0023fc9
c00139f1:	e8 27 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00139f9:	e8 e2 fd ff ff       	call   c00137e0 <CPU::setupFeatures()>
c00139fe:	83 c4 10             	add    esp,0x10
c0013a01:	83 ec 0c             	sub    esp,0xc
c0013a04:	68 e4 3f 02 c0       	push   0xc0023fe4
c0013a09:	e8 0f 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a0e:	83 c4 10             	add    esp,0x10
c0013a11:	31 c0                	xor    eax,eax
c0013a13:	5b                   	pop    ebx
c0013a14:	5e                   	pop    esi
c0013a15:	5f                   	pop    edi
c0013a16:	c3                   	ret    
c0013a17:	90                   	nop

c0013a18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0013a18:	57                   	push   edi
c0013a19:	56                   	push   esi
c0013a1a:	53                   	push   ebx
c0013a1b:	51                   	push   ecx
c0013a1c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013a20:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0013a23:	0f 02 c0             	lar    eax,ax
c0013a26:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0013a29:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013a2d:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0013a30:	88 ca                	mov    dl,cl
c0013a32:	c0 ea 06             	shr    dl,0x6
c0013a35:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0013a39:	89 ca                	mov    edx,ecx
c0013a3b:	66 c1 ea 03          	shr    dx,0x3
c0013a3f:	83 e2 07             	and    edx,0x7
c0013a42:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0013a47:	88 17                	mov    BYTE PTR [edi],dl
c0013a49:	0f 84 a6 01 00 00    	je     c0013bf5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0013a4f:	83 e1 07             	and    ecx,0x7
c0013a52:	80 f9 04             	cmp    cl,0x4
c0013a55:	0f 84 98 00 00 00    	je     c0013af3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0013a5b:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013a60:	0f 95 c0             	setne  al
c0013a63:	80 f9 05             	cmp    cl,0x5
c0013a66:	0f 95 c2             	setne  dl
c0013a69:	08 c2                	or     dl,al
c0013a6b:	74 79                	je     c0013ae6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0013a6d:	84 c9                	test   cl,cl
c0013a6f:	75 05                	jne    c0013a76 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0013a71:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013a74:	eb 3c                	jmp    c0013ab2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013a76:	80 f9 01             	cmp    cl,0x1
c0013a79:	75 05                	jne    c0013a80 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0013a7b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013a7e:	eb 32                	jmp    c0013ab2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013a80:	80 f9 02             	cmp    cl,0x2
c0013a83:	75 05                	jne    c0013a8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0013a85:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013a88:	eb 28                	jmp    c0013ab2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013a8a:	31 c0                	xor    eax,eax
c0013a8c:	80 f9 03             	cmp    cl,0x3
c0013a8f:	75 05                	jne    c0013a96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0013a91:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013a94:	eb 1c                	jmp    c0013ab2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013a96:	80 f9 05             	cmp    cl,0x5
c0013a99:	75 05                	jne    c0013aa0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0013a9b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0013a9e:	eb 12                	jmp    c0013ab2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013aa0:	80 f9 06             	cmp    cl,0x6
c0013aa3:	75 05                	jne    c0013aaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0013aa5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013aa8:	eb 08                	jmp    c0013ab2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013aaa:	80 f9 07             	cmp    cl,0x7
c0013aad:	75 03                	jne    c0013ab2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013aaf:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013ab2:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0013ab7:	75 10                	jne    c0013ac9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0013ab9:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0013abd:	b9 03 00 00 00       	mov    ecx,0x3
c0013ac2:	01 d0                	add    eax,edx
c0013ac4:	e9 37 01 00 00       	jmp    c0013c00 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013ac9:	b9 02 00 00 00       	mov    ecx,0x2
c0013ace:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0013ad3:	0f 85 27 01 00 00    	jne    c0013c00 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013ad9:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0013adc:	b9 06 00 00 00       	mov    ecx,0x6
c0013ae1:	e9 1a 01 00 00       	jmp    c0013c00 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013ae6:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0013ae9:	b9 06 00 00 00       	mov    ecx,0x6
c0013aee:	e9 0f 01 00 00       	jmp    c0013c02 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013af3:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0013af6:	88 ca                	mov    dl,cl
c0013af8:	c0 ea 06             	shr    dl,0x6
c0013afb:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0013aff:	89 ca                	mov    edx,ecx
c0013b01:	66 c1 ea 03          	shr    dx,0x3
c0013b05:	83 e2 07             	and    edx,0x7
c0013b08:	80 e1 07             	and    cl,0x7
c0013b0b:	75 05                	jne    c0013b12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0013b0d:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0013b10:	eb 4c                	jmp    c0013b5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b12:	80 f9 01             	cmp    cl,0x1
c0013b15:	75 05                	jne    c0013b1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0013b17:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0013b1a:	eb 42                	jmp    c0013b5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b1c:	80 f9 02             	cmp    cl,0x2
c0013b1f:	75 05                	jne    c0013b26 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0013b21:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0013b24:	eb 38                	jmp    c0013b5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b26:	80 f9 03             	cmp    cl,0x3
c0013b29:	75 05                	jne    c0013b30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0013b2b:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0013b2e:	eb 2e                	jmp    c0013b5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b30:	80 f9 04             	cmp    cl,0x4
c0013b33:	75 12                	jne    c0013b47 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0013b35:	f6 c4 60             	test   ah,0x60
c0013b38:	75 08                	jne    c0013b42 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0013b3a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0013b3d:	8d 78 14             	lea    edi,[eax+0x14]
c0013b40:	eb 1c                	jmp    c0013b5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b42:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0013b45:	eb 17                	jmp    c0013b5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b47:	80 f9 05             	cmp    cl,0x5
c0013b4a:	75 05                	jne    c0013b51 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0013b4c:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0013b4f:	eb 0d                	jmp    c0013b5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b51:	80 f9 06             	cmp    cl,0x6
c0013b54:	75 05                	jne    c0013b5b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0013b56:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0013b59:	eb 03                	jmp    c0013b5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b5b:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0013b5e:	84 d2                	test   dl,dl
c0013b60:	75 05                	jne    c0013b67 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0013b62:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013b65:	eb 3c                	jmp    c0013ba3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013b67:	80 fa 01             	cmp    dl,0x1
c0013b6a:	75 05                	jne    c0013b71 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0013b6c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013b6f:	eb 32                	jmp    c0013ba3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013b71:	80 fa 02             	cmp    dl,0x2
c0013b74:	75 05                	jne    c0013b7b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0013b76:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013b79:	eb 28                	jmp    c0013ba3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013b7b:	80 fa 03             	cmp    dl,0x3
c0013b7e:	75 05                	jne    c0013b85 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0013b80:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013b83:	eb 1e                	jmp    c0013ba3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013b85:	31 c0                	xor    eax,eax
c0013b87:	80 fa 04             	cmp    dl,0x4
c0013b8a:	74 17                	je     c0013ba3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013b8c:	80 fa 05             	cmp    dl,0x5
c0013b8f:	75 05                	jne    c0013b96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0013b91:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0013b94:	eb 0d                	jmp    c0013ba3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013b96:	80 fa 06             	cmp    dl,0x6
c0013b99:	75 05                	jne    c0013ba0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0013b9b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013b9e:	eb 03                	jmp    c0013ba3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013ba0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013ba3:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013ba8:	0f 94 c2             	sete   dl
c0013bab:	80 f9 05             	cmp    cl,0x5
c0013bae:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0013bb2:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0013bb7:	d3 e0                	shl    eax,cl
c0013bb9:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0013bbd:	74 0a                	je     c0013bc9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0013bbf:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0013bc2:	b9 07 00 00 00       	mov    ecx,0x7
c0013bc7:	eb 37                	jmp    c0013c00 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013bc9:	01 f8                	add    eax,edi
c0013bcb:	b9 03 00 00 00       	mov    ecx,0x3
c0013bd0:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013bd5:	74 2b                	je     c0013c02 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013bd7:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0013bdc:	75 0d                	jne    c0013beb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0013bde:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0013be2:	01 c8                	add    eax,ecx
c0013be4:	b9 04 00 00 00       	mov    ecx,0x4
c0013be9:	eb 17                	jmp    c0013c02 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013beb:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0013bee:	b9 07 00 00 00       	mov    ecx,0x7
c0013bf3:	eb 0d                	jmp    c0013c02 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013bf5:	b9 02 00 00 00       	mov    ecx,0x2
c0013bfa:	b2 01                	mov    dl,0x1
c0013bfc:	31 c0                	xor    eax,eax
c0013bfe:	eb 02                	jmp    c0013c02 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013c00:	31 d2                	xor    edx,edx
c0013c02:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c06:	89 0b                	mov    DWORD PTR [ebx],ecx
c0013c08:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013c0c:	88 11                	mov    BYTE PTR [ecx],dl
c0013c0e:	5a                   	pop    edx
c0013c0f:	5b                   	pop    ebx
c0013c10:	5e                   	pop    esi
c0013c11:	5f                   	pop    edi
c0013c12:	c3                   	ret    

c0013c13 <Krnl::smpEntry()>:
c0013c13:	eb fe                	jmp    c0013c13 <Krnl::smpEntry()>

c0013c15 <Krnl::startCPU(int)>:
c0013c15:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013c1a:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013c21:	0f 84 36 01 00 00    	je     c0013d5d <Krnl::startCPU(int)+0x148>
c0013c27:	53                   	push   ebx
c0013c28:	83 ec 10             	sub    esp,0x10
c0013c2b:	fa                   	cli    
c0013c2c:	ff 05 28 76 02 c0    	inc    DWORD PTR ds:0xc0027628
c0013c32:	6a 1b                	push   0x1b
c0013c34:	ff 35 68 61 02 c0    	push   DWORD PTR ds:0xc0026168
c0013c3a:	e8 e5 52 ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c0013c3f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013c44:	89 c3                	mov    ebx,eax
c0013c46:	58                   	pop    eax
c0013c47:	5a                   	pop    edx
c0013c48:	53                   	push   ebx
c0013c49:	68 2c 40 02 c0       	push   0xc002402c
c0013c4e:	e8 0c 8e ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0013c53:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013c5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c61:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013c6b:	c1 e0 18             	shl    eax,0x18
c0013c6e:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0013c74:	83 c4 10             	add    esp,0x10
c0013c77:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0013c7d:	09 c2                	or     edx,eax
c0013c7f:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0013c85:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0013c8b:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013c91:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0013c97:	80 cd c5             	or     ch,0xc5
c0013c9a:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013ca0:	f3 90                	pause  
c0013ca2:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013ca4:	0f ba e1 0c          	bt     ecx,0xc
c0013ca8:	72 f6                	jb     c0013ca0 <Krnl::startCPU(int)+0x8b>
c0013caa:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013cb0:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013cb6:	09 c1                	or     ecx,eax
c0013cb8:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0013cbe:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013cc4:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0013cca:	80 cd 85             	or     ch,0x85
c0013ccd:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013cd3:	f3 90                	pause  
c0013cd5:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013cd7:	0f ba e1 0c          	bt     ecx,0xc
c0013cdb:	72 f6                	jb     c0013cd3 <Krnl::startCPU(int)+0xbe>
c0013cdd:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013ce7:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013ced:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013cf3:	09 c1                	or     ecx,eax
c0013cf5:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0013cfb:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013d01:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0013d07:	81 c9 02 06 00 00    	or     ecx,0x602
c0013d0d:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013d13:	f3 90                	pause  
c0013d15:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013d17:	0f ba e1 0c          	bt     ecx,0xc
c0013d1b:	72 f6                	jb     c0013d13 <Krnl::startCPU(int)+0xfe>
c0013d1d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013d27:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013d2d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013d33:	09 c8                	or     eax,ecx
c0013d35:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0013d3b:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0013d41:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0013d46:	0d 02 06 00 00       	or     eax,0x602
c0013d4b:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0013d51:	f3 90                	pause  
c0013d53:	8b 02                	mov    eax,DWORD PTR [edx]
c0013d55:	0f ba e0 0c          	bt     eax,0xc
c0013d59:	72 f6                	jb     c0013d51 <Krnl::startCPU(int)+0x13c>
c0013d5b:	eb fe                	jmp    c0013d5b <Krnl::startCPU(int)+0x146>
c0013d5d:	c3                   	ret    

c0013d5e <Krnl::startCPUs()>:
c0013d5e:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0013d63:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013d69:	88 c2                	mov    dl,al
c0013d6b:	83 e2 0a             	and    edx,0xa
c0013d6e:	80 fa 0a             	cmp    dl,0xa
c0013d71:	75 09                	jne    c0013d7c <Krnl::startCPUs()+0x1e>
c0013d73:	a8 01                	test   al,0x1
c0013d75:	74 05                	je     c0013d7c <Krnl::startCPUs()+0x1e>
c0013d77:	e9 1f c4 fe ff       	jmp    c000019b <prepareTramp>
c0013d7c:	c3                   	ret    
c0013d7d:	90                   	nop

c0013d7e <EnvVarContainer::getEnv(char const*)>:
c0013d7e:	57                   	push   edi
c0013d7f:	56                   	push   esi
c0013d80:	53                   	push   ebx
c0013d81:	31 db                	xor    ebx,ebx
c0013d83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d87:	39 1e                	cmp    DWORD PTR [esi],ebx
c0013d89:	7e 2b                	jle    c0013db6 <EnvVarContainer::getEnv(char const*)+0x38>
c0013d8b:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0013d92:	50                   	push   eax
c0013d93:	50                   	push   eax
c0013d94:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013d97:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0013d9a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013d9e:	e8 29 ca fe ff       	call   c00007cc <strcmp>
c0013da3:	83 c4 10             	add    esp,0x10
c0013da6:	85 c0                	test   eax,eax
c0013da8:	75 09                	jne    c0013db3 <EnvVarContainer::getEnv(char const*)+0x35>
c0013daa:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013dad:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0013db1:	eb 05                	jmp    c0013db8 <EnvVarContainer::getEnv(char const*)+0x3a>
c0013db3:	43                   	inc    ebx
c0013db4:	eb d1                	jmp    c0013d87 <EnvVarContainer::getEnv(char const*)+0x9>
c0013db6:	31 c0                	xor    eax,eax
c0013db8:	5b                   	pop    ebx
c0013db9:	5e                   	pop    esi
c0013dba:	5f                   	pop    edi
c0013dbb:	c3                   	ret    

c0013dbc <EnvVarContainer::setEnv(char const*, char const*)>:
c0013dbc:	55                   	push   ebp
c0013dbd:	57                   	push   edi
c0013dbe:	56                   	push   esi
c0013dbf:	53                   	push   ebx
c0013dc0:	83 ec 28             	sub    esp,0x28
c0013dc3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0013dc7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0013dcb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0013dcf:	56                   	push   esi
c0013dd0:	e8 cb c8 fe ff       	call   c00006a0 <strlen>
c0013dd5:	40                   	inc    eax
c0013dd6:	89 04 24             	mov    DWORD PTR [esp],eax
c0013dd9:	e8 e5 5b ff ff       	call   c00099c3 <malloc>
c0013dde:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013de1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013de5:	e8 b6 c8 fe ff       	call   c00006a0 <strlen>
c0013dea:	40                   	inc    eax
c0013deb:	89 04 24             	mov    DWORD PTR [esp],eax
c0013dee:	e8 d0 5b ff ff       	call   c00099c3 <malloc>
c0013df3:	89 34 24             	mov    DWORD PTR [esp],esi
c0013df6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013dfa:	e8 a1 c8 fe ff       	call   c00006a0 <strlen>
c0013dff:	83 c4 0c             	add    esp,0xc
c0013e02:	40                   	inc    eax
c0013e03:	50                   	push   eax
c0013e04:	6a 00                	push   0x0
c0013e06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013e0a:	e8 75 c8 fe ff       	call   c0000684 <memset>
c0013e0f:	89 34 24             	mov    DWORD PTR [esp],esi
c0013e12:	e8 89 c8 fe ff       	call   c00006a0 <strlen>
c0013e17:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e1b:	8d 48 01             	lea    ecx,[eax+0x1]
c0013e1e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e23:	89 de                	mov    esi,ebx
c0013e25:	e8 76 c8 fe ff       	call   c00006a0 <strlen>
c0013e2a:	83 c4 0c             	add    esp,0xc
c0013e2d:	40                   	inc    eax
c0013e2e:	50                   	push   eax
c0013e2f:	6a 00                	push   0x0
c0013e31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e35:	e8 4a c8 fe ff       	call   c0000684 <memset>
c0013e3a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e3d:	e8 5e c8 fe ff       	call   c00006a0 <strlen>
c0013e42:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013e46:	8d 48 01             	lea    ecx,[eax+0x1]
c0013e49:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e4b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013e4e:	40                   	inc    eax
c0013e4f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013e52:	c1 e0 03             	shl    eax,0x3
c0013e55:	5a                   	pop    edx
c0013e56:	59                   	pop    ecx
c0013e57:	50                   	push   eax
c0013e58:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0013e5b:	e8 4f 5b ff ff       	call   c00099af <realloc>
c0013e60:	8d 74 24 18          	lea    esi,[esp+0x18]
c0013e64:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013e67:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0013e6a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0013e6e:	b9 08 00 00 00       	mov    ecx,0x8
c0013e73:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e75:	83 c4 2c             	add    esp,0x2c
c0013e78:	5b                   	pop    ebx
c0013e79:	5e                   	pop    esi
c0013e7a:	5f                   	pop    edi
c0013e7b:	5d                   	pop    ebp
c0013e7c:	c3                   	ret    
c0013e7d:	90                   	nop

c0013e7e <EnvVarContainer::deleteEnv(char const*)>:
c0013e7e:	c3                   	ret    
c0013e7f:	90                   	nop

c0013e80 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0013e80:	55                   	push   ebp
c0013e81:	57                   	push   edi
c0013e82:	56                   	push   esi
c0013e83:	53                   	push   ebx
c0013e84:	81 ec 38 01 00 00    	sub    esp,0x138
c0013e8a:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0013e91:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0013e98:	68 14 01 00 00       	push   0x114
c0013e9d:	e8 21 5b ff ff       	call   c00099c3 <malloc>
c0013ea2:	83 c4 0c             	add    esp,0xc
c0013ea5:	89 c3                	mov    ebx,eax
c0013ea7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0013eaa:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0013eb1:	50                   	push   eax
c0013eb2:	e8 13 91 ff ff       	call   c000cfca <File::File(char const*, Process*)>
c0013eb7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013eba:	e8 dd 93 ff ff       	call   c000d29c <File::exists()>
c0013ebf:	83 c4 10             	add    esp,0x10
c0013ec2:	84 c0                	test   al,al
c0013ec4:	75 31                	jne    c0013ef7 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0013ec6:	50                   	push   eax
c0013ec7:	50                   	push   eax
c0013ec8:	6a 12                	push   0x12
c0013eca:	53                   	push   ebx
c0013ecb:	e8 5e 91 ff ff       	call   c000d02e <File::open(FileOpenMode)>
c0013ed0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ed2:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0013ed5:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ed8:	e8 c3 c7 fe ff       	call   c00006a0 <strlen>
c0013edd:	5a                   	pop    edx
c0013ede:	31 d2                	xor    edx,edx
c0013ee0:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013ee4:	51                   	push   ecx
c0013ee5:	56                   	push   esi
c0013ee6:	52                   	push   edx
c0013ee7:	50                   	push   eax
c0013ee8:	53                   	push   ebx
c0013ee9:	ff d7                	call   edi
c0013eeb:	83 c4 14             	add    esp,0x14
c0013eee:	53                   	push   ebx
c0013eef:	e8 98 91 ff ff       	call   c000d08c <File::close()>
c0013ef4:	83 c4 10             	add    esp,0x10
c0013ef7:	56                   	push   esi
c0013ef8:	31 f6                	xor    esi,esi
c0013efa:	68 00 01 00 00       	push   0x100
c0013eff:	6a 00                	push   0x0
c0013f01:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0013f05:	50                   	push   eax
c0013f06:	e8 79 c7 fe ff       	call   c0000684 <memset>
c0013f0b:	5f                   	pop    edi
c0013f0c:	58                   	pop    eax
c0013f0d:	6a 01                	push   0x1
c0013f0f:	53                   	push   ebx
c0013f10:	e8 19 91 ff ff       	call   c000d02e <File::open(FileOpenMode)>
c0013f15:	83 c4 10             	add    esp,0x10
c0013f18:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013f20:	83 ec 0c             	sub    esp,0xc
c0013f23:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f25:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013f29:	51                   	push   ecx
c0013f2a:	8d 54 24 23          	lea    edx,[esp+0x23]
c0013f2e:	52                   	push   edx
c0013f2f:	6a 00                	push   0x0
c0013f31:	6a 01                	push   0x1
c0013f33:	53                   	push   ebx
c0013f34:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013f37:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0013f3b:	83 c4 20             	add    esp,0x20
c0013f3e:	3c 0d                	cmp    al,0xd
c0013f40:	0f 84 09 01 00 00    	je     c001404f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0013f46:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013f4b:	0f 84 ef 00 00 00    	je     c0014040 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0013f51:	3c 0a                	cmp    al,0xa
c0013f53:	74 13                	je     c0013f68 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0013f55:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013f5a:	74 0c                	je     c0013f68 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0013f5c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0013f62:	0f 8e d8 00 00 00    	jle    c0014040 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0013f68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013f6c:	83 ec 0c             	sub    esp,0xc
c0013f6f:	8d 78 01             	lea    edi,[eax+0x1]
c0013f72:	57                   	push   edi
c0013f73:	e8 4b 5a ff ff       	call   c00099c3 <malloc>
c0013f78:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0013f7c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013f80:	8d 56 04             	lea    edx,[esi+0x4]
c0013f83:	89 14 24             	mov    DWORD PTR [esp],edx
c0013f86:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013f8a:	e8 34 5a ff ff       	call   c00099c3 <malloc>
c0013f8f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0013f93:	83 c4 0c             	add    esp,0xc
c0013f96:	57                   	push   edi
c0013f97:	6a 00                	push   0x0
c0013f99:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013f9d:	e8 e2 c6 fe ff       	call   c0000684 <memset>
c0013fa2:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013fa6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013faa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013fae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013fb0:	83 c4 0c             	add    esp,0xc
c0013fb3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013fb7:	52                   	push   edx
c0013fb8:	6a 00                	push   0x0
c0013fba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013fbe:	e8 c1 c6 fe ff       	call   c0000684 <memset>
c0013fc3:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013fc7:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0013fcb:	89 34 24             	mov    DWORD PTR [esp],esi
c0013fce:	e8 cd c6 fe ff       	call   c00006a0 <strlen>
c0013fd3:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0013fd7:	89 c1                	mov    ecx,eax
c0013fd9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013fdb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013fde:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0013fe1:	40                   	inc    eax
c0013fe2:	83 c4 10             	add    esp,0x10
c0013fe5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013fe8:	85 d2                	test   edx,edx
c0013fea:	75 0c                	jne    c0013ff8 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0013fec:	83 ec 0c             	sub    esp,0xc
c0013fef:	6a 08                	push   0x8
c0013ff1:	e8 cd 59 ff ff       	call   c00099c3 <malloc>
c0013ff6:	eb 0c                	jmp    c0014004 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0013ff8:	c1 e0 03             	shl    eax,0x3
c0013ffb:	51                   	push   ecx
c0013ffc:	51                   	push   ecx
c0013ffd:	50                   	push   eax
c0013ffe:	52                   	push   edx
c0013fff:	e8 ab 59 ff ff       	call   c00099af <realloc>
c0014004:	83 c4 10             	add    esp,0x10
c0014007:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001400a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001400d:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014010:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014014:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014018:	b9 08 00 00 00       	mov    ecx,0x8
c001401d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001401f:	31 f6                	xor    esi,esi
c0014021:	50                   	push   eax
c0014022:	68 00 01 00 00       	push   0x100
c0014027:	6a 00                	push   0x0
c0014029:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001402d:	50                   	push   eax
c001402e:	e8 51 c6 fe ff       	call   c0000684 <memset>
c0014033:	83 c4 10             	add    esp,0x10
c0014036:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001403e:	eb 0f                	jmp    c001404f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014040:	3c 3d                	cmp    al,0x3d
c0014042:	74 07                	je     c001404b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0014044:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0014048:	46                   	inc    esi
c0014049:	eb 04                	jmp    c001404f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001404b:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001404f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014054:	0f 85 c6 fe ff ff    	jne    c0013f20 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001405a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014060:	5b                   	pop    ebx
c0014061:	5e                   	pop    esi
c0014062:	5f                   	pop    edi
c0014063:	5d                   	pop    ebp
c0014064:	c3                   	ret    
c0014065:	90                   	nop

c0014066 <EnvVarContainer::__loadSystem()>:
c0014066:	83 ec 10             	sub    esp,0x10
c0014069:	68 40 5b 02 c0       	push   0xc0025b40
c001406e:	68 3d 40 02 c0       	push   0xc002403d
c0014073:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014077:	e8 04 fe ff ff       	call   c0013e80 <EnvVarContainer::loadFrom(char const*, char const*)>
c001407c:	83 c4 1c             	add    esp,0x1c
c001407f:	c3                   	ret    

c0014080 <EnvVarContainer::__loadUser()>:
c0014080:	c3                   	ret    
c0014081:	90                   	nop

c0014082 <EnvVarContainer::EnvVarContainer(Process*)>:
c0014082:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014086:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001408c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014090:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014094:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0014097:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001409b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00140a2:	90                   	nop
c00140a3:	c3                   	ret    

c00140a4 <EnvVarContainer::~EnvVarContainer()>:
c00140a4:	83 ec 0c             	sub    esp,0xc
c00140a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00140ae:	85 c0                	test   eax,eax
c00140b0:	74 1d                	je     c00140cf <EnvVarContainer::~EnvVarContainer()+0x2b>
c00140b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00140b8:	85 c0                	test   eax,eax
c00140ba:	74 13                	je     c00140cf <EnvVarContainer::~EnvVarContainer()+0x2b>
c00140bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00140c3:	83 ec 0c             	sub    esp,0xc
c00140c6:	50                   	push   eax
c00140c7:	e8 07 59 ff ff       	call   c00099d3 <free>
c00140cc:	83 c4 10             	add    esp,0x10
c00140cf:	90                   	nop
c00140d0:	83 c4 0c             	add    esp,0xc
c00140d3:	c3                   	ret    

c00140d4 <Krnl::getEnv(Process*, char const*)>:
c00140d4:	53                   	push   ebx
c00140d5:	83 ec 08             	sub    esp,0x8
c00140d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140dc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00140e0:	39 05 50 76 02 c0    	cmp    DWORD PTR ds:0xc0027650,eax
c00140e6:	74 04                	je     c00140ec <Krnl::getEnv(Process*, char const*)+0x18>
c00140e8:	85 c0                	test   eax,eax
c00140ea:	75 0b                	jne    c00140f7 <Krnl::getEnv(Process*, char const*)+0x23>
c00140ec:	a1 34 6c 02 c0       	mov    eax,ds:0xc0026c34
c00140f1:	85 c0                	test   eax,eax
c00140f3:	75 19                	jne    c001410e <Krnl::getEnv(Process*, char const*)+0x3a>
c00140f5:	eb 27                	jmp    c001411e <Krnl::getEnv(Process*, char const*)+0x4a>
c00140f7:	52                   	push   edx
c00140f8:	52                   	push   edx
c00140f9:	53                   	push   ebx
c00140fa:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0014100:	e8 79 fc ff ff       	call   c0013d7e <EnvVarContainer::getEnv(char const*)>
c0014105:	83 c4 10             	add    esp,0x10
c0014108:	85 c0                	test   eax,eax
c001410a:	75 28                	jne    c0014134 <Krnl::getEnv(Process*, char const*)+0x60>
c001410c:	eb de                	jmp    c00140ec <Krnl::getEnv(Process*, char const*)+0x18>
c001410e:	52                   	push   edx
c001410f:	52                   	push   edx
c0014110:	53                   	push   ebx
c0014111:	50                   	push   eax
c0014112:	e8 67 fc ff ff       	call   c0013d7e <EnvVarContainer::getEnv(char const*)>
c0014117:	83 c4 10             	add    esp,0x10
c001411a:	85 c0                	test   eax,eax
c001411c:	75 16                	jne    c0014134 <Krnl::getEnv(Process*, char const*)+0x60>
c001411e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0014122:	a1 38 6c 02 c0       	mov    eax,ds:0xc0026c38
c0014127:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001412b:	83 c4 08             	add    esp,0x8
c001412e:	5b                   	pop    ebx
c001412f:	e9 4a fc ff ff       	jmp    c0013d7e <EnvVarContainer::getEnv(char const*)>
c0014134:	83 c4 08             	add    esp,0x8
c0014137:	5b                   	pop    ebx
c0014138:	c3                   	ret    

c0014139 <Krnl::setEnvSystem(char const*, char const*)>:
c0014139:	83 ec 10             	sub    esp,0x10
c001413c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014140:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014144:	ff 35 38 6c 02 c0    	push   DWORD PTR ds:0xc0026c38
c001414a:	e8 6d fc ff ff       	call   c0013dbc <EnvVarContainer::setEnv(char const*, char const*)>
c001414f:	83 c4 1c             	add    esp,0x1c
c0014152:	c3                   	ret    

c0014153 <Krnl::setEnvUser(char const*, char const*)>:
c0014153:	a1 34 6c 02 c0       	mov    eax,ds:0xc0026c34
c0014158:	85 c0                	test   eax,eax
c001415a:	74 15                	je     c0014171 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001415c:	83 ec 10             	sub    esp,0x10
c001415f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014163:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014167:	50                   	push   eax
c0014168:	e8 4f fc ff ff       	call   c0013dbc <EnvVarContainer::setEnv(char const*, char const*)>
c001416d:	83 c4 1c             	add    esp,0x1c
c0014170:	c3                   	ret    
c0014171:	c3                   	ret    

c0014172 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0014172:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014176:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c001417c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014180:	e9 37 fc ff ff       	jmp    c0013dbc <EnvVarContainer::setEnv(char const*, char const*)>

c0014185 <Krnl::deleteEnvSystem(char const*)>:
c0014185:	c3                   	ret    

c0014186 <Krnl::deleteEnvUser(char const*)>:
c0014186:	c3                   	ret    

c0014187 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0014187:	c3                   	ret    

c0014188 <Krnl::newProcessEnv(Process*)>:
c0014188:	83 ec 28             	sub    esp,0x28
c001418b:	6a 0c                	push   0xc
c001418d:	e8 31 58 ff ff       	call   c00099c3 <malloc>
c0014192:	5a                   	pop    edx
c0014193:	59                   	pop    ecx
c0014194:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014198:	50                   	push   eax
c0014199:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001419d:	e8 e0 fe ff ff       	call   c0014082 <EnvVarContainer::EnvVarContainer(Process*)>
c00141a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00141a6:	83 c4 2c             	add    esp,0x2c
c00141a9:	c3                   	ret    

c00141aa <Krnl::copyProcessEnv(Process*, Process*)>:
c00141aa:	57                   	push   edi
c00141ab:	56                   	push   esi
c00141ac:	53                   	push   ebx
c00141ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141b1:	83 ec 0c             	sub    esp,0xc
c00141b4:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00141ba:	6a 0c                	push   0xc
c00141bc:	e8 02 58 ff ff       	call   c00099c3 <malloc>
c00141c1:	89 c3                	mov    ebx,eax
c00141c3:	58                   	pop    eax
c00141c4:	5a                   	pop    edx
c00141c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141c9:	53                   	push   ebx
c00141ca:	e8 b3 fe ff ff       	call   c0014082 <EnvVarContainer::EnvVarContainer(Process*)>
c00141cf:	8b 07                	mov    eax,DWORD PTR [edi]
c00141d1:	89 03                	mov    DWORD PTR [ebx],eax
c00141d3:	c1 e0 03             	shl    eax,0x3
c00141d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00141d9:	e8 e5 57 ff ff       	call   c00099c3 <malloc>
c00141de:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00141e1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00141e3:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00141e6:	c1 e1 03             	shl    ecx,0x3
c00141e9:	89 c7                	mov    edi,eax
c00141eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00141ed:	83 c4 10             	add    esp,0x10
c00141f0:	89 d8                	mov    eax,ebx
c00141f2:	5b                   	pop    ebx
c00141f3:	5e                   	pop    esi
c00141f4:	5f                   	pop    edi
c00141f5:	c3                   	ret    

c00141f6 <Krnl::loadSystemEnv()>:
c00141f6:	53                   	push   ebx
c00141f7:	83 ec 14             	sub    esp,0x14
c00141fa:	6a 0c                	push   0xc
c00141fc:	e8 c2 57 ff ff       	call   c00099c3 <malloc>
c0014201:	89 c3                	mov    ebx,eax
c0014203:	58                   	pop    eax
c0014204:	5a                   	pop    edx
c0014205:	ff 35 50 76 02 c0    	push   DWORD PTR ds:0xc0027650
c001420b:	53                   	push   ebx
c001420c:	e8 71 fe ff ff       	call   c0014082 <EnvVarContainer::EnvVarContainer(Process*)>
c0014211:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014214:	89 1d 38 6c 02 c0    	mov    DWORD PTR ds:0xc0026c38,ebx
c001421a:	e8 47 fe ff ff       	call   c0014066 <EnvVarContainer::__loadSystem()>
c001421f:	83 c4 18             	add    esp,0x18
c0014222:	5b                   	pop    ebx
c0014223:	c3                   	ret    

c0014224 <Krnl::loadUserEnv()>:
c0014224:	53                   	push   ebx
c0014225:	83 ec 14             	sub    esp,0x14
c0014228:	6a 0c                	push   0xc
c001422a:	e8 94 57 ff ff       	call   c00099c3 <malloc>
c001422f:	89 c3                	mov    ebx,eax
c0014231:	58                   	pop    eax
c0014232:	5a                   	pop    edx
c0014233:	ff 35 50 76 02 c0    	push   DWORD PTR ds:0xc0027650
c0014239:	53                   	push   ebx
c001423a:	e8 43 fe ff ff       	call   c0014082 <EnvVarContainer::EnvVarContainer(Process*)>
c001423f:	89 1d 34 6c 02 c0    	mov    DWORD PTR ds:0xc0026c34,ebx
c0014245:	83 c4 18             	add    esp,0x18
c0014248:	5b                   	pop    ebx
c0014249:	c3                   	ret    

c001424a <Krnl::flushEnv()>:
c001424a:	c3                   	ret    

c001424b <Krnl::getProcessTotalEnvCount(Process*)>:
c001424b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001424f:	8b 15 34 6c 02 c0    	mov    edx,DWORD PTR ds:0xc0026c34
c0014255:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001425b:	a1 38 6c 02 c0       	mov    eax,ds:0xc0026c38
c0014260:	8b 00                	mov    eax,DWORD PTR [eax]
c0014262:	03 01                	add    eax,DWORD PTR [ecx]
c0014264:	85 d2                	test   edx,edx
c0014266:	74 02                	je     c001426a <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0014268:	03 02                	add    eax,DWORD PTR [edx]
c001426a:	c3                   	ret    

c001426b <Krnl::getProcessEnvPair(Process*, int)>:
c001426b:	57                   	push   edi
c001426c:	56                   	push   esi
c001426d:	8b 35 34 6c 02 c0    	mov    esi,DWORD PTR ds:0xc0026c34
c0014273:	53                   	push   ebx
c0014274:	85 f6                	test   esi,esi
c0014276:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001427a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001427e:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014284:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014288:	8b 01                	mov    eax,DWORD PTR [ecx]
c001428a:	75 16                	jne    c00142a2 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c001428c:	39 c2                	cmp    edx,eax
c001428e:	7c 16                	jl     c00142a6 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014290:	8b 0d 38 6c 02 c0    	mov    ecx,DWORD PTR ds:0xc0026c38
c0014296:	8b 31                	mov    esi,DWORD PTR [ecx]
c0014298:	01 c6                	add    esi,eax
c001429a:	39 d6                	cmp    esi,edx
c001429c:	7e 3c                	jle    c00142da <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001429e:	29 c2                	sub    edx,eax
c00142a0:	eb 04                	jmp    c00142a6 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00142a2:	39 c2                	cmp    edx,eax
c00142a4:	7d 05                	jge    c00142ab <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00142a6:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00142a9:	eb 20                	jmp    c00142cb <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00142ab:	8b 3e                	mov    edi,DWORD PTR [esi]
c00142ad:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00142b0:	39 d1                	cmp    ecx,edx
c00142b2:	7e 04                	jle    c00142b8 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00142b4:	29 c2                	sub    edx,eax
c00142b6:	eb 10                	jmp    c00142c8 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00142b8:	8b 35 38 6c 02 c0    	mov    esi,DWORD PTR ds:0xc0026c38
c00142be:	03 0e                	add    ecx,DWORD PTR [esi]
c00142c0:	39 d1                	cmp    ecx,edx
c00142c2:	7e 16                	jle    c00142da <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00142c4:	29 c2                	sub    edx,eax
c00142c6:	29 fa                	sub    edx,edi
c00142c8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00142cb:	8d 14 d0             	lea    edx,[eax+edx*8]
c00142ce:	8b 02                	mov    eax,DWORD PTR [edx]
c00142d0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00142d3:	89 03                	mov    DWORD PTR [ebx],eax
c00142d5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00142d8:	eb 1d                	jmp    c00142f7 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00142da:	83 ec 0c             	sub    esp,0xc
c00142dd:	68 5f 40 02 c0       	push   0xc002405f
c00142e2:	e8 18 00 00 00       	call   c00142ff <Krnl::panic(char const*)>
c00142e7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00142ed:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00142f4:	83 c4 10             	add    esp,0x10
c00142f7:	89 d8                	mov    eax,ebx
c00142f9:	5b                   	pop    ebx
c00142fa:	5e                   	pop    esi
c00142fb:	5f                   	pop    edi
c00142fc:	c2 04 00             	ret    0x4

c00142ff <Krnl::panic(char const*)>:
c00142ff:	55                   	push   ebp
c0014300:	89 e5                	mov    ebp,esp
c0014302:	53                   	push   ebx
c0014303:	83 ec 10             	sub    esp,0x10
c0014306:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0014309:	fa                   	cli    
c001430a:	c6 05 44 6c 02 c0 01 	mov    BYTE PTR ds:0xc0026c44,0x1
c0014311:	53                   	push   ebx
c0014312:	e8 06 57 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0014317:	58                   	pop    eax
c0014318:	c6 05 40 55 02 c0 00 	mov    BYTE PTR ds:0xc0025540,0x0
c001431f:	5a                   	pop    edx
c0014320:	53                   	push   ebx
c0014321:	68 79 40 02 c0       	push   0xc0024079
c0014326:	e8 34 87 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001432b:	59                   	pop    ecx
c001432c:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c0014331:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014337:	e8 2d 65 ff ff       	call   c000a869 <setActiveTerminal(VgaText*)>
c001433c:	83 c4 0c             	add    esp,0xc
c001433f:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c0014344:	6a 01                	push   0x1
c0014346:	6a 0f                	push   0xf
c0014348:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001434e:	e8 75 63 ff ff       	call   c000a6c8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014353:	58                   	pop    eax
c0014354:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c0014359:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001435f:	e8 86 68 ff ff       	call   c000abea <VgaText::clearScreen()>
c0014364:	58                   	pop    eax
c0014365:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c001436a:	5a                   	pop    edx
c001436b:	68 92 40 02 c0       	push   0xc0024092
c0014370:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014376:	e8 fb 69 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c001437b:	59                   	pop    ecx
c001437c:	58                   	pop    eax
c001437d:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c0014382:	68 38 41 02 c0       	push   0xc0024138
c0014387:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001438d:	e8 e4 69 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c0014392:	58                   	pop    eax
c0014393:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c0014398:	5a                   	pop    edx
c0014399:	68 ae 40 02 c0       	push   0xc00240ae
c001439e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143a4:	e8 cd 69 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c00143a9:	59                   	pop    ecx
c00143aa:	58                   	pop    eax
c00143ab:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c00143b0:	53                   	push   ebx
c00143b1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143b7:	e8 ba 69 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c00143bc:	58                   	pop    eax
c00143bd:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c00143c2:	5a                   	pop    edx
c00143c3:	68 ce 40 02 c0       	push   0xc00240ce
c00143c8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143ce:	e8 a3 69 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c00143d3:	a1 40 6c 02 c0       	mov    eax,ds:0xc0026c40
c00143d8:	83 c4 10             	add    esp,0x10
c00143db:	85 c0                	test   eax,eax
c00143dd:	74 02                	je     c00143e1 <Krnl::panic(char const*)+0xe2>
c00143df:	ff d0                	call   eax
c00143e1:	83 ec 0c             	sub    esp,0xc
c00143e4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00143e7:	e8 ad 30 00 00       	call   c0017499 <Thr::getDriverNameFromAddress(unsigned long)>
c00143ec:	83 c4 10             	add    esp,0x10
c00143ef:	89 c3                	mov    ebx,eax
c00143f1:	85 c0                	test   eax,eax
c00143f3:	0f 84 4e 02 00 00    	je     c0014647 <Krnl::panic(char const*)+0x348>
c00143f9:	83 ec 08             	sub    esp,0x8
c00143fc:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c0014401:	68 74 41 02 c0       	push   0xc0024174
c0014406:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001440c:	e8 65 69 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c0014411:	58                   	pop    eax
c0014412:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c0014417:	5a                   	pop    edx
c0014418:	68 ae 40 02 c0       	push   0xc00240ae
c001441d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014423:	e8 4e 69 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c0014428:	59                   	pop    ecx
c0014429:	58                   	pop    eax
c001442a:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c001442f:	53                   	push   ebx
c0014430:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014436:	e8 3b 69 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c001443b:	83 c4 10             	add    esp,0x10
c001443e:	83 ec 08             	sub    esp,0x8
c0014441:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c0014446:	68 cd 40 02 c0       	push   0xc00240cd
c001444b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014451:	e8 20 69 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c0014456:	58                   	pop    eax
c0014457:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c001445c:	5a                   	pop    edx
c001445d:	68 cc 41 02 c0       	push   0xc00241cc
c0014462:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014468:	e8 09 69 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c001446d:	59                   	pop    ecx
c001446e:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c0014473:	5b                   	pop    ebx
c0014474:	68 0c 42 02 c0       	push   0xc002420c
c0014479:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001447f:	e8 f2 68 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c0014484:	58                   	pop    eax
c0014485:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c001448a:	5a                   	pop    edx
c001448b:	68 b9 40 02 c0       	push   0xc00240b9
c0014490:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014496:	e8 db 68 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c001449b:	59                   	pop    ecx
c001449c:	5b                   	pop    ebx
c001449d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00144a0:	68 d1 40 02 c0       	push   0xc00240d1
c00144a5:	e8 b5 85 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c00144aa:	58                   	pop    eax
c00144ab:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00144ae:	5a                   	pop    edx
c00144af:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00144b2:	68 da 40 02 c0       	push   0xc00240da
c00144b7:	e8 a3 85 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c00144bc:	59                   	pop    ecx
c00144bd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00144c0:	5b                   	pop    ebx
c00144c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00144c3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00144c6:	68 e3 40 02 c0       	push   0xc00240e3
c00144cb:	e8 8f 85 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c00144d0:	58                   	pop    eax
c00144d1:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c00144d6:	5a                   	pop    edx
c00144d7:	68 50 42 02 c0       	push   0xc0024250
c00144dc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144e2:	e8 8f 68 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c00144e7:	59                   	pop    ecx
c00144e8:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c00144ed:	5b                   	pop    ebx
c00144ee:	68 ec 40 02 c0       	push   0xc00240ec
c00144f3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144f9:	e8 78 68 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c00144fe:	0f 20 c0             	mov    eax,cr0
c0014501:	5a                   	pop    edx
c0014502:	59                   	pop    ecx
c0014503:	50                   	push   eax
c0014504:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c0014509:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001450f:	e8 1c 68 ff ff       	call   c000ad30 <VgaText::putx(unsigned int)>
c0014514:	5b                   	pop    ebx
c0014515:	58                   	pop    eax
c0014516:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c001451b:	68 f6 40 02 c0       	push   0xc00240f6
c0014520:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014526:	e8 4b 68 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c001452b:	0f 20 d0             	mov    eax,cr2
c001452e:	5a                   	pop    edx
c001452f:	59                   	pop    ecx
c0014530:	50                   	push   eax
c0014531:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c0014536:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001453c:	e8 ef 67 ff ff       	call   c000ad30 <VgaText::putx(unsigned int)>
c0014541:	5b                   	pop    ebx
c0014542:	58                   	pop    eax
c0014543:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c0014548:	68 00 41 02 c0       	push   0xc0024100
c001454d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014553:	e8 1e 68 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c0014558:	0f 20 d8             	mov    eax,cr3
c001455b:	5a                   	pop    edx
c001455c:	59                   	pop    ecx
c001455d:	50                   	push   eax
c001455e:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c0014563:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014569:	e8 c2 67 ff ff       	call   c000ad30 <VgaText::putx(unsigned int)>
c001456e:	5b                   	pop    ebx
c001456f:	58                   	pop    eax
c0014570:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c0014575:	68 13 41 02 c0       	push   0xc0024113
c001457a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014580:	e8 f1 67 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c0014585:	0f 20 e0             	mov    eax,cr4
c0014588:	5a                   	pop    edx
c0014589:	59                   	pop    ecx
c001458a:	50                   	push   eax
c001458b:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c0014590:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014596:	e8 95 67 ff ff       	call   c000ad30 <VgaText::putx(unsigned int)>
c001459b:	5b                   	pop    ebx
c001459c:	58                   	pop    eax
c001459d:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c00145a2:	68 1d 41 02 c0       	push   0xc002411d
c00145a7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145ad:	e8 c4 67 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c00145b2:	5a                   	pop    edx
c00145b3:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c00145b8:	59                   	pop    ecx
c00145b9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00145bf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00145c2:	50                   	push   eax
c00145c3:	e8 68 67 ff ff       	call   c000ad30 <VgaText::putx(unsigned int)>
c00145c8:	5b                   	pop    ebx
c00145c9:	58                   	pop    eax
c00145ca:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c00145cf:	68 34 41 02 c0       	push   0xc0024134
c00145d4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145da:	e8 97 67 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c00145df:	5a                   	pop    edx
c00145e0:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c00145e5:	59                   	pop    ecx
c00145e6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00145ec:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00145ef:	ff 72 04             	push   DWORD PTR [edx+0x4]
c00145f2:	50                   	push   eax
c00145f3:	e8 38 67 ff ff       	call   c000ad30 <VgaText::putx(unsigned int)>
c00145f8:	5b                   	pop    ebx
c00145f9:	58                   	pop    eax
c00145fa:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c00145ff:	68 34 41 02 c0       	push   0xc0024134
c0014604:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001460a:	e8 67 67 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c001460f:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c0014614:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014617:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001461d:	8b 12                	mov    edx,DWORD PTR [edx]
c001461f:	59                   	pop    ecx
c0014620:	5b                   	pop    ebx
c0014621:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014624:	50                   	push   eax
c0014625:	e8 06 67 ff ff       	call   c000ad30 <VgaText::putx(unsigned int)>
c001462a:	83 c4 10             	add    esp,0x10
c001462d:	b2 fe                	mov    dl,0xfe
c001462f:	e4 60                	in     al,0x60
c0014631:	3c 1c                	cmp    al,0x1c
c0014633:	74 04                	je     c0014639 <Krnl::panic(char const*)+0x33a>
c0014635:	3c 5a                	cmp    al,0x5a
c0014637:	75 f6                	jne    c001462f <Krnl::panic(char const*)+0x330>
c0014639:	e4 64                	in     al,0x64
c001463b:	a8 02                	test   al,0x2
c001463d:	75 fa                	jne    c0014639 <Krnl::panic(char const*)+0x33a>
c001463f:	88 d0                	mov    al,dl
c0014641:	e6 64                	out    0x64,al
c0014643:	fa                   	cli    
c0014644:	f4                   	hlt    
c0014645:	eb e8                	jmp    c001462f <Krnl::panic(char const*)+0x330>
c0014647:	50                   	push   eax
c0014648:	50                   	push   eax
c0014649:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c001464e:	68 a0 41 02 c0       	push   0xc00241a0
c0014653:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014659:	e8 18 67 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c001465e:	58                   	pop    eax
c001465f:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c0014664:	5a                   	pop    edx
c0014665:	68 ae 40 02 c0       	push   0xc00240ae
c001466a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014670:	e8 01 67 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c0014675:	59                   	pop    ecx
c0014676:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001467b:	5b                   	pop    ebx
c001467c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001467f:	83 c0 0c             	add    eax,0xc
c0014682:	50                   	push   eax
c0014683:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c0014688:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001468e:	e8 e3 66 ff ff       	call   c000ad76 <VgaText::puts(char const*)>
c0014693:	83 c4 10             	add    esp,0x10
c0014696:	e9 a3 fd ff ff       	jmp    c001443e <Krnl::panic(char const*)+0x13f>
c001469b:	90                   	nop

c001469c <Net::switchEndian16(unsigned short)>:
c001469c:	83 ec 04             	sub    esp,0x4
c001469f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00146a3:	66 89 04 24          	mov    WORD PTR [esp],ax
c00146a7:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00146ab:	c1 f8 08             	sar    eax,0x8
c00146ae:	89 c2                	mov    edx,eax
c00146b0:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00146b4:	c1 e0 08             	shl    eax,0x8
c00146b7:	09 d0                	or     eax,edx
c00146b9:	83 c4 04             	add    esp,0x4
c00146bc:	c3                   	ret    
c00146bd:	8d 76 00             	lea    esi,[esi+0x0]

c00146c0 <Net::switchEndian32(unsigned int)>:
c00146c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146c4:	c1 e8 18             	shr    eax,0x18
c00146c7:	89 c2                	mov    edx,eax
c00146c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146cd:	c1 e0 08             	shl    eax,0x8
c00146d0:	25 00 00 ff 00       	and    eax,0xff0000
c00146d5:	09 c2                	or     edx,eax
c00146d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146db:	c1 e8 08             	shr    eax,0x8
c00146de:	25 00 ff 00 00       	and    eax,0xff00
c00146e3:	09 c2                	or     edx,eax
c00146e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00146e9:	c1 e0 18             	shl    eax,0x18
c00146ec:	09 d0                	or     eax,edx
c00146ee:	c3                   	ret    
c00146ef:	90                   	nop

c00146f0 <Net::crc32Calc(unsigned char*, int)>:
c00146f0:	83 ec 10             	sub    esp,0x10
c00146f3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00146f8:	75 0a                	jne    c0014704 <Net::crc32Calc(unsigned char*, int)+0x14>
c00146fa:	b8 00 00 00 00       	mov    eax,0x0
c00146ff:	e9 8c 00 00 00       	jmp    c0014790 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0014704:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014709:	7f 09                	jg     c0014714 <Net::crc32Calc(unsigned char*, int)+0x24>
c001470b:	b8 00 00 00 00       	mov    eax,0x0
c0014710:	eb 7e                	jmp    c0014790 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0014712:	66 90                	xchg   ax,ax
c0014714:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001471c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014724:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014728:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001472c:	7d 5a                	jge    c0014788 <Net::crc32Calc(unsigned char*, int)+0x98>
c001472e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014732:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014736:	01 d0                	add    eax,edx
c0014738:	8a 00                	mov    al,BYTE PTR [eax]
c001473a:	0f b6 c0             	movzx  eax,al
c001473d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0014741:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014749:	8d 76 00             	lea    esi,[esi+0x0]
c001474c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0014751:	7f 2d                	jg     c0014780 <Net::crc32Calc(unsigned char*, int)+0x90>
c0014753:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014757:	83 e0 01             	and    eax,0x1
c001475a:	74 10                	je     c001476c <Net::crc32Calc(unsigned char*, int)+0x7c>
c001475c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014760:	d1 e8                	shr    eax,1
c0014762:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0014767:	eb 0b                	jmp    c0014774 <Net::crc32Calc(unsigned char*, int)+0x84>
c0014769:	8d 76 00             	lea    esi,[esi+0x0]
c001476c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014770:	d1 e8                	shr    eax,1
c0014772:	66 90                	xchg   ax,ax
c0014774:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014778:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001477c:	eb ce                	jmp    c001474c <Net::crc32Calc(unsigned char*, int)+0x5c>
c001477e:	66 90                	xchg   ax,ax
c0014780:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014784:	eb 9e                	jmp    c0014724 <Net::crc32Calc(unsigned char*, int)+0x34>
c0014786:	66 90                	xchg   ax,ax
c0014788:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001478c:	f7 d0                	not    eax
c001478e:	66 90                	xchg   ax,ax
c0014790:	83 c4 10             	add    esp,0x10
c0014793:	c3                   	ret    

c0014794 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0014794:	57                   	push   edi
c0014795:	56                   	push   esi
c0014796:	53                   	push   ebx
c0014797:	83 ec 60             	sub    esp,0x60
c001479a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00147a1:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00147a5:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00147ad:	8d 76 00             	lea    esi,[esi+0x0]
c00147b0:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c00147b5:	7f 1d                	jg     c00147d4 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c00147b7:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00147be:	8d 50 01             	lea    edx,[eax+0x1]
c00147c1:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00147c8:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c00147cb:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00147cf:	eb df                	jmp    c00147b0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c00147d1:	8d 76 00             	lea    esi,[esi+0x0]
c00147d4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00147db:	8d 50 01             	lea    edx,[eax+0x1]
c00147de:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00147e5:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c00147e8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00147ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00147f3:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c00147f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00147fb:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c0014803:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014807:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001480b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001480f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014813:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014817:	89 c6                	mov    esi,eax
c0014819:	89 d7                	mov    edi,edx
c001481b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001481d:	89 c8                	mov    eax,ecx
c001481f:	89 fa                	mov    edx,edi
c0014821:	89 f3                	mov    ebx,esi
c0014823:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014827:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001482b:	89 04 24             	mov    DWORD PTR [esp],eax
c001482e:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0014836:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001483d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014841:	8d 44 24 78          	lea    eax,[esp+0x78]
c0014845:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014849:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0014851:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014855:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014859:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001485d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014861:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014865:	89 c6                	mov    esi,eax
c0014867:	89 d7                	mov    edi,edx
c0014869:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001486b:	89 c8                	mov    eax,ecx
c001486d:	89 fa                	mov    edx,edi
c001486f:	89 f3                	mov    ebx,esi
c0014871:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0014875:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0014879:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001487d:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0014885:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001488c:	0f b7 c0             	movzx  eax,ax
c001488f:	c1 f8 08             	sar    eax,0x8
c0014892:	89 c1                	mov    ecx,eax
c0014894:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001489b:	8d 50 01             	lea    edx,[eax+0x1]
c001489e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00148a5:	88 ca                	mov    dl,cl
c00148a7:	88 10                	mov    BYTE PTR [eax],dl
c00148a9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c00148b0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00148b7:	8d 48 01             	lea    ecx,[eax+0x1]
c00148ba:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c00148c1:	88 10                	mov    BYTE PTR [eax],dl
c00148c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00148c7:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00148cb:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c00148d2:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c00148d6:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00148da:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00148de:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00148e2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00148e6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00148ea:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00148ee:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00148f2:	89 c6                	mov    esi,eax
c00148f4:	89 d7                	mov    edi,edx
c00148f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00148f8:	89 c8                	mov    eax,ecx
c00148fa:	89 fa                	mov    edx,edi
c00148fc:	89 f3                	mov    ebx,esi
c00148fe:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0014902:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0014906:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001490a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001490e:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c0014915:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001491c:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c0014920:	50                   	push   eax
c0014921:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014925:	e8 c6 fd ff ff       	call   c00146f0 <Net::crc32Calc(unsigned char*, int)>
c001492a:	83 c4 08             	add    esp,0x8
c001492d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0014931:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0014935:	c1 e8 18             	shr    eax,0x18
c0014938:	89 c1                	mov    ecx,eax
c001493a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014941:	8d 50 01             	lea    edx,[eax+0x1]
c0014944:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001494b:	88 ca                	mov    dl,cl
c001494d:	88 10                	mov    BYTE PTR [eax],dl
c001494f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0014953:	c1 e8 10             	shr    eax,0x10
c0014956:	89 c1                	mov    ecx,eax
c0014958:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001495f:	8d 50 01             	lea    edx,[eax+0x1]
c0014962:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014969:	88 ca                	mov    dl,cl
c001496b:	88 10                	mov    BYTE PTR [eax],dl
c001496d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0014971:	c1 e8 08             	shr    eax,0x8
c0014974:	89 c1                	mov    ecx,eax
c0014976:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001497d:	8d 50 01             	lea    edx,[eax+0x1]
c0014980:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014987:	88 ca                	mov    dl,cl
c0014989:	88 10                	mov    BYTE PTR [eax],dl
c001498b:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014992:	8d 50 01             	lea    edx,[eax+0x1]
c0014995:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001499c:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00149a0:	88 10                	mov    BYTE PTR [eax],dl
c00149a2:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00149a6:	83 c4 60             	add    esp,0x60
c00149a9:	5b                   	pop    ebx
c00149aa:	5e                   	pop    esi
c00149ab:	5f                   	pop    edi
c00149ac:	c3                   	ret    
c00149ad:	8d 76 00             	lea    esi,[esi+0x0]

c00149b0 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c00149b0:	57                   	push   edi
c00149b1:	56                   	push   esi
c00149b2:	53                   	push   ebx
c00149b3:	83 ec 70             	sub    esp,0x70
c00149b6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00149bd:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00149c1:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c00149c9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00149d0:	83 c0 0e             	add    eax,0xe
c00149d3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00149d7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00149de:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00149e2:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c00149ea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00149ee:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00149f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00149f6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00149fa:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00149fe:	89 c6                	mov    esi,eax
c0014a00:	89 d7                	mov    edi,edx
c0014a02:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014a04:	89 c8                	mov    eax,ecx
c0014a06:	89 fa                	mov    edx,edi
c0014a08:	89 f3                	mov    ebx,esi
c0014a0a:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0014a0e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0014a12:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014a16:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014a1e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014a25:	83 c0 08             	add    eax,0x8
c0014a28:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0014a2c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014a33:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0014a37:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c0014a3f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014a43:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014a47:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014a4b:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014a4f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0014a53:	89 c6                	mov    esi,eax
c0014a55:	89 d7                	mov    edi,edx
c0014a57:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014a59:	89 c8                	mov    eax,ecx
c0014a5b:	89 fa                	mov    edx,edi
c0014a5d:	89 f3                	mov    ebx,esi
c0014a5f:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0014a63:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0014a67:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014a6b:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014a73:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014a7a:	8d 50 01             	lea    edx,[eax+0x1]
c0014a7d:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014a84:	8a 00                	mov    al,BYTE PTR [eax]
c0014a86:	0f b6 c0             	movzx  eax,al
c0014a89:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c0014a8e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014a95:	8d 50 01             	lea    edx,[eax+0x1]
c0014a98:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014a9f:	8a 00                	mov    al,BYTE PTR [eax]
c0014aa1:	0f b6 c0             	movzx  eax,al
c0014aa4:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c0014aa9:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c0014aae:	c1 e0 08             	shl    eax,0x8
c0014ab1:	89 c2                	mov    edx,eax
c0014ab3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0014ab7:	09 d0                	or     eax,edx
c0014ab9:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0014ac0:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0014ac4:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c0014acc:	75 46                	jne    c0014b14 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0014ace:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014ad5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014ad8:	66 3d dc 05          	cmp    ax,0x5dc
c0014adc:	77 16                	ja     c0014af4 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c0014ade:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014ae5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014ae8:	0f b7 c0             	movzx  eax,ax
c0014aeb:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0014af2:	eb 20                	jmp    c0014b14 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0014af4:	83 ec 0c             	sub    esp,0xc
c0014af7:	68 78 42 02 c0       	push   0xc0024278
c0014afc:	e8 5e 7f ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0014b01:	83 c4 10             	add    esp,0x10
c0014b04:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014b0b:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0014b0f:	e9 18 01 00 00       	jmp    c0014c2c <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c0014b14:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014b1b:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0014b22:	8b 12                	mov    edx,DWORD PTR [edx]
c0014b24:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014b28:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0014b2f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014b33:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014b37:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b43:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014b47:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014b4b:	89 c6                	mov    esi,eax
c0014b4d:	89 d7                	mov    edi,edx
c0014b4f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014b51:	89 c8                	mov    eax,ecx
c0014b53:	89 fa                	mov    edx,edi
c0014b55:	89 f3                	mov    ebx,esi
c0014b57:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014b5b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014b5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b62:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014b69:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c0014b70:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014b77:	8d 50 01             	lea    edx,[eax+0x1]
c0014b7a:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014b81:	8a 00                	mov    al,BYTE PTR [eax]
c0014b83:	0f b6 c0             	movzx  eax,al
c0014b86:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0014b8a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014b91:	8d 50 01             	lea    edx,[eax+0x1]
c0014b94:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014b9b:	8a 00                	mov    al,BYTE PTR [eax]
c0014b9d:	0f b6 c0             	movzx  eax,al
c0014ba0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0014ba4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014bab:	8d 50 01             	lea    edx,[eax+0x1]
c0014bae:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014bb5:	8a 00                	mov    al,BYTE PTR [eax]
c0014bb7:	0f b6 c0             	movzx  eax,al
c0014bba:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0014bbe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014bc5:	8d 50 01             	lea    edx,[eax+0x1]
c0014bc8:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014bcf:	8a 00                	mov    al,BYTE PTR [eax]
c0014bd1:	0f b6 c0             	movzx  eax,al
c0014bd4:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0014bd8:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0014bdc:	c1 e0 18             	shl    eax,0x18
c0014bdf:	89 c2                	mov    edx,eax
c0014be1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0014be5:	c1 e0 10             	shl    eax,0x10
c0014be8:	09 c2                	or     edx,eax
c0014bea:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0014bee:	c1 e0 08             	shl    eax,0x8
c0014bf1:	09 d0                	or     eax,edx
c0014bf3:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c0014bf7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0014bfb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014c02:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0014c06:	83 e8 04             	sub    eax,0x4
c0014c09:	83 ec 08             	sub    esp,0x8
c0014c0c:	50                   	push   eax
c0014c0d:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014c11:	e8 da fa ff ff       	call   c00146f0 <Net::crc32Calc(unsigned char*, int)>
c0014c16:	83 c4 10             	add    esp,0x10
c0014c19:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0014c1d:	0f 94 c2             	sete   dl
c0014c20:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014c27:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0014c2a:	90                   	nop
c0014c2b:	90                   	nop
c0014c2c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014c33:	83 c4 70             	add    esp,0x70
c0014c36:	5b                   	pop    ebx
c0014c37:	5e                   	pop    esi
c0014c38:	5f                   	pop    edi
c0014c39:	c2 04 00             	ret    0x4

c0014c3c <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0014c3c:	55                   	push   ebp
c0014c3d:	57                   	push   edi
c0014c3e:	56                   	push   esi
c0014c3f:	53                   	push   ebx
c0014c40:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014c46:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014c4d:	8a 1e                	mov    bl,BYTE PTR [esi]
c0014c4f:	8d 6e 01             	lea    ebp,[esi+0x1]
c0014c52:	80 fb 40             	cmp    bl,0x40
c0014c55:	75 1b                	jne    c0014c72 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0014c57:	8a 16                	mov    dl,BYTE PTR [esi]
c0014c59:	84 d2                	test   dl,dl
c0014c5b:	0f 84 f1 00 00 00    	je     c0014d52 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014c61:	8d 46 01             	lea    eax,[esi+0x1]
c0014c64:	80 fa 3a             	cmp    dl,0x3a
c0014c67:	74 04                	je     c0014c6d <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0014c69:	89 c6                	mov    esi,eax
c0014c6b:	eb ea                	jmp    c0014c57 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0014c6d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0014c70:	89 c6                	mov    esi,eax
c0014c72:	50                   	push   eax
c0014c73:	6a 40                	push   0x40
c0014c75:	6a 00                	push   0x0
c0014c77:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014c7b:	50                   	push   eax
c0014c7c:	e8 03 ba fe ff       	call   c0000684 <memset>
c0014c81:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0014c88:	31 c0                	xor    eax,eax
c0014c8a:	83 c4 10             	add    esp,0x10
c0014c8d:	8a 0f                	mov    cl,BYTE PTR [edi]
c0014c8f:	84 c9                	test   cl,cl
c0014c91:	0f 84 bb 00 00 00    	je     c0014d52 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014c97:	3d c7 00 00 00       	cmp    eax,0xc7
c0014c9c:	0f 8f b0 00 00 00    	jg     c0014d52 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014ca2:	80 f9 0a             	cmp    cl,0xa
c0014ca5:	0f 85 98 00 00 00    	jne    c0014d43 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0014cab:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0014cb0:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0014cb4:	a8 df                	test   al,0xdf
c0014cb6:	0f 94 c1             	sete   cl
c0014cb9:	3c 23                	cmp    al,0x23
c0014cbb:	0f 94 c2             	sete   dl
c0014cbe:	08 d1                	or     cl,dl
c0014cc0:	75 4a                	jne    c0014d0c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014cc2:	8d 50 f7             	lea    edx,[eax-0x9]
c0014cc5:	80 fa 01             	cmp    dl,0x1
c0014cc8:	76 42                	jbe    c0014d0c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014cca:	3c 5b                	cmp    al,0x5b
c0014ccc:	75 42                	jne    c0014d10 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0014cce:	80 fb 40             	cmp    bl,0x40
c0014cd1:	75 39                	jne    c0014d0c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014cd3:	83 ec 0c             	sub    esp,0xc
c0014cd6:	8d 54 24 65          	lea    edx,[esp+0x65]
c0014cda:	52                   	push   edx
c0014cdb:	e8 c0 b9 fe ff       	call   c00006a0 <strlen>
c0014ce0:	83 c4 10             	add    esp,0x10
c0014ce3:	83 f8 3f             	cmp    eax,0x3f
c0014ce6:	77 6a                	ja     c0014d52 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014ce8:	50                   	push   eax
c0014ce9:	50                   	push   eax
c0014cea:	8d 54 24 61          	lea    edx,[esp+0x61]
c0014cee:	52                   	push   edx
c0014cef:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014cf3:	52                   	push   edx
c0014cf4:	e8 47 ba fe ff       	call   c0000740 <strcpy>
c0014cf9:	58                   	pop    eax
c0014cfa:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014cfe:	52                   	push   edx
c0014cff:	e8 9c b9 fe ff       	call   c00006a0 <strlen>
c0014d04:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0014d09:	83 c4 10             	add    esp,0x10
c0014d0c:	31 d2                	xor    edx,edx
c0014d0e:	eb 3a                	jmp    c0014d4a <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0014d10:	80 fb 40             	cmp    bl,0x40
c0014d13:	74 06                	je     c0014d1b <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0014d15:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014d19:	eb 20                	jmp    c0014d3b <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0014d1b:	50                   	push   eax
c0014d1c:	50                   	push   eax
c0014d1d:	55                   	push   ebp
c0014d1e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014d22:	50                   	push   eax
c0014d23:	e8 a4 ba fe ff       	call   c00007cc <strcmp>
c0014d28:	83 c4 10             	add    esp,0x10
c0014d2b:	85 c0                	test   eax,eax
c0014d2d:	75 dd                	jne    c0014d0c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d2f:	eb e4                	jmp    c0014d15 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0014d31:	8d 50 01             	lea    edx,[eax+0x1]
c0014d34:	80 f9 3d             	cmp    cl,0x3d
c0014d37:	74 1d                	je     c0014d56 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0014d39:	89 d0                	mov    eax,edx
c0014d3b:	8a 08                	mov    cl,BYTE PTR [eax]
c0014d3d:	84 c9                	test   cl,cl
c0014d3f:	75 f0                	jne    c0014d31 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0014d41:	eb 0f                	jmp    c0014d52 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d43:	8d 50 01             	lea    edx,[eax+0x1]
c0014d46:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0014d4a:	47                   	inc    edi
c0014d4b:	89 d0                	mov    eax,edx
c0014d4d:	e9 3b ff ff ff       	jmp    c0014c8d <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0014d52:	31 c0                	xor    eax,eax
c0014d54:	eb 33                	jmp    c0014d89 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0014d56:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014d5a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0014d5d:	50                   	push   eax
c0014d5e:	50                   	push   eax
c0014d5f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0014d63:	50                   	push   eax
c0014d64:	56                   	push   esi
c0014d65:	e8 62 ba fe ff       	call   c00007cc <strcmp>
c0014d6a:	83 c4 10             	add    esp,0x10
c0014d6d:	85 c0                	test   eax,eax
c0014d6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d73:	75 97                	jne    c0014d0c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d75:	51                   	push   ecx
c0014d76:	51                   	push   ecx
c0014d77:	52                   	push   edx
c0014d78:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0014d7f:	e8 bc b9 fe ff       	call   c0000740 <strcpy>
c0014d84:	83 c4 10             	add    esp,0x10
c0014d87:	b0 01                	mov    al,0x1
c0014d89:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014d8f:	5b                   	pop    ebx
c0014d90:	5e                   	pop    esi
c0014d91:	5f                   	pop    edi
c0014d92:	5d                   	pop    ebp
c0014d93:	c3                   	ret    

c0014d94 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0014d94:	57                   	push   edi
c0014d95:	56                   	push   esi
c0014d96:	53                   	push   ebx
c0014d97:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014d9d:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0014da4:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0014dab:	53                   	push   ebx
c0014dac:	e8 ef b8 fe ff       	call   c00006a0 <strlen>
c0014db1:	89 34 24             	mov    DWORD PTR [esp],esi
c0014db4:	89 c7                	mov    edi,eax
c0014db6:	e8 e5 b8 fe ff       	call   c00006a0 <strlen>
c0014dbb:	83 c4 10             	add    esp,0x10
c0014dbe:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0014dc2:	3d ff 00 00 00       	cmp    eax,0xff
c0014dc7:	0f 87 d3 00 00 00    	ja     c0014ea0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0014dcd:	57                   	push   edi
c0014dce:	57                   	push   edi
c0014dcf:	56                   	push   esi
c0014dd0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014dd4:	56                   	push   esi
c0014dd5:	e8 66 b9 fe ff       	call   c0000740 <strcpy>
c0014dda:	58                   	pop    eax
c0014ddb:	5a                   	pop    edx
c0014ddc:	68 1a 46 02 c0       	push   0xc002461a
c0014de1:	56                   	push   esi
c0014de2:	e8 99 ba fe ff       	call   c0000880 <strcat>
c0014de7:	59                   	pop    ecx
c0014de8:	5f                   	pop    edi
c0014de9:	53                   	push   ebx
c0014dea:	56                   	push   esi
c0014deb:	e8 90 ba fe ff       	call   c0000880 <strcat>
c0014df0:	58                   	pop    eax
c0014df1:	5a                   	pop    edx
c0014df2:	68 c4 42 02 c0       	push   0xc00242c4
c0014df7:	56                   	push   esi
c0014df8:	e8 83 ba fe ff       	call   c0000880 <strcat>
c0014dfd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014e04:	e8 ba 4b ff ff       	call   c00099c3 <malloc>
c0014e09:	83 c4 0c             	add    esp,0xc
c0014e0c:	89 c3                	mov    ebx,eax
c0014e0e:	ff 35 50 76 02 c0    	push   DWORD PTR ds:0xc0027650
c0014e14:	56                   	push   esi
c0014e15:	50                   	push   eax
c0014e16:	e8 af 81 ff ff       	call   c000cfca <File::File(char const*, Process*)>
c0014e1b:	83 c4 10             	add    esp,0x10
c0014e1e:	85 db                	test   ebx,ebx
c0014e20:	74 7e                	je     c0014ea0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0014e22:	51                   	push   ecx
c0014e23:	51                   	push   ecx
c0014e24:	6a 01                	push   0x1
c0014e26:	53                   	push   ebx
c0014e27:	e8 02 82 ff ff       	call   c000d02e <File::open(FileOpenMode)>
c0014e2c:	83 c4 10             	add    esp,0x10
c0014e2f:	85 c0                	test   eax,eax
c0014e31:	74 08                	je     c0014e3b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0014e33:	83 ec 0c             	sub    esp,0xc
c0014e36:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e38:	53                   	push   ebx
c0014e39:	eb 5f                	jmp    c0014e9a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0014e3b:	52                   	push   edx
c0014e3c:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014e40:	50                   	push   eax
c0014e41:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014e45:	50                   	push   eax
c0014e46:	53                   	push   ebx
c0014e47:	e8 8e 84 ff ff       	call   c000d2da <File::stat(unsigned long long*, bool*)>
c0014e4c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014e50:	83 c4 10             	add    esp,0x10
c0014e53:	89 c1                	mov    ecx,eax
c0014e55:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0014e59:	74 31                	je     c0014e8c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0014e5b:	83 ec 0c             	sub    esp,0xc
c0014e5e:	50                   	push   eax
c0014e5f:	e8 5f 4b ff ff       	call   c00099c3 <malloc>
c0014e64:	89 c6                	mov    esi,eax
c0014e66:	58                   	pop    eax
c0014e67:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e69:	8d 54 24 20          	lea    edx,[esp+0x20]
c0014e6d:	52                   	push   edx
c0014e6e:	56                   	push   esi
c0014e6f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014e73:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014e77:	53                   	push   ebx
c0014e78:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e7b:	83 c4 20             	add    esp,0x20
c0014e7e:	85 c0                	test   eax,eax
c0014e80:	75 0a                	jne    c0014e8c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0014e82:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014e86:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0014e8a:	74 18                	je     c0014ea4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0014e8c:	83 ec 0c             	sub    esp,0xc
c0014e8f:	53                   	push   ebx
c0014e90:	e8 f7 81 ff ff       	call   c000d08c <File::close()>
c0014e95:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e97:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e9a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014e9d:	83 c4 10             	add    esp,0x10
c0014ea0:	31 c0                	xor    eax,eax
c0014ea2:	eb 3b                	jmp    c0014edf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0014ea4:	83 ec 0c             	sub    esp,0xc
c0014ea7:	53                   	push   ebx
c0014ea8:	e8 df 81 ff ff       	call   c000d08c <File::close()>
c0014ead:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014eaf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014eb2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014eb5:	83 c4 0c             	add    esp,0xc
c0014eb8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0014ebf:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0014ec6:	56                   	push   esi
c0014ec7:	e8 70 fd ff ff       	call   c0014c3c <Reg::findLineFromLoadedData(char*, char*, char*)>
c0014ecc:	89 34 24             	mov    DWORD PTR [esp],esi
c0014ecf:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0014ed3:	e8 fb 4a ff ff       	call   c00099d3 <free>
c0014ed8:	83 c4 10             	add    esp,0x10
c0014edb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014edf:	81 c4 20 01 00 00    	add    esp,0x120
c0014ee5:	5b                   	pop    ebx
c0014ee6:	5e                   	pop    esi
c0014ee7:	5f                   	pop    edi
c0014ee8:	c3                   	ret    

c0014ee9 <Reg::getLine(char*, char*, char*)>:
c0014ee9:	57                   	push   edi
c0014eea:	56                   	push   esi
c0014eeb:	53                   	push   ebx
c0014eec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014ef0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014ef4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014ef8:	57                   	push   edi
c0014ef9:	56                   	push   esi
c0014efa:	53                   	push   ebx
c0014efb:	68 c9 42 02 c0       	push   0xc00242c9
c0014f00:	e8 8f fe ff ff       	call   c0014d94 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014f05:	83 c4 10             	add    esp,0x10
c0014f08:	84 c0                	test   al,al
c0014f0a:	75 10                	jne    c0014f1c <Reg::getLine(char*, char*, char*)+0x33>
c0014f0c:	57                   	push   edi
c0014f0d:	56                   	push   esi
c0014f0e:	53                   	push   ebx
c0014f0f:	68 ee 42 02 c0       	push   0xc00242ee
c0014f14:	e8 7b fe ff ff       	call   c0014d94 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014f19:	83 c4 10             	add    esp,0x10
c0014f1c:	5b                   	pop    ebx
c0014f1d:	5e                   	pop    esi
c0014f1e:	5f                   	pop    edi
c0014f1f:	c3                   	ret    

c0014f20 <Reg::readInt(char*, char*, int*)>:
c0014f20:	55                   	push   ebp
c0014f21:	57                   	push   edi
c0014f22:	56                   	push   esi
c0014f23:	53                   	push   ebx
c0014f24:	81 ec f0 00 00 00    	sub    esp,0xf0
c0014f2a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0014f2e:	57                   	push   edi
c0014f2f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0014f36:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0014f3d:	e8 a7 ff ff ff       	call   c0014ee9 <Reg::getLine(char*, char*, char*)>
c0014f42:	83 c4 10             	add    esp,0x10
c0014f45:	84 c0                	test   al,al
c0014f47:	0f 84 b3 00 00 00    	je     c0015000 <Reg::readInt(char*, char*, int*)+0xe0>
c0014f4d:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0014f51:	80 fa 2b             	cmp    dl,0x2b
c0014f54:	74 0c                	je     c0014f62 <Reg::readInt(char*, char*, int*)+0x42>
c0014f56:	80 fa 2d             	cmp    dl,0x2d
c0014f59:	75 0e                	jne    c0014f69 <Reg::readInt(char*, char*, int*)+0x49>
c0014f5b:	ba 01 00 00 00       	mov    edx,0x1
c0014f60:	eb 0b                	jmp    c0014f6d <Reg::readInt(char*, char*, int*)+0x4d>
c0014f62:	ba 01 00 00 00       	mov    edx,0x1
c0014f67:	eb 02                	jmp    c0014f6b <Reg::readInt(char*, char*, int*)+0x4b>
c0014f69:	31 d2                	xor    edx,edx
c0014f6b:	31 c0                	xor    eax,eax
c0014f6d:	be 0a 00 00 00       	mov    esi,0xa
c0014f72:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0014f77:	75 20                	jne    c0014f99 <Reg::readInt(char*, char*, int*)+0x79>
c0014f79:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0014f7d:	80 f9 78             	cmp    cl,0x78
c0014f80:	75 0a                	jne    c0014f8c <Reg::readInt(char*, char*, int*)+0x6c>
c0014f82:	83 c2 02             	add    edx,0x2
c0014f85:	be 10 00 00 00       	mov    esi,0x10
c0014f8a:	eb 0d                	jmp    c0014f99 <Reg::readInt(char*, char*, int*)+0x79>
c0014f8c:	80 f9 62             	cmp    cl,0x62
c0014f8f:	75 08                	jne    c0014f99 <Reg::readInt(char*, char*, int*)+0x79>
c0014f91:	83 c2 02             	add    edx,0x2
c0014f94:	be 02 00 00 00       	mov    esi,0x2
c0014f99:	01 d7                	add    edi,edx
c0014f9b:	31 d2                	xor    edx,edx
c0014f9d:	8a 1f                	mov    bl,BYTE PTR [edi]
c0014f9f:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0014fa3:	80 fb 0d             	cmp    bl,0xd
c0014fa6:	0f 94 c3             	sete   bl
c0014fa9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0014fae:	0f 94 c1             	sete   cl
c0014fb1:	08 cb                	or     bl,cl
c0014fb3:	75 3a                	jne    c0014fef <Reg::readInt(char*, char*, int*)+0xcf>
c0014fb5:	0f af d6             	imul   edx,esi
c0014fb8:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0014fbd:	83 fe 10             	cmp    esi,0x10
c0014fc0:	75 26                	jne    c0014fe8 <Reg::readInt(char*, char*, int*)+0xc8>
c0014fc2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0014fc6:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0014fc9:	89 e9                	mov    ecx,ebp
c0014fcb:	80 f9 05             	cmp    cl,0x5
c0014fce:	77 06                	ja     c0014fd6 <Reg::readInt(char*, char*, int*)+0xb6>
c0014fd0:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0014fd4:	eb 16                	jmp    c0014fec <Reg::readInt(char*, char*, int*)+0xcc>
c0014fd6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0014fda:	83 e9 61             	sub    ecx,0x61
c0014fdd:	80 f9 05             	cmp    cl,0x5
c0014fe0:	77 06                	ja     c0014fe8 <Reg::readInt(char*, char*, int*)+0xc8>
c0014fe2:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0014fe6:	eb 04                	jmp    c0014fec <Reg::readInt(char*, char*, int*)+0xcc>
c0014fe8:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0014fec:	47                   	inc    edi
c0014fed:	eb ae                	jmp    c0014f9d <Reg::readInt(char*, char*, int*)+0x7d>
c0014fef:	84 c0                	test   al,al
c0014ff1:	74 02                	je     c0014ff5 <Reg::readInt(char*, char*, int*)+0xd5>
c0014ff3:	f7 da                	neg    edx
c0014ff5:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0014ffc:	89 10                	mov    DWORD PTR [eax],edx
c0014ffe:	88 d8                	mov    al,bl
c0015000:	81 c4 ec 00 00 00    	add    esp,0xec
c0015006:	5b                   	pop    ebx
c0015007:	5e                   	pop    esi
c0015008:	5f                   	pop    edi
c0015009:	5d                   	pop    ebp
c001500a:	c3                   	ret    

c001500b <Reg::readString(char*, char*, char*, int)>:
c001500b:	57                   	push   edi
c001500c:	56                   	push   esi
c001500d:	53                   	push   ebx
c001500e:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015014:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001501b:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001501f:	57                   	push   edi
c0015020:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015027:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001502e:	e8 b6 fe ff ff       	call   c0014ee9 <Reg::getLine(char*, char*, char*)>
c0015033:	83 c4 10             	add    esp,0x10
c0015036:	89 c6                	mov    esi,eax
c0015038:	84 c0                	test   al,al
c001503a:	74 44                	je     c0015080 <Reg::readString(char*, char*, char*, int)+0x75>
c001503c:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0015043:	31 c0                	xor    eax,eax
c0015045:	4a                   	dec    edx
c0015046:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0015049:	84 c9                	test   cl,cl
c001504b:	74 0f                	je     c001505c <Reg::readString(char*, char*, char*, int)+0x51>
c001504d:	39 c2                	cmp    edx,eax
c001504f:	7e 0b                	jle    c001505c <Reg::readString(char*, char*, char*, int)+0x51>
c0015051:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0015054:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0015059:	40                   	inc    eax
c001505a:	eb ea                	jmp    c0015046 <Reg::readString(char*, char*, char*, int)+0x3b>
c001505c:	83 ec 0c             	sub    esp,0xc
c001505f:	53                   	push   ebx
c0015060:	e8 3b b6 fe ff       	call   c00006a0 <strlen>
c0015065:	83 c4 10             	add    esp,0x10
c0015068:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001506d:	75 11                	jne    c0015080 <Reg::readString(char*, char*, char*, int)+0x75>
c001506f:	83 ec 0c             	sub    esp,0xc
c0015072:	53                   	push   ebx
c0015073:	e8 28 b6 fe ff       	call   c00006a0 <strlen>
c0015078:	83 c4 10             	add    esp,0x10
c001507b:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0015080:	81 c4 d0 00 00 00    	add    esp,0xd0
c0015086:	89 f0                	mov    eax,esi
c0015088:	5b                   	pop    ebx
c0015089:	5e                   	pop    esi
c001508a:	5f                   	pop    edi
c001508b:	c3                   	ret    

c001508c <Reg::readBool(char*, char*, bool*)>:
c001508c:	83 ec 20             	sub    esp,0x20
c001508f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015093:	50                   	push   eax
c0015094:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015098:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001509c:	e8 7f fe ff ff       	call   c0014f20 <Reg::readInt(char*, char*, int*)>
c00150a1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00150a6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00150aa:	0f 95 02             	setne  BYTE PTR [edx]
c00150ad:	83 c4 2c             	add    esp,0x2c
c00150b0:	c3                   	ret    

c00150b1 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00150b1:	53                   	push   ebx
c00150b2:	83 ec 1c             	sub    esp,0x1c
c00150b5:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00150b9:	8d 44 24 13          	lea    eax,[esp+0x13]
c00150bd:	50                   	push   eax
c00150be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150c6:	e8 c1 ff ff ff       	call   c001508c <Reg::readBool(char*, char*, bool*)>
c00150cb:	83 c4 10             	add    esp,0x10
c00150ce:	84 c0                	test   al,al
c00150d0:	74 04                	je     c00150d6 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00150d2:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00150d6:	88 d8                	mov    al,bl
c00150d8:	83 c4 18             	add    esp,0x18
c00150db:	5b                   	pop    ebx
c00150dc:	c3                   	ret    

c00150dd <Reg::readIntWithDefault(char*, char*, int)>:
c00150dd:	53                   	push   ebx
c00150de:	83 ec 1c             	sub    esp,0x1c
c00150e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00150e5:	8d 44 24 10          	lea    eax,[esp+0x10]
c00150e9:	50                   	push   eax
c00150ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150f2:	e8 29 fe ff ff       	call   c0014f20 <Reg::readInt(char*, char*, int*)>
c00150f7:	83 c4 10             	add    esp,0x10
c00150fa:	84 c0                	test   al,al
c00150fc:	74 04                	je     c0015102 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00150fe:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0015102:	89 d8                	mov    eax,ebx
c0015104:	83 c4 18             	add    esp,0x18
c0015107:	5b                   	pop    ebx
c0015108:	c3                   	ret    

c0015109 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0015109:	57                   	push   edi
c001510a:	56                   	push   esi
c001510b:	56                   	push   esi
c001510c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015110:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015114:	56                   	push   esi
c0015115:	57                   	push   edi
c0015116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001511a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001511e:	e8 e8 fe ff ff       	call   c001500b <Reg::readString(char*, char*, char*, int)>
c0015123:	83 c4 10             	add    esp,0x10
c0015126:	84 c0                	test   al,al
c0015128:	75 1a                	jne    c0015144 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001512a:	51                   	push   ecx
c001512b:	56                   	push   esi
c001512c:	6a 00                	push   0x0
c001512e:	57                   	push   edi
c001512f:	e8 50 b5 fe ff       	call   c0000684 <memset>
c0015134:	8d 4e ff             	lea    ecx,[esi-0x1]
c0015137:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001513b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001513d:	83 c4 10             	add    esp,0x10
c0015140:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0015144:	89 f8                	mov    eax,edi
c0015146:	5a                   	pop    edx
c0015147:	5e                   	pop    esi
c0015148:	5f                   	pop    edi
c0015149:	c3                   	ret    

c001514a <Sys::eject(regs*)>:
c001514a:	83 ec 0c             	sub    esp,0xc
c001514d:	83 ca ff             	or     edx,0xffffffff
c0015150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015154:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0015157:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001515c:	83 e9 41             	sub    ecx,0x41
c001515f:	83 f9 19             	cmp    ecx,0x19
c0015162:	77 18                	ja     c001517c <Sys::eject(regs*)+0x32>
c0015164:	8b 0c 8d 20 67 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd98e0]
c001516b:	85 c9                	test   ecx,ecx
c001516d:	74 0d                	je     c001517c <Sys::eject(regs*)+0x32>
c001516f:	83 ec 0c             	sub    esp,0xc
c0015172:	51                   	push   ecx
c0015173:	e8 9a af ff ff       	call   c0010112 <LogicalDisk::eject()>
c0015178:	83 c4 10             	add    esp,0x10
c001517b:	99                   	cdq    
c001517c:	83 c4 0c             	add    esp,0xc
c001517f:	c3                   	ret    

c0015180 <Sys::exit(regs*)>:
c0015180:	83 ec 18             	sub    esp,0x18
c0015183:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015187:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001518a:	e8 59 36 00 00       	call   c00187e8 <terminateTask(int)>
c001518f:	83 c8 ff             	or     eax,0xffffffff
c0015192:	83 c4 1c             	add    esp,0x1c
c0015195:	89 c2                	mov    edx,eax
c0015197:	c3                   	ret    

c0015198 <Sys::getCwd(regs*)>:
c0015198:	83 ec 10             	sub    esp,0x10
c001519b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001519f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00151a2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00151a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151aa:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00151ad:	e8 1a 7c ff ff       	call   c000cdcc <Fs::getcwd(Process*, char*, int)>
c00151b2:	83 c4 1c             	add    esp,0x1c
c00151b5:	99                   	cdq    
c00151b6:	c3                   	ret    

c00151b7 <Sys::getPID(regs*)>:
c00151b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151bc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00151bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00151c1:	99                   	cdq    
c00151c2:	c3                   	ret    

c00151c3 <Sys::getRAMData(regs*)>:
c00151c3:	8b 0d 98 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026198
c00151c9:	69 05 94 61 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026194,0xc8
c00151d3:	99                   	cdq    
c00151d4:	f7 f9                	idiv   ecx
c00151d6:	c1 e0 18             	shl    eax,0x18
c00151d9:	09 c8                	or     eax,ecx
c00151db:	99                   	cdq    
c00151dc:	c3                   	ret    

c00151dd <Sys::getVGAPtr(regs*)>:
c00151dd:	55                   	push   ebp
c00151de:	57                   	push   edi
c00151df:	56                   	push   esi
c00151e0:	53                   	push   ebx
c00151e1:	83 ec 18             	sub    esp,0x18
c00151e4:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00151e8:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c00151eb:	e8 fc 30 00 00       	call   c00182ec <Thr::processFromPID(int)>
c00151f0:	83 c4 10             	add    esp,0x10
c00151f3:	89 c1                	mov    ecx,eax
c00151f5:	b8 01 00 00 00       	mov    eax,0x1
c00151fa:	85 c9                	test   ecx,ecx
c00151fc:	74 59                	je     c0015257 <Sys::getVGAPtr(regs*)+0x7a>
c00151fe:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c0015204:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0015208:	74 0c                	je     c0015216 <Sys::getVGAPtr(regs*)+0x39>
c001520a:	83 ec 0c             	sub    esp,0xc
c001520d:	53                   	push   ebx
c001520e:	e8 56 56 ff ff       	call   c000a869 <setActiveTerminal(VgaText*)>
c0015213:	83 c4 10             	add    esp,0x10
c0015216:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0015219:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001521c:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0015221:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015223:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0015226:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015229:	81 c3 82 00 00 00    	add    ebx,0x82
c001522f:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0015235:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015238:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001523b:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0015241:	50                   	push   eax
c0015242:	50                   	push   eax
c0015243:	53                   	push   ebx
c0015244:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015247:	05 a8 0f 00 00       	add    eax,0xfa8
c001524c:	50                   	push   eax
c001524d:	e8 ee b4 fe ff       	call   c0000740 <strcpy>
c0015252:	83 c4 10             	add    esp,0x10
c0015255:	31 c0                	xor    eax,eax
c0015257:	83 c4 0c             	add    esp,0xc
c001525a:	31 d2                	xor    edx,edx
c001525c:	5b                   	pop    ebx
c001525d:	5e                   	pop    esi
c001525e:	5f                   	pop    edi
c001525f:	5d                   	pop    ebp
c0015260:	c3                   	ret    

c0015261 <Sys::loadDLL(regs*)>:
c0015261:	56                   	push   esi
c0015262:	53                   	push   ebx
c0015263:	31 d2                	xor    edx,edx
c0015265:	51                   	push   ecx
c0015266:	b8 01 00 00 00       	mov    eax,0x1
c001526b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001526f:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0015273:	0f 84 8c 00 00 00    	je     c0015305 <Sys::loadDLL(regs*)+0xa4>
c0015279:	83 ec 0c             	sub    esp,0xc
c001527c:	68 14 01 00 00       	push   0x114
c0015281:	e8 3d 47 ff ff       	call   c00099c3 <malloc>
c0015286:	83 c4 0c             	add    esp,0xc
c0015289:	89 c3                	mov    ebx,eax
c001528b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015290:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015293:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015296:	53                   	push   ebx
c0015297:	e8 2e 7d ff ff       	call   c000cfca <File::File(char const*, Process*)>
c001529c:	83 c4 10             	add    esp,0x10
c001529f:	31 d2                	xor    edx,edx
c00152a1:	b8 02 00 00 00       	mov    eax,0x2
c00152a6:	85 db                	test   ebx,ebx
c00152a8:	74 5b                	je     c0015305 <Sys::loadDLL(regs*)+0xa4>
c00152aa:	83 ec 0c             	sub    esp,0xc
c00152ad:	53                   	push   ebx
c00152ae:	e8 e9 7f ff ff       	call   c000d29c <File::exists()>
c00152b3:	83 c4 10             	add    esp,0x10
c00152b6:	84 c0                	test   al,al
c00152b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00152ba:	75 11                	jne    c00152cd <Sys::loadDLL(regs*)+0x6c>
c00152bc:	83 ec 0c             	sub    esp,0xc
c00152bf:	53                   	push   ebx
c00152c0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00152c3:	83 c4 10             	add    esp,0x10
c00152c6:	b8 03 00 00 00       	mov    eax,0x3
c00152cb:	eb 36                	jmp    c0015303 <Sys::loadDLL(regs*)+0xa2>
c00152cd:	83 ec 0c             	sub    esp,0xc
c00152d0:	53                   	push   ebx
c00152d1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00152d4:	58                   	pop    eax
c00152d5:	5a                   	pop    edx
c00152d6:	6a 00                	push   0x0
c00152d8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00152db:	e8 0a 22 00 00       	call   c00174ea <Thr::loadDLL(char const*, bool)>
c00152e0:	83 c4 10             	add    esp,0x10
c00152e3:	89 c1                	mov    ecx,eax
c00152e5:	31 d2                	xor    edx,edx
c00152e7:	b8 04 00 00 00       	mov    eax,0x4
c00152ec:	85 c9                	test   ecx,ecx
c00152ee:	74 15                	je     c0015305 <Sys::loadDLL(regs*)+0xa4>
c00152f0:	53                   	push   ebx
c00152f1:	53                   	push   ebx
c00152f2:	ff 35 68 61 02 c0    	push   DWORD PTR ds:0xc0026168
c00152f8:	51                   	push   ecx
c00152f9:	e8 1d 24 00 00       	call   c001771b <Thr::executeDLL(unsigned long, void*)>
c00152fe:	83 c4 10             	add    esp,0x10
c0015301:	31 c0                	xor    eax,eax
c0015303:	31 d2                	xor    edx,edx
c0015305:	59                   	pop    ecx
c0015306:	5b                   	pop    ebx
c0015307:	5e                   	pop    esi
c0015308:	c3                   	ret    

c0015309 <Sys::read(regs*)>:
c0015309:	57                   	push   edi
c001530a:	56                   	push   esi
c001530b:	53                   	push   ebx
c001530c:	83 ec 10             	sub    esp,0x10
c001530f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015313:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015316:	83 f8 02             	cmp    eax,0x2
c0015319:	77 10                	ja     c001532b <Sys::read(regs*)+0x22>
c001531b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015320:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015323:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015329:	eb 0e                	jmp    c0015339 <Sys::read(regs*)+0x30>
c001532b:	83 ec 0c             	sub    esp,0xc
c001532e:	50                   	push   eax
c001532f:	e8 af 62 ff ff       	call   c000b5e3 <getFromFileDescriptor(int)>
c0015334:	83 c4 10             	add    esp,0x10
c0015337:	89 c1                	mov    ecx,eax
c0015339:	83 c8 ff             	or     eax,0xffffffff
c001533c:	85 c9                	test   ecx,ecx
c001533e:	89 c2                	mov    edx,eax
c0015340:	74 28                	je     c001536a <Sys::read(regs*)+0x61>
c0015342:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001534a:	31 ff                	xor    edi,edi
c001534c:	83 ec 0c             	sub    esp,0xc
c001534f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015351:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015355:	52                   	push   edx
c0015356:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015359:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001535c:	57                   	push   edi
c001535d:	56                   	push   esi
c001535e:	51                   	push   ecx
c001535f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015362:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015366:	83 c4 20             	add    esp,0x20
c0015369:	99                   	cdq    
c001536a:	83 c4 10             	add    esp,0x10
c001536d:	5b                   	pop    ebx
c001536e:	5e                   	pop    esi
c001536f:	5f                   	pop    edi
c0015370:	c3                   	ret    

c0015371 <Sys::sbrk(regs*)>:
c0015371:	56                   	push   esi
c0015372:	53                   	push   ebx
c0015373:	50                   	push   eax
c0015374:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015379:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001537d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015380:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0015383:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0015389:	85 db                	test   ebx,ebx
c001538b:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001538e:	74 02                	je     c0015392 <Sys::sbrk(regs*)+0x21>
c0015390:	79 06                	jns    c0015398 <Sys::sbrk(regs*)+0x27>
c0015392:	89 f0                	mov    eax,esi
c0015394:	31 d2                	xor    edx,edx
c0015396:	eb 2a                	jmp    c00153c2 <Sys::sbrk(regs*)+0x51>
c0015398:	83 c8 ff             	or     eax,0xffffffff
c001539b:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00153a1:	89 c2                	mov    edx,eax
c00153a3:	77 1d                	ja     c00153c2 <Sys::sbrk(regs*)+0x51>
c00153a5:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00153ab:	50                   	push   eax
c00153ac:	c1 ea 0c             	shr    edx,0xc
c00153af:	68 07 0c 00 00       	push   0xc07
c00153b4:	52                   	push   edx
c00153b5:	51                   	push   ecx
c00153b6:	e8 27 6b ff ff       	call   c000bee2 <VAS::allocatePages(int, int)>
c00153bb:	89 f0                	mov    eax,esi
c00153bd:	31 d2                	xor    edx,edx
c00153bf:	83 c4 10             	add    esp,0x10
c00153c2:	59                   	pop    ecx
c00153c3:	5b                   	pop    ebx
c00153c4:	5e                   	pop    esi
c00153c5:	c3                   	ret    

c00153c6 <Sys::setCwd(regs*)>:
c00153c6:	83 ec 14             	sub    esp,0x14
c00153c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00153cd:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00153d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153d5:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00153d8:	e8 5e 7f ff ff       	call   c000d33b <Fs::setcwd(Process*, char*)>
c00153dd:	83 c4 1c             	add    esp,0x1c
c00153e0:	99                   	cdq    
c00153e1:	c3                   	ret    

c00153e2 <Sys::setTime(regs*)>:
c00153e2:	55                   	push   ebp
c00153e3:	31 c9                	xor    ecx,ecx
c00153e5:	57                   	push   edi
c00153e6:	bd 0c 00 00 00       	mov    ebp,0xc
c00153eb:	56                   	push   esi
c00153ec:	53                   	push   ebx
c00153ed:	31 db                	xor    ebx,ebx
c00153ef:	83 ec 10             	sub    esp,0x10
c00153f2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00153f6:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00153f9:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00153fc:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00153ff:	89 c2                	mov    edx,eax
c0015401:	66 81 ef 6c 07       	sub    di,0x76c
c0015406:	83 e2 1f             	and    edx,0x1f
c0015409:	c1 e7 10             	shl    edi,0x10
c001540c:	42                   	inc    edx
c001540d:	c1 e8 05             	shr    eax,0x5
c0015410:	88 d1                	mov    cl,dl
c0015412:	31 d2                	xor    edx,edx
c0015414:	f7 f5                	div    ebp
c0015416:	89 dd                	mov    ebp,ebx
c0015418:	88 d5                	mov    ch,dl
c001541a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0015420:	0f b7 c1             	movzx  eax,cx
c0015423:	31 d2                	xor    edx,edx
c0015425:	09 f8                	or     eax,edi
c0015427:	bf 3c 00 00 00       	mov    edi,0x3c
c001542c:	89 c1                	mov    ecx,eax
c001542e:	89 f0                	mov    eax,esi
c0015430:	f7 f7                	div    edi
c0015432:	c1 e2 10             	shl    edx,0x10
c0015435:	09 d5                	or     ebp,edx
c0015437:	31 d2                	xor    edx,edx
c0015439:	89 eb                	mov    ebx,ebp
c001543b:	f7 f7                	div    edi
c001543d:	bf 10 0e 00 00       	mov    edi,0xe10
c0015442:	88 d7                	mov    bh,dl
c0015444:	89 f0                	mov    eax,esi
c0015446:	31 d2                	xor    edx,edx
c0015448:	f7 f7                	div    edi
c001544a:	bf 18 00 00 00       	mov    edi,0x18
c001544f:	31 d2                	xor    edx,edx
c0015451:	f7 f7                	div    edi
c0015453:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0015458:	88 d3                	mov    bl,dl
c001545a:	53                   	push   ebx
c001545b:	51                   	push   ecx
c001545c:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0015462:	e8 1f 87 ff ff       	call   c000db86 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0015467:	83 c4 1c             	add    esp,0x1c
c001546a:	83 f0 01             	xor    eax,0x1
c001546d:	5b                   	pop    ebx
c001546e:	0f b6 c0             	movzx  eax,al
c0015471:	5e                   	pop    esi
c0015472:	31 d2                	xor    edx,edx
c0015474:	5f                   	pop    edi
c0015475:	5d                   	pop    ebp
c0015476:	c3                   	ret    

c0015477 <Sys::timezone(regs*)>:
c0015477:	53                   	push   ebx
c0015478:	83 ec 08             	sub    esp,0x8
c001547b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001547f:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0015483:	75 17                	jne    c001549c <Sys::timezone(regs*)+0x25>
c0015485:	83 ec 0c             	sub    esp,0xc
c0015488:	68 09 43 02 c0       	push   0xc0024309
c001548d:	e8 cd 75 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0015492:	83 c8 ff             	or     eax,0xffffffff
c0015495:	83 c4 10             	add    esp,0x10
c0015498:	89 c2                	mov    edx,eax
c001549a:	eb 20                	jmp    c00154bc <Sys::timezone(regs*)+0x45>
c001549c:	83 ec 0c             	sub    esp,0xc
c001549f:	68 1e 43 02 c0       	push   0xc002431e
c00154a4:	e8 b6 75 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c00154a9:	58                   	pop    eax
c00154aa:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00154ad:	e8 36 84 ff ff       	call   c000d8e8 <User::loadClockSettings(int)>
c00154b2:	83 c4 10             	add    esp,0x10
c00154b5:	b8 01 00 00 00       	mov    eax,0x1
c00154ba:	31 d2                	xor    edx,edx
c00154bc:	83 c4 08             	add    esp,0x8
c00154bf:	5b                   	pop    ebx
c00154c0:	c3                   	ret    

c00154c1 <Sys::write(regs*)>:
c00154c1:	57                   	push   edi
c00154c2:	56                   	push   esi
c00154c3:	53                   	push   ebx
c00154c4:	83 ec 10             	sub    esp,0x10
c00154c7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00154cb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00154ce:	83 f8 02             	cmp    eax,0x2
c00154d1:	77 10                	ja     c00154e3 <Sys::write(regs*)+0x22>
c00154d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154d8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154db:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00154e1:	eb 0e                	jmp    c00154f1 <Sys::write(regs*)+0x30>
c00154e3:	83 ec 0c             	sub    esp,0xc
c00154e6:	50                   	push   eax
c00154e7:	e8 f7 60 ff ff       	call   c000b5e3 <getFromFileDescriptor(int)>
c00154ec:	83 c4 10             	add    esp,0x10
c00154ef:	89 c1                	mov    ecx,eax
c00154f1:	83 c8 ff             	or     eax,0xffffffff
c00154f4:	85 c9                	test   ecx,ecx
c00154f6:	89 c2                	mov    edx,eax
c00154f8:	74 28                	je     c0015522 <Sys::write(regs*)+0x61>
c00154fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015502:	31 ff                	xor    edi,edi
c0015504:	83 ec 0c             	sub    esp,0xc
c0015507:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015509:	8d 54 24 18          	lea    edx,[esp+0x18]
c001550d:	52                   	push   edx
c001550e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015511:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015514:	57                   	push   edi
c0015515:	56                   	push   esi
c0015516:	51                   	push   ecx
c0015517:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001551a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001551e:	83 c4 20             	add    esp,0x20
c0015521:	99                   	cdq    
c0015522:	83 c4 10             	add    esp,0x10
c0015525:	5b                   	pop    ebx
c0015526:	5e                   	pop    esi
c0015527:	5f                   	pop    edi
c0015528:	c3                   	ret    

c0015529 <Sys::wsbe(regs*)>:
c0015529:	57                   	push   edi
c001552a:	b9 0b 00 00 00       	mov    ecx,0xb
c001552f:	56                   	push   esi
c0015530:	be 5d 43 02 c0       	mov    esi,0xc002435d
c0015535:	53                   	push   ebx
c0015536:	83 ec 30             	sub    esp,0x30
c0015539:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001553d:	fc                   	cld    
c001553e:	83 ec 0c             	sub    esp,0xc
c0015541:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015543:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0015547:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001554c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001554f:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0015555:	8b 06                	mov    eax,DWORD PTR [esi]
c0015557:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001555a:	57                   	push   edi
c001555b:	e8 40 b1 fe ff       	call   c00006a0 <strlen>
c0015560:	5a                   	pop    edx
c0015561:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015565:	52                   	push   edx
c0015566:	31 d2                	xor    edx,edx
c0015568:	57                   	push   edi
c0015569:	52                   	push   edx
c001556a:	50                   	push   eax
c001556b:	56                   	push   esi
c001556c:	ff d3                	call   ebx
c001556e:	83 c4 14             	add    esp,0x14
c0015571:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015575:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015578:	e8 6b 32 00 00       	call   c00187e8 <terminateTask(int)>
c001557d:	83 c4 40             	add    esp,0x40
c0015580:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015585:	5b                   	pop    ebx
c0015586:	31 d2                	xor    edx,edx
c0015588:	5e                   	pop    esi
c0015589:	5f                   	pop    edi
c001558a:	c3                   	ret    

c001558b <Sys::yield(regs*)>:
c001558b:	83 ec 0c             	sub    esp,0xc
c001558e:	fa                   	cli    
c001558f:	ff 05 28 76 02 c0    	inc    DWORD PTR ds:0xc0027628
c0015595:	e8 36 29 00 00       	call   c0017ed0 <schedule()>
c001559a:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c001559f:	48                   	dec    eax
c00155a0:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c00155a5:	75 01                	jne    c00155a8 <Sys::yield(regs*)+0x1d>
c00155a7:	fb                   	sti    
c00155a8:	8b 15 8c 67 02 c0    	mov    edx,DWORD PTR ds:0xc002678c
c00155ae:	83 c4 0c             	add    esp,0xc
c00155b1:	89 d0                	mov    eax,edx
c00155b3:	c1 ea 11             	shr    edx,0x11
c00155b6:	c1 e0 07             	shl    eax,0x7
c00155b9:	25 80 30 0f 00       	and    eax,0xf3080
c00155be:	31 d0                	xor    eax,edx
c00155c0:	31 d2                	xor    edx,edx
c00155c2:	c3                   	ret    

c00155c3 <sysCallSeekDir(regs*)>:
c00155c3:	31 c0                	xor    eax,eax
c00155c5:	31 d2                	xor    edx,edx
c00155c7:	c3                   	ret    

c00155c8 <sysCallTellDir(regs*)>:
c00155c8:	31 c0                	xor    eax,eax
c00155ca:	31 d2                	xor    edx,edx
c00155cc:	c3                   	ret    

c00155cd <sysCallVerify(regs*)>:
c00155cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00155d1:	31 d2                	xor    edx,edx
c00155d3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00155d6:	c3                   	ret    

c00155d7 <sysCallGetArgc(regs*)>:
c00155d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155dc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00155df:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00155e5:	99                   	cdq    
c00155e6:	c3                   	ret    

c00155e7 <sysFormatDisk(regs*)>:
c00155e7:	56                   	push   esi
c00155e8:	53                   	push   ebx
c00155e9:	53                   	push   ebx
c00155ea:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00155ee:	8b 1d 94 62 02 c0    	mov    ebx,DWORD PTR ds:0xc0026294
c00155f4:	eb 25                	jmp    c001561b <sysFormatDisk(regs*)+0x34>
c00155f6:	83 ec 0c             	sub    esp,0xc
c00155f9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00155fc:	8b 13                	mov    edx,DWORD PTR [ebx]
c00155fe:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015601:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015604:	50                   	push   eax
c0015605:	ff 34 85 20 67 02 c0 	push   DWORD PTR [eax*4-0x3ffd98e0]
c001560c:	53                   	push   ebx
c001560d:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0015610:	83 c4 20             	add    esp,0x20
c0015613:	83 f8 08             	cmp    eax,0x8
c0015616:	75 12                	jne    c001562a <sysFormatDisk(regs*)+0x43>
c0015618:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001561b:	85 db                	test   ebx,ebx
c001561d:	75 d7                	jne    c00155f6 <sysFormatDisk(regs*)+0xf>
c001561f:	59                   	pop    ecx
c0015620:	b8 03 00 00 00       	mov    eax,0x3
c0015625:	31 d2                	xor    edx,edx
c0015627:	5b                   	pop    ebx
c0015628:	5e                   	pop    esi
c0015629:	c3                   	ret    
c001562a:	85 c0                	test   eax,eax
c001562c:	74 1b                	je     c0015649 <sysFormatDisk(regs*)+0x62>
c001562e:	83 f8 09             	cmp    eax,0x9
c0015631:	74 0b                	je     c001563e <sysFormatDisk(regs*)+0x57>
c0015633:	59                   	pop    ecx
c0015634:	b8 02 00 00 00       	mov    eax,0x2
c0015639:	31 d2                	xor    edx,edx
c001563b:	5b                   	pop    ebx
c001563c:	5e                   	pop    esi
c001563d:	c3                   	ret    
c001563e:	59                   	pop    ecx
c001563f:	b8 01 00 00 00       	mov    eax,0x1
c0015644:	31 d2                	xor    edx,edx
c0015646:	5b                   	pop    ebx
c0015647:	5e                   	pop    esi
c0015648:	c3                   	ret    
c0015649:	59                   	pop    ecx
c001564a:	31 c0                	xor    eax,eax
c001564c:	31 d2                	xor    edx,edx
c001564e:	5b                   	pop    ebx
c001564f:	5e                   	pop    esi
c0015650:	c3                   	ret    

c0015651 <sysSetDiskVolumeLabel(regs*)>:
c0015651:	56                   	push   esi
c0015652:	53                   	push   ebx
c0015653:	53                   	push   ebx
c0015654:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015658:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001565b:	83 f8 19             	cmp    eax,0x19
c001565e:	77 2d                	ja     c001568d <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015660:	8b 0c 85 20 67 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd98e0]
c0015667:	85 c9                	test   ecx,ecx
c0015669:	74 22                	je     c001568d <sysSetDiskVolumeLabel(regs*)+0x3c>
c001566b:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001566e:	85 db                	test   ebx,ebx
c0015670:	74 1b                	je     c001568d <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015672:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0015678:	85 d2                	test   edx,edx
c001567a:	74 11                	je     c001568d <sysSetDiskVolumeLabel(regs*)+0x3c>
c001567c:	8b 32                	mov    esi,DWORD PTR [edx]
c001567e:	53                   	push   ebx
c001567f:	50                   	push   eax
c0015680:	51                   	push   ecx
c0015681:	52                   	push   edx
c0015682:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0015685:	83 c4 10             	add    esp,0x10
c0015688:	99                   	cdq    
c0015689:	59                   	pop    ecx
c001568a:	5b                   	pop    ebx
c001568b:	5e                   	pop    esi
c001568c:	c3                   	ret    
c001568d:	59                   	pop    ecx
c001568e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015693:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015698:	5b                   	pop    ebx
c0015699:	5e                   	pop    esi
c001569a:	c3                   	ret    

c001569b <sysGetDiskVolumeLabel(regs*)>:
c001569b:	57                   	push   edi
c001569c:	56                   	push   esi
c001569d:	53                   	push   ebx
c001569e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156a2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00156a5:	83 fa 19             	cmp    edx,0x19
c00156a8:	77 38                	ja     c00156e2 <sysGetDiskVolumeLabel(regs*)+0x47>
c00156aa:	8b 0c 95 20 67 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd98e0]
c00156b1:	85 c9                	test   ecx,ecx
c00156b3:	74 2d                	je     c00156e2 <sysGetDiskVolumeLabel(regs*)+0x47>
c00156b5:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00156b8:	85 db                	test   ebx,ebx
c00156ba:	74 26                	je     c00156e2 <sysGetDiskVolumeLabel(regs*)+0x47>
c00156bc:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00156bf:	85 f6                	test   esi,esi
c00156c1:	74 1f                	je     c00156e2 <sysGetDiskVolumeLabel(regs*)+0x47>
c00156c3:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00156c9:	85 c0                	test   eax,eax
c00156cb:	74 15                	je     c00156e2 <sysGetDiskVolumeLabel(regs*)+0x47>
c00156cd:	83 ec 0c             	sub    esp,0xc
c00156d0:	8b 38                	mov    edi,DWORD PTR [eax]
c00156d2:	56                   	push   esi
c00156d3:	53                   	push   ebx
c00156d4:	52                   	push   edx
c00156d5:	51                   	push   ecx
c00156d6:	50                   	push   eax
c00156d7:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00156da:	83 c4 20             	add    esp,0x20
c00156dd:	99                   	cdq    
c00156de:	5b                   	pop    ebx
c00156df:	5e                   	pop    esi
c00156e0:	5f                   	pop    edi
c00156e1:	c3                   	ret    
c00156e2:	5b                   	pop    ebx
c00156e3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00156e8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00156ed:	5e                   	pop    esi
c00156ee:	5f                   	pop    edi
c00156ef:	c3                   	ret    

c00156f0 <sysShutdown(regs*)>:
c00156f0:	83 ec 0c             	sub    esp,0xc
c00156f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156f7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00156fa:	85 c0                	test   eax,eax
c00156fc:	74 18                	je     c0015716 <sysShutdown(regs*)+0x26>
c00156fe:	83 f8 01             	cmp    eax,0x1
c0015701:	74 38                	je     c001573b <sysShutdown(regs*)+0x4b>
c0015703:	83 f8 02             	cmp    eax,0x2
c0015706:	74 24                	je     c001572c <sysShutdown(regs*)+0x3c>
c0015708:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001570d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015712:	83 c4 0c             	add    esp,0xc
c0015715:	c3                   	ret    
c0015716:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001571b:	8b 10                	mov    edx,DWORD PTR [eax]
c001571d:	6a 00                	push   0x0
c001571f:	6a 00                	push   0x0
c0015721:	6a 00                	push   0x0
c0015723:	50                   	push   eax
c0015724:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015727:	83 c4 10             	add    esp,0x10
c001572a:	eb dc                	jmp    c0015708 <sysShutdown(regs*)+0x18>
c001572c:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0015731:	8b 10                	mov    edx,DWORD PTR [eax]
c0015733:	6a 00                	push   0x0
c0015735:	6a 00                	push   0x0
c0015737:	6a 01                	push   0x1
c0015739:	eb e8                	jmp    c0015723 <sysShutdown(regs*)+0x33>
c001573b:	a1 a0 67 02 c0       	mov    eax,ds:0xc00267a0
c0015740:	85 c0                	test   eax,eax
c0015742:	74 02                	je     c0015746 <sysShutdown(regs*)+0x56>
c0015744:	ff d0                	call   eax
c0015746:	31 c0                	xor    eax,eax
c0015748:	31 d2                	xor    edx,edx
c001574a:	83 c4 0c             	add    esp,0xc
c001574d:	c3                   	ret    

c001574e <sysCallRealpath(regs*)>:
c001574e:	83 ec 0c             	sub    esp,0xc
c0015751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015755:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015758:	85 d2                	test   edx,edx
c001575a:	74 07                	je     c0015763 <sysCallRealpath(regs*)+0x15>
c001575c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001575f:	85 c0                	test   eax,eax
c0015761:	75 0b                	jne    c001576e <sysCallRealpath(regs*)+0x20>
c0015763:	b8 01 00 00 00       	mov    eax,0x1
c0015768:	31 d2                	xor    edx,edx
c001576a:	83 c4 0c             	add    esp,0xc
c001576d:	c3                   	ret    
c001576e:	51                   	push   ecx
c001576f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015775:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0015778:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001577e:	51                   	push   ecx
c001577f:	52                   	push   edx
c0015780:	50                   	push   eax
c0015781:	e8 9a 76 ff ff       	call   c000ce20 <Fs::standardiseFiles(char*, char const*, char const*)>
c0015786:	83 c4 10             	add    esp,0x10
c0015789:	31 c0                	xor    eax,eax
c001578b:	31 d2                	xor    edx,edx
c001578d:	83 c4 0c             	add    esp,0xc
c0015790:	c3                   	ret    

c0015791 <sysCallReadDir(regs*)>:
c0015791:	53                   	push   ebx
c0015792:	83 ec 18             	sub    esp,0x18
c0015795:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015799:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001579c:	83 f8 02             	cmp    eax,0x2
c001579f:	76 60                	jbe    c0015801 <sysCallReadDir(regs*)+0x70>
c00157a1:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00157a8:	77 48                	ja     c00157f2 <sysCallReadDir(regs*)+0x61>
c00157aa:	83 ec 0c             	sub    esp,0xc
c00157ad:	50                   	push   eax
c00157ae:	e8 30 5e ff ff       	call   c000b5e3 <getFromFileDescriptor(int)>
c00157b3:	83 c4 10             	add    esp,0x10
c00157b6:	85 c0                	test   eax,eax
c00157b8:	74 38                	je     c00157f2 <sysCallReadDir(regs*)+0x61>
c00157ba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00157c2:	83 ec 0c             	sub    esp,0xc
c00157c5:	8b 10                	mov    edx,DWORD PTR [eax]
c00157c7:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00157cb:	51                   	push   ecx
c00157cc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00157cf:	6a 00                	push   0x0
c00157d1:	68 10 01 00 00       	push   0x110
c00157d6:	50                   	push   eax
c00157d7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00157da:	83 c4 20             	add    esp,0x20
c00157dd:	85 c0                	test   eax,eax
c00157df:	74 29                	je     c001580a <sysCallReadDir(regs*)+0x79>
c00157e1:	83 f8 07             	cmp    eax,0x7
c00157e4:	74 1b                	je     c0015801 <sysCallReadDir(regs*)+0x70>
c00157e6:	b8 02 00 00 00       	mov    eax,0x2
c00157eb:	31 d2                	xor    edx,edx
c00157ed:	83 c4 18             	add    esp,0x18
c00157f0:	5b                   	pop    ebx
c00157f1:	c3                   	ret    
c00157f2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00157f7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00157fc:	83 c4 18             	add    esp,0x18
c00157ff:	5b                   	pop    ebx
c0015800:	c3                   	ret    
c0015801:	b8 01 00 00 00       	mov    eax,0x1
c0015806:	31 d2                	xor    edx,edx
c0015808:	eb e3                	jmp    c00157ed <sysCallReadDir(regs*)+0x5c>
c001580a:	31 c0                	xor    eax,eax
c001580c:	31 d2                	xor    edx,edx
c001580e:	eb dd                	jmp    c00157ed <sysCallReadDir(regs*)+0x5c>

c0015810 <sysCallIsATTY(regs*)>:
c0015810:	83 ec 0c             	sub    esp,0xc
c0015813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015817:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001581a:	83 f8 02             	cmp    eax,0x2
c001581d:	76 07                	jbe    c0015826 <sysCallIsATTY(regs*)+0x16>
c001581f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015824:	75 26                	jne    c001584c <sysCallIsATTY(regs*)+0x3c>
c0015826:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001582b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001582e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015834:	85 c0                	test   eax,eax
c0015836:	74 24                	je     c001585c <sysCallIsATTY(regs*)+0x4c>
c0015838:	83 ec 0c             	sub    esp,0xc
c001583b:	8b 10                	mov    edx,DWORD PTR [eax]
c001583d:	50                   	push   eax
c001583e:	ff 12                	call   DWORD PTR [edx]
c0015840:	31 d2                	xor    edx,edx
c0015842:	0f b6 c0             	movzx  eax,al
c0015845:	83 c4 10             	add    esp,0x10
c0015848:	83 c4 0c             	add    esp,0xc
c001584b:	c3                   	ret    
c001584c:	83 ec 0c             	sub    esp,0xc
c001584f:	50                   	push   eax
c0015850:	e8 8e 5d ff ff       	call   c000b5e3 <getFromFileDescriptor(int)>
c0015855:	83 c4 10             	add    esp,0x10
c0015858:	85 c0                	test   eax,eax
c001585a:	75 dc                	jne    c0015838 <sysCallIsATTY(regs*)+0x28>
c001585c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015861:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015866:	83 c4 0c             	add    esp,0xc
c0015869:	c3                   	ret    

c001586a <sysCallSeek(regs*)>:
c001586a:	53                   	push   ebx
c001586b:	83 ec 08             	sub    esp,0x8
c001586e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015872:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015875:	8d 50 fd             	lea    edx,[eax-0x3]
c0015878:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001587e:	77 32                	ja     c00158b2 <sysCallSeek(regs*)+0x48>
c0015880:	83 ec 0c             	sub    esp,0xc
c0015883:	50                   	push   eax
c0015884:	e8 5a 5d ff ff       	call   c000b5e3 <getFromFileDescriptor(int)>
c0015889:	83 c4 0c             	add    esp,0xc
c001588c:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001588f:	31 db                	xor    ebx,ebx
c0015891:	53                   	push   ebx
c0015892:	51                   	push   ecx
c0015893:	50                   	push   eax
c0015894:	e8 53 78 ff ff       	call   c000d0ec <File::seek(unsigned long long)>
c0015899:	83 c4 10             	add    esp,0x10
c001589c:	85 c0                	test   eax,eax
c001589e:	0f 95 c0             	setne  al
c00158a1:	31 d2                	xor    edx,edx
c00158a3:	0f b6 c0             	movzx  eax,al
c00158a6:	f7 d8                	neg    eax
c00158a8:	83 d2 00             	adc    edx,0x0
c00158ab:	83 c4 08             	add    esp,0x8
c00158ae:	f7 da                	neg    edx
c00158b0:	5b                   	pop    ebx
c00158b1:	c3                   	ret    
c00158b2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00158b7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00158bc:	83 c4 08             	add    esp,0x8
c00158bf:	5b                   	pop    ebx
c00158c0:	c3                   	ret    

c00158c1 <sysCallTell(regs*)>:
c00158c1:	53                   	push   ebx
c00158c2:	83 ec 08             	sub    esp,0x8
c00158c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00158c9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00158cc:	83 f8 02             	cmp    eax,0x2
c00158cf:	76 4d                	jbe    c001591e <sysCallTell(regs*)+0x5d>
c00158d1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00158d6:	76 19                	jbe    c00158f1 <sysCallTell(regs*)+0x30>
c00158d8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00158db:	31 d2                	xor    edx,edx
c00158dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00158e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00158ea:	31 c0                	xor    eax,eax
c00158ec:	83 c4 08             	add    esp,0x8
c00158ef:	5b                   	pop    ebx
c00158f0:	c3                   	ret    
c00158f1:	83 ec 0c             	sub    esp,0xc
c00158f4:	50                   	push   eax
c00158f5:	e8 e9 5c ff ff       	call   c000b5e3 <getFromFileDescriptor(int)>
c00158fa:	5a                   	pop    edx
c00158fb:	59                   	pop    ecx
c00158fc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00158ff:	50                   	push   eax
c0015900:	e8 3d 78 ff ff       	call   c000d142 <File::tell(unsigned long long*)>
c0015905:	83 c4 10             	add    esp,0x10
c0015908:	85 c0                	test   eax,eax
c001590a:	0f 95 c0             	setne  al
c001590d:	31 d2                	xor    edx,edx
c001590f:	0f b6 c0             	movzx  eax,al
c0015912:	f7 d8                	neg    eax
c0015914:	83 d2 00             	adc    edx,0x0
c0015917:	83 c4 08             	add    esp,0x8
c001591a:	f7 da                	neg    edx
c001591c:	5b                   	pop    ebx
c001591d:	c3                   	ret    
c001591e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015923:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015928:	83 c4 08             	add    esp,0x8
c001592b:	5b                   	pop    ebx
c001592c:	c3                   	ret    

c001592d <sysCallSize(regs*)>:
c001592d:	53                   	push   ebx
c001592e:	83 ec 18             	sub    esp,0x18
c0015931:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015935:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015938:	83 f8 02             	cmp    eax,0x2
c001593b:	76 53                	jbe    c0015990 <sysCallSize(regs*)+0x63>
c001593d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015942:	76 19                	jbe    c001595d <sysCallSize(regs*)+0x30>
c0015944:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015947:	31 d2                	xor    edx,edx
c0015949:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001594f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015956:	31 c0                	xor    eax,eax
c0015958:	83 c4 18             	add    esp,0x18
c001595b:	5b                   	pop    ebx
c001595c:	c3                   	ret    
c001595d:	83 ec 0c             	sub    esp,0xc
c0015960:	50                   	push   eax
c0015961:	e8 7d 5c ff ff       	call   c000b5e3 <getFromFileDescriptor(int)>
c0015966:	83 c4 0c             	add    esp,0xc
c0015969:	8d 54 24 13          	lea    edx,[esp+0x13]
c001596d:	52                   	push   edx
c001596e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015971:	50                   	push   eax
c0015972:	e8 63 79 ff ff       	call   c000d2da <File::stat(unsigned long long*, bool*)>
c0015977:	83 c4 10             	add    esp,0x10
c001597a:	85 c0                	test   eax,eax
c001597c:	0f 95 c0             	setne  al
c001597f:	31 d2                	xor    edx,edx
c0015981:	0f b6 c0             	movzx  eax,al
c0015984:	f7 d8                	neg    eax
c0015986:	83 d2 00             	adc    edx,0x0
c0015989:	83 c4 18             	add    esp,0x18
c001598c:	f7 da                	neg    edx
c001598e:	5b                   	pop    ebx
c001598f:	c3                   	ret    
c0015990:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015995:	ba ff ff ff ff       	mov    edx,0xffffffff
c001599a:	83 c4 18             	add    esp,0x18
c001599d:	5b                   	pop    ebx
c001599e:	c3                   	ret    

c001599f <sysCallSizeFromFilename(regs*)>:
c001599f:	57                   	push   edi
c00159a0:	56                   	push   esi
c00159a1:	53                   	push   ebx
c00159a2:	83 ec 20             	sub    esp,0x20
c00159a5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00159a9:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00159ac:	83 fb 02             	cmp    ebx,0x2
c00159af:	0f 86 88 00 00 00    	jbe    c0015a3d <sysCallSizeFromFilename(regs*)+0x9e>
c00159b5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00159bb:	76 1b                	jbe    c00159d8 <sysCallSizeFromFilename(regs*)+0x39>
c00159bd:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00159c0:	31 d2                	xor    edx,edx
c00159c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00159c8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00159cf:	83 c4 20             	add    esp,0x20
c00159d2:	31 c0                	xor    eax,eax
c00159d4:	5b                   	pop    ebx
c00159d5:	5e                   	pop    esi
c00159d6:	5f                   	pop    edi
c00159d7:	c3                   	ret    
c00159d8:	83 ec 0c             	sub    esp,0xc
c00159db:	68 14 01 00 00       	push   0x114
c00159e0:	e8 de 3f ff ff       	call   c00099c3 <malloc>
c00159e5:	83 c4 0c             	add    esp,0xc
c00159e8:	89 c7                	mov    edi,eax
c00159ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159ef:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00159f2:	53                   	push   ebx
c00159f3:	57                   	push   edi
c00159f4:	e8 d1 75 ff ff       	call   c000cfca <File::File(char const*, Process*)>
c00159f9:	83 c4 0c             	add    esp,0xc
c00159fc:	8d 44 24 23          	lea    eax,[esp+0x23]
c0015a00:	50                   	push   eax
c0015a01:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015a04:	57                   	push   edi
c0015a05:	e8 d0 78 ff ff       	call   c000d2da <File::stat(unsigned long long*, bool*)>
c0015a0a:	83 c4 10             	add    esp,0x10
c0015a0d:	85 ff                	test   edi,edi
c0015a0f:	74 14                	je     c0015a25 <sysCallSizeFromFilename(regs*)+0x86>
c0015a11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015a15:	8b 17                	mov    edx,DWORD PTR [edi]
c0015a17:	83 ec 0c             	sub    esp,0xc
c0015a1a:	57                   	push   edi
c0015a1b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015a1e:	83 c4 10             	add    esp,0x10
c0015a21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015a25:	85 c0                	test   eax,eax
c0015a27:	0f 95 c0             	setne  al
c0015a2a:	31 d2                	xor    edx,edx
c0015a2c:	0f b6 c0             	movzx  eax,al
c0015a2f:	f7 d8                	neg    eax
c0015a31:	83 d2 00             	adc    edx,0x0
c0015a34:	83 c4 20             	add    esp,0x20
c0015a37:	f7 da                	neg    edx
c0015a39:	5b                   	pop    ebx
c0015a3a:	5e                   	pop    esi
c0015a3b:	5f                   	pop    edi
c0015a3c:	c3                   	ret    
c0015a3d:	83 c4 20             	add    esp,0x20
c0015a40:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a45:	5b                   	pop    ebx
c0015a46:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a4b:	5e                   	pop    esi
c0015a4c:	5f                   	pop    edi
c0015a4d:	c3                   	ret    

c0015a4e <sysCallClose(regs*)>:
c0015a4e:	53                   	push   ebx
c0015a4f:	83 ec 08             	sub    esp,0x8
c0015a52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a56:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015a59:	83 f8 02             	cmp    eax,0x2
c0015a5c:	76 41                	jbe    c0015a9f <sysCallClose(regs*)+0x51>
c0015a5e:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0015a64:	83 fa 01             	cmp    edx,0x1
c0015a67:	76 2d                	jbe    c0015a96 <sysCallClose(regs*)+0x48>
c0015a69:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015a6e:	77 2f                	ja     c0015a9f <sysCallClose(regs*)+0x51>
c0015a70:	83 ec 0c             	sub    esp,0xc
c0015a73:	50                   	push   eax
c0015a74:	e8 6a 5b ff ff       	call   c000b5e3 <getFromFileDescriptor(int)>
c0015a79:	89 c3                	mov    ebx,eax
c0015a7b:	89 04 24             	mov    DWORD PTR [esp],eax
c0015a7e:	e8 09 76 ff ff       	call   c000d08c <File::close()>
c0015a83:	83 c4 10             	add    esp,0x10
c0015a86:	85 db                	test   ebx,ebx
c0015a88:	74 0c                	je     c0015a96 <sysCallClose(regs*)+0x48>
c0015a8a:	83 ec 0c             	sub    esp,0xc
c0015a8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015a8f:	53                   	push   ebx
c0015a90:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015a93:	83 c4 10             	add    esp,0x10
c0015a96:	31 c0                	xor    eax,eax
c0015a98:	31 d2                	xor    edx,edx
c0015a9a:	83 c4 08             	add    esp,0x8
c0015a9d:	5b                   	pop    ebx
c0015a9e:	c3                   	ret    
c0015a9f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015aa4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015aa9:	83 c4 08             	add    esp,0x8
c0015aac:	5b                   	pop    ebx
c0015aad:	c3                   	ret    

c0015aae <sysCallOpenDir(regs*)>:
c0015aae:	56                   	push   esi
c0015aaf:	53                   	push   ebx
c0015ab0:	53                   	push   ebx
c0015ab1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ab5:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0015ab8:	85 f6                	test   esi,esi
c0015aba:	74 59                	je     c0015b15 <sysCallOpenDir(regs*)+0x67>
c0015abc:	83 ec 0c             	sub    esp,0xc
c0015abf:	68 14 01 00 00       	push   0x114
c0015ac4:	e8 fa 3e ff ff       	call   c00099c3 <malloc>
c0015ac9:	83 c4 0c             	add    esp,0xc
c0015acc:	89 c6                	mov    esi,eax
c0015ace:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ad3:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015ad6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015ad9:	56                   	push   esi
c0015ada:	e8 97 79 ff ff       	call   c000d476 <Directory::Directory(char const*, Process*)>
c0015adf:	83 c4 10             	add    esp,0x10
c0015ae2:	85 f6                	test   esi,esi
c0015ae4:	74 2f                	je     c0015b15 <sysCallOpenDir(regs*)+0x67>
c0015ae6:	83 ec 0c             	sub    esp,0xc
c0015ae9:	56                   	push   esi
c0015aea:	e8 eb 79 ff ff       	call   c000d4da <Directory::open()>
c0015aef:	83 c4 10             	add    esp,0x10
c0015af2:	85 c0                	test   eax,eax
c0015af4:	75 1f                	jne    c0015b15 <sysCallOpenDir(regs*)+0x67>
c0015af6:	83 ec 0c             	sub    esp,0xc
c0015af9:	56                   	push   esi
c0015afa:	e8 ef 57 ff ff       	call   c000b2ee <UnixFile::getFileDescriptor()>
c0015aff:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015b02:	83 c4 10             	add    esp,0x10
c0015b05:	89 02                	mov    DWORD PTR [edx],eax
c0015b07:	c1 f8 1f             	sar    eax,0x1f
c0015b0a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015b0d:	31 c0                	xor    eax,eax
c0015b0f:	59                   	pop    ecx
c0015b10:	31 d2                	xor    edx,edx
c0015b12:	5b                   	pop    ebx
c0015b13:	5e                   	pop    esi
c0015b14:	c3                   	ret    
c0015b15:	59                   	pop    ecx
c0015b16:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b1b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b20:	5b                   	pop    ebx
c0015b21:	5e                   	pop    esi
c0015b22:	c3                   	ret    

c0015b23 <sysCallCloseDir(regs*)>:
c0015b23:	53                   	push   ebx
c0015b24:	83 ec 08             	sub    esp,0x8
c0015b27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b2b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015b2e:	8d 50 fd             	lea    edx,[eax-0x3]
c0015b31:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0015b37:	77 2f                	ja     c0015b68 <sysCallCloseDir(regs*)+0x45>
c0015b39:	83 ec 0c             	sub    esp,0xc
c0015b3c:	50                   	push   eax
c0015b3d:	e8 a1 5a ff ff       	call   c000b5e3 <getFromFileDescriptor(int)>
c0015b42:	89 c3                	mov    ebx,eax
c0015b44:	89 04 24             	mov    DWORD PTR [esp],eax
c0015b47:	e8 ea 79 ff ff       	call   c000d536 <Directory::close()>
c0015b4c:	83 c4 10             	add    esp,0x10
c0015b4f:	85 db                	test   ebx,ebx
c0015b51:	74 0c                	je     c0015b5f <sysCallCloseDir(regs*)+0x3c>
c0015b53:	83 ec 0c             	sub    esp,0xc
c0015b56:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b58:	53                   	push   ebx
c0015b59:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b5c:	83 c4 10             	add    esp,0x10
c0015b5f:	31 c0                	xor    eax,eax
c0015b61:	31 d2                	xor    edx,edx
c0015b63:	83 c4 08             	add    esp,0x8
c0015b66:	5b                   	pop    ebx
c0015b67:	c3                   	ret    
c0015b68:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b6d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b72:	83 c4 08             	add    esp,0x8
c0015b75:	5b                   	pop    ebx
c0015b76:	c3                   	ret    

c0015b77 <sysCallMakeDir(regs*)>:
c0015b77:	56                   	push   esi
c0015b78:	53                   	push   ebx
c0015b79:	83 ec 10             	sub    esp,0x10
c0015b7c:	68 14 01 00 00       	push   0x114
c0015b81:	e8 3d 3e ff ff       	call   c00099c3 <malloc>
c0015b86:	83 c4 0c             	add    esp,0xc
c0015b89:	89 c3                	mov    ebx,eax
c0015b8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b90:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015b93:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015b97:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015b9a:	53                   	push   ebx
c0015b9b:	e8 d6 78 ff ff       	call   c000d476 <Directory::Directory(char const*, Process*)>
c0015ba0:	83 c4 10             	add    esp,0x10
c0015ba3:	85 db                	test   ebx,ebx
c0015ba5:	74 32                	je     c0015bd9 <sysCallMakeDir(regs*)+0x62>
c0015ba7:	83 ec 0c             	sub    esp,0xc
c0015baa:	53                   	push   ebx
c0015bab:	e8 0a 7b ff ff       	call   c000d6ba <Directory::create()>
c0015bb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015bb3:	89 c6                	mov    esi,eax
c0015bb5:	e8 7c 79 ff ff       	call   c000d536 <Directory::close()>
c0015bba:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015bbc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015bbf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015bc2:	83 c4 10             	add    esp,0x10
c0015bc5:	31 c0                	xor    eax,eax
c0015bc7:	59                   	pop    ecx
c0015bc8:	85 f6                	test   esi,esi
c0015bca:	5b                   	pop    ebx
c0015bcb:	0f 95 c0             	setne  al
c0015bce:	5e                   	pop    esi
c0015bcf:	31 d2                	xor    edx,edx
c0015bd1:	f7 d8                	neg    eax
c0015bd3:	83 d2 00             	adc    edx,0x0
c0015bd6:	f7 da                	neg    edx
c0015bd8:	c3                   	ret    
c0015bd9:	59                   	pop    ecx
c0015bda:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015bdf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015be4:	5b                   	pop    ebx
c0015be5:	5e                   	pop    esi
c0015be6:	c3                   	ret    

c0015be7 <sysCallWait(regs*)>:
c0015be7:	83 ec 10             	sub    esp,0x10
c0015bea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015bee:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015bf1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015bf4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015bf7:	e8 fc 24 00 00       	call   c00180f8 <waitTask(int, int*, int)>
c0015bfc:	83 c4 1c             	add    esp,0x1c
c0015bff:	99                   	cdq    
c0015c00:	c3                   	ret    

c0015c01 <sysCallNotImpl(regs*)>:
c0015c01:	83 ec 18             	sub    esp,0x18
c0015c04:	68 89 43 02 c0       	push   0xc0024389
c0015c09:	e8 f1 e6 ff ff       	call   c00142ff <Krnl::panic(char const*)>
c0015c0e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c13:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c18:	83 c4 1c             	add    esp,0x1c
c0015c1b:	c3                   	ret    

c0015c1c <sysPanic(regs*)>:
c0015c1c:	83 ec 18             	sub    esp,0x18
c0015c1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015c23:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015c26:	e8 d4 e6 ff ff       	call   c00142ff <Krnl::panic(char const*)>
c0015c2b:	b8 01 00 00 00       	mov    eax,0x1
c0015c30:	31 d2                	xor    edx,edx
c0015c32:	83 c4 1c             	add    esp,0x1c
c0015c35:	c3                   	ret    

c0015c36 <sysCallRmdir(regs*)>:
c0015c36:	56                   	push   esi
c0015c37:	53                   	push   ebx
c0015c38:	83 ec 20             	sub    esp,0x20
c0015c3b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015c3f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015c42:	68 14 01 00 00       	push   0x114
c0015c47:	e8 77 3d ff ff       	call   c00099c3 <malloc>
c0015c4c:	83 c4 0c             	add    esp,0xc
c0015c4f:	89 c3                	mov    ebx,eax
c0015c51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c56:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015c59:	56                   	push   esi
c0015c5a:	53                   	push   ebx
c0015c5b:	e8 6a 73 ff ff       	call   c000cfca <File::File(char const*, Process*)>
c0015c60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c63:	e8 3e 75 ff ff       	call   c000d1a6 <File::unlink()>
c0015c68:	83 c4 10             	add    esp,0x10
c0015c6b:	85 db                	test   ebx,ebx
c0015c6d:	74 14                	je     c0015c83 <sysCallRmdir(regs*)+0x4d>
c0015c6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c73:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015c75:	83 ec 0c             	sub    esp,0xc
c0015c78:	53                   	push   ebx
c0015c79:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015c7c:	83 c4 10             	add    esp,0x10
c0015c7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c83:	85 c0                	test   eax,eax
c0015c85:	0f 95 c0             	setne  al
c0015c88:	31 d2                	xor    edx,edx
c0015c8a:	0f b6 c0             	movzx  eax,al
c0015c8d:	f7 d8                	neg    eax
c0015c8f:	83 d2 00             	adc    edx,0x0
c0015c92:	83 c4 14             	add    esp,0x14
c0015c95:	f7 da                	neg    edx
c0015c97:	5b                   	pop    ebx
c0015c98:	5e                   	pop    esi
c0015c99:	c3                   	ret    

c0015c9a <sysCallUnlink(regs*)>:
c0015c9a:	56                   	push   esi
c0015c9b:	53                   	push   ebx
c0015c9c:	83 ec 20             	sub    esp,0x20
c0015c9f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015ca3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015ca6:	68 14 01 00 00       	push   0x114
c0015cab:	e8 13 3d ff ff       	call   c00099c3 <malloc>
c0015cb0:	83 c4 0c             	add    esp,0xc
c0015cb3:	89 c3                	mov    ebx,eax
c0015cb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cba:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015cbd:	56                   	push   esi
c0015cbe:	53                   	push   ebx
c0015cbf:	e8 06 73 ff ff       	call   c000cfca <File::File(char const*, Process*)>
c0015cc4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015cc7:	e8 da 74 ff ff       	call   c000d1a6 <File::unlink()>
c0015ccc:	83 c4 10             	add    esp,0x10
c0015ccf:	85 db                	test   ebx,ebx
c0015cd1:	74 14                	je     c0015ce7 <sysCallUnlink(regs*)+0x4d>
c0015cd3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015cd7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015cd9:	83 ec 0c             	sub    esp,0xc
c0015cdc:	53                   	push   ebx
c0015cdd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015ce0:	83 c4 10             	add    esp,0x10
c0015ce3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015ce7:	85 c0                	test   eax,eax
c0015ce9:	0f 95 c0             	setne  al
c0015cec:	31 d2                	xor    edx,edx
c0015cee:	0f b6 c0             	movzx  eax,al
c0015cf1:	f7 d8                	neg    eax
c0015cf3:	83 d2 00             	adc    edx,0x0
c0015cf6:	83 c4 14             	add    esp,0x14
c0015cf9:	f7 da                	neg    edx
c0015cfb:	5b                   	pop    ebx
c0015cfc:	5e                   	pop    esi
c0015cfd:	c3                   	ret    

c0015cfe <sysCallGetArgv(regs*)>:
c0015cfe:	83 ec 0c             	sub    esp,0xc
c0015d01:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d05:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015d08:	85 c0                	test   eax,eax
c0015d0a:	78 2b                	js     c0015d37 <sysCallGetArgv(regs*)+0x39>
c0015d0c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015d12:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0015d15:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0015d1b:	7d 1a                	jge    c0015d37 <sysCallGetArgv(regs*)+0x39>
c0015d1d:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0015d24:	85 c0                	test   eax,eax
c0015d26:	74 17                	je     c0015d3f <sysCallGetArgv(regs*)+0x41>
c0015d28:	83 ec 08             	sub    esp,0x8
c0015d2b:	50                   	push   eax
c0015d2c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0015d2f:	e8 0c aa fe ff       	call   c0000740 <strcpy>
c0015d34:	83 c4 10             	add    esp,0x10
c0015d37:	31 c0                	xor    eax,eax
c0015d39:	31 d2                	xor    edx,edx
c0015d3b:	83 c4 0c             	add    esp,0xc
c0015d3e:	c3                   	ret    
c0015d3f:	b8 01 00 00 00       	mov    eax,0x1
c0015d44:	31 d2                	xor    edx,edx
c0015d46:	83 c4 0c             	add    esp,0xc
c0015d49:	c3                   	ret    

c0015d4a <sysCallTTYName(regs*)>:
c0015d4a:	56                   	push   esi
c0015d4b:	53                   	push   ebx
c0015d4c:	53                   	push   ebx
c0015d4d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d51:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0015d54:	85 c0                	test   eax,eax
c0015d56:	74 5f                	je     c0015db7 <sysCallTTYName(regs*)+0x6d>
c0015d58:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015d5b:	83 f8 02             	cmp    eax,0x2
c0015d5e:	77 3e                	ja     c0015d9e <sysCallTTYName(regs*)+0x54>
c0015d60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d65:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015d68:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0015d6e:	85 db                	test   ebx,ebx
c0015d70:	74 45                	je     c0015db7 <sysCallTTYName(regs*)+0x6d>
c0015d72:	83 ec 0c             	sub    esp,0xc
c0015d75:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015d77:	53                   	push   ebx
c0015d78:	ff 10                	call   DWORD PTR [eax]
c0015d7a:	83 c4 10             	add    esp,0x10
c0015d7d:	84 c0                	test   al,al
c0015d7f:	74 41                	je     c0015dc2 <sysCallTTYName(regs*)+0x78>
c0015d81:	83 ec 08             	sub    esp,0x8
c0015d84:	81 c3 82 00 00 00    	add    ebx,0x82
c0015d8a:	53                   	push   ebx
c0015d8b:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015d8e:	e8 ad a9 fe ff       	call   c0000740 <strcpy>
c0015d93:	83 c4 10             	add    esp,0x10
c0015d96:	31 c0                	xor    eax,eax
c0015d98:	59                   	pop    ecx
c0015d99:	31 d2                	xor    edx,edx
c0015d9b:	5b                   	pop    ebx
c0015d9c:	5e                   	pop    esi
c0015d9d:	c3                   	ret    
c0015d9e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015da3:	74 bb                	je     c0015d60 <sysCallTTYName(regs*)+0x16>
c0015da5:	83 ec 0c             	sub    esp,0xc
c0015da8:	50                   	push   eax
c0015da9:	e8 35 58 ff ff       	call   c000b5e3 <getFromFileDescriptor(int)>
c0015dae:	83 c4 10             	add    esp,0x10
c0015db1:	89 c3                	mov    ebx,eax
c0015db3:	85 db                	test   ebx,ebx
c0015db5:	75 bb                	jne    c0015d72 <sysCallTTYName(regs*)+0x28>
c0015db7:	59                   	pop    ecx
c0015db8:	b8 01 00 00 00       	mov    eax,0x1
c0015dbd:	31 d2                	xor    edx,edx
c0015dbf:	5b                   	pop    ebx
c0015dc0:	5e                   	pop    esi
c0015dc1:	c3                   	ret    
c0015dc2:	59                   	pop    ecx
c0015dc3:	b8 02 00 00 00       	mov    eax,0x2
c0015dc8:	31 d2                	xor    edx,edx
c0015dca:	5b                   	pop    ebx
c0015dcb:	5e                   	pop    esi
c0015dcc:	c3                   	ret    

c0015dcd <sysCallUSleep(regs*)>:
c0015dcd:	83 ec 1c             	sub    esp,0x1c
c0015dd0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015dd4:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015dd7:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0015dda:	6a 00                	push   0x0
c0015ddc:	6a 64                	push   0x64
c0015dde:	52                   	push   edx
c0015ddf:	50                   	push   eax
c0015de0:	e8 bf b0 00 00       	call   c0020ea4 <__udivdi3>
c0015de5:	83 c4 14             	add    esp,0x14
c0015de8:	50                   	push   eax
c0015de9:	e8 da 23 00 00       	call   c00181c8 <milliTenthSleep(unsigned int)>
c0015dee:	31 c0                	xor    eax,eax
c0015df0:	31 d2                	xor    edx,edx
c0015df2:	83 c4 1c             	add    esp,0x1c
c0015df5:	c3                   	ret    

c0015df6 <sysCallSpawn(regs*)>:
c0015df6:	56                   	push   esi
c0015df7:	53                   	push   ebx
c0015df8:	50                   	push   eax
c0015df9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015dfd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015e00:	85 c0                	test   eax,eax
c0015e02:	75 08                	jne    c0015e0c <sysCallSpawn(regs*)+0x16>
c0015e04:	59                   	pop    ecx
c0015e05:	31 c0                	xor    eax,eax
c0015e07:	31 d2                	xor    edx,edx
c0015e09:	5b                   	pop    ebx
c0015e0a:	5e                   	pop    esi
c0015e0b:	c3                   	ret    
c0015e0c:	83 ec 0c             	sub    esp,0xc
c0015e0f:	68 1f 07 00 00       	push   0x71f
c0015e14:	e8 aa 3b ff ff       	call   c00099c3 <malloc>
c0015e19:	83 c4 10             	add    esp,0x10
c0015e1c:	89 c6                	mov    esi,eax
c0015e1e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0015e21:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015e24:	85 c0                	test   eax,eax
c0015e26:	75 32                	jne    c0015e5a <sysCallSpawn(regs*)+0x64>
c0015e28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e2d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015e30:	52                   	push   edx
c0015e31:	50                   	push   eax
c0015e32:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015e35:	56                   	push   esi
c0015e36:	e8 85 1a 00 00       	call   c00178c0 <Process::Process(char const*, Process*, char**)>
c0015e3b:	83 c4 10             	add    esp,0x10
c0015e3e:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0015e45:	75 bd                	jne    c0015e04 <sysCallSpawn(regs*)+0xe>
c0015e47:	83 ec 0c             	sub    esp,0xc
c0015e4a:	56                   	push   esi
c0015e4b:	e8 5c 1f 00 00       	call   c0017dac <Process::createUserThread()>
c0015e50:	8b 06                	mov    eax,DWORD PTR [esi]
c0015e52:	83 c4 10             	add    esp,0x10
c0015e55:	99                   	cdq    
c0015e56:	59                   	pop    ecx
c0015e57:	5b                   	pop    ebx
c0015e58:	5e                   	pop    esi
c0015e59:	c3                   	ret    
c0015e5a:	31 c0                	xor    eax,eax
c0015e5c:	eb d2                	jmp    c0015e30 <sysCallSpawn(regs*)+0x3a>

c0015e5e <sysCallGetEnv(regs*)>:
c0015e5e:	57                   	push   edi
c0015e5f:	56                   	push   esi
c0015e60:	53                   	push   ebx
c0015e61:	83 ec 1c             	sub    esp,0x1c
c0015e64:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015e68:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e6d:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0015e70:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0015e73:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015e76:	e8 d0 e3 ff ff       	call   c001424b <Krnl::getProcessTotalEnvCount(Process*)>
c0015e7b:	83 c4 10             	add    esp,0x10
c0015e7e:	39 c7                	cmp    edi,eax
c0015e80:	7c 14                	jl     c0015e96 <sysCallGetEnv(regs*)+0x38>
c0015e82:	85 f6                	test   esi,esi
c0015e84:	75 0b                	jne    c0015e91 <sysCallGetEnv(regs*)+0x33>
c0015e86:	83 c4 10             	add    esp,0x10
c0015e89:	31 c0                	xor    eax,eax
c0015e8b:	5b                   	pop    ebx
c0015e8c:	31 d2                	xor    edx,edx
c0015e8e:	5e                   	pop    esi
c0015e8f:	5f                   	pop    edi
c0015e90:	c3                   	ret    
c0015e91:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015e94:	eb f0                	jmp    c0015e86 <sysCallGetEnv(regs*)+0x28>
c0015e96:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015e9a:	52                   	push   edx
c0015e9b:	57                   	push   edi
c0015e9c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015ea2:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0015ea5:	50                   	push   eax
c0015ea6:	e8 c0 e3 ff ff       	call   c001426b <Krnl::getProcessEnvPair(Process*, int)>
c0015eab:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015eae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015eb2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015eb6:	83 c4 0c             	add    esp,0xc
c0015eb9:	85 c9                	test   ecx,ecx
c0015ebb:	75 23                	jne    c0015ee0 <sysCallGetEnv(regs*)+0x82>
c0015ebd:	83 ec 0c             	sub    esp,0xc
c0015ec0:	50                   	push   eax
c0015ec1:	e8 da a7 fe ff       	call   c00006a0 <strlen>
c0015ec6:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015ec9:	89 c3                	mov    ebx,eax
c0015ecb:	e8 d0 a7 fe ff       	call   c00006a0 <strlen>
c0015ed0:	83 c4 10             	add    esp,0x10
c0015ed3:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0015ed7:	83 c4 10             	add    esp,0x10
c0015eda:	31 d2                	xor    edx,edx
c0015edc:	5b                   	pop    ebx
c0015edd:	5e                   	pop    esi
c0015ede:	5f                   	pop    edi
c0015edf:	c3                   	ret    
c0015ee0:	83 ec 08             	sub    esp,0x8
c0015ee3:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015ee6:	50                   	push   eax
c0015ee7:	56                   	push   esi
c0015ee8:	e8 53 a8 fe ff       	call   c0000740 <strcpy>
c0015eed:	58                   	pop    eax
c0015eee:	5a                   	pop    edx
c0015eef:	68 a3 43 02 c0       	push   0xc00243a3
c0015ef4:	56                   	push   esi
c0015ef5:	e8 86 a9 fe ff       	call   c0000880 <strcat>
c0015efa:	59                   	pop    ecx
c0015efb:	5b                   	pop    ebx
c0015efc:	57                   	push   edi
c0015efd:	56                   	push   esi
c0015efe:	e8 7d a9 fe ff       	call   c0000880 <strcat>
c0015f03:	83 c4 10             	add    esp,0x10
c0015f06:	e9 7b ff ff ff       	jmp    c0015e86 <sysCallGetEnv(regs*)+0x28>

c0015f0b <sysAppSettings(regs*)>:
c0015f0b:	57                   	push   edi
c0015f0c:	56                   	push   esi
c0015f0d:	56                   	push   esi
c0015f0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f12:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015f15:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0015f1b:	25 e0 1f 00 00       	and    eax,0x1fe0
c0015f20:	66 3d c0 09          	cmp    ax,0x9c0
c0015f24:	75 2e                	jne    c0015f54 <sysAppSettings(regs*)+0x49>
c0015f26:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0015f2c:	83 e0 1f             	and    eax,0x1f
c0015f2f:	3c 01                	cmp    al,0x1
c0015f31:	74 2c                	je     c0015f5f <sysAppSettings(regs*)+0x54>
c0015f33:	3c 07                	cmp    al,0x7
c0015f35:	0f 84 b3 00 00 00    	je     c0015fee <sysAppSettings(regs*)+0xe3>
c0015f3b:	84 c0                	test   al,al
c0015f3d:	0f 84 d2 00 00 00    	je     c0016015 <sysAppSettings(regs*)+0x10a>
c0015f43:	3c 08                	cmp    al,0x8
c0015f45:	74 63                	je     c0015faa <sysAppSettings(regs*)+0x9f>
c0015f47:	59                   	pop    ecx
c0015f48:	0f b6 c0             	movzx  eax,al
c0015f4b:	5e                   	pop    esi
c0015f4c:	05 e8 03 00 00       	add    eax,0x3e8
c0015f51:	5f                   	pop    edi
c0015f52:	99                   	cdq    
c0015f53:	c3                   	ret    
c0015f54:	b8 01 00 00 00       	mov    eax,0x1
c0015f59:	59                   	pop    ecx
c0015f5a:	31 d2                	xor    edx,edx
c0015f5c:	5e                   	pop    esi
c0015f5d:	5f                   	pop    edi
c0015f5e:	c3                   	ret    
c0015f5f:	50                   	push   eax
c0015f60:	68 00 01 00 00       	push   0x100
c0015f65:	6a 00                	push   0x0
c0015f67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f6c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015f6f:	83 c0 0c             	add    eax,0xc
c0015f72:	50                   	push   eax
c0015f73:	e8 0c a7 fe ff       	call   c0000684 <memset>
c0015f78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f7d:	b9 ff 00 00 00       	mov    ecx,0xff
c0015f82:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c0015f85:	83 c7 0c             	add    edi,0xc
c0015f88:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015f8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f8f:	5a                   	pop    edx
c0015f90:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015f93:	59                   	pop    ecx
c0015f94:	8d 50 0c             	lea    edx,[eax+0xc]
c0015f97:	52                   	push   edx
c0015f98:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0015f9e:	e8 65 47 ff ff       	call   c000a708 <VgaText::setTitle(char*)>
c0015fa3:	83 c4 10             	add    esp,0x10
c0015fa6:	31 c0                	xor    eax,eax
c0015fa8:	eb af                	jmp    c0015f59 <sysAppSettings(regs*)+0x4e>
c0015faa:	83 ec 08             	sub    esp,0x8
c0015fad:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0015fb3:	83 e0 0f             	and    eax,0xf
c0015fb6:	50                   	push   eax
c0015fb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fbc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015fbf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0015fc5:	e8 2e 47 ff ff       	call   c000a6f8 <VgaText::setTitleColour(VgaColour)>
c0015fca:	5f                   	pop    edi
c0015fcb:	58                   	pop    eax
c0015fcc:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0015fd2:	c1 e8 04             	shr    eax,0x4
c0015fd5:	83 e0 0f             	and    eax,0xf
c0015fd8:	50                   	push   eax
c0015fd9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fde:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015fe1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0015fe7:	e8 fc 46 ff ff       	call   c000a6e8 <VgaText::setTitleTextColour(VgaColour)>
c0015fec:	eb b5                	jmp    c0015fa3 <sysAppSettings(regs*)+0x98>
c0015fee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ff3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015ff6:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015ffc:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c0016002:	c0 e8 06             	shr    al,0x6
c0016005:	83 e0 01             	and    eax,0x1
c0016008:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001600e:	31 c0                	xor    eax,eax
c0016010:	e9 44 ff ff ff       	jmp    c0015f59 <sysAppSettings(regs*)+0x4e>
c0016015:	b8 02 00 00 00       	mov    eax,0x2
c001601a:	e9 3a ff ff ff       	jmp    c0015f59 <sysAppSettings(regs*)+0x4e>

c001601f <sysSetFatAttrib(regs*)>:
c001601f:	57                   	push   edi
c0016020:	56                   	push   esi
c0016021:	53                   	push   ebx
c0016022:	83 ec 1c             	sub    esp,0x1c
c0016025:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016029:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001602c:	68 14 01 00 00       	push   0x114
c0016031:	e8 8d 39 ff ff       	call   c00099c3 <malloc>
c0016036:	83 c4 0c             	add    esp,0xc
c0016039:	89 c3                	mov    ebx,eax
c001603b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016040:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016043:	57                   	push   edi
c0016044:	53                   	push   ebx
c0016045:	e8 80 6f ff ff       	call   c000cfca <File::File(char const*, Process*)>
c001604a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001604d:	83 c4 0c             	add    esp,0xc
c0016050:	0f b6 d4             	movzx  edx,ah
c0016053:	0f b6 c0             	movzx  eax,al
c0016056:	52                   	push   edx
c0016057:	50                   	push   eax
c0016058:	53                   	push   ebx
c0016059:	e8 e2 71 ff ff       	call   c000d240 <File::chfatattr(unsigned char, unsigned char)>
c001605e:	83 c4 10             	add    esp,0x10
c0016061:	85 db                	test   ebx,ebx
c0016063:	74 14                	je     c0016079 <sysSetFatAttrib(regs*)+0x5a>
c0016065:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016069:	8b 13                	mov    edx,DWORD PTR [ebx]
c001606b:	83 ec 0c             	sub    esp,0xc
c001606e:	53                   	push   ebx
c001606f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016072:	83 c4 10             	add    esp,0x10
c0016075:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016079:	85 c0                	test   eax,eax
c001607b:	0f 95 c0             	setne  al
c001607e:	31 d2                	xor    edx,edx
c0016080:	0f b6 c0             	movzx  eax,al
c0016083:	f7 d8                	neg    eax
c0016085:	83 d2 00             	adc    edx,0x0
c0016088:	83 c4 10             	add    esp,0x10
c001608b:	f7 da                	neg    edx
c001608d:	5b                   	pop    ebx
c001608e:	5e                   	pop    esi
c001608f:	5f                   	pop    edi
c0016090:	c3                   	ret    

c0016091 <sysPipe(regs*)>:
c0016091:	57                   	push   edi
c0016092:	56                   	push   esi
c0016093:	53                   	push   ebx
c0016094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016098:	83 ec 0c             	sub    esp,0xc
c001609b:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001609e:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00160a1:	6a 20                	push   0x20
c00160a3:	e8 1b 39 ff ff       	call   c00099c3 <malloc>
c00160a8:	89 c3                	mov    ebx,eax
c00160aa:	58                   	pop    eax
c00160ab:	5a                   	pop    edx
c00160ac:	68 00 50 00 00       	push   0x5000
c00160b1:	53                   	push   ebx
c00160b2:	e8 c9 43 ff ff       	call   c000a480 <Pipe::Pipe(int)>
c00160b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160ba:	e8 2f 52 ff ff       	call   c000b2ee <UnixFile::getFileDescriptor()>
c00160bf:	89 07                	mov    DWORD PTR [edi],eax
c00160c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160c4:	e8 25 52 ff ff       	call   c000b2ee <UnixFile::getFileDescriptor()>
c00160c9:	83 c4 10             	add    esp,0x10
c00160cc:	89 06                	mov    DWORD PTR [esi],eax
c00160ce:	31 d2                	xor    edx,edx
c00160d0:	5b                   	pop    ebx
c00160d1:	31 c0                	xor    eax,eax
c00160d3:	5e                   	pop    esi
c00160d4:	5f                   	pop    edi
c00160d5:	c3                   	ret    

c00160d6 <sysGetUnixTime(regs*)>:
c00160d6:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00160db:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00160e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00160e5:	e9 d4 78 ff ff       	jmp    c000d9be <Clock::timeInSecondsLocal()>

c00160ea <string_ends_with(char const*, char const*)>:
c00160ea:	57                   	push   edi
c00160eb:	56                   	push   esi
c00160ec:	53                   	push   ebx
c00160ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00160f1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00160f5:	83 ec 0c             	sub    esp,0xc
c00160f8:	53                   	push   ebx
c00160f9:	e8 a2 a5 fe ff       	call   c00006a0 <strlen>
c00160fe:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016101:	89 c6                	mov    esi,eax
c0016103:	e8 98 a5 fe ff       	call   c00006a0 <strlen>
c0016108:	83 c4 10             	add    esp,0x10
c001610b:	39 c6                	cmp    esi,eax
c001610d:	7d 06                	jge    c0016115 <string_ends_with(char const*, char const*)+0x2b>
c001610f:	5b                   	pop    ebx
c0016110:	31 c0                	xor    eax,eax
c0016112:	5e                   	pop    esi
c0016113:	5f                   	pop    edi
c0016114:	c3                   	ret    
c0016115:	83 ec 08             	sub    esp,0x8
c0016118:	29 c6                	sub    esi,eax
c001611a:	57                   	push   edi
c001611b:	01 f3                	add    ebx,esi
c001611d:	53                   	push   ebx
c001611e:	e8 a9 a6 fe ff       	call   c00007cc <strcmp>
c0016123:	83 c4 10             	add    esp,0x10
c0016126:	85 c0                	test   eax,eax
c0016128:	5b                   	pop    ebx
c0016129:	0f 94 c0             	sete   al
c001612c:	5e                   	pop    esi
c001612d:	0f b6 c0             	movzx  eax,al
c0016130:	5f                   	pop    edi
c0016131:	c3                   	ret    

c0016132 <sysCallOpen(regs*)>:
c0016132:	56                   	push   esi
c0016133:	53                   	push   ebx
c0016134:	81 ec 04 01 00 00    	sub    esp,0x104
c001613a:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0016141:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0016144:	85 c9                	test   ecx,ecx
c0016146:	0f 84 ad 01 00 00    	je     c00162f9 <sysCallOpen(regs*)+0x1c7>
c001614c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001614f:	85 c0                	test   eax,eax
c0016151:	0f 84 a2 01 00 00    	je     c00162f9 <sysCallOpen(regs*)+0x1c7>
c0016157:	52                   	push   edx
c0016158:	68 a5 43 02 c0       	push   0xc00243a5
c001615d:	50                   	push   eax
c001615e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0016162:	56                   	push   esi
c0016163:	e8 b8 6c ff ff       	call   c000ce20 <Fs::standardiseFiles(char*, char const*, char const*)>
c0016168:	89 34 24             	mov    DWORD PTR [esp],esi
c001616b:	e8 30 a5 fe ff       	call   c00006a0 <strlen>
c0016170:	83 c4 10             	add    esp,0x10
c0016173:	48                   	dec    eax
c0016174:	74 1d                	je     c0016193 <sysCallOpen(regs*)+0x61>
c0016176:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016179:	eb 0f                	jmp    c001618a <sysCallOpen(regs*)+0x58>
c001617b:	80 fa 3a             	cmp    dl,0x3a
c001617e:	74 0f                	je     c001618f <sysCallOpen(regs*)+0x5d>
c0016180:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0016184:	48                   	dec    eax
c0016185:	74 0c                	je     c0016193 <sysCallOpen(regs*)+0x61>
c0016187:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001618a:	80 fa 2e             	cmp    dl,0x2e
c001618d:	75 ec                	jne    c001617b <sysCallOpen(regs*)+0x49>
c001618f:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0016193:	83 ec 08             	sub    esp,0x8
c0016196:	68 a9 43 02 c0       	push   0xc00243a9
c001619b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001619e:	e8 47 ff ff ff       	call   c00160ea <string_ends_with(char const*, char const*)>
c00161a3:	83 c4 10             	add    esp,0x10
c00161a6:	85 c0                	test   eax,eax
c00161a8:	74 1d                	je     c00161c7 <sysCallOpen(regs*)+0x95>
c00161aa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00161ad:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00161b3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00161ba:	81 c4 04 01 00 00    	add    esp,0x104
c00161c0:	31 c0                	xor    eax,eax
c00161c2:	31 d2                	xor    edx,edx
c00161c4:	5b                   	pop    ebx
c00161c5:	5e                   	pop    esi
c00161c6:	c3                   	ret    
c00161c7:	83 ec 08             	sub    esp,0x8
c00161ca:	68 ae 43 02 c0       	push   0xc00243ae
c00161cf:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00161d2:	e8 13 ff ff ff       	call   c00160ea <string_ends_with(char const*, char const*)>
c00161d7:	83 c4 10             	add    esp,0x10
c00161da:	85 c0                	test   eax,eax
c00161dc:	75 cc                	jne    c00161aa <sysCallOpen(regs*)+0x78>
c00161de:	83 ec 08             	sub    esp,0x8
c00161e1:	68 aa 43 02 c0       	push   0xc00243aa
c00161e6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00161e9:	e8 de a5 fe ff       	call   c00007cc <strcmp>
c00161ee:	83 c4 10             	add    esp,0x10
c00161f1:	85 c0                	test   eax,eax
c00161f3:	74 b5                	je     c00161aa <sysCallOpen(regs*)+0x78>
c00161f5:	83 ec 08             	sub    esp,0x8
c00161f8:	68 a9 43 02 c0       	push   0xc00243a9
c00161fd:	56                   	push   esi
c00161fe:	e8 e7 fe ff ff       	call   c00160ea <string_ends_with(char const*, char const*)>
c0016203:	83 c4 10             	add    esp,0x10
c0016206:	85 c0                	test   eax,eax
c0016208:	75 a0                	jne    c00161aa <sysCallOpen(regs*)+0x78>
c001620a:	83 ec 08             	sub    esp,0x8
c001620d:	68 b3 43 02 c0       	push   0xc00243b3
c0016212:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016215:	e8 d0 fe ff ff       	call   c00160ea <string_ends_with(char const*, char const*)>
c001621a:	83 c4 10             	add    esp,0x10
c001621d:	85 c0                	test   eax,eax
c001621f:	0f 85 e7 00 00 00    	jne    c001630c <sysCallOpen(regs*)+0x1da>
c0016225:	83 ec 08             	sub    esp,0x8
c0016228:	68 b8 43 02 c0       	push   0xc00243b8
c001622d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016230:	e8 b5 fe ff ff       	call   c00160ea <string_ends_with(char const*, char const*)>
c0016235:	83 c4 10             	add    esp,0x10
c0016238:	85 c0                	test   eax,eax
c001623a:	0f 85 cc 00 00 00    	jne    c001630c <sysCallOpen(regs*)+0x1da>
c0016240:	83 ec 08             	sub    esp,0x8
c0016243:	68 b4 43 02 c0       	push   0xc00243b4
c0016248:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001624b:	e8 7c a5 fe ff       	call   c00007cc <strcmp>
c0016250:	83 c4 10             	add    esp,0x10
c0016253:	85 c0                	test   eax,eax
c0016255:	0f 84 b1 00 00 00    	je     c001630c <sysCallOpen(regs*)+0x1da>
c001625b:	83 ec 08             	sub    esp,0x8
c001625e:	68 b3 43 02 c0       	push   0xc00243b3
c0016263:	56                   	push   esi
c0016264:	e8 81 fe ff ff       	call   c00160ea <string_ends_with(char const*, char const*)>
c0016269:	83 c4 10             	add    esp,0x10
c001626c:	85 c0                	test   eax,eax
c001626e:	0f 85 98 00 00 00    	jne    c001630c <sysCallOpen(regs*)+0x1da>
c0016274:	83 ec 0c             	sub    esp,0xc
c0016277:	68 14 01 00 00       	push   0x114
c001627c:	e8 42 37 ff ff       	call   c00099c3 <malloc>
c0016281:	83 c4 0c             	add    esp,0xc
c0016284:	89 c6                	mov    esi,eax
c0016286:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001628b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001628e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016291:	56                   	push   esi
c0016292:	e8 33 6d ff ff       	call   c000cfca <File::File(char const*, Process*)>
c0016297:	83 c4 10             	add    esp,0x10
c001629a:	85 f6                	test   esi,esi
c001629c:	74 5b                	je     c00162f9 <sysCallOpen(regs*)+0x1c7>
c001629e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00162a1:	0f b6 c2             	movzx  eax,dl
c00162a4:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00162a7:	89 d0                	mov    eax,edx
c00162a9:	83 e0 01             	and    eax,0x1
c00162ac:	f6 c2 02             	test   dl,0x2
c00162af:	74 03                	je     c00162b4 <sysCallOpen(regs*)+0x182>
c00162b1:	83 c8 02             	or     eax,0x2
c00162b4:	f6 c2 04             	test   dl,0x4
c00162b7:	74 03                	je     c00162bc <sysCallOpen(regs*)+0x18a>
c00162b9:	83 c8 04             	or     eax,0x4
c00162bc:	f6 c2 08             	test   dl,0x8
c00162bf:	74 03                	je     c00162c4 <sysCallOpen(regs*)+0x192>
c00162c1:	83 c8 0a             	or     eax,0xa
c00162c4:	83 e2 10             	and    edx,0x10
c00162c7:	74 03                	je     c00162cc <sysCallOpen(regs*)+0x19a>
c00162c9:	83 c8 12             	or     eax,0x12
c00162cc:	83 ec 08             	sub    esp,0x8
c00162cf:	50                   	push   eax
c00162d0:	56                   	push   esi
c00162d1:	e8 58 6d ff ff       	call   c000d02e <File::open(FileOpenMode)>
c00162d6:	83 c4 10             	add    esp,0x10
c00162d9:	85 c0                	test   eax,eax
c00162db:	75 1c                	jne    c00162f9 <sysCallOpen(regs*)+0x1c7>
c00162dd:	83 ec 0c             	sub    esp,0xc
c00162e0:	56                   	push   esi
c00162e1:	e8 08 50 ff ff       	call   c000b2ee <UnixFile::getFileDescriptor()>
c00162e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00162e9:	83 c4 10             	add    esp,0x10
c00162ec:	89 02                	mov    DWORD PTR [edx],eax
c00162ee:	c1 f8 1f             	sar    eax,0x1f
c00162f1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00162f4:	e9 c1 fe ff ff       	jmp    c00161ba <sysCallOpen(regs*)+0x88>
c00162f9:	81 c4 04 01 00 00    	add    esp,0x104
c00162ff:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016304:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016309:	5b                   	pop    ebx
c001630a:	5e                   	pop    esi
c001630b:	c3                   	ret    
c001630c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001630f:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0016315:	e9 99 fe ff ff       	jmp    c00161b3 <sysCallOpen(regs*)+0x81>

c001631a <Sys::loadSyscalls()>:
c001631a:	c7 05 60 6c 02 c0 8b 55 01 c0 	mov    DWORD PTR ds:0xc0026c60,0xc001558b
c0016324:	c7 05 64 6c 02 c0 80 51 01 c0 	mov    DWORD PTR ds:0xc0026c64,0xc0015180
c001632e:	c7 05 68 6c 02 c0 71 53 01 c0 	mov    DWORD PTR ds:0xc0026c68,0xc0015371
c0016338:	c7 05 6c 6c 02 c0 c1 54 01 c0 	mov    DWORD PTR ds:0xc0026c6c,0xc00154c1
c0016342:	c7 05 70 6c 02 c0 09 53 01 c0 	mov    DWORD PTR ds:0xc0026c70,0xc0015309
c001634c:	c7 05 74 6c 02 c0 b7 51 01 c0 	mov    DWORD PTR ds:0xc0026c74,0xc00151b7
c0016356:	c7 05 78 6c 02 c0 98 51 01 c0 	mov    DWORD PTR ds:0xc0026c78,0xc0015198
c0016360:	c7 05 7c 6c 02 c0 c6 53 01 c0 	mov    DWORD PTR ds:0xc0026c7c,0xc00153c6
c001636a:	c7 05 84 6c 02 c0 4e 5a 01 c0 	mov    DWORD PTR ds:0xc0026c84,0xc0015a4e
c0016374:	c7 05 80 6c 02 c0 32 61 01 c0 	mov    DWORD PTR ds:0xc0026c80,0xc0016132
c001637e:	c7 05 88 6c 02 c0 ae 5a 01 c0 	mov    DWORD PTR ds:0xc0026c88,0xc0015aae
c0016388:	c7 05 8c 6c 02 c0 91 57 01 c0 	mov    DWORD PTR ds:0xc0026c8c,0xc0015791
c0016392:	c7 05 90 6c 02 c0 c3 55 01 c0 	mov    DWORD PTR ds:0xc0026c90,0xc00155c3
c001639c:	c7 05 94 6c 02 c0 c8 55 01 c0 	mov    DWORD PTR ds:0xc0026c94,0xc00155c8
c00163a6:	c7 05 98 6c 02 c0 77 5b 01 c0 	mov    DWORD PTR ds:0xc0026c98,0xc0015b77
c00163b0:	c7 05 9c 6c 02 c0 23 5b 01 c0 	mov    DWORD PTR ds:0xc0026c9c,0xc0015b23
c00163ba:	c7 05 a0 6c 02 c0 6a 58 01 c0 	mov    DWORD PTR ds:0xc0026ca0,0xc001586a
c00163c4:	c7 05 a4 6c 02 c0 c1 58 01 c0 	mov    DWORD PTR ds:0xc0026ca4,0xc00158c1
c00163ce:	c7 05 a8 6c 02 c0 2d 59 01 c0 	mov    DWORD PTR ds:0xc0026ca8,0xc001592d
c00163d8:	c7 05 ac 6c 02 c0 cd 55 01 c0 	mov    DWORD PTR ds:0xc0026cac,0xc00155cd
c00163e2:	c7 05 b0 6c 02 c0 e7 5b 01 c0 	mov    DWORD PTR ds:0xc0026cb0,0xc0015be7
c00163ec:	c7 05 b4 6c 02 c0 01 5c 01 c0 	mov    DWORD PTR ds:0xc0026cb4,0xc0015c01
c00163f6:	c7 05 b8 6c 02 c0 01 5c 01 c0 	mov    DWORD PTR ds:0xc0026cb8,0xc0015c01
c0016400:	c7 05 bc 6c 02 c0 36 5c 01 c0 	mov    DWORD PTR ds:0xc0026cbc,0xc0015c36
c001640a:	c7 05 c0 6c 02 c0 9a 5c 01 c0 	mov    DWORD PTR ds:0xc0026cc0,0xc0015c9a
c0016414:	c7 05 c4 6c 02 c0 d7 55 01 c0 	mov    DWORD PTR ds:0xc0026cc4,0xc00155d7
c001641e:	c7 05 c8 6c 02 c0 fe 5c 01 c0 	mov    DWORD PTR ds:0xc0026cc8,0xc0015cfe
c0016428:	c7 05 cc 6c 02 c0 4e 57 01 c0 	mov    DWORD PTR ds:0xc0026ccc,0xc001574e
c0016432:	c7 05 d0 6c 02 c0 4a 5d 01 c0 	mov    DWORD PTR ds:0xc0026cd0,0xc0015d4a
c001643c:	c7 05 d4 6c 02 c0 10 58 01 c0 	mov    DWORD PTR ds:0xc0026cd4,0xc0015810
c0016446:	c7 05 d8 6c 02 c0 cd 5d 01 c0 	mov    DWORD PTR ds:0xc0026cd8,0xc0015dcd
c0016450:	c7 05 dc 6c 02 c0 9f 59 01 c0 	mov    DWORD PTR ds:0xc0026cdc,0xc001599f
c001645a:	c7 05 e0 6c 02 c0 f6 5d 01 c0 	mov    DWORD PTR ds:0xc0026ce0,0xc0015df6
c0016464:	c7 05 e4 6c 02 c0 5e 5e 01 c0 	mov    DWORD PTR ds:0xc0026ce4,0xc0015e5e
c001646e:	c7 05 e8 6c 02 c0 0b 5f 01 c0 	mov    DWORD PTR ds:0xc0026ce8,0xc0015f0b
c0016478:	c7 05 ec 6c 02 c0 e7 55 01 c0 	mov    DWORD PTR ds:0xc0026cec,0xc00155e7
c0016482:	c7 05 f0 6c 02 c0 51 56 01 c0 	mov    DWORD PTR ds:0xc0026cf0,0xc0015651
c001648c:	c7 05 f4 6c 02 c0 9b 56 01 c0 	mov    DWORD PTR ds:0xc0026cf4,0xc001569b
c0016496:	c7 05 f8 6c 02 c0 1f 60 01 c0 	mov    DWORD PTR ds:0xc0026cf8,0xc001601f
c00164a0:	c7 05 fc 6c 02 c0 1c 5c 01 c0 	mov    DWORD PTR ds:0xc0026cfc,0xc0015c1c
c00164aa:	c7 05 00 6d 02 c0 f0 56 01 c0 	mov    DWORD PTR ds:0xc0026d00,0xc00156f0
c00164b4:	c7 05 04 6d 02 c0 91 60 01 c0 	mov    DWORD PTR ds:0xc0026d04,0xc0016091
c00164be:	c7 05 08 6d 02 c0 d6 60 01 c0 	mov    DWORD PTR ds:0xc0026d08,0xc00160d6
c00164c8:	c7 05 0c 6d 02 c0 61 52 01 c0 	mov    DWORD PTR ds:0xc0026d0c,0xc0015261
c00164d2:	c7 05 10 6d 02 c0 e2 53 01 c0 	mov    DWORD PTR ds:0xc0026d10,0xc00153e2
c00164dc:	c7 05 14 6d 02 c0 77 54 01 c0 	mov    DWORD PTR ds:0xc0026d14,0xc0015477
c00164e6:	c7 05 18 6d 02 c0 4a 51 01 c0 	mov    DWORD PTR ds:0xc0026d18,0xc001514a
c00164f0:	c7 05 1c 6d 02 c0 29 55 01 c0 	mov    DWORD PTR ds:0xc0026d1c,0xc0015529
c00164fa:	c7 05 20 6d 02 c0 c3 51 01 c0 	mov    DWORD PTR ds:0xc0026d20,0xc00151c3
c0016504:	c7 05 24 6d 02 c0 dd 51 01 c0 	mov    DWORD PTR ds:0xc0026d24,0xc00151dd
c001650e:	c3                   	ret    

c001650f <Sys::systemCall(regs*, void*)>:
c001650f:	53                   	push   ebx
c0016510:	83 ec 08             	sub    esp,0x8
c0016513:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016517:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001651a:	83 f8 7f             	cmp    eax,0x7f
c001651d:	77 16                	ja     c0016535 <Sys::systemCall(regs*, void*)+0x26>
c001651f:	8b 14 85 60 6c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd93a0]
c0016526:	85 d2                	test   edx,edx
c0016528:	74 0b                	je     c0016535 <Sys::systemCall(regs*, void*)+0x26>
c001652a:	83 ec 0c             	sub    esp,0xc
c001652d:	53                   	push   ebx
c001652e:	ff d2                	call   edx
c0016530:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016533:	eb 0d                	jmp    c0016542 <Sys::systemCall(regs*, void*)+0x33>
c0016535:	52                   	push   edx
c0016536:	52                   	push   edx
c0016537:	50                   	push   eax
c0016538:	68 bd 43 02 c0       	push   0xc00243bd
c001653d:	e8 1d 65 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0016542:	83 c4 10             	add    esp,0x10
c0016545:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001654a:	31 d2                	xor    edx,edx
c001654c:	83 c4 08             	add    esp,0x8
c001654f:	5b                   	pop    ebx
c0016550:	c3                   	ret    

c0016551 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0016551:	55                   	push   ebp
c0016552:	57                   	push   edi
c0016553:	56                   	push   esi
c0016554:	53                   	push   ebx
c0016555:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001655b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016562:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0016569:	85 c0                	test   eax,eax
c001656b:	0f 95 c1             	setne  cl
c001656e:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0016576:	0f 94 c2             	sete   dl
c0016579:	84 d1                	test   cl,dl
c001657b:	74 23                	je     c00165a0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001657d:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c0016583:	74 1b                	je     c00165a0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016585:	81 c3 00 10 00 00    	add    ebx,0x1000
c001658b:	89 da                	mov    edx,ebx
c001658d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0016593:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0016599:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00165a0:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c00165a7:	05 ff 0f 00 00       	add    eax,0xfff
c00165ac:	83 ec 0c             	sub    esp,0xc
c00165af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00165b3:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c00165b9:	c1 e8 0c             	shr    eax,0xc
c00165bc:	89 fe                	mov    esi,edi
c00165be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00165c2:	c1 ee 0c             	shr    esi,0xc
c00165c5:	6a 01                	push   0x1
c00165c7:	e8 6d 51 ff ff       	call   c000b739 <Virt::allocateKernelVirtualPages(int)>
c00165cc:	89 c5                	mov    ebp,eax
c00165ce:	58                   	pop    eax
c00165cf:	5a                   	pop    edx
c00165d0:	56                   	push   esi
c00165d1:	68 d1 43 02 c0       	push   0xc00243d1
c00165d6:	e8 84 64 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c00165db:	59                   	pop    ecx
c00165dc:	58                   	pop    eax
c00165dd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00165e1:	68 e3 43 02 c0       	push   0xc00243e3
c00165e6:	e8 74 64 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c00165eb:	83 c4 10             	add    esp,0x10
c00165ee:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c00165f4:	0f 86 31 01 00 00    	jbe    c001672b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c00165fa:	c1 e6 0c             	shl    esi,0xc
c00165fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016600:	8d 04 1e             	lea    eax,[esi+ebx*1]
c0016603:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016607:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001660e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016611:	01 df                	add    edi,ebx
c0016613:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0016616:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001661a:	0f 84 08 01 00 00    	je     c0016728 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c0016620:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0016626:	76 05                	jbe    c001662d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0016628:	bf 00 10 00 00       	mov    edi,0x1000
c001662d:	83 ec 0c             	sub    esp,0xc
c0016630:	31 d2                	xor    edx,edx
c0016632:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016639:	8b 08                	mov    ecx,DWORD PTR [eax]
c001663b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001663f:	50                   	push   eax
c0016640:	8d 74 24 30          	lea    esi,[esp+0x30]
c0016644:	56                   	push   esi
c0016645:	52                   	push   edx
c0016646:	57                   	push   edi
c0016647:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001664e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016651:	83 c4 20             	add    esp,0x20
c0016654:	85 c0                	test   eax,eax
c0016656:	74 0a                	je     c0016662 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0016658:	53                   	push   ebx
c0016659:	53                   	push   ebx
c001665a:	50                   	push   eax
c001665b:	68 f5 43 02 c0       	push   0xc00243f5
c0016660:	eb 0f                	jmp    c0016671 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c0016662:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016666:	74 20                	je     c0016688 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0016668:	51                   	push   ecx
c0016669:	51                   	push   ecx
c001666a:	6a 00                	push   0x0
c001666c:	68 20 44 02 c0       	push   0xc0024420
c0016671:	e8 e9 63 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0016676:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016679:	e8 eb 53 ff ff       	call   c000ba69 <Virt::freeKernelVirtualPages(unsigned long)>
c001667e:	83 c4 10             	add    esp,0x10
c0016681:	31 c0                	xor    eax,eax
c0016683:	e9 68 01 00 00       	jmp    c00167f0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c0016688:	fa                   	cli    
c0016689:	ff 05 28 76 02 c0    	inc    DWORD PTR ds:0xc0027628
c001668f:	e8 93 37 ff ff       	call   c0009e27 <Phys::allocatePage()>
c0016694:	6a 07                	push   0x7
c0016696:	89 c7                	mov    edi,eax
c0016698:	55                   	push   ebp
c0016699:	50                   	push   eax
c001669a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001669f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00166a2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00166a8:	e8 33 57 ff ff       	call   c000bde0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00166ad:	83 c4 0c             	add    esp,0xc
c00166b0:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00166b7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00166bd:	6a 00                	push   0x0
c00166bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166c4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00166c7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00166cd:	e8 68 55 ff ff       	call   c000bc3a <VAS::mapOtherVASIn(bool, VAS*)>
c00166d2:	58                   	pop    eax
c00166d3:	5a                   	pop    edx
c00166d4:	68 07 0c 00 00       	push   0xc07
c00166d9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00166dd:	57                   	push   edi
c00166de:	89 ef                	mov    edi,ebp
c00166e0:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00166e7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00166ed:	6a 00                	push   0x0
c00166ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00166f7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00166fd:	e8 9a 5a ff ff       	call   c000c19c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016702:	b9 00 10 00 00       	mov    ecx,0x1000
c0016707:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016709:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c001670e:	83 c4 20             	add    esp,0x20
c0016711:	48                   	dec    eax
c0016712:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c0016717:	85 c0                	test   eax,eax
c0016719:	75 01                	jne    c001671c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001671b:	fb                   	sti    
c001671c:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c0016723:	e9 df fe ff ff       	jmp    c0016607 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0016728:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001672b:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c0016733:	0f 86 a9 00 00 00    	jbe    c00167e2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016739:	fa                   	cli    
c001673a:	ff 05 28 76 02 c0    	inc    DWORD PTR ds:0xc0027628
c0016740:	51                   	push   ecx
c0016741:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016748:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001674e:	6a 00                	push   0x0
c0016750:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016755:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016758:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001675e:	e8 d7 54 ff ff       	call   c000bc3a <VAS::mapOtherVASIn(bool, VAS*)>
c0016763:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016767:	c1 e6 0c             	shl    esi,0xc
c001676a:	01 de                	add    esi,ebx
c001676c:	83 c4 10             	add    esp,0x10
c001676f:	39 de                	cmp    esi,ebx
c0016771:	74 61                	je     c00167d4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0016773:	e8 af 36 ff ff       	call   c0009e27 <Phys::allocatePage()>
c0016778:	6a 07                	push   0x7
c001677a:	89 c7                	mov    edi,eax
c001677c:	55                   	push   ebp
c001677d:	50                   	push   eax
c001677e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016783:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016786:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001678c:	e8 4f 56 ff ff       	call   c000bde0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016791:	58                   	pop    eax
c0016792:	5a                   	pop    edx
c0016793:	68 07 0c 00 00       	push   0xc07
c0016798:	53                   	push   ebx
c0016799:	81 c3 00 10 00 00    	add    ebx,0x1000
c001679f:	57                   	push   edi
c00167a0:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00167a7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00167ad:	6a 00                	push   0x0
c00167af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167b4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00167b7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00167bd:	e8 da 59 ff ff       	call   c000c19c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00167c2:	83 c4 1c             	add    esp,0x1c
c00167c5:	68 00 10 00 00       	push   0x1000
c00167ca:	6a 00                	push   0x0
c00167cc:	55                   	push   ebp
c00167cd:	e8 b2 9e fe ff       	call   c0000684 <memset>
c00167d2:	eb 98                	jmp    c001676c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c00167d4:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c00167d9:	48                   	dec    eax
c00167da:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c00167df:	75 01                	jne    c00167e2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c00167e1:	fb                   	sti    
c00167e2:	83 ec 0c             	sub    esp,0xc
c00167e5:	55                   	push   ebp
c00167e6:	e8 7e 52 ff ff       	call   c000ba69 <Virt::freeKernelVirtualPages(unsigned long)>
c00167eb:	83 c4 10             	add    esp,0x10
c00167ee:	b0 01                	mov    al,0x1
c00167f0:	81 c4 2c 10 00 00    	add    esp,0x102c
c00167f6:	5b                   	pop    ebx
c00167f7:	5e                   	pop    esi
c00167f8:	5f                   	pop    edi
c00167f9:	5d                   	pop    ebp
c00167fa:	c3                   	ret    

c00167fb <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00167fb:	55                   	push   ebp
c00167fc:	57                   	push   edi
c00167fd:	56                   	push   esi
c00167fe:	53                   	push   ebx
c00167ff:	83 ec 48             	sub    esp,0x48
c0016802:	68 14 01 00 00       	push   0x114
c0016807:	e8 b7 31 ff ff       	call   c00099c3 <malloc>
c001680c:	83 c4 0c             	add    esp,0xc
c001680f:	89 c6                	mov    esi,eax
c0016811:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016815:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0016819:	50                   	push   eax
c001681a:	e8 ab 67 ff ff       	call   c000cfca <File::File(char const*, Process*)>
c001681f:	58                   	pop    eax
c0016820:	5a                   	pop    edx
c0016821:	6a 01                	push   0x1
c0016823:	56                   	push   esi
c0016824:	e8 05 68 ff ff       	call   c000d02e <File::open(FileOpenMode)>
c0016829:	83 c4 10             	add    esp,0x10
c001682c:	85 c0                	test   eax,eax
c001682e:	0f 85 47 01 00 00    	jne    c001697b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016834:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001683c:	83 ec 0c             	sub    esp,0xc
c001683f:	6a 34                	push   0x34
c0016841:	e8 7d 31 ff ff       	call   c00099c3 <malloc>
c0016846:	89 c3                	mov    ebx,eax
c0016848:	58                   	pop    eax
c0016849:	8b 06                	mov    eax,DWORD PTR [esi]
c001684b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001684f:	57                   	push   edi
c0016850:	53                   	push   ebx
c0016851:	6a 00                	push   0x0
c0016853:	6a 34                	push   0x34
c0016855:	56                   	push   esi
c0016856:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016859:	83 c4 20             	add    esp,0x20
c001685c:	85 c0                	test   eax,eax
c001685e:	0f 85 17 01 00 00    	jne    c001697b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016864:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001686a:	0f 85 0b 01 00 00    	jne    c001697b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016870:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016873:	85 c0                	test   eax,eax
c0016875:	0f 84 00 01 00 00    	je     c001697b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001687b:	31 d2                	xor    edx,edx
c001687d:	55                   	push   ebp
c001687e:	52                   	push   edx
c001687f:	50                   	push   eax
c0016880:	56                   	push   esi
c0016881:	e8 66 68 ff ff       	call   c000d0ec <File::seek(unsigned long long)>
c0016886:	83 c4 10             	add    esp,0x10
c0016889:	85 c0                	test   eax,eax
c001688b:	0f 85 ea 00 00 00    	jne    c001697b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016891:	83 ec 0c             	sub    esp,0xc
c0016894:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016897:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001689b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001689f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00168a3:	0f af c2             	imul   eax,edx
c00168a6:	50                   	push   eax
c00168a7:	e8 17 31 ff ff       	call   c00099c3 <malloc>
c00168ac:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00168ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00168b2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00168b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00168b9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00168bd:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00168c1:	0f af c2             	imul   eax,edx
c00168c4:	99                   	cdq    
c00168c5:	52                   	push   edx
c00168c6:	50                   	push   eax
c00168c7:	56                   	push   esi
c00168c8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00168cb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00168ce:	83 c4 20             	add    esp,0x20
c00168d1:	85 c0                	test   eax,eax
c00168d3:	0f 84 a2 00 00 00    	je     c001697b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00168d9:	31 d2                	xor    edx,edx
c00168db:	51                   	push   ecx
c00168dc:	52                   	push   edx
c00168dd:	50                   	push   eax
c00168de:	56                   	push   esi
c00168df:	e8 08 68 ff ff       	call   c000d0ec <File::seek(unsigned long long)>
c00168e4:	83 c4 10             	add    esp,0x10
c00168e7:	85 c0                	test   eax,eax
c00168e9:	0f 85 8c 00 00 00    	jne    c001697b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00168ef:	83 ec 0c             	sub    esp,0xc
c00168f2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00168f6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00168fa:	31 ed                	xor    ebp,ebp
c00168fc:	0f af c2             	imul   eax,edx
c00168ff:	50                   	push   eax
c0016900:	e8 be 30 ff ff       	call   c00099c3 <malloc>
c0016905:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016907:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001690b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001690e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016912:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016916:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001691a:	0f af c2             	imul   eax,edx
c001691d:	99                   	cdq    
c001691e:	52                   	push   edx
c001691f:	50                   	push   eax
c0016920:	56                   	push   esi
c0016921:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016924:	83 c4 20             	add    esp,0x20
c0016927:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001692f:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0016933:	0f 86 80 00 00 00    	jbe    c00169b9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0016939:	0f b7 fd             	movzx  edi,bp
c001693c:	c1 e7 05             	shl    edi,0x5
c001693f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0016943:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0016946:	75 6b                	jne    c00169b3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016948:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001694b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001694f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0016952:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016956:	52                   	push   edx
c0016957:	31 d2                	xor    edx,edx
c0016959:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001695c:	52                   	push   edx
c001695d:	50                   	push   eax
c001695e:	56                   	push   esi
c001695f:	e8 88 67 ff ff       	call   c000d0ec <File::seek(unsigned long long)>
c0016964:	83 c4 10             	add    esp,0x10
c0016967:	85 c0                	test   eax,eax
c0016969:	74 17                	je     c0016982 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001696b:	83 ec 0c             	sub    esp,0xc
c001696e:	68 4c 44 02 c0       	push   0xc002444c
c0016973:	e8 e7 60 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0016978:	83 c4 10             	add    esp,0x10
c001697b:	31 c0                	xor    eax,eax
c001697d:	e9 87 00 00 00       	jmp    c0016a09 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0016982:	83 ec 0c             	sub    esp,0xc
c0016985:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0016988:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001698b:	50                   	push   eax
c001698c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016990:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016994:	56                   	push   esi
c0016995:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0016999:	e8 b3 fb ff ff       	call   c0016551 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001699e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00169a2:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00169a6:	83 c4 20             	add    esp,0x20
c00169a9:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00169ad:	73 04                	jae    c00169b3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00169af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00169b3:	45                   	inc    ebp
c00169b4:	e9 76 ff ff ff       	jmp    c001692f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00169b9:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00169bd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00169c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00169c5:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00169cb:	83 ec 0c             	sub    esp,0xc
c00169ce:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00169d4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00169d9:	05 00 10 00 00       	add    eax,0x1000
c00169de:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00169e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169e5:	e8 e9 2f ff ff       	call   c00099d3 <free>
c00169ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169ed:	e8 e1 2f ff ff       	call   c00099d3 <free>
c00169f2:	58                   	pop    eax
c00169f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00169f7:	e8 d7 2f ff ff       	call   c00099d3 <free>
c00169fc:	89 34 24             	mov    DWORD PTR [esp],esi
c00169ff:	e8 88 66 ff ff       	call   c000d08c <File::close()>
c0016a04:	83 c4 10             	add    esp,0x10
c0016a07:	b0 01                	mov    al,0x1
c0016a09:	83 c4 3c             	add    esp,0x3c
c0016a0c:	5b                   	pop    ebx
c0016a0d:	5e                   	pop    esi
c0016a0e:	5f                   	pop    edi
c0016a0f:	5d                   	pop    ebp
c0016a10:	c3                   	ret    

c0016a11 <Thr::runtimeReferenceHelper()>:
c0016a11:	83 ec 18             	sub    esp,0x18
c0016a14:	68 54 44 02 c0       	push   0xc0024454
c0016a19:	e8 41 60 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0016a1e:	fa                   	cli    
c0016a1f:	83 c4 10             	add    esp,0x10
c0016a22:	eb fe                	jmp    c0016a22 <Thr::runtimeReferenceHelper()+0x11>

c0016a24 <Thr::getAddressOfKernelSymbol(char const*)>:
c0016a24:	57                   	push   edi
c0016a25:	56                   	push   esi
c0016a26:	53                   	push   ebx
c0016a27:	31 db                	xor    ebx,ebx
c0016a29:	39 1d 00 76 02 c0    	cmp    DWORD PTR ds:0xc0027600,ebx
c0016a2f:	7e 3c                	jle    c0016a6d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0016a31:	8b 34 9d 80 75 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd8a80]
c0016a38:	31 ff                	xor    edi,edi
c0016a3a:	39 3c 9d 80 74 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8b80],edi
c0016a41:	7e 27                	jle    c0016a6a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0016a43:	50                   	push   eax
c0016a44:	50                   	push   eax
c0016a45:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a49:	8b 06                	mov    eax,DWORD PTR [esi]
c0016a4b:	03 04 9d 00 75 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd8b00]
c0016a52:	50                   	push   eax
c0016a53:	e8 74 9d fe ff       	call   c00007cc <strcmp>
c0016a58:	83 c4 10             	add    esp,0x10
c0016a5b:	85 c0                	test   eax,eax
c0016a5d:	75 05                	jne    c0016a64 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0016a5f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016a62:	eb 0b                	jmp    c0016a6f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0016a64:	83 c6 10             	add    esi,0x10
c0016a67:	47                   	inc    edi
c0016a68:	eb d0                	jmp    c0016a3a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0016a6a:	43                   	inc    ebx
c0016a6b:	eb bc                	jmp    c0016a29 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0016a6d:	31 c0                	xor    eax,eax
c0016a6f:	5b                   	pop    ebx
c0016a70:	5e                   	pop    esi
c0016a71:	5f                   	pop    edi
c0016a72:	c3                   	ret    

c0016a73 <Thr::loadKernelSymbolTable(char const*)>:
c0016a73:	55                   	push   ebp
c0016a74:	57                   	push   edi
c0016a75:	56                   	push   esi
c0016a76:	53                   	push   ebx
c0016a77:	83 ec 68             	sub    esp,0x68
c0016a7a:	8b 35 50 76 02 c0    	mov    esi,DWORD PTR ds:0xc0027650
c0016a80:	68 14 01 00 00       	push   0x114
c0016a85:	e8 39 2f ff ff       	call   c00099c3 <malloc>
c0016a8a:	83 c4 0c             	add    esp,0xc
c0016a8d:	89 c3                	mov    ebx,eax
c0016a8f:	56                   	push   esi
c0016a90:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0016a94:	50                   	push   eax
c0016a95:	e8 30 65 ff ff       	call   c000cfca <File::File(char const*, Process*)>
c0016a9a:	5e                   	pop    esi
c0016a9b:	5f                   	pop    edi
c0016a9c:	6a 01                	push   0x1
c0016a9e:	53                   	push   ebx
c0016a9f:	e8 8a 65 ff ff       	call   c000d02e <File::open(FileOpenMode)>
c0016aa4:	83 c4 10             	add    esp,0x10
c0016aa7:	85 c0                	test   eax,eax
c0016aa9:	74 0a                	je     c0016ab5 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0016aab:	83 ec 0c             	sub    esp,0xc
c0016aae:	68 76 44 02 c0       	push   0xc0024476
c0016ab3:	eb 34                	jmp    c0016ae9 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0016ab5:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016abd:	83 ec 0c             	sub    esp,0xc
c0016ac0:	6a 34                	push   0x34
c0016ac2:	e8 fc 2e ff ff       	call   c00099c3 <malloc>
c0016ac7:	59                   	pop    ecx
c0016ac8:	89 c7                	mov    edi,eax
c0016aca:	8d 74 24 34          	lea    esi,[esp+0x34]
c0016ace:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ad0:	56                   	push   esi
c0016ad1:	57                   	push   edi
c0016ad2:	6a 00                	push   0x0
c0016ad4:	6a 34                	push   0x34
c0016ad6:	53                   	push   ebx
c0016ad7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016ada:	83 c4 20             	add    esp,0x20
c0016add:	85 c0                	test   eax,eax
c0016adf:	74 17                	je     c0016af8 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0016ae1:	83 ec 0c             	sub    esp,0xc
c0016ae4:	68 8d 44 02 c0       	push   0xc002448d
c0016ae9:	e8 11 d8 ff ff       	call   c00142ff <Krnl::panic(char const*)>
c0016aee:	83 c4 10             	add    esp,0x10
c0016af1:	31 c0                	xor    eax,eax
c0016af3:	e9 31 02 00 00       	jmp    c0016d29 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0016af8:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016afe:	75 e1                	jne    c0016ae1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016b00:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016b03:	85 c0                	test   eax,eax
c0016b05:	74 da                	je     c0016ae1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016b07:	52                   	push   edx
c0016b08:	31 d2                	xor    edx,edx
c0016b0a:	52                   	push   edx
c0016b0b:	50                   	push   eax
c0016b0c:	53                   	push   ebx
c0016b0d:	e8 da 65 ff ff       	call   c000d0ec <File::seek(unsigned long long)>
c0016b12:	83 c4 10             	add    esp,0x10
c0016b15:	85 c0                	test   eax,eax
c0016b17:	75 c8                	jne    c0016ae1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016b19:	83 ec 0c             	sub    esp,0xc
c0016b1c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016b20:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016b24:	31 ed                	xor    ebp,ebp
c0016b26:	0f af c2             	imul   eax,edx
c0016b29:	50                   	push   eax
c0016b2a:	e8 94 2e ff ff       	call   c00099c3 <malloc>
c0016b2f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016b31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b35:	89 34 24             	mov    DWORD PTR [esp],esi
c0016b38:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b3c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016b40:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016b44:	0f af c2             	imul   eax,edx
c0016b47:	99                   	cdq    
c0016b48:	52                   	push   edx
c0016b49:	50                   	push   eax
c0016b4a:	53                   	push   ebx
c0016b4b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016b4e:	83 c4 20             	add    esp,0x20
c0016b51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016b59:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016b61:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016b69:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016b71:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0016b75:	0f 86 aa 00 00 00    	jbe    c0016c25 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0016b7b:	0f b7 f5             	movzx  esi,bp
c0016b7e:	6b f6 28             	imul   esi,esi,0x28
c0016b81:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0016b85:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016b88:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b8c:	50                   	push   eax
c0016b8d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b91:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0016b95:	8b 16                	mov    edx,DWORD PTR [esi]
c0016b97:	6b c0 28             	imul   eax,eax,0x28
c0016b9a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0016b9e:	89 d0                	mov    eax,edx
c0016ba0:	31 d2                	xor    edx,edx
c0016ba2:	52                   	push   edx
c0016ba3:	50                   	push   eax
c0016ba4:	53                   	push   ebx
c0016ba5:	e8 42 65 ff ff       	call   c000d0ec <File::seek(unsigned long long)>
c0016baa:	83 c4 0c             	add    esp,0xc
c0016bad:	6a 20                	push   0x20
c0016baf:	6a 00                	push   0x0
c0016bb1:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016bb5:	52                   	push   edx
c0016bb6:	e8 c9 9a fe ff       	call   c0000684 <memset>
c0016bbb:	58                   	pop    eax
c0016bbc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016bbe:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0016bc2:	51                   	push   ecx
c0016bc3:	8d 54 24 40          	lea    edx,[esp+0x40]
c0016bc7:	52                   	push   edx
c0016bc8:	6a 00                	push   0x0
c0016bca:	6a 1f                	push   0x1f
c0016bcc:	53                   	push   ebx
c0016bcd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016bd0:	83 c4 18             	add    esp,0x18
c0016bd3:	68 a4 44 02 c0       	push   0xc00244a4
c0016bd8:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016bdc:	52                   	push   edx
c0016bdd:	e8 ea 9b fe ff       	call   c00007cc <strcmp>
c0016be2:	83 c4 10             	add    esp,0x10
c0016be5:	85 c0                	test   eax,eax
c0016be7:	75 0f                	jne    c0016bf8 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0016be9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016bec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016bf0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016bf4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016bf8:	50                   	push   eax
c0016bf9:	50                   	push   eax
c0016bfa:	68 ac 44 02 c0       	push   0xc00244ac
c0016bff:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0016c03:	50                   	push   eax
c0016c04:	e8 c3 9b fe ff       	call   c00007cc <strcmp>
c0016c09:	83 c4 10             	add    esp,0x10
c0016c0c:	85 c0                	test   eax,eax
c0016c0e:	75 0f                	jne    c0016c1f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0016c10:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016c13:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016c17:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c1b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c1f:	45                   	inc    ebp
c0016c20:	e9 4c ff ff ff       	jmp    c0016b71 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0016c25:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016c2a:	75 10                	jne    c0016c3c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0016c2c:	83 ec 0c             	sub    esp,0xc
c0016c2f:	68 b4 44 02 c0       	push   0xc00244b4
c0016c34:	e8 c6 d6 ff ff       	call   c00142ff <Krnl::panic(char const*)>
c0016c39:	83 c4 10             	add    esp,0x10
c0016c3c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0016c41:	75 10                	jne    c0016c53 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0016c43:	83 ec 0c             	sub    esp,0xc
c0016c46:	68 b4 44 02 c0       	push   0xc00244b4
c0016c4b:	e8 af d6 ff ff       	call   c00142ff <Krnl::panic(char const*)>
c0016c50:	83 c4 10             	add    esp,0x10
c0016c53:	31 d2                	xor    edx,edx
c0016c55:	50                   	push   eax
c0016c56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c5a:	52                   	push   edx
c0016c5b:	50                   	push   eax
c0016c5c:	53                   	push   ebx
c0016c5d:	e8 8a 64 ff ff       	call   c000d0ec <File::seek(unsigned long long)>
c0016c62:	5a                   	pop    edx
c0016c63:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016c67:	e8 57 2d ff ff       	call   c00099c3 <malloc>
c0016c6c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c70:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016c74:	31 c9                	xor    ecx,ecx
c0016c76:	5e                   	pop    esi
c0016c77:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c79:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0016c7d:	55                   	push   ebp
c0016c7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c82:	51                   	push   ecx
c0016c83:	52                   	push   edx
c0016c84:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c88:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0016c8c:	53                   	push   ebx
c0016c8d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016c90:	83 c4 14             	add    esp,0x14
c0016c93:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016c97:	e8 27 2d ff ff       	call   c00099c3 <malloc>
c0016c9c:	89 c6                	mov    esi,eax
c0016c9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ca0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016ca3:	56                   	push   esi
c0016ca4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016ca8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016cac:	51                   	push   ecx
c0016cad:	52                   	push   edx
c0016cae:	53                   	push   ebx
c0016caf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016cb2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016cb6:	8b 15 00 76 02 c0    	mov    edx,DWORD PTR ds:0xc0027600
c0016cbc:	83 c4 1c             	add    esp,0x1c
c0016cbf:	c1 e8 04             	shr    eax,0x4
c0016cc2:	89 04 95 80 74 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8b80],eax
c0016cc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016ccd:	31 d2                	xor    edx,edx
c0016ccf:	52                   	push   edx
c0016cd0:	50                   	push   eax
c0016cd1:	53                   	push   ebx
c0016cd2:	e8 15 64 ff ff       	call   c000d0ec <File::seek(unsigned long long)>
c0016cd7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016cd9:	31 d2                	xor    edx,edx
c0016cdb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016cde:	56                   	push   esi
c0016cdf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016ce3:	52                   	push   edx
c0016ce4:	50                   	push   eax
c0016ce5:	53                   	push   ebx
c0016ce6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016ce9:	83 c4 14             	add    esp,0x14
c0016cec:	53                   	push   ebx
c0016ced:	e8 9a 63 ff ff       	call   c000d08c <File::close()>
c0016cf2:	5d                   	pop    ebp
c0016cf3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016cf7:	e8 d7 2c ff ff       	call   c00099d3 <free>
c0016cfc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016cff:	e8 cf 2c ff ff       	call   c00099d3 <free>
c0016d04:	a1 00 76 02 c0       	mov    eax,ds:0xc0027600
c0016d09:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016d0d:	8d 50 01             	lea    edx,[eax+0x1]
c0016d10:	89 0c 85 80 75 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8a80],ecx
c0016d17:	89 34 85 00 75 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8b00],esi
c0016d1e:	89 15 00 76 02 c0    	mov    DWORD PTR ds:0xc0027600,edx
c0016d24:	83 c4 10             	add    esp,0x10
c0016d27:	b0 01                	mov    al,0x1
c0016d29:	83 c4 5c             	add    esp,0x5c
c0016d2c:	5b                   	pop    ebx
c0016d2d:	5e                   	pop    esi
c0016d2e:	5f                   	pop    edi
c0016d2f:	5d                   	pop    ebp
c0016d30:	c3                   	ret    

c0016d31 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0016d31:	55                   	push   ebp
c0016d32:	57                   	push   edi
c0016d33:	56                   	push   esi
c0016d34:	53                   	push   ebx
c0016d35:	81 ec 68 03 00 00    	sub    esp,0x368
c0016d3b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0016d42:	8b 1d 50 76 02 c0    	mov    ebx,DWORD PTR ds:0xc0027650
c0016d48:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0016d4c:	68 14 01 00 00       	push   0x114
c0016d51:	e8 6d 2c ff ff       	call   c00099c3 <malloc>
c0016d56:	83 c4 0c             	add    esp,0xc
c0016d59:	89 c5                	mov    ebp,eax
c0016d5b:	53                   	push   ebx
c0016d5c:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0016d63:	50                   	push   eax
c0016d64:	e8 61 62 ff ff       	call   c000cfca <File::File(char const*, Process*)>
c0016d69:	5e                   	pop    esi
c0016d6a:	5f                   	pop    edi
c0016d6b:	6a 01                	push   0x1
c0016d6d:	55                   	push   ebp
c0016d6e:	e8 bb 62 ff ff       	call   c000d02e <File::open(FileOpenMode)>
c0016d73:	83 c4 10             	add    esp,0x10
c0016d76:	85 c0                	test   eax,eax
c0016d78:	0f 85 a7 06 00 00    	jne    c0017425 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016d7e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016d86:	83 ec 0c             	sub    esp,0xc
c0016d89:	6a 34                	push   0x34
c0016d8b:	e8 33 2c ff ff       	call   c00099c3 <malloc>
c0016d90:	5b                   	pop    ebx
c0016d91:	89 c7                	mov    edi,eax
c0016d93:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016d97:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016d9a:	53                   	push   ebx
c0016d9b:	57                   	push   edi
c0016d9c:	6a 00                	push   0x0
c0016d9e:	6a 34                	push   0x34
c0016da0:	55                   	push   ebp
c0016da1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016da4:	83 c4 20             	add    esp,0x20
c0016da7:	85 c0                	test   eax,eax
c0016da9:	0f 85 76 06 00 00    	jne    c0017425 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016daf:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016db5:	0f 85 6a 06 00 00    	jne    c0017425 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016dbb:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016dbe:	85 c0                	test   eax,eax
c0016dc0:	0f 84 5f 06 00 00    	je     c0017425 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016dc6:	31 d2                	xor    edx,edx
c0016dc8:	51                   	push   ecx
c0016dc9:	52                   	push   edx
c0016dca:	50                   	push   eax
c0016dcb:	55                   	push   ebp
c0016dcc:	e8 1b 63 ff ff       	call   c000d0ec <File::seek(unsigned long long)>
c0016dd1:	83 c4 10             	add    esp,0x10
c0016dd4:	85 c0                	test   eax,eax
c0016dd6:	0f 85 49 06 00 00    	jne    c0017425 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016ddc:	83 ec 0c             	sub    esp,0xc
c0016ddf:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0016de2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016de6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016dea:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016dee:	0f af c2             	imul   eax,edx
c0016df1:	50                   	push   eax
c0016df2:	e8 cc 2b ff ff       	call   c00099c3 <malloc>
c0016df7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016dfa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016dfe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e05:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016e09:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016e0d:	0f af c2             	imul   eax,edx
c0016e10:	99                   	cdq    
c0016e11:	52                   	push   edx
c0016e12:	50                   	push   eax
c0016e13:	55                   	push   ebp
c0016e14:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016e17:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0016e1a:	83 c4 20             	add    esp,0x20
c0016e1d:	85 c0                	test   eax,eax
c0016e1f:	0f 84 00 06 00 00    	je     c0017425 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e25:	52                   	push   edx
c0016e26:	31 d2                	xor    edx,edx
c0016e28:	52                   	push   edx
c0016e29:	50                   	push   eax
c0016e2a:	55                   	push   ebp
c0016e2b:	e8 bc 62 ff ff       	call   c000d0ec <File::seek(unsigned long long)>
c0016e30:	83 c4 10             	add    esp,0x10
c0016e33:	85 c0                	test   eax,eax
c0016e35:	0f 85 ea 05 00 00    	jne    c0017425 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e3b:	83 ec 0c             	sub    esp,0xc
c0016e3e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016e42:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016e46:	31 f6                	xor    esi,esi
c0016e48:	0f af c2             	imul   eax,edx
c0016e4b:	50                   	push   eax
c0016e4c:	e8 72 2b ff ff       	call   c00099c3 <malloc>
c0016e51:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016e54:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016e58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e5b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016e5f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016e63:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016e67:	0f af c2             	imul   eax,edx
c0016e6a:	99                   	cdq    
c0016e6b:	52                   	push   edx
c0016e6c:	50                   	push   eax
c0016e6d:	55                   	push   ebp
c0016e6e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016e71:	83 c4 20             	add    esp,0x20
c0016e74:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0016e78:	0f 86 8a 00 00 00    	jbe    c0016f08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0016e7e:	0f b7 de             	movzx  ebx,si
c0016e81:	c1 e3 05             	shl    ebx,0x5
c0016e84:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0016e88:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0016e8b:	75 75                	jne    c0016f02 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0016e8d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e90:	31 d2                	xor    edx,edx
c0016e92:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e96:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016e99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e9d:	50                   	push   eax
c0016e9e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0016ea1:	52                   	push   edx
c0016ea2:	50                   	push   eax
c0016ea3:	55                   	push   ebp
c0016ea4:	e8 43 62 ff ff       	call   c000d0ec <File::seek(unsigned long long)>
c0016ea9:	83 c4 10             	add    esp,0x10
c0016eac:	85 c0                	test   eax,eax
c0016eae:	0f 85 71 05 00 00    	jne    c0017425 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016eb4:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0016ebb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016ebe:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0016ec2:	31 d2                	xor    edx,edx
c0016ec4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0016ec8:	83 ec 0c             	sub    esp,0xc
c0016ecb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ecf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016ed6:	50                   	push   eax
c0016ed7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016edb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016edf:	52                   	push   edx
c0016ee0:	50                   	push   eax
c0016ee1:	55                   	push   ebp
c0016ee2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016ee5:	83 c4 1c             	add    esp,0x1c
c0016ee8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016eeb:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0016eee:	50                   	push   eax
c0016eef:	6a 00                	push   0x0
c0016ef1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ef5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0016ef9:	50                   	push   eax
c0016efa:	e8 85 97 fe ff       	call   c0000684 <memset>
c0016eff:	83 c4 10             	add    esp,0x10
c0016f02:	46                   	inc    esi
c0016f03:	e9 6c ff ff ff       	jmp    c0016e74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0016f08:	53                   	push   ebx
c0016f09:	31 db                	xor    ebx,ebx
c0016f0b:	68 00 01 00 00       	push   0x100
c0016f10:	6a 00                	push   0x0
c0016f12:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0016f16:	50                   	push   eax
c0016f17:	e8 68 97 fe ff       	call   c0000684 <memset>
c0016f1c:	83 c4 0c             	add    esp,0xc
c0016f1f:	68 00 01 00 00       	push   0x100
c0016f24:	6a 00                	push   0x0
c0016f26:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0016f2d:	50                   	push   eax
c0016f2e:	e8 51 97 fe ff       	call   c0000684 <memset>
c0016f33:	83 c4 10             	add    esp,0x10
c0016f36:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016f3e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016f46:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0016f4e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016f56:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016f5e:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0016f62:	0f 86 30 01 00 00    	jbe    c0017098 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0016f68:	0f b7 f3             	movzx  esi,bx
c0016f6b:	6b f6 28             	imul   esi,esi,0x28
c0016f6e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0016f72:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016f75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f79:	52                   	push   edx
c0016f7a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f7e:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0016f82:	8b 06                	mov    eax,DWORD PTR [esi]
c0016f84:	6b d2 28             	imul   edx,edx,0x28
c0016f87:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0016f8b:	31 d2                	xor    edx,edx
c0016f8d:	52                   	push   edx
c0016f8e:	50                   	push   eax
c0016f8f:	55                   	push   ebp
c0016f90:	e8 57 61 ff ff       	call   c000d0ec <File::seek(unsigned long long)>
c0016f95:	83 c4 0c             	add    esp,0xc
c0016f98:	6a 20                	push   0x20
c0016f9a:	6a 00                	push   0x0
c0016f9c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016fa3:	51                   	push   ecx
c0016fa4:	e8 db 96 fe ff       	call   c0000684 <memset>
c0016fa9:	59                   	pop    ecx
c0016faa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016fad:	8d 54 24 58          	lea    edx,[esp+0x58]
c0016fb1:	52                   	push   edx
c0016fb2:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0016fb9:	51                   	push   ecx
c0016fba:	6a 00                	push   0x0
c0016fbc:	6a 1f                	push   0x1f
c0016fbe:	55                   	push   ebp
c0016fbf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016fc2:	83 c4 1c             	add    esp,0x1c
c0016fc5:	6a 09                	push   0x9
c0016fc7:	68 ce 44 02 c0       	push   0xc00244ce
c0016fcc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016fd3:	51                   	push   ecx
c0016fd4:	e8 a7 95 fe ff       	call   c0000580 <memcmp>
c0016fd9:	83 c4 10             	add    esp,0x10
c0016fdc:	85 c0                	test   eax,eax
c0016fde:	75 21                	jne    c0017001 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0016fe0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016fe4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016fe8:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0016fec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016ff0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016ff3:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0016ffa:	89 d0                	mov    eax,edx
c0016ffc:	40                   	inc    eax
c0016ffd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017001:	50                   	push   eax
c0017002:	6a 09                	push   0x9
c0017004:	68 d8 44 02 c0       	push   0xc00244d8
c0017009:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017010:	50                   	push   eax
c0017011:	e8 6a 95 fe ff       	call   c0000580 <memcmp>
c0017016:	83 c4 10             	add    esp,0x10
c0017019:	85 c0                	test   eax,eax
c001701b:	75 21                	jne    c001703e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001701d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017021:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017025:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017029:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001702d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017030:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017037:	89 d0                	mov    eax,edx
c0017039:	40                   	inc    eax
c001703a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001703e:	50                   	push   eax
c001703f:	50                   	push   eax
c0017040:	68 a4 44 02 c0       	push   0xc00244a4
c0017045:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001704c:	50                   	push   eax
c001704d:	e8 7a 97 fe ff       	call   c00007cc <strcmp>
c0017052:	83 c4 10             	add    esp,0x10
c0017055:	85 c0                	test   eax,eax
c0017057:	75 0f                	jne    c0017068 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0017059:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001705c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017060:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017064:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017068:	50                   	push   eax
c0017069:	50                   	push   eax
c001706a:	68 ac 44 02 c0       	push   0xc00244ac
c001706f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017076:	50                   	push   eax
c0017077:	e8 50 97 fe ff       	call   c00007cc <strcmp>
c001707c:	83 c4 10             	add    esp,0x10
c001707f:	85 c0                	test   eax,eax
c0017081:	75 0f                	jne    c0017092 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0017083:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017086:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001708a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001708e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017092:	43                   	inc    ebx
c0017093:	e9 c6 fe ff ff       	jmp    c0016f5e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0017098:	31 d2                	xor    edx,edx
c001709a:	50                   	push   eax
c001709b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001709f:	52                   	push   edx
c00170a0:	50                   	push   eax
c00170a1:	55                   	push   ebp
c00170a2:	e8 45 60 ff ff       	call   c000d0ec <File::seek(unsigned long long)>
c00170a7:	58                   	pop    eax
c00170a8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00170ac:	e8 12 29 ff ff       	call   c00099c3 <malloc>
c00170b1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00170b4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00170b8:	31 d2                	xor    edx,edx
c00170ba:	58                   	pop    eax
c00170bb:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00170bf:	53                   	push   ebx
c00170c0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00170c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170c8:	52                   	push   edx
c00170c9:	50                   	push   eax
c00170ca:	55                   	push   ebp
c00170cb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00170ce:	83 c4 14             	add    esp,0x14
c00170d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00170d5:	e8 e9 28 ff ff       	call   c00099c3 <malloc>
c00170da:	31 d2                	xor    edx,edx
c00170dc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00170e0:	83 c4 0c             	add    esp,0xc
c00170e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170e7:	52                   	push   edx
c00170e8:	50                   	push   eax
c00170e9:	55                   	push   ebp
c00170ea:	e8 fd 5f ff ff       	call   c000d0ec <File::seek(unsigned long long)>
c00170ef:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00170f2:	31 d2                	xor    edx,edx
c00170f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00170f7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00170fb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00170ff:	52                   	push   edx
c0017100:	50                   	push   eax
c0017101:	55                   	push   ebp
c0017102:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017105:	83 c4 20             	add    esp,0x20
c0017108:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017110:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017114:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0017118:	0f 84 0b 03 00 00    	je     c0017429 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001711e:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0017125:	31 d2                	xor    edx,edx
c0017127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001712b:	c1 e8 03             	shr    eax,0x3
c001712e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017132:	51                   	push   ecx
c0017133:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017137:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001713b:	52                   	push   edx
c001713c:	50                   	push   eax
c001713d:	55                   	push   ebp
c001713e:	e8 a9 5f ff ff       	call   c000d0ec <File::seek(unsigned long long)>
c0017143:	5b                   	pop    ebx
c0017144:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017148:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001714f:	e8 6f 28 ff ff       	call   c00099c3 <malloc>
c0017154:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017157:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001715b:	31 d2                	xor    edx,edx
c001715d:	5e                   	pop    esi
c001715e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017162:	50                   	push   eax
c0017163:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017167:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001716b:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0017172:	52                   	push   edx
c0017173:	50                   	push   eax
c0017174:	55                   	push   ebp
c0017175:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017178:	83 c4 20             	add    esp,0x20
c001717b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017183:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0017187:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001718b:	0f 8d 7c 02 00 00    	jge    c001740d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0017191:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017195:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017199:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001719e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c00171a1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00171a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171a9:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c00171ad:	89 d8                	mov    eax,ebx
c00171af:	c1 e8 08             	shr    eax,0x8
c00171b2:	89 c6                	mov    esi,eax
c00171b4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00171b8:	c1 e6 04             	shl    esi,0x4
c00171bb:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00171bf:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00171c2:	85 d2                	test   edx,edx
c00171c4:	0f 85 bf 00 00 00    	jne    c0017289 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00171ca:	83 ec 0c             	sub    esp,0xc
c00171cd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00171d1:	03 06                	add    eax,DWORD PTR [esi]
c00171d3:	50                   	push   eax
c00171d4:	e8 4b f8 ff ff       	call   c0016a24 <Thr::getAddressOfKernelSymbol(char const*)>
c00171d9:	83 c4 10             	add    esp,0x10
c00171dc:	89 c2                	mov    edx,eax
c00171de:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c00171e3:	85 c0                	test   eax,eax
c00171e5:	0f 85 9e 00 00 00    	jne    c0017289 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00171eb:	83 ec 0c             	sub    esp,0xc
c00171ee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00171f2:	03 06                	add    eax,DWORD PTR [esi]
c00171f4:	50                   	push   eax
c00171f5:	e8 16 17 ff ff       	call   c0008910 <Krnl::resolveCompatibilitySymbol(char*)>
c00171fa:	83 c4 10             	add    esp,0x10
c00171fd:	89 c2                	mov    edx,eax
c00171ff:	85 c0                	test   eax,eax
c0017201:	0f 85 82 00 00 00    	jne    c0017289 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017207:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001720b:	50                   	push   eax
c001720c:	50                   	push   eax
c001720d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017211:	03 06                	add    eax,DWORD PTR [esi]
c0017213:	50                   	push   eax
c0017214:	68 e2 44 02 c0       	push   0xc00244e2
c0017219:	e8 41 58 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001721e:	58                   	pop    eax
c001721f:	5a                   	pop    edx
c0017220:	68 fc 44 02 c0       	push   0xc00244fc
c0017225:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001722c:	50                   	push   eax
c001722d:	e8 0e 95 fe ff       	call   c0000740 <strcpy>
c0017232:	59                   	pop    ecx
c0017233:	58                   	pop    eax
c0017234:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017238:	03 06                	add    eax,DWORD PTR [esi]
c001723a:	50                   	push   eax
c001723b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017242:	50                   	push   eax
c0017243:	e8 38 96 fe ff       	call   c0000880 <strcat>
c0017248:	58                   	pop    eax
c0017249:	5a                   	pop    edx
c001724a:	68 92 45 02 c0       	push   0xc0024592
c001724f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017256:	50                   	push   eax
c0017257:	e8 24 96 fe ff       	call   c0000880 <strcat>
c001725c:	83 c4 10             	add    esp,0x10
c001725f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017264:	0f 84 5d 01 00 00    	je     c00173c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001726a:	83 ec 0c             	sub    esp,0xc
c001726d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017274:	50                   	push   eax
c0017275:	e8 85 d0 ff ff       	call   c00142ff <Krnl::panic(char const*)>
c001727a:	83 c4 10             	add    esp,0x10
c001727d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017281:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017285:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017289:	80 fb 01             	cmp    bl,0x1
c001728c:	0f 85 88 00 00 00    	jne    c001731a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0017292:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0017299:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001729d:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c00172a1:	01 ce                	add    esi,ecx
c00172a3:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00172a9:	0f 94 c0             	sete   al
c00172ac:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00172b2:	0f 94 c3             	sete   bl
c00172b5:	09 c3                	or     ebx,eax
c00172b7:	8b 06                	mov    eax,DWORD PTR [esi]
c00172b9:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00172be:	74 41                	je     c0017301 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c00172c0:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00172c3:	84 db                	test   bl,bl
c00172c5:	75 15                	jne    c00172dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c00172c7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00172cb:	66 83 f8 0c          	cmp    ax,0xc
c00172cf:	76 05                	jbe    c00172d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c00172d1:	b8 0c 00 00 00       	mov    eax,0xc
c00172d6:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00172da:	76 37                	jbe    c0017313 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00172dc:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00172e0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00172e5:	0f 84 dc 00 00 00    	je     c00173c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00172eb:	83 ec 0c             	sub    esp,0xc
c00172ee:	68 13 45 02 c0       	push   0xc0024513
c00172f3:	e8 07 d0 ff ff       	call   c00142ff <Krnl::panic(char const*)>
c00172f8:	83 c4 10             	add    esp,0x10
c00172fb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00172ff:	eb 12                	jmp    c0017313 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017301:	01 c1                	add    ecx,eax
c0017303:	84 db                	test   bl,bl
c0017305:	75 0c                	jne    c0017313 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017307:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001730b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001730f:	77 02                	ja     c0017313 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017311:	01 d1                	add    ecx,edx
c0017313:	89 0e                	mov    DWORD PTR [esi],ecx
c0017315:	e9 ea 00 00 00       	jmp    c0017404 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001731a:	80 fb 02             	cmp    bl,0x2
c001731d:	75 7c                	jne    c001739b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001731f:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0017326:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001732a:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001732e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017334:	74 20                	je     c0017356 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0017336:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001733c:	74 18                	je     c0017356 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001733e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017342:	b9 0a 00 00 00       	mov    ecx,0xa
c0017347:	66 83 f8 0e          	cmp    ax,0xe
c001734b:	77 03                	ja     c0017350 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001734d:	8d 48 fc             	lea    ecx,[eax-0x4]
c0017350:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0017354:	76 1f                	jbe    c0017375 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0017356:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001735a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001735f:	74 66                	je     c00173c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017361:	83 ec 0c             	sub    esp,0xc
c0017364:	68 2f 45 02 c0       	push   0xc002452f
c0017369:	e8 91 cf ff ff       	call   c00142ff <Krnl::panic(char const*)>
c001736e:	83 c4 10             	add    esp,0x10
c0017371:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017375:	8b 06                	mov    eax,DWORD PTR [esi]
c0017377:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001737c:	74 13                	je     c0017391 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001737e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017382:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0017389:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001738d:	01 c8                	add    eax,ecx
c001738f:	eb 04                	jmp    c0017395 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0017391:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0017395:	01 c2                	add    edx,eax
c0017397:	89 16                	mov    DWORD PTR [esi],edx
c0017399:	eb 69                	jmp    c0017404 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001739b:	0f b6 db             	movzx  ebx,bl
c001739e:	50                   	push   eax
c001739f:	50                   	push   eax
c00173a0:	53                   	push   ebx
c00173a1:	68 4b 45 02 c0       	push   0xc002454b
c00173a6:	e8 b4 56 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c00173ab:	83 c4 10             	add    esp,0x10
c00173ae:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00173b3:	74 12                	je     c00173c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00173b5:	83 ec 0c             	sub    esp,0xc
c00173b8:	68 56 45 02 c0       	push   0xc0024556
c00173bd:	e8 3d cf ff ff       	call   c00142ff <Krnl::panic(char const*)>
c00173c2:	83 c4 10             	add    esp,0x10
c00173c5:	eb 3d                	jmp    c0017404 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00173c7:	83 ec 0c             	sub    esp,0xc
c00173ca:	55                   	push   ebp
c00173cb:	e8 bc 5c ff ff       	call   c000d08c <File::close()>
c00173d0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00173d3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00173d6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00173d9:	59                   	pop    ecx
c00173da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00173de:	e8 f0 25 ff ff       	call   c00099d3 <free>
c00173e3:	5b                   	pop    ebx
c00173e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00173e8:	e8 e6 25 ff ff       	call   c00099d3 <free>
c00173ed:	89 3c 24             	mov    DWORD PTR [esp],edi
c00173f0:	e8 de 25 ff ff       	call   c00099d3 <free>
c00173f5:	5e                   	pop    esi
c00173f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00173fa:	e8 d4 25 ff ff       	call   c00099d3 <free>
c00173ff:	83 c4 10             	add    esp,0x10
c0017402:	eb 21                	jmp    c0017425 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017404:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0017408:	e9 76 fd ff ff       	jmp    c0017183 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001740d:	83 ec 0c             	sub    esp,0xc
c0017410:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017414:	e8 ba 25 ff ff       	call   c00099d3 <free>
c0017419:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001741d:	83 c4 10             	add    esp,0x10
c0017420:	e9 eb fc ff ff       	jmp    c0017110 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0017425:	31 c0                	xor    eax,eax
c0017427:	eb 33                	jmp    c001745c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0017429:	83 ec 0c             	sub    esp,0xc
c001742c:	55                   	push   ebp
c001742d:	e8 5a 5c ff ff       	call   c000d08c <File::close()>
c0017432:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017435:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017438:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001743b:	58                   	pop    eax
c001743c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017440:	e8 8e 25 ff ff       	call   c00099d3 <free>
c0017445:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017448:	e8 86 25 ff ff       	call   c00099d3 <free>
c001744d:	5a                   	pop    edx
c001744e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017452:	e8 7c 25 ff ff       	call   c00099d3 <free>
c0017457:	83 c4 10             	add    esp,0x10
c001745a:	b0 01                	mov    al,0x1
c001745c:	81 c4 5c 03 00 00    	add    esp,0x35c
c0017462:	5b                   	pop    ebx
c0017463:	5e                   	pop    esi
c0017464:	5f                   	pop    edi
c0017465:	5d                   	pop    ebp
c0017466:	c3                   	ret    

c0017467 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0017467:	56                   	push   esi
c0017468:	31 d2                	xor    edx,edx
c001746a:	53                   	push   ebx
c001746b:	8b 1d 60 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026e60
c0017471:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017475:	39 d3                	cmp    ebx,edx
c0017477:	7e 1b                	jle    c0017494 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0017479:	8b 04 95 80 70 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8f80]
c0017480:	39 c8                	cmp    eax,ecx
c0017482:	77 0d                	ja     c0017491 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0017484:	8b 34 95 80 6e 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd9180]
c001748b:	01 c6                	add    esi,eax
c001748d:	39 ce                	cmp    esi,ecx
c001748f:	77 05                	ja     c0017496 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0017491:	42                   	inc    edx
c0017492:	eb e1                	jmp    c0017475 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0017494:	31 c0                	xor    eax,eax
c0017496:	5b                   	pop    ebx
c0017497:	5e                   	pop    esi
c0017498:	c3                   	ret    

c0017499 <Thr::getDriverNameFromAddress(unsigned long)>:
c0017499:	53                   	push   ebx
c001749a:	31 c0                	xor    eax,eax
c001749c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00174a0:	8b 1d 60 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026e60
c00174a6:	39 c3                	cmp    ebx,eax
c00174a8:	7e 22                	jle    c00174cc <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00174aa:	8b 14 85 80 70 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8f80]
c00174b1:	39 ca                	cmp    edx,ecx
c00174b3:	77 14                	ja     c00174c9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00174b5:	03 14 85 80 6e 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd9180]
c00174bc:	39 ca                	cmp    edx,ecx
c00174be:	76 09                	jbe    c00174c9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00174c0:	8b 04 85 80 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8d80]
c00174c7:	eb 05                	jmp    c00174ce <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00174c9:	40                   	inc    eax
c00174ca:	eb da                	jmp    c00174a6 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00174cc:	31 c0                	xor    eax,eax
c00174ce:	5b                   	pop    ebx
c00174cf:	c3                   	ret    

c00174d0 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00174d0:	53                   	push   ebx
c00174d1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00174d5:	53                   	push   ebx
c00174d6:	e8 8c ff ff ff       	call   c0017467 <Thr::getDriverBaseFromAddress(unsigned long)>
c00174db:	5a                   	pop    edx
c00174dc:	31 d2                	xor    edx,edx
c00174de:	85 c0                	test   eax,eax
c00174e0:	74 04                	je     c00174e6 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00174e2:	89 da                	mov    edx,ebx
c00174e4:	29 c2                	sub    edx,eax
c00174e6:	89 d0                	mov    eax,edx
c00174e8:	5b                   	pop    ebx
c00174e9:	c3                   	ret    

c00174ea <Thr::loadDLL(char const*, bool)>:
c00174ea:	55                   	push   ebp
c00174eb:	57                   	push   edi
c00174ec:	56                   	push   esi
c00174ed:	53                   	push   ebx
c00174ee:	81 ec 34 01 00 00    	sub    esp,0x134
c00174f4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00174fb:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0017502:	56                   	push   esi
c0017503:	68 6e 45 02 c0       	push   0xc002456e
c0017508:	e8 52 55 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001750d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017514:	e8 aa 24 ff ff       	call   c00099c3 <malloc>
c0017519:	83 c4 0c             	add    esp,0xc
c001751c:	89 c3                	mov    ebx,eax
c001751e:	ff 35 50 76 02 c0    	push   DWORD PTR ds:0xc0027650
c0017524:	56                   	push   esi
c0017525:	50                   	push   eax
c0017526:	e8 9f 5a ff ff       	call   c000cfca <File::File(char const*, Process*)>
c001752b:	83 c4 10             	add    esp,0x10
c001752e:	85 db                	test   ebx,ebx
c0017530:	75 3c                	jne    c001756e <Thr::loadDLL(char const*, bool)+0x84>
c0017532:	89 f8                	mov    eax,edi
c0017534:	84 c0                	test   al,al
c0017536:	0f 84 d2 01 00 00    	je     c001770e <Thr::loadDLL(char const*, bool)+0x224>
c001753c:	55                   	push   ebp
c001753d:	55                   	push   ebp
c001753e:	68 7f 45 02 c0       	push   0xc002457f
c0017543:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0017547:	55                   	push   ebp
c0017548:	e8 f3 91 fe ff       	call   c0000740 <strcpy>
c001754d:	58                   	pop    eax
c001754e:	5a                   	pop    edx
c001754f:	56                   	push   esi
c0017550:	55                   	push   ebp
c0017551:	e8 2a 93 fe ff       	call   c0000880 <strcat>
c0017556:	59                   	pop    ecx
c0017557:	58                   	pop    eax
c0017558:	68 92 45 02 c0       	push   0xc0024592
c001755d:	55                   	push   ebp
c001755e:	e8 1d 93 fe ff       	call   c0000880 <strcat>
c0017563:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017566:	e8 94 cd ff ff       	call   c00142ff <Krnl::panic(char const*)>
c001756b:	83 c4 10             	add    esp,0x10
c001756e:	51                   	push   ecx
c001756f:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0017573:	50                   	push   eax
c0017574:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017578:	50                   	push   eax
c0017579:	53                   	push   ebx
c001757a:	e8 5b 5d ff ff       	call   c000d2da <File::stat(unsigned long long*, bool*)>
c001757f:	83 c4 10             	add    esp,0x10
c0017582:	85 db                	test   ebx,ebx
c0017584:	74 0c                	je     c0017592 <Thr::loadDLL(char const*, bool)+0xa8>
c0017586:	83 ec 0c             	sub    esp,0xc
c0017589:	8b 03                	mov    eax,DWORD PTR [ebx]
c001758b:	53                   	push   ebx
c001758c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001758f:	83 c4 10             	add    esp,0x10
c0017592:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0017597:	75 0a                	jne    c00175a3 <Thr::loadDLL(char const*, bool)+0xb9>
c0017599:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001759d:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00175a1:	75 3c                	jne    c00175df <Thr::loadDLL(char const*, bool)+0xf5>
c00175a3:	89 f8                	mov    eax,edi
c00175a5:	84 c0                	test   al,al
c00175a7:	0f 84 49 01 00 00    	je     c00176f6 <Thr::loadDLL(char const*, bool)+0x20c>
c00175ad:	51                   	push   ecx
c00175ae:	51                   	push   ecx
c00175af:	68 7f 45 02 c0       	push   0xc002457f
c00175b4:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00175b8:	53                   	push   ebx
c00175b9:	e8 82 91 fe ff       	call   c0000740 <strcpy>
c00175be:	5d                   	pop    ebp
c00175bf:	58                   	pop    eax
c00175c0:	56                   	push   esi
c00175c1:	53                   	push   ebx
c00175c2:	e8 b9 92 fe ff       	call   c0000880 <strcat>
c00175c7:	58                   	pop    eax
c00175c8:	5a                   	pop    edx
c00175c9:	68 92 45 02 c0       	push   0xc0024592
c00175ce:	53                   	push   ebx
c00175cf:	e8 ac 92 fe ff       	call   c0000880 <strcat>
c00175d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00175d7:	e8 23 cd ff ff       	call   c00142ff <Krnl::panic(char const*)>
c00175dc:	83 c4 10             	add    esp,0x10
c00175df:	52                   	push   edx
c00175e0:	6a 03                	push   0x3
c00175e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175e6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00175ea:	05 ff 0f 00 00       	add    eax,0xfff
c00175ef:	83 d2 00             	adc    edx,0x0
c00175f2:	0f ac d0 0c          	shrd   eax,edx,0xc
c00175f6:	50                   	push   eax
c00175f7:	ff 35 90 62 02 c0    	push   DWORD PTR ds:0xc0026290
c00175fd:	e8 e0 48 ff ff       	call   c000bee2 <VAS::allocatePages(int, int)>
c0017602:	59                   	pop    ecx
c0017603:	89 c3                	mov    ebx,eax
c0017605:	5d                   	pop    ebp
c0017606:	50                   	push   eax
c0017607:	68 82 28 02 c0       	push   0xc0022882
c001760c:	e8 4e 54 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0017611:	89 34 24             	mov    DWORD PTR [esp],esi
c0017614:	e8 87 90 fe ff       	call   c00006a0 <strlen>
c0017619:	8b 2d 60 6e 02 c0    	mov    ebp,DWORD PTR ds:0xc0026e60
c001761f:	40                   	inc    eax
c0017620:	89 04 24             	mov    DWORD PTR [esp],eax
c0017623:	e8 9b 23 ff ff       	call   c00099c3 <malloc>
c0017628:	89 04 ad 80 72 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd8d80],eax
c001762f:	58                   	pop    eax
c0017630:	a1 60 6e 02 c0       	mov    eax,ds:0xc0026e60
c0017635:	5a                   	pop    edx
c0017636:	56                   	push   esi
c0017637:	ff 34 85 80 72 02 c0 	push   DWORD PTR [eax*4-0x3ffd8d80]
c001763e:	e8 fd 90 fe ff       	call   c0000740 <strcpy>
c0017643:	a1 60 6e 02 c0       	mov    eax,ds:0xc0026e60
c0017648:	8d 50 01             	lea    edx,[eax+0x1]
c001764b:	89 1c 85 80 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8f80],ebx
c0017652:	89 15 60 6e 02 c0    	mov    DWORD PTR ds:0xc0026e60,edx
c0017658:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001765c:	83 c4 0c             	add    esp,0xc
c001765f:	89 14 85 80 6e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9180],edx
c0017666:	6a 01                	push   0x1
c0017668:	53                   	push   ebx
c0017669:	56                   	push   esi
c001766a:	e8 c2 f6 ff ff       	call   c0016d31 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001766f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0017673:	83 c4 10             	add    esp,0x10
c0017676:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001767b:	0f 85 89 00 00 00    	jne    c001770a <Thr::loadDLL(char const*, bool)+0x220>
c0017681:	89 f8                	mov    eax,edi
c0017683:	84 c0                	test   al,al
c0017685:	74 73                	je     c00176fa <Thr::loadDLL(char const*, bool)+0x210>
c0017687:	83 ec 0c             	sub    esp,0xc
c001768a:	68 94 45 02 c0       	push   0xc0024594
c001768f:	e8 6b cc ff ff       	call   c00142ff <Krnl::panic(char const*)>
c0017694:	83 c4 10             	add    esp,0x10
c0017697:	eb 61                	jmp    c00176fa <Thr::loadDLL(char const*, bool)+0x210>
c0017699:	50                   	push   eax
c001769a:	50                   	push   eax
c001769b:	89 e8                	mov    eax,ebp
c001769d:	c1 e0 0c             	shl    eax,0xc
c00176a0:	01 d8                	add    eax,ebx
c00176a2:	50                   	push   eax
c00176a3:	ff 35 90 62 02 c0    	push   DWORD PTR ds:0xc0026290
c00176a9:	e8 9c 43 ff ff       	call   c000ba4a <VAS::getPageTableEntry(unsigned long)>
c00176ae:	83 c4 10             	add    esp,0x10
c00176b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00176b3:	a8 60                	test   al,0x60
c00176b5:	75 11                	jne    c00176c8 <Thr::loadDLL(char const*, bool)+0x1de>
c00176b7:	83 ec 0c             	sub    esp,0xc
c00176ba:	25 00 f0 ff ff       	and    eax,0xfffff000
c00176bf:	50                   	push   eax
c00176c0:	e8 df 26 ff ff       	call   c0009da4 <Phys::freePage(unsigned long)>
c00176c5:	83 c4 10             	add    esp,0x10
c00176c8:	45                   	inc    ebp
c00176c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00176cd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00176d1:	05 ff 0f 00 00       	add    eax,0xfff
c00176d6:	bf 00 00 00 00       	mov    edi,0x0
c00176db:	83 d2 00             	adc    edx,0x0
c00176de:	0f ac d0 0c          	shrd   eax,edx,0xc
c00176e2:	c1 ea 0c             	shr    edx,0xc
c00176e5:	39 c5                	cmp    ebp,eax
c00176e7:	89 d1                	mov    ecx,edx
c00176e9:	89 f8                	mov    eax,edi
c00176eb:	19 c8                	sbb    eax,ecx
c00176ed:	72 aa                	jb     c0017699 <Thr::loadDLL(char const*, bool)+0x1af>
c00176ef:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00176f4:	75 18                	jne    c001770e <Thr::loadDLL(char const*, bool)+0x224>
c00176f6:	31 db                	xor    ebx,ebx
c00176f8:	eb 14                	jmp    c001770e <Thr::loadDLL(char const*, bool)+0x224>
c00176fa:	83 ec 0c             	sub    esp,0xc
c00176fd:	68 b3 45 02 c0       	push   0xc00245b3
c0017702:	e8 f8 cb ff ff       	call   c00142ff <Krnl::panic(char const*)>
c0017707:	83 c4 10             	add    esp,0x10
c001770a:	31 ed                	xor    ebp,ebp
c001770c:	eb bb                	jmp    c00176c9 <Thr::loadDLL(char const*, bool)+0x1df>
c001770e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017714:	89 d8                	mov    eax,ebx
c0017716:	5b                   	pop    ebx
c0017717:	5e                   	pop    esi
c0017718:	5f                   	pop    edi
c0017719:	5d                   	pop    ebp
c001771a:	c3                   	ret    

c001771b <Thr::executeDLL(unsigned long, void*)>:
c001771b:	56                   	push   esi
c001771c:	53                   	push   ebx
c001771d:	52                   	push   edx
c001771e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017722:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017726:	85 db                	test   ebx,ebx
c0017728:	75 10                	jne    c001773a <Thr::executeDLL(unsigned long, void*)+0x1f>
c001772a:	83 ec 0c             	sub    esp,0xc
c001772d:	68 cf 45 02 c0       	push   0xc00245cf
c0017732:	e8 c8 cb ff ff       	call   c00142ff <Krnl::panic(char const*)>
c0017737:	83 c4 10             	add    esp,0x10
c001773a:	50                   	push   eax
c001773b:	50                   	push   eax
c001773c:	53                   	push   ebx
c001773d:	68 f9 45 02 c0       	push   0xc00245f9
c0017742:	e8 18 53 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0017747:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001774b:	89 d8                	mov    eax,ebx
c001774d:	83 c4 14             	add    esp,0x14
c0017750:	5b                   	pop    ebx
c0017751:	5e                   	pop    esi
c0017752:	ff e0                	jmp    eax

c0017754 <userModeEntryPoint(void*)>:
c0017754:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c0017759:	48                   	dec    eax
c001775a:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c001775f:	75 03                	jne    c0017764 <userModeEntryPoint(void*)+0x10>
c0017761:	fb                   	sti    
c0017762:	66 90                	xchg   ax,ax
c0017764:	fb                   	sti    
c0017765:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001776a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001776d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0017773:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017777:	e9 e3 8a fe ff       	jmp    c000025f <goToUsermode>

c001777c <changeTSS>:
c001777c:	83 ec 14             	sub    esp,0x14
c001777f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017784:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017787:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001778c:	c1 e2 15             	shl    edx,0x15
c001778f:	29 d0                	sub    eax,edx
c0017791:	50                   	push   eax
c0017792:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0017797:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001779d:	05 7c 11 00 00       	add    eax,0x117c
c00177a2:	50                   	push   eax
c00177a3:	e8 e4 38 ff ff       	call   c000b08c <TSS::setESP(unsigned long)>
c00177a8:	83 c4 1c             	add    esp,0x1c
c00177ab:	c3                   	ret    

c00177ac <switchToThread(ThreadControlBlock*)>:
c00177ac:	57                   	push   edi
c00177ad:	a1 24 76 02 c0       	mov    eax,ds:0xc0027624
c00177b2:	56                   	push   esi
c00177b3:	85 c0                	test   eax,eax
c00177b5:	53                   	push   ebx
c00177b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00177ba:	0f 85 90 00 00 00    	jne    c0017850 <switchToThread(ThreadControlBlock*)+0xa4>
c00177c0:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c00177c3:	3c ff                	cmp    al,0xff
c00177c5:	0f 84 81 00 00 00    	je     c001784c <switchToThread(ThreadControlBlock*)+0xa0>
c00177cb:	0f b6 d0             	movzx  edx,al
c00177ce:	b8 00 04 00 00       	mov    eax,0x400
c00177d3:	29 d0                	sub    eax,edx
c00177d5:	d1 f8                	sar    eax,1
c00177d7:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c00177da:	66 90                	xchg   ax,ax
c00177dc:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c00177df:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c00177e4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00177ea:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c00177f1:	74 4d                	je     c0017840 <switchToThread(ThreadControlBlock*)+0x94>
c00177f3:	0f 31                	rdtsc  
c00177f5:	a3 68 76 02 c0       	mov    ds:0xc0027668,eax
c00177fa:	89 c6                	mov    esi,eax
c00177fc:	89 d7                	mov    edi,edx
c00177fe:	2b 35 58 76 02 c0    	sub    esi,DWORD PTR ds:0xc0027658
c0017804:	89 15 6c 76 02 c0    	mov    DWORD PTR ds:0xc002766c,edx
c001780a:	1b 3d 5c 76 02 c0    	sbb    edi,DWORD PTR ds:0xc002765c
c0017810:	89 35 60 76 02 c0    	mov    DWORD PTR ds:0xc0027660,esi
c0017816:	a3 58 76 02 c0       	mov    ds:0xc0027658,eax
c001781b:	89 3d 64 76 02 c0    	mov    DWORD PTR ds:0xc0027664,edi
c0017821:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017827:	89 15 5c 76 02 c0    	mov    DWORD PTR ds:0xc002765c,edx
c001782d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017830:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0017833:	01 c6                	add    esi,eax
c0017835:	11 d7                	adc    edi,edx
c0017837:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001783a:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001783d:	8d 76 00             	lea    esi,[esi+0x0]
c0017840:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0017844:	5b                   	pop    ebx
c0017845:	5e                   	pop    esi
c0017846:	5f                   	pop    edi
c0017847:	e9 4b 8a fe ff       	jmp    c0000297 <switchToThreadASM>
c001784c:	31 c0                	xor    eax,eax
c001784e:	eb 8c                	jmp    c00177dc <switchToThread(ThreadControlBlock*)+0x30>
c0017850:	5b                   	pop    ebx
c0017851:	c7 05 20 76 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027620,0x1
c001785b:	5e                   	pop    esi
c001785c:	5f                   	pop    edi
c001785d:	c3                   	ret    
c001785e:	66 90                	xchg   ax,ax

c0017860 <Process::addArgs(char**)>:
c0017860:	57                   	push   edi
c0017861:	56                   	push   esi
c0017862:	53                   	push   ebx
c0017863:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017867:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001786b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0017875:	85 ff                	test   edi,edi
c0017877:	74 43                	je     c00178bc <Process::addArgs(char**)+0x5c>
c0017879:	8b 07                	mov    eax,DWORD PTR [edi]
c001787b:	85 c0                	test   eax,eax
c001787d:	74 3d                	je     c00178bc <Process::addArgs(char**)+0x5c>
c001787f:	31 db                	xor    ebx,ebx
c0017881:	8d 76 00             	lea    esi,[esi+0x0]
c0017884:	83 ec 0c             	sub    esp,0xc
c0017887:	50                   	push   eax
c0017888:	e8 13 8e fe ff       	call   c00006a0 <strlen>
c001788d:	40                   	inc    eax
c001788e:	89 04 24             	mov    DWORD PTR [esp],eax
c0017891:	e8 2d 21 ff ff       	call   c00099c3 <malloc>
c0017896:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c001789d:	5a                   	pop    edx
c001789e:	59                   	pop    ecx
c001789f:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c00178a2:	43                   	inc    ebx
c00178a3:	50                   	push   eax
c00178a4:	e8 97 8e fe ff       	call   c0000740 <strcpy>
c00178a9:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c00178af:	83 c4 10             	add    esp,0x10
c00178b2:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00178b5:	85 c0                	test   eax,eax
c00178b7:	75 cb                	jne    c0017884 <Process::addArgs(char**)+0x24>
c00178b9:	8d 76 00             	lea    esi,[esi+0x0]
c00178bc:	5b                   	pop    ebx
c00178bd:	5e                   	pop    esi
c00178be:	5f                   	pop    edi
c00178bf:	c3                   	ret    

c00178c0 <Process::Process(char const*, Process*, char**)>:
c00178c0:	56                   	push   esi
c00178c1:	53                   	push   ebx
c00178c2:	83 ec 14             	sub    esp,0x14
c00178c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178c9:	05 0c 02 00 00       	add    eax,0x20c
c00178ce:	bb 07 00 00 00       	mov    ebx,0x7
c00178d3:	89 c6                	mov    esi,eax
c00178d5:	8d 76 00             	lea    esi,[esi+0x0]
c00178d8:	85 db                	test   ebx,ebx
c00178da:	78 14                	js     c00178f0 <Process::Process(char const*, Process*, char**)+0x30>
c00178dc:	83 ec 0c             	sub    esp,0xc
c00178df:	56                   	push   esi
c00178e0:	e8 cb 9e 00 00       	call   c00217b0 <ThreadControlBlock::ThreadControlBlock()>
c00178e5:	83 c4 10             	add    esp,0x10
c00178e8:	83 c6 5f             	add    esi,0x5f
c00178eb:	4b                   	dec    ebx
c00178ec:	eb ea                	jmp    c00178d8 <Process::Process(char const*, Process*, char**)+0x18>
c00178ee:	66 90                	xchg   ax,ax
c00178f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178f4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00178fb:	83 ec 0c             	sub    esp,0xc
c00178fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017902:	e8 81 c8 ff ff       	call   c0014188 <Krnl::newProcessEnv(Process*)>
c0017907:	83 c4 10             	add    esp,0x10
c001790a:	89 c2                	mov    edx,eax
c001790c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017910:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0017916:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001791a:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0017923:	a1 90 5b 02 c0       	mov    eax,ds:0xc0025b90
c0017928:	8d 50 01             	lea    edx,[eax+0x1]
c001792b:	89 15 90 5b 02 c0    	mov    DWORD PTR ds:0xc0025b90,edx
c0017931:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017935:	89 02                	mov    DWORD PTR [edx],eax
c0017937:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001793f:	83 ec 0c             	sub    esp,0xc
c0017942:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017946:	e8 78 20 ff ff       	call   c00099c3 <malloc>
c001794b:	83 c4 10             	add    esp,0x10
c001794e:	89 c3                	mov    ebx,eax
c0017950:	83 ec 08             	sub    esp,0x8
c0017953:	6a 00                	push   0x0
c0017955:	53                   	push   ebx
c0017956:	e8 2f 49 ff ff       	call   c000c28a <VAS::VAS(bool)>
c001795b:	83 c4 10             	add    esp,0x10
c001795e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017962:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0017968:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001796c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0017976:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001797a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001797e:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0017984:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017988:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001798e:	85 c0                	test   eax,eax
c0017990:	74 42                	je     c00179d4 <Process::Process(char const*, Process*, char**)+0x114>
c0017992:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017996:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001799c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00179a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179a6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00179ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179b0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00179b6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00179bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179c0:	05 0c 01 00 00       	add    eax,0x10c
c00179c5:	83 ec 08             	sub    esp,0x8
c00179c8:	52                   	push   edx
c00179c9:	50                   	push   eax
c00179ca:	e8 71 8d fe ff       	call   c0000740 <strcpy>
c00179cf:	83 c4 10             	add    esp,0x10
c00179d2:	eb 64                	jmp    c0017a38 <Process::Process(char const*, Process*, char**)+0x178>
c00179d4:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c00179dc:	83 ec 0c             	sub    esp,0xc
c00179df:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00179e3:	e8 db 1f ff ff       	call   c00099c3 <malloc>
c00179e8:	83 c4 10             	add    esp,0x10
c00179eb:	89 c3                	mov    ebx,eax
c00179ed:	83 ec 08             	sub    esp,0x8
c00179f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179f4:	53                   	push   ebx
c00179f5:	e8 a2 33 ff ff       	call   c000ad9c <VgaText::VgaText(char const*)>
c00179fa:	83 c4 10             	add    esp,0x10
c00179fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a01:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0017a07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a0b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a11:	83 ec 0c             	sub    esp,0xc
c0017a14:	50                   	push   eax
c0017a15:	e8 41 2b ff ff       	call   c000a55b <addToTerminalCycle(VgaText*)>
c0017a1a:	83 c4 10             	add    esp,0x10
c0017a1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a21:	05 0c 01 00 00       	add    eax,0x10c
c0017a26:	83 ec 08             	sub    esp,0x8
c0017a29:	68 18 46 02 c0       	push   0xc0024618
c0017a2e:	50                   	push   eax
c0017a2f:	e8 0c 8d fe ff       	call   c0000740 <strcpy>
c0017a34:	83 c4 10             	add    esp,0x10
c0017a37:	90                   	nop
c0017a38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a3c:	83 c0 0c             	add    eax,0xc
c0017a3f:	83 ec 08             	sub    esp,0x8
c0017a42:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a46:	50                   	push   eax
c0017a47:	e8 f4 8c fe ff       	call   c0000740 <strcpy>
c0017a4c:	83 c4 10             	add    esp,0x10
c0017a4f:	83 ec 08             	sub    esp,0x8
c0017a52:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017a56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a5a:	e8 01 fe ff ff       	call   c0017860 <Process::addArgs(char**)>
c0017a5f:	83 c4 10             	add    esp,0x10
c0017a62:	83 ec 08             	sub    esp,0x8
c0017a65:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a6d:	e8 89 ed ff ff       	call   c00167fb <Thr::loadProgramIntoMemory(Process*, char const*)>
c0017a72:	83 c4 10             	add    esp,0x10
c0017a75:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017a79:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017a7d:	83 f0 01             	xor    eax,0x1
c0017a80:	88 c2                	mov    dl,al
c0017a82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a86:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0017a8c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017a91:	83 ec 08             	sub    esp,0x8
c0017a94:	50                   	push   eax
c0017a95:	68 70 46 02 c0       	push   0xc0024670
c0017a9a:	e8 c0 4f ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0017a9f:	83 c4 10             	add    esp,0x10
c0017aa2:	90                   	nop
c0017aa3:	83 c4 14             	add    esp,0x14
c0017aa6:	5b                   	pop    ebx
c0017aa7:	5e                   	pop    esi
c0017aa8:	c3                   	ret    
c0017aa9:	90                   	nop
c0017aaa:	66 90                	xchg   ax,ax

c0017aac <Process::Process(bool, char const*, Process*, char**)>:
c0017aac:	56                   	push   esi
c0017aad:	53                   	push   ebx
c0017aae:	83 ec 24             	sub    esp,0x24
c0017ab1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ab5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017ab9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017abd:	05 0c 02 00 00       	add    eax,0x20c
c0017ac2:	bb 07 00 00 00       	mov    ebx,0x7
c0017ac7:	89 c6                	mov    esi,eax
c0017ac9:	8d 76 00             	lea    esi,[esi+0x0]
c0017acc:	85 db                	test   ebx,ebx
c0017ace:	78 14                	js     c0017ae4 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0017ad0:	83 ec 0c             	sub    esp,0xc
c0017ad3:	56                   	push   esi
c0017ad4:	e8 d7 9c 00 00       	call   c00217b0 <ThreadControlBlock::ThreadControlBlock()>
c0017ad9:	83 c4 10             	add    esp,0x10
c0017adc:	83 c6 5f             	add    esi,0x5f
c0017adf:	4b                   	dec    ebx
c0017ae0:	eb ea                	jmp    c0017acc <Process::Process(bool, char const*, Process*, char**)+0x20>
c0017ae2:	66 90                	xchg   ax,ax
c0017ae4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ae8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0017aef:	83 ec 0c             	sub    esp,0xc
c0017af2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017af6:	e8 8d c6 ff ff       	call   c0014188 <Krnl::newProcessEnv(Process*)>
c0017afb:	83 c4 10             	add    esp,0x10
c0017afe:	89 c2                	mov    edx,eax
c0017b00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b04:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0017b0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b0e:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0017b17:	a1 90 5b 02 c0       	mov    eax,ds:0xc0025b90
c0017b1c:	8d 50 01             	lea    edx,[eax+0x1]
c0017b1f:	89 15 90 5b 02 c0    	mov    DWORD PTR ds:0xc0025b90,edx
c0017b25:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017b29:	89 02                	mov    DWORD PTR [edx],eax
c0017b2b:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0017b33:	83 ec 0c             	sub    esp,0xc
c0017b36:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017b3a:	e8 84 1e ff ff       	call   c00099c3 <malloc>
c0017b3f:	83 c4 10             	add    esp,0x10
c0017b42:	89 c3                	mov    ebx,eax
c0017b44:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017b49:	83 ec 08             	sub    esp,0x8
c0017b4c:	50                   	push   eax
c0017b4d:	53                   	push   ebx
c0017b4e:	e8 37 47 ff ff       	call   c000c28a <VAS::VAS(bool)>
c0017b53:	83 c4 10             	add    esp,0x10
c0017b56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b5a:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0017b60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b64:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0017b6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b72:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017b76:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0017b7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b80:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017b86:	85 c0                	test   eax,eax
c0017b88:	74 42                	je     c0017bcc <Process::Process(bool, char const*, Process*, char**)+0x120>
c0017b8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b8e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017b94:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0017b9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b9e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0017ba4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ba8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017bae:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017bb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bb8:	05 0c 01 00 00       	add    eax,0x10c
c0017bbd:	83 ec 08             	sub    esp,0x8
c0017bc0:	52                   	push   edx
c0017bc1:	50                   	push   eax
c0017bc2:	e8 79 8b fe ff       	call   c0000740 <strcpy>
c0017bc7:	83 c4 10             	add    esp,0x10
c0017bca:	eb 64                	jmp    c0017c30 <Process::Process(bool, char const*, Process*, char**)+0x184>
c0017bcc:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c0017bd4:	83 ec 0c             	sub    esp,0xc
c0017bd7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017bdb:	e8 e3 1d ff ff       	call   c00099c3 <malloc>
c0017be0:	83 c4 10             	add    esp,0x10
c0017be3:	89 c3                	mov    ebx,eax
c0017be5:	83 ec 08             	sub    esp,0x8
c0017be8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017bec:	53                   	push   ebx
c0017bed:	e8 aa 31 ff ff       	call   c000ad9c <VgaText::VgaText(char const*)>
c0017bf2:	83 c4 10             	add    esp,0x10
c0017bf5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bf9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0017bff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c03:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c09:	83 ec 0c             	sub    esp,0xc
c0017c0c:	50                   	push   eax
c0017c0d:	e8 49 29 ff ff       	call   c000a55b <addToTerminalCycle(VgaText*)>
c0017c12:	83 c4 10             	add    esp,0x10
c0017c15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c19:	05 0c 01 00 00       	add    eax,0x10c
c0017c1e:	83 ec 08             	sub    esp,0x8
c0017c21:	68 18 46 02 c0       	push   0xc0024618
c0017c26:	50                   	push   eax
c0017c27:	e8 14 8b fe ff       	call   c0000740 <strcpy>
c0017c2c:	83 c4 10             	add    esp,0x10
c0017c2f:	90                   	nop
c0017c30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c34:	83 c0 0c             	add    eax,0xc
c0017c37:	83 ec 08             	sub    esp,0x8
c0017c3a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017c3e:	50                   	push   eax
c0017c3f:	e8 fc 8a fe ff       	call   c0000740 <strcpy>
c0017c44:	83 c4 10             	add    esp,0x10
c0017c47:	83 ec 08             	sub    esp,0x8
c0017c4a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017c4e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017c52:	e8 09 fc ff ff       	call   c0017860 <Process::addArgs(char**)>
c0017c57:	83 c4 10             	add    esp,0x10
c0017c5a:	90                   	nop
c0017c5b:	83 c4 24             	add    esp,0x24
c0017c5e:	5b                   	pop    ebx
c0017c5f:	5e                   	pop    esi
c0017c60:	c3                   	ret    
c0017c61:	8d 76 00             	lea    esi,[esi+0x0]

c0017c64 <taskStartupFunction>:
c0017c64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c69:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0017c6c:	c3                   	ret    
c0017c6d:	90                   	nop
c0017c6e:	66 90                	xchg   ax,ax

c0017c70 <Semaphore::Semaphore(int)>:
c0017c70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c74:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017c78:	89 10                	mov    DWORD PTR [eax],edx
c0017c7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c7e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017c85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c89:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017c90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c94:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0017c9b:	90                   	nop
c0017c9c:	c3                   	ret    
c0017c9d:	90                   	nop
c0017c9e:	66 90                	xchg   ax,ax

c0017ca0 <Mutex::Mutex()>:
c0017ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ca4:	6a 01                	push   0x1
c0017ca6:	50                   	push   eax
c0017ca7:	e8 c4 ff ff ff       	call   c0017c70 <Semaphore::Semaphore(int)>
c0017cac:	83 c4 08             	add    esp,0x8
c0017caf:	90                   	nop
c0017cb0:	c3                   	ret    
c0017cb1:	90                   	nop
c0017cb2:	66 90                	xchg   ax,ax

c0017cb4 <Process::createThread(void (*)(void*), void*, int)>:
c0017cb4:	57                   	push   edi
c0017cb5:	31 c9                	xor    ecx,ecx
c0017cb7:	56                   	push   esi
c0017cb8:	53                   	push   ebx
c0017cb9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017cbd:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0017cc4:	89 f2                	mov    edx,esi
c0017cc6:	66 90                	xchg   ax,ax
c0017cc8:	0f b7 c2             	movzx  eax,dx
c0017ccb:	83 e2 01             	and    edx,0x1
c0017cce:	74 14                	je     c0017ce4 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0017cd0:	d1 f8                	sar    eax,1
c0017cd2:	41                   	inc    ecx
c0017cd3:	89 c2                	mov    edx,eax
c0017cd5:	83 f9 10             	cmp    ecx,0x10
c0017cd8:	75 ee                	jne    c0017cc8 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0017cda:	31 db                	xor    ebx,ebx
c0017cdc:	89 d8                	mov    eax,ebx
c0017cde:	5b                   	pop    ebx
c0017cdf:	5e                   	pop    esi
c0017ce0:	5f                   	pop    edi
c0017ce1:	c3                   	ret    
c0017ce2:	66 90                	xchg   ax,ax
c0017ce4:	b8 01 00 00 00       	mov    eax,0x1
c0017ce9:	d3 e0                	shl    eax,cl
c0017ceb:	09 c6                	or     esi,eax
c0017ced:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0017cf0:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0017cf7:	01 c0                	add    eax,eax
c0017cf9:	01 c8                	add    eax,ecx
c0017cfb:	8d 04 80             	lea    eax,[eax+eax*4]
c0017cfe:	01 d8                	add    eax,ebx
c0017d00:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0017d07:	75 0b                	jne    c0017d14 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0017d09:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0017d13:	90                   	nop
c0017d14:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0017d1a:	83 ec 08             	sub    esp,0x8
c0017d1d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0017d20:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0017d23:	01 c0                	add    eax,eax
c0017d25:	01 c8                	add    eax,ecx
c0017d27:	8d 3c 80             	lea    edi,[eax+eax*4]
c0017d2a:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0017d2d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0017d33:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0017d39:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017d3d:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0017d43:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0017d49:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0017d50:	89 ca                	mov    edx,ecx
c0017d52:	f7 da                	neg    edx
c0017d54:	c1 e2 15             	shl    edx,0x15
c0017d57:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0017d5d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0017d63:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017d67:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0017d71:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0017d77:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017d7b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0017d81:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0017d8b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0017d95:	53                   	push   ebx
c0017d96:	68 44 76 02 c0       	push   0xc0027644
c0017d9b:	e8 b0 97 00 00       	call   c0021550 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017da0:	83 c4 10             	add    esp,0x10
c0017da3:	89 d8                	mov    eax,ebx
c0017da5:	5b                   	pop    ebx
c0017da6:	5e                   	pop    esi
c0017da7:	5f                   	pop    edi
c0017da8:	c3                   	ret    
c0017da9:	90                   	nop
c0017daa:	66 90                	xchg   ax,ax

c0017dac <Process::createUserThread()>:
c0017dac:	83 ec 0c             	sub    esp,0xc
c0017daf:	68 80 00 00 00       	push   0x80
c0017db4:	6a 00                	push   0x0
c0017db6:	68 54 77 01 c0       	push   0xc0017754
c0017dbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017dbf:	e8 f0 fe ff ff       	call   c0017cb4 <Process::createThread(void (*)(void*), void*, int)>
c0017dc4:	83 c4 1c             	add    esp,0x1c
c0017dc7:	c3                   	ret    

c0017dc8 <setupMultitasking(void (*)())>:
c0017dc8:	56                   	push   esi
c0017dc9:	53                   	push   ebx
c0017dca:	51                   	push   ecx
c0017dcb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017dcf:	eb 13                	jmp    c0017de4 <setupMultitasking(void (*)())+0x1c>
c0017dd1:	8d 76 00             	lea    esi,[esi+0x0]
c0017dd4:	83 ec 0c             	sub    esp,0xc
c0017dd7:	68 44 76 02 c0       	push   0xc0027644
c0017ddc:	e8 b7 96 00 00       	call   c0021498 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017de1:	83 c4 10             	add    esp,0x10
c0017de4:	83 ec 0c             	sub    esp,0xc
c0017de7:	68 44 76 02 c0       	push   0xc0027644
c0017dec:	e8 83 96 00 00       	call   c0021474 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017df1:	83 c4 10             	add    esp,0x10
c0017df4:	84 c0                	test   al,al
c0017df6:	74 dc                	je     c0017dd4 <setupMultitasking(void (*)())+0xc>
c0017df8:	83 ec 0c             	sub    esp,0xc
c0017dfb:	68 1f 07 00 00       	push   0x71f
c0017e00:	e8 be 1b ff ff       	call   c00099c3 <malloc>
c0017e05:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017e0c:	89 c3                	mov    ebx,eax
c0017e0e:	6a 00                	push   0x0
c0017e10:	68 1c 46 02 c0       	push   0xc002461c
c0017e15:	6a 01                	push   0x1
c0017e17:	50                   	push   eax
c0017e18:	e8 8f fc ff ff       	call   c0017aac <Process::Process(bool, char const*, Process*, char**)>
c0017e1d:	83 c4 14             	add    esp,0x14
c0017e20:	89 1d 50 76 02 c0    	mov    DWORD PTR ds:0xc0027650,ebx
c0017e26:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0017e2c:	e8 38 2a ff ff       	call   c000a869 <setActiveTerminal(VgaText*)>
c0017e31:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0017e39:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0017e43:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0017e49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017e4c:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0017e56:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017e5c:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0017e62:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0017e6c:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0017e76:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0017e80:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0017e86:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0017e90:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0017e96:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0017ea0:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0017ea6:	58                   	pop    eax
c0017ea7:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0017ead:	5a                   	pop    edx
c0017eae:	68 18 46 02 c0       	push   0xc0024618
c0017eb3:	50                   	push   eax
c0017eb4:	e8 87 88 fe ff       	call   c0000740 <strcpy>
c0017eb9:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0017ec0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017ec4:	83 c4 14             	add    esp,0x14
c0017ec7:	5b                   	pop    ebx
c0017ec8:	5e                   	pop    esi
c0017ec9:	e9 bb 83 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0017ece:	66 90                	xchg   ax,ax

c0017ed0 <schedule()>:
c0017ed0:	a1 24 76 02 c0       	mov    eax,ds:0xc0027624
c0017ed5:	85 c0                	test   eax,eax
c0017ed7:	74 0b                	je     c0017ee4 <schedule()+0x14>
c0017ed9:	c7 05 20 76 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027620,0x1
c0017ee3:	c3                   	ret    
c0017ee4:	53                   	push   ebx
c0017ee5:	83 ec 14             	sub    esp,0x14
c0017ee8:	68 44 76 02 c0       	push   0xc0027644
c0017eed:	e8 82 95 00 00       	call   c0021474 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017ef2:	83 c4 10             	add    esp,0x10
c0017ef5:	84 c0                	test   al,al
c0017ef7:	75 3b                	jne    c0017f34 <schedule()+0x64>
c0017ef9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017efe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017f01:	4a                   	dec    edx
c0017f02:	74 38                	je     c0017f3c <schedule()+0x6c>
c0017f04:	83 ec 0c             	sub    esp,0xc
c0017f07:	68 44 76 02 c0       	push   0xc0027644
c0017f0c:	e8 7f 95 00 00       	call   c0021490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017f11:	c7 04 24 44 76 02 c0 	mov    DWORD PTR [esp],0xc0027644
c0017f18:	89 c3                	mov    ebx,eax
c0017f1a:	e8 79 95 00 00       	call   c0021498 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017f1f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0017f26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017f29:	e8 7e f8 ff ff       	call   c00177ac <switchToThread(ThreadControlBlock*)>
c0017f2e:	83 c4 10             	add    esp,0x10
c0017f31:	8d 76 00             	lea    esi,[esi+0x0]
c0017f34:	83 c4 08             	add    esp,0x8
c0017f37:	5b                   	pop    ebx
c0017f38:	c3                   	ret    
c0017f39:	8d 76 00             	lea    esi,[esi+0x0]
c0017f3c:	83 ec 08             	sub    esp,0x8
c0017f3f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017f46:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0017f4c:	68 44 76 02 c0       	push   0xc0027644
c0017f51:	e8 fa 95 00 00       	call   c0021550 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017f56:	83 c4 10             	add    esp,0x10
c0017f59:	eb a9                	jmp    c0017f04 <schedule()+0x34>
c0017f5b:	90                   	nop

c0017f5c <Semaphore::tryAcquire()>:
c0017f5c:	53                   	push   ebx
c0017f5d:	83 ec 08             	sub    esp,0x8
c0017f60:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017f64:	fa                   	cli    
c0017f65:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c0017f6a:	8d 50 01             	lea    edx,[eax+0x1]
c0017f6d:	89 15 28 76 02 c0    	mov    DWORD PTR ds:0xc0027628,edx
c0017f73:	8b 15 24 76 02 c0    	mov    edx,DWORD PTR ds:0xc0027624
c0017f79:	8d 5a 01             	lea    ebx,[edx+0x1]
c0017f7c:	89 1d 24 76 02 c0    	mov    DWORD PTR ds:0xc0027624,ebx
c0017f82:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0017f85:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0017f87:	7c 33                	jl     c0017fbc <Semaphore::tryAcquire()+0x60>
c0017f89:	89 15 24 76 02 c0    	mov    DWORD PTR ds:0xc0027624,edx
c0017f8f:	85 d2                	test   edx,edx
c0017f91:	75 0d                	jne    c0017fa0 <Semaphore::tryAcquire()+0x44>
c0017f93:	8b 15 20 76 02 c0    	mov    edx,DWORD PTR ds:0xc0027620
c0017f99:	85 d2                	test   edx,edx
c0017f9b:	75 6b                	jne    c0018008 <Semaphore::tryAcquire()+0xac>
c0017f9d:	8d 76 00             	lea    esi,[esi+0x0]
c0017fa0:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c0017fa5:	85 c0                	test   eax,eax
c0017fa7:	74 0b                	je     c0017fb4 <Semaphore::tryAcquire()+0x58>
c0017fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0017fac:	31 c0                	xor    eax,eax
c0017fae:	83 c4 08             	add    esp,0x8
c0017fb1:	5b                   	pop    ebx
c0017fb2:	c3                   	ret    
c0017fb3:	90                   	nop
c0017fb4:	fb                   	sti    
c0017fb5:	83 c4 08             	add    esp,0x8
c0017fb8:	5b                   	pop    ebx
c0017fb9:	c3                   	ret    
c0017fba:	66 90                	xchg   ax,ax
c0017fbc:	43                   	inc    ebx
c0017fbd:	89 15 24 76 02 c0    	mov    DWORD PTR ds:0xc0027624,edx
c0017fc3:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0017fc6:	85 d2                	test   edx,edx
c0017fc8:	75 22                	jne    c0017fec <Semaphore::tryAcquire()+0x90>
c0017fca:	8b 0d 20 76 02 c0    	mov    ecx,DWORD PTR ds:0xc0027620
c0017fd0:	85 c9                	test   ecx,ecx
c0017fd2:	74 18                	je     c0017fec <Semaphore::tryAcquire()+0x90>
c0017fd4:	c7 05 20 76 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027620,0x0
c0017fde:	e8 ed fe ff ff       	call   c0017ed0 <schedule()>
c0017fe3:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c0017fe8:	48                   	dec    eax
c0017fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0017fec:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c0017ff1:	85 c0                	test   eax,eax
c0017ff3:	75 0b                	jne    c0018000 <Semaphore::tryAcquire()+0xa4>
c0017ff5:	fb                   	sti    
c0017ff6:	b0 01                	mov    al,0x1
c0017ff8:	83 c4 08             	add    esp,0x8
c0017ffb:	5b                   	pop    ebx
c0017ffc:	c3                   	ret    
c0017ffd:	8d 76 00             	lea    esi,[esi+0x0]
c0018000:	b0 01                	mov    al,0x1
c0018002:	83 c4 08             	add    esp,0x8
c0018005:	5b                   	pop    ebx
c0018006:	c3                   	ret    
c0018007:	90                   	nop
c0018008:	c7 05 20 76 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027620,0x0
c0018012:	e8 b9 fe ff ff       	call   c0017ed0 <schedule()>
c0018017:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c001801c:	48                   	dec    eax
c001801d:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c0018022:	85 c0                	test   eax,eax
c0018024:	75 86                	jne    c0017fac <Semaphore::tryAcquire()+0x50>
c0018026:	eb 8c                	jmp    c0017fb4 <Semaphore::tryAcquire()+0x58>

c0018028 <Semaphore::assertLocked(char const*)>:
c0018028:	83 ec 0c             	sub    esp,0xc
c001802b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001802f:	fa                   	cli    
c0018030:	ff 05 28 76 02 c0    	inc    DWORD PTR ds:0xc0027628
c0018036:	a1 24 76 02 c0       	mov    eax,ds:0xc0027624
c001803b:	8d 48 01             	lea    ecx,[eax+0x1]
c001803e:	89 0d 24 76 02 c0    	mov    DWORD PTR ds:0xc0027624,ecx
c0018044:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018046:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0018049:	7c 29                	jl     c0018074 <Semaphore::assertLocked(char const*)+0x4c>
c001804b:	90                   	nop
c001804c:	a3 24 76 02 c0       	mov    ds:0xc0027624,eax
c0018051:	85 c0                	test   eax,eax
c0018053:	75 0b                	jne    c0018060 <Semaphore::assertLocked(char const*)+0x38>
c0018055:	a1 20 76 02 c0       	mov    eax,ds:0xc0027620
c001805a:	85 c0                	test   eax,eax
c001805c:	75 2e                	jne    c001808c <Semaphore::assertLocked(char const*)+0x64>
c001805e:	66 90                	xchg   ax,ax
c0018060:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c0018065:	48                   	dec    eax
c0018066:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c001806b:	75 03                	jne    c0018070 <Semaphore::assertLocked(char const*)+0x48>
c001806d:	fb                   	sti    
c001806e:	66 90                	xchg   ax,ax
c0018070:	83 c4 0c             	add    esp,0xc
c0018073:	c3                   	ret    
c0018074:	83 ec 0c             	sub    esp,0xc
c0018077:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001807b:	e8 7f c2 ff ff       	call   c00142ff <Krnl::panic(char const*)>
c0018080:	a1 24 76 02 c0       	mov    eax,ds:0xc0027624
c0018085:	83 c4 10             	add    esp,0x10
c0018088:	48                   	dec    eax
c0018089:	eb c1                	jmp    c001804c <Semaphore::assertLocked(char const*)+0x24>
c001808b:	90                   	nop
c001808c:	c7 05 20 76 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027620,0x0
c0018096:	e8 35 fe ff ff       	call   c0017ed0 <schedule()>
c001809b:	eb c3                	jmp    c0018060 <Semaphore::assertLocked(char const*)+0x38>
c001809d:	8d 76 00             	lea    esi,[esi+0x0]

c00180a0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00180a0:	83 ec 0c             	sub    esp,0xc
c00180a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00180ac:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00180af:	e8 1c fe ff ff       	call   c0017ed0 <schedule()>
c00180b4:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c00180b9:	48                   	dec    eax
c00180ba:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c00180bf:	75 03                	jne    c00180c4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00180c1:	fb                   	sti    
c00180c2:	66 90                	xchg   ax,ax
c00180c4:	83 c4 0c             	add    esp,0xc
c00180c7:	c3                   	ret    

c00180c8 <blockTask(TaskState)>:
c00180c8:	83 ec 0c             	sub    esp,0xc
c00180cb:	fa                   	cli    
c00180cc:	ff 05 28 76 02 c0    	inc    DWORD PTR ds:0xc0027628
c00180d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00180d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00180db:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00180de:	e8 ed fd ff ff       	call   c0017ed0 <schedule()>
c00180e3:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c00180e8:	48                   	dec    eax
c00180e9:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c00180ee:	75 04                	jne    c00180f4 <blockTask(TaskState)+0x2c>
c00180f0:	fb                   	sti    
c00180f1:	8d 76 00             	lea    esi,[esi+0x0]
c00180f4:	83 c4 0c             	add    esp,0xc
c00180f7:	c3                   	ret    

c00180f8 <waitTask(int, int*, int)>:
c00180f8:	83 ec 18             	sub    esp,0x18
c00180fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018100:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018104:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0018107:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001810b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018110:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018113:	6a 07                	push   0x7
c0018115:	e8 ae ff ff ff       	call   c00180c8 <blockTask(TaskState)>
c001811a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001811f:	83 c4 10             	add    esp,0x10
c0018122:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0018125:	85 d2                	test   edx,edx
c0018127:	74 0b                	je     c0018134 <waitTask(int, int*, int)+0x3c>
c0018129:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c001812c:	89 02                	mov    DWORD PTR [edx],eax
c001812e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018133:	90                   	nop
c0018134:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0018137:	83 c4 0c             	add    esp,0xc
c001813a:	c3                   	ret    
c001813b:	90                   	nop

c001813c <milliTenthSleepUntil(unsigned int)>:
c001813c:	83 ec 0c             	sub    esp,0xc
c001813f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018143:	39 05 8c 67 02 c0    	cmp    DWORD PTR ds:0xc002678c,eax
c0018149:	76 05                	jbe    c0018150 <milliTenthSleepUntil(unsigned int)+0x14>
c001814b:	90                   	nop
c001814c:	83 c4 0c             	add    esp,0xc
c001814f:	c3                   	ret    
c0018150:	fa                   	cli    
c0018151:	ff 05 28 76 02 c0    	inc    DWORD PTR ds:0xc0027628
c0018157:	83 ec 08             	sub    esp,0x8
c001815a:	ff 05 24 76 02 c0    	inc    DWORD PTR ds:0xc0027624
c0018160:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018166:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0018169:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001816f:	68 38 76 02 c0       	push   0xc0027638
c0018174:	e8 d7 93 00 00       	call   c0021550 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018179:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018180:	e8 43 ff ff ff       	call   c00180c8 <blockTask(TaskState)>
c0018185:	a1 24 76 02 c0       	mov    eax,ds:0xc0027624
c001818a:	83 c4 10             	add    esp,0x10
c001818d:	48                   	dec    eax
c001818e:	a3 24 76 02 c0       	mov    ds:0xc0027624,eax
c0018193:	85 c0                	test   eax,eax
c0018195:	75 09                	jne    c00181a0 <milliTenthSleepUntil(unsigned int)+0x64>
c0018197:	a1 20 76 02 c0       	mov    eax,ds:0xc0027620
c001819c:	85 c0                	test   eax,eax
c001819e:	75 14                	jne    c00181b4 <milliTenthSleepUntil(unsigned int)+0x78>
c00181a0:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c00181a5:	48                   	dec    eax
c00181a6:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c00181ab:	75 9f                	jne    c001814c <milliTenthSleepUntil(unsigned int)+0x10>
c00181ad:	fb                   	sti    
c00181ae:	83 c4 0c             	add    esp,0xc
c00181b1:	c3                   	ret    
c00181b2:	66 90                	xchg   ax,ax
c00181b4:	c7 05 20 76 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027620,0x0
c00181be:	e8 0d fd ff ff       	call   c0017ed0 <schedule()>
c00181c3:	eb db                	jmp    c00181a0 <milliTenthSleepUntil(unsigned int)+0x64>
c00181c5:	8d 76 00             	lea    esi,[esi+0x0]

c00181c8 <milliTenthSleep(unsigned int)>:
c00181c8:	a1 8c 67 02 c0       	mov    eax,ds:0xc002678c
c00181cd:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00181d1:	e9 66 ff ff ff       	jmp    c001813c <milliTenthSleepUntil(unsigned int)>
c00181d6:	66 90                	xchg   ax,ax

c00181d8 <sleep(unsigned int)>:
c00181d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181dc:	8d 04 80             	lea    eax,[eax+eax*4]
c00181df:	8d 04 80             	lea    eax,[eax+eax*4]
c00181e2:	8d 04 80             	lea    eax,[eax+eax*4]
c00181e5:	8d 04 80             	lea    eax,[eax+eax*4]
c00181e8:	c1 e0 04             	shl    eax,0x4
c00181eb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00181ef:	eb d7                	jmp    c00181c8 <milliTenthSleep(unsigned int)>
c00181f1:	90                   	nop
c00181f2:	66 90                	xchg   ax,ax

c00181f4 <Semaphore::acquire()>:
c00181f4:	83 ec 0c             	sub    esp,0xc
c00181f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00181fb:	fa                   	cli    
c00181fc:	a1 24 76 02 c0       	mov    eax,ds:0xc0027624
c0018201:	ff 05 28 76 02 c0    	inc    DWORD PTR ds:0xc0027628
c0018207:	8d 48 01             	lea    ecx,[eax+0x1]
c001820a:	89 0d 24 76 02 c0    	mov    DWORD PTR ds:0xc0027624,ecx
c0018210:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0018213:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0018215:	7d 2d                	jge    c0018244 <Semaphore::acquire()+0x50>
c0018217:	41                   	inc    ecx
c0018218:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001821b:	90                   	nop
c001821c:	a3 24 76 02 c0       	mov    ds:0xc0027624,eax
c0018221:	85 c0                	test   eax,eax
c0018223:	75 0b                	jne    c0018230 <Semaphore::acquire()+0x3c>
c0018225:	a1 20 76 02 c0       	mov    eax,ds:0xc0027620
c001822a:	85 c0                	test   eax,eax
c001822c:	75 62                	jne    c0018290 <Semaphore::acquire()+0x9c>
c001822e:	66 90                	xchg   ax,ax
c0018230:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c0018235:	48                   	dec    eax
c0018236:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c001823b:	75 03                	jne    c0018240 <Semaphore::acquire()+0x4c>
c001823d:	fb                   	sti    
c001823e:	66 90                	xchg   ax,ax
c0018240:	83 c4 0c             	add    esp,0xc
c0018243:	c3                   	ret    
c0018244:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018249:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0018250:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0018253:	85 c9                	test   ecx,ecx
c0018255:	74 4d                	je     c00182a4 <Semaphore::acquire()+0xb0>
c0018257:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001825a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018260:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0018263:	90                   	nop
c0018264:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018269:	83 ec 0c             	sub    esp,0xc
c001826c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001826f:	68 98 46 02 c0       	push   0xc0024698
c0018274:	e8 e6 47 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0018279:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0018280:	e8 43 fe ff ff       	call   c00180c8 <blockTask(TaskState)>
c0018285:	a1 24 76 02 c0       	mov    eax,ds:0xc0027624
c001828a:	83 c4 10             	add    esp,0x10
c001828d:	48                   	dec    eax
c001828e:	eb 8c                	jmp    c001821c <Semaphore::acquire()+0x28>
c0018290:	c7 05 20 76 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027620,0x0
c001829a:	e8 31 fc ff ff       	call   c0017ed0 <schedule()>
c001829f:	eb 8f                	jmp    c0018230 <Semaphore::acquire()+0x3c>
c00182a1:	8d 76 00             	lea    esi,[esi+0x0]
c00182a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00182a9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00182ac:	eb b6                	jmp    c0018264 <Semaphore::acquire()+0x70>
c00182ae:	66 90                	xchg   ax,ax

c00182b0 <taskReturned>:
c00182b0:	83 ec 18             	sub    esp,0x18
c00182b3:	68 b8 46 02 c0       	push   0xc00246b8
c00182b8:	e8 42 c0 ff ff       	call   c00142ff <Krnl::panic(char const*)>
c00182bd:	83 c4 10             	add    esp,0x10
c00182c0:	83 ec 0c             	sub    esp,0xc
c00182c3:	6a 02                	push   0x2
c00182c5:	e8 fe fd ff ff       	call   c00180c8 <blockTask(TaskState)>
c00182ca:	fa                   	cli    
c00182cb:	ff 05 28 76 02 c0    	inc    DWORD PTR ds:0xc0027628
c00182d1:	e8 fa fb ff ff       	call   c0017ed0 <schedule()>
c00182d6:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c00182db:	83 c4 10             	add    esp,0x10
c00182de:	48                   	dec    eax
c00182df:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c00182e4:	85 c0                	test   eax,eax
c00182e6:	75 d8                	jne    c00182c0 <taskReturned+0x10>
c00182e8:	fb                   	sti    
c00182e9:	eb d5                	jmp    c00182c0 <taskReturned+0x10>
c00182eb:	90                   	nop

c00182ec <Thr::processFromPID(int)>:
c00182ec:	57                   	push   edi
c00182ed:	56                   	push   esi
c00182ee:	53                   	push   ebx
c00182ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00182f3:	fa                   	cli    
c00182f4:	ff 05 28 76 02 c0    	inc    DWORD PTR ds:0xc0027628
c00182fa:	83 ec 0c             	sub    esp,0xc
c00182fd:	68 44 76 02 c0       	push   0xc0027644
c0018302:	e8 89 91 00 00       	call   c0021490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018307:	83 c4 10             	add    esp,0x10
c001830a:	89 c7                	mov    edi,eax
c001830c:	eb 16                	jmp    c0018324 <Thr::processFromPID(int)+0x38>
c001830e:	66 90                	xchg   ax,ax
c0018310:	83 ec 0c             	sub    esp,0xc
c0018313:	68 44 76 02 c0       	push   0xc0027644
c0018318:	e8 73 91 00 00       	call   c0021490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001831d:	83 c4 10             	add    esp,0x10
c0018320:	39 f8                	cmp    eax,edi
c0018322:	74 4c                	je     c0018370 <Thr::processFromPID(int)+0x84>
c0018324:	83 ec 0c             	sub    esp,0xc
c0018327:	68 44 76 02 c0       	push   0xc0027644
c001832c:	e8 5f 91 00 00       	call   c0021490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018331:	c7 04 24 44 76 02 c0 	mov    DWORD PTR [esp],0xc0027644
c0018338:	89 c3                	mov    ebx,eax
c001833a:	e8 59 91 00 00       	call   c0021498 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001833f:	58                   	pop    eax
c0018340:	5a                   	pop    edx
c0018341:	53                   	push   ebx
c0018342:	68 44 76 02 c0       	push   0xc0027644
c0018347:	e8 04 92 00 00       	call   c0021550 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001834c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001834f:	83 c4 10             	add    esp,0x10
c0018352:	39 30                	cmp    DWORD PTR [eax],esi
c0018354:	75 ba                	jne    c0018310 <Thr::processFromPID(int)+0x24>
c0018356:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c001835b:	48                   	dec    eax
c001835c:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c0018361:	74 09                	je     c001836c <Thr::processFromPID(int)+0x80>
c0018363:	90                   	nop
c0018364:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018367:	5b                   	pop    ebx
c0018368:	5e                   	pop    esi
c0018369:	5f                   	pop    edi
c001836a:	c3                   	ret    
c001836b:	90                   	nop
c001836c:	fb                   	sti    
c001836d:	eb f5                	jmp    c0018364 <Thr::processFromPID(int)+0x78>
c001836f:	90                   	nop
c0018370:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c0018375:	48                   	dec    eax
c0018376:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c001837b:	75 07                	jne    c0018384 <Thr::processFromPID(int)+0x98>
c001837d:	fb                   	sti    
c001837e:	5b                   	pop    ebx
c001837f:	5e                   	pop    esi
c0018380:	5f                   	pop    edi
c0018381:	c3                   	ret    
c0018382:	66 90                	xchg   ax,ax
c0018384:	5b                   	pop    ebx
c0018385:	31 c0                	xor    eax,eax
c0018387:	5e                   	pop    esi
c0018388:	5f                   	pop    edi
c0018389:	c3                   	ret    
c001838a:	66 90                	xchg   ax,ax

c001838c <unblockTask(ThreadControlBlock*)>:
c001838c:	53                   	push   ebx
c001838d:	83 ec 08             	sub    esp,0x8
c0018390:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018394:	fa                   	cli    
c0018395:	ff 05 28 76 02 c0    	inc    DWORD PTR ds:0xc0027628
c001839b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001839e:	85 c0                	test   eax,eax
c00183a0:	74 66                	je     c0018408 <unblockTask(ThreadControlBlock*)+0x7c>
c00183a2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00183a5:	48                   	dec    eax
c00183a6:	74 38                	je     c00183e0 <unblockTask(ThreadControlBlock*)+0x54>
c00183a8:	83 ec 0c             	sub    esp,0xc
c00183ab:	68 44 76 02 c0       	push   0xc0027644
c00183b0:	e8 db 90 00 00       	call   c0021490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00183b5:	83 c4 10             	add    esp,0x10
c00183b8:	85 c0                	test   eax,eax
c00183ba:	75 1c                	jne    c00183d8 <unblockTask(ThreadControlBlock*)+0x4c>
c00183bc:	eb 5e                	jmp    c001841c <unblockTask(ThreadControlBlock*)+0x90>
c00183be:	66 90                	xchg   ax,ax
c00183c0:	83 ec 08             	sub    esp,0x8
c00183c3:	50                   	push   eax
c00183c4:	68 44 76 02 c0       	push   0xc0027644
c00183c9:	e8 72 94 00 00       	call   c0021840 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00183ce:	83 c4 10             	add    esp,0x10
c00183d1:	85 c0                	test   eax,eax
c00183d3:	74 47                	je     c001841c <unblockTask(ThreadControlBlock*)+0x90>
c00183d5:	8d 76 00             	lea    esi,[esi+0x0]
c00183d8:	39 c3                	cmp    ebx,eax
c00183da:	75 e4                	jne    c00183c0 <unblockTask(ThreadControlBlock*)+0x34>
c00183dc:	eb 12                	jmp    c00183f0 <unblockTask(ThreadControlBlock*)+0x64>
c00183de:	66 90                	xchg   ax,ax
c00183e0:	83 ec 0c             	sub    esp,0xc
c00183e3:	68 3a 46 02 c0       	push   0xc002463a
c00183e8:	e8 72 46 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c00183ed:	83 c4 10             	add    esp,0x10
c00183f0:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c00183f5:	48                   	dec    eax
c00183f6:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c00183fb:	75 03                	jne    c0018400 <unblockTask(ThreadControlBlock*)+0x74>
c00183fd:	fb                   	sti    
c00183fe:	66 90                	xchg   ax,ax
c0018400:	83 c4 08             	add    esp,0x8
c0018403:	5b                   	pop    ebx
c0018404:	c3                   	ret    
c0018405:	8d 76 00             	lea    esi,[esi+0x0]
c0018408:	83 ec 0c             	sub    esp,0xc
c001840b:	68 23 46 02 c0       	push   0xc0024623
c0018410:	e8 4a 46 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0018415:	83 c4 10             	add    esp,0x10
c0018418:	eb d6                	jmp    c00183f0 <unblockTask(ThreadControlBlock*)+0x64>
c001841a:	66 90                	xchg   ax,ax
c001841c:	83 ec 08             	sub    esp,0x8
c001841f:	53                   	push   ebx
c0018420:	68 44 76 02 c0       	push   0xc0027644
c0018425:	e8 26 91 00 00       	call   c0021550 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001842a:	83 c4 10             	add    esp,0x10
c001842d:	eb c1                	jmp    c00183f0 <unblockTask(ThreadControlBlock*)+0x64>
c001842f:	90                   	nop

c0018430 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0018430:	55                   	push   ebp
c0018431:	57                   	push   edi
c0018432:	56                   	push   esi
c0018433:	53                   	push   ebx
c0018434:	83 ec 1c             	sub    esp,0x1c
c0018437:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001843b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001843e:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0018444:	85 ff                	test   edi,edi
c0018446:	7e 24                	jle    c001846c <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0018448:	31 f6                	xor    esi,esi
c001844a:	66 90                	xchg   ax,ax
c001844c:	83 ec 0c             	sub    esp,0xc
c001844f:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c0018456:	46                   	inc    esi
c0018457:	e8 77 15 ff ff       	call   c00099d3 <free>
c001845c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001845f:	83 c4 10             	add    esp,0x10
c0018462:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0018468:	7f e2                	jg     c001844c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c001846a:	66 90                	xchg   ax,ax
c001846c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018476:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001847b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001847e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0018481:	d3 c0                	rol    eax,cl
c0018483:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c001848a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001848d:	89 f7                	mov    edi,esi
c001848f:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0018497:	0f 85 73 01 00 00    	jne    c0018610 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c001849d:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00184a3:	85 ed                	test   ebp,ebp
c00184a5:	74 1d                	je     c00184c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c00184a7:	83 ec 0c             	sub    esp,0xc
c00184aa:	55                   	push   ebp
c00184ab:	e8 f4 bb ff ff       	call   c00140a4 <EnvVarContainer::~EnvVarContainer()>
c00184b0:	59                   	pop    ecx
c00184b1:	5e                   	pop    esi
c00184b2:	6a 0c                	push   0xc
c00184b4:	55                   	push   ebp
c00184b5:	e8 c4 44 ff ff       	call   c000c97e <operator delete(void*, unsigned long)>
c00184ba:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00184bd:	83 c4 10             	add    esp,0x10
c00184c0:	89 f7                	mov    edi,esi
c00184c2:	66 90                	xchg   ax,ax
c00184c4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00184ca:	85 c0                	test   eax,eax
c00184cc:	0f 84 b2 00 00 00    	je     c0018584 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c00184d2:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00184d5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00184d9:	31 c9                	xor    ecx,ecx
c00184db:	eb 17                	jmp    c00184f4 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c00184dd:	8d 76 00             	lea    esi,[esi+0x0]
c00184e0:	41                   	inc    ecx
c00184e1:	83 f9 10             	cmp    ecx,0x10
c00184e4:	0f 84 9a 00 00 00    	je     c0018584 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c00184ea:	66 90                	xchg   ax,ax
c00184ec:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00184f2:	66 90                	xchg   ax,ax
c00184f4:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00184fb:	d3 fa                	sar    edx,cl
c00184fd:	83 e2 01             	and    edx,0x1
c0018500:	74 de                	je     c00184e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018502:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0018505:	01 d2                	add    edx,edx
c0018507:	01 ca                	add    edx,ecx
c0018509:	8d 14 92             	lea    edx,[edx+edx*4]
c001850c:	01 d0                	add    eax,edx
c001850e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0018514:	83 fd 07             	cmp    ebp,0x7
c0018517:	75 c7                	jne    c00184e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018519:	05 40 02 00 00       	add    eax,0x240
c001851e:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0018521:	83 fd ff             	cmp    ebp,0xffffffff
c0018524:	0f 8c ee 00 00 00    	jl     c0018618 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c001852a:	0f 84 ac 01 00 00    	je     c00186dc <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0018530:	85 ed                	test   ebp,ebp
c0018532:	0f 84 90 01 00 00    	je     c00186c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0018538:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001853a:	75 a4                	jne    c00184e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001853c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018542:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018546:	01 d0                	add    eax,edx
c0018548:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001854c:	83 ec 0c             	sub    esp,0xc
c001854f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0018555:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018558:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001855e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0018565:	50                   	push   eax
c0018566:	e8 21 fe ff ff       	call   c001838c <unblockTask(ThreadControlBlock*)>
c001856b:	83 c4 10             	add    esp,0x10
c001856e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018571:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018575:	89 f7                	mov    edi,esi
c0018577:	41                   	inc    ecx
c0018578:	83 f9 10             	cmp    ecx,0x10
c001857b:	0f 85 6b ff ff ff    	jne    c00184ec <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0018581:	8d 76 00             	lea    esi,[esi+0x0]
c0018584:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001858a:	85 c0                	test   eax,eax
c001858c:	74 62                	je     c00185f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c001858e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0018594:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001859a:	74 54                	je     c00185f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c001859c:	83 ec 0c             	sub    esp,0xc
c001859f:	68 44 76 02 c0       	push   0xc0027644
c00185a4:	e8 e7 8e 00 00       	call   c0021490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00185a9:	c7 04 24 44 76 02 c0 	mov    DWORD PTR [esp],0xc0027644
c00185b0:	89 c7                	mov    edi,eax
c00185b2:	e8 bd 8e 00 00       	call   c0021474 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00185b7:	83 c4 10             	add    esp,0x10
c00185ba:	84 c0                	test   al,al
c00185bc:	0f 84 ce 00 00 00    	je     c0018690 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c00185c2:	66 90                	xchg   ax,ax
c00185c4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00185c7:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00185cd:	85 d2                	test   edx,edx
c00185cf:	74 0f                	je     c00185e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c00185d1:	83 ec 0c             	sub    esp,0xc
c00185d4:	8b 02                	mov    eax,DWORD PTR [edx]
c00185d6:	52                   	push   edx
c00185d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00185da:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00185dd:	83 c4 10             	add    esp,0x10
c00185e0:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00185ea:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00185ed:	8d 76 00             	lea    esi,[esi+0x0]
c00185f0:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00185f6:	85 db                	test   ebx,ebx
c00185f8:	74 16                	je     c0018610 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c00185fa:	83 ec 0c             	sub    esp,0xc
c00185fd:	53                   	push   ebx
c00185fe:	e8 61 36 ff ff       	call   c000bc64 <VAS::~VAS()>
c0018603:	58                   	pop    eax
c0018604:	5a                   	pop    edx
c0018605:	6a 14                	push   0x14
c0018607:	53                   	push   ebx
c0018608:	e8 71 43 ff ff       	call   c000c97e <operator delete(void*, unsigned long)>
c001860d:	83 c4 10             	add    esp,0x10
c0018610:	83 c4 1c             	add    esp,0x1c
c0018613:	5b                   	pop    ebx
c0018614:	5e                   	pop    esi
c0018615:	5f                   	pop    edi
c0018616:	5d                   	pop    ebp
c0018617:	c3                   	ret    
c0018618:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001861c:	83 ec 0c             	sub    esp,0xc
c001861f:	68 ec 46 02 c0       	push   0xc00246ec
c0018624:	e8 d6 bc ff ff       	call   c00142ff <Krnl::panic(char const*)>
c0018629:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001862c:	83 c4 10             	add    esp,0x10
c001862f:	89 f7                	mov    edi,esi
c0018631:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018635:	e9 a6 fe ff ff       	jmp    c00184e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001863a:	66 90                	xchg   ax,ax
c001863c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018642:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0018648:	75 1e                	jne    c0018668 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c001864a:	83 ec 0c             	sub    esp,0xc
c001864d:	68 54 47 02 c0       	push   0xc0024754
c0018652:	e8 08 44 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c0018657:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001865e:	e8 65 fa ff ff       	call   c00180c8 <blockTask(TaskState)>
c0018663:	83 c4 10             	add    esp,0x10
c0018666:	66 90                	xchg   ax,ax
c0018668:	83 ec 08             	sub    esp,0x8
c001866b:	56                   	push   esi
c001866c:	68 44 76 02 c0       	push   0xc0027644
c0018671:	e8 da 8e 00 00       	call   c0021550 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018676:	c7 04 24 44 76 02 c0 	mov    DWORD PTR [esp],0xc0027644
c001867d:	e8 0e 8e 00 00       	call   c0021490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018682:	83 c4 10             	add    esp,0x10
c0018685:	39 f8                	cmp    eax,edi
c0018687:	0f 84 37 ff ff ff    	je     c00185c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c001868d:	8d 76 00             	lea    esi,[esi+0x0]
c0018690:	83 ec 0c             	sub    esp,0xc
c0018693:	68 44 76 02 c0       	push   0xc0027644
c0018698:	e8 f3 8d 00 00       	call   c0021490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001869d:	c7 04 24 44 76 02 c0 	mov    DWORD PTR [esp],0xc0027644
c00186a4:	89 c6                	mov    esi,eax
c00186a6:	e8 ed 8d 00 00       	call   c0021498 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00186ab:	83 c4 10             	add    esp,0x10
c00186ae:	39 f3                	cmp    ebx,esi
c00186b0:	74 b6                	je     c0018668 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00186b2:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00186b5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00186b8:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00186be:	75 a8                	jne    c0018668 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00186c0:	e9 77 ff ff ff       	jmp    c001863c <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c00186c5:	8d 76 00             	lea    esi,[esi+0x0]
c00186c8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00186cc:	83 ec 0c             	sub    esp,0xc
c00186cf:	68 20 47 02 c0       	push   0xc0024720
c00186d4:	e9 4b ff ff ff       	jmp    c0018624 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00186d9:	8d 76 00             	lea    esi,[esi+0x0]
c00186dc:	8b 36                	mov    esi,DWORD PTR [esi]
c00186de:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00186e2:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00186e5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00186e8:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00186ee:	01 d7                	add    edi,edx
c00186f0:	89 f8                	mov    eax,edi
c00186f2:	e9 51 fe ff ff       	jmp    c0018548 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c00186f7:	90                   	nop

c00186f8 <cleanerTaskFunction(void*)>:
c00186f8:	53                   	push   ebx
c00186f9:	83 ec 08             	sub    esp,0x8
c00186fc:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c0018701:	48                   	dec    eax
c0018702:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c0018707:	75 03                	jne    c001870c <cleanerTaskFunction(void*)+0x14>
c0018709:	fb                   	sti    
c001870a:	66 90                	xchg   ax,ax
c001870c:	fa                   	cli    
c001870d:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c0018712:	80 3d 0c 76 02 c0 00 	cmp    BYTE PTR ds:0xc002760c,0x0
c0018719:	8d 50 01             	lea    edx,[eax+0x1]
c001871c:	89 15 28 76 02 c0    	mov    DWORD PTR ds:0xc0027628,edx
c0018722:	0f 84 ac 00 00 00    	je     c00187d4 <cleanerTaskFunction(void*)+0xdc>
c0018728:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c001872d:	85 c0                	test   eax,eax
c001872f:	75 03                	jne    c0018734 <cleanerTaskFunction(void*)+0x3c>
c0018731:	fb                   	sti    
c0018732:	66 90                	xchg   ax,ax
c0018734:	c6 05 0c 76 02 c0 00 	mov    BYTE PTR ds:0xc002760c,0x0
c001873b:	fa                   	cli    
c001873c:	ff 05 28 76 02 c0    	inc    DWORD PTR ds:0xc0027628
c0018742:	ff 05 24 76 02 c0    	inc    DWORD PTR ds:0xc0027624
c0018748:	fa                   	cli    
c0018749:	ff 05 28 76 02 c0    	inc    DWORD PTR ds:0xc0027628
c001874f:	eb 2b                	jmp    c001877c <cleanerTaskFunction(void*)+0x84>
c0018751:	8d 76 00             	lea    esi,[esi+0x0]
c0018754:	83 ec 0c             	sub    esp,0xc
c0018757:	68 2c 76 02 c0       	push   0xc002762c
c001875c:	e8 2f 8d 00 00       	call   c0021490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018761:	c7 04 24 2c 76 02 c0 	mov    DWORD PTR [esp],0xc002762c
c0018768:	89 c3                	mov    ebx,eax
c001876a:	e8 29 8d 00 00       	call   c0021498 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001876f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018772:	e8 b9 fc ff ff       	call   c0018430 <cleanupTerminatedTask(ThreadControlBlock*)>
c0018777:	83 c4 10             	add    esp,0x10
c001877a:	66 90                	xchg   ax,ax
c001877c:	83 ec 0c             	sub    esp,0xc
c001877f:	68 2c 76 02 c0       	push   0xc002762c
c0018784:	e8 eb 8c 00 00       	call   c0021474 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018789:	83 c4 10             	add    esp,0x10
c001878c:	84 c0                	test   al,al
c001878e:	74 c4                	je     c0018754 <cleanerTaskFunction(void*)+0x5c>
c0018790:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c0018795:	48                   	dec    eax
c0018796:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c001879b:	75 03                	jne    c00187a0 <cleanerTaskFunction(void*)+0xa8>
c001879d:	fb                   	sti    
c001879e:	66 90                	xchg   ax,ax
c00187a0:	a1 24 76 02 c0       	mov    eax,ds:0xc0027624
c00187a5:	48                   	dec    eax
c00187a6:	a3 24 76 02 c0       	mov    ds:0xc0027624,eax
c00187ab:	0f 85 4b ff ff ff    	jne    c00186fc <cleanerTaskFunction(void*)+0x4>
c00187b1:	a1 20 76 02 c0       	mov    eax,ds:0xc0027620
c00187b6:	85 c0                	test   eax,eax
c00187b8:	0f 84 3e ff ff ff    	je     c00186fc <cleanerTaskFunction(void*)+0x4>
c00187be:	c7 05 20 76 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027620,0x0
c00187c8:	e8 03 f7 ff ff       	call   c0017ed0 <schedule()>
c00187cd:	e9 2a ff ff ff       	jmp    c00186fc <cleanerTaskFunction(void*)+0x4>
c00187d2:	66 90                	xchg   ax,ax
c00187d4:	83 ec 0c             	sub    esp,0xc
c00187d7:	6a 02                	push   0x2
c00187d9:	e8 c2 f8 ff ff       	call   c00180a0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00187de:	83 c4 10             	add    esp,0x10
c00187e1:	e9 4e ff ff ff       	jmp    c0018734 <cleanerTaskFunction(void*)+0x3c>
c00187e6:	66 90                	xchg   ax,ax

c00187e8 <terminateTask(int)>:
c00187e8:	83 ec 14             	sub    esp,0x14
c00187eb:	fa                   	cli    
c00187ec:	ff 05 28 76 02 c0    	inc    DWORD PTR ds:0xc0027628
c00187f2:	ff 05 24 76 02 c0    	inc    DWORD PTR ds:0xc0027624
c00187f8:	fa                   	cli    
c00187f9:	ff 05 28 76 02 c0    	inc    DWORD PTR ds:0xc0027628
c00187ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018803:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018808:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001880b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018810:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0018813:	50                   	push   eax
c0018814:	68 2c 76 02 c0       	push   0xc002762c
c0018819:	e8 32 8d 00 00       	call   c0021550 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001881e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018823:	83 c4 10             	add    esp,0x10
c0018826:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001882d:	a1 08 76 02 c0       	mov    eax,ds:0xc0027608
c0018832:	85 c0                	test   eax,eax
c0018834:	74 5e                	je     c0018894 <terminateTask(int)+0xac>
c0018836:	83 ec 0c             	sub    esp,0xc
c0018839:	c6 05 0c 76 02 c0 01 	mov    BYTE PTR ds:0xc002760c,0x1
c0018840:	50                   	push   eax
c0018841:	e8 46 fb ff ff       	call   c001838c <unblockTask(ThreadControlBlock*)>
c0018846:	83 c4 10             	add    esp,0x10
c0018849:	8d 76 00             	lea    esi,[esi+0x0]
c001884c:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c0018851:	48                   	dec    eax
c0018852:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c0018857:	75 03                	jne    c001885c <terminateTask(int)+0x74>
c0018859:	fb                   	sti    
c001885a:	66 90                	xchg   ax,ax
c001885c:	a1 24 76 02 c0       	mov    eax,ds:0xc0027624
c0018861:	48                   	dec    eax
c0018862:	a3 24 76 02 c0       	mov    ds:0xc0027624,eax
c0018867:	75 0b                	jne    c0018874 <terminateTask(int)+0x8c>
c0018869:	83 3d 20 76 02 c0 00 	cmp    DWORD PTR ds:0xc0027620,0x0
c0018870:	75 36                	jne    c00188a8 <terminateTask(int)+0xc0>
c0018872:	66 90                	xchg   ax,ax
c0018874:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c0018879:	48                   	dec    eax
c001887a:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c001887f:	75 03                	jne    c0018884 <terminateTask(int)+0x9c>
c0018881:	fb                   	sti    
c0018882:	66 90                	xchg   ax,ax
c0018884:	fa                   	cli    
c0018885:	ff 05 28 76 02 c0    	inc    DWORD PTR ds:0xc0027628
c001888b:	90                   	nop
c001888c:	e8 3f f6 ff ff       	call   c0017ed0 <schedule()>
c0018891:	eb e1                	jmp    c0018874 <terminateTask(int)+0x8c>
c0018893:	90                   	nop
c0018894:	83 ec 0c             	sub    esp,0xc
c0018897:	68 51 46 02 c0       	push   0xc0024651
c001889c:	e8 be 41 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c00188a1:	83 c4 10             	add    esp,0x10
c00188a4:	eb a6                	jmp    c001884c <terminateTask(int)+0x64>
c00188a6:	66 90                	xchg   ax,ax
c00188a8:	c7 05 20 76 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027620,0x0
c00188b2:	eb d8                	jmp    c001888c <terminateTask(int)+0xa4>

c00188b4 <Thr::terminateFromIRQ(int)>:
c00188b4:	83 ec 18             	sub    esp,0x18
c00188b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00188bb:	e8 28 ff ff ff       	call   c00187e8 <terminateTask(int)>

c00188c0 <Semaphore::release()>:
c00188c0:	83 ec 0c             	sub    esp,0xc
c00188c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00188c7:	fa                   	cli    
c00188c8:	a1 24 76 02 c0       	mov    eax,ds:0xc0027624
c00188cd:	ff 05 28 76 02 c0    	inc    DWORD PTR ds:0xc0027628
c00188d3:	8d 48 01             	lea    ecx,[eax+0x1]
c00188d6:	89 0d 24 76 02 c0    	mov    DWORD PTR ds:0xc0027624,ecx
c00188dc:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00188df:	85 c9                	test   ecx,ecx
c00188e1:	74 41                	je     c0018924 <Semaphore::release()+0x64>
c00188e3:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00188e6:	83 ec 0c             	sub    esp,0xc
c00188e9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00188ec:	51                   	push   ecx
c00188ed:	e8 9a fa ff ff       	call   c001838c <unblockTask(ThreadControlBlock*)>
c00188f2:	a1 24 76 02 c0       	mov    eax,ds:0xc0027624
c00188f7:	83 c4 10             	add    esp,0x10
c00188fa:	48                   	dec    eax
c00188fb:	90                   	nop
c00188fc:	a3 24 76 02 c0       	mov    ds:0xc0027624,eax
c0018901:	85 c0                	test   eax,eax
c0018903:	75 0b                	jne    c0018910 <Semaphore::release()+0x50>
c0018905:	a1 20 76 02 c0       	mov    eax,ds:0xc0027620
c001890a:	85 c0                	test   eax,eax
c001890c:	75 1e                	jne    c001892c <Semaphore::release()+0x6c>
c001890e:	66 90                	xchg   ax,ax
c0018910:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c0018915:	48                   	dec    eax
c0018916:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c001891b:	75 03                	jne    c0018920 <Semaphore::release()+0x60>
c001891d:	fb                   	sti    
c001891e:	66 90                	xchg   ax,ax
c0018920:	83 c4 0c             	add    esp,0xc
c0018923:	c3                   	ret    
c0018924:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0018927:	eb d3                	jmp    c00188fc <Semaphore::release()+0x3c>
c0018929:	8d 76 00             	lea    esi,[esi+0x0]
c001892c:	c7 05 20 76 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027620,0x0
c0018936:	e8 95 f5 ff ff       	call   c0017ed0 <schedule()>
c001893b:	eb d3                	jmp    c0018910 <Semaphore::release()+0x50>
c001893d:	8d 76 00             	lea    esi,[esi+0x0]

c0018940 <__static_initialization_and_destruction_0(int, int)>:
c0018940:	83 ec 0c             	sub    esp,0xc
c0018943:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018948:	0f 85 8e 00 00 00    	jne    c00189dc <__static_initialization_and_destruction_0(int, int)+0x9c>
c001894e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0018956:	0f 85 80 00 00 00    	jne    c00189dc <__static_initialization_and_destruction_0(int, int)+0x9c>
c001895c:	83 ec 0c             	sub    esp,0xc
c001895f:	68 44 76 02 c0       	push   0xc0027644
c0018964:	e8 93 8e 00 00       	call   c00217fc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018969:	83 c4 10             	add    esp,0x10
c001896c:	83 ec 04             	sub    esp,0x4
c001896f:	68 d4 53 02 c0       	push   0xc00253d4
c0018974:	68 44 76 02 c0       	push   0xc0027644
c0018979:	68 ac 17 02 c0       	push   0xc00217ac
c001897e:	e8 75 3f ff ff       	call   c000c8f8 <__cxa_atexit>
c0018983:	83 c4 10             	add    esp,0x10
c0018986:	83 ec 0c             	sub    esp,0xc
c0018989:	68 38 76 02 c0       	push   0xc0027638
c001898e:	e8 69 8e 00 00       	call   c00217fc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018993:	83 c4 10             	add    esp,0x10
c0018996:	83 ec 04             	sub    esp,0x4
c0018999:	68 d4 53 02 c0       	push   0xc00253d4
c001899e:	68 38 76 02 c0       	push   0xc0027638
c00189a3:	68 ac 17 02 c0       	push   0xc00217ac
c00189a8:	e8 4b 3f ff ff       	call   c000c8f8 <__cxa_atexit>
c00189ad:	83 c4 10             	add    esp,0x10
c00189b0:	83 ec 0c             	sub    esp,0xc
c00189b3:	68 2c 76 02 c0       	push   0xc002762c
c00189b8:	e8 3f 8e 00 00       	call   c00217fc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00189bd:	83 c4 10             	add    esp,0x10
c00189c0:	83 ec 04             	sub    esp,0x4
c00189c3:	68 d4 53 02 c0       	push   0xc00253d4
c00189c8:	68 2c 76 02 c0       	push   0xc002762c
c00189cd:	68 ac 17 02 c0       	push   0xc00217ac
c00189d2:	e8 21 3f ff ff       	call   c000c8f8 <__cxa_atexit>
c00189d7:	83 c4 10             	add    esp,0x10
c00189da:	66 90                	xchg   ax,ax
c00189dc:	90                   	nop
c00189dd:	83 c4 0c             	add    esp,0xc
c00189e0:	c3                   	ret    
c00189e1:	8d 76 00             	lea    esi,[esi+0x0]

c00189e4 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00189e4:	83 ec 0c             	sub    esp,0xc
c00189e7:	83 ec 08             	sub    esp,0x8
c00189ea:	68 ff ff 00 00       	push   0xffff
c00189ef:	6a 01                	push   0x1
c00189f1:	e8 4a ff ff ff       	call   c0018940 <__static_initialization_and_destruction_0(int, int)>
c00189f6:	83 c4 10             	add    esp,0x10
c00189f9:	83 c4 0c             	add    esp,0xc
c00189fc:	c3                   	ret    

c00189fd <Vm::inbv(unsigned short)>:
c00189fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018a01:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018a06:	75 06                	jne    c0018a0e <Vm::inbv(unsigned short)+0x11>
c0018a08:	a0 8c 76 02 c0       	mov    al,ds:0xc002768c
c0018a0d:	c3                   	ret    
c0018a0e:	ec                   	in     al,dx
c0018a0f:	c3                   	ret    

c0018a10 <Vm::outbv(unsigned short, unsigned char)>:
c0018a10:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018a14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a18:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018a1d:	75 25                	jne    c0018a44 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0018a1f:	8b 0d 8c 76 02 c0    	mov    ecx,DWORD PTR ds:0xc002768c
c0018a25:	8d 51 01             	lea    edx,[ecx+0x1]
c0018a28:	88 81 a0 76 02 c0    	mov    BYTE PTR [ecx-0x3ffd8960],al
c0018a2e:	89 15 8c 76 02 c0    	mov    DWORD PTR ds:0xc002768c,edx
c0018a34:	83 fa 20             	cmp    edx,0x20
c0018a37:	75 0c                	jne    c0018a45 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0018a39:	c7 05 8c 76 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002768c,0x1f
c0018a43:	c3                   	ret    
c0018a44:	ee                   	out    dx,al
c0018a45:	c3                   	ret    

c0018a46 <Vm::realToLinear(unsigned short, unsigned short)>:
c0018a46:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018a4b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018a50:	c1 e0 04             	shl    eax,0x4
c0018a53:	01 d0                	add    eax,edx
c0018a55:	c3                   	ret    

c0018a56 <Vm::getSegment(unsigned int)>:
c0018a56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a5a:	c1 e8 10             	shr    eax,0x10
c0018a5d:	c3                   	ret    

c0018a5e <Vm::getOffset(unsigned int)>:
c0018a5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a62:	c3                   	ret    

c0018a63 <Vm::mainloop2()>:
c0018a63:	83 ec 18             	sub    esp,0x18
c0018a66:	fa                   	cli    
c0018a67:	ff 05 28 76 02 c0    	inc    DWORD PTR ds:0xc0027628
c0018a6d:	6a 02                	push   0x2
c0018a6f:	c6 05 85 76 02 c0 01 	mov    BYTE PTR ds:0xc0027685,0x1
c0018a76:	e8 25 f6 ff ff       	call   c00180a0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018a7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a80:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018a84:	52                   	push   edx
c0018a85:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0018a89:	52                   	push   edx
c0018a8a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0018a8e:	52                   	push   edx
c0018a8f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0018a93:	50                   	push   eax
c0018a94:	e8 96 77 fe ff       	call   c000022f <goToVM86>
c0018a99:	83 c4 2c             	add    esp,0x2c
c0018a9c:	c3                   	ret    

c0018a9d <Vm::mainVm8086Loop(void*)>:
c0018a9d:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c0018aa2:	48                   	dec    eax
c0018aa3:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c0018aa8:	75 01                	jne    c0018aab <Vm::mainVm8086Loop(void*)+0xe>
c0018aaa:	fb                   	sti    
c0018aab:	eb b6                	jmp    c0018a63 <Vm::mainloop2()>

c0018aad <Vm::mainloop3(unsigned long)>:
c0018aad:	83 ec 18             	sub    esp,0x18
c0018ab0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018ab4:	fa                   	cli    
c0018ab5:	ff 05 28 76 02 c0    	inc    DWORD PTR ds:0xc0027628
c0018abb:	6a 02                	push   0x2
c0018abd:	c6 05 84 76 02 c0 01 	mov    BYTE PTR ds:0xc0027684,0x1
c0018ac4:	a3 80 76 02 c0       	mov    ds:0xc0027680,eax
c0018ac9:	e8 d2 f5 ff ff       	call   c00180a0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018ace:	83 c4 1c             	add    esp,0x1c
c0018ad1:	eb 90                	jmp    c0018a63 <Vm::mainloop2()>

c0018ad3 <Vm::initialise8086()>:
c0018ad3:	83 ec 0c             	sub    esp,0xc
c0018ad6:	68 80 00 00 00       	push   0x80
c0018adb:	6a 00                	push   0x0
c0018add:	68 9d 8a 01 c0       	push   0xc0018a9d
c0018ae2:	ff 35 50 76 02 c0    	push   DWORD PTR ds:0xc0027650
c0018ae8:	e8 c7 f1 ff ff       	call   c0017cb4 <Process::createThread(void (*)(void*), void*, int)>
c0018aed:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0018af4:	a3 88 76 02 c0       	mov    ds:0xc0027688,eax
c0018af9:	68 00 01 00 00       	push   0x100
c0018afe:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c0018b03:	6a 00                	push   0x0
c0018b05:	6a 00                	push   0x0
c0018b07:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0018b0d:	e8 c4 35 ff ff       	call   c000c0d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018b12:	83 c4 2c             	add    esp,0x2c
c0018b15:	c3                   	ret    

c0018b16 <Vm::finish8086()>:
c0018b16:	53                   	push   ebx
c0018b17:	83 ec 08             	sub    esp,0x8
c0018b1a:	fa                   	cli    
c0018b1b:	ff 05 28 76 02 c0    	inc    DWORD PTR ds:0xc0027628
c0018b21:	80 3d 84 76 02 c0 00 	cmp    BYTE PTR ds:0xc0027684,0x0
c0018b28:	75 15                	jne    c0018b3f <Vm::finish8086()+0x29>
c0018b2a:	e8 a1 f3 ff ff       	call   c0017ed0 <schedule()>
c0018b2f:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c0018b34:	48                   	dec    eax
c0018b35:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c0018b3a:	75 de                	jne    c0018b1a <Vm::finish8086()+0x4>
c0018b3c:	fb                   	sti    
c0018b3d:	eb db                	jmp    c0018b1a <Vm::finish8086()+0x4>
c0018b3f:	83 ec 0c             	sub    esp,0xc
c0018b42:	8b 1d 80 76 02 c0    	mov    ebx,DWORD PTR ds:0xc0027680
c0018b48:	ff 35 88 76 02 c0    	push   DWORD PTR ds:0xc0027688
c0018b4e:	c6 05 84 76 02 c0 00 	mov    BYTE PTR ds:0xc0027684,0x0
c0018b55:	e8 32 f8 ff ff       	call   c001838c <unblockTask(ThreadControlBlock*)>
c0018b5a:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c0018b5f:	83 c4 10             	add    esp,0x10
c0018b62:	8d 50 ff             	lea    edx,[eax-0x1]
c0018b65:	89 15 28 76 02 c0    	mov    DWORD PTR ds:0xc0027628,edx
c0018b6b:	85 d2                	test   edx,edx
c0018b6d:	75 01                	jne    c0018b70 <Vm::finish8086()+0x5a>
c0018b6f:	fb                   	sti    
c0018b70:	89 d8                	mov    eax,ebx
c0018b72:	83 c4 08             	add    esp,0x8
c0018b75:	5b                   	pop    ebx
c0018b76:	c3                   	ret    

c0018b77 <Vm::getOutput8086(unsigned char*)>:
c0018b77:	57                   	push   edi
c0018b78:	8b 0d 8c 76 02 c0    	mov    ecx,DWORD PTR ds:0xc002768c
c0018b7e:	56                   	push   esi
c0018b7f:	be a0 76 02 c0       	mov    esi,0xc00276a0
c0018b84:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018b88:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018b8a:	a1 8c 76 02 c0       	mov    eax,ds:0xc002768c
c0018b8f:	5e                   	pop    esi
c0018b90:	c7 05 8c 76 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002768c,0x0
c0018b9a:	5f                   	pop    edi
c0018b9b:	c3                   	ret    

c0018b9c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0018b9c:	55                   	push   ebp
c0018b9d:	57                   	push   edi
c0018b9e:	56                   	push   esi
c0018b9f:	53                   	push   ebx
c0018ba0:	83 ec 2c             	sub    esp,0x2c
c0018ba3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0018ba7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0018bab:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0018baf:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0018bb3:	fa                   	cli    
c0018bb4:	ff 05 28 76 02 c0    	inc    DWORD PTR ds:0xc0027628
c0018bba:	0f b6 35 85 76 02 c0 	movzx  esi,BYTE PTR ds:0xc0027685
c0018bc1:	89 f0                	mov    eax,esi
c0018bc3:	84 c0                	test   al,al
c0018bc5:	75 1d                	jne    c0018be4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0018bc7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018bcb:	e8 00 f3 ff ff       	call   c0017ed0 <schedule()>
c0018bd0:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c0018bd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018bd9:	48                   	dec    eax
c0018bda:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c0018bdf:	75 d2                	jne    c0018bb3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018be1:	fb                   	sti    
c0018be2:	eb cf                	jmp    c0018bb3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018be4:	a1 88 76 02 c0       	mov    eax,ds:0xc0027688
c0018be9:	c7 05 8c 76 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002768c,0x0
c0018bf3:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0018bf7:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0018bfb:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0018bff:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0018c03:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0018c07:	50                   	push   eax
c0018c08:	6a 20                	push   0x20
c0018c0a:	6a 00                	push   0x0
c0018c0c:	68 a0 76 02 c0       	push   0xc00276a0
c0018c11:	e8 6e 7a fe ff       	call   c0000684 <memset>
c0018c16:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018c1d:	e8 a1 0d ff ff       	call   c00099c3 <malloc>
c0018c22:	83 c4 0c             	add    esp,0xc
c0018c25:	89 c3                	mov    ebx,eax
c0018c27:	ff 35 50 76 02 c0    	push   DWORD PTR ds:0xc0027650
c0018c2d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c31:	50                   	push   eax
c0018c32:	e8 93 43 ff ff       	call   c000cfca <File::File(char const*, Process*)>
c0018c37:	83 c4 10             	add    esp,0x10
c0018c3a:	85 db                	test   ebx,ebx
c0018c3c:	75 0a                	jne    c0018c48 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0018c3e:	83 ec 0c             	sub    esp,0xc
c0018c41:	68 7c 47 02 c0       	push   0xc002477c
c0018c46:	eb 3e                	jmp    c0018c86 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0018c48:	50                   	push   eax
c0018c49:	8d 44 24 17          	lea    eax,[esp+0x17]
c0018c4d:	50                   	push   eax
c0018c4e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018c52:	50                   	push   eax
c0018c53:	53                   	push   ebx
c0018c54:	e8 81 46 ff ff       	call   c000d2da <File::stat(unsigned long long*, bool*)>
c0018c59:	83 c4 10             	add    esp,0x10
c0018c5c:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0018c61:	74 0a                	je     c0018c6d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0018c63:	83 ec 0c             	sub    esp,0xc
c0018c66:	68 90 47 02 c0       	push   0xc0024790
c0018c6b:	eb 19                	jmp    c0018c86 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0018c6d:	51                   	push   ecx
c0018c6e:	51                   	push   ecx
c0018c6f:	6a 01                	push   0x1
c0018c71:	53                   	push   ebx
c0018c72:	e8 b7 43 ff ff       	call   c000d02e <File::open(FileOpenMode)>
c0018c77:	83 c4 10             	add    esp,0x10
c0018c7a:	85 c0                	test   eax,eax
c0018c7c:	74 24                	je     c0018ca2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0018c7e:	83 ec 0c             	sub    esp,0xc
c0018c81:	68 a9 47 02 c0       	push   0xc00247a9
c0018c86:	e8 74 b6 ff ff       	call   c00142ff <Krnl::panic(char const*)>
c0018c8b:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c0018c90:	83 c4 10             	add    esp,0x10
c0018c93:	48                   	dec    eax
c0018c94:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c0018c99:	85 c0                	test   eax,eax
c0018c9b:	75 01                	jne    c0018c9e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0018c9d:	fb                   	sti    
c0018c9e:	31 f6                	xor    esi,esi
c0018ca0:	eb 58                	jmp    c0018cfa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0018ca2:	0f b7 ed             	movzx  ebp,bp
c0018ca5:	50                   	push   eax
c0018ca6:	0f b7 ff             	movzx  edi,di
c0018ca9:	50                   	push   eax
c0018caa:	55                   	push   ebp
c0018cab:	57                   	push   edi
c0018cac:	e8 95 fd ff ff       	call   c0018a46 <Vm::realToLinear(unsigned short, unsigned short)>
c0018cb1:	5a                   	pop    edx
c0018cb2:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018cb4:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0018cb8:	51                   	push   ecx
c0018cb9:	50                   	push   eax
c0018cba:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018cbe:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018cc2:	53                   	push   ebx
c0018cc3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018cc6:	83 c4 14             	add    esp,0x14
c0018cc9:	53                   	push   ebx
c0018cca:	e8 bd 43 ff ff       	call   c000d08c <File::close()>
c0018ccf:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c0018cd4:	83 c4 10             	add    esp,0x10
c0018cd7:	48                   	dec    eax
c0018cd8:	c6 05 85 76 02 c0 00 	mov    BYTE PTR ds:0xc0027685,0x0
c0018cdf:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c0018ce4:	85 c0                	test   eax,eax
c0018ce6:	75 01                	jne    c0018ce9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0018ce8:	fb                   	sti    
c0018ce9:	83 ec 0c             	sub    esp,0xc
c0018cec:	ff 35 88 76 02 c0    	push   DWORD PTR ds:0xc0027688
c0018cf2:	e8 95 f6 ff ff       	call   c001838c <unblockTask(ThreadControlBlock*)>
c0018cf7:	83 c4 10             	add    esp,0x10
c0018cfa:	83 c4 2c             	add    esp,0x2c
c0018cfd:	89 f0                	mov    eax,esi
c0018cff:	5b                   	pop    ebx
c0018d00:	5e                   	pop    esi
c0018d01:	5f                   	pop    edi
c0018d02:	5d                   	pop    ebp
c0018d03:	c3                   	ret    

c0018d04 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0018d04:	57                   	push   edi
c0018d05:	56                   	push   esi
c0018d06:	53                   	push   ebx
c0018d07:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018d0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d0f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018d13:	83 e8 06             	sub    eax,0x6
c0018d16:	0f b7 c0             	movzx  eax,ax
c0018d19:	50                   	push   eax
c0018d1a:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0018d1f:	50                   	push   eax
c0018d20:	e8 21 fd ff ff       	call   c0018a46 <Vm::realToLinear(unsigned short, unsigned short)>
c0018d25:	5a                   	pop    edx
c0018d26:	5e                   	pop    esi
c0018d27:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018d2a:	8d 56 fa             	lea    edx,[esi-0x6]
c0018d2d:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018d33:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0018d36:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0018d39:	83 c2 02             	add    edx,0x2
c0018d3c:	66 89 10             	mov    WORD PTR [eax],dx
c0018d3f:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0018d42:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0018d46:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0018d49:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0018d4d:	89 d6                	mov    esi,edx
c0018d4f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0018d55:	66 81 e6 ff fd       	and    si,0xfdff
c0018d5a:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0018d5e:	74 07                	je     c0018d67 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0018d60:	89 d6                	mov    esi,edx
c0018d62:	66 81 ce 00 02       	or     si,0x200
c0018d67:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0018d6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d70:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0018d74:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0018d7c:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018d7f:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018d87:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0018d8a:	5b                   	pop    ebx
c0018d8b:	5e                   	pop    esi
c0018d8c:	5f                   	pop    edi
c0018d8d:	c3                   	ret    

c0018d8e <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0018d8e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018d93:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018d98:	c1 e0 04             	shl    eax,0x4
c0018d9b:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0018d9e:	c3                   	ret    

c0018d9f <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0018d9f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018da4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018da9:	c1 e0 04             	shl    eax,0x4
c0018dac:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0018db0:	c3                   	ret    

c0018db1 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0018db1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018db6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018dbb:	c1 e0 04             	shl    eax,0x4
c0018dbe:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0018dc1:	c3                   	ret    

c0018dc2 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0018dc2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018dc7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018dcc:	c1 e0 04             	shl    eax,0x4
c0018dcf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018dd3:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018dd6:	c3                   	ret    

c0018dd7 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018dd7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018ddc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018de1:	c1 e0 04             	shl    eax,0x4
c0018de4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018de8:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018dec:	c3                   	ret    

c0018ded <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018ded:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018df2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018df7:	c1 e0 04             	shl    eax,0x4
c0018dfa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018dfe:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0018e01:	c3                   	ret    

c0018e02 <Vm::faultHandler(regs*)>:
c0018e02:	55                   	push   ebp
c0018e03:	57                   	push   edi
c0018e04:	56                   	push   esi
c0018e05:	53                   	push   ebx
c0018e06:	83 ec 1c             	sub    esp,0x1c
c0018e09:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018e0d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018e10:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0018e14:	0f b7 f8             	movzx  edi,ax
c0018e17:	52                   	push   edx
c0018e18:	0f b7 c0             	movzx  eax,ax
c0018e1b:	50                   	push   eax
c0018e1c:	e8 25 fc ff ff       	call   c0018a46 <Vm::realToLinear(unsigned short, unsigned short)>
c0018e21:	5a                   	pop    edx
c0018e22:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0018e25:	59                   	pop    ecx
c0018e26:	89 c1                	mov    ecx,eax
c0018e28:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018e2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018e2f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018e38:	0f b7 c5             	movzx  eax,bp
c0018e3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018e3f:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0018e43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018e47:	e8 fa fb ff ff       	call   c0018a46 <Vm::realToLinear(unsigned short, unsigned short)>
c0018e4c:	5e                   	pop    esi
c0018e4d:	be 06 00 00 00       	mov    esi,0x6
c0018e52:	5a                   	pop    edx
c0018e53:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0018e58:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0018e5d:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0018e60:	80 fa 9d             	cmp    dl,0x9d
c0018e63:	0f 84 2c 02 00 00    	je     c0019095 <Vm::faultHandler(regs*)+0x293>
c0018e69:	0f 87 91 00 00 00    	ja     c0018f00 <Vm::faultHandler(regs*)+0xfe>
c0018e6f:	80 fa 66             	cmp    dl,0x66
c0018e72:	0f 84 98 01 00 00    	je     c0019010 <Vm::faultHandler(regs*)+0x20e>
c0018e78:	77 47                	ja     c0018ec1 <Vm::faultHandler(regs*)+0xbf>
c0018e7a:	80 fa 36             	cmp    dl,0x36
c0018e7d:	0f 84 80 01 00 00    	je     c0019003 <Vm::faultHandler(regs*)+0x201>
c0018e83:	77 1a                	ja     c0018e9f <Vm::faultHandler(regs*)+0x9d>
c0018e85:	80 fa 26             	cmp    dl,0x26
c0018e88:	0f 84 4e 01 00 00    	je     c0018fdc <Vm::faultHandler(regs*)+0x1da>
c0018e8e:	80 fa 2e             	cmp    dl,0x2e
c0018e91:	0f 85 e2 05 00 00    	jne    c0019479 <Vm::faultHandler(regs*)+0x677>
c0018e97:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018e9a:	31 f6                	xor    esi,esi
c0018e9c:	41                   	inc    ecx
c0018e9d:	eb be                	jmp    c0018e5d <Vm::faultHandler(regs*)+0x5b>
c0018e9f:	80 fa 64             	cmp    dl,0x64
c0018ea2:	0f 84 41 01 00 00    	je     c0018fe9 <Vm::faultHandler(regs*)+0x1e7>
c0018ea8:	0f 87 48 01 00 00    	ja     c0018ff6 <Vm::faultHandler(regs*)+0x1f4>
c0018eae:	80 fa 3e             	cmp    dl,0x3e
c0018eb1:	0f 85 c2 05 00 00    	jne    c0019479 <Vm::faultHandler(regs*)+0x677>
c0018eb7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018eba:	be 01 00 00 00       	mov    esi,0x1
c0018ebf:	eb db                	jmp    c0018e9c <Vm::faultHandler(regs*)+0x9a>
c0018ec1:	80 fa 6d             	cmp    dl,0x6d
c0018ec4:	0f 84 ec 02 00 00    	je     c00191b6 <Vm::faultHandler(regs*)+0x3b4>
c0018eca:	77 17                	ja     c0018ee3 <Vm::faultHandler(regs*)+0xe1>
c0018ecc:	80 fa 67             	cmp    dl,0x67
c0018ecf:	0f 84 48 01 00 00    	je     c001901d <Vm::faultHandler(regs*)+0x21b>
c0018ed5:	80 fa 6c             	cmp    dl,0x6c
c0018ed8:	0f 84 69 02 00 00    	je     c0019147 <Vm::faultHandler(regs*)+0x345>
c0018ede:	e9 96 05 00 00       	jmp    c0019479 <Vm::faultHandler(regs*)+0x677>
c0018ee3:	80 fa 6f             	cmp    dl,0x6f
c0018ee6:	0f 84 f4 03 00 00    	je     c00192e0 <Vm::faultHandler(regs*)+0x4de>
c0018eec:	0f 82 59 03 00 00    	jb     c001924b <Vm::faultHandler(regs*)+0x449>
c0018ef2:	80 fa 9c             	cmp    dl,0x9c
c0018ef5:	0f 84 2f 01 00 00    	je     c001902a <Vm::faultHandler(regs*)+0x228>
c0018efb:	e9 79 05 00 00       	jmp    c0019479 <Vm::faultHandler(regs*)+0x677>
c0018f00:	80 fa ec             	cmp    dl,0xec
c0018f03:	0f 84 14 05 00 00    	je     c001941d <Vm::faultHandler(regs*)+0x61b>
c0018f09:	77 7b                	ja     c0018f86 <Vm::faultHandler(regs*)+0x184>
c0018f0b:	80 fa e4             	cmp    dl,0xe4
c0018f0e:	0f 84 93 04 00 00    	je     c00193a7 <Vm::faultHandler(regs*)+0x5a5>
c0018f14:	77 53                	ja     c0018f69 <Vm::faultHandler(regs*)+0x167>
c0018f16:	80 fa cd             	cmp    dl,0xcd
c0018f19:	0f 84 d9 01 00 00    	je     c00190f8 <Vm::faultHandler(regs*)+0x2f6>
c0018f1f:	80 fa cf             	cmp    dl,0xcf
c0018f22:	0f 85 51 05 00 00    	jne    c0019479 <Vm::faultHandler(regs*)+0x677>
c0018f28:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018f2b:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018f2e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0018f32:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0018f35:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0018f39:	81 ca 00 02 02 00    	or     edx,0x20200
c0018f3f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018f42:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0018f46:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018f4c:	66 c1 e8 09          	shr    ax,0x9
c0018f50:	83 e0 01             	and    eax,0x1
c0018f53:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0018f56:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018f59:	83 c0 06             	add    eax,0x6
c0018f5c:	25 ff ff 00 00       	and    eax,0xffff
c0018f61:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018f64:	e9 0c 05 00 00       	jmp    c0019475 <Vm::faultHandler(regs*)+0x673>
c0018f69:	80 fa e6             	cmp    dl,0xe6
c0018f6c:	0f 84 7f 04 00 00    	je     c00193f1 <Vm::faultHandler(regs*)+0x5ef>
c0018f72:	0f 82 4b 04 00 00    	jb     c00193c3 <Vm::faultHandler(regs*)+0x5c1>
c0018f78:	80 fa e7             	cmp    dl,0xe7
c0018f7b:	0f 84 87 04 00 00    	je     c0019408 <Vm::faultHandler(regs*)+0x606>
c0018f81:	e9 f3 04 00 00       	jmp    c0019479 <Vm::faultHandler(regs*)+0x677>
c0018f86:	80 fa ef             	cmp    dl,0xef
c0018f89:	0f 84 d1 04 00 00    	je     c0019460 <Vm::faultHandler(regs*)+0x65e>
c0018f8f:	77 28                	ja     c0018fb9 <Vm::faultHandler(regs*)+0x1b7>
c0018f91:	80 fa ed             	cmp    dl,0xed
c0018f94:	0f 84 9f 04 00 00    	je     c0019439 <Vm::faultHandler(regs*)+0x637>
c0018f9a:	80 fa ee             	cmp    dl,0xee
c0018f9d:	0f 85 d6 04 00 00    	jne    c0019479 <Vm::faultHandler(regs*)+0x677>
c0018fa3:	50                   	push   eax
c0018fa4:	50                   	push   eax
c0018fa5:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018fa9:	50                   	push   eax
c0018faa:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018fae:	50                   	push   eax
c0018faf:	e8 5c fa ff ff       	call   c0018a10 <Vm::outbv(unsigned short, unsigned char)>
c0018fb4:	e9 9f 04 00 00       	jmp    c0019458 <Vm::faultHandler(regs*)+0x656>
c0018fb9:	80 fa fa             	cmp    dl,0xfa
c0018fbc:	0f 84 69 01 00 00    	je     c001912b <Vm::faultHandler(regs*)+0x329>
c0018fc2:	80 fa fb             	cmp    dl,0xfb
c0018fc5:	0f 84 6e 01 00 00    	je     c0019139 <Vm::faultHandler(regs*)+0x337>
c0018fcb:	80 fa f3             	cmp    dl,0xf3
c0018fce:	0f 85 a5 04 00 00    	jne    c0019479 <Vm::faultHandler(regs*)+0x677>
c0018fd4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018fd7:	e9 c0 fe ff ff       	jmp    c0018e9c <Vm::faultHandler(regs*)+0x9a>
c0018fdc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018fdf:	be 02 00 00 00       	mov    esi,0x2
c0018fe4:	e9 b3 fe ff ff       	jmp    c0018e9c <Vm::faultHandler(regs*)+0x9a>
c0018fe9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018fec:	be 03 00 00 00       	mov    esi,0x3
c0018ff1:	e9 a6 fe ff ff       	jmp    c0018e9c <Vm::faultHandler(regs*)+0x9a>
c0018ff6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018ff9:	be 04 00 00 00       	mov    esi,0x4
c0018ffe:	e9 99 fe ff ff       	jmp    c0018e9c <Vm::faultHandler(regs*)+0x9a>
c0019003:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019006:	be 05 00 00 00       	mov    esi,0x5
c001900b:	e9 8c fe ff ff       	jmp    c0018e9c <Vm::faultHandler(regs*)+0x9a>
c0019010:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019013:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019018:	e9 7f fe ff ff       	jmp    c0018e9c <Vm::faultHandler(regs*)+0x9a>
c001901d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019020:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0019025:	e9 72 fe ff ff       	jmp    c0018e9c <Vm::faultHandler(regs*)+0x9a>
c001902a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001902d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019031:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019036:	74 30                	je     c0019068 <Vm::faultHandler(regs*)+0x266>
c0019038:	83 e9 04             	sub    ecx,0x4
c001903b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019041:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019047:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001904a:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001904d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019053:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0019057:	0f 84 15 04 00 00    	je     c0019472 <Vm::faultHandler(regs*)+0x670>
c001905d:	80 ce 02             	or     dh,0x2
c0019060:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019063:	e9 0a 04 00 00       	jmp    c0019472 <Vm::faultHandler(regs*)+0x670>
c0019068:	83 e9 02             	sub    ecx,0x2
c001906b:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019071:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019074:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019078:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001907e:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0019082:	74 05                	je     c0019089 <Vm::faultHandler(regs*)+0x287>
c0019084:	80 ce 02             	or     dh,0x2
c0019087:	eb 03                	jmp    c001908c <Vm::faultHandler(regs*)+0x28a>
c0019089:	80 e6 fd             	and    dh,0xfd
c001908c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019090:	e9 dd 03 00 00       	jmp    c0019472 <Vm::faultHandler(regs*)+0x670>
c0019095:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001909a:	74 2a                	je     c00190c6 <Vm::faultHandler(regs*)+0x2c4>
c001909c:	8b 10                	mov    edx,DWORD PTR [eax]
c001909e:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00190a4:	81 ca 00 02 02 00    	or     edx,0x20200
c00190aa:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00190ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00190af:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00190b5:	c1 e8 09             	shr    eax,0x9
c00190b8:	83 e0 01             	and    eax,0x1
c00190bb:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00190be:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00190c1:	83 c0 04             	add    eax,0x4
c00190c4:	eb 25                	jmp    c00190eb <Vm::faultHandler(regs*)+0x2e9>
c00190c6:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00190c9:	81 ca 00 02 02 00    	or     edx,0x20200
c00190cf:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00190d2:	66 8b 00             	mov    ax,WORD PTR [eax]
c00190d5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00190db:	66 c1 e8 09          	shr    ax,0x9
c00190df:	83 e0 01             	and    eax,0x1
c00190e2:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00190e5:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00190e8:	83 c0 02             	add    eax,0x2
c00190eb:	25 ff ff 00 00       	and    eax,0xffff
c00190f0:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00190f3:	e9 7a 03 00 00       	jmp    c0019472 <Vm::faultHandler(regs*)+0x670>
c00190f8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00190fc:	3c ee                	cmp    al,0xee
c00190fe:	75 10                	jne    c0019110 <Vm::faultHandler(regs*)+0x30e>
c0019100:	83 ec 0c             	sub    esp,0xc
c0019103:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0019106:	e8 a2 f9 ff ff       	call   c0018aad <Vm::mainloop3(unsigned long)>
c001910b:	e9 4b 03 00 00       	jmp    c001945b <Vm::faultHandler(regs*)+0x659>
c0019110:	83 ec 0c             	sub    esp,0xc
c0019113:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019117:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001911b:	51                   	push   ecx
c001911c:	50                   	push   eax
c001911d:	53                   	push   ebx
c001911e:	e8 e1 fb ff ff       	call   c0018d04 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0019123:	83 c4 20             	add    esp,0x20
c0019126:	e9 4a 03 00 00       	jmp    c0019475 <Vm::faultHandler(regs*)+0x673>
c001912b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019130:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0019134:	e9 39 03 00 00       	jmp    c0019472 <Vm::faultHandler(regs*)+0x670>
c0019139:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001913e:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0019142:	e9 2b 03 00 00       	jmp    c0019472 <Vm::faultHandler(regs*)+0x670>
c0019147:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001914a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001914f:	74 2b                	je     c001917c <Vm::faultHandler(regs*)+0x37a>
c0019151:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0019158:	76 22                	jbe    c001917c <Vm::faultHandler(regs*)+0x37a>
c001915a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001915e:	50                   	push   eax
c001915f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019163:	50                   	push   eax
c0019164:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019168:	50                   	push   eax
c0019169:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001916d:	50                   	push   eax
c001916e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019172:	50                   	push   eax
c0019173:	6a 6c                	push   0x6c
c0019175:	6a 6c                	push   0x6c
c0019177:	e9 b9 01 00 00       	jmp    c0019335 <Vm::faultHandler(regs*)+0x533>
c001917c:	83 ec 0c             	sub    esp,0xc
c001917f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019183:	0f b7 f6             	movzx  esi,si
c0019186:	50                   	push   eax
c0019187:	e8 71 f8 ff ff       	call   c00189fd <Vm::inbv(unsigned short)>
c001918c:	83 c4 0c             	add    esp,0xc
c001918f:	0f b6 c0             	movzx  eax,al
c0019192:	50                   	push   eax
c0019193:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0019197:	50                   	push   eax
c0019198:	56                   	push   esi
c0019199:	e8 24 fc ff ff       	call   c0018dc2 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001919e:	83 c4 10             	add    esp,0x10
c00191a1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00191a4:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00191a8:	74 03                	je     c00191ad <Vm::faultHandler(regs*)+0x3ab>
c00191aa:	48                   	dec    eax
c00191ab:	eb 01                	jmp    c00191ae <Vm::faultHandler(regs*)+0x3ac>
c00191ad:	40                   	inc    eax
c00191ae:	0f b7 c0             	movzx  eax,ax
c00191b1:	e9 8d 00 00 00       	jmp    c0019243 <Vm::faultHandler(regs*)+0x441>
c00191b6:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00191b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00191bc:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00191c1:	74 29                	je     c00191ec <Vm::faultHandler(regs*)+0x3ea>
c00191c3:	3d ff ff 00 00       	cmp    eax,0xffff
c00191c8:	76 22                	jbe    c00191ec <Vm::faultHandler(regs*)+0x3ea>
c00191ca:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00191ce:	50                   	push   eax
c00191cf:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00191d3:	50                   	push   eax
c00191d4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00191d8:	50                   	push   eax
c00191d9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00191dd:	50                   	push   eax
c00191de:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00191e2:	50                   	push   eax
c00191e3:	6a 6d                	push   0x6d
c00191e5:	6a 6d                	push   0x6d
c00191e7:	e9 49 01 00 00       	jmp    c0019335 <Vm::faultHandler(regs*)+0x533>
c00191ec:	0f b7 c8             	movzx  ecx,ax
c00191ef:	0f b7 f6             	movzx  esi,si
c00191f2:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00191f5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00191fa:	74 20                	je     c001921c <Vm::faultHandler(regs*)+0x41a>
c00191fc:	ed                   	in     eax,dx
c00191fd:	55                   	push   ebp
c00191fe:	50                   	push   eax
c00191ff:	51                   	push   ecx
c0019200:	56                   	push   esi
c0019201:	e8 e7 fb ff ff       	call   c0018ded <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019206:	83 c4 10             	add    esp,0x10
c0019209:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001920c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019210:	74 05                	je     c0019217 <Vm::faultHandler(regs*)+0x415>
c0019212:	83 e8 04             	sub    eax,0x4
c0019215:	eb 27                	jmp    c001923e <Vm::faultHandler(regs*)+0x43c>
c0019217:	83 c0 04             	add    eax,0x4
c001921a:	eb 22                	jmp    c001923e <Vm::faultHandler(regs*)+0x43c>
c001921c:	66 ed                	in     ax,dx
c001921e:	0f b7 c0             	movzx  eax,ax
c0019221:	57                   	push   edi
c0019222:	50                   	push   eax
c0019223:	51                   	push   ecx
c0019224:	56                   	push   esi
c0019225:	e8 ad fb ff ff       	call   c0018dd7 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001922a:	83 c4 10             	add    esp,0x10
c001922d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019230:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019234:	74 05                	je     c001923b <Vm::faultHandler(regs*)+0x439>
c0019236:	83 e8 02             	sub    eax,0x2
c0019239:	eb 03                	jmp    c001923e <Vm::faultHandler(regs*)+0x43c>
c001923b:	83 c0 02             	add    eax,0x2
c001923e:	25 ff ff 00 00       	and    eax,0xffff
c0019243:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019246:	e9 27 02 00 00       	jmp    c0019472 <Vm::faultHandler(regs*)+0x670>
c001924b:	8d 46 ff             	lea    eax,[esi-0x1]
c001924e:	3c 05                	cmp    al,0x5
c0019250:	77 24                	ja     c0019276 <Vm::faultHandler(regs*)+0x474>
c0019252:	0f b6 c0             	movzx  eax,al
c0019255:	ff 24 85 1c 48 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb7e4]
c001925c:	0f b7 fd             	movzx  edi,bp
c001925f:	eb 15                	jmp    c0019276 <Vm::faultHandler(regs*)+0x474>
c0019261:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0019265:	eb 0f                	jmp    c0019276 <Vm::faultHandler(regs*)+0x474>
c0019267:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001926b:	eb 09                	jmp    c0019276 <Vm::faultHandler(regs*)+0x474>
c001926d:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0019271:	eb 03                	jmp    c0019276 <Vm::faultHandler(regs*)+0x474>
c0019273:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0019276:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019279:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001927e:	74 29                	je     c00192a9 <Vm::faultHandler(regs*)+0x4a7>
c0019280:	3d ff ff 00 00       	cmp    eax,0xffff
c0019285:	76 22                	jbe    c00192a9 <Vm::faultHandler(regs*)+0x4a7>
c0019287:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001928b:	50                   	push   eax
c001928c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019290:	50                   	push   eax
c0019291:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019295:	50                   	push   eax
c0019296:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001929a:	50                   	push   eax
c001929b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001929f:	50                   	push   eax
c00192a0:	6a 6e                	push   0x6e
c00192a2:	6a 6e                	push   0x6e
c00192a4:	e9 8c 00 00 00       	jmp    c0019335 <Vm::faultHandler(regs*)+0x533>
c00192a9:	0f b7 c0             	movzx  eax,ax
c00192ac:	52                   	push   edx
c00192ad:	52                   	push   edx
c00192ae:	50                   	push   eax
c00192af:	57                   	push   edi
c00192b0:	e8 d9 fa ff ff       	call   c0018d8e <Vm::readByteFromReal(unsigned short, unsigned short)>
c00192b5:	59                   	pop    ecx
c00192b6:	0f b6 c0             	movzx  eax,al
c00192b9:	5e                   	pop    esi
c00192ba:	50                   	push   eax
c00192bb:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00192bf:	50                   	push   eax
c00192c0:	e8 4b f7 ff ff       	call   c0018a10 <Vm::outbv(unsigned short, unsigned char)>
c00192c5:	83 c4 10             	add    esp,0x10
c00192c8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00192cb:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00192cf:	74 03                	je     c00192d4 <Vm::faultHandler(regs*)+0x4d2>
c00192d1:	48                   	dec    eax
c00192d2:	eb 01                	jmp    c00192d5 <Vm::faultHandler(regs*)+0x4d3>
c00192d4:	40                   	inc    eax
c00192d5:	0f b7 c0             	movzx  eax,ax
c00192d8:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00192db:	e9 92 01 00 00       	jmp    c0019472 <Vm::faultHandler(regs*)+0x670>
c00192e0:	8d 46 ff             	lea    eax,[esi-0x1]
c00192e3:	3c 05                	cmp    al,0x5
c00192e5:	77 1f                	ja     c0019306 <Vm::faultHandler(regs*)+0x504>
c00192e7:	0f b6 c0             	movzx  eax,al
c00192ea:	ff 24 85 34 48 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb7cc]
c00192f1:	89 ef                	mov    edi,ebp
c00192f3:	eb 11                	jmp    c0019306 <Vm::faultHandler(regs*)+0x504>
c00192f5:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00192f8:	eb 0c                	jmp    c0019306 <Vm::faultHandler(regs*)+0x504>
c00192fa:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00192fd:	eb 07                	jmp    c0019306 <Vm::faultHandler(regs*)+0x504>
c00192ff:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0019302:	eb 02                	jmp    c0019306 <Vm::faultHandler(regs*)+0x504>
c0019304:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0019306:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0019309:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001930e:	74 37                	je     c0019347 <Vm::faultHandler(regs*)+0x545>
c0019310:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0019316:	76 2f                	jbe    c0019347 <Vm::faultHandler(regs*)+0x545>
c0019318:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001931c:	50                   	push   eax
c001931d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019321:	50                   	push   eax
c0019322:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019326:	50                   	push   eax
c0019327:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001932b:	50                   	push   eax
c001932c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019330:	50                   	push   eax
c0019331:	6a 6f                	push   0x6f
c0019333:	6a 6f                	push   0x6f
c0019335:	68 c2 47 02 c0       	push   0xc00247c2
c001933a:	e8 20 37 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001933f:	83 c4 20             	add    esp,0x20
c0019342:	e9 86 01 00 00       	jmp    c00194cd <Vm::faultHandler(regs*)+0x6cb>
c0019347:	0f b7 d7             	movzx  edx,di
c001934a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001934d:	0f b7 c6             	movzx  eax,si
c0019350:	81 e1 00 04 00 00    	and    ecx,0x400
c0019356:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0019359:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001935e:	74 1d                	je     c001937d <Vm::faultHandler(regs*)+0x57b>
c0019360:	55                   	push   ebp
c0019361:	55                   	push   ebp
c0019362:	50                   	push   eax
c0019363:	52                   	push   edx
c0019364:	e8 48 fa ff ff       	call   c0018db1 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019369:	83 c4 10             	add    esp,0x10
c001936c:	89 fa                	mov    edx,edi
c001936e:	ef                   	out    dx,eax
c001936f:	85 c9                	test   ecx,ecx
c0019371:	74 05                	je     c0019378 <Vm::faultHandler(regs*)+0x576>
c0019373:	83 ee 04             	sub    esi,0x4
c0019376:	eb 21                	jmp    c0019399 <Vm::faultHandler(regs*)+0x597>
c0019378:	83 c6 04             	add    esi,0x4
c001937b:	eb 1c                	jmp    c0019399 <Vm::faultHandler(regs*)+0x597>
c001937d:	55                   	push   ebp
c001937e:	55                   	push   ebp
c001937f:	50                   	push   eax
c0019380:	52                   	push   edx
c0019381:	e8 19 fa ff ff       	call   c0018d9f <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019386:	83 c4 10             	add    esp,0x10
c0019389:	89 fa                	mov    edx,edi
c001938b:	66 ef                	out    dx,ax
c001938d:	85 c9                	test   ecx,ecx
c001938f:	74 05                	je     c0019396 <Vm::faultHandler(regs*)+0x594>
c0019391:	83 ee 02             	sub    esi,0x2
c0019394:	eb 03                	jmp    c0019399 <Vm::faultHandler(regs*)+0x597>
c0019396:	83 c6 02             	add    esi,0x2
c0019399:	81 e6 ff ff 00 00    	and    esi,0xffff
c001939f:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00193a2:	e9 cb 00 00 00       	jmp    c0019472 <Vm::faultHandler(regs*)+0x670>
c00193a7:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00193ae:	83 ec 0c             	sub    esp,0xc
c00193b1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00193b5:	50                   	push   eax
c00193b6:	e8 42 f6 ff ff       	call   c00189fd <Vm::inbv(unsigned short)>
c00193bb:	0f b6 c0             	movzx  eax,al
c00193be:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00193c1:	eb 3f                	jmp    c0019402 <Vm::faultHandler(regs*)+0x600>
c00193c3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00193c8:	74 07                	je     c00193d1 <Vm::faultHandler(regs*)+0x5cf>
c00193ca:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00193ce:	ed                   	in     eax,dx
c00193cf:	eb 14                	jmp    c00193e5 <Vm::faultHandler(regs*)+0x5e3>
c00193d1:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00193d4:	66 31 f6             	xor    si,si
c00193d7:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00193da:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00193de:	66 ed                	in     ax,dx
c00193e0:	0f b7 c0             	movzx  eax,ax
c00193e3:	09 f0                	or     eax,esi
c00193e5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00193e8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00193ec:	e9 84 00 00 00       	jmp    c0019475 <Vm::faultHandler(regs*)+0x673>
c00193f1:	52                   	push   edx
c00193f2:	52                   	push   edx
c00193f3:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00193f7:	50                   	push   eax
c00193f8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00193fc:	50                   	push   eax
c00193fd:	e8 0e f6 ff ff       	call   c0018a10 <Vm::outbv(unsigned short, unsigned char)>
c0019402:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019406:	eb 53                	jmp    c001945b <Vm::faultHandler(regs*)+0x659>
c0019408:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001940b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001940f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019414:	74 03                	je     c0019419 <Vm::faultHandler(regs*)+0x617>
c0019416:	ef                   	out    dx,eax
c0019417:	eb cf                	jmp    c00193e8 <Vm::faultHandler(regs*)+0x5e6>
c0019419:	66 ef                	out    dx,ax
c001941b:	eb cb                	jmp    c00193e8 <Vm::faultHandler(regs*)+0x5e6>
c001941d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019424:	83 ec 0c             	sub    esp,0xc
c0019427:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001942b:	50                   	push   eax
c001942c:	e8 cc f5 ff ff       	call   c00189fd <Vm::inbv(unsigned short)>
c0019431:	0f b6 c0             	movzx  eax,al
c0019434:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019437:	eb 1f                	jmp    c0019458 <Vm::faultHandler(regs*)+0x656>
c0019439:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001943c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019441:	74 03                	je     c0019446 <Vm::faultHandler(regs*)+0x644>
c0019443:	ed                   	in     eax,dx
c0019444:	eb 0d                	jmp    c0019453 <Vm::faultHandler(regs*)+0x651>
c0019446:	66 ed                	in     ax,dx
c0019448:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001944b:	0f b7 c0             	movzx  eax,ax
c001944e:	66 31 d2             	xor    dx,dx
c0019451:	09 d0                	or     eax,edx
c0019453:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019456:	eb 1a                	jmp    c0019472 <Vm::faultHandler(regs*)+0x670>
c0019458:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001945b:	83 c4 10             	add    esp,0x10
c001945e:	eb 15                	jmp    c0019475 <Vm::faultHandler(regs*)+0x673>
c0019460:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019463:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019466:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001946b:	74 03                	je     c0019470 <Vm::faultHandler(regs*)+0x66e>
c001946d:	ef                   	out    dx,eax
c001946e:	eb 02                	jmp    c0019472 <Vm::faultHandler(regs*)+0x670>
c0019470:	66 ef                	out    dx,ax
c0019472:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019475:	b0 01                	mov    al,0x1
c0019477:	eb 56                	jmp    c00194cf <Vm::faultHandler(regs*)+0x6cd>
c0019479:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001947d:	50                   	push   eax
c001947e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019482:	50                   	push   eax
c0019483:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019487:	50                   	push   eax
c0019488:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001948c:	50                   	push   eax
c001948d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019491:	50                   	push   eax
c0019492:	52                   	push   edx
c0019493:	52                   	push   edx
c0019494:	68 ef 47 02 c0       	push   0xc00247ef
c0019499:	e8 c1 35 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001949e:	83 c4 20             	add    esp,0x20
c00194a1:	83 ec 0c             	sub    esp,0xc
c00194a4:	6a 60                	push   0x60
c00194a6:	e8 52 f5 ff ff       	call   c00189fd <Vm::inbv(unsigned short)>
c00194ab:	83 c4 10             	add    esp,0x10
c00194ae:	3c 1c                	cmp    al,0x1c
c00194b0:	74 04                	je     c00194b6 <Vm::faultHandler(regs*)+0x6b4>
c00194b2:	3c 5a                	cmp    al,0x5a
c00194b4:	75 eb                	jne    c00194a1 <Vm::faultHandler(regs*)+0x69f>
c00194b6:	3c 5a                	cmp    al,0x5a
c00194b8:	74 04                	je     c00194be <Vm::faultHandler(regs*)+0x6bc>
c00194ba:	3c 1c                	cmp    al,0x1c
c00194bc:	75 0f                	jne    c00194cd <Vm::faultHandler(regs*)+0x6cb>
c00194be:	83 ec 0c             	sub    esp,0xc
c00194c1:	6a 60                	push   0x60
c00194c3:	e8 35 f5 ff ff       	call   c00189fd <Vm::inbv(unsigned short)>
c00194c8:	83 c4 10             	add    esp,0x10
c00194cb:	eb e9                	jmp    c00194b6 <Vm::faultHandler(regs*)+0x6b4>
c00194cd:	31 c0                	xor    eax,eax
c00194cf:	83 c4 1c             	add    esp,0x1c
c00194d2:	5b                   	pop    ebx
c00194d3:	5e                   	pop    esi
c00194d4:	5f                   	pop    edi
c00194d5:	5d                   	pop    ebp
c00194d6:	c3                   	ret    
c00194d7:	90                   	nop

c00194d8 <Vm::fpuInternalTo32(unsigned long long)>:
c00194d8:	57                   	push   edi
c00194d9:	56                   	push   esi
c00194da:	53                   	push   ebx
c00194db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00194df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194e3:	89 d6                	mov    esi,edx
c00194e5:	89 d7                	mov    edi,edx
c00194e7:	89 c1                	mov    ecx,eax
c00194e9:	c1 ef 14             	shr    edi,0x14
c00194ec:	89 d3                	mov    ebx,edx
c00194ee:	81 e7 ff 07 00 00    	and    edi,0x7ff
c00194f4:	31 d2                	xor    edx,edx
c00194f6:	89 f8                	mov    eax,edi
c00194f8:	81 e6 00 00 00 80    	and    esi,0x80000000
c00194fe:	bf ff 00 00 00       	mov    edi,0xff
c0019503:	05 80 fc ff ff       	add    eax,0xfffffc80
c0019508:	83 d2 ff             	adc    edx,0xffffffff
c001950b:	39 c7                	cmp    edi,eax
c001950d:	bf 00 00 00 00       	mov    edi,0x0
c0019512:	19 d7                	sbb    edi,edx
c0019514:	72 16                	jb     c001952c <Vm::fpuInternalTo32(unsigned long long)+0x54>
c0019516:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001951a:	c1 e0 17             	shl    eax,0x17
c001951d:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c0019523:	09 f1                	or     ecx,esi
c0019525:	09 c1                	or     ecx,eax
c0019527:	89 cf                	mov    edi,ecx
c0019529:	eb 05                	jmp    c0019530 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c001952b:	90                   	nop
c001952c:	31 ff                	xor    edi,edi
c001952e:	66 90                	xchg   ax,ax
c0019530:	89 f8                	mov    eax,edi
c0019532:	5b                   	pop    ebx
c0019533:	5e                   	pop    esi
c0019534:	5f                   	pop    edi
c0019535:	c3                   	ret    

c0019536 <Vm::fpuInternalTo64(unsigned long long)>:
c0019536:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001953a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001953e:	c3                   	ret    

c001953f <Vm::fpu32ToInternal(unsigned int)>:
c001953f:	57                   	push   edi
c0019540:	31 ff                	xor    edi,edi
c0019542:	56                   	push   esi
c0019543:	53                   	push   ebx
c0019544:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019548:	89 cb                	mov    ebx,ecx
c001954a:	89 ce                	mov    esi,ecx
c001954c:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0019552:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c0019558:	c1 e9 17             	shr    ecx,0x17
c001955b:	89 f0                	mov    eax,esi
c001955d:	0f b6 d1             	movzx  edx,cl
c0019560:	81 c2 80 03 00 00    	add    edx,0x380
c0019566:	89 d1                	mov    ecx,edx
c0019568:	89 fa                	mov    edx,edi
c001956a:	c1 e1 14             	shl    ecx,0x14
c001956d:	0f a4 c2 1d          	shld   edx,eax,0x1d
c0019571:	c1 e0 1d             	shl    eax,0x1d
c0019574:	89 d7                	mov    edi,edx
c0019576:	89 c6                	mov    esi,eax
c0019578:	89 ca                	mov    edx,ecx
c001957a:	89 f0                	mov    eax,esi
c001957c:	09 fa                	or     edx,edi
c001957e:	09 da                	or     edx,ebx
c0019580:	5b                   	pop    ebx
c0019581:	5e                   	pop    esi
c0019582:	5f                   	pop    edi
c0019583:	c3                   	ret    

c0019584 <Vm::fpu64ToInternal(unsigned long long)>:
c0019584:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019588:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001958c:	c3                   	ret    

c001958d <Vm::fpuFloatToLong(unsigned long long)>:
c001958d:	57                   	push   edi
c001958e:	31 c0                	xor    eax,eax
c0019590:	56                   	push   esi
c0019591:	31 d2                	xor    edx,edx
c0019593:	53                   	push   ebx
c0019594:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019598:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001959c:	89 d9                	mov    ecx,ebx
c001959e:	c1 e9 14             	shr    ecx,0x14
c00195a1:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00195a7:	89 cf                	mov    edi,ecx
c00195a9:	81 ef ff 03 00 00    	sub    edi,0x3ff
c00195af:	78 37                	js     c00195e8 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c00195b1:	89 d9                	mov    ecx,ebx
c00195b3:	89 f0                	mov    eax,esi
c00195b5:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c00195bb:	81 c9 00 00 10 00    	or     ecx,0x100000
c00195c1:	89 ca                	mov    edx,ecx
c00195c3:	b9 34 00 00 00       	mov    ecx,0x34
c00195c8:	29 f9                	sub    ecx,edi
c00195ca:	0f ad d0             	shrd   eax,edx,cl
c00195cd:	d3 fa                	sar    edx,cl
c00195cf:	f6 c1 20             	test   cl,0x20
c00195d2:	74 08                	je     c00195dc <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c00195d4:	89 d0                	mov    eax,edx
c00195d6:	c1 fa 1f             	sar    edx,0x1f
c00195d9:	8d 76 00             	lea    esi,[esi+0x0]
c00195dc:	85 db                	test   ebx,ebx
c00195de:	79 08                	jns    c00195e8 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c00195e0:	f7 d8                	neg    eax
c00195e2:	83 d2 00             	adc    edx,0x0
c00195e5:	f7 da                	neg    edx
c00195e7:	90                   	nop
c00195e8:	5b                   	pop    ebx
c00195e9:	5e                   	pop    esi
c00195ea:	5f                   	pop    edi
c00195eb:	c3                   	ret    

c00195ec <Vm::fpuULongToFloat(unsigned long long)>:
c00195ec:	57                   	push   edi
c00195ed:	31 c9                	xor    ecx,ecx
c00195ef:	56                   	push   esi
c00195f0:	53                   	push   ebx
c00195f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00195f5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00195f9:	8d 76 00             	lea    esi,[esi+0x0]
c00195fc:	0f ba e7 14          	bt     edi,0x14
c0019600:	72 0a                	jb     c001960c <Vm::fpuULongToFloat(unsigned long long)+0x20>
c0019602:	01 f6                	add    esi,esi
c0019604:	11 ff                	adc    edi,edi
c0019606:	41                   	inc    ecx
c0019607:	eb f3                	jmp    c00195fc <Vm::fpuULongToFloat(unsigned long long)+0x10>
c0019609:	8d 76 00             	lea    esi,[esi+0x0]
c001960c:	89 fa                	mov    edx,edi
c001960e:	89 f0                	mov    eax,esi
c0019610:	bb 33 04 00 00       	mov    ebx,0x433
c0019615:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001961b:	29 cb                	sub    ebx,ecx
c001961d:	89 d9                	mov    ecx,ebx
c001961f:	5b                   	pop    ebx
c0019620:	c1 e1 14             	shl    ecx,0x14
c0019623:	5e                   	pop    esi
c0019624:	09 ca                	or     edx,ecx
c0019626:	5f                   	pop    edi
c0019627:	c3                   	ret    

c0019628 <Vm::fpuLongToFloat(long long)>:
c0019628:	56                   	push   esi
c0019629:	31 c0                	xor    eax,eax
c001962b:	53                   	push   ebx
c001962c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019630:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019634:	39 c8                	cmp    eax,ecx
c0019636:	19 d8                	sbb    eax,ebx
c0019638:	7d 06                	jge    c0019640 <Vm::fpuLongToFloat(long long)+0x18>
c001963a:	31 f6                	xor    esi,esi
c001963c:	eb 0e                	jmp    c001964c <Vm::fpuLongToFloat(long long)+0x24>
c001963e:	66 90                	xchg   ax,ax
c0019640:	f7 d9                	neg    ecx
c0019642:	be 01 00 00 00       	mov    esi,0x1
c0019647:	83 d3 00             	adc    ebx,0x0
c001964a:	f7 db                	neg    ebx
c001964c:	31 c0                	xor    eax,eax
c001964e:	66 90                	xchg   ax,ax
c0019650:	0f ba e3 14          	bt     ebx,0x14
c0019654:	72 0a                	jb     c0019660 <Vm::fpuLongToFloat(long long)+0x38>
c0019656:	01 c9                	add    ecx,ecx
c0019658:	11 db                	adc    ebx,ebx
c001965a:	40                   	inc    eax
c001965b:	eb f3                	jmp    c0019650 <Vm::fpuLongToFloat(long long)+0x28>
c001965d:	8d 76 00             	lea    esi,[esi+0x0]
c0019660:	ba 33 04 00 00       	mov    edx,0x433
c0019665:	29 c2                	sub    edx,eax
c0019667:	89 c8                	mov    eax,ecx
c0019669:	c1 e2 14             	shl    edx,0x14
c001966c:	89 d9                	mov    ecx,ebx
c001966e:	89 f3                	mov    ebx,esi
c0019670:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019676:	09 ca                	or     edx,ecx
c0019678:	84 db                	test   bl,bl
c001967a:	74 08                	je     c0019684 <Vm::fpuLongToFloat(long long)+0x5c>
c001967c:	81 ca 00 00 00 80    	or     edx,0x80000000
c0019682:	66 90                	xchg   ax,ax
c0019684:	5b                   	pop    ebx
c0019685:	5e                   	pop    esi
c0019686:	c3                   	ret    

c0019687 <Vm::fpuGet0()>:
c0019687:	31 c0                	xor    eax,eax
c0019689:	31 d2                	xor    edx,edx
c001968b:	c3                   	ret    

c001968c <Vm::fpuGet1()>:
c001968c:	b8 01 00 00 00       	mov    eax,0x1
c0019691:	31 d2                	xor    edx,edx
c0019693:	c3                   	ret    

c0019694 <Vm::fpuGetPi()>:
c0019694:	b8 03 00 00 00       	mov    eax,0x3
c0019699:	31 d2                	xor    edx,edx
c001969b:	c3                   	ret    

c001969c <Vm::fpuGetLog2E()>:
c001969c:	83 ec 18             	sub    esp,0x18
c001969f:	68 4c 48 02 c0       	push   0xc002484c
c00196a4:	e8 56 ac ff ff       	call   c00142ff <Krnl::panic(char const*)>
c00196a9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00196ae:	31 d2                	xor    edx,edx
c00196b0:	83 c4 1c             	add    esp,0x1c
c00196b3:	c3                   	ret    

c00196b4 <Vm::fpuGetLogE2()>:
c00196b4:	83 ec 18             	sub    esp,0x18
c00196b7:	68 58 48 02 c0       	push   0xc0024858
c00196bc:	e8 3e ac ff ff       	call   c00142ff <Krnl::panic(char const*)>
c00196c1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00196c6:	31 d2                	xor    edx,edx
c00196c8:	83 c4 1c             	add    esp,0x1c
c00196cb:	c3                   	ret    

c00196cc <Vm::fpuGetLog210()>:
c00196cc:	83 ec 18             	sub    esp,0x18
c00196cf:	68 64 48 02 c0       	push   0xc0024864
c00196d4:	e8 26 ac ff ff       	call   c00142ff <Krnl::panic(char const*)>
c00196d9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00196de:	31 d2                	xor    edx,edx
c00196e0:	83 c4 1c             	add    esp,0x1c
c00196e3:	c3                   	ret    

c00196e4 <Vm::fpuGetLog102()>:
c00196e4:	83 ec 18             	sub    esp,0x18
c00196e7:	68 71 48 02 c0       	push   0xc0024871
c00196ec:	e8 0e ac ff ff       	call   c00142ff <Krnl::panic(char const*)>
c00196f1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00196f6:	31 d2                	xor    edx,edx
c00196f8:	83 c4 1c             	add    esp,0x1c
c00196fb:	c3                   	ret    

c00196fc <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c00196fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019700:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019708:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001970c:	0f 92 c0             	setb   al
c001970f:	c3                   	ret    

c0019710 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0019710:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019718:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001971c:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c0019720:	09 c2                	or     edx,eax
c0019722:	0f 94 c0             	sete   al
c0019725:	c3                   	ret    

c0019726 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0019726:	57                   	push   edi
c0019727:	56                   	push   esi
c0019728:	53                   	push   ebx
c0019729:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001972d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019731:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019735:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019739:	57                   	push   edi
c001973a:	56                   	push   esi
c001973b:	53                   	push   ebx
c001973c:	51                   	push   ecx
c001973d:	e8 ce ff ff ff       	call   c0019710 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c0019742:	83 c4 10             	add    esp,0x10
c0019745:	88 c2                	mov    dl,al
c0019747:	31 c0                	xor    eax,eax
c0019749:	84 d2                	test   dl,dl
c001974b:	75 0f                	jne    c001975c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c001974d:	57                   	push   edi
c001974e:	56                   	push   esi
c001974f:	53                   	push   ebx
c0019750:	51                   	push   ecx
c0019751:	e8 a6 ff ff ff       	call   c00196fc <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0019756:	83 c4 10             	add    esp,0x10
c0019759:	8d 76 00             	lea    esi,[esi+0x0]
c001975c:	83 e0 01             	and    eax,0x1
c001975f:	5b                   	pop    ebx
c0019760:	88 c1                	mov    cl,al
c0019762:	83 e2 01             	and    edx,0x1
c0019765:	a0 c1 76 02 c0       	mov    al,ds:0xc00276c1
c001976a:	c1 e2 06             	shl    edx,0x6
c001976d:	83 e0 ba             	and    eax,0xffffffba
c0019770:	5e                   	pop    esi
c0019771:	09 c8                	or     eax,ecx
c0019773:	5f                   	pop    edi
c0019774:	09 d0                	or     eax,edx
c0019776:	a2 c1 76 02 c0       	mov    ds:0xc00276c1,al
c001977b:	c3                   	ret    

c001977c <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001977c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019780:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019784:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0019788:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001978c:	c3                   	ret    

c001978d <Vm::fpuAbs(unsigned long long)>:
c001978d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019791:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019795:	c3                   	ret    

c0019796 <Vm::fpuChs(unsigned long long)>:
c0019796:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001979a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001979e:	f7 d8                	neg    eax
c00197a0:	83 d2 00             	adc    edx,0x0
c00197a3:	f7 da                	neg    edx
c00197a5:	c3                   	ret    

c00197a6 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c00197a6:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c00197aa:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c00197af:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c00197b3:	eb c7                	jmp    c001977c <Vm::fpuAdd(unsigned long long, unsigned long long)>

c00197b5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c00197b5:	53                   	push   ebx
c00197b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00197be:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00197c2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00197c6:	0f af ca             	imul   ecx,edx
c00197c9:	0f af d8             	imul   ebx,eax
c00197cc:	f7 e2                	mul    edx
c00197ce:	01 d9                	add    ecx,ebx
c00197d0:	5b                   	pop    ebx
c00197d1:	01 ca                	add    edx,ecx
c00197d3:	c3                   	ret    

c00197d4 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c00197d4:	83 ec 0c             	sub    esp,0xc
c00197d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00197db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00197df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00197e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00197e7:	e8 b8 76 00 00       	call   c0020ea4 <__udivdi3>
c00197ec:	83 c4 1c             	add    esp,0x1c
c00197ef:	c3                   	ret    

c00197f0 <Vm::fpuSquare(unsigned long long)>:
c00197f0:	50                   	push   eax
c00197f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00197f9:	52                   	push   edx
c00197fa:	50                   	push   eax
c00197fb:	52                   	push   edx
c00197fc:	50                   	push   eax
c00197fd:	e8 b3 ff ff ff       	call   c00197b5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019802:	83 c4 14             	add    esp,0x14
c0019805:	c3                   	ret    

c0019806 <Vm::fpuGetReg(int)>:
c0019806:	83 ec 0c             	sub    esp,0xc
c0019809:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001980e:	76 10                	jbe    c0019820 <Vm::fpuGetReg(int)+0x1a>
c0019810:	83 ec 0c             	sub    esp,0xc
c0019813:	68 7e 48 02 c0       	push   0xc002487e
c0019818:	e8 e2 aa ff ff       	call   c00142ff <Krnl::panic(char const*)>
c001981d:	83 c4 10             	add    esp,0x10
c0019820:	a0 c1 76 02 c0       	mov    al,ds:0xc00276c1
c0019825:	b9 08 00 00 00       	mov    ecx,0x8
c001982a:	c0 e8 03             	shr    al,0x3
c001982d:	83 e0 07             	and    eax,0x7
c0019830:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0019834:	99                   	cdq    
c0019835:	f7 f9                	idiv   ecx
c0019837:	8b 04 d5 c4 76 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd893c]
c001983e:	8b 14 d5 c8 76 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd8938]
c0019845:	83 c4 0c             	add    esp,0xc
c0019848:	c3                   	ret    

c0019849 <Vm::fpuSetReg(int, unsigned long long)>:
c0019849:	57                   	push   edi
c001984a:	56                   	push   esi
c001984b:	52                   	push   edx
c001984c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019850:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019854:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019859:	76 11                	jbe    c001986c <Vm::fpuSetReg(int, unsigned long long)+0x23>
c001985b:	83 ec 0c             	sub    esp,0xc
c001985e:	68 91 48 02 c0       	push   0xc0024891
c0019863:	e8 97 aa ff ff       	call   c00142ff <Krnl::panic(char const*)>
c0019868:	83 c4 10             	add    esp,0x10
c001986b:	90                   	nop
c001986c:	a0 c1 76 02 c0       	mov    al,ds:0xc00276c1
c0019871:	b9 08 00 00 00       	mov    ecx,0x8
c0019876:	c0 e8 03             	shr    al,0x3
c0019879:	83 e0 07             	and    eax,0x7
c001987c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0019880:	99                   	cdq    
c0019881:	f7 f9                	idiv   ecx
c0019883:	89 34 d5 c4 76 02 c0 	mov    DWORD PTR [edx*8-0x3ffd893c],esi
c001988a:	89 3c d5 c8 76 02 c0 	mov    DWORD PTR [edx*8-0x3ffd8938],edi
c0019891:	58                   	pop    eax
c0019892:	5e                   	pop    esi
c0019893:	5f                   	pop    edi
c0019894:	c3                   	ret    

c0019895 <Vm::fpuPush(unsigned long long)>:
c0019895:	a0 c1 76 02 c0       	mov    al,ds:0xc00276c1
c001989a:	c0 e8 03             	shr    al,0x3
c001989d:	83 e0 07             	and    eax,0x7
c00198a0:	83 c0 07             	add    eax,0x7
c00198a3:	88 c2                	mov    dl,al
c00198a5:	83 e0 07             	and    eax,0x7
c00198a8:	83 e2 07             	and    edx,0x7
c00198ab:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c00198b2:	8a 15 c1 76 02 c0    	mov    dl,BYTE PTR ds:0xc00276c1
c00198b8:	83 e2 c7             	and    edx,0xffffffc7
c00198bb:	09 ca                	or     edx,ecx
c00198bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00198c1:	88 15 c1 76 02 c0    	mov    BYTE PTR ds:0xc00276c1,dl
c00198c7:	89 0c c5 c8 76 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8938],ecx
c00198ce:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00198d2:	89 14 c5 c4 76 02 c0 	mov    DWORD PTR [eax*8-0x3ffd893c],edx
c00198d9:	a1 04 77 02 c0       	mov    eax,ds:0xc0027704
c00198de:	83 f8 08             	cmp    eax,0x8
c00198e1:	75 09                	jne    c00198ec <Vm::fpuPush(unsigned long long)+0x57>
c00198e3:	80 0d c0 76 02 c0 40 	or     BYTE PTR ds:0xc00276c0,0x40
c00198ea:	c3                   	ret    
c00198eb:	90                   	nop
c00198ec:	40                   	inc    eax
c00198ed:	a3 04 77 02 c0       	mov    ds:0xc0027704,eax
c00198f2:	c3                   	ret    

c00198f3 <Vm::fpuPop()>:
c00198f3:	8a 0d c1 76 02 c0    	mov    cl,BYTE PTR ds:0xc00276c1
c00198f9:	53                   	push   ebx
c00198fa:	c0 e9 03             	shr    cl,0x3
c00198fd:	8a 1d c1 76 02 c0    	mov    bl,BYTE PTR ds:0xc00276c1
c0019903:	83 e1 07             	and    ecx,0x7
c0019906:	83 e3 c7             	and    ebx,0xffffffc7
c0019909:	8b 04 cd c4 76 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd893c]
c0019910:	8b 14 cd c8 76 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd8938]
c0019917:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001991e:	83 e1 38             	and    ecx,0x38
c0019921:	09 d9                	or     ecx,ebx
c0019923:	88 0d c1 76 02 c0    	mov    BYTE PTR ds:0xc00276c1,cl
c0019929:	8b 0d 04 77 02 c0    	mov    ecx,DWORD PTR ds:0xc0027704
c001992f:	85 c9                	test   ecx,ecx
c0019931:	74 09                	je     c001993c <Vm::fpuPop()+0x49>
c0019933:	49                   	dec    ecx
c0019934:	89 0d 04 77 02 c0    	mov    DWORD PTR ds:0xc0027704,ecx
c001993a:	eb 08                	jmp    c0019944 <Vm::fpuPop()+0x51>
c001993c:	80 0d c0 76 02 c0 40 	or     BYTE PTR ds:0xc00276c0,0x40
c0019943:	90                   	nop
c0019944:	5b                   	pop    ebx
c0019945:	c3                   	ret    

c0019946 <Vm::x87Handler(regs*)>:
c0019946:	55                   	push   ebp
c0019947:	57                   	push   edi
c0019948:	56                   	push   esi
c0019949:	53                   	push   ebx
c001994a:	83 ec 1c             	sub    esp,0x1c
c001994d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019951:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c0019956:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0019959:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0019961:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0019965:	50                   	push   eax
c0019966:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001996a:	50                   	push   eax
c001996b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001996f:	50                   	push   eax
c0019970:	53                   	push   ebx
c0019971:	e8 a2 a0 ff ff       	call   c0013a18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0019976:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0019979:	83 c4 10             	add    esp,0x10
c001997c:	89 c6                	mov    esi,eax
c001997e:	80 fa d9             	cmp    dl,0xd9
c0019981:	0f 85 79 01 00 00    	jne    c0019b00 <Vm::x87Handler(regs*)+0x1ba>
c0019987:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001998b:	8d 50 20             	lea    edx,[eax+0x20]
c001998e:	80 fa 0e             	cmp    dl,0xe
c0019991:	0f 87 a5 00 00 00    	ja     c0019a3c <Vm::x87Handler(regs*)+0xf6>
c0019997:	0f b6 d2             	movzx  edx,dl
c001999a:	ff 24 95 a4 48 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdb75c]
c00199a1:	8d 76 00             	lea    esi,[esi+0x0]
c00199a4:	e8 de fc ff ff       	call   c0019687 <Vm::fpuGet0()>
c00199a9:	eb 09                	jmp    c00199b4 <Vm::x87Handler(regs*)+0x6e>
c00199ab:	90                   	nop
c00199ac:	e8 db fc ff ff       	call   c001968c <Vm::fpuGet1()>
c00199b1:	8d 76 00             	lea    esi,[esi+0x0]
c00199b4:	57                   	push   edi
c00199b5:	57                   	push   edi
c00199b6:	66 90                	xchg   ax,ax
c00199b8:	52                   	push   edx
c00199b9:	50                   	push   eax
c00199ba:	e8 d6 fe ff ff       	call   c0019895 <Vm::fpuPush(unsigned long long)>
c00199bf:	90                   	nop
c00199c0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00199c4:	83 c4 10             	add    esp,0x10
c00199c7:	90                   	nop
c00199c8:	b0 01                	mov    al,0x1
c00199ca:	e9 89 0a 00 00       	jmp    c001a458 <Vm::x87Handler(regs*)+0xb12>
c00199cf:	90                   	nop
c00199d0:	83 ec 0c             	sub    esp,0xc
c00199d3:	6a 00                	push   0x0
c00199d5:	e8 2c fe ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c00199da:	59                   	pop    ecx
c00199db:	5e                   	pop    esi
c00199dc:	52                   	push   edx
c00199dd:	50                   	push   eax
c00199de:	e8 b3 fd ff ff       	call   c0019796 <Vm::fpuChs(unsigned long long)>
c00199e3:	eb 17                	jmp    c00199fc <Vm::x87Handler(regs*)+0xb6>
c00199e5:	8d 76 00             	lea    esi,[esi+0x0]
c00199e8:	83 ec 0c             	sub    esp,0xc
c00199eb:	6a 00                	push   0x0
c00199ed:	e8 14 fe ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c00199f2:	5f                   	pop    edi
c00199f3:	5d                   	pop    ebp
c00199f4:	52                   	push   edx
c00199f5:	50                   	push   eax
c00199f6:	e8 92 fd ff ff       	call   c001978d <Vm::fpuAbs(unsigned long long)>
c00199fb:	90                   	nop
c00199fc:	83 c4 0c             	add    esp,0xc
c00199ff:	90                   	nop
c0019a00:	52                   	push   edx
c0019a01:	50                   	push   eax
c0019a02:	66 90                	xchg   ax,ax
c0019a04:	6a 00                	push   0x0
c0019a06:	66 90                	xchg   ax,ax
c0019a08:	e8 3c fe ff ff       	call   c0019849 <Vm::fpuSetReg(int, unsigned long long)>
c0019a0d:	eb b1                	jmp    c00199c0 <Vm::x87Handler(regs*)+0x7a>
c0019a0f:	90                   	nop
c0019a10:	e8 b7 fc ff ff       	call   c00196cc <Vm::fpuGetLog210()>
c0019a15:	eb 9d                	jmp    c00199b4 <Vm::x87Handler(regs*)+0x6e>
c0019a17:	90                   	nop
c0019a18:	e8 7f fc ff ff       	call   c001969c <Vm::fpuGetLog2E()>
c0019a1d:	eb 95                	jmp    c00199b4 <Vm::x87Handler(regs*)+0x6e>
c0019a1f:	90                   	nop
c0019a20:	e8 6f fc ff ff       	call   c0019694 <Vm::fpuGetPi()>
c0019a25:	eb 8d                	jmp    c00199b4 <Vm::x87Handler(regs*)+0x6e>
c0019a27:	90                   	nop
c0019a28:	e8 b7 fc ff ff       	call   c00196e4 <Vm::fpuGetLog102()>
c0019a2d:	eb 85                	jmp    c00199b4 <Vm::x87Handler(regs*)+0x6e>
c0019a2f:	90                   	nop
c0019a30:	e8 7f fc ff ff       	call   c00196b4 <Vm::fpuGetLogE2()>
c0019a35:	e9 7a ff ff ff       	jmp    c00199b4 <Vm::x87Handler(regs*)+0x6e>
c0019a3a:	66 90                	xchg   ax,ax
c0019a3c:	8d 50 40             	lea    edx,[eax+0x40]
c0019a3f:	80 fa 07             	cmp    dl,0x7
c0019a42:	77 18                	ja     c0019a5c <Vm::x87Handler(regs*)+0x116>
c0019a44:	83 ec 0c             	sub    esp,0xc
c0019a47:	2d c0 00 00 00       	sub    eax,0xc0
c0019a4c:	50                   	push   eax
c0019a4d:	e8 b4 fd ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019a52:	59                   	pop    ecx
c0019a53:	5e                   	pop    esi
c0019a54:	e9 5f ff ff ff       	jmp    c00199b8 <Vm::x87Handler(regs*)+0x72>
c0019a59:	8d 76 00             	lea    esi,[esi+0x0]
c0019a5c:	8d 50 38             	lea    edx,[eax+0x38]
c0019a5f:	80 fa 07             	cmp    dl,0x7
c0019a62:	77 3c                	ja     c0019aa0 <Vm::x87Handler(regs*)+0x15a>
c0019a64:	83 ec 0c             	sub    esp,0xc
c0019a67:	2d c8 00 00 00       	sub    eax,0xc8
c0019a6c:	50                   	push   eax
c0019a6d:	e8 94 fd ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019a72:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019a79:	89 c6                	mov    esi,eax
c0019a7b:	89 d7                	mov    edi,edx
c0019a7d:	e8 84 fd ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019a82:	83 c4 0c             	add    esp,0xc
c0019a85:	52                   	push   edx
c0019a86:	50                   	push   eax
c0019a87:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019a8b:	2d c8 00 00 00       	sub    eax,0xc8
c0019a90:	50                   	push   eax
c0019a91:	e8 b3 fd ff ff       	call   c0019849 <Vm::fpuSetReg(int, unsigned long long)>
c0019a96:	83 c4 0c             	add    esp,0xc
c0019a99:	57                   	push   edi
c0019a9a:	56                   	push   esi
c0019a9b:	e9 64 ff ff ff       	jmp    c0019a04 <Vm::x87Handler(regs*)+0xbe>
c0019aa0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019aa4:	84 d2                	test   dl,dl
c0019aa6:	75 10                	jne    c0019ab8 <Vm::x87Handler(regs*)+0x172>
c0019aa8:	83 ec 0c             	sub    esp,0xc
c0019aab:	ff 36                	push   DWORD PTR [esi]
c0019aad:	e8 8d fa ff ff       	call   c001953f <Vm::fpu32ToInternal(unsigned int)>
c0019ab2:	e9 c9 00 00 00       	jmp    c0019b80 <Vm::x87Handler(regs*)+0x23a>
c0019ab7:	90                   	nop
c0019ab8:	80 fa 03             	cmp    dl,0x3
c0019abb:	75 13                	jne    c0019ad0 <Vm::x87Handler(regs*)+0x18a>
c0019abd:	e8 31 fe ff ff       	call   c00198f3 <Vm::fpuPop()>
c0019ac2:	55                   	push   ebp
c0019ac3:	55                   	push   ebp
c0019ac4:	52                   	push   edx
c0019ac5:	50                   	push   eax
c0019ac6:	e8 0d fa ff ff       	call   c00194d8 <Vm::fpuInternalTo32(unsigned long long)>
c0019acb:	e9 90 00 00 00       	jmp    c0019b60 <Vm::x87Handler(regs*)+0x21a>
c0019ad0:	80 fa 05             	cmp    dl,0x5
c0019ad3:	75 0f                	jne    c0019ae4 <Vm::x87Handler(regs*)+0x19e>
c0019ad5:	66 8b 06             	mov    ax,WORD PTR [esi]
c0019ad8:	66 a3 c2 76 02 c0    	mov    ds:0xc00276c2,ax
c0019ade:	e9 ed 00 00 00       	jmp    c0019bd0 <Vm::x87Handler(regs*)+0x28a>
c0019ae3:	90                   	nop
c0019ae4:	31 c0                	xor    eax,eax
c0019ae6:	80 fa 07             	cmp    dl,0x7
c0019ae9:	0f 85 69 09 00 00    	jne    c001a458 <Vm::x87Handler(regs*)+0xb12>
c0019aef:	66 a1 c2 76 02 c0    	mov    ax,ds:0xc00276c2
c0019af5:	66 89 06             	mov    WORD PTR [esi],ax
c0019af8:	e9 d3 00 00 00       	jmp    c0019bd0 <Vm::x87Handler(regs*)+0x28a>
c0019afd:	8d 76 00             	lea    esi,[esi+0x0]
c0019b00:	80 fa d8             	cmp    dl,0xd8
c0019b03:	0f 84 d3 00 00 00    	je     c0019bdc <Vm::x87Handler(regs*)+0x296>
c0019b09:	80 fa dc             	cmp    dl,0xdc
c0019b0c:	0f 84 2a 02 00 00    	je     c0019d3c <Vm::x87Handler(regs*)+0x3f6>
c0019b12:	80 fa de             	cmp    dl,0xde
c0019b15:	0f 84 f1 02 00 00    	je     c0019e0c <Vm::x87Handler(regs*)+0x4c6>
c0019b1b:	80 fa dd             	cmp    dl,0xdd
c0019b1e:	0f 84 94 04 00 00    	je     c0019fb8 <Vm::x87Handler(regs*)+0x672>
c0019b24:	80 fa da             	cmp    dl,0xda
c0019b27:	0f 84 5f 05 00 00    	je     c001a08c <Vm::x87Handler(regs*)+0x746>
c0019b2d:	80 fa df             	cmp    dl,0xdf
c0019b30:	0f 84 aa 05 00 00    	je     c001a0e0 <Vm::x87Handler(regs*)+0x79a>
c0019b36:	31 c0                	xor    eax,eax
c0019b38:	80 fa db             	cmp    dl,0xdb
c0019b3b:	0f 85 17 09 00 00    	jne    c001a458 <Vm::x87Handler(regs*)+0xb12>
c0019b41:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019b45:	80 fa 03             	cmp    dl,0x3
c0019b48:	0f 85 c2 06 00 00    	jne    c001a210 <Vm::x87Handler(regs*)+0x8ca>
c0019b4e:	e8 a0 fd ff ff       	call   c00198f3 <Vm::fpuPop()>
c0019b53:	55                   	push   ebp
c0019b54:	55                   	push   ebp
c0019b55:	8d 76 00             	lea    esi,[esi+0x0]
c0019b58:	52                   	push   edx
c0019b59:	50                   	push   eax
c0019b5a:	e8 2e fa ff ff       	call   c001958d <Vm::fpuFloatToLong(unsigned long long)>
c0019b5f:	90                   	nop
c0019b60:	83 c4 10             	add    esp,0x10
c0019b63:	89 06                	mov    DWORD PTR [esi],eax
c0019b65:	eb 69                	jmp    c0019bd0 <Vm::x87Handler(regs*)+0x28a>
c0019b67:	90                   	nop
c0019b68:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019b6c:	84 d2                	test   dl,dl
c0019b6e:	0f 85 2c 06 00 00    	jne    c001a1a0 <Vm::x87Handler(regs*)+0x85a>
c0019b74:	57                   	push   edi
c0019b75:	57                   	push   edi
c0019b76:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019b79:	ff 36                	push   DWORD PTR [esi]
c0019b7b:	e8 04 fa ff ff       	call   c0019584 <Vm::fpu64ToInternal(unsigned long long)>
c0019b80:	5e                   	pop    esi
c0019b81:	5f                   	pop    edi
c0019b82:	52                   	push   edx
c0019b83:	50                   	push   eax
c0019b84:	e8 0c fd ff ff       	call   c0019895 <Vm::fpuPush(unsigned long long)>
c0019b89:	8d 76 00             	lea    esi,[esi+0x0]
c0019b8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b90:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0019b93:	e9 2c fe ff ff       	jmp    c00199c4 <Vm::x87Handler(regs*)+0x7e>
c0019b98:	80 fa 03             	cmp    dl,0x3
c0019b9b:	0f 85 2b 07 00 00    	jne    c001a2cc <Vm::x87Handler(regs*)+0x986>
c0019ba1:	57                   	push   edi
c0019ba2:	57                   	push   edi
c0019ba3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019ba6:	ff 36                	push   DWORD PTR [esi]
c0019ba8:	e8 d7 f9 ff ff       	call   c0019584 <Vm::fpu64ToInternal(unsigned long long)>
c0019bad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019bb4:	89 c6                	mov    esi,eax
c0019bb6:	89 d7                	mov    edi,edx
c0019bb8:	e8 49 fc ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019bbd:	57                   	push   edi
c0019bbe:	56                   	push   esi
c0019bbf:	52                   	push   edx
c0019bc0:	50                   	push   eax
c0019bc1:	e8 60 fb ff ff       	call   c0019726 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0019bc6:	83 c4 20             	add    esp,0x20
c0019bc9:	e8 25 fd ff ff       	call   c00198f3 <Vm::fpuPop()>
c0019bce:	66 90                	xchg   ax,ax
c0019bd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019bd4:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0019bd7:	e9 ec fd ff ff       	jmp    c00199c8 <Vm::x87Handler(regs*)+0x82>
c0019bdc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019be0:	8d 50 40             	lea    edx,[eax+0x40]
c0019be3:	80 fa 07             	cmp    dl,0x7
c0019be6:	77 2c                	ja     c0019c14 <Vm::x87Handler(regs*)+0x2ce>
c0019be8:	83 ec 0c             	sub    esp,0xc
c0019beb:	2d c0 00 00 00       	sub    eax,0xc0
c0019bf0:	50                   	push   eax
c0019bf1:	e8 10 fc ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019bf6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019bfd:	89 c6                	mov    esi,eax
c0019bff:	89 d7                	mov    edi,edx
c0019c01:	e8 00 fc ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019c06:	57                   	push   edi
c0019c07:	56                   	push   esi
c0019c08:	52                   	push   edx
c0019c09:	50                   	push   eax
c0019c0a:	e8 6d fb ff ff       	call   c001977c <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019c0f:	eb 33                	jmp    c0019c44 <Vm::x87Handler(regs*)+0x2fe>
c0019c11:	8d 76 00             	lea    esi,[esi+0x0]
c0019c14:	8d 50 38             	lea    edx,[eax+0x38]
c0019c17:	80 fa 07             	cmp    dl,0x7
c0019c1a:	77 30                	ja     c0019c4c <Vm::x87Handler(regs*)+0x306>
c0019c1c:	83 ec 0c             	sub    esp,0xc
c0019c1f:	2d c8 00 00 00       	sub    eax,0xc8
c0019c24:	50                   	push   eax
c0019c25:	e8 dc fb ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019c2a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019c31:	89 c6                	mov    esi,eax
c0019c33:	89 d7                	mov    edi,edx
c0019c35:	e8 cc fb ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019c3a:	57                   	push   edi
c0019c3b:	56                   	push   esi
c0019c3c:	52                   	push   edx
c0019c3d:	50                   	push   eax
c0019c3e:	e8 72 fb ff ff       	call   c00197b5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019c43:	90                   	nop
c0019c44:	83 c4 1c             	add    esp,0x1c
c0019c47:	e9 b4 fd ff ff       	jmp    c0019a00 <Vm::x87Handler(regs*)+0xba>
c0019c4c:	8d 50 30             	lea    edx,[eax+0x30]
c0019c4f:	80 fa 07             	cmp    dl,0x7
c0019c52:	77 10                	ja     c0019c64 <Vm::x87Handler(regs*)+0x31e>
c0019c54:	83 ec 0c             	sub    esp,0xc
c0019c57:	2d d0 00 00 00       	sub    eax,0xd0
c0019c5c:	e9 c3 03 00 00       	jmp    c001a024 <Vm::x87Handler(regs*)+0x6de>
c0019c61:	8d 76 00             	lea    esi,[esi+0x0]
c0019c64:	8d 50 28             	lea    edx,[eax+0x28]
c0019c67:	80 fa 07             	cmp    dl,0x7
c0019c6a:	77 10                	ja     c0019c7c <Vm::x87Handler(regs*)+0x336>
c0019c6c:	83 ec 0c             	sub    esp,0xc
c0019c6f:	2d d8 00 00 00       	sub    eax,0xd8
c0019c74:	e9 e7 03 00 00       	jmp    c001a060 <Vm::x87Handler(regs*)+0x71a>
c0019c79:	8d 76 00             	lea    esi,[esi+0x0]
c0019c7c:	8d 50 20             	lea    edx,[eax+0x20]
c0019c7f:	80 fa 07             	cmp    dl,0x7
c0019c82:	77 1c                	ja     c0019ca0 <Vm::x87Handler(regs*)+0x35a>
c0019c84:	83 ec 0c             	sub    esp,0xc
c0019c87:	2d e0 00 00 00       	sub    eax,0xe0
c0019c8c:	50                   	push   eax
c0019c8d:	e8 74 fb ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019c92:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019c99:	89 c6                	mov    esi,eax
c0019c9b:	89 d7                	mov    edi,edx
c0019c9d:	eb 25                	jmp    c0019cc4 <Vm::x87Handler(regs*)+0x37e>
c0019c9f:	90                   	nop
c0019ca0:	8d 50 18             	lea    edx,[eax+0x18]
c0019ca3:	80 fa 07             	cmp    dl,0x7
c0019ca6:	77 30                	ja     c0019cd8 <Vm::x87Handler(regs*)+0x392>
c0019ca8:	83 ec 0c             	sub    esp,0xc
c0019cab:	6a 00                	push   0x0
c0019cad:	e8 54 fb ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019cb2:	89 c6                	mov    esi,eax
c0019cb4:	89 d7                	mov    edi,edx
c0019cb6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019cba:	2d e8 00 00 00       	sub    eax,0xe8
c0019cbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cc2:	66 90                	xchg   ax,ax
c0019cc4:	e8 3d fb ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019cc9:	57                   	push   edi
c0019cca:	56                   	push   esi
c0019ccb:	52                   	push   edx
c0019ccc:	50                   	push   eax
c0019ccd:	e8 d4 fa ff ff       	call   c00197a6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019cd2:	e9 6d ff ff ff       	jmp    c0019c44 <Vm::x87Handler(regs*)+0x2fe>
c0019cd7:	90                   	nop
c0019cd8:	8d 50 10             	lea    edx,[eax+0x10]
c0019cdb:	80 fa 07             	cmp    dl,0x7
c0019cde:	77 1c                	ja     c0019cfc <Vm::x87Handler(regs*)+0x3b6>
c0019ce0:	83 ec 0c             	sub    esp,0xc
c0019ce3:	2d f0 00 00 00       	sub    eax,0xf0
c0019ce8:	50                   	push   eax
c0019ce9:	e8 18 fb ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019cee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019cf5:	89 c6                	mov    esi,eax
c0019cf7:	89 d7                	mov    edi,edx
c0019cf9:	eb 25                	jmp    c0019d20 <Vm::x87Handler(regs*)+0x3da>
c0019cfb:	90                   	nop
c0019cfc:	3c f7                	cmp    al,0xf7
c0019cfe:	0f 86 00 04 00 00    	jbe    c001a104 <Vm::x87Handler(regs*)+0x7be>
c0019d04:	83 ec 0c             	sub    esp,0xc
c0019d07:	6a 00                	push   0x0
c0019d09:	e8 f8 fa ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019d0e:	89 c6                	mov    esi,eax
c0019d10:	89 d7                	mov    edi,edx
c0019d12:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d16:	2d f8 00 00 00       	sub    eax,0xf8
c0019d1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d1e:	66 90                	xchg   ax,ax
c0019d20:	e8 e1 fa ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019d25:	57                   	push   edi
c0019d26:	56                   	push   esi
c0019d27:	52                   	push   edx
c0019d28:	50                   	push   eax
c0019d29:	e8 a6 fa ff ff       	call   c00197d4 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019d2e:	83 c4 1c             	add    esp,0x1c
c0019d31:	52                   	push   edx
c0019d32:	50                   	push   eax
c0019d33:	6a 00                	push   0x0
c0019d35:	e9 6a 02 00 00       	jmp    c0019fa4 <Vm::x87Handler(regs*)+0x65e>
c0019d3a:	66 90                	xchg   ax,ax
c0019d3c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d40:	8d 50 40             	lea    edx,[eax+0x40]
c0019d43:	80 fa 07             	cmp    dl,0x7
c0019d46:	77 38                	ja     c0019d80 <Vm::x87Handler(regs*)+0x43a>
c0019d48:	83 ec 0c             	sub    esp,0xc
c0019d4b:	2d c0 00 00 00       	sub    eax,0xc0
c0019d50:	50                   	push   eax
c0019d51:	e8 b0 fa ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019d56:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019d5d:	89 c6                	mov    esi,eax
c0019d5f:	89 d7                	mov    edi,edx
c0019d61:	e8 a0 fa ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019d66:	57                   	push   edi
c0019d67:	56                   	push   esi
c0019d68:	52                   	push   edx
c0019d69:	50                   	push   eax
c0019d6a:	e8 0d fa ff ff       	call   c001977c <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019d6f:	83 c4 1c             	add    esp,0x1c
c0019d72:	52                   	push   edx
c0019d73:	50                   	push   eax
c0019d74:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d78:	2d c0 00 00 00       	sub    eax,0xc0
c0019d7d:	eb 41                	jmp    c0019dc0 <Vm::x87Handler(regs*)+0x47a>
c0019d7f:	90                   	nop
c0019d80:	8d 50 38             	lea    edx,[eax+0x38]
c0019d83:	80 fa 07             	cmp    dl,0x7
c0019d86:	77 40                	ja     c0019dc8 <Vm::x87Handler(regs*)+0x482>
c0019d88:	83 ec 0c             	sub    esp,0xc
c0019d8b:	2d c8 00 00 00       	sub    eax,0xc8
c0019d90:	50                   	push   eax
c0019d91:	e8 70 fa ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019d96:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019d9d:	89 c6                	mov    esi,eax
c0019d9f:	89 d7                	mov    edi,edx
c0019da1:	e8 60 fa ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019da6:	57                   	push   edi
c0019da7:	56                   	push   esi
c0019da8:	52                   	push   edx
c0019da9:	50                   	push   eax
c0019daa:	e8 06 fa ff ff       	call   c00197b5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019daf:	83 c4 1c             	add    esp,0x1c
c0019db2:	52                   	push   edx
c0019db3:	50                   	push   eax
c0019db4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019db8:	2d c8 00 00 00       	sub    eax,0xc8
c0019dbd:	8d 76 00             	lea    esi,[esi+0x0]
c0019dc0:	50                   	push   eax
c0019dc1:	e9 42 fc ff ff       	jmp    c0019a08 <Vm::x87Handler(regs*)+0xc2>
c0019dc6:	66 90                	xchg   ax,ax
c0019dc8:	83 c0 18             	add    eax,0x18
c0019dcb:	3c 07                	cmp    al,0x7
c0019dcd:	0f 87 6d 04 00 00    	ja     c001a240 <Vm::x87Handler(regs*)+0x8fa>
c0019dd3:	83 ec 0c             	sub    esp,0xc
c0019dd6:	6a 00                	push   0x0
c0019dd8:	e8 29 fa ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019ddd:	89 c6                	mov    esi,eax
c0019ddf:	89 d7                	mov    edi,edx
c0019de1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019de5:	2d e8 00 00 00       	sub    eax,0xe8
c0019dea:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ded:	e8 14 fa ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019df2:	57                   	push   edi
c0019df3:	56                   	push   esi
c0019df4:	52                   	push   edx
c0019df5:	50                   	push   eax
c0019df6:	e8 ab f9 ff ff       	call   c00197a6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019dfb:	83 c4 1c             	add    esp,0x1c
c0019dfe:	52                   	push   edx
c0019dff:	50                   	push   eax
c0019e00:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e04:	2d e8 00 00 00       	sub    eax,0xe8
c0019e09:	eb b5                	jmp    c0019dc0 <Vm::x87Handler(regs*)+0x47a>
c0019e0b:	90                   	nop
c0019e0c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e10:	8d 50 40             	lea    edx,[eax+0x40]
c0019e13:	80 fa 07             	cmp    dl,0x7
c0019e16:	77 3c                	ja     c0019e54 <Vm::x87Handler(regs*)+0x50e>
c0019e18:	83 ec 0c             	sub    esp,0xc
c0019e1b:	2d c0 00 00 00       	sub    eax,0xc0
c0019e20:	50                   	push   eax
c0019e21:	e8 e0 f9 ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019e26:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019e2d:	89 c6                	mov    esi,eax
c0019e2f:	89 d7                	mov    edi,edx
c0019e31:	e8 d0 f9 ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019e36:	57                   	push   edi
c0019e37:	56                   	push   esi
c0019e38:	52                   	push   edx
c0019e39:	50                   	push   eax
c0019e3a:	e8 3d f9 ff ff       	call   c001977c <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019e3f:	83 c4 1c             	add    esp,0x1c
c0019e42:	52                   	push   edx
c0019e43:	50                   	push   eax
c0019e44:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e48:	2d c0 00 00 00       	sub    eax,0xc0
c0019e4d:	e9 b2 01 00 00       	jmp    c001a004 <Vm::x87Handler(regs*)+0x6be>
c0019e52:	66 90                	xchg   ax,ax
c0019e54:	8d 50 20             	lea    edx,[eax+0x20]
c0019e57:	80 fa 07             	cmp    dl,0x7
c0019e5a:	77 3c                	ja     c0019e98 <Vm::x87Handler(regs*)+0x552>
c0019e5c:	83 ec 0c             	sub    esp,0xc
c0019e5f:	2d e0 00 00 00       	sub    eax,0xe0
c0019e64:	50                   	push   eax
c0019e65:	e8 9c f9 ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019e6a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019e71:	89 c6                	mov    esi,eax
c0019e73:	89 d7                	mov    edi,edx
c0019e75:	e8 8c f9 ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019e7a:	57                   	push   edi
c0019e7b:	56                   	push   esi
c0019e7c:	52                   	push   edx
c0019e7d:	50                   	push   eax
c0019e7e:	e8 23 f9 ff ff       	call   c00197a6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019e83:	83 c4 1c             	add    esp,0x1c
c0019e86:	52                   	push   edx
c0019e87:	50                   	push   eax
c0019e88:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e8c:	2d e0 00 00 00       	sub    eax,0xe0
c0019e91:	e9 6e 01 00 00       	jmp    c001a004 <Vm::x87Handler(regs*)+0x6be>
c0019e96:	66 90                	xchg   ax,ax
c0019e98:	8d 50 18             	lea    edx,[eax+0x18]
c0019e9b:	80 fa 07             	cmp    dl,0x7
c0019e9e:	77 3c                	ja     c0019edc <Vm::x87Handler(regs*)+0x596>
c0019ea0:	83 ec 0c             	sub    esp,0xc
c0019ea3:	6a 00                	push   0x0
c0019ea5:	e8 5c f9 ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019eaa:	89 c6                	mov    esi,eax
c0019eac:	89 d7                	mov    edi,edx
c0019eae:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019eb2:	2d e8 00 00 00       	sub    eax,0xe8
c0019eb7:	89 04 24             	mov    DWORD PTR [esp],eax
c0019eba:	e8 47 f9 ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019ebf:	57                   	push   edi
c0019ec0:	56                   	push   esi
c0019ec1:	52                   	push   edx
c0019ec2:	50                   	push   eax
c0019ec3:	e8 de f8 ff ff       	call   c00197a6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019ec8:	83 c4 1c             	add    esp,0x1c
c0019ecb:	52                   	push   edx
c0019ecc:	50                   	push   eax
c0019ecd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019ed1:	2d e8 00 00 00       	sub    eax,0xe8
c0019ed6:	e9 29 01 00 00       	jmp    c001a004 <Vm::x87Handler(regs*)+0x6be>
c0019edb:	90                   	nop
c0019edc:	8d 50 38             	lea    edx,[eax+0x38]
c0019edf:	80 fa 07             	cmp    dl,0x7
c0019ee2:	77 3c                	ja     c0019f20 <Vm::x87Handler(regs*)+0x5da>
c0019ee4:	83 ec 0c             	sub    esp,0xc
c0019ee7:	2d c8 00 00 00       	sub    eax,0xc8
c0019eec:	50                   	push   eax
c0019eed:	e8 14 f9 ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019ef2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019ef9:	89 c6                	mov    esi,eax
c0019efb:	89 d7                	mov    edi,edx
c0019efd:	e8 04 f9 ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019f02:	57                   	push   edi
c0019f03:	56                   	push   esi
c0019f04:	52                   	push   edx
c0019f05:	50                   	push   eax
c0019f06:	e8 aa f8 ff ff       	call   c00197b5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019f0b:	83 c4 1c             	add    esp,0x1c
c0019f0e:	52                   	push   edx
c0019f0f:	50                   	push   eax
c0019f10:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f14:	2d c8 00 00 00       	sub    eax,0xc8
c0019f19:	e9 82 00 00 00       	jmp    c0019fa0 <Vm::x87Handler(regs*)+0x65a>
c0019f1e:	66 90                	xchg   ax,ax
c0019f20:	3c f7                	cmp    al,0xf7
c0019f22:	76 38                	jbe    c0019f5c <Vm::x87Handler(regs*)+0x616>
c0019f24:	83 ec 0c             	sub    esp,0xc
c0019f27:	6a 00                	push   0x0
c0019f29:	e8 d8 f8 ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019f2e:	89 c6                	mov    esi,eax
c0019f30:	89 d7                	mov    edi,edx
c0019f32:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f36:	2d f8 00 00 00       	sub    eax,0xf8
c0019f3b:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f3e:	e8 c3 f8 ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019f43:	57                   	push   edi
c0019f44:	56                   	push   esi
c0019f45:	52                   	push   edx
c0019f46:	50                   	push   eax
c0019f47:	e8 88 f8 ff ff       	call   c00197d4 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019f4c:	83 c4 1c             	add    esp,0x1c
c0019f4f:	52                   	push   edx
c0019f50:	50                   	push   eax
c0019f51:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f55:	2d f8 00 00 00       	sub    eax,0xf8
c0019f5a:	eb 44                	jmp    c0019fa0 <Vm::x87Handler(regs*)+0x65a>
c0019f5c:	8d 50 10             	lea    edx,[eax+0x10]
c0019f5f:	80 fa 07             	cmp    dl,0x7
c0019f62:	0f 87 6c 01 00 00    	ja     c001a0d4 <Vm::x87Handler(regs*)+0x78e>
c0019f68:	83 ec 0c             	sub    esp,0xc
c0019f6b:	2d f0 00 00 00       	sub    eax,0xf0
c0019f70:	50                   	push   eax
c0019f71:	e8 90 f8 ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019f76:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019f7d:	89 c6                	mov    esi,eax
c0019f7f:	89 d7                	mov    edi,edx
c0019f81:	e8 80 f8 ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019f86:	57                   	push   edi
c0019f87:	56                   	push   esi
c0019f88:	52                   	push   edx
c0019f89:	50                   	push   eax
c0019f8a:	e8 45 f8 ff ff       	call   c00197d4 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019f8f:	83 c4 1c             	add    esp,0x1c
c0019f92:	52                   	push   edx
c0019f93:	50                   	push   eax
c0019f94:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f98:	2d f0 00 00 00       	sub    eax,0xf0
c0019f9d:	8d 76 00             	lea    esi,[esi+0x0]
c0019fa0:	50                   	push   eax
c0019fa1:	8d 76 00             	lea    esi,[esi+0x0]
c0019fa4:	e8 a0 f8 ff ff       	call   c0019849 <Vm::fpuSetReg(int, unsigned long long)>
c0019fa9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019fad:	e8 41 f9 ff ff       	call   c00198f3 <Vm::fpuPop()>
c0019fb2:	e9 0d fa ff ff       	jmp    c00199c4 <Vm::x87Handler(regs*)+0x7e>
c0019fb7:	90                   	nop
c0019fb8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019fbc:	8d 50 30             	lea    edx,[eax+0x30]
c0019fbf:	80 fa 07             	cmp    dl,0x7
c0019fc2:	77 20                	ja     c0019fe4 <Vm::x87Handler(regs*)+0x69e>
c0019fc4:	83 ec 0c             	sub    esp,0xc
c0019fc7:	6a 00                	push   0x0
c0019fc9:	e8 38 f8 ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019fce:	83 c4 0c             	add    esp,0xc
c0019fd1:	52                   	push   edx
c0019fd2:	50                   	push   eax
c0019fd3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019fd7:	2d d0 00 00 00       	sub    eax,0xd0
c0019fdc:	e9 df fd ff ff       	jmp    c0019dc0 <Vm::x87Handler(regs*)+0x47a>
c0019fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0019fe4:	8d 50 28             	lea    edx,[eax+0x28]
c0019fe7:	80 fa 07             	cmp    dl,0x7
c0019fea:	77 28                	ja     c001a014 <Vm::x87Handler(regs*)+0x6ce>
c0019fec:	83 ec 0c             	sub    esp,0xc
c0019fef:	6a 00                	push   0x0
c0019ff1:	e8 10 f8 ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c0019ff6:	83 c4 0c             	add    esp,0xc
c0019ff9:	52                   	push   edx
c0019ffa:	50                   	push   eax
c0019ffb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019fff:	2d d8 00 00 00       	sub    eax,0xd8
c001a004:	50                   	push   eax
c001a005:	e8 3f f8 ff ff       	call   c0019849 <Vm::fpuSetReg(int, unsigned long long)>
c001a00a:	e8 e4 f8 ff ff       	call   c00198f3 <Vm::fpuPop()>
c001a00f:	e9 ac f9 ff ff       	jmp    c00199c0 <Vm::x87Handler(regs*)+0x7a>
c001a014:	8d 50 20             	lea    edx,[eax+0x20]
c001a017:	80 fa 07             	cmp    dl,0x7
c001a01a:	77 30                	ja     c001a04c <Vm::x87Handler(regs*)+0x706>
c001a01c:	83 ec 0c             	sub    esp,0xc
c001a01f:	2d e0 00 00 00       	sub    eax,0xe0
c001a024:	50                   	push   eax
c001a025:	e8 dc f7 ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c001a02a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a031:	89 c6                	mov    esi,eax
c001a033:	89 d7                	mov    edi,edx
c001a035:	e8 cc f7 ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c001a03a:	57                   	push   edi
c001a03b:	56                   	push   esi
c001a03c:	52                   	push   edx
c001a03d:	50                   	push   eax
c001a03e:	e8 e3 f6 ff ff       	call   c0019726 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a043:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a047:	e9 78 02 00 00       	jmp    c001a2c4 <Vm::x87Handler(regs*)+0x97e>
c001a04c:	8d 50 18             	lea    edx,[eax+0x18]
c001a04f:	80 fa 07             	cmp    dl,0x7
c001a052:	0f 87 10 fb ff ff    	ja     c0019b68 <Vm::x87Handler(regs*)+0x222>
c001a058:	83 ec 0c             	sub    esp,0xc
c001a05b:	2d e8 00 00 00       	sub    eax,0xe8
c001a060:	50                   	push   eax
c001a061:	e8 a0 f7 ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c001a066:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a06d:	89 c6                	mov    esi,eax
c001a06f:	89 d7                	mov    edi,edx
c001a071:	e8 90 f7 ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c001a076:	57                   	push   edi
c001a077:	56                   	push   esi
c001a078:	52                   	push   edx
c001a079:	50                   	push   eax
c001a07a:	e8 a7 f6 ff ff       	call   c0019726 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a07f:	83 c4 20             	add    esp,0x20
c001a082:	e8 6c f8 ff ff       	call   c00198f3 <Vm::fpuPop()>
c001a087:	eb 6f                	jmp    c001a0f8 <Vm::x87Handler(regs*)+0x7b2>
c001a089:	8d 76 00             	lea    esi,[esi+0x0]
c001a08c:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001a090:	0f 85 22 01 00 00    	jne    c001a1b8 <Vm::x87Handler(regs*)+0x872>
c001a096:	66 90                	xchg   ax,ax
c001a098:	83 ec 0c             	sub    esp,0xc
c001a09b:	6a 01                	push   0x1
c001a09d:	e8 64 f7 ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c001a0a2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a0a9:	89 c6                	mov    esi,eax
c001a0ab:	89 d7                	mov    edi,edx
c001a0ad:	e8 54 f7 ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c001a0b2:	57                   	push   edi
c001a0b3:	56                   	push   esi
c001a0b4:	52                   	push   edx
c001a0b5:	50                   	push   eax
c001a0b6:	e8 6b f6 ff ff       	call   c0019726 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a0bb:	83 c4 20             	add    esp,0x20
c001a0be:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a0c2:	e8 2c f8 ff ff       	call   c00198f3 <Vm::fpuPop()>
c001a0c7:	e8 27 f8 ff ff       	call   c00198f3 <Vm::fpuPop()>
c001a0cc:	e9 f7 f8 ff ff       	jmp    c00199c8 <Vm::x87Handler(regs*)+0x82>
c001a0d1:	8d 76 00             	lea    esi,[esi+0x0]
c001a0d4:	3c d9                	cmp    al,0xd9
c001a0d6:	0f 85 e8 02 00 00    	jne    c001a3c4 <Vm::x87Handler(regs*)+0xa7e>
c001a0dc:	eb ba                	jmp    c001a098 <Vm::x87Handler(regs*)+0x752>
c001a0de:	66 90                	xchg   ax,ax
c001a0e0:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001a0e4:	0f 85 2a 03 00 00    	jne    c001a414 <Vm::x87Handler(regs*)+0xace>
c001a0ea:	0f b7 05 c0 76 02 c0 	movzx  eax,WORD PTR ds:0xc00276c0
c001a0f1:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001a0f5:	8d 76 00             	lea    esi,[esi+0x0]
c001a0f8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a0fc:	e9 c7 f8 ff ff       	jmp    c00199c8 <Vm::x87Handler(regs*)+0x82>
c001a101:	8d 76 00             	lea    esi,[esi+0x0]
c001a104:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a108:	84 d2                	test   dl,dl
c001a10a:	75 10                	jne    c001a11c <Vm::x87Handler(regs*)+0x7d6>
c001a10c:	83 ec 0c             	sub    esp,0xc
c001a10f:	ff 36                	push   DWORD PTR [esi]
c001a111:	e8 29 f4 ff ff       	call   c001953f <Vm::fpu32ToInternal(unsigned int)>
c001a116:	e9 39 01 00 00       	jmp    c001a254 <Vm::x87Handler(regs*)+0x90e>
c001a11b:	90                   	nop
c001a11c:	80 fa 01             	cmp    dl,0x1
c001a11f:	75 0f                	jne    c001a130 <Vm::x87Handler(regs*)+0x7ea>
c001a121:	83 ec 0c             	sub    esp,0xc
c001a124:	ff 36                	push   DWORD PTR [esi]
c001a126:	e8 14 f4 ff ff       	call   c001953f <Vm::fpu32ToInternal(unsigned int)>
c001a12b:	e9 b4 02 00 00       	jmp    c001a3e4 <Vm::x87Handler(regs*)+0xa9e>
c001a130:	80 fa 04             	cmp    dl,0x4
c001a133:	75 0f                	jne    c001a144 <Vm::x87Handler(regs*)+0x7fe>
c001a135:	83 ec 0c             	sub    esp,0xc
c001a138:	ff 36                	push   DWORD PTR [esi]
c001a13a:	e8 00 f4 ff ff       	call   c001953f <Vm::fpu32ToInternal(unsigned int)>
c001a13f:	e9 9c 01 00 00       	jmp    c001a2e0 <Vm::x87Handler(regs*)+0x99a>
c001a144:	80 fa 05             	cmp    dl,0x5
c001a147:	75 1b                	jne    c001a164 <Vm::x87Handler(regs*)+0x81e>
c001a149:	83 ec 0c             	sub    esp,0xc
c001a14c:	6a 00                	push   0x0
c001a14e:	e8 b3 f6 ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c001a153:	89 c7                	mov    edi,eax
c001a155:	89 d5                	mov    ebp,edx
c001a157:	58                   	pop    eax
c001a158:	ff 36                	push   DWORD PTR [esi]
c001a15a:	e8 e0 f3 ff ff       	call   c001953f <Vm::fpu32ToInternal(unsigned int)>
c001a15f:	e9 bc 01 00 00       	jmp    c001a320 <Vm::x87Handler(regs*)+0x9da>
c001a164:	80 fa 06             	cmp    dl,0x6
c001a167:	75 0f                	jne    c001a178 <Vm::x87Handler(regs*)+0x832>
c001a169:	83 ec 0c             	sub    esp,0xc
c001a16c:	ff 36                	push   DWORD PTR [esi]
c001a16e:	e8 cc f3 ff ff       	call   c001953f <Vm::fpu32ToInternal(unsigned int)>
c001a173:	e9 cc 01 00 00       	jmp    c001a344 <Vm::x87Handler(regs*)+0x9fe>
c001a178:	31 c0                	xor    eax,eax
c001a17a:	80 fa 07             	cmp    dl,0x7
c001a17d:	0f 85 d5 02 00 00    	jne    c001a458 <Vm::x87Handler(regs*)+0xb12>
c001a183:	83 ec 0c             	sub    esp,0xc
c001a186:	6a 00                	push   0x0
c001a188:	e8 79 f6 ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c001a18d:	89 c7                	mov    edi,eax
c001a18f:	89 d5                	mov    ebp,edx
c001a191:	58                   	pop    eax
c001a192:	ff 36                	push   DWORD PTR [esi]
c001a194:	e8 a6 f3 ff ff       	call   c001953f <Vm::fpu32ToInternal(unsigned int)>
c001a199:	e9 ee 01 00 00       	jmp    c001a38c <Vm::x87Handler(regs*)+0xa46>
c001a19e:	66 90                	xchg   ax,ax
c001a1a0:	80 fa 03             	cmp    dl,0x3
c001a1a3:	0f 85 f7 01 00 00    	jne    c001a3a0 <Vm::x87Handler(regs*)+0xa5a>
c001a1a9:	e8 45 f7 ff ff       	call   c00198f3 <Vm::fpuPop()>
c001a1ae:	51                   	push   ecx
c001a1af:	51                   	push   ecx
c001a1b0:	e9 03 02 00 00       	jmp    c001a3b8 <Vm::x87Handler(regs*)+0xa72>
c001a1b5:	8d 76 00             	lea    esi,[esi+0x0]
c001a1b8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a1bc:	80 fa 01             	cmp    dl,0x1
c001a1bf:	75 0b                	jne    c001a1cc <Vm::x87Handler(regs*)+0x886>
c001a1c1:	57                   	push   edi
c001a1c2:	57                   	push   edi
c001a1c3:	8b 06                	mov    eax,DWORD PTR [esi]
c001a1c5:	e9 0e 02 00 00       	jmp    c001a3d8 <Vm::x87Handler(regs*)+0xa92>
c001a1ca:	66 90                	xchg   ax,ax
c001a1cc:	80 fa 04             	cmp    dl,0x4
c001a1cf:	75 13                	jne    c001a1e4 <Vm::x87Handler(regs*)+0x89e>
c001a1d1:	31 d2                	xor    edx,edx
c001a1d3:	51                   	push   ecx
c001a1d4:	51                   	push   ecx
c001a1d5:	8b 06                	mov    eax,DWORD PTR [esi]
c001a1d7:	52                   	push   edx
c001a1d8:	50                   	push   eax
c001a1d9:	e8 4a f4 ff ff       	call   c0019628 <Vm::fpuLongToFloat(long long)>
c001a1de:	e9 fd 00 00 00       	jmp    c001a2e0 <Vm::x87Handler(regs*)+0x99a>
c001a1e3:	90                   	nop
c001a1e4:	31 c0                	xor    eax,eax
c001a1e6:	80 fa 07             	cmp    dl,0x7
c001a1e9:	0f 85 69 02 00 00    	jne    c001a458 <Vm::x87Handler(regs*)+0xb12>
c001a1ef:	83 ec 0c             	sub    esp,0xc
c001a1f2:	6a 00                	push   0x0
c001a1f4:	e8 0d f6 ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c001a1f9:	89 c7                	mov    edi,eax
c001a1fb:	89 d5                	mov    ebp,edx
c001a1fd:	58                   	pop    eax
c001a1fe:	8b 06                	mov    eax,DWORD PTR [esi]
c001a200:	5a                   	pop    edx
c001a201:	31 d2                	xor    edx,edx
c001a203:	52                   	push   edx
c001a204:	50                   	push   eax
c001a205:	e8 1e f4 ff ff       	call   c0019628 <Vm::fpuLongToFloat(long long)>
c001a20a:	e9 7d 01 00 00       	jmp    c001a38c <Vm::x87Handler(regs*)+0xa46>
c001a20f:	90                   	nop
c001a210:	84 d2                	test   dl,dl
c001a212:	75 10                	jne    c001a224 <Vm::x87Handler(regs*)+0x8de>
c001a214:	31 d2                	xor    edx,edx
c001a216:	55                   	push   ebp
c001a217:	55                   	push   ebp
c001a218:	8b 06                	mov    eax,DWORD PTR [esi]
c001a21a:	52                   	push   edx
c001a21b:	50                   	push   eax
c001a21c:	e9 03 02 00 00       	jmp    c001a424 <Vm::x87Handler(regs*)+0xade>
c001a221:	8d 76 00             	lea    esi,[esi+0x0]
c001a224:	31 c0                	xor    eax,eax
c001a226:	80 fa 02             	cmp    dl,0x2
c001a229:	0f 85 29 02 00 00    	jne    c001a458 <Vm::x87Handler(regs*)+0xb12>
c001a22f:	83 ec 0c             	sub    esp,0xc
c001a232:	6a 00                	push   0x0
c001a234:	e8 cd f5 ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c001a239:	59                   	pop    ecx
c001a23a:	5f                   	pop    edi
c001a23b:	e9 18 f9 ff ff       	jmp    c0019b58 <Vm::x87Handler(regs*)+0x212>
c001a240:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a244:	84 d2                	test   dl,dl
c001a246:	75 2c                	jne    c001a274 <Vm::x87Handler(regs*)+0x92e>
c001a248:	50                   	push   eax
c001a249:	50                   	push   eax
c001a24a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a24d:	ff 36                	push   DWORD PTR [esi]
c001a24f:	e8 30 f3 ff ff       	call   c0019584 <Vm::fpu64ToInternal(unsigned long long)>
c001a254:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a25b:	89 c6                	mov    esi,eax
c001a25d:	89 d7                	mov    edi,edx
c001a25f:	e8 a2 f5 ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c001a264:	57                   	push   edi
c001a265:	56                   	push   esi
c001a266:	52                   	push   edx
c001a267:	50                   	push   eax
c001a268:	e8 0f f5 ff ff       	call   c001977c <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a26d:	e9 8e 01 00 00       	jmp    c001a400 <Vm::x87Handler(regs*)+0xaba>
c001a272:	66 90                	xchg   ax,ax
c001a274:	80 fa 01             	cmp    dl,0x1
c001a277:	75 13                	jne    c001a28c <Vm::x87Handler(regs*)+0x946>
c001a279:	50                   	push   eax
c001a27a:	50                   	push   eax
c001a27b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a27e:	ff 36                	push   DWORD PTR [esi]
c001a280:	e8 ff f2 ff ff       	call   c0019584 <Vm::fpu64ToInternal(unsigned long long)>
c001a285:	e9 5a 01 00 00       	jmp    c001a3e4 <Vm::x87Handler(regs*)+0xa9e>
c001a28a:	66 90                	xchg   ax,ax
c001a28c:	80 fa 02             	cmp    dl,0x2
c001a28f:	0f 85 03 f9 ff ff    	jne    c0019b98 <Vm::x87Handler(regs*)+0x252>
c001a295:	55                   	push   ebp
c001a296:	55                   	push   ebp
c001a297:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a29a:	ff 36                	push   DWORD PTR [esi]
c001a29c:	e8 e3 f2 ff ff       	call   c0019584 <Vm::fpu64ToInternal(unsigned long long)>
c001a2a1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a2a8:	89 c6                	mov    esi,eax
c001a2aa:	89 d7                	mov    edi,edx
c001a2ac:	e8 55 f5 ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c001a2b1:	57                   	push   edi
c001a2b2:	56                   	push   esi
c001a2b3:	52                   	push   edx
c001a2b4:	50                   	push   eax
c001a2b5:	e8 6c f4 ff ff       	call   c0019726 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a2ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a2be:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a2c1:	8d 76 00             	lea    esi,[esi+0x0]
c001a2c4:	83 c4 20             	add    esp,0x20
c001a2c7:	e9 fc f6 ff ff       	jmp    c00199c8 <Vm::x87Handler(regs*)+0x82>
c001a2cc:	80 fa 04             	cmp    dl,0x4
c001a2cf:	75 2f                	jne    c001a300 <Vm::x87Handler(regs*)+0x9ba>
c001a2d1:	51                   	push   ecx
c001a2d2:	51                   	push   ecx
c001a2d3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a2d6:	ff 36                	push   DWORD PTR [esi]
c001a2d8:	e8 a7 f2 ff ff       	call   c0019584 <Vm::fpu64ToInternal(unsigned long long)>
c001a2dd:	8d 76 00             	lea    esi,[esi+0x0]
c001a2e0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a2e7:	89 c6                	mov    esi,eax
c001a2e9:	89 d7                	mov    edi,edx
c001a2eb:	e8 16 f5 ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c001a2f0:	57                   	push   edi
c001a2f1:	56                   	push   esi
c001a2f2:	52                   	push   edx
c001a2f3:	50                   	push   eax
c001a2f4:	e8 ad f4 ff ff       	call   c00197a6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a2f9:	e9 02 01 00 00       	jmp    c001a400 <Vm::x87Handler(regs*)+0xaba>
c001a2fe:	66 90                	xchg   ax,ax
c001a300:	80 fa 05             	cmp    dl,0x5
c001a303:	75 2b                	jne    c001a330 <Vm::x87Handler(regs*)+0x9ea>
c001a305:	83 ec 0c             	sub    esp,0xc
c001a308:	6a 00                	push   0x0
c001a30a:	e8 f7 f4 ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c001a30f:	89 c7                	mov    edi,eax
c001a311:	89 d5                	mov    ebp,edx
c001a313:	58                   	pop    eax
c001a314:	5a                   	pop    edx
c001a315:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a318:	ff 36                	push   DWORD PTR [esi]
c001a31a:	e8 65 f2 ff ff       	call   c0019584 <Vm::fpu64ToInternal(unsigned long long)>
c001a31f:	90                   	nop
c001a320:	83 c4 10             	add    esp,0x10
c001a323:	55                   	push   ebp
c001a324:	57                   	push   edi
c001a325:	52                   	push   edx
c001a326:	50                   	push   eax
c001a327:	e8 7a f4 ff ff       	call   c00197a6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a32c:	eb 6a                	jmp    c001a398 <Vm::x87Handler(regs*)+0xa52>
c001a32e:	66 90                	xchg   ax,ax
c001a330:	80 fa 06             	cmp    dl,0x6
c001a333:	75 2f                	jne    c001a364 <Vm::x87Handler(regs*)+0xa1e>
c001a335:	51                   	push   ecx
c001a336:	51                   	push   ecx
c001a337:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a33a:	ff 36                	push   DWORD PTR [esi]
c001a33c:	e8 43 f2 ff ff       	call   c0019584 <Vm::fpu64ToInternal(unsigned long long)>
c001a341:	8d 76 00             	lea    esi,[esi+0x0]
c001a344:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a34b:	89 c6                	mov    esi,eax
c001a34d:	89 d7                	mov    edi,edx
c001a34f:	e8 b2 f4 ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c001a354:	57                   	push   edi
c001a355:	56                   	push   esi
c001a356:	52                   	push   edx
c001a357:	50                   	push   eax
c001a358:	e8 77 f4 ff ff       	call   c00197d4 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a35d:	e9 9e 00 00 00       	jmp    c001a400 <Vm::x87Handler(regs*)+0xaba>
c001a362:	66 90                	xchg   ax,ax
c001a364:	31 c0                	xor    eax,eax
c001a366:	80 fa 07             	cmp    dl,0x7
c001a369:	0f 85 e9 00 00 00    	jne    c001a458 <Vm::x87Handler(regs*)+0xb12>
c001a36f:	83 ec 0c             	sub    esp,0xc
c001a372:	6a 00                	push   0x0
c001a374:	e8 8d f4 ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c001a379:	89 c7                	mov    edi,eax
c001a37b:	89 d5                	mov    ebp,edx
c001a37d:	58                   	pop    eax
c001a37e:	5a                   	pop    edx
c001a37f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a382:	ff 36                	push   DWORD PTR [esi]
c001a384:	e8 fb f1 ff ff       	call   c0019584 <Vm::fpu64ToInternal(unsigned long long)>
c001a389:	8d 76 00             	lea    esi,[esi+0x0]
c001a38c:	83 c4 10             	add    esp,0x10
c001a38f:	55                   	push   ebp
c001a390:	57                   	push   edi
c001a391:	52                   	push   edx
c001a392:	50                   	push   eax
c001a393:	e8 3c f4 ff ff       	call   c00197d4 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a398:	83 c4 0c             	add    esp,0xc
c001a39b:	eb 67                	jmp    c001a404 <Vm::x87Handler(regs*)+0xabe>
c001a39d:	8d 76 00             	lea    esi,[esi+0x0]
c001a3a0:	31 c0                	xor    eax,eax
c001a3a2:	80 fa 02             	cmp    dl,0x2
c001a3a5:	0f 85 ad 00 00 00    	jne    c001a458 <Vm::x87Handler(regs*)+0xb12>
c001a3ab:	83 ec 0c             	sub    esp,0xc
c001a3ae:	6a 00                	push   0x0
c001a3b0:	e8 51 f4 ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c001a3b5:	59                   	pop    ecx
c001a3b6:	5f                   	pop    edi
c001a3b7:	90                   	nop
c001a3b8:	52                   	push   edx
c001a3b9:	50                   	push   eax
c001a3ba:	e8 77 f1 ff ff       	call   c0019536 <Vm::fpuInternalTo64(unsigned long long)>
c001a3bf:	e9 84 00 00 00       	jmp    c001a448 <Vm::x87Handler(regs*)+0xb02>
c001a3c4:	31 c0                	xor    eax,eax
c001a3c6:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001a3cb:	0f 85 87 00 00 00    	jne    c001a458 <Vm::x87Handler(regs*)+0xb12>
c001a3d1:	50                   	push   eax
c001a3d2:	50                   	push   eax
c001a3d3:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001a3d6:	66 90                	xchg   ax,ax
c001a3d8:	31 d2                	xor    edx,edx
c001a3da:	52                   	push   edx
c001a3db:	50                   	push   eax
c001a3dc:	e8 47 f2 ff ff       	call   c0019628 <Vm::fpuLongToFloat(long long)>
c001a3e1:	8d 76 00             	lea    esi,[esi+0x0]
c001a3e4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a3eb:	89 c6                	mov    esi,eax
c001a3ed:	89 d7                	mov    edi,edx
c001a3ef:	e8 12 f4 ff ff       	call   c0019806 <Vm::fpuGetReg(int)>
c001a3f4:	57                   	push   edi
c001a3f5:	56                   	push   esi
c001a3f6:	52                   	push   edx
c001a3f7:	50                   	push   eax
c001a3f8:	e8 b8 f3 ff ff       	call   c00197b5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a3fd:	8d 76 00             	lea    esi,[esi+0x0]
c001a400:	83 c4 1c             	add    esp,0x1c
c001a403:	90                   	nop
c001a404:	52                   	push   edx
c001a405:	50                   	push   eax
c001a406:	6a 00                	push   0x0
c001a408:	e8 3c f4 ff ff       	call   c0019849 <Vm::fpuSetReg(int, unsigned long long)>
c001a40d:	e9 7a f7 ff ff       	jmp    c0019b8c <Vm::x87Handler(regs*)+0x246>
c001a412:	66 90                	xchg   ax,ax
c001a414:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a418:	80 fa 05             	cmp    dl,0x5
c001a41b:	75 13                	jne    c001a430 <Vm::x87Handler(regs*)+0xaea>
c001a41d:	55                   	push   ebp
c001a41e:	55                   	push   ebp
c001a41f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a422:	ff 36                	push   DWORD PTR [esi]
c001a424:	e8 c3 f1 ff ff       	call   c00195ec <Vm::fpuULongToFloat(unsigned long long)>
c001a429:	e9 52 f7 ff ff       	jmp    c0019b80 <Vm::x87Handler(regs*)+0x23a>
c001a42e:	66 90                	xchg   ax,ax
c001a430:	31 c0                	xor    eax,eax
c001a432:	80 fa 07             	cmp    dl,0x7
c001a435:	75 21                	jne    c001a458 <Vm::x87Handler(regs*)+0xb12>
c001a437:	e8 b7 f4 ff ff       	call   c00198f3 <Vm::fpuPop()>
c001a43c:	51                   	push   ecx
c001a43d:	51                   	push   ecx
c001a43e:	52                   	push   edx
c001a43f:	50                   	push   eax
c001a440:	e8 48 f1 ff ff       	call   c001958d <Vm::fpuFloatToLong(unsigned long long)>
c001a445:	8d 76 00             	lea    esi,[esi+0x0]
c001a448:	83 c4 10             	add    esp,0x10
c001a44b:	89 06                	mov    DWORD PTR [esi],eax
c001a44d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a450:	e9 7b f7 ff ff       	jmp    c0019bd0 <Vm::x87Handler(regs*)+0x28a>
c001a455:	8d 76 00             	lea    esi,[esi+0x0]
c001a458:	83 c4 1c             	add    esp,0x1c
c001a45b:	5b                   	pop    ebx
c001a45c:	5e                   	pop    esi
c001a45d:	5f                   	pop    edi
c001a45e:	5d                   	pop    ebp
c001a45f:	c3                   	ret    

c001a460 <__static_initialization_and_destruction_0(int, int)>:
c001a460:	83 ec 0c             	sub    esp,0xc
c001a463:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001a468:	75 1a                	jne    c001a484 <__static_initialization_and_destruction_0(int, int)+0x24>
c001a46a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001a472:	75 10                	jne    c001a484 <__static_initialization_and_destruction_0(int, int)+0x24>
c001a474:	83 ec 0c             	sub    esp,0xc
c001a477:	68 c0 76 02 c0       	push   0xc00276c0
c001a47c:	e8 c7 73 00 00       	call   c0021848 <Vm::_FPUState::_FPUState()>
c001a481:	83 c4 10             	add    esp,0x10
c001a484:	90                   	nop
c001a485:	83 c4 0c             	add    esp,0xc
c001a488:	c3                   	ret    
c001a489:	8d 76 00             	lea    esi,[esi+0x0]

c001a48c <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001a48c:	83 ec 0c             	sub    esp,0xc
c001a48f:	83 ec 08             	sub    esp,0x8
c001a492:	68 ff ff 00 00       	push   0xffff
c001a497:	6a 01                	push   0x1
c001a499:	e8 c2 ff ff ff       	call   c001a460 <__static_initialization_and_destruction_0(int, int)>
c001a49e:	83 c4 10             	add    esp,0x10
c001a4a1:	83 c4 0c             	add    esp,0xc
c001a4a4:	c3                   	ret    
c001a4a5:	66 90                	xchg   ax,ax
c001a4a7:	90                   	nop

c001a4a8 <FAT::getName()>:
c001a4a8:	b8 e0 48 02 c0       	mov    eax,0xc00248e0
c001a4ad:	c3                   	ret    
c001a4ae:	66 90                	xchg   ax,ax

c001a4b0 <FAT::tell(void*, unsigned long long*)>:
c001a4b0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a4b5:	75 09                	jne    c001a4c0 <FAT::tell(void*, unsigned long long*)+0x10>
c001a4b7:	b8 04 00 00 00       	mov    eax,0x4
c001a4bc:	c3                   	ret    
c001a4bd:	8d 76 00             	lea    esi,[esi+0x0]
c001a4c0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a4c5:	75 09                	jne    c001a4d0 <FAT::tell(void*, unsigned long long*)+0x20>
c001a4c7:	b8 04 00 00 00       	mov    eax,0x4
c001a4cc:	c3                   	ret    
c001a4cd:	8d 76 00             	lea    esi,[esi+0x0]
c001a4d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a4d4:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001a4d7:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001a4da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a4de:	89 01                	mov    DWORD PTR [ecx],eax
c001a4e0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a4e3:	b8 00 00 00 00       	mov    eax,0x0
c001a4e8:	c3                   	ret    
c001a4e9:	90                   	nop
c001a4ea:	66 90                	xchg   ax,ax

c001a4ec <FAT::stat(void*, unsigned long long*)>:
c001a4ec:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a4f1:	75 09                	jne    c001a4fc <FAT::stat(void*, unsigned long long*)+0x10>
c001a4f3:	b8 04 00 00 00       	mov    eax,0x4
c001a4f8:	c3                   	ret    
c001a4f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a4fc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a501:	75 09                	jne    c001a50c <FAT::stat(void*, unsigned long long*)+0x20>
c001a503:	b8 04 00 00 00       	mov    eax,0x4
c001a508:	c3                   	ret    
c001a509:	8d 76 00             	lea    esi,[esi+0x0]
c001a50c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a510:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a513:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a516:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a51a:	89 01                	mov    DWORD PTR [ecx],eax
c001a51c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a51f:	b8 00 00 00 00       	mov    eax,0x0
c001a524:	c3                   	ret    
c001a525:	90                   	nop
c001a526:	66 90                	xchg   ax,ax

c001a528 <FAT::~FAT()>:
c001a528:	83 ec 0c             	sub    esp,0xc
c001a52b:	ba 2c 49 02 c0       	mov    edx,0xc002492c
c001a530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a534:	89 10                	mov    DWORD PTR [eax],edx
c001a536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a53a:	83 ec 0c             	sub    esp,0xc
c001a53d:	50                   	push   eax
c001a53e:	e8 57 28 ff ff       	call   c000cd9a <Filesystem::~Filesystem()>
c001a543:	83 c4 10             	add    esp,0x10
c001a546:	90                   	nop
c001a547:	83 c4 0c             	add    esp,0xc
c001a54a:	c3                   	ret    
c001a54b:	90                   	nop

c001a54c <FAT::~FAT()>:
c001a54c:	83 ec 0c             	sub    esp,0xc
c001a54f:	83 ec 0c             	sub    esp,0xc
c001a552:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a556:	e8 cd ff ff ff       	call   c001a528 <FAT::~FAT()>
c001a55b:	83 c4 10             	add    esp,0x10
c001a55e:	83 ec 08             	sub    esp,0x8
c001a561:	6a 08                	push   0x8
c001a563:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a567:	e8 12 24 ff ff       	call   c000c97e <operator delete(void*, unsigned long)>
c001a56c:	83 c4 10             	add    esp,0x10
c001a56f:	83 c4 0c             	add    esp,0xc
c001a572:	c3                   	ret    
c001a573:	90                   	nop

c001a574 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a574:	83 ec 1c             	sub    esp,0x1c
c001a577:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001a57e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001a583:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a587:	8b 04 85 40 77 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd88c0]
c001a58e:	83 f8 ff             	cmp    eax,0xffffffff
c001a591:	75 35                	jne    c001a5c8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001a593:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a597:	88 c2                	mov    dl,al
c001a599:	a1 20 77 02 c0       	mov    eax,ds:0xc0027720
c001a59e:	01 d0                	add    eax,edx
c001a5a0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a5a4:	8b 15 20 77 02 c0    	mov    edx,DWORD PTR ds:0xc0027720
c001a5aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a5ae:	89 14 85 40 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd88c0],edx
c001a5b5:	a1 20 77 02 c0       	mov    eax,ds:0xc0027720
c001a5ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a5be:	89 14 85 c0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8840],edx
c001a5c5:	eb 19                	jmp    c001a5e0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001a5c7:	90                   	nop
c001a5c8:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a5cc:	88 c2                	mov    dl,al
c001a5ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a5d2:	8b 04 85 40 77 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd88c0]
c001a5d9:	01 d0                	add    eax,edx
c001a5db:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a5df:	90                   	nop
c001a5e0:	83 ec 04             	sub    esp,0x4
c001a5e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a5e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a5eb:	8d 44 24 15          	lea    eax,[esp+0x15]
c001a5ef:	50                   	push   eax
c001a5f0:	e8 3d c6 fe ff       	call   c0006c32 <f_getlabel>
c001a5f5:	83 c4 10             	add    esp,0x10
c001a5f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a5fc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a601:	75 09                	jne    c001a60c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001a603:	b8 00 00 00 00       	mov    eax,0x0
c001a608:	eb 0a                	jmp    c001a614 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001a60a:	66 90                	xchg   ax,ax
c001a60c:	b8 01 00 00 00       	mov    eax,0x1
c001a611:	8d 76 00             	lea    esi,[esi+0x0]
c001a614:	83 c4 1c             	add    esp,0x1c
c001a617:	c3                   	ret    

c001a618 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001a618:	57                   	push   edi
c001a619:	83 ec 58             	sub    esp,0x58
c001a61c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001a624:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a628:	b9 0f 00 00 00       	mov    ecx,0xf
c001a62d:	b8 00 00 00 00       	mov    eax,0x0
c001a632:	fc                   	cld    
c001a633:	89 d7                	mov    edi,edx
c001a635:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a637:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a63b:	8b 04 85 40 77 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd88c0]
c001a642:	83 f8 ff             	cmp    eax,0xffffffff
c001a645:	75 35                	jne    c001a67c <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001a647:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a64b:	88 c2                	mov    dl,al
c001a64d:	a1 20 77 02 c0       	mov    eax,ds:0xc0027720
c001a652:	01 d0                	add    eax,edx
c001a654:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a658:	8b 15 20 77 02 c0    	mov    edx,DWORD PTR ds:0xc0027720
c001a65e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a662:	89 14 85 40 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd88c0],edx
c001a669:	a1 20 77 02 c0       	mov    eax,ds:0xc0027720
c001a66e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001a672:	89 14 85 c0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8840],edx
c001a679:	eb 19                	jmp    c001a694 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001a67b:	90                   	nop
c001a67c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a680:	88 c2                	mov    dl,al
c001a682:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a686:	8b 04 85 40 77 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd88c0]
c001a68d:	01 d0                	add    eax,edx
c001a68f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a693:	90                   	nop
c001a694:	83 ec 08             	sub    esp,0x8
c001a697:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a69b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a69f:	50                   	push   eax
c001a6a0:	e8 db 61 fe ff       	call   c0000880 <strcat>
c001a6a5:	83 c4 10             	add    esp,0x10
c001a6a8:	83 ec 0c             	sub    esp,0xc
c001a6ab:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a6af:	50                   	push   eax
c001a6b0:	e8 6b c7 fe ff       	call   c0006e20 <f_setlabel>
c001a6b5:	83 c4 10             	add    esp,0x10
c001a6b8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a6bc:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a6c1:	75 09                	jne    c001a6cc <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001a6c3:	b8 00 00 00 00       	mov    eax,0x0
c001a6c8:	eb 0a                	jmp    c001a6d4 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001a6ca:	66 90                	xchg   ax,ax
c001a6cc:	b8 01 00 00 00       	mov    eax,0x1
c001a6d1:	8d 76 00             	lea    esi,[esi+0x0]
c001a6d4:	83 c4 58             	add    esp,0x58
c001a6d7:	5f                   	pop    edi
c001a6d8:	c3                   	ret    
c001a6d9:	90                   	nop
c001a6da:	66 90                	xchg   ax,ax

c001a6dc <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a6dc:	83 ec 2c             	sub    esp,0x2c
c001a6df:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a6e7:	83 ec 08             	sub    esp,0x8
c001a6ea:	68 04 49 02 c0       	push   0xc0024904
c001a6ef:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a6f3:	e8 d4 60 fe ff       	call   c00007cc <strcmp>
c001a6f8:	83 c4 10             	add    esp,0x10
c001a6fb:	85 c0                	test   eax,eax
c001a6fd:	0f 94 c0             	sete   al
c001a700:	84 c0                	test   al,al
c001a702:	74 10                	je     c001a714 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001a704:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a70c:	e9 b3 00 00 00       	jmp    c001a7c4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a711:	8d 76 00             	lea    esi,[esi+0x0]
c001a714:	83 ec 08             	sub    esp,0x8
c001a717:	68 f6 48 02 c0       	push   0xc00248f6
c001a71c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a720:	e8 a7 60 fe ff       	call   c00007cc <strcmp>
c001a725:	83 c4 10             	add    esp,0x10
c001a728:	85 c0                	test   eax,eax
c001a72a:	0f 94 c0             	sete   al
c001a72d:	84 c0                	test   al,al
c001a72f:	74 0f                	je     c001a740 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001a731:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a739:	e9 86 00 00 00       	jmp    c001a7c4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a73e:	66 90                	xchg   ax,ax
c001a740:	83 ec 08             	sub    esp,0x8
c001a743:	68 fc 48 02 c0       	push   0xc00248fc
c001a748:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a74c:	e8 7b 60 fe ff       	call   c00007cc <strcmp>
c001a751:	83 c4 10             	add    esp,0x10
c001a754:	85 c0                	test   eax,eax
c001a756:	0f 94 c0             	sete   al
c001a759:	84 c0                	test   al,al
c001a75b:	74 0b                	je     c001a768 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001a75d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a765:	eb 5d                	jmp    c001a7c4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a767:	90                   	nop
c001a768:	83 ec 08             	sub    esp,0x8
c001a76b:	68 ac 1f 02 c0       	push   0xc0021fac
c001a770:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a774:	e8 53 60 fe ff       	call   c00007cc <strcmp>
c001a779:	83 c4 10             	add    esp,0x10
c001a77c:	85 c0                	test   eax,eax
c001a77e:	0f 94 c0             	sete   al
c001a781:	84 c0                	test   al,al
c001a783:	74 0b                	je     c001a790 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001a785:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a78d:	eb 35                	jmp    c001a7c4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a78f:	90                   	nop
c001a790:	83 ec 08             	sub    esp,0x8
c001a793:	68 02 49 02 c0       	push   0xc0024902
c001a798:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a79c:	e8 2b 60 fe ff       	call   c00007cc <strcmp>
c001a7a1:	83 c4 10             	add    esp,0x10
c001a7a4:	85 c0                	test   eax,eax
c001a7a6:	0f 94 c0             	sete   al
c001a7a9:	84 c0                	test   al,al
c001a7ab:	74 0b                	je     c001a7b8 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001a7ad:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a7b5:	eb 0d                	jmp    c001a7c4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a7b7:	90                   	nop
c001a7b8:	b8 08 00 00 00       	mov    eax,0x8
c001a7bd:	e9 ea 00 00 00       	jmp    c001a8ac <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a7c2:	66 90                	xchg   ax,ax
c001a7c4:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a7cb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a7d0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a7d4:	8b 04 85 40 77 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd88c0]
c001a7db:	83 f8 ff             	cmp    eax,0xffffffff
c001a7de:	75 34                	jne    c001a814 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001a7e0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a7e4:	88 c2                	mov    dl,al
c001a7e6:	a1 20 77 02 c0       	mov    eax,ds:0xc0027720
c001a7eb:	01 d0                	add    eax,edx
c001a7ed:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a7f1:	8b 15 20 77 02 c0    	mov    edx,DWORD PTR ds:0xc0027720
c001a7f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a7fb:	89 14 85 40 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd88c0],edx
c001a802:	a1 20 77 02 c0       	mov    eax,ds:0xc0027720
c001a807:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a80b:	89 14 85 c0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8840],edx
c001a812:	eb 18                	jmp    c001a82c <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001a814:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a818:	88 c2                	mov    dl,al
c001a81a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a81e:	8b 04 85 40 77 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd88c0]
c001a825:	01 d0                	add    eax,edx
c001a827:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a82b:	90                   	nop
c001a82c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a830:	88 04 24             	mov    BYTE PTR [esp],al
c001a833:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a837:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a83b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a843:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a848:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a850:	83 ec 0c             	sub    esp,0xc
c001a853:	68 00 20 00 00       	push   0x2000
c001a858:	e8 66 f1 fe ff       	call   c00099c3 <malloc>
c001a85d:	83 c4 10             	add    esp,0x10
c001a860:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a864:	68 00 20 00 00       	push   0x2000
c001a869:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a86d:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a871:	50                   	push   eax
c001a872:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a876:	50                   	push   eax
c001a877:	e8 25 cc fe ff       	call   c00074a1 <f_mkfs>
c001a87c:	83 c4 10             	add    esp,0x10
c001a87f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a883:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a888:	75 0a                	jne    c001a894 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001a88a:	b8 00 00 00 00       	mov    eax,0x0
c001a88f:	eb 1b                	jmp    c001a8ac <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a891:	8d 76 00             	lea    esi,[esi+0x0]
c001a894:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a899:	75 09                	jne    c001a8a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001a89b:	b8 09 00 00 00       	mov    eax,0x9
c001a8a0:	eb 0a                	jmp    c001a8ac <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a8a2:	66 90                	xchg   ax,ax
c001a8a4:	b8 01 00 00 00       	mov    eax,0x1
c001a8a9:	8d 76 00             	lea    esi,[esi+0x0]
c001a8ac:	83 c4 2c             	add    esp,0x2c
c001a8af:	c3                   	ret    

c001a8b0 <FAT::tryMount(LogicalDisk*, int)>:
c001a8b0:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a8b6:	a1 20 77 02 c0       	mov    eax,ds:0xc0027720
c001a8bb:	83 f8 14             	cmp    eax,0x14
c001a8be:	75 18                	jne    c001a8d8 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001a8c0:	83 ec 0c             	sub    esp,0xc
c001a8c3:	68 08 49 02 c0       	push   0xc0024908
c001a8c8:	e8 32 9a ff ff       	call   c00142ff <Krnl::panic(char const*)>
c001a8cd:	83 c4 10             	add    esp,0x10
c001a8d0:	b0 00                	mov    al,0x0
c001a8d2:	e9 e9 01 00 00       	jmp    c001aac0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a8d7:	90                   	nop
c001a8d8:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a8df:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a8e5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a8eb:	3d 00 02 00 00       	cmp    eax,0x200
c001a8f0:	74 0a                	je     c001a8fc <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001a8f2:	b0 00                	mov    al,0x0
c001a8f4:	e9 c7 01 00 00       	jmp    c001aac0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a8f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a8fc:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a904:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a90b:	8b 04 85 40 77 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd88c0]
c001a912:	83 f8 ff             	cmp    eax,0xffffffff
c001a915:	74 09                	je     c001a920 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001a917:	b0 01                	mov    al,0x1
c001a919:	e9 a2 01 00 00       	jmp    c001aac0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a91e:	66 90                	xchg   ax,ax
c001a920:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a92a:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a932:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a939:	88 c2                	mov    dl,al
c001a93b:	a1 20 77 02 c0       	mov    eax,ds:0xc0027720
c001a940:	01 d0                	add    eax,edx
c001a942:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a949:	8b 15 20 77 02 c0    	mov    edx,DWORD PTR ds:0xc0027720
c001a94f:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a956:	89 14 85 40 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd88c0],edx
c001a95d:	a1 20 77 02 c0       	mov    eax,ds:0xc0027720
c001a962:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a969:	89 14 85 c0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8840],edx
c001a970:	83 ec 0c             	sub    esp,0xc
c001a973:	68 54 02 00 00       	push   0x254
c001a978:	e8 46 f0 fe ff       	call   c00099c3 <malloc>
c001a97d:	83 c4 10             	add    esp,0x10
c001a980:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001a987:	83 ec 04             	sub    esp,0x4
c001a98a:	6a 00                	push   0x0
c001a98c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a993:	50                   	push   eax
c001a994:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a99b:	e8 89 a4 fe ff       	call   c0004e29 <f_mount>
c001a9a0:	83 c4 10             	add    esp,0x10
c001a9a3:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a9aa:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001a9b2:	74 1c                	je     c001a9d0 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001a9b4:	83 ec 0c             	sub    esp,0xc
c001a9b7:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a9be:	e8 20 f0 fe ff       	call   c00099e3 <rfree>
c001a9c3:	83 c4 10             	add    esp,0x10
c001a9c6:	b0 00                	mov    al,0x0
c001a9c8:	e9 f3 00 00 00       	jmp    c001aac0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a9cd:	8d 76 00             	lea    esi,[esi+0x0]
c001a9d0:	83 ec 04             	sub    esp,0x4
c001a9d3:	68 00 01 00 00       	push   0x100
c001a9d8:	6a 00                	push   0x0
c001a9da:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a9e1:	50                   	push   eax
c001a9e2:	e8 9d 5c fe ff       	call   c0000684 <memset>
c001a9e7:	83 c4 10             	add    esp,0x10
c001a9ea:	83 ec 08             	sub    esp,0x8
c001a9ed:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a9f4:	50                   	push   eax
c001a9f5:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a9fc:	50                   	push   eax
c001a9fd:	e8 7e 5e fe ff       	call   c0000880 <strcat>
c001aa02:	83 c4 10             	add    esp,0x10
c001aa05:	83 ec 08             	sub    esp,0x8
c001aa08:	68 16 49 02 c0       	push   0xc0024916
c001aa0d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001aa14:	50                   	push   eax
c001aa15:	e8 66 5e fe ff       	call   c0000880 <strcat>
c001aa1a:	83 c4 10             	add    esp,0x10
c001aa1d:	83 ec 04             	sub    esp,0x4
c001aa20:	6a 01                	push   0x1
c001aa22:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001aa29:	50                   	push   eax
c001aa2a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aa2e:	50                   	push   eax
c001aa2f:	e8 57 a4 fe ff       	call   c0004e8b <f_open>
c001aa34:	83 c4 10             	add    esp,0x10
c001aa37:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001aa3e:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001aa45:	85 c0                	test   eax,eax
c001aa47:	74 0b                	je     c001aa54 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001aa49:	78 31                	js     c001aa7c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001aa4b:	83 e8 04             	sub    eax,0x4
c001aa4e:	83 f8 01             	cmp    eax,0x1
c001aa51:	77 29                	ja     c001aa7c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001aa53:	90                   	nop
c001aa54:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001aa5c:	83 ec 0c             	sub    esp,0xc
c001aa5f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aa63:	50                   	push   eax
c001aa64:	e8 74 af fe ff       	call   c00059dd <f_close>
c001aa69:	83 c4 10             	add    esp,0x10
c001aa6c:	90                   	nop
c001aa6d:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001aa75:	74 41                	je     c001aab8 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001aa77:	eb 33                	jmp    c001aaac <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001aa79:	8d 76 00             	lea    esi,[esi+0x0]
c001aa7c:	83 ec 0c             	sub    esp,0xc
c001aa7f:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001aa86:	e8 58 ef fe ff       	call   c00099e3 <rfree>
c001aa8b:	83 c4 10             	add    esp,0x10
c001aa8e:	83 ec 04             	sub    esp,0x4
c001aa91:	6a 00                	push   0x0
c001aa93:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001aa9a:	50                   	push   eax
c001aa9b:	6a 00                	push   0x0
c001aa9d:	e8 87 a3 fe ff       	call   c0004e29 <f_mount>
c001aaa2:	83 c4 10             	add    esp,0x10
c001aaa5:	b0 00                	mov    al,0x0
c001aaa7:	eb 17                	jmp    c001aac0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001aaa9:	8d 76 00             	lea    esi,[esi+0x0]
c001aaac:	a1 20 77 02 c0       	mov    eax,ds:0xc0027720
c001aab1:	40                   	inc    eax
c001aab2:	a3 20 77 02 c0       	mov    ds:0xc0027720,eax
c001aab7:	90                   	nop
c001aab8:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001aabf:	90                   	nop
c001aac0:	81 c4 6c 03 00 00    	add    esp,0x36c
c001aac6:	c3                   	ret    
c001aac7:	90                   	nop

c001aac8 <FAT::allocateSwapfile(char const*, int)>:
c001aac8:	55                   	push   ebp
c001aac9:	57                   	push   edi
c001aaca:	56                   	push   esi
c001aacb:	53                   	push   ebx
c001aacc:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001aad2:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001aadd:	83 ec 0c             	sub    esp,0xc
c001aae0:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001aae7:	e8 d7 ee fe ff       	call   c00099c3 <malloc>
c001aaec:	83 c4 10             	add    esp,0x10
c001aaef:	89 c7                	mov    edi,eax
c001aaf1:	a1 50 76 02 c0       	mov    eax,ds:0xc0027650
c001aaf6:	83 ec 04             	sub    esp,0x4
c001aaf9:	50                   	push   eax
c001aafa:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001ab01:	57                   	push   edi
c001ab02:	e8 c3 24 ff ff       	call   c000cfca <File::File(char const*, Process*)>
c001ab07:	83 c4 10             	add    esp,0x10
c001ab0a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001ab11:	83 ec 04             	sub    esp,0x4
c001ab14:	8d 44 24 13          	lea    eax,[esp+0x13]
c001ab18:	50                   	push   eax
c001ab19:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ab1d:	50                   	push   eax
c001ab1e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ab25:	e8 b0 27 ff ff       	call   c000d2da <File::stat(unsigned long long*, bool*)>
c001ab2a:	83 c4 10             	add    esp,0x10
c001ab2d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001ab34:	c1 e0 14             	shl    eax,0x14
c001ab37:	89 c7                	mov    edi,eax
c001ab39:	89 c5                	mov    ebp,eax
c001ab3b:	c1 fd 1f             	sar    ebp,0x1f
c001ab3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab42:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ab46:	89 f9                	mov    ecx,edi
c001ab48:	31 c1                	xor    ecx,eax
c001ab4a:	89 cb                	mov    ebx,ecx
c001ab4c:	89 e9                	mov    ecx,ebp
c001ab4e:	31 d1                	xor    ecx,edx
c001ab50:	89 ce                	mov    esi,ecx
c001ab52:	89 f0                	mov    eax,esi
c001ab54:	09 d8                	or     eax,ebx
c001ab56:	0f 84 98 00 00 00    	je     c001abf4 <FAT::allocateSwapfile(char const*, int)+0x12c>
c001ab5c:	83 ec 0c             	sub    esp,0xc
c001ab5f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ab66:	e8 3b 26 ff ff       	call   c000d1a6 <File::unlink()>
c001ab6b:	83 c4 10             	add    esp,0x10
c001ab6e:	83 ec 08             	sub    esp,0x8
c001ab71:	6a 12                	push   0x12
c001ab73:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ab7a:	e8 af 24 ff ff       	call   c000d02e <File::open(FileOpenMode)>
c001ab7f:	83 c4 10             	add    esp,0x10
c001ab82:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ab89:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001ab8f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001ab96:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001ab9d:	c1 e0 14             	shl    eax,0x14
c001aba0:	99                   	cdq    
c001aba1:	6a 01                	push   0x1
c001aba3:	52                   	push   edx
c001aba4:	50                   	push   eax
c001aba5:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001abac:	e8 dc c4 fe ff       	call   c000708d <f_expand>
c001abb1:	83 c4 10             	add    esp,0x10
c001abb4:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001abbb:	8b 00                	mov    eax,DWORD PTR [eax]
c001abbd:	83 c0 10             	add    eax,0x10
c001abc0:	8b 00                	mov    eax,DWORD PTR [eax]
c001abc2:	83 ec 0c             	sub    esp,0xc
c001abc5:	8d 54 24 24          	lea    edx,[esp+0x24]
c001abc9:	52                   	push   edx
c001abca:	8d 54 24 30          	lea    edx,[esp+0x30]
c001abce:	52                   	push   edx
c001abcf:	6a 00                	push   0x0
c001abd1:	68 00 04 00 00       	push   0x400
c001abd6:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001abdd:	ff d0                	call   eax
c001abdf:	83 c4 20             	add    esp,0x20
c001abe2:	83 ec 0c             	sub    esp,0xc
c001abe5:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001abec:	e8 9b 24 ff ff       	call   c000d08c <File::close()>
c001abf1:	83 c4 10             	add    esp,0x10
c001abf4:	83 ec 08             	sub    esp,0x8
c001abf7:	6a 01                	push   0x1
c001abf9:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac00:	e8 29 24 ff ff       	call   c000d02e <File::open(FileOpenMode)>
c001ac05:	83 c4 10             	add    esp,0x10
c001ac08:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ac0f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac11:	83 c0 0c             	add    eax,0xc
c001ac14:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac16:	83 ec 0c             	sub    esp,0xc
c001ac19:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ac1d:	52                   	push   edx
c001ac1e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001ac22:	52                   	push   edx
c001ac23:	6a 00                	push   0x0
c001ac25:	6a 04                	push   0x4
c001ac27:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001ac2e:	ff d0                	call   eax
c001ac30:	83 c4 20             	add    esp,0x20
c001ac33:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ac3a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001ac40:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001ac47:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001ac4e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001ac51:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001ac54:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001ac5b:	83 ec 0c             	sub    esp,0xc
c001ac5e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac65:	e8 22 24 ff ff       	call   c000d08c <File::close()>
c001ac6a:	83 c4 10             	add    esp,0x10
c001ac6d:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001ac74:	ba 00 00 00 00       	mov    edx,0x0
c001ac79:	81 c4 3c 04 00 00    	add    esp,0x43c
c001ac7f:	5b                   	pop    ebx
c001ac80:	5e                   	pop    esi
c001ac81:	5f                   	pop    edi
c001ac82:	5d                   	pop    ebp
c001ac83:	c3                   	ret    

c001ac84 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001ac84:	57                   	push   edi
c001ac85:	56                   	push   esi
c001ac86:	53                   	push   ebx
c001ac87:	81 ec 50 02 00 00    	sub    esp,0x250
c001ac8d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001ac95:	74 0d                	je     c001aca4 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001ac97:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001ac9f:	75 0f                	jne    c001acb0 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001aca1:	8d 76 00             	lea    esi,[esi+0x0]
c001aca4:	b8 04 00 00 00       	mov    eax,0x4
c001aca9:	e9 36 01 00 00       	jmp    c001ade4 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001acae:	66 90                	xchg   ax,ax
c001acb0:	83 ec 08             	sub    esp,0x8
c001acb3:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001acba:	50                   	push   eax
c001acbb:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001acc2:	e8 20 b3 fe ff       	call   c0005fe7 <f_readdir>
c001acc7:	83 c4 10             	add    esp,0x10
c001acca:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001acd1:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001acd8:	83 ec 0c             	sub    esp,0xc
c001acdb:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001ace2:	83 c0 1a             	add    eax,0x1a
c001ace5:	50                   	push   eax
c001ace6:	e8 b5 59 fe ff       	call   c00006a0 <strlen>
c001aceb:	83 c4 10             	add    esp,0x10
c001acee:	ba 00 00 00 00       	mov    edx,0x0
c001acf3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001acf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001acfb:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001ad02:	0f b6 c0             	movzx  eax,al
c001ad05:	83 e0 10             	and    eax,0x10
c001ad08:	74 0a                	je     c001ad14 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001ad0a:	b8 02 00 00 00       	mov    eax,0x2
c001ad0f:	eb 0b                	jmp    c001ad1c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001ad11:	8d 76 00             	lea    esi,[esi+0x0]
c001ad14:	b8 01 00 00 00       	mov    eax,0x1
c001ad19:	8d 76 00             	lea    esi,[esi+0x0]
c001ad1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ad20:	83 ec 08             	sub    esp,0x8
c001ad23:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001ad2a:	83 c0 1a             	add    eax,0x1a
c001ad2d:	50                   	push   eax
c001ad2e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ad32:	83 c0 10             	add    eax,0x10
c001ad35:	50                   	push   eax
c001ad36:	e8 05 5a fe ff       	call   c0000740 <strcpy>
c001ad3b:	83 c4 10             	add    esp,0x10
c001ad3e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001ad45:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001ad4c:	8d 44 24 04          	lea    eax,[esp+0x4]
c001ad50:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001ad57:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001ad5e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001ad65:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001ad6c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001ad73:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001ad7a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001ad81:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001ad88:	89 c6                	mov    esi,eax
c001ad8a:	89 d7                	mov    edi,edx
c001ad8c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad8e:	89 c8                	mov    eax,ecx
c001ad90:	89 fa                	mov    edx,edi
c001ad92:	89 f3                	mov    ebx,esi
c001ad94:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001ad9b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001ada2:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001ada9:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001adb0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001adb6:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001adbd:	84 c0                	test   al,al
c001adbf:	75 07                	jne    c001adc8 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001adc1:	b8 07 00 00 00       	mov    eax,0x7
c001adc6:	eb 1c                	jmp    c001ade4 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001adc8:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001adcf:	85 c0                	test   eax,eax
c001add1:	75 09                	jne    c001addc <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001add3:	b8 00 00 00 00       	mov    eax,0x0
c001add8:	eb 0a                	jmp    c001ade4 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001adda:	66 90                	xchg   ax,ax
c001addc:	b8 01 00 00 00       	mov    eax,0x1
c001ade1:	8d 76 00             	lea    esi,[esi+0x0]
c001ade4:	81 c4 50 02 00 00    	add    esp,0x250
c001adea:	5b                   	pop    ebx
c001adeb:	5e                   	pop    esi
c001adec:	5f                   	pop    edi
c001aded:	c3                   	ret    
c001adee:	66 90                	xchg   ax,ax

c001adf0 <FAT::read(void*, unsigned long, void*, int*)>:
c001adf0:	83 ec 1c             	sub    esp,0x1c
c001adf3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001adf8:	74 0a                	je     c001ae04 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001adfa:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001adff:	75 0b                	jne    c001ae0c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001ae01:	8d 76 00             	lea    esi,[esi+0x0]
c001ae04:	b8 04 00 00 00       	mov    eax,0x4
c001ae09:	eb 41                	jmp    c001ae4c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001ae0b:	90                   	nop
c001ae0c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ae10:	50                   	push   eax
c001ae11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ae19:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae1d:	e8 a5 a4 fe ff       	call   c00052c7 <f_read>
c001ae22:	83 c4 10             	add    esp,0x10
c001ae25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae2d:	89 c2                	mov    edx,eax
c001ae2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ae33:	89 10                	mov    DWORD PTR [eax],edx
c001ae35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae39:	85 c0                	test   eax,eax
c001ae3b:	75 07                	jne    c001ae44 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001ae3d:	b8 00 00 00 00       	mov    eax,0x0
c001ae42:	eb 08                	jmp    c001ae4c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001ae44:	b8 01 00 00 00       	mov    eax,0x1
c001ae49:	8d 76 00             	lea    esi,[esi+0x0]
c001ae4c:	83 c4 1c             	add    esp,0x1c
c001ae4f:	c3                   	ret    

c001ae50 <FAT::write(void*, unsigned long, void*, int*)>:
c001ae50:	83 ec 1c             	sub    esp,0x1c
c001ae53:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ae58:	74 0a                	je     c001ae64 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001ae5a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ae5f:	75 0b                	jne    c001ae6c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001ae61:	8d 76 00             	lea    esi,[esi+0x0]
c001ae64:	b8 04 00 00 00       	mov    eax,0x4
c001ae69:	eb 41                	jmp    c001aeac <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001ae6b:	90                   	nop
c001ae6c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ae70:	50                   	push   eax
c001ae71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ae79:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae7d:	e8 c5 a6 fe ff       	call   c0005547 <f_write>
c001ae82:	83 c4 10             	add    esp,0x10
c001ae85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae89:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae8d:	89 c2                	mov    edx,eax
c001ae8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ae93:	89 10                	mov    DWORD PTR [eax],edx
c001ae95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae99:	85 c0                	test   eax,eax
c001ae9b:	75 07                	jne    c001aea4 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001ae9d:	b8 00 00 00 00       	mov    eax,0x0
c001aea2:	eb 08                	jmp    c001aeac <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001aea4:	b8 01 00 00 00       	mov    eax,0x1
c001aea9:	8d 76 00             	lea    esi,[esi+0x0]
c001aeac:	83 c4 1c             	add    esp,0x1c
c001aeaf:	c3                   	ret    

c001aeb0 <FAT::close(void*)>:
c001aeb0:	83 ec 1c             	sub    esp,0x1c
c001aeb3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001aeb8:	75 0a                	jne    c001aec4 <FAT::close(void*)+0x14>
c001aeba:	b8 04 00 00 00       	mov    eax,0x4
c001aebf:	eb 3f                	jmp    c001af00 <FAT::close(void*)+0x50>
c001aec1:	8d 76 00             	lea    esi,[esi+0x0]
c001aec4:	83 ec 0c             	sub    esp,0xc
c001aec7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aecb:	e8 0d ab fe ff       	call   c00059dd <f_close>
c001aed0:	83 c4 10             	add    esp,0x10
c001aed3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aed7:	83 ec 0c             	sub    esp,0xc
c001aeda:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aede:	e8 f0 ea fe ff       	call   c00099d3 <free>
c001aee3:	83 c4 10             	add    esp,0x10
c001aee6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aeea:	85 c0                	test   eax,eax
c001aeec:	75 0a                	jne    c001aef8 <FAT::close(void*)+0x48>
c001aeee:	b8 00 00 00 00       	mov    eax,0x0
c001aef3:	eb 0b                	jmp    c001af00 <FAT::close(void*)+0x50>
c001aef5:	8d 76 00             	lea    esi,[esi+0x0]
c001aef8:	b8 01 00 00 00       	mov    eax,0x1
c001aefd:	8d 76 00             	lea    esi,[esi+0x0]
c001af00:	83 c4 1c             	add    esp,0x1c
c001af03:	c3                   	ret    

c001af04 <FAT::closeDir(void*)>:
c001af04:	83 ec 1c             	sub    esp,0x1c
c001af07:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001af0c:	75 0a                	jne    c001af18 <FAT::closeDir(void*)+0x14>
c001af0e:	b8 04 00 00 00       	mov    eax,0x4
c001af13:	eb 3f                	jmp    c001af54 <FAT::closeDir(void*)+0x50>
c001af15:	8d 76 00             	lea    esi,[esi+0x0]
c001af18:	83 ec 0c             	sub    esp,0xc
c001af1b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af1f:	e8 a1 b0 fe ff       	call   c0005fc5 <f_closedir>
c001af24:	83 c4 10             	add    esp,0x10
c001af27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af2b:	83 ec 0c             	sub    esp,0xc
c001af2e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af32:	e8 9c ea fe ff       	call   c00099d3 <free>
c001af37:	83 c4 10             	add    esp,0x10
c001af3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af3e:	85 c0                	test   eax,eax
c001af40:	75 0a                	jne    c001af4c <FAT::closeDir(void*)+0x48>
c001af42:	b8 00 00 00 00       	mov    eax,0x0
c001af47:	eb 0b                	jmp    c001af54 <FAT::closeDir(void*)+0x50>
c001af49:	8d 76 00             	lea    esi,[esi+0x0]
c001af4c:	b8 01 00 00 00       	mov    eax,0x1
c001af51:	8d 76 00             	lea    esi,[esi+0x0]
c001af54:	83 c4 1c             	add    esp,0x1c
c001af57:	c3                   	ret    

c001af58 <FAT::seek(void*, unsigned long long)>:
c001af58:	83 ec 2c             	sub    esp,0x2c
c001af5b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001af5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af63:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001af67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af6b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001af70:	75 0a                	jne    c001af7c <FAT::seek(void*, unsigned long long)+0x24>
c001af72:	b8 04 00 00 00       	mov    eax,0x4
c001af77:	eb 37                	jmp    c001afb0 <FAT::seek(void*, unsigned long long)+0x58>
c001af79:	8d 76 00             	lea    esi,[esi+0x0]
c001af7c:	83 ec 04             	sub    esp,0x4
c001af7f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001af83:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001af87:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001af8b:	e8 7c aa fe ff       	call   c0005a0c <f_lseek>
c001af90:	83 c4 10             	add    esp,0x10
c001af93:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001af97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af9b:	85 c0                	test   eax,eax
c001af9d:	75 09                	jne    c001afa8 <FAT::seek(void*, unsigned long long)+0x50>
c001af9f:	b8 00 00 00 00       	mov    eax,0x0
c001afa4:	eb 0a                	jmp    c001afb0 <FAT::seek(void*, unsigned long long)+0x58>
c001afa6:	66 90                	xchg   ax,ax
c001afa8:	b8 01 00 00 00       	mov    eax,0x1
c001afad:	8d 76 00             	lea    esi,[esi+0x0]
c001afb0:	83 c4 2c             	add    esp,0x2c
c001afb3:	c3                   	ret    

c001afb4 <fatWrapperReadDisk>:
c001afb4:	83 ec 1c             	sub    esp,0x1c
c001afb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001afbb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001afbf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001afc3:	89 04 24             	mov    DWORD PTR [esp],eax
c001afc6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001afca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001afce:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001afd3:	8b 04 85 20 67 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd98e0]
c001afda:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001afde:	83 ec 0c             	sub    esp,0xc
c001afe1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001afe5:	52                   	push   edx
c001afe6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001afea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001afee:	50                   	push   eax
c001afef:	e8 88 51 ff ff       	call   c001017c <LogicalDisk::read(unsigned long long, int, void*)>
c001aff4:	83 c4 20             	add    esp,0x20
c001aff7:	83 c4 1c             	add    esp,0x1c
c001affa:	c3                   	ret    
c001affb:	90                   	nop

c001affc <fatWrapperWriteDisk>:
c001affc:	83 ec 1c             	sub    esp,0x1c
c001afff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b003:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b007:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b00b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b00e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b012:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b016:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b01b:	8b 04 85 20 67 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd98e0]
c001b022:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b026:	83 ec 0c             	sub    esp,0xc
c001b029:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b02d:	52                   	push   edx
c001b02e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b032:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b036:	50                   	push   eax
c001b037:	e8 ac 51 ff ff       	call   c00101e8 <LogicalDisk::write(unsigned long long, int, void*)>
c001b03c:	83 c4 20             	add    esp,0x20
c001b03f:	83 c4 1c             	add    esp,0x1c
c001b042:	c3                   	ret    
c001b043:	90                   	nop

c001b044 <fatWrapperIoctl>:
c001b044:	53                   	push   ebx
c001b045:	83 ec 28             	sub    esp,0x28
c001b048:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b04c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b050:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b054:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b058:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001b05d:	75 31                	jne    c001b090 <fatWrapperIoctl+0x4c>
c001b05f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b063:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b067:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b06c:	8b 04 85 20 67 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd98e0]
c001b073:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b079:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b07f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b083:	66 89 02             	mov    WORD PTR [edx],ax
c001b086:	b8 00 00 00 00       	mov    eax,0x0
c001b08b:	e9 bc 00 00 00       	jmp    c001b14c <fatWrapperIoctl+0x108>
c001b090:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001b095:	75 6d                	jne    c001b104 <fatWrapperIoctl+0xc0>
c001b097:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b09b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b09f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b0a4:	8b 04 85 20 67 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd98e0]
c001b0ab:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b0b1:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b0b7:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b0bd:	89 c8                	mov    eax,ecx
c001b0bf:	89 da                	mov    edx,ebx
c001b0c1:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b0c5:	c1 e0 0a             	shl    eax,0xa
c001b0c8:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b0cd:	8b 0c 8d 20 67 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd98e0]
c001b0d4:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001b0da:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001b0e0:	89 cb                	mov    ebx,ecx
c001b0e2:	c1 fb 1f             	sar    ebx,0x1f
c001b0e5:	53                   	push   ebx
c001b0e6:	51                   	push   ecx
c001b0e7:	52                   	push   edx
c001b0e8:	50                   	push   eax
c001b0e9:	e8 b6 5d 00 00       	call   c0020ea4 <__udivdi3>
c001b0ee:	83 c4 10             	add    esp,0x10
c001b0f1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b0f5:	89 01                	mov    DWORD PTR [ecx],eax
c001b0f7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b0fa:	b8 00 00 00 00       	mov    eax,0x0
c001b0ff:	eb 4b                	jmp    c001b14c <fatWrapperIoctl+0x108>
c001b101:	8d 76 00             	lea    esi,[esi+0x0]
c001b104:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001b109:	75 09                	jne    c001b114 <fatWrapperIoctl+0xd0>
c001b10b:	b8 00 00 00 00       	mov    eax,0x0
c001b110:	eb 3a                	jmp    c001b14c <fatWrapperIoctl+0x108>
c001b112:	66 90                	xchg   ax,ax
c001b114:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001b119:	75 19                	jne    c001b134 <fatWrapperIoctl+0xf0>
c001b11b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b11f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b123:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b127:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b12d:	b8 00 00 00 00       	mov    eax,0x0
c001b132:	eb 18                	jmp    c001b14c <fatWrapperIoctl+0x108>
c001b134:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001b139:	75 09                	jne    c001b144 <fatWrapperIoctl+0x100>
c001b13b:	b8 00 00 00 00       	mov    eax,0x0
c001b140:	eb 0a                	jmp    c001b14c <fatWrapperIoctl+0x108>
c001b142:	66 90                	xchg   ax,ax
c001b144:	b8 04 00 00 00       	mov    eax,0x4
c001b149:	8d 76 00             	lea    esi,[esi+0x0]
c001b14c:	83 c4 28             	add    esp,0x28
c001b14f:	5b                   	pop    ebx
c001b150:	c3                   	ret    
c001b151:	90                   	nop
c001b152:	66 90                	xchg   ax,ax

c001b154 <FAT::FAT()>:
c001b154:	83 ec 1c             	sub    esp,0x1c
c001b157:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b15b:	83 ec 0c             	sub    esp,0xc
c001b15e:	50                   	push   eax
c001b15f:	e8 12 1c ff ff       	call   c000cd76 <Filesystem::Filesystem()>
c001b164:	83 c4 10             	add    esp,0x10
c001b167:	ba 2c 49 02 c0       	mov    edx,0xc002492c
c001b16c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b170:	89 10                	mov    DWORD PTR [eax],edx
c001b172:	c7 05 20 77 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027720,0x0
c001b17c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b184:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001b189:	7f 15                	jg     c001b1a0 <FAT::FAT()+0x4c>
c001b18b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b18f:	c7 04 85 40 77 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd88c0],0xffffffff
c001b19a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b19e:	eb e4                	jmp    c001b184 <FAT::FAT()+0x30>
c001b1a0:	90                   	nop
c001b1a1:	83 c4 1c             	add    esp,0x1c
c001b1a4:	c3                   	ret    
c001b1a5:	90                   	nop
c001b1a6:	66 90                	xchg   ax,ax

c001b1a8 <FAT::fixFilepath(char*)>:
c001b1a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1ac:	8a 00                	mov    al,BYTE PTR [eax]
c001b1ae:	3c 40                	cmp    al,0x40
c001b1b0:	7e 2e                	jle    c001b1e0 <FAT::fixFilepath(char*)+0x38>
c001b1b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1b6:	8a 00                	mov    al,BYTE PTR [eax]
c001b1b8:	83 e8 41             	sub    eax,0x41
c001b1bb:	88 c2                	mov    dl,al
c001b1bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1c1:	88 10                	mov    BYTE PTR [eax],dl
c001b1c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1c7:	8a 00                	mov    al,BYTE PTR [eax]
c001b1c9:	0f be c0             	movsx  eax,al
c001b1cc:	8b 04 85 40 77 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd88c0]
c001b1d3:	83 c0 30             	add    eax,0x30
c001b1d6:	88 c2                	mov    dl,al
c001b1d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1dc:	88 10                	mov    BYTE PTR [eax],dl
c001b1de:	66 90                	xchg   ax,ax
c001b1e0:	90                   	nop
c001b1e1:	c3                   	ret    
c001b1e2:	66 90                	xchg   ax,ax

c001b1e4 <FAT::open(char const*, void**, FileOpenMode)>:
c001b1e4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b1ea:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b1f2:	74 0c                	je     c001b200 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001b1f4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b1fc:	75 0e                	jne    c001b20c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001b1fe:	66 90                	xchg   ax,ax
c001b200:	b8 04 00 00 00       	mov    eax,0x4
c001b205:	e9 06 01 00 00       	jmp    c001b310 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b20a:	66 90                	xchg   ax,ax
c001b20c:	83 ec 08             	sub    esp,0x8
c001b20f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b216:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b21a:	50                   	push   eax
c001b21b:	e8 20 55 fe ff       	call   c0000740 <strcpy>
c001b220:	83 c4 10             	add    esp,0x10
c001b223:	83 ec 08             	sub    esp,0x8
c001b226:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b22a:	50                   	push   eax
c001b22b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b232:	e8 71 ff ff ff       	call   c001b1a8 <FAT::fixFilepath(char*)>
c001b237:	83 c4 10             	add    esp,0x10
c001b23a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001b242:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b249:	83 e0 01             	and    eax,0x1
c001b24c:	74 0a                	je     c001b258 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001b24e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001b256:	66 90                	xchg   ax,ax
c001b258:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b25f:	83 e0 04             	and    eax,0x4
c001b262:	74 10                	je     c001b274 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001b264:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001b26c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b274:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b27b:	83 e0 02             	and    eax,0x2
c001b27e:	74 08                	je     c001b288 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001b280:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b288:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b28f:	83 e0 08             	and    eax,0x8
c001b292:	74 08                	je     c001b29c <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001b294:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001b29c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b2a3:	83 e0 10             	and    eax,0x10
c001b2a6:	74 08                	je     c001b2b0 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001b2a8:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001b2b0:	83 ec 0c             	sub    esp,0xc
c001b2b3:	68 50 02 00 00       	push   0x250
c001b2b8:	e8 06 e7 fe ff       	call   c00099c3 <malloc>
c001b2bd:	83 c4 10             	add    esp,0x10
c001b2c0:	89 c2                	mov    edx,eax
c001b2c2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b2c9:	89 10                	mov    DWORD PTR [eax],edx
c001b2cb:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001b2d3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b2da:	8b 00                	mov    eax,DWORD PTR [eax]
c001b2dc:	83 ec 04             	sub    esp,0x4
c001b2df:	52                   	push   edx
c001b2e0:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b2e4:	52                   	push   edx
c001b2e5:	50                   	push   eax
c001b2e6:	e8 a0 9b fe ff       	call   c0004e8b <f_open>
c001b2eb:	83 c4 10             	add    esp,0x10
c001b2ee:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001b2f5:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001b2fd:	74 09                	je     c001b308 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001b2ff:	b8 01 00 00 00       	mov    eax,0x1
c001b304:	eb 0a                	jmp    c001b310 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b306:	66 90                	xchg   ax,ax
c001b308:	b8 00 00 00 00       	mov    eax,0x0
c001b30d:	8d 76 00             	lea    esi,[esi+0x0]
c001b310:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b316:	c3                   	ret    
c001b317:	90                   	nop

c001b318 <FAT::openDir(char const*, void**)>:
c001b318:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b31e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b326:	74 0c                	je     c001b334 <FAT::openDir(char const*, void**)+0x1c>
c001b328:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b330:	75 0e                	jne    c001b340 <FAT::openDir(char const*, void**)+0x28>
c001b332:	66 90                	xchg   ax,ax
c001b334:	b8 04 00 00 00       	mov    eax,0x4
c001b339:	e9 82 00 00 00       	jmp    c001b3c0 <FAT::openDir(char const*, void**)+0xa8>
c001b33e:	66 90                	xchg   ax,ax
c001b340:	83 ec 08             	sub    esp,0x8
c001b343:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b34a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b34e:	50                   	push   eax
c001b34f:	e8 ec 53 fe ff       	call   c0000740 <strcpy>
c001b354:	83 c4 10             	add    esp,0x10
c001b357:	83 ec 08             	sub    esp,0x8
c001b35a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b35e:	50                   	push   eax
c001b35f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b366:	e8 3d fe ff ff       	call   c001b1a8 <FAT::fixFilepath(char*)>
c001b36b:	83 c4 10             	add    esp,0x10
c001b36e:	83 ec 0c             	sub    esp,0xc
c001b371:	6a 4c                	push   0x4c
c001b373:	e8 4b e6 fe ff       	call   c00099c3 <malloc>
c001b378:	83 c4 10             	add    esp,0x10
c001b37b:	89 c2                	mov    edx,eax
c001b37d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b384:	89 10                	mov    DWORD PTR [eax],edx
c001b386:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b38d:	8b 00                	mov    eax,DWORD PTR [eax]
c001b38f:	83 ec 08             	sub    esp,0x8
c001b392:	8d 54 24 14          	lea    edx,[esp+0x14]
c001b396:	52                   	push   edx
c001b397:	50                   	push   eax
c001b398:	e8 26 ab fe ff       	call   c0005ec3 <f_opendir>
c001b39d:	83 c4 10             	add    esp,0x10
c001b3a0:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b3a7:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001b3af:	74 07                	je     c001b3b8 <FAT::openDir(char const*, void**)+0xa0>
c001b3b1:	b8 01 00 00 00       	mov    eax,0x1
c001b3b6:	eb 08                	jmp    c001b3c0 <FAT::openDir(char const*, void**)+0xa8>
c001b3b8:	b8 00 00 00 00       	mov    eax,0x0
c001b3bd:	8d 76 00             	lea    esi,[esi+0x0]
c001b3c0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b3c6:	c3                   	ret    
c001b3c7:	90                   	nop

c001b3c8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001b3c8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b3ce:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001b3d6:	75 0c                	jne    c001b3e4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001b3d8:	b8 04 00 00 00       	mov    eax,0x4
c001b3dd:	e9 d2 00 00 00       	jmp    c001b4b4 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b3e2:	66 90                	xchg   ax,ax
c001b3e4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001b3ec:	75 0a                	jne    c001b3f8 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001b3ee:	b8 04 00 00 00       	mov    eax,0x4
c001b3f3:	e9 bc 00 00 00       	jmp    c001b4b4 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b3f8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001b400:	75 0a                	jne    c001b40c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001b402:	b8 04 00 00 00       	mov    eax,0x4
c001b407:	e9 a8 00 00 00       	jmp    c001b4b4 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b40c:	83 ec 08             	sub    esp,0x8
c001b40f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b416:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b41d:	50                   	push   eax
c001b41e:	e8 1d 53 fe ff       	call   c0000740 <strcpy>
c001b423:	83 c4 10             	add    esp,0x10
c001b426:	83 ec 08             	sub    esp,0x8
c001b429:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001b430:	50                   	push   eax
c001b431:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b438:	e8 6b fd ff ff       	call   c001b1a8 <FAT::fixFilepath(char*)>
c001b43d:	83 c4 10             	add    esp,0x10
c001b440:	83 ec 08             	sub    esp,0x8
c001b443:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b447:	50                   	push   eax
c001b448:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b44f:	50                   	push   eax
c001b450:	e8 2d ac fe ff       	call   c0006082 <f_stat>
c001b455:	83 c4 10             	add    esp,0x10
c001b458:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b45f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b466:	85 c0                	test   eax,eax
c001b468:	74 0a                	je     c001b474 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001b46a:	83 f8 04             	cmp    eax,0x4
c001b46d:	74 35                	je     c001b4a4 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001b46f:	eb 3b                	jmp    c001b4ac <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001b471:	8d 76 00             	lea    esi,[esi+0x0]
c001b474:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b478:	0f b6 c0             	movzx  eax,al
c001b47b:	83 e0 10             	and    eax,0x10
c001b47e:	0f 95 c2             	setne  dl
c001b481:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001b488:	88 10                	mov    BYTE PTR [eax],dl
c001b48a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b48d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b491:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001b498:	89 01                	mov    DWORD PTR [ecx],eax
c001b49a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b49d:	b8 00 00 00 00       	mov    eax,0x0
c001b4a2:	eb 10                	jmp    c001b4b4 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b4a4:	b8 02 00 00 00       	mov    eax,0x2
c001b4a9:	eb 09                	jmp    c001b4b4 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b4ab:	90                   	nop
c001b4ac:	b8 01 00 00 00       	mov    eax,0x1
c001b4b1:	8d 76 00             	lea    esi,[esi+0x0]
c001b4b4:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b4ba:	c3                   	ret    
c001b4bb:	90                   	nop

c001b4bc <FAT::unlink(char const*)>:
c001b4bc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b4c2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b4ca:	75 08                	jne    c001b4d4 <FAT::unlink(char const*)+0x18>
c001b4cc:	b8 04 00 00 00       	mov    eax,0x4
c001b4d1:	eb 61                	jmp    c001b534 <FAT::unlink(char const*)+0x78>
c001b4d3:	90                   	nop
c001b4d4:	83 ec 08             	sub    esp,0x8
c001b4d7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b4de:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b4e2:	50                   	push   eax
c001b4e3:	e8 58 52 fe ff       	call   c0000740 <strcpy>
c001b4e8:	83 c4 10             	add    esp,0x10
c001b4eb:	83 ec 08             	sub    esp,0x8
c001b4ee:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b4f2:	50                   	push   eax
c001b4f3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b4fa:	e8 a9 fc ff ff       	call   c001b1a8 <FAT::fixFilepath(char*)>
c001b4ff:	83 c4 10             	add    esp,0x10
c001b502:	83 ec 0c             	sub    esp,0xc
c001b505:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b509:	50                   	push   eax
c001b50a:	e8 c5 ae fe ff       	call   c00063d4 <f_unlink>
c001b50f:	83 c4 10             	add    esp,0x10
c001b512:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b519:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b520:	85 c0                	test   eax,eax
c001b522:	75 08                	jne    c001b52c <FAT::unlink(char const*)+0x70>
c001b524:	b8 00 00 00 00       	mov    eax,0x0
c001b529:	eb 09                	jmp    c001b534 <FAT::unlink(char const*)+0x78>
c001b52b:	90                   	nop
c001b52c:	b8 01 00 00 00       	mov    eax,0x1
c001b531:	8d 76 00             	lea    esi,[esi+0x0]
c001b534:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b53a:	c3                   	ret    
c001b53b:	90                   	nop

c001b53c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001b53c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b542:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001b549:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001b550:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b554:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b558:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001b560:	75 0a                	jne    c001b56c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001b562:	b8 04 00 00 00       	mov    eax,0x4
c001b567:	e9 30 01 00 00       	jmp    c001b69c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b56c:	83 ec 08             	sub    esp,0x8
c001b56f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b576:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b57a:	50                   	push   eax
c001b57b:	e8 c0 51 fe ff       	call   c0000740 <strcpy>
c001b580:	83 c4 10             	add    esp,0x10
c001b583:	83 ec 08             	sub    esp,0x8
c001b586:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b58a:	50                   	push   eax
c001b58b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b592:	e8 11 fc ff ff       	call   c001b1a8 <FAT::fixFilepath(char*)>
c001b597:	83 c4 10             	add    esp,0x10
c001b59a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001b5a2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001b5aa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b5af:	83 e0 01             	and    eax,0x1
c001b5b2:	74 08                	je     c001b5bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001b5b4:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001b5bc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b5c1:	83 e0 02             	and    eax,0x2
c001b5c4:	74 0a                	je     c001b5d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001b5c6:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001b5ce:	66 90                	xchg   ax,ax
c001b5d0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b5d5:	83 e0 04             	and    eax,0x4
c001b5d8:	74 0a                	je     c001b5e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001b5da:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001b5e2:	66 90                	xchg   ax,ax
c001b5e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b5e9:	83 e0 08             	and    eax,0x8
c001b5ec:	74 0a                	je     c001b5f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001b5ee:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001b5f6:	66 90                	xchg   ax,ax
c001b5f8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b5fd:	83 e0 01             	and    eax,0x1
c001b600:	74 0a                	je     c001b60c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001b602:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001b60a:	66 90                	xchg   ax,ax
c001b60c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b611:	83 e0 02             	and    eax,0x2
c001b614:	74 0a                	je     c001b620 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001b616:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001b61e:	66 90                	xchg   ax,ax
c001b620:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b625:	83 e0 04             	and    eax,0x4
c001b628:	74 0a                	je     c001b634 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001b62a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001b632:	66 90                	xchg   ax,ax
c001b634:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b639:	83 e0 08             	and    eax,0x8
c001b63c:	74 0a                	je     c001b648 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001b63e:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001b646:	66 90                	xchg   ax,ax
c001b648:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b64f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001b656:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001b65e:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001b666:	83 ec 04             	sub    esp,0x4
c001b669:	52                   	push   edx
c001b66a:	50                   	push   eax
c001b66b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b66f:	50                   	push   eax
c001b670:	e8 01 b4 fe ff       	call   c0006a76 <f_chmod>
c001b675:	83 c4 10             	add    esp,0x10
c001b678:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001b67f:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001b686:	85 c0                	test   eax,eax
c001b688:	75 0a                	jne    c001b694 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001b68a:	b8 00 00 00 00       	mov    eax,0x0
c001b68f:	eb 0b                	jmp    c001b69c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b691:	8d 76 00             	lea    esi,[esi+0x0]
c001b694:	b8 01 00 00 00       	mov    eax,0x1
c001b699:	8d 76 00             	lea    esi,[esi+0x0]
c001b69c:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b6a2:	c3                   	ret    
c001b6a3:	90                   	nop

c001b6a4 <FAT::rename(char const*, char const*)>:
c001b6a4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b6aa:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001b6b2:	74 0c                	je     c001b6c0 <FAT::rename(char const*, char const*)+0x1c>
c001b6b4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001b6bc:	75 0e                	jne    c001b6cc <FAT::rename(char const*, char const*)+0x28>
c001b6be:	66 90                	xchg   ax,ax
c001b6c0:	b8 04 00 00 00       	mov    eax,0x4
c001b6c5:	e9 9e 00 00 00       	jmp    c001b768 <FAT::rename(char const*, char const*)+0xc4>
c001b6ca:	66 90                	xchg   ax,ax
c001b6cc:	83 ec 08             	sub    esp,0x8
c001b6cf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b6d6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b6dd:	50                   	push   eax
c001b6de:	e8 5d 50 fe ff       	call   c0000740 <strcpy>
c001b6e3:	83 c4 10             	add    esp,0x10
c001b6e6:	83 ec 08             	sub    esp,0x8
c001b6e9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001b6f0:	50                   	push   eax
c001b6f1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b6f8:	e8 ab fa ff ff       	call   c001b1a8 <FAT::fixFilepath(char*)>
c001b6fd:	83 c4 10             	add    esp,0x10
c001b700:	83 ec 08             	sub    esp,0x8
c001b703:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001b70a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b70e:	50                   	push   eax
c001b70f:	e8 2c 50 fe ff       	call   c0000740 <strcpy>
c001b714:	83 c4 10             	add    esp,0x10
c001b717:	83 ec 08             	sub    esp,0x8
c001b71a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b71e:	50                   	push   eax
c001b71f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b726:	e8 7d fa ff ff       	call   c001b1a8 <FAT::fixFilepath(char*)>
c001b72b:	83 c4 10             	add    esp,0x10
c001b72e:	83 ec 08             	sub    esp,0x8
c001b731:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b735:	50                   	push   eax
c001b736:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b73d:	50                   	push   eax
c001b73e:	e8 40 b0 fe ff       	call   c0006783 <f_rename>
c001b743:	83 c4 10             	add    esp,0x10
c001b746:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001b74d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001b754:	85 c0                	test   eax,eax
c001b756:	75 08                	jne    c001b760 <FAT::rename(char const*, char const*)+0xbc>
c001b758:	b8 00 00 00 00       	mov    eax,0x0
c001b75d:	eb 09                	jmp    c001b768 <FAT::rename(char const*, char const*)+0xc4>
c001b75f:	90                   	nop
c001b760:	b8 01 00 00 00       	mov    eax,0x1
c001b765:	8d 76 00             	lea    esi,[esi+0x0]
c001b768:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b76e:	c3                   	ret    
c001b76f:	90                   	nop

c001b770 <FAT::mkdir(char const*)>:
c001b770:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b776:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b77e:	75 08                	jne    c001b788 <FAT::mkdir(char const*)+0x18>
c001b780:	b8 04 00 00 00       	mov    eax,0x4
c001b785:	eb 61                	jmp    c001b7e8 <FAT::mkdir(char const*)+0x78>
c001b787:	90                   	nop
c001b788:	83 ec 08             	sub    esp,0x8
c001b78b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b792:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b796:	50                   	push   eax
c001b797:	e8 a4 4f fe ff       	call   c0000740 <strcpy>
c001b79c:	83 c4 10             	add    esp,0x10
c001b79f:	83 ec 08             	sub    esp,0x8
c001b7a2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b7a6:	50                   	push   eax
c001b7a7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b7ae:	e8 f5 f9 ff ff       	call   c001b1a8 <FAT::fixFilepath(char*)>
c001b7b3:	83 c4 10             	add    esp,0x10
c001b7b6:	83 ec 0c             	sub    esp,0xc
c001b7b9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b7bd:	50                   	push   eax
c001b7be:	e8 94 ad fe ff       	call   c0006557 <f_mkdir>
c001b7c3:	83 c4 10             	add    esp,0x10
c001b7c6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b7cd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b7d4:	85 c0                	test   eax,eax
c001b7d6:	75 08                	jne    c001b7e0 <FAT::mkdir(char const*)+0x70>
c001b7d8:	b8 00 00 00 00       	mov    eax,0x0
c001b7dd:	eb 09                	jmp    c001b7e8 <FAT::mkdir(char const*)+0x78>
c001b7df:	90                   	nop
c001b7e0:	b8 01 00 00 00       	mov    eax,0x1
c001b7e5:	8d 76 00             	lea    esi,[esi+0x0]
c001b7e8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b7ee:	c3                   	ret    
c001b7ef:	90                   	nop

c001b7f0 <FAT::exists(char const*)>:
c001b7f0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b7f6:	83 ec 08             	sub    esp,0x8
c001b7f9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b800:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b804:	50                   	push   eax
c001b805:	e8 36 4f fe ff       	call   c0000740 <strcpy>
c001b80a:	83 c4 10             	add    esp,0x10
c001b80d:	83 ec 08             	sub    esp,0x8
c001b810:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b814:	50                   	push   eax
c001b815:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b81c:	e8 87 f9 ff ff       	call   c001b1a8 <FAT::fixFilepath(char*)>
c001b821:	83 c4 10             	add    esp,0x10
c001b824:	83 ec 08             	sub    esp,0x8
c001b827:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001b82e:	50                   	push   eax
c001b82f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b833:	50                   	push   eax
c001b834:	e8 49 a8 fe ff       	call   c0006082 <f_stat>
c001b839:	83 c4 10             	add    esp,0x10
c001b83c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b843:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b84a:	85 c0                	test   eax,eax
c001b84c:	75 06                	jne    c001b854 <FAT::exists(char const*)+0x64>
c001b84e:	b0 01                	mov    al,0x1
c001b850:	eb 06                	jmp    c001b858 <FAT::exists(char const*)+0x68>
c001b852:	66 90                	xchg   ax,ax
c001b854:	b0 00                	mov    al,0x0
c001b856:	66 90                	xchg   ax,ax
c001b858:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b85e:	c3                   	ret    
c001b85f:	90                   	nop

c001b860 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001b860:	b8 08 00 00 00       	mov    eax,0x8
c001b865:	c3                   	ret    

c001b866 <ISO9660::seek(void*, unsigned long long)>:
c001b866:	53                   	push   ebx
c001b867:	b8 04 00 00 00       	mov    eax,0x4
c001b86c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b870:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b874:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b878:	85 d2                	test   edx,edx
c001b87a:	74 17                	je     c001b893 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b87c:	89 c8                	mov    eax,ecx
c001b87e:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001b881:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001b884:	b8 01 00 00 00       	mov    eax,0x1
c001b889:	73 08                	jae    c001b893 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b88b:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001b88e:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b891:	31 c0                	xor    eax,eax
c001b893:	5b                   	pop    ebx
c001b894:	c3                   	ret    
c001b895:	90                   	nop

c001b896 <ISO9660::tell(void*, unsigned long long*)>:
c001b896:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b89a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b89e:	85 d2                	test   edx,edx
c001b8a0:	74 12                	je     c001b8b4 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b8a2:	85 c0                	test   eax,eax
c001b8a4:	74 0e                	je     c001b8b4 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b8a6:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b8a9:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001b8ac:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b8af:	89 10                	mov    DWORD PTR [eax],edx
c001b8b1:	31 c0                	xor    eax,eax
c001b8b3:	c3                   	ret    
c001b8b4:	b8 04 00 00 00       	mov    eax,0x4
c001b8b9:	c3                   	ret    

c001b8ba <ISO9660::getName()>:
c001b8ba:	b8 8c 49 02 c0       	mov    eax,0xc002498c
c001b8bf:	c3                   	ret    

c001b8c0 <ISO9660::stat(void*, unsigned long long*)>:
c001b8c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b8c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b8c8:	85 d2                	test   edx,edx
c001b8ca:	74 12                	je     c001b8de <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b8cc:	85 c0                	test   eax,eax
c001b8ce:	74 0e                	je     c001b8de <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b8d0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001b8d3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001b8d6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b8d9:	89 10                	mov    DWORD PTR [eax],edx
c001b8db:	31 c0                	xor    eax,eax
c001b8dd:	c3                   	ret    
c001b8de:	b8 04 00 00 00       	mov    eax,0x4
c001b8e3:	c3                   	ret    

c001b8e4 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001b8e4:	b8 01 00 00 00       	mov    eax,0x1
c001b8e9:	c3                   	ret    

c001b8ea <ISO9660::unlink(char const*)>:
c001b8ea:	b8 01 00 00 00       	mov    eax,0x1
c001b8ef:	c3                   	ret    

c001b8f0 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001b8f0:	b8 01 00 00 00       	mov    eax,0x1
c001b8f5:	c3                   	ret    

c001b8f6 <ISO9660::rename(char const*, char const*)>:
c001b8f6:	b8 01 00 00 00       	mov    eax,0x1
c001b8fb:	c3                   	ret    

c001b8fc <ISO9660::mkdir(char const*)>:
c001b8fc:	b8 01 00 00 00       	mov    eax,0x1
c001b901:	c3                   	ret    

c001b902 <ISO9660::close(void*)>:
c001b902:	83 ec 0c             	sub    esp,0xc
c001b905:	b8 04 00 00 00       	mov    eax,0x4
c001b90a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b90e:	85 d2                	test   edx,edx
c001b910:	74 0e                	je     c001b920 <ISO9660::close(void*)+0x1e>
c001b912:	83 ec 0c             	sub    esp,0xc
c001b915:	52                   	push   edx
c001b916:	e8 b8 e0 fe ff       	call   c00099d3 <free>
c001b91b:	83 c4 10             	add    esp,0x10
c001b91e:	31 c0                	xor    eax,eax
c001b920:	83 c4 0c             	add    esp,0xc
c001b923:	c3                   	ret    

c001b924 <ISO9660::closeDir(void*)>:
c001b924:	83 ec 0c             	sub    esp,0xc
c001b927:	b8 04 00 00 00       	mov    eax,0x4
c001b92c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b930:	85 d2                	test   edx,edx
c001b932:	74 0e                	je     c001b942 <ISO9660::closeDir(void*)+0x1e>
c001b934:	83 ec 0c             	sub    esp,0xc
c001b937:	52                   	push   edx
c001b938:	e8 96 e0 fe ff       	call   c00099d3 <free>
c001b93d:	83 c4 10             	add    esp,0x10
c001b940:	31 c0                	xor    eax,eax
c001b942:	83 c4 0c             	add    esp,0xc
c001b945:	c3                   	ret    

c001b946 <ISO9660::~ISO9660()>:
c001b946:	83 ec 0c             	sub    esp,0xc
c001b949:	ba b0 49 02 c0       	mov    edx,0xc00249b0
c001b94e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b952:	89 10                	mov    DWORD PTR [eax],edx
c001b954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b958:	83 ec 0c             	sub    esp,0xc
c001b95b:	50                   	push   eax
c001b95c:	e8 39 14 ff ff       	call   c000cd9a <Filesystem::~Filesystem()>
c001b961:	83 c4 10             	add    esp,0x10
c001b964:	90                   	nop
c001b965:	83 c4 0c             	add    esp,0xc
c001b968:	c3                   	ret    
c001b969:	90                   	nop

c001b96a <ISO9660::~ISO9660()>:
c001b96a:	83 ec 0c             	sub    esp,0xc
c001b96d:	83 ec 0c             	sub    esp,0xc
c001b970:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b974:	e8 cd ff ff ff       	call   c001b946 <ISO9660::~ISO9660()>
c001b979:	83 c4 10             	add    esp,0x10
c001b97c:	83 ec 08             	sub    esp,0x8
c001b97f:	6a 08                	push   0x8
c001b981:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b985:	e8 f4 0f ff ff       	call   c000c97e <operator delete(void*, unsigned long)>
c001b98a:	83 c4 10             	add    esp,0x10
c001b98d:	83 c4 0c             	add    esp,0xc
c001b990:	c3                   	ret    

c001b991 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001b991:	55                   	push   ebp
c001b992:	31 c9                	xor    ecx,ecx
c001b994:	57                   	push   edi
c001b995:	56                   	push   esi
c001b996:	53                   	push   ebx
c001b997:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001b99b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b99f:	89 eb                	mov    ebx,ebp
c001b9a1:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001b9a5:	39 ce                	cmp    esi,ecx
c001b9a7:	7e 17                	jle    c001b9c0 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001b9a9:	31 d2                	xor    edx,edx
c001b9ab:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001b9af:	7d 13                	jge    c001b9c4 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001b9b1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b9b5:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b9b8:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001b9bb:	75 0d                	jne    c001b9ca <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001b9bd:	42                   	inc    edx
c001b9be:	eb eb                	jmp    c001b9ab <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001b9c0:	31 c0                	xor    eax,eax
c001b9c2:	eb 0a                	jmp    c001b9ce <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b9c4:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001b9c8:	eb 04                	jmp    c001b9ce <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b9ca:	41                   	inc    ecx
c001b9cb:	43                   	inc    ebx
c001b9cc:	eb d7                	jmp    c001b9a5 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001b9ce:	5b                   	pop    ebx
c001b9cf:	5e                   	pop    esi
c001b9d0:	5f                   	pop    edi
c001b9d1:	5d                   	pop    ebp
c001b9d2:	c3                   	ret    

c001b9d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b9d3:	57                   	push   edi
c001b9d4:	56                   	push   esi
c001b9d5:	53                   	push   ebx
c001b9d6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b9da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9de:	39 0d 20 78 02 c0    	cmp    DWORD PTR ds:0xc0027820,ecx
c001b9e4:	75 08                	jne    c001b9ee <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c001b9e6:	38 05 94 5b 02 c0    	cmp    BYTE PTR ds:0xc0025b94,al
c001b9ec:	74 2b                	je     c001ba19 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c001b9ee:	83 ec 0c             	sub    esp,0xc
c001b9f1:	a2 94 5b 02 c0       	mov    ds:0xc0025b94,al
c001b9f6:	68 40 78 02 c0       	push   0xc0027840
c001b9fb:	0f be c0             	movsx  eax,al
c001b9fe:	6a 01                	push   0x1
c001ba00:	89 0d 20 78 02 c0    	mov    DWORD PTR ds:0xc0027820,ecx
c001ba06:	31 db                	xor    ebx,ebx
c001ba08:	53                   	push   ebx
c001ba09:	51                   	push   ecx
c001ba0a:	ff 34 85 1c 66 02 c0 	push   DWORD PTR [eax*4-0x3ffd99e4]
c001ba11:	e8 66 47 ff ff       	call   c001017c <LogicalDisk::read(unsigned long long, int, void*)>
c001ba16:	83 c4 20             	add    esp,0x20
c001ba19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ba1d:	be 40 78 02 c0       	mov    esi,0xc0027840
c001ba22:	b9 00 08 00 00       	mov    ecx,0x800
c001ba27:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ba29:	5b                   	pop    ebx
c001ba2a:	5e                   	pop    esi
c001ba2b:	5f                   	pop    edi
c001ba2c:	c3                   	ret    
c001ba2d:	90                   	nop

c001ba2e <ISO9660::tryMount(LogicalDisk*, int)>:
c001ba2e:	81 ec 10 08 00 00    	sub    esp,0x810
c001ba34:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001ba3b:	83 c0 41             	add    eax,0x41
c001ba3e:	0f be c0             	movsx  eax,al
c001ba41:	50                   	push   eax
c001ba42:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ba46:	50                   	push   eax
c001ba47:	6a 10                	push   0x10
c001ba49:	e8 85 ff ff ff       	call   c001b9d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ba4e:	83 c4 10             	add    esp,0x10
c001ba51:	31 c0                	xor    eax,eax
c001ba53:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001ba58:	75 1d                	jne    c001ba77 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ba5a:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001ba5f:	75 16                	jne    c001ba77 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ba61:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001ba66:	75 0f                	jne    c001ba77 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ba68:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001ba6d:	75 08                	jne    c001ba77 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ba6f:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001ba74:	0f 94 c0             	sete   al
c001ba77:	81 c4 0c 08 00 00    	add    esp,0x80c
c001ba7d:	c3                   	ret    

c001ba7e <ISO9660::read(void*, unsigned long, void*, int*)>:
c001ba7e:	55                   	push   ebp
c001ba7f:	57                   	push   edi
c001ba80:	56                   	push   esi
c001ba81:	53                   	push   ebx
c001ba82:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001ba88:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001ba8f:	85 ed                	test   ebp,ebp
c001ba91:	0f 84 da 01 00 00    	je     c001bc71 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001ba97:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001ba9f:	0f 84 cc 01 00 00    	je     c001bc71 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001baa5:	b8 01 00 00 00       	mov    eax,0x1
c001baaa:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001baae:	0f 85 c2 01 00 00    	jne    c001bc76 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001bab4:	31 d2                	xor    edx,edx
c001bab6:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001babd:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001bac0:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001bac3:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001bac6:	89 04 24             	mov    DWORD PTR [esp],eax
c001bac9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bacd:	01 c8                	add    eax,ecx
c001bacf:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001bad2:	11 da                	adc    edx,ebx
c001bad4:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001bad8:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001badc:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001bae0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bae4:	19 d7                	sbb    edi,edx
c001bae6:	72 11                	jb     c001baf9 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001bae8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001baeb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001baef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001baf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001baf7:	eb 0c                	jmp    c001bb05 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001baf9:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001bafd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bb01:	29 ce                	sub    esi,ecx
c001bb03:	19 df                	sbb    edi,ebx
c001bb05:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bb08:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001bb0b:	0f a4 c2 0b          	shld   edx,eax,0xb
c001bb0f:	c1 e0 0b             	shl    eax,0xb
c001bb12:	01 c8                	add    eax,ecx
c001bb14:	11 da                	adc    edx,ebx
c001bb16:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb19:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bb1d:	51                   	push   ecx
c001bb1e:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bb22:	50                   	push   eax
c001bb23:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001bb27:	53                   	push   ebx
c001bb28:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bb2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb30:	0f ac d0 0b          	shrd   eax,edx,0xb
c001bb34:	50                   	push   eax
c001bb35:	e8 99 fe ff ff       	call   c001b9d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bb3a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001bb3d:	b8 00 08 00 00       	mov    eax,0x800
c001bb42:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001bb48:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001bb4c:	29 d0                	sub    eax,edx
c001bb4e:	83 c4 10             	add    esp,0x10
c001bb51:	89 f9                	mov    ecx,edi
c001bb53:	39 c6                	cmp    esi,eax
c001bb55:	83 d9 00             	sbb    ecx,0x0
c001bb58:	7d 1b                	jge    c001bb75 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001bb5a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001bb5f:	75 12                	jne    c001bb73 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001bb61:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bb68:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb6e:	e9 fa 00 00 00       	jmp    c001bc6d <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001bb73:	89 f0                	mov    eax,esi
c001bb75:	01 d3                	add    ebx,edx
c001bb77:	31 d2                	xor    edx,edx
c001bb79:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001bb7d:	39 c2                	cmp    edx,eax
c001bb7f:	7d 14                	jge    c001bb95 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001bb81:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001bb88:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001bb8c:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001bb8f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001bb92:	42                   	inc    edx
c001bb93:	eb e8                	jmp    c001bb7d <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001bb95:	89 c2                	mov    edx,eax
c001bb97:	85 c0                	test   eax,eax
c001bb99:	79 02                	jns    c001bb9d <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001bb9b:	31 d2                	xor    edx,edx
c001bb9d:	01 c2                	add    edx,eax
c001bb9f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001bba2:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001bba9:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001bbad:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001bbb1:	99                   	cdq    
c001bbb2:	01 c1                	add    ecx,eax
c001bbb4:	11 d3                	adc    ebx,edx
c001bbb6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001bbba:	29 c6                	sub    esi,eax
c001bbbc:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001bbc0:	19 d7                	sbb    edi,edx
c001bbc2:	89 34 24             	mov    DWORD PTR [esp],esi
c001bbc5:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001bbc9:	b8 ff 07 00 00       	mov    eax,0x7ff
c001bbce:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001bbd1:	b8 00 00 00 00       	mov    eax,0x0
c001bbd6:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001bbda:	7d 43                	jge    c001bc1f <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001bbdc:	52                   	push   edx
c001bbdd:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bbe1:	50                   	push   eax
c001bbe2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bbe6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bbea:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bbee:	0f ac d0 0b          	shrd   eax,edx,0xb
c001bbf2:	50                   	push   eax
c001bbf3:	e8 db fd ff ff       	call   c001b9d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bbf8:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001bc00:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001bc05:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001bc0d:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001bc15:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001bc1a:	83 c4 10             	add    esp,0x10
c001bc1d:	eb aa                	jmp    c001bbc9 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001bc1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc23:	0b 04 24             	or     eax,DWORD PTR [esp]
c001bc26:	74 2a                	je     c001bc52 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001bc28:	50                   	push   eax
c001bc29:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bc2d:	50                   	push   eax
c001bc2e:	8d 74 24 28          	lea    esi,[esp+0x28]
c001bc32:	56                   	push   esi
c001bc33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bc37:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bc3b:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001bc3f:	51                   	push   ecx
c001bc40:	e8 8e fd ff ff       	call   c001b9d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bc45:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001bc49:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bc4d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bc4f:	83 c4 10             	add    esp,0x10
c001bc52:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bc59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001bc5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bc61:	89 18                	mov    DWORD PTR [eax],ebx
c001bc63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc67:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bc6a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bc6d:	31 c0                	xor    eax,eax
c001bc6f:	eb 05                	jmp    c001bc76 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001bc71:	b8 04 00 00 00       	mov    eax,0x4
c001bc76:	81 c4 2c 08 00 00    	add    esp,0x82c
c001bc7c:	5b                   	pop    ebx
c001bc7d:	5e                   	pop    esi
c001bc7e:	5f                   	pop    edi
c001bc7f:	5d                   	pop    ebp
c001bc80:	c3                   	ret    
c001bc81:	90                   	nop

c001bc82 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001bc82:	55                   	push   ebp
c001bc83:	57                   	push   edi
c001bc84:	56                   	push   esi
c001bc85:	53                   	push   ebx
c001bc86:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001bc8c:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001bc93:	85 ed                	test   ebp,ebp
c001bc95:	0f 84 51 02 00 00    	je     c001beec <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bc9b:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001bca3:	0f 84 43 02 00 00    	je     c001beec <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bca9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bcac:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001bcaf:	75 0a                	jne    c001bcbb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001bcb1:	b8 07 00 00 00       	mov    eax,0x7
c001bcb6:	e9 36 02 00 00       	jmp    c001bef1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bcbb:	50                   	push   eax
c001bcbc:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bcc0:	50                   	push   eax
c001bcc1:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001bcc8:	53                   	push   ebx
c001bcc9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bccc:	c1 e0 0b             	shl    eax,0xb
c001bccf:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001bcd2:	c1 e8 0b             	shr    eax,0xb
c001bcd5:	50                   	push   eax
c001bcd6:	e8 f8 fc ff ff       	call   c001b9d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bcdb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bcde:	83 c4 10             	add    esp,0x10
c001bce1:	89 c1                	mov    ecx,eax
c001bce3:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001bce6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001bcec:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001bcef:	84 db                	test   bl,bl
c001bcf1:	0f 85 8b 00 00 00    	jne    c001bd82 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001bcf7:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001bcfd:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001bd00:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001bd06:	29 c6                	sub    esi,eax
c001bd08:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001bd0c:	89 f3                	mov    ebx,esi
c001bd0e:	89 f1                	mov    ecx,esi
c001bd10:	c1 fb 1f             	sar    ebx,0x1f
c001bd13:	01 f0                	add    eax,esi
c001bd15:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001bd18:	11 da                	adc    edx,ebx
c001bd1a:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd1d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bd21:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bd24:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bd27:	89 d8                	mov    eax,ebx
c001bd29:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001bd2d:	ba 00 00 00 00       	mov    edx,0x0
c001bd32:	19 f8                	sbb    eax,edi
c001bd34:	b8 00 00 00 00       	mov    eax,0x0
c001bd39:	73 08                	jae    c001bd43 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001bd3b:	89 f0                	mov    eax,esi
c001bd3d:	89 fa                	mov    edx,edi
c001bd3f:	29 c8                	sub    eax,ecx
c001bd41:	19 da                	sbb    edx,ebx
c001bd43:	89 d7                	mov    edi,edx
c001bd45:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bd48:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bd4b:	09 c7                	or     edi,eax
c001bd4d:	0f 84 5e ff ff ff    	je     c001bcb1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001bd53:	57                   	push   edi
c001bd54:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bd58:	50                   	push   eax
c001bd59:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001bd60:	53                   	push   ebx
c001bd61:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bd64:	c1 e0 0b             	shl    eax,0xb
c001bd67:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001bd6b:	c1 e8 0b             	shr    eax,0xb
c001bd6e:	50                   	push   eax
c001bd6f:	e8 5f fc ff ff       	call   c001b9d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bd74:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bd77:	83 c4 10             	add    esp,0x10
c001bd7a:	25 ff 07 00 00       	and    eax,0x7ff
c001bd7f:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001bd82:	31 ff                	xor    edi,edi
c001bd84:	56                   	push   esi
c001bd85:	6a 28                	push   0x28
c001bd87:	6a 00                	push   0x0
c001bd89:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bd8d:	50                   	push   eax
c001bd8e:	e8 f1 48 fe ff       	call   c0000684 <memset>
c001bd93:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bd96:	25 ff 07 00 00       	and    eax,0x7ff
c001bd9b:	89 c6                	mov    esi,eax
c001bd9d:	83 c6 21             	add    esi,0x21
c001bda0:	83 d7 00             	adc    edi,0x0
c001bda3:	83 c4 10             	add    esp,0x10
c001bda6:	31 c9                	xor    ecx,ecx
c001bda8:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001bdaf:	83 f9 28             	cmp    ecx,0x28
c001bdb2:	88 04 24             	mov    BYTE PTR [esp],al
c001bdb5:	0f 94 c2             	sete   dl
c001bdb8:	88 d0                	mov    al,dl
c001bdba:	ba ff 07 00 00       	mov    edx,0x7ff
c001bdbf:	39 f2                	cmp    edx,esi
c001bdc1:	ba 00 00 00 00       	mov    edx,0x0
c001bdc6:	19 fa                	sbb    edx,edi
c001bdc8:	0f 92 c2             	setb   dl
c001bdcb:	09 c2                	or     edx,eax
c001bdcd:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001bdd1:	0f 94 c0             	sete   al
c001bdd4:	08 d0                	or     al,dl
c001bdd6:	75 16                	jne    c001bdee <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001bdd8:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001bddc:	74 10                	je     c001bdee <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001bdde:	8a 04 24             	mov    al,BYTE PTR [esp]
c001bde1:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001bde5:	41                   	inc    ecx
c001bde6:	83 c6 01             	add    esi,0x1
c001bde9:	83 d7 00             	adc    edi,0x0
c001bdec:	eb ba                	jmp    c001bda8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001bdee:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001bdf5:	83 ec 0c             	sub    esp,0xc
c001bdf8:	8d 74 24 24          	lea    esi,[esp+0x24]
c001bdfc:	56                   	push   esi
c001bdfd:	e8 9e 48 fe ff       	call   c00006a0 <strlen>
c001be02:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001be09:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001be0d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001be15:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001be18:	5a                   	pop    edx
c001be19:	25 ff 07 00 00       	and    eax,0x7ff
c001be1e:	59                   	pop    ecx
c001be1f:	01 f8                	add    eax,edi
c001be21:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001be27:	83 e0 02             	and    eax,0x2
c001be2a:	3c 01                	cmp    al,0x1
c001be2c:	19 c0                	sbb    eax,eax
c001be2e:	83 c0 02             	add    eax,0x2
c001be31:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001be35:	56                   	push   esi
c001be36:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001be3a:	50                   	push   eax
c001be3b:	e8 00 49 fe ff       	call   c0000740 <strcpy>
c001be40:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001be44:	83 c4 10             	add    esp,0x10
c001be47:	84 c0                	test   al,al
c001be49:	75 21                	jne    c001be6c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001be4b:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001be53:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001be5b:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001be63:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001be6a:	eb 28                	jmp    c001be94 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001be6c:	fe c8                	dec    al
c001be6e:	75 24                	jne    c001be94 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001be70:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001be78:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001be80:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001be88:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001be8f:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001be94:	8d 74 24 40          	lea    esi,[esp+0x40]
c001be98:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001be9f:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001bea6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bea8:	0f b6 f3             	movzx  esi,bl
c001beab:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001beb2:	31 db                	xor    ebx,ebx
c001beb4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001beba:	89 df                	mov    edi,ebx
c001bebc:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001bebf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bec2:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001bec5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001bec8:	39 c6                	cmp    esi,eax
c001beca:	19 d7                	sbb    edi,edx
c001becc:	72 10                	jb     c001bede <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001bece:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001bed5:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001bedc:	eb 0a                	jmp    c001bee8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001bede:	29 f0                	sub    eax,esi
c001bee0:	19 da                	sbb    edx,ebx
c001bee2:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bee5:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bee8:	31 c0                	xor    eax,eax
c001beea:	eb 05                	jmp    c001bef1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001beec:	b8 04 00 00 00       	mov    eax,0x4
c001bef1:	81 c4 5c 09 00 00    	add    esp,0x95c
c001bef7:	5b                   	pop    ebx
c001bef8:	5e                   	pop    esi
c001bef9:	5f                   	pop    edi
c001befa:	5d                   	pop    ebp
c001befb:	c3                   	ret    

c001befc <readRoot(unsigned int*, unsigned int*, char)>:
c001befc:	57                   	push   edi
c001befd:	56                   	push   esi
c001befe:	81 ec 38 08 00 00    	sub    esp,0x838
c001bf04:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001bf0c:	50                   	push   eax
c001bf0d:	8d 44 24 38          	lea    eax,[esp+0x38]
c001bf11:	50                   	push   eax
c001bf12:	6a 10                	push   0x10
c001bf14:	e8 ba fa ff ff       	call   c001b9d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bf19:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001bf20:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001bf24:	b9 22 00 00 00       	mov    ecx,0x22
c001bf29:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bf2b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bf32:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bf36:	89 10                	mov    DWORD PTR [eax],edx
c001bf38:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001bf3f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bf43:	89 10                	mov    DWORD PTR [eax],edx
c001bf45:	81 c4 44 08 00 00    	add    esp,0x844
c001bf4b:	b0 01                	mov    al,0x1
c001bf4d:	5e                   	pop    esi
c001bf4e:	5f                   	pop    edi
c001bf4f:	c3                   	ret    

c001bf50 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001bf50:	55                   	push   ebp
c001bf51:	57                   	push   edi
c001bf52:	56                   	push   esi
c001bf53:	53                   	push   ebx
c001bf54:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bf5a:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001bf61:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001bf68:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bf6c:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001bf70:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bf74:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bf78:	75 03                	jne    c001bf7d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001bf7a:	83 c3 02             	add    ebx,0x2
c001bf7d:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001bf80:	75 03                	jne    c001bf85 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001bf82:	43                   	inc    ebx
c001bf83:	eb f8                	jmp    c001bf7d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001bf85:	51                   	push   ecx
c001bf86:	68 00 01 00 00       	push   0x100
c001bf8b:	6a 00                	push   0x0
c001bf8d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bf91:	50                   	push   eax
c001bf92:	e8 ed 46 fe ff       	call   c0000684 <memset>
c001bf97:	83 c4 10             	add    esp,0x10
c001bf9a:	31 d2                	xor    edx,edx
c001bf9c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001bf9f:	84 c0                	test   al,al
c001bfa1:	74 21                	je     c001bfc4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001bfa3:	3c 2f                	cmp    al,0x2f
c001bfa5:	75 0b                	jne    c001bfb2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001bfa7:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001bfab:	bd 01 00 00 00       	mov    ebp,0x1
c001bfb0:	eb 14                	jmp    c001bfc6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001bfb2:	8d 48 9f             	lea    ecx,[eax-0x61]
c001bfb5:	80 f9 19             	cmp    cl,0x19
c001bfb8:	77 03                	ja     c001bfbd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001bfba:	83 e8 20             	sub    eax,0x20
c001bfbd:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001bfc1:	42                   	inc    edx
c001bfc2:	eb d8                	jmp    c001bf9c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001bfc4:	31 ed                	xor    ebp,ebp
c001bfc6:	83 ec 0c             	sub    esp,0xc
c001bfc9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001bfd0:	e8 ee d9 fe ff       	call   c00099c3 <malloc>
c001bfd5:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001bfdc:	89 c6                	mov    esi,eax
c001bfde:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001bfe4:	c1 ef 0b             	shr    edi,0xb
c001bfe7:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001bfee:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001bff2:	83 c4 10             	add    esp,0x10
c001bff5:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001bffa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bffe:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001c005:	74 28                	je     c001c02f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001c007:	52                   	push   edx
c001c008:	57                   	push   edi
c001c009:	50                   	push   eax
c001c00a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c00e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001c015:	e8 b9 f9 ff ff       	call   c001b9d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c01a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c01e:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001c025:	05 00 08 00 00       	add    eax,0x800
c001c02a:	83 c4 10             	add    esp,0x10
c001c02d:	eb cb                	jmp    c001bffa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001c02f:	83 ec 0c             	sub    esp,0xc
c001c032:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c036:	57                   	push   edi
c001c037:	e8 64 46 fe ff       	call   c00006a0 <strlen>
c001c03c:	50                   	push   eax
c001c03d:	57                   	push   edi
c001c03e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001c045:	56                   	push   esi
c001c046:	e8 46 f9 ff ff       	call   c001b991 <__memmem(unsigned char*, int, unsigned char*, int)>
c001c04b:	83 c4 20             	add    esp,0x20
c001c04e:	85 c0                	test   eax,eax
c001c050:	75 13                	jne    c001c065 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001c052:	83 ec 0c             	sub    esp,0xc
c001c055:	56                   	push   esi
c001c056:	e8 78 d9 fe ff       	call   c00099d3 <free>
c001c05b:	83 c4 10             	add    esp,0x10
c001c05e:	31 c0                	xor    eax,eax
c001c060:	e9 b3 00 00 00       	jmp    c001c118 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c065:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001c069:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001c06d:	c1 e7 08             	shl    edi,0x8
c001c070:	c1 e2 10             	shl    edx,0x10
c001c073:	09 d7                	or     edi,edx
c001c075:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001c079:	09 d7                	or     edi,edx
c001c07b:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001c07f:	c1 e2 18             	shl    edx,0x18
c001c082:	09 d7                	or     edi,edx
c001c084:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001c088:	89 d1                	mov    ecx,edx
c001c08a:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001c08e:	c1 e1 08             	shl    ecx,0x8
c001c091:	c1 e2 10             	shl    edx,0x10
c001c094:	09 ca                	or     edx,ecx
c001c096:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001c09a:	09 ca                	or     edx,ecx
c001c09c:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001c0a0:	c1 e1 18             	shl    ecx,0x18
c001c0a3:	09 ca                	or     edx,ecx
c001c0a5:	89 e9                	mov    ecx,ebp
c001c0a7:	84 c9                	test   cl,cl
c001c0a9:	74 3c                	je     c001c0e7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001c0ab:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c0af:	83 ec 0c             	sub    esp,0xc
c001c0b2:	56                   	push   esi
c001c0b3:	e8 1b d9 fe ff       	call   c00099d3 <free>
c001c0b8:	83 c4 0c             	add    esp,0xc
c001c0bb:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c0c2:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c0c7:	50                   	push   eax
c001c0c8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c0cf:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c0d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c0da:	52                   	push   edx
c001c0db:	57                   	push   edi
c001c0dc:	53                   	push   ebx
c001c0dd:	e8 6e fe ff ff       	call   c001bf50 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c0e2:	83 c4 20             	add    esp,0x20
c001c0e5:	eb 31                	jmp    c001c118 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c0e7:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001c0ea:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001c0f1:	d0 e8                	shr    al,1
c001c0f3:	89 3b                	mov    DWORD PTR [ebx],edi
c001c0f5:	83 e0 01             	and    eax,0x1
c001c0f8:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001c0ff:	83 ec 0c             	sub    esp,0xc
c001c102:	89 13                	mov    DWORD PTR [ebx],edx
c001c104:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001c10b:	89 03                	mov    DWORD PTR [ebx],eax
c001c10d:	56                   	push   esi
c001c10e:	e8 c0 d8 fe ff       	call   c00099d3 <free>
c001c113:	83 c4 10             	add    esp,0x10
c001c116:	b0 01                	mov    al,0x1
c001c118:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c11e:	5b                   	pop    ebx
c001c11f:	5e                   	pop    esi
c001c120:	5f                   	pop    edi
c001c121:	5d                   	pop    ebp
c001c122:	c3                   	ret    

c001c123 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001c123:	55                   	push   ebp
c001c124:	57                   	push   edi
c001c125:	56                   	push   esi
c001c126:	53                   	push   ebx
c001c127:	83 ec 20             	sub    esp,0x20
c001c12a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c12e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c132:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c136:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c13e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c146:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001c14b:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001c151:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001c157:	57                   	push   edi
c001c158:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c15c:	50                   	push   eax
c001c15d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c161:	50                   	push   eax
c001c162:	e8 95 fd ff ff       	call   c001befc <readRoot(unsigned int*, unsigned int*, char)>
c001c167:	5a                   	pop    edx
c001c168:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c16c:	e8 2f 45 fe ff       	call   c00006a0 <strlen>
c001c171:	83 c4 10             	add    esp,0x10
c001c174:	83 f8 03             	cmp    eax,0x3
c001c177:	77 17                	ja     c001c190 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c179:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c17d:	89 03                	mov    DWORD PTR [ebx],eax
c001c17f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c183:	89 06                	mov    DWORD PTR [esi],eax
c001c185:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001c18c:	b0 01                	mov    al,0x1
c001c18e:	eb 19                	jmp    c001c1a9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001c190:	50                   	push   eax
c001c191:	55                   	push   ebp
c001c192:	57                   	push   edi
c001c193:	56                   	push   esi
c001c194:	53                   	push   ebx
c001c195:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c199:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c19d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c1a1:	e8 aa fd ff ff       	call   c001bf50 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c1a6:	83 c4 20             	add    esp,0x20
c001c1a9:	83 c4 1c             	add    esp,0x1c
c001c1ac:	5b                   	pop    ebx
c001c1ad:	5e                   	pop    esi
c001c1ae:	5f                   	pop    edi
c001c1af:	5d                   	pop    ebp
c001c1b0:	c3                   	ret    
c001c1b1:	90                   	nop

c001c1b2 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001c1b2:	57                   	push   edi
c001c1b3:	56                   	push   esi
c001c1b4:	53                   	push   ebx
c001c1b5:	83 ec 10             	sub    esp,0x10
c001c1b8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c1bc:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c1c0:	85 ff                	test   edi,edi
c001c1c2:	0f 84 8b 00 00 00    	je     c001c253 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c1c8:	85 f6                	test   esi,esi
c001c1ca:	0f 84 83 00 00 00    	je     c001c253 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c1d0:	b8 03 00 00 00       	mov    eax,0x3
c001c1d5:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001c1da:	75 7c                	jne    c001c258 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c1dc:	83 ec 0c             	sub    esp,0xc
c001c1df:	6a 1c                	push   0x1c
c001c1e1:	e8 dd d7 fe ff       	call   c00099c3 <malloc>
c001c1e6:	89 07                	mov    DWORD PTR [edi],eax
c001c1e8:	89 c3                	mov    ebx,eax
c001c1ea:	58                   	pop    eax
c001c1eb:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c1ef:	50                   	push   eax
c001c1f0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c1f3:	50                   	push   eax
c001c1f4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c1f8:	50                   	push   eax
c001c1f9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c1fd:	50                   	push   eax
c001c1fe:	56                   	push   esi
c001c1ff:	e8 1f ff ff ff       	call   c001c123 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c204:	83 c4 20             	add    esp,0x20
c001c207:	84 c0                	test   al,al
c001c209:	74 07                	je     c001c212 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001c20b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c210:	74 0b                	je     c001c21d <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001c212:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c216:	b8 01 00 00 00       	mov    eax,0x1
c001c21b:	eb 3b                	jmp    c001c258 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c21d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c221:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c225:	89 03                	mov    DWORD PTR [ebx],eax
c001c227:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c22e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c232:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c239:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c240:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c243:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c24a:	8a 06                	mov    al,BYTE PTR [esi]
c001c24c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c24f:	31 c0                	xor    eax,eax
c001c251:	eb 05                	jmp    c001c258 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c253:	b8 04 00 00 00       	mov    eax,0x4
c001c258:	83 c4 10             	add    esp,0x10
c001c25b:	5b                   	pop    ebx
c001c25c:	5e                   	pop    esi
c001c25d:	5f                   	pop    edi
c001c25e:	c3                   	ret    
c001c25f:	90                   	nop

c001c260 <ISO9660::exists(char const*)>:
c001c260:	83 ec 28             	sub    esp,0x28
c001c263:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c267:	8d 54 24 18          	lea    edx,[esp+0x18]
c001c26b:	52                   	push   edx
c001c26c:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001c26f:	52                   	push   edx
c001c270:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c274:	52                   	push   edx
c001c275:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c279:	52                   	push   edx
c001c27a:	50                   	push   eax
c001c27b:	e8 a3 fe ff ff       	call   c001c123 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c280:	83 c4 3c             	add    esp,0x3c
c001c283:	c3                   	ret    

c001c284 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001c284:	56                   	push   esi
c001c285:	53                   	push   ebx
c001c286:	83 ec 14             	sub    esp,0x14
c001c289:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c28d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c291:	85 db                	test   ebx,ebx
c001c293:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c297:	0f 94 c2             	sete   dl
c001c29a:	85 f6                	test   esi,esi
c001c29c:	0f 94 c0             	sete   al
c001c29f:	08 c2                	or     dl,al
c001c2a1:	75 68                	jne    c001c30b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c2a3:	85 c9                	test   ecx,ecx
c001c2a5:	74 64                	je     c001c30b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c2a7:	83 ec 0c             	sub    esp,0xc
c001c2aa:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c2ad:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c2b1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c2b7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c2be:	50                   	push   eax
c001c2bf:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001c2c2:	50                   	push   eax
c001c2c3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c2c7:	50                   	push   eax
c001c2c8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c2cc:	50                   	push   eax
c001c2cd:	51                   	push   ecx
c001c2ce:	e8 50 fe ff ff       	call   c001c123 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c2d3:	83 c4 20             	add    esp,0x20
c001c2d6:	ba 01 00 00 00       	mov    edx,0x1
c001c2db:	84 c0                	test   al,al
c001c2dd:	74 31                	je     c001c310 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c2df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c2e3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c2ea:	89 03                	mov    DWORD PTR [ebx],eax
c001c2ec:	ba 00 00 00 00       	mov    edx,0x0
c001c2f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c2f5:	85 c0                	test   eax,eax
c001c2f7:	0f 95 06             	setne  BYTE PTR [esi]
c001c2fa:	74 14                	je     c001c310 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c2fc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c302:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c309:	eb 05                	jmp    c001c310 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c30b:	ba 04 00 00 00       	mov    edx,0x4
c001c310:	83 c4 14             	add    esp,0x14
c001c313:	89 d0                	mov    eax,edx
c001c315:	5b                   	pop    ebx
c001c316:	5e                   	pop    esi
c001c317:	c3                   	ret    

c001c318 <ISO9660::openDir(char const*, void**)>:
c001c318:	57                   	push   edi
c001c319:	56                   	push   esi
c001c31a:	53                   	push   ebx
c001c31b:	83 ec 10             	sub    esp,0x10
c001c31e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c322:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c326:	85 ff                	test   edi,edi
c001c328:	74 7b                	je     c001c3a5 <ISO9660::openDir(char const*, void**)+0x8d>
c001c32a:	85 f6                	test   esi,esi
c001c32c:	74 77                	je     c001c3a5 <ISO9660::openDir(char const*, void**)+0x8d>
c001c32e:	83 ec 0c             	sub    esp,0xc
c001c331:	6a 1c                	push   0x1c
c001c333:	e8 8b d6 fe ff       	call   c00099c3 <malloc>
c001c338:	89 07                	mov    DWORD PTR [edi],eax
c001c33a:	89 c3                	mov    ebx,eax
c001c33c:	58                   	pop    eax
c001c33d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c341:	50                   	push   eax
c001c342:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c345:	50                   	push   eax
c001c346:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c34a:	50                   	push   eax
c001c34b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c34f:	50                   	push   eax
c001c350:	56                   	push   esi
c001c351:	e8 cd fd ff ff       	call   c001c123 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c356:	83 c4 20             	add    esp,0x20
c001c359:	84 c0                	test   al,al
c001c35b:	74 07                	je     c001c364 <ISO9660::openDir(char const*, void**)+0x4c>
c001c35d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c362:	75 0b                	jne    c001c36f <ISO9660::openDir(char const*, void**)+0x57>
c001c364:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c368:	b8 01 00 00 00       	mov    eax,0x1
c001c36d:	eb 3b                	jmp    c001c3aa <ISO9660::openDir(char const*, void**)+0x92>
c001c36f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c373:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c377:	89 03                	mov    DWORD PTR [ebx],eax
c001c379:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c380:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c384:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c38b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c392:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c395:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c39c:	8a 06                	mov    al,BYTE PTR [esi]
c001c39e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c3a1:	31 c0                	xor    eax,eax
c001c3a3:	eb 05                	jmp    c001c3aa <ISO9660::openDir(char const*, void**)+0x92>
c001c3a5:	b8 04 00 00 00       	mov    eax,0x4
c001c3aa:	83 c4 10             	add    esp,0x10
c001c3ad:	5b                   	pop    ebx
c001c3ae:	5e                   	pop    esi
c001c3af:	5f                   	pop    edi
c001c3b0:	c3                   	ret    
c001c3b1:	90                   	nop

c001c3b2 <ISO9660::ISO9660()>:
c001c3b2:	83 ec 0c             	sub    esp,0xc
c001c3b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3b9:	83 ec 0c             	sub    esp,0xc
c001c3bc:	50                   	push   eax
c001c3bd:	e8 b4 09 ff ff       	call   c000cd76 <Filesystem::Filesystem()>
c001c3c2:	83 c4 10             	add    esp,0x10
c001c3c5:	ba b0 49 02 c0       	mov    edx,0xc00249b0
c001c3ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3ce:	89 10                	mov    DWORD PTR [eax],edx
c001c3d0:	90                   	nop
c001c3d1:	83 c4 0c             	add    esp,0xc
c001c3d4:	c3                   	ret    
c001c3d5:	90                   	nop

c001c3d6 <SoundCard::beginPlayback()>:
c001c3d6:	c7 44 24 04 10 4a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024a10
c001c3de:	e9 1c 7f ff ff       	jmp    c00142ff <Krnl::panic(char const*)>
c001c3e3:	90                   	nop

c001c3e4 <SoundCard::stopPlayback()>:
c001c3e4:	c7 44 24 04 44 4a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024a44
c001c3ec:	e9 0e 7f ff ff       	jmp    c00142ff <Krnl::panic(char const*)>
c001c3f1:	90                   	nop

c001c3f2 <SoundCard::SoundCard(char const*)>:
c001c3f2:	83 ec 1c             	sub    esp,0x1c
c001c3f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c3f9:	83 ec 08             	sub    esp,0x8
c001c3fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c400:	50                   	push   eax
c001c401:	e8 a4 1c ff ff       	call   c000e0aa <Device::Device(char const*)>
c001c406:	83 c4 10             	add    esp,0x10
c001c409:	ba dc 4a 02 c0       	mov    edx,0xc0024adc
c001c40e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c412:	89 10                	mov    DWORD PTR [eax],edx
c001c414:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c418:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c41f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c423:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001c42d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c431:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001c43b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c43f:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001c449:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c44d:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001c457:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c45f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001c464:	7f 19                	jg     c001c47f <SoundCard::SoundCard(char const*)+0x8d>
c001c466:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c46a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c46e:	83 c2 54             	add    edx,0x54
c001c471:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001c479:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001c47d:	eb e0                	jmp    c001c45f <SoundCard::SoundCard(char const*)+0x6d>
c001c47f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c483:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c48a:	90                   	nop
c001c48b:	83 c4 1c             	add    esp,0x1c
c001c48e:	c3                   	ret    
c001c48f:	90                   	nop

c001c490 <SoundCard::~SoundCard()>:
c001c490:	83 ec 0c             	sub    esp,0xc
c001c493:	ba dc 4a 02 c0       	mov    edx,0xc0024adc
c001c498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c49c:	89 10                	mov    DWORD PTR [eax],edx
c001c49e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4a2:	83 ec 0c             	sub    esp,0xc
c001c4a5:	50                   	push   eax
c001c4a6:	e8 c9 18 ff ff       	call   c000dd74 <Device::~Device()>
c001c4ab:	83 c4 10             	add    esp,0x10
c001c4ae:	90                   	nop
c001c4af:	83 c4 0c             	add    esp,0xc
c001c4b2:	c3                   	ret    
c001c4b3:	90                   	nop

c001c4b4 <SoundCard::~SoundCard()>:
c001c4b4:	83 ec 0c             	sub    esp,0xc
c001c4b7:	83 ec 0c             	sub    esp,0xc
c001c4ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4be:	e8 cd ff ff ff       	call   c001c490 <SoundCard::~SoundCard()>
c001c4c3:	83 c4 10             	add    esp,0x10
c001c4c6:	83 ec 08             	sub    esp,0x8
c001c4c9:	68 e8 01 00 00       	push   0x1e8
c001c4ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4d2:	e8 a7 04 ff ff       	call   c000c97e <operator delete(void*, unsigned long)>
c001c4d7:	83 c4 10             	add    esp,0x10
c001c4da:	83 c4 0c             	add    esp,0xc
c001c4dd:	c3                   	ret    

c001c4de <SoundCard::configureRates(int, int, int)>:
c001c4de:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c4e2:	31 c0                	xor    eax,eax
c001c4e4:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001c4eb:	75 20                	jne    c001c50d <SoundCard::configureRates(int, int, int)+0x2f>
c001c4ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4f1:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001c4f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c4fb:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001c501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c505:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001c50b:	b0 01                	mov    al,0x1
c001c50d:	c3                   	ret    

c001c50e <SoundCard::getSamples16(int, short*)>:
c001c50e:	55                   	push   ebp
c001c50f:	57                   	push   edi
c001c510:	31 ff                	xor    edi,edi
c001c512:	56                   	push   esi
c001c513:	53                   	push   ebx
c001c514:	31 db                	xor    ebx,ebx
c001c516:	83 ec 18             	sub    esp,0x18
c001c519:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c51d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c521:	68 77 4a 02 c0       	push   0xc0024a77
c001c526:	e8 34 05 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001c52b:	83 c4 0c             	add    esp,0xc
c001c52e:	8d 04 36             	lea    eax,[esi+esi*1]
c001c531:	50                   	push   eax
c001c532:	6a 00                	push   0x0
c001c534:	55                   	push   ebp
c001c535:	e8 4a 41 fe ff       	call   c0000684 <memset>
c001c53a:	83 c4 10             	add    esp,0x10
c001c53d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c541:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001c548:	85 c0                	test   eax,eax
c001c54a:	74 1b                	je     c001c567 <SoundCard::getSamples16(int, short*)+0x59>
c001c54c:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c550:	75 15                	jne    c001c567 <SoundCard::getSamples16(int, short*)+0x59>
c001c552:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c556:	55                   	push   ebp
c001c557:	56                   	push   esi
c001c558:	50                   	push   eax
c001c559:	e8 5a 03 00 00       	call   c001c8b8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001c55e:	83 c4 10             	add    esp,0x10
c001c561:	39 c7                	cmp    edi,eax
c001c563:	7d 02                	jge    c001c567 <SoundCard::getSamples16(int, short*)+0x59>
c001c565:	89 c7                	mov    edi,eax
c001c567:	43                   	inc    ebx
c001c568:	83 fb 20             	cmp    ebx,0x20
c001c56b:	75 d0                	jne    c001c53d <SoundCard::getSamples16(int, short*)+0x2f>
c001c56d:	83 c4 0c             	add    esp,0xc
c001c570:	89 f8                	mov    eax,edi
c001c572:	5b                   	pop    ebx
c001c573:	5e                   	pop    esi
c001c574:	5f                   	pop    edi
c001c575:	5d                   	pop    ebp
c001c576:	c3                   	ret    
c001c577:	90                   	nop

c001c578 <SoundCard::getSamples32(int, int*)>:
c001c578:	55                   	push   ebp
c001c579:	57                   	push   edi
c001c57a:	31 ff                	xor    edi,edi
c001c57c:	56                   	push   esi
c001c57d:	31 f6                	xor    esi,esi
c001c57f:	53                   	push   ebx
c001c580:	83 ec 10             	sub    esp,0x10
c001c583:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c587:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c58b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001c58f:	c1 e0 02             	shl    eax,0x2
c001c592:	50                   	push   eax
c001c593:	6a 00                	push   0x0
c001c595:	55                   	push   ebp
c001c596:	e8 e9 40 fe ff       	call   c0000684 <memset>
c001c59b:	83 c4 10             	add    esp,0x10
c001c59e:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001c5a5:	85 c0                	test   eax,eax
c001c5a7:	74 1b                	je     c001c5c4 <SoundCard::getSamples32(int, int*)+0x4c>
c001c5a9:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c5ad:	75 15                	jne    c001c5c4 <SoundCard::getSamples32(int, int*)+0x4c>
c001c5af:	53                   	push   ebx
c001c5b0:	55                   	push   ebp
c001c5b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c5b5:	50                   	push   eax
c001c5b6:	e8 f9 03 00 00       	call   c001c9b4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001c5bb:	83 c4 10             	add    esp,0x10
c001c5be:	39 c6                	cmp    esi,eax
c001c5c0:	7d 02                	jge    c001c5c4 <SoundCard::getSamples32(int, int*)+0x4c>
c001c5c2:	89 c6                	mov    esi,eax
c001c5c4:	47                   	inc    edi
c001c5c5:	83 ff 20             	cmp    edi,0x20
c001c5c8:	75 d4                	jne    c001c59e <SoundCard::getSamples32(int, int*)+0x26>
c001c5ca:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001c5d0:	85 f6                	test   esi,esi
c001c5d2:	75 0f                	jne    c001c5e3 <SoundCard::getSamples32(int, int*)+0x6b>
c001c5d4:	84 c0                	test   al,al
c001c5d6:	74 1b                	je     c001c5f3 <SoundCard::getSamples32(int, int*)+0x7b>
c001c5d8:	83 ec 0c             	sub    esp,0xc
c001c5db:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c5dd:	53                   	push   ebx
c001c5de:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c5e1:	eb 0d                	jmp    c001c5f0 <SoundCard::getSamples32(int, int*)+0x78>
c001c5e3:	84 c0                	test   al,al
c001c5e5:	75 0c                	jne    c001c5f3 <SoundCard::getSamples32(int, int*)+0x7b>
c001c5e7:	83 ec 0c             	sub    esp,0xc
c001c5ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c5ec:	53                   	push   ebx
c001c5ed:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001c5f0:	83 c4 10             	add    esp,0x10
c001c5f3:	83 c4 0c             	add    esp,0xc
c001c5f6:	89 f0                	mov    eax,esi
c001c5f8:	5b                   	pop    ebx
c001c5f9:	5e                   	pop    esi
c001c5fa:	5f                   	pop    edi
c001c5fb:	5d                   	pop    ebp
c001c5fc:	c3                   	ret    
c001c5fd:	90                   	nop

c001c5fe <SoundCard::addChannel(SoundPort*)>:
c001c5fe:	56                   	push   esi
c001c5ff:	53                   	push   ebx
c001c600:	53                   	push   ebx
c001c601:	31 db                	xor    ebx,ebx
c001c603:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c607:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001c60f:	74 27                	je     c001c638 <SoundCard::addChannel(SoundPort*)+0x3a>
c001c611:	43                   	inc    ebx
c001c612:	83 fb 20             	cmp    ebx,0x20
c001c615:	75 f0                	jne    c001c607 <SoundCard::addChannel(SoundPort*)+0x9>
c001c617:	83 ec 0c             	sub    esp,0xc
c001c61a:	83 cb ff             	or     ebx,0xffffffff
c001c61d:	68 9d 4a 02 c0       	push   0xc0024a9d
c001c622:	e8 38 04 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001c627:	c7 04 24 96 4a 02 c0 	mov    DWORD PTR [esp],0xc0024a96
c001c62e:	e8 cc 7c ff ff       	call   c00142ff <Krnl::panic(char const*)>
c001c633:	83 c4 10             	add    esp,0x10
c001c636:	eb 1b                	jmp    c001c653 <SoundCard::addChannel(SoundPort*)+0x55>
c001c638:	51                   	push   ecx
c001c639:	51                   	push   ecx
c001c63a:	53                   	push   ebx
c001c63b:	68 b5 4a 02 c0       	push   0xc0024ab5
c001c640:	e8 1a 04 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001c645:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c649:	83 c4 10             	add    esp,0x10
c001c64c:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001c653:	89 d8                	mov    eax,ebx
c001c655:	5a                   	pop    edx
c001c656:	5b                   	pop    ebx
c001c657:	5e                   	pop    esi
c001c658:	c3                   	ret    
c001c659:	90                   	nop

c001c65a <SoundCard::removeChannel(int)>:
c001c65a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c65e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c662:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001c66d:	c3                   	ret    
c001c66e:	66 90                	xchg   ax,ax

c001c670 <SoundPort::SoundPort(int, int, int, int)>:
c001c670:	83 ec 0c             	sub    esp,0xc
c001c673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c677:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c67e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c682:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c68a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c68e:	89 10                	mov    DWORD PTR [eax],edx
c001c690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c694:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c698:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c69b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c69f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c6a3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c6a6:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001c6ab:	75 13                	jne    c001c6c0 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001c6ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6b1:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6b3:	05 a0 0f 00 00       	add    eax,0xfa0
c001c6b8:	01 c0                	add    eax,eax
c001c6ba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c6be:	66 90                	xchg   ax,ax
c001c6c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6c4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c6c8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001c6cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6cf:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001c6d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6da:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c6dd:	c1 e0 02             	shl    eax,0x2
c001c6e0:	83 ec 0c             	sub    esp,0xc
c001c6e3:	50                   	push   eax
c001c6e4:	e8 da d2 fe ff       	call   c00099c3 <malloc>
c001c6e9:	83 c4 10             	add    esp,0x10
c001c6ec:	89 c2                	mov    edx,eax
c001c6ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6f2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c6f5:	90                   	nop
c001c6f6:	83 c4 0c             	add    esp,0xc
c001c6f9:	c3                   	ret    
c001c6fa:	66 90                	xchg   ax,ax

c001c6fc <SoundPort::~SoundPort()>:
c001c6fc:	83 ec 0c             	sub    esp,0xc
c001c6ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c703:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c706:	85 c0                	test   eax,eax
c001c708:	74 1e                	je     c001c728 <SoundPort::~SoundPort()+0x2c>
c001c70a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c70e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c711:	83 ec 0c             	sub    esp,0xc
c001c714:	50                   	push   eax
c001c715:	e8 b9 d2 fe ff       	call   c00099d3 <free>
c001c71a:	83 c4 10             	add    esp,0x10
c001c71d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c721:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c728:	90                   	nop
c001c729:	83 c4 0c             	add    esp,0xc
c001c72c:	c3                   	ret    
c001c72d:	90                   	nop
c001c72e:	66 90                	xchg   ax,ax

c001c730 <SoundPort::unpause()>:
c001c730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c734:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001c738:	c3                   	ret    
c001c739:	90                   	nop
c001c73a:	66 90                	xchg   ax,ax

c001c73c <SoundPort::pause()>:
c001c73c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c740:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c744:	c3                   	ret    
c001c745:	90                   	nop
c001c746:	66 90                	xchg   ax,ax

c001c748 <SoundPort::getBufferUsed()>:
c001c748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c74c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c74f:	c3                   	ret    

c001c750 <SoundPort::getBufferSize()>:
c001c750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c754:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c757:	c3                   	ret    

c001c758 <SoundPort::buffer16(short*, int)>:
c001c758:	55                   	push   ebp
c001c759:	57                   	push   edi
c001c75a:	56                   	push   esi
c001c75b:	53                   	push   ebx
c001c75c:	83 ec 1c             	sub    esp,0x1c
c001c75f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c763:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c767:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001c76a:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001c76d:	0f 84 85 00 00 00    	je     c001c7f8 <SoundPort::buffer16(short*, int)+0xa0>
c001c773:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001c777:	85 c9                	test   ecx,ecx
c001c779:	7e 7d                	jle    c001c7f8 <SoundPort::buffer16(short*, int)+0xa0>
c001c77b:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001c77f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c782:	c1 e1 0f             	shl    ecx,0xf
c001c785:	8d 70 01             	lea    esi,[eax+0x1]
c001c788:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c78b:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001c78e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c791:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c794:	74 6e                	je     c001c804 <SoundPort::buffer16(short*, int)+0xac>
c001c796:	31 f6                	xor    esi,esi
c001c798:	eb 22                	jmp    c001c7bc <SoundPort::buffer16(short*, int)+0x64>
c001c79a:	66 90                	xchg   ax,ax
c001c79c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001c7a1:	8d 79 01             	lea    edi,[ecx+0x1]
c001c7a4:	c1 e3 0f             	shl    ebx,0xf
c001c7a7:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001c7aa:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001c7ad:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001c7b0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c7b3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c7b6:	74 1c                	je     c001c7d4 <SoundPort::buffer16(short*, int)+0x7c>
c001c7b8:	89 c6                	mov    esi,eax
c001c7ba:	66 90                	xchg   ax,ax
c001c7bc:	8d 46 01             	lea    eax,[esi+0x1]
c001c7bf:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001c7c3:	75 d7                	jne    c001c79c <SoundPort::buffer16(short*, int)+0x44>
c001c7c5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c7c9:	83 c4 1c             	add    esp,0x1c
c001c7cc:	5b                   	pop    ebx
c001c7cd:	5e                   	pop    esi
c001c7ce:	5f                   	pop    edi
c001c7cf:	5d                   	pop    ebp
c001c7d0:	c3                   	ret    
c001c7d1:	8d 76 00             	lea    esi,[esi+0x0]
c001c7d4:	8d 46 02             	lea    eax,[esi+0x2]
c001c7d7:	90                   	nop
c001c7d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7dc:	83 ec 0c             	sub    esp,0xc
c001c7df:	68 08 4b 02 c0       	push   0xc0024b08
c001c7e4:	e8 76 02 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001c7e9:	83 c4 10             	add    esp,0x10
c001c7ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c7f0:	83 c4 1c             	add    esp,0x1c
c001c7f3:	5b                   	pop    ebx
c001c7f4:	5e                   	pop    esi
c001c7f5:	5f                   	pop    edi
c001c7f6:	5d                   	pop    ebp
c001c7f7:	c3                   	ret    
c001c7f8:	83 c4 1c             	add    esp,0x1c
c001c7fb:	31 c0                	xor    eax,eax
c001c7fd:	5b                   	pop    ebx
c001c7fe:	5e                   	pop    esi
c001c7ff:	5f                   	pop    edi
c001c800:	5d                   	pop    ebp
c001c801:	c3                   	ret    
c001c802:	66 90                	xchg   ax,ax
c001c804:	b8 01 00 00 00       	mov    eax,0x1
c001c809:	eb cd                	jmp    c001c7d8 <SoundPort::buffer16(short*, int)+0x80>
c001c80b:	90                   	nop

c001c80c <SoundPort::buffer32(int*, int)>:
c001c80c:	55                   	push   ebp
c001c80d:	57                   	push   edi
c001c80e:	56                   	push   esi
c001c80f:	53                   	push   ebx
c001c810:	83 ec 1c             	sub    esp,0x1c
c001c813:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c817:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c81b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c81e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c822:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c826:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c829:	74 79                	je     c001c8a4 <SoundPort::buffer32(int*, int)+0x98>
c001c82b:	85 c0                	test   eax,eax
c001c82d:	7e 75                	jle    c001c8a4 <SoundPort::buffer32(int*, int)+0x98>
c001c82f:	8d 71 01             	lea    esi,[ecx+0x1]
c001c832:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c835:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c838:	8b 37                	mov    esi,DWORD PTR [edi]
c001c83a:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001c83d:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c840:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c843:	74 6b                	je     c001c8b0 <SoundPort::buffer32(int*, int)+0xa4>
c001c845:	31 f6                	xor    esi,esi
c001c847:	eb 1f                	jmp    c001c868 <SoundPort::buffer32(int*, int)+0x5c>
c001c849:	8d 76 00             	lea    esi,[esi+0x0]
c001c84c:	8d 69 01             	lea    ebp,[ecx+0x1]
c001c84f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001c852:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001c855:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c858:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001c85c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c85f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c862:	74 1c                	je     c001c880 <SoundPort::buffer32(int*, int)+0x74>
c001c864:	89 de                	mov    esi,ebx
c001c866:	66 90                	xchg   ax,ax
c001c868:	8d 5e 01             	lea    ebx,[esi+0x1]
c001c86b:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001c86f:	75 db                	jne    c001c84c <SoundPort::buffer32(int*, int)+0x40>
c001c871:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c875:	83 c4 1c             	add    esp,0x1c
c001c878:	5b                   	pop    ebx
c001c879:	5e                   	pop    esi
c001c87a:	5f                   	pop    edi
c001c87b:	5d                   	pop    ebp
c001c87c:	c3                   	ret    
c001c87d:	8d 76 00             	lea    esi,[esi+0x0]
c001c880:	8d 46 02             	lea    eax,[esi+0x2]
c001c883:	90                   	nop
c001c884:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c888:	83 ec 0c             	sub    esp,0xc
c001c88b:	68 23 4b 02 c0       	push   0xc0024b23
c001c890:	e8 ca 01 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001c895:	83 c4 10             	add    esp,0x10
c001c898:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c89c:	83 c4 1c             	add    esp,0x1c
c001c89f:	5b                   	pop    ebx
c001c8a0:	5e                   	pop    esi
c001c8a1:	5f                   	pop    edi
c001c8a2:	5d                   	pop    ebp
c001c8a3:	c3                   	ret    
c001c8a4:	83 c4 1c             	add    esp,0x1c
c001c8a7:	31 c0                	xor    eax,eax
c001c8a9:	5b                   	pop    ebx
c001c8aa:	5e                   	pop    esi
c001c8ab:	5f                   	pop    edi
c001c8ac:	5d                   	pop    ebp
c001c8ad:	c3                   	ret    
c001c8ae:	66 90                	xchg   ax,ax
c001c8b0:	b8 01 00 00 00       	mov    eax,0x1
c001c8b5:	eb cd                	jmp    c001c884 <SoundPort::buffer32(int*, int)+0x78>
c001c8b7:	90                   	nop

c001c8b8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001c8b8:	57                   	push   edi
c001c8b9:	56                   	push   esi
c001c8ba:	53                   	push   ebx
c001c8bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c8bf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001c8c3:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001c8c9:	39 03                	cmp    DWORD PTR [ebx],eax
c001c8cb:	74 13                	je     c001c8e0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001c8cd:	83 ec 0c             	sub    esp,0xc
c001c8d0:	68 78 4b 02 c0       	push   0xc0024b78
c001c8d5:	e8 25 7a ff ff       	call   c00142ff <Krnl::panic(char const*)>
c001c8da:	83 c4 10             	add    esp,0x10
c001c8dd:	8d 76 00             	lea    esi,[esi+0x0]
c001c8e0:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001c8e6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001c8e9:	74 11                	je     c001c8fc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001c8eb:	83 ec 0c             	sub    esp,0xc
c001c8ee:	68 3e 4b 02 c0       	push   0xc0024b3e
c001c8f3:	e8 07 7a ff ff       	call   c00142ff <Krnl::panic(char const*)>
c001c8f8:	83 c4 10             	add    esp,0x10
c001c8fb:	90                   	nop
c001c8fc:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001c902:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001c905:	74 11                	je     c001c918 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001c907:	83 ec 0c             	sub    esp,0xc
c001c90a:	68 3e 4b 02 c0       	push   0xc0024b3e
c001c90f:	e8 eb 79 ff ff       	call   c00142ff <Krnl::panic(char const*)>
c001c914:	83 c4 10             	add    esp,0x10
c001c917:	90                   	nop
c001c918:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c91b:	89 c6                	mov    esi,eax
c001c91d:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001c921:	7e 05                	jle    c001c928 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001c923:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001c927:	90                   	nop
c001c928:	85 f6                	test   esi,esi
c001c92a:	7e 30                	jle    c001c95c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001c92c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c930:	8d 3c 36             	lea    edi,[esi+esi*1]
c001c933:	31 c9                	xor    ecx,ecx
c001c935:	01 d7                	add    edi,edx
c001c937:	90                   	nop
c001c938:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001c93b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001c93e:	85 c0                	test   eax,eax
c001c940:	79 06                	jns    c001c948 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001c942:	05 ff 7f 00 00       	add    eax,0x7fff
c001c947:	90                   	nop
c001c948:	c1 f8 0f             	sar    eax,0xf
c001c94b:	83 c1 04             	add    ecx,0x4
c001c94e:	66 01 02             	add    WORD PTR [edx],ax
c001c951:	83 c2 02             	add    edx,0x2
c001c954:	39 d7                	cmp    edi,edx
c001c956:	75 e0                	jne    c001c938 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001c958:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c95b:	90                   	nop
c001c95c:	56                   	push   esi
c001c95d:	89 c2                	mov    edx,eax
c001c95f:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001c966:	29 f2                	sub    edx,esi
c001c968:	52                   	push   edx
c001c969:	50                   	push   eax
c001c96a:	68 98 4b 02 c0       	push   0xc0024b98
c001c96f:	e8 eb 00 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001c974:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001c977:	50                   	push   eax
c001c978:	01 f8                	add    eax,edi
c001c97a:	50                   	push   eax
c001c97b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c97e:	29 f0                	sub    eax,esi
c001c980:	c1 e0 02             	shl    eax,0x2
c001c983:	50                   	push   eax
c001c984:	68 c8 4b 02 c0       	push   0xc0024bc8
c001c989:	e8 d1 00 ff ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001c98e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001c991:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c994:	83 c4 1c             	add    esp,0x1c
c001c997:	01 d7                	add    edi,edx
c001c999:	29 f0                	sub    eax,esi
c001c99b:	c1 e0 02             	shl    eax,0x2
c001c99e:	50                   	push   eax
c001c99f:	57                   	push   edi
c001c9a0:	52                   	push   edx
c001c9a1:	e8 16 3c fe ff       	call   c00005bc <memmove>
c001c9a6:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001c9a9:	83 c4 10             	add    esp,0x10
c001c9ac:	89 f0                	mov    eax,esi
c001c9ae:	5b                   	pop    ebx
c001c9af:	5e                   	pop    esi
c001c9b0:	5f                   	pop    edi
c001c9b1:	c3                   	ret    
c001c9b2:	66 90                	xchg   ax,ax

c001c9b4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001c9b4:	57                   	push   edi
c001c9b5:	56                   	push   esi
c001c9b6:	53                   	push   ebx
c001c9b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c9bb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c9bf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c9c3:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001c9c9:	39 06                	cmp    DWORD PTR [esi],eax
c001c9cb:	74 13                	je     c001c9e0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001c9cd:	83 ec 0c             	sub    esp,0xc
c001c9d0:	68 ec 4b 02 c0       	push   0xc0024bec
c001c9d5:	e8 25 79 ff ff       	call   c00142ff <Krnl::panic(char const*)>
c001c9da:	83 c4 10             	add    esp,0x10
c001c9dd:	8d 76 00             	lea    esi,[esi+0x0]
c001c9e0:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001c9e6:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001c9e9:	74 11                	je     c001c9fc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001c9eb:	83 ec 0c             	sub    esp,0xc
c001c9ee:	68 5a 4b 02 c0       	push   0xc0024b5a
c001c9f3:	e8 07 79 ff ff       	call   c00142ff <Krnl::panic(char const*)>
c001c9f8:	83 c4 10             	add    esp,0x10
c001c9fb:	90                   	nop
c001c9fc:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001ca02:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001ca05:	74 11                	je     c001ca18 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001ca07:	83 ec 0c             	sub    esp,0xc
c001ca0a:	68 5a 4b 02 c0       	push   0xc0024b5a
c001ca0f:	e8 eb 78 ff ff       	call   c00142ff <Krnl::panic(char const*)>
c001ca14:	83 c4 10             	add    esp,0x10
c001ca17:	90                   	nop
c001ca18:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001ca1b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001ca1f:	7e 07                	jle    c001ca28 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001ca21:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ca25:	8d 76 00             	lea    esi,[esi+0x0]
c001ca28:	85 ff                	test   edi,edi
c001ca2a:	7e 1c                	jle    c001ca48 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001ca2c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001ca33:	31 c0                	xor    eax,eax
c001ca35:	8d 76 00             	lea    esi,[esi+0x0]
c001ca38:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ca3b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001ca3e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001ca41:	83 c0 04             	add    eax,0x4
c001ca44:	39 c1                	cmp    ecx,eax
c001ca46:	75 f0                	jne    c001ca38 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001ca48:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ca4b:	50                   	push   eax
c001ca4c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ca4f:	29 f8                	sub    eax,edi
c001ca51:	c1 e0 02             	shl    eax,0x2
c001ca54:	50                   	push   eax
c001ca55:	8d 04 ba             	lea    eax,[edx+edi*4]
c001ca58:	50                   	push   eax
c001ca59:	52                   	push   edx
c001ca5a:	e8 5d 3b fe ff       	call   c00005bc <memmove>
c001ca5f:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001ca62:	83 c4 10             	add    esp,0x10
c001ca65:	89 f8                	mov    eax,edi
c001ca67:	5b                   	pop    ebx
c001ca68:	5e                   	pop    esi
c001ca69:	5f                   	pop    edi
c001ca6a:	c3                   	ret    
c001ca6b:	90                   	nop

c001ca6c <PCI::open(int, int, void*)>:
c001ca6c:	83 ec 18             	sub    esp,0x18
c001ca6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ca73:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ca77:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ca7d:	8b 10                	mov    edx,DWORD PTR [eax]
c001ca7f:	50                   	push   eax
c001ca80:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001ca83:	31 c0                	xor    eax,eax
c001ca85:	83 c4 1c             	add    esp,0x1c
c001ca88:	c3                   	ret    
c001ca89:	90                   	nop

c001ca8a <PCI::close(int, int, void*)>:
c001ca8a:	31 c0                	xor    eax,eax
c001ca8c:	c3                   	ret    
c001ca8d:	90                   	nop

c001ca8e <PCI::PCI()>:
c001ca8e:	83 ec 0c             	sub    esp,0xc
c001ca91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca95:	83 ec 08             	sub    esp,0x8
c001ca98:	68 0b 4c 02 c0       	push   0xc0024c0b
c001ca9d:	50                   	push   eax
c001ca9e:	e8 69 0c ff ff       	call   c000d70c <Bus::Bus(char const*)>
c001caa3:	83 c4 10             	add    esp,0x10
c001caa6:	ba f4 4c 02 c0       	mov    edx,0xc0024cf4
c001caab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caaf:	89 10                	mov    DWORD PTR [eax],edx
c001cab1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cab5:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001cabf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cac3:	a3 40 80 02 c0       	mov    ds:0xc0028040,eax
c001cac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cacc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cad2:	0f b6 d0             	movzx  edx,al
c001cad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cad9:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001cae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cae4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001caea:	0f b6 d0             	movzx  edx,al
c001caed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caf1:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001caf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cafa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cb00:	8d 50 01             	lea    edx,[eax+0x1]
c001cb03:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cb07:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001cb0d:	0f b6 d0             	movzx  edx,al
c001cb10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb14:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001cb18:	83 c9 c0             	or     ecx,0xffffffc0
c001cb1b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001cb1f:	90                   	nop
c001cb20:	83 c4 0c             	add    esp,0xc
c001cb23:	c3                   	ret    

c001cb24 <PCI::readBAR8(unsigned int, int)>:
c001cb24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cb28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb2c:	f6 c2 01             	test   dl,0x1
c001cb2f:	74 07                	je     c001cb38 <PCI::readBAR8(unsigned int, int)+0x14>
c001cb31:	83 e2 fc             	and    edx,0xfffffffc
c001cb34:	01 c2                	add    edx,eax
c001cb36:	ec                   	in     al,dx
c001cb37:	c3                   	ret    
c001cb38:	83 e2 f0             	and    edx,0xfffffff0
c001cb3b:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001cb3e:	c3                   	ret    
c001cb3f:	90                   	nop

c001cb40 <PCI::readBAR16(unsigned int, int)>:
c001cb40:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cb44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb48:	f6 c2 01             	test   dl,0x1
c001cb4b:	74 08                	je     c001cb55 <PCI::readBAR16(unsigned int, int)+0x15>
c001cb4d:	83 e2 fc             	and    edx,0xfffffffc
c001cb50:	01 c2                	add    edx,eax
c001cb52:	66 ed                	in     ax,dx
c001cb54:	c3                   	ret    
c001cb55:	83 e2 f0             	and    edx,0xfffffff0
c001cb58:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001cb5c:	c3                   	ret    
c001cb5d:	90                   	nop

c001cb5e <PCI::readBAR32(unsigned int, int)>:
c001cb5e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cb62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb66:	f6 c2 01             	test   dl,0x1
c001cb69:	74 07                	je     c001cb72 <PCI::readBAR32(unsigned int, int)+0x14>
c001cb6b:	83 e2 fc             	and    edx,0xfffffffc
c001cb6e:	01 c2                	add    edx,eax
c001cb70:	ed                   	in     eax,dx
c001cb71:	c3                   	ret    
c001cb72:	83 e2 f0             	and    edx,0xfffffff0
c001cb75:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001cb78:	c3                   	ret    
c001cb79:	90                   	nop

c001cb7a <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001cb7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cb7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb82:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cb86:	f6 c2 01             	test   dl,0x1
c001cb89:	74 07                	je     c001cb92 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001cb8b:	83 e2 fc             	and    edx,0xfffffffc
c001cb8e:	01 ca                	add    edx,ecx
c001cb90:	ee                   	out    dx,al
c001cb91:	c3                   	ret    
c001cb92:	83 e2 f0             	and    edx,0xfffffff0
c001cb95:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001cb98:	c3                   	ret    
c001cb99:	90                   	nop

c001cb9a <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001cb9a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cb9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cba2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cba6:	f6 c2 01             	test   dl,0x1
c001cba9:	74 08                	je     c001cbb3 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001cbab:	83 e2 fc             	and    edx,0xfffffffc
c001cbae:	01 ca                	add    edx,ecx
c001cbb0:	66 ef                	out    dx,ax
c001cbb2:	c3                   	ret    
c001cbb3:	83 e2 f0             	and    edx,0xfffffff0
c001cbb6:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001cbba:	c3                   	ret    
c001cbbb:	90                   	nop

c001cbbc <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001cbbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cbc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbc4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cbc8:	f6 c2 01             	test   dl,0x1
c001cbcb:	74 07                	je     c001cbd4 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001cbcd:	83 e2 fc             	and    edx,0xfffffffc
c001cbd0:	01 ca                	add    edx,ecx
c001cbd2:	ef                   	out    dx,eax
c001cbd3:	c3                   	ret    
c001cbd4:	83 e2 f0             	and    edx,0xfffffff0
c001cbd7:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001cbda:	c3                   	ret    
c001cbdb:	90                   	nop

c001cbdc <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cbdc:	55                   	push   ebp
c001cbdd:	57                   	push   edi
c001cbde:	56                   	push   esi
c001cbdf:	53                   	push   ebx
c001cbe0:	83 ec 0c             	sub    esp,0xc
c001cbe3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cbe7:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001cbeb:	89 f0                	mov    eax,esi
c001cbed:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001cbf1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001cbf5:	3c 07                	cmp    al,0x7
c001cbf7:	76 10                	jbe    c001cc09 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001cbf9:	83 ec 0c             	sub    esp,0xc
c001cbfc:	68 13 4c 02 c0       	push   0xc0024c13
c001cc01:	e8 f9 76 ff ff       	call   c00142ff <Krnl::panic(char const*)>
c001cc06:	83 c4 10             	add    esp,0x10
c001cc09:	80 fb 0f             	cmp    bl,0xf
c001cc0c:	76 10                	jbe    c001cc1e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001cc0e:	83 ec 0c             	sub    esp,0xc
c001cc11:	68 43 4c 02 c0       	push   0xc0024c43
c001cc16:	e8 e4 76 ff ff       	call   c00142ff <Krnl::panic(char const*)>
c001cc1b:	83 c4 10             	add    esp,0x10
c001cc1e:	8d 04 36             	lea    eax,[esi+esi*1]
c001cc21:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cc26:	83 c8 f0             	or     eax,0xfffffff0
c001cc29:	ee                   	out    dx,al
c001cc2a:	ba fa 0c 00 00       	mov    edx,0xcfa
c001cc2f:	89 e8                	mov    eax,ebp
c001cc31:	ee                   	out    dx,al
c001cc32:	83 c4 0c             	add    esp,0xc
c001cc35:	89 d8                	mov    eax,ebx
c001cc37:	66 81 e7 fc 00       	and    di,0xfc
c001cc3c:	5b                   	pop    ebx
c001cc3d:	c1 e0 08             	shl    eax,0x8
c001cc40:	5e                   	pop    esi
c001cc41:	09 f8                	or     eax,edi
c001cc43:	5f                   	pop    edi
c001cc44:	66 0d 00 c0          	or     ax,0xc000
c001cc48:	5d                   	pop    ebp
c001cc49:	c3                   	ret    

c001cc4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cc4a:	57                   	push   edi
c001cc4b:	56                   	push   esi
c001cc4c:	53                   	push   ebx
c001cc4d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cc51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cc55:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001cc5b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cc5f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cc63:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cc67:	83 ff 01             	cmp    edi,0x1
c001cc6a:	75 3e                	jne    c001ccaa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001cc6c:	89 de                	mov    esi,ebx
c001cc6e:	0f b6 c0             	movzx  eax,al
c001cc71:	81 e6 fc 00 00 00    	and    esi,0xfc
c001cc77:	c1 e0 10             	shl    eax,0x10
c001cc7a:	0f b6 c9             	movzx  ecx,cl
c001cc7d:	09 f0                	or     eax,esi
c001cc7f:	c1 e1 08             	shl    ecx,0x8
c001cc82:	0f b6 d2             	movzx  edx,dl
c001cc85:	09 c8                	or     eax,ecx
c001cc87:	c1 e2 0b             	shl    edx,0xb
c001cc8a:	09 d0                	or     eax,edx
c001cc8c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cc91:	0d 00 00 00 80       	or     eax,0x80000000
c001cc96:	ef                   	out    dx,eax
c001cc97:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cc9c:	ed                   	in     eax,dx
c001cc9d:	83 e3 02             	and    ebx,0x2
c001cca0:	0f b6 cb             	movzx  ecx,bl
c001cca3:	c1 e1 03             	shl    ecx,0x3
c001cca6:	d3 e8                	shr    eax,cl
c001cca8:	eb 43                	jmp    c001cced <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001ccaa:	83 ff 02             	cmp    edi,0x2
c001ccad:	75 2c                	jne    c001ccdb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001ccaf:	83 ec 0c             	sub    esp,0xc
c001ccb2:	0f b6 c9             	movzx  ecx,cl
c001ccb5:	0f b6 d2             	movzx  edx,dl
c001ccb8:	0f b6 fb             	movzx  edi,bl
c001ccbb:	0f b6 c0             	movzx  eax,al
c001ccbe:	57                   	push   edi
c001ccbf:	51                   	push   ecx
c001ccc0:	52                   	push   edx
c001ccc1:	50                   	push   eax
c001ccc2:	56                   	push   esi
c001ccc3:	e8 14 ff ff ff       	call   c001cbdc <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ccc8:	89 c2                	mov    edx,eax
c001ccca:	ed                   	in     eax,dx
c001cccb:	83 e3 02             	and    ebx,0x2
c001ccce:	83 c4 20             	add    esp,0x20
c001ccd1:	0f b6 cb             	movzx  ecx,bl
c001ccd4:	c1 e1 03             	shl    ecx,0x3
c001ccd7:	d3 e8                	shr    eax,cl
c001ccd9:	eb 12                	jmp    c001cced <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001ccdb:	83 ec 0c             	sub    esp,0xc
c001ccde:	68 73 4c 02 c0       	push   0xc0024c73
c001cce3:	e8 17 76 ff ff       	call   c00142ff <Krnl::panic(char const*)>
c001cce8:	83 c4 10             	add    esp,0x10
c001cceb:	31 c0                	xor    eax,eax
c001cced:	5b                   	pop    ebx
c001ccee:	5e                   	pop    esi
c001ccef:	5f                   	pop    edi
c001ccf0:	c3                   	ret    
c001ccf1:	90                   	nop

c001ccf2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001ccf2:	83 ec 18             	sub    esp,0x18
c001ccf5:	6a 00                	push   0x0
c001ccf7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ccfc:	50                   	push   eax
c001ccfd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd02:	50                   	push   eax
c001cd03:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd08:	50                   	push   eax
c001cd09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd0d:	e8 38 ff ff ff       	call   c001cc4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd12:	83 c4 2c             	add    esp,0x2c
c001cd15:	c3                   	ret    

c001cd16 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001cd16:	83 ec 18             	sub    esp,0x18
c001cd19:	6a 0e                	push   0xe
c001cd1b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd20:	50                   	push   eax
c001cd21:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd26:	50                   	push   eax
c001cd27:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd2c:	50                   	push   eax
c001cd2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd31:	e8 14 ff ff ff       	call   c001cc4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd36:	83 c4 2c             	add    esp,0x2c
c001cd39:	0f b6 c0             	movzx  eax,al
c001cd3c:	c3                   	ret    
c001cd3d:	90                   	nop

c001cd3e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001cd3e:	55                   	push   ebp
c001cd3f:	57                   	push   edi
c001cd40:	56                   	push   esi
c001cd41:	53                   	push   ebx
c001cd42:	83 ec 18             	sub    esp,0x18
c001cd45:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001cd4a:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001cd4f:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001cd54:	6a 0a                	push   0xa
c001cd56:	56                   	push   esi
c001cd57:	55                   	push   ebp
c001cd58:	57                   	push   edi
c001cd59:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd5d:	e8 e8 fe ff ff       	call   c001cc4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd62:	83 c4 14             	add    esp,0x14
c001cd65:	89 c3                	mov    ebx,eax
c001cd67:	6a 0a                	push   0xa
c001cd69:	0f b6 db             	movzx  ebx,bl
c001cd6c:	56                   	push   esi
c001cd6d:	55                   	push   ebp
c001cd6e:	57                   	push   edi
c001cd6f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd73:	e8 d2 fe ff ff       	call   c001cc4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd78:	83 c4 2c             	add    esp,0x2c
c001cd7b:	25 00 ff 00 00       	and    eax,0xff00
c001cd80:	09 d8                	or     eax,ebx
c001cd82:	5b                   	pop    ebx
c001cd83:	5e                   	pop    esi
c001cd84:	5f                   	pop    edi
c001cd85:	5d                   	pop    ebp
c001cd86:	c3                   	ret    
c001cd87:	90                   	nop

c001cd88 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001cd88:	83 ec 18             	sub    esp,0x18
c001cd8b:	6a 08                	push   0x8
c001cd8d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd92:	50                   	push   eax
c001cd93:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd98:	50                   	push   eax
c001cd99:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd9e:	50                   	push   eax
c001cd9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cda3:	e8 a2 fe ff ff       	call   c001cc4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cda8:	83 c4 2c             	add    esp,0x2c
c001cdab:	0f b6 c4             	movzx  eax,ah
c001cdae:	c3                   	ret    
c001cdaf:	90                   	nop

c001cdb0 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001cdb0:	83 ec 18             	sub    esp,0x18
c001cdb3:	6a 08                	push   0x8
c001cdb5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdba:	50                   	push   eax
c001cdbb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdc0:	50                   	push   eax
c001cdc1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdc6:	50                   	push   eax
c001cdc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cdcb:	e8 7a fe ff ff       	call   c001cc4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cdd0:	83 c4 2c             	add    esp,0x2c
c001cdd3:	c3                   	ret    

c001cdd4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001cdd4:	83 ec 18             	sub    esp,0x18
c001cdd7:	6a 3c                	push   0x3c
c001cdd9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdde:	50                   	push   eax
c001cddf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cde4:	50                   	push   eax
c001cde5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdea:	50                   	push   eax
c001cdeb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cdef:	e8 56 fe ff ff       	call   c001cc4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cdf4:	83 c4 2c             	add    esp,0x2c
c001cdf7:	c3                   	ret    

c001cdf8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001cdf8:	83 ec 18             	sub    esp,0x18
c001cdfb:	6a 18                	push   0x18
c001cdfd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce02:	50                   	push   eax
c001ce03:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce08:	50                   	push   eax
c001ce09:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce0e:	50                   	push   eax
c001ce0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce13:	e8 32 fe ff ff       	call   c001cc4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce18:	83 c4 2c             	add    esp,0x2c
c001ce1b:	0f b6 c4             	movzx  eax,ah
c001ce1e:	c3                   	ret    
c001ce1f:	90                   	nop

c001ce20 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ce20:	55                   	push   ebp
c001ce21:	57                   	push   edi
c001ce22:	56                   	push   esi
c001ce23:	53                   	push   ebx
c001ce24:	83 ec 28             	sub    esp,0x28
c001ce27:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001ce2b:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001ce30:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001ce35:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001ce3a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001ce41:	8d 43 12             	lea    eax,[ebx+0x12]
c001ce44:	83 c3 10             	add    ebx,0x10
c001ce47:	0f b6 c0             	movzx  eax,al
c001ce4a:	0f b6 db             	movzx  ebx,bl
c001ce4d:	50                   	push   eax
c001ce4e:	51                   	push   ecx
c001ce4f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001ce53:	57                   	push   edi
c001ce54:	55                   	push   ebp
c001ce55:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ce59:	e8 ec fd ff ff       	call   c001cc4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce5e:	83 c4 14             	add    esp,0x14
c001ce61:	89 c6                	mov    esi,eax
c001ce63:	53                   	push   ebx
c001ce64:	c1 e6 10             	shl    esi,0x10
c001ce67:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ce6b:	51                   	push   ecx
c001ce6c:	57                   	push   edi
c001ce6d:	55                   	push   ebp
c001ce6e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ce72:	e8 d3 fd ff ff       	call   c001cc4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce77:	83 c4 3c             	add    esp,0x3c
c001ce7a:	0f b7 c0             	movzx  eax,ax
c001ce7d:	5b                   	pop    ebx
c001ce7e:	09 f0                	or     eax,esi
c001ce80:	5e                   	pop    esi
c001ce81:	5f                   	pop    edi
c001ce82:	5d                   	pop    ebp
c001ce83:	c3                   	ret    

c001ce84 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001ce84:	55                   	push   ebp
c001ce85:	57                   	push   edi
c001ce86:	56                   	push   esi
c001ce87:	53                   	push   ebx
c001ce88:	83 ec 0c             	sub    esp,0xc
c001ce8b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ce8f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ce93:	89 f5                	mov    ebp,esi
c001ce95:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001ce9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ce9f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cea3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cea7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ceab:	83 f9 01             	cmp    ecx,0x1
c001ceae:	75 5d                	jne    c001cf0d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001ceb0:	0f b6 c8             	movzx  ecx,al
c001ceb3:	0f b6 d2             	movzx  edx,dl
c001ceb6:	c1 e1 10             	shl    ecx,0x10
c001ceb9:	c1 e2 0b             	shl    edx,0xb
c001cebc:	89 f0                	mov    eax,esi
c001cebe:	25 fc 00 00 00       	and    eax,0xfc
c001cec3:	09 c1                	or     ecx,eax
c001cec5:	89 e8                	mov    eax,ebp
c001cec7:	0f b6 c0             	movzx  eax,al
c001ceca:	c1 e0 08             	shl    eax,0x8
c001cecd:	09 c1                	or     ecx,eax
c001cecf:	09 d1                	or     ecx,edx
c001ced1:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ced6:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001cedc:	89 c8                	mov    eax,ecx
c001cede:	ef                   	out    dx,eax
c001cedf:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cee4:	ed                   	in     eax,dx
c001cee5:	0f b7 db             	movzx  ebx,bx
c001cee8:	83 e6 02             	and    esi,0x2
c001ceeb:	74 0a                	je     c001cef7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001ceed:	0f b7 d0             	movzx  edx,ax
c001cef0:	c1 e3 10             	shl    ebx,0x10
c001cef3:	09 d3                	or     ebx,edx
c001cef5:	eb 05                	jmp    c001cefc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001cef7:	66 31 c0             	xor    ax,ax
c001cefa:	09 c3                	or     ebx,eax
c001cefc:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cf01:	89 c8                	mov    eax,ecx
c001cf03:	ef                   	out    dx,eax
c001cf04:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cf09:	89 d8                	mov    eax,ebx
c001cf0b:	eb 41                	jmp    c001cf4e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001cf0d:	83 f9 02             	cmp    ecx,0x2
c001cf10:	75 45                	jne    c001cf57 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001cf12:	83 ec 0c             	sub    esp,0xc
c001cf15:	0f b6 d2             	movzx  edx,dl
c001cf18:	89 f1                	mov    ecx,esi
c001cf1a:	0f b6 c0             	movzx  eax,al
c001cf1d:	0f b6 f1             	movzx  esi,cl
c001cf20:	89 e9                	mov    ecx,ebp
c001cf22:	56                   	push   esi
c001cf23:	0f b6 c9             	movzx  ecx,cl
c001cf26:	51                   	push   ecx
c001cf27:	52                   	push   edx
c001cf28:	50                   	push   eax
c001cf29:	57                   	push   edi
c001cf2a:	e8 ad fc ff ff       	call   c001cbdc <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cf2f:	89 c2                	mov    edx,eax
c001cf31:	ed                   	in     eax,dx
c001cf32:	83 c4 20             	add    esp,0x20
c001cf35:	0f b7 db             	movzx  ebx,bx
c001cf38:	f6 c2 02             	test   dl,0x2
c001cf3b:	74 0c                	je     c001cf49 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001cf3d:	0f b7 c8             	movzx  ecx,ax
c001cf40:	89 d8                	mov    eax,ebx
c001cf42:	c1 e0 10             	shl    eax,0x10
c001cf45:	09 c8                	or     eax,ecx
c001cf47:	eb 05                	jmp    c001cf4e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001cf49:	66 31 c0             	xor    ax,ax
c001cf4c:	09 d8                	or     eax,ebx
c001cf4e:	ef                   	out    dx,eax
c001cf4f:	83 c4 0c             	add    esp,0xc
c001cf52:	5b                   	pop    ebx
c001cf53:	5e                   	pop    esi
c001cf54:	5f                   	pop    edi
c001cf55:	5d                   	pop    ebp
c001cf56:	c3                   	ret    
c001cf57:	c7 44 24 20 73 4c 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024c73
c001cf5f:	83 c4 0c             	add    esp,0xc
c001cf62:	5b                   	pop    ebx
c001cf63:	5e                   	pop    esi
c001cf64:	5f                   	pop    edi
c001cf65:	5d                   	pop    ebp
c001cf66:	e9 94 73 ff ff       	jmp    c00142ff <Krnl::panic(char const*)>
c001cf6b:	90                   	nop

c001cf6c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001cf6c:	55                   	push   ebp
c001cf6d:	57                   	push   edi
c001cf6e:	56                   	push   esi
c001cf6f:	53                   	push   ebx
c001cf70:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001cf76:	80 3d 4c 80 02 c0 00 	cmp    BYTE PTR ds:0xc002804c,0x0
c001cf7d:	0f 85 84 00 00 00    	jne    c001d007 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c001cf83:	83 ec 0c             	sub    esp,0xc
c001cf86:	68 14 01 00 00       	push   0x114
c001cf8b:	e8 33 ca fe ff       	call   c00099c3 <malloc>
c001cf90:	83 c4 0c             	add    esp,0xc
c001cf93:	89 c3                	mov    ebx,eax
c001cf95:	ff 35 50 76 02 c0    	push   DWORD PTR ds:0xc0027650
c001cf9b:	68 79 4c 02 c0       	push   0xc0024c79
c001cfa0:	50                   	push   eax
c001cfa1:	e8 24 00 ff ff       	call   c000cfca <File::File(char const*, Process*)>
c001cfa6:	5a                   	pop    edx
c001cfa7:	59                   	pop    ecx
c001cfa8:	6a 01                	push   0x1
c001cfaa:	53                   	push   ebx
c001cfab:	e8 7e 00 ff ff       	call   c000d02e <File::open(FileOpenMode)>
c001cfb0:	83 c4 0c             	add    esp,0xc
c001cfb3:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001cfb7:	50                   	push   eax
c001cfb8:	8d 44 24 28          	lea    eax,[esp+0x28]
c001cfbc:	50                   	push   eax
c001cfbd:	53                   	push   ebx
c001cfbe:	e8 17 03 ff ff       	call   c000d2da <File::stat(unsigned long long*, bool*)>
c001cfc3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cfc7:	40                   	inc    eax
c001cfc8:	89 04 24             	mov    DWORD PTR [esp],eax
c001cfcb:	e8 f3 c9 fe ff       	call   c00099c3 <malloc>
c001cfd0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cfd4:	a3 48 80 02 c0       	mov    ds:0xc0028048,eax
c001cfd9:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001cfdd:	5e                   	pop    esi
c001cfde:	8b 13                	mov    edx,DWORD PTR [ebx]
c001cfe0:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001cfe4:	51                   	push   ecx
c001cfe5:	50                   	push   eax
c001cfe6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001cfea:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001cfee:	53                   	push   ebx
c001cfef:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001cff2:	83 c4 14             	add    esp,0x14
c001cff5:	53                   	push   ebx
c001cff6:	e8 91 00 ff ff       	call   c000d08c <File::close()>
c001cffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cfff:	83 c4 10             	add    esp,0x10
c001d002:	a3 44 80 02 c0       	mov    ds:0xc0028044,eax
c001d007:	a1 44 80 02 c0       	mov    eax,ds:0xc0028044
c001d00c:	8b 15 48 80 02 c0    	mov    edx,DWORD PTR ds:0xc0028048
c001d012:	89 04 24             	mov    DWORD PTR [esp],eax
c001d015:	31 ff                	xor    edi,edi
c001d017:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c001d01f:	31 f6                	xor    esi,esi
c001d021:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001d026:	31 db                	xor    ebx,ebx
c001d028:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001d030:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001d035:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c001d03c:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001d040:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c001d047:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001d04b:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001d04e:	0f 8e 6b 01 00 00    	jle    c001d1bf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c001d054:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d057:	d4 40                	aam    0x40
c001d059:	d5 39                	aad    0x39
c001d05b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d05f:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c001d063:	d4 40                	aam    0x40
c001d065:	d5 39                	aad    0x39
c001d067:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d06b:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c001d06f:	d4 40                	aam    0x40
c001d071:	d5 39                	aad    0x39
c001d073:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001d077:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c001d07b:	d4 40                	aam    0x40
c001d07d:	d5 39                	aad    0x39
c001d07f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d083:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c001d087:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001d08b:	3c 56                	cmp    al,0x56
c001d08d:	74 45                	je     c001d0d4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c001d08f:	d4 40                	aam    0x40
c001d091:	d5 39                	aad    0x39
c001d093:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d096:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c001d09a:	0f b6 c9             	movzx  ecx,cl
c001d09d:	c1 e1 04             	shl    ecx,0x4
c001d0a0:	d4 40                	aam    0x40
c001d0a2:	d5 39                	aad    0x39
c001d0a4:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d0a7:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c001d0ab:	0f b6 db             	movzx  ebx,bl
c001d0ae:	09 cb                	or     ebx,ecx
c001d0b0:	c1 e3 04             	shl    ebx,0x4
c001d0b3:	d4 40                	aam    0x40
c001d0b5:	d5 39                	aad    0x39
c001d0b7:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d0ba:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c001d0be:	0f b6 c9             	movzx  ecx,cl
c001d0c1:	09 cb                	or     ebx,ecx
c001d0c3:	c1 e3 04             	shl    ebx,0x4
c001d0c6:	89 d9                	mov    ecx,ebx
c001d0c8:	d4 40                	aam    0x40
c001d0ca:	d5 39                	aad    0x39
c001d0cc:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d0cf:	0f b6 db             	movzx  ebx,bl
c001d0d2:	09 cb                	or     ebx,ecx
c001d0d4:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c001d0d8:	80 f9 44             	cmp    cl,0x44
c001d0db:	74 47                	je     c001d124 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c001d0dd:	88 c8                	mov    al,cl
c001d0df:	d4 40                	aam    0x40
c001d0e1:	d5 39                	aad    0x39
c001d0e3:	83 e8 30             	sub    eax,0x30
c001d0e6:	0f b6 e8             	movzx  ebp,al
c001d0e9:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c001d0ed:	c1 e5 04             	shl    ebp,0x4
c001d0f0:	d4 40                	aam    0x40
c001d0f2:	d5 39                	aad    0x39
c001d0f4:	83 e8 30             	sub    eax,0x30
c001d0f7:	0f b6 f0             	movzx  esi,al
c001d0fa:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c001d0fe:	09 ee                	or     esi,ebp
c001d100:	c1 e6 04             	shl    esi,0x4
c001d103:	d4 40                	aam    0x40
c001d105:	d5 39                	aad    0x39
c001d107:	83 e8 30             	sub    eax,0x30
c001d10a:	0f b6 e8             	movzx  ebp,al
c001d10d:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c001d111:	09 ee                	or     esi,ebp
c001d113:	c1 e6 04             	shl    esi,0x4
c001d116:	89 f5                	mov    ebp,esi
c001d118:	d4 40                	aam    0x40
c001d11a:	d5 39                	aad    0x39
c001d11c:	83 e8 30             	sub    eax,0x30
c001d11f:	0f b6 f0             	movzx  esi,al
c001d122:	09 ee                	or     esi,ebp
c001d124:	83 c7 10             	add    edi,0x10
c001d127:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c001d12b:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d12e:	3c 0a                	cmp    al,0xa
c001d130:	74 09                	je     c001d13b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c001d132:	45                   	inc    ebp
c001d133:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001d136:	75 16                	jne    c001d14e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c001d138:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001d13b:	3c 0a                	cmp    al,0xa
c001d13d:	0f 94 c0             	sete   al
c001d140:	0f b6 c0             	movzx  eax,al
c001d143:	01 c7                	add    edi,eax
c001d145:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c001d14a:	75 0c                	jne    c001d158 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c001d14c:	eb 15                	jmp    c001d163 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c001d14e:	47                   	inc    edi
c001d14f:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c001d152:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001d156:	eb d3                	jmp    c001d12b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c001d158:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c001d15d:	0f 85 e8 fe ff ff    	jne    c001d04b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d163:	80 f9 44             	cmp    cl,0x44
c001d166:	74 0b                	je     c001d173 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c001d168:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c001d16d:	0f 85 d8 fe ff ff    	jne    c001d04b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d173:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001d177:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001d17b:	c1 e1 04             	shl    ecx,0x4
c001d17e:	83 e8 30             	sub    eax,0x30
c001d181:	09 c8                	or     eax,ecx
c001d183:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c001d187:	0f 85 be fe ff ff    	jne    c001d04b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d18d:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c001d191:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d195:	c1 e1 04             	shl    ecx,0x4
c001d198:	83 e8 30             	sub    eax,0x30
c001d19b:	09 c8                	or     eax,ecx
c001d19d:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c001d1a1:	0f 85 a4 fe ff ff    	jne    c001d04b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d1a7:	50                   	push   eax
c001d1a8:	50                   	push   eax
c001d1a9:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d1ad:	50                   	push   eax
c001d1ae:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001d1b5:	e8 86 35 fe ff       	call   c0000740 <strcpy>
c001d1ba:	83 c4 10             	add    esp,0x10
c001d1bd:	eb 15                	jmp    c001d1d4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c001d1bf:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d1c6:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001d1d1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001d1d4:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d1db:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d1e1:	5b                   	pop    ebx
c001d1e2:	5e                   	pop    esi
c001d1e3:	5f                   	pop    edi
c001d1e4:	5d                   	pop    ebp
c001d1e5:	c3                   	ret    

c001d1e6 <PCI::checkBus(unsigned char)>:
c001d1e6:	56                   	push   esi
c001d1e7:	53                   	push   ebx
c001d1e8:	31 db                	xor    ebx,ebx
c001d1ea:	51                   	push   ecx
c001d1eb:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d1f0:	52                   	push   edx
c001d1f1:	53                   	push   ebx
c001d1f2:	43                   	inc    ebx
c001d1f3:	56                   	push   esi
c001d1f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1f8:	e8 37 03 00 00       	call   c001d534 <PCI::checkDevice(unsigned char, unsigned char)>
c001d1fd:	83 c4 10             	add    esp,0x10
c001d200:	83 fb 20             	cmp    ebx,0x20
c001d203:	75 eb                	jne    c001d1f0 <PCI::checkBus(unsigned char)+0xa>
c001d205:	58                   	pop    eax
c001d206:	5b                   	pop    ebx
c001d207:	5e                   	pop    esi
c001d208:	c3                   	ret    
c001d209:	90                   	nop

c001d20a <PCI::foundDevice(PCIDeviceInfo)>:
c001d20a:	55                   	push   ebp
c001d20b:	57                   	push   edi
c001d20c:	56                   	push   esi
c001d20d:	53                   	push   ebx
c001d20e:	83 ec 1c             	sub    esp,0x1c
c001d211:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d215:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001d21b:	0f 84 52 01 00 00    	je     c001d373 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001d221:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001d225:	66 81 f9 06 04       	cmp    cx,0x406
c001d22a:	75 2c                	jne    c001d258 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001d22c:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001d231:	50                   	push   eax
c001d232:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001d237:	50                   	push   eax
c001d238:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001d23d:	50                   	push   eax
c001d23e:	56                   	push   esi
c001d23f:	e8 b4 fb ff ff       	call   c001cdf8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001d244:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001d248:	0f b6 c0             	movzx  eax,al
c001d24b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d24f:	83 c4 2c             	add    esp,0x2c
c001d252:	5b                   	pop    ebx
c001d253:	5e                   	pop    esi
c001d254:	5f                   	pop    edi
c001d255:	5d                   	pop    ebp
c001d256:	eb 8e                	jmp    c001d1e6 <PCI::checkBus(unsigned char)>
c001d258:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d25c:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001d262:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d266:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d26a:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001d26e:	88 d3                	mov    bl,dl
c001d270:	85 c0                	test   eax,eax
c001d272:	74 33                	je     c001d2a7 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001d274:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d277:	85 d2                	test   edx,edx
c001d279:	74 28                	je     c001d2a3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d27b:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001d281:	31 ef                	xor    edi,ebp
c001d283:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001d289:	75 18                	jne    c001d2a3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d28b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d28f:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001d295:	75 0c                	jne    c001d2a3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d297:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001d29d:	0f 84 d0 00 00 00    	je     c001d373 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001d2a3:	8b 00                	mov    eax,DWORD PTR [eax]
c001d2a5:	eb c9                	jmp    c001d270 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001d2a7:	66 81 f9 01 06       	cmp    cx,0x601
c001d2ac:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001d2b0:	75 19                	jne    c001d2cb <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001d2b2:	83 ec 0c             	sub    esp,0xc
c001d2b5:	68 64 01 00 00       	push   0x164
c001d2ba:	e8 04 c7 fe ff       	call   c00099c3 <malloc>
c001d2bf:	89 c5                	mov    ebp,eax
c001d2c1:	89 04 24             	mov    DWORD PTR [esp],eax
c001d2c4:	e8 7b 0e 00 00       	call   c001e144 <SATABus::SATABus()>
c001d2c9:	eb 1e                	jmp    c001d2e9 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001d2cb:	66 81 f9 01 01       	cmp    cx,0x101
c001d2d0:	75 60                	jne    c001d332 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c001d2d2:	83 ec 0c             	sub    esp,0xc
c001d2d5:	68 70 02 00 00       	push   0x270
c001d2da:	e8 e4 c6 fe ff       	call   c00099c3 <malloc>
c001d2df:	89 c5                	mov    ebp,eax
c001d2e1:	89 04 24             	mov    DWORD PTR [esp],eax
c001d2e4:	e8 0f 03 00 00       	call   c001d5f8 <IDE::IDE()>
c001d2e9:	58                   	pop    eax
c001d2ea:	5a                   	pop    edx
c001d2eb:	55                   	push   ebp
c001d2ec:	56                   	push   esi
c001d2ed:	e8 b4 0b ff ff       	call   c000dea6 <Device::addChild(Device*)>
c001d2f2:	83 ec 1c             	sub    esp,0x1c
c001d2f5:	b9 09 00 00 00       	mov    ecx,0x9
c001d2fa:	fc                   	cld    
c001d2fb:	89 e7                	mov    edi,esp
c001d2fd:	89 de                	mov    esi,ebx
c001d2ff:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d301:	55                   	push   ebp
c001d302:	e8 b1 0a ff ff       	call   c000ddb8 <Device::preOpenPCI(PCIDeviceInfo)>
c001d307:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d30a:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001d30e:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001d316:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001d31e:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001d326:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d329:	83 c4 4c             	add    esp,0x4c
c001d32c:	5b                   	pop    ebx
c001d32d:	5e                   	pop    esi
c001d32e:	5f                   	pop    edi
c001d32f:	5d                   	pop    ebp
c001d330:	ff e0                	jmp    eax
c001d332:	83 ec 0c             	sub    esp,0xc
c001d335:	68 58 01 00 00       	push   0x158
c001d33a:	e8 84 c6 fe ff       	call   c00099c3 <malloc>
c001d33f:	89 c5                	mov    ebp,eax
c001d341:	58                   	pop    eax
c001d342:	5a                   	pop    edx
c001d343:	68 92 4c 02 c0       	push   0xc0024c92
c001d348:	55                   	push   ebp
c001d349:	e8 62 0e ff ff       	call   c000e1b0 <DriverlessDevice::DriverlessDevice(char const*)>
c001d34e:	59                   	pop    ecx
c001d34f:	5f                   	pop    edi
c001d350:	55                   	push   ebp
c001d351:	56                   	push   esi
c001d352:	e8 4f 0b ff ff       	call   c000dea6 <Device::addChild(Device*)>
c001d357:	b9 09 00 00 00       	mov    ecx,0x9
c001d35c:	fc                   	cld    
c001d35d:	89 df                	mov    edi,ebx
c001d35f:	89 de                	mov    esi,ebx
c001d361:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d363:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001d367:	83 c4 2c             	add    esp,0x2c
c001d36a:	5b                   	pop    ebx
c001d36b:	5e                   	pop    esi
c001d36c:	5f                   	pop    edi
c001d36d:	5d                   	pop    ebp
c001d36e:	e9 45 0a ff ff       	jmp    c000ddb8 <Device::preOpenPCI(PCIDeviceInfo)>
c001d373:	83 c4 1c             	add    esp,0x1c
c001d376:	5b                   	pop    ebx
c001d377:	5e                   	pop    esi
c001d378:	5f                   	pop    edi
c001d379:	5d                   	pop    ebp
c001d37a:	c3                   	ret    
c001d37b:	90                   	nop

c001d37c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001d37c:	55                   	push   ebp
c001d37d:	57                   	push   edi
c001d37e:	56                   	push   esi
c001d37f:	53                   	push   ebx
c001d380:	83 ec 68             	sub    esp,0x68
c001d383:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001d387:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001d38e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d392:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001d399:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c001d39e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d3a2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001d3a9:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c001d3ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d3b2:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c001d3b7:	6a 0c                	push   0xc
c001d3b9:	57                   	push   edi
c001d3ba:	53                   	push   ebx
c001d3bb:	56                   	push   esi
c001d3bc:	55                   	push   ebp
c001d3bd:	e8 88 f8 ff ff       	call   c001cc4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d3c2:	83 c4 20             	add    esp,0x20
c001d3c5:	57                   	push   edi
c001d3c6:	53                   	push   ebx
c001d3c7:	56                   	push   esi
c001d3c8:	55                   	push   ebp
c001d3c9:	e8 70 f9 ff ff       	call   c001cd3e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001d3ce:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c001d3d3:	57                   	push   edi
c001d3d4:	53                   	push   ebx
c001d3d5:	56                   	push   esi
c001d3d6:	55                   	push   ebp
c001d3d7:	e8 f8 f9 ff ff       	call   c001cdd4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001d3dc:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d3e0:	83 c4 14             	add    esp,0x14
c001d3e3:	6a 3c                	push   0x3c
c001d3e5:	57                   	push   edi
c001d3e6:	53                   	push   ebx
c001d3e7:	56                   	push   esi
c001d3e8:	55                   	push   ebp
c001d3e9:	e8 5c f8 ff ff       	call   c001cc4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d3ee:	0f b6 c4             	movzx  eax,ah
c001d3f1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d3f5:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d3f9:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001d3fd:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001d402:	83 c4 20             	add    esp,0x20
c001d405:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d40b:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001d412:	74 7c                	je     c001d490 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c001d414:	31 c0                	xor    eax,eax
c001d416:	8b 15 68 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026168
c001d41c:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001d422:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c001d428:	7e 66                	jle    c001d490 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c001d42a:	8d 14 c2             	lea    edx,[edx+eax*8]
c001d42d:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001d434:	39 cb                	cmp    ebx,ecx
c001d436:	75 55                	jne    c001d48d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c001d438:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001d43f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001d443:	75 48                	jne    c001d48d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c001d445:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d449:	83 ec 0c             	sub    esp,0xc
c001d44c:	68 ac 4c 02 c0       	push   0xc0024cac
c001d451:	e8 09 f6 fe ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001d456:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d45a:	8b 15 68 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026168
c001d460:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d464:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001d46a:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c001d472:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c001d476:	52                   	push   edx
c001d477:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d47b:	53                   	push   ebx
c001d47c:	68 d1 4c 02 c0       	push   0xc0024cd1
c001d481:	e8 d9 f5 fe ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001d486:	83 c4 20             	add    esp,0x20
c001d489:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d48d:	40                   	inc    eax
c001d48e:	eb 86                	jmp    c001d416 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c001d490:	31 d2                	xor    edx,edx
c001d492:	83 ec 0c             	sub    esp,0xc
c001d495:	57                   	push   edi
c001d496:	53                   	push   ebx
c001d497:	56                   	push   esi
c001d498:	52                   	push   edx
c001d499:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001d49d:	55                   	push   ebp
c001d49e:	e8 7d f9 ff ff       	call   c001ce20 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d4a3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d4a7:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001d4ab:	42                   	inc    edx
c001d4ac:	83 c4 20             	add    esp,0x20
c001d4af:	83 fa 06             	cmp    edx,0x6
c001d4b2:	75 de                	jne    c001d492 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c001d4b4:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d4b9:	83 ec 0c             	sub    esp,0xc
c001d4bc:	86 e0                	xchg   al,ah
c001d4be:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001d4c3:	6a 02                	push   0x2
c001d4c5:	57                   	push   edi
c001d4c6:	53                   	push   ebx
c001d4c7:	56                   	push   esi
c001d4c8:	55                   	push   ebp
c001d4c9:	e8 7c f7 ff ff       	call   c001cc4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d4ce:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001d4d3:	83 c4 20             	add    esp,0x20
c001d4d6:	57                   	push   edi
c001d4d7:	53                   	push   ebx
c001d4d8:	56                   	push   esi
c001d4d9:	55                   	push   ebp
c001d4da:	e8 a9 f8 ff ff       	call   c001cd88 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001d4df:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001d4e3:	57                   	push   edi
c001d4e4:	53                   	push   ebx
c001d4e5:	56                   	push   esi
c001d4e6:	55                   	push   ebp
c001d4e7:	e8 06 f8 ff ff       	call   c001ccf2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d4ec:	b9 09 00 00 00       	mov    ecx,0x9
c001d4f1:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001d4f6:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001d4fa:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001d4fe:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001d502:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001d506:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001d50a:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001d50e:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001d512:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001d516:	83 ec 0c             	sub    esp,0xc
c001d519:	fc                   	cld    
c001d51a:	89 e7                	mov    edi,esp
c001d51c:	8d 74 24 58          	lea    esi,[esp+0x58]
c001d520:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d522:	55                   	push   ebp
c001d523:	e8 e2 fc ff ff       	call   c001d20a <PCI::foundDevice(PCIDeviceInfo)>
c001d528:	81 c4 8c 00 00 00    	add    esp,0x8c
c001d52e:	5b                   	pop    ebx
c001d52f:	5e                   	pop    esi
c001d530:	5f                   	pop    edi
c001d531:	5d                   	pop    ebp
c001d532:	c3                   	ret    
c001d533:	90                   	nop

c001d534 <PCI::checkDevice(unsigned char, unsigned char)>:
c001d534:	55                   	push   ebp
c001d535:	57                   	push   edi
c001d536:	56                   	push   esi
c001d537:	53                   	push   ebx
c001d538:	83 ec 0c             	sub    esp,0xc
c001d53b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001d53f:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001d544:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001d549:	6a 00                	push   0x0
c001d54b:	56                   	push   esi
c001d54c:	57                   	push   edi
c001d54d:	55                   	push   ebp
c001d54e:	e8 9f f7 ff ff       	call   c001ccf2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d553:	6a 00                	push   0x0
c001d555:	56                   	push   esi
c001d556:	57                   	push   edi
c001d557:	55                   	push   ebp
c001d558:	e8 1f fe ff ff       	call   c001d37c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d55d:	83 c4 20             	add    esp,0x20
c001d560:	6a 00                	push   0x0
c001d562:	56                   	push   esi
c001d563:	57                   	push   edi
c001d564:	55                   	push   ebp
c001d565:	e8 ac f7 ff ff       	call   c001cd16 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d56a:	83 c4 10             	add    esp,0x10
c001d56d:	84 c0                	test   al,al
c001d56f:	79 27                	jns    c001d598 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001d571:	bb 01 00 00 00       	mov    ebx,0x1
c001d576:	53                   	push   ebx
c001d577:	56                   	push   esi
c001d578:	57                   	push   edi
c001d579:	55                   	push   ebp
c001d57a:	e8 73 f7 ff ff       	call   c001ccf2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d57f:	83 c4 10             	add    esp,0x10
c001d582:	66 40                	inc    ax
c001d584:	74 0c                	je     c001d592 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001d586:	53                   	push   ebx
c001d587:	56                   	push   esi
c001d588:	57                   	push   edi
c001d589:	55                   	push   ebp
c001d58a:	e8 ed fd ff ff       	call   c001d37c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d58f:	83 c4 10             	add    esp,0x10
c001d592:	43                   	inc    ebx
c001d593:	83 fb 08             	cmp    ebx,0x8
c001d596:	75 de                	jne    c001d576 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001d598:	83 c4 0c             	add    esp,0xc
c001d59b:	5b                   	pop    ebx
c001d59c:	5e                   	pop    esi
c001d59d:	5f                   	pop    edi
c001d59e:	5d                   	pop    ebp
c001d59f:	c3                   	ret    

c001d5a0 <PCI::detect()>:
c001d5a0:	56                   	push   esi
c001d5a1:	53                   	push   ebx
c001d5a2:	53                   	push   ebx
c001d5a3:	31 db                	xor    ebx,ebx
c001d5a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d5a9:	6a 00                	push   0x0
c001d5ab:	6a 00                	push   0x0
c001d5ad:	6a 00                	push   0x0
c001d5af:	56                   	push   esi
c001d5b0:	e8 61 f7 ff ff       	call   c001cd16 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d5b5:	83 c4 10             	add    esp,0x10
c001d5b8:	a8 80                	test   al,0x80
c001d5ba:	75 21                	jne    c001d5dd <PCI::detect()+0x3d>
c001d5bc:	51                   	push   ecx
c001d5bd:	51                   	push   ecx
c001d5be:	6a 00                	push   0x0
c001d5c0:	56                   	push   esi
c001d5c1:	e8 20 fc ff ff       	call   c001d1e6 <PCI::checkBus(unsigned char)>
c001d5c6:	83 c4 10             	add    esp,0x10
c001d5c9:	eb 24                	jmp    c001d5ef <PCI::detect()+0x4f>
c001d5cb:	52                   	push   edx
c001d5cc:	52                   	push   edx
c001d5cd:	53                   	push   ebx
c001d5ce:	43                   	inc    ebx
c001d5cf:	56                   	push   esi
c001d5d0:	e8 11 fc ff ff       	call   c001d1e6 <PCI::checkBus(unsigned char)>
c001d5d5:	83 c4 10             	add    esp,0x10
c001d5d8:	83 fb 08             	cmp    ebx,0x8
c001d5db:	74 12                	je     c001d5ef <PCI::detect()+0x4f>
c001d5dd:	53                   	push   ebx
c001d5de:	6a 00                	push   0x0
c001d5e0:	6a 00                	push   0x0
c001d5e2:	56                   	push   esi
c001d5e3:	e8 0a f7 ff ff       	call   c001ccf2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d5e8:	83 c4 10             	add    esp,0x10
c001d5eb:	66 40                	inc    ax
c001d5ed:	74 dc                	je     c001d5cb <PCI::detect()+0x2b>
c001d5ef:	58                   	pop    eax
c001d5f0:	5b                   	pop    ebx
c001d5f1:	5e                   	pop    esi
c001d5f2:	c3                   	ret    
c001d5f3:	90                   	nop

c001d5f4 <IDE::close(int, int, void*)>:
c001d5f4:	83 c8 ff             	or     eax,0xffffffff
c001d5f7:	c3                   	ret    

c001d5f8 <IDE::IDE()>:
c001d5f8:	83 ec 0c             	sub    esp,0xc
c001d5fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5ff:	83 ec 08             	sub    esp,0x8
c001d602:	68 18 4d 02 c0       	push   0xc0024d18
c001d607:	50                   	push   eax
c001d608:	e8 47 0c ff ff       	call   c000e254 <HardDiskController::HardDiskController(char const*)>
c001d60d:	83 c4 10             	add    esp,0x10
c001d610:	ba a8 4d 02 c0       	mov    edx,0xc0024da8
c001d615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d619:	89 10                	mov    DWORD PTR [eax],edx
c001d61b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d61f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001d626:	90                   	nop
c001d627:	83 c4 0c             	add    esp,0xc
c001d62a:	c3                   	ret    
c001d62b:	90                   	nop

c001d62c <IDE::prepareInterrupt(unsigned char)>:
c001d62c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d631:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d635:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001d63d:	c3                   	ret    

c001d63e <selectDrive(unsigned char, unsigned char)>:
c001d63e:	c3                   	ret    
c001d63f:	90                   	nop

c001d640 <IDE::getBase(unsigned char)>:
c001d640:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001d645:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d649:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001d651:	c3                   	ret    

c001d652 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001d652:	55                   	push   ebp
c001d653:	57                   	push   edi
c001d654:	56                   	push   esi
c001d655:	53                   	push   ebx
c001d656:	83 ec 1c             	sub    esp,0x1c
c001d659:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d65d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d661:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001d664:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d668:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d66c:	80 f9 03             	cmp    cl,0x3
c001d66f:	77 51                	ja     c001d6c2 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001d671:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d675:	0f b6 f2             	movzx  esi,dl
c001d678:	0f b6 db             	movzx  ebx,bl
c001d67b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001d67e:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001d682:	83 ca 80             	or     edx,0xffffff80
c001d685:	0f b6 d2             	movzx  edx,dl
c001d688:	52                   	push   edx
c001d689:	6a 0c                	push   0xc
c001d68b:	56                   	push   esi
c001d68c:	57                   	push   edi
c001d68d:	e8 c0 ff ff ff       	call   c001d652 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d692:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001d697:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d69b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001d69f:	ee                   	out    dx,al
c001d6a0:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001d6a5:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001d6a9:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001d6ad:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001d6b1:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001d6b9:	83 c4 2c             	add    esp,0x2c
c001d6bc:	5b                   	pop    ebx
c001d6bd:	5e                   	pop    esi
c001d6be:	5f                   	pop    edi
c001d6bf:	5d                   	pop    ebp
c001d6c0:	eb 90                	jmp    c001d652 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6c2:	80 fb 07             	cmp    bl,0x7
c001d6c5:	77 12                	ja     c001d6d9 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001d6c7:	0f b6 d2             	movzx  edx,dl
c001d6ca:	0f b6 db             	movzx  ebx,bl
c001d6cd:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001d6d5:	89 da                	mov    edx,ebx
c001d6d7:	eb 2f                	jmp    c001d708 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001d6d9:	80 fb 0d             	cmp    bl,0xd
c001d6dc:	77 13                	ja     c001d6f1 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001d6de:	0f b6 d2             	movzx  edx,dl
c001d6e1:	0f b6 db             	movzx  ebx,bl
c001d6e4:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001d6eb:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001d6ef:	eb 17                	jmp    c001d708 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001d6f1:	80 fb 15             	cmp    bl,0x15
c001d6f4:	77 13                	ja     c001d709 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001d6f6:	0f b6 d2             	movzx  edx,dl
c001d6f9:	0f b6 db             	movzx  ebx,bl
c001d6fc:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001d704:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001d708:	ee                   	out    dx,al
c001d709:	83 c4 1c             	add    esp,0x1c
c001d70c:	5b                   	pop    ebx
c001d70d:	5e                   	pop    esi
c001d70e:	5f                   	pop    edi
c001d70f:	5d                   	pop    ebp
c001d710:	c3                   	ret    
c001d711:	90                   	nop

c001d712 <IDE::read(unsigned char, unsigned char)>:
c001d712:	55                   	push   ebp
c001d713:	57                   	push   edi
c001d714:	56                   	push   esi
c001d715:	53                   	push   ebx
c001d716:	83 ec 1c             	sub    esp,0x1c
c001d719:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d71d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d721:	8d 43 f8             	lea    eax,[ebx-0x8]
c001d724:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d728:	3c 03                	cmp    al,0x3
c001d72a:	77 43                	ja     c001d76f <IDE::read(unsigned char, unsigned char)+0x5d>
c001d72c:	0f b6 f2             	movzx  esi,dl
c001d72f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001d732:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001d736:	83 c8 80             	or     eax,0xffffff80
c001d739:	0f b6 c0             	movzx  eax,al
c001d73c:	50                   	push   eax
c001d73d:	6a 0c                	push   0xc
c001d73f:	56                   	push   esi
c001d740:	57                   	push   edi
c001d741:	e8 0c ff ff ff       	call   c001d652 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d746:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001d74b:	0f b6 c3             	movzx  eax,bl
c001d74e:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001d752:	ec                   	in     al,dx
c001d753:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d757:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001d75c:	52                   	push   edx
c001d75d:	6a 0c                	push   0xc
c001d75f:	56                   	push   esi
c001d760:	57                   	push   edi
c001d761:	e8 ec fe ff ff       	call   c001d652 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d766:	83 c4 20             	add    esp,0x20
c001d769:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d76d:	eb 49                	jmp    c001d7b8 <IDE::read(unsigned char, unsigned char)+0xa6>
c001d76f:	80 fb 07             	cmp    bl,0x7
c001d772:	77 12                	ja     c001d786 <IDE::read(unsigned char, unsigned char)+0x74>
c001d774:	0f b6 d2             	movzx  edx,dl
c001d777:	0f b6 c3             	movzx  eax,bl
c001d77a:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001d782:	89 c2                	mov    edx,eax
c001d784:	eb 31                	jmp    c001d7b7 <IDE::read(unsigned char, unsigned char)+0xa5>
c001d786:	80 fb 0d             	cmp    bl,0xd
c001d789:	77 13                	ja     c001d79e <IDE::read(unsigned char, unsigned char)+0x8c>
c001d78b:	0f b6 d2             	movzx  edx,dl
c001d78e:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001d795:	0f b6 d3             	movzx  edx,bl
c001d798:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001d79c:	eb 19                	jmp    c001d7b7 <IDE::read(unsigned char, unsigned char)+0xa5>
c001d79e:	31 c0                	xor    eax,eax
c001d7a0:	80 fb 15             	cmp    bl,0x15
c001d7a3:	77 13                	ja     c001d7b8 <IDE::read(unsigned char, unsigned char)+0xa6>
c001d7a5:	0f b6 d2             	movzx  edx,dl
c001d7a8:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001d7b0:	0f b6 d3             	movzx  edx,bl
c001d7b3:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001d7b7:	ec                   	in     al,dx
c001d7b8:	83 c4 1c             	add    esp,0x1c
c001d7bb:	5b                   	pop    ebx
c001d7bc:	5e                   	pop    esi
c001d7bd:	5f                   	pop    edi
c001d7be:	5d                   	pop    ebp
c001d7bf:	c3                   	ret    

c001d7c0 <IDE::waitInterrupt(unsigned char)>:
c001d7c0:	55                   	push   ebp
c001d7c1:	57                   	push   edi
c001d7c2:	56                   	push   esi
c001d7c3:	53                   	push   ebx
c001d7c4:	31 db                	xor    ebx,ebx
c001d7c6:	83 ec 0c             	sub    esp,0xc
c001d7c9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d7cd:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001d7d2:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001d7da:	89 e8                	mov    eax,ebp
c001d7dc:	84 c0                	test   al,al
c001d7de:	75 30                	jne    c001d810 <IDE::waitInterrupt(unsigned char)+0x50>
c001d7e0:	50                   	push   eax
c001d7e1:	6a 0c                	push   0xc
c001d7e3:	56                   	push   esi
c001d7e4:	57                   	push   edi
c001d7e5:	e8 28 ff ff ff       	call   c001d712 <IDE::read(unsigned char, unsigned char)>
c001d7ea:	83 c4 10             	add    esp,0x10
c001d7ed:	a8 01                	test   al,0x1
c001d7ef:	75 27                	jne    c001d818 <IDE::waitInterrupt(unsigned char)+0x58>
c001d7f1:	f6 c3 04             	test   bl,0x4
c001d7f4:	75 12                	jne    c001d808 <IDE::waitInterrupt(unsigned char)+0x48>
c001d7f6:	83 fb 32             	cmp    ebx,0x32
c001d7f9:	7e 0d                	jle    c001d808 <IDE::waitInterrupt(unsigned char)+0x48>
c001d7fb:	83 ec 0c             	sub    esp,0xc
c001d7fe:	6a 64                	push   0x64
c001d800:	e8 c3 a9 ff ff       	call   c00181c8 <milliTenthSleep(unsigned int)>
c001d805:	83 c4 10             	add    esp,0x10
c001d808:	83 fb 3c             	cmp    ebx,0x3c
c001d80b:	74 0b                	je     c001d818 <IDE::waitInterrupt(unsigned char)+0x58>
c001d80d:	43                   	inc    ebx
c001d80e:	eb c2                	jmp    c001d7d2 <IDE::waitInterrupt(unsigned char)+0x12>
c001d810:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001d818:	83 c4 0c             	add    esp,0xc
c001d81b:	89 e8                	mov    eax,ebp
c001d81d:	5b                   	pop    ebx
c001d81e:	5e                   	pop    esi
c001d81f:	5f                   	pop    edi
c001d820:	5d                   	pop    ebp
c001d821:	c3                   	ret    

c001d822 <ideChannel0IRQHandler(regs*, void*)>:
c001d822:	83 ec 10             	sub    esp,0x10
c001d825:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d829:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001d830:	6a 07                	push   0x7
c001d832:	6a 00                	push   0x0
c001d834:	50                   	push   eax
c001d835:	e8 d8 fe ff ff       	call   c001d712 <IDE::read(unsigned char, unsigned char)>
c001d83a:	83 c4 1c             	add    esp,0x1c
c001d83d:	c3                   	ret    

c001d83e <ideChannel1IRQHandler(regs*, void*)>:
c001d83e:	83 ec 10             	sub    esp,0x10
c001d841:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d845:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001d84c:	6a 07                	push   0x7
c001d84e:	6a 01                	push   0x1
c001d850:	50                   	push   eax
c001d851:	e8 bc fe ff ff       	call   c001d712 <IDE::read(unsigned char, unsigned char)>
c001d856:	83 c4 1c             	add    esp,0x1c
c001d859:	c3                   	ret    

c001d85a <IDE::enableIRQs(unsigned char, bool)>:
c001d85a:	57                   	push   edi
c001d85b:	56                   	push   esi
c001d85c:	be 04 00 00 00       	mov    esi,0x4
c001d861:	53                   	push   ebx
c001d862:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001d867:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d86b:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001d870:	0f 94 c0             	sete   al
c001d873:	d1 e0                	shl    eax,1
c001d875:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001d87c:	0f b6 c0             	movzx  eax,al
c001d87f:	50                   	push   eax
c001d880:	6a 0c                	push   0xc
c001d882:	57                   	push   edi
c001d883:	53                   	push   ebx
c001d884:	e8 c9 fd ff ff       	call   c001d652 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d889:	83 c4 10             	add    esp,0x10
c001d88c:	50                   	push   eax
c001d88d:	6a 0c                	push   0xc
c001d88f:	57                   	push   edi
c001d890:	53                   	push   ebx
c001d891:	e8 7c fe ff ff       	call   c001d712 <IDE::read(unsigned char, unsigned char)>
c001d896:	83 c4 10             	add    esp,0x10
c001d899:	4e                   	dec    esi
c001d89a:	75 f0                	jne    c001d88c <IDE::enableIRQs(unsigned char, bool)+0x32>
c001d89c:	5b                   	pop    ebx
c001d89d:	5e                   	pop    esi
c001d89e:	5f                   	pop    edi
c001d89f:	c3                   	ret    

c001d8a0 <IDE::open(int, int, void*)>:
c001d8a0:	55                   	push   ebp
c001d8a1:	57                   	push   edi
c001d8a2:	56                   	push   esi
c001d8a3:	53                   	push   ebx
c001d8a4:	83 ec 1c             	sub    esp,0x1c
c001d8a7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d8ab:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001d8b4:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001d8bd:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001d8c4:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001d8cb:	0f 85 b0 02 00 00    	jne    c001db81 <IDE::open(int, int, void*)+0x2e1>
c001d8d1:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001d8d7:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001d8db:	83 e0 7f             	and    eax,0x7f
c001d8de:	3c 05                	cmp    al,0x5
c001d8e0:	74 04                	je     c001d8e6 <IDE::open(int, int, void*)+0x46>
c001d8e2:	3c 0f                	cmp    al,0xf
c001d8e4:	75 32                	jne    c001d918 <IDE::open(int, int, void*)+0x78>
c001d8e6:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001d8ec:	83 e0 fc             	and    eax,0xfffffffc
c001d8ef:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001d8f6:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001d8fc:	83 e0 fc             	and    eax,0xfffffffc
c001d8ff:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001d906:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001d90c:	83 e0 fc             	and    eax,0xfffffffc
c001d90f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001d916:	eb 14                	jmp    c001d92c <IDE::open(int, int, void*)+0x8c>
c001d918:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001d922:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001d92c:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001d933:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001d93a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d93e:	89 c6                	mov    esi,eax
c001d940:	bf f8 0c 00 00       	mov    edi,0xcf8
c001d945:	c1 e6 10             	shl    esi,0x10
c001d948:	89 e8                	mov    eax,ebp
c001d94a:	89 fa                	mov    edx,edi
c001d94c:	c1 e0 0b             	shl    eax,0xb
c001d94f:	09 f0                	or     eax,esi
c001d951:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001d958:	c1 e6 08             	shl    esi,0x8
c001d95b:	09 c6                	or     esi,eax
c001d95d:	89 f0                	mov    eax,esi
c001d95f:	0d 08 00 00 80       	or     eax,0x80000008
c001d964:	ef                   	out    dx,eax
c001d965:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001d96a:	89 ca                	mov    edx,ecx
c001d96c:	ed                   	in     eax,dx
c001d96d:	c1 e8 10             	shr    eax,0x10
c001d970:	3d ff ff 00 00       	cmp    eax,0xffff
c001d975:	0f 84 f5 00 00 00    	je     c001da70 <IDE::open(int, int, void*)+0x1d0>
c001d97b:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001d981:	89 fa                	mov    edx,edi
c001d983:	89 f0                	mov    eax,esi
c001d985:	ef                   	out    dx,eax
c001d986:	b0 fe                	mov    al,0xfe
c001d988:	89 ca                	mov    edx,ecx
c001d98a:	ee                   	out    dx,al
c001d98b:	89 f0                	mov    eax,esi
c001d98d:	89 fa                	mov    edx,edi
c001d98f:	ef                   	out    dx,eax
c001d990:	89 ca                	mov    edx,ecx
c001d992:	ed                   	in     eax,dx
c001d993:	3c fe                	cmp    al,0xfe
c001d995:	0f 85 a9 00 00 00    	jne    c001da44 <IDE::open(int, int, void*)+0x1a4>
c001d99b:	8b 15 68 61 02 c0    	mov    edx,DWORD PTR ds:0xc0026168
c001d9a1:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001d9a8:	74 33                	je     c001d9dd <IDE::open(int, int, void*)+0x13d>
c001d9aa:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001d9b0:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001d9b4:	40                   	inc    eax
c001d9b5:	83 ec 0c             	sub    esp,0xc
c001d9b8:	0f b6 c0             	movzx  eax,al
c001d9bb:	50                   	push   eax
c001d9bc:	55                   	push   ebp
c001d9bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d9c1:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001d9c7:	51                   	push   ecx
c001d9c8:	e8 0b 44 ff ff       	call   c0011dd8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001d9cd:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001d9d2:	83 c4 1c             	add    esp,0x1c
c001d9d5:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001d9db:	eb 0a                	jmp    c001d9e7 <IDE::open(int, int, void*)+0x147>
c001d9dd:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001d9e7:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001d9ee:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001d9f5:	c1 e1 10             	shl    ecx,0x10
c001d9f8:	c1 e0 08             	shl    eax,0x8
c001d9fb:	bf f8 0c 00 00       	mov    edi,0xcf8
c001da00:	09 c1                	or     ecx,eax
c001da02:	89 fa                	mov    edx,edi
c001da04:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001da0b:	c1 e0 0b             	shl    eax,0xb
c001da0e:	09 c1                	or     ecx,eax
c001da10:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001da16:	89 c8                	mov    eax,ecx
c001da18:	ef                   	out    dx,eax
c001da19:	be fc 0c 00 00       	mov    esi,0xcfc
c001da1e:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001da24:	89 f2                	mov    edx,esi
c001da26:	ee                   	out    dx,al
c001da27:	89 c8                	mov    eax,ecx
c001da29:	89 fa                	mov    edx,edi
c001da2b:	ef                   	out    dx,eax
c001da2c:	89 f2                	mov    edx,esi
c001da2e:	ed                   	in     eax,dx
c001da2f:	0f b6 c0             	movzx  eax,al
c001da32:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001da38:	74 46                	je     c001da80 <IDE::open(int, int, void*)+0x1e0>
c001da3a:	83 ec 0c             	sub    esp,0xc
c001da3d:	68 30 4d 02 c0       	push   0xc0024d30
c001da42:	eb 34                	jmp    c001da78 <IDE::open(int, int, void*)+0x1d8>
c001da44:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001da4d:	75 17                	jne    c001da66 <IDE::open(int, int, void*)+0x1c6>
c001da4f:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001da54:	74 07                	je     c001da5d <IDE::open(int, int, void*)+0x1bd>
c001da56:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001da5b:	75 09                	jne    c001da66 <IDE::open(int, int, void*)+0x1c6>
c001da5d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001da64:	eb 1a                	jmp    c001da80 <IDE::open(int, int, void*)+0x1e0>
c001da66:	83 ec 0c             	sub    esp,0xc
c001da69:	68 38 4d 02 c0       	push   0xc0024d38
c001da6e:	eb 08                	jmp    c001da78 <IDE::open(int, int, void*)+0x1d8>
c001da70:	83 ec 0c             	sub    esp,0xc
c001da73:	68 69 4d 02 c0       	push   0xc0024d69
c001da78:	e8 82 68 ff ff       	call   c00142ff <Krnl::panic(char const*)>
c001da7d:	83 c4 10             	add    esp,0x10
c001da80:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001da87:	79 1a                	jns    c001daa3 <IDE::open(int, int, void*)+0x203>
c001da89:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001da8f:	83 e0 fc             	and    eax,0xfffffffc
c001da92:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001da99:	83 c0 08             	add    eax,0x8
c001da9c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001daa3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001daa9:	89 c2                	mov    edx,eax
c001daab:	83 e2 0f             	and    edx,0xf
c001daae:	66 83 fa 08          	cmp    dx,0x8
c001dab2:	75 0a                	jne    c001dabe <IDE::open(int, int, void*)+0x21e>
c001dab4:	83 e8 02             	sub    eax,0x2
c001dab7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001dabe:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001dac4:	89 c2                	mov    edx,eax
c001dac6:	83 e2 0f             	and    edx,0xf
c001dac9:	66 83 fa 08          	cmp    dx,0x8
c001dacd:	75 0a                	jne    c001dad9 <IDE::open(int, int, void*)+0x239>
c001dacf:	83 e8 02             	sub    eax,0x2
c001dad2:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001dad9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001dae0:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001dae7:	89 d0                	mov    eax,edx
c001dae9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001daec:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001daf0:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001daf4:	8d 4a 01             	lea    ecx,[edx+0x1]
c001daf7:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001dafc:	0f b6 c9             	movzx  ecx,cl
c001daff:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001db06:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001db09:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001db0d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001db11:	8d 50 02             	lea    edx,[eax+0x2]
c001db14:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001db19:	0f b6 d2             	movzx  edx,dl
c001db1c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001db22:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001db25:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001db29:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001db2d:	8d 48 03             	lea    ecx,[eax+0x3]
c001db30:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001db35:	0f b6 c9             	movzx  ecx,cl
c001db38:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001db3e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001db41:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001db45:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001db49:	8d 50 04             	lea    edx,[eax+0x4]
c001db4c:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001db52:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001db57:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001db5e:	66 85 f6             	test   si,si
c001db61:	74 5b                	je     c001dbbe <IDE::open(int, int, void*)+0x31e>
c001db63:	0f b6 d2             	movzx  edx,dl
c001db66:	83 c0 05             	add    eax,0x5
c001db69:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001db6c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001db70:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001db74:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001db7a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001db7f:	eb 3d                	jmp    c001dbbe <IDE::open(int, int, void*)+0x31e>
c001db81:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001db87:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001db8e:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001db95:	66 05 06 02          	add    ax,0x206
c001db99:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001dba0:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001dba7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001dbae:	66 05 06 02          	add    ax,0x206
c001dbb2:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001dbb9:	e9 e5 fe ff ff       	jmp    c001daa3 <IDE::open(int, int, void*)+0x203>
c001dbbe:	50                   	push   eax
c001dbbf:	50                   	push   eax
c001dbc0:	6a 00                	push   0x0
c001dbc2:	53                   	push   ebx
c001dbc3:	e8 64 fa ff ff       	call   c001d62c <IDE::prepareInterrupt(unsigned char)>
c001dbc8:	5a                   	pop    edx
c001dbc9:	59                   	pop    ecx
c001dbca:	6a 01                	push   0x1
c001dbcc:	53                   	push   ebx
c001dbcd:	e8 5a fa ff ff       	call   c001d62c <IDE::prepareInterrupt(unsigned char)>
c001dbd2:	83 c4 0c             	add    esp,0xc
c001dbd5:	6a 00                	push   0x0
c001dbd7:	6a 00                	push   0x0
c001dbd9:	53                   	push   ebx
c001dbda:	e8 7b fc ff ff       	call   c001d85a <IDE::enableIRQs(unsigned char, bool)>
c001dbdf:	83 c4 0c             	add    esp,0xc
c001dbe2:	6a 00                	push   0x0
c001dbe4:	6a 01                	push   0x1
c001dbe6:	53                   	push   ebx
c001dbe7:	e8 6e fc ff ff       	call   c001d85a <IDE::enableIRQs(unsigned char, bool)>
c001dbec:	83 c4 10             	add    esp,0x10
c001dbef:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001dbf6:	74 34                	je     c001dc2c <IDE::open(int, int, void*)+0x38c>
c001dbf8:	83 ec 0c             	sub    esp,0xc
c001dbfb:	53                   	push   ebx
c001dbfc:	6a 01                	push   0x1
c001dbfe:	68 22 d8 01 c0       	push   0xc001d822
c001dc03:	6a 0e                	push   0xe
c001dc05:	53                   	push   ebx
c001dc06:	e8 13 02 ff ff       	call   c000de1e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dc0b:	83 c4 14             	add    esp,0x14
c001dc0e:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001dc14:	53                   	push   ebx
c001dc15:	6a 01                	push   0x1
c001dc17:	68 3e d8 01 c0       	push   0xc001d83e
c001dc1c:	6a 0f                	push   0xf
c001dc1e:	53                   	push   ebx
c001dc1f:	e8 fa 01 ff ff       	call   c000de1e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dc24:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001dc2a:	eb 38                	jmp    c001dc64 <IDE::open(int, int, void*)+0x3c4>
c001dc2c:	83 ec 0c             	sub    esp,0xc
c001dc2f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001dc39:	53                   	push   ebx
c001dc3a:	6a 00                	push   0x0
c001dc3c:	68 22 d8 01 c0       	push   0xc001d822
c001dc41:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001dc47:	53                   	push   ebx
c001dc48:	e8 d1 01 ff ff       	call   c000de1e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dc4d:	83 c4 14             	add    esp,0x14
c001dc50:	53                   	push   ebx
c001dc51:	6a 00                	push   0x0
c001dc53:	68 3e d8 01 c0       	push   0xc001d83e
c001dc58:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001dc5e:	53                   	push   ebx
c001dc5f:	e8 ba 01 ff ff       	call   c000de1e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dc64:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dc66:	83 c4 20             	add    esp,0x20
c001dc69:	83 ec 0c             	sub    esp,0xc
c001dc6c:	53                   	push   ebx
c001dc6d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001dc70:	83 c4 0c             	add    esp,0xc
c001dc73:	6a 07                	push   0x7
c001dc75:	6a 00                	push   0x0
c001dc77:	53                   	push   ebx
c001dc78:	e8 95 fa ff ff       	call   c001d712 <IDE::read(unsigned char, unsigned char)>
c001dc7d:	83 c4 0c             	add    esp,0xc
c001dc80:	6a 07                	push   0x7
c001dc82:	6a 01                	push   0x1
c001dc84:	53                   	push   ebx
c001dc85:	e8 88 fa ff ff       	call   c001d712 <IDE::read(unsigned char, unsigned char)>
c001dc8a:	83 c4 0c             	add    esp,0xc
c001dc8d:	6a 01                	push   0x1
c001dc8f:	6a 00                	push   0x0
c001dc91:	53                   	push   ebx
c001dc92:	e8 c3 fb ff ff       	call   c001d85a <IDE::enableIRQs(unsigned char, bool)>
c001dc97:	83 c4 0c             	add    esp,0xc
c001dc9a:	6a 01                	push   0x1
c001dc9c:	6a 01                	push   0x1
c001dc9e:	53                   	push   ebx
c001dc9f:	e8 b6 fb ff ff       	call   c001d85a <IDE::enableIRQs(unsigned char, bool)>
c001dca4:	83 c4 2c             	add    esp,0x2c
c001dca7:	31 c0                	xor    eax,eax
c001dca9:	5b                   	pop    ebx
c001dcaa:	5e                   	pop    esi
c001dcab:	5f                   	pop    edi
c001dcac:	5d                   	pop    ebp
c001dcad:	c3                   	ret    

c001dcae <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001dcae:	55                   	push   ebp
c001dcaf:	57                   	push   edi
c001dcb0:	56                   	push   esi
c001dcb1:	53                   	push   ebx
c001dcb2:	83 ec 1c             	sub    esp,0x1c
c001dcb5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dcb9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001dcbd:	8d 50 f8             	lea    edx,[eax-0x8]
c001dcc0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dcc4:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001dcc8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001dccc:	80 fa 03             	cmp    dl,0x3
c001dccf:	77 5d                	ja     c001dd2e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001dcd1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dcd5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dcd9:	0f b6 db             	movzx  ebx,bl
c001dcdc:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001dcdf:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001dce3:	83 ca 80             	or     edx,0xffffff80
c001dce6:	0f b6 d2             	movzx  edx,dl
c001dce9:	52                   	push   edx
c001dcea:	6a 0c                	push   0xc
c001dcec:	53                   	push   ebx
c001dced:	56                   	push   esi
c001dcee:	e8 5f f9 ff ff       	call   c001d652 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dcf3:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001dcf8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dcfc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dd00:	0f b6 c0             	movzx  eax,al
c001dd03:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001dd07:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001dd09:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001dd0e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001dd12:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001dd16:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dd1a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001dd22:	83 c4 2c             	add    esp,0x2c
c001dd25:	5b                   	pop    ebx
c001dd26:	5e                   	pop    esi
c001dd27:	5f                   	pop    edi
c001dd28:	5d                   	pop    ebp
c001dd29:	e9 24 f9 ff ff       	jmp    c001d652 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd2e:	3c 07                	cmp    al,0x7
c001dd30:	77 10                	ja     c001dd42 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001dd32:	0f b6 db             	movzx  ebx,bl
c001dd35:	0f b6 d0             	movzx  edx,al
c001dd38:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001dd40:	eb 2d                	jmp    c001dd6f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001dd42:	3c 0d                	cmp    al,0xd
c001dd44:	77 13                	ja     c001dd59 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001dd46:	0f b6 db             	movzx  ebx,bl
c001dd49:	0f b6 c0             	movzx  eax,al
c001dd4c:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001dd53:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001dd57:	eb 16                	jmp    c001dd6f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001dd59:	3c 15                	cmp    al,0x15
c001dd5b:	77 14                	ja     c001dd71 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001dd5d:	0f b6 db             	movzx  ebx,bl
c001dd60:	0f b6 c0             	movzx  eax,al
c001dd63:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001dd6b:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001dd6f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001dd71:	83 c4 1c             	add    esp,0x1c
c001dd74:	5b                   	pop    ebx
c001dd75:	5e                   	pop    esi
c001dd76:	5f                   	pop    edi
c001dd77:	5d                   	pop    ebp
c001dd78:	c3                   	ret    
c001dd79:	90                   	nop

c001dd7a <IDE::detect()>:
c001dd7a:	55                   	push   ebp
c001dd7b:	57                   	push   edi
c001dd7c:	56                   	push   esi
c001dd7d:	53                   	push   ebx
c001dd7e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001dd84:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001dd8b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001dd92:	0f 85 97 02 00 00    	jne    c001e02f <IDE::detect()+0x2b5>
c001dd98:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001dd9f:	31 f6                	xor    esi,esi
c001dda1:	31 ed                	xor    ebp,ebp
c001dda3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ddab:	89 e8                	mov    eax,ebp
c001ddad:	c1 e0 06             	shl    eax,0x6
c001ddb0:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001ddb8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ddbc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ddc0:	c1 e0 04             	shl    eax,0x4
c001ddc3:	83 c8 a0             	or     eax,0xffffffa0
c001ddc6:	0f b6 c0             	movzx  eax,al
c001ddc9:	50                   	push   eax
c001ddca:	6a 06                	push   0x6
c001ddcc:	56                   	push   esi
c001ddcd:	53                   	push   ebx
c001ddce:	e8 7f f8 ff ff       	call   c001d652 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ddd3:	83 c4 0c             	add    esp,0xc
c001ddd6:	6a 0c                	push   0xc
c001ddd8:	56                   	push   esi
c001ddd9:	53                   	push   ebx
c001ddda:	e8 33 f9 ff ff       	call   c001d712 <IDE::read(unsigned char, unsigned char)>
c001dddf:	83 c4 0c             	add    esp,0xc
c001dde2:	6a 0c                	push   0xc
c001dde4:	56                   	push   esi
c001dde5:	53                   	push   ebx
c001dde6:	e8 27 f9 ff ff       	call   c001d712 <IDE::read(unsigned char, unsigned char)>
c001ddeb:	83 c4 0c             	add    esp,0xc
c001ddee:	6a 0c                	push   0xc
c001ddf0:	56                   	push   esi
c001ddf1:	53                   	push   ebx
c001ddf2:	e8 1b f9 ff ff       	call   c001d712 <IDE::read(unsigned char, unsigned char)>
c001ddf7:	83 c4 0c             	add    esp,0xc
c001ddfa:	6a 0c                	push   0xc
c001ddfc:	56                   	push   esi
c001ddfd:	53                   	push   ebx
c001ddfe:	e8 0f f9 ff ff       	call   c001d712 <IDE::read(unsigned char, unsigned char)>
c001de03:	68 ec 00 00 00       	push   0xec
c001de08:	6a 07                	push   0x7
c001de0a:	56                   	push   esi
c001de0b:	53                   	push   ebx
c001de0c:	e8 41 f8 ff ff       	call   c001d652 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de11:	83 c4 1c             	add    esp,0x1c
c001de14:	6a 0c                	push   0xc
c001de16:	56                   	push   esi
c001de17:	53                   	push   ebx
c001de18:	e8 f5 f8 ff ff       	call   c001d712 <IDE::read(unsigned char, unsigned char)>
c001de1d:	83 c4 0c             	add    esp,0xc
c001de20:	6a 0c                	push   0xc
c001de22:	56                   	push   esi
c001de23:	53                   	push   ebx
c001de24:	e8 e9 f8 ff ff       	call   c001d712 <IDE::read(unsigned char, unsigned char)>
c001de29:	83 c4 0c             	add    esp,0xc
c001de2c:	6a 0c                	push   0xc
c001de2e:	56                   	push   esi
c001de2f:	53                   	push   ebx
c001de30:	e8 dd f8 ff ff       	call   c001d712 <IDE::read(unsigned char, unsigned char)>
c001de35:	83 c4 0c             	add    esp,0xc
c001de38:	6a 0c                	push   0xc
c001de3a:	56                   	push   esi
c001de3b:	53                   	push   ebx
c001de3c:	e8 d1 f8 ff ff       	call   c001d712 <IDE::read(unsigned char, unsigned char)>
c001de41:	83 c4 0c             	add    esp,0xc
c001de44:	6a 0c                	push   0xc
c001de46:	56                   	push   esi
c001de47:	53                   	push   ebx
c001de48:	e8 c5 f8 ff ff       	call   c001d712 <IDE::read(unsigned char, unsigned char)>
c001de4d:	83 c4 10             	add    esp,0x10
c001de50:	84 c0                	test   al,al
c001de52:	0f 84 5f 01 00 00    	je     c001dfb7 <IDE::detect()+0x23d>
c001de58:	31 ff                	xor    edi,edi
c001de5a:	50                   	push   eax
c001de5b:	6a 0c                	push   0xc
c001de5d:	56                   	push   esi
c001de5e:	53                   	push   ebx
c001de5f:	e8 ae f8 ff ff       	call   c001d712 <IDE::read(unsigned char, unsigned char)>
c001de64:	83 c4 10             	add    esp,0x10
c001de67:	a8 01                	test   al,0x1
c001de69:	0f 85 69 01 00 00    	jne    c001dfd8 <IDE::detect()+0x25e>
c001de6f:	84 c0                	test   al,al
c001de71:	78 04                	js     c001de77 <IDE::detect()+0xfd>
c001de73:	a8 08                	test   al,0x8
c001de75:	75 23                	jne    c001de9a <IDE::detect()+0x120>
c001de77:	47                   	inc    edi
c001de78:	81 ff 17 01 00 00    	cmp    edi,0x117
c001de7e:	7e da                	jle    c001de5a <IDE::detect()+0xe0>
c001de80:	83 ec 0c             	sub    esp,0xc
c001de83:	6a 32                	push   0x32
c001de85:	e8 3e a3 ff ff       	call   c00181c8 <milliTenthSleep(unsigned int)>
c001de8a:	83 c4 10             	add    esp,0x10
c001de8d:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001de93:	75 c5                	jne    c001de5a <IDE::detect()+0xe0>
c001de95:	e9 3e 01 00 00       	jmp    c001dfd8 <IDE::detect()+0x25e>
c001de9a:	31 c9                	xor    ecx,ecx
c001de9c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001dea0:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001dea4:	83 ec 0c             	sub    esp,0xc
c001dea7:	68 80 00 00 00       	push   0x80
c001deac:	57                   	push   edi
c001dead:	6a 00                	push   0x0
c001deaf:	56                   	push   esi
c001deb0:	53                   	push   ebx
c001deb1:	e8 f8 fd ff ff       	call   c001dcae <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001deb6:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001debb:	89 e8                	mov    eax,ebp
c001debd:	89 d1                	mov    ecx,edx
c001debf:	c1 e0 06             	shl    eax,0x6
c001dec2:	01 d8                	add    eax,ebx
c001dec4:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001decb:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001ded2:	89 f2                	mov    edx,esi
c001ded4:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001deda:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001dede:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001dee4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dee8:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001deef:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001def7:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001defe:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001df06:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001df0c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001df13:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001df19:	8d 54 24 58          	lea    edx,[esp+0x58]
c001df1d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001df21:	83 c4 20             	add    esp,0x20
c001df24:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001df27:	83 c0 02             	add    eax,0x2
c001df2a:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001df30:	83 c7 02             	add    edi,0x2
c001df33:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001df36:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001df3c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001df40:	75 e2                	jne    c001df24 <IDE::detect()+0x1aa>
c001df42:	89 e8                	mov    eax,ebp
c001df44:	c1 e0 06             	shl    eax,0x6
c001df47:	01 d8                	add    eax,ebx
c001df49:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001df4f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001df56:	66 c1 ea 09          	shr    dx,0x9
c001df5a:	83 e2 01             	and    edx,0x1
c001df5d:	84 c9                	test   cl,cl
c001df5f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001df65:	75 22                	jne    c001df89 <IDE::detect()+0x20f>
c001df67:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001df6e:	74 46                	je     c001dfb6 <IDE::detect()+0x23c>
c001df70:	83 ec 0c             	sub    esp,0xc
c001df73:	68 7c 01 00 00       	push   0x17c
c001df78:	e8 46 ba fe ff       	call   c00099c3 <malloc>
c001df7d:	89 c7                	mov    edi,eax
c001df7f:	89 04 24             	mov    DWORD PTR [esp],eax
c001df82:	e8 13 05 00 00       	call   c001e49a <ATA::ATA()>
c001df87:	eb 17                	jmp    c001dfa0 <IDE::detect()+0x226>
c001df89:	83 ec 0c             	sub    esp,0xc
c001df8c:	68 80 01 00 00       	push   0x180
c001df91:	e8 2d ba fe ff       	call   c00099c3 <malloc>
c001df96:	89 c7                	mov    edi,eax
c001df98:	89 04 24             	mov    DWORD PTR [esp],eax
c001df9b:	e8 82 0b 00 00       	call   c001eb22 <ATAPI::ATAPI()>
c001dfa0:	5a                   	pop    edx
c001dfa1:	59                   	pop    ecx
c001dfa2:	57                   	push   edi
c001dfa3:	53                   	push   ebx
c001dfa4:	e8 fd fe fe ff       	call   c000dea6 <Device::addChild(Device*)>
c001dfa9:	8b 07                	mov    eax,DWORD PTR [edi]
c001dfab:	53                   	push   ebx
c001dfac:	55                   	push   ebp
c001dfad:	6a 00                	push   0x0
c001dfaf:	57                   	push   edi
c001dfb0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dfb3:	83 c4 20             	add    esp,0x20
c001dfb6:	45                   	inc    ebp
c001dfb7:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001dfbc:	74 0d                	je     c001dfcb <IDE::detect()+0x251>
c001dfbe:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001dfc6:	e9 e0 fd ff ff       	jmp    c001ddab <IDE::detect()+0x31>
c001dfcb:	4e                   	dec    esi
c001dfcc:	74 61                	je     c001e02f <IDE::detect()+0x2b5>
c001dfce:	be 01 00 00 00       	mov    esi,0x1
c001dfd3:	e9 cb fd ff ff       	jmp    c001dda3 <IDE::detect()+0x29>
c001dfd8:	50                   	push   eax
c001dfd9:	6a 04                	push   0x4
c001dfdb:	56                   	push   esi
c001dfdc:	53                   	push   ebx
c001dfdd:	e8 30 f7 ff ff       	call   c001d712 <IDE::read(unsigned char, unsigned char)>
c001dfe2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001dfe6:	83 c4 0c             	add    esp,0xc
c001dfe9:	6a 05                	push   0x5
c001dfeb:	56                   	push   esi
c001dfec:	53                   	push   ebx
c001dfed:	e8 20 f7 ff ff       	call   c001d712 <IDE::read(unsigned char, unsigned char)>
c001dff2:	83 c4 10             	add    esp,0x10
c001dff5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001dff9:	80 fa 14             	cmp    dl,0x14
c001dffc:	75 04                	jne    c001e002 <IDE::detect()+0x288>
c001dffe:	3c eb                	cmp    al,0xeb
c001e000:	eb 07                	jmp    c001e009 <IDE::detect()+0x28f>
c001e002:	3c 96                	cmp    al,0x96
c001e004:	75 b1                	jne    c001dfb7 <IDE::detect()+0x23d>
c001e006:	80 fa 69             	cmp    dl,0x69
c001e009:	75 ac                	jne    c001dfb7 <IDE::detect()+0x23d>
c001e00b:	68 a1 00 00 00       	push   0xa1
c001e010:	6a 07                	push   0x7
c001e012:	56                   	push   esi
c001e013:	53                   	push   ebx
c001e014:	e8 39 f6 ff ff       	call   c001d652 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e019:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001e020:	e8 a3 a1 ff ff       	call   c00181c8 <milliTenthSleep(unsigned int)>
c001e025:	83 c4 10             	add    esp,0x10
c001e028:	b1 01                	mov    cl,0x1
c001e02a:	e9 6d fe ff ff       	jmp    c001de9c <IDE::detect()+0x122>
c001e02f:	81 c4 1c 02 00 00    	add    esp,0x21c
c001e035:	5b                   	pop    ebx
c001e036:	5e                   	pop    esi
c001e037:	5f                   	pop    edi
c001e038:	5d                   	pop    ebp
c001e039:	c3                   	ret    

c001e03a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001e03a:	55                   	push   ebp
c001e03b:	57                   	push   edi
c001e03c:	56                   	push   esi
c001e03d:	53                   	push   ebx
c001e03e:	83 ec 1c             	sub    esp,0x1c
c001e041:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e045:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e049:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e04d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e051:	88 c3                	mov    bl,al
c001e053:	84 c0                	test   al,al
c001e055:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e059:	0f 84 81 00 00 00    	je     c001e0e0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e05f:	83 ec 0c             	sub    esp,0xc
c001e062:	68 93 4d 02 c0       	push   0xc0024d93
c001e067:	e8 f3 e9 fe ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001e06c:	83 c4 10             	add    esp,0x10
c001e06f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e073:	3c 01                	cmp    al,0x1
c001e075:	74 63                	je     c001e0da <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001e077:	3c 02                	cmp    al,0x2
c001e079:	75 53                	jne    c001e0ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001e07b:	d1 e6                	shl    esi,1
c001e07d:	09 ee                	or     esi,ebp
c001e07f:	50                   	push   eax
c001e080:	89 f0                	mov    eax,esi
c001e082:	6a 01                	push   0x1
c001e084:	0f b6 f0             	movzx  esi,al
c001e087:	c1 e6 06             	shl    esi,0x6
c001e08a:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001e092:	50                   	push   eax
c001e093:	57                   	push   edi
c001e094:	e8 79 f6 ff ff       	call   c001d712 <IDE::read(unsigned char, unsigned char)>
c001e099:	83 c4 10             	add    esp,0x10
c001e09c:	a8 01                	test   al,0x1
c001e09e:	74 02                	je     c001e0a2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001e0a0:	b3 07                	mov    bl,0x7
c001e0a2:	a8 02                	test   al,0x2
c001e0a4:	74 02                	je     c001e0a8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001e0a6:	b3 03                	mov    bl,0x3
c001e0a8:	a8 04                	test   al,0x4
c001e0aa:	74 02                	je     c001e0ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001e0ac:	b3 14                	mov    bl,0x14
c001e0ae:	a8 08                	test   al,0x8
c001e0b0:	74 02                	je     c001e0b4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001e0b2:	b3 03                	mov    bl,0x3
c001e0b4:	a8 10                	test   al,0x10
c001e0b6:	74 02                	je     c001e0ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001e0b8:	b3 15                	mov    bl,0x15
c001e0ba:	a8 20                	test   al,0x20
c001e0bc:	74 02                	je     c001e0c0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001e0be:	b3 03                	mov    bl,0x3
c001e0c0:	a8 40                	test   al,0x40
c001e0c2:	74 02                	je     c001e0c6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001e0c4:	b3 16                	mov    bl,0x16
c001e0c6:	84 c0                	test   al,al
c001e0c8:	79 16                	jns    c001e0e0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e0ca:	b3 0d                	mov    bl,0xd
c001e0cc:	eb 12                	jmp    c001e0e0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e0ce:	3c 03                	cmp    al,0x3
c001e0d0:	74 0c                	je     c001e0de <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001e0d2:	3c 04                	cmp    al,0x4
c001e0d4:	75 0a                	jne    c001e0e0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e0d6:	b3 08                	mov    bl,0x8
c001e0d8:	eb 06                	jmp    c001e0e0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e0da:	b3 13                	mov    bl,0x13
c001e0dc:	eb 02                	jmp    c001e0e0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e0de:	b3 17                	mov    bl,0x17
c001e0e0:	83 c4 1c             	add    esp,0x1c
c001e0e3:	88 d8                	mov    al,bl
c001e0e5:	5b                   	pop    ebx
c001e0e6:	5e                   	pop    esi
c001e0e7:	5f                   	pop    edi
c001e0e8:	5d                   	pop    ebp
c001e0e9:	c3                   	ret    

c001e0ea <IDE::polling(unsigned char, unsigned int)>:
c001e0ea:	57                   	push   edi
c001e0eb:	56                   	push   esi
c001e0ec:	53                   	push   ebx
c001e0ed:	bb 04 00 00 00       	mov    ebx,0x4
c001e0f2:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001e0f6:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e0fb:	52                   	push   edx
c001e0fc:	6a 0c                	push   0xc
c001e0fe:	56                   	push   esi
c001e0ff:	57                   	push   edi
c001e100:	e8 0d f6 ff ff       	call   c001d712 <IDE::read(unsigned char, unsigned char)>
c001e105:	83 c4 10             	add    esp,0x10
c001e108:	4b                   	dec    ebx
c001e109:	75 f0                	jne    c001e0fb <IDE::polling(unsigned char, unsigned int)+0x11>
c001e10b:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e110:	50                   	push   eax
c001e111:	6a 0c                	push   0xc
c001e113:	56                   	push   esi
c001e114:	57                   	push   edi
c001e115:	e8 f8 f5 ff ff       	call   c001d712 <IDE::read(unsigned char, unsigned char)>
c001e11a:	83 c4 10             	add    esp,0x10
c001e11d:	a8 01                	test   al,0x1
c001e11f:	75 17                	jne    c001e138 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e121:	a8 20                	test   al,0x20
c001e123:	75 0f                	jne    c001e134 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001e125:	4b                   	dec    ebx
c001e126:	74 10                	je     c001e138 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e128:	84 c0                	test   al,al
c001e12a:	78 e4                	js     c001e110 <IDE::polling(unsigned char, unsigned int)+0x26>
c001e12c:	a8 08                	test   al,0x8
c001e12e:	74 e0                	je     c001e110 <IDE::polling(unsigned char, unsigned int)+0x26>
c001e130:	31 c0                	xor    eax,eax
c001e132:	eb 06                	jmp    c001e13a <IDE::polling(unsigned char, unsigned int)+0x50>
c001e134:	b0 01                	mov    al,0x1
c001e136:	eb 02                	jmp    c001e13a <IDE::polling(unsigned char, unsigned int)+0x50>
c001e138:	b0 02                	mov    al,0x2
c001e13a:	5b                   	pop    ebx
c001e13b:	5e                   	pop    esi
c001e13c:	5f                   	pop    edi
c001e13d:	c3                   	ret    

c001e13e <SATABus::close(int, int, void*)>:
c001e13e:	31 c0                	xor    eax,eax
c001e140:	c3                   	ret    
c001e141:	90                   	nop

c001e142 <SATABus::detect()>:
c001e142:	c3                   	ret    
c001e143:	90                   	nop

c001e144 <SATABus::SATABus()>:
c001e144:	83 ec 0c             	sub    esp,0xc
c001e147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e14b:	83 ec 08             	sub    esp,0x8
c001e14e:	68 cc 4d 02 c0       	push   0xc0024dcc
c001e153:	50                   	push   eax
c001e154:	e8 fb 00 ff ff       	call   c000e254 <HardDiskController::HardDiskController(char const*)>
c001e159:	83 c4 10             	add    esp,0x10
c001e15c:	ba 20 4e 02 c0       	mov    edx,0xc0024e20
c001e161:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e165:	89 10                	mov    DWORD PTR [eax],edx
c001e167:	83 ec 0c             	sub    esp,0xc
c001e16a:	6a 50                	push   0x50
c001e16c:	e8 a1 bd fe ff       	call   c0009f12 <Phys::allocateContiguousPages(int)>
c001e171:	83 c4 10             	add    esp,0x10
c001e174:	89 c2                	mov    edx,eax
c001e176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e17a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e180:	83 ec 0c             	sub    esp,0xc
c001e183:	6a 50                	push   0x50
c001e185:	e8 af d5 fe ff       	call   c000b739 <Virt::allocateKernelVirtualPages(int)>
c001e18a:	83 c4 10             	add    esp,0x10
c001e18d:	89 c2                	mov    edx,eax
c001e18f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e193:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e199:	a1 90 62 02 c0       	mov    eax,ds:0xc0026290
c001e19e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e1a2:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001e1a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e1ac:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e1b2:	83 ec 0c             	sub    esp,0xc
c001e1b5:	6a 03                	push   0x3
c001e1b7:	6a 50                	push   0x50
c001e1b9:	51                   	push   ecx
c001e1ba:	52                   	push   edx
c001e1bb:	50                   	push   eax
c001e1bc:	e8 15 df fe ff       	call   c000c0d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e1c1:	83 c4 20             	add    esp,0x20
c001e1c4:	90                   	nop
c001e1c5:	83 c4 0c             	add    esp,0xc
c001e1c8:	c3                   	ret    
c001e1c9:	90                   	nop

c001e1ca <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001e1ca:	83 ec 0c             	sub    esp,0xc
c001e1cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1d1:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001e1d4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001e1d7:	09 c2                	or     edx,eax
c001e1d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1dd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e1e3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e1e5:	31 c0                	xor    eax,eax
c001e1e7:	c1 e9 08             	shr    ecx,0x8
c001e1ea:	83 e1 0f             	and    ecx,0xf
c001e1ed:	39 c8                	cmp    eax,ecx
c001e1ef:	74 0a                	je     c001e1fb <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001e1f1:	f6 c2 01             	test   dl,0x1
c001e1f4:	74 18                	je     c001e20e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c001e1f6:	d1 ea                	shr    edx,1
c001e1f8:	40                   	inc    eax
c001e1f9:	eb f2                	jmp    c001e1ed <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c001e1fb:	83 ec 0c             	sub    esp,0xc
c001e1fe:	68 f0 4d 02 c0       	push   0xc0024df0
c001e203:	e8 f7 60 ff ff       	call   c00142ff <Krnl::panic(char const*)>
c001e208:	83 c4 10             	add    esp,0x10
c001e20b:	83 c8 ff             	or     eax,0xffffffff
c001e20e:	83 c4 0c             	add    esp,0xc
c001e211:	c3                   	ret    

c001e212 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001e212:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e216:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001e219:	89 c2                	mov    edx,eax
c001e21b:	c1 ea 08             	shr    edx,0x8
c001e21e:	83 e2 0f             	and    edx,0xf
c001e221:	fe ca                	dec    dl
c001e223:	75 31                	jne    c001e256 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e225:	83 e0 0f             	and    eax,0xf
c001e228:	3c 03                	cmp    al,0x3
c001e22a:	75 2a                	jne    c001e256 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e22c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001e22f:	b8 02 00 00 00       	mov    eax,0x2
c001e234:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001e23a:	74 1c                	je     c001e258 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e23c:	b8 04 00 00 00       	mov    eax,0x4
c001e241:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001e247:	74 0f                	je     c001e258 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e249:	31 c0                	xor    eax,eax
c001e24b:	83 fa 03             	cmp    edx,0x3
c001e24e:	0f 94 c0             	sete   al
c001e251:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001e255:	c3                   	ret    
c001e256:	31 c0                	xor    eax,eax
c001e258:	c3                   	ret    
c001e259:	90                   	nop

c001e25a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001e25a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e25e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e261:	0f ba e2 0f          	bt     edx,0xf
c001e265:	72 f7                	jb     c001e25e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001e267:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e26a:	83 ca 10             	or     edx,0x10
c001e26d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e270:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e273:	83 ca 01             	or     edx,0x1
c001e276:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e279:	c3                   	ret    

c001e27a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001e27a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e27e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e281:	83 e2 fe             	and    edx,0xfffffffe
c001e284:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e287:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e28a:	83 e2 ef             	and    edx,0xffffffef
c001e28d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e290:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e293:	0f ba e2 0e          	bt     edx,0xe
c001e297:	72 f7                	jb     c001e290 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e299:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e29c:	0f ba e2 0f          	bt     edx,0xf
c001e2a0:	72 ee                	jb     c001e290 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e2a2:	c3                   	ret    
c001e2a3:	90                   	nop

c001e2a4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001e2a4:	55                   	push   ebp
c001e2a5:	57                   	push   edi
c001e2a6:	56                   	push   esi
c001e2a7:	53                   	push   ebx
c001e2a8:	83 ec 1c             	sub    esp,0x1c
c001e2ab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e2af:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e2b3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e2b7:	53                   	push   ebx
c001e2b8:	89 fd                	mov    ebp,edi
c001e2ba:	56                   	push   esi
c001e2bb:	c1 e5 0a             	shl    ebp,0xa
c001e2be:	e8 b7 ff ff ff       	call   c001e27a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e2c3:	83 ec 0c             	sub    esp,0xc
c001e2c6:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001e2cc:	01 e8                	add    eax,ebp
c001e2ce:	89 03                	mov    DWORD PTR [ebx],eax
c001e2d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e2d2:	68 00 04 00 00       	push   0x400
c001e2d7:	6a 00                	push   0x0
c001e2d9:	50                   	push   eax
c001e2da:	e8 a5 23 fe ff       	call   c0000684 <memset>
c001e2df:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001e2e5:	89 fa                	mov    edx,edi
c001e2e7:	01 e8                	add    eax,ebp
c001e2e9:	c1 e7 0d             	shl    edi,0xd
c001e2ec:	89 03                	mov    DWORD PTR [ebx],eax
c001e2ee:	c1 e2 08             	shl    edx,0x8
c001e2f1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001e2f8:	81 c2 00 80 00 00    	add    edx,0x8000
c001e2fe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e302:	89 d0                	mov    eax,edx
c001e304:	83 c4 1c             	add    esp,0x1c
c001e307:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e30d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001e310:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001e313:	68 00 01 00 00       	push   0x100
c001e318:	6a 00                	push   0x0
c001e31a:	50                   	push   eax
c001e31b:	e8 64 23 fe ff       	call   c0000684 <memset>
c001e320:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e324:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001e32a:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001e330:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e334:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001e337:	83 c4 10             	add    esp,0x10
c001e33a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001e341:	31 ff                	xor    edi,edi
c001e343:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001e349:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001e34f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e353:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e359:	83 c5 20             	add    ebp,0x20
c001e35c:	01 f8                	add    eax,edi
c001e35e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e361:	52                   	push   edx
c001e362:	68 00 01 00 00       	push   0x100
c001e367:	6a 00                	push   0x0
c001e369:	50                   	push   eax
c001e36a:	e8 15 23 fe ff       	call   c0000684 <memset>
c001e36f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e373:	83 c4 10             	add    esp,0x10
c001e376:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001e37c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e383:	01 f8                	add    eax,edi
c001e385:	81 c7 00 01 00 00    	add    edi,0x100
c001e38b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e38e:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001e394:	75 b3                	jne    c001e349 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001e396:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001e39a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001e39e:	83 c4 1c             	add    esp,0x1c
c001e3a1:	5b                   	pop    ebx
c001e3a2:	5e                   	pop    esi
c001e3a3:	5f                   	pop    edi
c001e3a4:	5d                   	pop    ebp
c001e3a5:	e9 b0 fe ff ff       	jmp    c001e25a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001e3aa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001e3aa:	55                   	push   ebp
c001e3ab:	57                   	push   edi
c001e3ac:	56                   	push   esi
c001e3ad:	53                   	push   ebx
c001e3ae:	31 db                	xor    ebx,ebx
c001e3b0:	83 ec 0c             	sub    esp,0xc
c001e3b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e3b7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e3bb:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001e3be:	f7 c7 01 00 00 00    	test   edi,0x1
c001e3c4:	74 7a                	je     c001e440 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e3c6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001e3ca:	89 d8                	mov    eax,ebx
c001e3cc:	c1 e0 07             	shl    eax,0x7
c001e3cf:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001e3d6:	55                   	push   ebp
c001e3d7:	56                   	push   esi
c001e3d8:	e8 35 fe ff ff       	call   c001e212 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001e3dd:	5a                   	pop    edx
c001e3de:	83 f8 01             	cmp    eax,0x1
c001e3e1:	59                   	pop    ecx
c001e3e2:	75 21                	jne    c001e405 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001e3e4:	50                   	push   eax
c001e3e5:	53                   	push   ebx
c001e3e6:	55                   	push   ebp
c001e3e7:	56                   	push   esi
c001e3e8:	e8 b7 fe ff ff       	call   c001e2a4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e3ed:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001e3f4:	e8 ca b5 fe ff       	call   c00099c3 <malloc>
c001e3f9:	89 c5                	mov    ebp,eax
c001e3fb:	89 04 24             	mov    DWORD PTR [esp],eax
c001e3fe:	e8 7f 0d 00 00       	call   c001f182 <SATA::SATA()>
c001e403:	eb 24                	jmp    c001e429 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001e405:	83 f8 04             	cmp    eax,0x4
c001e408:	75 36                	jne    c001e440 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e40a:	51                   	push   ecx
c001e40b:	53                   	push   ebx
c001e40c:	55                   	push   ebp
c001e40d:	56                   	push   esi
c001e40e:	e8 91 fe ff ff       	call   c001e2a4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e413:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001e41a:	e8 a4 b5 fe ff       	call   c00099c3 <malloc>
c001e41f:	89 c5                	mov    ebp,eax
c001e421:	89 04 24             	mov    DWORD PTR [esp],eax
c001e424:	e8 cf 10 00 00       	call   c001f4f8 <SATAPI::SATAPI()>
c001e429:	58                   	pop    eax
c001e42a:	5a                   	pop    edx
c001e42b:	55                   	push   ebp
c001e42c:	56                   	push   esi
c001e42d:	e8 74 fa fe ff       	call   c000dea6 <Device::addChild(Device*)>
c001e432:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001e435:	56                   	push   esi
c001e436:	6a 00                	push   0x0
c001e438:	53                   	push   ebx
c001e439:	55                   	push   ebp
c001e43a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001e43d:	83 c4 20             	add    esp,0x20
c001e440:	d1 ef                	shr    edi,1
c001e442:	43                   	inc    ebx
c001e443:	83 fb 20             	cmp    ebx,0x20
c001e446:	0f 85 72 ff ff ff    	jne    c001e3be <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001e44c:	83 c4 0c             	add    esp,0xc
c001e44f:	5b                   	pop    ebx
c001e450:	5e                   	pop    esi
c001e451:	5f                   	pop    edi
c001e452:	5d                   	pop    ebp
c001e453:	c3                   	ret    

c001e454 <SATABus::open(int, int, void*)>:
c001e454:	83 ec 14             	sub    esp,0x14
c001e457:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e45b:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001e461:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e467:	52                   	push   edx
c001e468:	50                   	push   eax
c001e469:	e8 3c ff ff ff       	call   c001e3aa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001e46e:	31 c0                	xor    eax,eax
c001e470:	83 c4 1c             	add    esp,0x1c
c001e473:	c3                   	ret    

c001e474 <ATA::close(int, int, void*)>:
c001e474:	83 ec 0c             	sub    esp,0xc
c001e477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e47b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e481:	85 c0                	test   eax,eax
c001e483:	74 0c                	je     c001e491 <ATA::close(int, int, void*)+0x1d>
c001e485:	83 ec 0c             	sub    esp,0xc
c001e488:	8b 10                	mov    edx,DWORD PTR [eax]
c001e48a:	50                   	push   eax
c001e48b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e48e:	83 c4 10             	add    esp,0x10
c001e491:	31 c0                	xor    eax,eax
c001e493:	83 c4 0c             	add    esp,0xc
c001e496:	c3                   	ret    
c001e497:	90                   	nop

c001e498 <ATA::powerSaving(PowerSavingLevel)>:
c001e498:	c3                   	ret    
c001e499:	90                   	nop

c001e49a <ATA::ATA()>:
c001e49a:	83 ec 0c             	sub    esp,0xc
c001e49d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4a1:	83 ec 04             	sub    esp,0x4
c001e4a4:	68 00 02 00 00       	push   0x200
c001e4a9:	68 15 4f 02 c0       	push   0xc0024f15
c001e4ae:	50                   	push   eax
c001e4af:	e8 2a fe fe ff       	call   c000e2de <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e4b4:	83 c4 10             	add    esp,0x10
c001e4b7:	ba 98 4e 02 c0       	mov    edx,0xc0024e98
c001e4bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4c0:	89 10                	mov    DWORD PTR [eax],edx
c001e4c2:	90                   	nop
c001e4c3:	83 c4 0c             	add    esp,0xc
c001e4c6:	c3                   	ret    
c001e4c7:	90                   	nop

c001e4c8 <ATA::flush(bool)>:
c001e4c8:	53                   	push   ebx
c001e4c9:	83 ec 08             	sub    esp,0x8
c001e4cc:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001e4d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e4d5:	19 c0                	sbb    eax,eax
c001e4d7:	83 e0 fd             	and    eax,0xfffffffd
c001e4da:	05 ea 00 00 00       	add    eax,0xea
c001e4df:	50                   	push   eax
c001e4e0:	6a 07                	push   0x7
c001e4e2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e4e9:	50                   	push   eax
c001e4ea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e4f0:	e8 5d f1 ff ff       	call   c001d652 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e4f5:	83 c4 0c             	add    esp,0xc
c001e4f8:	6a 00                	push   0x0
c001e4fa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e501:	50                   	push   eax
c001e502:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e508:	e8 dd fb ff ff       	call   c001e0ea <IDE::polling(unsigned char, unsigned int)>
c001e50d:	83 c4 18             	add    esp,0x18
c001e510:	5b                   	pop    ebx
c001e511:	c3                   	ret    

c001e512 <ATA::readyForCommand()>:
c001e512:	56                   	push   esi
c001e513:	53                   	push   ebx
c001e514:	53                   	push   ebx
c001e515:	31 db                	xor    ebx,ebx
c001e517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e51b:	51                   	push   ecx
c001e51c:	6a 0c                	push   0xc
c001e51e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001e525:	50                   	push   eax
c001e526:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001e52c:	e8 e1 f1 ff ff       	call   c001d712 <IDE::read(unsigned char, unsigned char)>
c001e531:	83 c4 10             	add    esp,0x10
c001e534:	a8 88                	test   al,0x88
c001e536:	74 1f                	je     c001e557 <ATA::readyForCommand()+0x45>
c001e538:	43                   	inc    ebx
c001e539:	83 fb 63             	cmp    ebx,0x63
c001e53c:	7e dd                	jle    c001e51b <ATA::readyForCommand()+0x9>
c001e53e:	83 ec 0c             	sub    esp,0xc
c001e541:	6a 0a                	push   0xa
c001e543:	e8 80 9c ff ff       	call   c00181c8 <milliTenthSleep(unsigned int)>
c001e548:	83 c4 10             	add    esp,0x10
c001e54b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001e551:	75 c8                	jne    c001e51b <ATA::readyForCommand()+0x9>
c001e553:	31 c0                	xor    eax,eax
c001e555:	eb 02                	jmp    c001e559 <ATA::readyForCommand()+0x47>
c001e557:	b0 01                	mov    al,0x1
c001e559:	5a                   	pop    edx
c001e55a:	5b                   	pop    ebx
c001e55b:	5e                   	pop    esi
c001e55c:	c3                   	ret    
c001e55d:	90                   	nop

c001e55e <ATA::access(unsigned long long, int, void*, bool)>:
c001e55e:	55                   	push   ebp
c001e55f:	57                   	push   edi
c001e560:	56                   	push   esi
c001e561:	53                   	push   ebx
c001e562:	83 ec 38             	sub    esp,0x38
c001e565:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001e569:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001e56d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001e571:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e575:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e579:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e57d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001e581:	68 44 4e 02 c0       	push   0xc0024e44
c001e586:	e8 d4 e4 fe ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001e58b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e591:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e595:	83 c4 10             	add    esp,0x10
c001e598:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001e59e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e5a2:	c1 e0 06             	shl    eax,0x6
c001e5a5:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001e5ad:	74 5d                	je     c001e60c <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001e5af:	89 fa                	mov    edx,edi
c001e5b1:	89 f0                	mov    eax,esi
c001e5b3:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001e5b7:	c1 ea 1c             	shr    edx,0x1c
c001e5ba:	89 d1                	mov    ecx,edx
c001e5bc:	09 c1                	or     ecx,eax
c001e5be:	74 25                	je     c001e5e5 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001e5c0:	31 ed                	xor    ebp,ebp
c001e5c2:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001e5c9:	89 fa                	mov    edx,edi
c001e5cb:	89 f0                	mov    eax,esi
c001e5cd:	0f ad d0             	shrd   eax,edx,cl
c001e5d0:	d3 ea                	shr    edx,cl
c001e5d2:	f6 c1 20             	test   cl,0x20
c001e5d5:	74 02                	je     c001e5d9 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001e5d7:	89 d0                	mov    eax,edx
c001e5d9:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001e5dd:	45                   	inc    ebp
c001e5de:	83 fd 06             	cmp    ebp,0x6
c001e5e1:	75 df                	jne    c001e5c2 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001e5e3:	eb 76                	jmp    c001e65b <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001e5e5:	89 f0                	mov    eax,esi
c001e5e7:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001e5ec:	89 fa                	mov    edx,edi
c001e5ee:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e5f5:	0f ac d0 10          	shrd   eax,edx,0x10
c001e5f9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e5fe:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e602:	c1 ee 18             	shr    esi,0x18
c001e605:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e60a:	eb 56                	jmp    c001e662 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001e60c:	6a 00                	push   0x0
c001e60e:	6a 3f                	push   0x3f
c001e610:	57                   	push   edi
c001e611:	56                   	push   esi
c001e612:	e8 8d 29 00 00       	call   c0020fa4 <__umoddi3>
c001e617:	83 c4 10             	add    esp,0x10
c001e61a:	40                   	inc    eax
c001e61b:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001e61f:	6a 00                	push   0x0
c001e621:	68 f0 03 00 00       	push   0x3f0
c001e626:	57                   	push   edi
c001e627:	56                   	push   esi
c001e628:	e8 77 28 00 00       	call   c0020ea4 <__udivdi3>
c001e62d:	83 c4 10             	add    esp,0x10
c001e630:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001e635:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e63c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e641:	6a 00                	push   0x0
c001e643:	6a 3f                	push   0x3f
c001e645:	57                   	push   edi
c001e646:	56                   	push   esi
c001e647:	e8 58 28 00 00       	call   c0020ea4 <__udivdi3>
c001e64c:	83 c4 10             	add    esp,0x10
c001e64f:	89 c6                	mov    esi,eax
c001e651:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001e656:	83 e6 0f             	and    esi,0xf
c001e659:	eb 07                	jmp    c001e662 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001e65b:	31 f6                	xor    esi,esi
c001e65d:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001e662:	bf 01 00 00 00       	mov    edi,0x1
c001e667:	50                   	push   eax
c001e668:	6a 00                	push   0x0
c001e66a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e671:	50                   	push   eax
c001e672:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e676:	e8 df f1 ff ff       	call   c001d85a <IDE::enableIRQs(unsigned char, bool)>
c001e67b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e67e:	e8 8f fe ff ff       	call   c001e512 <ATA::readyForCommand()>
c001e683:	83 c4 10             	add    esp,0x10
c001e686:	84 c0                	test   al,al
c001e688:	0f 84 bc 02 00 00    	je     c001e94a <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001e68e:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001e694:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001e69a:	c1 e0 04             	shl    eax,0x4
c001e69d:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001e6a4:	09 c6                	or     esi,eax
c001e6a6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e6ab:	75 05                	jne    c001e6b2 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001e6ad:	83 ce a0             	or     esi,0xffffffa0
c001e6b0:	eb 03                	jmp    c001e6b5 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001e6b2:	83 ce e0             	or     esi,0xffffffe0
c001e6b5:	89 f0                	mov    eax,esi
c001e6b7:	0f b6 f0             	movzx  esi,al
c001e6ba:	56                   	push   esi
c001e6bb:	6a 06                	push   0x6
c001e6bd:	51                   	push   ecx
c001e6be:	52                   	push   edx
c001e6bf:	e8 8e ef ff ff       	call   c001d652 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e6c4:	83 c4 10             	add    esp,0x10
c001e6c7:	6a 00                	push   0x0
c001e6c9:	6a 01                	push   0x1
c001e6cb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e6d2:	50                   	push   eax
c001e6d3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e6d9:	e8 74 ef ff ff       	call   c001d652 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e6de:	83 c4 10             	add    esp,0x10
c001e6e1:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001e6e6:	75 6e                	jne    c001e756 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001e6e8:	6a 00                	push   0x0
c001e6ea:	6a 08                	push   0x8
c001e6ec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e6f3:	50                   	push   eax
c001e6f4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e6fa:	e8 53 ef ff ff       	call   c001d652 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e6ff:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001e704:	50                   	push   eax
c001e705:	6a 09                	push   0x9
c001e707:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e70e:	50                   	push   eax
c001e70f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e715:	e8 38 ef ff ff       	call   c001d652 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e71a:	83 c4 20             	add    esp,0x20
c001e71d:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e722:	50                   	push   eax
c001e723:	6a 0a                	push   0xa
c001e725:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e72c:	50                   	push   eax
c001e72d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e733:	e8 1a ef ff ff       	call   c001d652 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e738:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001e73d:	50                   	push   eax
c001e73e:	6a 0b                	push   0xb
c001e740:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e747:	50                   	push   eax
c001e748:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e74e:	e8 ff ee ff ff       	call   c001d652 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e753:	83 c4 20             	add    esp,0x20
c001e756:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001e75b:	50                   	push   eax
c001e75c:	6a 02                	push   0x2
c001e75e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e765:	50                   	push   eax
c001e766:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e76c:	e8 e1 ee ff ff       	call   c001d652 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e771:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001e776:	50                   	push   eax
c001e777:	6a 03                	push   0x3
c001e779:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e780:	50                   	push   eax
c001e781:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e787:	e8 c6 ee ff ff       	call   c001d652 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e78c:	83 c4 20             	add    esp,0x20
c001e78f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001e794:	50                   	push   eax
c001e795:	6a 04                	push   0x4
c001e797:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e79e:	50                   	push   eax
c001e79f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7a5:	e8 a8 ee ff ff       	call   c001d652 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7aa:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e7af:	50                   	push   eax
c001e7b0:	6a 05                	push   0x5
c001e7b2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7b9:	50                   	push   eax
c001e7ba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7c0:	e8 8d ee ff ff       	call   c001d652 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7c5:	83 c4 20             	add    esp,0x20
c001e7c8:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001e7cd:	0f 94 c0             	sete   al
c001e7d0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e7d5:	74 09                	je     c001e7e0 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001e7d7:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001e7de:	eb 07                	jmp    c001e7e7 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001e7e0:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001e7e7:	0f b6 c0             	movzx  eax,al
c001e7ea:	50                   	push   eax
c001e7eb:	6a 07                	push   0x7
c001e7ed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7f4:	50                   	push   eax
c001e7f5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7fb:	e8 52 ee ff ff       	call   c001d652 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e800:	c7 04 24 51 4e 02 c0 	mov    DWORD PTR [esp],0xc0024e51
c001e807:	e8 53 e2 fe ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001e80c:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001e810:	83 c4 10             	add    esp,0x10
c001e813:	85 f6                	test   esi,esi
c001e815:	0f 84 f7 00 00 00    	je     c001e912 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001e81b:	83 ec 0c             	sub    esp,0xc
c001e81e:	68 54 4e 02 c0       	push   0xc0024e54
c001e823:	e8 37 e2 fe ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001e828:	83 c4 0c             	add    esp,0xc
c001e82b:	6a 01                	push   0x1
c001e82d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e834:	50                   	push   eax
c001e835:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e83b:	e8 aa f8 ff ff       	call   c001e0ea <IDE::polling(unsigned char, unsigned int)>
c001e840:	c7 04 24 57 4e 02 c0 	mov    DWORD PTR [esp],0xc0024e57
c001e847:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e84b:	e8 0f e2 fe ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001e850:	83 c4 10             	add    esp,0x10
c001e853:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e857:	84 c0                	test   al,al
c001e859:	74 2b                	je     c001e886 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001e85b:	0f b6 f8             	movzx  edi,al
c001e85e:	57                   	push   edi
c001e85f:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001e866:	50                   	push   eax
c001e867:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e86e:	50                   	push   eax
c001e86f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e875:	e8 c0 f7 ff ff       	call   c001e03a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001e87a:	c7 04 24 5a 4e 02 c0 	mov    DWORD PTR [esp],0xc0024e5a
c001e881:	e9 bc 00 00 00       	jmp    c001e942 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001e886:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e88b:	74 50                	je     c001e8dd <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001e88d:	83 ec 0c             	sub    esp,0xc
c001e890:	31 ed                	xor    ebp,ebp
c001e892:	68 65 4e 02 c0       	push   0xc0024e65
c001e897:	e8 c3 e1 fe ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001e89c:	83 c4 10             	add    esp,0x10
c001e89f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e8a3:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001e8a7:	50                   	push   eax
c001e8a8:	50                   	push   eax
c001e8a9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e8b0:	50                   	push   eax
c001e8b1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e8b7:	e8 84 ed ff ff       	call   c001d640 <IDE::getBase(unsigned char)>
c001e8bc:	89 c2                	mov    edx,eax
c001e8be:	89 f8                	mov    eax,edi
c001e8c0:	66 ef                	out    dx,ax
c001e8c2:	45                   	inc    ebp
c001e8c3:	83 c4 10             	add    esp,0x10
c001e8c6:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001e8cc:	75 d1                	jne    c001e89f <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001e8ce:	83 ec 0c             	sub    esp,0xc
c001e8d1:	68 68 4e 02 c0       	push   0xc0024e68
c001e8d6:	e8 84 e1 fe ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001e8db:	eb 24                	jmp    c001e901 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001e8dd:	51                   	push   ecx
c001e8de:	51                   	push   ecx
c001e8df:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e8e6:	50                   	push   eax
c001e8e7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e8ed:	e8 4e ed ff ff       	call   c001d640 <IDE::getBase(unsigned char)>
c001e8f2:	b9 00 01 00 00       	mov    ecx,0x100
c001e8f7:	89 c2                	mov    edx,eax
c001e8f9:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001e8fd:	fc                   	cld    
c001e8fe:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001e901:	83 c4 10             	add    esp,0x10
c001e904:	4e                   	dec    esi
c001e905:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001e90d:	e9 01 ff ff ff       	jmp    c001e813 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001e912:	31 ff                	xor    edi,edi
c001e914:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e919:	74 2f                	je     c001e94a <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001e91b:	83 ec 0c             	sub    esp,0xc
c001e91e:	68 6b 4e 02 c0       	push   0xc0024e6b
c001e923:	e8 37 e1 fe ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001e928:	58                   	pop    eax
c001e929:	31 c0                	xor    eax,eax
c001e92b:	5a                   	pop    edx
c001e92c:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001e931:	0f 94 c0             	sete   al
c001e934:	50                   	push   eax
c001e935:	53                   	push   ebx
c001e936:	e8 8d fb ff ff       	call   c001e4c8 <ATA::flush(bool)>
c001e93b:	c7 04 24 6e 4e 02 c0 	mov    DWORD PTR [esp],0xc0024e6e
c001e942:	e8 18 e1 fe ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001e947:	83 c4 10             	add    esp,0x10
c001e94a:	83 c4 2c             	add    esp,0x2c
c001e94d:	89 f8                	mov    eax,edi
c001e94f:	5b                   	pop    ebx
c001e950:	5e                   	pop    esi
c001e951:	5f                   	pop    edi
c001e952:	5d                   	pop    ebp
c001e953:	c3                   	ret    

c001e954 <ATA::read(unsigned long long, int, void*)>:
c001e954:	57                   	push   edi
c001e955:	b8 04 00 00 00       	mov    eax,0x4
c001e95a:	56                   	push   esi
c001e95b:	53                   	push   ebx
c001e95c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e960:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e964:	8d 7a ff             	lea    edi,[edx-0x1]
c001e967:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e96b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e96f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001e975:	77 25                	ja     c001e99c <ATA::read(unsigned long long, int, void*)+0x48>
c001e977:	b8 06 00 00 00       	mov    eax,0x6
c001e97c:	85 f6                	test   esi,esi
c001e97e:	74 1c                	je     c001e99c <ATA::read(unsigned long long, int, void*)+0x48>
c001e980:	50                   	push   eax
c001e981:	50                   	push   eax
c001e982:	6a 00                	push   0x0
c001e984:	56                   	push   esi
c001e985:	52                   	push   edx
c001e986:	53                   	push   ebx
c001e987:	51                   	push   ecx
c001e988:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e98c:	e8 cd fb ff ff       	call   c001e55e <ATA::access(unsigned long long, int, void*, bool)>
c001e991:	83 c4 20             	add    esp,0x20
c001e994:	85 c0                	test   eax,eax
c001e996:	0f 95 c0             	setne  al
c001e999:	0f b6 c0             	movzx  eax,al
c001e99c:	5b                   	pop    ebx
c001e99d:	5e                   	pop    esi
c001e99e:	5f                   	pop    edi
c001e99f:	c3                   	ret    

c001e9a0 <ATA::write(unsigned long long, int, void*)>:
c001e9a0:	55                   	push   ebp
c001e9a1:	57                   	push   edi
c001e9a2:	56                   	push   esi
c001e9a3:	53                   	push   ebx
c001e9a4:	83 ec 18             	sub    esp,0x18
c001e9a7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e9ab:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e9af:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001e9b3:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001e9b7:	68 71 4e 02 c0       	push   0xc0024e71
c001e9bc:	e8 9e e0 fe ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001e9c1:	8d 53 ff             	lea    edx,[ebx-0x1]
c001e9c4:	83 c4 10             	add    esp,0x10
c001e9c7:	b8 04 00 00 00       	mov    eax,0x4
c001e9cc:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001e9d2:	77 25                	ja     c001e9f9 <ATA::write(unsigned long long, int, void*)+0x59>
c001e9d4:	b8 06 00 00 00       	mov    eax,0x6
c001e9d9:	85 f6                	test   esi,esi
c001e9db:	74 1c                	je     c001e9f9 <ATA::write(unsigned long long, int, void*)+0x59>
c001e9dd:	50                   	push   eax
c001e9de:	50                   	push   eax
c001e9df:	6a 01                	push   0x1
c001e9e1:	56                   	push   esi
c001e9e2:	53                   	push   ebx
c001e9e3:	55                   	push   ebp
c001e9e4:	57                   	push   edi
c001e9e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e9e9:	e8 70 fb ff ff       	call   c001e55e <ATA::access(unsigned long long, int, void*, bool)>
c001e9ee:	83 c4 20             	add    esp,0x20
c001e9f1:	85 c0                	test   eax,eax
c001e9f3:	0f 95 c0             	setne  al
c001e9f6:	0f b6 c0             	movzx  eax,al
c001e9f9:	83 c4 0c             	add    esp,0xc
c001e9fc:	5b                   	pop    ebx
c001e9fd:	5e                   	pop    esi
c001e9fe:	5f                   	pop    edi
c001e9ff:	5d                   	pop    ebp
c001ea00:	c3                   	ret    
c001ea01:	90                   	nop

c001ea02 <ATA::detectCHS()>:
c001ea02:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea06:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001ea0c:	c1 e0 06             	shl    eax,0x6
c001ea0f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001ea15:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001ea1f:	c7 44 24 04 7d 4e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024e7d
c001ea27:	e9 d3 58 ff ff       	jmp    c00142ff <Krnl::panic(char const*)>

c001ea2c <ATA::open(int, int, void*)>:
c001ea2c:	53                   	push   ebx
c001ea2d:	83 ec 08             	sub    esp,0x8
c001ea30:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ea34:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ea38:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ea3c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ea42:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ea48:	c1 e0 06             	shl    eax,0x6
c001ea4b:	01 d0                	add    eax,edx
c001ea4d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001ea54:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001ea5a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001ea61:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ea6b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001ea71:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ea78:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001ea7f:	75 0c                	jne    c001ea8d <ATA::open(int, int, void*)+0x61>
c001ea81:	83 ec 0c             	sub    esp,0xc
c001ea84:	53                   	push   ebx
c001ea85:	e8 78 ff ff ff       	call   c001ea02 <ATA::detectCHS()>
c001ea8a:	83 c4 10             	add    esp,0x10
c001ea8d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ea93:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001ea99:	c1 e0 06             	shl    eax,0x6
c001ea9c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001eaa3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001eaad:	d1 e8                	shr    eax,1
c001eaaf:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001eab5:	6a 04                	push   0x4
c001eab7:	6a 0c                	push   0xc
c001eab9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eac0:	50                   	push   eax
c001eac1:	52                   	push   edx
c001eac2:	e8 8b eb ff ff       	call   c001d652 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eac7:	90                   	nop
c001eac8:	90                   	nop
c001eac9:	6a 00                	push   0x0
c001eacb:	6a 0c                	push   0xc
c001eacd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ead4:	50                   	push   eax
c001ead5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001eadb:	e8 72 eb ff ff       	call   c001d652 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eae0:	83 c4 14             	add    esp,0x14
c001eae3:	53                   	push   ebx
c001eae4:	e8 5d f8 fe ff       	call   c000e346 <PhysicalDisk::startCache()>
c001eae9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001eaec:	e8 91 18 ff ff       	call   c0010382 <createPartitionsForDisk(PhysicalDisk*)>
c001eaf1:	31 c0                	xor    eax,eax
c001eaf3:	83 c4 18             	add    esp,0x18
c001eaf6:	5b                   	pop    ebx
c001eaf7:	c3                   	ret    

c001eaf8 <ATAPI::write(unsigned long long, int, void*)>:
c001eaf8:	b8 03 00 00 00       	mov    eax,0x3
c001eafd:	c3                   	ret    

c001eafe <ATAPI::close(int, int, void*)>:
c001eafe:	83 ec 0c             	sub    esp,0xc
c001eb01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb05:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eb0b:	85 c0                	test   eax,eax
c001eb0d:	74 0c                	je     c001eb1b <ATAPI::close(int, int, void*)+0x1d>
c001eb0f:	83 ec 0c             	sub    esp,0xc
c001eb12:	8b 10                	mov    edx,DWORD PTR [eax]
c001eb14:	50                   	push   eax
c001eb15:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001eb18:	83 c4 10             	add    esp,0x10
c001eb1b:	31 c0                	xor    eax,eax
c001eb1d:	83 c4 0c             	add    esp,0xc
c001eb20:	c3                   	ret    
c001eb21:	90                   	nop

c001eb22 <ATAPI::ATAPI()>:
c001eb22:	83 ec 0c             	sub    esp,0xc
c001eb25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb29:	83 ec 04             	sub    esp,0x4
c001eb2c:	68 00 08 00 00       	push   0x800
c001eb31:	68 b5 4f 02 c0       	push   0xc0024fb5
c001eb36:	50                   	push   eax
c001eb37:	e8 a2 f7 fe ff       	call   c000e2de <PhysicalDisk::PhysicalDisk(char const*, int)>
c001eb3c:	83 c4 10             	add    esp,0x10
c001eb3f:	ba d0 4e 02 c0       	mov    edx,0xc0024ed0
c001eb44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb48:	89 10                	mov    DWORD PTR [eax],edx
c001eb4a:	90                   	nop
c001eb4b:	83 c4 0c             	add    esp,0xc
c001eb4e:	c3                   	ret    
c001eb4f:	90                   	nop

c001eb50 <ATAPI::readyForCommand()>:
c001eb50:	56                   	push   esi
c001eb51:	53                   	push   ebx
c001eb52:	53                   	push   ebx
c001eb53:	31 db                	xor    ebx,ebx
c001eb55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eb59:	51                   	push   ecx
c001eb5a:	6a 0c                	push   0xc
c001eb5c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001eb63:	50                   	push   eax
c001eb64:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001eb6a:	e8 a3 eb ff ff       	call   c001d712 <IDE::read(unsigned char, unsigned char)>
c001eb6f:	83 c4 10             	add    esp,0x10
c001eb72:	a8 88                	test   al,0x88
c001eb74:	74 1f                	je     c001eb95 <ATAPI::readyForCommand()+0x45>
c001eb76:	43                   	inc    ebx
c001eb77:	83 fb 63             	cmp    ebx,0x63
c001eb7a:	7e dd                	jle    c001eb59 <ATAPI::readyForCommand()+0x9>
c001eb7c:	83 ec 0c             	sub    esp,0xc
c001eb7f:	6a 0a                	push   0xa
c001eb81:	e8 42 96 ff ff       	call   c00181c8 <milliTenthSleep(unsigned int)>
c001eb86:	83 c4 10             	add    esp,0x10
c001eb89:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001eb8f:	75 c8                	jne    c001eb59 <ATAPI::readyForCommand()+0x9>
c001eb91:	31 c0                	xor    eax,eax
c001eb93:	eb 02                	jmp    c001eb97 <ATAPI::readyForCommand()+0x47>
c001eb95:	b0 01                	mov    al,0x1
c001eb97:	5a                   	pop    edx
c001eb98:	5b                   	pop    ebx
c001eb99:	5e                   	pop    esi
c001eb9a:	c3                   	ret    
c001eb9b:	90                   	nop

c001eb9c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001eb9c:	55                   	push   ebp
c001eb9d:	57                   	push   edi
c001eb9e:	56                   	push   esi
c001eb9f:	53                   	push   ebx
c001eba0:	83 ec 20             	sub    esp,0x20
c001eba3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001eba7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001ebab:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001ebaf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ebb3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ebb7:	6a 01                	push   0x1
c001ebb9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ebc0:	50                   	push   eax
c001ebc1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ebc7:	e8 8e ec ff ff       	call   c001d85a <IDE::enableIRQs(unsigned char, bool)>
c001ebcc:	5e                   	pop    esi
c001ebcd:	58                   	pop    eax
c001ebce:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ebd5:	50                   	push   eax
c001ebd6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ebdc:	e8 4b ea ff ff       	call   c001d62c <IDE::prepareInterrupt(unsigned char)>
c001ebe1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ebe4:	e8 67 ff ff ff       	call   c001eb50 <ATAPI::readyForCommand()>
c001ebe9:	83 c4 10             	add    esp,0x10
c001ebec:	84 c0                	test   al,al
c001ebee:	75 0a                	jne    c001ebfa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001ebf0:	bb 01 00 00 00       	mov    ebx,0x1
c001ebf5:	e9 57 02 00 00       	jmp    c001ee51 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ebfa:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001ec00:	c1 e0 04             	shl    eax,0x4
c001ec03:	0f b6 c0             	movzx  eax,al
c001ec06:	50                   	push   eax
c001ec07:	6a 06                	push   0x6
c001ec09:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec10:	50                   	push   eax
c001ec11:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec17:	e8 36 ea ff ff       	call   c001d652 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec1c:	6a 00                	push   0x0
c001ec1e:	6a 01                	push   0x1
c001ec20:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec27:	50                   	push   eax
c001ec28:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec2e:	e8 1f ea ff ff       	call   c001d652 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec33:	83 c4 20             	add    esp,0x20
c001ec36:	0f b6 c3             	movzx  eax,bl
c001ec39:	0f b6 df             	movzx  ebx,bh
c001ec3c:	50                   	push   eax
c001ec3d:	6a 04                	push   0x4
c001ec3f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec46:	50                   	push   eax
c001ec47:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec4d:	e8 00 ea ff ff       	call   c001d652 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec52:	53                   	push   ebx
c001ec53:	6a 05                	push   0x5
c001ec55:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec5c:	50                   	push   eax
c001ec5d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec63:	e8 ea e9 ff ff       	call   c001d652 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec68:	83 c4 20             	add    esp,0x20
c001ec6b:	68 a0 00 00 00       	push   0xa0
c001ec70:	6a 07                	push   0x7
c001ec72:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec79:	50                   	push   eax
c001ec7a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec80:	e8 cd e9 ff ff       	call   c001d652 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec85:	83 c4 0c             	add    esp,0xc
c001ec88:	6a 01                	push   0x1
c001ec8a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec91:	50                   	push   eax
c001ec92:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ec98:	e8 4d f4 ff ff       	call   c001e0ea <IDE::polling(unsigned char, unsigned int)>
c001ec9d:	83 c4 10             	add    esp,0x10
c001eca0:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001eca6:	84 c0                	test   al,al
c001eca8:	74 23                	je     c001eccd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001ecaa:	0f b6 d8             	movzx  ebx,al
c001ecad:	0f b6 d2             	movzx  edx,dl
c001ecb0:	53                   	push   ebx
c001ecb1:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001ecb8:	50                   	push   eax
c001ecb9:	52                   	push   edx
c001ecba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ecc0:	e8 75 f3 ff ff       	call   c001e03a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ecc5:	83 c4 10             	add    esp,0x10
c001ecc8:	e9 84 01 00 00       	jmp    c001ee51 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001eccd:	0f b6 d2             	movzx  edx,dl
c001ecd0:	53                   	push   ebx
c001ecd1:	53                   	push   ebx
c001ecd2:	52                   	push   edx
c001ecd3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ecd9:	e8 62 e9 ff ff       	call   c001d640 <IDE::getBase(unsigned char)>
c001ecde:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ece2:	b9 06 00 00 00       	mov    ecx,0x6
c001ece7:	89 c2                	mov    edx,eax
c001ece9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001ecec:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001ecf0:	83 c4 10             	add    esp,0x10
c001ecf3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ecf9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ed00:	85 db                	test   ebx,ebx
c001ed02:	0f 84 ec 00 00 00    	je     c001edf4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001ed08:	51                   	push   ecx
c001ed09:	51                   	push   ecx
c001ed0a:	52                   	push   edx
c001ed0b:	50                   	push   eax
c001ed0c:	e8 af ea ff ff       	call   c001d7c0 <IDE::waitInterrupt(unsigned char)>
c001ed11:	83 c4 10             	add    esp,0x10
c001ed14:	84 c0                	test   al,al
c001ed16:	0f 84 d4 fe ff ff    	je     c001ebf0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ed1c:	56                   	push   esi
c001ed1d:	56                   	push   esi
c001ed1e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed25:	50                   	push   eax
c001ed26:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed2c:	e8 fb e8 ff ff       	call   c001d62c <IDE::prepareInterrupt(unsigned char)>
c001ed31:	83 c4 0c             	add    esp,0xc
c001ed34:	6a 04                	push   0x4
c001ed36:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed3d:	50                   	push   eax
c001ed3e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed44:	e8 c9 e9 ff ff       	call   c001d712 <IDE::read(unsigned char, unsigned char)>
c001ed49:	83 c4 0c             	add    esp,0xc
c001ed4c:	89 c6                	mov    esi,eax
c001ed4e:	6a 05                	push   0x5
c001ed50:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed57:	50                   	push   eax
c001ed58:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed5e:	e8 af e9 ff ff       	call   c001d712 <IDE::read(unsigned char, unsigned char)>
c001ed63:	89 f1                	mov    ecx,esi
c001ed65:	0f b6 c0             	movzx  eax,al
c001ed68:	0f b6 f1             	movzx  esi,cl
c001ed6b:	c1 e0 08             	shl    eax,0x8
c001ed6e:	09 c6                	or     esi,eax
c001ed70:	d1 fe                	sar    esi,1
c001ed72:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001ed76:	83 c4 10             	add    esp,0x10
c001ed79:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001ed7e:	74 41                	je     c001edc1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001ed80:	31 c9                	xor    ecx,ecx
c001ed82:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ed88:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ed8f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001ed93:	75 0a                	jne    c001ed9f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001ed95:	01 c9                	add    ecx,ecx
c001ed97:	01 cd                	add    ebp,ecx
c001ed99:	4b                   	dec    ebx
c001ed9a:	e9 54 ff ff ff       	jmp    c001ecf3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001ed9f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001eda4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eda8:	51                   	push   ecx
c001eda9:	51                   	push   ecx
c001edaa:	52                   	push   edx
c001edab:	50                   	push   eax
c001edac:	e8 8f e8 ff ff       	call   c001d640 <IDE::getBase(unsigned char)>
c001edb1:	89 c2                	mov    edx,eax
c001edb3:	89 f0                	mov    eax,esi
c001edb5:	66 ef                	out    dx,ax
c001edb7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001edbb:	83 c4 10             	add    esp,0x10
c001edbe:	41                   	inc    ecx
c001edbf:	eb c1                	jmp    c001ed82 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001edc1:	31 f6                	xor    esi,esi
c001edc3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001edc9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001edd0:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001edd4:	75 06                	jne    c001eddc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001edd6:	01 f6                	add    esi,esi
c001edd8:	01 f5                	add    ebp,esi
c001edda:	eb bd                	jmp    c001ed99 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001eddc:	51                   	push   ecx
c001eddd:	51                   	push   ecx
c001edde:	52                   	push   edx
c001eddf:	50                   	push   eax
c001ede0:	e8 5b e8 ff ff       	call   c001d640 <IDE::getBase(unsigned char)>
c001ede5:	89 c2                	mov    edx,eax
c001ede7:	66 ed                	in     ax,dx
c001ede9:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001edee:	83 c4 10             	add    esp,0x10
c001edf1:	46                   	inc    esi
c001edf2:	eb cf                	jmp    c001edc3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001edf4:	51                   	push   ecx
c001edf5:	51                   	push   ecx
c001edf6:	52                   	push   edx
c001edf7:	50                   	push   eax
c001edf8:	e8 c3 e9 ff ff       	call   c001d7c0 <IDE::waitInterrupt(unsigned char)>
c001edfd:	83 c4 10             	add    esp,0x10
c001ee00:	84 c0                	test   al,al
c001ee02:	0f 84 e8 fd ff ff    	je     c001ebf0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ee08:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ee0d:	52                   	push   edx
c001ee0e:	52                   	push   edx
c001ee0f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ee16:	50                   	push   eax
c001ee17:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ee1d:	e8 0a e8 ff ff       	call   c001d62c <IDE::prepareInterrupt(unsigned char)>
c001ee22:	83 c4 10             	add    esp,0x10
c001ee25:	50                   	push   eax
c001ee26:	50                   	push   eax
c001ee27:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ee2e:	50                   	push   eax
c001ee2f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ee35:	e8 06 e8 ff ff       	call   c001d640 <IDE::getBase(unsigned char)>
c001ee3a:	8d 50 07             	lea    edx,[eax+0x7]
c001ee3d:	ec                   	in     al,dx
c001ee3e:	83 c4 10             	add    esp,0x10
c001ee41:	a8 88                	test   al,0x88
c001ee43:	74 0a                	je     c001ee4f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001ee45:	4b                   	dec    ebx
c001ee46:	75 dd                	jne    c001ee25 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001ee48:	bb 02 00 00 00       	mov    ebx,0x2
c001ee4d:	eb 02                	jmp    c001ee51 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ee4f:	31 db                	xor    ebx,ebx
c001ee51:	83 c4 1c             	add    esp,0x1c
c001ee54:	89 d8                	mov    eax,ebx
c001ee56:	5b                   	pop    ebx
c001ee57:	5e                   	pop    esi
c001ee58:	5f                   	pop    edi
c001ee59:	5d                   	pop    ebp
c001ee5a:	c3                   	ret    
c001ee5b:	90                   	nop

c001ee5c <ATAPI::diskRemoved()>:
c001ee5c:	83 ec 18             	sub    esp,0x18
c001ee5f:	68 c1 4f 02 c0       	push   0xc0024fc1
c001ee64:	e8 f6 db fe ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001ee69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee6d:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001ee74:	83 c4 1c             	add    esp,0x1c
c001ee77:	c3                   	ret    

c001ee78 <ATAPI::eject()>:
c001ee78:	57                   	push   edi
c001ee79:	b9 03 00 00 00       	mov    ecx,0x3
c001ee7e:	53                   	push   ebx
c001ee7f:	83 ec 14             	sub    esp,0x14
c001ee82:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ee86:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ee8a:	fc                   	cld    
c001ee8b:	31 c0                	xor    eax,eax
c001ee8d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ee8f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ee94:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ee99:	50                   	push   eax
c001ee9a:	50                   	push   eax
c001ee9b:	6a 00                	push   0x0
c001ee9d:	6a 00                	push   0x0
c001ee9f:	6a 00                	push   0x0
c001eea1:	6a 02                	push   0x2
c001eea3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001eea7:	50                   	push   eax
c001eea8:	53                   	push   ebx
c001eea9:	e8 ee fc ff ff       	call   c001eb9c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001eeae:	83 c4 14             	add    esp,0x14
c001eeb1:	53                   	push   ebx
c001eeb2:	e8 a5 ff ff ff       	call   c001ee5c <ATAPI::diskRemoved()>
c001eeb7:	83 c4 24             	add    esp,0x24
c001eeba:	31 c0                	xor    eax,eax
c001eebc:	5b                   	pop    ebx
c001eebd:	5f                   	pop    edi
c001eebe:	c3                   	ret    
c001eebf:	90                   	nop

c001eec0 <ATAPI::diskInserted()>:
c001eec0:	53                   	push   ebx
c001eec1:	83 ec 14             	sub    esp,0x14
c001eec4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001eec8:	68 d8 4f 02 c0       	push   0xc0024fd8
c001eecd:	e8 8d db fe ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001eed2:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001eed9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001eedc:	e8 65 f4 fe ff       	call   c000e346 <PhysicalDisk::startCache()>
c001eee1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001eee5:	83 c4 18             	add    esp,0x18
c001eee8:	5b                   	pop    ebx
c001eee9:	e9 94 14 ff ff       	jmp    c0010382 <createPartitionsForDisk(PhysicalDisk*)>

c001eeee <ATAPI::detectMedia()>:
c001eeee:	56                   	push   esi
c001eeef:	53                   	push   ebx
c001eef0:	83 ec 28             	sub    esp,0x28
c001eef3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001eef7:	6a 0c                	push   0xc
c001eef9:	6a 00                	push   0x0
c001eefb:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001eeff:	56                   	push   esi
c001ef00:	e8 7f 17 fe ff       	call   c0000684 <memset>
c001ef05:	58                   	pop    eax
c001ef06:	5a                   	pop    edx
c001ef07:	6a 00                	push   0x0
c001ef09:	6a 00                	push   0x0
c001ef0b:	6a 00                	push   0x0
c001ef0d:	6a 00                	push   0x0
c001ef0f:	56                   	push   esi
c001ef10:	53                   	push   ebx
c001ef11:	e8 86 fc ff ff       	call   c001eb9c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ef16:	83 c4 1c             	add    esp,0x1c
c001ef19:	6a 0c                	push   0xc
c001ef1b:	6a 00                	push   0x0
c001ef1d:	56                   	push   esi
c001ef1e:	e8 61 17 fe ff       	call   c0000684 <memset>
c001ef23:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001ef28:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001ef2d:	59                   	pop    ecx
c001ef2e:	58                   	pop    eax
c001ef2f:	6a 01                	push   0x1
c001ef31:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001ef35:	50                   	push   eax
c001ef36:	6a 00                	push   0x0
c001ef38:	6a 12                	push   0x12
c001ef3a:	56                   	push   esi
c001ef3b:	53                   	push   ebx
c001ef3c:	e8 5b fc ff ff       	call   c001eb9c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ef41:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001ef45:	83 c4 20             	add    esp,0x20
c001ef48:	83 e0 7f             	and    eax,0x7f
c001ef4b:	3c 70                	cmp    al,0x70
c001ef4d:	74 15                	je     c001ef64 <ATAPI::detectMedia()+0x76>
c001ef4f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ef56:	75 0c                	jne    c001ef64 <ATAPI::detectMedia()+0x76>
c001ef58:	83 ec 0c             	sub    esp,0xc
c001ef5b:	53                   	push   ebx
c001ef5c:	e8 5f ff ff ff       	call   c001eec0 <ATAPI::diskInserted()>
c001ef61:	83 c4 10             	add    esp,0x10
c001ef64:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ef68:	83 e0 0f             	and    eax,0xf
c001ef6b:	3c 02                	cmp    al,0x2
c001ef6d:	75 1b                	jne    c001ef8a <ATAPI::detectMedia()+0x9c>
c001ef6f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001ef74:	75 2d                	jne    c001efa3 <ATAPI::detectMedia()+0xb5>
c001ef76:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ef7d:	74 24                	je     c001efa3 <ATAPI::detectMedia()+0xb5>
c001ef7f:	83 ec 0c             	sub    esp,0xc
c001ef82:	53                   	push   ebx
c001ef83:	e8 d4 fe ff ff       	call   c001ee5c <ATAPI::diskRemoved()>
c001ef88:	eb 16                	jmp    c001efa0 <ATAPI::detectMedia()+0xb2>
c001ef8a:	84 c0                	test   al,al
c001ef8c:	75 15                	jne    c001efa3 <ATAPI::detectMedia()+0xb5>
c001ef8e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ef95:	75 0c                	jne    c001efa3 <ATAPI::detectMedia()+0xb5>
c001ef97:	83 ec 0c             	sub    esp,0xc
c001ef9a:	53                   	push   ebx
c001ef9b:	e8 20 ff ff ff       	call   c001eec0 <ATAPI::diskInserted()>
c001efa0:	83 c4 10             	add    esp,0x10
c001efa3:	83 c4 24             	add    esp,0x24
c001efa6:	5b                   	pop    ebx
c001efa7:	5e                   	pop    esi
c001efa8:	c3                   	ret    
c001efa9:	90                   	nop

c001efaa <ATAPI::open(int, int, void*)>:
c001efaa:	53                   	push   ebx
c001efab:	83 ec 08             	sub    esp,0x8
c001efae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001efb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001efb6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001efba:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001efc0:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001efc6:	c1 e0 06             	shl    eax,0x6
c001efc9:	01 d0                	add    eax,edx
c001efcb:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001efd2:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001efd8:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001efdf:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001efe9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001efef:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001eff6:	6a 04                	push   0x4
c001eff8:	6a 0c                	push   0xc
c001effa:	51                   	push   ecx
c001effb:	52                   	push   edx
c001effc:	e8 51 e6 ff ff       	call   c001d652 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f001:	90                   	nop
c001f002:	90                   	nop
c001f003:	6a 00                	push   0x0
c001f005:	6a 0c                	push   0xc
c001f007:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f00e:	50                   	push   eax
c001f00f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f015:	e8 38 e6 ff ff       	call   c001d652 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f01a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001f021:	83 c4 14             	add    esp,0x14
c001f024:	53                   	push   ebx
c001f025:	e8 c4 fe ff ff       	call   c001eeee <ATAPI::detectMedia()>
c001f02a:	31 c0                	xor    eax,eax
c001f02c:	83 c4 18             	add    esp,0x18
c001f02f:	5b                   	pop    ebx
c001f030:	c3                   	ret    
c001f031:	90                   	nop

c001f032 <ATAPI::read(unsigned long long, int, void*)>:
c001f032:	55                   	push   ebp
c001f033:	57                   	push   edi
c001f034:	56                   	push   esi
c001f035:	53                   	push   ebx
c001f036:	83 ec 1c             	sub    esp,0x1c
c001f039:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f03d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f041:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001f045:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001f04c:	74 41                	je     c001f08f <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001f04e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f052:	b9 03 00 00 00       	mov    ecx,0x3
c001f057:	fc                   	cld    
c001f058:	31 c0                	xor    eax,eax
c001f05a:	86 fb                	xchg   bl,bh
c001f05c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f05e:	c1 c3 10             	rol    ebx,0x10
c001f061:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001f066:	89 e8                	mov    eax,ebp
c001f068:	86 fb                	xchg   bl,bh
c001f06a:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001f06e:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001f072:	50                   	push   eax
c001f073:	50                   	push   eax
c001f074:	55                   	push   ebp
c001f075:	c1 e5 0b             	shl    ebp,0xb
c001f078:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f07c:	6a 00                	push   0x0
c001f07e:	55                   	push   ebp
c001f07f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f083:	50                   	push   eax
c001f084:	56                   	push   esi
c001f085:	e8 12 fb ff ff       	call   c001eb9c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f08a:	83 c4 20             	add    esp,0x20
c001f08d:	eb 1a                	jmp    c001f0a9 <ATAPI::read(unsigned long long, int, void*)+0x77>
c001f08f:	83 ec 0c             	sub    esp,0xc
c001f092:	56                   	push   esi
c001f093:	e8 56 fe ff ff       	call   c001eeee <ATAPI::detectMedia()>
c001f098:	83 c4 10             	add    esp,0x10
c001f09b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001f0a2:	75 aa                	jne    c001f04e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001f0a4:	b8 02 00 00 00       	mov    eax,0x2
c001f0a9:	83 c4 1c             	add    esp,0x1c
c001f0ac:	5b                   	pop    ebx
c001f0ad:	5e                   	pop    esi
c001f0ae:	5f                   	pop    edi
c001f0af:	5d                   	pop    ebp
c001f0b0:	c3                   	ret    
c001f0b1:	90                   	nop

c001f0b2 <SATA::close(int, int, void*)>:
c001f0b2:	83 ec 0c             	sub    esp,0xc
c001f0b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0b9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f0bf:	85 c0                	test   eax,eax
c001f0c1:	74 0c                	je     c001f0cf <SATA::close(int, int, void*)+0x1d>
c001f0c3:	83 ec 0c             	sub    esp,0xc
c001f0c6:	8b 10                	mov    edx,DWORD PTR [eax]
c001f0c8:	50                   	push   eax
c001f0c9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f0cc:	83 c4 10             	add    esp,0x10
c001f0cf:	31 c0                	xor    eax,eax
c001f0d1:	83 c4 0c             	add    esp,0xc
c001f0d4:	c3                   	ret    
c001f0d5:	90                   	nop

c001f0d6 <SATA::powerSaving(PowerSavingLevel)>:
c001f0d6:	c3                   	ret    
c001f0d7:	90                   	nop

c001f0d8 <SATA::open(int, int, void*)>:
c001f0d8:	56                   	push   esi
c001f0d9:	53                   	push   ebx
c001f0da:	50                   	push   eax
c001f0db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f0df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f0e3:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f0ed:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f0f3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f0fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f101:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f10b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f111:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f118:	e8 0a ad fe ff       	call   c0009e27 <Phys::allocatePage()>
c001f11d:	89 c6                	mov    esi,eax
c001f11f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f125:	81 c6 00 10 00 00    	add    esi,0x1000
c001f12b:	e8 f7 ac fe ff       	call   c0009e27 <Phys::allocatePage()>
c001f130:	39 c6                	cmp    esi,eax
c001f132:	74 10                	je     c001f144 <SATA::open(int, int, void*)+0x6c>
c001f134:	83 ec 0c             	sub    esp,0xc
c001f137:	68 00 4f 02 c0       	push   0xc0024f00
c001f13c:	e8 be 51 ff ff       	call   c00142ff <Krnl::panic(char const*)>
c001f141:	83 c4 10             	add    esp,0x10
c001f144:	83 ec 0c             	sub    esp,0xc
c001f147:	6a 02                	push   0x2
c001f149:	e8 eb c5 fe ff       	call   c000b739 <Virt::allocateKernelVirtualPages(int)>
c001f14e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f154:	6a 03                	push   0x3
c001f156:	50                   	push   eax
c001f157:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001f15d:	ff 35 90 62 02 c0    	push   DWORD PTR ds:0xc0026290
c001f163:	e8 78 cc fe ff       	call   c000bde0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001f168:	83 c4 14             	add    esp,0x14
c001f16b:	53                   	push   ebx
c001f16c:	e8 d5 f1 fe ff       	call   c000e346 <PhysicalDisk::startCache()>
c001f171:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f174:	e8 09 12 ff ff       	call   c0010382 <createPartitionsForDisk(PhysicalDisk*)>
c001f179:	83 c4 14             	add    esp,0x14
c001f17c:	31 c0                	xor    eax,eax
c001f17e:	5b                   	pop    ebx
c001f17f:	5e                   	pop    esi
c001f180:	c3                   	ret    
c001f181:	90                   	nop

c001f182 <SATA::SATA()>:
c001f182:	83 ec 0c             	sub    esp,0xc
c001f185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f189:	83 ec 04             	sub    esp,0x4
c001f18c:	68 00 02 00 00       	push   0x200
c001f191:	68 14 4f 02 c0       	push   0xc0024f14
c001f196:	50                   	push   eax
c001f197:	e8 42 f1 fe ff       	call   c000e2de <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f19c:	83 c4 10             	add    esp,0x10
c001f19f:	ba 84 4f 02 c0       	mov    edx,0xc0024f84
c001f1a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1a8:	89 10                	mov    DWORD PTR [eax],edx
c001f1aa:	90                   	nop
c001f1ab:	83 c4 0c             	add    esp,0xc
c001f1ae:	c3                   	ret    
c001f1af:	90                   	nop

c001f1b0 <SATA::access(unsigned long long, int, void*, bool)>:
c001f1b0:	55                   	push   ebp
c001f1b1:	57                   	push   edi
c001f1b2:	56                   	push   esi
c001f1b3:	53                   	push   ebx
c001f1b4:	83 ec 2c             	sub    esp,0x2c
c001f1b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f1bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f1bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f1c3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f1c7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f1cb:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001f1d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f1d4:	7e 10                	jle    c001f1e6 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001f1d6:	83 ec 0c             	sub    esp,0xc
c001f1d9:	68 24 4f 02 c0       	push   0xc0024f24
c001f1de:	e8 1c 51 ff ff       	call   c00142ff <Krnl::panic(char const*)>
c001f1e3:	83 c4 10             	add    esp,0x10
c001f1e6:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f1ec:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001f1f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f1fc:	89 d0                	mov    eax,edx
c001f1fe:	c1 e0 07             	shl    eax,0x7
c001f201:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f205:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f20f:	51                   	push   ecx
c001f210:	8d 42 02             	lea    eax,[edx+0x2]
c001f213:	51                   	push   ecx
c001f214:	c1 e0 07             	shl    eax,0x7
c001f217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001f21b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f21f:	50                   	push   eax
c001f220:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001f226:	e8 9f ef ff ff       	call   c001e1ca <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f22b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f22f:	83 c4 10             	add    esp,0x10
c001f232:	b8 01 00 00 00       	mov    eax,0x1
c001f237:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001f23c:	0f 84 cb 01 00 00    	je     c001f40d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f242:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f246:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f24a:	c1 e0 09             	shl    eax,0x9
c001f24d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f252:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f256:	74 0e                	je     c001f266 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c001f258:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001f25e:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f262:	89 c1                	mov    ecx,eax
c001f264:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f266:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f26a:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f270:	8d 42 02             	lea    eax,[edx+0x2]
c001f273:	c1 e0 07             	shl    eax,0x7
c001f276:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f27a:	8b 00                	mov    eax,DWORD PTR [eax]
c001f27c:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f282:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f288:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f28c:	c1 e1 05             	shl    ecx,0x5
c001f28f:	01 c8                	add    eax,ecx
c001f291:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001f295:	83 e1 01             	and    ecx,0x1
c001f298:	89 ce                	mov    esi,ecx
c001f29a:	8a 08                	mov    cl,BYTE PTR [eax]
c001f29c:	c1 e6 06             	shl    esi,0x6
c001f29f:	83 e1 bf             	and    ecx,0xffffffbf
c001f2a2:	09 f1                	or     ecx,esi
c001f2a4:	88 08                	mov    BYTE PTR [eax],cl
c001f2a6:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f2a8:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001f2ae:	81 c9 05 00 01 00    	or     ecx,0x10005
c001f2b4:	89 08                	mov    DWORD PTR [eax],ecx
c001f2b6:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f2bc:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001f2c2:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001f2c8:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001f2cb:	50                   	push   eax
c001f2cc:	68 90 00 00 00       	push   0x90
c001f2d1:	6a 00                	push   0x0
c001f2d3:	56                   	push   esi
c001f2d4:	e8 ab 13 fe ff       	call   c0000684 <memset>
c001f2d9:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f2df:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001f2e3:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001f2e9:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001f2ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f2f1:	83 c4 10             	add    esp,0x10
c001f2f4:	48                   	dec    eax
c001f2f5:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f2fa:	89 c1                	mov    ecx,eax
c001f2fc:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001f302:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f307:	09 c8                	or     eax,ecx
c001f309:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001f30f:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f312:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001f319:	66 25 00 7f          	and    ax,0x7f00
c001f31d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f321:	66 0d 27 80          	or     ax,0x8027
c001f325:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001f32a:	66 89 06             	mov    WORD PTR [esi],ax
c001f32d:	19 c0                	sbb    eax,eax
c001f32f:	83 e0 f0             	and    eax,0xfffffff0
c001f332:	83 c0 35             	add    eax,0x35
c001f335:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001f338:	89 e8                	mov    eax,ebp
c001f33a:	c1 e8 10             	shr    eax,0x10
c001f33d:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001f340:	89 e8                	mov    eax,ebp
c001f342:	c1 e8 18             	shr    eax,0x18
c001f345:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001f348:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f34c:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001f34f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f353:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001f356:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f35a:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001f35e:	89 d6                	mov    esi,edx
c001f360:	31 c0                	xor    eax,eax
c001f362:	c1 e6 07             	shl    esi,0x7
c001f365:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001f369:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001f36f:	80 e1 88             	and    cl,0x88
c001f372:	74 0a                	je     c001f37e <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c001f374:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f379:	74 0a                	je     c001f385 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c001f37b:	40                   	inc    eax
c001f37c:	eb eb                	jmp    c001f369 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c001f37e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f383:	75 0a                	jne    c001f38f <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001f385:	83 ec 0c             	sub    esp,0xc
c001f388:	68 5d 4f 02 c0       	push   0xc0024f5d
c001f38d:	eb 56                	jmp    c001f3e5 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c001f38f:	b8 01 00 00 00       	mov    eax,0x1
c001f394:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001f398:	c1 e2 07             	shl    edx,0x7
c001f39b:	d3 e0                	shl    eax,cl
c001f39d:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001f3a1:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001f3a7:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001f3ad:	85 c8                	test   eax,ecx
c001f3af:	74 20                	je     c001f3d1 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c001f3b1:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001f3b7:	0f ba e1 1e          	bt     ecx,0x1e
c001f3bb:	73 ea                	jae    c001f3a7 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c001f3bd:	83 ec 0c             	sub    esp,0xc
c001f3c0:	68 6b 4f 02 c0       	push   0xc0024f6b
c001f3c5:	e8 35 4f ff ff       	call   c00142ff <Krnl::panic(char const*)>
c001f3ca:	83 c4 10             	add    esp,0x10
c001f3cd:	31 c0                	xor    eax,eax
c001f3cf:	eb 3c                	jmp    c001f40d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f3d1:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001f3d7:	0f ba e0 1e          	bt     eax,0x1e
c001f3db:	73 17                	jae    c001f3f4 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001f3dd:	83 ec 0c             	sub    esp,0xc
c001f3e0:	68 6b 4f 02 c0       	push   0xc0024f6b
c001f3e5:	e8 15 4f ff ff       	call   c00142ff <Krnl::panic(char const*)>
c001f3ea:	83 c4 10             	add    esp,0x10
c001f3ed:	b8 01 00 00 00       	mov    eax,0x1
c001f3f2:	eb 19                	jmp    c001f40d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f3f4:	31 c0                	xor    eax,eax
c001f3f6:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f3fb:	75 10                	jne    c001f40d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f3fd:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001f403:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001f407:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f40b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f40d:	83 c4 2c             	add    esp,0x2c
c001f410:	5b                   	pop    ebx
c001f411:	5e                   	pop    esi
c001f412:	5f                   	pop    edi
c001f413:	5d                   	pop    ebp
c001f414:	c3                   	ret    
c001f415:	90                   	nop

c001f416 <SATA::read(unsigned long long, int, void*)>:
c001f416:	57                   	push   edi
c001f417:	b8 04 00 00 00       	mov    eax,0x4
c001f41c:	56                   	push   esi
c001f41d:	53                   	push   ebx
c001f41e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f422:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f426:	8d 7a ff             	lea    edi,[edx-0x1]
c001f429:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f42d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f431:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f437:	77 25                	ja     c001f45e <SATA::read(unsigned long long, int, void*)+0x48>
c001f439:	b8 06 00 00 00       	mov    eax,0x6
c001f43e:	85 f6                	test   esi,esi
c001f440:	74 1c                	je     c001f45e <SATA::read(unsigned long long, int, void*)+0x48>
c001f442:	50                   	push   eax
c001f443:	50                   	push   eax
c001f444:	6a 00                	push   0x0
c001f446:	56                   	push   esi
c001f447:	52                   	push   edx
c001f448:	53                   	push   ebx
c001f449:	51                   	push   ecx
c001f44a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f44e:	e8 5d fd ff ff       	call   c001f1b0 <SATA::access(unsigned long long, int, void*, bool)>
c001f453:	83 c4 20             	add    esp,0x20
c001f456:	85 c0                	test   eax,eax
c001f458:	0f 95 c0             	setne  al
c001f45b:	0f b6 c0             	movzx  eax,al
c001f45e:	5b                   	pop    ebx
c001f45f:	5e                   	pop    esi
c001f460:	5f                   	pop    edi
c001f461:	c3                   	ret    

c001f462 <SATA::write(unsigned long long, int, void*)>:
c001f462:	55                   	push   ebp
c001f463:	b8 04 00 00 00       	mov    eax,0x4
c001f468:	57                   	push   edi
c001f469:	56                   	push   esi
c001f46a:	53                   	push   ebx
c001f46b:	83 ec 0c             	sub    esp,0xc
c001f46e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f472:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f476:	8d 73 ff             	lea    esi,[ebx-0x1]
c001f479:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001f47d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f481:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001f487:	77 3d                	ja     c001f4c6 <SATA::write(unsigned long long, int, void*)+0x64>
c001f489:	b8 06 00 00 00       	mov    eax,0x6
c001f48e:	85 ed                	test   ebp,ebp
c001f490:	74 34                	je     c001f4c6 <SATA::write(unsigned long long, int, void*)+0x64>
c001f492:	c1 e3 09             	shl    ebx,0x9
c001f495:	01 eb                	add    ebx,ebp
c001f497:	89 d6                	mov    esi,edx
c001f499:	89 cf                	mov    edi,ecx
c001f49b:	83 c6 01             	add    esi,0x1
c001f49e:	83 d7 00             	adc    edi,0x0
c001f4a1:	50                   	push   eax
c001f4a2:	50                   	push   eax
c001f4a3:	6a 01                	push   0x1
c001f4a5:	55                   	push   ebp
c001f4a6:	81 c5 00 02 00 00    	add    ebp,0x200
c001f4ac:	6a 01                	push   0x1
c001f4ae:	51                   	push   ecx
c001f4af:	52                   	push   edx
c001f4b0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f4b4:	e8 f7 fc ff ff       	call   c001f1b0 <SATA::access(unsigned long long, int, void*, bool)>
c001f4b9:	83 c4 20             	add    esp,0x20
c001f4bc:	89 f2                	mov    edx,esi
c001f4be:	89 f9                	mov    ecx,edi
c001f4c0:	39 dd                	cmp    ebp,ebx
c001f4c2:	75 d3                	jne    c001f497 <SATA::write(unsigned long long, int, void*)+0x35>
c001f4c4:	31 c0                	xor    eax,eax
c001f4c6:	83 c4 0c             	add    esp,0xc
c001f4c9:	5b                   	pop    ebx
c001f4ca:	5e                   	pop    esi
c001f4cb:	5f                   	pop    edi
c001f4cc:	5d                   	pop    ebp
c001f4cd:	c3                   	ret    

c001f4ce <SATAPI::write(unsigned long long, int, void*)>:
c001f4ce:	b8 03 00 00 00       	mov    eax,0x3
c001f4d3:	c3                   	ret    

c001f4d4 <SATAPI::close(int, int, void*)>:
c001f4d4:	83 ec 0c             	sub    esp,0xc
c001f4d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4db:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f4e1:	85 c0                	test   eax,eax
c001f4e3:	74 0c                	je     c001f4f1 <SATAPI::close(int, int, void*)+0x1d>
c001f4e5:	83 ec 0c             	sub    esp,0xc
c001f4e8:	8b 10                	mov    edx,DWORD PTR [eax]
c001f4ea:	50                   	push   eax
c001f4eb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f4ee:	83 c4 10             	add    esp,0x10
c001f4f1:	31 c0                	xor    eax,eax
c001f4f3:	83 c4 0c             	add    esp,0xc
c001f4f6:	c3                   	ret    
c001f4f7:	90                   	nop

c001f4f8 <SATAPI::SATAPI()>:
c001f4f8:	83 ec 0c             	sub    esp,0xc
c001f4fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4ff:	83 ec 04             	sub    esp,0x4
c001f502:	68 00 08 00 00       	push   0x800
c001f507:	68 b4 4f 02 c0       	push   0xc0024fb4
c001f50c:	50                   	push   eax
c001f50d:	e8 cc ed fe ff       	call   c000e2de <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f512:	83 c4 10             	add    esp,0x10
c001f515:	ba 60 50 02 c0       	mov    edx,0xc0025060
c001f51a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f51e:	89 10                	mov    DWORD PTR [eax],edx
c001f520:	90                   	nop
c001f521:	83 c4 0c             	add    esp,0xc
c001f524:	c3                   	ret    
c001f525:	90                   	nop

c001f526 <SATAPI::diskRemoved()>:
c001f526:	83 ec 18             	sub    esp,0x18
c001f529:	68 c0 4f 02 c0       	push   0xc0024fc0
c001f52e:	e8 2c d5 fe ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001f533:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f537:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c001f53e:	83 c4 1c             	add    esp,0x1c
c001f541:	c3                   	ret    

c001f542 <SATAPI::diskInserted()>:
c001f542:	53                   	push   ebx
c001f543:	83 ec 14             	sub    esp,0x14
c001f546:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f54a:	68 d7 4f 02 c0       	push   0xc0024fd7
c001f54f:	e8 0b d5 fe ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001f554:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c001f55b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f55e:	e8 e3 ed fe ff       	call   c000e346 <PhysicalDisk::startCache()>
c001f563:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001f567:	83 c4 18             	add    esp,0x18
c001f56a:	5b                   	pop    ebx
c001f56b:	e9 12 0e ff ff       	jmp    c0010382 <createPartitionsForDisk(PhysicalDisk*)>

c001f570 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001f570:	55                   	push   ebp
c001f571:	57                   	push   edi
c001f572:	56                   	push   esi
c001f573:	53                   	push   ebx
c001f574:	83 ec 34             	sub    esp,0x34
c001f577:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001f57b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f57f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001f583:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f587:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001f58b:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001f591:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f597:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f59b:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001f5a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f5a5:	c1 e0 07             	shl    eax,0x7
c001f5a8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f5ac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f5b0:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f5ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f5be:	8d 58 02             	lea    ebx,[eax+0x2]
c001f5c1:	c1 e3 07             	shl    ebx,0x7
c001f5c4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001f5c8:	53                   	push   ebx
c001f5c9:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001f5cf:	e8 f6 eb ff ff       	call   c001e1ca <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f5d4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f5d8:	83 c4 10             	add    esp,0x10
c001f5db:	b8 01 00 00 00       	mov    eax,0x1
c001f5e0:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001f5e5:	0f 84 85 01 00 00    	je     c001f770 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c001f5eb:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f5f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f5f3:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f5f9:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f5ff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f603:	c1 e1 05             	shl    ecx,0x5
c001f606:	01 c8                	add    eax,ecx
c001f608:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f60a:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001f610:	81 c9 25 00 01 00    	or     ecx,0x10025
c001f616:	89 08                	mov    DWORD PTR [eax],ecx
c001f618:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f61e:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001f624:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001f62a:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001f62d:	8d 7b 40             	lea    edi,[ebx+0x40]
c001f630:	50                   	push   eax
c001f631:	68 90 00 00 00       	push   0x90
c001f636:	6a 00                	push   0x0
c001f638:	53                   	push   ebx
c001f639:	e8 46 10 fe ff       	call   c0000684 <memset>
c001f63e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001f642:	b9 0c 00 00 00       	mov    ecx,0xc
c001f647:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f649:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c001f64f:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001f653:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001f659:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001f65d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f661:	48                   	dec    eax
c001f662:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f667:	89 c1                	mov    ecx,eax
c001f669:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001f66f:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f674:	09 c8                	or     eax,ecx
c001f676:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001f67c:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001f67f:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001f686:	66 25 00 7f          	and    ax,0x7f00
c001f68a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001f68e:	66 0d 27 80          	or     ax,0x8027
c001f692:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001f696:	66 89 03             	mov    WORD PTR [ebx],ax
c001f699:	89 d0                	mov    eax,edx
c001f69b:	c1 ea 18             	shr    edx,0x18
c001f69e:	c1 e8 10             	shr    eax,0x10
c001f6a1:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001f6a4:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001f6a7:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001f6ab:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001f6ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f6b2:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001f6b5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f6b9:	83 c4 10             	add    esp,0x10
c001f6bc:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001f6c0:	31 c0                	xor    eax,eax
c001f6c2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f6c6:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c001f6cc:	80 e2 88             	and    dl,0x88
c001f6cf:	74 0a                	je     c001f6db <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001f6d1:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f6d6:	74 0a                	je     c001f6e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c001f6d8:	40                   	inc    eax
c001f6d9:	eb eb                	jmp    c001f6c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c001f6db:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f6e0:	75 0f                	jne    c001f6f1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c001f6e2:	83 ec 0c             	sub    esp,0xc
c001f6e5:	68 5d 4f 02 c0       	push   0xc0024f5d
c001f6ea:	e8 10 4c ff ff       	call   c00142ff <Krnl::panic(char const*)>
c001f6ef:	eb 3f                	jmp    c001f730 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c001f6f1:	ba 01 00 00 00       	mov    edx,0x1
c001f6f6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001f6fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f6fe:	d3 e2                	shl    edx,cl
c001f700:	c1 e0 07             	shl    eax,0x7
c001f703:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c001f709:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f70d:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c001f713:	85 ca                	test   edx,ecx
c001f715:	74 23                	je     c001f73a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001f717:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c001f71d:	0f ba e1 1e          	bt     ecx,0x1e
c001f721:	73 ea                	jae    c001f70d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c001f723:	83 ec 0c             	sub    esp,0xc
c001f726:	68 ef 4f 02 c0       	push   0xc0024fef
c001f72b:	e8 2f d3 fe ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001f730:	83 c4 10             	add    esp,0x10
c001f733:	b8 01 00 00 00       	mov    eax,0x1
c001f738:	eb 36                	jmp    c001f770 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c001f73a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001f740:	0f ba e0 1e          	bt     eax,0x1e
c001f744:	73 0a                	jae    c001f750 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c001f746:	83 ec 0c             	sub    esp,0xc
c001f749:	68 02 50 02 c0       	push   0xc0025002
c001f74e:	eb db                	jmp    c001f72b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c001f750:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001f755:	74 17                	je     c001f76e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c001f757:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001f75c:	74 10                	je     c001f76e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c001f75e:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c001f764:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f768:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001f76c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f76e:	31 c0                	xor    eax,eax
c001f770:	83 c4 2c             	add    esp,0x2c
c001f773:	5b                   	pop    ebx
c001f774:	5e                   	pop    esi
c001f775:	5f                   	pop    edi
c001f776:	5d                   	pop    ebp
c001f777:	c3                   	ret    

c001f778 <SATAPI::eject()>:
c001f778:	57                   	push   edi
c001f779:	b9 03 00 00 00       	mov    ecx,0x3
c001f77e:	53                   	push   ebx
c001f77f:	83 ec 14             	sub    esp,0x14
c001f782:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001f786:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f78a:	fc                   	cld    
c001f78b:	31 c0                	xor    eax,eax
c001f78d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f78f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001f794:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001f799:	50                   	push   eax
c001f79a:	6a 00                	push   0x0
c001f79c:	6a 00                	push   0x0
c001f79e:	6a 00                	push   0x0
c001f7a0:	6a 00                	push   0x0
c001f7a2:	6a 02                	push   0x2
c001f7a4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f7a8:	50                   	push   eax
c001f7a9:	53                   	push   ebx
c001f7aa:	e8 c1 fd ff ff       	call   c001f570 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f7af:	83 c4 14             	add    esp,0x14
c001f7b2:	53                   	push   ebx
c001f7b3:	e8 6e fd ff ff       	call   c001f526 <SATAPI::diskRemoved()>
c001f7b8:	83 c4 24             	add    esp,0x24
c001f7bb:	31 c0                	xor    eax,eax
c001f7bd:	5b                   	pop    ebx
c001f7be:	5f                   	pop    edi
c001f7bf:	c3                   	ret    

c001f7c0 <SATAPI::detectMedia()>:
c001f7c0:	56                   	push   esi
c001f7c1:	53                   	push   ebx
c001f7c2:	83 ec 28             	sub    esp,0x28
c001f7c5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f7c9:	6a 0c                	push   0xc
c001f7cb:	6a 00                	push   0x0
c001f7cd:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001f7d1:	56                   	push   esi
c001f7d2:	e8 ad 0e fe ff       	call   c0000684 <memset>
c001f7d7:	83 c4 0c             	add    esp,0xc
c001f7da:	6a 00                	push   0x0
c001f7dc:	6a 00                	push   0x0
c001f7de:	6a 00                	push   0x0
c001f7e0:	6a 00                	push   0x0
c001f7e2:	6a 00                	push   0x0
c001f7e4:	56                   	push   esi
c001f7e5:	53                   	push   ebx
c001f7e6:	e8 85 fd ff ff       	call   c001f570 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f7eb:	83 c4 1c             	add    esp,0x1c
c001f7ee:	6a 0c                	push   0xc
c001f7f0:	6a 00                	push   0x0
c001f7f2:	56                   	push   esi
c001f7f3:	e8 8c 0e fe ff       	call   c0000684 <memset>
c001f7f8:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001f7fd:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001f802:	83 c4 0c             	add    esp,0xc
c001f805:	6a 01                	push   0x1
c001f807:	8d 44 24 16          	lea    eax,[esp+0x16]
c001f80b:	50                   	push   eax
c001f80c:	6a 00                	push   0x0
c001f80e:	6a 00                	push   0x0
c001f810:	6a 12                	push   0x12
c001f812:	56                   	push   esi
c001f813:	53                   	push   ebx
c001f814:	e8 57 fd ff ff       	call   c001f570 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f819:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001f81d:	83 c4 20             	add    esp,0x20
c001f820:	83 e0 7f             	and    eax,0x7f
c001f823:	3c 70                	cmp    al,0x70
c001f825:	74 15                	je     c001f83c <SATAPI::detectMedia()+0x7c>
c001f827:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f82e:	75 0c                	jne    c001f83c <SATAPI::detectMedia()+0x7c>
c001f830:	83 ec 0c             	sub    esp,0xc
c001f833:	53                   	push   ebx
c001f834:	e8 09 fd ff ff       	call   c001f542 <SATAPI::diskInserted()>
c001f839:	83 c4 10             	add    esp,0x10
c001f83c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f840:	83 e0 0f             	and    eax,0xf
c001f843:	3c 02                	cmp    al,0x2
c001f845:	75 1b                	jne    c001f862 <SATAPI::detectMedia()+0xa2>
c001f847:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001f84c:	75 2d                	jne    c001f87b <SATAPI::detectMedia()+0xbb>
c001f84e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f855:	74 24                	je     c001f87b <SATAPI::detectMedia()+0xbb>
c001f857:	83 ec 0c             	sub    esp,0xc
c001f85a:	53                   	push   ebx
c001f85b:	e8 c6 fc ff ff       	call   c001f526 <SATAPI::diskRemoved()>
c001f860:	eb 16                	jmp    c001f878 <SATAPI::detectMedia()+0xb8>
c001f862:	84 c0                	test   al,al
c001f864:	75 15                	jne    c001f87b <SATAPI::detectMedia()+0xbb>
c001f866:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f86d:	75 0c                	jne    c001f87b <SATAPI::detectMedia()+0xbb>
c001f86f:	83 ec 0c             	sub    esp,0xc
c001f872:	53                   	push   ebx
c001f873:	e8 ca fc ff ff       	call   c001f542 <SATAPI::diskInserted()>
c001f878:	83 c4 10             	add    esp,0x10
c001f87b:	83 c4 24             	add    esp,0x24
c001f87e:	5b                   	pop    ebx
c001f87f:	5e                   	pop    esi
c001f880:	c3                   	ret    
c001f881:	90                   	nop

c001f882 <SATAPI::open(int, int, void*)>:
c001f882:	56                   	push   esi
c001f883:	53                   	push   ebx
c001f884:	50                   	push   eax
c001f885:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f88d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f897:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f89d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f8a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f8ab:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f8b5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f8bb:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f8c2:	e8 60 a5 fe ff       	call   c0009e27 <Phys::allocatePage()>
c001f8c7:	89 c6                	mov    esi,eax
c001f8c9:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f8cf:	81 c6 00 10 00 00    	add    esi,0x1000
c001f8d5:	e8 4d a5 fe ff       	call   c0009e27 <Phys::allocatePage()>
c001f8da:	39 c6                	cmp    esi,eax
c001f8dc:	74 10                	je     c001f8ee <SATAPI::open(int, int, void*)+0x6c>
c001f8de:	83 ec 0c             	sub    esp,0xc
c001f8e1:	68 17 50 02 c0       	push   0xc0025017
c001f8e6:	e8 14 4a ff ff       	call   c00142ff <Krnl::panic(char const*)>
c001f8eb:	83 c4 10             	add    esp,0x10
c001f8ee:	83 ec 0c             	sub    esp,0xc
c001f8f1:	6a 02                	push   0x2
c001f8f3:	e8 41 be fe ff       	call   c000b739 <Virt::allocateKernelVirtualPages(int)>
c001f8f8:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001f8fe:	6a 03                	push   0x3
c001f900:	50                   	push   eax
c001f901:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c001f907:	ff 35 90 62 02 c0    	push   DWORD PTR ds:0xc0026290
c001f90d:	e8 ce c4 fe ff       	call   c000bde0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001f912:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001f919:	83 c4 14             	add    esp,0x14
c001f91c:	53                   	push   ebx
c001f91d:	e8 9e fe ff ff       	call   c001f7c0 <SATAPI::detectMedia()>
c001f922:	83 c4 14             	add    esp,0x14
c001f925:	31 c0                	xor    eax,eax
c001f927:	5b                   	pop    ebx
c001f928:	5e                   	pop    esi
c001f929:	c3                   	ret    

c001f92a <SATAPI::read(unsigned long long, int, void*)>:
c001f92a:	55                   	push   ebp
c001f92b:	57                   	push   edi
c001f92c:	56                   	push   esi
c001f92d:	53                   	push   ebx
c001f92e:	83 ec 1c             	sub    esp,0x1c
c001f931:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f935:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f939:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f93d:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c001f944:	74 19                	je     c001f95f <SATAPI::read(unsigned long long, int, void*)+0x35>
c001f946:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c001f94b:	7e 2e                	jle    c001f97b <SATAPI::read(unsigned long long, int, void*)+0x51>
c001f94d:	83 ec 0c             	sub    esp,0xc
c001f950:	68 2d 50 02 c0       	push   0xc002502d
c001f955:	e8 a5 49 ff ff       	call   c00142ff <Krnl::panic(char const*)>
c001f95a:	83 c4 10             	add    esp,0x10
c001f95d:	eb 1c                	jmp    c001f97b <SATAPI::read(unsigned long long, int, void*)+0x51>
c001f95f:	83 ec 0c             	sub    esp,0xc
c001f962:	55                   	push   ebp
c001f963:	e8 58 fe ff ff       	call   c001f7c0 <SATAPI::detectMedia()>
c001f968:	83 c4 10             	add    esp,0x10
c001f96b:	b8 02 00 00 00       	mov    eax,0x2
c001f970:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c001f977:	75 cd                	jne    c001f946 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c001f979:	eb 49                	jmp    c001f9c4 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c001f97b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f97f:	b9 03 00 00 00       	mov    ecx,0x3
c001f984:	fc                   	cld    
c001f985:	31 c0                	xor    eax,eax
c001f987:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f989:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001f98e:	89 d8                	mov    eax,ebx
c001f990:	86 e0                	xchg   al,ah
c001f992:	c1 c0 10             	rol    eax,0x10
c001f995:	86 e0                	xchg   al,ah
c001f997:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c001f99b:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001f99f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001f9a3:	50                   	push   eax
c001f9a4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001f9a8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f9ac:	56                   	push   esi
c001f9ad:	53                   	push   ebx
c001f9ae:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f9b2:	c1 e0 0b             	shl    eax,0xb
c001f9b5:	50                   	push   eax
c001f9b6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f9ba:	50                   	push   eax
c001f9bb:	55                   	push   ebp
c001f9bc:	e8 af fb ff ff       	call   c001f570 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f9c1:	83 c4 20             	add    esp,0x20
c001f9c4:	83 c4 1c             	add    esp,0x1c
c001f9c7:	5b                   	pop    ebx
c001f9c8:	5e                   	pop    esi
c001f9c9:	5f                   	pop    edi
c001f9ca:	5d                   	pop    ebp
c001f9cb:	c3                   	ret    

c001f9cc <AVX::open(int, int, void*)>:
c001f9cc:	83 ec 0c             	sub    esp,0xc
c001f9cf:	e8 34 11 00 00       	call   c0020b08 <avxInit>
c001f9d4:	b8 00 00 00 00       	mov    eax,0x0
c001f9d9:	83 c4 0c             	add    esp,0xc
c001f9dc:	c3                   	ret    
c001f9dd:	90                   	nop
c001f9de:	66 90                	xchg   ax,ax

c001f9e0 <AVX::close(int, int, void*)>:
c001f9e0:	83 ec 0c             	sub    esp,0xc
c001f9e3:	e8 21 11 00 00       	call   c0020b09 <avxClose>
c001f9e8:	b8 00 00 00 00       	mov    eax,0x0
c001f9ed:	83 c4 0c             	add    esp,0xc
c001f9f0:	c3                   	ret    
c001f9f1:	90                   	nop
c001f9f2:	66 90                	xchg   ax,ax

c001f9f4 <AVX::available()>:
c001f9f4:	83 ec 0c             	sub    esp,0xc
c001f9f7:	e8 04 11 00 00       	call   c0020b00 <avxDetect>
c001f9fc:	85 c0                	test   eax,eax
c001f9fe:	0f 95 c0             	setne  al
c001fa01:	83 c4 0c             	add    esp,0xc
c001fa04:	c3                   	ret    
c001fa05:	90                   	nop
c001fa06:	66 90                	xchg   ax,ax

c001fa08 <AVX::save(void*)>:
c001fa08:	83 ec 0c             	sub    esp,0xc
c001fa0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fa0f:	83 ec 0c             	sub    esp,0xc
c001fa12:	50                   	push   eax
c001fa13:	e8 ee 10 00 00       	call   c0020b06 <avxSave>
c001fa18:	83 c4 10             	add    esp,0x10
c001fa1b:	90                   	nop
c001fa1c:	83 c4 0c             	add    esp,0xc
c001fa1f:	c3                   	ret    

c001fa20 <AVX::load(void*)>:
c001fa20:	83 ec 0c             	sub    esp,0xc
c001fa23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fa27:	83 ec 0c             	sub    esp,0xc
c001fa2a:	50                   	push   eax
c001fa2b:	e8 d7 10 00 00       	call   c0020b07 <avxLoad>
c001fa30:	83 c4 10             	add    esp,0x10
c001fa33:	90                   	nop
c001fa34:	83 c4 0c             	add    esp,0xc
c001fa37:	c3                   	ret    

c001fa38 <AVX::AVX()>:
c001fa38:	83 ec 0c             	sub    esp,0xc
c001fa3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa3f:	83 ec 08             	sub    esp,0x8
c001fa42:	68 90 50 02 c0       	push   0xc0025090
c001fa47:	50                   	push   eax
c001fa48:	e8 6f e9 fe ff       	call   c000e3bc <FPU::FPU(char const*)>
c001fa4d:	83 c4 10             	add    esp,0x10
c001fa50:	ba a0 50 02 c0       	mov    edx,0xc00250a0
c001fa55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa59:	89 10                	mov    DWORD PTR [eax],edx
c001fa5b:	90                   	nop
c001fa5c:	83 c4 0c             	add    esp,0xc
c001fa5f:	c3                   	ret    

c001fa60 <MMX::available()>:
c001fa60:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001fa65:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001fa6b:	83 e0 20             	and    eax,0x20
c001fa6e:	84 c0                	test   al,al
c001fa70:	0f 95 c0             	setne  al
c001fa73:	c3                   	ret    

c001fa74 <MMX::open(int, int, void*)>:
c001fa74:	83 ec 0c             	sub    esp,0xc
c001fa77:	e8 16 11 00 00       	call   c0020b92 <x87Init>
c001fa7c:	b8 00 00 00 00       	mov    eax,0x0
c001fa81:	83 c4 0c             	add    esp,0xc
c001fa84:	c3                   	ret    
c001fa85:	90                   	nop
c001fa86:	66 90                	xchg   ax,ax

c001fa88 <MMX::close(int, int, void*)>:
c001fa88:	83 ec 0c             	sub    esp,0xc
c001fa8b:	e8 1c 11 00 00       	call   c0020bac <x87Close>
c001fa90:	b8 00 00 00 00       	mov    eax,0x0
c001fa95:	83 c4 0c             	add    esp,0xc
c001fa98:	c3                   	ret    
c001fa99:	90                   	nop
c001fa9a:	66 90                	xchg   ax,ax

c001fa9c <MMX::save(void*)>:
c001fa9c:	83 ec 0c             	sub    esp,0xc
c001fa9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001faa3:	83 ec 0c             	sub    esp,0xc
c001faa6:	50                   	push   eax
c001faa7:	e8 d5 10 00 00       	call   c0020b81 <x87Save>
c001faac:	83 c4 10             	add    esp,0x10
c001faaf:	90                   	nop
c001fab0:	83 c4 0c             	add    esp,0xc
c001fab3:	c3                   	ret    

c001fab4 <MMX::load(void*)>:
c001fab4:	83 ec 0c             	sub    esp,0xc
c001fab7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fabb:	83 ec 0c             	sub    esp,0xc
c001fabe:	50                   	push   eax
c001fabf:	e8 c6 10 00 00       	call   c0020b8a <x87Load>
c001fac4:	83 c4 10             	add    esp,0x10
c001fac7:	90                   	nop
c001fac8:	83 c4 0c             	add    esp,0xc
c001facb:	c3                   	ret    

c001facc <MMX::MMX()>:
c001facc:	83 ec 0c             	sub    esp,0xc
c001facf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad3:	83 ec 08             	sub    esp,0x8
c001fad6:	68 d0 50 02 c0       	push   0xc00250d0
c001fadb:	50                   	push   eax
c001fadc:	e8 db e8 fe ff       	call   c000e3bc <FPU::FPU(char const*)>
c001fae1:	83 c4 10             	add    esp,0x10
c001fae4:	ba e0 50 02 c0       	mov    edx,0xc00250e0
c001fae9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faed:	89 10                	mov    DWORD PTR [eax],edx
c001faef:	90                   	nop
c001faf0:	83 c4 0c             	add    esp,0xc
c001faf3:	c3                   	ret    

c001faf4 <SSE::open(int, int, void*)>:
c001faf4:	83 ec 0c             	sub    esp,0xc
c001faf7:	e8 48 10 00 00       	call   c0020b44 <sseInit>
c001fafc:	b8 00 00 00 00       	mov    eax,0x0
c001fb01:	83 c4 0c             	add    esp,0xc
c001fb04:	c3                   	ret    
c001fb05:	90                   	nop
c001fb06:	66 90                	xchg   ax,ax

c001fb08 <SSE::close(int, int, void*)>:
c001fb08:	83 ec 0c             	sub    esp,0xc
c001fb0b:	e8 44 10 00 00       	call   c0020b54 <sseClose>
c001fb10:	b8 00 00 00 00       	mov    eax,0x0
c001fb15:	83 c4 0c             	add    esp,0xc
c001fb18:	c3                   	ret    
c001fb19:	90                   	nop
c001fb1a:	66 90                	xchg   ax,ax

c001fb1c <SSE::available()>:
c001fb1c:	83 ec 1c             	sub    esp,0x1c
c001fb1f:	e8 fc 0f 00 00       	call   c0020b20 <absolutelyNoChanceInHell>
c001fb24:	85 c0                	test   eax,eax
c001fb26:	0f 95 c0             	setne  al
c001fb29:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001fb2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001fb31:	83 c4 1c             	add    esp,0x1c
c001fb34:	c3                   	ret    
c001fb35:	90                   	nop
c001fb36:	66 90                	xchg   ax,ax

c001fb38 <SSE::save(void*)>:
c001fb38:	83 ec 0c             	sub    esp,0xc
c001fb3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fb3f:	83 ec 0c             	sub    esp,0xc
c001fb42:	50                   	push   eax
c001fb43:	e8 f0 0f 00 00       	call   c0020b38 <sseSave>
c001fb48:	83 c4 10             	add    esp,0x10
c001fb4b:	90                   	nop
c001fb4c:	83 c4 0c             	add    esp,0xc
c001fb4f:	c3                   	ret    

c001fb50 <SSE::load(void*)>:
c001fb50:	83 ec 0c             	sub    esp,0xc
c001fb53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fb57:	83 ec 0c             	sub    esp,0xc
c001fb5a:	50                   	push   eax
c001fb5b:	e8 de 0f 00 00       	call   c0020b3e <sseLoad>
c001fb60:	83 c4 10             	add    esp,0x10
c001fb63:	90                   	nop
c001fb64:	83 c4 0c             	add    esp,0xc
c001fb67:	c3                   	ret    

c001fb68 <SSE::SSE()>:
c001fb68:	83 ec 0c             	sub    esp,0xc
c001fb6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb6f:	83 ec 08             	sub    esp,0x8
c001fb72:	68 10 51 02 c0       	push   0xc0025110
c001fb77:	50                   	push   eax
c001fb78:	e8 3f e8 fe ff       	call   c000e3bc <FPU::FPU(char const*)>
c001fb7d:	83 c4 10             	add    esp,0x10
c001fb80:	ba 20 51 02 c0       	mov    edx,0xc0025120
c001fb85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb89:	89 10                	mov    DWORD PTR [eax],edx
c001fb8b:	90                   	nop
c001fb8c:	83 c4 0c             	add    esp,0xc
c001fb8f:	c3                   	ret    

c001fb90 <x87::open(int, int, void*)>:
c001fb90:	83 ec 0c             	sub    esp,0xc
c001fb93:	e8 fa 0f 00 00       	call   c0020b92 <x87Init>
c001fb98:	b8 00 00 00 00       	mov    eax,0x0
c001fb9d:	83 c4 0c             	add    esp,0xc
c001fba0:	c3                   	ret    
c001fba1:	90                   	nop
c001fba2:	66 90                	xchg   ax,ax

c001fba4 <x87::close(int, int, void*)>:
c001fba4:	83 ec 0c             	sub    esp,0xc
c001fba7:	e8 00 10 00 00       	call   c0020bac <x87Close>
c001fbac:	b8 00 00 00 00       	mov    eax,0x0
c001fbb1:	83 c4 0c             	add    esp,0xc
c001fbb4:	c3                   	ret    
c001fbb5:	90                   	nop
c001fbb6:	66 90                	xchg   ax,ax

c001fbb8 <x87::available()>:
c001fbb8:	83 ec 0c             	sub    esp,0xc
c001fbbb:	e8 a6 0f 00 00       	call   c0020b66 <x87Detect>
c001fbc0:	85 c0                	test   eax,eax
c001fbc2:	0f 95 c0             	setne  al
c001fbc5:	83 c4 0c             	add    esp,0xc
c001fbc8:	c3                   	ret    
c001fbc9:	90                   	nop
c001fbca:	66 90                	xchg   ax,ax

c001fbcc <x87::save(void*)>:
c001fbcc:	83 ec 0c             	sub    esp,0xc
c001fbcf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fbd3:	83 ec 0c             	sub    esp,0xc
c001fbd6:	50                   	push   eax
c001fbd7:	e8 a5 0f 00 00       	call   c0020b81 <x87Save>
c001fbdc:	83 c4 10             	add    esp,0x10
c001fbdf:	90                   	nop
c001fbe0:	83 c4 0c             	add    esp,0xc
c001fbe3:	c3                   	ret    

c001fbe4 <x87::load(void*)>:
c001fbe4:	83 ec 0c             	sub    esp,0xc
c001fbe7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fbeb:	83 ec 0c             	sub    esp,0xc
c001fbee:	50                   	push   eax
c001fbef:	e8 96 0f 00 00       	call   c0020b8a <x87Load>
c001fbf4:	83 c4 10             	add    esp,0x10
c001fbf7:	90                   	nop
c001fbf8:	83 c4 0c             	add    esp,0xc
c001fbfb:	c3                   	ret    

c001fbfc <x87::x87()>:
c001fbfc:	83 ec 0c             	sub    esp,0xc
c001fbff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc03:	83 ec 08             	sub    esp,0x8
c001fc06:	68 50 51 02 c0       	push   0xc0025150
c001fc0b:	50                   	push   eax
c001fc0c:	e8 ab e7 fe ff       	call   c000e3bc <FPU::FPU(char const*)>
c001fc11:	83 c4 10             	add    esp,0x10
c001fc14:	ba 60 51 02 c0       	mov    edx,0xc0025160
c001fc19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc1d:	89 10                	mov    DWORD PTR [eax],edx
c001fc1f:	90                   	nop
c001fc20:	83 c4 0c             	add    esp,0xc
c001fc23:	c3                   	ret    

c001fc24 <APIC::disable()>:
c001fc24:	90                   	nop
c001fc25:	c3                   	ret    

c001fc26 <APIC::close(int, int, void*)>:
c001fc26:	55                   	push   ebp
c001fc27:	89 e5                	mov    ebp,esp
c001fc29:	83 ec 08             	sub    esp,0x8
c001fc2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fc2f:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc31:	83 c0 3c             	add    eax,0x3c
c001fc34:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc36:	83 ec 0c             	sub    esp,0xc
c001fc39:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fc3c:	ff d0                	call   eax
c001fc3e:	83 c4 10             	add    esp,0x10
c001fc41:	b8 00 00 00 00       	mov    eax,0x0
c001fc46:	c9                   	leave  
c001fc47:	c3                   	ret    

c001fc48 <IOAPIC::close(int, int, void*)>:
c001fc48:	b8 00 00 00 00       	mov    eax,0x0
c001fc4d:	c3                   	ret    

c001fc4e <APIC::io_wait()>:
c001fc4e:	eb 00                	jmp    c001fc50 <APIC::io_wait()+0x2>
c001fc50:	eb 00                	jmp    c001fc52 <APIC::io_wait()+0x4>
c001fc52:	90                   	nop
c001fc53:	c3                   	ret    

c001fc54 <APIC::getBase()>:
c001fc54:	55                   	push   ebp
c001fc55:	89 e5                	mov    ebp,esp
c001fc57:	83 ec 18             	sub    esp,0x18
c001fc5a:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001fc5f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001fc65:	83 e0 08             	and    eax,0x8
c001fc68:	84 c0                	test   al,al
c001fc6a:	75 07                	jne    c001fc73 <APIC::getBase()+0x1f>
c001fc6c:	b8 00 00 00 00       	mov    eax,0x0
c001fc71:	eb 21                	jmp    c001fc94 <APIC::getBase()+0x40>
c001fc73:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001fc78:	83 ec 08             	sub    esp,0x8
c001fc7b:	6a 1b                	push   0x1b
c001fc7d:	50                   	push   eax
c001fc7e:	e8 a1 92 fe ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c001fc83:	83 c4 10             	add    esp,0x10
c001fc86:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001fc89:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001fc8c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001fc8f:	25 00 f0 ff ff       	and    eax,0xfffff000
c001fc94:	c9                   	leave  
c001fc95:	c3                   	ret    

c001fc96 <APIC::eoi(unsigned char)>:
c001fc96:	55                   	push   ebp
c001fc97:	89 e5                	mov    ebp,esp
c001fc99:	83 ec 28             	sub    esp,0x28
c001fc9c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001fc9f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001fca2:	83 ec 0c             	sub    esp,0xc
c001fca5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fca8:	e8 a7 ff ff ff       	call   c001fc54 <APIC::getBase()>
c001fcad:	83 c4 10             	add    esp,0x10
c001fcb0:	05 b0 00 00 00       	add    eax,0xb0
c001fcb5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001fcb8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001fcbb:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001fcc1:	90                   	nop
c001fcc2:	c9                   	leave  
c001fcc3:	c3                   	ret    

c001fcc4 <APIC::open(int, int, void*)>:
c001fcc4:	55                   	push   ebp
c001fcc5:	89 e5                	mov    ebp,esp
c001fcc7:	57                   	push   edi
c001fcc8:	56                   	push   esi
c001fcc9:	53                   	push   ebx
c001fcca:	83 ec 2c             	sub    esp,0x2c
c001fccd:	83 ec 0c             	sub    esp,0xc
c001fcd0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fcd3:	e8 7c ff ff ff       	call   c001fc54 <APIC::getBase()>
c001fcd8:	83 c4 10             	add    esp,0x10
c001fcdb:	89 c2                	mov    edx,eax
c001fcdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fce0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001fce6:	0f b6 f8             	movzx  edi,al
c001fce9:	89 d0                	mov    eax,edx
c001fceb:	ba 00 00 00 00       	mov    edx,0x0
c001fcf0:	89 c1                	mov    ecx,eax
c001fcf2:	80 e5 ff             	and    ch,0xff
c001fcf5:	89 cb                	mov    ebx,ecx
c001fcf7:	0f b6 f2             	movzx  esi,dl
c001fcfa:	89 d8                	mov    eax,ebx
c001fcfc:	89 f2                	mov    edx,esi
c001fcfe:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001fd01:	8d 5f 08             	lea    ebx,[edi+0x8]
c001fd04:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001fd08:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001fd0c:	83 e0 00             	and    eax,0x0
c001fd0f:	09 d0                	or     eax,edx
c001fd11:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001fd15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fd18:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001fd1e:	8d 50 01             	lea    edx,[eax+0x1]
c001fd21:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001fd24:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001fd2a:	0f b6 d0             	movzx  edx,al
c001fd2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fd30:	83 c2 08             	add    edx,0x8
c001fd33:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001fd37:	0f b6 c9             	movzx  ecx,cl
c001fd3a:	81 c9 00 00 01 00    	or     ecx,0x10000
c001fd40:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001fd44:	83 ec 0c             	sub    esp,0xc
c001fd47:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fd4a:	e8 05 ff ff ff       	call   c001fc54 <APIC::getBase()>
c001fd4f:	83 c4 10             	add    esp,0x10
c001fd52:	05 f0 00 00 00       	add    eax,0xf0
c001fd57:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001fd5a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001fd5d:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd5f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001fd62:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c001fd69:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c001fd70:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001fd73:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001fd76:	89 10                	mov    DWORD PTR [eax],edx
c001fd78:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c001fd7f:	a1 d0 69 02 c0       	mov    eax,ds:0xc00269d0
c001fd84:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c001fd87:	7d 7c                	jge    c001fe05 <APIC::open(int, int, void*)+0x141>
c001fd89:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fd8c:	8b 04 85 e0 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9620]
c001fd93:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c001fd96:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fd99:	8b 04 85 e0 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9620]
c001fda0:	c1 e8 08             	shr    eax,0x8
c001fda3:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c001fda7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fdaa:	8b 04 85 e0 69 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9620]
c001fdb1:	c1 e8 18             	shr    eax,0x18
c001fdb4:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c001fdb7:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c001fdbb:	75 40                	jne    c001fdfd <APIC::open(int, int, void*)+0x139>
c001fdbd:	83 ec 0c             	sub    esp,0xc
c001fdc0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fdc3:	e8 8c fe ff ff       	call   c001fc54 <APIC::getBase()>
c001fdc8:	83 c4 10             	add    esp,0x10
c001fdcb:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c001fdcf:	75 07                	jne    c001fdd8 <APIC::open(int, int, void*)+0x114>
c001fdd1:	ba 60 03 00 00       	mov    edx,0x360
c001fdd6:	eb 05                	jmp    c001fddd <APIC::open(int, int, void*)+0x119>
c001fdd8:	ba 50 03 00 00       	mov    edx,0x350
c001fddd:	01 d0                	add    eax,edx
c001fddf:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001fde2:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001fde5:	8b 00                	mov    eax,DWORD PTR [eax]
c001fde7:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c001fdea:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c001fdf1:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c001fdf5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001fdf8:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001fdfb:	89 10                	mov    DWORD PTR [eax],edx
c001fdfd:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c001fe00:	e9 7a ff ff ff       	jmp    c001fd7f <APIC::open(int, int, void*)+0xbb>
c001fe05:	b8 00 00 00 00       	mov    eax,0x0
c001fe0a:	8d 65 f4             	lea    esp,[ebp-0xc]
c001fe0d:	5b                   	pop    ebx
c001fe0e:	5e                   	pop    esi
c001fe0f:	5f                   	pop    edi
c001fe10:	5d                   	pop    ebp
c001fe11:	c3                   	ret    

c001fe12 <IOAPIC::IOAPIC()>:
c001fe12:	83 ec 0c             	sub    esp,0xc
c001fe15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe19:	83 ec 08             	sub    esp,0x8
c001fe1c:	68 90 51 02 c0       	push   0xc0025190
c001fe21:	50                   	push   eax
c001fe22:	e8 83 e2 fe ff       	call   c000e0aa <Device::Device(char const*)>
c001fe27:	83 c4 10             	add    esp,0x10
c001fe2a:	ba b8 52 02 c0       	mov    edx,0xc00252b8
c001fe2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe33:	89 10                	mov    DWORD PTR [eax],edx
c001fe35:	90                   	nop
c001fe36:	83 c4 0c             	add    esp,0xc
c001fe39:	c3                   	ret    

c001fe3a <APIC::APIC()>:
c001fe3a:	53                   	push   ebx
c001fe3b:	83 ec 18             	sub    esp,0x18
c001fe3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fe42:	83 ec 08             	sub    esp,0x8
c001fe45:	68 98 51 02 c0       	push   0xc0025198
c001fe4a:	50                   	push   eax
c001fe4b:	e8 d2 e9 fe ff       	call   c000e822 <InterruptController::InterruptController(char const*)>
c001fe50:	83 c4 10             	add    esp,0x10
c001fe53:	ba 70 52 02 c0       	mov    edx,0xc0025270
c001fe58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fe5c:	89 10                	mov    DWORD PTR [eax],edx
c001fe5e:	a0 a0 80 02 c0       	mov    al,ds:0xc00280a0
c001fe63:	83 f0 01             	xor    eax,0x1
c001fe66:	84 c0                	test   al,al
c001fe68:	0f 84 a1 00 00 00    	je     c001ff0f <APIC::APIC()+0xd5>
c001fe6e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001fe73:	a0 80 6a 02 c0       	mov    al,ds:0xc0026a80
c001fe78:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001fe7c:	0f 83 86 00 00 00    	jae    c001ff08 <APIC::APIC()+0xce>
c001fe82:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c001fe8a:	83 ec 0c             	sub    esp,0xc
c001fe8d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fe91:	e8 2d 9b fe ff       	call   c00099c3 <malloc>
c001fe96:	83 c4 10             	add    esp,0x10
c001fe99:	89 c3                	mov    ebx,eax
c001fe9b:	83 ec 0c             	sub    esp,0xc
c001fe9e:	53                   	push   ebx
c001fe9f:	e8 6e ff ff ff       	call   c001fe12 <IOAPIC::IOAPIC()>
c001fea4:	83 c4 10             	add    esp,0x10
c001fea7:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001feab:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001feb0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001feb4:	89 14 85 80 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f80],edx
c001febb:	a1 60 80 02 c0       	mov    eax,ds:0xc0028060
c001fec0:	40                   	inc    eax
c001fec1:	a3 60 80 02 c0       	mov    ds:0xc0028060,eax
c001fec6:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c001fecb:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001fed1:	83 ec 08             	sub    esp,0x8
c001fed4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fed8:	50                   	push   eax
c001fed9:	e8 c8 df fe ff       	call   c000dea6 <Device::addChild(Device*)>
c001fede:	83 c4 10             	add    esp,0x10
c001fee1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fee5:	8b 00                	mov    eax,DWORD PTR [eax]
c001fee7:	83 c0 08             	add    eax,0x8
c001feea:	8b 00                	mov    eax,DWORD PTR [eax]
c001feec:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001fef1:	6a 00                	push   0x0
c001fef3:	6a 00                	push   0x0
c001fef5:	52                   	push   edx
c001fef6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fefa:	ff d0                	call   eax
c001fefc:	83 c4 10             	add    esp,0x10
c001feff:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001ff03:	e9 6b ff ff ff       	jmp    c001fe73 <APIC::APIC()+0x39>
c001ff08:	c6 05 a0 80 02 c0 01 	mov    BYTE PTR ds:0xc00280a0,0x1
c001ff0f:	90                   	nop
c001ff10:	83 c4 18             	add    esp,0x18
c001ff13:	5b                   	pop    ebx
c001ff14:	c3                   	ret    
c001ff15:	90                   	nop

c001ff16 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ff16:	55                   	push   ebp
c001ff17:	89 e5                	mov    ebp,esp
c001ff19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ff1c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ff22:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ff25:	72 1d                	jb     c001ff44 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ff27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ff2a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ff30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ff33:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ff39:	01 d0                	add    eax,edx
c001ff3b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ff3e:	73 04                	jae    c001ff44 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ff40:	b0 01                	mov    al,0x1
c001ff42:	eb 02                	jmp    c001ff46 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ff44:	b0 00                	mov    al,0x0
c001ff46:	5d                   	pop    ebp
c001ff47:	c3                   	ret    

c001ff48 <IOAPIC::read(int)>:
c001ff48:	55                   	push   ebp
c001ff49:	89 e5                	mov    ebp,esp
c001ff4b:	83 ec 10             	sub    esp,0x10
c001ff4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ff51:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ff57:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ff5a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ff5d:	0f b6 d0             	movzx  edx,al
c001ff60:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ff63:	89 10                	mov    DWORD PTR [eax],edx
c001ff65:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ff68:	83 c0 10             	add    eax,0x10
c001ff6b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff6d:	c9                   	leave  
c001ff6e:	c3                   	ret    
c001ff6f:	90                   	nop

c001ff70 <IOAPIC::open(int, int, void*)>:
c001ff70:	55                   	push   ebp
c001ff71:	89 e5                	mov    ebp,esp
c001ff73:	57                   	push   edi
c001ff74:	56                   	push   esi
c001ff75:	53                   	push   ebx
c001ff76:	83 ec 0c             	sub    esp,0xc
c001ff79:	83 ec 0c             	sub    esp,0xc
c001ff7c:	68 c3 51 02 c0       	push   0xc00251c3
c001ff81:	e8 d9 ca fe ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c001ff86:	83 c4 10             	add    esp,0x10
c001ff89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ff8c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001ff8f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ff95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ff98:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ff9e:	8b 14 85 c0 6a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9540]
c001ffa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffa8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ffae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffb1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ffb7:	8b 14 85 40 6b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd94c0]
c001ffbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffc1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ffc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffca:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ffd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffd3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ffd9:	0f b6 f8             	movzx  edi,al
c001ffdc:	89 d0                	mov    eax,edx
c001ffde:	ba 00 00 00 00       	mov    edx,0x0
c001ffe3:	89 c1                	mov    ecx,eax
c001ffe5:	80 e5 ff             	and    ch,0xff
c001ffe8:	89 cb                	mov    ebx,ecx
c001ffea:	0f b6 f2             	movzx  esi,dl
c001ffed:	89 d8                	mov    eax,ebx
c001ffef:	89 f2                	mov    edx,esi
c001fff1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001fff4:	8d 5f 08             	lea    ebx,[edi+0x8]
c001fff7:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001fffb:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ffff:	83 e0 00             	and    eax,0x0
c0020002:	09 d0                	or     eax,edx
c0020004:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0020008:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002000b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020011:	8d 50 01             	lea    edx,[eax+0x1]
c0020014:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020017:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002001d:	0f b6 d0             	movzx  edx,al
c0020020:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020023:	83 c2 08             	add    edx,0x8
c0020026:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002002a:	0f b6 c9             	movzx  ecx,cl
c002002d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0020033:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0020037:	83 ec 08             	sub    esp,0x8
c002003a:	6a 01                	push   0x1
c002003c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002003f:	e8 04 ff ff ff       	call   c001ff48 <IOAPIC::read(int)>
c0020044:	83 c4 10             	add    esp,0x10
c0020047:	c1 f8 10             	sar    eax,0x10
c002004a:	0f b6 c0             	movzx  eax,al
c002004d:	8d 50 01             	lea    edx,[eax+0x1]
c0020050:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020053:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0020059:	b8 00 00 00 00       	mov    eax,0x0
c002005e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0020061:	5b                   	pop    ebx
c0020062:	5e                   	pop    esi
c0020063:	5f                   	pop    edi
c0020064:	5d                   	pop    ebp
c0020065:	c3                   	ret    

c0020066 <IOAPIC::write(int, int)>:
c0020066:	55                   	push   ebp
c0020067:	89 e5                	mov    ebp,esp
c0020069:	83 ec 10             	sub    esp,0x10
c002006c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002006f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020075:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020078:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002007b:	0f b6 d0             	movzx  edx,al
c002007e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020081:	89 10                	mov    DWORD PTR [eax],edx
c0020083:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020086:	8d 50 10             	lea    edx,[eax+0x10]
c0020089:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002008c:	89 02                	mov    DWORD PTR [edx],eax
c002008e:	90                   	nop
c002008f:	c9                   	leave  
c0020090:	c3                   	ret    
c0020091:	90                   	nop

c0020092 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0020092:	55                   	push   ebp
c0020093:	89 e5                	mov    ebp,esp
c0020095:	53                   	push   ebx
c0020096:	83 ec 2c             	sub    esp,0x2c
c0020099:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002009c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002009f:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00200a2:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00200a5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00200a8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00200ab:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00200ae:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00200b1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00200b4:	88 d8                	mov    al,bl
c00200b6:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00200b9:	88 c8                	mov    al,cl
c00200bb:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00200be:	88 d0                	mov    al,dl
c00200c0:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00200c3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00200c7:	83 c0 08             	add    eax,0x8
c00200ca:	01 c0                	add    eax,eax
c00200cc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00200cf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00200d3:	83 c0 08             	add    eax,0x8
c00200d6:	01 c0                	add    eax,eax
c00200d8:	40                   	inc    eax
c00200d9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00200dc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00200df:	50                   	push   eax
c00200e0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00200e3:	e8 60 fe ff ff       	call   c001ff48 <IOAPIC::read(int)>
c00200e8:	83 c4 08             	add    esp,0x8
c00200eb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00200ee:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00200f5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00200f8:	c1 e0 18             	shl    eax,0x18
c00200fb:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00200fe:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0020101:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020104:	52                   	push   edx
c0020105:	50                   	push   eax
c0020106:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020109:	e8 58 ff ff ff       	call   c0020066 <IOAPIC::write(int, int)>
c002010e:	83 c4 0c             	add    esp,0xc
c0020111:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020114:	50                   	push   eax
c0020115:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020118:	e8 2b fe ff ff       	call   c001ff48 <IOAPIC::read(int)>
c002011d:	83 c4 08             	add    esp,0x8
c0020120:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0020123:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002012a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0020131:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0020138:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002013c:	74 09                	je     c0020147 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002013e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0020145:	eb 07                	jmp    c002014e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0020147:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002014e:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0020152:	74 09                	je     c002015d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0020154:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002015b:	eb 07                	jmp    c0020164 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c002015d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0020164:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002016b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002016f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0020172:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0020175:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020178:	52                   	push   edx
c0020179:	50                   	push   eax
c002017a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002017d:	e8 e4 fe ff ff       	call   c0020066 <IOAPIC::write(int, int)>
c0020182:	83 c4 0c             	add    esp,0xc
c0020185:	90                   	nop
c0020186:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020189:	c9                   	leave  
c002018a:	c3                   	ret    
c002018b:	90                   	nop

c002018c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c002018c:	55                   	push   ebp
c002018d:	89 e5                	mov    ebp,esp
c002018f:	57                   	push   edi
c0020190:	56                   	push   esi
c0020191:	53                   	push   ebx
c0020192:	83 ec 2c             	sub    esp,0x2c
c0020195:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0020198:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002019b:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002019f:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00201a3:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00201a7:	74 5a                	je     c0020203 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00201a9:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00201ad:	7f 44                	jg     c00201f3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00201af:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00201b2:	05 60 58 02 c0       	add    eax,0xc0025860
c00201b7:	8a 00                	mov    al,BYTE PTR [eax]
c00201b9:	0f b6 c0             	movzx  eax,al
c00201bc:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00201bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00201c2:	66 8b 84 00 60 6a 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd95a0]
c00201ca:	0f b7 c0             	movzx  eax,ax
c00201cd:	83 e0 02             	and    eax,0x2
c00201d0:	85 c0                	test   eax,eax
c00201d2:	74 04                	je     c00201d8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00201d4:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00201d8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00201db:	66 8b 84 00 60 6a 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd95a0]
c00201e3:	0f b7 c0             	movzx  eax,ax
c00201e6:	83 e0 08             	and    eax,0x8
c00201e9:	85 c0                	test   eax,eax
c00201eb:	74 16                	je     c0020203 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00201ed:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00201f1:	eb 10                	jmp    c0020203 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00201f3:	83 ec 0c             	sub    esp,0xc
c00201f6:	68 d4 51 02 c0       	push   0xc00251d4
c00201fb:	e8 ff 40 ff ff       	call   c00142ff <Krnl::panic(char const*)>
c0020200:	83 c4 10             	add    esp,0x10
c0020203:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0020207:	a1 60 80 02 c0       	mov    eax,ds:0xc0028060
c002020c:	83 ec 08             	sub    esp,0x8
c002020f:	50                   	push   eax
c0020210:	68 0c 52 02 c0       	push   0xc002520c
c0020215:	e8 45 c8 fe ff       	call   c000ca5f <Dbg::kprintf(char const*, ...)>
c002021a:	83 c4 10             	add    esp,0x10
c002021d:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0020224:	a1 60 80 02 c0       	mov    eax,ds:0xc0028060
c0020229:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c002022c:	7d 67                	jge    c0020295 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002022e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0020231:	8b 04 85 80 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f80]
c0020238:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002023b:	83 ec 08             	sub    esp,0x8
c002023e:	52                   	push   edx
c002023f:	50                   	push   eax
c0020240:	e8 d1 fc ff ff       	call   c001ff16 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0020245:	83 c4 10             	add    esp,0x10
c0020248:	84 c0                	test   al,al
c002024a:	74 44                	je     c0020290 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c002024c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002024f:	8b 1c 85 80 80 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd7f80]
c0020256:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c002025a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002025d:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0020261:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020264:	83 c0 20             	add    eax,0x20
c0020267:	0f b6 f0             	movzx  esi,al
c002026a:	b8 00 00 00 00       	mov    eax,0x0
c002026f:	99                   	cdq    
c0020270:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0020273:	0f b6 c9             	movzx  ecx,cl
c0020276:	83 ec 04             	sub    esp,0x4
c0020279:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002027c:	57                   	push   edi
c002027d:	56                   	push   esi
c002027e:	52                   	push   edx
c002027f:	50                   	push   eax
c0020280:	51                   	push   ecx
c0020281:	53                   	push   ebx
c0020282:	e8 0b fe ff ff       	call   c0020092 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0020287:	83 c4 20             	add    esp,0x20
c002028a:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002028e:	eb 05                	jmp    c0020295 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0020290:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0020293:	eb 8f                	jmp    c0020224 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0020295:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0020298:	83 f0 01             	xor    eax,0x1
c002029b:	84 c0                	test   al,al
c002029d:	74 10                	je     c00202af <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002029f:	83 ec 0c             	sub    esp,0xc
c00202a2:	68 23 52 02 c0       	push   0xc0025223
c00202a7:	e8 53 40 ff ff       	call   c00142ff <Krnl::panic(char const*)>
c00202ac:	83 c4 10             	add    esp,0x10
c00202af:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00202b3:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00202ba:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00202be:	7f 65                	jg     c0020325 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00202c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00202c3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00202c6:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00202cd:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00202d0:	01 ca                	add    edx,ecx
c00202d2:	83 c2 54             	add    edx,0x54
c00202d5:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00202d9:	85 c0                	test   eax,eax
c00202db:	75 43                	jne    c0020320 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00202dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00202e0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00202e3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00202ea:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00202ed:	01 ca                	add    edx,ecx
c00202ef:	8d 4a 54             	lea    ecx,[edx+0x54]
c00202f2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00202f5:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00202f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00202fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00202ff:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0020306:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0020309:	01 ca                	add    edx,ecx
c002030b:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0020311:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0020314:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0020318:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002031b:	83 e8 20             	sub    eax,0x20
c002031e:	eb 1a                	jmp    c002033a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0020320:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0020323:	eb 95                	jmp    c00202ba <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0020325:	83 ec 0c             	sub    esp,0xc
c0020328:	68 30 52 02 c0       	push   0xc0025230
c002032d:	e8 cd 3f ff ff       	call   c00142ff <Krnl::panic(char const*)>
c0020332:	83 c4 10             	add    esp,0x10
c0020335:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002033a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002033d:	5b                   	pop    ebx
c002033e:	5e                   	pop    esi
c002033f:	5f                   	pop    edi
c0020340:	5d                   	pop    ebp
c0020341:	c3                   	ret    

c0020342 <PIC::disable()>:
c0020342:	55                   	push   ebp
c0020343:	89 e5                	mov    ebp,esp
c0020345:	83 ec 10             	sub    esp,0x10
c0020348:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c002034e:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0020352:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0020355:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0020359:	ee                   	out    dx,al
c002035a:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0020360:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0020364:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0020367:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c002036b:	ee                   	out    dx,al
c002036c:	90                   	nop
c002036d:	c9                   	leave  
c002036e:	c3                   	ret    
c002036f:	90                   	nop

c0020370 <PIC::close(int, int, void*)>:
c0020370:	55                   	push   ebp
c0020371:	89 e5                	mov    ebp,esp
c0020373:	83 ec 08             	sub    esp,0x8
c0020376:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020379:	8b 00                	mov    eax,DWORD PTR [eax]
c002037b:	83 c0 3c             	add    eax,0x3c
c002037e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020380:	83 ec 0c             	sub    esp,0xc
c0020383:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020386:	ff d0                	call   eax
c0020388:	83 c4 10             	add    esp,0x10
c002038b:	b8 00 00 00 00       	mov    eax,0x0
c0020390:	c9                   	leave  
c0020391:	c3                   	ret    

c0020392 <PIC::PIC()>:
c0020392:	83 ec 0c             	sub    esp,0xc
c0020395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020399:	83 ec 08             	sub    esp,0x8
c002039c:	68 dc 52 02 c0       	push   0xc00252dc
c00203a1:	50                   	push   eax
c00203a2:	e8 7b e4 fe ff       	call   c000e822 <InterruptController::InterruptController(char const*)>
c00203a7:	83 c4 10             	add    esp,0x10
c00203aa:	ba 08 53 02 c0       	mov    edx,0xc0025308
c00203af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203b3:	89 10                	mov    DWORD PTR [eax],edx
c00203b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203b9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00203bf:	0f b6 d0             	movzx  edx,al
c00203c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203c6:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00203cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203d1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00203d7:	0f b6 d0             	movzx  edx,al
c00203da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203de:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00203e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00203ed:	8d 50 01             	lea    edx,[eax+0x1]
c00203f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00203f4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00203fa:	0f b6 d0             	movzx  edx,al
c00203fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020401:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020405:	83 e1 3f             	and    ecx,0x3f
c0020408:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002040c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020410:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020416:	0f b6 d0             	movzx  edx,al
c0020419:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002041d:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0020424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020428:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002042e:	0f b6 d0             	movzx  edx,al
c0020431:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020435:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002043a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002043e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020444:	8d 50 01             	lea    edx,[eax+0x1]
c0020447:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002044b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020451:	0f b6 d0             	movzx  edx,al
c0020454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020458:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002045c:	83 e1 3f             	and    ecx,0x3f
c002045f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020463:	90                   	nop
c0020464:	83 c4 0c             	add    esp,0xc
c0020467:	c3                   	ret    

c0020468 <PIC::ioWait()>:
c0020468:	eb 00                	jmp    c002046a <PIC::ioWait()+0x2>
c002046a:	eb 00                	jmp    c002046c <PIC::ioWait()+0x4>
c002046c:	90                   	nop
c002046d:	c3                   	ret    

c002046e <PIC::getIRQReg(int)>:
c002046e:	55                   	push   ebp
c002046f:	89 e5                	mov    ebp,esp
c0020471:	83 ec 10             	sub    esp,0x10
c0020474:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020477:	0f b6 c0             	movzx  eax,al
c002047a:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0020480:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0020483:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0020486:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002048a:	ee                   	out    dx,al
c002048b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002048e:	0f b6 c0             	movzx  eax,al
c0020491:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0020497:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002049a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002049d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00204a1:	ee                   	out    dx,al
c00204a2:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00204a8:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00204ac:	89 c2                	mov    edx,eax
c00204ae:	ec                   	in     al,dx
c00204af:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00204b2:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00204b5:	0f b6 c0             	movzx  eax,al
c00204b8:	c1 e0 08             	shl    eax,0x8
c00204bb:	89 c1                	mov    ecx,eax
c00204bd:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00204c3:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00204c7:	89 c2                	mov    edx,eax
c00204c9:	ec                   	in     al,dx
c00204ca:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00204cd:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00204d0:	0f b6 c0             	movzx  eax,al
c00204d3:	09 c8                	or     eax,ecx
c00204d5:	c9                   	leave  
c00204d6:	c3                   	ret    
c00204d7:	90                   	nop

c00204d8 <PIC::eoi(unsigned char)>:
c00204d8:	55                   	push   ebp
c00204d9:	89 e5                	mov    ebp,esp
c00204db:	83 ec 14             	sub    esp,0x14
c00204de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00204e1:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00204e4:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00204e8:	75 1e                	jne    c0020508 <PIC::eoi(unsigned char)+0x30>
c00204ea:	6a 0b                	push   0xb
c00204ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00204ef:	e8 7a ff ff ff       	call   c002046e <PIC::getIRQReg(int)>
c00204f4:	83 c4 08             	add    esp,0x8
c00204f7:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00204fb:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00204ff:	25 80 00 00 00       	and    eax,0x80
c0020504:	85 c0                	test   eax,eax
c0020506:	74 5f                	je     c0020567 <PIC::eoi(unsigned char)+0x8f>
c0020508:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c002050c:	75 2d                	jne    c002053b <PIC::eoi(unsigned char)+0x63>
c002050e:	6a 0b                	push   0xb
c0020510:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020513:	e8 56 ff ff ff       	call   c002046e <PIC::getIRQReg(int)>
c0020518:	83 c4 08             	add    esp,0x8
c002051b:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c002051f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020522:	66 85 c0             	test   ax,ax
c0020525:	78 14                	js     c002053b <PIC::eoi(unsigned char)+0x63>
c0020527:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c002052d:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0020531:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0020534:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0020538:	ee                   	out    dx,al
c0020539:	eb 2d                	jmp    c0020568 <PIC::eoi(unsigned char)+0x90>
c002053b:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002053f:	76 12                	jbe    c0020553 <PIC::eoi(unsigned char)+0x7b>
c0020541:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0020547:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c002054b:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002054e:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0020552:	ee                   	out    dx,al
c0020553:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0020559:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c002055d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0020560:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0020564:	ee                   	out    dx,al
c0020565:	eb 01                	jmp    c0020568 <PIC::eoi(unsigned char)+0x90>
c0020567:	90                   	nop
c0020568:	c9                   	leave  
c0020569:	c3                   	ret    

c002056a <PIC::remap()>:
c002056a:	55                   	push   ebp
c002056b:	89 e5                	mov    ebp,esp
c002056d:	83 ec 48             	sub    esp,0x48
c0020570:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0020577:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002057e:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0020584:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0020587:	89 c2                	mov    edx,eax
c0020589:	ec                   	in     al,dx
c002058a:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002058d:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0020590:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0020593:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0020599:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002059c:	89 c2                	mov    edx,eax
c002059e:	ec                   	in     al,dx
c002059f:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00205a2:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00205a5:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00205a8:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00205ae:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00205b2:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00205b5:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00205b8:	ee                   	out    dx,al
c00205b9:	83 ec 0c             	sub    esp,0xc
c00205bc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00205bf:	e8 a4 fe ff ff       	call   c0020468 <PIC::ioWait()>
c00205c4:	83 c4 10             	add    esp,0x10
c00205c7:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00205cd:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00205d1:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00205d4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00205d7:	ee                   	out    dx,al
c00205d8:	83 ec 0c             	sub    esp,0xc
c00205db:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00205de:	e8 85 fe ff ff       	call   c0020468 <PIC::ioWait()>
c00205e3:	83 c4 10             	add    esp,0x10
c00205e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00205e9:	0f b6 c0             	movzx  eax,al
c00205ec:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00205f2:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00205f5:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00205f8:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00205fb:	ee                   	out    dx,al
c00205fc:	83 ec 0c             	sub    esp,0xc
c00205ff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020602:	e8 61 fe ff ff       	call   c0020468 <PIC::ioWait()>
c0020607:	83 c4 10             	add    esp,0x10
c002060a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002060d:	0f b6 c0             	movzx  eax,al
c0020610:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0020616:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0020619:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c002061c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002061f:	ee                   	out    dx,al
c0020620:	83 ec 0c             	sub    esp,0xc
c0020623:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020626:	e8 3d fe ff ff       	call   c0020468 <PIC::ioWait()>
c002062b:	83 c4 10             	add    esp,0x10
c002062e:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0020634:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0020638:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c002063b:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c002063e:	ee                   	out    dx,al
c002063f:	83 ec 0c             	sub    esp,0xc
c0020642:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020645:	e8 1e fe ff ff       	call   c0020468 <PIC::ioWait()>
c002064a:	83 c4 10             	add    esp,0x10
c002064d:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0020653:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0020657:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c002065a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002065d:	ee                   	out    dx,al
c002065e:	83 ec 0c             	sub    esp,0xc
c0020661:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020664:	e8 ff fd ff ff       	call   c0020468 <PIC::ioWait()>
c0020669:	83 c4 10             	add    esp,0x10
c002066c:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0020672:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0020676:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0020679:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002067c:	ee                   	out    dx,al
c002067d:	83 ec 0c             	sub    esp,0xc
c0020680:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020683:	e8 e0 fd ff ff       	call   c0020468 <PIC::ioWait()>
c0020688:	83 c4 10             	add    esp,0x10
c002068b:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0020691:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0020695:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0020698:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002069b:	ee                   	out    dx,al
c002069c:	83 ec 0c             	sub    esp,0xc
c002069f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00206a2:	e8 c1 fd ff ff       	call   c0020468 <PIC::ioWait()>
c00206a7:	83 c4 10             	add    esp,0x10
c00206aa:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00206ae:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00206b4:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00206b7:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00206ba:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00206bd:	ee                   	out    dx,al
c00206be:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00206c2:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00206c8:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00206cb:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00206ce:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00206d1:	ee                   	out    dx,al
c00206d2:	90                   	nop
c00206d3:	c9                   	leave  
c00206d4:	c3                   	ret    
c00206d5:	90                   	nop

c00206d6 <PIC::open(int, int, void*)>:
c00206d6:	55                   	push   ebp
c00206d7:	89 e5                	mov    ebp,esp
c00206d9:	83 ec 18             	sub    esp,0x18
c00206dc:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00206e2:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00206e6:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00206e9:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00206ed:	ee                   	out    dx,al
c00206ee:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00206f4:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00206f8:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00206fb:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00206ff:	ee                   	out    dx,al
c0020700:	83 ec 0c             	sub    esp,0xc
c0020703:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020706:	e8 5f fe ff ff       	call   c002056a <PIC::remap()>
c002070b:	83 c4 10             	add    esp,0x10
c002070e:	b8 00 00 00 00       	mov    eax,0x0
c0020713:	c9                   	leave  
c0020714:	c3                   	ret    
c0020715:	66 90                	xchg   ax,ax
c0020717:	90                   	nop

c0020718 <APICTimer::close(int, int, void*)>:
c0020718:	b8 00 00 00 00       	mov    eax,0x0
c002071d:	c3                   	ret    
c002071e:	66 90                	xchg   ax,ax

c0020720 <apicTimerHandler(regs*, void*)>:
c0020720:	83 ec 0c             	sub    esp,0xc
c0020723:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020727:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020729:	b8 10 27 00 00       	mov    eax,0x2710
c002072e:	ba 00 00 00 00       	mov    edx,0x0
c0020733:	f7 f1                	div    ecx
c0020735:	83 ec 0c             	sub    esp,0xc
c0020738:	50                   	push   eax
c0020739:	e8 ef ff fe ff       	call   c001072d <timerHandler(unsigned int)>
c002073e:	83 c4 10             	add    esp,0x10
c0020741:	90                   	nop
c0020742:	83 c4 0c             	add    esp,0xc
c0020745:	c3                   	ret    
c0020746:	66 90                	xchg   ax,ax

c0020748 <APICTimer::write(int)>:
c0020748:	83 ec 1c             	sub    esp,0x1c
c002074b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002074f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020753:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020759:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c002075e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020764:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002076a:	83 ec 0c             	sub    esp,0xc
c002076d:	50                   	push   eax
c002076e:	e8 e1 f4 ff ff       	call   c001fc54 <APIC::getBase()>
c0020773:	83 c4 10             	add    esp,0x10
c0020776:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002077a:	a1 8c 67 02 c0       	mov    eax,ds:0xc002678c
c002077f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020783:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020787:	05 e0 03 00 00       	add    eax,0x3e0
c002078c:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0020792:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020796:	05 80 03 00 00       	add    eax,0x380
c002079b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00207a1:	fb                   	sti    
c00207a2:	66 90                	xchg   ax,ax
c00207a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00207a8:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c00207ae:	a1 8c 67 02 c0       	mov    eax,ds:0xc002678c
c00207b3:	39 c2                	cmp    edx,eax
c00207b5:	76 05                	jbe    c00207bc <APICTimer::write(int)+0x74>
c00207b7:	eb eb                	jmp    c00207a4 <APICTimer::write(int)+0x5c>
c00207b9:	8d 76 00             	lea    esi,[esi+0x0]
c00207bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00207c0:	05 20 03 00 00       	add    eax,0x320
c00207c5:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00207cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00207cf:	05 90 03 00 00       	add    eax,0x390
c00207d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00207d6:	f7 d0                	not    eax
c00207d8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00207dc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00207e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00207e4:	ba 00 00 00 00       	mov    edx,0x0
c00207e9:	f7 f1                	div    ecx
c00207eb:	89 04 24             	mov    DWORD PTR [esp],eax
c00207ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207f2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00207f8:	0d 00 00 02 00       	or     eax,0x20000
c00207fd:	89 c2                	mov    edx,eax
c00207ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020803:	05 20 03 00 00       	add    eax,0x320
c0020808:	89 10                	mov    DWORD PTR [eax],edx
c002080a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002080e:	05 e0 03 00 00       	add    eax,0x3e0
c0020813:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0020819:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002081d:	05 80 03 00 00       	add    eax,0x380
c0020822:	89 c2                	mov    edx,eax
c0020824:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020827:	89 02                	mov    DWORD PTR [edx],eax
c0020829:	90                   	nop
c002082a:	83 c4 1c             	add    esp,0x1c
c002082d:	c3                   	ret    
c002082e:	66 90                	xchg   ax,ax

c0020830 <APICTimer::open(int, int, void*)>:
c0020830:	57                   	push   edi
c0020831:	56                   	push   esi
c0020832:	53                   	push   ebx
c0020833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020837:	8b 00                	mov    eax,DWORD PTR [eax]
c0020839:	83 c0 24             	add    eax,0x24
c002083c:	8b 00                	mov    eax,DWORD PTR [eax]
c002083e:	83 ec 08             	sub    esp,0x8
c0020841:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020845:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020849:	ff d0                	call   eax
c002084b:	83 c4 10             	add    esp,0x10
c002084e:	a1 68 61 02 c0       	mov    eax,ds:0xc0026168
c0020853:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020859:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002085f:	83 ec 0c             	sub    esp,0xc
c0020862:	50                   	push   eax
c0020863:	e8 ec f3 ff ff       	call   c001fc54 <APIC::getBase()>
c0020868:	83 c4 10             	add    esp,0x10
c002086b:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0020871:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020875:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002087b:	0f b6 f8             	movzx  edi,al
c002087e:	89 d0                	mov    eax,edx
c0020880:	ba 00 00 00 00       	mov    edx,0x0
c0020885:	89 c1                	mov    ecx,eax
c0020887:	80 e5 ff             	and    ch,0xff
c002088a:	89 cb                	mov    ebx,ecx
c002088c:	0f b6 f2             	movzx  esi,dl
c002088f:	89 d8                	mov    eax,ebx
c0020891:	89 f2                	mov    edx,esi
c0020893:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020897:	8d 5f 08             	lea    ebx,[edi+0x8]
c002089a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002089e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00208a2:	83 e0 00             	and    eax,0x0
c00208a5:	09 d0                	or     eax,edx
c00208a7:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00208ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208af:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00208b5:	8d 50 01             	lea    edx,[eax+0x1]
c00208b8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00208bc:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00208c2:	0f b6 d0             	movzx  edx,al
c00208c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208c9:	83 c2 08             	add    edx,0x8
c00208cc:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00208d0:	0f b6 c9             	movzx  ecx,cl
c00208d3:	81 c9 00 00 01 00    	or     ecx,0x10000
c00208d9:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00208dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208e1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00208e5:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00208eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208ef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00208f3:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00208f9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00208fd:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0020903:	83 ec 0c             	sub    esp,0xc
c0020906:	51                   	push   ecx
c0020907:	6a 01                	push   0x1
c0020909:	68 20 07 02 c0       	push   0xc0020720
c002090e:	52                   	push   edx
c002090f:	50                   	push   eax
c0020910:	e8 09 d5 fe ff       	call   c000de1e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020915:	83 c4 20             	add    esp,0x20
c0020918:	89 c2                	mov    edx,eax
c002091a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002091e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020924:	b8 00 00 00 00       	mov    eax,0x0
c0020929:	5b                   	pop    ebx
c002092a:	5e                   	pop    esi
c002092b:	5f                   	pop    edi
c002092c:	c3                   	ret    
c002092d:	90                   	nop
c002092e:	66 90                	xchg   ax,ax

c0020930 <APICTimer::APICTimer()>:
c0020930:	83 ec 0c             	sub    esp,0xc
c0020933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020937:	83 ec 08             	sub    esp,0x8
c002093a:	68 48 53 02 c0       	push   0xc0025348
c002093f:	50                   	push   eax
c0020940:	e8 57 fd fe ff       	call   c001069c <Timer::Timer(char const*)>
c0020945:	83 c4 10             	add    esp,0x10
c0020948:	ba 5c 53 02 c0       	mov    edx,0xc002535c
c002094d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020951:	89 10                	mov    DWORD PTR [eax],edx
c0020953:	90                   	nop
c0020954:	83 c4 0c             	add    esp,0xc
c0020957:	c3                   	ret    

c0020958 <PIT::write(int)>:
c0020958:	83 ec 10             	sub    esp,0x10
c002095b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002095f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020963:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020969:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002096d:	a3 a4 80 02 c0       	mov    ds:0xc00280a4,eax
c0020972:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0020977:	99                   	cdq    
c0020978:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002097c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020980:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0020987:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002098c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0020990:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0020995:	ee                   	out    dx,al
c0020996:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002099a:	0f b6 c0             	movzx  eax,al
c002099d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00209a4:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00209a8:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00209ac:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00209b1:	ee                   	out    dx,al
c00209b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00209b6:	c1 f8 08             	sar    eax,0x8
c00209b9:	0f b6 c0             	movzx  eax,al
c00209bc:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00209c3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00209c7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00209cb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00209d0:	ee                   	out    dx,al
c00209d1:	90                   	nop
c00209d2:	83 c4 10             	add    esp,0x10
c00209d5:	c3                   	ret    
c00209d6:	66 90                	xchg   ax,ax

c00209d8 <pitHandler(regs*, void*)>:
c00209d8:	83 ec 0c             	sub    esp,0xc
c00209db:	8b 0d a4 80 02 c0    	mov    ecx,DWORD PTR ds:0xc00280a4
c00209e1:	b8 a0 86 01 00       	mov    eax,0x186a0
c00209e6:	99                   	cdq    
c00209e7:	f7 f9                	idiv   ecx
c00209e9:	83 ec 0c             	sub    esp,0xc
c00209ec:	50                   	push   eax
c00209ed:	e8 3b fd fe ff       	call   c001072d <timerHandler(unsigned int)>
c00209f2:	83 c4 10             	add    esp,0x10
c00209f5:	90                   	nop
c00209f6:	83 c4 0c             	add    esp,0xc
c00209f9:	c3                   	ret    
c00209fa:	66 90                	xchg   ax,ax

c00209fc <PIT::open(int, int, void*)>:
c00209fc:	83 ec 0c             	sub    esp,0xc
c00209ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a03:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a05:	83 c0 24             	add    eax,0x24
c0020a08:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a0a:	83 ec 08             	sub    esp,0x8
c0020a0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020a15:	ff d0                	call   eax
c0020a17:	83 c4 10             	add    esp,0x10
c0020a1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a1e:	83 ec 0c             	sub    esp,0xc
c0020a21:	6a 00                	push   0x0
c0020a23:	6a 01                	push   0x1
c0020a25:	68 d8 09 02 c0       	push   0xc00209d8
c0020a2a:	6a 00                	push   0x0
c0020a2c:	50                   	push   eax
c0020a2d:	e8 ec d3 fe ff       	call   c000de1e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020a32:	83 c4 20             	add    esp,0x20
c0020a35:	89 c2                	mov    edx,eax
c0020a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a3b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020a41:	b8 00 00 00 00       	mov    eax,0x0
c0020a46:	83 c4 0c             	add    esp,0xc
c0020a49:	c3                   	ret    
c0020a4a:	66 90                	xchg   ax,ax

c0020a4c <PIT::close(int, int, void*)>:
c0020a4c:	83 ec 0c             	sub    esp,0xc
c0020a4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a53:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0020a5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a61:	6a 01                	push   0x1
c0020a63:	68 d8 09 02 c0       	push   0xc00209d8
c0020a68:	6a 00                	push   0x0
c0020a6a:	50                   	push   eax
c0020a6b:	e8 f8 d3 fe ff       	call   c000de68 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0020a70:	83 c4 10             	add    esp,0x10
c0020a73:	b8 00 00 00 00       	mov    eax,0x0
c0020a78:	83 c4 0c             	add    esp,0xc
c0020a7b:	c3                   	ret    

c0020a7c <PIT::PIT()>:
c0020a7c:	83 ec 0c             	sub    esp,0xc
c0020a7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a83:	83 ec 08             	sub    esp,0x8
c0020a86:	68 84 53 02 c0       	push   0xc0025384
c0020a8b:	50                   	push   eax
c0020a8c:	e8 0b fc fe ff       	call   c001069c <Timer::Timer(char const*)>
c0020a91:	83 c4 10             	add    esp,0x10
c0020a94:	ba ac 53 02 c0       	mov    edx,0xc00253ac
c0020a99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a9d:	89 10                	mov    DWORD PTR [eax],edx
c0020a9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020aa3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020aa9:	0f b6 d0             	movzx  edx,al
c0020aac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ab0:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0020ab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020abb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020ac1:	0f b6 d0             	movzx  edx,al
c0020ac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ac8:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0020acd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ad1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020ad7:	8d 50 01             	lea    edx,[eax+0x1]
c0020ada:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020ade:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020ae4:	0f b6 d0             	movzx  edx,al
c0020ae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020aeb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020aef:	83 e1 3f             	and    ecx,0x3f
c0020af2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020af6:	90                   	nop
c0020af7:	83 c4 0c             	add    esp,0xc
c0020afa:	c3                   	ret    
c0020afb:	66 90                	xchg   ax,ax
c0020afd:	66 90                	xchg   ax,ax
c0020aff:	90                   	nop

c0020b00 <avxDetect>:
c0020b00:	b8 00 00 00 00       	mov    eax,0x0
c0020b05:	c3                   	ret    

c0020b06 <avxSave>:
c0020b06:	c3                   	ret    

c0020b07 <avxLoad>:
c0020b07:	c3                   	ret    

c0020b08 <avxInit>:
c0020b08:	c3                   	ret    

c0020b09 <avxClose>:
c0020b09:	c3                   	ret    

c0020b0a <wouldSheSayYes>:
c0020b0a:	c3                   	ret    
c0020b0b:	49                   	dec    ecx
c0020b0c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0020b10:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0020b14:	75 20                	jne    c0020b36 <sseDetect.noSSE+0x1>
c0020b16:	4e                   	dec    esi
c0020b17:	79 61                	jns    c0020b7a <x87Detect+0x14>
c0020b19:	68 2e 2e 2e 00       	push   0x2e2e2e
c0020b1e:	66 90                	xchg   ax,ax

c0020b20 <absolutelyNoChanceInHell>:
c0020b20:	b8 01 00 00 00       	mov    eax,0x1
c0020b25:	0f a2                	cpuid  
c0020b27:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0020b2d:	74 06                	je     c0020b35 <sseDetect.noSSE>
c0020b2f:	b8 01 00 00 00       	mov    eax,0x1
c0020b34:	c3                   	ret    

c0020b35 <sseDetect.noSSE>:
c0020b35:	31 c0                	xor    eax,eax
c0020b37:	c3                   	ret    

c0020b38 <sseSave>:
c0020b38:	0f ae 44 24 04       	fxsave [esp+0x4]
c0020b3d:	c3                   	ret    

c0020b3e <sseLoad>:
c0020b3e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0020b43:	c3                   	ret    

c0020b44 <sseInit>:
c0020b44:	e8 49 00 00 00       	call   c0020b92 <x87Init>
c0020b49:	0f 20 e0             	mov    eax,cr4
c0020b4c:	66 0d 00 06          	or     ax,0x600
c0020b50:	0f 22 e0             	mov    cr4,eax
c0020b53:	c3                   	ret    

c0020b54 <sseClose>:
c0020b54:	c3                   	ret    
c0020b55:	66 90                	xchg   ax,ax
c0020b57:	66 90                	xchg   ax,ax
c0020b59:	66 90                	xchg   ax,ax
c0020b5b:	66 90                	xchg   ax,ax
c0020b5d:	66 90                	xchg   ax,ax
c0020b5f:	90                   	nop

c0020b60 <value_37F>:
c0020b60:	7f 03                	jg     c0020b65 <value_37A+0x1>

c0020b62 <value_37E>:
c0020b62:	7e 03                	jle    c0020b67 <x87Detect+0x1>

c0020b64 <value_37A>:
c0020b64:	7a 03                	jp     c0020b69 <x87Detect+0x3>

c0020b66 <x87Detect>:
c0020b66:	b8 01 00 00 00       	mov    eax,0x1
c0020b6b:	0f a2                	cpuid  
c0020b6d:	f7 c2 01 00 00 00    	test   edx,0x1
c0020b73:	74 06                	je     c0020b7b <x87Detect.nox87>
c0020b75:	b8 01 00 00 00       	mov    eax,0x1
c0020b7a:	c3                   	ret    

c0020b7b <x87Detect.nox87>:
c0020b7b:	b8 00 00 00 00       	mov    eax,0x0
c0020b80:	c3                   	ret    

c0020b81 <x87Save>:
c0020b81:	55                   	push   ebp
c0020b82:	89 e5                	mov    ebp,esp
c0020b84:	9b dd 75 08          	fsave  [ebp+0x8]
c0020b88:	c9                   	leave  
c0020b89:	c3                   	ret    

c0020b8a <x87Load>:
c0020b8a:	55                   	push   ebp
c0020b8b:	89 e5                	mov    ebp,esp
c0020b8d:	dd 65 08             	frstor [ebp+0x8]
c0020b90:	c9                   	leave  
c0020b91:	c3                   	ret    

c0020b92 <x87Init>:
c0020b92:	9b db e3             	finit  
c0020b95:	0f 20 c0             	mov    eax,cr0
c0020b98:	66 25 fb ff          	and    ax,0xfffb
c0020b9c:	66 0d 22 00          	or     ax,0x22
c0020ba0:	0f 22 c0             	mov    cr0,eax
c0020ba3:	0f 06                	clts   
c0020ba5:	d9 2d 64 0b 02 c0    	fldcw  WORD PTR ds:0xc0020b64
c0020bab:	c3                   	ret    

c0020bac <x87Close>:
c0020bac:	c3                   	ret    
c0020bad:	66 90                	xchg   ax,ax
c0020baf:	90                   	nop

c0020bb0 <__do_global_ctors_aux>:
c0020bb0:	a1 4c 1d 02 c0       	mov    eax,ds:0xc0021d4c
c0020bb5:	83 f8 ff             	cmp    eax,0xffffffff
c0020bb8:	74 1a                	je     c0020bd4 <__do_global_ctors_aux+0x24>
c0020bba:	55                   	push   ebp
c0020bbb:	89 e5                	mov    ebp,esp
c0020bbd:	53                   	push   ebx
c0020bbe:	52                   	push   edx
c0020bbf:	bb 4c 1d 02 c0       	mov    ebx,0xc0021d4c
c0020bc4:	ff d0                	call   eax
c0020bc6:	83 eb 04             	sub    ebx,0x4
c0020bc9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020bcb:	83 f8 ff             	cmp    eax,0xffffffff
c0020bce:	75 f4                	jne    c0020bc4 <__do_global_ctors_aux+0x14>
c0020bd0:	58                   	pop    eax
c0020bd1:	5b                   	pop    ebx
c0020bd2:	5d                   	pop    ebp
c0020bd3:	c3                   	ret    
c0020bd4:	c3                   	ret    
c0020bd5:	66 90                	xchg   ax,ax
c0020bd7:	90                   	nop

c0020bd8 <__divdi3>:
c0020bd8:	55                   	push   ebp
c0020bd9:	57                   	push   edi
c0020bda:	56                   	push   esi
c0020bdb:	53                   	push   ebx
c0020bdc:	83 ec 1c             	sub    esp,0x1c
c0020bdf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0020be3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020be7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0020bea:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0020bee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020bf2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020bf6:	85 db                	test   ebx,ebx
c0020bf8:	0f 88 8e 00 00 00    	js     c0020c8c <__divdi3+0xb4>
c0020bfe:	89 dd                	mov    ebp,ebx
c0020c00:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020c08:	89 d3                	mov    ebx,edx
c0020c0a:	85 d2                	test   edx,edx
c0020c0c:	79 0d                	jns    c0020c1b <__divdi3+0x43>
c0020c0e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0020c12:	f7 d8                	neg    eax
c0020c14:	83 d2 00             	adc    edx,0x0
c0020c17:	f7 da                	neg    edx
c0020c19:	89 d3                	mov    ebx,edx
c0020c1b:	89 c7                	mov    edi,eax
c0020c1d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020c20:	85 db                	test   ebx,ebx
c0020c22:	75 48                	jne    c0020c6c <__divdi3+0x94>
c0020c24:	39 ef                	cmp    edi,ebp
c0020c26:	76 24                	jbe    c0020c4c <__divdi3+0x74>
c0020c28:	89 ea                	mov    edx,ebp
c0020c2a:	f7 f7                	div    edi
c0020c2c:	89 c1                	mov    ecx,eax
c0020c2e:	31 f6                	xor    esi,esi
c0020c30:	89 c8                	mov    eax,ecx
c0020c32:	89 f2                	mov    edx,esi
c0020c34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020c38:	85 c9                	test   ecx,ecx
c0020c3a:	74 07                	je     c0020c43 <__divdi3+0x6b>
c0020c3c:	f7 d8                	neg    eax
c0020c3e:	83 d2 00             	adc    edx,0x0
c0020c41:	f7 da                	neg    edx
c0020c43:	83 c4 1c             	add    esp,0x1c
c0020c46:	5b                   	pop    ebx
c0020c47:	5e                   	pop    esi
c0020c48:	5f                   	pop    edi
c0020c49:	5d                   	pop    ebp
c0020c4a:	c3                   	ret    
c0020c4b:	90                   	nop
c0020c4c:	85 ff                	test   edi,edi
c0020c4e:	75 0b                	jne    c0020c5b <__divdi3+0x83>
c0020c50:	b8 01 00 00 00       	mov    eax,0x1
c0020c55:	31 d2                	xor    edx,edx
c0020c57:	f7 f3                	div    ebx
c0020c59:	89 c7                	mov    edi,eax
c0020c5b:	31 d2                	xor    edx,edx
c0020c5d:	89 e8                	mov    eax,ebp
c0020c5f:	f7 f7                	div    edi
c0020c61:	89 c6                	mov    esi,eax
c0020c63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020c66:	f7 f7                	div    edi
c0020c68:	89 c1                	mov    ecx,eax
c0020c6a:	eb c4                	jmp    c0020c30 <__divdi3+0x58>
c0020c6c:	39 eb                	cmp    ebx,ebp
c0020c6e:	77 3c                	ja     c0020cac <__divdi3+0xd4>
c0020c70:	0f bd f3             	bsr    esi,ebx
c0020c73:	83 f6 1f             	xor    esi,0x1f
c0020c76:	75 40                	jne    c0020cb8 <__divdi3+0xe0>
c0020c78:	39 eb                	cmp    ebx,ebp
c0020c7a:	72 09                	jb     c0020c85 <__divdi3+0xad>
c0020c7c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020c7f:	0f 87 97 00 00 00    	ja     c0020d1c <__divdi3+0x144>
c0020c85:	b9 01 00 00 00       	mov    ecx,0x1
c0020c8a:	eb a4                	jmp    c0020c30 <__divdi3+0x58>
c0020c8c:	f7 d9                	neg    ecx
c0020c8e:	83 d3 00             	adc    ebx,0x0
c0020c91:	f7 db                	neg    ebx
c0020c93:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0020c96:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0020c9a:	89 dd                	mov    ebp,ebx
c0020c9c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0020ca4:	e9 5f ff ff ff       	jmp    c0020c08 <__divdi3+0x30>
c0020ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0020cac:	31 f6                	xor    esi,esi
c0020cae:	31 c9                	xor    ecx,ecx
c0020cb0:	e9 7b ff ff ff       	jmp    c0020c30 <__divdi3+0x58>
c0020cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0020cb8:	b8 20 00 00 00       	mov    eax,0x20
c0020cbd:	29 f0                	sub    eax,esi
c0020cbf:	89 f1                	mov    ecx,esi
c0020cc1:	d3 e3                	shl    ebx,cl
c0020cc3:	89 fa                	mov    edx,edi
c0020cc5:	88 c1                	mov    cl,al
c0020cc7:	d3 ea                	shr    edx,cl
c0020cc9:	09 da                	or     edx,ebx
c0020ccb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020ccf:	89 f1                	mov    ecx,esi
c0020cd1:	d3 e7                	shl    edi,cl
c0020cd3:	89 eb                	mov    ebx,ebp
c0020cd5:	88 c1                	mov    cl,al
c0020cd7:	d3 eb                	shr    ebx,cl
c0020cd9:	89 f1                	mov    ecx,esi
c0020cdb:	d3 e5                	shl    ebp,cl
c0020cdd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0020ce0:	88 c1                	mov    cl,al
c0020ce2:	d3 ea                	shr    edx,cl
c0020ce4:	09 d5                	or     ebp,edx
c0020ce6:	89 e8                	mov    eax,ebp
c0020ce8:	89 da                	mov    edx,ebx
c0020cea:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0020cee:	89 d3                	mov    ebx,edx
c0020cf0:	89 c5                	mov    ebp,eax
c0020cf2:	f7 e7                	mul    edi
c0020cf4:	39 d3                	cmp    ebx,edx
c0020cf6:	72 18                	jb     c0020d10 <__divdi3+0x138>
c0020cf8:	74 0a                	je     c0020d04 <__divdi3+0x12c>
c0020cfa:	89 e9                	mov    ecx,ebp
c0020cfc:	31 f6                	xor    esi,esi
c0020cfe:	e9 2d ff ff ff       	jmp    c0020c30 <__divdi3+0x58>
c0020d03:	90                   	nop
c0020d04:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0020d07:	89 f1                	mov    ecx,esi
c0020d09:	d3 e7                	shl    edi,cl
c0020d0b:	39 c7                	cmp    edi,eax
c0020d0d:	73 eb                	jae    c0020cfa <__divdi3+0x122>
c0020d0f:	90                   	nop
c0020d10:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0020d13:	31 f6                	xor    esi,esi
c0020d15:	e9 16 ff ff ff       	jmp    c0020c30 <__divdi3+0x58>
c0020d1a:	66 90                	xchg   ax,ax
c0020d1c:	31 c9                	xor    ecx,ecx
c0020d1e:	e9 0d ff ff ff       	jmp    c0020c30 <__divdi3+0x58>
c0020d23:	90                   	nop

c0020d24 <__moddi3>:
c0020d24:	55                   	push   ebp
c0020d25:	57                   	push   edi
c0020d26:	56                   	push   esi
c0020d27:	53                   	push   ebx
c0020d28:	83 ec 2c             	sub    esp,0x2c
c0020d2b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020d2f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0020d33:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020d37:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0020d3b:	85 db                	test   ebx,ebx
c0020d3d:	0f 88 85 00 00 00    	js     c0020dc8 <__moddi3+0xa4>
c0020d43:	89 de                	mov    esi,ebx
c0020d45:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0020d4d:	89 d7                	mov    edi,edx
c0020d4f:	85 d2                	test   edx,edx
c0020d51:	79 09                	jns    c0020d5c <__moddi3+0x38>
c0020d53:	f7 d8                	neg    eax
c0020d55:	83 d2 00             	adc    edx,0x0
c0020d58:	f7 da                	neg    edx
c0020d5a:	89 d7                	mov    edi,edx
c0020d5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d60:	89 cd                	mov    ebp,ecx
c0020d62:	85 ff                	test   edi,edi
c0020d64:	75 52                	jne    c0020db8 <__moddi3+0x94>
c0020d66:	89 c3                	mov    ebx,eax
c0020d68:	39 f0                	cmp    eax,esi
c0020d6a:	76 24                	jbe    c0020d90 <__moddi3+0x6c>
c0020d6c:	89 c8                	mov    eax,ecx
c0020d6e:	89 f2                	mov    edx,esi
c0020d70:	f7 f3                	div    ebx
c0020d72:	89 d6                	mov    esi,edx
c0020d74:	89 f0                	mov    eax,esi
c0020d76:	31 d2                	xor    edx,edx
c0020d78:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020d7c:	85 c9                	test   ecx,ecx
c0020d7e:	74 07                	je     c0020d87 <__moddi3+0x63>
c0020d80:	f7 d8                	neg    eax
c0020d82:	83 d2 00             	adc    edx,0x0
c0020d85:	f7 da                	neg    edx
c0020d87:	83 c4 2c             	add    esp,0x2c
c0020d8a:	5b                   	pop    ebx
c0020d8b:	5e                   	pop    esi
c0020d8c:	5f                   	pop    edi
c0020d8d:	5d                   	pop    ebp
c0020d8e:	c3                   	ret    
c0020d8f:	90                   	nop
c0020d90:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020d94:	85 db                	test   ebx,ebx
c0020d96:	75 0d                	jne    c0020da5 <__moddi3+0x81>
c0020d98:	b8 01 00 00 00       	mov    eax,0x1
c0020d9d:	31 d2                	xor    edx,edx
c0020d9f:	f7 f7                	div    edi
c0020da1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020da5:	89 f0                	mov    eax,esi
c0020da7:	31 d2                	xor    edx,edx
c0020da9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020dad:	f7 f7                	div    edi
c0020daf:	89 e8                	mov    eax,ebp
c0020db1:	f7 f7                	div    edi
c0020db3:	89 d6                	mov    esi,edx
c0020db5:	eb bd                	jmp    c0020d74 <__moddi3+0x50>
c0020db7:	90                   	nop
c0020db8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020dbc:	39 f7                	cmp    edi,esi
c0020dbe:	76 20                	jbe    c0020de0 <__moddi3+0xbc>
c0020dc0:	89 c8                	mov    eax,ecx
c0020dc2:	89 f2                	mov    edx,esi
c0020dc4:	eb b2                	jmp    c0020d78 <__moddi3+0x54>
c0020dc6:	66 90                	xchg   ax,ax
c0020dc8:	f7 d9                	neg    ecx
c0020dca:	83 d3 00             	adc    ebx,0x0
c0020dcd:	f7 db                	neg    ebx
c0020dcf:	89 de                	mov    esi,ebx
c0020dd1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0020dd9:	e9 6f ff ff ff       	jmp    c0020d4d <__moddi3+0x29>
c0020dde:	66 90                	xchg   ax,ax
c0020de0:	0f bd c7             	bsr    eax,edi
c0020de3:	83 f0 1f             	xor    eax,0x1f
c0020de6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020dea:	75 24                	jne    c0020e10 <__moddi3+0xec>
c0020dec:	39 f7                	cmp    edi,esi
c0020dee:	72 06                	jb     c0020df6 <__moddi3+0xd2>
c0020df0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0020df4:	77 0c                	ja     c0020e02 <__moddi3+0xde>
c0020df6:	89 e9                	mov    ecx,ebp
c0020df8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0020dfc:	19 fe                	sbb    esi,edi
c0020dfe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020e02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020e06:	89 f2                	mov    edx,esi
c0020e08:	e9 6b ff ff ff       	jmp    c0020d78 <__moddi3+0x54>
c0020e0d:	8d 76 00             	lea    esi,[esi+0x0]
c0020e10:	b8 20 00 00 00       	mov    eax,0x20
c0020e15:	89 c2                	mov    edx,eax
c0020e17:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020e1b:	29 da                	sub    edx,ebx
c0020e1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020e21:	88 d9                	mov    cl,bl
c0020e23:	d3 e7                	shl    edi,cl
c0020e25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e29:	88 d1                	mov    cl,dl
c0020e2b:	d3 e8                	shr    eax,cl
c0020e2d:	09 c7                	or     edi,eax
c0020e2f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0020e33:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020e37:	89 d8                	mov    eax,ebx
c0020e39:	88 d9                	mov    cl,bl
c0020e3b:	d3 e7                	shl    edi,cl
c0020e3d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020e41:	89 f3                	mov    ebx,esi
c0020e43:	88 d1                	mov    cl,dl
c0020e45:	d3 eb                	shr    ebx,cl
c0020e47:	89 c7                	mov    edi,eax
c0020e49:	88 c1                	mov    cl,al
c0020e4b:	d3 e6                	shl    esi,cl
c0020e4d:	89 e8                	mov    eax,ebp
c0020e4f:	88 d1                	mov    cl,dl
c0020e51:	d3 e8                	shr    eax,cl
c0020e53:	09 f0                	or     eax,esi
c0020e55:	89 f9                	mov    ecx,edi
c0020e57:	d3 e5                	shl    ebp,cl
c0020e59:	89 da                	mov    edx,ebx
c0020e5b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0020e5f:	89 d3                	mov    ebx,edx
c0020e61:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020e65:	89 c6                	mov    esi,eax
c0020e67:	89 d1                	mov    ecx,edx
c0020e69:	39 d3                	cmp    ebx,edx
c0020e6b:	72 27                	jb     c0020e94 <__moddi3+0x170>
c0020e6d:	74 21                	je     c0020e90 <__moddi3+0x16c>
c0020e6f:	29 f5                	sub    ebp,esi
c0020e71:	19 cb                	sbb    ebx,ecx
c0020e73:	89 de                	mov    esi,ebx
c0020e75:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0020e79:	d3 e6                	shl    esi,cl
c0020e7b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0020e7f:	89 f9                	mov    ecx,edi
c0020e81:	d3 ed                	shr    ebp,cl
c0020e83:	09 ee                	or     esi,ebp
c0020e85:	89 f0                	mov    eax,esi
c0020e87:	d3 eb                	shr    ebx,cl
c0020e89:	89 da                	mov    edx,ebx
c0020e8b:	e9 e8 fe ff ff       	jmp    c0020d78 <__moddi3+0x54>
c0020e90:	39 c5                	cmp    ebp,eax
c0020e92:	73 db                	jae    c0020e6f <__moddi3+0x14b>
c0020e94:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0020e98:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0020e9c:	89 d1                	mov    ecx,edx
c0020e9e:	89 c6                	mov    esi,eax
c0020ea0:	eb cd                	jmp    c0020e6f <__moddi3+0x14b>
c0020ea2:	66 90                	xchg   ax,ax

c0020ea4 <__udivdi3>:
c0020ea4:	55                   	push   ebp
c0020ea5:	57                   	push   edi
c0020ea6:	56                   	push   esi
c0020ea7:	53                   	push   ebx
c0020ea8:	83 ec 1c             	sub    esp,0x1c
c0020eab:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020eaf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020eb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020eb7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020ebb:	85 d2                	test   edx,edx
c0020ebd:	75 41                	jne    c0020f00 <__udivdi3+0x5c>
c0020ebf:	39 f7                	cmp    edi,esi
c0020ec1:	76 15                	jbe    c0020ed8 <__udivdi3+0x34>
c0020ec3:	89 e8                	mov    eax,ebp
c0020ec5:	89 f2                	mov    edx,esi
c0020ec7:	f7 f7                	div    edi
c0020ec9:	31 db                	xor    ebx,ebx
c0020ecb:	89 da                	mov    edx,ebx
c0020ecd:	83 c4 1c             	add    esp,0x1c
c0020ed0:	5b                   	pop    ebx
c0020ed1:	5e                   	pop    esi
c0020ed2:	5f                   	pop    edi
c0020ed3:	5d                   	pop    ebp
c0020ed4:	c3                   	ret    
c0020ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0020ed8:	89 f9                	mov    ecx,edi
c0020eda:	85 ff                	test   edi,edi
c0020edc:	75 0b                	jne    c0020ee9 <__udivdi3+0x45>
c0020ede:	b8 01 00 00 00       	mov    eax,0x1
c0020ee3:	31 d2                	xor    edx,edx
c0020ee5:	f7 f7                	div    edi
c0020ee7:	89 c1                	mov    ecx,eax
c0020ee9:	31 d2                	xor    edx,edx
c0020eeb:	89 f0                	mov    eax,esi
c0020eed:	f7 f1                	div    ecx
c0020eef:	89 c3                	mov    ebx,eax
c0020ef1:	89 e8                	mov    eax,ebp
c0020ef3:	f7 f1                	div    ecx
c0020ef5:	89 da                	mov    edx,ebx
c0020ef7:	83 c4 1c             	add    esp,0x1c
c0020efa:	5b                   	pop    ebx
c0020efb:	5e                   	pop    esi
c0020efc:	5f                   	pop    edi
c0020efd:	5d                   	pop    ebp
c0020efe:	c3                   	ret    
c0020eff:	90                   	nop
c0020f00:	39 f2                	cmp    edx,esi
c0020f02:	77 1c                	ja     c0020f20 <__udivdi3+0x7c>
c0020f04:	0f bd da             	bsr    ebx,edx
c0020f07:	83 f3 1f             	xor    ebx,0x1f
c0020f0a:	75 24                	jne    c0020f30 <__udivdi3+0x8c>
c0020f0c:	39 f2                	cmp    edx,esi
c0020f0e:	72 08                	jb     c0020f18 <__udivdi3+0x74>
c0020f10:	39 ef                	cmp    edi,ebp
c0020f12:	0f 87 84 00 00 00    	ja     c0020f9c <__udivdi3+0xf8>
c0020f18:	b8 01 00 00 00       	mov    eax,0x1
c0020f1d:	eb ac                	jmp    c0020ecb <__udivdi3+0x27>
c0020f1f:	90                   	nop
c0020f20:	31 db                	xor    ebx,ebx
c0020f22:	31 c0                	xor    eax,eax
c0020f24:	89 da                	mov    edx,ebx
c0020f26:	83 c4 1c             	add    esp,0x1c
c0020f29:	5b                   	pop    ebx
c0020f2a:	5e                   	pop    esi
c0020f2b:	5f                   	pop    edi
c0020f2c:	5d                   	pop    ebp
c0020f2d:	c3                   	ret    
c0020f2e:	66 90                	xchg   ax,ax
c0020f30:	b8 20 00 00 00       	mov    eax,0x20
c0020f35:	29 d8                	sub    eax,ebx
c0020f37:	88 d9                	mov    cl,bl
c0020f39:	d3 e2                	shl    edx,cl
c0020f3b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020f3f:	89 fa                	mov    edx,edi
c0020f41:	88 c1                	mov    cl,al
c0020f43:	d3 ea                	shr    edx,cl
c0020f45:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020f49:	09 d1                	or     ecx,edx
c0020f4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020f4f:	88 d9                	mov    cl,bl
c0020f51:	d3 e7                	shl    edi,cl
c0020f53:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020f57:	89 f7                	mov    edi,esi
c0020f59:	88 c1                	mov    cl,al
c0020f5b:	d3 ef                	shr    edi,cl
c0020f5d:	88 d9                	mov    cl,bl
c0020f5f:	d3 e6                	shl    esi,cl
c0020f61:	89 ea                	mov    edx,ebp
c0020f63:	88 c1                	mov    cl,al
c0020f65:	d3 ea                	shr    edx,cl
c0020f67:	09 d6                	or     esi,edx
c0020f69:	89 f0                	mov    eax,esi
c0020f6b:	89 fa                	mov    edx,edi
c0020f6d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0020f71:	89 d7                	mov    edi,edx
c0020f73:	89 c6                	mov    esi,eax
c0020f75:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020f79:	39 d7                	cmp    edi,edx
c0020f7b:	72 13                	jb     c0020f90 <__udivdi3+0xec>
c0020f7d:	74 09                	je     c0020f88 <__udivdi3+0xe4>
c0020f7f:	89 f0                	mov    eax,esi
c0020f81:	31 db                	xor    ebx,ebx
c0020f83:	e9 43 ff ff ff       	jmp    c0020ecb <__udivdi3+0x27>
c0020f88:	88 d9                	mov    cl,bl
c0020f8a:	d3 e5                	shl    ebp,cl
c0020f8c:	39 c5                	cmp    ebp,eax
c0020f8e:	73 ef                	jae    c0020f7f <__udivdi3+0xdb>
c0020f90:	8d 46 ff             	lea    eax,[esi-0x1]
c0020f93:	31 db                	xor    ebx,ebx
c0020f95:	e9 31 ff ff ff       	jmp    c0020ecb <__udivdi3+0x27>
c0020f9a:	66 90                	xchg   ax,ax
c0020f9c:	31 c0                	xor    eax,eax
c0020f9e:	e9 28 ff ff ff       	jmp    c0020ecb <__udivdi3+0x27>
c0020fa3:	90                   	nop

c0020fa4 <__umoddi3>:
c0020fa4:	55                   	push   ebp
c0020fa5:	57                   	push   edi
c0020fa6:	56                   	push   esi
c0020fa7:	53                   	push   ebx
c0020fa8:	83 ec 1c             	sub    esp,0x1c
c0020fab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020faf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020fb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020fb7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020fbb:	89 da                	mov    edx,ebx
c0020fbd:	85 c0                	test   eax,eax
c0020fbf:	75 37                	jne    c0020ff8 <__umoddi3+0x54>
c0020fc1:	39 df                	cmp    edi,ebx
c0020fc3:	76 13                	jbe    c0020fd8 <__umoddi3+0x34>
c0020fc5:	89 f0                	mov    eax,esi
c0020fc7:	f7 f7                	div    edi
c0020fc9:	89 d0                	mov    eax,edx
c0020fcb:	31 d2                	xor    edx,edx
c0020fcd:	83 c4 1c             	add    esp,0x1c
c0020fd0:	5b                   	pop    ebx
c0020fd1:	5e                   	pop    esi
c0020fd2:	5f                   	pop    edi
c0020fd3:	5d                   	pop    ebp
c0020fd4:	c3                   	ret    
c0020fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0020fd8:	89 fd                	mov    ebp,edi
c0020fda:	85 ff                	test   edi,edi
c0020fdc:	75 0b                	jne    c0020fe9 <__umoddi3+0x45>
c0020fde:	b8 01 00 00 00       	mov    eax,0x1
c0020fe3:	31 d2                	xor    edx,edx
c0020fe5:	f7 f7                	div    edi
c0020fe7:	89 c5                	mov    ebp,eax
c0020fe9:	89 d8                	mov    eax,ebx
c0020feb:	31 d2                	xor    edx,edx
c0020fed:	f7 f5                	div    ebp
c0020fef:	89 f0                	mov    eax,esi
c0020ff1:	f7 f5                	div    ebp
c0020ff3:	89 d0                	mov    eax,edx
c0020ff5:	eb d4                	jmp    c0020fcb <__umoddi3+0x27>
c0020ff7:	90                   	nop
c0020ff8:	89 f1                	mov    ecx,esi
c0020ffa:	39 d8                	cmp    eax,ebx
c0020ffc:	76 0a                	jbe    c0021008 <__umoddi3+0x64>
c0020ffe:	89 f0                	mov    eax,esi
c0021000:	83 c4 1c             	add    esp,0x1c
c0021003:	5b                   	pop    ebx
c0021004:	5e                   	pop    esi
c0021005:	5f                   	pop    edi
c0021006:	5d                   	pop    ebp
c0021007:	c3                   	ret    
c0021008:	0f bd e8             	bsr    ebp,eax
c002100b:	83 f5 1f             	xor    ebp,0x1f
c002100e:	75 1c                	jne    c002102c <__umoddi3+0x88>
c0021010:	39 d8                	cmp    eax,ebx
c0021012:	72 04                	jb     c0021018 <__umoddi3+0x74>
c0021014:	39 f7                	cmp    edi,esi
c0021016:	77 08                	ja     c0021020 <__umoddi3+0x7c>
c0021018:	89 da                	mov    edx,ebx
c002101a:	29 fe                	sub    esi,edi
c002101c:	19 c2                	sbb    edx,eax
c002101e:	89 f1                	mov    ecx,esi
c0021020:	89 c8                	mov    eax,ecx
c0021022:	83 c4 1c             	add    esp,0x1c
c0021025:	5b                   	pop    ebx
c0021026:	5e                   	pop    esi
c0021027:	5f                   	pop    edi
c0021028:	5d                   	pop    ebp
c0021029:	c3                   	ret    
c002102a:	66 90                	xchg   ax,ax
c002102c:	ba 20 00 00 00       	mov    edx,0x20
c0021031:	29 ea                	sub    edx,ebp
c0021033:	89 e9                	mov    ecx,ebp
c0021035:	d3 e0                	shl    eax,cl
c0021037:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002103b:	89 f8                	mov    eax,edi
c002103d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021041:	88 d1                	mov    cl,dl
c0021043:	d3 e8                	shr    eax,cl
c0021045:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021049:	09 c1                	or     ecx,eax
c002104b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002104f:	89 e9                	mov    ecx,ebp
c0021051:	d3 e7                	shl    edi,cl
c0021053:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021057:	89 d8                	mov    eax,ebx
c0021059:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002105d:	88 d1                	mov    cl,dl
c002105f:	d3 e8                	shr    eax,cl
c0021061:	89 c7                	mov    edi,eax
c0021063:	89 e9                	mov    ecx,ebp
c0021065:	d3 e3                	shl    ebx,cl
c0021067:	89 f0                	mov    eax,esi
c0021069:	88 d1                	mov    cl,dl
c002106b:	d3 e8                	shr    eax,cl
c002106d:	09 d8                	or     eax,ebx
c002106f:	89 e9                	mov    ecx,ebp
c0021071:	d3 e6                	shl    esi,cl
c0021073:	89 f3                	mov    ebx,esi
c0021075:	89 fa                	mov    edx,edi
c0021077:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002107b:	89 d1                	mov    ecx,edx
c002107d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021081:	89 c6                	mov    esi,eax
c0021083:	89 d7                	mov    edi,edx
c0021085:	39 d1                	cmp    ecx,edx
c0021087:	72 27                	jb     c00210b0 <__umoddi3+0x10c>
c0021089:	74 21                	je     c00210ac <__umoddi3+0x108>
c002108b:	89 ca                	mov    edx,ecx
c002108d:	29 f3                	sub    ebx,esi
c002108f:	19 fa                	sbb    edx,edi
c0021091:	89 d0                	mov    eax,edx
c0021093:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0021097:	d3 e0                	shl    eax,cl
c0021099:	89 e9                	mov    ecx,ebp
c002109b:	d3 eb                	shr    ebx,cl
c002109d:	09 d8                	or     eax,ebx
c002109f:	d3 ea                	shr    edx,cl
c00210a1:	83 c4 1c             	add    esp,0x1c
c00210a4:	5b                   	pop    ebx
c00210a5:	5e                   	pop    esi
c00210a6:	5f                   	pop    edi
c00210a7:	5d                   	pop    ebp
c00210a8:	c3                   	ret    
c00210a9:	8d 76 00             	lea    esi,[esi+0x0]
c00210ac:	39 c3                	cmp    ebx,eax
c00210ae:	73 db                	jae    c002108b <__umoddi3+0xe7>
c00210b0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00210b4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00210b8:	89 d7                	mov    edi,edx
c00210ba:	89 c6                	mov    esi,eax
c00210bc:	eb cd                	jmp    c002108b <__umoddi3+0xe7>

Disassembly of section .init:

c00210be <_init>:
c00210be:	55                   	push   ebp
c00210bf:	89 e5                	mov    ebp,esp
c00210c1:	e8 52 f0 fd ff       	call   c0000118 <frame_dummy>
c00210c6:	e8 e5 fa ff ff       	call   c0020bb0 <__do_global_ctors_aux>
c00210cb:	5d                   	pop    ebp
c00210cc:	c3                   	ret    

Disassembly of section .fini:

c00210cd <_fini>:
c00210cd:	55                   	push   ebp
c00210ce:	89 e5                	mov    ebp,esp
c00210d0:	e8 d3 ef fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00210d5:	5d                   	pop    ebp
c00210d6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00210d8 <Computer::~Computer()>:
c00210d8:	83 ec 0c             	sub    esp,0xc
c00210db:	ba f4 26 02 c0       	mov    edx,0xc00226f4
c00210e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210e4:	89 10                	mov    DWORD PTR [eax],edx
c00210e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210ea:	83 ec 0c             	sub    esp,0xc
c00210ed:	50                   	push   eax
c00210ee:	e8 81 cc fe ff       	call   c000dd74 <Device::~Device()>
c00210f3:	83 c4 10             	add    esp,0x10
c00210f6:	90                   	nop
c00210f7:	83 c4 0c             	add    esp,0xc
c00210fa:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00210fc <Computer::~Computer()>:
c00210fc:	83 ec 0c             	sub    esp,0xc
c00210ff:	83 ec 0c             	sub    esp,0xc
c0021102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021106:	e8 cd ff ff ff       	call   c00210d8 <Computer::~Computer()>
c002110b:	83 c4 10             	add    esp,0x10
c002110e:	83 ec 08             	sub    esp,0x8
c0021111:	68 ec 01 00 00       	push   0x1ec
c0021116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002111a:	e8 5f b8 fe ff       	call   c000c97e <operator delete(void*, unsigned long)>
c002111f:	83 c4 10             	add    esp,0x10
c0021122:	83 c4 0c             	add    esp,0xc
c0021125:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0021126 <idleCommon()>:
c0021126:	83 ec 0c             	sub    esp,0xc
c0021129:	fa                   	cli    
c002112a:	ff 05 28 76 02 c0    	inc    DWORD PTR ds:0xc0027628
c0021130:	e8 9b 6d ff ff       	call   c0017ed0 <schedule()>
c0021135:	a1 28 76 02 c0       	mov    eax,ds:0xc0027628
c002113a:	48                   	dec    eax
c002113b:	a3 28 76 02 c0       	mov    ds:0xc0027628,eax
c0021140:	75 01                	jne    c0021143 <idleCommon()+0x1d>
c0021142:	fb                   	sti    
c0021143:	83 c4 0c             	add    esp,0xc
c0021146:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0021148 <LinkedList<UnixFile>::~LinkedList()>:
c0021148:	90                   	nop
c0021149:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002114a <LinkedList<UnixFile>::LinkedList()>:
c002114a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002114e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021154:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021158:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002115f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021163:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002116a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002116e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021174:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021178:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002117f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021183:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002118a:	90                   	nop
c002118b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002118c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002118c:	83 ec 0c             	sub    esp,0xc
c002118f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021194:	75 10                	jne    c00211a6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0021196:	83 ec 0c             	sub    esp,0xc
c0021199:	68 64 2a 02 c0       	push   0xc0022a64
c002119e:	e8 5c 31 ff ff       	call   c00142ff <Krnl::panic(char const*)>
c00211a3:	83 c4 10             	add    esp,0x10
c00211a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00211ac:	85 c0                	test   eax,eax
c00211ae:	74 34                	je     c00211e4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00211b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00211b7:	85 c0                	test   eax,eax
c00211b9:	74 29                	je     c00211e4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00211bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00211c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00211c6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00211c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00211d1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00211d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00211db:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00211e2:	eb 65                	jmp    c0021249 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00211e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00211ea:	85 c0                	test   eax,eax
c00211ec:	75 4b                	jne    c0021239 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00211ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00211f5:	85 c0                	test   eax,eax
c00211f7:	75 40                	jne    c0021239 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00211f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021201:	89 10                	mov    DWORD PTR [eax],edx
c0021203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021207:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002120b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002120e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021212:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021215:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002121c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021220:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021223:	85 c0                	test   eax,eax
c0021225:	74 22                	je     c0021249 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021227:	83 ec 0c             	sub    esp,0xc
c002122a:	68 86 2a 02 c0       	push   0xc0022a86
c002122f:	e8 cb 30 ff ff       	call   c00142ff <Krnl::panic(char const*)>
c0021234:	83 c4 10             	add    esp,0x10
c0021237:	eb 10                	jmp    c0021249 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021239:	83 ec 0c             	sub    esp,0xc
c002123c:	68 90 2a 02 c0       	push   0xc0022a90
c0021241:	e8 b9 30 ff ff       	call   c00142ff <Krnl::panic(char const*)>
c0021246:	83 c4 10             	add    esp,0x10
c0021249:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002124d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021250:	8d 50 01             	lea    edx,[eax+0x1]
c0021253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021257:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002125a:	90                   	nop
c002125b:	83 c4 0c             	add    esp,0xc
c002125e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0021260 <LinkedList<UnixFile>::getFirstElement()>:
c0021260:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021264:	8b 00                	mov    eax,DWORD PTR [eax]
c0021266:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0021268 <LinkedList<UnixFile>::removeFirst()>:
c0021268:	83 ec 0c             	sub    esp,0xc
c002126b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002126f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021271:	85 c0                	test   eax,eax
c0021273:	75 12                	jne    c0021287 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0021275:	83 ec 0c             	sub    esp,0xc
c0021278:	68 9c 2a 02 c0       	push   0xc0022a9c
c002127d:	e8 7d 30 ff ff       	call   c00142ff <Krnl::panic(char const*)>
c0021282:	83 c4 10             	add    esp,0x10
c0021285:	eb 7e                	jmp    c0021305 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0021287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002128b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002128e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021291:	85 c0                	test   eax,eax
c0021293:	74 10                	je     c00212a5 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0021295:	83 ec 0c             	sub    esp,0xc
c0021298:	68 e7 2a 02 c0       	push   0xc0022ae7
c002129d:	e8 5d 30 ff ff       	call   c00142ff <Krnl::panic(char const*)>
c00212a2:	83 c4 10             	add    esp,0x10
c00212a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00212ab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00212ae:	85 c0                	test   eax,eax
c00212b0:	75 33                	jne    c00212e5 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00212b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212b6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00212bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00212c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212cb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00212ce:	83 f8 01             	cmp    eax,0x1
c00212d1:	74 21                	je     c00212f4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00212d3:	83 ec 0c             	sub    esp,0xc
c00212d6:	68 c0 2a 02 c0       	push   0xc0022ac0
c00212db:	e8 1f 30 ff ff       	call   c00142ff <Krnl::panic(char const*)>
c00212e0:	83 c4 10             	add    esp,0x10
c00212e3:	eb 0f                	jmp    c00212f4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00212e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00212eb:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00212ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212f2:	89 10                	mov    DWORD PTR [eax],edx
c00212f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212f8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00212fb:	8d 50 ff             	lea    edx,[eax-0x1]
c00212fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021302:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021305:	83 c4 0c             	add    esp,0xc
c0021308:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002130a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002130a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002130e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021311:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0021312 <DriverlessDevice::~DriverlessDevice()>:
c0021312:	ba 7c 32 02 c0       	mov    edx,0xc002327c
c0021317:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002131b:	89 10                	mov    DWORD PTR [eax],edx
c002131d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021321:	50                   	push   eax
c0021322:	e8 4d ca fe ff       	call   c000dd74 <Device::~Device()>
c0021327:	83 c4 04             	add    esp,0x4
c002132a:	90                   	nop
c002132b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002132c <DriverlessDevice::~DriverlessDevice()>:
c002132c:	83 ec 0c             	sub    esp,0xc
c002132f:	83 ec 0c             	sub    esp,0xc
c0021332:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021336:	e8 d7 ff ff ff       	call   c0021312 <DriverlessDevice::~DriverlessDevice()>
c002133b:	83 c4 10             	add    esp,0x10
c002133e:	83 ec 08             	sub    esp,0x8
c0021341:	68 58 01 00 00       	push   0x158
c0021346:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002134a:	e8 2f b6 fe ff       	call   c000c97e <operator delete(void*, unsigned long)>
c002134f:	83 c4 10             	add    esp,0x10
c0021352:	83 c4 0c             	add    esp,0xc
c0021355:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0021356 <LinkedList<Device>::addElement(Device*)>:
c0021356:	83 ec 0c             	sub    esp,0xc
c0021359:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002135e:	75 10                	jne    c0021370 <LinkedList<Device>::addElement(Device*)+0x1a>
c0021360:	83 ec 0c             	sub    esp,0xc
c0021363:	68 64 2a 02 c0       	push   0xc0022a64
c0021368:	e8 92 2f ff ff       	call   c00142ff <Krnl::panic(char const*)>
c002136d:	83 c4 10             	add    esp,0x10
c0021370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021374:	8b 00                	mov    eax,DWORD PTR [eax]
c0021376:	85 c0                	test   eax,eax
c0021378:	74 3a                	je     c00213b4 <LinkedList<Device>::addElement(Device*)+0x5e>
c002137a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002137e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021381:	85 c0                	test   eax,eax
c0021383:	74 2f                	je     c00213b4 <LinkedList<Device>::addElement(Device*)+0x5e>
c0021385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021389:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002138c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021390:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0021396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002139a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002139e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00213a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213a5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00213a8:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00213b2:	eb 68                	jmp    c002141c <LinkedList<Device>::addElement(Device*)+0xc6>
c00213b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00213ba:	85 c0                	test   eax,eax
c00213bc:	75 4e                	jne    c002140c <LinkedList<Device>::addElement(Device*)+0xb6>
c00213be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00213c5:	85 c0                	test   eax,eax
c00213c7:	75 43                	jne    c002140c <LinkedList<Device>::addElement(Device*)+0xb6>
c00213c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00213d1:	89 10                	mov    DWORD PTR [eax],edx
c00213d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213d7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00213db:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00213de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00213e5:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00213ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213f3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00213f6:	85 c0                	test   eax,eax
c00213f8:	74 22                	je     c002141c <LinkedList<Device>::addElement(Device*)+0xc6>
c00213fa:	83 ec 0c             	sub    esp,0xc
c00213fd:	68 86 2a 02 c0       	push   0xc0022a86
c0021402:	e8 f8 2e ff ff       	call   c00142ff <Krnl::panic(char const*)>
c0021407:	83 c4 10             	add    esp,0x10
c002140a:	eb 10                	jmp    c002141c <LinkedList<Device>::addElement(Device*)+0xc6>
c002140c:	83 ec 0c             	sub    esp,0xc
c002140f:	68 90 2a 02 c0       	push   0xc0022a90
c0021414:	e8 e6 2e ff ff       	call   c00142ff <Krnl::panic(char const*)>
c0021419:	83 c4 10             	add    esp,0x10
c002141c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021420:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021423:	8d 50 01             	lea    edx,[eax+0x1]
c0021426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002142a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002142d:	90                   	nop
c002142e:	83 c4 0c             	add    esp,0xc
c0021431:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0021432 <LinkedList<Device>::LinkedList()>:
c0021432:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021436:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002143c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021440:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002144b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021452:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021456:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002145c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021460:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021467:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002146b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021472:	90                   	nop
c0021473:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0021474 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0021474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021478:	8b 00                	mov    eax,DWORD PTR [eax]
c002147a:	85 c0                	test   eax,eax
c002147c:	75 0e                	jne    c002148c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002147e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021482:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021485:	85 c0                	test   eax,eax
c0021487:	75 03                	jne    c002148c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021489:	b0 01                	mov    al,0x1
c002148b:	c3                   	ret    
c002148c:	b0 00                	mov    al,0x0
c002148e:	90                   	nop
c002148f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0021490 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0021490:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021494:	8b 00                	mov    eax,DWORD PTR [eax]
c0021496:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0021498 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0021498:	83 ec 0c             	sub    esp,0xc
c002149b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002149f:	8b 00                	mov    eax,DWORD PTR [eax]
c00214a1:	85 c0                	test   eax,eax
c00214a3:	75 17                	jne    c00214bc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c00214a5:	83 ec 0c             	sub    esp,0xc
c00214a8:	68 9c 2a 02 c0       	push   0xc0022a9c
c00214ad:	e8 4d 2e ff ff       	call   c00142ff <Krnl::panic(char const*)>
c00214b2:	83 c4 10             	add    esp,0x10
c00214b5:	e9 92 00 00 00       	jmp    c002154c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c00214ba:	66 90                	xchg   ax,ax
c00214bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00214c3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00214c6:	85 c0                	test   eax,eax
c00214c8:	0f 95 c0             	setne  al
c00214cb:	84 c0                	test   al,al
c00214cd:	74 11                	je     c00214e0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c00214cf:	83 ec 0c             	sub    esp,0xc
c00214d2:	68 e7 2a 02 c0       	push   0xc0022ae7
c00214d7:	e8 23 2e ff ff       	call   c00142ff <Krnl::panic(char const*)>
c00214dc:	83 c4 10             	add    esp,0x10
c00214df:	90                   	nop
c00214e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00214e6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00214e9:	85 c0                	test   eax,eax
c00214eb:	0f 94 c0             	sete   al
c00214ee:	84 c0                	test   al,al
c00214f0:	74 36                	je     c0021528 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c00214f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214f6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00214fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021500:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002150b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002150e:	83 f8 01             	cmp    eax,0x1
c0021511:	74 25                	je     c0021538 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0021513:	83 ec 0c             	sub    esp,0xc
c0021516:	68 c0 2a 02 c0       	push   0xc0022ac0
c002151b:	e8 df 2d ff ff       	call   c00142ff <Krnl::panic(char const*)>
c0021520:	83 c4 10             	add    esp,0x10
c0021523:	eb 13                	jmp    c0021538 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0021525:	8d 76 00             	lea    esi,[esi+0x0]
c0021528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002152c:	8b 00                	mov    eax,DWORD PTR [eax]
c002152e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0021531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021535:	89 10                	mov    DWORD PTR [eax],edx
c0021537:	90                   	nop
c0021538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002153c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002153f:	8d 50 ff             	lea    edx,[eax-0x1]
c0021542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021546:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021549:	8d 76 00             	lea    esi,[esi+0x0]
c002154c:	83 c4 0c             	add    esp,0xc
c002154f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0021550 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0021550:	83 ec 0c             	sub    esp,0xc
c0021553:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021558:	75 12                	jne    c002156c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c002155a:	83 ec 0c             	sub    esp,0xc
c002155d:	68 64 2a 02 c0       	push   0xc0022a64
c0021562:	e8 98 2d ff ff       	call   c00142ff <Krnl::panic(char const*)>
c0021567:	83 c4 10             	add    esp,0x10
c002156a:	66 90                	xchg   ax,ax
c002156c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021570:	8b 00                	mov    eax,DWORD PTR [eax]
c0021572:	85 c0                	test   eax,eax
c0021574:	74 36                	je     c00215ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021576:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002157a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002157d:	85 c0                	test   eax,eax
c002157f:	74 2b                	je     c00215ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021585:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021588:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002158c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002158f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021593:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021597:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002159a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002159e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00215a1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00215a8:	eb 6a                	jmp    c0021614 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00215aa:	66 90                	xchg   ax,ax
c00215ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00215b2:	85 c0                	test   eax,eax
c00215b4:	75 4e                	jne    c0021604 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00215b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00215bd:	85 c0                	test   eax,eax
c00215bf:	75 43                	jne    c0021604 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00215c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215c5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00215c9:	89 10                	mov    DWORD PTR [eax],edx
c00215cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00215d3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00215d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00215dd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00215e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00215eb:	85 c0                	test   eax,eax
c00215ed:	74 25                	je     c0021614 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00215ef:	83 ec 0c             	sub    esp,0xc
c00215f2:	68 86 2a 02 c0       	push   0xc0022a86
c00215f7:	e8 03 2d ff ff       	call   c00142ff <Krnl::panic(char const*)>
c00215fc:	83 c4 10             	add    esp,0x10
c00215ff:	eb 13                	jmp    c0021614 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021601:	8d 76 00             	lea    esi,[esi+0x0]
c0021604:	83 ec 0c             	sub    esp,0xc
c0021607:	68 90 2a 02 c0       	push   0xc0022a90
c002160c:	e8 ee 2c ff ff       	call   c00142ff <Krnl::panic(char const*)>
c0021611:	83 c4 10             	add    esp,0x10
c0021614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021618:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002161b:	8d 50 01             	lea    edx,[eax+0x1]
c002161e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021622:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021625:	90                   	nop
c0021626:	83 c4 0c             	add    esp,0xc
c0021629:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c002162c <ACPI::~ACPI()>:
c002162c:	83 ec 0c             	sub    esp,0xc
c002162f:	ba 2c 3c 02 c0       	mov    edx,0xc0023c2c
c0021634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021638:	89 10                	mov    DWORD PTR [eax],edx
c002163a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002163e:	83 ec 0c             	sub    esp,0xc
c0021641:	50                   	push   eax
c0021642:	e8 2d c7 fe ff       	call   c000dd74 <Device::~Device()>
c0021647:	83 c4 10             	add    esp,0x10
c002164a:	90                   	nop
c002164b:	83 c4 0c             	add    esp,0xc
c002164e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0021650 <ACPI::~ACPI()>:
c0021650:	83 ec 0c             	sub    esp,0xc
c0021653:	83 ec 0c             	sub    esp,0xc
c0021656:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002165a:	e8 cd ff ff ff       	call   c002162c <ACPI::~ACPI()>
c002165f:	83 c4 10             	add    esp,0x10
c0021662:	83 ec 08             	sub    esp,0x8
c0021665:	68 64 12 00 00       	push   0x1264
c002166a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002166e:	e8 0b b3 fe ff       	call   c000c97e <operator delete(void*, unsigned long)>
c0021673:	83 c4 10             	add    esp,0x10
c0021676:	83 c4 0c             	add    esp,0xc
c0021679:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002167c <LinkedList<Device>::~LinkedList()>:
c002167c:	90                   	nop
c002167d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0021680 <LinkedList<Device>::isEmpty()>:
c0021680:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021684:	8b 00                	mov    eax,DWORD PTR [eax]
c0021686:	85 c0                	test   eax,eax
c0021688:	75 0e                	jne    c0021698 <LinkedList<Device>::isEmpty()+0x18>
c002168a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002168e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021691:	85 c0                	test   eax,eax
c0021693:	75 03                	jne    c0021698 <LinkedList<Device>::isEmpty()+0x18>
c0021695:	b0 01                	mov    al,0x1
c0021697:	c3                   	ret    
c0021698:	b0 00                	mov    al,0x0
c002169a:	90                   	nop
c002169b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002169c <LinkedList<Device>::getFirstElement()>:
c002169c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00216a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00216a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00216a4 <LinkedList<Device>::removeFirst()>:
c00216a4:	83 ec 0c             	sub    esp,0xc
c00216a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00216ad:	85 c0                	test   eax,eax
c00216af:	75 17                	jne    c00216c8 <LinkedList<Device>::removeFirst()+0x24>
c00216b1:	83 ec 0c             	sub    esp,0xc
c00216b4:	68 9c 2a 02 c0       	push   0xc0022a9c
c00216b9:	e8 41 2c ff ff       	call   c00142ff <Krnl::panic(char const*)>
c00216be:	83 c4 10             	add    esp,0x10
c00216c1:	e9 92 00 00 00       	jmp    c0021758 <LinkedList<Device>::removeFirst()+0xb4>
c00216c6:	66 90                	xchg   ax,ax
c00216c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00216cf:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00216d5:	85 c0                	test   eax,eax
c00216d7:	74 13                	je     c00216ec <LinkedList<Device>::removeFirst()+0x48>
c00216d9:	83 ec 0c             	sub    esp,0xc
c00216dc:	68 e7 2a 02 c0       	push   0xc0022ae7
c00216e1:	e8 19 2c ff ff       	call   c00142ff <Krnl::panic(char const*)>
c00216e6:	83 c4 10             	add    esp,0x10
c00216e9:	8d 76 00             	lea    esi,[esi+0x0]
c00216ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00216f2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00216f8:	85 c0                	test   eax,eax
c00216fa:	75 34                	jne    c0021730 <LinkedList<Device>::removeFirst()+0x8c>
c00216fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021700:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002170a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021715:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021718:	83 f8 01             	cmp    eax,0x1
c002171b:	74 27                	je     c0021744 <LinkedList<Device>::removeFirst()+0xa0>
c002171d:	83 ec 0c             	sub    esp,0xc
c0021720:	68 c0 2a 02 c0       	push   0xc0022ac0
c0021725:	e8 d5 2b ff ff       	call   c00142ff <Krnl::panic(char const*)>
c002172a:	83 c4 10             	add    esp,0x10
c002172d:	eb 15                	jmp    c0021744 <LinkedList<Device>::removeFirst()+0xa0>
c002172f:	90                   	nop
c0021730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021734:	8b 00                	mov    eax,DWORD PTR [eax]
c0021736:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002173c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021740:	89 10                	mov    DWORD PTR [eax],edx
c0021742:	66 90                	xchg   ax,ax
c0021744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021748:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002174b:	8d 50 ff             	lea    edx,[eax-0x1]
c002174e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021752:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021755:	8d 76 00             	lea    esi,[esi+0x0]
c0021758:	83 c4 0c             	add    esp,0xc
c002175b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002175c <CPU::~CPU()>:
c002175c:	83 ec 0c             	sub    esp,0xc
c002175f:	ba 08 40 02 c0       	mov    edx,0xc0024008
c0021764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021768:	89 10                	mov    DWORD PTR [eax],edx
c002176a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002176e:	83 ec 0c             	sub    esp,0xc
c0021771:	50                   	push   eax
c0021772:	e8 fd c5 fe ff       	call   c000dd74 <Device::~Device()>
c0021777:	83 c4 10             	add    esp,0x10
c002177a:	90                   	nop
c002177b:	83 c4 0c             	add    esp,0xc
c002177e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0021780 <CPU::~CPU()>:
c0021780:	83 ec 0c             	sub    esp,0xc
c0021783:	83 ec 0c             	sub    esp,0xc
c0021786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002178a:	e8 cd ff ff ff       	call   c002175c <CPU::~CPU()>
c002178f:	83 c4 10             	add    esp,0x10
c0021792:	83 ec 08             	sub    esp,0x8
c0021795:	68 98 11 00 00       	push   0x1198
c002179a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002179e:	e8 db b1 fe ff       	call   c000c97e <operator delete(void*, unsigned long)>
c00217a3:	83 c4 10             	add    esp,0x10
c00217a6:	83 c4 0c             	add    esp,0xc
c00217a9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00217ac <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00217ac:	90                   	nop
c00217ad:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00217b0 <ThreadControlBlock::ThreadControlBlock()>:
c00217b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217b4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00217bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217bf:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00217c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217ca:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00217d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217d5:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c00217dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217e0:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c00217e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217eb:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00217ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217f3:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c00217f7:	90                   	nop
c00217f8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00217fc <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00217fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021800:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021806:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002180a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021811:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021815:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002181c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021820:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021826:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002182a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021831:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021835:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002183c:	90                   	nop
c002183d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0021840 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0021840:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021844:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021847:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0021848 <Vm::_FPUState::_FPUState()>:
c0021848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002184c:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0021853:	90                   	nop
c0021854:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0021856 <PCI::~PCI()>:
c0021856:	83 ec 0c             	sub    esp,0xc
c0021859:	ba f4 4c 02 c0       	mov    edx,0xc0024cf4
c002185e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021862:	89 10                	mov    DWORD PTR [eax],edx
c0021864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021868:	83 ec 0c             	sub    esp,0xc
c002186b:	50                   	push   eax
c002186c:	e8 d3 be fe ff       	call   c000d744 <Bus::~Bus()>
c0021871:	83 c4 10             	add    esp,0x10
c0021874:	90                   	nop
c0021875:	83 c4 0c             	add    esp,0xc
c0021878:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002187a <PCI::~PCI()>:
c002187a:	83 ec 0c             	sub    esp,0xc
c002187d:	83 ec 0c             	sub    esp,0xc
c0021880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021884:	e8 cd ff ff ff       	call   c0021856 <PCI::~PCI()>
c0021889:	83 c4 10             	add    esp,0x10
c002188c:	83 ec 08             	sub    esp,0x8
c002188f:	68 5c 01 00 00       	push   0x15c
c0021894:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021898:	e8 e1 b0 fe ff       	call   c000c97e <operator delete(void*, unsigned long)>
c002189d:	83 c4 10             	add    esp,0x10
c00218a0:	83 c4 0c             	add    esp,0xc
c00218a3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00218a4 <IDE::~IDE()>:
c00218a4:	83 ec 0c             	sub    esp,0xc
c00218a7:	ba a8 4d 02 c0       	mov    edx,0xc0024da8
c00218ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218b0:	89 10                	mov    DWORD PTR [eax],edx
c00218b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218b6:	83 ec 0c             	sub    esp,0xc
c00218b9:	50                   	push   eax
c00218ba:	e8 cd c9 fe ff       	call   c000e28c <HardDiskController::~HardDiskController()>
c00218bf:	83 c4 10             	add    esp,0x10
c00218c2:	90                   	nop
c00218c3:	83 c4 0c             	add    esp,0xc
c00218c6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00218c8 <IDE::~IDE()>:
c00218c8:	83 ec 0c             	sub    esp,0xc
c00218cb:	83 ec 0c             	sub    esp,0xc
c00218ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00218d2:	e8 cd ff ff ff       	call   c00218a4 <IDE::~IDE()>
c00218d7:	83 c4 10             	add    esp,0x10
c00218da:	83 ec 08             	sub    esp,0x8
c00218dd:	68 70 02 00 00       	push   0x270
c00218e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00218e6:	e8 93 b0 fe ff       	call   c000c97e <operator delete(void*, unsigned long)>
c00218eb:	83 c4 10             	add    esp,0x10
c00218ee:	83 c4 0c             	add    esp,0xc
c00218f1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00218f2 <SATABus::~SATABus()>:
c00218f2:	83 ec 0c             	sub    esp,0xc
c00218f5:	ba 20 4e 02 c0       	mov    edx,0xc0024e20
c00218fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218fe:	89 10                	mov    DWORD PTR [eax],edx
c0021900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021904:	83 ec 0c             	sub    esp,0xc
c0021907:	50                   	push   eax
c0021908:	e8 7f c9 fe ff       	call   c000e28c <HardDiskController::~HardDiskController()>
c002190d:	83 c4 10             	add    esp,0x10
c0021910:	90                   	nop
c0021911:	83 c4 0c             	add    esp,0xc
c0021914:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0021916 <SATABus::~SATABus()>:
c0021916:	83 ec 0c             	sub    esp,0xc
c0021919:	83 ec 0c             	sub    esp,0xc
c002191c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021920:	e8 cd ff ff ff       	call   c00218f2 <SATABus::~SATABus()>
c0021925:	83 c4 10             	add    esp,0x10
c0021928:	83 ec 08             	sub    esp,0x8
c002192b:	68 64 01 00 00       	push   0x164
c0021930:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021934:	e8 45 b0 fe ff       	call   c000c97e <operator delete(void*, unsigned long)>
c0021939:	83 c4 10             	add    esp,0x10
c002193c:	83 c4 0c             	add    esp,0xc
c002193f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0021940 <ATA::~ATA()>:
c0021940:	83 ec 0c             	sub    esp,0xc
c0021943:	ba 98 4e 02 c0       	mov    edx,0xc0024e98
c0021948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002194c:	89 10                	mov    DWORD PTR [eax],edx
c002194e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021952:	83 ec 0c             	sub    esp,0xc
c0021955:	50                   	push   eax
c0021956:	e8 13 ca fe ff       	call   c000e36e <PhysicalDisk::~PhysicalDisk()>
c002195b:	83 c4 10             	add    esp,0x10
c002195e:	90                   	nop
c002195f:	83 c4 0c             	add    esp,0xc
c0021962:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0021964 <ATA::~ATA()>:
c0021964:	83 ec 0c             	sub    esp,0xc
c0021967:	83 ec 0c             	sub    esp,0xc
c002196a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002196e:	e8 cd ff ff ff       	call   c0021940 <ATA::~ATA()>
c0021973:	83 c4 10             	add    esp,0x10
c0021976:	83 ec 08             	sub    esp,0x8
c0021979:	68 7c 01 00 00       	push   0x17c
c002197e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021982:	e8 f7 af fe ff       	call   c000c97e <operator delete(void*, unsigned long)>
c0021987:	83 c4 10             	add    esp,0x10
c002198a:	83 c4 0c             	add    esp,0xc
c002198d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002198e <ATAPI::~ATAPI()>:
c002198e:	83 ec 0c             	sub    esp,0xc
c0021991:	ba d0 4e 02 c0       	mov    edx,0xc0024ed0
c0021996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002199a:	89 10                	mov    DWORD PTR [eax],edx
c002199c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219a0:	83 ec 0c             	sub    esp,0xc
c00219a3:	50                   	push   eax
c00219a4:	e8 c5 c9 fe ff       	call   c000e36e <PhysicalDisk::~PhysicalDisk()>
c00219a9:	83 c4 10             	add    esp,0x10
c00219ac:	90                   	nop
c00219ad:	83 c4 0c             	add    esp,0xc
c00219b0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00219b2 <ATAPI::~ATAPI()>:
c00219b2:	83 ec 0c             	sub    esp,0xc
c00219b5:	83 ec 0c             	sub    esp,0xc
c00219b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219bc:	e8 cd ff ff ff       	call   c002198e <ATAPI::~ATAPI()>
c00219c1:	83 c4 10             	add    esp,0x10
c00219c4:	83 ec 08             	sub    esp,0x8
c00219c7:	68 80 01 00 00       	push   0x180
c00219cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219d0:	e8 a9 af fe ff       	call   c000c97e <operator delete(void*, unsigned long)>
c00219d5:	83 c4 10             	add    esp,0x10
c00219d8:	83 c4 0c             	add    esp,0xc
c00219db:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00219dc <SATA::~SATA()>:
c00219dc:	83 ec 0c             	sub    esp,0xc
c00219df:	ba 84 4f 02 c0       	mov    edx,0xc0024f84
c00219e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219e8:	89 10                	mov    DWORD PTR [eax],edx
c00219ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219ee:	83 ec 0c             	sub    esp,0xc
c00219f1:	50                   	push   eax
c00219f2:	e8 77 c9 fe ff       	call   c000e36e <PhysicalDisk::~PhysicalDisk()>
c00219f7:	83 c4 10             	add    esp,0x10
c00219fa:	90                   	nop
c00219fb:	83 c4 0c             	add    esp,0xc
c00219fe:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0021a00 <SATA::~SATA()>:
c0021a00:	83 ec 0c             	sub    esp,0xc
c0021a03:	83 ec 0c             	sub    esp,0xc
c0021a06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a0a:	e8 cd ff ff ff       	call   c00219dc <SATA::~SATA()>
c0021a0f:	83 c4 10             	add    esp,0x10
c0021a12:	83 ec 08             	sub    esp,0x8
c0021a15:	68 7c 01 00 00       	push   0x17c
c0021a1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a1e:	e8 5b af fe ff       	call   c000c97e <operator delete(void*, unsigned long)>
c0021a23:	83 c4 10             	add    esp,0x10
c0021a26:	83 c4 0c             	add    esp,0xc
c0021a29:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0021a2a <SATAPI::~SATAPI()>:
c0021a2a:	83 ec 0c             	sub    esp,0xc
c0021a2d:	ba 60 50 02 c0       	mov    edx,0xc0025060
c0021a32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a36:	89 10                	mov    DWORD PTR [eax],edx
c0021a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a3c:	83 ec 0c             	sub    esp,0xc
c0021a3f:	50                   	push   eax
c0021a40:	e8 29 c9 fe ff       	call   c000e36e <PhysicalDisk::~PhysicalDisk()>
c0021a45:	83 c4 10             	add    esp,0x10
c0021a48:	90                   	nop
c0021a49:	83 c4 0c             	add    esp,0xc
c0021a4c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0021a4e <SATAPI::~SATAPI()>:
c0021a4e:	83 ec 0c             	sub    esp,0xc
c0021a51:	83 ec 0c             	sub    esp,0xc
c0021a54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a58:	e8 cd ff ff ff       	call   c0021a2a <SATAPI::~SATAPI()>
c0021a5d:	83 c4 10             	add    esp,0x10
c0021a60:	83 ec 08             	sub    esp,0x8
c0021a63:	68 80 01 00 00       	push   0x180
c0021a68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a6c:	e8 0d af fe ff       	call   c000c97e <operator delete(void*, unsigned long)>
c0021a71:	83 c4 10             	add    esp,0x10
c0021a74:	83 c4 0c             	add    esp,0xc
c0021a77:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0021a78 <AVX::~AVX()>:
c0021a78:	83 ec 0c             	sub    esp,0xc
c0021a7b:	ba a0 50 02 c0       	mov    edx,0xc00250a0
c0021a80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a84:	89 10                	mov    DWORD PTR [eax],edx
c0021a86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a8a:	83 ec 0c             	sub    esp,0xc
c0021a8d:	50                   	push   eax
c0021a8e:	e8 61 c9 fe ff       	call   c000e3f4 <FPU::~FPU()>
c0021a93:	83 c4 10             	add    esp,0x10
c0021a96:	90                   	nop
c0021a97:	83 c4 0c             	add    esp,0xc
c0021a9a:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0021a9c <AVX::~AVX()>:
c0021a9c:	83 ec 0c             	sub    esp,0xc
c0021a9f:	83 ec 0c             	sub    esp,0xc
c0021aa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021aa6:	e8 cd ff ff ff       	call   c0021a78 <AVX::~AVX()>
c0021aab:	83 c4 10             	add    esp,0x10
c0021aae:	83 ec 08             	sub    esp,0x8
c0021ab1:	68 58 01 00 00       	push   0x158
c0021ab6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021aba:	e8 bf ae fe ff       	call   c000c97e <operator delete(void*, unsigned long)>
c0021abf:	83 c4 10             	add    esp,0x10
c0021ac2:	83 c4 0c             	add    esp,0xc
c0021ac5:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0021ac8 <MMX::~MMX()>:
c0021ac8:	83 ec 0c             	sub    esp,0xc
c0021acb:	ba e0 50 02 c0       	mov    edx,0xc00250e0
c0021ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ad4:	89 10                	mov    DWORD PTR [eax],edx
c0021ad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ada:	83 ec 0c             	sub    esp,0xc
c0021add:	50                   	push   eax
c0021ade:	e8 11 c9 fe ff       	call   c000e3f4 <FPU::~FPU()>
c0021ae3:	83 c4 10             	add    esp,0x10
c0021ae6:	90                   	nop
c0021ae7:	83 c4 0c             	add    esp,0xc
c0021aea:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0021aec <MMX::~MMX()>:
c0021aec:	83 ec 0c             	sub    esp,0xc
c0021aef:	83 ec 0c             	sub    esp,0xc
c0021af2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021af6:	e8 cd ff ff ff       	call   c0021ac8 <MMX::~MMX()>
c0021afb:	83 c4 10             	add    esp,0x10
c0021afe:	83 ec 08             	sub    esp,0x8
c0021b01:	68 58 01 00 00       	push   0x158
c0021b06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b0a:	e8 6f ae fe ff       	call   c000c97e <operator delete(void*, unsigned long)>
c0021b0f:	83 c4 10             	add    esp,0x10
c0021b12:	83 c4 0c             	add    esp,0xc
c0021b15:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0021b18 <SSE::~SSE()>:
c0021b18:	83 ec 0c             	sub    esp,0xc
c0021b1b:	ba 20 51 02 c0       	mov    edx,0xc0025120
c0021b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b24:	89 10                	mov    DWORD PTR [eax],edx
c0021b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b2a:	83 ec 0c             	sub    esp,0xc
c0021b2d:	50                   	push   eax
c0021b2e:	e8 c1 c8 fe ff       	call   c000e3f4 <FPU::~FPU()>
c0021b33:	83 c4 10             	add    esp,0x10
c0021b36:	90                   	nop
c0021b37:	83 c4 0c             	add    esp,0xc
c0021b3a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0021b3c <SSE::~SSE()>:
c0021b3c:	83 ec 0c             	sub    esp,0xc
c0021b3f:	83 ec 0c             	sub    esp,0xc
c0021b42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b46:	e8 cd ff ff ff       	call   c0021b18 <SSE::~SSE()>
c0021b4b:	83 c4 10             	add    esp,0x10
c0021b4e:	83 ec 08             	sub    esp,0x8
c0021b51:	68 58 01 00 00       	push   0x158
c0021b56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b5a:	e8 1f ae fe ff       	call   c000c97e <operator delete(void*, unsigned long)>
c0021b5f:	83 c4 10             	add    esp,0x10
c0021b62:	83 c4 0c             	add    esp,0xc
c0021b65:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0021b68 <x87::~x87()>:
c0021b68:	83 ec 0c             	sub    esp,0xc
c0021b6b:	ba 60 51 02 c0       	mov    edx,0xc0025160
c0021b70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b74:	89 10                	mov    DWORD PTR [eax],edx
c0021b76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b7a:	83 ec 0c             	sub    esp,0xc
c0021b7d:	50                   	push   eax
c0021b7e:	e8 71 c8 fe ff       	call   c000e3f4 <FPU::~FPU()>
c0021b83:	83 c4 10             	add    esp,0x10
c0021b86:	90                   	nop
c0021b87:	83 c4 0c             	add    esp,0xc
c0021b8a:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0021b8c <x87::~x87()>:
c0021b8c:	83 ec 0c             	sub    esp,0xc
c0021b8f:	83 ec 0c             	sub    esp,0xc
c0021b92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b96:	e8 cd ff ff ff       	call   c0021b68 <x87::~x87()>
c0021b9b:	83 c4 10             	add    esp,0x10
c0021b9e:	83 ec 08             	sub    esp,0x8
c0021ba1:	68 58 01 00 00       	push   0x158
c0021ba6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021baa:	e8 cf ad fe ff       	call   c000c97e <operator delete(void*, unsigned long)>
c0021baf:	83 c4 10             	add    esp,0x10
c0021bb2:	83 c4 0c             	add    esp,0xc
c0021bb5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0021bb6 <IOAPIC::~IOAPIC()>:
c0021bb6:	83 ec 0c             	sub    esp,0xc
c0021bb9:	ba b8 52 02 c0       	mov    edx,0xc00252b8
c0021bbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bc2:	89 10                	mov    DWORD PTR [eax],edx
c0021bc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bc8:	83 ec 0c             	sub    esp,0xc
c0021bcb:	50                   	push   eax
c0021bcc:	e8 a3 c1 fe ff       	call   c000dd74 <Device::~Device()>
c0021bd1:	83 c4 10             	add    esp,0x10
c0021bd4:	90                   	nop
c0021bd5:	83 c4 0c             	add    esp,0xc
c0021bd8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0021bda <IOAPIC::~IOAPIC()>:
c0021bda:	83 ec 0c             	sub    esp,0xc
c0021bdd:	83 ec 0c             	sub    esp,0xc
c0021be0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021be4:	e8 cd ff ff ff       	call   c0021bb6 <IOAPIC::~IOAPIC()>
c0021be9:	83 c4 10             	add    esp,0x10
c0021bec:	83 ec 08             	sub    esp,0x8
c0021bef:	68 68 01 00 00       	push   0x168
c0021bf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021bf8:	e8 81 ad fe ff       	call   c000c97e <operator delete(void*, unsigned long)>
c0021bfd:	83 c4 10             	add    esp,0x10
c0021c00:	83 c4 0c             	add    esp,0xc
c0021c03:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0021c04 <APIC::~APIC()>:
c0021c04:	83 ec 0c             	sub    esp,0xc
c0021c07:	ba 70 52 02 c0       	mov    edx,0xc0025270
c0021c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c10:	89 10                	mov    DWORD PTR [eax],edx
c0021c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c16:	83 ec 0c             	sub    esp,0xc
c0021c19:	50                   	push   eax
c0021c1a:	e8 a9 cc fe ff       	call   c000e8c8 <InterruptController::~InterruptController()>
c0021c1f:	83 c4 10             	add    esp,0x10
c0021c22:	90                   	nop
c0021c23:	83 c4 0c             	add    esp,0xc
c0021c26:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0021c28 <APIC::~APIC()>:
c0021c28:	83 ec 0c             	sub    esp,0xc
c0021c2b:	83 ec 0c             	sub    esp,0xc
c0021c2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c32:	e8 cd ff ff ff       	call   c0021c04 <APIC::~APIC()>
c0021c37:	83 c4 10             	add    esp,0x10
c0021c3a:	83 ec 08             	sub    esp,0x8
c0021c3d:	68 58 21 00 00       	push   0x2158
c0021c42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c46:	e8 33 ad fe ff       	call   c000c97e <operator delete(void*, unsigned long)>
c0021c4b:	83 c4 10             	add    esp,0x10
c0021c4e:	83 c4 0c             	add    esp,0xc
c0021c51:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0021c52 <PIC::~PIC()>:
c0021c52:	83 ec 0c             	sub    esp,0xc
c0021c55:	ba 08 53 02 c0       	mov    edx,0xc0025308
c0021c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c5e:	89 10                	mov    DWORD PTR [eax],edx
c0021c60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c64:	83 ec 0c             	sub    esp,0xc
c0021c67:	50                   	push   eax
c0021c68:	e8 5b cc fe ff       	call   c000e8c8 <InterruptController::~InterruptController()>
c0021c6d:	83 c4 10             	add    esp,0x10
c0021c70:	90                   	nop
c0021c71:	83 c4 0c             	add    esp,0xc
c0021c74:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0021c76 <PIC::~PIC()>:
c0021c76:	83 ec 0c             	sub    esp,0xc
c0021c79:	83 ec 0c             	sub    esp,0xc
c0021c7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c80:	e8 cd ff ff ff       	call   c0021c52 <PIC::~PIC()>
c0021c85:	83 c4 10             	add    esp,0x10
c0021c88:	83 ec 08             	sub    esp,0x8
c0021c8b:	68 58 21 00 00       	push   0x2158
c0021c90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c94:	e8 e5 ac fe ff       	call   c000c97e <operator delete(void*, unsigned long)>
c0021c99:	83 c4 10             	add    esp,0x10
c0021c9c:	83 c4 0c             	add    esp,0xc
c0021c9f:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0021ca0 <APICTimer::~APICTimer()>:
c0021ca0:	83 ec 0c             	sub    esp,0xc
c0021ca3:	ba 5c 53 02 c0       	mov    edx,0xc002535c
c0021ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cac:	89 10                	mov    DWORD PTR [eax],edx
c0021cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cb2:	83 ec 0c             	sub    esp,0xc
c0021cb5:	50                   	push   eax
c0021cb6:	e8 19 ea fe ff       	call   c00106d4 <Timer::~Timer()>
c0021cbb:	83 c4 10             	add    esp,0x10
c0021cbe:	90                   	nop
c0021cbf:	83 c4 0c             	add    esp,0xc
c0021cc2:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0021cc4 <APICTimer::~APICTimer()>:
c0021cc4:	83 ec 0c             	sub    esp,0xc
c0021cc7:	83 ec 0c             	sub    esp,0xc
c0021cca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cce:	e8 cd ff ff ff       	call   c0021ca0 <APICTimer::~APICTimer()>
c0021cd3:	83 c4 10             	add    esp,0x10
c0021cd6:	83 ec 08             	sub    esp,0x8
c0021cd9:	68 60 01 00 00       	push   0x160
c0021cde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ce2:	e8 97 ac fe ff       	call   c000c97e <operator delete(void*, unsigned long)>
c0021ce7:	83 c4 10             	add    esp,0x10
c0021cea:	83 c4 0c             	add    esp,0xc
c0021ced:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0021cf0 <PIT::~PIT()>:
c0021cf0:	83 ec 0c             	sub    esp,0xc
c0021cf3:	ba ac 53 02 c0       	mov    edx,0xc00253ac
c0021cf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cfc:	89 10                	mov    DWORD PTR [eax],edx
c0021cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d02:	83 ec 0c             	sub    esp,0xc
c0021d05:	50                   	push   eax
c0021d06:	e8 c9 e9 fe ff       	call   c00106d4 <Timer::~Timer()>
c0021d0b:	83 c4 10             	add    esp,0x10
c0021d0e:	90                   	nop
c0021d0f:	83 c4 0c             	add    esp,0xc
c0021d12:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0021d14 <PIT::~PIT()>:
c0021d14:	83 ec 0c             	sub    esp,0xc
c0021d17:	83 ec 0c             	sub    esp,0xc
c0021d1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d1e:	e8 cd ff ff ff       	call   c0021cf0 <PIT::~PIT()>
c0021d23:	83 c4 10             	add    esp,0x10
c0021d26:	83 ec 08             	sub    esp,0x8
c0021d29:	68 5c 01 00 00       	push   0x15c
c0021d2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d32:	e8 47 ac fe ff       	call   c000c97e <operator delete(void*, unsigned long)>
c0021d37:	83 c4 10             	add    esp,0x10
c0021d3a:	83 c4 0c             	add    esp,0xc
c0021d3d:	c3                   	ret    
